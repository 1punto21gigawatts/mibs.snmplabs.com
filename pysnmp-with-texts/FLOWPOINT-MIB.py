#
# PySNMP MIB module FLOWPOINT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FLOWPOINT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, iso, ModuleIdentity, enterprises, IpAddress, MibIdentifier, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Bits, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "iso", "ModuleIdentity", "enterprises", "IpAddress", "MibIdentifier", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Bits", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
flowpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 1548))
fpdod = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 1))
fpether = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 2))
fpisdn = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 3))
fpsys = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 4))
fplogin = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 5))
fpWan = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 6))
fppots = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 7))
fpdownload = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 8))
fpiptranslate = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 9))
fpdhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 10))
fpdir = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 11))
fpatm = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 12))
fpfr = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 13))
class IpxNetAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ConnectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("async", 1), ("isdn", 2), ("fr", 3), ("dds", 4), ("x25", 5))

class AuthenProtoType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("pap", 2), ("chap", 3))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class DhcpOptionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("byte", 2), ("word", 3), ("long", 4), ("longint", 5), ("binary", 6), ("ipaddress", 7), ("string", 8))

dodTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 1), )
if mibBuilder.loadTexts: dodTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodTable.setDescription('The DOD basic configuration table for each remote connection. All of the DOD tables are indexed (identified) by DestinationName. ')
dodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"))
if mibBuilder.loadTexts: dodEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodEntry.setDescription('')
dodTableID = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodTableID.setStatus('obsolete')
if mibBuilder.loadTexts: dodTableID.setDescription('The identifier number of this remote name. Each dod table will have a unique identifier number for it. The ID number is issued when the dod table of the destination name is created on the agent side. This object is obsoleted: use dodDestinationName as the index.')
dodDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodDestinationName.setStatus('mandatory')
if mibBuilder.loadTexts: dodDestinationName.setDescription('A textual description of the remote destination. The name is given by the manager side when the manager uses object dodTableOperation to create a new Dod record. The dodDestination is important. It will be used throughout all of the Dod database as index to access each object. ')
dodPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPassword.setStatus('mandatory')
if mibBuilder.loadTexts: dodPassword.setDescription("The password for this remote connection. It is used to check the remote's password when the remote client or server dials in. It is also used when authentication is enabled during outgoing calls. GENERR is returned if not authorized to read the dodPassword.")
dodAuthenProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 4), AuthenProtoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodAuthenProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: dodAuthenProtocol.setDescription('The minimum authentication protocol this remote connection is using. It is one of CHAP or PAP or NONE. The actual authentication phase can be performed with a better protocol than specified here: for instance if set to PAP and the remote supports CHAP (as negotiated during the LCP phase), CHAP authentication will be performed. None means that authentication of this remote is disabled during outgoing calls. All incoming calls are ALWAYS authenticated, so setting this to none prevents from accepting incoming calls.')
dodMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodMaxLinks.setStatus('mandatory')
if mibBuilder.loadTexts: dodMaxLinks.setDescription('The maximum number of links to be used when the system dials out or accepts incoming calls. Should be 1 or 2 for BRI lines.')
dodBWThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBWThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: dodBWThreshold.setDescription('The threshold of bandwidth utilization of established links used to trigger an additional call, expressed as an integer percentage, i.e. 0 to 100. 0 means that all available links are dialed at once while 100 means that no additional links are used. The type of bandwidth measured by this object is defined by dodBODType.')
dodPreferType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 7), ConnectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPreferType.setStatus('mandatory')
if mibBuilder.loadTexts: dodPreferType.setDescription('The preferred line connection type.')
dodTearDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodTearDownTimer.setStatus('mandatory')
if mibBuilder.loadTexts: dodTearDownTimer.setDescription('The timeout limit to tear down the link when there is no activity for the link, expressed in seconds. ')
dodSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodSourceIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodSourceIPAddress.setDescription('The local IP address of the WAN port. It is used to negotiate with the remote side when dialing in or out. When nonzero, it overrides the default address, coming from the LAN port IP address (ethernet). ')
dodRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPAddress.setDescription('The remote IP address of the WAN port, if needed. Set to 0 otherwise. ')
dodSourceIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodSourceIPMask.setStatus('mandatory')
if mibBuilder.loadTexts: dodSourceIPMask.setDescription('The local IP net mask of the WAN port. It is used with dodSourceIPAddress.')
dodRemoteIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPMask.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPMask.setDescription('The remote side IP network mask. ')
dodIPXNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 13), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXNetAddress.setDescription('The IPX network address associated with the WAN link when connected to this remote.')
dodIPFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFilters.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFilters.setDescription('Number of IP filters currently defined for this remote.')
dodIPXFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPXFilters.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilters.setDescription('Number of IPX filters currently defined for this remote')
dodRemoteIPNets = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPNets.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNets.setDescription('This object describes the number of static IP routing entries for this destination name or connection. The static IP routing table is defined in another group.')
dodRemoteIPXNets = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNets.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNets.setDescription('This object describes the number of static IPX routing entries for this destination. The static IPX routing table is defined in another group. ')
dodRemoteIPXSAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPs.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPs.setDescription('This object describes the number of static IPX SAP entries for this destination. The static IPX SAP table is defined in another group. ')
dodRemoteMacState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteMacState.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteMacState.setDescription("This object controls the current bridge state (enabled or disabled) for this destination. When one of the remote destinations is turned on, the LAN port (ethernet) bridge capability will be turned on also, after a reboot. If this destination's bridge state is disabled and the bridge state of all the other destinations is also disabled, the LAN port bridge state will be disabled. Otherwise, if another destination's bridge state is still enabled, the LAN port bridge state will stay enabled. This mechanism is implemented in the system.")
dodRemoteMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteMacs.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteMacs.setDescription('The number of specific MAC addresses defined to be statically bridged to this remote.')
dodLastActivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodLastActivityTime.setStatus('mandatory')
if mibBuilder.loadTexts: dodLastActivityTime.setDescription('The last activity time with this destination')
dodTableOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodTableOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dodTableOperation.setDescription('This object is used to create a new DOD record or to delete a DOD record.')
dodMinLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodMinLinks.setStatus('mandatory')
if mibBuilder.loadTexts: dodMinLinks.setDescription('The minimum number of links to be used when the system dials out or accepts incoming calls. Must be lower or equal to dodMaxLinks.')
dodBODType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("output", 2), ("input", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBODType.setStatus('mandatory')
if mibBuilder.loadTexts: dodBODType.setDescription('The type of traffic to which bandwidth measurement (defined by dodBWThreshold) applies.')
dodIpOptRecvRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIP.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptRecvRIP.setDescription('Allows processing of RIP packets received from this destination, when connected and IP routing is enabled in a RIP 1 compatible manner. dodIpOptRecvRIP, dodIpOptRecvRIP1, and dodIpOptRecvRIP2 are mutually exclusive.')
dodIpOptSendRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIP.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptSendRIP.setDescription('Allows sending of RIP packets to this destination when connected and IP routing is enabled in a RIP 1 compatible manner. dodIpOptSendRIP, dodIpOptSendRIP1, and dodIpOptSendRIP2 are mutually exclusive.')
dodIpOptRecvRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIPDefault.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptRecvRIPDefault.setDescription('Allows updating of the IP default route when receiving a RIP packet from this destination for the route 0.0.0.0.')
dodIpOptSendRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIPDefault.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptSendRIPDefault.setDescription('Allows sending of the IP default route (if known) to this destination when connected, as 0.0.0.0.')
dodIpOptKeepPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptKeepPrivate.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptKeepPrivate.setDescription("Allows to keep the route to this destination private, i.e. don't advertise it to other destinations")
dodBrOptUseStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBrOptUseStp.setStatus('mandatory')
if mibBuilder.loadTexts: dodBrOptUseStp.setDescription('Allows use of Bridging Spanning Tree Protocol when connected to this destination (causes a 40 second startup delay): use when topology loops are likely.')
dodPPPOptUseLCPEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPPPOptUseLCPEcho.setStatus('mandatory')
if mibBuilder.loadTexts: dodPPPOptUseLCPEcho.setDescription('Perform a PPP LCP Echo request at regular intervals when connected to this destination.')
dodEntryIsDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodEntryIsDisabled.setStatus('mandatory')
if mibBuilder.loadTexts: dodEntryIsDisabled.setDescription('This database entry is active (enabled) or temporarily disabled (i.e. bypassed when searching the database). This eliminates the need for constant add/removes.')
dodCallbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("callback-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodCallbackOption.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallbackOption.setDescription("This option defines under what circumstances this system is allowed to dial the specified remote. The setting 'enable' means that this system is free to call the specified remote on its own and also to dial it back. Under the 'disable' setting, dialing back is never a possibility, but this system can dial the remote on its own if a phone number exists for it. The 'callback-only' setting prevents this system from calling the remote on its own: it will only perform the dial-back service. Note: in order to implement dial-back, Caller entries for this remote must exist (in dodCallerTable). This allows this system to identify what remote is calling, locating its database information and possibly calling it back. Caller Id verification (in fpSysCallerIdTable) is independent but uses the same dodCallerTable information.")
dodSendDataAsVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodSendDataAsVoice.setStatus('mandatory')
if mibBuilder.loadTexts: dodSendDataAsVoice.setDescription('This option determines whether ISDN data calls issued to this remote should be generated as voice calls instead of restricted or unrestricted digital (ISDN only).')
dodIPXNetStrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXNetStrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXNetStrAddress.setDescription('The IPX network address associated with the WAN link when connected to this remote. This is an alternative to the dodIPXNetAddress object to be used when OCTET STRINGs are not implemented. In this case, specify the IPX network number as an ASCII string containing from 1 to 8 characters, to be converted to hexadecimal by the firmware.')
dodOurSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodOurSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: dodOurSystemName.setDescription('Our system name (also called user name) when initiating a communication with this remote. It is used to override the global system name (fpSysName) and is useful when the name was assigned by the remote system admin, not by this system admin, in order to avoid using the same name (not under our control) for all connections.')
dodOurPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodOurPassword.setStatus('mandatory')
if mibBuilder.loadTexts: dodOurPassword.setDescription('Our system password when initiating a communication with this remote. It is used to override the global system password (when not empty) and is useful when the password was assigned by the remote system admin, not by this system admin, in order to avoid using the same password (not under our control) for all connections. GENERR is returned if not authorized to read the dodOurPassword.')
dodPPPCallbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("authentication", 2), ("dial-string", 3), ("location-string", 4), ("e164-string", 5), ("name-string", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPPPCallbackOption.setStatus('mandatory')
if mibBuilder.loadTexts: dodPPPCallbackOption.setDescription("This option defines under what circumstances this system is requesting a callback by using a method within the PPP protocol suite (as opposed to an ISDN callback). The possibilities are: - don't do any PPP callback (none) - ask the peer to us back based on the database record that he has for us (authentication). - supply the string (i.e. phone number, including prefixes etc,...) that the peer should use to call us back. - supply a location information which the peer will use in addition to our user name to call us back. - supply a E.164 string to the peer to call us back. - supply a generic string (name-string) to the peer so that it can use to it call us back using whatever method it deems appropriate. This router will force this to be the same as the remote name (index in the remote database) if it receives such a string.")
dodPPPCallbackInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPPPCallbackInfo.setStatus('mandatory')
if mibBuilder.loadTexts: dodPPPCallbackInfo.setDescription('When the dodPPPCallbackOption is set to something other than none(1), this fields contains the additional information sent to the PPP peer when requested a callback.')
dodDontAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodDontAuthenticate.setStatus('mandatory')
if mibBuilder.loadTexts: dodDontAuthenticate.setDescription('When enabled (1), do not request any authentication protocol when dialing out this destination. Note that an incoming call from this remote still requires some form of authentication (to find this remote entry record), as the key to the record is the authenticated name.')
dodIPAddressTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPAddressTranslation.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPAddressTranslation.setDescription('When enabled (1), do IP address translation for traffic to/from this remote.')
dodIpOptRecvRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIP1.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptRecvRIP1.setDescription('Allows processing of RIP packets received from this destination, when connected and IP routing is enabled using RIP 1 only. dodIpOptRecvRIP, dodIpOptRecvRIP1, and dodIpOptRecvRIP2 are mutually exclusive.')
dodIpOptSendRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIP1.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptSendRIP1.setDescription('Allows sending of RIP packets to this destination when connected and IP routing is enabled using RIP 1 only. dodIpOptSendRIP, dodIpOptSendRIP1, and dodIpOptSendRIP2 are mutually exclusive.')
dodIpOptRecvRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIP2.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptRecvRIP2.setDescription('Allows processing of RIP packets received from this destination, when connected and IP routing is enabled using RIP 2 only. dodIpOptRecvRIP, dodIpOptRecvRIP1, and dodIpOptRecvRIP2 are mutually exclusive.')
dodIpOptSendRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIP2.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpOptSendRIP2.setDescription('Allows sending of RIP packets to this destination when connected and IP routing is enabled using RIP 2 only. dodIpOptSendRIP, dodIpOptSendRIP1, and dodIpOptSendRIP2 are mutually exclusive.')
dodProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("protocolppp", 1), ("protocol1483pppllc", 2), ("protocol1483snap", 3), ("protocol1483snapmer", 4), ("protocol1483snapfr", 5), ("protocolrawip", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: dodProtocol.setDescription('Type of protocol used for communicating with this remote.')
dodCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodCompression.setStatus('mandatory')
if mibBuilder.loadTexts: dodCompression.setDescription('When enabled (1), do compression for traffic to/from this remote.')
dodPasswordSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodPasswordSpecified.setStatus('mandatory')
if mibBuilder.loadTexts: dodPasswordSpecified.setDescription('Return true if the password for this remote connection has been specified.')
dodOurPasswordSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodOurPasswordSpecified.setStatus('mandatory')
if mibBuilder.loadTexts: dodOurPasswordSpecified.setDescription('Return true if our system password for this remote connnection has been specified.')
dodBlockNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBlockNetBIOS.setStatus('mandatory')
if mibBuilder.loadTexts: dodBlockNetBIOS.setDescription('When enabled (1), block NetBIOS traffic to this remote.')
dodMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodMtu.setStatus('mandatory')
if mibBuilder.loadTexts: dodMtu.setDescription('When non-zero, the desired MTU size for this remote. When zero, use the default MTU size for the interface. The MTU size used is the minimum of the desired MTU size for this remote and the maximum MTU size allowed for the interface.')
dodIpSlaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpSlaveMode.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpSlaveMode.setDescription('When enabled (1), always accept peer proposal for our IP address for our WAN interface.')
dodReacquireIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodReacquireIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dodReacquireIpAddr.setDescription('When enabled (1), try to reacquire the last used IP address for this interface IF we believe any TCP connections are still active to this remote.')
dodIpxOptRIPSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpxOptRIPSAP.setStatus('mandatory')
if mibBuilder.loadTexts: dodIpxOptRIPSAP.setDescription('When enabled (1), allows IPXCP to negotiate the use of RIP and SAP IPX traffic. Actual use of the RIP and SAP protocols will depend on the capabilities of the remote at the time the PPP connection is established.')
dodCallIDTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 2), )
if mibBuilder.loadTexts: dodCallIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallIDTable.setDescription('A list of Call identifiers (phone number, DLCI ....) for a particular destination name and link type (ISDN). This table includes only two entries, type and phone number count.')
dodCallIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 2, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodCallIDType"))
if mibBuilder.loadTexts: dodCallIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallIDEntry.setDescription('An entry of Call identifier for each connection type.')
dodCallIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 2, 1, 1), ConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodCallIDType.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallIDType.setDescription('The connection type.')
dodCallIDPhones = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodCallIDPhones.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallIDPhones.setDescription('Number of entries in the dodPhoneTable for this type of connection and this remote.')
dodPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 3), )
if mibBuilder.loadTexts: dodPhoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodPhoneTable.setDescription('')
dodPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodCallIDType"), (0, "FLOWPOINT-MIB", "dodPhoneIndex"))
if mibBuilder.loadTexts: dodPhoneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodPhoneEntry.setDescription('')
dodPhoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodPhoneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dodPhoneIndex.setDescription('It is an index to recognize which phone number is in the table with the specified CallIDType and DestinationName. ')
dodPhoneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPhoneSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: dodPhoneSpeed.setDescription('The line speed (in bits per seconds) for asynchronous connections.')
dodPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dodPhoneNumber.setDescription('The phone number string.')
dodRemoteMacTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 4), )
if mibBuilder.loadTexts: dodRemoteMacTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteMacTable.setDescription('A table of MAC addresses for bridging of the specified destination name. The table is indexed by destination name and MAC address. ')
dodRemoteMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteMacAddress"))
if mibBuilder.loadTexts: dodRemoteMacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteMacEntry.setDescription('')
dodRemoteMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteMacIndex.setStatus('obsolete')
if mibBuilder.loadTexts: dodRemoteMacIndex.setDescription("The index number is not used currently. User don't need to implement it currently. The table is indexed by the MAC address.")
dodRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteMacAddress.setDescription('Contains the IEEE unique MAC address of statically configured devices for bridging purposes. When all of the 6 bytes of this MAC address are zero, the entry is called the unknown address. Any packet with a destination address not in the static or dynamic MAC table of any remote bridge will be sent to the default remote bridge (which has a dodRemoteMacAddress entry defined for the unknown MAC address).. There can be only one remote destination specified as default bridge, i.e. containing the unknown MAC address.')
dodRemoteMacOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteMacOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteMacOperation.setDescription(' add -- add a static MAC address to be bridge to this remote destination. remove -- remove a static MAC address.')
dodRemoteIPNetTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 5), )
if mibBuilder.loadTexts: dodRemoteIPNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNetTable.setDescription('The static IP routing table. It is based on indexes of destination name and IP net address.')
dodRemoteIPNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteIPNetAddress"))
if mibBuilder.loadTexts: dodRemoteIPNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNetEntry.setDescription('')
dodRemoteIPNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPNetIndex.setStatus('obsolete')
if mibBuilder.loadTexts: dodRemoteIPNetIndex.setDescription('This index is not currently in use.')
dodRemoteIPNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNetAddress.setDescription('The IP network address of an entry of the static IP routing table. ')
dodRemoteIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNetMask.setDescription('The IP network mask of an entry of the static IP routing table. ')
dodRemoteIPNetHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPNetHops.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNetHops.setDescription('The hop count for the specified IP network address and destination name. ')
dodRemoteIPNetOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteIPNetOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNetOperation.setDescription('add -- add a static IP route to this destination. remove -- delete a static IP route to this destination. To access the other objects in this entry (mask, hops) the SNMP manager should add an entry first and then set those other objects.')
dodRemoteIPNetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPNetGateway.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPNetGateway.setDescription('The IP address of the gateway to which packets are sent when the static route is over a broadcast medium, such as when dodProtocol is RFC1483 with Mac Encapsulated Routing. When the medium is point-to-point, this field is ignored.')
dodRemoteIPXNetTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 6), )
if mibBuilder.loadTexts: dodRemoteIPXNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNetTable.setDescription('The static IPX routing table. It is based on indexes of destination name and IPX network number.')
dodRemoteIPXNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteIPXNetAddress"))
if mibBuilder.loadTexts: dodRemoteIPXNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNetEntry.setDescription('')
dodRemoteIPXNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNetIndex.setStatus('obsolete')
if mibBuilder.loadTexts: dodRemoteIPXNetIndex.setDescription('Use dodRemoteIPXNetAddress as the index.')
dodRemoteIPXNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 2), IpxNetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNetAddress.setDescription('The IPX network address of an entry of the static IPX routing table. ')
dodRemoteIPXNetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXNetMetric.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNetMetric.setDescription('The number of hops to reach this IPX network (via this destination).')
dodRemoteIPXNetTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXNetTicks.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNetTicks.setDescription('Number of 1/18th of seconds ticks necessary to reach this IPX network number (via this destination).')
dodRemoteIPXNetOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteIPXNetOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNetOperation.setDescription('add -- add a static IPX route to this destination remove -- delete a static IPX route for this destination For IPX metric and ticks, the SNMP manager should create the entry first and then set those attributes.')
dodRemoteIPXNetStrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNetStrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXNetStrAddress.setDescription('The IPX network address of an entry of the static IPX routing table. This is an alternative to the dodRemoteIPXNetAddress object to be used when OCTET STRINGs are not implemented. In this case, specify the IPX network number as an ASCII string containing from 1 to 8 characters, to be converted to hexadecimal by the firmware.')
dodRemoteIPXSAPTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 7), )
if mibBuilder.loadTexts: dodRemoteIPXSAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPTable.setDescription('The remote IPX SAP table. It is based on indexes of DOD destination name, IPX network address, IPX node number, and IPX socket number.')
dodRemoteIPXSAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteIPXSAPNetAddress"), (0, "FLOWPOINT-MIB", "dodRemoteIPXSAPNodeAddress"), (0, "FLOWPOINT-MIB", "dodRemoteIPXSAPSocket"))
if mibBuilder.loadTexts: dodRemoteIPXSAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPEntry.setDescription('')
dodRemoteIPXSAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPIndex.setStatus('obsolete')
if mibBuilder.loadTexts: dodRemoteIPXSAPIndex.setDescription('Use dodRemoteIPXSAPNetAddress, dodRemoteIPXSAPNodeAddress dodRemoteIPXSAPSocket as indexes. Not used.')
dodRemoteIPXSAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPName.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPName.setDescription('The name by which this IPX service is known.')
dodRemoteIPXSAPNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 3), IpxNetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPNetAddress.setDescription('The internal IPX network number of the server providing this particular IPX service.')
dodRemoteIPXSAPNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPNodeAddress.setDescription('The node address on the IPX network number on which a server provides this particular IPX service.')
dodRemoteIPXSAPSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPSocket.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPSocket.setDescription('The socket (i.e. internal port number) at which the specified IPX service is provided in the server.')
dodRemoteIPXSAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPType.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPType.setDescription('The well-known type of service (i.e. File Service, Advertising Print Service, etc...)')
dodRemoteIPXSAPHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPHops.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPHops.setDescription('The number of hops necessary to reach the provider of this service.')
dodRemoteIPXSAPOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPOperation.setDescription('add -- add a new IPX SAP service to this destination remove -- delete an IPX SAP service from this destination For the IPX network address, node address, socket number, type and hops, the SNMP manager should set those after creating the entry. ')
dodRemoteIPXSAPStrNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPStrNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPStrNetAddress.setDescription('The internal IPX network number of the server providing this particular IPX service, expressed as an ASCII string, converted to hexadecimal by the firmware.')
dodRemoteIPXSAPStrSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPStrSocket.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPStrSocket.setDescription('The socket (i.e. internal port number) at which the specified IPX service is provided in the server, expressed as an ASCII string, converted to hexadecimal by the firmware.')
dodRemoteIPXSAPStrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPStrType.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteIPXSAPStrType.setDescription('The well-known type of service (i.e. File Service, Advertising Print Service, etc...), expressed as an ASCII string, converted to hexadecimal by the firmware.')
dodIPFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 8), )
if mibBuilder.loadTexts: dodIPFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFilterTable.setDescription('A set of IP filters defined for this remote.')
dodIPFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodIPFilterIndex"))
if mibBuilder.loadTexts: dodIPFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFilterEntry.setDescription('')
dodIPFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFilterIndex.setDescription('')
dodIPFilterDstNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPFilterDstNetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFilterDstNetAddr.setDescription('')
dodIPFilterSrcNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPFilterSrcNetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFilterSrcNetAddr.setDescription('')
dodIPFilterAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPFilterAllow.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFilterAllow.setDescription('')
dodIPXFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 9), )
if mibBuilder.loadTexts: dodIPXFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterTable.setDescription('A set of IPX filters defined for this remote.')
dodIPXFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodIPXFilterIndex"))
if mibBuilder.loadTexts: dodIPXFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterEntry.setDescription('')
dodIPXFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPXFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterIndex.setDescription('')
dodIPXFilterDstNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 2), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterDstNetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterDstNetAddr.setDescription('')
dodIPXFilterDstNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterDstNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterDstNodeAddr.setDescription('')
dodIPXFilterDstSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterDstSocket.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterDstSocket.setDescription('')
dodIPXFilterSrcNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 5), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterSrcNetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterSrcNetAddr.setDescription('')
dodIPXFilterSrcNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterSrcNodeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterSrcNodeAddr.setDescription('')
dodIPXFilterSrcSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterSrcSocket.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterSrcSocket.setDescription('')
dodIPXFilterAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterAllow.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPXFilterAllow.setDescription('')
dodOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dodOperation.setDescription(' Use this object to give commands to save, load or erase DOD configuration in FLASH memory.')
dodRemoteMacDefault = MibScalar((1, 3, 6, 1, 4, 1, 1548, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteMacDefault.setStatus('mandatory')
if mibBuilder.loadTexts: dodRemoteMacDefault.setDescription(' for GET : This object gives the remote destination name of default bridge. for SET : To set new default bridge, just give the the desired destination name. To delete and disable existing default bridge, just give a NULL string.')
dodCallerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 12), )
if mibBuilder.loadTexts: dodCallerTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallerTable.setDescription('The Caller table: this is the list of numbers to search when receiving an incoming call, to identify the remote peer which made that call and thus find the corresponding dodEntry record. This table is used to implement dial-back and also to implement Caller ID verification (i.e. denying access to an unknown caller).')
dodCallerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 12, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodCallIDType"), (0, "FLOWPOINT-MIB", "dodCallerNumber"))
if mibBuilder.loadTexts: dodCallerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallerEntry.setDescription('Telephone numbers (or call information) of potential callers.')
dodCallerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodCallerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallerNumber.setDescription('The number against which caller ID verification takes place or used to find out which peer is calling before dial-back takes place.')
dodCallerOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodCallerOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dodCallerOperation.setDescription('The operation being performed on a Caller data set: add or remove an entry for the specified remote and connection type.')
dodIPTranslationServerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 13), )
if mibBuilder.loadTexts: dodIPTranslationServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPTranslationServerTable.setDescription('The IP Translation Server Table. Used to select a server when doing IP address translation.')
dodIPTranslationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodIPTranslationServerIPAddress"), (0, "FLOWPOINT-MIB", "dodIPTranslationProtocol"), (0, "FLOWPOINT-MIB", "dodIPFirstTranslationPort"))
if mibBuilder.loadTexts: dodIPTranslationServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPTranslationServerEntry.setDescription('')
dodIPTranslationServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPTranslationServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPTranslationServerIPAddress.setDescription('The IP address of the Server when doing IP Address translation. ')
dodIPTranslationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPTranslationProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPTranslationProtocol.setDescription('The protocol used by this Server.')
dodIPFirstTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFirstTranslationPort.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFirstTranslationPort.setDescription('First public port in range used by this server. This port is what is referenced by the client. A port of 0 is a wild-card signifying any port.')
dodIPLastTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPLastTranslationPort.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPLastTranslationPort.setDescription('Last public port in range used by this server. This port is the last port in range and is referenced by the client.. This value must be greater than or equal first public port in range.')
dodIPFirstPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFirstPrivatePort.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPFirstPrivatePort.setDescription('This is the first private port in range as seen by the server. The public port range is mapped to this private port range. If the public port range is to be the same as the private port range, this port should be the same as the first public port.')
dodIPTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPTranslationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dodIPTranslationStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
dodNatHostMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 14), )
if mibBuilder.loadTexts: dodNatHostMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: dodNatHostMappingTable.setDescription('The NAT Host Mapping Table. Used to select a NAT Host Mapping when doing IP address translation.')
dodNatHostMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodFirstPrivateIPAddress"), (0, "FLOWPOINT-MIB", "dodLastPrivateIPAddress"), (0, "FLOWPOINT-MIB", "dodFirstPublicIPAddress"))
if mibBuilder.loadTexts: dodNatHostMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dodNatHostMappingEntry.setDescription('')
dodFirstPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodFirstPrivateIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodFirstPrivateIPAddress.setDescription('The first private IP address which starts the range of private IP addresses which are mapped to public IP addresses.')
dodLastPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodLastPrivateIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodLastPrivateIPAddress.setDescription('The last private IP address which ends the range of private IP addresses which are mapped to public IP addresses.')
dodFirstPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodFirstPublicIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dodFirstPublicIPAddress.setDescription('The first public IP address which starts the range of public IP Addresses which are mapped to private IP addresses. The last public IP address in the range is calculated by counting the number of private IP addresses in the private IP address range and creating an equivalent number of IP addresses in the public IP address range so there is a one to one mapping of public IP addresses to private IP addresses.')
dodNatHostMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodNatHostMappingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dodNatHostMappingStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
fpEtherTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 2, 1), )
if mibBuilder.loadTexts: fpEtherTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherTable.setDescription('The Ethernet interface configuration table for each port')
fpEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpPortNum"))
if mibBuilder.loadTexts: fpEtherEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherEntry.setDescription('')
fpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpPortNum.setDescription('The identifier number of this interface port.')
fpBridgeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpBridgeState.setStatus('mandatory')
if mibBuilder.loadTexts: fpBridgeState.setDescription("The object is used to show current state (enabled/ disabled) of the bridging the LAN port (ethernet). 1 -- the bridging is enabled. 2 -- the bridging is disabled. The bridging is enabled/disabled by controlling the dodRemoteMacState object of all the destinations. This field is only writeable on systems that don't support remote destinations (the DOD table).")
fpIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpState.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpState.setDescription('Determines whether the IP protocol is routed (enable) or not (disable) via this LAN interface. A change requires rebooting. If the IP address and the network mask are defined and IP routing is not enabled, this system acts as an IP host only.')
fpIpxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxState.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpxState.setDescription('Determines whether the IPX protocol is routed (enable) or not (disable) via this LAN interface. A change requires rebooting.')
fpIpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpNetAddress.setDescription('This object allows to get or set the IP address for this LAN interface: a change requires rebooting.')
fpIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpNetMask.setDescription('This object allows to get or set the IP network mask for this LAN interface: a change requires rebooting.')
fpIpxNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 7), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpxNetAddress.setDescription('This objects allows to get or set the IPX external network number for this LAN port: a change requires rebooting.')
fpIpxFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frame-8022", 1), ("frame-8023", 2), ("frame-dix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpxFrameType.setDescription('This objects allows to get or set the IPX frame type generated by the router for this LAN port: a change requires rebooting. Possible values are: 802.2 (using the Novell SAP 0xE0), 802.3 (the IPX packet follows the Ethernet header immediately with no type) and Ethernet-II (named DIX) where the Ethertype is 0x8137.')
fpEtherIpOptRecvRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP.setDescription('Allows the processing of IP RIP 1 and RIP 2 packets received from for this LAN port: a change requires rebooting. This setting is enabled by default. fpEtherIpOptRecvRIP, fpEtherIpOptRecvRIP1, and fpEtherIpOptRecvRIP2 are mutually exclusive.')
fpEtherIpOptSendRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIP.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptSendRIP.setDescription('Allows sending IP RIP 1 compatible packets to this LAN port when IP routing is enabled: a change requires rebooting. This setting is enabled by default. fpEtherIpOptSendRIP, fpEtherIpOptSendRIP1, and fpEtherIpOptSendRIP2 are mutually exclusive.')
fpEtherIpOptRecvRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIPDefault.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptRecvRIPDefault.setDescription('Allows updating the IP routing table with the default route (i.e. 0.0.0.0) received from this LAN port when IP routing is enabled: this setting is enabled by default. A change on this object requires rebooting.')
fpEtherIpOptSendRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIPDefault.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptSendRIPDefault.setDescription('Allows this system to advertise itself as the default router on this LAN port when IP routing is enabled. This setting is enabled by default. A change requires rebooting.')
fpIpxStrNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxStrNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpxStrNetAddress.setDescription('This objects allows to get or set the IPX external network number for this LAN port: a change requires rebooting. This object is expressed as an ASCII string, converted to hexadecimal by the firmware: use this object instead of fpIpxNetAddress when OCTET STRING is not implemented.')
fpIpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpDefaultGateway.setDescription('This object allows to get or set the IP address for the default Gateway (default route), and assign it to the interface specified by fpPortNum. This is particularly useful when the device operates as an end-system (host) as opposed to performing IP routing. There can be only one default route in the whole system. When set to 0.0.0.0, no default is defined statically, and it may be discovered dynamically if RIP is allowed on the LAN interface.')
fpEtherIpOptRecvRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP1.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP1.setDescription('Allows the processing of IP RIP 1 packets received from for this LAN port: a change requires rebooting. fpEtherIpOptRecvRIP, fpEtherIpOptRecvRIP1, and fpEtherIpOptRecvRIP2 are mutually exclusive.')
fpEtherIpOptSendRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIP1.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptSendRIP1.setDescription('Allows sending IP RIP 1 packets to this LAN port when IP routing is enabled: a change requires rebooting. fpEtherIpOptSendRIP, fpEtherIpOptSendRIP1, and fpEtherIpOptSendRIP2 are mutually exclusive.')
fpEtherIpOptRecvRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP2.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP2.setDescription('Allows the processing of IP RIP 2 packets received from for this LAN port: a change requires rebooting. fpEtherIpOptRecvRIP, fpEtherIpOptRecvRIP1, and fpEtherIpOptRecvRIP2 are mutually exclusive.')
fpEtherIpOptSendRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIP2.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherIpOptSendRIP2.setDescription('Allows sending IP RIP 2 packets to this LAN port when IP routing is enabled: a change requires rebooting. fpEtherIpOptSendRIP, fpEtherIpOptSendRIP1, and fpEtherIpOptSendRIP2 are mutually exclusive.')
fpIpRIPMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpRIPMulticastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpRIPMulticastAddress.setDescription('This object allows to get or set the RIP 2 Multicast address for this LAN interface: set to 0.0.0.0 to restore the default multicast address (i.e. 224.0.0.9). A change requires rebooting.')
fpNATState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpNATState.setStatus('mandatory')
if mibBuilder.loadTexts: fpNATState.setDescription('Determines whether IP address/port translation is performed via this LAN interface if the IP protocol is routed (enable) through this LAN interface. A change requires rebooting.')
fpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpMtu.setStatus('mandatory')
if mibBuilder.loadTexts: fpMtu.setDescription('When non-zero, the desired MTU size for this interface. When zero, use the default MTU size for the interface. The MTU size used is the minimum of the desired MTU size for this interface and the maximum MTU size allowed for the interface.')
fpEtherOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpEtherOperation.setStatus('mandatory')
if mibBuilder.loadTexts: fpEtherOperation.setDescription('This object is used to save/load/erase the LAN port (ethernet) configuration to/from FLASH.')
etherNatHostMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 2, 3), )
if mibBuilder.loadTexts: etherNatHostMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: etherNatHostMappingTable.setDescription('The NAT Host Mapping Table. Used to select a NAT Host Mapping when doing IP address translation.')
etherNatHostMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpPortNum"), (0, "FLOWPOINT-MIB", "etherFirstPrivateIPAddress"), (0, "FLOWPOINT-MIB", "etherLastPrivateIPAddress"), (0, "FLOWPOINT-MIB", "etherFirstPublicIPAddress"))
if mibBuilder.loadTexts: etherNatHostMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: etherNatHostMappingEntry.setDescription('')
etherFirstPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherFirstPrivateIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: etherFirstPrivateIPAddress.setDescription('The first private IP address which starts the range of private IP addresses which are mapped to public IP addresses.')
etherLastPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherLastPrivateIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: etherLastPrivateIPAddress.setDescription('The last private IP address which ends the range of private IP addresses which are mapped to public IP addresses.')
etherFirstPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherFirstPublicIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: etherFirstPublicIPAddress.setDescription('The first public IP address which starts the range of public IP Addresses which are mapped to private IP addresses. The last public IP address in the range is calculated by counting the number of private IP addresses in the private IP address range and creating an equivalent number of IP addresses in the public IP address range so there is a one to one mapping of public IP addresses to private IP addresses.')
etherNatHostMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherNatHostMappingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: etherNatHostMappingStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
etherIPTranslationServerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 2, 4), )
if mibBuilder.loadTexts: etherIPTranslationServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPTranslationServerTable.setDescription('The IP Translation Server Table. Used to select a server when doing IP address translation.')
etherIPTranslationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpPortNum"), (0, "FLOWPOINT-MIB", "etherIPTranslationServerIPAddress"), (0, "FLOWPOINT-MIB", "etherIPTranslationProtocol"), (0, "FLOWPOINT-MIB", "etherIPFirstTranslationPort"))
if mibBuilder.loadTexts: etherIPTranslationServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPTranslationServerEntry.setDescription('')
etherIPTranslationServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPTranslationServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPTranslationServerIPAddress.setDescription('The IP address of the Server when doing IP Address translation. ')
etherIPTranslationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPTranslationProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPTranslationProtocol.setDescription('The protocol used by this Server.')
etherIPFirstTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPFirstTranslationPort.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPFirstTranslationPort.setDescription('First public port in range used by this server. This port is what is referenced by the client. A port of 0 is a wild-card signifying any port.')
etherIPLastTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPLastTranslationPort.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPLastTranslationPort.setDescription('Last public port in range used by this server. This port is the last port in range and is referenced by the client.. This value must be greater than or equal first public port in range.')
etherIPFirstPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPFirstPrivatePort.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPFirstPrivatePort.setDescription('This is the first private port in range as seen by the server. The public port range is mapped to this private port range. If the public port range is to be the same as the private port range, this port should be the same as the first public port.')
etherIPTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherIPTranslationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: etherIPTranslationStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
fpIsdnCh1Spid = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh1Spid.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh1Spid.setDescription('The spid number string for 1st B channel.')
fpIsdnCh2Spid = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh2Spid.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh2Spid.setDescription('The spid number string for 2nd B channel.')
fpIsdnCh1DirectoryNum = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh1DirectoryNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh1DirectoryNum.setDescription('The directory number string for 1st B channel.')
fpIsdnCh2DirectoryNum = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh2DirectoryNum.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh2DirectoryNum.setDescription('The directory number string for 2nd B channel.')
fpIsdnSwitchType = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 7, 8, 9, 10, 12, 14))).clone(namedValues=NamedValues(("att5ess", 2), ("dms100", 5), ("kdd", 7), ("net3", 8), ("net3swiss", 9), ("ni1", 10), ("ntt", 12), ("auto", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnSwitchType.setDescription('Specifies the ISDN switch type.')
fpIsdnOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpIsdnOperation.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnOperation.setDescription('To save or load or erase the ISDN configuration to/from FLASH memory.')
fpIsdnCh1Status = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("opening", 2), ("connected", 3), ("closing", 4), ("alerting", 5), ("dialing", 6), ("out-of-service", 7), ("in-use-by-pots", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh1Status.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh1Status.setDescription('This object shows the current status of B channel 1.')
fpIsdnCh2Status = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("opening", 2), ("connected", 3), ("closing", 4), ("alerting", 5), ("dialing", 6), ("out-of-service", 7), ("in-use-by-pots", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh2Status.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh2Status.setDescription('This object shows the current status of B channel 2.')
fpIsdnCh1ClearCode = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh1ClearCode.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh1ClearCode.setDescription('The clearing code of the last call, (0 if a call is in progress) for B channel 1.')
fpIsdnCh2ClearCode = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh2ClearCode.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh2ClearCode.setDescription('The clearing code of the last call, (0 if a call is in progress) for B channel 2.')
fpIsdnCh1ClearReason = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh1ClearReason.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh1ClearReason.setDescription('An explanation (in ASCII) of why the last called was cleared for B channel 1 (the null string if a call is in progress).')
fpIsdnCh2ClearReason = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh2ClearReason.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnCh2ClearReason.setDescription('An explanation (in ASCII) of why the last called was cleared for B channel 2 (the null string if a call is in progress).')
fpIsdnSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("speed-56k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnSpeed.setDescription('Whether the ISDN calls are made at a speed determined by the speed defined in the remote database and processed as indicated by the network (auto) or locked at 56Kb/s, regardless of the remote database settings and the parameters indicated by the network in incoming calls.')
fpIsdnDataCallsIn = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnDataCallsIn.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnDataCallsIn.setDescription('This object determines whether ISDN data calls can be received.')
fpIsdnDataCallsOut = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnDataCallsOut.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnDataCallsOut.setDescription('This object determines whether ISDN data calls can be generated by the device. This can be useful to let the device place voice calls only while ensuring that no data call is ever placed because the filtering/spoofing did not eliminate spurious traffic.')
fpIsdnLineStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnLineStatus.setDescription('This object shows the current status of the line.')
fpIsdnStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inService", 1), ("notOperational", 2), ("startAutoSpid", 3), ("stopAutoSpid", 4), ("autoSpidActive", 5), ("validatingSpids", 6), ("qualifyingSpids", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnStatus.setDescription('This object sets/returns the service state for the ISDN line.')
fpIsdnAutoSpidCounter = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnAutoSpidCounter.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnAutoSpidCounter.setDescription('The spid index currently being tried when doing auto spid detection.')
fpIsdnSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 3, 19), )
if mibBuilder.loadTexts: fpIsdnSwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnSwitchTable.setDescription('The switch table contains the switches supported by this kernel.')
fpIsdnSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 3, 19, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpIsdnSwitchTypeIndex"))
if mibBuilder.loadTexts: fpIsdnSwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnSwitchEntry.setDescription('Each entry represents one switch type supported by this kernel.')
fpIsdnSwitchTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnSwitchTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fpIsdnSwitchTypeIndex.setDescription('Current switch type index.')
fpSysName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysName.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysName.setDescription('An administratively-assigned name for this managed node. It will be the same name as the one defined in MIB2. ')
fpSysMessage = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysMessage.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysMessage.setDescription('An administratively-assigned message for this managed node. ')
fpSysPassword = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysPassword.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysPassword.setDescription('An administratively-assigned password for this managed node. The password will be used in the authentication phase of PPP. GENERR is returned if not authorized to read the fpSysPassword.')
fpSysAuthen = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 4), AuthenProtoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysAuthen.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysAuthen.setDescription("An administratively-assigned authentication override type for this managed node. This is normally set to NONE, which means the normal rules apply. When set to PAP, all the remote entries that have a setting of PAP don't attempt to negotiate CHAP first, but propose only PAP. When set to CHAP, only CHAP authentication is accepted by this node (this makes it easier than changing all the remote entries to have their minimal level of authentication set to CHAP).")
fpSysOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3), ("reboot", 4), ("set-clock", 5), ("reboot-like-factory", 6), ("reboot-like-new", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysOperation.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysOperation.setDescription('Use this object to save/load the system configuration (only what is defined in this group) to/from FLASH memory, or perform other control operation such as reboot.')
fpSysSoftwareVer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysSoftwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysSoftwareVer.setDescription('Displays the software version run by the system.')
fpSysHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysHardwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysHardwareVer.setDescription('Displays the system model number, revision and serial number. ')
fpLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpLoginPassword.setStatus('mandatory')
if mibBuilder.loadTexts: fpLoginPassword.setDescription("Assign or change the administrator's password for login. Writing objects can only be performed when logged-in, using this password. To supply the password for login purposes, use the fpLoginTable object in the fplogin group. GENERR is returned if not authorized to read the fpLoginPassword.")
fpWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpWriteTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: fpWriteTimeout.setDescription('To set and retrieve a timeout value (in minutes) during which a user logged in can modify objects. When setting this value, the countdown restarts. The timer is first started when the login password is supplied (see the LoginTable object). When the timer expires, a new login must be performed or all writes to writable objects return READONLY. Default -- 10 minutes (until changed). No security timeout -- set to 0.')
fpWriteTimer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWriteTimer.setStatus('mandatory')
if mibBuilder.loadTexts: fpWriteTimer.setDescription('This object retrieves the current security timer value. It returns how many minutes are left (if any) before a new login must be performed.')
fpCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: fpCommunityName.setDescription("To change or retrieve the SNMP community name. The default name is 'public'.")
fpInternetFireWall = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpInternetFireWall.setStatus('mandatory')
if mibBuilder.loadTexts: fpInternetFireWall.setDescription('To enable or disable the internet firewall filter. The filter discards any IP packet arriving from the WAN with a source IP address belonging to the LAN.')
fpSysLogout = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysLogout.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysLogout.setDescription('Writing to this object prevents any change from any SNMP manager (until logged in again). Changes from telnet and the console are controlled via the login and logout commands, and are independent. After a reboot, SNMP managers are logged out and should log in before changing any configuration.')
fpIpxSupported = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIpxSupported.setStatus('mandatory')
if mibBuilder.loadTexts: fpIpxSupported.setDescription('Indicates whether or not IPX is supported in the router software. For compatibility with previous non-IPX-capable builds, the manager should consider that an error of NOSUCHNAME on this object means that IPX is NOT supported. ')
fpSysCallerIdTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 15), )
if mibBuilder.loadTexts: fpSysCallerIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysCallerIdTable.setDescription('This table defines the types of connections for which CallerID information should be verified.')
fpSysCallerIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 15, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodCallIDType"))
if mibBuilder.loadTexts: fpSysCallerIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysCallerIdEntry.setDescription('An entry in the fpSysCallerIdTable specifies that calls of the type used as an index, should be validated by Caller ID verification (using dodCallerTable).')
fpCallerIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpCallerIdEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: fpCallerIdEnabled.setDescription('Set this object to enable or disable CallerId verification for the specified type of connection.')
fpMIBCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("old", 1), ("new", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpMIBCompatibility.setStatus('mandatory')
if mibBuilder.loadTexts: fpMIBCompatibility.setDescription("Indicates that this private MIB is fully compatible with RFC 1155. For compatibility with previous builds, the manager should consider that an error of NOSUCHNAME on this object means that the 'old' value applies, (meaning the enumeration of INTEGERs are mostly zero-based instead of one-based).")
fpPOTSInstalled = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPOTSInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: fpPOTSInstalled.setDescription('Indicates whether or not POTS hardware is installed AND is software supported. For compatibility with previous builds, the manager should consider that an error of NOSUCHNAME on this object means that POTS hardware and software are not available.')
fpSysLastLogEvent = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysLastLogEvent.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysLastLogEvent.setDescription('The last system event reported to the console. This includes the timestamp, the subsystem and the actual text message of the event.')
fpSysSingleUser = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysSingleUser.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysSingleUser.setDescription('This IP address used to define the single address to which IP translation was to occur (one client system at a time), or cancelling the translation when NULL. Network Address Translation (NAT) and its ability to define server mappings (with sysIPTranslationServerTable) has rendered this object obsolete: this object is now always returned as the IP address 0.0.0.0 and cannot be set to anything else.')
fpSysYear = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 20), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysYear.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysYear.setDescription('Set this object to specify the year for the real time clock, protected by a battery when the power is off. When all the related parameters (fpSysYear, fpSysMonth, fpSysDay, fpSysHour, fpSysMinute, fpSysSecond) are set, set the fpSysOperation to set-clock(5).')
fpSysMonth = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysMonth.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysMonth.setDescription('Set this object to specify the month for the real time clock, protected by a battery when the power is off. When all the related parameters (fpSysYear, fpSysMonth, fpSysDay, fpSysHour, fpSysMinute, fpSysSecond) are set, set the fpSysOperation to set-clock(5).')
fpSysDay = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysDay.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysDay.setDescription('Set this object to specify the day for the real time clock, protected by a battery when the power is off. When all the related parameters (fpSysYear, fpSysMonth, fpSysDay, fpSysHour, fpSysMinute, fpSysSecond) are set, set the fpSysOperation to set-clock(5).')
fpSysHour = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysHour.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysHour.setDescription('Set this object to specify the hour for the real time clock, protected by a battery when the power is off. When all the related parameters (fpSysYear, fpSysMonth, fpSysDay, fpSysHour, fpSysMinute, fpSysSecond) are set, set the fpSysOperation to set-clock(5).')
fpSysMinute = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysMinute.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysMinute.setDescription('Set this object to specify the minutes for the real time clock, protected by a battery when the power is off. When all the related parameters (fpSysYear, fpSysMonth, fpSysDay, fpSysHour, fpSysMinute, fpSysSecond) are set, set the fpSysOperation to set-clock(5).')
fpSysSecond = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysSecond.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysSecond.setDescription('Set this object to specify the seconds for the real time clock, protected by a battery when the power is off. When all the related parameters (fpSysYear, fpSysMonth, fpSysDay, fpSysHour, fpSysMinute, fpSysSecond) are set, set the fpSysOperation to set-clock(5).')
fpSysDefaultSingleUser = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysDefaultSingleUser.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysDefaultSingleUser.setDescription('Network Address Translation (NAT) and its ability to define server mappings (with sysIPTranslationServerTable) has rendered this object obsolete. For backwards compatibility purposes, this object still allows to set the IP address of the client for which IP address translation is to be performed by default. However, to take effect, the configuration must be saved (with fpEtherOperation=save(1)) and the system must be restarted.')
fpSysBootpRelay = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysBootpRelay.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysBootpRelay.setDescription('This object allows to get or set the IP address of the DHCP/BOOTP Server when this router is acting as a Bootp relay agent. When set to 0.0.0.0, this router will not act as a Bootp relay agent. This setting is saved to non-volatile memory, with both fpSysOperation=save(1) and fpEtherOperation=save(1).')
fpSysKernelRevision = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysKernelRevision.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysKernelRevision.setDescription('This object represents the number of times that the source code got changed, possibly resulting in the support of new features. This number is intended to be used by an SNMP manager to determine what features set is supported by the kernel software (compared to what is expected as a minimum). This objects differs from fpSysSoftwareVer which is a string containing an administratively defined version.')
fpSysTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysTelnetPort.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysTelnetPort.setDescription('The TCP port for reception of telnet connections to the router. Setting this value to zero disables telnetting to the router. This change requires a reboot to take affect.')
fpSysSNMPPort = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysSNMPPort.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysSNMPPort.setDescription('The TCP port for reception of SNMP requests to the router. Setting this value to zero disables SNMP management of the router. This change requires a reboot to take affect.')
fpWAN2WANForwarding = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpWAN2WANForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: fpWAN2WANForwarding.setDescription('To enable or disable the forwarding of data traffic from one wan link to another wan link.')
fpUdpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 32), )
if mibBuilder.loadTexts: fpUdpRelayTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpUdpRelayTable.setDescription('This table defines UDP ports for which relaying should should be performed when this UDP traffic is broadcast.')
fpUdpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpUdpRelayFirstPort"), (0, "FLOWPOINT-MIB", "fpUdpRelayLastPort"), (0, "FLOWPOINT-MIB", "fpUdpRelayIPAddress"))
if mibBuilder.loadTexts: fpUdpRelayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpUdpRelayEntry.setDescription('An entry in the fpUdpRelayTable specifies that UDP packets which are broadcast to the specified ports should be relayed to the specified IP address.')
fpUdpRelayFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpUdpRelayFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fpUdpRelayFirstPort.setDescription('First UDP port of range of UDP ports which will be relayed.')
fpUdpRelayLastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpUdpRelayLastPort.setStatus('mandatory')
if mibBuilder.loadTexts: fpUdpRelayLastPort.setDescription('Last UDP port of range of UDP ports which will be relayed.')
fpUdpRelayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpUdpRelayIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpUdpRelayIPAddress.setDescription('IP address to receive UDP broadcast traffic.')
fpUdpRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpUdpRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpUdpRelayStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
fpOneWANConnection = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpOneWANConnection.setStatus('mandatory')
if mibBuilder.loadTexts: fpOneWANConnection.setDescription('To enable or disable the bringing up of more than one wan link at a time to different destinations.')
fpSysHTTPPort = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysHTTPPort.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysHTTPPort.setDescription('The TCP port for reception of HTTP requests to the router. Setting this value to zero disables HTTP management of the router. This change requires a reboot to take affect.')
fpDirectedBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDirectedBroadcasts.setStatus('mandatory')
if mibBuilder.loadTexts: fpDirectedBroadcasts.setDescription('Enable/disable directed broadcasts to a directly connected interface.')
fpBlockNetBIOSDefault = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpBlockNetBIOSDefault.setStatus('mandatory')
if mibBuilder.loadTexts: fpBlockNetBIOSDefault.setDescription('To set the default when a new remote is created that controls if the remote will block NetBIOS traffic.')
fpSysFlashAvailable = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysFlashAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: fpSysFlashAvailable.setDescription('This object represents the number of bytes of flash available in the flash file system.')
fpVoiceTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 38), )
if mibBuilder.loadTexts: fpVoiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpVoiceTable.setDescription('This table defines voice ports for voice routers.')
fpVoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 38, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpVoiceIndex"))
if mibBuilder.loadTexts: fpVoiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpVoiceEntry.setDescription('An entry in the fpVoiceTable specifies voice information for an voice router; such as the ATM PVC or the Frame Relay DLCI.')
fpVoiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpVoiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fpVoiceIndex.setDescription('The voice port index number.')
fpVoicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 38, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpVoicePort.setStatus('mandatory')
if mibBuilder.loadTexts: fpVoicePort.setDescription('This object represents the ATM PVC or the Frame Relay DLCI number for the voice port.')
fpEchoTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 39), )
if mibBuilder.loadTexts: fpEchoTable.setStatus('deprecated')
if mibBuilder.loadTexts: fpEchoTable.setDescription('This table defines echo ports.')
fpEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 39, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpEchoIndex"))
if mibBuilder.loadTexts: fpEchoEntry.setStatus('deprecated')
if mibBuilder.loadTexts: fpEchoEntry.setDescription('An entry in the fpEchoTable specifies echo information for a voice router; such as the ATM PVC or the Frame Relay DLCI.')
fpEchoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEchoIndex.setStatus('deprecated')
if mibBuilder.loadTexts: fpEchoIndex.setDescription('The echo port index number.')
fpEchoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 39, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEchoPort.setStatus('deprecated')
if mibBuilder.loadTexts: fpEchoPort.setDescription('This object represents the ATM PVC or the Frame Relay DLCI number for the echo port.')
fpOptionTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 40), )
if mibBuilder.loadTexts: fpOptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpOptionTable.setDescription('This table defines Kernel Options.')
fpOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpOptionIndex"))
if mibBuilder.loadTexts: fpOptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpOptionEntry.setDescription('A string in the fpOptionTable specifies information pertaining to options built into the kernel -and- which options are available.')
fpOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpOptionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fpOptionIndex.setDescription('An index number representing a line of options.')
fpOptionString = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpOptionString.setStatus('mandatory')
if mibBuilder.loadTexts: fpOptionString.setDescription('This object represents a an string for the option built into the kernel.')
fpOptionAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpOptionAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: fpOptionAvailable.setDescription('Returns enable(1) if the option is available for use.')
fpLoginTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 5, 1), )
if mibBuilder.loadTexts: fpLoginTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpLoginTable.setDescription('This object returns the login status to the Manager. ')
fpLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 5, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpLoginPassword"))
if mibBuilder.loadTexts: fpLoginEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpLoginEntry.setDescription('')
fpLoginAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLoginAction.setStatus('mandatory')
if mibBuilder.loadTexts: fpLoginAction.setDescription("This object will return the login status to the Manager. Use this object to login to system by giving the administrator's password as index. The login status are: 1 -- login OK. Password matches with system's password. 2 -- login fail. Password mismatch.")
fpWanTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 6, 1), )
if mibBuilder.loadTexts: fpWanTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanTable.setDescription('A list of WAN interface entries.')
fpWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpWanIndex"))
if mibBuilder.loadTexts: fpWanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanEntry.setDescription('An interface entry containing objects at the WAN layer...')
fpWanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanIndex.setDescription('The interface index number.')
fpWanInstantOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanInstantOutUtil.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanInstantOutUtil.setDescription('Intantaneous output bandwidth utilization, from 0 to 100 (in 1% increments).')
fpWanInstantInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanInstantInUtil.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanInstantInUtil.setDescription('Intantaneous input bandwidth utilization, from 0 to 100 (in 1% increments).')
fpWanAvgOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanAvgOutUtil.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanAvgOutUtil.setDescription('Sliding average of output bandwidth utilization, from 0 to 100 (in 1% increments).')
fpWanAvgInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanAvgInUtil.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanAvgInUtil.setDescription('Sliding average of input bandwidth utilization, from 0 to 100 (in 1% increments).')
fpWanRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanRemoteName.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanRemoteName.setDescription('Name of user/destination that this port is currently connected to, if known.')
fpWanRemoteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanRemoteTime.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanRemoteTime.setDescription('The number of seconds that we have been connected to this particular remote across this WAN link.')
fpWanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanIfIndex.setDescription('The corresponding MIB-II ifIndex for this interface')
fpWanOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanOutSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanOutSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second, for the transmit side (relative to this device).")
fpWanInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanInSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fpWanInSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second, for the receive side (relative to this device).")
potsOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: potsOperation.setStatus('mandatory')
if mibBuilder.loadTexts: potsOperation.setDescription(' Use this object to give commands to save, load or erase POTS configuration in FLASH memory.')
potsTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 7, 2), )
if mibBuilder.loadTexts: potsTable.setStatus('mandatory')
if mibBuilder.loadTexts: potsTable.setDescription('The table used to configure and manage the POTS interfaces.')
potsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "potsIndex"))
if mibBuilder.loadTexts: potsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: potsEntry.setDescription('')
potsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: potsIndex.setDescription('Index used to access a potsEntry: maps to the connectors marked POTS1 and POTS2.')
potsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: potsEnabled.setDescription('Enable or disable the POTS functionality at the specified connector.')
potsOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("answer", 2), ("dial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: potsOpMode.setDescription('Specifies the type of calls that should be handled by this POTS interface. The default is to allow both incoming and outgoing calls.')
potsPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("out", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsPreemptMode.setStatus('mandatory')
if mibBuilder.loadTexts: potsPreemptMode.setDescription('Specifies the behavior of analog calls versus data calls. The default is both: voice calls always preempt data calls.')
potsAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("out", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsAutoMode.setStatus('mandatory')
if mibBuilder.loadTexts: potsAutoMode.setDescription('Defines whether the preemption mode defined by potsPreemptMode is to be performed automatically or whether the user should be prompted first. This only applies when the preemption of that type is allowed.')
potsPhoneCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsPhoneCnt.setStatus('mandatory')
if mibBuilder.loadTexts: potsPhoneCnt.setDescription('Indicates the number of phone numbers associated with this POTS interface.')
potsLocalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsLocalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: potsLocalNumber.setDescription('The local phone number used by this POTS interface during the last analog call processed (incoming and outgoing).')
potsRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsRemoteNumber.setStatus('mandatory')
if mibBuilder.loadTexts: potsRemoteNumber.setDescription('The remote phone number used by this POTS interface during the last analog call processed (outgoing and incoming when caller ID is available).')
potsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("not-available", 2), ("idle", 3), ("wait-dialtone", 4), ("ringing", 5), ("dialing", 6), ("proceeding", 7), ("connected-incoming", 8), ("connected-outgoing", 9), ("disconnected", 10), ("entering-ip-addr", 11), ("held-call", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsState.setStatus('mandatory')
if mibBuilder.loadTexts: potsState.setDescription('Current state of this POTS interface.')
potsIsdnChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsIsdnChannel.setStatus('mandatory')
if mibBuilder.loadTexts: potsIsdnChannel.setDescription('Indicates which ISDN channel (1 or 2) is associated with this POTS interface for the duration of this call. Additional information (like the clearing cause and reason are available via the ISDN group variables. When no ISDN channel is assigned to this POTS interface yet, 0 is returned')
potsWanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsWanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: potsWanIndex.setDescription('Indicates which Wan interface (1 or 2) is associated with this POTS interface for the duration of this call. Additional information (like the duration of the call is available via the WAN interface group variables. When no WAN interface is mapped to this POTS interface yet, 0 is returned')
potsPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 7, 3), )
if mibBuilder.loadTexts: potsPhoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: potsPhoneTable.setDescription('The table used to associate phone numbers and POTS interfaces.')
potsPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 7, 3, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "potsIndex"), (0, "FLOWPOINT-MIB", "potsPhoneNumber"))
if mibBuilder.loadTexts: potsPhoneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: potsPhoneEntry.setDescription('')
potsPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: potsPhoneNumber.setDescription('A phone number associated with the specified POTS interface, such that when an incoming analog call arrives, that interface rings, if allowed. This is used as an index into the POTS phone number table.')
potsPhoneOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: potsPhoneOperation.setStatus('mandatory')
if mibBuilder.loadTexts: potsPhoneOperation.setDescription('Perform a set on this object to add or remove the association between the specified phone number and the specified POTS interface.')
fpDLForceOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLForceOnBoot.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLForceOnBoot.setDescription('When set to a 1, the system will request a download, during the next system restart. If no server is found and the current image in flash memory is valid, the system will boot using the flash-resident image.')
fpDLCommitRAMToFlash = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLCommitRAMToFlash.setStatus('obsolete')
if mibBuilder.loadTexts: fpDLCommitRAMToFlash.setDescription('This object only exists for compatibility reasons.')
fpDLInitiateColdBoot = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLInitiateColdBoot.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLInitiateColdBoot.setDescription('When written with a 1, the boot software intiates a system reboot. All MIB variables used to control the exact nature of the download should be set, prior to activating a system reset. A read always returns a 0.')
fpDLTFTPRequestHost = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLTFTPRequestHost.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLTFTPRequestHost.setDescription('The IP address of the server to be used, when firmware is to be loaded across the network (network boot).')
fpDLTFTPRequest = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLTFTPRequest.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLTFTPRequest.setDescription('The filename requested of the server, when firmware is to be loaded across the network (network boot).')
fpDLLastImageFilename = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLLastImageFilename.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLLastImageFilename.setDescription('Filename of the last image to be successfully loaded into memory.')
fpDLLastServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLLastServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLLastServerIPAddress.setDescription('The IP address of the server used to load the present image in flash memory.')
fpDLFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFlashSize.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLFlashSize.setDescription('Denotes the size, in bytes, of flash memory con- tained on this module.')
fpDLFlashCount = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFlashCount.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLFlashCount.setDescription('Denotes the number of times that flash memory has been reprogrammed. This value is initialized to 1, when the module is initially powered up.')
fpDLFirmwareBase = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFirmwareBase.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLFirmwareBase.setDescription('Denotes the starting address of the firmware in RAM.')
fpDLFirmwareTop = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFirmwareTop.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLFirmwareTop.setDescription('Denotes the ending address of firmware in RAM.')
fpDLFirmwareStart = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFirmwareStart.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLFirmwareStart.setDescription('Denotes the start address of the firmware, in RAM, as established by the boot process.')
fpDLBootRev = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootRev.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLBootRev.setDescription('Denotes the revision of boot firmware in the module. The first octets provides the version, and the second provides the revision.')
fpDLForceBootp = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLForceBootp.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLForceBootp.setDescription('When set, this variable forces the client to send a BOOTP request packet when rebooting. The client will make several attempts before timing out if a server does not respond. This variable stays set. When set to a 1 it should always be read as a one. When set to zero it should always be read as zero.')
fpDLServerName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLServerName.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLServerName.setDescription('This OID is reserved for future use of the Bootp server name. This field can be used when a client wants to get boot information from a particular bootp server.')
fpDLOnLineDownLoad = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normalOperation", 1), ("forceDownLoad", 2), ("forceDownLoadReset", 3), ("forceUpLoad", 4), ("forceRemove", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLOnLineDownLoad.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLOnLineDownLoad.setDescription('During normal operation this object has the value of 1. By setting this object to a value of forceDownLoad(2) an online download will be performed. By setting this object to a value of forceDownLoadReset(3) an online download will be performed and a reset will be forced upon successful completion of the download. The forceUpLoad(4) operation causes the local file specified in fpDLLocalFileName to be uploaded to the TFTP server fpDLNetAddress with the file name fpDLFileName. The forceRemove(5) operation deletes the local file specified in fpDLLocalFileName.')
fpDLOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("normalOperation", 3), ("downLoadActive", 4), ("downLoadCompleteError", 5), ("upLoadActive", 6), ("upLoadCompleteError", 7), ("removeActive", 8), ("removeCompleteError", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLOperStatus.setDescription('This object reflects the status of download/upload operations. A value of normalOperation(3) reflects either a download was started but has finished normally and no reset was specified or no download has been started. A value of downLoadActive only appears while a download is in progress. A value of downLoadCompleteError reflects that a download was started however an error was detected. Similarly when an upload is in progress upLoadActive(6) is returned and if an error occurs upLoadCompeteError(7) is returned. A value of removeActive(8) indicates that a local file is being removed and removeCompleteError(9) indicates a failure to remove the file.')
fpDLNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLNetAddress.setDescription('IP Address of the server to be used when an image is to be downloaded using the Runtime TFTP Download.')
fpDLFileName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLFileName.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLFileName.setDescription('Filename requested of the server when an image is to be downloaded using the Runtime TFTP Download. This should be a complete path filename.')
fpDLErrorString = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLErrorString.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLErrorString.setDescription('If the value of fpDLOperStatus is downloadCompleteError(5) or uploadCompleteError(7) then this object will provide a more complete description of the error. Otherwise this object will be the zero length string.')
fpDLTftpServerGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLTftpServerGatewayIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLTftpServerGatewayIPAddress.setDescription('The IP address of the gateway/router which connects this SNMP agent to the TFTP server (0.0.0.0 if none).')
fpDLBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLBlockCount.setDescription('Current TFTP block count of an active session. If no TFTP transfer is in progress, zero is returned.')
fpDLBootPartitionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootPartitionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLBootPartitionStatus.setDescription('Status of the boot partition or paritions. A value of good(1) indicates that all boot partitions contain a valid checksum. A value of bad(2) indicates that one or more boot partitions contain an invalid checksum and the the image was not able to fix the invalid boot partition. A value of inProgress(3) indicates that the image is attempting to fix an invalid boot partition and this status will change to either good(1) or bad(2).')
fpDLLocalFileName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLLocalFileName.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLLocalFileName.setDescription('Filename used on the local file system whenever a TFTP download or upload is to be processed.')
fpDLBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootVersion.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLBootVersion.setDescription('Returns a string indicating the boot code version.')
fpDLBootReason = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("power-up", 2), ("reset-switch", 3), ("software-reboot", 4), ("double-bus-fault", 5), ("hardware-watchdog", 6), ("loss-of-clock", 7), ("suicide", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootReason.setStatus('mandatory')
if mibBuilder.loadTexts: fpDLBootReason.setDescription('Reason for the last reboot.')
sysIPTranslationServerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 9, 1), )
if mibBuilder.loadTexts: sysIPTranslationServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPTranslationServerTable.setDescription('The IP Translation Server Table. Used to select a server when doing IP address translation.')
sysIPTranslationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "sysIPTranslationServerIPAddress"), (0, "FLOWPOINT-MIB", "sysIPTranslationProtocol"), (0, "FLOWPOINT-MIB", "sysIPFirstTranslationPort"))
if mibBuilder.loadTexts: sysIPTranslationServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPTranslationServerEntry.setDescription('')
sysIPTranslationServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPTranslationServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPTranslationServerIPAddress.setDescription('The IP address of the Server when doing IP Address translation. ')
sysIPTranslationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPTranslationProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPTranslationProtocol.setDescription('The protocol used by this Server.')
sysIPFirstTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPFirstTranslationPort.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPFirstTranslationPort.setDescription('First public port in range used by this server. This port is what is referenced by the client. A port of 0 is a wild-card signifying any port.')
sysIPLastTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPLastTranslationPort.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPLastTranslationPort.setDescription('Last public port in range used by this server. This port is the last port in range and is referenced by the client.. This value must be greater than or equal first public port in range.')
sysIPFirstPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPFirstPrivatePort.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPFirstPrivatePort.setDescription('This is the first private port in range as seen by the server. The public port range is mapped to this private port range. If the public port range is to be the same as the private port range, this port should be the same as the first public port.')
sysIPTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIPTranslationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysIPTranslationStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
sysNatHostMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 9, 2), )
if mibBuilder.loadTexts: sysNatHostMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysNatHostMappingTable.setDescription('The NAT Host Mapping Table. Used to select a NAT Host Mapping when doing IP address translation.')
sysNatHostMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "sysFirstPrivateIPAddress"), (0, "FLOWPOINT-MIB", "sysLastPrivateIPAddress"), (0, "FLOWPOINT-MIB", "sysFirstPublicIPAddress"))
if mibBuilder.loadTexts: sysNatHostMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysNatHostMappingEntry.setDescription('')
sysFirstPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirstPrivateIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysFirstPrivateIPAddress.setDescription('The first private IP address which starts the range of private IP addresses which are mapped to public IP addresses.')
sysLastPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastPrivateIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysLastPrivateIPAddress.setDescription('The last private IP address which ends the range of private IP addresses which are mapped to public IP addresses.')
sysFirstPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirstPublicIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysFirstPublicIPAddress.setDescription('The first public IP address which starts the range of public IP Addresses which are mapped to private IP addresses. The last public IP address in the range is calculated by counting the number of private IP addresses in the private IP address range and creating an equivalent number of IP addresses in the public IP address range so there is a one to one mapping of public IP addresses to private IP addresses.')
sysNatHostMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNatHostMappingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysNatHostMappingStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
dhcpOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3), ("dhcpenable", 4), ("dhcpdisable", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dhcpOperation.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpOperation.setDescription(' Use this object to give commands to save, load or erase DHCP configuration in FLASH memory.')
dhcpGlobalTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalTftpServer.setDescription('IP address for the TFTP server. This global value is used as the next server for booting if the Subnet AND Client lease do not have a TFTP server defined. 0.0.0.0 clears this entry.')
dhcpGlobalTftpFile = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalTftpFile.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalTftpFile.setDescription('Name of file for booting. This value is used ONLY if the global value for the TFTP server is set.')
dhcpGlobalLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalLeaseTime.setDescription('Global Lease Time value in hours. A value of 0 selects the Default Lease Time.')
dhcpCodeTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 5), )
if mibBuilder.loadTexts: dhcpCodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpCodeTable.setDescription('The table used to define DHCP option codes.')
dhcpCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpOptionCode"))
if mibBuilder.loadTexts: dhcpCodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpCodeEntry.setDescription('')
dhcpOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionCode.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpOptionCode.setDescription('DHCP Defined Option Code.')
dhcpMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpMinCount.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpMinCount.setDescription('Minimum allowed number of values for this option.')
dhcpMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpMaxCount.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpMaxCount.setDescription('Maximum allowed number of values for this option.')
dhcpOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 4), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionType.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpOptionType.setDescription('Values for this Option are of this type.')
dhcpOptionCodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOptionCodeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpOptionCodeStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
dhcpGlobalValueTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 6), )
if mibBuilder.loadTexts: dhcpGlobalValueTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalValueTable.setDescription('The table used to set or clear Global DHCP option values.')
dhcpGlobalValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpGlobalValueCode"))
if mibBuilder.loadTexts: dhcpGlobalValueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalValueEntry.setDescription('')
dhcpGlobalValueCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGlobalValueCode.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalValueCode.setDescription('DHCP Option Code as defined in rfc1533.')
dhcpGlobalValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 2), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGlobalValueType.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalValueType.setDescription('Type of value for this DHCP Option Code.')
dhcpGlobalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalValue.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalValue.setDescription('Value for this DHCP Option.')
dhcpGlobalValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalValueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpGlobalValueStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
dhcpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 7), )
if mibBuilder.loadTexts: dhcpSubnetTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetTable.setDescription('The table used to set or clear DHCP subnet information.')
dhcpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpSubnetAddress"))
if mibBuilder.loadTexts: dhcpSubnetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetEntry.setDescription('')
dhcpSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetAddress.setDescription('DHCP Subnet address.')
dhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetMask.setDescription('DHCP Subnet Mask. If the Subnet does NOT exist when one attempts to set the Subnet Mask, the Subnet will be automatically created.')
dhcpSubnetFirstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetFirstIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetFirstIpAddress.setDescription('First Ip Address in the Subnet Pool. 0.0.0.0 clears both the First Ip Address and Last Ip Address.')
dhcpSubnetLastIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetLastIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetLastIpAddress.setDescription('Last Ip Address in the Subnet Pool. 0.0.0.0 clears both the First Ip Address and Last Ip Address.')
dhcpSubnetTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetTftpServer.setDescription('IP address for the TFTP server. This Subnet value is used as the next server for booting if the Client lease does not have a TFTP server defined. 0.0.0.0 clears this entry.')
dhcpSubnetTftpFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetTftpFile.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetTftpFile.setDescription('Name of file for booting. This value is used ONLY if the Subnet value for the TFTP server is set.')
dhcpSubnetBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetBootp.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetBootp.setDescription('Allow or Disallow servicing of Bootp requests for this Subnet. Default is Disallow. A Client Lease within this Subnet can still allow Bootp requests.')
dhcpSubnetLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetLeaseTime.setDescription('Subnet Default Lease Time value in hours. A value of 0 selects the Default Lease Time.')
dhcpSubnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
dhcpSubnetConflictActions = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("docontinue", 1), ("dostop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetConflictActions.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetConflictActions.setDescription('What this DHCP server should do with this subnet if this subnet is for the local LAN and another DHCP server for the local LAN exists.')
dhcpSubnetValueTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 8), )
if mibBuilder.loadTexts: dhcpSubnetValueTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetValueTable.setDescription('The table used to set or clear Subnet DHCP option values.')
dhcpSubnetValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpSubnetAddress"), (0, "FLOWPOINT-MIB", "dhcpSubnetValueCode"))
if mibBuilder.loadTexts: dhcpSubnetValueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetValueEntry.setDescription('')
dhcpSubnetValueCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetValueCode.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetValueCode.setDescription('DHCP Option Code as defined in rfc1533.')
dhcpSubnetValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 2), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetValueType.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetValueType.setDescription('Type of value for this DHCP Option Code.')
dhcpSubnetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetValue.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetValue.setDescription('Value for this DHCP Option.')
dhcpSubnetValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetValueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpSubnetValueStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
dhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 9), )
if mibBuilder.loadTexts: dhcpClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientTable.setDescription('The table used to set or clear DHCP Client Lease information.')
dhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpClientAddress"))
if mibBuilder.loadTexts: dhcpClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientEntry.setDescription('')
dhcpClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientAddress.setDescription('DHCP Client Lease address. To iterate through the list of client entries for a particular subnet use the subnet ip address as the index and attempt to get the next entry.')
dhcpClientTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientTftpServer.setDescription('IP address for the TFTP server. This Client value is used as the next server for booting. 0.0.0.0 clears this entry.')
dhcpClientTftpFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientTftpFile.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientTftpFile.setDescription('Name of file for booting. This value is used ONLY if the Client value for the TFTP server is set.')
dhcpClientBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientBootp.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientBootp.setDescription('Allow or Disallow servicing of Bootp requests for this Subnet. Default is Disallow. If Enabled this Client Lease will satisfy a Bootp request even if the Subnet has Bootp Disallowed.')
dhcpClientLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientLeaseTime.setDescription('Client Default Lease Time value in hours. A value of 0 selects the Default Lease Time.')
dhcpClientExpireTimeYear = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeYear.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientExpireTimeYear.setDescription('Time Client Lease expire time-year. If 0, entry is expired.')
dhcpClientExpireTimeMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeMonth.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientExpireTimeMonth.setDescription('Time Client Lease expire time-month.')
dhcpClientExpireTimeDay = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeDay.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientExpireTimeDay.setDescription('Time Client Lease expire time-day.')
dhcpClientExpireTimeHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeHour.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientExpireTimeHour.setDescription('Time Client Lease expire time-hour.')
dhcpClientExpireTimeMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeMinute.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientExpireTimeMinute.setDescription('Time Client Lease expire time-minute.')
dhcpClientExpireTimeSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeSecond.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientExpireTimeSecond.setDescription('Time Client Lease expire time-second.')
dhcpClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
dhcpClientValueTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 10), )
if mibBuilder.loadTexts: dhcpClientValueTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientValueTable.setDescription('The table used to set or clear Client DHCP option values.')
dhcpClientValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpClientAddress"), (0, "FLOWPOINT-MIB", "dhcpClientValueCode"))
if mibBuilder.loadTexts: dhcpClientValueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientValueEntry.setDescription('')
dhcpClientValueCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientValueCode.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientValueCode.setDescription('DHCP Option Code as defined in rfc1533.')
dhcpClientValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 2), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientValueType.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientValueType.setDescription('Type of value for this DHCP Option Code.')
dhcpClientValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientValue.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientValue.setDescription('Value for this DHCP Option.')
dhcpClientValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientValueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientValueStatus.setDescription('The status column used for creating, modifying, and deleting instances of the columnar objects in this table.')
fpDirTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 11, 1), )
if mibBuilder.loadTexts: fpDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: fpDirTable.setDescription('The directory Table contains the names and sizes of the files in the file system.')
fpDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpDirIndex"))
if mibBuilder.loadTexts: fpDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fpDirEntry.setDescription('Each entry contains the directory name in msdos format; 8 character name, followed by a ., followed by a 3 character extension. The file size is returned (in bytes).')
fpDirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDirIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fpDirIndex.setDescription('A file number to read.')
fpDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDirName.setStatus('mandatory')
if mibBuilder.loadTexts: fpDirName.setDescription('A textual description of the name of the file. In the format 8.3 for dos.')
fpDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDirSize.setStatus('mandatory')
if mibBuilder.loadTexts: fpDirSize.setDescription('The size of the file in bytes.')
atmOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmOperation.setStatus('mandatory')
if mibBuilder.loadTexts: atmOperation.setDescription(' Use this object to give commands to save, load or erase ATM configuration in FLASH memory.')
frOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frOperation.setStatus('mandatory')
if mibBuilder.loadTexts: frOperation.setDescription(' Use this object to give commands to save, load or erase FR configuration in FLASH memory.')
mibBuilder.exportSymbols("FLOWPOINT-MIB", AuthenProtoType=AuthenProtoType, sysNatHostMappingEntry=sysNatHostMappingEntry, dodIPXFilterDstSocket=dodIPXFilterDstSocket, fpEchoIndex=fpEchoIndex, fpIsdnDataCallsOut=fpIsdnDataCallsOut, fpWanInstantOutUtil=fpWanInstantOutUtil, potsState=potsState, fpDirEntry=fpDirEntry, fpWanEntry=fpWanEntry, fpVoiceTable=fpVoiceTable, dhcpClientExpireTimeDay=dhcpClientExpireTimeDay, dodBODType=dodBODType, dodRemoteMacTable=dodRemoteMacTable, potsTable=potsTable, potsPreemptMode=potsPreemptMode, fpSysBootpRelay=fpSysBootpRelay, fpWanInstantInUtil=fpWanInstantInUtil, fpWanTable=fpWanTable, fpIsdnSwitchTable=fpIsdnSwitchTable, dodRemoteIPXNetOperation=dodRemoteIPXNetOperation, dodRemoteIPXSAPNodeAddress=dodRemoteIPXSAPNodeAddress, dhcpSubnetMask=dhcpSubnetMask, dhcpOperation=dhcpOperation, sysFirstPrivateIPAddress=sysFirstPrivateIPAddress, fpether=fpether, dhcpClientBootp=dhcpClientBootp, dodIPFilterAllow=dodIPFilterAllow, fpWan=fpWan, fpDLBootVersion=fpDLBootVersion, potsIsdnChannel=potsIsdnChannel, dodRemoteIPMask=dodRemoteIPMask, fpIsdnCh2Spid=fpIsdnCh2Spid, fpOptionAvailable=fpOptionAvailable, fpWAN2WANForwarding=fpWAN2WANForwarding, fpEchoPort=fpEchoPort, dhcpSubnetLastIpAddress=dhcpSubnetLastIpAddress, dhcpMaxCount=dhcpMaxCount, dodCallerOperation=dodCallerOperation, fpEtherIpOptSendRIP2=fpEtherIpOptSendRIP2, fpPortNum=fpPortNum, dodCallerTable=dodCallerTable, dodIPXFilterIndex=dodIPXFilterIndex, fpSysLastLogEvent=fpSysLastLogEvent, fpIpRIPMulticastAddress=fpIpRIPMulticastAddress, sysLastPrivateIPAddress=sysLastPrivateIPAddress, RowStatus=RowStatus, etherIPTranslationServerEntry=etherIPTranslationServerEntry, dodIPAddressTranslation=dodIPAddressTranslation, dodRemoteIPXSAPIndex=dodRemoteIPXSAPIndex, fpWanInSpeed=fpWanInSpeed, dodIPFirstTranslationPort=dodIPFirstTranslationPort, MacAddress=MacAddress, fpWanAvgInUtil=fpWanAvgInUtil, fpDirIndex=fpDirIndex, dodRemoteIPXNetAddress=dodRemoteIPXNetAddress, fpDLBootReason=fpDLBootReason, dodRemoteIPXSAPNetAddress=dodRemoteIPXSAPNetAddress, fpPOTSInstalled=fpPOTSInstalled, dhcpClientEntry=dhcpClientEntry, dodIpOptRecvRIP=dodIpOptRecvRIP, fpSysMonth=fpSysMonth, dhcpGlobalTftpServer=dhcpGlobalTftpServer, fpIsdnAutoSpidCounter=fpIsdnAutoSpidCounter, fpOptionEntry=fpOptionEntry, fpIpxStrNetAddress=fpIpxStrNetAddress, fpDirectedBroadcasts=fpDirectedBroadcasts, dodOperation=dodOperation, fpIpxNetAddress=fpIpxNetAddress, dodBWThreshold=dodBWThreshold, dodIPFilterSrcNetAddr=dodIPFilterSrcNetAddr, dodRemoteIPNetMask=dodRemoteIPNetMask, dodRemoteIPNetTable=dodRemoteIPNetTable, dodIPXFilterEntry=dodIPXFilterEntry, fpIpState=fpIpState, fpWriteTimeout=fpWriteTimeout, fpDLErrorString=fpDLErrorString, potsPhoneTable=potsPhoneTable, dodIPTranslationServerIPAddress=dodIPTranslationServerIPAddress, dodIPXFilterSrcNetAddr=dodIPXFilterSrcNetAddr, dhcpSubnetEntry=dhcpSubnetEntry, ConnectionType=ConnectionType, dodPPPCallbackOption=dodPPPCallbackOption, dodIPFilterEntry=dodIPFilterEntry, dodPPPOptUseLCPEcho=dodPPPOptUseLCPEcho, fpEtherOperation=fpEtherOperation, dhcpSubnetAddress=dhcpSubnetAddress, dhcpClientValue=dhcpClientValue, fpDLBlockCount=fpDLBlockCount, fpSysHour=fpSysHour, dhcpClientLeaseTime=dhcpClientLeaseTime, dodAuthenProtocol=dodAuthenProtocol, dodOurSystemName=dodOurSystemName, etherNatHostMappingEntry=etherNatHostMappingEntry, fpdhcp=fpdhcp, sysNatHostMappingStatus=sysNatHostMappingStatus, fpIsdnSwitchEntry=fpIsdnSwitchEntry, fpfr=fpfr, dodCallbackOption=dodCallbackOption, dodIPXFilterTable=dodIPXFilterTable, dhcpClientTftpFile=dhcpClientTftpFile, dodRemoteIPNetOperation=dodRemoteIPNetOperation, fpVoicePort=fpVoicePort, fpEtherTable=fpEtherTable, dodDontAuthenticate=dodDontAuthenticate, dodIPXFilterSrcSocket=dodIPXFilterSrcSocket, etherIPTranslationStatus=etherIPTranslationStatus, dodCallerEntry=dodCallerEntry, sysIPLastTranslationPort=sysIPLastTranslationPort, fpBridgeState=fpBridgeState, dodTableOperation=dodTableOperation, fpIsdnCh1ClearReason=fpIsdnCh1ClearReason, fpEtherIpOptSendRIPDefault=fpEtherIpOptSendRIPDefault, fpIsdnCh2ClearCode=fpIsdnCh2ClearCode, dhcpCodeEntry=dhcpCodeEntry, dhcpClientExpireTimeHour=dhcpClientExpireTimeHour, fpIpxState=fpIpxState, dodRemoteMacState=dodRemoteMacState, dodFirstPublicIPAddress=dodFirstPublicIPAddress, dodRemoteIPXSAPType=dodRemoteIPXSAPType, fpSysFlashAvailable=fpSysFlashAvailable, etherNatHostMappingStatus=etherNatHostMappingStatus, dodIPXFilterDstNetAddr=dodIPXFilterDstNetAddr, fpDLNetAddress=fpDLNetAddress, dodLastActivityTime=dodLastActivityTime, etherIPTranslationServerTable=etherIPTranslationServerTable, fpatm=fpatm, fpSysSecond=fpSysSecond, dodNatHostMappingTable=dodNatHostMappingTable, dhcpSubnetValueType=dhcpSubnetValueType, dhcpClientTable=dhcpClientTable, fpIsdnStatus=fpIsdnStatus, dodIpOptSendRIP=dodIpOptSendRIP, dodTableID=dodTableID, dodIpOptSendRIP1=dodIpOptSendRIP1, dodIpOptRecvRIPDefault=dodIpOptRecvRIPDefault, fpWanRemoteTime=fpWanRemoteTime, dodBlockNetBIOS=dodBlockNetBIOS, flowpoint=flowpoint, potsEntry=potsEntry, fpSysPassword=fpSysPassword, fpWanOutSpeed=fpWanOutSpeed, fpUdpRelayIPAddress=fpUdpRelayIPAddress, fpIsdnCh1DirectoryNum=fpIsdnCh1DirectoryNum, fpIsdnCh1ClearCode=fpIsdnCh1ClearCode, dhcpSubnetValueTable=dhcpSubnetValueTable, fpDLBootPartitionStatus=fpDLBootPartitionStatus, dhcpClientValueCode=dhcpClientValueCode, dodRemoteMacs=dodRemoteMacs, fpSysTelnetPort=fpSysTelnetPort, fpMIBCompatibility=fpMIBCompatibility, fpDLOperStatus=fpDLOperStatus, fpSysKernelRevision=fpSysKernelRevision, dodRemoteIPXNets=dodRemoteIPXNets, dodRemoteIPXNetIndex=dodRemoteIPXNetIndex, dhcpOptionCode=dhcpOptionCode, fpWriteTimer=fpWriteTimer, fpdir=fpdir, fpSysHardwareVer=fpSysHardwareVer, fpWanIndex=fpWanIndex, dhcpSubnetTftpFile=dhcpSubnetTftpFile, fpSysYear=fpSysYear, fpUdpRelayStatus=fpUdpRelayStatus, fpOneWANConnection=fpOneWANConnection, dodReacquireIpAddr=dodReacquireIpAddr, dodIPTranslationServerEntry=dodIPTranslationServerEntry, dodRemoteIPXSAPStrNetAddress=dodRemoteIPXSAPStrNetAddress, dhcpOptionCodeStatus=dhcpOptionCodeStatus, fpEtherIpOptSendRIP1=fpEtherIpOptSendRIP1, fpSysDefaultSingleUser=fpSysDefaultSingleUser, dodSendDataAsVoice=dodSendDataAsVoice, fpIsdnLineStatus=fpIsdnLineStatus, fppots=fppots, fpCommunityName=fpCommunityName, dodPhoneSpeed=dodPhoneSpeed, dodTable=dodTable, fpDLForceBootp=fpDLForceBootp, dodPhoneIndex=dodPhoneIndex, fpSysMessage=fpSysMessage, dodRemoteIPXNetMetric=dodRemoteIPXNetMetric, sysFirstPublicIPAddress=sysFirstPublicIPAddress, fpIsdnCh2ClearReason=fpIsdnCh2ClearReason, fpDLTFTPRequest=fpDLTFTPRequest, fpDLTftpServerGatewayIPAddress=fpDLTftpServerGatewayIPAddress, fpCallerIdEnabled=fpCallerIdEnabled, dodOurPasswordSpecified=dodOurPasswordSpecified, fpEtherIpOptRecvRIP2=fpEtherIpOptRecvRIP2, fpMtu=fpMtu, dodCallIDTable=dodCallIDTable, dodRemoteIPAddress=dodRemoteIPAddress, dodIpSlaveMode=dodIpSlaveMode, dodRemoteIPNetGateway=dodRemoteIPNetGateway, fpUdpRelayLastPort=fpUdpRelayLastPort, dhcpMinCount=dhcpMinCount, fpDirSize=fpDirSize, fpDLServerName=fpDLServerName, etherIPFirstPrivatePort=etherIPFirstPrivatePort, fpSysAuthen=fpSysAuthen, dodBrOptUseStp=dodBrOptUseStp, sysIPTranslationServerEntry=sysIPTranslationServerEntry, potsPhoneNumber=potsPhoneNumber, dhcpSubnetValueStatus=dhcpSubnetValueStatus, fpDLCommitRAMToFlash=fpDLCommitRAMToFlash, fpWanAvgOutUtil=fpWanAvgOutUtil, fpDLFirmwareTop=fpDLFirmwareTop, fpDirTable=fpDirTable, dodRemoteMacAddress=dodRemoteMacAddress, dhcpClientStatus=dhcpClientStatus, fpDLForceOnBoot=fpDLForceOnBoot, dodIpOptSendRIPDefault=dodIpOptSendRIPDefault, dodIPXFilterAllow=dodIPXFilterAllow, fpOptionString=fpOptionString, dodRemoteIPXSAPOperation=dodRemoteIPXSAPOperation, sysIPTranslationProtocol=sysIPTranslationProtocol, fpBlockNetBIOSDefault=fpBlockNetBIOSDefault, dodSourceIPMask=dodSourceIPMask, dodCallerNumber=dodCallerNumber, fpWanRemoteName=fpWanRemoteName, dodSourceIPAddress=dodSourceIPAddress, fpUdpRelayEntry=fpUdpRelayEntry, dhcpClientAddress=dhcpClientAddress, potsIndex=potsIndex, dodIPLastTranslationPort=dodIPLastTranslationPort, dodIpOptSendRIP2=dodIpOptSendRIP2, dodRemoteIPNetAddress=dodRemoteIPNetAddress, potsPhoneEntry=potsPhoneEntry, dhcpGlobalValueType=dhcpGlobalValueType, dodRemoteIPXSAPStrType=dodRemoteIPXSAPStrType, dhcpGlobalValueCode=dhcpGlobalValueCode, dodEntry=dodEntry, fpEtherIpOptRecvRIPDefault=fpEtherIpOptRecvRIPDefault, dodPhoneNumber=dodPhoneNumber, potsRemoteNumber=potsRemoteNumber, dodRemoteIPXSAPs=dodRemoteIPXSAPs, dhcpSubnetValueEntry=dhcpSubnetValueEntry, fpIpxSupported=fpIpxSupported, sysNatHostMappingTable=sysNatHostMappingTable, fpEtherIpOptRecvRIP=fpEtherIpOptRecvRIP, dodProtocol=dodProtocol, dodIpOptRecvRIP1=dodIpOptRecvRIP1, fpEchoTable=fpEchoTable, dodFirstPrivateIPAddress=dodFirstPrivateIPAddress, DhcpOptionType=DhcpOptionType, fpOptionTable=fpOptionTable, fpVoiceIndex=fpVoiceIndex, potsAutoMode=potsAutoMode, fpLoginTable=fpLoginTable, fpIpxFrameType=fpIpxFrameType, potsLocalNumber=potsLocalNumber, etherNatHostMappingTable=etherNatHostMappingTable, dhcpGlobalValueStatus=dhcpGlobalValueStatus, fpSysMinute=fpSysMinute, fpOptionIndex=fpOptionIndex, sysIPTranslationStatus=sysIPTranslationStatus, dodIPXFilterSrcNodeAddr=dodIPXFilterSrcNodeAddr)
mibBuilder.exportSymbols("FLOWPOINT-MIB", dhcpSubnetStatus=dhcpSubnetStatus, dodCallIDType=dodCallIDType, dodRemoteIPXNetTicks=dodRemoteIPXNetTicks, etherIPLastTranslationPort=etherIPLastTranslationPort, fpDLLastServerIPAddress=fpDLLastServerIPAddress, dhcpSubnetLeaseTime=dhcpSubnetLeaseTime, dodIpOptRecvRIP2=dodIpOptRecvRIP2, dodRemoteIPNets=dodRemoteIPNets, dodRemoteIPXSAPSocket=dodRemoteIPXSAPSocket, fpDLFirmwareBase=fpDLFirmwareBase, fpDLTFTPRequestHost=fpDLTFTPRequestHost, dodEntryIsDisabled=dodEntryIsDisabled, dodIPXFilterDstNodeAddr=dodIPXFilterDstNodeAddr, dodIPTranslationStatus=dodIPTranslationStatus, dhcpClientValueStatus=dhcpClientValueStatus, fpsys=fpsys, fpVoiceEntry=fpVoiceEntry, dhcpClientExpireTimeMonth=dhcpClientExpireTimeMonth, fpDLFlashCount=fpDLFlashCount, fpIsdnCh1Spid=fpIsdnCh1Spid, fpInternetFireWall=fpInternetFireWall, dodRemoteIPXSAPHops=dodRemoteIPXSAPHops, fpDLLastImageFilename=fpDLLastImageFilename, dodPasswordSpecified=dodPasswordSpecified, fpUdpRelayFirstPort=fpUdpRelayFirstPort, frOperation=frOperation, potsWanIndex=potsWanIndex, dodPPPCallbackInfo=dodPPPCallbackInfo, fpIsdnSwitchTypeIndex=fpIsdnSwitchTypeIndex, fpiptranslate=fpiptranslate, fpEchoEntry=fpEchoEntry, dodIPXFilters=dodIPXFilters, fpSysSNMPPort=fpSysSNMPPort, dodIPFirstPrivatePort=dodIPFirstPrivatePort, dodIPFilterIndex=dodIPFilterIndex, dodPhoneEntry=dodPhoneEntry, dodRemoteMacDefault=dodRemoteMacDefault, dodRemoteIPNetIndex=dodRemoteIPNetIndex, dodPreferType=dodPreferType, dodRemoteIPXSAPTable=dodRemoteIPXSAPTable, dodRemoteIPXSAPEntry=dodRemoteIPXSAPEntry, fpdownload=fpdownload, dodPassword=dodPassword, etherIPFirstTranslationPort=etherIPFirstTranslationPort, dhcpGlobalValueTable=dhcpGlobalValueTable, fpIpDefaultGateway=fpIpDefaultGateway, dhcpSubnetTable=dhcpSubnetTable, fpDirName=fpDirName, dodDestinationName=dodDestinationName, fpIsdnSpeed=fpIsdnSpeed, dhcpSubnetFirstIpAddress=dhcpSubnetFirstIpAddress, dodRemoteIPXNetStrAddress=dodRemoteIPXNetStrAddress, fpDLBootRev=fpDLBootRev, dodLastPrivateIPAddress=dodLastPrivateIPAddress, dhcpClientValueType=dhcpClientValueType, fpDLFlashSize=fpDLFlashSize, dhcpClientTftpServer=dhcpClientTftpServer, fpDLLocalFileName=fpDLLocalFileName, sysIPFirstTranslationPort=sysIPFirstTranslationPort, fpIsdnCh2DirectoryNum=fpIsdnCh2DirectoryNum, dhcpGlobalTftpFile=dhcpGlobalTftpFile, dodRemoteMacEntry=dodRemoteMacEntry, sysIPTranslationServerIPAddress=sysIPTranslationServerIPAddress, potsOpMode=potsOpMode, dhcpClientExpireTimeSecond=dhcpClientExpireTimeSecond, dodIPFilters=dodIPFilters, etherFirstPrivateIPAddress=etherFirstPrivateIPAddress, fpIsdnCh2Status=fpIsdnCh2Status, dodIpOptKeepPrivate=dodIpOptKeepPrivate, fpLoginEntry=fpLoginEntry, fpdod=fpdod, dodRemoteIPNetHops=dodRemoteIPNetHops, dodMaxLinks=dodMaxLinks, etherIPTranslationProtocol=etherIPTranslationProtocol, potsOperation=potsOperation, dodRemoteIPXNetEntry=dodRemoteIPXNetEntry, dhcpSubnetBootp=dhcpSubnetBootp, potsEnabled=potsEnabled, dodIPTranslationProtocol=dodIPTranslationProtocol, dodOurPassword=dodOurPassword, dhcpSubnetValue=dhcpSubnetValue, fpIpNetAddress=fpIpNetAddress, sysIPFirstPrivatePort=sysIPFirstPrivatePort, fpEtherEntry=fpEtherEntry, fpSysCallerIdTable=fpSysCallerIdTable, fpSysSoftwareVer=fpSysSoftwareVer, dodNatHostMappingStatus=dodNatHostMappingStatus, dhcpSubnetValueCode=dhcpSubnetValueCode, fpWanIfIndex=fpWanIfIndex, fpDLOnLineDownLoad=fpDLOnLineDownLoad, fpIsdnCh1Status=fpIsdnCh1Status, dodIPXNetStrAddress=dodIPXNetStrAddress, fpSysName=fpSysName, dhcpClientValueTable=dhcpClientValueTable, fpNATState=fpNATState, etherIPTranslationServerIPAddress=etherIPTranslationServerIPAddress, fpIpNetMask=fpIpNetMask, fpSysHTTPPort=fpSysHTTPPort, potsPhoneCnt=potsPhoneCnt, fpEtherIpOptRecvRIP1=fpEtherIpOptRecvRIP1, fpSysSingleUser=fpSysSingleUser, dodCallIDPhones=dodCallIDPhones, fpIsdnSwitchType=fpIsdnSwitchType, dodIPFilterDstNetAddr=dodIPFilterDstNetAddr, atmOperation=atmOperation, fpSysOperation=fpSysOperation, dodRemoteMacIndex=dodRemoteMacIndex, dodMtu=dodMtu, fpIsdnDataCallsIn=fpIsdnDataCallsIn, potsPhoneOperation=potsPhoneOperation, dhcpSubnetConflictActions=dhcpSubnetConflictActions, fpSysLogout=fpSysLogout, sysIPTranslationServerTable=sysIPTranslationServerTable, dhcpClientValueEntry=dhcpClientValueEntry, etherFirstPublicIPAddress=etherFirstPublicIPAddress, dhcpGlobalValue=dhcpGlobalValue, fpisdn=fpisdn, dodRemoteMacOperation=dodRemoteMacOperation, dhcpClientExpireTimeMinute=dhcpClientExpireTimeMinute, dodMinLinks=dodMinLinks, fpSysCallerIdEntry=fpSysCallerIdEntry, dhcpGlobalLeaseTime=dhcpGlobalLeaseTime, dodTearDownTimer=dodTearDownTimer, dodCallIDEntry=dodCallIDEntry, dodIPFilterTable=dodIPFilterTable, dodIPTranslationServerTable=dodIPTranslationServerTable, fpDLFirmwareStart=fpDLFirmwareStart, fpDLFileName=fpDLFileName, dodRemoteIPXNetTable=dodRemoteIPXNetTable, dodRemoteIPXSAPName=dodRemoteIPXSAPName, dodRemoteIPNetEntry=dodRemoteIPNetEntry, fpUdpRelayTable=fpUdpRelayTable, fpSysDay=fpSysDay, dodPhoneTable=dodPhoneTable, dhcpSubnetTftpServer=dhcpSubnetTftpServer, fpLoginAction=fpLoginAction, dhcpClientExpireTimeYear=dhcpClientExpireTimeYear, dodIpxOptRIPSAP=dodIpxOptRIPSAP, IpxNetAddress=IpxNetAddress, dodRemoteIPXSAPStrSocket=dodRemoteIPXSAPStrSocket, fpIsdnOperation=fpIsdnOperation, fpLoginPassword=fpLoginPassword, dhcpOptionType=dhcpOptionType, dhcpCodeTable=dhcpCodeTable, dodNatHostMappingEntry=dodNatHostMappingEntry, dhcpGlobalValueEntry=dhcpGlobalValueEntry, dodIPXNetAddress=dodIPXNetAddress, etherLastPrivateIPAddress=etherLastPrivateIPAddress, dodCompression=dodCompression, fpDLInitiateColdBoot=fpDLInitiateColdBoot, fpEtherIpOptSendRIP=fpEtherIpOptSendRIP, fplogin=fplogin)
