#
# PySNMP MIB module ANS-EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANS-EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
RowStatus, mlpmpR115, RowPointer = mibBuilder.importSymbols("ANS-COMMON-MIB", "RowStatus", "mlpmpR115", "RowPointer")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, ObjectIdentity, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, NotificationType, ModuleIdentity, MibIdentifier, Counter64, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "ObjectIdentity", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "NotificationType", "ModuleIdentity", "MibIdentifier", "Counter64", "IpAddress", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
equipment = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3))
systemNode = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1))
subrack = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4))
physicalPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5))
netClockSource = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6))
class AnsSubrackType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 7, 9))
    namedValues = NamedValues(("badvalue", -1), ("concentrator", 7), ("wbas", 9))

class ProtectedBoardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("wbas-rn", 1))

ansSystemNodeTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3), )
if mibBuilder.loadTexts: ansSystemNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeTable.setDescription('Lists of all system nodes in ANx.')
ansSystemNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSystemNodeIndex"))
if mibBuilder.loadTexts: ansSystemNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeEntry.setDescription('')
ansSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSystemNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeIndex.setDescription('A unique value for the system node.')
ansSystemNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeName.setDescription('An assigned name for the system node.')
ansSystemNodeOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("native", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeOrigin.setDescription("'native' indicates that the system node is managed by this agent.")
ansSystemNodeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeLocation.setDescription('An indication where the system node is located. This could be indicated as a row/cabinet/shelf, a place in a building, and/or a street address.')
ansSystemNodeClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("undefined", 1), ("net-clock-source", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSystemNodeClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeClockSource.setDescription("'net-clock-source' indicates that in the system node is defined the Net Master.")
ansSystemNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 1, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSystemNodeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansSystemNodeRowStatus.setDescription('')
ansSubrackTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2), )
if mibBuilder.loadTexts: ansSubrackTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackTable.setDescription('Lists of all subracks in ANx.')
ansSubrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSubrackSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSubrackIndex"))
if mibBuilder.loadTexts: ansSubrackEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackEntry.setDescription('')
ansSubrackSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackSystemNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackSystemNodeIndex.setDescription('A reference to the associated system node.')
ansSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackIndex.setDescription('A unique value for this subrack.')
ansSubrackName = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackName.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackName.setDescription('An assigned name for the subrack.')
ansSubrackHwId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(46, 46)).setFixedLength(46)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackHwId.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackHwId.setDescription('Hardware identity string stored in PROM in the subrack. The ASCII string is encoded as follows: ansSubrackHwId[0-15] : Procuct number (e.g. ROJ 212 16/1), [16 ASCII characters] ansSubrackHwId[16-22] : Version (e.g. P1C/3), [7 ASCII characters] ansSubrackHwId[23-34] : Serial number (e.g. A270000141) [12 ASCII characters] ansSubrackHwId[35-40] : Vendor (e.g. ETX) [6 ASCII characters] ansSubrackHwId[31-44] : Spare (not used) [4 ASCII characters] ansSubrackHwId[45] : CR (Carrige Return) [1 ASCII character]')
ansSubrackLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackLocation.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackLocation.setDescription('An indication where the subrack is located. This could be indicated as a row/cabinet/shelf, a place in a building, and/or a street address.')
ansSubrackType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 6), AnsSubrackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackType.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackType.setDescription('Identifies subrack type.')
ansSubrackProtectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-protected", 1), ("protected", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackProtectionState.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackProtectionState.setDescription('')
ansSubrackProtectionScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackProtectionScheme.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackProtectionScheme.setDescription('')
ansSubrackNoOfSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackNoOfSlots.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackNoOfSlots.setDescription('The number of slots in the subrack.')
ansSubrackAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSubrackAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackAlarmStatus.setDescription('Bitmap indicating the current alarm status of the subrack. The status codes are: 0: subrackNoDefect 2: subrackCommunicationLost 4: subrackFanFailure 8: subrackPowerFailure 16: Not used. 32: subrackMismatch 64: Not used. 128: Not used.')
ansSubrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 2, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSubrackRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansSubrackRowStatus.setDescription('')
ansSlotTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1), )
if mibBuilder.loadTexts: ansSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotTable.setDescription('This table contains pre-configured and and actual board data for slots in ANx.')
ansSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSlotSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotPosition"))
if mibBuilder.loadTexts: ansSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotEntry.setDescription('')
ansSlotSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotSystemNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotSystemNodeIndex.setDescription('A reference to the associated system node.')
ansSlotSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotSubrackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotSubrackIndex.setDescription('A reference to the associated subrack')
ansSlotPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotPosition.setDescription('The value of this object identifies the slot within the subrack.')
ansSlotConfiguredBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSlotConfiguredBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotConfiguredBoardId.setDescription('Hardware identity string for the board configured for this slot. The string is encoded in the same way as ansSlotInsertedBoardId.')
ansSlotInsertedBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotInsertedBoardId.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotInsertedBoardId.setDescription('This variable contains the identification string of the board inserted in this slot. The ASCII string is encoded as follows: ansSlotInsertedBoardId[0-15] : Procuct number (e.g. ROJ 212 16/1), [16 ASCII characters] ansSlotInsertedBoardId[16-22] : Version (e.g. P1C/3), [7 ASCII characters] ansSlotInsertedBoardId[23-34] : Serial number (e.g. A270000141) [12 ASCII characters] ansSlotInsertedBoardId[35-40] : Vendor (e.g. ETX) [6 ASCII characters] ansSlotInsertedBoardId[31-44] : Spare (not used) [4 ASCII characters] ansSlotInsertedBoardId[45] : CR (Carrige Return) [1 ASCII character]')
ansSlotManagementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("managed", 1), ("unmanaged", 2), ("unconfigEmpty", 3), ("configEmpty", 4), ("configBoard", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansSlotManagementStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotManagementStatus.setDescription("This attribute shows the behaviour of a slot. The following values are possible: managed The slot is of management interest. Inserted boards will be detected and events/alarms will be generated for the slot. unmanaged The slot is currently not of management interest. No events or alarms will be generated for this slot. Possible boards inserted in the slot will not be detected and can not be taken into service. Default value of this object is 'managed'. unconfigEmpty Unconfigured empty slot. configEmpty Configured empty slot, that did not previously contain a matching board. configBoard Board inserted in the slot that matches the data configured for the slot.")
ansSlotFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotFallback.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotFallback.setDescription('This variable indicates the fallback of the slot.')
ansSlotAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansSlotAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansSlotAlarmStatus.setDescription(' This variable indicates the current alarm status of the slot. Note that the first three states represent normal states. The different states are exclusive. The alarm codes are: 0: noDefectUnconfiguredEmptySlot (unconfigured empty slot) 1: noDefectConfiguredEmptySlot (configured empty slot, that did not previously contain a matching board) 2: noDefectMatchingBoardInserted (board inserted in the slot that matches the data configured for the slot) 4: boardRemoved (matching board has been removed from the slot) 8: unconfiguredBoardInserted (board inserted in an unconfigured slot) 16: boardMismatch (board inserted in a slot and the board does not match the data configured for the slot) 32: boardUnrecognized (unrecognized board inserted in the slot) 64: Not used. 128: Not used.')
ansBoardTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2), )
if mibBuilder.loadTexts: ansBoardTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardTable.setDescription('This table contains all known boards in ANx.')
ansBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: ansBoardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardEntry.setDescription('')
ansBoardSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSystemNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardSystemNodeIndex.setDescription('A reference to the system node the board belongs to.')
ansBoardSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSubrackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardSubrackIndex.setDescription('A reference to the subrack the circuit board is inserted in.')
ansBoardPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardPosition.setDescription('A reference to the slot within a subrack the circuit board is inserted in.')
ansBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardType.setDescription('Type of circuit board e.g. ET, RN, AT.')
ansBoardHwId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(46, 46)).setFixedLength(46)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardHwId.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardHwId.setDescription('The identification string of the board The ASCII string is encoded as follows: ansBoardHwId[0-15] : Procuct number (e.g. ROJ 212 16/1), [16 ASCII characters] ansBoardHwId[16-22] : Version (e.g. P1C/3), [7 ASCII characters] ansBoardHwId[23-34] : Serial number (e.g. A270000141) [12 ASCII characters] ansBoardHwId[35-40] : Vendor (e.g. ETX) [6 ASCII characters] ansBoardHwId[31-44] : Spare (not used) [4 ASCII characters] ansBoardHwId[45] : CR (Carrige Return) [1 ASCII character]')
ansBoardSwIdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSwIdActive.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardSwIdActive.setDescription('Identifies the core software load module of the DP The ASCII string is encoded as follows: ansBoardSwIdCore[0-21]: Product Number [22 ASCII characters], ansBoardSwIdCore[22-28]: Version [7 ASCII characters]')
ansBoardSwIdPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardSwIdPassive.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardSwIdPassive.setDescription('Identifies the application load module of the DP The ASCII string is encoded as follows: ansBoardSwIdApplication[0-21]: Product Number [22 ASCII characters], ansBoardSwIdApplication[22-28]: Version [7 ASCII characters]')
ansBoardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardOperStatus.setDescription('')
ansBoardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansBoardAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardAdminStatus.setDescription('')
ansBoardRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansBoardRestart.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardRestart.setDescription('Initiates a restart of the DP.')
ansBoardLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redOff", 1), ("redOn", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardLedStatus.setDescription("Indicates the status of the board's red LED. (The green LED indicates that the board is powered and is asumed to always to be on) redOff : No failure has been detected. redOn : Failure has been detected.")
ansBoardStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("providing-service", 1), ("cold-standby", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardStandbyStatus.setDescription('Indicates the standby status of the board.')
ansBoardAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardAlarmStatus.setDescription('A bitmap that indicates the current alarm status of the circuit board. The alarm codes are: 0: boardNoDefect 1: boardFlashMemoryWarning 2: boardFlashMemoryError 4: boardRamWarning 8: boardRamError 16: boardEEPromWarning 32: boardEEPromError 64: boardMCNWarning 128: boardMCNError 256: Not Used. 512: boardRuntimeError 1024: boardStartError 2048: boardSoftwareError 4096: boardRuntimeWarning 8192: boardIncorrectSwVersion')
ansBoardUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansBoardUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardUsageState.setDescription('Usage State')
ansBoardSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("netMaster", 3), ("notUsed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansBoardSyncMode.setStatus('mandatory')
if mibBuilder.loadTexts: ansBoardSyncMode.setDescription('Clocking mode')
ansPhysicalPointTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1), )
if mibBuilder.loadTexts: ansPhysicalPointTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointTable.setDescription('This table contains all known physical points in ANx.')
ansPhysicalPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointPosition"), (0, "ANS-EQUIPMENT-MIB", "ansPhysicalPointIndex"))
if mibBuilder.loadTexts: ansPhysicalPointEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointEntry.setDescription('')
ansPhysicalPointSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointSystemNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointSystemNodeIndex.setDescription('A reference to the system node the physical point belongs to.')
ansPhysicalPointSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointSubrackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointSubrackIndex.setDescription('A reference to the subrack the physical point belongs to.')
ansPhysicalPointPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointPosition.setDescription('A reference to the board within a subrack the physical point belongs to.')
ansPhysicalPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointIndex.setDescription('')
ansDsPhysicalPointSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointSystemNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansDsPhysicalPointSystemNodeIndex.setDescription('A reference to the downstream system node.')
ansDsPhysicalPointSubrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointSubrackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansDsPhysicalPointSubrackIndex.setDescription('A reference to the downstream subrack.')
ansDsPhysicalPointPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansDsPhysicalPointPosition.setDescription('A reference to the downstream board within a subrack.')
ansDsPhysicalPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansDsPhysicalPointIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansDsPhysicalPointIndex.setDescription('')
ansPhysicalPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 4), ("sdhUni", 5), ("sdhUniTelia", 6), ("sonetUni", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointType.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointType.setDescription('')
ansPhysicalPointCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("service", 1), ("user", 2), ("serviceUser", 3), ("internal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansPhysicalPointCategory.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointCategory.setDescription('')
ansPhysicalPointOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointOperStatus.setDescription('')
ansPhysicalPointAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansPhysicalPointAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointAdminStatus.setDescription('')
ansPhysicalPointUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansPhysicalPointUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: ansPhysicalPointUsageState.setDescription('')
netClockSourceTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1), )
if mibBuilder.loadTexts: netClockSourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceTable.setDescription('Net Clock Source Table')
netClockSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "netClockSourceSystemNodeIndex"))
if mibBuilder.loadTexts: netClockSourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceEntry.setDescription('This entity represents a net clock source for circuit emulation synchronization.')
netClockSourceSystemNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netClockSourceSystemNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceSystemNodeIndex.setDescription('System node used for synchronization.')
netClockSourceSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceSubrack.setDescription('Subrack used for synchronization')
netClockSourceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceSlot.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceSlot.setDescription('Slot used for synchronization')
netClockSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netClockSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourcePort.setDescription('Port used for synchronization')
netClockSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("idle", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netClockSourceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceStatus.setDescription('...')
netClockSourcePriorityList = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourcePriorityList.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourcePriorityList.setDescription('Priority list used for synchronization. [Port1,Port2,Port3,Port4]')
netClockSourceRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("revertive", 1), ("not-revertive", 2), ("not-used", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceRevertiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceRevertiveMode.setDescription('Revertive Mode used for synchronization. Value: revertive,not-revertive,not-used')
netClockSourceTimeToRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceTimeToRestore.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceTimeToRestore.setDescription('Time to restore used for synchronization (9) not_used')
netClockSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 3, 6, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClockSourceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netClockSourceRowStatus.setDescription('')
mibBuilder.exportSymbols("ANS-EQUIPMENT-MIB", ansSlotSubrackIndex=ansSlotSubrackIndex, netClockSourceRevertiveMode=netClockSourceRevertiveMode, ansSlotTable=ansSlotTable, netClockSourcePort=netClockSourcePort, board=board, ansBoardSubrackIndex=ansBoardSubrackIndex, ansSubrackLocation=ansSubrackLocation, ansSystemNodeRowStatus=ansSystemNodeRowStatus, ansSubrackTable=ansSubrackTable, netClockSourceSubrack=netClockSourceSubrack, ansBoardUsageState=ansBoardUsageState, ansSlotFallback=ansSlotFallback, ProtectedBoardType=ProtectedBoardType, AnsSubrackType=AnsSubrackType, ansSystemNodeName=ansSystemNodeName, slot=slot, ansBoardTable=ansBoardTable, ansSlotPosition=ansSlotPosition, ansPhysicalPointPosition=ansPhysicalPointPosition, ansBoardRestart=ansBoardRestart, ansSubrackName=ansSubrackName, netClockSourcePriorityList=netClockSourcePriorityList, physicalPoint=physicalPoint, ansSubrackIndex=ansSubrackIndex, ansDsPhysicalPointSubrackIndex=ansDsPhysicalPointSubrackIndex, ansSystemNodeClockSource=ansSystemNodeClockSource, ansBoardSystemNodeIndex=ansBoardSystemNodeIndex, netClockSourceTable=netClockSourceTable, netClockSourceRowStatus=netClockSourceRowStatus, ansBoardSwIdPassive=ansBoardSwIdPassive, ansPhysicalPointType=ansPhysicalPointType, ansBoardPosition=ansBoardPosition, ansSystemNodeTable=ansSystemNodeTable, ansDsPhysicalPointIndex=ansDsPhysicalPointIndex, netClockSourceTimeToRestore=netClockSourceTimeToRestore, ansSystemNodeIndex=ansSystemNodeIndex, ansPhysicalPointTable=ansPhysicalPointTable, ansSystemNodeEntry=ansSystemNodeEntry, ansSubrackType=ansSubrackType, ansSlotAlarmStatus=ansSlotAlarmStatus, netClockSourceSystemNodeIndex=netClockSourceSystemNodeIndex, ansPhysicalPointAdminStatus=ansPhysicalPointAdminStatus, ansSubrackProtectionState=ansSubrackProtectionState, netClockSourceStatus=netClockSourceStatus, ansSubrackNoOfSlots=ansSubrackNoOfSlots, systemNode=systemNode, ansSystemNodeOrigin=ansSystemNodeOrigin, ansBoardType=ansBoardType, ansSubrackAlarmStatus=ansSubrackAlarmStatus, netClockSourceEntry=netClockSourceEntry, ansBoardEntry=ansBoardEntry, ansPhysicalPointSubrackIndex=ansPhysicalPointSubrackIndex, ansBoardSwIdActive=ansBoardSwIdActive, subrack=subrack, ansPhysicalPointIndex=ansPhysicalPointIndex, ansPhysicalPointSystemNodeIndex=ansPhysicalPointSystemNodeIndex, ansSlotEntry=ansSlotEntry, ansPhysicalPointOperStatus=ansPhysicalPointOperStatus, ansBoardStandbyStatus=ansBoardStandbyStatus, ansSystemNodeLocation=ansSystemNodeLocation, ansPhysicalPointEntry=ansPhysicalPointEntry, ansBoardLedStatus=ansBoardLedStatus, ansBoardAdminStatus=ansBoardAdminStatus, ansBoardOperStatus=ansBoardOperStatus, ansPhysicalPointCategory=ansPhysicalPointCategory, ansSlotInsertedBoardId=ansSlotInsertedBoardId, ansSubrackProtectionScheme=ansSubrackProtectionScheme, ansBoardAlarmStatus=ansBoardAlarmStatus, ansDsPhysicalPointPosition=ansDsPhysicalPointPosition, ansBoardHwId=ansBoardHwId, ansSubrackEntry=ansSubrackEntry, ansSubrackHwId=ansSubrackHwId, ansSubrackRowStatus=ansSubrackRowStatus, ansDsPhysicalPointSystemNodeIndex=ansDsPhysicalPointSystemNodeIndex, ansPhysicalPointUsageState=ansPhysicalPointUsageState, ansBoardSyncMode=ansBoardSyncMode, netClockSourceSlot=netClockSourceSlot, ansSlotManagementStatus=ansSlotManagementStatus, ansSubrackSystemNodeIndex=ansSubrackSystemNodeIndex, ansSlotSystemNodeIndex=ansSlotSystemNodeIndex, netClockSource=netClockSource, equipment=equipment, ansSlotConfiguredBoardId=ansSlotConfiguredBoardId)
