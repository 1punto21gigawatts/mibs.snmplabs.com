#
# PySNMP MIB module ASCEND-MIBCLTMACCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBCLTMACCESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Counter64, Unsigned32, Gauge32, ModuleIdentity, Bits, MibIdentifier, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Counter64", "Unsigned32", "Gauge32", "ModuleIdentity", "Bits", "MibIdentifier", "IpAddress", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibcltmAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 67))
mibcltmAccessTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 67, 1), )
if mibBuilder.loadTexts: mibcltmAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmAccessTable.setDescription('A list of mibcltmAccess profile entries.')
mibcltmAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1), ).setIndexNames((0, "ASCEND-MIBCLTMACCESS-MIB", "cltmAccess-Index-o"))
if mibBuilder.loadTexts: mibcltmAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmAccessEntry.setDescription('A mibcltmAccess entry containing objects that maps to the parameters of mibcltmAccess profile.')
cltmAccess_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 1), Integer32()).setLabel("cltmAccess-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmAccess_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_Index_o.setDescription('')
cltmAccess_CltmSlot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17)))).setLabel("cltmAccess-CltmSlot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_CltmSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_CltmSlot.setDescription('Identify the CLTM slot within the system.')
cltmAccess_AccessSlot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17)))).setLabel("cltmAccess-AccessSlot").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_AccessSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_AccessSlot.setDescription('Identify the slot of the copper loop to be accessed.')
cltmAccess_AccessPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 4), Integer32()).setLabel("cltmAccess-AccessPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_AccessPort.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_AccessPort.setDescription('Identify the port of the copper loop to be accessed.')
cltmAccess_AccessLoop = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 10), Integer32()).setLabel("cltmAccess-AccessLoop").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_AccessLoop.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_AccessLoop.setDescription('Identify the the copper loop to be accessed.')
cltmAccess_AccessMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lookingOut", 1), ("bridged", 2)))).setLabel("cltmAccess-AccessMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_AccessMode.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_AccessMode.setDescription('The mode of the CLTM access.')
cltmAccess_AccessTerminal = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internalTesterTerminal", 1), ("externalTesterTerminal", 2), ("auxiliaryTesterTerminal", 3), ("externalLoop", 4)))).setLabel("cltmAccess-AccessTerminal").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_AccessTerminal.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_AccessTerminal.setDescription('The tester terminal to access the test copper loop.')
cltmAccess_ActivateAccess = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("cltmAccess-ActivateAccess").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_ActivateAccess.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_ActivateAccess.setDescription('Activate/Deactivate access.')
cltmAccess_AccessResult = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("accessActivated", 2), ("resourceBusy", 3)))).setLabel("cltmAccess-AccessResult").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmAccess_AccessResult.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_AccessResult.setDescription('The result of activating the copper loop access.')
cltmAccess_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 67, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("cltmAccess-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmAccess_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmAccess_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBCLTMACCESS-MIB", mibcltmAccessEntry=mibcltmAccessEntry, cltmAccess_ActivateAccess=cltmAccess_ActivateAccess, cltmAccess_AccessTerminal=cltmAccess_AccessTerminal, DisplayString=DisplayString, cltmAccess_Action_o=cltmAccess_Action_o, cltmAccess_CltmSlot=cltmAccess_CltmSlot, cltmAccess_AccessSlot=cltmAccess_AccessSlot, mibcltmAccessTable=mibcltmAccessTable, cltmAccess_Index_o=cltmAccess_Index_o, cltmAccess_AccessLoop=cltmAccess_AccessLoop, cltmAccess_AccessPort=cltmAccess_AccessPort, mibcltmAccess=mibcltmAccess, cltmAccess_AccessResult=cltmAccess_AccessResult, cltmAccess_AccessMode=cltmAccess_AccessMode)
