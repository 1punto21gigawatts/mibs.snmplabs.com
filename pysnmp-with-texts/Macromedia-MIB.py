#
# PySNMP MIB module Macromedia-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Macromedia-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, ModuleIdentity, Gauge32, ObjectIdentity, enterprises, NotificationType, NotificationType, Unsigned32, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "enterprises", "NotificationType", "NotificationType", "Unsigned32", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
allaire = MibIdentifier((1, 3, 6, 1, 4, 1, 7138))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1))
coldfusion = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 1))
jrun = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 2))
jrunServers = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 3))
jrunJDBCs = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 4))
jrunWebApps = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 5))
jrunEJBs = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 6))
probes = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 7))
haaManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 8))
serverManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 9))
clusterManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 10))
clusterMembership = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 11))
trapRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 7138, 1, 12))
cfOSName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfOSName.setStatus('mandatory')
if mibBuilder.loadTexts: cfOSName.setDescription('The name of the operation system.')
cfOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfOSVersion.setDescription('The version of the operation system.')
cfOSBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfOSBuildNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfOSBuildNumber.setDescription('The build number of the operation system.')
cfOSAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfOSAdditionalInfo.setStatus('mandatory')
if mibBuilder.loadTexts: cfOSAdditionalInfo.setDescription('Additional information concerning the operation system.')
cfProductName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfProductName.setStatus('mandatory')
if mibBuilder.loadTexts: cfProductName.setDescription('The name of the ColdFusion product.')
cfProductLevel = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfProductLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cfProductLevel.setDescription('The level of the ColdFusion product.')
cfProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfProductVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cfProductVersion.setDescription('The version of the ColdFusion product.')
cfPerformanceMonitorOn = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPerformanceMonitorOn.setStatus('mandatory')
if mibBuilder.loadTexts: cfPerformanceMonitorOn.setDescription('Indicator specifying whether ColdFusion Enable Performance Monitoring is turned on. If off, the next 11 runtime parameters will have the value 0.')
cfPageHits = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfPageHits.setStatus('mandatory')
if mibBuilder.loadTexts: cfPageHits.setDescription('The number of ColdFusion page hits per seconds.')
cfRequestsQueued = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfRequestsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cfRequestsQueued.setDescription('The number of ColdFusion requests currently being queued.')
cfDatabaseHits = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfDatabaseHits.setStatus('mandatory')
if mibBuilder.loadTexts: cfDatabaseHits.setDescription('The number of database hits by ColdFusion pages per seconds.')
cfRequestsRunning = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfRequestsRunning.setStatus('mandatory')
if mibBuilder.loadTexts: cfRequestsRunning.setDescription('The number of requests currently being processed by ColdFusion.')
cfReqestsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfReqestsTimedOut.setStatus('mandatory')
if mibBuilder.loadTexts: cfReqestsTimedOut.setDescription('The number of ColdFusion requests that have been timed out.')
cfBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cfBytesIn.setDescription('The total number of bytes that have been read by ColdFusion per second.')
cfBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cfBytesOut.setDescription('The total number of bytes that have been outputted by ColdFusion per second.')
cfAvgQueueTimes = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAvgQueueTimes.setStatus('mandatory')
if mibBuilder.loadTexts: cfAvgQueueTimes.setDescription('The average amount of time spent by a ColdFusion page request in the queue before being processed.')
cfAvgRequestTime = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAvgRequestTime.setStatus('mandatory')
if mibBuilder.loadTexts: cfAvgRequestTime.setDescription('The average amount of process time spent on a ColdFusion request (queuing time not included).')
cfAvgDBTime = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfAvgDBTime.setStatus('mandatory')
if mibBuilder.loadTexts: cfAvgDBTime.setDescription('The average amount of process time spent by ColdFusion for a database requests.')
cfCachePops = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCachePops.setStatus('mandatory')
if mibBuilder.loadTexts: cfCachePops.setDescription('The number of cache pops performed by ColdFusion per seconds.')
cfMaxRequests = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMaxRequests.setStatus('mandatory')
if mibBuilder.loadTexts: cfMaxRequests.setDescription('Maximum number of concurrent requests ColdFusion may process.')
cfLimitTime = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfLimitTime.setStatus('mandatory')
if mibBuilder.loadTexts: cfLimitTime.setDescription('Indicator specifying whether ColdFusion should limit the time a request may take.')
cfMaxSeconds = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMaxSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: cfMaxSeconds.setDescription('Maximum number of seconds a ColdFusion request may take.')
cfTrustCache = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfTrustCache.setStatus('mandatory')
if mibBuilder.loadTexts: cfTrustCache.setDescription('Indicator specifying whether ColdFusion trusts the content of the cache.')
cfTemplateCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfTemplateCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: cfTemplateCacheSize.setDescription('The size of the ColdFusion template cache.')
cfRunningRDS = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfRunningRDS.setStatus('mandatory')
if mibBuilder.loadTexts: cfRunningRDS.setDescription('Indicator specifying whether ColdFusion is running.')
cfDebuggingOn = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfDebuggingOn.setStatus('mandatory')
if mibBuilder.loadTexts: cfDebuggingOn.setDescription('Indicator specifying whether one of the debug settings in the ColdFusion Admin Debug Settings page is turned on (Enable Performance Monitoring excluded).')
cfEnforceStrictAttributeValidation = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfEnforceStrictAttributeValidation.setStatus('mandatory')
if mibBuilder.loadTexts: cfEnforceStrictAttributeValidation.setDescription('Indicator specifying whether ColdFusion strictly enforces attribute validation.')
cfRestartThreshold = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfRestartThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cfRestartThreshold.setDescription('The maximum number of unresponsive requests allowed before restarting ColdFusion.')
cfMaxCachedQueries = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMaxCachedQueries.setStatus('mandatory')
if mibBuilder.loadTexts: cfMaxCachedQueries.setDescription('The maximum number of cached queries for ColdFusion.')
cfMailServerName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMailServerName.setStatus('mandatory')
if mibBuilder.loadTexts: cfMailServerName.setDescription('The name of the Mail Server used by ColdFusion.')
cfMailServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMailServerPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cfMailServerPortNumber.setDescription('The port number of the ColdFusion Mail Server.')
cfMailServerConnectTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMailServerConnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cfMailServerConnectTimeout.setDescription('The time ColdFusion should wait for a response from the mail server.')
jOSName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jOSName.setStatus('mandatory')
if mibBuilder.loadTexts: jOSName.setDescription('The name of the operation system.')
jOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: jOSVersion.setDescription('The version number of the operation system.')
jMachineArchitecture = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jMachineArchitecture.setStatus('mandatory')
if mibBuilder.loadTexts: jMachineArchitecture.setDescription('The architecture of the machine.')
jJDKVendor = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJDKVendor.setStatus('mandatory')
if mibBuilder.loadTexts: jJDKVendor.setDescription('The company that supplies the Java Development Kit.')
jJDKVersion = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJDKVersion.setStatus('mandatory')
if mibBuilder.loadTexts: jJDKVersion.setDescription('The version of the Java Development Kit.')
jJRunVersion = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJRunVersion.setStatus('mandatory')
if mibBuilder.loadTexts: jJRunVersion.setDescription('JRun version number.')
jFreeMomory = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jFreeMomory.setStatus('mandatory')
if mibBuilder.loadTexts: jFreeMomory.setDescription('Kilobytes of free memory in the heap.')
jTotalMomory = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jTotalMomory.setStatus('mandatory')
if mibBuilder.loadTexts: jTotalMomory.setDescription('Total kilobytes in the heap.')
jSessions = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jSessions.setStatus('mandatory')
if mibBuilder.loadTexts: jSessions.setDescription('Current number of active sessions.')
jSessionsInMemory = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jSessionsInMemory.setStatus('mandatory')
if mibBuilder.loadTexts: jSessionsInMemory.setDescription('Number of sessions in memory.')
jJcpBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpBytesIn.setDescription('The number of bytes read from request by the JRun Service.')
jJcpBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpBytesOut.setDescription('The number of bytes written in response by the JRun Service.')
jJcpHandledRequests = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpHandledRequests.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpHandledRequests.setDescription('Number of requests handled by the JRun Service.')
jJcpDelayRequests = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpDelayRequests.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpDelayRequests.setDescription('Number of requests delayed by the JRun Service due to high concurrency.')
jJcpDroppedRequests = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpDroppedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpDroppedRequests.setDescription('Number of requests dropped by the JRun Service.')
jJcpHandledMs = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpHandledMs.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpHandledMs.setDescription('Number of milliseconds spent servicing requests by the JRun Service (delay time not included).')
jJcpDelayMs = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpDelayMs.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpDelayMs.setDescription('Number of milliseconds spent in delayed state by the JRun Service.')
jJcpTotalThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpTotalThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpTotalThreads.setDescription('Total workers threads of the JRun Service.')
jJcpListenThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpListenThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpListenThreads.setDescription('Threads in the JRun Service waiting for a new connection.')
jJcpBusyThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpBusyThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpBusyThreads.setDescription('Threads in the JRun Service currently running.')
jJcpDelayThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpDelayThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpDelayThreads.setDescription('Threads in the JRun Service waiting to run.')
jJcpIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jJcpIdleThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jJcpIdleThreads.setDescription('Threads in the JRun Service waiting for a new request.')
jWebBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: jWebBytesIn.setDescription('The number of bytes read from request by the JRun Web Server.')
jWebBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: jWebBytesOut.setDescription('The number of bytes written in response by the JRun Web Server.')
jWebHandledRequests = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebHandledRequests.setStatus('mandatory')
if mibBuilder.loadTexts: jWebHandledRequests.setDescription('Number of requests handled by the JRun Web Server.')
jWebDelayRequests = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebDelayRequests.setStatus('mandatory')
if mibBuilder.loadTexts: jWebDelayRequests.setDescription('Number of requests delayed by the JRun Web Server due to high concurrency.')
jWebDroppedRequests = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebDroppedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: jWebDroppedRequests.setDescription('Number of requests dropped by the JRun Web Server.')
jWebHandledMs = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebHandledMs.setStatus('mandatory')
if mibBuilder.loadTexts: jWebHandledMs.setDescription('Number of milliseconds spent servicing requests by the JRun Web Server (delay time not included).')
jWebDelayMs = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebDelayMs.setStatus('mandatory')
if mibBuilder.loadTexts: jWebDelayMs.setDescription('Number of milliseconds spent in delayed state by the JRun Web Server.')
jWebTotalThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebTotalThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jWebTotalThreads.setDescription('Total workers threads of the JRun Web Server.')
jWebListenThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebListenThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jWebListenThreads.setDescription('Threads in the JRun Web Server waiting for a new connection.')
jWebBusyThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebBusyThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jWebBusyThreads.setDescription('Threads in the JRun Web Server currently running.')
jWebDelayThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebDelayThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jWebDelayThreads.setDescription('Threads in the JRun Web Server waiting to run.')
jWebIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jWebIdleThreads.setStatus('mandatory')
if mibBuilder.loadTexts: jWebIdleThreads.setDescription('Threads in the JRun Web Server waiting for a new request.')
jrunServerTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 3, 1), )
if mibBuilder.loadTexts: jrunServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: jrunServerTable.setDescription('A table containing JRun Servers (e.g. Admin Server, Default Server).')
jrunServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 3, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "jrunServerOrdinal"))
if mibBuilder.loadTexts: jrunServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: jrunServerEntry.setDescription('Row definition for this table.')
jrunServerOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrunServerOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: jrunServerOrdinal.setDescription('The ordinal of this JRun server amongst all the JRun Servers. The JRun Servers are sorted by their name.')
jrunServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrunServerName.setStatus('mandatory')
if mibBuilder.loadTexts: jrunServerName.setDescription('The name of the JRun Server.')
jrunServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jrunServerState.setStatus('mandatory')
if mibBuilder.loadTexts: jrunServerState.setDescription('The state of the JRun server.')
jrunJDBCTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 4, 1), )
if mibBuilder.loadTexts: jrunJDBCTable.setStatus('mandatory')
if mibBuilder.loadTexts: jrunJDBCTable.setDescription('A table describing JDBC data sources associated with JRun servers.')
jrunJDBCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 4, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "jdbcOrdinal"))
if mibBuilder.loadTexts: jrunJDBCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: jrunJDBCEntry.setDescription('Row definition for this table.')
jdbcOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: jdbcOrdinal.setDescription('The ordinal of the JDBC data source in the associated JRun server.')
jdbcJRunServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcJRunServerName.setStatus('mandatory')
if mibBuilder.loadTexts: jdbcJRunServerName.setDescription('The name of the JRun Server to which the JDBC definition belongs.')
jdbcName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcName.setStatus('mandatory')
if mibBuilder.loadTexts: jdbcName.setDescription('The name of the JDBC data source.')
jdbcState = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jdbcState.setStatus('mandatory')
if mibBuilder.loadTexts: jdbcState.setDescription('The state of the JDBC data source.')
jrunWebAppTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 5, 1), )
if mibBuilder.loadTexts: jrunWebAppTable.setStatus('mandatory')
if mibBuilder.loadTexts: jrunWebAppTable.setDescription('A table describing Web applications associated with JRun servers.')
jrunWebAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 5, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "webAppOrdinal"))
if mibBuilder.loadTexts: jrunWebAppEntry.setStatus('mandatory')
if mibBuilder.loadTexts: jrunWebAppEntry.setDescription('Row definition for this table.')
webAppOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: webAppOrdinal.setDescription('The ordinal of the Web Application in the associated JRun server.')
webAppJRunServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppJRunServerName.setStatus('mandatory')
if mibBuilder.loadTexts: webAppJRunServerName.setDescription('The name of this JRun Server to which the web application belong.')
webAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webAppName.setStatus('mandatory')
if mibBuilder.loadTexts: webAppName.setDescription('The name of the Web Application.')
jrunEjbTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 6, 1), )
if mibBuilder.loadTexts: jrunEjbTable.setStatus('mandatory')
if mibBuilder.loadTexts: jrunEjbTable.setDescription("A table describing EJB's associated with JRun servers.")
jrunEjbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 6, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "ejbOrdinal"))
if mibBuilder.loadTexts: jrunEjbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: jrunEjbEntry.setDescription('Row definition for this table.')
ejbOrdinal = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbOrdinal.setStatus('mandatory')
if mibBuilder.loadTexts: ejbOrdinal.setDescription('The ordinal of the EJB in the associated JRun server.')
ejbJRunServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbJRunServerName.setStatus('mandatory')
if mibBuilder.loadTexts: ejbJRunServerName.setDescription('The name of this JRun Server to which the EJB belongs.')
ejbName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ejbName.setStatus('mandatory')
if mibBuilder.loadTexts: ejbName.setDescription('The name of the EJB.')
probeTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 7, 1), )
if mibBuilder.loadTexts: probeTable.setStatus('mandatory')
if mibBuilder.loadTexts: probeTable.setDescription('A table containing ColdFusion probes.')
probeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 7, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "probeOrdinalNumber"))
if mibBuilder.loadTexts: probeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: probeEntry.setDescription('Row definition for this table.')
probeOrdinalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeOrdinalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: probeOrdinalNumber.setDescription('The ordinal of this probe amongst the Application probes. The probes are sorted by their name.')
probeName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeName.setStatus('mandatory')
if mibBuilder.loadTexts: probeName.setDescription('The name of the probe.')
probeState = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("success", 0), ("failure", 1), ("suspended", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeState.setStatus('mandatory')
if mibBuilder.loadTexts: probeState.setDescription('The state of the probe.')
haaServerTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1), )
if mibBuilder.loadTexts: haaServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: haaServerTable.setDescription('A table containing instance information for web servers in the computer.')
hserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "hServerOrdinalNumber"))
if mibBuilder.loadTexts: hserverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hserverEntry.setDescription('Row definition for this table.')
hServerOrdinalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerOrdinalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hServerOrdinalNumber.setDescription('The ordinal of this web server amongst web servers in the computer.')
hServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerName.setStatus('mandatory')
if mibBuilder.loadTexts: hServerName.setDescription('Fully qualified hostname for the Web Server.')
hServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: hServerIP.setDescription('IP address of the Web Server.')
hServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1), ("busy", 2), ("restricted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerState.setStatus('mandatory')
if mibBuilder.loadTexts: hServerState.setDescription('The state of the Web Server.')
hServerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("passive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerMode.setStatus('mandatory')
if mibBuilder.loadTexts: hServerMode.setDescription('For HAA, server mode being active means that it sends load statistics to the Hardware Load Balancing box.')
hServerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerLoad.setStatus('mandatory')
if mibBuilder.loadTexts: hServerLoad.setDescription('The load of the server, value is between 0 and 100.')
hServerLoadBalanceProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("brightTiger", 1), ("ciscoLocalDirector", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerLoadBalanceProduct.setStatus('mandatory')
if mibBuilder.loadTexts: hServerLoadBalanceProduct.setDescription('The product used for balancing web traffic.')
hServerLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hServerLoadThreshold.setDescription('A value between 0-100, when the server load reaches this value, HTTP requests will be redirected.')
hServerLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("coldFusion", 0), ("jrun", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hServerLoadType.setStatus('mandatory')
if mibBuilder.loadTexts: hServerLoadType.setDescription('The type of load used by the server for load balancing calculation.')
serverTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1), )
if mibBuilder.loadTexts: serverTable.setStatus('mandatory')
if mibBuilder.loadTexts: serverTable.setDescription('A table containing instance information for web servers in the computer.')
serverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "serverOrdinalNumber"))
if mibBuilder.loadTexts: serverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: serverEntry.setDescription('Row definition for this table.')
serverOrdinalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverOrdinalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: serverOrdinalNumber.setDescription('The ordinal of this web server amongst web servers in the computer.')
serverName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverName.setStatus('mandatory')
if mibBuilder.loadTexts: serverName.setDescription('Fully qualified hostname for the Web Server.')
serverIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIP.setStatus('mandatory')
if mibBuilder.loadTexts: serverIP.setDescription('IP address of the Web Server.')
serverState = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1), ("busy", 2), ("restricted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverState.setStatus('mandatory')
if mibBuilder.loadTexts: serverState.setDescription('The state of the Web Server.')
serverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("passive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMode.setStatus('mandatory')
if mibBuilder.loadTexts: serverMode.setDescription('For HAA, server mode being active means that it sends load statistics to the Hardware Load Balancing box. For ClusterCATS, server mode being active means that the server redirects web traffic to balance load')
serverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLoad.setStatus('mandatory')
if mibBuilder.loadTexts: serverLoad.setDescription('The load of the server, value is between 0 and 100.')
serverLoadBalanceProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("brightTiger", 1), ("ciscoLocalDirector", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLoadBalanceProduct.setStatus('mandatory')
if mibBuilder.loadTexts: serverLoadBalanceProduct.setDescription('The product used for balancing web traffic.')
serverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: serverLoadThreshold.setDescription('A value between 0-100, when the server load reaches this value, HTTP requests will be redirected.')
serverLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("coldFusion", 0), ("jrun", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverLoadType.setStatus('mandatory')
if mibBuilder.loadTexts: serverLoadType.setDescription('The type of load used by the server for load balancing calculation.')
serverCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCluster.setStatus('mandatory')
if mibBuilder.loadTexts: serverCluster.setDescription('The cluster the Web Server belongs to.')
serverAdminAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverAdminAgent.setStatus('mandatory')
if mibBuilder.loadTexts: serverAdminAgent.setDescription('The Admin Agent of the cluster the Web Server belongs to.')
serverSessionAwareness = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSessionAwareness.setStatus('mandatory')
if mibBuilder.loadTexts: serverSessionAwareness.setDescription('An indicator signifying whether session aware load balancing is turned on.')
serverGradualLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverGradualLoadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: serverGradualLoadThreshold.setDescription('A value between 0-100, when the server load reaches this value, some of the HTTP requests will be redirected.')
serverGradualRedirectState = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverGradualRedirectState.setStatus('mandatory')
if mibBuilder.loadTexts: serverGradualRedirectState.setDescription('Specifies if gradual redirection is turned on.')
clusterTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 10, 1), )
if mibBuilder.loadTexts: clusterTable.setStatus('mandatory')
if mibBuilder.loadTexts: clusterTable.setDescription('A table describing clusters to which the webservers belong.')
clusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 10, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "clusterOrdinalNumber"))
if mibBuilder.loadTexts: clusterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clusterEntry.setDescription('Row definition for this table.')
clusterOrdinalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterOrdinalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: clusterOrdinalNumber.setDescription('The ordinal of this cluster amongst the clusters encountered in this server.')
clusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterName.setStatus('mandatory')
if mibBuilder.loadTexts: clusterName.setDescription('The name of the cluster.')
clusterAdminAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAdminAgent.setStatus('mandatory')
if mibBuilder.loadTexts: clusterAdminAgent.setDescription("The name of the cluster's Admin Agent.")
clusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 7138, 1, 11, 1), )
if mibBuilder.loadTexts: clusterMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: clusterMemberTable.setDescription('A table describing webservers members for clusters found in a computer.')
clusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7138, 1, 11, 1, 1), ).setIndexNames((0, "Macromedia-MIB", "mClusterOrdinalNumber"), (0, "Macromedia-MIB", "mServerOrdinalNumber"))
if mibBuilder.loadTexts: clusterMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clusterMemberEntry.setDescription('Row definition for this table.')
mClusterOrdinalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mClusterOrdinalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mClusterOrdinalNumber.setDescription('The ordinal of this cluster amongst the clusters encountered in this server.')
mServerOrdinalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mServerOrdinalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mServerOrdinalNumber.setDescription('The ordinal of the member webservers in a cluster.')
mServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 7138, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mServerName.setStatus('mandatory')
if mibBuilder.loadTexts: mServerName.setDescription('The name of the member webserver.')
trapProbeName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProbeName.setStatus('mandatory')
if mibBuilder.loadTexts: trapProbeName.setDescription('The name of the probe in the latest Probe Failure trap.')
trapProbeFailureTime = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProbeFailureTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapProbeFailureTime.setDescription('The time at which the latest Probe Failure trap occurred.')
trapServerName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapServerName.setStatus('mandatory')
if mibBuilder.loadTexts: trapServerName.setDescription('The name of the server in the latest Server Abnormal State trap.')
trapServerState = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("available", 0), ("unavailable", 1), ("busy", 2), ("restricted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapServerState.setStatus('mandatory')
if mibBuilder.loadTexts: trapServerState.setDescription('The state of the Web Server in the latest Server Abnormal State trap.')
trapServerAbnormalStateTime = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapServerAbnormalStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapServerAbnormalStateTime.setDescription('The time at which the latest Server Abnormal State trap occurred.')
trapJRunServerName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapJRunServerName.setStatus('mandatory')
if mibBuilder.loadTexts: trapJRunServerName.setDescription('The name of the JRun Server in the latest JRun Server Abnormal State trap.')
trapJRunServerAbnormalStateTime = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapJRunServerAbnormalStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapJRunServerAbnormalStateTime.setDescription('The time at which the latest JRun Server Abnormal State trap occurred.')
trapJdbcJRunServerName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapJdbcJRunServerName.setStatus('mandatory')
if mibBuilder.loadTexts: trapJdbcJRunServerName.setDescription('The name of the JRun Server in the latest JRun JDBC Failure trap.')
trapJdbcName = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapJdbcName.setStatus('mandatory')
if mibBuilder.loadTexts: trapJdbcName.setDescription('The name of the JDBC data source in the latest JRun JDBC Failure trap.')
trapJRunJDBCFailureTime = MibScalar((1, 3, 6, 1, 4, 1, 7138, 1, 12, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapJRunJDBCFailureTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapJRunJDBCFailureTime.setDescription('The time at which the latest JRun JDBC Failure trap occurred.')
probeFailure = NotificationType((1, 3, 6, 1, 4, 1, 7138) + (0,1)).setObjects(("Macromedia-MIB", "trapProbeName"))
if mibBuilder.loadTexts: probeFailure.setDescription('This trap occurs whenever a probe on the server fails.')
serverAbnormalState = NotificationType((1, 3, 6, 1, 4, 1, 7138) + (0,2)).setObjects(("Macromedia-MIB", "trapServerName"), ("Macromedia-MIB", "trapServerState"))
if mibBuilder.loadTexts: serverAbnormalState.setDescription('This trap occurs whenever a web virtual server is not in the available state.')
jrunServerAbnormalState = NotificationType((1, 3, 6, 1, 4, 1, 7138) + (0,3)).setObjects(("Macromedia-MIB", "trapJRunServerName"))
if mibBuilder.loadTexts: jrunServerAbnormalState.setDescription('This trap occurs whenever a JRun server is not in the available state.')
jrunJDBCFailure = NotificationType((1, 3, 6, 1, 4, 1, 7138) + (0,4)).setObjects(("Macromedia-MIB", "trapJdbcJRunServerName"), ("Macromedia-MIB", "trapJdbcName"))
if mibBuilder.loadTexts: jrunJDBCFailure.setDescription('This trap occurs whenever connection to a JDBC data source of a JRun Server fails.')
mibBuilder.exportSymbols("Macromedia-MIB", jrunServerTable=jrunServerTable, jJcpListenThreads=jJcpListenThreads, jOSVersion=jOSVersion, jJcpIdleThreads=jJcpIdleThreads, hserverEntry=hserverEntry, jJcpBytesIn=jJcpBytesIn, mServerOrdinalNumber=mServerOrdinalNumber, serverLoadType=serverLoadType, cfBytesIn=cfBytesIn, serverAbnormalState=serverAbnormalState, probeTable=probeTable, jWebDelayMs=jWebDelayMs, hServerMode=hServerMode, jWebDelayThreads=jWebDelayThreads, jdbcState=jdbcState, cfAvgRequestTime=cfAvgRequestTime, clusterMemberEntry=clusterMemberEntry, trapServerAbnormalStateTime=trapServerAbnormalStateTime, cfMaxRequests=cfMaxRequests, serverName=serverName, jJcpHandledRequests=jJcpHandledRequests, cfTemplateCacheSize=cfTemplateCacheSize, cfProductVersion=cfProductVersion, jrunWebApps=jrunWebApps, serverLoadBalanceProduct=serverLoadBalanceProduct, jdbcJRunServerName=jdbcJRunServerName, jJcpHandledMs=jJcpHandledMs, cfRunningRDS=cfRunningRDS, hServerOrdinalNumber=hServerOrdinalNumber, serverManagement=serverManagement, jrunServerState=jrunServerState, cfMaxCachedQueries=cfMaxCachedQueries, jJcpDelayMs=jJcpDelayMs, jdbcOrdinal=jdbcOrdinal, cfMailServerConnectTimeout=cfMailServerConnectTimeout, cfAvgQueueTimes=cfAvgQueueTimes, jTotalMomory=jTotalMomory, webAppJRunServerName=webAppJRunServerName, probeOrdinalNumber=probeOrdinalNumber, probes=probes, cfPageHits=cfPageHits, cfOSAdditionalInfo=cfOSAdditionalInfo, clusterManagement=clusterManagement, software=software, jJcpTotalThreads=jJcpTotalThreads, jrunServerAbnormalState=jrunServerAbnormalState, cfDatabaseHits=cfDatabaseHits, jWebListenThreads=jWebListenThreads, mServerName=mServerName, jrunServers=jrunServers, jFreeMomory=jFreeMomory, serverTable=serverTable, clusterName=clusterName, jrunWebAppTable=jrunWebAppTable, jWebBytesIn=jWebBytesIn, jrun=jrun, trapRecord=trapRecord, clusterOrdinalNumber=clusterOrdinalNumber, jrunWebAppEntry=jrunWebAppEntry, cfDebuggingOn=cfDebuggingOn, cfLimitTime=cfLimitTime, clusterMembership=clusterMembership, hServerLoadBalanceProduct=hServerLoadBalanceProduct, trapServerState=trapServerState, jWebBusyThreads=jWebBusyThreads, haaServerTable=haaServerTable, coldfusion=coldfusion, allaire=allaire, hServerName=hServerName, jJcpDroppedRequests=jJcpDroppedRequests, serverSessionAwareness=serverSessionAwareness, trapJRunServerAbnormalStateTime=trapJRunServerAbnormalStateTime, probeEntry=probeEntry, cfMailServerPortNumber=cfMailServerPortNumber, clusterMemberTable=clusterMemberTable, cfOSVersion=cfOSVersion, serverCluster=serverCluster, jrunJDBCFailure=jrunJDBCFailure, probeFailure=probeFailure, trapProbeFailureTime=trapProbeFailureTime, jrunServerName=jrunServerName, jJcpDelayThreads=jJcpDelayThreads, jrunEjbTable=jrunEjbTable, probeState=probeState, clusterEntry=clusterEntry, jSessionsInMemory=jSessionsInMemory, jSessions=jSessions, clusterAdminAgent=clusterAdminAgent, probeName=probeName, serverState=serverState, trapJRunJDBCFailureTime=trapJRunJDBCFailureTime, jrunJDBCs=jrunJDBCs, cfOSName=cfOSName, cfRequestsQueued=cfRequestsQueued, cfCachePops=cfCachePops, serverEntry=serverEntry, ejbOrdinal=ejbOrdinal, jWebHandledRequests=jWebHandledRequests, jWebBytesOut=jWebBytesOut, serverGradualLoadThreshold=serverGradualLoadThreshold, jrunEJBs=jrunEJBs, trapJdbcJRunServerName=trapJdbcJRunServerName, clusterTable=clusterTable, cfAvgDBTime=cfAvgDBTime, hServerLoad=hServerLoad, cfReqestsTimedOut=cfReqestsTimedOut, jWebHandledMs=jWebHandledMs, ejbJRunServerName=ejbJRunServerName, trapJdbcName=trapJdbcName, cfProductLevel=cfProductLevel, jrunServerOrdinal=jrunServerOrdinal, jOSName=jOSName, hServerState=hServerState, hServerLoadThreshold=hServerLoadThreshold, jrunJDBCEntry=jrunJDBCEntry, trapJRunServerName=trapJRunServerName, cfMaxSeconds=cfMaxSeconds, trapServerName=trapServerName, jJcpBusyThreads=jJcpBusyThreads, jJcpBytesOut=jJcpBytesOut, cfOSBuildNumber=cfOSBuildNumber, jJDKVendor=jJDKVendor, haaManagement=haaManagement, jWebDelayRequests=jWebDelayRequests, jrunJDBCTable=jrunJDBCTable, webAppOrdinal=webAppOrdinal, hServerIP=hServerIP, cfProductName=cfProductName, webAppName=webAppName, serverOrdinalNumber=serverOrdinalNumber, serverMode=serverMode, trapProbeName=trapProbeName, serverIP=serverIP, jMachineArchitecture=jMachineArchitecture, cfEnforceStrictAttributeValidation=cfEnforceStrictAttributeValidation, jJRunVersion=jJRunVersion, jJDKVersion=jJDKVersion, cfMailServerName=cfMailServerName, jWebDroppedRequests=jWebDroppedRequests, hServerLoadType=hServerLoadType, serverLoad=serverLoad, cfTrustCache=cfTrustCache, jdbcName=jdbcName, ejbName=ejbName, cfPerformanceMonitorOn=cfPerformanceMonitorOn, serverLoadThreshold=serverLoadThreshold, cfRequestsRunning=cfRequestsRunning, jrunEjbEntry=jrunEjbEntry, serverGradualRedirectState=serverGradualRedirectState, jWebTotalThreads=jWebTotalThreads, jrunServerEntry=jrunServerEntry, jWebIdleThreads=jWebIdleThreads, serverAdminAgent=serverAdminAgent, cfBytesOut=cfBytesOut, jJcpDelayRequests=jJcpDelayRequests, cfRestartThreshold=cfRestartThreshold, mClusterOrdinalNumber=mClusterOrdinalNumber)
