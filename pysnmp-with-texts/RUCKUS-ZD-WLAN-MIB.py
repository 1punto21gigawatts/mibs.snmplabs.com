#
# PySNMP MIB module RUCKUS-ZD-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-ZD-WLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ruckusZDWLANModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusZDWLANModule")
RuckusRadioMode, RuckusAdminStatus, RuckusSSID, RuckusRateLimiting, RuckusdB = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusRadioMode", "RuckusAdminStatus", "RuckusSSID", "RuckusRateLimiting", "RuckusdB")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Unsigned32, IpAddress, Gauge32, ObjectIdentity, Counter32, Integer32, iso, ModuleIdentity, MibIdentifier, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "IpAddress", "Gauge32", "ObjectIdentity", "Counter32", "Integer32", "iso", "ModuleIdentity", "MibIdentifier", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, DisplayString, TruthValue, PhysAddress, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "PhysAddress", "RowStatus", "MacAddress")
ruckusZDWLANMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1))
if mibBuilder.loadTexts: ruckusZDWLANMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusZDWLANMIB.setOrganization('Ruckus Wireless, Inc.')
if mibBuilder.loadTexts: ruckusZDWLANMIB.setContactInfo('Ruckus Wireless, Inc. Postal: 880 W Maude Ave Sunnyvale, CA 94085 USA EMail: support@ruckuswireless.com Phone: +1-650-265-4200')
if mibBuilder.loadTexts: ruckusZDWLANMIB.setDescription('Ruckus ZD WLAN mib')
ruckusZDWLANObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1))
ruckusZDWLANInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1))
ruckusZDWLANTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: ruckusZDWLANTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANTable.setDescription('ZD WLAN table.')
ruckusZDWLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDWLANEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANEntry.setDescription('Specifies each ZD WLAN entry.')
ruckusZDWLANSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 1), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANSSID.setDescription('SSID.')
ruckusZDWLANDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDescription.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDescription.setDescription('WLAN description.')
ruckusZDWLANAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAuthentication.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAuthentication.setDescription('Authentication method.')
ruckusZDWLANEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANEncryption.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANEncryption.setDescription('Encryption method.')
ruckusZDWLANIsGuest = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANIsGuest.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANIsGuest.setDescription('This WLAN is for guest access.')
ruckusZDWLANSSIDBcastDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANSSIDBcastDisable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANSSIDBcastDisable.setDescription('Hide SSID.')
ruckusZDWLANVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVlanID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVlanID.setDescription('Specifies the VLAN ID of the WLAN. If VLAN ID is 1, packets from this WLAN will be untagged.')
ruckusZDWLANRateLimitingUp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRateLimitingUp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRateLimitingUp.setDescription('Rate limiting of uplink.')
ruckusZDWLANRateLimitingDown = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRateLimitingDown.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRateLimitingDown.setDescription('Rate limiting of downlink.')
ruckusZDWLANTunnelWLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANTunnelWLAN.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANTunnelWLAN.setDescription('Tunnel WLAN.')
ruckusZDWLANNumVAP = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANNumVAP.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANNumVAP.setDescription('Number of APs.')
ruckusZDWLANNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANNumSta.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANNumSta.setDescription('Number of client devices.')
ruckusZDWLANRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRxPkts.setDescription('Received packets.')
ruckusZDWLANRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRxBytes.setDescription('Received bytes.')
ruckusZDWLANTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANTxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANTxPkts.setDescription('Transmitted packets.')
ruckusZDWLANTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANTxBytes.setDescription('Transmitted bytes.')
ruckusZDWLANAuthTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAuthTotal.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAuthTotal.setDescription('Accumulated total number of attempt to authenticate by wireless terminals on this WLAN, or Authentication request.')
ruckusZDWLANAuthResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAuthResp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAuthResp.setDescription('Authentication response.')
ruckusZDWLANAuthSuccessTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAuthSuccessTotal.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAuthSuccessTotal.setDescription('Accumulated total number of success out of Wireless authentication attempts.')
ruckusZDWLANAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAuthFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAuthFail.setDescription('Authentication fail.')
ruckusZDWLANAssocTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAssocTotal.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAssocTotal.setDescription('Accumulated total number of access of wireless terminal on this WLAN, or Association request.')
ruckusZDWLANAssocResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAssocResp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAssocResp.setDescription('Association response.')
ruckusZDWLANReassocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANReassocReq.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANReassocReq.setDescription('Reassociation request.')
ruckusZDWLANReassocResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANReassocResp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANReassocResp.setDescription('Reassociation response.')
ruckusZDWLANAssocSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAssocSuccess.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAssocSuccess.setDescription('Association success.')
ruckusZDWLANAssocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAssocFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAssocFail.setDescription('Association fail.')
ruckusZDWLANAssocDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAssocDenied.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAssocDenied.setDescription('Association denied.')
ruckusZDWLANDiassocAbnormal = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDiassocAbnormal.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDiassocAbnormal.setDescription('Disassociation request due to abnormal causes.')
ruckusZDWLANDiassocCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDiassocCapacity.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDiassocCapacity.setDescription('Disassociation request due to device capacity.')
ruckusZDWLANDiassocLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDiassocLeave.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDiassocLeave.setDescription('Disassociation request due to client leave.')
ruckusZDWLANDiassocMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDiassocMisc.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDiassocMisc.setDescription('Disassociation request due to other reasons.')
ruckusZDWLANRxByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRxByteRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRxByteRate.setDescription('Received rate byte/s in last 5 minutes .')
ruckusZDWLANTxByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANTxByteRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANTxByteRate.setDescription('Transmitted rate byte/s in last 5 minutes .')
ruckusZDWLANRxDataFrameOnLan = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRxDataFrameOnLan.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRxDataFrameOnLan.setDescription('Received Data Frame Number on Lan interface .')
ruckusZDWLANRxByteOnLan = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRxByteOnLan.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRxByteOnLan.setDescription('Received Data Bytes on Lan interface .')
ruckusZDWLANTxByteOnLan = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANTxByteOnLan.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANTxByteOnLan.setDescription('Transmitted Data Bytes on Lan interface .')
ruckusZDWLANDownDropFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDownDropFrame.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDownDropFrame.setDescription('Drop Frame Number on Downlink of Wireless.')
ruckusZDWLANDownRetxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDownRetxFrame.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDownRetxFrame.setDescription('Retransmitted Frame Number on Downlink of Wireless.')
ruckusZDWLANDownTotalFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDownTotalFrame.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDownTotalFrame.setDescription('Total Frame Number on Downlink of Wireless.')
ruckusZDWLANDownTotalErrFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANDownTotalErrFrame.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANDownTotalErrFrame.setDescription('Total Error Frame Number on Downlink of Wireless.')
ruckusZDWLANUpTotalFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANUpTotalFrame.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANUpTotalFrame.setDescription('Total Frame Number on Uplink of Wireless.')
ruckusZDWLANUpDropFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANUpDropFrame.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANUpDropFrame.setDescription('Drop Frame Number on Uplink of Wireless.')
ruckusZDWLANUpRetxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANUpRetxFrame.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANUpRetxFrame.setDescription('Retransmitted Frame Number on Uplink of Wireless.')
ruckusZDWLANNAME = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 1, 1, 1, 108), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANNAME.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANNAME.setDescription('WLAN NAME.')
ruckusZDWLANAPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2))
ruckusZDWLANAPTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ruckusZDWLANAPTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPTable.setDescription('ZD WLAN AP table.')
ruckusZDWLANAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANAPMacAddr"))
if mibBuilder.loadTexts: ruckusZDWLANAPEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEntry.setDescription('Specifies each ZD WLAN AP entry.')
ruckusZDWLANAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMacAddr.setDescription('MAC address.')
ruckusZDWLANAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPDescription.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPDescription.setDescription('Description.')
ruckusZDWLANAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disconnected", 0), ("connected", 1), ("approvalPending", 2), ("upgradingFirmware", 3), ("provisioning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPStatus.setDescription('The connection status with ZD.')
ruckusZDWLANAPModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPModel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPModel.setDescription('Model name.')
ruckusZDWLANAPSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPSerialNumber.setDescription('Serial number.')
ruckusZDWLANAPUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPUptime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPUptime.setDescription('Up time.')
ruckusZDWLANAPSWversion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPSWversion.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPSWversion.setDescription('Software version.')
ruckusZDWLANAPHWversion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPHWversion.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPHWversion.setDescription('Hardware version.')
ruckusZDWLANAPIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIPAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIPAddr.setDescription('IP address.')
ruckusZDWLANAPNumRadios = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPNumRadios.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPNumRadios.setDescription('Number of radios.')
ruckusZDWLANAPNumVAP = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPNumVAP.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPNumVAP.setDescription('Number of APs.')
ruckusZDWLANAPNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPNumSta.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPNumSta.setDescription('Total number of authenticated terminal which is using currently on this AP.')
ruckusZDWLANAPNumRogues = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPNumRogues.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPNumRogues.setDescription('Number of rogue devices.')
ruckusZDWLANAPConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("layer2", 0), ("layer3", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPConnectionMode.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPConnectionMode.setDescription('The connection mode with ZD.')
ruckusZDWLANAPMeshEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMeshEnable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMeshEnable.setDescription('Mesh enable.')
ruckusZDWLANAPMeshHops = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMeshHops.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMeshHops.setDescription('Number of mesh hops.')
ruckusZDWLANAPMeshType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("root", 1), ("mesh", 2), ("forming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMeshType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMeshType.setDescription('Mesh type.')
ruckusZDWLANAPLANStatsRXByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXByte.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXByte.setDescription('Bytes received on LAN port.')
ruckusZDWLANAPLANStatsRXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPkt.setDescription('Packets received on LAN port.')
ruckusZDWLANAPLANStatsRXPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPktErr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPktErr.setDescription('Packets received erroneously on LAN port.')
ruckusZDWLANAPLANStatsRXPKTSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTSucc.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTSucc.setDescription('Packets received successfully on LAN port.')
ruckusZDWLANAPLANStatsTXByte = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXByte.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXByte.setDescription('Bytes transmitted on LAN port.')
ruckusZDWLANAPLANStatsTXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPkt.setDescription('Packets transmitted on LAN port.')
ruckusZDWLANAPMemUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMemUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMemUtil.setDescription('Memory utilization percentage.')
ruckusZDWLANAPMemTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMemTotal.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMemTotal.setDescription('Total memory in KB.')
ruckusZDWLANAPCPUUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPCPUUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPCPUUtil.setDescription('CPU utilization percentage.')
ruckusZDWLANAPFWSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPFWSize.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPFWSize.setDescription('Firmware partition size in byte.')
ruckusZDWLANAPFWAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPFWAvail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPFWAvail.setDescription('Firmware partition available size in byte.')
ruckusZDWLANAPMultipleVlanCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMultipleVlanCapability.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMultipleVlanCapability.setDescription('AP support multiple vlan capability.')
ruckusZDWLANAP11bCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAP11bCapable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAP11bCapable.setDescription('Support 802.11b.')
ruckusZDWLANAP11gCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAP11gCapable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAP11gCapable.setDescription('Support 802.11g.')
ruckusZDWLANAPMultiModeAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 38), TruthValue().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDWLANAPMultiModeAccessStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMultiModeAccessStatus.setDescription('Support simutaneously connections from 11a/b/g clients.')
ruckusZDWLANAPEthStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthStateChange.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthStateChange.setDescription('Ethernet port up/down count.')
ruckusZDWLANAPSyncConf = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPSyncConf.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPSyncConf.setDescription('Manually push configuration to this AP.')
ruckusZDWLANAPUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPUpgrade.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPUpgrade.setDescription('Upgrade this AP.')
ruckusZDWLANAPFirstJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPFirstJoinTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPFirstJoinTime.setDescription('Time of first join.')
ruckusZDWLANAPLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLastBootTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLastBootTime.setDescription('Time of last boot.')
ruckusZDWLANAPLastUpgradeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLastUpgradeTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLastUpgradeTime.setDescription('Time of last firmware upgrade.')
ruckusZDWLANAPLastConfSyncTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLastConfSyncTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLastConfSyncTime.setDescription('Time of last configuration synchronization.')
ruckusZDWLANAPLANStatsRXPKTBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTBcast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTBcast.setDescription('Broadcast packets received successfully on LAN port.')
ruckusZDWLANAPLANStatsRXPKTMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTMcast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTMcast.setDescription('Multicast packets received successfully on LAN port.')
ruckusZDWLANAPLANStatsRXPKTUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTUcast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXPKTUcast.setDescription('Unicast packets received successfully on LAN port.')
ruckusZDWLANAPLANStatsTXPKTBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPKTBcast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPKTBcast.setDescription('Broadcast packets transmitted successfully on LAN port.')
ruckusZDWLANAPLANStatsTXPKTMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPKTMcast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPKTMcast.setDescription('Multicast packets transmitted successfully on LAN port.')
ruckusZDWLANAPLANStatsTXPKTUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPKTUcast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXPKTUcast.setDescription('Unicast packets transmitted successfully on LAN port.')
ruckusZDWLANAPLANStatsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsDropped.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsDropped.setDescription('Number of packets dropped on LAN port.')
ruckusZDWLANAPMeshUpPortCntUpdown = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMeshUpPortCntUpdown.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMeshUpPortCntUpdown.setDescription('updown count of AP as a up port node in mesh mode.')
ruckusZDWLANAPMeshDownPortCntUpdown = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMeshDownPortCntUpdown.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMeshDownPortCntUpdown.setDescription('updown count of AP as a down port node in mesh mode.')
ruckusZDWLANAPTxFrameDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPTxFrameDropped.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPTxFrameDropped.setDescription('Droped Frame count of AP wireless transmitted.')
ruckusZDWLANAPTxFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPTxFrameError.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPTxFrameError.setDescription('Error Frame count of AP wireless transmitted.')
ruckusZDWLANAPCoverageTech = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("indoor", 1), ("indoor-distribute", 2), ("outdoor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPCoverageTech.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPCoverageTech.setDescription("AP's coverage technology.")
ruckusZDWLANAPStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPStaTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPStaTxBytes.setDescription('Client send data to this AP.(kbytes) ')
ruckusZDWLANAPStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPStaRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPStaRxBytes.setDescription('Client receive data from this AP.(kbytes)')
ruckusZDWLANAPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 100), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPNetmask.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPNetmask.setDescription('Netmask address.')
ruckusZDWLANAPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 101), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPGateway.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPGateway.setDescription('Gateway address.')
ruckusZDWLANAPDNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 105), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPDNS1.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPDNS1.setDescription('Primary DNS address.')
ruckusZDWLANAPDNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 106), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPDNS2.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPDNS2.setDescription('Sencond DNS address.')
ruckusZDWLANAPTotalUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 110), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPTotalUser.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPTotalUser.setDescription('Total number of concurrent users on this AP.')
ruckusZDWLANAPLANStatsRXByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXByteRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsRXByteRate.setDescription('Bytes rate received on LAN port each 90s.')
ruckusZDWLANAPLANStatsTXByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXByteRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPLANStatsTXByteRate.setDescription('Bytes rate transmitted on LAN port each 90s.')
ruckusZDWLANAPRadioStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTable.setDescription('ZD WLAN AP Radio table.')
ruckusZDWLANAPRadioStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANAPRadioStatsAPMacAddr"), (0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANAPRadioStatsRadioIndex"))
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsEntry.setDescription('Specifies each ZD WLAN AP Radio entry.')
ruckusZDWLANAPRadioStatsAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAPMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAPMacAddr.setDescription('AP MAC address.')
ruckusZDWLANAPRadioStatsRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRadioIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRadioIndex.setDescription('Radio index of the AP.')
ruckusZDWLANAPRadioStatsRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("radio11bg", 0), ("radio11a", 1), ("radio11ng", 2), ("radio11na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRadioType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRadioType.setDescription('Radio type.')
ruckusZDWLANAPRadioStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsChannel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsChannel.setDescription('Radio channel.')
ruckusZDWLANAPRadioStatsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxPower.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxPower.setDescription('Transmit power of radio.')
ruckusZDWLANAPRadioStatsMeshEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsMeshEnable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsMeshEnable.setDescription('Mesh enable.')
ruckusZDWLANAPRadioStatsNumVAP = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsNumVAP.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsNumVAP.setDescription('Number of APs.')
ruckusZDWLANAPRadioStatsNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsNumSta.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsNumSta.setDescription('Number of stations.')
ruckusZDWLANAPRadioStatsAvgStaRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAvgStaRSSI.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAvgStaRSSI.setDescription('Average client RSSI.')
ruckusZDWLANAPRadioStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxPkts.setDescription('Received packets.')
ruckusZDWLANAPRadioStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxBytes.setDescription('Received bytes.')
ruckusZDWLANAPRadioStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxMulticast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxMulticast.setDescription('Received multicast packets.')
ruckusZDWLANAPRadioStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxPkts.setDescription('Transmitted packets.')
ruckusZDWLANAPRadioStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxBytes.setDescription('Transmitted bytes.')
ruckusZDWLANAPRadioStatsTxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxMulticast.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxMulticast.setDescription('Transmitted multicast packets.')
ruckusZDWLANAPRadioStatsTxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxFail.setDescription('Transmitted fail packets.')
ruckusZDWLANAPRadioStatsTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxRetries.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxRetries.setDescription('Transmitted retry packets.')
ruckusZDWLANAPRadioStatsPowerMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsPowerMgmt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsPowerMgmt.setDescription('Power management enable.')
ruckusZDWLANAPRadioStatsMaxSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsMaxSta.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsMaxSta.setDescription('Number of max stations allowed.')
ruckusZDWLANAPRadioStatsFrameErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 20), Unsigned32()).setUnits('1/10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsFrameErrorRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsFrameErrorRate.setDescription('Frame error rate.')
ruckusZDWLANAPRadioStatsFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 21), Unsigned32()).setUnits('1/10000').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsFrameRetryRate.setDescription('Frame retry rate.')
ruckusZDWLANAPRadioStatsMonitoredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsMonitoredTime.setDescription('Monitored time.')
ruckusZDWLANAPRadioStatsTotalAssocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTotalAssocTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTotalAssocTime.setDescription('Client total association time.')
ruckusZDWLANAPRadioStatsAuthReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthReq.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthReq.setDescription('Authentication request.')
ruckusZDWLANAPRadioStatsAuthResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthResp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthResp.setDescription('Authentication response.')
ruckusZDWLANAPRadioStatsAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthSuccess.setDescription('Authentication success.')
ruckusZDWLANAPRadioStatsAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAuthFail.setDescription('Authentication fail.')
ruckusZDWLANAPRadioStatsAssocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocReq.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocReq.setDescription('Association request.')
ruckusZDWLANAPRadioStatsAssocResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocResp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocResp.setDescription('Association response.')
ruckusZDWLANAPRadioStatsReassocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsReassocReq.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsReassocReq.setDescription('Reassociation request.')
ruckusZDWLANAPRadioStatsReassocResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsReassocResp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsReassocResp.setDescription('Reassociation response.')
ruckusZDWLANAPRadioStatsAssocSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocSuccess.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocSuccess.setDescription('Association success.')
ruckusZDWLANAPRadioStatsAssocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocFail.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocFail.setDescription('Association fail.')
ruckusZDWLANAPRadioStatsAssocDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocDenied.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAssocDenied.setDescription('Association denied.')
ruckusZDWLANAPRadioStatsDiassocAbnormal = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocAbnormal.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocAbnormal.setDescription('Disassociation request due to abnormal causes.')
ruckusZDWLANAPRadioStatsDiassocCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocCapacity.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocCapacity.setDescription('Disassociation request due to device capacity.')
ruckusZDWLANAPRadioStatsDiassocLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocLeave.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocLeave.setDescription('Disassociation request due to client leave.')
ruckusZDWLANAPRadioStatsDiassocMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocMisc.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsDiassocMisc.setDescription('Disassociation request due to other reasons.')
ruckusZDWLANAPRadioStatsResourceUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 40), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsResourceUtil.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsResourceUtil.setDescription('Resource utilization.')
ruckusZDWLANAPRadioStatsRxSignalFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxSignalFrm.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRxSignalFrm.setDescription('Received signal frames.')
ruckusZDWLANAPRadioStatsTxSignalFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxSignalFrm.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTxSignalFrm.setDescription('Transmitted signal frames.')
ruckusZDWLANAPRadioStatsTotalSignalFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTotalSignalFrm.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsTotalSignalFrm.setDescription('Total signal frames.')
ruckusZDWLANAPRadioStatsAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAntennaGain.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsAntennaGain.setDescription('Get antenna gain.')
ruckusZDWLANAPRadioStatsBeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsBeaconPeriod.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsBeaconPeriod.setDescription('Get beacon period.')
ruckusZDWLANAPRadioStatsRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsRTSThreshold.setDescription('Get RTS threshold.')
ruckusZDWLANAPRadioStatsFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 2, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsFragThreshold.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPRadioStatsFragThreshold.setDescription('Get fragment threshold.')
ruckusZDWLANStaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3))
ruckusZDWLANStaTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ruckusZDWLANStaTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaTable.setDescription('ZD WLAN Station table.')
ruckusZDWLANStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANStaMacAddr"))
if mibBuilder.loadTexts: ruckusZDWLANStaEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaEntry.setDescription('Specifies each ZD WLAN Station entry.')
ruckusZDWLANStaMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaMacAddr.setDescription("The station's MAC Address.")
ruckusZDWLANStaAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaAPMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaAPMacAddr.setDescription('The MAC address of the associated AP.')
ruckusZDWLANStaBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaBSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaBSSID.setDescription('BSSID of WLAN.')
ruckusZDWLANStaSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 4), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaSSID.setDescription('SSID.')
ruckusZDWLANStaUser = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaUser.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaUser.setDescription('Logined username of the client.')
ruckusZDWLANStaRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("radio11a", 0), ("radio11b", 1), ("radio11g", 2), ("radio11ng", 3), ("radio11na", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaRadioType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaRadioType.setDescription('Radio type.')
ruckusZDWLANStaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaChannel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaChannel.setDescription('Radio channel.')
ruckusZDWLANStaIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaIPAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaIPAddr.setDescription('IP address.')
ruckusZDWLANStaAvgRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaAvgRSSI.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaAvgRSSI.setDescription('Averaged RSSI.')
ruckusZDWLANStaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaRxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaRxPkts.setDescription('Received packets.')
ruckusZDWLANStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaRxBytes.setDescription('Received bytes.')
ruckusZDWLANStaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaTxPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaTxPkts.setDescription('Transmitted packets.')
ruckusZDWLANStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaTxBytes.setDescription('Transmitted bytes.')
ruckusZDWLANStaRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaRetries.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaRetries.setDescription('Transmitted retries.')
ruckusZDWLANStaAssocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaAssocTime.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaAssocTime.setDescription('The time client has been associated.')
ruckusZDWLANStaRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaRxError.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaRxError.setDescription('Received error packets.')
ruckusZDWLANStaTxSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaTxSuccess.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaTxSuccess.setDescription('Successful transmitted packets.')
ruckusZDWLANSta11bgReassoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANSta11bgReassoc.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANSta11bgReassoc.setDescription('Reassociate count on B/G RF.')
ruckusZDWLANStaAssocTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaAssocTimestamp.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaAssocTimestamp.setDescription('The timestamp client associated.')
ruckusZDWLANStaRetryBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaRetryBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaRetryBytes.setDescription('Transmitted retry bytes.')
ruckusZDWLANStaSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaSNR.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaSNR.setDescription("Station's Signal to Noise Ratio.")
ruckusZDWLANStaRxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaRxDrop.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaRxDrop.setDescription('Drop transmitted packets.')
ruckusZDWLANStaTxDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaTxDrop.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaTxDrop.setDescription('Drop received packets.')
ruckusZDWLANStaTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaTxError.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaTxError.setDescription('Transmitted error packets.')
ruckusZDWLANStaVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaVlanID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaVlanID.setDescription('VLAN ID of the station. 1 for not specified.')
ruckusZDWLANStaAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaAuthMode.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaAuthMode.setDescription('Authentication mode of authenticated terminal.')
ruckusZDWLANStaSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 3, 1, 1, 81), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANStaSignalStrength.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANStaSignalStrength.setDescription('Signal strength')
ruckusZDWLANRogueInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4))
ruckusZDWLANRogueTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: ruckusZDWLANRogueTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueTable.setDescription('ZD WLAN rogue device table.')
ruckusZDWLANRogueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusZDWLANRogueEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueEntry.setDescription('Specifies each ZD WLAN rogue device entry.')
ruckusZDWLANRogueMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueMacAddr.setDescription("Rogue device's MAC Address.")
ruckusZDWLANRogueSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 2), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueSSID.setDescription('SSID.')
ruckusZDWLANRogueRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("radio11bg", 0), ("radio11a", 1), ("radio11ng", 2), ("radio11na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueRadioType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueRadioType.setDescription('Radio type.')
ruckusZDWLANRogueChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueChannel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueChannel.setDescription('Radio channel.')
ruckusZDWLANRogueRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueRSSI.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueRSSI.setDescription('RSSI.')
ruckusZDWLANRogueType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ap", 0), ("ad-hoc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueType.setDescription('The type of the rogue device.')
ruckusZDWLANRogueEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("encrypted", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueEncrypted.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueEncrypted.setDescription('Encryption mode.')
ruckusZDWLANRogueSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 4, 1, 1, 11), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANRogueSignalStrength.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANRogueSignalStrength.setDescription('Signal strength')
ruckusZDWLANVapTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: ruckusZDWLANVapTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapTable.setDescription('ZD WLAN AP table per each WLAN.')
ruckusZDWLANVapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANVapBSSID"))
if mibBuilder.loadTexts: ruckusZDWLANVapEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapEntry.setDescription('Specifies each ZD WLAN vap entry.')
ruckusZDWLANVapBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapBSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapBSSID.setDescription("The VAP's BSSID ,it is a MAC Address.")
ruckusZDWLANVapPAPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapPAPAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapPAPAddr.setDescription("The MAC address of the Parent's AP.")
ruckusZDWLANVapSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 3), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapSSID.setDescription('SSID of VAP.')
ruckusZDWLANVapLanRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapLanRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapLanRxBytes.setDescription('Received bytes on LAN in VAP .')
ruckusZDWLANVapLanTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapLanTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapLanTxBytes.setDescription('Transmitted bytes on LAN in VAP.')
ruckusZDWLANVapWlanRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxBytes.setDescription('Received bytes on WLAN in VAP .')
ruckusZDWLANVapWlanTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxBytes.setDescription('Transmitted bytes on WLAN in VAP.')
ruckusZDWLANVapWlanRxErrorPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxErrorPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxErrorPkt.setDescription('Receiveed error packet on WLAN in VAP.')
ruckusZDWLANVapWlanRxUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxUnicastPkt.setDescription('Receiveed unicast packet on WLAN in VAP.')
ruckusZDWLANVapWlanTxUnicastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxUnicastPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxUnicastPkt.setDescription('Transmitted unicast packet on WLAN in VAP.')
ruckusZDWLANVapWlanRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxPkt.setDescription('Received packet on WLAN in VAP.')
ruckusZDWLANVapWlanRxDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxDropPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanRxDropPkt.setDescription('Received dropped packet on WLAN in VAP.')
ruckusZDWLANVapWlanTxErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxErrPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxErrPkt.setDescription('Transmitted error packet on WLAN in VAP.')
ruckusZDWLANVapWlanTxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxPkt.setDescription('Transmitted packet on WLAN in VAP.')
ruckusZDWLANVapWlanTxDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxDropPkt.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANVapWlanTxDropPkt.setDescription('Transmitted dropped packet on WLAN in VAP.')
ruckusZDWLANIfTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4), )
if mibBuilder.loadTexts: ruckusZDWLANIfTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANIfTable.setDescription('ZD WLAN AP Interface table per each AP.')
ruckusZDWLANIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1), ).setIndexNames((0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANAPMac"), (0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANAPIfIndex"))
if mibBuilder.loadTexts: ruckusZDWLANIfEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANIfEntry.setDescription('Specifies each ZD WLAN vap entry.')
ruckusZDWLANAPMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMac.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMac.setDescription("The AP's Mac Address.")
ruckusZDWLANAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfIndex.setDescription('The index of Interface in AP .')
ruckusZDWLANAPIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfDescr.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfDescr.setDescription('The Description information for this interface.')
ruckusZDWLANAPIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 4), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfType.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfType.setDescription('The type of interface.')
ruckusZDWLANAPIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfMtu.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfMtu.setDescription('The size of the largest packet which can be sent/received.')
ruckusZDWLANAPIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfSpeed.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfSpeed.setDescription("An estimate of the interface's current bandwidth in bits.")
ruckusZDWLANAPIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfPhysAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfPhysAddress.setDescription("The interface's mac address.")
ruckusZDWLANAPIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfAdminStatus.setDescription('The desired state of the interface: up(1), down(2) ,testing(3) .')
ruckusZDWLANAPIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfOperStatus.setDescription('The current operational state of the interface: up(1), down(2), testing(3), unknown(4), dormant(5) , notPresent(6), lowerLayerDown(7).')
ruckusZDWLANAPIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfInOctets.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfInOctets.setDescription('The total number of octets received on the interface.')
ruckusZDWLANAPIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfInUcastPkts.setDescription('The total number of unicast packets received on the interface.')
ruckusZDWLANAPIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfInNUcastPkts.setDescription('The total number of multicast and broadcast packets received on the interface.')
ruckusZDWLANAPIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfInDiscards.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected .')
ruckusZDWLANAPIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfInErrors.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfInErrors.setDescription('The number of inbound packets that contained errors.')
ruckusZDWLANAPIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
ruckusZDWLANAPIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutOctets.setDescription('The total number of octets transmitted out of the interface.')
ruckusZDWLANAPIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutUcastPkts.setDescription('The total number of unicast packets transmitted out of the interface.')
ruckusZDWLANAPIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutNUcastPkts.setDescription('The total number of multicast and broadcast packets transmitted out of the interface.')
ruckusZDWLANAPIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected.')
ruckusZDWLANAPIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
ruckusZDWLANAPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfName.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfName.setDescription('The name of interface.')
ruckusZDWLANAPIfNameDefined = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPIfNameDefined.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPIfNameDefined.setDescription('The alias of interface.')
ruckusZDWLANAPEthStatusTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8), )
if mibBuilder.loadTexts: ruckusZDWLANAPEthStatusTable.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthStatusTable.setDescription('ZD WLAN AP Ethernet Interface status table per each AP.')
ruckusZDWLANAPEthStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1), ).setIndexNames((0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANAPMacAddress"), (0, "RUCKUS-ZD-WLAN-MIB", "ruckusZDWLANAPEthPortId"))
if mibBuilder.loadTexts: ruckusZDWLANAPEthStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthStatusEntry.setDescription('Specifies each ZD WLAN AP ethernet interface status entry.')
ruckusZDWLANAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPMacAddress.setDescription("The AP's Mac Address.")
ruckusZDWLANAPEthPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthPortId.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthPortId.setDescription('The ap ethernet port id.')
ruckusZDWLANAPEthIfname = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthIfname.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthIfname.setDescription('The name of interface.')
ruckusZDWLANAPEthDot1xStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auth", 1), ("supp", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthDot1xStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthDot1xStatus.setDescription('The ap ethernet port Dot1xStatus.')
ruckusZDWLANAPEthLogicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthLogicalStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthLogicalStatus.setDescription('The ap ethernet port logical status.')
ruckusZDWLANAPEthPhyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthPhyStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthPhyStatus.setDescription('The ap ethernet port physical status.')
ruckusZDWLANAPEthPhyIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthPhyIfSpeed.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthPhyIfSpeed.setDescription("The ap ethernet interface's current bandwidth in Mbits,.")
ruckusZDWLANAPEthPhyLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthPhyLinkStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthPhyLinkStatus.setDescription('The ap ethernet port physical link status.')
ruckusZDWLANAPEthLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 2, 2, 1, 1, 2, 8, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusZDWLANAPEthLabel.setStatus('current')
if mibBuilder.loadTexts: ruckusZDWLANAPEthLabel.setDescription('The ap ethernet port label.')
mibBuilder.exportSymbols("RUCKUS-ZD-WLAN-MIB", ruckusZDWLANAPRadioStatsTxPkts=ruckusZDWLANAPRadioStatsTxPkts, ruckusZDWLANTxBytes=ruckusZDWLANTxBytes, ruckusZDWLANAPTxFrameDropped=ruckusZDWLANAPTxFrameDropped, ruckusZDWLANAPLANStatsRXPkt=ruckusZDWLANAPLANStatsRXPkt, ruckusZDWLANStaBSSID=ruckusZDWLANStaBSSID, ruckusZDWLANAPNetmask=ruckusZDWLANAPNetmask, ruckusZDWLANStaTable=ruckusZDWLANStaTable, ruckusZDWLANAssocFail=ruckusZDWLANAssocFail, ruckusZDWLANIfTable=ruckusZDWLANIfTable, ruckusZDWLANAPRadioStatsDiassocLeave=ruckusZDWLANAPRadioStatsDiassocLeave, ruckusZDWLANAPRadioStatsNumSta=ruckusZDWLANAPRadioStatsNumSta, ruckusZDWLANStaSignalStrength=ruckusZDWLANStaSignalStrength, ruckusZDWLANAPMeshUpPortCntUpdown=ruckusZDWLANAPMeshUpPortCntUpdown, ruckusZDWLANAP11bCapable=ruckusZDWLANAP11bCapable, ruckusZDWLANAPUptime=ruckusZDWLANAPUptime, ruckusZDWLANDescription=ruckusZDWLANDescription, ruckusZDWLANSta11bgReassoc=ruckusZDWLANSta11bgReassoc, ruckusZDWLANSSIDBcastDisable=ruckusZDWLANSSIDBcastDisable, ruckusZDWLANAPLastConfSyncTime=ruckusZDWLANAPLastConfSyncTime, ruckusZDWLANAPMacAddr=ruckusZDWLANAPMacAddr, ruckusZDWLANAPStaRxBytes=ruckusZDWLANAPStaRxBytes, ruckusZDWLANAPRadioStatsTable=ruckusZDWLANAPRadioStatsTable, ruckusZDWLANAPRadioStatsAuthResp=ruckusZDWLANAPRadioStatsAuthResp, ruckusZDWLANDiassocCapacity=ruckusZDWLANDiassocCapacity, ruckusZDWLANAPRadioStatsRxMulticast=ruckusZDWLANAPRadioStatsRxMulticast, ruckusZDWLANStaEntry=ruckusZDWLANStaEntry, ruckusZDWLANNAME=ruckusZDWLANNAME, ruckusZDWLANStaRxPkts=ruckusZDWLANStaRxPkts, ruckusZDWLANStaRxBytes=ruckusZDWLANStaRxBytes, ruckusZDWLANAPRadioStatsRxPkts=ruckusZDWLANAPRadioStatsRxPkts, ruckusZDWLANAPModel=ruckusZDWLANAPModel, ruckusZDWLANAPLANStatsRXByte=ruckusZDWLANAPLANStatsRXByte, ruckusZDWLANAPEthLogicalStatus=ruckusZDWLANAPEthLogicalStatus, ruckusZDWLANAPRadioStatsAntennaGain=ruckusZDWLANAPRadioStatsAntennaGain, ruckusZDWLANStaRxDrop=ruckusZDWLANStaRxDrop, ruckusZDWLANStaTxError=ruckusZDWLANStaTxError, ruckusZDWLANAPEthDot1xStatus=ruckusZDWLANAPEthDot1xStatus, ruckusZDWLANAuthentication=ruckusZDWLANAuthentication, ruckusZDWLANAPRadioStatsAssocReq=ruckusZDWLANAPRadioStatsAssocReq, ruckusZDWLANRogueRadioType=ruckusZDWLANRogueRadioType, ruckusZDWLANAPIfIndex=ruckusZDWLANAPIfIndex, ruckusZDWLANAPMeshHops=ruckusZDWLANAPMeshHops, ruckusZDWLANMIB=ruckusZDWLANMIB, ruckusZDWLANAPRadioStatsMaxSta=ruckusZDWLANAPRadioStatsMaxSta, ruckusZDWLANVapEntry=ruckusZDWLANVapEntry, ruckusZDWLANAPMemTotal=ruckusZDWLANAPMemTotal, ruckusZDWLANAPRadioStatsFrameRetryRate=ruckusZDWLANAPRadioStatsFrameRetryRate, ruckusZDWLANIfEntry=ruckusZDWLANIfEntry, ruckusZDWLANAPCoverageTech=ruckusZDWLANAPCoverageTech, ruckusZDWLANAPRadioStatsTxMulticast=ruckusZDWLANAPRadioStatsTxMulticast, ruckusZDWLANRogueEntry=ruckusZDWLANRogueEntry, ruckusZDWLANAPIfOutDiscards=ruckusZDWLANAPIfOutDiscards, ruckusZDWLANAPRadioStatsRadioType=ruckusZDWLANAPRadioStatsRadioType, ruckusZDWLANAPEthLabel=ruckusZDWLANAPEthLabel, ruckusZDWLANStaUser=ruckusZDWLANStaUser, ruckusZDWLANAPUpgrade=ruckusZDWLANAPUpgrade, ruckusZDWLANAPIfAdminStatus=ruckusZDWLANAPIfAdminStatus, ruckusZDWLANAPIfMtu=ruckusZDWLANAPIfMtu, ruckusZDWLANVapBSSID=ruckusZDWLANVapBSSID, ruckusZDWLANAPIfOutOctets=ruckusZDWLANAPIfOutOctets, ruckusZDWLANAPMac=ruckusZDWLANAPMac, ruckusZDWLANAPMeshDownPortCntUpdown=ruckusZDWLANAPMeshDownPortCntUpdown, ruckusZDWLANAPLANStatsTXPkt=ruckusZDWLANAPLANStatsTXPkt, ruckusZDWLANDiassocAbnormal=ruckusZDWLANDiassocAbnormal, ruckusZDWLANIsGuest=ruckusZDWLANIsGuest, ruckusZDWLANAPDNS1=ruckusZDWLANAPDNS1, ruckusZDWLANAP11gCapable=ruckusZDWLANAP11gCapable, ruckusZDWLANAPLastUpgradeTime=ruckusZDWLANAPLastUpgradeTime, ruckusZDWLANRxByteRate=ruckusZDWLANRxByteRate, ruckusZDWLANRogueEncrypted=ruckusZDWLANRogueEncrypted, ruckusZDWLANDiassocMisc=ruckusZDWLANDiassocMisc, ruckusZDWLANAPRadioStatsRadioIndex=ruckusZDWLANAPRadioStatsRadioIndex, ruckusZDWLANRxPkts=ruckusZDWLANRxPkts, ruckusZDWLANVapWlanTxBytes=ruckusZDWLANVapWlanTxBytes, ruckusZDWLANAPNumRadios=ruckusZDWLANAPNumRadios, ruckusZDWLANAPEthStatusEntry=ruckusZDWLANAPEthStatusEntry, ruckusZDWLANStaRetries=ruckusZDWLANStaRetries, ruckusZDWLANAPStaTxBytes=ruckusZDWLANAPStaTxBytes, ruckusZDWLANRxDataFrameOnLan=ruckusZDWLANRxDataFrameOnLan, ruckusZDWLANAPLANStatsRXPKTUcast=ruckusZDWLANAPLANStatsRXPKTUcast, ruckusZDWLANVapWlanTxPkt=ruckusZDWLANVapWlanTxPkt, ruckusZDWLANAPRadioStatsAvgStaRSSI=ruckusZDWLANAPRadioStatsAvgStaRSSI, ruckusZDWLANAPRadioStatsTxRetries=ruckusZDWLANAPRadioStatsTxRetries, ruckusZDWLANAPRadioStatsAssocResp=ruckusZDWLANAPRadioStatsAssocResp, ruckusZDWLANAPRadioStatsAssocFail=ruckusZDWLANAPRadioStatsAssocFail, ruckusZDWLANRateLimitingUp=ruckusZDWLANRateLimitingUp, ruckusZDWLANTunnelWLAN=ruckusZDWLANTunnelWLAN, ruckusZDWLANAPEthStatusTable=ruckusZDWLANAPEthStatusTable, ruckusZDWLANStaAPMacAddr=ruckusZDWLANStaAPMacAddr, ruckusZDWLANAPRadioStatsTxPower=ruckusZDWLANAPRadioStatsTxPower, ruckusZDWLANDiassocLeave=ruckusZDWLANDiassocLeave, ruckusZDWLANAPInfo=ruckusZDWLANAPInfo, ruckusZDWLANAPIfDescr=ruckusZDWLANAPIfDescr, ruckusZDWLANAPLANStatsDropped=ruckusZDWLANAPLANStatsDropped, ruckusZDWLANAPRadioStatsBeaconPeriod=ruckusZDWLANAPRadioStatsBeaconPeriod, ruckusZDWLANDownDropFrame=ruckusZDWLANDownDropFrame, ruckusZDWLANVapWlanRxDropPkt=ruckusZDWLANVapWlanRxDropPkt, ruckusZDWLANAPRadioStatsReassocReq=ruckusZDWLANAPRadioStatsReassocReq, ruckusZDWLANAPIfInNUcastPkts=ruckusZDWLANAPIfInNUcastPkts, ruckusZDWLANAPLANStatsTXByte=ruckusZDWLANAPLANStatsTXByte, ruckusZDWLANAPEthPhyStatus=ruckusZDWLANAPEthPhyStatus, ruckusZDWLANAPCPUUtil=ruckusZDWLANAPCPUUtil, ruckusZDWLANStaInfo=ruckusZDWLANStaInfo, ruckusZDWLANAssocResp=ruckusZDWLANAssocResp, ruckusZDWLANAPStatus=ruckusZDWLANAPStatus, ruckusZDWLANAPRadioStatsAPMacAddr=ruckusZDWLANAPRadioStatsAPMacAddr, ruckusZDWLANAPNumSta=ruckusZDWLANAPNumSta, ruckusZDWLANAPRadioStatsPowerMgmt=ruckusZDWLANAPRadioStatsPowerMgmt, ruckusZDWLANAPIfSpeed=ruckusZDWLANAPIfSpeed, ruckusZDWLANUpDropFrame=ruckusZDWLANUpDropFrame, ruckusZDWLANAPEntry=ruckusZDWLANAPEntry, ruckusZDWLANStaSSID=ruckusZDWLANStaSSID, ruckusZDWLANAPRadioStatsAuthFail=ruckusZDWLANAPRadioStatsAuthFail, ruckusZDWLANAPRadioStatsTxBytes=ruckusZDWLANAPRadioStatsTxBytes, ruckusZDWLANAPRadioStatsMeshEnable=ruckusZDWLANAPRadioStatsMeshEnable, ruckusZDWLANAPIfOperStatus=ruckusZDWLANAPIfOperStatus, ruckusZDWLANAPIfOutNUcastPkts=ruckusZDWLANAPIfOutNUcastPkts, ruckusZDWLANAPEthPortId=ruckusZDWLANAPEthPortId, ruckusZDWLANRogueMacAddr=ruckusZDWLANRogueMacAddr, ruckusZDWLANStaChannel=ruckusZDWLANStaChannel, ruckusZDWLANDownRetxFrame=ruckusZDWLANDownRetxFrame, ruckusZDWLANDownTotalFrame=ruckusZDWLANDownTotalFrame, ruckusZDWLANStaMacAddr=ruckusZDWLANStaMacAddr, ruckusZDWLANUpTotalFrame=ruckusZDWLANUpTotalFrame, ruckusZDWLANTxPkts=ruckusZDWLANTxPkts, ruckusZDWLANRogueType=ruckusZDWLANRogueType, ruckusZDWLANAPIfOutUcastPkts=ruckusZDWLANAPIfOutUcastPkts, ruckusZDWLANRxBytes=ruckusZDWLANRxBytes, ruckusZDWLANAPRadioStatsFragThreshold=ruckusZDWLANAPRadioStatsFragThreshold, ruckusZDWLANStaVlanID=ruckusZDWLANStaVlanID, ruckusZDWLANAPFirstJoinTime=ruckusZDWLANAPFirstJoinTime, ruckusZDWLANAPHWversion=ruckusZDWLANAPHWversion, ruckusZDWLANAPIPAddr=ruckusZDWLANAPIPAddr, ruckusZDWLANStaRxError=ruckusZDWLANStaRxError, ruckusZDWLANAPGateway=ruckusZDWLANAPGateway, ruckusZDWLANAPIfName=ruckusZDWLANAPIfName, ruckusZDWLANRogueSSID=ruckusZDWLANRogueSSID, ruckusZDWLANAPNumVAP=ruckusZDWLANAPNumVAP, ruckusZDWLANEncryption=ruckusZDWLANEncryption, ruckusZDWLANVapSSID=ruckusZDWLANVapSSID, ruckusZDWLANAPSerialNumber=ruckusZDWLANAPSerialNumber, ruckusZDWLANAPRadioStatsAssocDenied=ruckusZDWLANAPRadioStatsAssocDenied, ruckusZDWLANStaRadioType=ruckusZDWLANStaRadioType, ruckusZDWLANAPIfInDiscards=ruckusZDWLANAPIfInDiscards, ruckusZDWLANDownTotalErrFrame=ruckusZDWLANDownTotalErrFrame, ruckusZDWLANAPEthStateChange=ruckusZDWLANAPEthStateChange, ruckusZDWLANAPRadioStatsEntry=ruckusZDWLANAPRadioStatsEntry, ruckusZDWLANEntry=ruckusZDWLANEntry, ruckusZDWLANStaSNR=ruckusZDWLANStaSNR, ruckusZDWLANAPRadioStatsDiassocCapacity=ruckusZDWLANAPRadioStatsDiassocCapacity, ruckusZDWLANAssocTotal=ruckusZDWLANAssocTotal, ruckusZDWLANAPSyncConf=ruckusZDWLANAPSyncConf, ruckusZDWLANVapPAPAddr=ruckusZDWLANVapPAPAddr, ruckusZDWLANStaAvgRSSI=ruckusZDWLANStaAvgRSSI, ruckusZDWLANAuthTotal=ruckusZDWLANAuthTotal, ruckusZDWLANAPRadioStatsTxFail=ruckusZDWLANAPRadioStatsTxFail, ruckusZDWLANAPEthPhyIfSpeed=ruckusZDWLANAPEthPhyIfSpeed, ruckusZDWLANRogueInfo=ruckusZDWLANRogueInfo, ruckusZDWLANAPRadioStatsTotalAssocTime=ruckusZDWLANAPRadioStatsTotalAssocTime, ruckusZDWLANAPLANStatsTXByteRate=ruckusZDWLANAPLANStatsTXByteRate, ruckusZDWLANAPRadioStatsDiassocAbnormal=ruckusZDWLANAPRadioStatsDiassocAbnormal, ruckusZDWLANAPLastBootTime=ruckusZDWLANAPLastBootTime, ruckusZDWLANVapLanTxBytes=ruckusZDWLANVapLanTxBytes, ruckusZDWLANAPRadioStatsRxSignalFrm=ruckusZDWLANAPRadioStatsRxSignalFrm, ruckusZDWLANAPRadioStatsTotalSignalFrm=ruckusZDWLANAPRadioStatsTotalSignalFrm, ruckusZDWLANVapWlanRxErrorPkt=ruckusZDWLANVapWlanRxErrorPkt, ruckusZDWLANAPIfPhysAddress=ruckusZDWLANAPIfPhysAddress, ruckusZDWLANAssocDenied=ruckusZDWLANAssocDenied, ruckusZDWLANStaAssocTimestamp=ruckusZDWLANStaAssocTimestamp, ruckusZDWLANAuthResp=ruckusZDWLANAuthResp, ruckusZDWLANAPLANStatsRXPKTMcast=ruckusZDWLANAPLANStatsRXPKTMcast, ruckusZDWLANReassocResp=ruckusZDWLANReassocResp, ruckusZDWLANVlanID=ruckusZDWLANVlanID, ruckusZDWLANAPDNS2=ruckusZDWLANAPDNS2, ruckusZDWLANAuthFail=ruckusZDWLANAuthFail, ruckusZDWLANAPRadioStatsChannel=ruckusZDWLANAPRadioStatsChannel, ruckusZDWLANNumVAP=ruckusZDWLANNumVAP, ruckusZDWLANTxByteOnLan=ruckusZDWLANTxByteOnLan, ruckusZDWLANStaIPAddr=ruckusZDWLANStaIPAddr, ruckusZDWLANStaTxPkts=ruckusZDWLANStaTxPkts, ruckusZDWLANStaRetryBytes=ruckusZDWLANStaRetryBytes, ruckusZDWLANAPIfNameDefined=ruckusZDWLANAPIfNameDefined, ruckusZDWLANRogueRSSI=ruckusZDWLANRogueRSSI, ruckusZDWLANRxByteOnLan=ruckusZDWLANRxByteOnLan, ruckusZDWLANNumSta=ruckusZDWLANNumSta, ruckusZDWLANAPRadioStatsResourceUtil=ruckusZDWLANAPRadioStatsResourceUtil, ruckusZDWLANVapWlanRxPkt=ruckusZDWLANVapWlanRxPkt, ruckusZDWLANAPRadioStatsMonitoredTime=ruckusZDWLANAPRadioStatsMonitoredTime, ruckusZDWLANAPMeshEnable=ruckusZDWLANAPMeshEnable, PYSNMP_MODULE_ID=ruckusZDWLANMIB, ruckusZDWLANAPRadioStatsAssocSuccess=ruckusZDWLANAPRadioStatsAssocSuccess, ruckusZDWLANAPRadioStatsNumVAP=ruckusZDWLANAPRadioStatsNumVAP, ruckusZDWLANAPLANStatsRXPKTBcast=ruckusZDWLANAPLANStatsRXPKTBcast, ruckusZDWLANAPRadioStatsTxSignalFrm=ruckusZDWLANAPRadioStatsTxSignalFrm, ruckusZDWLANSSID=ruckusZDWLANSSID, ruckusZDWLANAPFWSize=ruckusZDWLANAPFWSize, ruckusZDWLANAuthSuccessTotal=ruckusZDWLANAuthSuccessTotal, ruckusZDWLANStaTxSuccess=ruckusZDWLANStaTxSuccess, ruckusZDWLANVapWlanTxErrPkt=ruckusZDWLANVapWlanTxErrPkt, ruckusZDWLANStaAssocTime=ruckusZDWLANStaAssocTime, ruckusZDWLANAPTotalUser=ruckusZDWLANAPTotalUser, ruckusZDWLANAPLANStatsTXPKTBcast=ruckusZDWLANAPLANStatsTXPKTBcast, ruckusZDWLANVapWlanRxBytes=ruckusZDWLANVapWlanRxBytes, ruckusZDWLANAPEthIfname=ruckusZDWLANAPEthIfname, ruckusZDWLANAPMultiModeAccessStatus=ruckusZDWLANAPMultiModeAccessStatus, ruckusZDWLANAPRadioStatsFrameErrorRate=ruckusZDWLANAPRadioStatsFrameErrorRate, ruckusZDWLANRogueSignalStrength=ruckusZDWLANRogueSignalStrength, ruckusZDWLANAPDescription=ruckusZDWLANAPDescription, ruckusZDWLANAPIfInUcastPkts=ruckusZDWLANAPIfInUcastPkts, ruckusZDWLANTxByteRate=ruckusZDWLANTxByteRate, ruckusZDWLANAPRadioStatsAuthSuccess=ruckusZDWLANAPRadioStatsAuthSuccess, ruckusZDWLANAPRadioStatsDiassocMisc=ruckusZDWLANAPRadioStatsDiassocMisc, ruckusZDWLANAPLANStatsRXPktErr=ruckusZDWLANAPLANStatsRXPktErr, ruckusZDWLANRateLimitingDown=ruckusZDWLANRateLimitingDown, ruckusZDWLANAPTable=ruckusZDWLANAPTable, ruckusZDWLANAPConnectionMode=ruckusZDWLANAPConnectionMode, ruckusZDWLANAPRadioStatsAuthReq=ruckusZDWLANAPRadioStatsAuthReq, ruckusZDWLANAPMultipleVlanCapability=ruckusZDWLANAPMultipleVlanCapability, ruckusZDWLANObjects=ruckusZDWLANObjects, ruckusZDWLANAPRadioStatsRxBytes=ruckusZDWLANAPRadioStatsRxBytes, ruckusZDWLANAPLANStatsRXByteRate=ruckusZDWLANAPLANStatsRXByteRate, ruckusZDWLANStaTxBytes=ruckusZDWLANStaTxBytes, ruckusZDWLANUpRetxFrame=ruckusZDWLANUpRetxFrame, ruckusZDWLANAPFWAvail=ruckusZDWLANAPFWAvail, ruckusZDWLANAPMeshType=ruckusZDWLANAPMeshType, ruckusZDWLANVapLanRxBytes=ruckusZDWLANVapLanRxBytes, ruckusZDWLANAPIfInOctets=ruckusZDWLANAPIfInOctets, ruckusZDWLANStaAuthMode=ruckusZDWLANStaAuthMode, ruckusZDWLANAPMacAddress=ruckusZDWLANAPMacAddress, ruckusZDWLANVapWlanRxUnicastPkt=ruckusZDWLANVapWlanRxUnicastPkt, ruckusZDWLANStaTxDrop=ruckusZDWLANStaTxDrop, ruckusZDWLANVapWlanTxDropPkt=ruckusZDWLANVapWlanTxDropPkt, ruckusZDWLANAPSWversion=ruckusZDWLANAPSWversion, ruckusZDWLANAPNumRogues=ruckusZDWLANAPNumRogues, ruckusZDWLANAPIfInErrors=ruckusZDWLANAPIfInErrors, ruckusZDWLANAPRadioStatsRTSThreshold=ruckusZDWLANAPRadioStatsRTSThreshold, ruckusZDWLANRogueChannel=ruckusZDWLANRogueChannel, ruckusZDWLANAPRadioStatsReassocResp=ruckusZDWLANAPRadioStatsReassocResp, ruckusZDWLANInfo=ruckusZDWLANInfo, ruckusZDWLANTable=ruckusZDWLANTable, ruckusZDWLANAssocSuccess=ruckusZDWLANAssocSuccess, ruckusZDWLANAPEthPhyLinkStatus=ruckusZDWLANAPEthPhyLinkStatus, ruckusZDWLANRogueTable=ruckusZDWLANRogueTable, ruckusZDWLANAPIfOutErrors=ruckusZDWLANAPIfOutErrors, ruckusZDWLANAPLANStatsRXPKTSucc=ruckusZDWLANAPLANStatsRXPKTSucc, ruckusZDWLANVapTable=ruckusZDWLANVapTable, ruckusZDWLANAPIfType=ruckusZDWLANAPIfType, ruckusZDWLANReassocReq=ruckusZDWLANReassocReq, ruckusZDWLANAPMemUtil=ruckusZDWLANAPMemUtil, ruckusZDWLANAPIfInUnknownProtos=ruckusZDWLANAPIfInUnknownProtos, ruckusZDWLANAPTxFrameError=ruckusZDWLANAPTxFrameError, ruckusZDWLANVapWlanTxUnicastPkt=ruckusZDWLANVapWlanTxUnicastPkt, ruckusZDWLANAPLANStatsTXPKTUcast=ruckusZDWLANAPLANStatsTXPKTUcast, ruckusZDWLANAPLANStatsTXPKTMcast=ruckusZDWLANAPLANStatsTXPKTMcast)
mibBuilder.exportSymbols("RUCKUS-ZD-WLAN-MIB", )
