#
# PySNMP MIB module HUAWEI-WLAN-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-WLAN-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
hwWlan, = mibBuilder.importSymbols("HUAWEI-WLAN-MIB", "hwWlan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, ModuleIdentity, ObjectIdentity, NotificationType, Counter32, TimeTicks, IpAddress, Integer32, Counter64, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Counter32", "TimeTicks", "IpAddress", "Integer32", "Counter64", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hwWlanQosManagement = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5))
hwWlanQosManagement.setRevisions(('2010-10-12 10:00', '2010-06-01 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwWlanQosManagement.setRevisionsDescriptions((' V1.02, for the hwWlanTrafficProfileTable, change the leaf nodes hwWlanClientLimitRate and hwWlanVAPLimitRate to hwWlanClientUpLimitRate and hwWlanVAPUpLimitRate, add leaf nodes hwWlanClientDownLimitRate and hwWlanClientDownLimitRate .', ' V1.00, The first Draft.',))
if mibBuilder.loadTexts: hwWlanQosManagement.setLastUpdated('201011100000Z')
if mibBuilder.loadTexts: hwWlanQosManagement.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwWlanQosManagement.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwWlanQosManagement.setDescription('Wlan QoS management.')
hwWlanWmmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1), )
if mibBuilder.loadTexts: hwWlanWmmProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwWlanWmmProfileTable.setDescription('Wmm profile management table.')
hwWlanWmmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-QOS-MIB", "hwWlanWmmProfileName"))
if mibBuilder.loadTexts: hwWlanWmmProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwWlanWmmProfileEntry.setDescription('Wmm profile management entity.')
hwWlanWmmProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwWlanWmmProfileName.setStatus('current')
if mibBuilder.loadTexts: hwWlanWmmProfileName.setDescription('Wmm profile name.')
hwWlanWmmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanWmmSwitch.setStatus('current')
if mibBuilder.loadTexts: hwWlanWmmSwitch.setDescription('The wmm switch.')
hwWlanWmmMandatorySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanWmmMandatorySwitch.setStatus('current')
if mibBuilder.loadTexts: hwWlanWmmMandatorySwitch.setDescription('The mandatory switch.')
hwWlanWmmProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanWmmProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwWlanWmmProfileRowStatus.setDescription('Row status. Add or delete a table item.')
hwQAPEDCAVoiceECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVoiceECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVoiceECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by an AP for AC_VO.')
hwQAPEDCAVoiceECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVoiceECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVoiceECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by an AP for AC_VO.')
hwQAPEDCAVoiceAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVoiceAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVoiceAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by an AP for AC_VO.')
hwQAPEDCAVoiceTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(47)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVoiceTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVoiceTXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by an AP for AC_VO.')
hwQAPEDCAVoiceACKPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("noack", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVoiceACKPolicy.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVoiceACKPolicy.setDescription('ACK policy. This attribute shall specify the policy of ACK that shall be used by an AP for AC_VO.')
hwQAPEDCAVideoECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVideoECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVideoECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by an AP for AC_VI.')
hwQAPEDCAVideoECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVideoECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVideoECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by an AP for AC_VI.')
hwQAPEDCAVideoAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVideoAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVideoAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by an AP for AC_VI.')
hwQAPEDCAVideoTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(94)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVideoTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVideoTXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by an AP for AC_VI.')
hwQAPEDCAVideoACKPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("noack", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCAVideoACKPolicy.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCAVideoACKPolicy.setDescription('ACK policy. This attribute shall specify the policy of ACK that shall be used by an AP for AC_VI.')
hwQAPEDCABEECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABEECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABEECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by an AP for AC_BE.')
hwQAPEDCABEECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABEECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABEECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by an AP for AC_BE.')
hwQAPEDCABEAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABEAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABEAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by an AP for AC_BE.')
hwQAPEDCABETXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABETXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABETXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by an AP for AC_BE.')
hwQAPEDCABEACKPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("noack", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABEACKPolicy.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABEACKPolicy.setDescription('ACK policy. This attribute shall specify the policy of ACK that shall be used by an AP for AC_BE.')
hwQAPEDCABKECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABKECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABKECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by an AP for AC_BK.')
hwQAPEDCABKECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABKECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABKECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by an AP for AC_BK.')
hwQAPEDCABKAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABKAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABKAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by an AP for AC_BK.')
hwQAPEDCABKTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABKTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABKTXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by an AP for AC_BK.')
hwQAPEDCABKACKPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("noack", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQAPEDCABKACKPolicy.setStatus('current')
if mibBuilder.loadTexts: hwQAPEDCABKACKPolicy.setDescription('ACK policy. This attribute shall specify the policy of ACK that shall be used by an AP for AC_BK.')
hwQClientEDCAVoiceECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVoiceECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVoiceECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by a STA for AC_VO.')
hwQClientEDCAVoiceECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVoiceECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVoiceECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by a STA for AC_VO.')
hwQClientEDCAVoiceAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVoiceAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVoiceAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by a STA for AC_VO.')
hwQClientEDCAVoiceTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(47)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVoiceTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVoiceTXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by a STA for AC_VO.')
hwQClientEDCAVideoECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVideoECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVideoECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by a STA for AC_VI.')
hwQClientEDCAVideoECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVideoECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVideoECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by a STA for AC_VI.')
hwQClientEDCAVideoAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVideoAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVideoAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by a STA for AC_VI.')
hwQClientEDCAVideoTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(94)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCAVideoTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCAVideoTXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by a STA for AC_VI.')
hwQClientEDCABEECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABEECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABEECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by a STA for AC_BE.')
hwQClientEDCABEECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABEECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABEECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by a STA for AC_BE.')
hwQClientEDCABEAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABEAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABEAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by a STA for AC_BE.')
hwQClientEDCABETXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABETXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABETXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by a STA for AC_BE.')
hwQClientEDCABKECWmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABKECWmax.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABKECWmax.setDescription('Exponent form of CWmax. This attribute shall specify the value of ECWmax that shall be used by a STA for AC_BK.')
hwQClientEDCABKECWmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABKECWmin.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABKECWmin.setDescription('Exponent form of CWmin. This attribute shall specify the value of ECWmin that shall be used by a STA for AC_BK.')
hwQClientEDCABKAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABKAIFSN.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABKAIFSN.setDescription('Arbitration Inter Frame Spacing Number. This attribute shall specify the value of AIFSN that shall be used by a STA for AC_BK.')
hwQClientEDCABKTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQClientEDCABKTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: hwQClientEDCABKTXOPLimit.setDescription('Transmission Opportunity Limit. This attribute shall specify the value of TXOPLimit that shall be used by a STA for AC_BK.')
hwWlanTrafficProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2), )
if mibBuilder.loadTexts: hwWlanTrafficProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrafficProfileTable.setDescription('Traffic profile management table.')
hwWlanTrafficProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1), ).setIndexNames((0, "HUAWEI-WLAN-QOS-MIB", "hwWlanTrafficProfileName"))
if mibBuilder.loadTexts: hwWlanTrafficProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrafficProfileEntry.setDescription('Traffic profile management entity.')
hwWlanTrafficProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwWlanTrafficProfileName.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrafficProfileName.setDescription('Traffic profile name.')
hwWlanTrafficProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanTrafficProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrafficProfileRowStatus.setDescription('Row status. Add or delete a table item.')
hwWlanClientUpLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanClientUpLimitRate.setStatus('current')
if mibBuilder.loadTexts: hwWlanClientUpLimitRate.setDescription('The up limit rate of client.')
hwWlanVAPUpLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanVAPUpLimitRate.setStatus('current')
if mibBuilder.loadTexts: hwWlanVAPUpLimitRate.setDescription('The up limit rate of VAP.')
hwWlan8021pMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("designate", 1), ("mapping", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021pMapMode.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021pMapMode.setDescription('The mapping mode of user-priority to 802.1p, supporting mapping and designate.')
hwWlan8021pSpecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021pSpecValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021pSpecValue.setDescription('Designate the 802.1p priority value.')
hwWlanUP0Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP0Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP0Map8021p.setDescription('The mapping 802.1p priority value from user-priority 0.')
hwWlanUP1Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 8), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP1Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP1Map8021p.setDescription('The mapping 802.1p priority value from user-priority 1.')
hwWlanUP2Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 9), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP2Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP2Map8021p.setDescription('The mapping 802.1p priority value from user-priority 2.')
hwWlanUP3Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 10), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP3Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP3Map8021p.setDescription('The mapping 802.1p priority value from user-priority 3.')
hwWlanUP4Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 11), Integer32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP4Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP4Map8021p.setDescription('The mapping 802.1p priority value from user-priority 4.')
hwWlanUP5Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 12), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP5Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP5Map8021p.setDescription('The mapping 802.1p priority value from user-priority 5.')
hwWlanUP6Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 13), Integer32().clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP6Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP6Map8021p.setDescription('The mapping 802.1p priority value from user-priority 6.')
hwWlanUP7Map8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 14), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUP7Map8021p.setStatus('current')
if mibBuilder.loadTexts: hwWlanUP7Map8021p.setDescription('The mapping 802.1p priority value from user-priority 7.')
hwWlan8021p0MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p0MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p0MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 0.')
hwWlan8021p1MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p1MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p1MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 1.')
hwWlan8021p2MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p2MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p2MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 2.')
hwWlan8021p3MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p3MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p3MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 3.')
hwWlan8021p4MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p4MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p4MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 4.')
hwWlan8021p5MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p5MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p5MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 5.')
hwWlan8021p6MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p6MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p6MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 6.')
hwWlan8021p7MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlan8021p7MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlan8021p7MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 7.')
hwWlanUpTunnelPriorityMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("specCOS", 1), ("specDSCP", 2), ("cos2cos", 3), ("cos2dscp", 4), ("dscp2cos", 5), ("dscp2dscp", 6))).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUpTunnelPriorityMapMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanUpTunnelPriorityMapMode.setDescription('The mapping mode to up tunnel priority, supporting specDSCP and specCOS and dscp2dscp and dscp2cos and cos2cos and cos2dscp.')
hwWlanUpTunnelPrioritySpecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanUpTunnelPrioritySpecValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanUpTunnelPrioritySpecValue.setDescription('Designate the up tunnel priority value.')
hwWlanValue0MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue0MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue0MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 0.')
hwWlanValue1MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 26), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue1MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue1MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 1.')
hwWlanValue2MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 27), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue2MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue2MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 2.')
hwWlanValue3MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 28), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue3MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue3MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 3.')
hwWlanValue4MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 29), Integer32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue4MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue4MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 4.')
hwWlanValue5MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 30), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue5MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue5MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 5.')
hwWlanValue6MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 31), Integer32().clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue6MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue6MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 6.')
hwWlanValue7MapUpTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 32), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue7MapUpTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue7MapUpTunnelPriority.setDescription('The mapping value of the up tunnel priority from priority value 7.')
hwWlanDownTunnelPriorityMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("specCOS", 1), ("specDSCP", 2), ("cos2cos", 3), ("cos2dscp", 4), ("dscp2cos", 5), ("dscp2dscp", 6))).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanDownTunnelPriorityMapMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanDownTunnelPriorityMapMode.setDescription('The mapping mode to down tunnel priority, supporting specDSCP and specCOS and dscp2dscp and dscp2cos and cos2cos and cos2dscp.')
hwWlanDownTunnelPrioritySpecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 34), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanDownTunnelPrioritySpecValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanDownTunnelPrioritySpecValue.setDescription('Designate the down tunnel priority value.')
hwWlanValue0MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 35), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue0MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue0MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 0.')
hwWlanValue1MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 36), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue1MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue1MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 1.')
hwWlanValue2MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 37), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue2MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue2MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 2.')
hwWlanValue3MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 38), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue3MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue3MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 3.')
hwWlanValue4MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 39), Integer32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue4MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue4MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 4.')
hwWlanValue5MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 40), Integer32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue5MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue5MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 5.')
hwWlanValue6MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 41), Integer32().clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue6MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue6MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 6.')
hwWlanValue7MapDownTunnelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 42), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanValue7MapDownTunnelPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanValue7MapDownTunnelPriority.setDescription('The mapping value of the down tunnel priority from priority value 7.')
hwWlanClientDownLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 43), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanClientDownLimitRate.setStatus('current')
if mibBuilder.loadTexts: hwWlanClientDownLimitRate.setDescription('The down limit rate of client.')
hwWlanVAPDownLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 44), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanVAPDownLimitRate.setStatus('current')
if mibBuilder.loadTexts: hwWlanVAPDownLimitRate.setDescription('The down limit rate of VAP.')
hwWlanTos0MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos0MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos0MapUPValue.setDescription('The mapping user-priority value from tos priority value 0.')
hwWlanTos1MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos1MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos1MapUPValue.setDescription('The mapping user-priority value from tos priority value 1.')
hwWlanTos2MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos2MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos2MapUPValue.setDescription('The mapping user-priority value from tos priority value 2.')
hwWlanTos3MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos3MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos3MapUPValue.setDescription('The mapping user-priority value from tos priority value 3.')
hwWlanTos4MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos4MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos4MapUPValue.setDescription('The mapping user-priority value from tos priority value 4.')
hwWlanTos5MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos5MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos5MapUPValue.setDescription('The mapping user-priority value from tos priority value 5.')
hwWlanTos6MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos6MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos6MapUPValue.setDescription('The mapping user-priority value from tos priority value 6.')
hwWlanTos7MapUPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwWlanTos7MapUPValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanTos7MapUPValue.setDescription('The mapping user-priority value from 802.1p priority value 7.')
hwWlanBatchWmmProfileStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchWmmProfileStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchWmmProfileStartNumber.setDescription("The wmm-profile start number in batch operation. This node is used with node hwWlanBatchWmmProfileGetNumber, for example, hwWlanBatchWmmProfileStartNumber is set to one, and hwWlanBatchWmmProfileGetNumber is set to three, then get the node hwWlanBatchWmmProfileReturnNumber, hwWlanBatchWmmProfileName, that means start from the first wmm-profile, get three wmm-profile's name . if it dose not exist three wmm-profile, the hwWlanBatchWmmProfileReturnNumber will be the real wmm-profile number, otherwise, it is equal to hwWlanBatchWmmProfileGetNumber.")
hwWlanBatchWmmProfileGetNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchWmmProfileGetNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchWmmProfileGetNumber.setDescription("The wmm-profile number that want to get in batch operation.This node is used with node hwWlanBatchWmmProfileStartNumber, for example, hwWlanBatchWmmProfileStartNumber is set to one, and hwWlanBatchWmmProfileGetNumber is set to three, then get the node hwWlanBatchWmmProfileReturnNumber, hwWlanBatchWmmProfileName, that means start from the first wmm-profile, get three wmm-profile's name . if it dose not exist three wmm-profile, the hwWlanBatchWmmProfileReturnNumber will be the real wmm-profile number, otherwise, it is equal to hwWlanBatchWmmProfileGetNumber.")
hwWlanBatchWmmProfileReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanBatchWmmProfileReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchWmmProfileReturnNumber.setDescription('The wmm-profile number get in batch operation.')
hwWlanBatchWmmProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanBatchWmmProfileName.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchWmmProfileName.setDescription("The names of wmm-profiles which are determined by node hwWlanBatchWmmProfileStartNumber and node hwWlanBatchWmmProfileGetNumber. each wmm-profile name is divided by '?'.")
hwWlanBatchTrafficProfileStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileStartNumber.setDescription("The traffic-profile start number in batch operation. This node is used with node hwWlanBatchTrafficProfileGetNumber, for example, hwWlanBatchTrafficProfileStartNumber is set to one, and hwWlanBatchTrafficProfileGetNumber is set to three, then get the node hwWlanBatchTrafficProfileReturnNumber, hwWlanBatchTrafficProfileName, that means start from the first traffic-profile, get three traffic-profile's name . if it dose not exist three traffic-profile, the hwWlanBatchTrafficProfileReturnNumber will be the real traffic-profile number, otherwise, it is equal to hwWlanBatchTrafficProfileGetNumber.")
hwWlanBatchTrafficProfileGetNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileGetNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileGetNumber.setDescription("The traffic-profile number that want to get in batch operation.This node is used with node hwWlanBatchTrafficProfileStartNumber, for example, hwWlanBatchTrafficProfileStartNumber is set to one, and hwWlanBatchTrafficProfileGetNumber is set to three, then get the node hwWlanBatchTrafficProfileReturnNumber, hwWlanBatchTrafficProfileName, that means start from the first traffic-profile, get three traffic-profile's name . if it dose not exist three traffic-profile, the hwWlanBatchTrafficProfileReturnNumber will be the real traffic-profile number, otherwise, it is equal to hwWlanBatchTrafficProfileGetNumber.")
hwWlanBatchTrafficProfileReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileReturnNumber.setDescription('The traffic-profile number get in batch operation.')
hwWlanBatchTrafficProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileName.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchTrafficProfileName.setDescription("The names of traffic-profiles which are determined by node hwWlanBatchTrafficProfileStartNumber and node hwWlanBatchTrafficProfileGetNumber. each traffic-profile name is divided by '?'.")
hwWlanQosManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 11))
hwWlanQosManagementConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 12))
hwWlanQosManagementCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 12, 1))
hwWlanQosManagementCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 12, 1, 1)).setObjects(("HUAWEI-WLAN-QOS-MIB", "hwWlanWmmProfileGroup"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTrafficProfileGroup"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanQosManagementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanQosManagementCompliance = hwWlanQosManagementCompliance.setStatus('current')
if mibBuilder.loadTexts: hwWlanQosManagementCompliance.setDescription('Description.')
hwWlanQosManagementObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 12, 2))
hwWlanWmmProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 12, 2, 1)).setObjects(("HUAWEI-WLAN-QOS-MIB", "hwWlanWmmSwitch"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanWmmMandatorySwitch"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanWmmProfileRowStatus"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVoiceECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVoiceECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVoiceAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVoiceTXOPLimit"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVoiceACKPolicy"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVideoECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVideoECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVideoAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVideoTXOPLimit"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCAVideoACKPolicy"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABEECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABEECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABEAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABETXOPLimit"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABEACKPolicy"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABKECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABKECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABKAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABKTXOPLimit"), ("HUAWEI-WLAN-QOS-MIB", "hwQAPEDCABKACKPolicy"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVoiceECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVoiceECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVoiceAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVoiceTXOPLimit"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVideoECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVideoECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVideoAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCAVideoTXOPLimit"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABEECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABEECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABEAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABETXOPLimit"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABKECWmax"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABKECWmin"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABKAIFSN"), ("HUAWEI-WLAN-QOS-MIB", "hwQClientEDCABKTXOPLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanWmmProfileGroup = hwWlanWmmProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanWmmProfileGroup.setDescription('Description.')
hwWlanTrafficProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 12, 2, 2)).setObjects(("HUAWEI-WLAN-QOS-MIB", "hwWlanTrafficProfileRowStatus"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanClientUpLimitRate"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanVAPUpLimitRate"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021pMapMode"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021pSpecValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP0Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP1Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP2Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP3Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP4Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP5Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP6Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUP7Map8021p"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p0MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p1MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p2MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p3MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p4MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p5MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p6MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlan8021p7MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUpTunnelPriorityMapMode"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanUpTunnelPrioritySpecValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue0MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue1MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue2MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue3MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue4MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue5MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue6MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue7MapUpTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanDownTunnelPriorityMapMode"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanDownTunnelPrioritySpecValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue0MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue1MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue2MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue3MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue4MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue5MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue6MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanValue7MapDownTunnelPriority"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanClientDownLimitRate"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanVAPDownLimitRate"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos0MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos1MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos2MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos3MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos4MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos5MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos6MapUPValue"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanTos7MapUPValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanTrafficProfileGroup = hwWlanTrafficProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrafficProfileGroup.setDescription('Description.')
hwWlanQosManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 5, 12, 2, 3)).setObjects(("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchWmmProfileStartNumber"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchWmmProfileGetNumber"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchWmmProfileReturnNumber"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchWmmProfileName"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchTrafficProfileStartNumber"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchTrafficProfileGetNumber"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchTrafficProfileReturnNumber"), ("HUAWEI-WLAN-QOS-MIB", "hwWlanBatchTrafficProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanQosManagementGroup = hwWlanQosManagementGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanQosManagementGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-WLAN-QOS-MIB", hwWlanTrafficProfileEntry=hwWlanTrafficProfileEntry, hwWlan8021p3MapUPValue=hwWlan8021p3MapUPValue, hwWlanQosManagementCompliance=hwWlanQosManagementCompliance, hwWlanUP6Map8021p=hwWlanUP6Map8021p, hwWlanBatchWmmProfileGetNumber=hwWlanBatchWmmProfileGetNumber, hwWlanQosManagementObjects=hwWlanQosManagementObjects, hwWlan8021p4MapUPValue=hwWlan8021p4MapUPValue, hwWlanTrafficProfileRowStatus=hwWlanTrafficProfileRowStatus, hwWlanQosManagementGroup=hwWlanQosManagementGroup, hwWlanWmmProfileGroup=hwWlanWmmProfileGroup, hwWlanTos0MapUPValue=hwWlanTos0MapUPValue, hwWlan8021p2MapUPValue=hwWlan8021p2MapUPValue, hwWlanValue0MapDownTunnelPriority=hwWlanValue0MapDownTunnelPriority, hwWlanUP4Map8021p=hwWlanUP4Map8021p, hwWlanTos7MapUPValue=hwWlanTos7MapUPValue, hwQAPEDCABEACKPolicy=hwQAPEDCABEACKPolicy, hwWlanWmmMandatorySwitch=hwWlanWmmMandatorySwitch, hwWlan8021p5MapUPValue=hwWlan8021p5MapUPValue, hwWlanValue3MapUpTunnelPriority=hwWlanValue3MapUpTunnelPriority, hwWlanUP0Map8021p=hwWlanUP0Map8021p, hwWlan8021p0MapUPValue=hwWlan8021p0MapUPValue, hwQClientEDCABKECWmax=hwQClientEDCABKECWmax, hwWlanValue6MapDownTunnelPriority=hwWlanValue6MapDownTunnelPriority, hwQAPEDCAVideoECWmin=hwQAPEDCAVideoECWmin, hwQClientEDCAVoiceECWmin=hwQClientEDCAVoiceECWmin, hwWlanBatchTrafficProfileName=hwWlanBatchTrafficProfileName, hwWlanTos5MapUPValue=hwWlanTos5MapUPValue, hwWlanWmmProfileName=hwWlanWmmProfileName, hwWlanValue4MapUpTunnelPriority=hwWlanValue4MapUpTunnelPriority, hwWlanTos3MapUPValue=hwWlanTos3MapUPValue, hwWlan8021p7MapUPValue=hwWlan8021p7MapUPValue, hwWlanWmmSwitch=hwWlanWmmSwitch, hwWlanUP7Map8021p=hwWlanUP7Map8021p, hwWlanDownTunnelPriorityMapMode=hwWlanDownTunnelPriorityMapMode, hwWlanValue7MapUpTunnelPriority=hwWlanValue7MapUpTunnelPriority, hwWlanWmmProfileEntry=hwWlanWmmProfileEntry, hwQAPEDCABKACKPolicy=hwQAPEDCABKACKPolicy, hwWlanTrafficProfileName=hwWlanTrafficProfileName, hwQClientEDCAVoiceECWmax=hwQClientEDCAVoiceECWmax, hwWlanWmmProfileRowStatus=hwWlanWmmProfileRowStatus, hwQAPEDCAVideoECWmax=hwQAPEDCAVideoECWmax, hwQAPEDCABKECWmin=hwQAPEDCABKECWmin, hwWlanUP1Map8021p=hwWlanUP1Map8021p, hwQClientEDCABEAIFSN=hwQClientEDCABEAIFSN, hwQClientEDCAVoiceTXOPLimit=hwQClientEDCAVoiceTXOPLimit, hwWlanTos2MapUPValue=hwWlanTos2MapUPValue, hwWlanUP3Map8021p=hwWlanUP3Map8021p, hwQAPEDCABKECWmax=hwQAPEDCABKECWmax, hwWlanUP5Map8021p=hwWlanUP5Map8021p, hwWlanClientUpLimitRate=hwWlanClientUpLimitRate, hwQAPEDCAVoiceECWmin=hwQAPEDCAVoiceECWmin, hwWlanVAPDownLimitRate=hwWlanVAPDownLimitRate, hwQAPEDCABKAIFSN=hwQAPEDCABKAIFSN, hwQAPEDCAVideoTXOPLimit=hwQAPEDCAVideoTXOPLimit, hwQAPEDCABEECWmax=hwQAPEDCABEECWmax, hwWlanTrafficProfileTable=hwWlanTrafficProfileTable, hwWlanBatchTrafficProfileStartNumber=hwWlanBatchTrafficProfileStartNumber, hwQClientEDCABKECWmin=hwQClientEDCABKECWmin, hwWlanValue5MapUpTunnelPriority=hwWlanValue5MapUpTunnelPriority, hwWlanUpTunnelPriorityMapMode=hwWlanUpTunnelPriorityMapMode, hwQAPEDCAVoiceTXOPLimit=hwQAPEDCAVoiceTXOPLimit, hwQAPEDCABEECWmin=hwQAPEDCABEECWmin, hwQClientEDCABKTXOPLimit=hwQClientEDCABKTXOPLimit, hwWlanBatchWmmProfileStartNumber=hwWlanBatchWmmProfileStartNumber, hwQAPEDCAVideoACKPolicy=hwQAPEDCAVideoACKPolicy, hwQAPEDCABEAIFSN=hwQAPEDCABEAIFSN, hwQClientEDCAVideoECWmin=hwQClientEDCAVideoECWmin, hwQAPEDCAVideoAIFSN=hwQAPEDCAVideoAIFSN, hwWlanValue2MapDownTunnelPriority=hwWlanValue2MapDownTunnelPriority, hwQClientEDCAVideoAIFSN=hwQClientEDCAVideoAIFSN, hwQClientEDCABKAIFSN=hwQClientEDCABKAIFSN, hwWlanUP2Map8021p=hwWlanUP2Map8021p, hwWlanQosManagementConformance=hwWlanQosManagementConformance, PYSNMP_MODULE_ID=hwWlanQosManagement, hwQClientEDCABEECWmin=hwQClientEDCABEECWmin, hwWlanValue3MapDownTunnelPriority=hwWlanValue3MapDownTunnelPriority, hwWlanValue7MapDownTunnelPriority=hwWlanValue7MapDownTunnelPriority, hwQAPEDCAVoiceACKPolicy=hwQAPEDCAVoiceACKPolicy, hwWlanTos4MapUPValue=hwWlanTos4MapUPValue, hwQClientEDCAVideoECWmax=hwQClientEDCAVideoECWmax, hwWlan8021pSpecValue=hwWlan8021pSpecValue, hwWlanTos6MapUPValue=hwWlanTos6MapUPValue, hwQAPEDCAVoiceECWmax=hwQAPEDCAVoiceECWmax, hwWlanValue0MapUpTunnelPriority=hwWlanValue0MapUpTunnelPriority, hwWlanValue1MapDownTunnelPriority=hwWlanValue1MapDownTunnelPriority, hwWlanUpTunnelPrioritySpecValue=hwWlanUpTunnelPrioritySpecValue, hwWlanValue6MapUpTunnelPriority=hwWlanValue6MapUpTunnelPriority, hwWlanValue1MapUpTunnelPriority=hwWlanValue1MapUpTunnelPriority, hwWlanValue5MapDownTunnelPriority=hwWlanValue5MapDownTunnelPriority, hwQClientEDCABEECWmax=hwQClientEDCABEECWmax, hwQAPEDCABKTXOPLimit=hwQAPEDCABKTXOPLimit, hwWlanQosManagement=hwWlanQosManagement, hwQAPEDCABETXOPLimit=hwQAPEDCABETXOPLimit, hwWlanQosManagementCompliances=hwWlanQosManagementCompliances, hwWlanTos1MapUPValue=hwWlanTos1MapUPValue, hwWlanValue2MapUpTunnelPriority=hwWlanValue2MapUpTunnelPriority, hwWlanBatchWmmProfileReturnNumber=hwWlanBatchWmmProfileReturnNumber, hwWlanWmmProfileTable=hwWlanWmmProfileTable, hwWlanDownTunnelPrioritySpecValue=hwWlanDownTunnelPrioritySpecValue, hwWlanValue4MapDownTunnelPriority=hwWlanValue4MapDownTunnelPriority, hwWlanBatchWmmProfileName=hwWlanBatchWmmProfileName, hwQClientEDCAVideoTXOPLimit=hwQClientEDCAVideoTXOPLimit, hwWlanBatchTrafficProfileGetNumber=hwWlanBatchTrafficProfileGetNumber, hwQClientEDCABETXOPLimit=hwQClientEDCABETXOPLimit, hwWlanQosManagementObjectGroups=hwWlanQosManagementObjectGroups, hwWlanVAPUpLimitRate=hwWlanVAPUpLimitRate, hwWlanClientDownLimitRate=hwWlanClientDownLimitRate, hwQClientEDCAVoiceAIFSN=hwQClientEDCAVoiceAIFSN, hwQAPEDCAVoiceAIFSN=hwQAPEDCAVoiceAIFSN, hwWlan8021p6MapUPValue=hwWlan8021p6MapUPValue, hwWlan8021pMapMode=hwWlan8021pMapMode, hwWlanBatchTrafficProfileReturnNumber=hwWlanBatchTrafficProfileReturnNumber, hwWlan8021p1MapUPValue=hwWlan8021p1MapUPValue, hwWlanTrafficProfileGroup=hwWlanTrafficProfileGroup)
