#
# PySNMP MIB module STN-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-SNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, Counter32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, IpAddress, ObjectIdentity, Unsigned32, iso, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Counter32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "IpAddress", "ObjectIdentity", "Unsigned32", "iso", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stnSystems, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems")
stnSnmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 14))
if mibBuilder.loadTexts: stnSnmpMIB.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnSnmpMIB.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnSnmpMIB.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnSnmpMIB.setDescription('STN SNMP MIB.')
stnSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1))
stnSnmpMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 14, 2))
stnSnmpVirtualRouterTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1), )
if mibBuilder.loadTexts: stnSnmpVirtualRouterTable.setStatus('current')
if mibBuilder.loadTexts: stnSnmpVirtualRouterTable.setDescription('A list of virtual router entries.')
stnSnmpVirtualRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1, 1), ).setIndexNames((0, "STN-SNMP-MIB", "stnSnmpRouterInstance"))
if mibBuilder.loadTexts: stnSnmpVirtualRouterEntry.setStatus('current')
if mibBuilder.loadTexts: stnSnmpVirtualRouterEntry.setDescription('Entry contains Snmp information about a particular router.')
stnSnmpRouterInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpRouterInstance.setStatus('current')
if mibBuilder.loadTexts: stnSnmpRouterInstance.setDescription('A sequence number that identifies a particular router in the chassis.')
stnSnmpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpEnabled.setStatus('current')
if mibBuilder.loadTexts: stnSnmpEnabled.setDescription('Indicates whether the SNMP agent process is enabled on this router')
stnSnmpReadCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpReadCommunity.setStatus('current')
if mibBuilder.loadTexts: stnSnmpReadCommunity.setDescription('Snmp read community string for this router.')
stnSnmpReadView = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpReadView.setStatus('current')
if mibBuilder.loadTexts: stnSnmpReadView.setDescription('The name of Snmp read view for this router.')
stnSnmpContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpContextName.setStatus('current')
if mibBuilder.loadTexts: stnSnmpContextName.setDescription('The name of Snmp context for this router.')
stnSnmpWriteCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: stnSnmpWriteCommunity.setDescription('Snmp write community string for this router.')
stnSnmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 2), )
if mibBuilder.loadTexts: stnSnmpTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: stnSnmpTrapHostTable.setDescription('A list of SNMP trap hosts.')
stnSnmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 2, 1), ).setIndexNames((0, "STN-SNMP-MIB", "stnSnmpTrapHostIndex"))
if mibBuilder.loadTexts: stnSnmpTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: stnSnmpTrapHostEntry.setDescription('Entry contains information about a particular SNMP trap host.')
stnSnmpTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpTrapHostIndex.setStatus('current')
if mibBuilder.loadTexts: stnSnmpTrapHostIndex.setDescription('A sequence number that identifies a particular SNMP trap host.')
stnSnmpTrapHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpTrapHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: stnSnmpTrapHostIpAddress.setDescription('The IP address of this SNMP trap host.')
stnSnmpTrapHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 14, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnSnmpTrapHostPort.setStatus('current')
if mibBuilder.loadTexts: stnSnmpTrapHostPort.setDescription('The port number of this SNMP trap host.')
stnSnmpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 14, 3))
stnSnmpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 14, 3, 1))
stnSnmpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 14, 3, 2))
stnSnmpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 3551, 2, 14, 3, 1, 1)).setObjects(("STN-SNMP-MIB", "stnSnmpMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnSnmpMIBComplianceRev1 = stnSnmpMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: stnSnmpMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Spring Tide Networks Snmp MIB.')
stnSnmpMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3551, 2, 14, 3, 2, 1)).setObjects(("STN-SNMP-MIB", "stnSnmpRouterInstance"), ("STN-SNMP-MIB", "stnSnmpEnabled"), ("STN-SNMP-MIB", "stnSnmpReadCommunity"), ("STN-SNMP-MIB", "stnSnmpReadView"), ("STN-SNMP-MIB", "stnSnmpContextName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnSnmpMIBGroup = stnSnmpMIBGroup.setStatus('current')
if mibBuilder.loadTexts: stnSnmpMIBGroup.setDescription('A collection of STN objects providing router Snmp information.')
mibBuilder.exportSymbols("STN-SNMP-MIB", stnSnmpTrapHostEntry=stnSnmpTrapHostEntry, stnSnmpWriteCommunity=stnSnmpWriteCommunity, stnSnmpTrapHostPort=stnSnmpTrapHostPort, stnSnmpMIBComplianceRev1=stnSnmpMIBComplianceRev1, stnSnmpTrapHostTable=stnSnmpTrapHostTable, stnSnmpRouterInstance=stnSnmpRouterInstance, stnSnmpMIBConformance=stnSnmpMIBConformance, stnSnmpMIBGroup=stnSnmpMIBGroup, stnSnmpVirtualRouterEntry=stnSnmpVirtualRouterEntry, stnSnmpMIB=stnSnmpMIB, stnSnmpMibConformance=stnSnmpMibConformance, stnSnmp=stnSnmp, stnSnmpMIBGroups=stnSnmpMIBGroups, stnSnmpVirtualRouterTable=stnSnmpVirtualRouterTable, stnSnmpReadCommunity=stnSnmpReadCommunity, stnSnmpMIBCompliances=stnSnmpMIBCompliances, stnSnmpContextName=stnSnmpContextName, stnSnmpEnabled=stnSnmpEnabled, stnSnmpReadView=stnSnmpReadView, stnSnmpTrapHostIpAddress=stnSnmpTrapHostIpAddress, stnSnmpTrapHostIndex=stnSnmpTrapHostIndex, PYSNMP_MODULE_ID=stnSnmpMIB)
