#
# PySNMP MIB module POWERSUPPLY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWERSUPPLY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Bits, ObjectIdentity, Counter32, Unsigned32, Gauge32, Integer32, ModuleIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Bits", "ObjectIdentity", "Counter32", "Unsigned32", "Gauge32", "Integer32", "ModuleIdentity", "IpAddress", "TimeTicks")
DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
hpicfPsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55))
hpicfPsMIB.setRevisions(('2013-08-20 00:00', '2013-06-13 00:00', '2013-03-07 10:00', '2008-08-27 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfPsMIB.setRevisionsDescriptions(('Modified enumerated values of hpicfXpsZoneStatus.', 'Added hpicfPsModel, hpicfPsGroup1 and hpicfPsCompliance1. Deprecated hpicfPsGroup and hpicfPsCompliance.', 'Added hpicfXpsTable,hpicfXpsSwitchConfigTable, hpicfXpsZoneTable,tables hpicfXpsCompliance, hpicfXpsZoneCompliance', 'Initial Version of Power Supply MIB, Version 1',))
if mibBuilder.loadTexts: hpicfPsMIB.setLastUpdated('201308200000Z')
if mibBuilder.loadTexts: hpicfPsMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfPsMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfPsMIB.setDescription('This MIB module is for representing switch power supply entity.')
hpicfEntityPs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1))
class HpicfDcPsIndex(TextualConvention, Unsigned32):
    description = 'A unique value that serves as index to identify the power supply.'
    status = 'current'
    displayHint = 'd'

class HpicfDcPsState(TextualConvention, Integer32):
    description = 'An enumerated value which provides the state of the switch power supply entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("psNotPresent", 1), ("psNotPlugged", 2), ("psPowered", 3), ("psFailed", 4), ("psPermFailure", 5), ("psMax", 6), ("psAuxFailure", 7), ("psNotPowered", 8), ("psAuxNotPowered", 9))

class HpicfXpsConnectionStatus(TextualConvention, Integer32):
    description = 'An enumerated value which provides the state of the connection between the switch and external power supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notConnected", 0), ("unavailable", 1), ("available", 2), ("active", 3), ("mismatch", 4), ("notReady", 5), ("overCurrent", 6), ("cannotPower", 7), ("autoDisabled", 8))

class HpicfXpsZoneStatus(TextualConvention, Integer32):
    description = 'An enumerated value which provides the state of the current zone of the external power supply.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notConnected", 1), ("notReady", 2), ("faulted", 3), ("powered", 4), ("inReset", 5))

hpicfPsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1), )
if mibBuilder.loadTexts: hpicfPsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPsTable.setDescription('This table contains one row per switch power supply entity.')
hpicfPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1), ).setIndexNames((0, "POWERSUPPLY-MIB", "hpicfPsBayNum"))
if mibBuilder.loadTexts: hpicfPsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPsEntry.setDescription('Information about the power supply physical entity table.')
hpicfPsBayNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 1), HpicfDcPsIndex())
if mibBuilder.loadTexts: hpicfPsBayNum.setStatus('current')
if mibBuilder.loadTexts: hpicfPsBayNum.setDescription('The index of switch power supply entity.')
hpicfPsState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 2), HpicfDcPsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsState.setStatus('current')
if mibBuilder.loadTexts: hpicfPsState.setDescription('The physical state of the switch power supply entity.')
hpicfPsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsFailures.setStatus('current')
if mibBuilder.loadTexts: hpicfPsFailures.setDescription('Number of times power supply has failed.')
hpicfPsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsTemp.setStatus('current')
if mibBuilder.loadTexts: hpicfPsTemp.setDescription('The temperature of the power supply in Celsius')
hpicfPsVoltageInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsVoltageInfo.setStatus('current')
if mibBuilder.loadTexts: hpicfPsVoltageInfo.setDescription('The voltage info and max current of power supply. e.g. AC 120V/220V. ')
hpicfPsWattageCur = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsWattageCur.setStatus('current')
if mibBuilder.loadTexts: hpicfPsWattageCur.setDescription('The present power supply wattage information')
hpicfPsWattageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsWattageMax.setStatus('current')
if mibBuilder.loadTexts: hpicfPsWattageMax.setDescription('The maximum wattage of the power supply.')
hpicfPsLastCall = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsLastCall.setStatus('current')
if mibBuilder.loadTexts: hpicfPsLastCall.setDescription('The number of seconds since the switch power supply is up.')
hpicfPsModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPsModel.setStatus('current')
if mibBuilder.loadTexts: hpicfPsModel.setDescription('This object provides the model number of the power supply unit and it is specified as the Jnumber.')
hpicfXpsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2), )
if mibBuilder.loadTexts: hpicfXpsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsTable.setDescription('This table contains one row per port of this zone of the external power supply.')
hpicfXpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "POWERSUPPLY-MIB", "hpicfXpsConnectingPort"))
if mibBuilder.loadTexts: hpicfXpsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsEntry.setDescription('Information about all the ports on the external power supply. On a stack, each member can be connected to the one of the ports of the external power supply. With entPhysicalIndex, the information about the required member can be obtained.')
hpicfXpsConnectingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfXpsConnectingPort.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsConnectingPort.setDescription('This is the port which connects the switch to the current zone of the external power supply. External power supply has 3 zones. In zone 1, user can connect upto 4 switches. In zones 2 and 3, user can connect upto 2 switches each.')
hpicfXpsPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsPortOperStatus.setDescription('Operating status of the port which connects the switch to the external power supply . By default, all the ports are enabled.')
hpicfXpsSwitchSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSwitchSerialNo.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchSerialNo.setDescription('This is the serial number of the switch connected to the current port of the external power supply.')
hpicfXpsConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 4), HpicfXpsConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsConnectionState.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsConnectionState.setDescription('The connection status between the external power supply and the switch.')
hpicfXpsSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSysName.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSysName.setDescription('This indicates the name of the system connected to the current port of the external power supply.')
hpicfXpsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsMACAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsMACAddress.setDescription('MAC address of the switch connected to the current port of the external power supply.')
hpicfXpsSwitchOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSwitchOSVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchOSVersion.setDescription('This MIB object specifies the OS version of the switch connected to the current port of the external power supply.')
hpicfXpsSwitchIpsVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 8), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSwitchIpsVoltage.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchIpsVoltage.setDescription('Internal power supply voltage of the switch connected to this port of the external power supply.')
hpicfXpsSwitchIpsWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSwitchIpsWattage.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchIpsWattage.setDescription('Internal power supply wattage of the switch connected to this port of the external power supply.')
hpicfXpsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 10), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsPower.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsPower.setDescription('The power allocated from the external power supply to the switch connected to this port. External power is available when both the internal power supply and external power supply are operational. The amount of available external power is dependent on the external power supply and the power domain configuration.')
hpicfXpsSupportedCableVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSupportedCableVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSupportedCableVersion.setDescription('Cable record version supported by the switch software of the switch connected to the current cable. This object will be useful for debugging when switches connected to a common zone has different versions.')
hpicfXpsSupportedZoneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSupportedZoneVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSupportedZoneVersion.setDescription('Zone record version supported by the switch software of the switch connected to the current port of the external power supply. Configurations are not allowed if there is any mismatch between supported zone version and hpicfXpsZoneRecordVersion.')
hpicfXpsSwitchModType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSwitchModType.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchModType.setDescription('J number of the switch connected to the current cable of external power supply.')
hpicfXpsSwitchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3), )
if mibBuilder.loadTexts: hpicfXpsSwitchConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchConfigTable.setDescription('This table contains one row per system which is connected to the external power supply.')
hpicfXpsSwitchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpicfXpsSwitchConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchConfigEntry.setDescription('This provides the configuration information of the switch that is connected to external power supply.')
hpicfXpsSwitchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXpsSwitchAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchAdminStatus.setDescription('Administrative status of the switch that is connected to the external power supply.By default, the status is enabled and the switch will receive backup power and additional PoE power upon connecting to the external power supply.')
hpicfXpsSwitchAutoRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXpsSwitchAutoRecovery.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSwitchAutoRecovery.setDescription('The status of external power supply auto recovery on the switch that is currently connected to the external power supply.By default, auto-recovery feature is enabled on the switch and there is automatic recovery after after external power supply reboot or after external power supply becomes available.')
hpicfXpsAllowPortsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXpsAllowPortsSupported.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsAllowPortsSupported.setDescription('From this object, the amount of PoE power allocated to the current switch can be reduced, which might turn off some of the low priority PoE ports. This object can be set only on a PoE switch. When the new switch is being added to the current zone of the external power supply , the amount of external power allocated for this switch will be reduced. This object will make sure that the PoE ports that will be powered by the new power will not be impacted when the power share map is changed. This object always returns 0 on read operation. The set request for this object is blocked if any external power supply configuration is in progress.')
hpicfXpsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("factoryReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXpsReset.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsReset.setDescription("This object indicates the type of reset operation that will be performed on the current zone of the external power supply. All the configurations can be restored to factory default settings with 'factoryReset' option, which might turn off some of the low Priority powered PoE ports. The set request for this object is blocked if any external power supply configuration is in progress. Set request for this object will take longer time for completion. Status of a successful set request can be read from hpicfXpsResetReqStatus object.")
hpicfXpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsType.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsType.setDescription('The name of the external power supply.')
hpicfXpsSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsSerialNum.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsSerialNum.setDescription('The serial number of the external power supply.')
hpicfXpsModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsModuleName.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsModuleName.setDescription('This indicates the J number of the external power supply.')
hpicfXpsPowerShareReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsPowerShareReqStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsPowerShareReqStatus.setDescription('Status of the external power supply power share request. Set requests for hpicfXpsPowerDistMap will take longer time for completion.This object can be used to get the status of the set request. The following are the possible values for the object: idle - no set request has been issued. inProgress - configuration request is being processed. success - configuration request is successful. failed - configuration request failed. ')
hpicfXpsResetReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("success", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsResetReqStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsResetReqStatus.setDescription('Status of the external power supply reset request. Set requests for hpicfXpsReset will take longer time for completion. This object can be used to get the status of the set request. The following are the possible values for the object: idle - no set request has been issued. inProgress - configuration request is being processed. success - configuration request is successful. failed - configuration request failed. ')
hpicfXpsZoneTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4), )
if mibBuilder.loadTexts: hpicfXpsZoneTable.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneTable.setDescription('This table contains one row per zone of the external power supply.')
hpicfXpsZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpicfXpsZoneEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneEntry.setDescription('Information about this zone of external power supply.')
hpicfXpsZoneNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsZoneNo.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneNo.setDescription('This indicates the zone number of the external power supply. The external power supply has 3 zones.')
hpicfXpsZoneState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 2), HpicfXpsZoneStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsZoneState.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneState.setDescription('Physical state of the current zone of the external power supply.')
hpicfXpsZonePowerShareMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXpsZonePowerShareMap.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZonePowerShareMap.setDescription('This indicates the power share map on the current zone. The map indicates the ports on the external power supply that is configured to deliver power to the connected switches. Zone 1 has 4 ports: A-D. Zone 2 and 3 have only 2 ports: A-B. Within the map, the most significant bit represents port D And the least significant bit represents port A. If a bit is set to 1, then the given port is enabled on this zone. By default, all the bits are enabled in this map.Set requests for this object will take longer time for completion. Status of the set request can be read from hpicfXpsPowerShareReqStatus object. Modifications to power share map needs additional force option which depends on hpicfXpsZonePowerShareForce.')
hpicfXpsZoneVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 4), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsZoneVoltage.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneVoltage.setDescription('The voltage information of the external power supply in this zone.')
hpicfXpsZoneWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 5), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsZoneWattage.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneWattage.setDescription('The wattage information of the current zone of the external power supply.')
hpicfXpsPSURev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsPSURev.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsPSURev.setDescription('This indicates the revision number of the power supply unit that resides in this zone.')
hpicfXpsPSUModule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsPSUModule.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsPSUModule.setDescription('This indicates the J number of the power supply unit that resides in this zone.')
hpicfXpsZonePowerShareForce = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfXpsZonePowerShareForce.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZonePowerShareForce.setDescription('When this option is set as true then hpicfXpsZonePowerShar will change in un-graceful manner where all low priority P devices connected to these ports will be shut-down tempora When this option is set as false then hpicfXpsZonePowerSha will change in graceful manner where low priority POE devi connected to it will not be affected. Walkmib or getmib on will always return false.')
hpicfXpsZoneRecordVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfXpsZoneRecordVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneRecordVersion.setDescription('Zone record version of the current zone of external power supply. This object is needed for debugging purpose when there is a difference between hpicfXpsSupportedZoneVersion and this object. Configurations are not allowed if there is any mismatch between hpicfXpsSupportedZoneVersion and this object.')
hpicfPsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2))
hpicfPsCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 1))
hpicfPsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 2))
hpicfDcPsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 1, 1)).setObjects(("POWERSUPPLY-MIB", "hpicfPsGroup"), ("POWERSUPPLY-MIB", "hpicfPsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDcPsCompliance = hpicfDcPsCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDcPsCompliance.setDescription('The compliance statement for entries which implement the POWER SUPPLY MIB.')
hpicfXpsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 1, 2)).setObjects(("POWERSUPPLY-MIB", "hpicfXpsGroup"), ("POWERSUPPLY-MIB", "hpicfXpsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXpsCompliance = hpicfXpsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsCompliance.setDescription('The compliance statement for the external power supply mib.')
hpicfXpsZoneCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 1, 3)).setObjects(("POWERSUPPLY-MIB", "hpicfXpsZoneGroup"), ("POWERSUPPLY-MIB", "hpicfXpsZoneGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXpsZoneCompliance = hpicfXpsZoneCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneCompliance.setDescription('The compliance statement for the zone MIB.')
hpicfDcPsCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 1, 4)).setObjects(("POWERSUPPLY-MIB", "hpicfPsGroup1"), ("POWERSUPPLY-MIB", "hpicfPsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDcPsCompliance1 = hpicfDcPsCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfDcPsCompliance1.setDescription('The compliance statement for entries which implement the POWER SUPPLY MIB.')
hpicfPsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 2, 1)).setObjects(("POWERSUPPLY-MIB", "hpicfPsState"), ("POWERSUPPLY-MIB", "hpicfPsFailures"), ("POWERSUPPLY-MIB", "hpicfPsTemp"), ("POWERSUPPLY-MIB", "hpicfPsVoltageInfo"), ("POWERSUPPLY-MIB", "hpicfPsWattageCur"), ("POWERSUPPLY-MIB", "hpicfPsWattageMax"), ("POWERSUPPLY-MIB", "hpicfPsLastCall"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPsGroup = hpicfPsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfPsGroup.setDescription('POWER SUPPLY parameters ')
hpicfXpsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 2, 2)).setObjects(("POWERSUPPLY-MIB", "hpicfXpsPortOperStatus"), ("POWERSUPPLY-MIB", "hpicfXpsSwitchSerialNo"), ("POWERSUPPLY-MIB", "hpicfXpsConnectionState"), ("POWERSUPPLY-MIB", "hpicfXpsSysName"), ("POWERSUPPLY-MIB", "hpicfXpsMACAddress"), ("POWERSUPPLY-MIB", "hpicfXpsSwitchOSVersion"), ("POWERSUPPLY-MIB", "hpicfXpsSwitchIpsVoltage"), ("POWERSUPPLY-MIB", "hpicfXpsSwitchIpsWattage"), ("POWERSUPPLY-MIB", "hpicfXpsPower"), ("POWERSUPPLY-MIB", "hpicfXpsSwitchAdminStatus"), ("POWERSUPPLY-MIB", "hpicfXpsSwitchAutoRecovery"), ("POWERSUPPLY-MIB", "hpicfXpsAllowPortsSupported"), ("POWERSUPPLY-MIB", "hpicfXpsReset"), ("POWERSUPPLY-MIB", "hpicfXpsType"), ("POWERSUPPLY-MIB", "hpicfXpsSerialNum"), ("POWERSUPPLY-MIB", "hpicfXpsModuleName"), ("POWERSUPPLY-MIB", "hpicfXpsPowerShareReqStatus"), ("POWERSUPPLY-MIB", "hpicfXpsResetReqStatus"), ("POWERSUPPLY-MIB", "hpicfXpsSupportedCableVersion"), ("POWERSUPPLY-MIB", "hpicfXpsSupportedZoneVersion"), ("POWERSUPPLY-MIB", "hpicfXpsSwitchModType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXpsGroup = hpicfXpsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsGroup.setDescription('External power supply parameters.')
hpicfXpsZoneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 2, 3)).setObjects(("POWERSUPPLY-MIB", "hpicfXpsZoneNo"), ("POWERSUPPLY-MIB", "hpicfXpsZoneState"), ("POWERSUPPLY-MIB", "hpicfXpsZonePowerShareMap"), ("POWERSUPPLY-MIB", "hpicfXpsZoneVoltage"), ("POWERSUPPLY-MIB", "hpicfXpsZoneWattage"), ("POWERSUPPLY-MIB", "hpicfXpsPSURev"), ("POWERSUPPLY-MIB", "hpicfXpsPSUModule"), ("POWERSUPPLY-MIB", "hpicfXpsZonePowerShareForce"), ("POWERSUPPLY-MIB", "hpicfXpsZoneRecordVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfXpsZoneGroup = hpicfXpsZoneGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfXpsZoneGroup.setDescription('External power supply zone parameters ')
hpicfPsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 55, 2, 2, 4)).setObjects(("POWERSUPPLY-MIB", "hpicfPsState"), ("POWERSUPPLY-MIB", "hpicfPsFailures"), ("POWERSUPPLY-MIB", "hpicfPsTemp"), ("POWERSUPPLY-MIB", "hpicfPsVoltageInfo"), ("POWERSUPPLY-MIB", "hpicfPsWattageCur"), ("POWERSUPPLY-MIB", "hpicfPsWattageMax"), ("POWERSUPPLY-MIB", "hpicfPsLastCall"), ("POWERSUPPLY-MIB", "hpicfPsModel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPsGroup1 = hpicfPsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfPsGroup1.setDescription('A collection of objects providing information about the power supply unit.')
mibBuilder.exportSymbols("POWERSUPPLY-MIB", hpicfXpsConnectionState=hpicfXpsConnectionState, hpicfPsGroup=hpicfPsGroup, hpicfXpsZonePowerShareForce=hpicfXpsZonePowerShareForce, HpicfXpsConnectionStatus=HpicfXpsConnectionStatus, hpicfDcPsCompliance1=hpicfDcPsCompliance1, hpicfXpsPower=hpicfXpsPower, hpicfXpsZonePowerShareMap=hpicfXpsZonePowerShareMap, hpicfXpsSupportedCableVersion=hpicfXpsSupportedCableVersion, hpicfXpsPSUModule=hpicfXpsPSUModule, hpicfXpsPSURev=hpicfXpsPSURev, hpicfPsGroup1=hpicfPsGroup1, hpicfPsFailures=hpicfPsFailures, hpicfPsMIB=hpicfPsMIB, hpicfXpsSwitchAdminStatus=hpicfXpsSwitchAdminStatus, hpicfXpsZoneCompliance=hpicfXpsZoneCompliance, hpicfPsLastCall=hpicfPsLastCall, hpicfXpsSupportedZoneVersion=hpicfXpsSupportedZoneVersion, hpicfXpsReset=hpicfXpsReset, hpicfXpsResetReqStatus=hpicfXpsResetReqStatus, hpicfXpsZoneNo=hpicfXpsZoneNo, PYSNMP_MODULE_ID=hpicfPsMIB, HpicfDcPsState=HpicfDcPsState, hpicfPsVoltageInfo=hpicfPsVoltageInfo, hpicfPsWattageMax=hpicfPsWattageMax, hpicfPsState=hpicfPsState, hpicfXpsSysName=hpicfXpsSysName, hpicfXpsSwitchConfigTable=hpicfXpsSwitchConfigTable, hpicfXpsZoneState=hpicfXpsZoneState, hpicfPsBayNum=hpicfPsBayNum, hpicfPsGroups=hpicfPsGroups, hpicfXpsSwitchOSVersion=hpicfXpsSwitchOSVersion, hpicfPsTable=hpicfPsTable, hpicfXpsZoneVoltage=hpicfXpsZoneVoltage, hpicfXpsSwitchModType=hpicfXpsSwitchModType, hpicfPsCompliance=hpicfPsCompliance, HpicfDcPsIndex=HpicfDcPsIndex, hpicfXpsCompliance=hpicfXpsCompliance, hpicfPsModel=hpicfPsModel, hpicfXpsZoneTable=hpicfXpsZoneTable, hpicfXpsZoneEntry=hpicfXpsZoneEntry, HpicfXpsZoneStatus=HpicfXpsZoneStatus, hpicfXpsMACAddress=hpicfXpsMACAddress, hpicfXpsType=hpicfXpsType, hpicfXpsEntry=hpicfXpsEntry, hpicfXpsModuleName=hpicfXpsModuleName, hpicfXpsPowerShareReqStatus=hpicfXpsPowerShareReqStatus, hpicfXpsConnectingPort=hpicfXpsConnectingPort, hpicfXpsSwitchConfigEntry=hpicfXpsSwitchConfigEntry, hpicfXpsZoneWattage=hpicfXpsZoneWattage, hpicfXpsZoneRecordVersion=hpicfXpsZoneRecordVersion, hpicfPsConformance=hpicfPsConformance, hpicfXpsTable=hpicfXpsTable, hpicfDcPsCompliance=hpicfDcPsCompliance, hpicfPsTemp=hpicfPsTemp, hpicfXpsAllowPortsSupported=hpicfXpsAllowPortsSupported, hpicfXpsSerialNum=hpicfXpsSerialNum, hpicfXpsZoneGroup=hpicfXpsZoneGroup, hpicfPsEntry=hpicfPsEntry, hpicfXpsSwitchAutoRecovery=hpicfXpsSwitchAutoRecovery, hpicfXpsSwitchIpsWattage=hpicfXpsSwitchIpsWattage, hpicfXpsPortOperStatus=hpicfXpsPortOperStatus, hpicfXpsGroup=hpicfXpsGroup, hpicfXpsSwitchIpsVoltage=hpicfXpsSwitchIpsVoltage, hpicfEntityPs=hpicfEntityPs, hpicfXpsSwitchSerialNo=hpicfXpsSwitchSerialNo, hpicfPsWattageCur=hpicfPsWattageCur)
