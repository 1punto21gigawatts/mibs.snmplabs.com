#
# PySNMP MIB module CISCO-RTP-METRICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-RTP-METRICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cfmFlowMonitorId, cfmFlowId, cfmFlowMetricsIntNumber = mibBuilder.importSymbols("CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId", "cfmFlowId", "cfmFlowMetricsIntNumber")
FlowMetricScale, FlowMetricPrecision, FlowMetricValue = mibBuilder.importSymbols("CISCO-FLOW-MONITOR-TC-MIB", "FlowMetricScale", "FlowMetricPrecision", "FlowMetricValue")
ReportIntervalCount, = mibBuilder.importSymbols("CISCO-REPORT-INTERVAL-TC-MIB", "ReportIntervalCount")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, iso, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Integer32, TimeTicks, ModuleIdentity, MibIdentifier, IpAddress, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Integer32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "IpAddress", "Gauge32", "NotificationType")
TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp")
ciscoRtpMetricsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703))
ciscoRtpMetricsMIB.setRevisions(('2009-06-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoRtpMetricsMIB.setRevisionsDescriptions(('The initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoRtpMetricsMIB.setLastUpdated('200906170000Z')
if mibBuilder.loadTexts: ciscoRtpMetricsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoRtpMetricsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoRtpMetricsMIB.setDescription("This MIB module defines objects that describe the quality metrics of RTP streams, similar to those described by an RTCP Receiver Report packet [RFC3550]. GLOSSARY ============ Expected Packets - this value is formally defined as the extended last sequence number received less the initial sequence number received. An extended last sequence number is a 32-bit value, where the most significant 16-bit word indicates the number of sequence number cycles, and the least significant 16-bit word indicates the highest sequence number received. Flow Monitor - a hardware or software entity that classifies traffic flows, collects flow data, and periodically computes flow metrics. Flow Metric - a measurement that reflects the quality of a traffic flow. Inter-Arrival Jitter - an estimate of the statistical variance of the RTP data packet inter-arrival time. The inter-arrival jitter, J, is formally defined to be the mean deviation (smoothed absolute value) of the difference, D, in packet spacing at the flow monitor compared to the sender for a pair of packets. This is equivalent to the difference in the relative transit time for two packets; the relative transit time is the difference between a packet's RTP timestamp and the device's clock at the time of arrival (measured in the same units): D(i,j) = (Rj - Ri) - (Sj - Si) = (Rj - Sj) - (Ri - Si) where Si is the RTP timestamp from packet i, and Ri is the time of arrival in RTP timestamp units for packet i. The inter-arrival jitter SHOULD be calculated continuously for each RTP data packet received from source SSRCn, using this equation to compute difference for each packet and the previous packet (in order of arrival, not necessarily in sequence). |D(i-1,i)| - J(i-1) J(i) = J(i-1) + ------------------- 16 Measurement Interval - the length of time over which a flow monitor collects data related to a traffic flow, after which the flow monitor computes flow metrics using the collected data. Loss Distance - the difference between the sequence numbers delimiting the start of two consecutive loss intervals. Consider the following sequence of RTP data packets: 111111 111222 2233 33333 444 444 5 123456x890123xxxx8901xxx56789x123xx678x0 ^ ^ ^ ^ ^ ^ | | | | | | LI1 LI2 LI3 LI4 LI5 LI6 Loss Interval | Loss Distance ===============+=============== 1 | 2 | 7 3 | 8 4 | 8 5 | 4 6 | 5 Loss Fraction - the fraction of RTP data packets from source SSRCn lost during a measurement interval, expressed as a fixed-point number: Li Fi = ---- Ei where Fi is the loss fraction for measurement interval i, Li is the lost packets during measurement interval i, and Ei is the expected packets during measurement interval i. Observe that the number of packets lost includes packets that are late or duplicates, and hence this number can can have a theoretical theoretical value between negative infinity and one. The cumulative loss fraction is the fraction of RTP data packets from source SSRCn lost over the duration monitoring the flow: n sum [Li] i=1 Fn = ---------- n sum [Ei] i=1 where Fn is the cumulative loss fraction over n measurement intervals. Loss Interval - an interval in which consecutive packet losses were experienced. Consider the following sequence of RTP data packets: 111111 111222 2233 33333 444 444 5 123456x890123xxxx8901xxx56789x123xx678x0 ^ ^ ^ ^ ^ ^ | | | | | | LI1 LI2 LI3 LI4 LI5 LI6 LI1 through LI6 indicate the start of loss intervals observed in this sequence. Loss Interval Duration - the number of packets lost in a loss interval. Consider the following sequence of RTP data packets: 111111 111222 2233 33333 444 444 5 123456x890123xxxx8901xxx56789x123xx678x0 ^ ^ ^ ^ ^ ^ | | | | | | LI1 LI2 LI3 LI4 LI5 LI6 Loss Interval | Duration ===============+========== 1 | 1 2 | 4 3 | 3 4 | 1 5 | 2 6 | 1 Lost Packets - this value is formally defined as the number of packets expected less the number of packets actually received, where the number of packets received includes those which are late or duplicates. SSRCn - the SSRC identifier of the source. Traffic Flow - a unidirectional stream of packets conforming to a classifier. For example, packets having a particular source IP address, destination IP address, protocol type, source port number, and destination port number. Transit Time - the latency from the insertion into the network to the flow monitor. This value can be computed by taking the difference between a packet's RTP timestamp and the device's clock at the time of arrival (measured in the same units). REFERENCES ============== [RFC3550] H. Schlzrinne, S. Casner, R. Frederick, V. Jacobson, 'RTP: A Transport Protocol for Real-Time Applications', RFC-3550, July 2003.")
ciscoRtpMetricsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 0))
ciscoRtpMetricsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 1))
ciscoRtpMetricsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 2))
ciscoRtpMetricsMIBIds = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 3))
cfmRtpMetrics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1))
cfmRtpMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1), )
if mibBuilder.loadTexts: cfmRtpMetricsTable.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsTable.setDescription("This table contains aggregate data maintained by a flow monitor for traffic flows for which it is computing RTP metrics. This table has an sparse dependent relationship on the cfmFlowMetricsTable (defined by the CISCO-FLOW-MONITOR-MIB), containing a row for each row in the cfmFlowMetricsTable having a corresponding instance of cfmFlowMetricsCollected with the 'rtp' bit set to one.")
cfmRtpMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"))
if mibBuilder.loadTexts: cfmRtpMetricsEntry.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsEntry.setDescription('An entry describes cumulative and aggregate RTP metrics for a single traffic flow. The devices creates a row in the cfmRtpMetricsTable when a flow monitor starts monitoring a traffic flow and has been configured to compute RTP metrics for the same traffic flow. Likewise, the device destroys a row in the cfmRtpMetricsTable when the corresponding flow monitor has ceased monitoring the traffic flow (e.g., when a traffic flow has timed out).')
cfmRtpMetricsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("expectedPkts", 0), ("lostPkts", 1), ("lossFraction", 2), ("lossIntervals", 3), ("avgLossDuration", 4), ("avgLossDistance", 5), ("jitter", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsValid.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsValid.setDescription("This object indicates which metrics are valid for the traffic flow: 'expectedPkts' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsExpectedPkts is valid. 'lostPkts' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsLostPkts is valid. 'lossFraction' If this bit is set to '1', then the corresponding instances of cfmRtpMetricsFracScale, cfmRtpMetricsFracPrecision, and cfmRtpMetricsFrac are valid. 'lossIntervals' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsLIs is valid. 'avgLossIntervalDuration' If this bit is set to '1', then the corresponding instances of cfmRtpMetricsAvgLDScale, cfmRtpMetricsAvgLDPrecision, and cfmRtpMetricsAvgLD are valid. 'avgLossDistance' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsAvgLossDistance is valid. 'jitter' If this bit is set to '1', then the corresponding instances of cfmRtpMetricsJitterScale, cfmRtpMetricsJitterPrecision, and cfmRtpMetricsJitter are valid.")
cfmRtpMetricsExpectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsExpectedPkts.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsExpectedPkts.setDescription('This object indicates the number of RTP packets expected for the traffic flow.')
cfmRtpMetricsLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsLostPkts.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsLostPkts.setDescription('This object indicates the number of RTP packets lost for the traffic flow.')
cfmRtpMetricsFracScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 4), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsFracScale.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsFracScale.setDescription('This object indicates the scaling factor for the corresponding instance of cfmRtpMetricsFrac.')
cfmRtpMetricsFracPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 5), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsFracPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsFracPrecision.setDescription('This object indicates the precision for the corresponding instance of cfmRtpmetricsFrac.')
cfmRtpMetricsFrac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 6), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsFrac.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsFrac.setDescription('This object indicates the loss fraction for traffic flow.')
cfmRtpMetricsLIs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsLIs.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsLIs.setDescription('This object indicates the number of loss intervals for the traffic flow.')
cfmRtpMetricsAvgLDScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 8), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsAvgLDScale.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsAvgLDScale.setDescription('This object indicates the scaling factor for the corresponding instance of cfmRtpMetricsAvgLD.')
cfmRtpMetricsAvgLDPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 9), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsAvgLDPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsAvgLDPrecision.setDescription('This object indicates the precision for the corresponding instance of cfmRtpMetricsAvgLD.')
cfmRtpMetricsAvgLD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 10), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsAvgLD.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsAvgLD.setDescription('This object indicates the average loss duration for the traffic flow.')
cfmRtpMetricsAvgLossDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsAvgLossDistance.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsAvgLossDistance.setDescription('This object indicates the average loss distance for the traffic flow.')
cfmRtpMetricsJitterScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 12), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsJitterScale.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsJitterScale.setDescription('This object indicates the scaling factor for the corresponding instance of cfmRtpMetricsJitter.')
cfmRtpMetricsJitterPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 13), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsJitterPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsJitterPrecision.setDescription('This object indicates the precision for the corresponding instance of cfmRtpMetricsJitter.')
cfmRtpMetricsJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 1, 1, 14), FlowMetricValue()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsJitter.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsJitter.setDescription('This object indicates the inter-arrival jitter for the traffic flow.')
cfmRtpMetricsTableChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsTableChanged.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsTableChanged.setDescription('This object indicates the value of sysUpTime the last time the device created/destroyed a row in the cfmRtpMetricsTable.')
cfmRtpMetricsIntTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3), )
if mibBuilder.loadTexts: cfmRtpMetricsIntTable.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntTable.setDescription("This table contains historic RTP metrics for the traffic flows monitored by each of the flow monitors supported by the device. This table has an sparse dependent relationship on the cfmFlowMetricsIntTable (defined by the CISCO-FLOW-MONITOR-MIB), containing a row for each row in the cfmFlowMetricsIntTable having a corresponding instance of cfmFlowMetricsCollected with the 'rtp' bit set to one.")
cfmRtpMetricsIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMonitorId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowId"), (0, "CISCO-FLOW-MONITOR-MIB", "cfmFlowMetricsIntNumber"))
if mibBuilder.loadTexts: cfmRtpMetricsIntEntry.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntEntry.setDescription('An entry describes RTP metrics collected for a previous measurement interval for a corresponding traffic flow.')
cfmRtpMetricsIntValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 1), Bits().clone(namedValues=NamedValues(("expectedPkts", 0), ("lostPkts", 1), ("lossFraction", 2), ("lossIntervals", 3), ("avgLossIntervalDuration", 4), ("avgLossDistance", 5), ("maxJitter", 6), ("maxMinTransit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntValid.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntValid.setDescription("This object indicates which metrics are valid for the measurement interval: 'expectedPkts' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsIntExpectedPkts is valid. 'lostPkts' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsIntLostPkts is valid. 'lossFraction' If this bit is set to '1', then the corresponding instances of cfmRtpMetricsIntFracScale, cfmRtpMetricsIntFracPrecision, and cfmRtpMetricsIntFrac are valid. 'lossIntervals' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsIntLIs is valid. 'avgLossDuration' If this bit is set to '1', then the corresponding instances of cfmRtpMetricsIntAvgLDScale, cfmRtpMetricsIntAvgLDPrecision, and cfmRtpMetricsIntAvgLD are valid. 'avgLossDistance' If this bit is set to '1', then the corresponding instance of cfmRtpMetricsIntAvgLossDistance is valid. 'maxJitter' If this bit is set to '1', then the corresponding instances of cfmRtpMetricsIntJitterScale, cfmRtpMetricsIntJitterPrecision, and cfmRtpMetricsIntJitter are valid. 'maxMinTransit' If this bit is set to '1', then the corresponding instances of cfmRtpMetricsIntTransitScale, cfmRtpMetricsIntTransitPrecision, and cfmRtpMetricsIntTransit are valid.")
cfmRtpMetricsIntExpectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 2), ReportIntervalCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntExpectedPkts.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntExpectedPkts.setDescription('This object indicates the number of RTP packets expected for the traffic flow during the measurement interval.')
cfmRtpMetricsIntLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 3), ReportIntervalCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntLostPkts.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntLostPkts.setDescription('This object indicates the number of RTP packets lost for the traffic flow during the measurement interval.')
cfmRtpMetricsIntFracScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 4), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntFracScale.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntFracScale.setDescription('This object indicates the scaling factor for the corresponding instance of cfmRtpMetricsIntFrac.')
cfmRtpMetricsIntFracPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 5), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntFracPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntFracPrecision.setDescription('This object indicates the precision for the corresponding instance of cfmRtpmetricsIntFrac.')
cfmRtpMetricsIntFrac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 6), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntFrac.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntFrac.setDescription('This object indicates the loss fraction for traffic flow during the measurement interval.')
cfmRtpMetricsIntLIs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 7), ReportIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntLIs.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntLIs.setDescription('This object indicates the number of loss intervals for the traffic flow during the measurement interval.')
cfmRtpMetricsIntAvgLDScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 8), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLDScale.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLDScale.setDescription('This object indicates the scaling factor for the corresponding instance of cfmRtpMetricsIntAvgLD.')
cfmRtpMetricsIntAvgLDPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 9), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLDPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLDPrecision.setDescription('This object indicates the precision for the corresponding instance of cfmRtpMetricsIntAvgLD.')
cfmRtpMetricsIntAvgLD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 10), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLD.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLD.setDescription('This object indicates the average loss duration for the traffic flow during the measurement interval.')
cfmRtpMetricsIntAvgLossDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 11), ReportIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLossDistance.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntAvgLossDistance.setDescription('This object indicates the average loss distance for the traffic flow during the measurement interval.')
cfmRtpMetricsIntJitterScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 12), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntJitterScale.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntJitterScale.setDescription('This object indicates the scaling factor for the corresponding instance of cfmRtpMetricsIntJitter.')
cfmRtpMetricsIntJitterPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 13), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntJitterPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntJitterPrecision.setDescription('This object indicates the precision for the corresponding instance of cfmRtpMetricsIntJitter.')
cfmRtpMetricsIntJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 14), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntJitter.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntJitter.setDescription('This object indicates the maximum inter-arrival jitter for the traffic flow during the measurement interval.')
cfmRtpMetricsIntTransitScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 15), FlowMetricScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntTransitScale.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntTransitScale.setDescription('This object indicates the scaling factor for the corresponding instance of cfmRtpMetricsIntTransit.')
cfmRtpMetricsIntTransitPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 16), FlowMetricPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntTransitPrecision.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntTransitPrecision.setDescription('This object indicates the precision for the corresponding instance of cfmRtpMetricsIntTransit.')
cfmRtpMetricsIntTransit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 703, 1, 1, 3, 1, 17), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmRtpMetricsIntTransit.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsIntTransit.setDescription('This object indicates the max-min transit time for the traffic flow during the measurement interval. The max-min transit is the difference between the maximum and minimum transit times observed for RTP data packets during the measurement interval.')
cfmRtpMonitoredElements = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1))
cfmeRtpSsrcMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 1))
if mibBuilder.loadTexts: cfmeRtpSsrcMismatch.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpSsrcMismatch.setDescription('This object identifier represents the monitored element describing the condition that arises when a flow monitor detects a RTP SSRC mismatch for a traffic flow during the last measurement interval.')
cfmeRtpCumulativeLostPkts = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 2))
if mibBuilder.loadTexts: cfmeRtpCumulativeLostPkts.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpCumulativeLostPkts.setDescription('This object identifier represents the monitored element describing the cumulative number of lost RTP data packets for a traffic flow (cfmRtpMetricsLostPkts).')
cfmeRtpCumulativeLossFraction = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 3))
if mibBuilder.loadTexts: cfmeRtpCumulativeLossFraction.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpCumulativeLossFraction.setDescription('This object identifier represents the monitored element describing the cumulative RTP loss fraction for a traffic flow (cfmRtpMetricsFrac).')
cfmeRtpCumulativeLossIntervals = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 4))
if mibBuilder.loadTexts: cfmeRtpCumulativeLossIntervals.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpCumulativeLossIntervals.setDescription('This object identifier represents the monitored element describing the cumulative number of RTP loss intervals for a traffic flow (cfmRtpMetricsLIs).')
cfmeRtpCumulativeAvgLossDuration = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 5))
if mibBuilder.loadTexts: cfmeRtpCumulativeAvgLossDuration.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpCumulativeAvgLossDuration.setDescription('This object identifier represents the monitored element describing the average duration of a RTP loss interval for a traffic flow (cfmRtpMetricsAvgLD).')
cfmeRtpCumulativeAvgLossDistance = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 6))
if mibBuilder.loadTexts: cfmeRtpCumulativeAvgLossDistance.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpCumulativeAvgLossDistance.setDescription('This object identifier represents the monitored element describing the average RTP loss distance for a traffic flow (cfmRtpMetricsAvgLossDistance).')
cfmeRtpCumulativeJitter = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 7))
if mibBuilder.loadTexts: cfmeRtpCumulativeJitter.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpCumulativeJitter.setDescription('This object identifier represents the monitored element describing the average inter-arrival jitter of RTP data packets for a traffic flow (cfmRtpMetricsJitter).')
cfmeRtpLostPkts = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 8))
if mibBuilder.loadTexts: cfmeRtpLostPkts.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpLostPkts.setDescription('This object identifier represents the monitored element describing the number of lost RTP data packets for a traffic flow during the last measurement interval (cfmRtpMetricsIntLostPkts).')
cfmeRtpLossFraction = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 9))
if mibBuilder.loadTexts: cfmeRtpLossFraction.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpLossFraction.setDescription('This object identifier represents the monitored element describing the RTP loss fraction for a traffic flow during the last measurement interval (cfmRtpMetricsIntFrac).')
cfmeRtpLossIntervals = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 10))
if mibBuilder.loadTexts: cfmeRtpLossIntervals.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpLossIntervals.setDescription('This object identifier represents the monitored element describing the number of RTP loss intervals for a traffic flow during the last measurement interval (cfmRtpMetricsIntLIs).')
cfmeRtpAvgLossDuration = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 11))
if mibBuilder.loadTexts: cfmeRtpAvgLossDuration.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpAvgLossDuration.setDescription('This object identifier represents the monitored element describing the average duration of a RTP loss interval for a traffic flow during the last measurement interval (cfmRtpMetricsIntAvgLD).')
cfmeRtpAvgLossDistance = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 12))
if mibBuilder.loadTexts: cfmeRtpAvgLossDistance.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpAvgLossDistance.setDescription('This object identifier represents the monitored element describing the average RTP loss distance for a traffic flow during the last measurement interval (cfmRtpMetricsIntAvgLossDistance).')
cfmeRtpMaxJitter = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 13))
if mibBuilder.loadTexts: cfmeRtpMaxJitter.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpMaxJitter.setDescription('This object identifier represents the monitored element describing the maximum inter-arrival jitter of RTP data packets for a traffic flow during the last measurement interval (cfmRtpMetricsIntJitter).')
cfmeRtpMaxMinTransit = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 703, 3, 1, 14))
if mibBuilder.loadTexts: cfmeRtpMaxMinTransit.setStatus('current')
if mibBuilder.loadTexts: cfmeRtpMaxMinTransit.setDescription('This object identifier represents the monitored element describing the max-min transit time of the RTP data packets for a traffic flow during the last measurement interval (cfmRtpMetricsIntTransit).')
ciscoRtpMetricsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 2, 1))
ciscoRtpMetricsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 703, 2, 2))
ciscoRtpMetricsCompliance01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 703, 2, 1, 1)).setObjects(("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRtpMetricsCompliance01 = ciscoRtpMetricsCompliance01.setStatus('current')
if mibBuilder.loadTexts: ciscoRtpMetricsCompliance01.setDescription('This compliance statement specifies the minimal requirements an implementation must meet in order to claim full compliance with the definition of the CISCO-RTP-METRICS-MIB.')
cfmRtpMetricsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 703, 2, 2, 1)).setObjects(("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsValid"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsExpectedPkts"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsLostPkts"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsFracScale"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsFracPrecision"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsFrac"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsLIs"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsAvgLDScale"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsAvgLDPrecision"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsAvgLD"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsAvgLossDistance"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsJitterScale"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsJitterPrecision"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsJitter"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsTableChanged"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntValid"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntExpectedPkts"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntLostPkts"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntFracScale"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntFracPrecision"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntFrac"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntLIs"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntAvgLDScale"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntAvgLDPrecision"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntAvgLD"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntAvgLossDistance"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntJitterScale"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntJitterPrecision"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntJitter"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntTransitScale"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntTransitPrecision"), ("CISCO-RTP-METRICS-MIB", "cfmRtpMetricsIntTransit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfmRtpMetricsGroup = cfmRtpMetricsGroup.setStatus('current')
if mibBuilder.loadTexts: cfmRtpMetricsGroup.setDescription('This group contains objects that describe RTP metrics.')
mibBuilder.exportSymbols("CISCO-RTP-METRICS-MIB", cfmRtpMetricsIntTransitScale=cfmRtpMetricsIntTransitScale, ciscoRtpMetricsMIBConform=ciscoRtpMetricsMIBConform, ciscoRtpMetricsMIBGroups=ciscoRtpMetricsMIBGroups, cfmeRtpCumulativeLostPkts=cfmeRtpCumulativeLostPkts, ciscoRtpMetricsMIB=ciscoRtpMetricsMIB, cfmRtpMetricsIntLIs=cfmRtpMetricsIntLIs, cfmRtpMetricsLostPkts=cfmRtpMetricsLostPkts, cfmRtpMetricsIntAvgLDPrecision=cfmRtpMetricsIntAvgLDPrecision, cfmRtpMetricsIntLostPkts=cfmRtpMetricsIntLostPkts, cfmRtpMetrics=cfmRtpMetrics, cfmeRtpAvgLossDuration=cfmeRtpAvgLossDuration, cfmRtpMetricsEntry=cfmRtpMetricsEntry, cfmRtpMetricsIntEntry=cfmRtpMetricsIntEntry, cfmRtpMetricsIntTransit=cfmRtpMetricsIntTransit, cfmeRtpCumulativeAvgLossDistance=cfmeRtpCumulativeAvgLossDistance, cfmeRtpAvgLossDistance=cfmeRtpAvgLossDistance, ciscoRtpMetricsMIBCompliances=ciscoRtpMetricsMIBCompliances, cfmeRtpMaxJitter=cfmeRtpMaxJitter, cfmRtpMetricsIntFracPrecision=cfmRtpMetricsIntFracPrecision, cfmRtpMetricsIntJitterPrecision=cfmRtpMetricsIntJitterPrecision, PYSNMP_MODULE_ID=ciscoRtpMetricsMIB, cfmRtpMetricsAvgLDPrecision=cfmRtpMetricsAvgLDPrecision, cfmRtpMetricsTable=cfmRtpMetricsTable, cfmRtpMetricsAvgLD=cfmRtpMetricsAvgLD, cfmeRtpLossFraction=cfmeRtpLossFraction, ciscoRtpMetricsMIBIds=ciscoRtpMetricsMIBIds, cfmRtpMetricsJitter=cfmRtpMetricsJitter, cfmeRtpLostPkts=cfmeRtpLostPkts, cfmRtpMonitoredElements=cfmRtpMonitoredElements, ciscoRtpMetricsCompliance01=ciscoRtpMetricsCompliance01, cfmRtpMetricsIntJitterScale=cfmRtpMetricsIntJitterScale, cfmRtpMetricsGroup=cfmRtpMetricsGroup, cfmRtpMetricsIntExpectedPkts=cfmRtpMetricsIntExpectedPkts, cfmRtpMetricsIntValid=cfmRtpMetricsIntValid, cfmRtpMetricsJitterPrecision=cfmRtpMetricsJitterPrecision, cfmRtpMetricsLIs=cfmRtpMetricsLIs, cfmRtpMetricsAvgLossDistance=cfmRtpMetricsAvgLossDistance, ciscoRtpMetricsMIBNotifs=ciscoRtpMetricsMIBNotifs, cfmRtpMetricsTableChanged=cfmRtpMetricsTableChanged, cfmRtpMetricsAvgLDScale=cfmRtpMetricsAvgLDScale, cfmRtpMetricsIntAvgLD=cfmRtpMetricsIntAvgLD, cfmRtpMetricsIntAvgLDScale=cfmRtpMetricsIntAvgLDScale, cfmeRtpCumulativeJitter=cfmeRtpCumulativeJitter, ciscoRtpMetricsMIBObjects=ciscoRtpMetricsMIBObjects, cfmRtpMetricsIntAvgLossDistance=cfmRtpMetricsIntAvgLossDistance, cfmeRtpCumulativeLossIntervals=cfmeRtpCumulativeLossIntervals, cfmeRtpMaxMinTransit=cfmeRtpMaxMinTransit, cfmRtpMetricsExpectedPkts=cfmRtpMetricsExpectedPkts, cfmRtpMetricsIntTable=cfmRtpMetricsIntTable, cfmeRtpSsrcMismatch=cfmeRtpSsrcMismatch, cfmRtpMetricsValid=cfmRtpMetricsValid, cfmRtpMetricsFracPrecision=cfmRtpMetricsFracPrecision, cfmRtpMetricsJitterScale=cfmRtpMetricsJitterScale, cfmRtpMetricsIntFracScale=cfmRtpMetricsIntFracScale, cfmRtpMetricsIntFrac=cfmRtpMetricsIntFrac, cfmRtpMetricsFrac=cfmRtpMetricsFrac, cfmeRtpCumulativeAvgLossDuration=cfmeRtpCumulativeAvgLossDuration, cfmRtpMetricsIntJitter=cfmRtpMetricsIntJitter, cfmRtpMetricsFracScale=cfmRtpMetricsFracScale, cfmeRtpLossIntervals=cfmeRtpLossIntervals, cfmeRtpCumulativeLossFraction=cfmeRtpCumulativeLossFraction, cfmRtpMetricsIntTransitPrecision=cfmRtpMetricsIntTransitPrecision)
