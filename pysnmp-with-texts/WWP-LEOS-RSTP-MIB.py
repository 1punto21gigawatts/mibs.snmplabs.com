#
# PySNMP MIB module WWP-LEOS-RSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-RSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
dot1dStpPort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPort")
dot1dStpPortOperEdgePort, = mibBuilder.importSymbols("RSTP-MIB", "dot1dStpPortOperEdgePort")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, NotificationType, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Gauge32, ObjectIdentity, Integer32, Unsigned32, ModuleIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Gauge32", "ObjectIdentity", "Integer32", "Unsigned32", "ModuleIdentity", "Counter32", "TimeTicks")
RowStatus, DisplayString, MacAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention", "TruthValue")
wwpModules, wwpModulesLeos = mibBuilder.importSymbols("WWP-SMI", "wwpModules", "wwpModulesLeos")
wwpLeosRstpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13))
wwpLeosRstpMIB.setRevisions(('2011-08-02 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosRstpMIB.setRevisionsDescriptions(('The MIB module for the WWP RstpMib specific information.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosRstpMIB.setLastUpdated('201108020000Z')
if mibBuilder.loadTexts: wwpLeosRstpMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosRstpMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosRstpMIB.setDescription('Deprecated wwpLeosRstpPvstBpduReceivedNotification.')
wwpLeosRstpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1))
wwpLeosRstpDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1))
wwpLeosRstpPortExt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 2))
wwpLeosRstpLocalPortExt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 3))
wwpLeosRstpMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2))
wwpLeosRstpMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2, 0))
wwpLeosRstpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 3))
wwpLeosRstpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 3, 1))
wwpLeosRstpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 3, 2))
wwpLeosRstpMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("rstp", 2), ("domain", 3), ("mstp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpMode.setDescription('This object sets the mode to rstp, domain, or mstp mode. If the selected mode is not supported by the device, an SNMP error will be returned and the value of this object will remain unchanged.')
wwpLeosRstpDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosRstpDomainTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainTable.setDescription('Table of Rstp Domain.')
wwpLeosRstpDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-RSTP-MIB", "wwpLeosRstpDomainId"))
if mibBuilder.loadTexts: wwpLeosRstpDomainEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainEntry.setDescription('Rstp domain entry in the rstp domain table.')
wwpLeosRstpDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainId.setDescription('Domain Id used as an index in the rstp domain. Domain id starts at 0.')
wwpLeosRstpDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosRstpDomainName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainName.setDescription('The name of the domain.')
wwpLeosRstpDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosRstpDomainStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainStatus.setDescription("To create a row in this table, the snmp manager must set this object to 'createAndGo'. To delete the entry set it to delete.")
wwpLeosRstpDomainMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosRstpDomainMemTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainMemTable.setDescription('Table of Rstp Domain.')
wwpLeosRstpDomainMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-RSTP-MIB", "wwpLeosRstpDomainId"), (0, "WWP-LEOS-RSTP-MIB", "wwpLeosRstpDomainPortId"))
if mibBuilder.loadTexts: wwpLeosRstpDomainMemEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainMemEntry.setDescription('Rstp domain member entry.')
wwpLeosRstpDomainPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainPortId.setDescription("Port ID for the instance. Port ID's start at 1, and may not be consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpLeosRstpDomainMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosRstpDomainMemStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainMemStatus.setDescription("To add a port to the domain create a row in this table, by setting this object to 'createAndGo'. To remove the port from the domain set this object to delete.")
wwpLeosRstpBridgeDomainAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4))
wwpLeosRstpDomainAttrsForceVer = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("stp", 0), ("notDefined", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsForceVer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsForceVer.setDescription('This attribute specifies the domain version to rstp or stp.')
wwpLeosRstpDomainAttrsForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsForwardDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsForwardDelay.setDescription('This attribute specifies the forward delay for rstp domain.')
wwpLeosRstpDomainAttrsHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsHelloTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsHelloTime.setDescription('This attribute specifies the hello time for the rstp domain.')
wwpLeosRstpDomainAttrsLoopBackBlock = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsLoopBackBlock.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsLoopBackBlock.setDescription('This object specifies if loopback port blocking feature is enabled/disabled.')
wwpLeosRstpDomainAttrsMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsMaxAge.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsMaxAge.setDescription('This object specifies the max age time for the rstp domain.')
wwpLeosRstpDomainAttrsPathCostDef = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsPathCostDef.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsPathCostDef.setDescription('This object specifies the path cost. if it is 1 then it is 8021d else it is 8021t.')
wwpLeosRstpDomainAttrsPriority = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsPriority.setDescription('Setting this object will set the rstp domain priority.')
wwpLeosRstpDomainAttrsTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrsTxHoldCount.setDescription('This object specifies the tx hold count for a domain.')
wwpLeosRstpDomainAttrTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrTable.setDescription('Table of each Rstp Domain.')
wwpLeosRstpDomainAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-RSTP-MIB", "wwpLeosRstpDomainId"))
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrEntry.setDescription('Rstp domain attributes entry.')
wwpLeosRstpDomainAttrDesignatedBridgePri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedBridgePri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedBridgePri.setDescription('This attribute specifies the designated bridge priority for specified domain. This attribute represents the first two octets of the (8 octet long) designated bridge ID. The writable portion of these two octets is the first 3 bits starting from least significant bit.')
wwpLeosRstpDomainAttrDesignatedBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedBridgeMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedBridgeMac.setDescription('This attribute specifies the designated bridge mac address for specified domain.')
wwpLeosRstpDomainAttrDesignatedRootPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedRootPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedRootPri.setDescription('This attribute specifies the designated root priority for specified domain. This attribute represents the first two octets of the (8 octet long) designated root bridge ID. The writable portion of these two octets is the first 3 bits starting from least significant bit.')
wwpLeosRstpDomainAttrDesignatedRootMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedRootMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrDesignatedRootMac.setDescription('This attribute specifies the designated root mac address for specified domain.')
wwpLeosRstpDomainAttrRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrRootCost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrRootCost.setDescription('This attribute specifies the root cost for specified domain.')
wwpLeosRstpDomainAttrRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrRootPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrRootPort.setDescription('This attribute specifies the designated port for specified domain.')
wwpLeosRstpDomainAttrMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrMaxAge.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrMaxAge.setDescription('This attribute specifies the max age for specified domain.')
wwpLeosRstpDomainAttrHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrHelloTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrHelloTime.setDescription('This attribute specifies the hello time for specified domain.')
wwpLeosRstpDomainAttrHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrHoldTime.setDescription('This attribute specifies the hold time for specified domain.')
wwpLeosRstpDomainAttrForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrForwardDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrForwardDelay.setDescription('This attribute specifies the forward delay for specified domain.')
wwpLeosRstpDomainAttrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpDomainAttrPriority.setDescription('This attribute specifies the domain priority for given domain.')
wwpLeosRstpMaxAgeEventInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpMaxAgeEventInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpMaxAgeEventInterval.setDescription("This object defines how often the events relating to Max Age BPDU's being Sent or Received will be generated. It is the number of seconds that must pass between events.")
wwpLeosRstpPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosRstpPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortInfoTable.setDescription('Table that contains additional information about each port. This table is extension of dot1dStpPortTable.')
wwpLeosRstpPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-RSTP-MIB", "wwpLeosRstpPortId"))
if mibBuilder.loadTexts: wwpLeosRstpPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortInfoEntry.setDescription('Rstp port information entry.')
wwpLeosRstpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortId.setDescription('This is the port num used as index in the table. Value of this port id is same as dot1dStpPort.')
wwpLeosRstpPortDesiginatedId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpPortDesiginatedId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortDesiginatedId.setDescription('This attribute specifies the designated id for the given port.')
wwpLeosRstpPortDesiginatedPid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosRstpPortDesiginatedPid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortDesiginatedPid.setDescription('This attribute specifies the designated id for the given port.')
wwpLeosRstpLocalPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosRstpLocalPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpLocalPortInfoTable.setDescription('Table that contains additional local information about each port. This table is also extension of dot1dStpPortTable.')
wwpLeosRstpLocalPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-RSTP-MIB", "wwpLeosRstpPortId"))
if mibBuilder.loadTexts: wwpLeosRstpLocalPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpLocalPortInfoEntry.setDescription('Rstp local port information entry.')
wwpLeosRstpPortDynPathCostState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosRstpPortDynPathCostState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortDynPathCostState.setDescription('This attribute enable | disable dynamic path cost for the given port. Before setting dot1dStpPortPathCost user must set wwpLeosRstpPortDynPathCostState = disabled.')
wwpLeosRstpPortBackupNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2, 0, 1)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: wwpLeosRstpPortBackupNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortBackupNotification.setDescription('A wwpLeosRstpPortBackupNotification is sent whenever device detects self loop i.e. same cable connected to two ports on the same device.')
wwpLeosRstpPvstBpduReceivedNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2, 0, 2)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: wwpLeosRstpPvstBpduReceivedNotification.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosRstpPvstBpduReceivedNotification.setDescription('A wwpLeosRstpPvstBpduReceivedNotification is sent whenever PVST BPDU is received on the port. This trap is sent out every minute.')
wwpLeosRstpSelfLoopNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2, 0, 3)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: wwpLeosRstpSelfLoopNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpSelfLoopNotification.setDescription('A wwpLeosRstpSelfLoopNotification is sent whenever device detects same cable connected to a port in a loop back. Also if loop-back blocking is enabled on the device then rstp will block this port (self disable).')
wwpLeosRstpPortOperEdgeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2, 0, 4)).setObjects(("BRIDGE-MIB", "dot1dStpPort"), ("RSTP-MIB", "dot1dStpPortOperEdgePort"))
if mibBuilder.loadTexts: wwpLeosRstpPortOperEdgeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortOperEdgeNotification.setDescription('A wwpLeosRstpPortOperEdgeNotification trap is sent whenever device detects a port Rstp OperEdge change.')
wwpLeosRstpPortFlapNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2, 0, 5)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: wwpLeosRstpPortFlapNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpPortFlapNotification.setDescription('A wwpLeosRstpPortFlapNotification trap is sent whenever device detects a port flapping. Trap is generated under following criteria. If device detects port flapped more than once within 1 minute timer period and it has not sent trap within last 5 minutes then it will generate this trap.')
wwpLeosRstpBridgeRootPortLostNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 13, 2, 0, 6)).setObjects(("BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: wwpLeosRstpBridgeRootPortLostNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosRstpBridgeRootPortLostNotification.setDescription('A wwpLeosRstpBridgeRootPortLostNotification trap is sent whenever device detects that bridge root port is lost. This trap will indicate either the link failure or link partner RSTP disabled.')
mibBuilder.exportSymbols("WWP-LEOS-RSTP-MIB", wwpLeosRstpDomainAttrsMaxAge=wwpLeosRstpDomainAttrsMaxAge, wwpLeosRstpDomain=wwpLeosRstpDomain, wwpLeosRstpDomainMemStatus=wwpLeosRstpDomainMemStatus, wwpLeosRstpLocalPortExt=wwpLeosRstpLocalPortExt, wwpLeosRstpDomainAttrHelloTime=wwpLeosRstpDomainAttrHelloTime, wwpLeosRstpDomainAttrDesignatedRootPri=wwpLeosRstpDomainAttrDesignatedRootPri, wwpLeosRstpBridgeRootPortLostNotification=wwpLeosRstpBridgeRootPortLostNotification, wwpLeosRstpMIBCompliances=wwpLeosRstpMIBCompliances, wwpLeosRstpDomainAttrsHelloTime=wwpLeosRstpDomainAttrsHelloTime, wwpLeosRstpMIBConformance=wwpLeosRstpMIBConformance, wwpLeosRstpDomainAttrsPathCostDef=wwpLeosRstpDomainAttrsPathCostDef, wwpLeosRstpPortDesiginatedId=wwpLeosRstpPortDesiginatedId, wwpLeosRstpPortBackupNotification=wwpLeosRstpPortBackupNotification, wwpLeosRstpPortDynPathCostState=wwpLeosRstpPortDynPathCostState, wwpLeosRstpDomainAttrPriority=wwpLeosRstpDomainAttrPriority, wwpLeosRstpPortId=wwpLeosRstpPortId, wwpLeosRstpPortExt=wwpLeosRstpPortExt, wwpLeosRstpDomainMemTable=wwpLeosRstpDomainMemTable, wwpLeosRstpMIBObjects=wwpLeosRstpMIBObjects, wwpLeosRstpDomainAttrsForceVer=wwpLeosRstpDomainAttrsForceVer, wwpLeosRstpDomainAttrRootPort=wwpLeosRstpDomainAttrRootPort, wwpLeosRstpDomainTable=wwpLeosRstpDomainTable, wwpLeosRstpDomainAttrForwardDelay=wwpLeosRstpDomainAttrForwardDelay, wwpLeosRstpLocalPortInfoEntry=wwpLeosRstpLocalPortInfoEntry, wwpLeosRstpPortFlapNotification=wwpLeosRstpPortFlapNotification, PYSNMP_MODULE_ID=wwpLeosRstpMIB, wwpLeosRstpBridgeDomainAttrs=wwpLeosRstpBridgeDomainAttrs, wwpLeosRstpDomainAttrsForwardDelay=wwpLeosRstpDomainAttrsForwardDelay, wwpLeosRstpDomainStatus=wwpLeosRstpDomainStatus, wwpLeosRstpSelfLoopNotification=wwpLeosRstpSelfLoopNotification, wwpLeosRstpPortOperEdgeNotification=wwpLeosRstpPortOperEdgeNotification, wwpLeosRstpDomainAttrsLoopBackBlock=wwpLeosRstpDomainAttrsLoopBackBlock, wwpLeosRstpDomainMemEntry=wwpLeosRstpDomainMemEntry, wwpLeosRstpDomainAttrTable=wwpLeosRstpDomainAttrTable, wwpLeosRstpPortInfoEntry=wwpLeosRstpPortInfoEntry, wwpLeosRstpPortInfoTable=wwpLeosRstpPortInfoTable, wwpLeosRstpMIBNotifications=wwpLeosRstpMIBNotifications, wwpLeosRstpDomainEntry=wwpLeosRstpDomainEntry, wwpLeosRstpDomainAttrHoldTime=wwpLeosRstpDomainAttrHoldTime, wwpLeosRstpLocalPortInfoTable=wwpLeosRstpLocalPortInfoTable, wwpLeosRstpDomainAttrEntry=wwpLeosRstpDomainAttrEntry, wwpLeosRstpDomainAttrMaxAge=wwpLeosRstpDomainAttrMaxAge, wwpLeosRstpMIBGroups=wwpLeosRstpMIBGroups, wwpLeosRstpDomainAttrDesignatedBridgePri=wwpLeosRstpDomainAttrDesignatedBridgePri, wwpLeosRstpDomainAttrDesignatedBridgeMac=wwpLeosRstpDomainAttrDesignatedBridgeMac, wwpLeosRstpPvstBpduReceivedNotification=wwpLeosRstpPvstBpduReceivedNotification, wwpLeosRstpDomainAttrsTxHoldCount=wwpLeosRstpDomainAttrsTxHoldCount, wwpLeosRstpDomainId=wwpLeosRstpDomainId, wwpLeosRstpDomainAttrDesignatedRootMac=wwpLeosRstpDomainAttrDesignatedRootMac, wwpLeosRstpMaxAgeEventInterval=wwpLeosRstpMaxAgeEventInterval, wwpLeosRstpMode=wwpLeosRstpMode, wwpLeosRstpPortDesiginatedPid=wwpLeosRstpPortDesiginatedPid, wwpLeosRstpDomainAttrRootCost=wwpLeosRstpDomainAttrRootCost, wwpLeosRstpMIB=wwpLeosRstpMIB, wwpLeosRstpDomainPortId=wwpLeosRstpDomainPortId, wwpLeosRstpDomainAttrsPriority=wwpLeosRstpDomainAttrsPriority, wwpLeosRstpDomainName=wwpLeosRstpDomainName, wwpLeosRstpMIBNotificationPrefix=wwpLeosRstpMIBNotificationPrefix)
