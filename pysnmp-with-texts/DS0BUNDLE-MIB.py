#
# PySNMP MIB module DS0BUNDLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DS0BUNDLE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
transmission, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter32, Gauge32, Bits, ObjectIdentity, Integer32, NotificationType, MibIdentifier, ModuleIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter32", "Gauge32", "Bits", "ObjectIdentity", "Integer32", "NotificationType", "MibIdentifier", "ModuleIdentity", "iso", "Unsigned32")
TextualConvention, TestAndIncr, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TestAndIncr", "DisplayString", "RowStatus")
ds0Bundle = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 82))
ds0Bundle.setRevisions(('1998-05-24 20:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ds0Bundle.setRevisionsDescriptions(('Initial version of the DS0BUNDLE-MIB.',))
if mibBuilder.loadTexts: ds0Bundle.setLastUpdated('9807161630Z')
if mibBuilder.loadTexts: ds0Bundle.setOrganization('IETF Trunk MIB Working Group')
if mibBuilder.loadTexts: ds0Bundle.setContactInfo(' David Fowler Postal: Newbridge Networks Corporation 600 March Road Kanata, Ontario, Canada K2K 2E6 Tel: +1 613 591 3600 Fax: +1 613 599 3619 E-mail: davef@newbridge.com')
if mibBuilder.loadTexts: ds0Bundle.setDescription('The MIB module to describe DS0 Bundle interfaces objects.')
dsx0BundleNextIndex = MibScalar((1, 3, 6, 1, 2, 1, 10, 82, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx0BundleNextIndex.setStatus('current')
if mibBuilder.loadTexts: dsx0BundleNextIndex.setDescription('This object is used to assist the manager in selecting a value for dsx0BundleIndex. Because this object is of syntax TestAndIncr (see the SNMPv2-TC document, RFC 1903) it can also be used to avoid race conditions with multiple managers trying to create rows in the table. If the result of the SET for dsx0BundleNextIndex is not success, this means the value has been changed from index (i.e. another manager used the value), so a new value is required. The algorithm is: done = false while done == false index = GET (dsx0BundleNextIndex.0) SET (dsx0BundleNextIndex.0=index) if (set failed) done = false else SET(dsx0BundleRowStatus.index=createAndGo) if (set failed) done = false else done = true other error handling')
dsx0BundleTable = MibTable((1, 3, 6, 1, 2, 1, 10, 82, 3), )
if mibBuilder.loadTexts: dsx0BundleTable.setStatus('current')
if mibBuilder.loadTexts: dsx0BundleTable.setDescription("There is an row in this table for each ds0Bundle in the system. This table can be used to (indirectly) create rows in the ifTable with ifType = 'ds0Bundle(82)'.")
dsx0BundleEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 82, 3, 1), ).setIndexNames((0, "DS0BUNDLE-MIB", "dsx0BundleIndex"))
if mibBuilder.loadTexts: dsx0BundleEntry.setStatus('current')
if mibBuilder.loadTexts: dsx0BundleEntry.setDescription('There is a row in entry in this table for each ds0Bundle interface.')
dsx0BundleIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 82, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: dsx0BundleIndex.setStatus('current')
if mibBuilder.loadTexts: dsx0BundleIndex.setDescription('A unique identifier for a ds0Bundle. This is not the same value as ifIndex. This table is not indexed by ifIndex because the manager has to choose the index in a createable row and the agent must be allowed to select ifIndex values.')
dsx0BundleIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 82, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx0BundleIfIndex.setStatus('current')
if mibBuilder.loadTexts: dsx0BundleIfIndex.setDescription('The ifIndex value the agent selected for the (new) ds0Bundle interface.')
dsx0BundleCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 82, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsx0BundleCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: dsx0BundleCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
dsx0BundleRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 82, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsx0BundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsx0BundleRowStatus.setDescription('This object is used to create and delete rows in this table.')
dsx0BondingTable = MibTable((1, 3, 6, 1, 2, 1, 10, 82, 1), )
if mibBuilder.loadTexts: dsx0BondingTable.setStatus('current')
if mibBuilder.loadTexts: dsx0BondingTable.setDescription('The DS0 Bonding table.')
dsx0BondingEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 82, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dsx0BondingEntry.setStatus('current')
if mibBuilder.loadTexts: dsx0BondingEntry.setDescription('An entry in the DS0 Bonding table. There is a row in this table for each DS0Bundle interface.')
dsx0BondMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 82, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("mode0", 3), ("mode1", 4), ("mode2", 5), ("mode3", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsx0BondMode.setStatus('current')
if mibBuilder.loadTexts: dsx0BondMode.setDescription('This object indicates which BONDing mode is used, if any, for a ds0Bundle. Mode0 provides parameter and number exchange with no synchronization. Mode 1 provides parameter and number exchange. Mode 1 also provides synchronization during initialization but does not include inband monitoring. Mode 2 provides all of the above plus inband monitoring. Mode 2 also steals 1/64th of the bandwidth of each channel (thus not supporting n x 56/64 kbit/s data channels for most values of n). Mode 3 provides all of the above, but also provides n x 56/64 kbit/s data channels. Most common implementations of Mode 3 add an extra channel to support the inband monitoring overhead. ModeNone should be used when the interface is not performing bandwidth-on-demand.')
dsx0BondStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 82, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("callSetup", 2), ("dataTransfer", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx0BondStatus.setStatus('current')
if mibBuilder.loadTexts: dsx0BondStatus.setDescription('This object indicates the current status of the bonding call using this ds0Bundle. idle(1) should be used when the bonding mode is set to none(1).')
dsx0BondRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 82, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsx0BondRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsx0BondRowStatus.setDescription('This object is used to create new rows in this table, modify existing rows, and to delete existing rows.')
ds0BundleConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 82, 4))
ds0BundleGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 82, 4, 1))
ds0BundleCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 82, 4, 2))
ds0BundleCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 82, 4, 2, 1)).setObjects(("DS0BUNDLE-MIB", "ds0BundleConfigGroup"), ("DS0BUNDLE-MIB", "ds0BondingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds0BundleCompliance = ds0BundleCompliance.setStatus('current')
if mibBuilder.loadTexts: ds0BundleCompliance.setDescription('The compliance statement for DS0Bundle interfaces.')
ds0BondingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 82, 4, 1, 1)).setObjects(("DS0BUNDLE-MIB", "dsx0BondMode"), ("DS0BUNDLE-MIB", "dsx0BondStatus"), ("DS0BUNDLE-MIB", "dsx0BondRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds0BondingGroup = ds0BondingGroup.setStatus('current')
if mibBuilder.loadTexts: ds0BondingGroup.setDescription('A collection of objects providing configuration information applicable to all DS0 interfaces.')
ds0BundleConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 82, 4, 1, 2)).setObjects(("DS0BUNDLE-MIB", "dsx0BundleNextIndex"), ("DS0BUNDLE-MIB", "dsx0BundleIfIndex"), ("DS0BUNDLE-MIB", "dsx0BundleCircuitIdentifier"), ("DS0BUNDLE-MIB", "dsx0BundleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ds0BundleConfigGroup = ds0BundleConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ds0BundleConfigGroup.setDescription('A collection of objects providing the ability to create a new ds0Bundle in the ifTable as well as configuration information about the ds0Bundle.')
mibBuilder.exportSymbols("DS0BUNDLE-MIB", dsx0BondMode=dsx0BondMode, dsx0BondRowStatus=dsx0BondRowStatus, dsx0BundleIndex=dsx0BundleIndex, ds0BundleCompliance=ds0BundleCompliance, dsx0BundleEntry=dsx0BundleEntry, ds0Bundle=ds0Bundle, dsx0BundleTable=dsx0BundleTable, ds0BondingGroup=ds0BondingGroup, ds0BundleGroups=ds0BundleGroups, ds0BundleConformance=ds0BundleConformance, dsx0BondStatus=dsx0BondStatus, dsx0BundleNextIndex=dsx0BundleNextIndex, dsx0BundleCircuitIdentifier=dsx0BundleCircuitIdentifier, dsx0BundleRowStatus=dsx0BundleRowStatus, ds0BundleConfigGroup=ds0BundleConfigGroup, ds0BundleCompliances=ds0BundleCompliances, dsx0BundleIfIndex=dsx0BundleIfIndex, dsx0BondingTable=dsx0BondingTable, dsx0BondingEntry=dsx0BondingEntry, PYSNMP_MODULE_ID=ds0Bundle)
