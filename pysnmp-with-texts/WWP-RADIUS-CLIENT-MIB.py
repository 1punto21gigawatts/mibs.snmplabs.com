#
# PySNMP MIB module WWP-RADIUS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-RADIUS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, Unsigned32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Gauge32, iso, Integer32, ModuleIdentity, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Unsigned32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Gauge32", "iso", "Integer32", "ModuleIdentity", "Bits", "TimeTicks")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpRadiusClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 11))
wwpRadiusClientMIB.setRevisions(('2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpRadiusClientMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpRadiusClientMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpRadiusClientMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpRadiusClientMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpRadiusClientMIB.setDescription('The MIB module for the WWP Radius Server specific configuration and monitoring information.')
wwpRadiusClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1))
wwpRadiusClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1))
wwpRadiusClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 11, 2))
wwpRadiusClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 11, 2, 0))
wwpRadiusClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 11, 3))
wwpRadiusClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 11, 3, 1))
wwpRadiusClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 11, 3, 2))
wwpRadiusClientTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpRadiusClientTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientTimeout.setDescription('This is the time in seconds between retransmissions to the RADIUS server.')
wwpRadiusClientRetries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpRadiusClientRetries.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientRetries.setDescription('Indicates the number of times the RADIUS server should be tried before giving up on the server.')
wwpRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3), )
if mibBuilder.loadTexts: wwpRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusServerTable.setDescription('Lists the possible RADIUS servers.')
wwpRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1), ).setIndexNames((0, "WWP-RADIUS-CLIENT-MIB", "wwpRadiusServerId"))
if mibBuilder.loadTexts: wwpRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusServerEntry.setDescription('Radius server entry.')
wwpRadiusServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusServerId.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusServerId.setDescription("Index to the Radius Server Entry. The radius Servers are polled according to their ServerIds. If the ServerId 1 doesn't respond, then it tries for the next and hence on.")
wwpRadiusServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpRadiusServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusServerIpAddr.setDescription('IP Address of the RADIUS server.')
wwpRadiusServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpRadiusServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusServerAuthPort.setDescription('The destination UDP port number to which RADIUS messages should be sent. The RADIUS server will not be used for authentication if this port number is 0.')
wwpRadiusClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientRoundTripTime.setDescription('The time interval (in hundredths of a second) between the most recent Access-Reply/Access-Challenge and the Access-Request that matched it from this RADIUS authentication server.')
wwpRadiusClientAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientAccessRequests.setDescription('The number of RADIUS Access-Request packets sent to this server. This does not include retransmissions.')
wwpRadiusClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientAccessRetransmissions.setDescription('The number of RADIUS Access-Request packets retransmitted to this RADIUS authentication server.')
wwpRadiusClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientAccessAccepts.setDescription('The number of RADIUS Access-Accept packets (valid or invalid) received from this server.')
wwpRadiusClientAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientAccessRejects.setDescription('The number of RADIUS Access-Reject packets (valid or invalid) received from this server.')
wwpRadiusClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets (valid or invalid) received from this server.')
wwpRadiusClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientMalformedAccessResponses.setDescription('The number of malformed RADIUS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or Signature attributes or unknown types are not included as malformed access responses.')
wwpRadiusClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientBadAuthenticators.setDescription('The number of RADIUS Access-Response packets containing invalid authenticators or Signature attributes received from this server.')
wwpRadiusClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientPendingRequests.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientPendingRequests.setDescription('The number of RADIUS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Acess-Accept, Access-Reject or Access-Challenge, a timeout or retransmission.')
wwpRadiusClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
wwpRadiusClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the authentication port.')
wwpRadiusClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpRadiusClientPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientPacketsDropped.setDescription('The number of RADIUS packets of which were received from this server on the authentication port and dropped for some other reason.')
wwpRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpRadiusServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusServerStatus.setDescription("To create a row in this table, a manager must set this object to either createAndGo(4). A row in the WwpRadiusServerEntry can't be set to active until wwpRadiusServerIpAddr has been set to valid value. To disable a Radius server , the operator can set this object to 'notInSerVice' state.")
wwpRadiusClientAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 11, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpRadiusClientAuthKey.setStatus('current')
if mibBuilder.loadTexts: wwpRadiusClientAuthKey.setDescription('The Auth Key to be used for Radius Servers. Retrieving the value of this object via SNMP will return an empty string for security reasons.')
mibBuilder.exportSymbols("WWP-RADIUS-CLIENT-MIB", wwpRadiusServerAuthPort=wwpRadiusServerAuthPort, wwpRadiusClientPendingRequests=wwpRadiusClientPendingRequests, wwpRadiusClientTimeouts=wwpRadiusClientTimeouts, wwpRadiusClientMIBConformance=wwpRadiusClientMIBConformance, PYSNMP_MODULE_ID=wwpRadiusClientMIB, wwpRadiusClientBadAuthenticators=wwpRadiusClientBadAuthenticators, wwpRadiusClientAccessChallenges=wwpRadiusClientAccessChallenges, wwpRadiusClientMalformedAccessResponses=wwpRadiusClientMalformedAccessResponses, wwpRadiusClientMIB=wwpRadiusClientMIB, wwpRadiusClientMIBGroups=wwpRadiusClientMIBGroups, wwpRadiusServerIpAddr=wwpRadiusServerIpAddr, wwpRadiusClientMIBNotifications=wwpRadiusClientMIBNotifications, wwpRadiusServerStatus=wwpRadiusServerStatus, wwpRadiusClientAccessRetransmissions=wwpRadiusClientAccessRetransmissions, wwpRadiusClientAccessAccepts=wwpRadiusClientAccessAccepts, wwpRadiusClientUnknownTypes=wwpRadiusClientUnknownTypes, wwpRadiusClientAuthKey=wwpRadiusClientAuthKey, wwpRadiusServerId=wwpRadiusServerId, wwpRadiusServerEntry=wwpRadiusServerEntry, wwpRadiusClientRoundTripTime=wwpRadiusClientRoundTripTime, wwpRadiusClientRetries=wwpRadiusClientRetries, wwpRadiusServerTable=wwpRadiusServerTable, wwpRadiusClientTimeout=wwpRadiusClientTimeout, wwpRadiusClientAccessRequests=wwpRadiusClientAccessRequests, wwpRadiusClientMIBNotificationPrefix=wwpRadiusClientMIBNotificationPrefix, wwpRadiusClientAccessRejects=wwpRadiusClientAccessRejects, wwpRadiusClientMIBCompliances=wwpRadiusClientMIBCompliances, wwpRadiusClient=wwpRadiusClient, wwpRadiusClientMIBObjects=wwpRadiusClientMIBObjects, wwpRadiusClientPacketsDropped=wwpRadiusClientPacketsDropped)
