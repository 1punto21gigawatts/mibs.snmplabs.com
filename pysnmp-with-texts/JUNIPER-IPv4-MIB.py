#
# PySNMP MIB module JUNIPER-IPv4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IPv4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, TimeTicks, Integer32, Counter64, Bits, ModuleIdentity, Unsigned32, ObjectIdentity, IpAddress, Gauge32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "TimeTicks", "Integer32", "Counter64", "Bits", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "IpAddress", "Gauge32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxIpv4 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 12))
jnxIpv4.setRevisions(('2001-08-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxIpv4.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: jnxIpv4.setLastUpdated('200307182153Z')
if mibBuilder.loadTexts: jnxIpv4.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxIpv4.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxIpv4.setDescription('The MIB modules extends the ifTable as defined in IF-MIB.')
jnxIpv4Config = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1))
jnxIpv4AddrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1), )
if mibBuilder.loadTexts: jnxIpv4AddrTable.setStatus('current')
if mibBuilder.loadTexts: jnxIpv4AddrTable.setDescription("The table of addressing information relevant to this entity's IP addresses.")
jnxIpv4AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1), ).setIndexNames((0, "JUNIPER-IPv4-MIB", "jnxIpv4AdEntIfIndex"), (0, "JUNIPER-IPv4-MIB", "jnxIpv4AdEntAddr"))
if mibBuilder.loadTexts: jnxIpv4AddrEntry.setStatus('current')
if mibBuilder.loadTexts: jnxIpv4AddrEntry.setDescription("The addressing information for one of this entity's IP addresses.")
jnxIpv4AdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: jnxIpv4AdEntIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxIpv4AdEntIfIndex.setDescription("The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of RFC 1573's ifIndex.")
jnxIpv4AdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: jnxIpv4AdEntAddr.setStatus('current')
if mibBuilder.loadTexts: jnxIpv4AdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
jnxIpv4AdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv4AdEntNetMask.setStatus('current')
if mibBuilder.loadTexts: jnxIpv4AdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
jnxIpv4AdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv4AdEntBcastAddr.setStatus('current')
if mibBuilder.loadTexts: jnxIpv4AdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
jnxIpv4AdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIpv4AdEntReasmMaxSize.setStatus('current')
if mibBuilder.loadTexts: jnxIpv4AdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
mibBuilder.exportSymbols("JUNIPER-IPv4-MIB", PYSNMP_MODULE_ID=jnxIpv4, jnxIpv4AdEntAddr=jnxIpv4AdEntAddr, jnxIpv4=jnxIpv4, jnxIpv4AdEntIfIndex=jnxIpv4AdEntIfIndex, jnxIpv4AdEntNetMask=jnxIpv4AdEntNetMask, jnxIpv4AdEntReasmMaxSize=jnxIpv4AdEntReasmMaxSize, jnxIpv4Config=jnxIpv4Config, jnxIpv4AddrTable=jnxIpv4AddrTable, jnxIpv4AdEntBcastAddr=jnxIpv4AdEntBcastAddr, jnxIpv4AddrEntry=jnxIpv4AddrEntry)
