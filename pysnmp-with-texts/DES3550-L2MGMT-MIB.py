#
# PySNMP MIB module DES3550-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES3550-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, Gauge32, ModuleIdentity, IpAddress, NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Counter32, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Gauge32", "ModuleIdentity", "IpAddress", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Counter32", "iso", "ObjectIdentity")
TextualConvention, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "RowStatus")
des3550, = mibBuilder.importSymbols("SW3500PRIMGMT-MIB", "des3550")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0904020000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swL2MgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swL2MgmtMIB.setDescription('The Structure of Layer 2 Network Management Information for the proprietary enterprise.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class VlanIndex(Unsigned32):
    pass

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1))
swL2VlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 3))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4))
swL2LimitedMulticastMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6))
swL2IpMacBindingMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 9))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10))
swL2DhcpRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 13))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15))
swL2DhcpLocalRelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24))
swL2PPPoEMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 25))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1))
swDevInfoSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setStatus('current')
if mibBuilder.loadTexts: swDevInfoSystemUpTime.setDescription('The value of sysUpTime at the time the switch entered its current operational state. If the current state was entered prior to the last re-initialization, then this object contains a zero value. This value is in the units of seconds.')
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setDescription('The number of ports within this switch. This value is the sum of the ports within this switch.')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setDescription('The number of ports in this switch connected to the segment or the end stations.')
swDevInfoConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoConsoleInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoConsoleInUse.setDescription('The usage indication of the console system.')
swDevInfoModuleType = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoModuleType.setStatus('current')
if mibBuilder.loadTexts: swDevInfoModuleType.setDescription('This object indicates the module type of this port.')
swDevInfoPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 8), )
if mibBuilder.loadTexts: swDevInfoPowerTable.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerTable.setDescription('A list of the temperature.')
swDevInfoPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 8, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), (0, "DES3550-L2MGMT-MIB", "swDevInfoPowerID"))
if mibBuilder.loadTexts: swDevInfoPowerEntry.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerEntry.setDescription('An entry for Power information.')
swDevInfoPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerUnitIndex.setDescription('Indicates the ID of the unit in the System')
swDevInfoPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerID.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerID.setDescription('Indicates ID of the power ')
swDevInfoPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("lowVoltage", 1), ("overCurrent", 2), ("working", 3), ("fail", 4), ("connect", 5), ("disconnect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swDevInfoPowerStatus.setDescription('Indicates status of the power ')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlStpState.setDescription('This object can enable or disable the spanning tree algorithm during the runtime of the system.')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setDescription('This object indicates if the layer 2 Internet Group Management Protocol (IGMP) capture function has been enabled or disabled.')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setDescription('This object can be enable or disable RMON.')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setDescription('If the object is set to active, all the statistic counters will be cleared. If set to normal, do nothing.')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 9), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setDescription('Indicates the VLAN ID which the Dot1dTpFdbTable belongs to ; The default value is the DEFAULT_VLAN_ID of the system.')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyState.setDescription('This object can enable or disable MAC Notification.')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setDescription('This object indicates the history size of variation MAC in the address table. The default value is 1 .')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyInterval.setDescription('This object indicates the time interval in seconds for triggering the MAC notify message. ')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setDescription('This object can enable or disable asymmetric VLANs during the runtime of the system.')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 14), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setDescription('This object controls which Vlan includes system ip and that the Vlan should have been created.')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 15))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setDescription('This object controls the Telnet status.')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setDescription("This object can designate a TCP port. When Telnet is disabled this object isn't accessible.")
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setDescription('Specifies the state of the LLDP function. When this function is enabled, the switch can start to transmit LLDP packets and receive and process the LLDP packets. The specific function of each port will depend on the per port LLDP setting. For the advertisement of LLDP packets, the switch announces the information to its neighbor through ports. For the receiving of LLDP packets, the switch will learn the information from the LLDP packets advertised from the neighbor in the neighbor table. ')
swL2DevCtrlLLDPAdviseSystemIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("advise", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPAdviseSystemIP.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPAdviseSystemIP.setDescription('Used to advise system ip to all port')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 17))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebState.setDescription('This object controls Web status.')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setDescription("This object can designate a TCP port. When Web is disabled this object isn't accessible.")
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setDescription('When lldp is disabled and lldp forward_message is enabled, the received LLDP Data Unit packets will be forwarded. ')
swL2DevCtrPasswordRecoveryState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrPasswordRecoveryState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrPasswordRecoveryState.setDescription('This object controls Password Recovery status.')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of Spanning Tree, this object decides whether to send a new root trap.')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setDescription("This object determines whether to send a trap or not when the switch topology has changed. If the object is enabled(3), the topology change trap is sent by the device when any of its configured ports transition from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port transition, the device doesn't send the trap if this object value is set to disabled or other.")
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription("This object determines whether to send a trap or not when the link has changed. If the object is enabled (3), the Link Change trap is sent by the device when any of its port links change. The device doesn't send the trap if this object value is set to disabled or other.")
swL2VlanAdvertisementTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 3, 1), )
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertisementTable.setDescription('A table containing the advertisement state for each VLAN configured into the device by (local or network) management.')
swL2VlanAdvertisementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 3, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertisementEntry.setDescription('Advertisement state for each VLAN configured in the device.')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
swL2VlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanName.setStatus('current')
if mibBuilder.loadTexts: swL2VlanName.setDescription('An administratively assigned string, which may be used to identify the VLAN.')
swL2VlanAdvertiseState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setStatus('current')
if mibBuilder.loadTexts: swL2VlanAdvertiseState.setDescription('This object indicates the advertised status of this VLAN entry.')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2PortInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module).")
swL2PortInfoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setDescription('Indicates ID of the unit in the device')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("portType-1000Base-SX-GBIC", 7), ("portType-1000Base-LX-GBIC", 8), ("portType-1000Base-TX-GBIC", 9), ("portType-1000Base-1394", 10), ("none", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoType.setDescription('This object indicates the connector type of this port.')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInfoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1394", 2), ("moduleType-1000T", 3), ("moduleType-MGBIC", 4), ("moduleType-1P-SC-SX", 5), ("moduleType-2P-SC-SX", 6), ("moduleType-1P-SC-LX", 7), ("moduleType-2P-SC-LX", 8), ("moduleType-1P-TX", 9), ("moduleType-2P-TX", 10), ("moduleType-1P-MTRJ-SX", 11), ("moduleType-2P-MTRJ-SX", 12), ("moduleType-1P-MTRJ-LX", 13), ("moduleType-2P-MTRJ-LX", 14), ("moduleType-1P-GBIC", 15), ("moduleType-2P-GBIC", 16), ("moduleType-1P-GBIC-1P-TX", 17), ("moduleType-1P-GBIC-1P-STACK", 18), ("moduleType-2P-STACK", 19), ("moduleType-2P-100FX", 20), ("moduleType-1P-100FX", 21), ("moduleType-2P-100FX-NEW", 22), ("moduleType-1P-100FL", 23), ("moduleType-2P-100FL", 24), ("moduleType-2P-100TX", 25), ("moduleType-BaseModule-24PORT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleType.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoModuleType.setDescription('This object indicates the module type of this port.')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("lbd", 2), ("ddm", 3), ("unknow", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setDescription('This object indicates the blocking type of this port.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2PortCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port of the device.')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setDescription('Indicates the ID of the unit in the device')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decides whether the port is enabled or disabled.')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Choose the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlLockState.setDescription('This object decides whether the port is locked or not.')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setDescription('This object decides whether MAC notification is enabled or not.')
swL2PortCtrlMulticastfilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMulticastfilter.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlMulticastfilter.setDescription('This object decides the multicast packet filtering mode on this port . ')
swL2PortCtrlMdixState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMdixState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortCtrlMdixState.setDescription('This object decides the MDIX mode on this port. ')
swL2PortInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4), )
if mibBuilder.loadTexts: swL2PortInformationTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationTable.setDescription('A table that contains information about every port.')
swL2PortInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2PortInformationPortIndex"), (0, "DES3550-L2MGMT-MIB", "swL2PortInformationMediumType"))
if mibBuilder.loadTexts: swL2PortInformationEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationEntry.setDescription('A list of information for each port of the device.')
swL2PortInformationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortInformationMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationMediumType.setDescription('Indicates medium type of the port number.')
swL2PortInformationUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationUnitID.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationUnitID.setDescription('Indicates ID of the unit in the system')
swL2PortInformationType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("portType-1000Base-SX-GBIC", 7), ("portType-1000Base-LX-GBIC", 8), ("portType-1000Base-TX-GBIC", 9), ("portType-1000Base-1394", 10), ("portType-1000Base-TX-GBIC-COMBO", 11), ("portType-1000Base-none-GBIC", 12), ("portType-1000Base-SX-MGBIC", 13), ("portType-1000Base-LX-MGBIC", 14), ("portType-1000Base-TX-MGBIC", 15), ("portType-1000Base-none-MGBIC", 16), ("portType-SIO", 17), ("portType-10G", 18), ("portType-10G-xenpak-1310nm", 19), ("portType-10G-xenpak-850nm", 20), ("portType-10G-xenpak-empty", 21), ("portType-10G-xfp-1310nm", 22), ("portType-10G-xfp-850nm", 23), ("portType-10G-xfp-empty", 24), ("portType-none", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationType.setDescription('This object indicates the connector type of this port.')
swL2PortInformationLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInformationNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 0), ("empty", 1), ("link-down", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8), ("full-10Gigabps", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationNwayStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInformationModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1394", 2), ("moduleType-1000T", 3), ("moduleType-MGBIC", 4), ("moduleType-1P-SC-SX", 5), ("moduleType-2P-SC-SX", 6), ("moduleType-1P-SC-LX", 7), ("moduleType-2P-SC-LX", 8), ("moduleType-1P-TX", 9), ("moduleType-2P-TX", 10), ("moduleType-1P-MTRJ-SX", 11), ("moduleType-2P-MTRJ-SX", 12), ("moduleType-1P-MTRJ-LX", 13), ("moduleType-2P-MTRJ-LX", 14), ("moduleType-1P-GBIC", 15), ("moduleType-2P-GBIC", 16), ("moduleType-1P-GBIC-1P-TX", 17), ("moduleType-1P-GBIC-1P-STACK", 18), ("moduleType-2P-STACK", 19), ("moduleType-2P-100FX", 20), ("moduleType-1P-100FX", 21), ("moduleType-2P-100FX-NEW", 22), ("moduleType-1P-100FL", 23), ("moduleType-2P-100FL", 24), ("moduleType-2P-100TX", 25), ("moduleType-BaseModule-24PORT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationModuleType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationModuleType.setDescription('This object indicates the module type of this port.')
swL2PortInformationErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("storm", 1), ("lbd", 2), ("ddm", 3), ("unknow", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInformationErrorDisabled.setStatus('current')
if mibBuilder.loadTexts: swL2PortInformationErrorDisabled.setDescription('This object indicates the blocking type of this port.')
swL2PortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5), )
if mibBuilder.loadTexts: swL2PortControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlTable.setDescription('A table that contains control information about every port.')
swL2PortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2PortControlPortIndex"), (0, "DES3550-L2MGMT-MIB", "swL2PortControlMediumType"))
if mibBuilder.loadTexts: swL2PortControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlEntry.setDescription('A list of control information for each port of the device.')
swL2PortControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortControlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlMediumType.setDescription('Indicates the medium type of the port number.')
swL2PortControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortControlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlUnitIndex.setDescription('Indicates ID of the unit in the device')
swL2PortControlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlAdminState.setDescription('This object decides if the port is enabled or disabled.')
swL2PortControlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlNwayState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlNwayState.setDescription('Choose the port speed, duplex mode, and N-Way function mode.')
swL2PortControlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlFlowCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, the IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortControlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlLockState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PortControlLockState.setDescription('This object decides whether the port is locked or not.')
swL2PortControlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlMACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlMACNotifyState.setDescription("This object sets each port's MAC notification state.")
swL2PortControlMulticastfilter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("other", 0), ("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlMulticastfilter.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlMulticastfilter.setDescription('This object controls the multicast port filtering mode for a specified port. ')
swL2PortControlMdixState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortControlMdixState.setStatus('current')
if mibBuilder.loadTexts: swL2PortControlMdixState.setDescription('This object decides the MDIX mode on this port. ')
swL2MulticastRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 1), )
if mibBuilder.loadTexts: swL2MulticastRangeTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastRangeTable.setDescription('.')
swL2MulticastRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2MulticastRangeName"))
if mibBuilder.loadTexts: swL2MulticastRangeEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastRangeEntry.setDescription('A list of information contained in swL2MulticastRangeTable.')
swL2MulticastRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastRangeName.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastRangeName.setDescription('This object specifies the multicast range name.')
swL2MulticastRangeFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastRangeFromIp.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastRangeFromIp.setDescription('This object specifies the start IP address for this range.')
swL2MulticastRangeToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastRangeToIp.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastRangeToIp.setDescription('This object specifies the end IP address for this range.')
swL2MulticastRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MulticastRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastRangeRowStatus.setDescription('This object indicates the status of this entry.')
swL2LimitedMulticastPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2))
swL2LimitedMulticastStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 1), )
if mibBuilder.loadTexts: swL2LimitedMulticastStatusTable.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastStatusTable.setDescription('.')
swL2LimitedMulticastStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2LimitedMulticastPort"))
if mibBuilder.loadTexts: swL2LimitedMulticastStatusEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastStatusEntry.setDescription('A list of information contained in swL2LimitedMulticastStatusTable.')
swL2LimitedMulticastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastPort.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastPort.setDescription('This object indicates the port.')
swL2LimitedMulticastAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("permit", 2), ("deny", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastAccess.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastAccess.setDescription('This object indicates the access type.')
swL2LimitedMulticastState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LimitedMulticastState.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastState.setDescription('This object indicates the state for this port.')
swL2LimitedMulticastRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 2), )
if mibBuilder.loadTexts: swL2LimitedMulticastRangeTable.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastRangeTable.setDescription('.')
swL2LimitedMulticastRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 2, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2LimitedMulticastPort"), (0, "DES3550-L2MGMT-MIB", "swL2LimitedMulticastID"))
if mibBuilder.loadTexts: swL2LimitedMulticastRangeEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastRangeEntry.setDescription('A list of information contained in swL2LimitedMulticastRangeTable.')
swL2LimitedMulticastID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastID.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastID.setDescription('This object indicates the range ID.')
swL2LimitedMulticastRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2LimitedMulticastRangeName.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastRangeName.setDescription('')
swL2LimitedMulticastFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastFromIp.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastFromIp.setDescription('This object specifies the start IP address of the range on this port.')
swL2LimitedMulticastToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LimitedMulticastToIp.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastToIp.setDescription('This object specifies the end IP address of the range on this port.')
swL2LimitedMulticastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 5, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2LimitedMulticastRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2LimitedMulticastRowStatus.setDescription('This object indicates the status of this entry.')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setDescription('.')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setDescription('A list of information contained in swL2QOSBandwidthControlTable.')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setDescription('Indicates the port.')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setDescription('Indicates the RX Rate(Mbit/sec) of the specifed port. Value 0 means no limit.')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setDescription('Indicates the TX Rate(Mbit/sec) of the specifed port. Value 0 means no limit.')
swL2QOSBandwidthRadiusRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusRxRate.setDescription('The Rx Rate value comes from the RADIUS server, If an 802.1X port is authenticated, this value will overwrite the locally configured Rx Rate. ')
swL2QOSBandwidthRadiusTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setStatus('current')
if mibBuilder.loadTexts: swL2QOSBandwidthRadiusTxRate.setDescription('The Tx Rate value comes from the RADIUS server, If an 802.1X port is authenticated, this value will overwrite the locally configured Tx Rate. ')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setDescription('.')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 2, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setDescription('A list of information contained in swL2QOSSchedulingTable.')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setDescription('Indicates the hardware queue number.')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setDescription('Indicates the maximum number of packets the hardware priority queue will be allowed to transmit before allowing the next lowest priority queue to transmit its packets. a value between 0 and 255 can be specified.')
swL2QOSSchedulingMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxLatency.setStatus('current')
if mibBuilder.loadTexts: swL2QOSSchedulingMaxLatency.setDescription('Indicates the maximum amount of time the hardware priority queue will be allowed to transmit packets before allowing the next lowest priority queue to begin transmitting its packets. A value between 0 and 255 can be specified- with this value multiplied by 16 ms to arrive at the total allowed time for queue to transmit packets. For example, a value of 3 specifies 3*16=48 ms. The queue will continue transmitting the last packet until it is finished when the max_latency timer expires. ')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setDescription('.')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 3, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setDescription('A list of information contained in swL2QOS8021pUserPriorityTable.')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setDescription('The 802.1p user priority .')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setDescription("The number of the switch's hardware priority queue. The switch has four hardware priority queues available. They are numbered between 0 (the lowest priority) and 3 (the highest priority).")
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setDescription('.')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 4, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setDescription('A list of information contained in swL2QOS8021pDefaultPriorityTable.')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setDescription('Indicates the port number.')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setDescription('The priority value to assign to untagged packets received by the switch ports on the switch.')
swL2QOS8021pRadiusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setStatus('current')
if mibBuilder.loadTexts: swL2QOS8021pRadiusPriority.setDescription('Indicates the value of 802.1p comes from RADIUS server. If an 802.1X port is authenticated, this value will overwrite the local configured value.')
swL2IpMacBindingPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1), )
if mibBuilder.loadTexts: swL2IpMacBindingPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortTable.setDescription("The table specifies the port's ip-mac binding function.")
swL2IpMacBindingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IpMacBindingPortIndex"))
if mibBuilder.loadTexts: swL2IpMacBindingPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortEntry.setDescription("A list of information about the port's ip-mac binding function.")
swL2IpMacBindingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module).")
swL2IpMacBindingPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enable-strict", 2), ("disable", 3), ("enable-loose", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingPortState.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortState.setDescription('This object enables (strict or loose mode)/disables IP-MAC binding on the specified port. Note: enable-strict (2): SW learning enable-loose (4) : HW learning ')
swL2IpMacBindingPortAllowZeroIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingPortAllowZeroIp.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortAllowZeroIp.setDescription('This object enables/disables the allow zero IP status on the specified port.')
swL2IpMacBindingPortForwardDhcpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingPortForwardDhcpPkt.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortForwardDhcpPkt.setDescription('This object can be set to forward or not forward DHCP packets on the specified port.')
swL2IpMacBindingPortDHCPSnoopMaxEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingPortDHCPSnoopMaxEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortDHCPSnoopMaxEntry.setDescription('This object indicates the max entry created by DHCP packets on the specified port. Note: When 0 is set on the specified port, the max entry created by DHCP packets is no limit')
swL2IpMacBindingPortDHCPSnoopEntryClearAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingPortDHCPSnoopEntryClearAction.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortDHCPSnoopEntryClearAction.setDescription('When set to start (2), the address binding entries learned for the specified ports will be cleared. When get, it always returns other (1). ')
swL2IpMacBindingPortStopLearningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingPortStopLearningThreshold.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortStopLearningThreshold.setDescription('This object indicates the threshold to stop learning new MAC addresses on the specified port. When the number of blocked entries exceeds the threshold, the port will stop learning new addresses. The packet with a new address will be dropped. Note: When 0 is set on the specified port, it means no limit.')
swL2IpMacBindingPortRecoverLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingPortRecoverLearning.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortRecoverLearning.setDescription('When set to start (2), it will change the stop_learning state to a normal state on the specified port. When get, it always returns other (1). ')
swL2IpMacBindingPortLearningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingPortLearningMode.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPortLearningMode.setDescription('When set to Stop(2), it will end the learning state. ')
swL2IpMacBindingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2), )
if mibBuilder.loadTexts: swL2IpMacBindingTable.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingTable.setDescription('This table specifies IP-MAC binding information.')
swL2IpMacBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IpMacBindingIpIndex"))
if mibBuilder.loadTexts: swL2IpMacBindingEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingEntry.setDescription("This IP-MAC binding entry is used to add/delete/configure the address pair to the switch's authorized user database.")
swL2IpMacBindingIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingIpIndex.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingIpIndex.setDescription('The IP address of the IP-MAC binding.')
swL2IpMacBindingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IpMacBindingMac.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingMac.setDescription('The MAC address of the IP-MAC binding.')
swL2IpMacBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IpMacBindingStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingStatus.setDescription('The status of this entry.')
swL2IpMacBindingPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IpMacBindingPorts.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPorts.setDescription('The port members of this entry.')
swL2IpMacBindingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingAction.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingAction.setDescription('The action of this entry.')
swL2IpMacBindingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("arp", 0), ("acl", 1), ("auto", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IpMacBindingMode.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingMode.setDescription('The mode of this entry. arp: This entry is specified as an ARP mode entry, and this entry will not be added as an access entry. If this object is not specified, the mode defaults to ARP mode. If the system is in ARP mode, the ARP mode entries and ACL mode entries will be effective. If the system is in ACL mode, only the ACL mode entries will be active. acl: This entry is specified as an ACL mode entry. If the user enables the ACL mode, this entry will be added as an access entry. auto: This mode cannot be configured, and when the auto mode is employed, it means this entry is to be learned by DHCP snooping. ')
swL2IpMacBindingBlockedTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 3), )
if mibBuilder.loadTexts: swL2IpMacBindingBlockedTable.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingBlockedTable.setDescription('The table specifies information of MAC addresses which were blocked.')
swL2IpMacBindingBlockedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 3, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IpMacBindingBlockedVID"), (0, "DES3550-L2MGMT-MIB", "swL2IpMacBindingBlockedMac"))
if mibBuilder.loadTexts: swL2IpMacBindingBlockedEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingBlockedEntry.setDescription('The entry can not create/configure. It can only delete.')
swL2IpMacBindingBlockedVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 3, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingBlockedVID.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingBlockedVID.setDescription('The object specifies the VLAN ID.')
swL2IpMacBindingBlockedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingBlockedMac.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingBlockedMac.setDescription('The MAC address which was blocked.')
swL2IpMacBindingBlockedVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingBlockedVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingBlockedVlanName.setDescription('This object specifies the VLAN name.')
swL2IpMacBindingBlockedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingBlockedPort.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingBlockedPort.setDescription('The port with which the MAC is associated.')
swL2IpMacBindingBlockedType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("blockByAddrBind", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingBlockedType.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingBlockedType.setDescription('The value is always blockByAddrBind. This entry will be deleted by setting the value to delete(3).')
swL2IpMacBindingAllPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enable-strict", 2), ("disable", 3), ("enable-loose", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingAllPortState.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingAllPortState.setDescription('This object enables/disables IP-MAC binding on all ports of the system. This action is only applicable when users have write privileges, and can only be viewed when users have read privileges. Note: enable-strict (2): This means strict mode (SW learning). All packets are sent to the CPU. If the user chooses, the port will check ARP packets and IP packets by IP-MAC-PORT Binding entries. If the MAC address can be found or not found by the entry, the MAC will be set as dynamic learned or it will set as blocked, respectively. Other packets will be sent to the CPU and dropped. enable-loose (4) : This means loose mode (HW learning): Only ARP packets and IP broadcast packets will be sent to the CPU. If the user chooses , the port will learn the MAC address on non-ARP and non-IP broadcast packets directly, so these packets will be bypassed. But if the switch receives the ARP or IP broadcast packets and Can not bypass the IP MAC Binding checking, the switch will set this MAC address as blocked and all packets from this MAC address will be dropped. ')
swL2IpMacBindingTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingTrapLogState.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingTrapLogState.setDescription("when set to enable(2),whenever there's a new MAC that violates the pre-defined Ip Mac Binding configuration, the trap will be sent out and the relevant information will be logged into the system.")
swL2IpMacBindingARPInspectionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingARPInspectionState.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingARPInspectionState.setDescription('Used to set ARP inspection state.')
swL2IpMacBindingACLMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingACLMode.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingACLMode.setDescription('when set to enable(2), the Ip Mac Binding will use acl mode')
swL2IpMacBindingDHCPSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopState.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopState.setDescription('When the dhcp_snoop function is enabled, all address_binding disabled ports will act as DHCP server ports (the switch will learn IP addresses through DHCP server ports (by DHCP OFFER and DHCP ACK packets)). The auto-learned IP-MAC binding entry will be mapped to a specific source port based on the MAC address learning function. This entry will be created as an ACL-mode binding entry for this specific port. Each entry is associated with a lease time. When the lease time expires, the expired entry will be removed from this port. The automatically learned binding entry can be moved from one port to another port if the DHCP snooping function has learned that the MAC address has moved to a different port. Consider a case where DHCP snooping learns a binding entry, and the same IP-MAC binding entry has been statically configured. Suppose that the learned information is consistent with the statically configured entry, then the automatically learned entry will not be created. Suppose the entry is statically configured in ARP mode, since the automatically learned entry will be created in ACL mode, the entry will become ACL mode. Suppose the entry is statically configured on one port and the entry is automatically learned on another port, then both entries will exist. When the dhcp_snoop function is disabled, all of the automatically learned binding entries will be removed. ')
swL2IpMacBindingDHCPSnoopEntryClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopEntryClearAllState.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopEntryClearAllState.setDescription('Used to clear all entries created by DHCP packets.')
swL2IpMacBindingDHCPSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 9), )
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopTable.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopTable.setDescription('The table specifies information regarding the DHCP snooping function learning IP-MAC binding entries.')
swL2IpMacBindingDHCPSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 9, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IpMacBindingDHCPSnoopIpIndex"))
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopEntry.setDescription('A list of information about the DHCP snooping learning IP-MAC binding entry.')
swL2IpMacBindingDHCPSnoopIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopIpIndex.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopIpIndex.setDescription('The IP address of this entry.')
swL2IpMacBindingDHCPSnoopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 9, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopMac.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopMac.setDescription('The MAC address of this entry.')
swL2IpMacBindingDHCPSnoopLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopLeaseTime.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopLeaseTime.setDescription('Specifies the lease time of this entry. When the lease time expires, this entry will be removed from this port.')
swL2IpMacBindingDHCPSnoopPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopPort.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopPort.setDescription('Specifies the port of this entry.')
swL2IpMacBindingDHCPSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingDHCPSnoopStatus.setDescription('Specifies the status (inactive or active) of this entry.')
swL2IpMacBindingPermitIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 10), )
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolTable.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolTable.setDescription('This table specifies the permitted IP pool of IP-MAC binding.')
swL2IpMacBindingPermitIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 10, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IpMacBindingPermitIPPoolStartIP"), (0, "DES3550-L2MGMT-MIB", "swL2IpMacBindingPermitIPPoolEndIP"))
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolEntry.setDescription('A list of information of each permitted IP pool entry.')
swL2IpMacBindingPermitIPPoolStartIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolStartIP.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolStartIP.setDescription('The start IP address of the permitted IP pool.')
swL2IpMacBindingPermitIPPoolEndIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolEndIP.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolEndIP.setDescription('The end IP address of the permitted IP pool.')
swL2IpMacBindingPermitIPPoolPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 10, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolPorts.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolPorts.setDescription('The port members of the permitted IP pool.')
swL2IpMacBindingPermitIPPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 7, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingPermitIPPoolStatus.setDescription('The status of the permitted IP pool.')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setDescription('Maximum number of entries in the trunk configuration table (swL2TrunkCtrlTable).')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setDescription('Current active number of entries in the trunk configuration table.')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setDescription('This table specifies which ports are grouped as a set of ports(up to 8) into a single logical link.')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setDescription('A list of information specifies which ports are grouped as a set of ports(up to 8) into a single logical link.')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkIndex.setDescription('The index of logical port trunk. The trunk group number depends on the existence of the unit and module.')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkName.setDescription('The name of logical port trunk.')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMasterPort.setDescription('The object indicates the master port number of the port trunk entry. When using Port Trunk, you can not configure the other ports of the group except the master port. Their configuration must be the same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMember.setDescription('Indicates how many ports are included in this Trunk. The trunk port number depends on the existence of module. The maximum number of ports is 8 for one trunks.')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setDescription('The object indicates the flooding port number of the port trunk entry. The first port of the trunk is implicitly configured to be the flooding port.')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkType.setDescription('This object indicates the type of the trunk group. static : is static trunk group lacp : is LACP trunk group . ')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkState.setDescription('This object indicates the status of this entry.')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setDescription('This object configures the part of the packet examined by the switch when selecting the egress port for transmitting load-sharing data.')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setDescription('This object indicates which port will sniff another port to the switch. A trunk port member cannot be configured as a target Snooping port. The port number is the sequential (logical) number which is also applied to bridge MIB, etc.')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setDescription('This represents the ingress of the source port packet to be sniffed.')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 9, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setDescription('This represents the egress of the source port packet to be sniffed.')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortState.setDescription('This object indicates the port mirroring state. other(1) - this entry is currently in use but the conditions under which it will remain so are different for each of the following values. disabled(2) - writing this value to the object will remove the corresponding entry from the table. enabled(3) - this entry will reside in the table.')
swL2IGMPMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxSupportedVlans.setDescription('Maximum number of VLANs in the layer 2 IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3), )
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlTable.setDescription("This table controls the VLAN's IGMP function. Its scale depends on the current VLAN state (swL2VlanInfoStatus). If VLAN is in disabled mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries can be up to 12, with an index range from 1 to 12.")
swL2IGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IGMPCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlEntry.setDescription('The entry in IGMP control table (swL2IGMPCtrlTable). The entry is effective only when IGMP capture switch (swL2DevCtrlIGMPSnooping) is enabled.')
swL2IGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN ID. If VLAN is disabled, the VID is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the VID is arranged from 1 to 12, fixed form. If VLAN is in 802.1q mode, the VID setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP Control Table.")
swL2IGMPQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInterval.setDescription('The frequency at which the IGMP Host-Query packets are transmitted on this switch.')
swL2IGMPMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMaxResponseTime.setDescription('The maximum query response time on this switch.')
swL2IGMPRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRobustness.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to have a high loss, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses.')
swL2IGMPLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages.')
swL2IGMPHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPHostTimeout.setDescription('The timer value for sending IGMP query packet when none was sent by the host in the LAN. The timer works in per-VLAN basis. Our device will be activated to send the query message if the timer has expired. Please reference RFC2236-1997.')
swL2IGMPRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouteTimeout.setDescription('The Router Timeout is how long a host must wait after hearing a Query before it may send any IGMPv2 messages.')
swL2IGMPLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPLeaveTimer.setDescription('When a query receives a Leave Group message for a group that has group members on the reception interface, it sends Group-Specific Queries every swL2IGMPLeaveTimer to the group being left.')
swL2IGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPQueryState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryState.setDescription('This object decides if the IGMP query is enabled or disabled.')
swL2IGMPCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPCurrentState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCurrentState.setDescription('This object indicates the current IGMP query state.')
swL2IGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different for each of the following values. disable(2) - IGMP funtion is disabled for this entry. enable(3) - IGMP funtion is enabled for this entry.')
swL2IGMPQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 4), )
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoTable.setDescription('The table contains the current number of IGMP query packets which have been captured by this device, as well as the IGMP query packets sent by the device.')
swL2IGMPQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 4, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IGMPInfoVid"))
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPQueryInfoEntry.setDescription('Information about current IGMP query information, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrState of associated VLAN entires are all enabled.')
swL2IGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoVid.setDescription('This object indicates the VID of the associated IGMP info table entry. It follows swL2IGMPCtrlVid in the associated entry of the IGMP control table (swL2IGMPCtrlTable).')
swL2IGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function has been enabled, on a per-VLAN basis.')
swL2IGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, on a per-VLAN basis. In case of the IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increments this object by 1.')
swL2IGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5), )
if mibBuilder.loadTexts: swL2IGMPInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoTable.setDescription('The table containing current IGMP information which have been captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entries are all enabled. Note that the priority of IGMP table entries is lower than the Filtering Table, i.e. if there is a table hash collision between the entries of the IGMP Table and the Filtering Table inside the switch H/W address table, the Filtering Table entry will overwrite the colliding entry of the IGMP Table. See swL2FilterMgmt description also.')
swL2IGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IGMPVid"), (0, "DES3550-L2MGMT-MIB", "swL2IGMPGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPInfoEntry.setDescription('Information about current IGMP information which was captured by this device, provided that swL2DevCtrlIGMPSnooping and swL2IGMPCtrlState of associated VLAN entries are all enabled.')
swL2IGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPVid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPVid.setDescription('This object indicates the VID of individual IGMP table entries. It shows the VID of IGMP report information captured on the network.')
swL2IGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPGroupIpAddr.setDescription('This object identifies group ip address which have been captured from the IGMP packet, on a per-Vlan basis.')
swL2IGMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMacAddr.setDescription('This object identifies mac addresses which correspond to swL2IGMPGroupIpAddr, on a per-Vlan basis.')
swL2IGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPPortMap.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPPortMap.setDescription("This object indicates which ports belong to the same multicast group, on a per-Vlan basis. Each multicast group has a octect string to indicate with port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'(Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant). The 4 octets represent one unit port according to its logic port. If the unit has less then 32 port, the other ports don't care and just fill in zero.")
swL2IGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPIpGroupReportCount.setDescription('This object indicates how many report packets were received by the device corresponding with this entry where the IGMP function is enabled, on a per-Vlan basis.')
swL2IGMPGroupActive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("avtive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPGroupActive.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPGroupActive.setDescription('This object indicates that the entry added the multicast table.')
swL2IGMPMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6), )
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanTable.setDescription('The information of the IGMP snooping multicast VLAN table.')
swL2IGMPMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IGMPMulticastVlanid"))
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanEntry.setDescription('The entry of swL2IGMPMulticastVlanTable.')
swL2IGMPMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanid.setDescription('This object indicates the VLAN id of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanName.setDescription('This object indicates the VLAN name of the IGMP snooping multicast VLAN entry.')
swL2IGMPMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanSourcePort.setDescription('This object indicates the portlist of the source ports of IGMP snooping multicast VLAN. The source ports will be set as tag ports of the VLAN entry and the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanMemberPort.setDescription('This object indicates the portlist of the member ports of IGMP snooping multicast VLAN. The source ports will be set to untag ports of the vlan entry and the IGMP control messages received from the member ports would be forwarded to the source ports. ')
swL2IGMPMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRowStatus.setDescription('This object indicates the status of this entry.')
swL2IGMPMulticastVlanReplaceSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIP.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplaceSourceIP.setDescription('This object is used to replace the source IP address in the IP header for IGMP control packets.')
swL2IGMPMulticastVlanUntagSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanUntagSourcePort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanUntagSourcePort.setDescription('This indicates the untagged member ports to add to the multicast VLAN.')
swL2IGMPMulticastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemapPriority.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanRemapPriority.setDescription("This is the priority value (0 to 7) to be associated with the data traffic to be forwarded on the multicast VLAN. When set to -1, the packet's original priority will be used.")
swL2IGMPMulticastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPMulticastVlanReplacePriority.setDescription("This specifies that a packet's priority will be changed by the switch based on the remap priority. This flag will only take effect when remap priority is set.")
swL2IGMPRouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 7), )
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortTable.setDescription('The information of the router port table.')
swL2IGMPRouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 7, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IGMPRouterPortVlanid"))
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortEntry.setDescription('The entry of swL2IGMPRouterPortTable.')
swL2IGMPRouterPortVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanid.setDescription('This object indicates the VLAN id of the router port entry.')
swL2IGMPRouterPortVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortVlanName.setDescription('This object indicates the VLAN name of the router port entry.')
swL2IGMPRouterPortStaticPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 7, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortStaticPortList.setDescription('This object indicates the static portlist of the router port entry.')
swL2IGMPRouterPortDynamicPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortDynamicPortList.setDescription('This object indicates the dynamic portlist of the router port entry.')
swL2IGMPRouterPortForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 7, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPRouterPortForbiddenPortList.setDescription('This object indicates the forbidden portlist of the router port entry.')
swL2IGMPAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 8), )
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setDescription('This table is used to manage the IGMP Access Authentication configurations of the device.')
swL2IGMPAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 8, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2IGMPAccessAuthPort"))
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setDescription('A list of manageable entities for IGMP Access Authentication. The configuration is done per port.')
swL2IGMPAccessAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setDescription('The index of the swL2IGMPAccessAuthTable. This object corresponds to the port being configured.')
swL2IGMPAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setDescription('This object denotes the status of IGMP Access Authentication of the port.')
swL2DhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayState.setDescription('This object indicates if the DHCP relay function is enabled or disabled.')
swL2DhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayHopCount.setDescription('This object indicates the maximum number of router hops that the DHCP packets can cross.')
swL2DhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayTimeThreshold.setDescription('This object indicates the minimum time in seconds within which the switch must relay the DHCP request. If this time is exceeded, the switch will drop the DHCP packet.')
swL2DhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayOption82State.setDescription('This object indicates if the DHCP relay agent information option 82 function is enabled or disabled.')
swL2DhcpRelayOption82Check = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayOption82Check.setDescription('This object indicates if the checking mechanism of DHCP relay agent information option 82 is enabled or disabled.')
swL2DhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayOption82Policy.setDescription('This object indicates the re-forwarding policy is DHCP relay agent information option 82. replace(1) - replace the exiting option 82 field in messages. drop(2) - discard messages with existing option 82 field. keep(3) - retain the existing option 82 field in messages.')
swL2DhcpRelayCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 7), )
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlTable.setDescription('This table specifies the IP address og the destination to forward (relay) DHCP packets to.')
swL2DhcpRelayCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 7, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2DhcpRelayCtrlInterfaceName"), (0, "DES3550-L2MGMT-MIB", "swL2DhcpRelayCtrlServer"))
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlEntry.setDescription('A list of information specifying the IP address as a destination to forward (relay) DHCP packets to.')
swL2DhcpRelayCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlInterfaceName.setDescription('The name of the IP interface.')
swL2DhcpRelayCtrlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlServer.setDescription('The DHCP server IP address.')
swL2DhcpRelayCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 11, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2DhcpRelayCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, results in the corresponding entry being removed from the table. valid(3) - this entry will reside in the table.')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setDescription('This object indicates the loopback detection status of the system.')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectInterval.setDescription('This object indicates the interval value, the range is from 1 to 32767 seconds.')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setDescription('This object indicates the recover time, the range is from 60 to 1000000. A value of 0 disables the recover function.')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectMode.setDescription('This object indicates the loopback detection mode for the system.')
swL2LoopDetectActiveVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5))
swL2LoopDetectActiveVlanRangeList1to64 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList1to64.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList1to64.setDescription('This object indicates the VLAN range (1-512) that added the multicast table.')
swL2LoopDetectActiveVlanRangeList65to128 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList65to128.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList65to128.setDescription('This object indicates the VLAN range (513-1024) that added the multicast table.')
swL2LoopDetectActiveVlanRangeList129to192 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList129to192.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList129to192.setDescription('This object indicates the VLAN range (1025-1536) that added the multicast table.')
swL2LoopDetectActiveVlanRangeList193to256 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList193to256.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList193to256.setDescription('This object indicates the VLAN range (1537-2048) that added the multicast table.')
swL2LoopDetectActiveVlanRangeList257to320 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList257to320.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList257to320.setDescription('This object indicates the VLAN range (2049-2560) that added the multicast table.')
swL2LoopDetectActiveVlanRangeList321to384 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList321to384.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList321to384.setDescription('This object indicates the VLAN range (2561-3072) that added the multicast table.')
swL2LoopDetectActiveVlanRangeList385to448 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList385to448.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList385to448.setDescription('This object indicates the VLAN range (3073-3584) that added the multicast table.')
swL2LoopDetectActiveVlanRangeList449to512 = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 1, 5, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList449to512.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectActiveVlanRangeList449to512.setDescription('This object indicates the VLAN range (3585-4096) that added the multicast table.')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setDescription('The table specifies the loopback detection function specified by the port.')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 2, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setDescription('The table specifies the loopback detection function specified by the port.')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number specified in the module")
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortState.setDescription('This object indicates the loopback detection function state on the port.')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setDescription('This object indicates the VLAN list that has detected a loopback.')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setDescription('This object indicates the port status.')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 13, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegTable.setDescription('This table specifies that the port can just forward traffic to the specific port list.')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 13, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegEntry.setDescription('A list of information specifying the port with its traffic forward list.')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegPort.setDescription('The port number of the logical port.')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 13, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setDescription('The port list that the specific port can forward traffic to.')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setDescription('port security feature which controls the address learning capability and the traffic forwarding decision. Each port can have this function enabled or disabled. When it is enabled and a number is given said N, which allows N addresses to be learned at this port, the first N learned addresses are locked at this port as static entry. When the learned addresses number reaches N, any incoming packet that has not learned a source addresses is discarded (e.g. dropped) and no more new addresses can be learned on this port.')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 1, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setDescription('A list of information contained in swL2PortSecurityControlTable.')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setDescription('Indicates the secured port to lock address learning.')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setDescription('Indicates allowable number of addresses to be learned at this port.')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityMode.setDescription('Indicates the mode of locking address. In deleteOnTimeout(3) mode - the locked addresses can be aged out after aging timer has expired. In this mode, when the locked address has aged out, the number of addresses that can be learned has to increase by one. In deleteOnReset(4) mode - never age out the locked addresses unless restarting the system to prevent from port movement or intrusion.')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setDescription('Indicates the administration state of the locking address.')
swL2PortSecurityTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityTrapLogState.setDescription("when enable(2)is selected,whenever there's a new MAC that violates the pre-defined port security configuration, a trap will be sent out and the relevant information will be logged in system.")
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 3))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setDescription('Indicates VLAN name.')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setDescription('Indicates the port.')
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 3, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setDescription('Specifies a MAC address.')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 14, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setDescription('.')
swL2DhcpLocalRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayState.setDescription('This object indicates the status of the DHCP local relay function of the switch.')
swL2DhcpLocalRelayVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 2), )
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANTable.setDescription('This table is used to manage the DHCP local relay status for each VLAN.')
swL2DhcpLocalRelayVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 2, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2DhcpLocalRelayVLANID"))
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANEntry.setDescription('This object lists the current VLANs in the switch and their corresponding DHCP local relay status.')
swL2DhcpLocalRelayVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANID.setDescription('This object shows the VIDs of the current VLANS in the switch.')
swL2DhcpLocalRelayVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayVLANState.setDescription('This object indicates the status of the DHCP relay function of the VLAN.')
swL2DhcpLocalRelayOption82Table = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 3), )
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82Table.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82Table.setDescription('This table is used to manage the DHCP local relay option 82 policy for each port.')
swL2DhcpLocalRelayOption82Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 3, 1), ).setIndexNames((0, "DES3550-L2MGMT-MIB", "swL2DhcpLocalRelayOption82PortIndex"))
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82Entry.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82Entry.setDescription('This object lists the current ports in the switch and their corresponding DHCP local relay option 82 policy.')
swL2DhcpLocalRelayOption82PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82PortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82PortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2DhcpLocalRelayOption82Policy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82Policy.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82Policy.setDescription('This object indicates the policy of the DHCP local relay option 82 of each port.')
swL2DhcpLocalRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user-defined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82RemoteIDType.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82RemoteIDType.setDescription('This object indicates the type of remote ID for DHCP Local Relay. If the type is default, the remote ID will be the MAC address of the device. If the type is user-defined, the remote ID can be defined by writing to the swL2DhcpLocalRelayOption82RemoteID object.')
swL2DhcpLocalRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 24, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82RemoteID.setStatus('current')
if mibBuilder.loadTexts: swL2DhcpLocalRelayOption82RemoteID.setDescription('This object displays the current remote ID of the device for DHCP Local Relay. If swL2DhcpRelayOption82RemoteIDType is set to default, the value will be the MAC address of the device, and this object cannot be modified. If swL2DhcpRelayOption82RemoteIDType is set to user-defined, a new value can be written to this object.')
swL2PPPoECirIDinsertState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PPPoECirIDinsertState.setStatus('obsolete')
if mibBuilder.loadTexts: swL2PPPoECirIDinsertState.setDescription('This object indicates the status of the PPPoE circuit ID insertion state of the switch.')
swL2MgmtMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0))
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 3)).setObjects(("DES3550-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
if mibBuilder.loadTexts: swL2macNotification.setDescription(' This trap indicate the MAC addresses variation in the address table . ')
swL2porttypechgNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 4)).setObjects(("DES3550-L2MGMT-MIB", "swL2PortInfoPortIndex"), ("DES3550-L2MGMT-MIB", "swL2PortInfoType"))
if mibBuilder.loadTexts: swL2porttypechgNotification.setStatus('current')
if mibBuilder.loadTexts: swL2porttypechgNotification.setDescription(' This trap indicates the port type change. ')
swPowerStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 5)).setObjects(("DES3550-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3550-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3550-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChg.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChg.setDescription('Power Status change notification. The notification is issued when the swPowerStatus changes as in the following cases: lowVoltage -> overCurrent. lowVoltage -> working. lowVoltage -> disconnect. lowVoltage -> connect. overCurrent -> lowVoltage. overCurrent -> working. overCurrent -> disconnect. overCurrent -> connect. working -> lowVoltage. working -> overCurrent. working -> connect. working -> disconnect. fail -> connect. fail -> disconnect. connect -> lowVoltage. connect -> overCurrent. connect -> working. connect -> disconnect. disconnect -> lowVoltage. disconnect -> overCurrent. disconnect -> working. disconnect -> connect.')
swPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 6)).setObjects(("DES3550-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3550-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3550-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerFailure.setStatus('current')
if mibBuilder.loadTexts: swPowerFailure.setDescription('Power Failure notification. The notification issues when the swPowerStatus changes as in the following cases: lowVoltage -> fail. overCurrent -> fail. working -> fail. connect -> fail. disconnect -> fail.')
swPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 7)).setObjects(("DES3550-L2MGMT-MIB", "swDevInfoPowerUnitIndex"), ("DES3550-L2MGMT-MIB", "swDevInfoPowerID"), ("DES3550-L2MGMT-MIB", "swDevInfoPowerStatus"))
if mibBuilder.loadTexts: swPowerRecover.setStatus('current')
if mibBuilder.loadTexts: swPowerRecover.setDescription('Power Recover notification. The notification issues when the swPowerStatus changes as in the following cases: fail -> lowVoltage. fail -> overCurrent. fail -> working.')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
if mibBuilder.loadTexts: swL2macNotifyInfo.setDescription('This object indicates information about the last time the system rebooted. ')
swl2NotifyPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 2))
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 2, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setDescription('This object indicates the MAC address that violated the port security configuration.')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 8)).setObjects(("DES3550-L2MGMT-MIB", "swL2PortSecurityPortIndex"), ("DES3550-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setDescription("When the port_security trap is enabled, if there's a new MAC that violates the pre-defined port security configuration a trap will be sent out ")
swl2NotifyIpMacBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 3))
swL2IpMacBindingViolationIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 3, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2IpMacBindingViolationIP.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingViolationIP.setDescription('This object indicates the MAC address that violates the IP-Mac Binging configuration.')
swL2IpMacBindingViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 3, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2IpMacBindingViolationMac.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingViolationMac.setDescription('This object indicates the IP address that violates the IP-Mac Binging configuration.')
swL2IpMacBindingViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 9)).setObjects(("DES3550-L2MGMT-MIB", "swL2IpMacBindingPortIndex"), ("DES3550-L2MGMT-MIB", "swL2IpMacBindingViolationIP"), ("DES3550-L2MGMT-MIB", "swL2IpMacBindingViolationMac"))
if mibBuilder.loadTexts: swL2IpMacBindingViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingViolationTrap.setDescription("When the IP-Mac Binding trap is enabled, if there's a new MAC that violates the pre-defined port security configuration a trap will be sent out ")
swL2IpMacBindingStopLearningTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 10)).setObjects(("DES3550-L2MGMT-MIB", "swL2IpMacBindingPortIndex"))
if mibBuilder.loadTexts: swL2IpMacBindingStopLearningTrap.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingStopLearningTrap.setDescription('When the IP-MAC Binding trap is enabled, if the specific port changes from a normal state to a stop_learning state, a trap will be sent out.')
swL2IpMacBindingRecoverLearningTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 11)).setObjects(("DES3550-L2MGMT-MIB", "swL2IpMacBindingPortIndex"))
if mibBuilder.loadTexts: swL2IpMacBindingRecoverLearningTrap.setStatus('current')
if mibBuilder.loadTexts: swL2IpMacBindingRecoverLearningTrap.setDescription('When the IP-MAC Binding trap is enabled, if the specific port changes from a stop_learning state to a normal state, a trap will be sent out.')
swl2NotifyLoopDetect = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 4))
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 4, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setDescription('This object indicates the VID that has detected a loopback.')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 12)).setObjects(("DES3550-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopOccurred.setDescription('The trap is sent when a Port loop occurs.')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 13)).setObjects(("DES3550-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopRestart.setDescription('The trap is sent when a Port loop restarts after the interval time.')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 14)).setObjects(("DES3550-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DES3550-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setDescription('The trap is sent when a Port with a VID loop occurs.')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 64, 2, 2, 15, 0, 15)).setObjects(("DES3550-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DES3550-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopRestart.setDescription('The trap is sent when a Port with a VID loop restarts after the interval time.')
mibBuilder.exportSymbols("DES3550-L2MGMT-MIB", swL2VlanMgmt=swL2VlanMgmt, swL2DhcpLocalRelayVLANState=swL2DhcpLocalRelayVLANState, swL2PortCtrlMdixState=swL2PortCtrlMdixState, swDevInfoPowerUnitIndex=swDevInfoPowerUnitIndex, swL2IpMacBindingBlockedVID=swL2IpMacBindingBlockedVID, swL2IGMPQueryInfoEntry=swL2IGMPQueryInfoEntry, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2VlanAdvertisementTable=swL2VlanAdvertisementTable, swL2DhcpLocalRelayOption82Entry=swL2DhcpLocalRelayOption82Entry, swL2IGMPGroupIpAddr=swL2IGMPGroupIpAddr, swL2IGMPMulticastVlanUntagSourcePort=swL2IGMPMulticastVlanUntagSourcePort, swL2macNotification=swL2macNotification, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2PortInformationType=swL2PortInformationType, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2IpMacBindingDHCPSnoopTable=swL2IpMacBindingDHCPSnoopTable, PortList=PortList, swL2IGMPMulticastVlanMemberPort=swL2IGMPMulticastVlanMemberPort, swL2IGMPLeaveTimer=swL2IGMPLeaveTimer, swL2TrunkType=swL2TrunkType, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2IpMacBindingEntry=swL2IpMacBindingEntry, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swDevInfoPowerID=swDevInfoPowerID, swL2IpMacBindingPortEntry=swL2IpMacBindingPortEntry, swL2IpMacBindingACLMode=swL2IpMacBindingACLMode, swL2LimitedMulticastAccess=swL2LimitedMulticastAccess, swL2IGMPRouterPortVlanName=swL2IGMPRouterPortVlanName, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress, swDevInfoPowerTable=swDevInfoPowerTable, swL2IpMacBindingPortForwardDhcpPkt=swL2IpMacBindingPortForwardDhcpPkt, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2IGMPInfoEntry=swL2IGMPInfoEntry, swL2TrunkMember=swL2TrunkMember, swL2QOSMgmt=swL2QOSMgmt, swL2LoopDetectActiveVlanRangeList65to128=swL2LoopDetectActiveVlanRangeList65to128, swL2IGMPVid=swL2IGMPVid, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2IGMPCtrlTable=swL2IGMPCtrlTable, swL2LoopDetectActiveVlanRangeList1to64=swL2LoopDetectActiveVlanRangeList1to64, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swL2PortCtrlMulticastfilter=swL2PortCtrlMulticastfilter, swL2porttypechgNotification=swL2porttypechgNotification, swL2IGMPRouterPortEntry=swL2IGMPRouterPortEntry, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2IpMacBindingPermitIPPoolEndIP=swL2IpMacBindingPermitIPPoolEndIP, swL2IGMPMgmt=swL2IGMPMgmt, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2IGMPMulticastVlanEntry=swL2IGMPMulticastVlanEntry, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2LoopDetectActiveVlanRangeList257to320=swL2LoopDetectActiveVlanRangeList257to320, swL2IGMPMulticastVlanTable=swL2IGMPMulticastVlanTable, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2PortControlMediumType=swL2PortControlMediumType, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2MACNotifyState=swL2MACNotifyState, swL2IGMPQueryInfoTable=swL2IGMPQueryInfoTable, swL2PortSecurityMode=swL2PortSecurityMode, swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2DhcpRelayTimeThreshold=swL2DhcpRelayTimeThreshold, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swL2IGMPPortMap=swL2IGMPPortMap, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2MulticastRangeEntry=swL2MulticastRangeEntry, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2IGMPRouterPortStaticPortList=swL2IGMPRouterPortStaticPortList, swL2IpMacBindingPortDHCPSnoopEntryClearAction=swL2IpMacBindingPortDHCPSnoopEntryClearAction, swL2IGMPAccessAuthState=swL2IGMPAccessAuthState, swL2LimitedMulticastRowStatus=swL2LimitedMulticastRowStatus, swL2QOSBandwidthRadiusRxRate=swL2QOSBandwidthRadiusRxRate, swL2LoopDetectActiveVlanRangeList129to192=swL2LoopDetectActiveVlanRangeList129to192, swL2DhcpRelayHopCount=swL2DhcpRelayHopCount, swL2IpMacBindingDHCPSnoopState=swL2IpMacBindingDHCPSnoopState, swL2DhcpLocalRelayMgmt=swL2DhcpLocalRelayMgmt, VlanIndex=VlanIndex, swL2DhcpRelayOption82Check=swL2DhcpRelayOption82Check, swL2PortControlUnitIndex=swL2PortControlUnitIndex, swL2DevCtrl=swL2DevCtrl, swL2LimitedMulticastFromIp=swL2LimitedMulticastFromIp, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2PortInformationNwayStatus=swL2PortInformationNwayStatus, swL2IpMacBindingViolationIP=swL2IpMacBindingViolationIP, swL2IpMacBindingDHCPSnoopStatus=swL2IpMacBindingDHCPSnoopStatus, swl2NotifyPortSecurity=swl2NotifyPortSecurity, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swL2IGMPAccessAuthEntry=swL2IGMPAccessAuthEntry, swL2IGMPMulticastVlanRemapPriority=swL2IGMPMulticastVlanRemapPriority, swL2PortInformationErrorDisabled=swL2PortInformationErrorDisabled, swL2IpMacBindingPortState=swL2IpMacBindingPortState, swL2PortInformationEntry=swL2PortInformationEntry, swL2IpMacBindingPermitIPPoolPorts=swL2IpMacBindingPermitIPPoolPorts, swL2PortInfoTable=swL2PortInfoTable, swL2DhcpLocalRelayOption82PortIndex=swL2DhcpLocalRelayOption82PortIndex, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2LoopDetectActiveVlanRangeList385to448=swL2LoopDetectActiveVlanRangeList385to448, swL2DhcpRelayOption82State=swL2DhcpRelayOption82State, swL2IGMPAccessAuthPort=swL2IGMPAccessAuthPort, swL2IGMPHostTimeout=swL2IGMPHostTimeout, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2macNotifyInfo=swL2macNotifyInfo, swL2PortControlMACNotifyState=swL2PortControlMACNotifyState, swL2IpMacBindingBlockedEntry=swL2IpMacBindingBlockedEntry, swL2IpMacBindingPortLearningMode=swL2IpMacBindingPortLearningMode, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2IGMPAccessAuthTable=swL2IGMPAccessAuthTable, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2LimitedMulticastRangeTable=swL2LimitedMulticastRangeTable, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2IpMacBindingPermitIPPoolEntry=swL2IpMacBindingPermitIPPoolEntry, swL2IpMacBindingMode=swL2IpMacBindingMode, swL2PPPoEMgmt=swL2PPPoEMgmt, swL2IGMPCtrlEntry=swL2IGMPCtrlEntry, swL2PortCtrlLockState=swL2PortCtrlLockState, swL2IpMacBindingBlockedMac=swL2IpMacBindingBlockedMac, swL2DhcpLocalRelayOption82Table=swL2DhcpLocalRelayOption82Table, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swDevInfoPowerEntry=swDevInfoPowerEntry, swL2PortMgmt=swL2PortMgmt, swL2PortInformationMediumType=swL2PortInformationMediumType, swL2IGMPIpGroupReportCount=swL2IGMPIpGroupReportCount, swL2IpMacBindingStopLearningTrap=swL2IpMacBindingStopLearningTrap, swL2IpMacBindingIpIndex=swL2IpMacBindingIpIndex, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swl2NotifyIpMacBinding=swl2NotifyIpMacBinding, swL2IGMPMaxResponseTime=swL2IGMPMaxResponseTime, swL2DevCtrPasswordRecoveryState=swL2DevCtrPasswordRecoveryState, swL2TrunkIndex=swL2TrunkIndex, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2IGMPCtrlVid=swL2IGMPCtrlVid, swL2IpMacBindingRecoverLearningTrap=swL2IpMacBindingRecoverLearningTrap, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2VlanName=swL2VlanName, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2IpMacBindingAction=swL2IpMacBindingAction, swL2MulticastRangeName=swL2MulticastRangeName, swL2LimitedMulticastRangeName=swL2LimitedMulticastRangeName, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2IpMacBindingDHCPSnoopEntry=swL2IpMacBindingDHCPSnoopEntry, swL2IGMPCtrlState=swL2IGMPCtrlState, swL2PortControlFlowCtrlState=swL2PortControlFlowCtrlState, swL2DhcpLocalRelayOption82RemoteIDType=swL2DhcpLocalRelayOption82RemoteIDType, swL2DhcpRelayOption82Policy=swL2DhcpRelayOption82Policy, swL2VlanAdvertiseState=swL2VlanAdvertiseState, swL2DhcpRelayMgmt=swL2DhcpRelayMgmt, swL2IpMacBindingDHCPSnoopPort=swL2IpMacBindingDHCPSnoopPort, swl2NotificationBidings=swl2NotificationBidings, swL2IGMPInfoVid=swL2IGMPInfoVid, swL2IGMPMulticastVlanid=swL2IGMPMulticastVlanid, swL2IpMacBindingDHCPSnoopEntryClearAllState=swL2IpMacBindingDHCPSnoopEntryClearAllState, swL2DevCtrlLLDPAdviseSystemIP=swL2DevCtrlLLDPAdviseSystemIP, swL2PortControlLockState=swL2PortControlLockState, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2LoopDetectActiveVlanRangeList321to384=swL2LoopDetectActiveVlanRangeList321to384, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2MgmtMIBTrapPrefix=swL2MgmtMIBTrapPrefix, swL2MulticastRangeFromIp=swL2MulticastRangeFromIp, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2IpMacBindingBlockedPort=swL2IpMacBindingBlockedPort, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2IGMPRouterPortForbiddenPortList=swL2IGMPRouterPortForbiddenPortList, swL2PortInfoType=swL2PortInfoType, swL2IGMPRobustness=swL2IGMPRobustness, swL2IGMPRouterPortTable=swL2IGMPRouterPortTable, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2IGMPMulticastVlanReplacePriority=swL2IGMPMulticastVlanReplacePriority, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2MirrorMgmt=swL2MirrorMgmt, swL2MulticastRangeToIp=swL2MulticastRangeToIp, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2DhcpLocalRelayOption82RemoteID=swL2DhcpLocalRelayOption82RemoteID, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2TrafficSegPort=swL2TrafficSegPort, swL2LoopDetectMode=swL2LoopDetectMode, swL2LoopDetectActiveVlan=swL2LoopDetectActiveVlan, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2DhcpRelayCtrlInterfaceName=swL2DhcpRelayCtrlInterfaceName, swL2IGMPInfoTxQueryCount=swL2IGMPInfoTxQueryCount, swL2VlanAdvertisementEntry=swL2VlanAdvertisementEntry, swDevInfoConsoleInUse=swDevInfoConsoleInUse, swL2IGMPRouteTimeout=swL2IGMPRouteTimeout, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2PortInformationLinkStatus=swL2PortInformationLinkStatus, swL2IGMPInfoTable=swL2IGMPInfoTable, swL2IpMacBindingARPInspectionState=swL2IpMacBindingARPInspectionState, swL2MulticastRangeTable=swL2MulticastRangeTable, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2IpMacBindingDHCPSnoopIpIndex=swL2IpMacBindingDHCPSnoopIpIndex, swL2IGMPMulticastVlanRowStatus=swL2IGMPMulticastVlanRowStatus, swL2PortControlAdminState=swL2PortControlAdminState, swL2IGMPInfoQueryCount=swL2IGMPInfoQueryCount, swL2IpMacBindingPortRecoverLearning=swL2IpMacBindingPortRecoverLearning, swL2IpMacBindingPermitIPPoolStartIP=swL2IpMacBindingPermitIPPoolStartIP, swL2PortInformationModuleType=swL2PortInformationModuleType, swL2DhcpLocalRelayVLANTable=swL2DhcpLocalRelayVLANTable, swL2TrafficSegTable=swL2TrafficSegTable, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2QOSSchedulingMaxLatency=swL2QOSSchedulingMaxLatency, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2TrunkName=swL2TrunkName, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2PortControlPortIndex=swL2PortControlPortIndex, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2LimitedMulticastPort=swL2LimitedMulticastPort, swL2IpMacBindingPortTable=swL2IpMacBindingPortTable, swL2LimitedMulticastStatusTable=swL2LimitedMulticastStatusTable, swL2IGMPMacAddr=swL2IGMPMacAddr, swL2PortControlEntry=swL2PortControlEntry, swL2PortInformationTable=swL2PortInformationTable, swL2VlanIndex=swL2VlanIndex, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2MgmtMIB=swL2MgmtMIB, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2LimitedMulticastID=swL2LimitedMulticastID, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2DhcpRelayCtrlTable=swL2DhcpRelayCtrlTable, swL2IpMacBindingViolationTrap=swL2IpMacBindingViolationTrap, swL2DhcpRelayState=swL2DhcpRelayState, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2DhcpRelayCtrlState=swL2DhcpRelayCtrlState, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2IpMacBindingPortAllowZeroIp=swL2IpMacBindingPortAllowZeroIp, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2IpMacBindingPermitIPPoolTable=swL2IpMacBindingPermitIPPoolTable, swL2PortLoopRestart=swL2PortLoopRestart, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2PortControlNwayState=swL2PortControlNwayState, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2IpMacBindingPortStopLearningThreshold=swL2IpMacBindingPortStopLearningThreshold, swL2IGMPLastMemberQueryInterval=swL2IGMPLastMemberQueryInterval, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2IpMacBindingPortDHCPSnoopMaxEntry=swL2IpMacBindingPortDHCPSnoopMaxEntry)
mibBuilder.exportSymbols("DES3550-L2MGMT-MIB", swPowerFailure=swPowerFailure, swL2QOSBandwidthRadiusTxRate=swL2QOSBandwidthRadiusTxRate, swL2DhcpLocalRelayVLANEntry=swL2DhcpLocalRelayVLANEntry, swL2IpMacBindingBlockedType=swL2IpMacBindingBlockedType, swL2PortControlMulticastfilter=swL2PortControlMulticastfilter, swL2IpMacBindingBlockedVlanName=swL2IpMacBindingBlockedVlanName, swL2MirrorPortState=swL2MirrorPortState, swL2IGMPRouterPortVlanid=swL2IGMPRouterPortVlanid, swL2PortInfoUnitIndex=swL2PortInfoUnitIndex, swL2PortCtrlTable=swL2PortCtrlTable, swL2IpMacBindingStatus=swL2IpMacBindingStatus, swPowerStatusChg=swPowerStatusChg, swL2TrunkMgmt=swL2TrunkMgmt, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2IpMacBindingAllPortState=swL2IpMacBindingAllPortState, swL2IpMacBindingDHCPSnoopLeaseTime=swL2IpMacBindingDHCPSnoopLeaseTime, swL2DhcpLocalRelayState=swL2DhcpLocalRelayState, swL2PortControlMdixState=swL2PortControlMdixState, swL2IpMacBindingMac=swL2IpMacBindingMac, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2IGMPGroupActive=swL2IGMPGroupActive, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swL2PortInformationUnitID=swL2PortInformationUnitID, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2LimitedMulticastStatusEntry=swL2LimitedMulticastStatusEntry, swL2PortControlTable=swL2PortControlTable, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2PortSecurityTrapLogState=swL2PortSecurityTrapLogState, swL2MulticastRangeRowStatus=swL2MulticastRangeRowStatus, swDevInfoModuleType=swDevInfoModuleType, swL2IGMPQueryState=swL2IGMPQueryState, swL2LimitedMulticastState=swL2LimitedMulticastState, swPowerRecover=swPowerRecover, swL2LimitedMulticastMgmt=swL2LimitedMulticastMgmt, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2TrunkState=swL2TrunkState, swL2IpMacBindingBlockedTable=swL2IpMacBindingBlockedTable, swL2PortInformationPortIndex=swL2PortInformationPortIndex, swL2PortInfoModuleType=swL2PortInfoModuleType, swL2DhcpRelayCtrlServer=swL2DhcpRelayCtrlServer, swl2NotifyLoopDetect=swl2NotifyLoopDetect, swL2IpMacBindingPorts=swL2IpMacBindingPorts, swL2IGMPQueryInterval=swL2IGMPQueryInterval, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2DhcpLocalRelayVLANID=swL2DhcpLocalRelayVLANID, swL2IGMPMulticastVlanSourcePort=swL2IGMPMulticastVlanSourcePort, swL2IpMacBindingTable=swL2IpMacBindingTable, swL2LimitedMulticastToIp=swL2LimitedMulticastToIp, swL2DevAlarm=swL2DevAlarm, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2PortSecurityMgmt=swL2PortSecurityMgmt, VlanId=VlanId, swL2IpMacBindingPermitIPPoolStatus=swL2IpMacBindingPermitIPPoolStatus, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2IGMPMulticastVlanReplaceSourceIP=swL2IGMPMulticastVlanReplaceSourceIP, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2IGMPRouterPortDynamicPortList=swL2IGMPRouterPortDynamicPortList, swL2IpMacBindingPortIndex=swL2IpMacBindingPortIndex, swL2LoopDetectActiveVlanRangeList449to512=swL2LoopDetectActiveVlanRangeList449to512, swL2IGMPMulticastVlanName=swL2IGMPMulticastVlanName, swDevInfoSystemUpTime=swDevInfoSystemUpTime, swL2DhcpRelayCtrlEntry=swL2DhcpRelayCtrlEntry, swL2DevInfo=swL2DevInfo, swL2LimitedMulticastPortInfo=swL2LimitedMulticastPortInfo, swL2LimitedMulticastRangeEntry=swL2LimitedMulticastRangeEntry, swL2IpMacBindingMgmt=swL2IpMacBindingMgmt, swL2PPPoECirIDinsertState=swL2PPPoECirIDinsertState, swL2QOS8021pRadiusPriority=swL2QOS8021pRadiusPriority, swDevInfoPowerStatus=swDevInfoPowerStatus, swL2IpMacBindingTrapLogState=swL2IpMacBindingTrapLogState, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2IpMacBindingViolationMac=swL2IpMacBindingViolationMac, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2DevMgmt=swL2DevMgmt, swL2IpMacBindingDHCPSnoopMac=swL2IpMacBindingDHCPSnoopMac, swL2IGMPMaxSupportedVlans=swL2IGMPMaxSupportedVlans, swL2IGMPCurrentState=swL2IGMPCurrentState, swL2DhcpLocalRelayOption82Policy=swL2DhcpLocalRelayOption82Policy, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2PortInfoEntry=swL2PortInfoEntry, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swL2LoopDetectActiveVlanRangeList193to256=swL2LoopDetectActiveVlanRangeList193to256)
