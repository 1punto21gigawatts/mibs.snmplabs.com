#
# PySNMP MIB module HPN-ICF-SUBNET-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-SUBNET-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, ObjectIdentity, IpAddress, Unsigned32, MibIdentifier, Counter64, ModuleIdentity, Bits, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "Counter64", "ModuleIdentity", "Bits", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "Integer32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hpnicfSubnetVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61))
hpnicfSubnetVlan.setRevisions(('2005-08-02 13:53',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfSubnetVlan.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfSubnetVlan.setLastUpdated('200508021353Z')
if mibBuilder.loadTexts: hpnicfSubnetVlan.setOrganization('')
if mibBuilder.loadTexts: hpnicfSubnetVlan.setContactInfo('')
if mibBuilder.loadTexts: hpnicfSubnetVlan.setDescription('This MIB contains the objects for managing the subnet-based VLAN configurations.')
hpnicfSubnetVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1))
hpnicfSubnetVlanScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 1))
hpnicfSubnetNumAllVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSubnetNumAllVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetNumAllVlan.setDescription('The maximum number of subnets that can be configured on all VLANs.')
hpnicfSubnetNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSubnetNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetNumPerVlan.setDescription('The maximum number of subnets that can be configured on each VLAN.')
hpnicfSubnetNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSubnetNumAllPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetNumAllPort.setDescription('The maximum number of subnets that can be applied to all ports.')
hpnicfSubnetNumPerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSubnetNumPerPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetNumPerPort.setDescription('The maximum number of subnets that can be applied to each port.')
hpnicfSubnetVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2), )
if mibBuilder.loadTexts: hpnicfSubnetVlanTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanTable.setDescription('Subnet-based VLAN configuration table.')
hpnicfSubnetVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanVlanId"), (0, "HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanSubnetIndex"))
if mibBuilder.loadTexts: hpnicfSubnetVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanEntry.setDescription('Subnet-based VLAN configuration entry.')
hpnicfSubnetVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfSubnetVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanVlanId.setDescription('Vlan id.')
hpnicfSubnetVlanSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfSubnetVlanSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanSubnetIndex.setDescription('The subnet index value of a row in this table is from zero to the value of hpnicfSubnetNumPerVlan subtracting one.')
hpnicfSubnetVlanVlanIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSubnetVlanVlanIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanVlanIpAddressType.setDescription('There are two kinds of ip address supported by VLAN. One is IPv4, which is 32 bits. The other is IPv6, which is 128 bits.')
hpnicfSubnetVlanIpAddressValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSubnetVlanIpAddressValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanIpAddressValue.setDescription('The ip address of the configured subnet on VLAN, which can be an IPv4 or IPv6.')
hpnicfSubnetVlanNetMaskValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSubnetVlanNetMaskValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanNetMaskValue.setDescription('The net mask of the configured subnet on VLAN, which can be an IPv4 or IPv6.')
hpnicfSubnetVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSubnetVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanRowStatus.setDescription('The row status of this table.')
hpnicfSubnetVlanPortCreateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 3), )
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateTable.setDescription('Subnet-based VLAN port table.')
hpnicfSubnetVlanPortCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanPortCreateIndex"), (0, "HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanPortCreateVlanId"))
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateEntry.setDescription('Subnet-based VLAN port creation entry.')
hpnicfSubnetVlanPortCreateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateIndex.setDescription('The port index.')
hpnicfSubnetVlanPortCreateVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateVlanId.setDescription('The subnet-based VLAN id.')
hpnicfSubnetVlanPortInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSubnetVlanPortInfoVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortInfoVlanId.setDescription('This value is the same as the value of hpnicfSubnetVlanPortCreateVlanId index. All of the subnet information in this port, is described on vlan, whose VLAN id is the value of hpnicfSubnetVlanPortInfoVlanId. The VLAN id of vlan including subnet information can be obtained here. The subnet information can be obtained in the hpnicfSubnetVlanTable above.')
hpnicfSubnetVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfSubnetVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortRowStatus.setDescription('The row status of this table.')
hpnicfSubnetVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfSubnetVlanPortStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortStatus.setDescription('The subnet VLAN status on the port. The value is active only when hpnicfSubnetVlanPortCreateVlanId has the corresponding entry in hpnicfSubnetVlanTable, the port link type is hybrid, and the VLAN is allowed by the port. active: subnet VLAN has been applied on the port. inactive: subnet VLAN is not applied on the port.')
hpnicfSubnetVlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 2))
hpnicfSubnetVlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 2, 1))
hpnicfSubnetVlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 2, 1, 1)).setObjects(("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanScalarObjectGroup"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanSubnetGroup"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanPortCreateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfSubnetVlanCompliance = hpnicfSubnetVlanCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanCompliance.setDescription('The compliance statement for subnet VLAN MIB.')
hpnicfSubnetVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 2, 2))
hpnicfSubnetVlanScalarObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 2, 2, 1)).setObjects(("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetNumAllVlan"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetNumPerVlan"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetNumAllPort"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetNumPerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfSubnetVlanScalarObjectGroup = hpnicfSubnetVlanScalarObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanScalarObjectGroup.setDescription('A group of scalar objects describing the maximum number.')
hpnicfSubnetVlanSubnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 2, 2, 2)).setObjects(("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanVlanIpAddressType"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanIpAddressValue"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanNetMaskValue"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfSubnetVlanSubnetGroup = hpnicfSubnetVlanSubnetGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanSubnetGroup.setDescription('A group of subnet VLAN subnets.')
hpnicfSubnetVlanPortCreateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 61, 2, 2, 3)).setObjects(("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanPortInfoVlanId"), ("HPN-ICF-SUBNET-VLAN-MIB", "hpnicfSubnetVlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfSubnetVlanPortCreateGroup = hpnicfSubnetVlanPortCreateGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfSubnetVlanPortCreateGroup.setDescription('A group of subnet VLAN port creation table.')
mibBuilder.exportSymbols("HPN-ICF-SUBNET-VLAN-MIB", hpnicfSubnetNumPerPort=hpnicfSubnetNumPerPort, hpnicfSubnetVlanSubnetIndex=hpnicfSubnetVlanSubnetIndex, hpnicfSubnetVlanRowStatus=hpnicfSubnetVlanRowStatus, hpnicfSubnetVlanPortRowStatus=hpnicfSubnetVlanPortRowStatus, hpnicfSubnetVlanScalarObjectGroup=hpnicfSubnetVlanScalarObjectGroup, hpnicfSubnetVlanCompliances=hpnicfSubnetVlanCompliances, hpnicfSubnetVlanIpAddressValue=hpnicfSubnetVlanIpAddressValue, hpnicfSubnetVlanCompliance=hpnicfSubnetVlanCompliance, hpnicfSubnetVlanTable=hpnicfSubnetVlanTable, hpnicfSubnetVlanVlanIpAddressType=hpnicfSubnetVlanVlanIpAddressType, hpnicfSubnetVlanPortCreateEntry=hpnicfSubnetVlanPortCreateEntry, hpnicfSubnetNumPerVlan=hpnicfSubnetNumPerVlan, hpnicfSubnetVlanConformance=hpnicfSubnetVlanConformance, hpnicfSubnetVlanPortCreateGroup=hpnicfSubnetVlanPortCreateGroup, hpnicfSubnetVlanPortCreateTable=hpnicfSubnetVlanPortCreateTable, hpnicfSubnetNumAllVlan=hpnicfSubnetNumAllVlan, hpnicfSubnetVlanGroups=hpnicfSubnetVlanGroups, hpnicfSubnetVlan=hpnicfSubnetVlan, hpnicfSubnetNumAllPort=hpnicfSubnetNumAllPort, hpnicfSubnetVlanNetMaskValue=hpnicfSubnetVlanNetMaskValue, hpnicfSubnetVlanVlanId=hpnicfSubnetVlanVlanId, hpnicfSubnetVlanPortCreateIndex=hpnicfSubnetVlanPortCreateIndex, hpnicfSubnetVlanEntry=hpnicfSubnetVlanEntry, PYSNMP_MODULE_ID=hpnicfSubnetVlan, hpnicfSubnetVlanPortInfoVlanId=hpnicfSubnetVlanPortInfoVlanId, hpnicfSubnetVlanPortCreateVlanId=hpnicfSubnetVlanPortCreateVlanId, hpnicfSubnetVlanObjects=hpnicfSubnetVlanObjects, hpnicfSubnetVlanPortStatus=hpnicfSubnetVlanPortStatus, hpnicfSubnetVlanScalarObjects=hpnicfSubnetVlanScalarObjects, hpnicfSubnetVlanSubnetGroup=hpnicfSubnetVlanSubnetGroup)
