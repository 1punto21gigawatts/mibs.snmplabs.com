#
# PySNMP MIB module MICOM-MPANL-LMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-MPANL-LMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, TimeTicks, Gauge32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Counter32, ObjectIdentity, Bits, Unsigned32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "TimeTicks", "Gauge32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Counter32", "ObjectIdentity", "Bits", "Unsigned32", "ModuleIdentity", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_mlmi = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 20)).setLabel("micom-mlmi")
mlmi_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1)).setLabel("mlmi-configuration")
mlmi_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 2)).setLabel("mlmi-control")
mlmi_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3)).setLabel("mlmi-statistics")
mlmi_status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4)).setLabel("mlmi-status")
mcmMLMIGenCfg4400Type = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("micom-4400", 1), ("nortel-DPN-4400", 2))).clone('nortel-DPN-4400')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIGenCfg4400Type.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMLMIGenCfg4400Type.setDescription('NAME = ; DESC = ** NOTE:THIS OBJECT IS OBSOLETE AND NO \\ LONGER SUPPORTED IN RELEASE 3.0 AND \\ BEYOND. \\ The value of this object indicates the \\ access devices hardware type for use \\ by the MPANL LMI protocol.\\ (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmMLMIGenCfgSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIGenCfgSoftwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIGenCfgSoftwareRev.setDescription('NAME = ; DESC = This object identifies the MLMI software \\ module revision number. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmMLMIServiceTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3), )
if mibBuilder.loadTexts: mcmMLMIServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceTable.setDescription('NAME = ; DESC = The MPANL LMI Service Configuration Parameters \\ table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "mcmMLMIServiceIfIndex"))
if mibBuilder.loadTexts: mcmMLMIServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Service Configuration \\ Parameters table. (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMIServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIServiceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceIfIndex.setDescription('NAME = ; DESC = The ifIndex of the MPANL LMI interface. \\ (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the MPANL LMI Service Configuration table.) \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMIServiceCUGFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-CUG", 1), ("simple-CUG", 2), ("cUG-selection", 3))).clone('no-CUG')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIServiceCUGFacility.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceCUGFacility.setDescription('NAME = ; DESC = The value of this object indicates the CUG \\ (Close User Group) facility type. (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMIServiceCUGAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-right", 1), ("outgoing-access-right", 2), ("incoming-access-right", 3), ("incoming-outgoing-access-right", 4))).clone('no-right')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIServiceCUGAccess.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceCUGAccess.setDescription('NAME = ; DESC = The value of this object indicates the subscribed \\ CUG access rights. (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMIServiceCUGICType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("national-IC", 1), ("international-IC", 2))).clone('national-IC')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIServiceCUGICType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceCUGICType.setDescription('NAME = ; DESC = The value of this object indicates the CUG \\ Interlock Code type. (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMIServiceCUGIC = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIServiceCUGIC.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceCUGIC.setDescription('NAME = ; DESC = The value of this object indicates the CUG \\ Interlock Codes (in T.50) that belong to the \\ particular access device service. (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMIServiceDNASuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIServiceDNASuffix.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIServiceDNASuffix.setDescription('NAME = ; DESC = The value of this object contains up to \\ 3 bytes of DNA Suffix (in T.50) that is \\ associated with the service. (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6), )
if mibBuilder.loadTexts: mcmMLMINetlinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkTable.setDescription('NAME = ; DESC = The MPANL LMI Netlink Configuration Parameters \\ table. (Operational); HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMLMINetlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "mcmMLMINetlinkIfIndex"))
if mibBuilder.loadTexts: mcmMLMINetlinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Netlink Configuration \\ Parameters table. (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkIfIndex.setDescription('NAME = ; DESC = The value of this object \\ identifies a unique netlink \\ index value in the netlink \\ operational table.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkTunnelingPVCDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkTunnelingPVCDlci.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkTunnelingPVCDlci.setDescription('NAME = ; DESC = The DLCI associated with the \\ tunneling PVC; (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkMpanlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkMpanlMode.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkMpanlMode.setDescription('NAME = ; DESC = The MPANL port mode.; (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkDLCIAssignMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("increment", 1), ("decrement", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkDLCIAssignMethod.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkDLCIAssignMethod.setDescription('NAME = ; DESC = The DLCI assignment method \\ used for the dce option only.; (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkRstrtT316Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkRstrtT316Timer.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkRstrtT316Timer.setDescription('NAME = ; DESC = The value of this object \\ indicates the time in seconds \\ of when the Q.933 Message is \\ restarted.; (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkRstrtAckT317Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkRstrtAckT317Timer.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkRstrtAckT317Timer.setDescription('NAME = ; DESC = The value of this object \\ indicates the time in seconds \\ of when the Q.933 Ack Message is \\ restarted.; (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkNumUnsuccesRstrtAtmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkNumUnsuccesRstrtAtmpts.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkNumUnsuccesRstrtAtmpts.setDescription('NAME = ; DESC = The value of this object \\ indicates the number of \\ unsuccessful restart attempts. \\ (Operational); HELP = ; CAPABILITIES = ;')
nvmMLMIGenCfg4400Type = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("micom-4400", 1), ("nortel-DPN-4400", 2))).clone('nortel-DPN-4400')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMIGenCfg4400Type.setStatus('obsolete')
if mibBuilder.loadTexts: nvmMLMIGenCfg4400Type.setDescription('NAME = ; DESC = ** NOTE:THIS OBJECT IS OBSOLETE AND NO \\ LONGER SUPPORTED IN RELEASE 3.0 AND \\ BEYOND. \\ The value of this object indicates the \\ access devices hardware type for use \\ by the MPANL LMI protocol.\\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmMLMIServiceTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5), )
if mibBuilder.loadTexts: nvmMLMIServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceTable.setDescription('NAME = ; DESC = The MPANL LMI Service Configuration Parameters \\ table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmMLMIServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "nvmMLMIServiceIfIndex"))
if mibBuilder.loadTexts: nvmMLMIServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Service Configuration \\ Parameters table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMIServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmMLMIServiceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceIfIndex.setDescription('NAME = ; DESC = The ifIndex of the MPANL LMI interface. \\ (Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the MPANL LMI Service Configuration table.) \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMIServiceCUGFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-CUG", 1), ("simple-CUG", 2), ("cUG-selection", 3))).clone('no-CUG')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMIServiceCUGFacility.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceCUGFacility.setDescription('NAME = ; DESC = The value of this object indicates the CUG \\ (Close User Group) facility type. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMIServiceCUGAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-right", 1), ("outgoing-access-right", 2), ("incoming-access-right", 3), ("incoming-outgoing-access-right", 4))).clone('no-right')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMIServiceCUGAccess.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceCUGAccess.setDescription('NAME = ; DESC = The value of this object indicates the subscribed \\ CUG access rights. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMIServiceCUGICType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("national-IC", 1), ("international-IC", 2))).clone('national-IC')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMIServiceCUGICType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceCUGICType.setDescription('NAME = ; DESC = The value of this object indicates the CUG \\ Interlock Code type. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMIServiceCUGIC = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMIServiceCUGIC.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceCUGIC.setDescription('NAME = ; DESC = The value of this object indicates the CUG \\ Interlock Codes (in T.50) that belong to the \\ particular access device service. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMIServiceDNASuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMIServiceDNASuffix.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceDNASuffix.setDescription('NAME = ; DESC = The value of this object contains up to \\ 3 bytes of DNA Suffix (in T.50) that is \\ associated with the service. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMIServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMIServiceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMIServiceRowStatus.setDescription('NAME = ; DESC = This object is used to create, modify and delete \\ rows in the nvmMLMIService Table. (Configuration); HELP = The active enumeration only indicates the status \\ of a row. A row is automatically set to active \\ after it is added. To modify a row it must be \\ in the active state.; CAPABILITIES = ;')
nvmMLMINetlinkTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7), )
if mibBuilder.loadTexts: nvmMLMINetlinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkTable.setDescription('NAME = ; DESC = The MPANL LMI Netlink Configuration Parameters \\ table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmMLMINetlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "nvmMLMINetlinkIfIndex"))
if mibBuilder.loadTexts: nvmMLMINetlinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Netlink Configuration \\ Parameters table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMINetlinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmMLMINetlinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkIfIndex.setDescription('NAME = ; DESC = The value of this object \\ identifies a unique netlink \\ index value in the netlink \\ configuration table. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMINetlinkTunnelingPVCDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmMLMINetlinkTunnelingPVCDlci.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkTunnelingPVCDlci.setDescription('NAME = ; DESC = The DLCI associated with the \\ tunneling PVC \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMINetlinkDLCIAssignMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("increment", 1), ("decrement", 2))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMINetlinkDLCIAssignMethod.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkDLCIAssignMethod.setDescription('NAME = ; DESC = The DLCI assignment method \\ used for the dce option only.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMINetlinkRstrtT316Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMINetlinkRstrtT316Timer.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkRstrtT316Timer.setDescription('NAME = ; DESC = The value of this object \\ indicates the time in seconds \\ of when the Q.933 Message is \\ restarted.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMINetlinkRstrtAckT317Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMINetlinkRstrtAckT317Timer.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkRstrtAckT317Timer.setDescription('NAME = ; DESC = The value of this object \\ indicates the time in seconds \\ of when the Q.933 Ack Message is \\ restarted.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMLMINetlinkNumUnsuccesRstrtAtmpts = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMLMINetlinkNumUnsuccesRstrtAtmpts.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMLMINetlinkNumUnsuccesRstrtAtmpts.setDescription('NAME = ; DESC = The value of this object \\ indicates the number of \\ unsuccessful restart attempts. \\ (Configuration); HELP = ; CAPABILITIES = ;')
mcmMLMIStatsActiveVCs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsActiveVCs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsActiveVCs.setDescription('NAME = ; DESC = Counter representing the number of active VCs \\ maintained by the MLMI. HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsRequestedCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsRequestedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsRequestedCalls.setDescription('NAME = ; DESC = Counter representing the number of SL_CONNECT_REQ \\ received by the MLMI from upper applications. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsInitiatedCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsInitiatedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsInitiatedCalls.setDescription('NAME = ; DESC = Counter representing the number of setup messages \\ sent to MPANL masters. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsFailedCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsFailedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsFailedCalls.setDescription('NAME = ; DESC = Counter representing the number of calls \\ rejected by MLMI during establishment phase. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsSucceededCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsSucceededCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsSucceededCalls.setDescription('NAME = ; DESC = Counter representing the number of calls \\ established by MLMI. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsReleasedCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsReleasedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsReleasedCalls.setDescription('NAME = ; DESC = Counter representing the number of call release \\ messages received by MLMI. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsDisconnectedCalls = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsDisconnectedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsDisconnectedCalls.setDescription('NAME = ; DESC = Counter representing the number of disconnect requests \\ received by MLMI from upper applications. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsAdmittedCUGs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsAdmittedCUGs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsAdmittedCUGs.setDescription('NAME = ; DESC = Counter representing the number of admitted calls \\ whose setup messages have the correct CUG. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMIStatsRejectedCUGs = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMIStatsRejectedCUGs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMIStatsRejectedCUGs.setDescription('NAME = ; DESC = Counter representing the number of rejected calls \\ whose setup messages have the wrong CUG. ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
mcmMLMINetlinkStatTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10), )
if mibBuilder.loadTexts: mcmMLMINetlinkStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatTable.setDescription('NAME = ; DESC = The MPANL LMI Netlink Statistic Parameters \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMLMINetlinkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "mcmMLMINetlinkStatIfIndex"))
if mibBuilder.loadTexts: mcmMLMINetlinkStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Netlink \\ Statistic Parameters table.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatIfIndex.setDescription('NAME = ; DESC = The value of this object \\ identifies a unique netlink \\ index value in the netlink \\ statistics table.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxSetup.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxSetup.setDescription('NAME = ; DESC = The number of setup messages \\ received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxSetup.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxSetup.setDescription('NAME = ; DESC = The number of setup messages \\ transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxCallPrcdngs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxCallPrcdngs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxCallPrcdngs.setDescription('NAME = ; DESC = The number of call proceeding \\ messages received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxCallPrcdngs = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxCallPrcdngs.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxCallPrcdngs.setDescription('NAME = ; DESC = The number of call proceeding \\ messages transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxConn.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxConn.setDescription('NAME = ; DESC = The number of connect messages \\ received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxConn.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxConn.setDescription('NAME = ; DESC = The number of connect messages \\ transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxDisConn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxDisConn.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxDisConn.setDescription('NAME = ; DESC = The number of disconnect messages \\ received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxDisConn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxDisConn.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxDisConn.setDescription('NAME = ; DESC = The number of disconnect messages \\ transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxRls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxRls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxRls.setDescription('NAME = ; DESC = The number of release messages \\ received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxRls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxRls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxRls.setDescription('NAME = ; DESC = The number of release messages \\ transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxRlseComp = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxRlseComp.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxRlseComp.setDescription('NAME = ;1 DESC = The number of release complete \\ messages received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxRlseComp = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxRlseComp.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxRlseComp.setDescription('NAME = ; DESC = The number of release complete \\ messages transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxStatusInq = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxStatusInq.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxStatusInq.setDescription('NAME = ; DESC = The number of status inquiry \\ messages received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxStatusInq = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxStatusInq.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxStatusInq.setDescription('NAME = ; DESC = The number of status inquiry \\ messages transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgRxStatus.setDescription('NAME = ; DESC = The number of status requests \\ received.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatMsgTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatMsgTxStatus.setDescription('NAME = ; DESC = The number of status requests \\ transmitted.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatLocalSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatLocalSVC.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatLocalSVC.setDescription('NAME = ; DESC = The number of local SVCs.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatTransitSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatTransitSVC.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatTransitSVC.setDescription('NAME = ; DESC = The number of transit SVCs.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatVoiceCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatVoiceCalls.setDescription('NAME = ; DESC = The number of voice calls \\ on this link.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatLanCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatLanCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatLanCalls.setDescription('NAME = ; DESC = The number of LAN calls on \\ this link.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatRsiCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatRsiCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatRsiCalls.setDescription('NAME = ; DESC = The number of RSI calls on \\ this link.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatSpvcCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatSpvcCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatSpvcCalls.setDescription('NAME = ; DESC = The number of SVC calls on \\ this link.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatLnkupCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatLnkupCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatLnkupCnt.setDescription('NAME = ; DESC = The number of times the \\ MPANL came up.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatLnkDownCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatLnkDownCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatLnkDownCnt.setDescription('NAME = ; DESC = The number of times the \\ MPANL came down.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11), )
if mibBuilder.loadTexts: mcmMLMICircuitStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatTable.setDescription('NAME = ; DESC = The MPANL LMI Circuit Statistic Parameters \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMLMICircuitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "mcmMLMICircuitStatIfIndex"), (0, "MICOM-MPANL-LMI-MIB", "mcmMLMICircuitStatSVCDLCI"))
if mibBuilder.loadTexts: mcmMLMICircuitStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Circuit \\ Statistic Parameters table.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatIfIndex.setDescription('NAME = ; DESC = The value of this object \\ identifies a unique circuit \\ index value in the circuit \\ statistics table.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatSVCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatSVCDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatSVCDLCI.setDescription('NAME = ; DESC = The Data link Connection \\ Identifier(DLCI) for a \\ particular Switched Virtual \\ Circuit(SVC).; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatMsgRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgRxStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgRxStatus.setDescription('NAME = ; DESC = The number of status messages \\ received on a specific SVC.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatMsgTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgTxStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgTxStatus.setDescription('NAME = ; DESC = The number of setup messages \\ transmitted on a specific SVC.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatMsgRxStatusInq = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgRxStatusInq.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgRxStatusInq.setDescription('NAME = ; DESC = The number of status inquiries \\ received on a specific SVC.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatMsgTxStatusInq = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgTxStatusInq.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatMsgTxStatusInq.setDescription('NAME = ; DESC = The number of status inquiries \\ transmitted on a specific SVC.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1), )
if mibBuilder.loadTexts: mcmMLMINetlinkStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusTable.setDescription('NAME = ; DESC = The MPANL LMI Netlink Status Parameters \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMLMINetlinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "mcmMLMINetlinkStatusIfIndex"))
if mibBuilder.loadTexts: mcmMLMINetlinkStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Netlink Status \\ Parameters table.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusIfIndex.setDescription('NAME = ; DESC = The value of this object \\ identifies a unique netlink \\ index value in the netlink \\ status table.; (Operational); HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusMPANLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatusMPANLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusMPANLStatus.setDescription('NAME = ; DESC = The MPANL link status for both \\ DTE and DCE.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusRestartState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rstrtRqstSent", 2), ("rstrtRqstReceived", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatusRestartState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusRestartState.setDescription('NAME = ; DESC = The Q.933 link recovery restart \\ states.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusLAPFState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatusLAPFState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusLAPFState.setDescription('NAME = ; DESC = The LAPF state as seen by \\ MLMI.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusFrCoreState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatusFrCoreState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusFrCoreState.setDescription('NAME = ; DESC = The Frame Relay Core state \\ as seen by MLMI.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusTxThrput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatusTxThrput.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusTxThrput.setDescription('NAME = ; DESC = This object has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ The total throughput in bytes, \\ used for outgoing traffic on \\ the netlink.; HELP = ; CAPABILITIES = ;')
mcmMLMINetlinkStatusRxThrput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMINetlinkStatusRxThrput.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMLMINetlinkStatusRxThrput.setDescription('NAME = ; DESC = This object has been OBSOLETED for software \\ releases beginning with Release 3.0. \\ The total throughput in bytes, \\ for incoming traffic on the \\ netlink.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2), )
if mibBuilder.loadTexts: mcmMLMICircuitStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatusTable.setDescription('NAME = ; DESC = The MPANL LMI Circuit Status Parameters \\ table.; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
mcmMLMICircuitStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1), ).setIndexNames((0, "MICOM-MPANL-LMI-MIB", "mcmMLMICircuitStatusIfIndex"), (0, "MICOM-MPANL-LMI-MIB", "mcmMLMICircuitStatusSVCDLCI"))
if mibBuilder.loadTexts: mcmMLMICircuitStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatusEntry.setDescription('NAME = ; DESC = An entry in the MPANL LMI Circuit Status \\ Parameters table.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatusIfIndex.setDescription('NAME = ; DESC = The value of this object \\ identifies a unique netlink \\ index value in the netlink \\ status table.; HELP = ; CAPABILITIES = ;')
mcmMLMICircuitStatusSVCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircuitStatusSVCDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircuitStatusSVCDLCI.setDescription('NAME = ; DESC = The Data link Connection Identifier(DLCI) for a particular Switched Virtual Circuit(SVC).; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusRejectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusRejectCause.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusRejectCause.setDescription('NAME = ; DESC = The reject cause codes for \\ SVCs.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusSVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rfc1490", 1), ("voice", 2), ("switched", 3), ("rfc1490switched", 4), ("rsi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusSVCType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusSVCType.setDescription('NAME = ; DESC = HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusAttriSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePriority", 1), ("twoPriority", 2), ("threePriority", 3), ("fourPriority", 4), ("fivePriority", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusAttriSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusAttriSetupPriority.setDescription('NAME = ; DESC = Circuit attribute setup priority, \\ where onePriority is highest.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusAttriHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePriority", 1), ("twoPriority", 2), ("threePriority", 3), ("fourPriority", 4), ("fivePriority", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusAttriHoldPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusAttriHoldPriority.setDescription('NAME = ; DESC = Circuit attribute holding priority, \\ where onePriority is highest.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusAttriDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onePriority", 1), ("twoPriority", 2), ("threePriority", 3), ("fourPriority", 4), ("fivePriority", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusAttriDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusAttriDiscardPriority.setDescription('NAME = ; DESC = Circuit attribute discard priority, \\ where priority1 is the highest \\ priority.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusClaimedBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusClaimedBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusClaimedBandWidth.setDescription('NAME = ; DESC = The required bandwidth in bytes \\ for the SVC call.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusQoSTxThrput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusQoSTxThrput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusQoSTxThrput.setDescription('NAME = ; DESC = The transmit throughput \\ granted in bytes.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusQoSRxThrput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusQoSRxThrput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusQoSRxThrput.setDescription('NAME = ; DESC = The received throughput \\ granted in bytes.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusQoSTxBrstSizGrntd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusQoSTxBrstSizGrntd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusQoSTxBrstSizGrntd.setDescription('NAME = ; DESC = The transmit burst size \\ granted in bytes.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusQoSRxBrstSizGrntd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusQoSRxBrstSizGrntd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusQoSRxBrstSizGrntd.setDescription('NAME = ; DESC = The received burst size \\ granted in bytes.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusQoSTxExRateGrntd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusQoSTxExRateGrntd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusQoSTxExRateGrntd.setDescription('NAME = ; DESC = The transmit excess rate \\ granted in bytes.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusQoSRxExRateGrntd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusQoSRxExRateGrntd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusQoSRxExRateGrntd.setDescription('NAME = ; DESC = The received excess rate \\ granted in bytes.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusPeerDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusPeerDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusPeerDLCI.setDescription('NAME = ; DESC = The DLCI number at the other \\ side of the connection.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusPeerNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusPeerNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusPeerNetwork.setDescription('NAME = ; DESC = The Network number at the other \\ side of the connection.; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusCallingDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusCallingDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusCallingDNA.setDescription('NAME = ; DESC = The Calling DNA number associated \\ with the Data link Connection \\ Identifier(DLCI) for a \\ particular Switched Virtual \\ Circuit(SVC).; HELP = ; CAPABILITIES = ;')
mcmMLMICircStatusCalledDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 4, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMLMICircStatusCalledDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMLMICircStatusCalledDNA.setDescription('NAME = ; DESC = The Called DNA number associated \\ with the Data link Connection \\ Identifier(DLCI) for a \\ particular Switched Virtual \\ Circuit(SVC).; HELP = ; CAPABILITIES = ;')
mcmMLMICntrAction = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 20, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmMLMICntrAction.setStatus('obsolete')
if mibBuilder.loadTexts: mcmMLMICntrAction.setDescription('NAME = ; DESC = ** NOTE:THIS OBJECT IS OBSOLETE AND NO \\ LONGER SUPPORTED IN RELEASE 3.0 AND \\ BEYOND. \\ Setting this object to reset(1) will zero \\ the values of the counters in the MPANL \\ LMI Statistics group.; HELP = When set to reset(1), the following counter \\ objects are reset: \\ mcmMLMIStatsActiveVCs \\ mcmMLMIStatsRequestedCalls \\ mcmMLMIStatsInitiatedCalls \\ mcmMLMIStatsFailedCalls \\ mcmMLMIStatsSucceededCalls \\ mcmMLMIStatsReleasedCalls \\ mcmMLMIStatsDisconnectedCalls \\ mcmMLMIStatsAdmittedCUGs \\ mcmMLMIStatsRejectedCUGs; CAPABILITIES = NET_OPER, VPN_OPER;')
mcmLMISVCCallRejected = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 20) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-LMI-MIB", "mcmMLMINetlinkIfIndex"))
if mibBuilder.loadTexts: mcmLMISVCCallRejected.setDescription('NAME = ; DESC = This trap will be generated from the PANL LMI \\ module. It will trigger if a SVC Call is rejected \\ because the outgoing netlink number is \\ identical to the incoming netlink number.\\ Severity Level: MAJOR.; HELP = Please verify the configuration parameters of \\ the netlink number or DNA number.;')
mcmLMIIncompatibleType = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 20) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-LMI-MIB", "mcmMLMINetlinkIfIndex"))
if mibBuilder.loadTexts: mcmLMIIncompatibleType.setDescription('NAME = ; DESC = This trap will be generated from the PANL LMI \\ module. It will trigger if incompatible access devices are connected. \\ Severity Level: MAJOR.; HELP = Check model types for compatiblity.;')
mcmLMIT317TimerExpired = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 20) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-LMI-MIB", "mcmMLMINetlinkIfIndex"))
if mibBuilder.loadTexts: mcmLMIT317TimerExpired.setDescription('NAME = ; DESC = This trap will be generated from PANL LMI \\ module. It will trigger if the T317 timer \\ expires.\\ Severity Level: INFORMATIVE.; HELP = Check to see if all circuits have been cleared.;')
mcmMLMIReachedMaxUnsucessfulRestartAttemps = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 20) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-MPANL-LMI-MIB", "mcmMLMINetlinkIfIndex"))
if mibBuilder.loadTexts: mcmMLMIReachedMaxUnsucessfulRestartAttemps.setDescription('NAME = ; DESC = This trap will be generated from the PANL LMI \\ module. It will trigger if the number of \\ the unsuccessful restart attempts reaches \\ reaches its maximum.\\ Severity Level: INFORMATIVE.; HELP = Check the number of restart attempts allowed \\ in configuration.;')
mibBuilder.exportSymbols("MICOM-MPANL-LMI-MIB", mcmMLMICircStatusRejectCause=mcmMLMICircStatusRejectCause, mcmMLMICircuitStatusEntry=mcmMLMICircuitStatusEntry, mcmMLMICircuitStatusSVCDLCI=mcmMLMICircuitStatusSVCDLCI, nvmMLMINetlinkDLCIAssignMethod=nvmMLMINetlinkDLCIAssignMethod, mcmMLMINetlinkStatMsgTxRlseComp=mcmMLMINetlinkStatMsgTxRlseComp, nvmMLMIServiceCUGICType=nvmMLMIServiceCUGICType, mcmMLMIServiceCUGIC=mcmMLMIServiceCUGIC, nvmMLMINetlinkNumUnsuccesRstrtAtmpts=nvmMLMINetlinkNumUnsuccesRstrtAtmpts, nvmMLMINetlinkRstrtT316Timer=nvmMLMINetlinkRstrtT316Timer, mcmMLMIStatsRejectedCUGs=mcmMLMIStatsRejectedCUGs, mcmMLMINetlinkStatusEntry=mcmMLMINetlinkStatusEntry, nvmMLMIServiceIfIndex=nvmMLMIServiceIfIndex, mcmMLMINetlinkStatusRestartState=mcmMLMINetlinkStatusRestartState, mcmMLMINetlinkStatMsgRxStatusInq=mcmMLMINetlinkStatMsgRxStatusInq, mcmMLMINetlinkStatMsgRxCallPrcdngs=mcmMLMINetlinkStatMsgRxCallPrcdngs, nvmMLMINetlinkRstrtAckT317Timer=nvmMLMINetlinkRstrtAckT317Timer, mcmMLMINetlinkStatLanCalls=mcmMLMINetlinkStatLanCalls, mcmMLMIServiceEntry=mcmMLMIServiceEntry, mcmMLMIGenCfgSoftwareRev=mcmMLMIGenCfgSoftwareRev, mcmMLMIServiceCUGAccess=mcmMLMIServiceCUGAccess, mcmMLMINetlinkStatTable=mcmMLMINetlinkStatTable, mcmMLMINetlinkStatLnkupCnt=mcmMLMINetlinkStatLnkupCnt, mcmMLMINetlinkTable=mcmMLMINetlinkTable, micom_mlmi=micom_mlmi, mlmi_status=mlmi_status, mcmMLMIServiceTable=mcmMLMIServiceTable, mcmMLMIStatsInitiatedCalls=mcmMLMIStatsInitiatedCalls, mcmMLMINetlinkStatSpvcCalls=mcmMLMINetlinkStatSpvcCalls, mcmMLMICircuitStatusIfIndex=mcmMLMICircuitStatusIfIndex, mcmMLMINetlinkStatusFrCoreState=mcmMLMINetlinkStatusFrCoreState, mcmMLMIServiceCUGFacility=mcmMLMIServiceCUGFacility, mcmLMIIncompatibleType=mcmLMIIncompatibleType, mcmMLMICircStatusQoSTxBrstSizGrntd=mcmMLMICircStatusQoSTxBrstSizGrntd, mcmMLMIServiceIfIndex=mcmMLMIServiceIfIndex, mcmMLMINetlinkStatusIfIndex=mcmMLMINetlinkStatusIfIndex, mcmMLMINetlinkStatusTxThrput=mcmMLMINetlinkStatusTxThrput, mcmMLMINetlinkStatIfIndex=mcmMLMINetlinkStatIfIndex, mcmMLMINetlinkStatMsgRxConn=mcmMLMINetlinkStatMsgRxConn, nvmMLMINetlinkIfIndex=nvmMLMINetlinkIfIndex, mcmMLMICircStatusAttriHoldPriority=mcmMLMICircStatusAttriHoldPriority, mcmMLMINetlinkEntry=mcmMLMINetlinkEntry, mcmMLMINetlinkStatTransitSVC=mcmMLMINetlinkStatTransitSVC, mcmMLMIReachedMaxUnsucessfulRestartAttemps=mcmMLMIReachedMaxUnsucessfulRestartAttemps, nvmMLMINetlinkTable=nvmMLMINetlinkTable, mlmi_configuration=mlmi_configuration, mlmi_control=mlmi_control, mcmMLMINetlinkStatMsgTxCallPrcdngs=mcmMLMINetlinkStatMsgTxCallPrcdngs, mcmMLMICircStatusQoSRxExRateGrntd=mcmMLMICircStatusQoSRxExRateGrntd, nvmMLMIGenCfg4400Type=nvmMLMIGenCfg4400Type, mcmMLMICircuitStatMsgRxStatusInq=mcmMLMICircuitStatMsgRxStatusInq, mcmMLMICircuitStatMsgRxStatus=mcmMLMICircuitStatMsgRxStatus, mcmMLMINetlinkStatusRxThrput=mcmMLMINetlinkStatusRxThrput, mcmMLMICircStatusAttriSetupPriority=mcmMLMICircStatusAttriSetupPriority, nvmMLMIServiceRowStatus=nvmMLMIServiceRowStatus, mcmMLMINetlinkStatVoiceCalls=mcmMLMINetlinkStatVoiceCalls, mcmMLMINetlinkNumUnsuccesRstrtAtmpts=mcmMLMINetlinkNumUnsuccesRstrtAtmpts, mcmMLMINetlinkStatMsgTxRls=mcmMLMINetlinkStatMsgTxRls, mcmMLMINetlinkStatLocalSVC=mcmMLMINetlinkStatLocalSVC, mlmi_statistics=mlmi_statistics, mcmMLMICircStatusCallingDNA=mcmMLMICircStatusCallingDNA, mcmMLMICircuitStatTable=mcmMLMICircuitStatTable, mcmMLMIStatsActiveVCs=mcmMLMIStatsActiveVCs, mcmMLMIServiceDNASuffix=mcmMLMIServiceDNASuffix, nvmMLMIServiceTable=nvmMLMIServiceTable, mcmMLMICircStatusAttriDiscardPriority=mcmMLMICircStatusAttriDiscardPriority, mcmMLMINetlinkRstrtAckT317Timer=mcmMLMINetlinkRstrtAckT317Timer, mcmMLMINetlinkStatMsgRxRls=mcmMLMINetlinkStatMsgRxRls, mcmMLMICircuitStatEntry=mcmMLMICircuitStatEntry, mcmMLMICircStatusQoSRxThrput=mcmMLMICircStatusQoSRxThrput, mcmMLMIServiceCUGICType=mcmMLMIServiceCUGICType, mcmMLMICircStatusPeerDLCI=mcmMLMICircStatusPeerDLCI, mcmMLMINetlinkStatMsgRxDisConn=mcmMLMINetlinkStatMsgRxDisConn, mcmMLMICircuitStatIfIndex=mcmMLMICircuitStatIfIndex, mcmLMIT317TimerExpired=mcmLMIT317TimerExpired, mcmMLMICircStatusSVCType=mcmMLMICircStatusSVCType, mcmMLMINetlinkStatMsgTxSetup=mcmMLMINetlinkStatMsgTxSetup, mcmLMISVCCallRejected=mcmLMISVCCallRejected, mcmMLMICircStatusQoSTxExRateGrntd=mcmMLMICircStatusQoSTxExRateGrntd, mcmMLMICircStatusQoSTxThrput=mcmMLMICircStatusQoSTxThrput, mcmMLMINetlinkStatusLAPFState=mcmMLMINetlinkStatusLAPFState, mcmMLMINetlinkStatusTable=mcmMLMINetlinkStatusTable, mcmMLMICircuitStatSVCDLCI=mcmMLMICircuitStatSVCDLCI, mcmMLMICircuitStatusTable=mcmMLMICircuitStatusTable, mcmMLMINetlinkTunnelingPVCDlci=mcmMLMINetlinkTunnelingPVCDlci, mcmMLMINetlinkStatLnkDownCnt=mcmMLMINetlinkStatLnkDownCnt, nvmMLMINetlinkEntry=nvmMLMINetlinkEntry, mcmMLMINetlinkStatMsgRxStatus=mcmMLMINetlinkStatMsgRxStatus, mcmMLMICircuitStatMsgTxStatusInq=mcmMLMICircuitStatMsgTxStatusInq, mcmMLMINetlinkStatMsgTxStatusInq=mcmMLMINetlinkStatMsgTxStatusInq, mcmMLMINetlinkMpanlMode=mcmMLMINetlinkMpanlMode, mcmMLMINetlinkDLCIAssignMethod=mcmMLMINetlinkDLCIAssignMethod, mcmMLMIStatsReleasedCalls=mcmMLMIStatsReleasedCalls, nvmMLMINetlinkTunnelingPVCDlci=nvmMLMINetlinkTunnelingPVCDlci, mcmMLMICircStatusPeerNetwork=mcmMLMICircStatusPeerNetwork, mcmMLMICircStatusClaimedBandWidth=mcmMLMICircStatusClaimedBandWidth, mcmMLMICircuitStatMsgTxStatus=mcmMLMICircuitStatMsgTxStatus, mcmMLMINetlinkRstrtT316Timer=mcmMLMINetlinkRstrtT316Timer, nvmMLMIServiceEntry=nvmMLMIServiceEntry, mcmMLMINetlinkStatRsiCalls=mcmMLMINetlinkStatRsiCalls, mcmMLMINetlinkStatMsgTxDisConn=mcmMLMINetlinkStatMsgTxDisConn, mcmMLMICircStatusCalledDNA=mcmMLMICircStatusCalledDNA, mcmMLMIStatsSucceededCalls=mcmMLMIStatsSucceededCalls, mcmMLMINetlinkIfIndex=mcmMLMINetlinkIfIndex, mcmMLMINetlinkStatMsgRxRlseComp=mcmMLMINetlinkStatMsgRxRlseComp, mcmMLMICntrAction=mcmMLMICntrAction, mcmMLMICircStatusQoSRxBrstSizGrntd=mcmMLMICircStatusQoSRxBrstSizGrntd, mcmMLMIStatsAdmittedCUGs=mcmMLMIStatsAdmittedCUGs, nvmMLMIServiceCUGFacility=nvmMLMIServiceCUGFacility, mcmMLMINetlinkStatEntry=mcmMLMINetlinkStatEntry, nvmMLMIServiceCUGAccess=nvmMLMIServiceCUGAccess, mcmMLMIStatsRequestedCalls=mcmMLMIStatsRequestedCalls, mcmMLMINetlinkStatMsgTxStatus=mcmMLMINetlinkStatMsgTxStatus, mcmMLMIStatsFailedCalls=mcmMLMIStatsFailedCalls, mcmMLMIStatsDisconnectedCalls=mcmMLMIStatsDisconnectedCalls, mcmMLMINetlinkStatMsgRxSetup=mcmMLMINetlinkStatMsgRxSetup, nvmMLMIServiceCUGIC=nvmMLMIServiceCUGIC, mcmMLMIGenCfg4400Type=mcmMLMIGenCfg4400Type, mcmMLMINetlinkStatusMPANLStatus=mcmMLMINetlinkStatusMPANLStatus, nvmMLMIServiceDNASuffix=nvmMLMIServiceDNASuffix, mcmMLMINetlinkStatMsgTxConn=mcmMLMINetlinkStatMsgTxConn)
