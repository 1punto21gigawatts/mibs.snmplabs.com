#
# PySNMP MIB module HP-SN-ROUTER-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-MIBS
# Produced by pysmi-0.3.4 at Wed May  1 13:36:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
snOspfVirtNbrArea, snOspfVirtIfStatusNeighbor, snOspfVirtIfStatusAreaID, snOspfLsdbType, snOspfNbrIpAddr, snOspfVirtIfStatusState, snOspfExtLsdbLimit, snOspfNbrState, snOspfVirtNbrRtrId, snOspfNbrRtrId, snOspfPacketType, snOspfIfStatusState, snOspfRouterId, snOspfIfStatusIpAddress, snOspfPacketSrc, snOspfConfigErrorType, snOspfVirtNbrState, snOspfLsdbRouterId, snOspfLsdbLsId, snOspfLsdbAreaId = mibBuilder.importSymbols("HP-SN-OSPF-GROUP-MIB", "snOspfVirtNbrArea", "snOspfVirtIfStatusNeighbor", "snOspfVirtIfStatusAreaID", "snOspfLsdbType", "snOspfNbrIpAddr", "snOspfVirtIfStatusState", "snOspfExtLsdbLimit", "snOspfNbrState", "snOspfVirtNbrRtrId", "snOspfNbrRtrId", "snOspfPacketType", "snOspfIfStatusState", "snOspfRouterId", "snOspfIfStatusIpAddress", "snOspfPacketSrc", "snOspfConfigErrorType", "snOspfVirtNbrState", "snOspfLsdbRouterId", "snOspfLsdbLsId", "snOspfLsdbAreaId")
hp, = mibBuilder.importSymbols("HP-SN-ROOT-MIB", "hp")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, TimeTicks, Integer32, NotificationType, Unsigned32, iso, Counter64, Gauge32, ObjectIdentity, Counter32, IpAddress, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "TimeTicks", "Integer32", "NotificationType", "Unsigned32", "iso", "Counter64", "Gauge32", "ObjectIdentity", "Counter32", "IpAddress", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snTrapOspfIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,3)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("HP-SN-OSPF-GROUP-MIB", "snOspfIfStatusState"))
if mibBuilder.loadTexts: snTrapOspfIfStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of a non-virtual OSPF interface. This trap should be generated when the interface state regresses (e.g., goes from Dr to Down) or progresses to a terminal state (i.e., Point-to-Point, DR Other, Dr, or Backup).')
snTrapOspfVirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,4)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusState"))
if mibBuilder.loadTexts: snTrapOspfVirtIfStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual interface. This trap should be generated when the inter- face state regresses (e.g., goes from Point- to-Point to Down) or progresses to a terminal state (i.e., Point-to-Point).')
snOspfNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,5)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfNbrIpAddr"), ("HP-SN-OSPF-GROUP-MIB", "snOspfNbrRtrId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfNbrState"))
if mibBuilder.loadTexts: snOspfNbrStateChange.setDescription('An ospfNbrStateChange trap signifies that there has been a change in the state of a non- virtual OSPF neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., 2-Way or Full). When an neighbor transitions from or to Full on non-broadcast multi-access and broadcast networks, the trap should be gen- erated by the designated router. A designated router transitioning to Down will be noted by ospfIfStateChange.')
snOspfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,6)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtNbrArea"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtNbrRtrId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtNbrState"))
if mibBuilder.loadTexts: snOspfVirtNbrStateChange.setDescription('An ospfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., Full).')
snOspfIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,7)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("HP-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfConfigError.setDescription("An ospfIfConfigError trap signifies that a packet has been received on a non-virtual in- terface from a router whose configuration parameters conflict with this router's confi- guration parameters. Note that the event op- tionMismatch should cause a trap only if it prevents an adjacency from forming.")
snOspfVirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,8)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("HP-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfConfigError.setDescription("An ospfConfigError trap signifies that a pack- et has been received on a virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a trap only if it prevents an ad- jacency from forming.")
snOspfIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,9)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("HP-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfAuthFailure.setDescription("An ospfIfAuthFailure trap signifies that a packet has been received on a non-virtual in- terface from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type.")
snOspfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,10)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("HP-SN-OSPF-GROUP-MIB", "snOspfConfigErrorType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfAuthFailure.setDescription("An ospfVirtIfAuthFailure trap signifies that a packet has been received on a virtual interface from a router whose authentication key or au- thentication type conflicts with this router's authentication key or authentication type.")
snOspfIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,11)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketSrc"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfIfRxBadPacket.setDescription('An ospfIfRxBadPacket trap signifies that an OSPF packet has been received on a non-virtual interface that cannot be parsed.')
snOspfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,12)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"))
if mibBuilder.loadTexts: snOspfVirtIfRxBadPacket.setDescription('An ospfRxBadPacket trap signifies that an OSPF packet has been received on a virtual interface that cannot be parsed.')
snOspfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,13)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfIfStatusIpAddress"), ("HP-SN-OSPF-GROUP-MIB", "snOspfNbrRtrId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfTxRetransmit.setDescription('An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a non- virtual interface. All packets that may be re- transmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
ospfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,14)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusAreaID"), ("HP-SN-OSPF-GROUP-MIB", "snOspfVirtIfStatusNeighbor"), ("HP-SN-OSPF-GROUP-MIB", "snOspfPacketType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: ospfVirtIfTxRetransmit.setDescription('An ospfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a virtual interface. All packets that may be retransmit- ted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
snOspfOriginateLsa = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,15)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbAreaId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfOriginateLsa.setDescription('An ospfOriginateLsa trap signifies that a new LSA has been originated by this router. This trap should not be invoked for simple refreshes of LSAs (which happesn every 30 minutes), but instead will only be invoked when an LSA is (re)originated due to a topology change. Addi- tionally, this trap does not include LSAs that are being flushed because they have reached MaxAge.')
snOspfMaxAgeLsa = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,16)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbAreaId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbType"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbLsId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfLsdbRouterId"))
if mibBuilder.loadTexts: snOspfMaxAgeLsa.setDescription("An ospfMaxAgeLsa trap signifies that one of the LSA in the router's link-state database has aged to MaxAge.")
snOspfLsdbOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,17)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfExtLsdbLimit"))
if mibBuilder.loadTexts: snOspfLsdbOverflow.setDescription("An ospfLsdbOverflow trap signifies that the number of LSAs in the router's link-state data- base has exceeded ospfExtLsdbLimit.")
snOspfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11) + (0,18)).setObjects(("HP-SN-OSPF-GROUP-MIB", "snOspfRouterId"), ("HP-SN-OSPF-GROUP-MIB", "snOspfExtLsdbLimit"))
if mibBuilder.loadTexts: snOspfLsdbApproachingOverflow.setDescription("An ospfLsdbApproachingOverflow trap signifies that the number of LSAs in the router's link- state database has exceeded ninety percent of ospfExtLsdbLimit.")
mibBuilder.exportSymbols("HP-SN-ROUTER-TRAP-MIB", snOspfTxRetransmit=snOspfTxRetransmit, snOspfIfConfigError=snOspfIfConfigError, snOspfIfAuthFailure=snOspfIfAuthFailure, snOspfLsdbApproachingOverflow=snOspfLsdbApproachingOverflow, snOspfLsdbOverflow=snOspfLsdbOverflow, snOspfVirtIfRxBadPacket=snOspfVirtIfRxBadPacket, snOspfIfRxBadPacket=snOspfIfRxBadPacket, snOspfNbrStateChange=snOspfNbrStateChange, snTrapOspfIfStateChange=snTrapOspfIfStateChange, ospfVirtIfTxRetransmit=ospfVirtIfTxRetransmit, snTrapOspfVirtIfStateChange=snTrapOspfVirtIfStateChange, snOspfVirtIfConfigError=snOspfVirtIfConfigError, snOspfVirtIfAuthFailure=snOspfVirtIfAuthFailure, snOspfMaxAgeLsa=snOspfMaxAgeLsa, snOspfVirtNbrStateChange=snOspfVirtNbrStateChange, snOspfOriginateLsa=snOspfOriginateLsa)
