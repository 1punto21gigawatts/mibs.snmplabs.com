#
# PySNMP MIB module HUAWEI-RRPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-RRPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, ifName = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifName")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, NotificationType, iso, Bits, IpAddress, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, MibIdentifier, Gauge32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "iso", "Bits", "IpAddress", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "MibIdentifier", "Gauge32", "ObjectIdentity", "Counter64")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hwRrpp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113))
hwRrpp.setRevisions(('2015-03-23 00:00', '2013-09-07 00:00', '2013-06-17 00:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwRrpp.setRevisionsDescriptions(('Add new node hwRrppRingSingleDirectionFail', 'Fix the errors checked by a tool.', 'Add new node hwRrppDomainDescription',))
if mibBuilder.loadTexts: hwRrpp.setLastUpdated('201503230000Z')
if mibBuilder.loadTexts: hwRrpp.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwRrpp.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwRrpp.setDescription('The RRPP (Rapid Ring Protection protocol) provides fast protection switching to layer 2 switches interconnected in an Ethernet ring topology. When a link in the ring breaks, the RRPP can recover the data path quickly. Its protection switching is similar to what can be achieved with the Spanning Tree Protocol (STP), but the converging time is less than a second after link failure. This MIB defines management information used on products which support RRPP.')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hwRrppScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 1))
hwRrppEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRrppEnableStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppEnableStatus.setDescription('Indicating whether the RRPP is enabled on this switch.')
hwRrppLinkupDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRrppLinkupDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwRrppLinkupDelayTime.setDescription('This value indicates the delay when ports change to Up. The value of this node ranges with products. The default value is 0.')
hwRrppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2))
hwRrppDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1), )
if mibBuilder.loadTexts: hwRrppDomainTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainTable.setDescription('A table containing information about configurations and status of a RRPP domain.')
hwRrppDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppDomainID"))
if mibBuilder.loadTexts: hwRrppDomainEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainEntry.setDescription('Detailed information of a specified RRPP domain.')
hwRrppDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwRrppDomainID.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainID.setDescription("An index uniquely identifies a RRPP domain. This value can't be modified after created.")
hwRrppDomainControlVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4093), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppDomainControlVlanID.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainControlVlanID.setDescription("Index of the control VLAN specified to a domain. The value 65535 indicates the control VLAN has not been configured. The VLAN assigned to a RRPP Domain must not have been created. This value can't be modified after created.")
hwRrppDomainHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppDomainHelloTime.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainHelloTime.setDescription('The value indicates the interval between two hello packets sent by master-node, and its unit is second. The value ranges from 1s~10s.')
hwRrppDomainFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppDomainFailTime.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainFailTime.setDescription("The expiration value of the fail-period timer and its unit is second. If not receiving hello packets before this expires, the master-node considers the ring is broken. The value of this node ranges with products, which must not be less than triple hwRrppDomainHelloTime's value.")
hwRrppDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreatAndGo, destroy operation.')
hwRrppDomainResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("unused", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppDomainResetStatistics.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainResetStatistics.setDescription('Clears the statistics of packets received and sent on the current domain.')
hwRrppMulSubRingProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 7), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppMulSubRingProtection.setStatus('current')
if mibBuilder.loadTexts: hwRrppMulSubRingProtection.setDescription('Indicating whether the rrpp mul-sub-ring protection is enabled on this switch.')
hwRrppDomainProtectedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppDomainProtectedVlan.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainProtectedVlan.setDescription('Information of instance index protected by a domain. The instance index ranging from 0 to 48 is listed in a character string in order. The value of each character can be either 0 or 1. Character 0 indicates that the corresponding instance is not proteced while character 1 indicates that the corresponding instance is proteced. For example, set character string 00101 to protect instance 2 and instance 4, and not to protect the rest of instances.')
hwRrppDomainDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppDomainDescription.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainDescription.setDescription('A textual description of the RRPP domain. It is mandatory that this only contain no more than 255 printable ASCII characters.')
hwRrppRingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2), )
if mibBuilder.loadTexts: hwRrppRingTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingTable.setDescription('A table containing information about configurations and status of a RRPP Ring.')
hwRrppRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppDomainID"), (0, "HUAWEI-RRPP-MIB", "hwRrppRingID"))
if mibBuilder.loadTexts: hwRrppRingEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingEntry.setDescription('Detailed information of a specified RRPP Ring.')
hwRrppRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwRrppRingID.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingID.setDescription("An index uniquely identifies a RRPP Ring. This value can't be modified after created.")
hwRrppRingEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 2), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingEnableStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingEnableStatus.setDescription('Indicating whether the RRPP is enabled on this Ring. NOTE: If major-ring and sub-ring(s) of a domain coexist on a switch, major-ring must be enabled before sub-ring is enabled. And sub-ring must be disabled before major-ring is disabled.')
hwRrppRingActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppRingActive.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingActive.setDescription('As both hwRrppEnableStatus and hwRrppRingEnableStatus are enabled, the ring is activated. Whereas either of the two items is disabled, the ring is inactive.')
hwRrppRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("health", 2), ("fault", 3), ("complete", 4), ("failed", 5), ("linkup", 6), ("linkdown", 7), ("preforwarding", 8), ("linkupnotify", 9), ("linkdownnotify", 10), ("preforwardnotify", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppRingState.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingState.setDescription('The status (i.e. unknown, health or fault) of the Ethernet ring.')
hwRrppRingNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("transit", 2), ("edge", 3), ("assistantEdge", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingNodeMode.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingNodeMode.setDescription("There are four RRPP node modes for the switch on a RRPP ring, such as master, transit, edge and assistant-edge. Each RRPP ring has a single designated master-node. All other nodes except edge-node and assistant-edge-node on that ring are referred to as transit-nodes. The node mode of edge and assistant-edge should be configured only on sub-ring. When there is a common link between a sub-ring and its major-ring, the node mode of the sub-ring must be edge or assistant-edge, and they must be configured in pairs. If node mode is designated as edge or assistant-edge, several points should be noticed: Major-ring must be created before a sub-ring is created; Major-ring can't be deleted unless all its sub-rings are deleted; The node mode of the switch on major-ring must be transit; Major-ring and sub-ring must have only a common port. This value can't be modified after created.")
hwRrppRingPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 6), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingPrimaryPort.setDescription("If the switch is a master-node or transit-node, this value is ifIndex of the primary port; otherwise, if the switch is an edge-node or assistant-edge-node, this value is ifIndex of the common port. This value is 0, if the port doesn't exist. This value can't be modified after created.")
hwRrppRingSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 7), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingSecondaryPort.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingSecondaryPort.setDescription("If the switch is a master-node or transit-node, this value is ifIndex of the secondary port; otherwise, if the switch is an edge-node or assistant-edge-node, this value is ifIndex of the edge port. This value is 0, if the port doesn't exist. This value can't be modified after created.")
hwRrppRingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("majorRing", 0), ("subRing", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingLevel.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingLevel.setDescription("Level of a ring. This field should be set 0 on major-ring and 1 on the sub-ring. This value can't be modified after created.")
hwRrppRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreatAndGo, destroy operation. To create a new row, hwRrppRingNodeMode, hwRrppRingPrimaryPort, hwRrppRingSecondaryPort and hwRrppRingLevel must be specified.')
hwRrppRingResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("unused", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingResetStatistics.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingResetStatistics.setDescription('Clears the statistics of packets received and sent on the current ring.')
hwRrppPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3), )
if mibBuilder.loadTexts: hwRrppPortTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTable.setDescription('A table containing information about configurations and status of a RRPP port.')
hwRrppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppDomainID"), (0, "HUAWEI-RRPP-MIB", "hwRrppRingID"), (0, "HUAWEI-RRPP-MIB", "hwRrppPortID"))
if mibBuilder.loadTexts: hwRrppPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortEntry.setDescription('Detailed information of a specified RRPP port.')
hwRrppPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwRrppPortID.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortID.setDescription('Logical index of the interface index.')
hwRrppPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("fe", 1), ("ge", 2), ("ve", 3), ("ethtrunk", 4), ("xge", 5), ("x40ge", 6), ("x100ge", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortType.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortType.setDescription('The interface type of the RRPP port. (i.e. FE, GE, VE, Eth-Trunk, XGE and etc).')
hwRrppPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("common", 3), ("edge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRole.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRole.setDescription('The RRPP role of the port. (i.e. primary, secondary, common or edge port).')
hwRrppPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("unblocked", 2), ("blocked", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortState.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortState.setDescription('State of RRPP port, including unknown, unblocked, blocked and down.')
hwRrppPortRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXError.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXError.setDescription('The statistics of illegal RRPP packets received from this port.')
hwRrppPortRXHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXHello.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXHello.setDescription('The statistics of hello packets received from this port on specified ring.')
hwRrppPortRXLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXLinkUp.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXLinkUp.setDescription('The statistics of link-up packets received from this port on specified ring.')
hwRrppPortRXLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXLinkDown.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXLinkDown.setDescription('The statistics of link-down packets received from this port on specified ring.')
hwRrppPortRXCommonFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXCommonFlush.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXCommonFlush.setDescription("The statistics of common-flush packets received from this port on specified ring. Instruction When master-node receives valid link-down packets or link-up packets, it will send common-flush packets, instructing the other nodes on the ring to flush their forwarding database. When the nodes except master-node receive common-flush, they will flush forwarding database. If there is any port blocked on that node, it won't be unblocked.")
hwRrppPortRXCompleteFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXCompleteFlush.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXCompleteFlush.setDescription('The statistics of complete-flush packets received from this port on specified ring. Instruction When the ring recovers, master-node will receive its own hello packets. It will send complete-flush packets, instructing the other nodes on the ring to flush their forwarding database. When the nodes except master-node receive complete-flush, they will flush forwarding database. If there is any port blocked on that node, it will be unblocked.')
hwRrppPortRXEdgeHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXEdgeHello.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXEdgeHello.setDescription('The statistics of edge-hello packets received from this port on specified ring. Instruction When edge-node sends edge-hello packets, assistantEdge-node will receive its own edge-hello packets from the common link and the master ring.')
hwRrppPortRXMajorFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortRXMajorFault.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortRXMajorFault.setDescription("The statistics of major-fault packets received from this port on specified ring. Instruction When assistantEdge can't receive edge-hello packets in the specified fault-time, assistantEdge-node will send its own major-fault packets from the edge port around the sub ring. Edge-node will receive the major-fault packets from its edge port. Then Edge-node will block its edge port.")
hwRrppPortTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXError.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXError.setDescription('The statistics of RRPP packets failed to send out of this port.')
hwRrppPortTXHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXHello.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXHello.setDescription('The statistics of hello packets sent from this port on specified ring.')
hwRrppPortTXLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXLinkUp.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXLinkUp.setDescription('The statistics of link-up packets sent from this port on specified ring.')
hwRrppPortTXLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXLinkDown.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXLinkDown.setDescription('The statistics of link-down packets sent from this port on specified ring.')
hwRrppPortTXCommonFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXCommonFlush.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXCommonFlush.setDescription('The statistics of common-flush packets sent from this port on specified ring.')
hwRrppPortTXCompleteFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXCompleteFlush.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXCompleteFlush.setDescription('The statistics of complete-flush packets sent from this port on specified ring.')
hwRrppPortTXEdgeHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXEdgeHello.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXEdgeHello.setDescription('The statistics of edge-hello packets sent from this port on specified ring.')
hwRrppPortTXMajorFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppPortTXMajorFault.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortTXMajorFault.setDescription('The statistics of major-fault packets sent from this port on specified ring.')
hwRrppTrackInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 4), )
if mibBuilder.loadTexts: hwRrppTrackInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppTrackInterfaceTable.setDescription('A table containing information about tracking port.')
hwRrppTrackInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 4, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppDomainID"), (0, "HUAWEI-RRPP-MIB", "hwRrppRingID"), (0, "HUAWEI-RRPP-MIB", "hwRrppTrackInterfaceID"))
if mibBuilder.loadTexts: hwRrppTrackInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppTrackInterfaceEntry.setDescription('Detailed information of a specified RRPP track interface.')
hwRrppTrackInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwRrppTrackInterfaceID.setStatus('current')
if mibBuilder.loadTexts: hwRrppTrackInterfaceID.setDescription('Logical index of track interface.')
hwRrppTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppTrackRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreatAndGo, destroy operation.')
hwRrppRingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 5), )
if mibBuilder.loadTexts: hwRrppRingGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupTable.setDescription('A table containing information about an RRPP ring group and created without the domain or ring.')
hwRrppRingGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 5, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppRingGroupID"))
if mibBuilder.loadTexts: hwRrppRingGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupEntry.setDescription('Detailed information about a specified RRPP ring group.')
hwRrppRingGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hwRrppRingGroupID.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupID.setDescription("index of the RRPP ring group. This value can't be modified after created.")
hwRrppRingGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupRowStatus.setDescription('Row status in the ring group configuration table. hwRrppRingGroupID must be specified to create a row.')
hwRrppRingGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 6), )
if mibBuilder.loadTexts: hwRrppRingGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupMemberTable.setDescription('A table containing information about the configurations and status of an RRPP ring.')
hwRrppRingGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 6, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppRingGroupID"), (0, "HUAWEI-RRPP-MIB", "hwRrppRingGroupMemberDomainID"), (0, "HUAWEI-RRPP-MIB", "hwRrppRingGroupMemberRingID"))
if mibBuilder.loadTexts: hwRrppRingGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupMemberEntry.setDescription('Detailed information about a specified RRPP ring group.')
hwRrppRingGroupMemberDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hwRrppRingGroupMemberDomainID.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupMemberDomainID.setDescription('Index, namely, domain ID of the members of a ring group. This value cannot be modified after created.')
hwRrppRingGroupMemberRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: hwRrppRingGroupMemberRingID.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupMemberRingID.setDescription('Index, namely, ring ID of the members of a ring group. This value cannot be modified after created.')
hwRrppRingGroupIsEdgeHelloProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 6, 1, 3), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppRingGroupIsEdgeHelloProcess.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupIsEdgeHelloProcess.setDescription('Flag carried in the sent edge-Hello Packet.')
hwRrppRingGroupMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 2, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppRingGroupMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupMemberRowStatus.setDescription('Row status in the ring group configuration table. hwRrppRingGroupMemberDomainID, hwRrppRingGroupMemberRingID, and hwRrppRingGroupIsEdgeHelloSender must be specified to create a row.')
hwRrppSnoopingTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3))
hwRrppSnoopingInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1), )
if mibBuilder.loadTexts: hwRrppSnoopingInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingInterfaceTable.setDescription('A table containing information about RRPP snooping enable interface.')
hwRrppSnoopingInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppSnoopingInterfaceId"))
if mibBuilder.loadTexts: hwRrppSnoopingInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingInterfaceEntry.setDescription('Detailed information of a specified RRPP snooping enable interface.')
hwRrppSnoopingInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwRrppSnoopingInterfaceId.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingInterfaceId.setDescription('Logical index of the interface index.')
hwRrppSnoopingVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppSnoopingVsiName.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingVsiName.setDescription('The name of VSI which the interface was binding to.')
hwRrppSnoopingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRrppSnoopingVlanId.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingVlanId.setDescription('The VLAN which the intertace added to.')
hwRrppSnoopingEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1, 1, 4), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppSnoopingEnableStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingEnableStatus.setDescription('Indicating whether the RRPP snooping is enabled on this switch.')
hwRrppSnoopingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppSnoopingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreatAndGo, destroy operation.')
hwRrppSnoopingAllVsiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 1, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppSnoopingAllVsiStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingAllVsiStatus.setDescription("Indicating whether the RRPP snooping is associating all vsi on this switch. Options: 1. enabled(1) -indicates that the RRPP snooping is associated with all vsi under the same main interface 2. disabled(2)-indicates that the RRPP snooping doesn't perform the command to associated with all vsi under the same main interface Default: disabled ")
hwRrppSnoopingVsiTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 2), )
if mibBuilder.loadTexts: hwRrppSnoopingVsiTable.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingVsiTable.setDescription('A table containing information about RRPP snooping relating interface.')
hwRrppSnoopingVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 2, 1), ).setIndexNames((0, "HUAWEI-RRPP-MIB", "hwRrppSnoopingVsiInterfaceId"), (0, "HUAWEI-RRPP-MIB", "hwVsiName"))
if mibBuilder.loadTexts: hwRrppSnoopingVsiEntry.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingVsiEntry.setDescription('Detailed information of a specified RRPP snooping relating interface.')
hwRrppSnoopingVsiInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwRrppSnoopingVsiInterfaceId.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingVsiInterfaceId.setDescription('Logical index of the interface index.')
hwVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwVsiName.setStatus('current')
if mibBuilder.loadTexts: hwVsiName.setDescription('The name of VSI.')
hwRrppSnoopingVsiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRrppSnoopingVsiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingVsiRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which support active status and CreatAndGo, destroy operation.')
hwRrppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 4))
hwRrppRingRecover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 4, 1)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingState"))
if mibBuilder.loadTexts: hwRrppRingRecover.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingRecover.setDescription('Trap message is generated by master-node on the ring when the ring recovers from fault.')
hwRrppRingFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 4, 2)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingState"))
if mibBuilder.loadTexts: hwRrppRingFail.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingFail.setDescription('Trap message is generated by master-node on the ring when the ring fails.')
hwRrppMultiMaster = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 4, 3)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingNodeMode"))
if mibBuilder.loadTexts: hwRrppMultiMaster.setStatus('current')
if mibBuilder.loadTexts: hwRrppMultiMaster.setDescription('Trap message is generated by master-node when it detects there are more than one master-node on the ring.')
hwRrppTrackInterfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 4, 4)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppTrackRowStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwRrppTrackInterfaceDown.setStatus('current')
if mibBuilder.loadTexts: hwRrppTrackInterfaceDown.setDescription('Trap message is generated by RRPP node when the track interface tracked BFD down.')
hwRrppTrackInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 4, 5)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppTrackRowStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwRrppTrackInterfaceUp.setStatus('current')
if mibBuilder.loadTexts: hwRrppTrackInterfaceUp.setDescription('Trap message is generated by RRPP node when the track interface tracked BFD up.')
hwRrppRingSingleDirectionFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 4, 6)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingState"))
if mibBuilder.loadTexts: hwRrppRingSingleDirectionFail.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingSingleDirectionFail.setDescription('Trap message is generated by master-node on the ring when the ring fails from the primary port to the secondary port.')
hwRrppMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5))
hwRrppGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 1)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppEnableStatus"), ("HUAWEI-RRPP-MIB", "hwRrppLinkupDelayTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppGlobalGroup = hwRrppGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppGlobalGroup.setDescription('The RRPP global group.')
hwRrppDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 2)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppDomainControlVlanID"), ("HUAWEI-RRPP-MIB", "hwRrppDomainHelloTime"), ("HUAWEI-RRPP-MIB", "hwRrppDomainFailTime"), ("HUAWEI-RRPP-MIB", "hwRrppDomainRowStatus"), ("HUAWEI-RRPP-MIB", "hwRrppDomainResetStatistics"), ("HUAWEI-RRPP-MIB", "hwRrppMulSubRingProtection"), ("HUAWEI-RRPP-MIB", "hwRrppDomainProtectedVlan"), ("HUAWEI-RRPP-MIB", "hwRrppDomainDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppDomainGroup = hwRrppDomainGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppDomainGroup.setDescription('The RRPP domain group.')
hwRrppRingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 3)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingEnableStatus"), ("HUAWEI-RRPP-MIB", "hwRrppRingActive"), ("HUAWEI-RRPP-MIB", "hwRrppRingState"), ("HUAWEI-RRPP-MIB", "hwRrppRingNodeMode"), ("HUAWEI-RRPP-MIB", "hwRrppRingPrimaryPort"), ("HUAWEI-RRPP-MIB", "hwRrppRingSecondaryPort"), ("HUAWEI-RRPP-MIB", "hwRrppRingLevel"), ("HUAWEI-RRPP-MIB", "hwRrppRingRowStatus"), ("HUAWEI-RRPP-MIB", "hwRrppRingResetStatistics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppRingGroup = hwRrppRingGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroup.setDescription('The RRPP ring group.')
hwRrppPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 4)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppPortType"), ("HUAWEI-RRPP-MIB", "hwRrppPortRole"), ("HUAWEI-RRPP-MIB", "hwRrppPortState"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXError"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXHello"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXLinkUp"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXLinkDown"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXCommonFlush"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXCompleteFlush"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXEdgeHello"), ("HUAWEI-RRPP-MIB", "hwRrppPortRXMajorFault"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXError"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXHello"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXLinkUp"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXLinkDown"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXCommonFlush"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXCompleteFlush"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXEdgeHello"), ("HUAWEI-RRPP-MIB", "hwRrppPortTXMajorFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppPortGroup = hwRrppPortGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppPortGroup.setDescription('The RRPP port group.')
hwRrppTrackInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 5)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppTrackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppTrackInterfaceGroup = hwRrppTrackInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppTrackInterfaceGroup.setDescription('The RRPP Track Interface group.')
hwRrppRingGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 6)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppRingGroupGroup = hwRrppRingGroupGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupGroup.setDescription('The RRPP RingGroup group.')
hwRrppRingGroupMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 7)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingGroupIsEdgeHelloProcess"), ("HUAWEI-RRPP-MIB", "hwRrppRingGroupMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppRingGroupMemberGroup = hwRrppRingGroupMemberGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppRingGroupMemberGroup.setDescription('The RRPP RingGroupMember group.')
hwRrppSnoopingInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 8)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppSnoopingVsiName"), ("HUAWEI-RRPP-MIB", "hwRrppSnoopingVlanId"), ("HUAWEI-RRPP-MIB", "hwRrppSnoopingEnableStatus"), ("HUAWEI-RRPP-MIB", "hwRrppSnoopingRowStatus"), ("HUAWEI-RRPP-MIB", "hwRrppSnoopingAllVsiStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppSnoopingInterfaceGroup = hwRrppSnoopingInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingInterfaceGroup.setDescription('The RRPP Snooping enable Interface group.')
hwRrppSnoopingVsiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 9)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppSnoopingVsiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppSnoopingVsiGroup = hwRrppSnoopingVsiGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppSnoopingVsiGroup.setDescription('The RRPP Snooping associate vsi group.')
hwRrppNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 5, 10)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppRingRecover"), ("HUAWEI-RRPP-MIB", "hwRrppRingFail"), ("HUAWEI-RRPP-MIB", "hwRrppMultiMaster"), ("HUAWEI-RRPP-MIB", "hwRrppTrackInterfaceDown"), ("HUAWEI-RRPP-MIB", "hwRrppTrackInterfaceUp"), ("HUAWEI-RRPP-MIB", "hwRrppRingSingleDirectionFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppNotificationGroup = hwRrppNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwRrppNotificationGroup.setDescription('The notification group.')
hwRrppConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 6))
hwRrppCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 6, 1))
hwRrppCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 113, 6, 1, 1)).setObjects(("HUAWEI-RRPP-MIB", "hwRrppGlobalGroup"), ("HUAWEI-RRPP-MIB", "hwRrppDomainGroup"), ("HUAWEI-RRPP-MIB", "hwRrppRingGroup"), ("HUAWEI-RRPP-MIB", "hwRrppPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRrppCompliance = hwRrppCompliance.setStatus('current')
if mibBuilder.loadTexts: hwRrppCompliance.setDescription('The core compliance statement for all implementations.')
mibBuilder.exportSymbols("HUAWEI-RRPP-MIB", hwRrppRingGroupEntry=hwRrppRingGroupEntry, hwRrppRingPrimaryPort=hwRrppRingPrimaryPort, hwRrppTable=hwRrppTable, hwRrppRingSecondaryPort=hwRrppRingSecondaryPort, PYSNMP_MODULE_ID=hwRrpp, hwRrppRingRecover=hwRrppRingRecover, hwRrppRingRowStatus=hwRrppRingRowStatus, hwRrppPortRXLinkUp=hwRrppPortRXLinkUp, hwRrppMultiMaster=hwRrppMultiMaster, hwRrppPortTXLinkUp=hwRrppPortTXLinkUp, hwRrppPortType=hwRrppPortType, hwRrppDomainDescription=hwRrppDomainDescription, hwRrppRingGroup=hwRrppRingGroup, hwRrppTrackInterfaceGroup=hwRrppTrackInterfaceGroup, hwRrppPortTXLinkDown=hwRrppPortTXLinkDown, hwRrppPortTXCompleteFlush=hwRrppPortTXCompleteFlush, hwRrppRingLevel=hwRrppRingLevel, hwRrppSnoopingVsiEntry=hwRrppSnoopingVsiEntry, hwRrppDomainProtectedVlan=hwRrppDomainProtectedVlan, hwRrppSnoopingEnableStatus=hwRrppSnoopingEnableStatus, hwRrppSnoopingVsiRowStatus=hwRrppSnoopingVsiRowStatus, hwRrppRingEnableStatus=hwRrppRingEnableStatus, hwRrppSnoopingInterfaceGroup=hwRrppSnoopingInterfaceGroup, hwRrppRingActive=hwRrppRingActive, hwRrppRingTable=hwRrppRingTable, hwRrppPortRXCompleteFlush=hwRrppPortRXCompleteFlush, hwRrppRingGroupMemberTable=hwRrppRingGroupMemberTable, hwRrppRingResetStatistics=hwRrppRingResetStatistics, hwRrppDomainHelloTime=hwRrppDomainHelloTime, hwRrppRingEntry=hwRrppRingEntry, hwRrppSnoopingVsiGroup=hwRrppSnoopingVsiGroup, hwRrppRingNodeMode=hwRrppRingNodeMode, hwRrppPortEntry=hwRrppPortEntry, hwRrppPortRXHello=hwRrppPortRXHello, hwRrppPortRXMajorFault=hwRrppPortRXMajorFault, hwRrppSnoopingRowStatus=hwRrppSnoopingRowStatus, hwVsiName=hwVsiName, hwRrppRingGroupMemberEntry=hwRrppRingGroupMemberEntry, hwRrpp=hwRrpp, hwRrppRingID=hwRrppRingID, hwRrppRingGroupIsEdgeHelloProcess=hwRrppRingGroupIsEdgeHelloProcess, hwRrppDomainControlVlanID=hwRrppDomainControlVlanID, hwRrppPortRXError=hwRrppPortRXError, hwRrppLinkupDelayTime=hwRrppLinkupDelayTime, hwRrppRingGroupID=hwRrppRingGroupID, hwRrppSnoopingVsiInterfaceId=hwRrppSnoopingVsiInterfaceId, hwRrppPortTXHello=hwRrppPortTXHello, hwRrppTrackRowStatus=hwRrppTrackRowStatus, hwRrppRingGroupMemberDomainID=hwRrppRingGroupMemberDomainID, hwRrppSnoopingAllVsiStatus=hwRrppSnoopingAllVsiStatus, hwRrppCompliance=hwRrppCompliance, hwRrppPortTXCommonFlush=hwRrppPortTXCommonFlush, hwRrppRingGroupRowStatus=hwRrppRingGroupRowStatus, hwRrppRingGroupMemberRingID=hwRrppRingGroupMemberRingID, hwRrppDomainRowStatus=hwRrppDomainRowStatus, hwRrppRingGroupGroup=hwRrppRingGroupGroup, hwRrppRingGroupMemberRowStatus=hwRrppRingGroupMemberRowStatus, hwRrppSnoopingTable=hwRrppSnoopingTable, hwRrppDomainFailTime=hwRrppDomainFailTime, hwRrppPortGroup=hwRrppPortGroup, hwRrppRingGroupTable=hwRrppRingGroupTable, hwRrppPortRXEdgeHello=hwRrppPortRXEdgeHello, hwRrppDomainResetStatistics=hwRrppDomainResetStatistics, hwRrppDomainEntry=hwRrppDomainEntry, hwRrppPortRXLinkDown=hwRrppPortRXLinkDown, hwRrppNotifications=hwRrppNotifications, hwRrppNotificationGroup=hwRrppNotificationGroup, hwRrppTrackInterfaceTable=hwRrppTrackInterfaceTable, hwRrppTrackInterfaceID=hwRrppTrackInterfaceID, EnabledStatus=EnabledStatus, hwRrppCompliances=hwRrppCompliances, hwRrppScalarGroup=hwRrppScalarGroup, hwRrppPortState=hwRrppPortState, hwRrppPortTXError=hwRrppPortTXError, hwRrppRingFail=hwRrppRingFail, hwRrppSnoopingVsiTable=hwRrppSnoopingVsiTable, hwRrppRingSingleDirectionFail=hwRrppRingSingleDirectionFail, hwRrppSnoopingInterfaceId=hwRrppSnoopingInterfaceId, hwRrppEnableStatus=hwRrppEnableStatus, hwRrppSnoopingVlanId=hwRrppSnoopingVlanId, hwRrppDomainGroup=hwRrppDomainGroup, hwRrppPortRole=hwRrppPortRole, hwRrppTrackInterfaceDown=hwRrppTrackInterfaceDown, hwRrppPortRXCommonFlush=hwRrppPortRXCommonFlush, hwRrppMulSubRingProtection=hwRrppMulSubRingProtection, hwRrppTrackInterfaceUp=hwRrppTrackInterfaceUp, hwRrppRingState=hwRrppRingState, hwRrppRingGroupMemberGroup=hwRrppRingGroupMemberGroup, hwRrppPortTable=hwRrppPortTable, hwRrppTrackInterfaceEntry=hwRrppTrackInterfaceEntry, hwRrppSnoopingVsiName=hwRrppSnoopingVsiName, hwRrppSnoopingInterfaceEntry=hwRrppSnoopingInterfaceEntry, hwRrppSnoopingInterfaceTable=hwRrppSnoopingInterfaceTable, hwRrppPortTXEdgeHello=hwRrppPortTXEdgeHello, hwRrppConformance=hwRrppConformance, hwRrppPortTXMajorFault=hwRrppPortTXMajorFault, hwRrppGlobalGroup=hwRrppGlobalGroup, hwRrppDomainTable=hwRrppDomainTable, hwRrppPortID=hwRrppPortID, hwRrppMibGroup=hwRrppMibGroup, hwRrppDomainID=hwRrppDomainID)
