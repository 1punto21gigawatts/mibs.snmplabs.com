#
# PySNMP MIB module LANPLEX-SYSTEMS-MIB-1-2-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANPLEX-SYSTEMS-MIB-1-2-2
# Produced by pysmi-0.3.4 at Wed May  1 14:05:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, TimeTicks, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, ObjectIdentity, Counter64, MibIdentifier, NotificationType, NotificationType, Integer32, Counter32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter64", "MibIdentifier", "NotificationType", "NotificationType", "Integer32", "Counter32", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
synernetics = MibIdentifier((1, 3, 6, 1, 4, 1, 114))
lanplex = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1))
lpsProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3))
lps6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2))
lps2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3))
lps6012 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1))
lps6004 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2))
lps2500 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3, 1))
lss2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3, 2))
lps2016 = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 3, 3))
lps6012System = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 1))
lps6012Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 2))
lps6012ESM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 3))
lps6012EFSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 4))
lps6012TRSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 5))
lps6012TMM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 1, 6))
lps6004System = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 1))
lps6004Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 2))
lps6004ESM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 3))
lps6004EFSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 4))
lps6004TRSM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 5))
lps6004TMM = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 3, 2, 2, 6))
lanplexSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4))
lpsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 1))
lpsSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 2))
lpsControlPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 3))
lpsPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 4))
lpsSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 5))
lpsAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 6))
lpsInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 7))
lpsEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 8))
lpsSmt = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 9))
lpsBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 10))
lpsIpRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 11))
lpsNetworkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 12))
lpsTokenRingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 114, 1, 4, 13))
lpsSystemId = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemId.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemId.setDescription('The unique identifier assigned to this system during manufacturing.')
lpsSystemType = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("lanplex6000", 2), ("lanplex2000", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemType.setDescription('The type of system.')
lpsSystemName = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemName.setDescription('The text string describing this system.')
lpsSystemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemManufacturer.setDescription('The text string describing the manufacturer of this system.')
lpsSystemHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemHardwareRevision.setDescription('The revision level of the system, contained in two octets. The first octet indicates the artwork revision, and the second octet indicates the rework level.')
lpsSystemMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemMemorySize.setDescription('The amount of memory (RAM), in bytes, present on the system processor board.')
lpsSystemFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemFlashMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemFlashMemorySize.setDescription('The amount of flash memory, in bytes, present on the system processor board.')
lpsSystemNvMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemNvMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemNvMemorySize.setDescription('The amount of non-volatile memory, in bytes, present on the system processor board.')
lpsSystemSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemSoftwareRevision.setDescription('The revision number of the LANplex system software. Each byte indicates the following: byte 0: major release number. byte 1: minor release number. byte 2: update number. byte 3: bits 7-6: release type. bits 5-0: supplemental identifier.')
lpsSystemBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemBuildTime.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemBuildTime.setDescription('The build time of the system software.')
lpsSystemSnmpRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemSnmpRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemSnmpRevision.setDescription('The revision number of the SNMP agent implementation.')
lpsSystemRequestedSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSystemRequestedSnmpMode.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemRequestedSnmpMode.setDescription('This object describes the requested SNMP mode for the system. The value of this object indicates the mode that will become effective following a reboot of the system. Note that only a subset of the above values may be valid for some systems.')
lpsSystemCurrentSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemCurrentSnmpMode.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemCurrentSnmpMode.setDescription('This object describes the currently active SNMP mode for the system. Note that only a subset of the above values may be valid for some systems.')
lpsSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSystemAction.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemAction.setDescription('This object, when read, always returns the value other(1). Setting this object to the value reset(2) causes a reset of the system. The value other(1) is not a vaild value for set operations.')
lpsSystemOvertemperature = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemOvertemperature.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemOvertemperature.setDescription('This object indicates the current overtemperature status for the system. If the system does not support overtemperature detection, this object returns notSupported.')
lpsSystemFanFailure = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemFanFailure.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemFanFailure.setDescription('This object indicates the current fan status for the system. If the system does not support fan failure detection, this object returns notSupported.')
lpsSystemProtocolMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSystemProtocolMask.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSystemProtocolMask.setDescription('This object is a bit mask that indicates which protocols exist in the software image currently loaded in memory. The value of this OBJECT is a sum. It initially takes on the value 0, then for each protocol bit as defined below, 2 raised to the value of the (bit position - 1) is added to the sum. The following bits are defined: IP_ROUTING 0x00000001 IPX_ROUTING 0x00000002 DDP_ROUTING 0x00000004 A value of 0x00000000 indicates the standard switching software.')
lpsSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotCount.setDescription('The count of slots in the chassis.')
lpsSlotTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2), )
if mibBuilder.loadTexts: lpsSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotTable.setDescription('A list of slot entries. A single entry exists in this list for each slot in the chassis.')
lpsSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"))
if mibBuilder.loadTexts: lpsSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotEntry.setDescription('A slot entry contains information about a particular slot.')
lpsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotIndex.setDescription('The index of the slot identified by this entry.')
lpsSlotBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("emptyLocation", 2), ("esmBoard", 7), ("fcmBoard", 8), ("lmmBoard", 9), ("efsmBoard", 10), ("trsmBoard", 11), ("tmmBoard", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotBoardType.setDescription('The type of board residing in the slot identified by this entry.')
lpsSlotBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotBoardRevision.setDescription('The revision number of the board in the slot identified by this entry. If the slot is empty, or the revision is unknown this object returns a zero length string.')
lpsSlotBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("testing", 2), ("offline", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotBoardStatus.setDescription('The status of the board in the slot identified by this entry.')
lpsSlotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardName.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotBoardName.setDescription('The text string describing the board in the slot identified by this entry.')
lpsSlotBoardNameAbbrev = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotBoardNameAbbrev.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotBoardNameAbbrev.setDescription('The abbreviation used to describe the board in the slot identified by this entry.')
lpsSlotEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotEthernetPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotEthernetPortCount.setDescription('The count of ethernet ports in the slot identified by this entry.')
lpsSlotFddiMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotFddiMacCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotFddiMacCount.setDescription('The count of FDDI MACs in the slot identified by this entry.')
lpsSlotFddiPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotFddiPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotFddiPortCount.setDescription('The count of FDDI ports in the slot identified by this entry.')
lpsSlotOvertemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotOvertemperature.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotOvertemperature.setDescription('This object indicates the current overtemperature status for the slot. If the slot does not support overtemperature detection, this object returns notSupported.')
lpsSlotTokenRingPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSlotTokenRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSlotTokenRingPortCount.setDescription('The count of TokenRing ports in the slot identified by this entry.')
lpsControlPanelHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lpsControlPanelHardwareRevision.setDescription('An 8-bit value specifying the revision level of the control panel hardware.')
lpsControlPanelSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lpsControlPanelSoftwareRevision.setDescription('An 8-bit value specifying the revision level of the control panel software.')
lpsControlPanelLines = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelLines.setStatus('mandatory')
if mibBuilder.loadTexts: lpsControlPanelLines.setDescription('The number of lines in the control panel display.')
lpsControlPanelColumns = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelColumns.setStatus('mandatory')
if mibBuilder.loadTexts: lpsControlPanelColumns.setDescription('The number of columns in the control panel display.')
lpsControlPanelText = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsControlPanelText.setStatus('mandatory')
if mibBuilder.loadTexts: lpsControlPanelText.setDescription('The currently displayed text in the control panel display.')
lpsPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsPowerSupplyCount.setDescription('The count of power supplies in the system.')
lpsPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2), )
if mibBuilder.loadTexts: lpsPowerSupplyStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsPowerSupplyStatusTable.setDescription('A list of power supply status entries.')
lpsPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatusIndex"))
if mibBuilder.loadTexts: lpsPowerSupplyStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsPowerSupplyStatusEntry.setDescription('A power supply status entry contains information about a particular power supply.')
lpsPowerSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsPowerSupplyStatusIndex.setDescription('The unique index of the power supply identified by this entry.')
lpsPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsPowerSupplyStatus.setDescription('This object represents the power supply status. The value is a sum. It initially takes on the value 0, then for each failure type which is active, 2 raised to a power is added to the sum. The powers are according to the following table: Failure Type Power AC Failure 0 Plus 5 Failure 1 Plus 12 Failure 2 Over Temperature Failure 3')
lpsPowerSupplyStatusSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsPowerSupplyStatusSupported.setStatus('mandatory')
if mibBuilder.loadTexts: lpsPowerSupplyStatusSupported.setDescription('This object represents the various power supply failure types which are supported. The value is a sum. It initially takes on the value 0, then for each failure type which is supported, 2 raised to a power is added to the sum. The powers are according to the following table: Failure Type Power AC Failure 0 Plus 5 Failure 1 Plus 12 Failure 2 Over Temperature Failure 3 This object used in conjunction with the lpsPowerSupplyStatus object for a given power supply provide a complete picture of the status of the power supply.')
lpsSnmpAgentId = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpAgentId.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpAgentId.setDescription('The unique id for this SNMP agent within the system.')
lpsSnmpInternalAgentTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpInternalAgentTrapMask.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalAgentTrapMask.setDescription('This value is a bit string that indicates which traps are enabled for transmit to other agents in the system. The octet string value is treated as a 64-bit integer value. The value is a sum. It initially takes on the value 0, then for each trap which is enabled, 2 raised to the value of (lpsAgentTrapDescriptionIndex - 1) for that trap is added to the sum.')
lpsSnmpInternalAgentTrapDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpInternalAgentTrapDestinationMask.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalAgentTrapDestinationMask.setDescription('A value which indicates to which other agents in the system traps should be sent. The value is a sum. It initially takes on the value 0, then for each agent which is to receive traps, 2 raised to the value of (lpsSnmpAgentId - 1) for that agent is added to the sum. Note that only traps which are enabled according to the value of the lpsSnmpInternalAgentTrapMask object will be forwarded, and that each trap which is forwarded will be transmitted to each agent identified by this mask.')
lpsSnmpProxyInternalRequests = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpProxyInternalRequests.setStatus('deprecated')
if mibBuilder.loadTexts: lpsSnmpProxyInternalRequests.setDescription('This object determines if this agent will proxy requests to other agents in the system. If the value of this object is true(1), this agent will proxy requests to other agents in the chassis.')
lpsSnmpInternalProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpInternalProxyRequestMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalProxyRequestMaxAge.setDescription('The maximum time, in seconds, an internal proxy request will remain queued waiting for a response before being discarded. Note that when the value of lpsSnmpProxyInternalRequests is false(2), the value of this object is ignored.')
lpsSnmpProxyInternalTraps = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSnmpProxyInternalTraps.setStatus('deprecated')
if mibBuilder.loadTexts: lpsSnmpProxyInternalTraps.setDescription('This object determines if this agent will generate proxy traps for those traps received from other agents in the system. If the value of this object is true(1), this agent will generate proxy traps for those received from other agents in the chassis. Note that agents will not proxy traps to other agents within the system to prevent looping of traps.')
lpsSnmpInternalProxyTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7), )
if mibBuilder.loadTexts: lpsSnmpInternalProxyTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalProxyTable.setDescription('A list of SNMP internal agent proxy entries. An entry in this table exists for each agent in the system that can be reached by this agent via the internal proxy mechanism.')
lpsSnmpInternalProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSnmpInternalProxyAgentId"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSnmpInternalProxyAccessClass"))
if mibBuilder.loadTexts: lpsSnmpInternalProxyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalProxyEntry.setDescription('An entry identifies the communities available for communicating with another agent in the system via the internal proxy mechanism.')
lpsSnmpInternalProxyAgentId = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpInternalProxyAgentId.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalProxyAgentId.setDescription('The id of the agent identified by this entry.')
lpsSnmpInternalProxyAccessClass = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpInternalProxyAccessClass.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalProxyAccessClass.setDescription('The access to MIB objects supported by the agent identified by this entry provided by this agent, when using the community string identified by the corresponding value of lpsSnmpInternalProxyCommunity.')
lpsSnmpInternalProxyCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 5, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSnmpInternalProxyCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSnmpInternalProxyCommunity.setDescription('A community which allows access to MIB objects supported by the agent identified by this entry.')
lpsAgentRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentRequestMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentRequestMaxAge.setDescription('The maximum time, in seconds, a local SNMP request will remain queued waiting for a response before being discarded.')
lpsAgentProxyRemoteSmtRequests = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentProxyRemoteSmtRequests.setStatus('deprecated')
if mibBuilder.loadTexts: lpsAgentProxyRemoteSmtRequests.setDescription('This object determines if this agent will proxy SMT requests to other FDDI stations. If the value of this object is true(1), this agent will proxy SMT requests to other stations. Note that only a subset of the above values may be valid for some systems.')
lpsAgentRemoteSmtProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentRemoteSmtProxyRequestMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentRemoteSmtProxyRequestMaxAge.setDescription('The maximum time, in seconds, an SMT proxy request will remain queued waiting for a response before being discarded. Note that when the value of lpsAgentProxyRemoteSmtRequests is false(2), the value of this object is ignored.')
lpsAgentProxyRemoteSmtEvents = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentProxyRemoteSmtEvents.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentProxyRemoteSmtEvents.setDescription('This object determines if this agent will generate traps for SMT events occuring at other stations. If the value of this object is true(1), this agent will generate traps for all SMT events, those which occur locally, and those which occur at other stations. If the value of this object is false(2), this agent will only generate traps for events which occur locally. Note that only a subset of the above values may be valid for some systems.')
lpsAgentTrapDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5), )
if mibBuilder.loadTexts: lpsAgentTrapDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDescriptionTable.setDescription('This table contains a listing of trap descriptions for each trap supported by this agent. This provides a relationship between a trap index, and the trap enterprise oid and trap number for a given trap. In all cases except for the MIB-2 generic traps, the enterprise under which a trap is defined is the same as that appearing in the ENTERPRISE portion of the trap.')
lpsAgentTrapDescriptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsAgentTrapDescriptionIndex"))
if mibBuilder.loadTexts: lpsAgentTrapDescriptionTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDescriptionTableEntry.setDescription('Information relating a trap index to a specific trap enterprise oid and trap number.')
lpsAgentTrapDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapDescriptionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDescriptionIndex.setDescription('A unique index corresponding to the trap described by this entry. This value of this object corresponding to a particular trap will remain constant accross system resets.')
lpsAgentTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapEnterprise.setDescription('The enterpise under which the trap identified by this entry is defined.')
lpsAgentTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapNumber.setDescription('The number of the trap identified by this entry, within the enterprise where it is defined.')
lpsAgentTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6), )
if mibBuilder.loadTexts: lpsAgentTrapDestinationTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDestinationTable.setDescription('This table contains information specifying which traps will be transmitted to a given destination address. The table is indexed by the destination address type and destination address. Each entry in the table with a status of valid identifies a set of traps which, when generated, will be transmitted to the corresponding destination address listed in that entry.')
lpsAgentTrapDestinationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsAgentTrapDestinationAddressType"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsAgentTrapDestinationAddress"))
if mibBuilder.loadTexts: lpsAgentTrapDestinationTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDestinationTableEntry.setDescription('Information relating a set of traps and a destination address to which each trap in ths set will be transmitted when it is generated. To create a new entry, set a non-existent instance of lpsAgentTrapDestinationTrapMask to a valid value. To remove an entry, set the instance of lpsAgentTrapDestinationEntryStatus for the entry to invalid(2).')
lpsAgentTrapDestinationAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapDestinationAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDestinationAddressType.setDescription('The type of address identified by this entry.')
lpsAgentTrapDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgentTrapDestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDestinationAddress.setDescription('The address, of the type specified by the corresponding value of lpsAgentTrapDestinationAddressType, to which the set of traps identified by this entry are to be transmitted.')
lpsAgentTrapDestinationTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentTrapDestinationTrapMask.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDestinationTrapMask.setDescription('This value is a bit string that indicates which traps are enabled for the address identified by this entry. The octet string value is treated as a 64-bit value. The value is a sum. It initially takes on the value 0, then for each trap which is enabled, 2 raised to the value of (lpsAgentTrapDescriptionIndex - 1) for that trap is added to the sum. A new entry in the table is created by setting the value of this object for a new destination address type and destination address. Note that an octet string of all zeros is not a valid value for this object.')
lpsAgentTrapDestinationEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsAgentTrapDestinationEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsAgentTrapDestinationEntryStatus.setDescription('The status of the trap destination table entry. Setting this object to invalid(1) has the effect of removing the corresponding entry from the table.')
lpsInterfaceLocationTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1), )
if mibBuilder.loadTexts: lpsInterfaceLocationTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsInterfaceLocationTable.setDescription('A list of interface location entries. A single entry exists in this list for each interface managed by this agent.')
lpsInterfaceLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsInterfaceLocationIfIndex"))
if mibBuilder.loadTexts: lpsInterfaceLocationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsInterfaceLocationEntry.setDescription('An interface location entry describes the location of a particular interface managed by this agent.')
lpsInterfaceLocationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsInterfaceLocationIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the interface identified by this entry.')
lpsInterfaceLocationInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ethernetPort", 2), ("fddiMac", 3), ("tokenringPort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsInterfaceLocationInterfaceType.setDescription('The type of the physical implementation of the interface identified by this entry.')
lpsInterfaceLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsInterfaceLocationType.setDescription('The type of location where the interface identified by this entry is physically located.')
lpsInterfaceLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsInterfaceLocationTypeIndex.setDescription('The index of the location identified by the corresponding instance of lpsInterfaceLocationType where the interface identified by this entry is physically located.')
lpsInterfaceLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsInterfaceLocationLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsInterfaceLocationLocalIndex.setDescription('The local index of the interface identified by this entry relative to its type specified by the corresponding value of lpsInterfaceLocationInterfaceType, and the location specified by the corresponding values of lpsInterfaceLocationType and lpsInterfaceLocationTypeIndex.')
lpsEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortCount.setDescription('The count of ethernet ports managed by this agent.')
lpsEthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2), )
if mibBuilder.loadTexts: lpsEthernetPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortTable.setDescription('A list of ethernet port entries. A single entry exists in this list for each ethernet port managed by this agent.')
lpsEthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsEthernetPortIndex"))
if mibBuilder.loadTexts: lpsEthernetPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortEntry.setDescription('An ethernet port entry contains information about a particular ethernet port managed by this agent.')
lpsEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortIndex.setDescription('The index of the ethernet port identified by this entry, relative to this agent.')
lpsEthernetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the ethernet port identified by this entry.')
lpsEthernetPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsEthernetPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortLabel.setDescription('An ASCII text string describing the ethernet port identified by this entry.')
lpsEthernetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortLinkStatus.setDescription('The current value of the link status for the ethernet port identified by this entry.')
lpsEthernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rj2110BaseT", 1), ("rj4510BaseT", 2), ("st10BaseFL", 3), ("aui", 4), ("bnc10Base2", 5), ("other", 6), ("rj45100BaseT", 7), ("sc100BaseFx", 8), ("untermBnc10Base2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortType.setDescription('Specific port type description for the ethernet port identified by this entry.')
lpsEthernetPortRateTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3), )
if mibBuilder.loadTexts: lpsEthernetPortRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRateTable.setDescription('A list of ethernet port rate entries. A single entry exists in this list for each ethernet port, managed by this agent, which supports rate information.')
lpsEthernetPortRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsEthernetPortRateIndex"))
if mibBuilder.loadTexts: lpsEthernetPortRateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRateEntry.setDescription('An ethernet port rate entry contains rate statistics for a particular ethernet port managed by this agent. Rate statistics are calculated based on a one second sampling interval.')
lpsEthernetPortRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRateIndex.setDescription('The index of the ethernet port identified by this entry, relative to this agent.')
lpsEthernetPortRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRateByteReceiveRate.setDescription('The average number of bytes received per second by the ethernet port identified by this entry during the most recent sampling period.')
lpsEthernetPortRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRatePeakByteReceiveRate.setDescription('The peak value of lpsEthernetPortRateByteReceiveRate since the system was last initialized for the ethernet port identified by this entry.')
lpsEthernetPortRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRateFrameReceiveRate.setDescription('The average number of frames received per second by the ethernet port identified by this entry during the most recent sampling period.')
lpsEthernetPortRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRatePeakFrameReceiveRate.setDescription('The peak value of lpsEthernetPortRateFrameReceiveRate since the system was last initialized for the ethernet port identified by this entry.')
lpsEthernetPortRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRateByteTransmitRate.setDescription('The average number of bytes transmitted per second by the ethernet port identified by this entry during the most recent sampling period.')
lpsEthernetPortRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRatePeakByteTransmitRate.setDescription('The peak value of lpsEthernetPortRateByteTransmitRate since the system was last initialized for the ethernet port identified by this entry.')
lpsEthernetPortRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRateFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRateFrameTransmitRate.setDescription('The average number of frames transmitted per second by the ethernet port identified by this entry during the most recent sampling period.')
lpsEthernetPortRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsEthernetPortRatePeakFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsEthernetPortRatePeakFrameTransmitRate.setDescription('The peak value of lpsEthernetPortRateFrameTransmitRate since the system was last initialized for the ethernet port identified by this entry.')
lpsSmtCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtCount.setDescription('The count of SMTs managed by this agent.')
lpsSmtFddiMacBeaconTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4), )
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconTable.setDescription('A list of FDDI MAC beacon entries. A single entry exists in this list for each FDDI MAC, managed by this agent, which supports MAC beacon history.')
lpsSmtFddiMacBeaconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacBeaconSmtIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacBeaconIndex"))
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconEntry.setDescription("An FDDI MAC beacon entry contains information about a particular FDDI MAC's beacon history.")
lpsSmtFddiMacBeaconSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
lpsSmtFddiMacBeaconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconIndex.setDescription('The index of the FDDI MAC identified by this entry, within the SMT identified by this entry.')
lpsSmtFddiMacBeaconHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconHistory.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacBeaconHistory.setDescription('This object gives a history of the most recent beacon information received on the FDDI MAC identified by this entry. It can contain up to a maximum of eight records. Each record is of the form: source MAC: 6 bytes beacon data length: 2 bytes. beacon data: 0-16 bytes.')
lpsSmtFddiMacRateTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5), )
if mibBuilder.loadTexts: lpsSmtFddiMacRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateTable.setDescription('A list of FDDI MAC rate entries. A single entry exists in this list for each FDDI MAC, managed by this agent, which supports rate statistics.')
lpsSmtFddiMacRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacRateSmtIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiMacRateIndex"))
if mibBuilder.loadTexts: lpsSmtFddiMacRateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateEntry.setDescription('An FDDI MAC rate entry contains rate statistics for a particular FDDI MAC managed by this agent. Rate statistics are calculated based on a one second sampling interval.')
lpsSmtFddiMacRateSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
lpsSmtFddiMacRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateIndex.setDescription('The index of the FDDI MAC identified by this entry, within the SMT identified by this entry.')
lpsSmtFddiMacRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateByteReceiveRate.setDescription('The average number of bytes received per second by the FDDI MAC identified by this entry during the most recent sampling period.')
lpsSmtFddiMacRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakByteReceiveRate.setDescription('The peak value of lpsSmtFddiMacByteReceiveRate since the system was last initialized for the FDDI MAC identified by this entry.')
lpsSmtFddiMacRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateFrameReceiveRate.setDescription('The average number of frames received per second by the FDDI MAC identified by this entry during the most recent sampling period.')
lpsSmtFddiMacRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakFrameReceiveRate.setDescription('The peak value of lpsSmtFddiMacRateFrameReceiveRate since the system was last initialized for the FDDI MAC identified by this entry.')
lpsSmtFddiMacRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateByteTransmitRate.setDescription('The average number of bytes transmitted per second by the FDDI MAC identified by this entry during the most recent sampling period.')
lpsSmtFddiMacRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakByteTransmitRate.setDescription('The peak value of lpsSmtFddiMacByteTransmitRate since the system was last initialized for the FDDI MAC identified by this entry.')
lpsSmtFddiMacRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRateFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRateFrameTransmitRate.setDescription('The average number of frames transmitted per second by the FDDI MAC identified by this entry during the most recent sampling period.')
lpsSmtFddiMacRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiMacRatePeakFrameTransmitRate.setDescription('The peak value of lpsSmtFddiMacFrameTransmitRate since the system was last initialized for the FDDI MAC identified by this entry.')
lpsSmtFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6), )
if mibBuilder.loadTexts: lpsSmtFddiPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortTable.setDescription('A list of FDDI port entries. A single entry exists in this list for each FDDI port managed by this agent.')
lpsSmtFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiPortSmtIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSmtFddiPortIndex"))
if mibBuilder.loadTexts: lpsSmtFddiPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortEntry.setDescription('An FDDI port entry contains information about a particular FDDI port managed by this agent.')
lpsSmtFddiPortSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
lpsSmtFddiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortIndex.setDescription('The index of the FDDI port identified by this entry, within the SMT identified by this entry.')
lpsSmtFddiPortLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortLocationType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortLocationType.setDescription('The type of location where the FDDI port identified by this entry is physically located.')
lpsSmtFddiPortLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortLocationTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortLocationTypeIndex.setDescription('The index of the location identified by the corresponding instance of lpsSmtFddiPortLocationType where the FDDI port identified by this entry is physically located.')
lpsSmtFddiPortLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsSmtFddiPortLocationLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortLocationLocalIndex.setDescription('The local index of the FDDI port identified by this entry relative to the location specified by the corresponding values of lpsSmtFddiPortLocationType and lpsSmtFddiPortLocationTypeIndex.')
lpsSmtFddiPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 9, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsSmtFddiPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lpsSmtFddiPortLabel.setDescription('An ASCII text string describing the FDDI port identified by this entry.')
lpsBridgeCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeCount.setDescription('The count of bridges managed by this agent.')
lpsBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2), )
if mibBuilder.loadTexts: lpsBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeTable.setDescription('A list of bridge entries. A single entry exists in this list for each bridge managed by this agent.')
lpsBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgeIndex"))
if mibBuilder.loadTexts: lpsBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeEntry.setDescription('A bridge entry contains information about a particular bridge managed by this agent.')
lpsBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
lpsBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortCount.setDescription('The number of bridge ports that the bridge identified by this entry controls.')
lpsBridgeAddressTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeAddressTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeAddressTableSize.setDescription('The size of the address table for the bridge identified by this entry.')
lpsBridgeAddressTableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeAddressTableCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeAddressTableCount.setDescription('The current count of addresses in the address table for the bridge identified by this entry.')
lpsBridgeAddressTablePeakCount = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgeAddressTablePeakCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeAddressTablePeakCount.setDescription('The peak count of addresses in the address table for the bridge identified by this entry, since the system was last initialized.')
lpsBridgeAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeAddressThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeAddressThreshold.setDescription('A reporting threshold for the total number of addresses known for the bridge identified by this entry. When this threshold is reached, the event lpsBridgeAddressThresholdEvent is generated. The range of valid values for setting this object is between 1 and the corresponding value reported by lpsBridgeAddressTableSize + 1 (Note that this range applies to values issued in set requests. The current value may be outside this range, for example if the corresponding value of lpsBridgeMode is changed). Setting this object to one greater than the address table size disables the generation of lpsBridgeAddressThresholdEvents since the limit will never be reached.')
lpsBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("expressMode", 1), ("ieee8021dBridgeMode", 2), ("notSupported", 3), ("ieee8021dSRTBridgeMode", 4), ("ieee8021dSRBridgeMode", 5), ("ibmSRBridgeMode", 6), ("srtBBridgeMode", 7), ("srExpressBridgeMode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeMode.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeMode.setDescription('The operational mode of the bridge identified by this entry. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
lpsBridgeBackbonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeBackbonePort.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeBackbonePort.setDescription('The number of the port selected as the backbone segment port when the corresponding value of lpsBridgeMode is is expressMode(1). The value of this object can range from 1 to the corresponding value of lpsBridgePortCount, however, some bridges may support only a subset of ports as backbone ports. If the corresponding value of lpsBridgeMode is not expressMode(1), the value of this object is ignored.')
lpsBridgeIpFragmentationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeIpFragmentationEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeIpFragmentationEnabled.setDescription('A flag indicating whether or not IP fragmentation is enabled on this bridge. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
lpsBridgeTrFddiTranslationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("native", 1), ("backbone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeTrFddiTranslationMode.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeTrFddiTranslationMode.setDescription('The mode used to describe whether the embedded MAC addresses are byte-conjugated in order to convert them from Token Ring format to native FDDI format (and vice versa), or whether they are left alone (used for traffic flowing across a FDDI backbone to/from Token Ring end stations).')
lpsBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3), )
if mibBuilder.loadTexts: lpsBridgePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortTable.setDescription('A list of bridge port entries. A single entry exists in this list for each bridge port managed by this agent.')
lpsBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortIndex"))
if mibBuilder.loadTexts: lpsBridgePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortEntry.setDescription('A bridge port entry contains information about a particular bridge port managed by this agent.')
lpsBridgePortBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
lpsBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortIndex.setDescription('The index of the bridge port identified by this entry, within the bridge identified by this entry.')
lpsBridgePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the bridge port identified by this entry.')
lpsBridgePortReceiveMulticastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimit.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimit.setDescription('The maximum number of multicast frames per second that can be received in the sample interval. The sample interval is one second. The default value for this object is zero which implies an infinite rate.')
lpsBridgePortAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressAction.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressAction.setDescription('This object, when read, always returns the value other(1). The behavior of setting this object to each of the acceptable values is as follows: freezeAddress: causes all the learned dynamic addresses to be converted into static addresses. flushAddress: causes all the addresses to be flushed from the address list for the bridge port identified by this entry. flushDynamicAddress: causes all dynamic addresses to be flushed from the address list for the bridge port identified by this entry.')
lpsBridgePortSpanningTreeFrameReceivedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortSpanningTreeFrameReceivedCounts.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortSpanningTreeFrameReceivedCounts.setDescription('The number of spanning tree frames received by the bridge port identified by this entry.')
lpsBridgePortReceiveBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveBlockedDiscards.setDescription("The number of frames discarded by the bridge port identified by this entry because the receiving bridge port was not in the 'forwarding' state.")
lpsBridgePortReceiveMulticastLimitExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimitExceededs.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimitExceededs.setDescription('The number of times the value of lpsBridgePortReceiveMulticastLimit was exceeded for the port identified by this entry.')
lpsBridgePortReceiveMulticastLimitExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimitExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastLimitExceededDiscards.setDescription('The number of multicast/broadcast frames discarded by the bridge port identified by this entry because the corresponding value of lpsBridgePortReceiveMulticastLimit was exceeded.')
lpsBridgePortReceiveSecurityDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveSecurityDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveSecurityDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because they contained source addresses which were statically configured on another bridge port. A statically configured address (station), which is not allowed to move, appears to have moved.')
lpsBridgePortReceiveUnknownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveUnknownDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveUnknownDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because the destination address was unknown. Note that this counter is only valid for backbone ports, and only when the bridge is operating in express mode.')
lpsBridgePortReceiveOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveOtherDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveOtherDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because they contained either invalid (group) source addresses or source addresses belonging to this bridge (indicative of network loops).')
lpsBridgePortReceiveErrorDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveErrorDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveErrorDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because of internal bridge system errors (e.g., hardware and software address table discrepencies).')
lpsBridgePortSameSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortSameSegmentDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortSameSegmentDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because the destination address is known on the same network segment as the source address, i.e., the frame does not need to be bridged.')
lpsBridgePortTransmitBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortTransmitBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortTransmitBlockedDiscards.setDescription("The number of frames discarded by the bridge port identified by this entry because the transmitting bridge port was not in the 'forwarding' state.")
lpsBridgePortReceiveAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveAllPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveAllPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined receive all path filters.')
lpsBridgePortReceiveMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortReceiveMulticastPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined receive multicast path filters.')
lpsBridgePortTransmitAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortTransmitAllPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortTransmitAllPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined transmit all path filters.')
lpsBridgePortTransmitMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortTransmitMulticastPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortTransmitMulticastPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined transmit multicast path filters.')
lpsBridgePortForwardedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedUnicastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortForwardedUnicastFrames.setDescription('The number of unicast frames which this port forwarded to a single destination port.')
lpsBridgePortForwardedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedUnicastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortForwardedUnicastOctets.setDescription('The number of octets contained in unicast frames which this port forwarded to a single destination port.')
lpsBridgePortForwardedMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortForwardedMulticastFrames.setDescription('The number of multicast frames which this port forwarded.')
lpsBridgePortForwardedMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortForwardedMulticastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortForwardedMulticastOctets.setDescription('The number of octets contained in multicast frames which this port forwarded.')
lpsBridgePortFloodedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortFloodedUnicastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortFloodedUnicastFrames.setDescription('The number of unicast frames which this port flooded to all other ports in the bridge.')
lpsBridgePortFloodedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortFloodedUnicastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortFloodedUnicastOctets.setDescription('The number of octets contained in unicast frames which this port flooded to all other ports in the bridge.')
lpsBridgePortPairTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4), )
if mibBuilder.loadTexts: lpsBridgePortPairTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortPairTable.setDescription('A list of bridge port pair statistics information. A single entry exists in this list for each bridge port pair combination within each bridge managed by this agent.')
lpsBridgePortPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortPairBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortPairReceivePortIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortPairDestinationPortIndex"))
if mibBuilder.loadTexts: lpsBridgePortPairEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortPairEntry.setDescription('A bridge port pair entry contains statistics information for a port pair within the same bridge. The port paring consists of a receiving port indicated by the value of lpsBridgePortPairReceivePortIndex, and a destination port indicated by the corresponding value of lpsBridgePortPairDestinationPortIndex. The corresponding value of lpsBridgePortPairBridgeIndex is the index of the bridge containing the port pair. Note that no entries exist which are indexed with the same values for both lpsBridgePortPairReceivePortIndex and lpsBridgePortPairToDestinationPortIndex.')
lpsBridgePortPairBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortPairBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
lpsBridgePortPairReceivePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairReceivePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortPairReceivePortIndex.setDescription('The index of the receiving bridge port identified by this entry, within the bridge identified by this entry.')
lpsBridgePortPairDestinationPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairDestinationPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortPairDestinationPortIndex.setDescription('The index of the destination bridge port identified by this entry, within the bridge identified by this entry.')
lpsBridgePortPairForwardedToUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairForwardedToUnicastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortPairForwardedToUnicastFrames.setDescription('The number of unicast frames forwarded from the receiving bridge port identified by this entry to the destination bridge port identified by this entry. Note that this count only includes frames which were uniquely forwarded to the destination port, frames which were flooded are not included.')
lpsBridgePortPairForwardedToUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortPairForwardedToUnicastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortPairForwardedToUnicastOctets.setDescription('The number of octets contained in unicast frames forwarded from the receiving bridge port identified by this entry to the destination bridge port identified by this entry. Note that this count only includes frames which were uniquely forwarded to the destination port, frames which were flooded are not included.')
lpsBridgePortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5), )
if mibBuilder.loadTexts: lpsBridgePortAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressTable.setDescription('A list of bridge port address information. A single entry exists in this list for each learned address, accross all bridge ports and all bridges managed by this agent.')
lpsBridgePortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortAddressBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortAddressPortIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgePortAddressIndex"))
if mibBuilder.loadTexts: lpsBridgePortAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressEntry.setDescription('An bridge port address entry contains information about a particular bridge port address. To create a new entry, set an instance of lpsBridgePortAddressRemoteAddress with the address index portion of the instance set to 0, to a valid value. To remove an entry, set the instance of the lpsBridgePortAddressType for the entry to invalid(2).')
lpsBridgePortAddressBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
lpsBridgePortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressPortIndex.setDescription('The index of the bridge port identified by this entry, within the bridge identified by this entry.')
lpsBridgePortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressIndex.setDescription('The index of this address entry within the bridge address table for the bridge identified by this entry. This index ranges from 1 to the corresponding value of lpsBridgeAddressTableSize.')
lpsBridgePortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressRemoteAddress.setDescription('The remote MAC address detected on the bridge port identified by to this entry. Setting this object results in an attempt to create a new entry in the table. Since the value of lpsBridgePortAddressIndex is determined automatically internal to the bridge, a set is only successful if the index value specified for lpsBridgePortAddressIndex is zero. A get-next using the values of lpsBridgePortAddressTypeIndex and lpsBridgePortAddressPortIndex can be used to determine the address index assigned to the newly added address entry.')
lpsBridgePortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressType.setDescription('This object, when read, always returns the value valid(1). Setting this object to invalid(2) will remove the corresponding address entry from the table.')
lpsBridgePortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgePortAddressIsStatic.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressIsStatic.setDescription('A value indicating whether this MAC address was statically configured or was dynamically learned. Note that isStatic(1) it the only valid for set operations.')
lpsBridgePortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressStaticPort.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressStaticPort.setDescription('If the corresponding value of the object lpsBridgePortAddressIsStatic is isStatic(1), this object indicates the local bridge port index (as reported by lpsBridgePortLocalIndex) for which this address MAC was statically configured. If the object lpsBridgePortAddressIsStatic has the value isDynamic(2), the value of this object is 0.')
lpsBridgePortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsBridgePortAddressAge.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgePortAddressAge.setDescription('This object indicates the time, in seconds, elapsed since a packet containing this address as a source was last seen on the bridge port identified by this entry.')
lpsBridgeStpGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeStpGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeStpGroupAddress.setDescription('Spanning tree bridge group address. The address cannot be changed if the spanning tree is enabled (lpsBridgeStpEnabled).')
lpsBridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsBridgeStpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsBridgeStpEnable.setDescription('This object indicates if spanning tree bridge feature is enabled or disabled. If enabled this value will equal true(1).')
lpsNetworkAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1), )
if mibBuilder.loadTexts: lpsNetworkAnalyzerTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkAnalyzerTable.setDescription('A list of analyzer entries. A single entry exists in this list for each bridge port configured for an analyzer.')
lpsNetworkAnalyzerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkAnalyzerBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkAnalyzerBridgePortIndex"))
if mibBuilder.loadTexts: lpsNetworkAnalyzerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkAnalyzerTableEntry.setDescription('An analyzer table entry contains information relating an analyzer port address to the bridge and port index for that analyzer. The effect of creating an entry for a particular port is to configure that port for monitoring. A port which is configured for monitoring is no longer available for switching. To create an entry, set the value of the lpsNetworkAnalyzerStatus object for a non-existent instance to valid(1). The value of the lpsNetworkAnalyzerPhysicalAddress object for the new entry is filled in as a result of the creation. The effect of removing an entry for a particular port is to disable the port for monitoring. The port is then available for switching. To remove an entry, set the value of the corresponding instance of the lpsNetworkAnalyzerStatus object to invalid(2).')
lpsNetworkAnalyzerBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkAnalyzerBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkAnalyzerBridgeIndex.setDescription('The index of the bridge relative to this agent where the analyzer identified by this entry is configured.')
lpsNetworkAnalyzerBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkAnalyzerBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkAnalyzerBridgePortIndex.setDescription('The index of the port relative to the bridge identified by this entry where the analyzer identified by this entry is configured.')
lpsNetworkAnalyzerPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkAnalyzerPhysicalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkAnalyzerPhysicalAddress.setDescription('The physical address of the bridge port identified by the corresponding values of lpsNetworkAnalyzerBridgeIndex and lpsNetworkAnayzerBridgePortIndex.')
lpsNetworkAnalyzerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsNetworkAnalyzerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkAnalyzerStatus.setDescription('The status of the entry. Setting the value of a non-existent instance of this object to valid(1) attempts to add the corresponding entry to the table. The effect of adding an entry to the table is to configure the port for monitoring and to disable it for switching. Setting an existing instance of this object to invalid(2) attempts to remove the corresponding entry from the table. The effect of removing an entry from the table is to disable the port for monitoring and to make available for switching.')
lpsNetworkPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2), )
if mibBuilder.loadTexts: lpsNetworkPortMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkPortMonitorTable.setDescription('A list of monitor port entries. A single entry exists in this for each bridge port being monitored.')
lpsNetworkPortMonitorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkPortMonitorBridgeIndex"), (0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsNetworkPortMonitorBridgePortIndex"))
if mibBuilder.loadTexts: lpsNetworkPortMonitorTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkPortMonitorTableEntry.setDescription('A port monitor table entry contains information relating a bridge port being monitored with the address of the analyzer which is being used to monitor the port. The effect of creating an entry for a particular port is to enable monitoring of that port by the analyzer specified. To create an entry, set the value of the lpsNetworkPortMonitorAnalyzerAddress object to the address of the network analyzer port. This value should be the same as the value of the lpsNetworkAnalyzerPhysicalAddress object for the analyzer. The effect of removing an entry for a particular port is to disable monitoring of that port. To remove an entry, set the value of the corresponding instance of the lpsNetworkPortMonitorStatus object to invalid(2).')
lpsNetworkPortMonitorBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkPortMonitorBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkPortMonitorBridgeIndex.setDescription('The index of the bridge relative to this agent where the monitored port identified by this entry is located.')
lpsNetworkPortMonitorBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsNetworkPortMonitorBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkPortMonitorBridgePortIndex.setDescription('The index of the port which is being monitored relative to the bridge identified by this entry.')
lpsNetworkPortMonitorAnalyzerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsNetworkPortMonitorAnalyzerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkPortMonitorAnalyzerAddress.setDescription('The physical address of the port where the analyzer, which is monitoring the port identified by this entry, is located. Setting the value of a non-existent instance of this object attempts to add an entry to the table. The effect of adding an entry to the table is to enable monitoring of the port by the analyzer specified. Setting the value of an existing instance of this object will switch the monitored port to the new analyzer address.')
lpsNetworkPortMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsNetworkPortMonitorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsNetworkPortMonitorStatus.setDescription('The status of the entry. Setting an existing instance of this object to invalid(2) attempts to remove the corresponding entry from the table. The effect of removing an entry from the table is to disable monitoring of the port.')
lpsTokenRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortCount.setDescription('The count of token ring ports managed by this agent.')
lpsTokenRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2), )
if mibBuilder.loadTexts: lpsTokenRingPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortTable.setDescription('A list of token ring port entries. A single entry exists in this list for each token ring port managed by this agent.')
lpsTokenRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1), ).setIndexNames((0, "LANPLEX-SYSTEMS-MIB-1-2-2", "lpsTokenRingPortIndex"))
if mibBuilder.loadTexts: lpsTokenRingPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortEntry.setDescription('A token ring port entry contains information about a particular token ring port managed by this agent.')
lpsTokenRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortIndex.setDescription('The index of the token ring port identified by this entry, relative to this agent.')
lpsTokenRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the token ring port identified by this entry.')
lpsTokenRingPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsTokenRingPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortLabel.setDescription('An ASCII text string describing the token ring port identified by this entry.')
lpsTokenRingPortInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("deinserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortInsertStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortInsertStatus.setDescription('The current value of the link status for the token ring port identified by this entry.')
lpsTokenRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortType.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortType.setDescription('Specific port type description for the token ring port identified by this entry.')
lpsTokenRingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("lobe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsTokenRingPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortMode.setDescription('The current mode of the port. The default mode (station) is used to connect a hub to the port. Lobe mode is used to direct connect a Token Ring station into the port. This selection can only be made on ports 1 and 2 of the module.')
lpsTokenRingPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2), ("sixteenMegabitETR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsTokenRingPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortSpeed.setDescription('The current speed of the port. The default speed is sixteenMegabit.')
lpsTokenRingPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortLineErrors.setDescription('This counter is incremented when a frame or token is copied or repeated by a station, the E bit is zero in the frame or token and one of the following conditions exists: 1) there is a non-data bit (J or K bit) between the SD and the ED of the frame or token, or 2) there is an FCS error in the frame.')
lpsTokenRingPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortBurstErrors.setDescription('This counter is incremented when a station detects the absence of transitions for five half-bit timers (burst-five error).')
lpsTokenRingPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortACErrors.setDescription('This counter is incremented when a station receives an AMP or SMP frame in which A is equal to C is equal to 0, and then receives another SMP frame with A is equal to C is equal to 0 without first receiving an AMP frame. It denotes a station that cannot set the AC bits properly.')
lpsTokenRingPortAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortAbortTransErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortAbortTransErrors.setDescription('This counter is incremented when a station transmits an abort delimiter while transmitting.')
lpsTokenRingPortInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortInternalErrors.setDescription('This counter is incremented when a station recognizes an internal error.')
lpsTokenRingPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortLostFrameErrors.setDescription('This counter is incremented when a station is transmitting and its TRR timer expires. This condition denotes a condition where a transmitting station in strip mode does not receive the trailer of the frame before the TRR timer goes off.')
lpsTokenRingPortReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortReceiveCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortReceiveCongestionErrors.setDescription('This counter is incremented when a station recognizes a frame addressed to its specific address, but has no available buffer space indicating that the station is congested.')
lpsTokenRingPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortFrameCopiedErrors.setDescription('This counter is incremented when a station recognizes a frame addressed to its specific address and detects that the FS field A bits are set to 1 indicating a possible line hit or duplicate address.')
lpsTokenRingPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortTokenErrors.setDescription('This counter is incremented when a station acting as the active monitor recognizes an error condition that needs a token transmitted.')
lpsTokenRingPortSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortSoftErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortSoftErrors.setDescription('The number of Soft Errors the interface has detected. It directly corresponds to the number of Report Error MAC frames that this interface has transmitted. Soft Errors are those which are recoverable by the MAC layer protocols.')
lpsTokenRingPortHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortHardErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortHardErrors.setDescription('The number of times this interface has detected an immediately recoverable fatal error. It denotes the number of times this interface is either transmitting or receiving beacon MAC frames.')
lpsTokenRingPortTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortTransmitBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortTransmitBeacons.setDescription('The number of times this interface has transmitted a beacon frame.')
lpsTokenRingPortLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortLobeWires.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortLobeWires.setDescription('The number of times the interface has detected an open or short circuit in the lobe data path. The adapter will be closed when this condition occurs.')
lpsTokenRingPortRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortRemoves.setDescription('The number of times the interface has received a Remove Ring Station MAC frame request. When this frame is received the interface will enter the close state.')
lpsTokenRingPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortSingles.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortSingles.setDescription('The number of times the interface has sensed that it is the only station on the ring. This will happen if the interface is the first one up on a ring, or if there is a hardware problem.')
lpsTokenRingPortFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortFreqErrors.setStatus('optional')
if mibBuilder.loadTexts: lpsTokenRingPortFreqErrors.setDescription('The number of times the interface has detected that the frequency of the incoming signal differs from the expected frequency.')
lpsTokenRingPortRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 114, 1, 4, 13, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTokenRingPortRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpsTokenRingPortRingStatus.setDescription("The current interface status which can be used to diagnose fluctuating problems that can occur on token rings, after a station has successfully been added to the ring. Before an open is completed, this object has the value for the 'no status' condition. This object is useful for debugging problems when the station can not even enter the ring. The object's value is a sum of values, one for each currently applicable condition. The following values are defined for various conditions: 0 = No Problems detected 32 = Ring Recovery 64 = Single Station 256 = Remove Received 512 = reserved 1024 = Auto-Removal Error 2048 = Lobe Wire Fault 4096 = Transmit Beacon 8192 = Soft Error 16384 = Hard Error 32768 = Signal Loss 131072 = no status, open not completed.")
lpsSystemOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,1)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSystemOvertemperature"))
if mibBuilder.loadTexts: lpsSystemOverTemperatureEvent.setDescription('The trap that is generated when the system temperature exceeds a certain threshold.')
lpsPowerSupplyFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,2)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatusIndex"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatus"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsPowerSupplyStatusSupported"))
if mibBuilder.loadTexts: lpsPowerSupplyFailureEvent.setDescription('The trap that is generated when a power supply unit fails.')
lpsChassisSlotOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,3)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardType"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardRevision"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardStatus"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotOvertemperature"))
if mibBuilder.loadTexts: lpsChassisSlotOverTemperatureEvent.setDescription('The trap that is generated when the temperature of a board in a particular slot exceeds a certain threshold.')
lpsChassisSlotInsertEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,4)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardType"), ("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotBoardRevision"))
if mibBuilder.loadTexts: lpsChassisSlotInsertEvent.setDescription('The trap that is generated when a board is inserted into a particular slot.')
lpsChassisSlotExtractEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,5)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSlotIndex"))
if mibBuilder.loadTexts: lpsChassisSlotExtractEvent.setDescription('The trap that is generated when a board is extracted from a particular slot.')
lpsBridgeAddressThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,6)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsBridgeIndex"))
if mibBuilder.loadTexts: lpsBridgeAddressThresholdEvent.setDescription('The trap that is generated when the number of addresses stored in the bridge reaches lpsBridgeAddressThreshold.')
lpsSystemFanFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 114, 1, 4) + (0,7)).setObjects(("LANPLEX-SYSTEMS-MIB-1-2-2", "lpsSystemFanFailure"))
if mibBuilder.loadTexts: lpsSystemFanFailureEvent.setDescription('The trap that is generated when one of the system fans fails.')
mibBuilder.exportSymbols("LANPLEX-SYSTEMS-MIB-1-2-2", lpsSnmpInternalAgentTrapDestinationMask=lpsSnmpInternalAgentTrapDestinationMask, lpsEthernetPortLinkStatus=lpsEthernetPortLinkStatus, lpsEthernetPortTable=lpsEthernetPortTable, lps6012=lps6012, lps6012TRSM=lps6012TRSM, lpsEthernetPortEntry=lpsEthernetPortEntry, lpsEthernetPortRateByteTransmitRate=lpsEthernetPortRateByteTransmitRate, lpsSlotFddiPortCount=lpsSlotFddiPortCount, lpsBridgePortEntry=lpsBridgePortEntry, lpsAgentTrapDescriptionTable=lpsAgentTrapDescriptionTable, lpsBridgePortSameSegmentDiscards=lpsBridgePortSameSegmentDiscards, lpsControlPanelLines=lpsControlPanelLines, lpsNetworkPortMonitorTable=lpsNetworkPortMonitorTable, lpsSnmpInternalProxyAgentId=lpsSnmpInternalProxyAgentId, lpsSmtFddiMacRatePeakByteReceiveRate=lpsSmtFddiMacRatePeakByteReceiveRate, lpsBridgePortFloodedUnicastFrames=lpsBridgePortFloodedUnicastFrames, lpsAgent=lpsAgent, lps6004ESM=lps6004ESM, lpsAgentTrapDestinationTable=lpsAgentTrapDestinationTable, lpsBridgeCount=lpsBridgeCount, lpsProducts=lpsProducts, lpsBridgePortTransmitAllPathFilteredFrames=lpsBridgePortTransmitAllPathFilteredFrames, lpsPowerSupplyCount=lpsPowerSupplyCount, lpsSmtFddiPortLocationLocalIndex=lpsSmtFddiPortLocationLocalIndex, lpsAgentProxyRemoteSmtRequests=lpsAgentProxyRemoteSmtRequests, lpsSystemNvMemorySize=lpsSystemNvMemorySize, lpsSlotBoardNameAbbrev=lpsSlotBoardNameAbbrev, lpsSmtFddiMacRatePeakByteTransmitRate=lpsSmtFddiMacRatePeakByteTransmitRate, lpsSmtFddiPortLocationTypeIndex=lpsSmtFddiPortLocationTypeIndex, lpsSlotTable=lpsSlotTable, lpsEthernetPortLabel=lpsEthernetPortLabel, lpsSmtFddiPortLabel=lpsSmtFddiPortLabel, lpsTokenRingPortLineErrors=lpsTokenRingPortLineErrors, lpsBridgeAddressTableCount=lpsBridgeAddressTableCount, lpsBridgePortPairForwardedToUnicastFrames=lpsBridgePortPairForwardedToUnicastFrames, lpsTokenRingPortInsertStatus=lpsTokenRingPortInsertStatus, lpsBridgePortReceiveMulticastLimitExceededDiscards=lpsBridgePortReceiveMulticastLimitExceededDiscards, lpsTokenRingPortReceiveCongestionErrors=lpsTokenRingPortReceiveCongestionErrors, synernetics=synernetics, lpsSlotBoardType=lpsSlotBoardType, lps2000=lps2000, lpsSystemRequestedSnmpMode=lpsSystemRequestedSnmpMode, lpsSmtFddiMacRatePeakFrameReceiveRate=lpsSmtFddiMacRatePeakFrameReceiveRate, lpsSlotTokenRingPortCount=lpsSlotTokenRingPortCount, lpsBridgePortForwardedUnicastFrames=lpsBridgePortForwardedUnicastFrames, lpsIpRouter=lpsIpRouter, lpsSmtFddiMacBeaconTable=lpsSmtFddiMacBeaconTable, lpsSmtFddiMacRateEntry=lpsSmtFddiMacRateEntry, lpsTokenRingPortTable=lpsTokenRingPortTable, lps2016=lps2016, lpsBridgePortReceiveOtherDiscards=lpsBridgePortReceiveOtherDiscards, lpsTokenRingPortTokenErrors=lpsTokenRingPortTokenErrors, lpsPowerSupplyStatusTable=lpsPowerSupplyStatusTable, lpsEthernetPortRateIndex=lpsEthernetPortRateIndex, lpsBridgeTrFddiTranslationMode=lpsBridgeTrFddiTranslationMode, lpsTokenRingPortLostFrameErrors=lpsTokenRingPortLostFrameErrors, lpsTokenRingPortTransmitBeacons=lpsTokenRingPortTransmitBeacons, lpsSnmpAgentId=lpsSnmpAgentId, lpsSystemManufacturer=lpsSystemManufacturer, lanplex=lanplex, lpsTokenRingPortLobeWires=lpsTokenRingPortLobeWires, lpsSystemBuildTime=lpsSystemBuildTime, lpsNetworkAnalyzerTableEntry=lpsNetworkAnalyzerTableEntry, lpsSystemAction=lpsSystemAction, lps6004EFSM=lps6004EFSM, lpsSmtFddiPortLocationType=lpsSmtFddiPortLocationType, lps6004=lps6004, lpsNetworkPortMonitorBridgeIndex=lpsNetworkPortMonitorBridgeIndex, lpsSystemId=lpsSystemId, lpsEthernetPortType=lpsEthernetPortType, lpsNetworkPortMonitorTableEntry=lpsNetworkPortMonitorTableEntry, lpsInterfaceLocationTable=lpsInterfaceLocationTable, lpsBridgePortAddressType=lpsBridgePortAddressType, lpsTokenRingPortHardErrors=lpsTokenRingPortHardErrors, lpsBridgePortTransmitBlockedDiscards=lpsBridgePortTransmitBlockedDiscards, lpsBridgePortReceiveUnknownDiscards=lpsBridgePortReceiveUnknownDiscards, lpsSlotEntry=lpsSlotEntry, lpsTokenRingPortEntry=lpsTokenRingPortEntry, lpsBridgePortAddressAge=lpsBridgePortAddressAge, lpsEthernetPortRatePeakByteReceiveRate=lpsEthernetPortRatePeakByteReceiveRate, lpsSmtFddiMacRateByteTransmitRate=lpsSmtFddiMacRateByteTransmitRate, lpsBridgePortIfIndex=lpsBridgePortIfIndex, lpsTokenRingPortSpeed=lpsTokenRingPortSpeed, lpsEthernetPortRateEntry=lpsEthernetPortRateEntry, lpsTokenRingPortIndex=lpsTokenRingPortIndex, lps6004TMM=lps6004TMM, lpsSnmpProxyInternalRequests=lpsSnmpProxyInternalRequests, lpsPowerSupplyStatus=lpsPowerSupplyStatus, lpsBridgePortBridgeIndex=lpsBridgePortBridgeIndex, lpsSmtFddiPortIndex=lpsSmtFddiPortIndex, lpsBridgePortAddressStaticPort=lpsBridgePortAddressStaticPort, lpsAgentRequestMaxAge=lpsAgentRequestMaxAge, lpsSmtFddiMacRateTable=lpsSmtFddiMacRateTable, lpsBridgePortPairBridgeIndex=lpsBridgePortPairBridgeIndex, lpsSmtFddiPortTable=lpsSmtFddiPortTable, lpsTokenRingPortBurstErrors=lpsTokenRingPortBurstErrors, lpsSmtFddiMacRateByteReceiveRate=lpsSmtFddiMacRateByteReceiveRate, lpsAgentTrapDestinationAddress=lpsAgentTrapDestinationAddress, lpsBridgePortSpanningTreeFrameReceivedCounts=lpsBridgePortSpanningTreeFrameReceivedCounts, lpsEthernetPortIndex=lpsEthernetPortIndex, lpsTokenRingPortSoftErrors=lpsTokenRingPortSoftErrors, lpsInterfaceLocationTypeIndex=lpsInterfaceLocationTypeIndex, lpsTokenRingPortAbortTransErrors=lpsTokenRingPortAbortTransErrors, lpsBridgePortReceiveBlockedDiscards=lpsBridgePortReceiveBlockedDiscards, lpsAgentProxyRemoteSmtEvents=lpsAgentProxyRemoteSmtEvents, lpsBridge=lpsBridge, lpsNetworkMonitor=lpsNetworkMonitor, lpsEthernetPortCount=lpsEthernetPortCount, lpsSmtFddiMacBeaconIndex=lpsSmtFddiMacBeaconIndex, lpsSmtFddiMacRateSmtIndex=lpsSmtFddiMacRateSmtIndex, lpsTokenRingPort=lpsTokenRingPort, lps6004TRSM=lps6004TRSM, lpsPowerSupplyFailureEvent=lpsPowerSupplyFailureEvent, lpsSystemFanFailureEvent=lpsSystemFanFailureEvent, lps2500=lps2500, lpsEthernetPortRateTable=lpsEthernetPortRateTable, lpsBridgePortPairEntry=lpsBridgePortPairEntry, lpsTokenRingPortSingles=lpsTokenRingPortSingles, lpsBridgePortIndex=lpsBridgePortIndex, lpsTokenRingPortIfIndex=lpsTokenRingPortIfIndex, lpsSlotIndex=lpsSlotIndex, lpsTokenRingPortType=lpsTokenRingPortType, lps6012EFSM=lps6012EFSM, lpsSlotBoardName=lpsSlotBoardName, lpsBridgePortAddressTable=lpsBridgePortAddressTable, lpsChassisSlotExtractEvent=lpsChassisSlotExtractEvent, lpsBridgeMode=lpsBridgeMode, lpsEthernetPortRatePeakFrameReceiveRate=lpsEthernetPortRatePeakFrameReceiveRate, lpsBridgePortReceiveMulticastLimit=lpsBridgePortReceiveMulticastLimit, lpsAgentRemoteSmtProxyRequestMaxAge=lpsAgentRemoteSmtProxyRequestMaxAge, lpsEthernetPortIfIndex=lpsEthernetPortIfIndex, lpsBridgePortPairTable=lpsBridgePortPairTable, lpsSystemOverTemperatureEvent=lpsSystemOverTemperatureEvent, lss2200=lss2200, lpsBridgePortTransmitMulticastPathFilteredFrames=lpsBridgePortTransmitMulticastPathFilteredFrames, lpsBridgePortReceiveAllPathFilteredFrames=lpsBridgePortReceiveAllPathFilteredFrames, lpsTokenRingPortMode=lpsTokenRingPortMode, lpsControlPanelSoftwareRevision=lpsControlPanelSoftwareRevision, lpsSystemOvertemperature=lpsSystemOvertemperature, lpsEthernetPortRatePeakByteTransmitRate=lpsEthernetPortRatePeakByteTransmitRate, lpsSnmp=lpsSnmp, lpsBridgePortTable=lpsBridgePortTable, lpsBridgePortForwardedUnicastOctets=lpsBridgePortForwardedUnicastOctets, lps6012ESM=lps6012ESM, lpsSlotBoardStatus=lpsSlotBoardStatus, lpsAgentTrapNumber=lpsAgentTrapNumber, lps6012System=lps6012System, lpsControlPanelColumns=lpsControlPanelColumns, lpsSnmpInternalProxyRequestMaxAge=lpsSnmpInternalProxyRequestMaxAge, lpsChassisSlotOverTemperatureEvent=lpsChassisSlotOverTemperatureEvent, lpsSystemFanFailure=lpsSystemFanFailure, lpsChassisSlotInsertEvent=lpsChassisSlotInsertEvent, lpsNetworkAnalyzerBridgePortIndex=lpsNetworkAnalyzerBridgePortIndex, lpsBridgePortAddressIsStatic=lpsBridgePortAddressIsStatic, lpsSnmpProxyInternalTraps=lpsSnmpProxyInternalTraps, lpsEthernetPortRateByteReceiveRate=lpsEthernetPortRateByteReceiveRate, lpsSmtFddiMacRateFrameTransmitRate=lpsSmtFddiMacRateFrameTransmitRate, lpsBridgePortForwardedMulticastFrames=lpsBridgePortForwardedMulticastFrames, lpsBridgePortAddressRemoteAddress=lpsBridgePortAddressRemoteAddress, lpsSystemFlashMemorySize=lpsSystemFlashMemorySize, lpsSmtFddiPortSmtIndex=lpsSmtFddiPortSmtIndex, lpsBridgeAddressThresholdEvent=lpsBridgeAddressThresholdEvent, lpsSmt=lpsSmt, lps6004System=lps6004System, lpsSmtFddiMacRateFrameReceiveRate=lpsSmtFddiMacRateFrameReceiveRate, lpsSnmpInternalProxyEntry=lpsSnmpInternalProxyEntry, lpsPowerSupply=lpsPowerSupply, lpsBridgePortPairReceivePortIndex=lpsBridgePortPairReceivePortIndex, lanplexSystemsMib=lanplexSystemsMib, lpsBridgeTable=lpsBridgeTable, lpsTokenRingPortLabel=lpsTokenRingPortLabel, lpsSlotFddiMacCount=lpsSlotFddiMacCount, lpsAgentTrapEnterprise=lpsAgentTrapEnterprise, lpsNetworkAnalyzerBridgeIndex=lpsNetworkAnalyzerBridgeIndex, lpsEthernetPortRateFrameTransmitRate=lpsEthernetPortRateFrameTransmitRate, lpsAgentTrapDestinationAddressType=lpsAgentTrapDestinationAddressType, lpsBridgePortForwardedMulticastOctets=lpsBridgePortForwardedMulticastOctets, lpsBridgePortReceiveSecurityDiscards=lpsBridgePortReceiveSecurityDiscards, lpsBridgePortAddressEntry=lpsBridgePortAddressEntry, lpsSmtFddiMacBeaconHistory=lpsSmtFddiMacBeaconHistory, lpsPowerSupplyStatusIndex=lpsPowerSupplyStatusIndex, lpsSystemType=lpsSystemType, lpsPowerSupplyStatusSupported=lpsPowerSupplyStatusSupported, lpsSnmpInternalProxyCommunity=lpsSnmpInternalProxyCommunity, lpsAgentTrapDescriptionIndex=lpsAgentTrapDescriptionIndex, lpsControlPanelHardwareRevision=lpsControlPanelHardwareRevision, lpsSmtFddiMacRatePeakFrameTransmitRate=lpsSmtFddiMacRatePeakFrameTransmitRate, lpsBridgePortReceiveErrorDiscards=lpsBridgePortReceiveErrorDiscards, lpsNetworkPortMonitorBridgePortIndex=lpsNetworkPortMonitorBridgePortIndex, lpsBridgePortReceiveMulticastLimitExceededs=lpsBridgePortReceiveMulticastLimitExceededs, lpsSystemName=lpsSystemName, lpsBridgeStpGroupAddress=lpsBridgeStpGroupAddress, lpsBridgePortReceiveMulticastPathFilteredFrames=lpsBridgePortReceiveMulticastPathFilteredFrames, lpsBridgePortAddressAction=lpsBridgePortAddressAction, lpsBridgePortAddressPortIndex=lpsBridgePortAddressPortIndex, lpsTokenRingPortRingStatus=lpsTokenRingPortRingStatus, lpsEthernetPortRatePeakFrameTransmitRate=lpsEthernetPortRatePeakFrameTransmitRate, lpsNetworkAnalyzerTable=lpsNetworkAnalyzerTable, lpsSlot=lpsSlot, lpsBridgeAddressTablePeakCount=lpsBridgeAddressTablePeakCount, lpsSlotOvertemperature=lpsSlotOvertemperature, lpsPowerSupplyStatusEntry=lpsPowerSupplyStatusEntry, lpsControlPanelText=lpsControlPanelText, lpsSnmpInternalAgentTrapMask=lpsSnmpInternalAgentTrapMask, lpsInterfaceLocationInterfaceType=lpsInterfaceLocationInterfaceType, lpsSmtCount=lpsSmtCount, lpsSystemSnmpRevision=lpsSystemSnmpRevision, lpsBridgePortPairDestinationPortIndex=lpsBridgePortPairDestinationPortIndex, lpsNetworkAnalyzerPhysicalAddress=lpsNetworkAnalyzerPhysicalAddress, lpsInterfaceLocationLocalIndex=lpsInterfaceLocationLocalIndex, lpsBridgePortCount=lpsBridgePortCount, lpsSystemMemorySize=lpsSystemMemorySize, lpsInterfaceLocationEntry=lpsInterfaceLocationEntry, lpsSmtFddiMacBeaconSmtIndex=lpsSmtFddiMacBeaconSmtIndex, lps6004Chassis=lps6004Chassis, lpsSystemCurrentSnmpMode=lpsSystemCurrentSnmpMode, lpsSmtFddiMacRateIndex=lpsSmtFddiMacRateIndex, lps6012Chassis=lps6012Chassis, lpsControlPanel=lpsControlPanel, lpsSystem=lpsSystem, lpsBridgeAddressTableSize=lpsBridgeAddressTableSize, lpsBridgePortAddressBridgeIndex=lpsBridgePortAddressBridgeIndex, lpsTokenRingPortRemoves=lpsTokenRingPortRemoves, lpsBridgeIndex=lpsBridgeIndex, lpsNetworkPortMonitorStatus=lpsNetworkPortMonitorStatus, lpsTokenRingPortFreqErrors=lpsTokenRingPortFreqErrors, lpsSmtFddiPortEntry=lpsSmtFddiPortEntry, lpsSlotCount=lpsSlotCount, lpsNetworkAnalyzerStatus=lpsNetworkAnalyzerStatus, lpsTokenRingPortACErrors=lpsTokenRingPortACErrors, lpsTokenRingPortFrameCopiedErrors=lpsTokenRingPortFrameCopiedErrors, lpsBridgePortPairForwardedToUnicastOctets=lpsBridgePortPairForwardedToUnicastOctets, lpsEthernetPortRateFrameReceiveRate=lpsEthernetPortRateFrameReceiveRate, lpsSystemProtocolMask=lpsSystemProtocolMask, lpsTokenRingPortInternalErrors=lpsTokenRingPortInternalErrors, lpsAgentTrapDescriptionTableEntry=lpsAgentTrapDescriptionTableEntry, lps6000=lps6000, lps6012TMM=lps6012TMM, lpsSlotEthernetPortCount=lpsSlotEthernetPortCount, lpsAgentTrapDestinationTrapMask=lpsAgentTrapDestinationTrapMask, lpsEthernetPort=lpsEthernetPort, lpsSystemHardwareRevision=lpsSystemHardwareRevision, lpsBridgePortFloodedUnicastOctets=lpsBridgePortFloodedUnicastOctets, lpsInterfaceLocationIfIndex=lpsInterfaceLocationIfIndex, lpsAgentTrapDestinationEntryStatus=lpsAgentTrapDestinationEntryStatus, lpsTokenRingPortCount=lpsTokenRingPortCount, lpsAgentTrapDestinationTableEntry=lpsAgentTrapDestinationTableEntry, lpsInterfaceLocationType=lpsInterfaceLocationType, lpsSnmpInternalProxyTable=lpsSnmpInternalProxyTable, lpsSmtFddiMacBeaconEntry=lpsSmtFddiMacBeaconEntry, lpsBridgeStpEnable=lpsBridgeStpEnable, lpsSlotBoardRevision=lpsSlotBoardRevision, lpsNetworkPortMonitorAnalyzerAddress=lpsNetworkPortMonitorAnalyzerAddress, lpsInterface=lpsInterface)
mibBuilder.exportSymbols("LANPLEX-SYSTEMS-MIB-1-2-2", lpsBridgeBackbonePort=lpsBridgeBackbonePort, lpsBridgePortAddressIndex=lpsBridgePortAddressIndex, lpsBridgeIpFragmentationEnabled=lpsBridgeIpFragmentationEnabled, lpsBridgeEntry=lpsBridgeEntry, lpsSystemSoftwareRevision=lpsSystemSoftwareRevision, lpsSnmpInternalProxyAccessClass=lpsSnmpInternalProxyAccessClass, lpsBridgeAddressThreshold=lpsBridgeAddressThreshold)
