#
# PySNMP MIB module DNOS-POWER-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-POWER-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
pethPsePortEntry, pethMainPseEntry = mibBuilder.importSymbols("POWER-ETHERNET-MIB", "pethPsePortEntry", "pethMainPseEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, Bits, Integer32, Counter64, iso, TimeTicks, MibIdentifier, ModuleIdentity, NotificationType, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Bits", "Integer32", "Counter64", "iso", "TimeTicks", "MibIdentifier", "ModuleIdentity", "NotificationType", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
fastPathpowerEthernetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15))
fastPathpowerEthernetMIB.setRevisions(('2016-09-26 20:00', '2007-08-19 12:00', '2007-05-23 00:00', '2003-11-10 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathpowerEthernetMIB.setRevisionsDescriptions(('Changed by Observium developers. Changed base MIB prefix to DELL.', 'PoE support for BCM59101 added.', 'Broadcom branding related changes.', 'Initial revision.',))
if mibBuilder.loadTexts: fastPathpowerEthernetMIB.setLastUpdated('200708191200Z')
if mibBuilder.loadTexts: fastPathpowerEthernetMIB.setOrganization('Broadcom Corporation')
if mibBuilder.loadTexts: fastPathpowerEthernetMIB.setContactInfo(' Customer Support Postal: Broadcom Corporation 100 Perimeter Park Dr., Suite H Morrisville, NC 27560 Tel: +1 919 865 2700')
if mibBuilder.loadTexts: fastPathpowerEthernetMIB.setDescription('This MIB Augments the POWER-ETHERNET-MIB created by the IETF Ethernet Interfaces and Hub MIB Working Group for managing Power Source Equipment (PSE). The objects in this MIB are intended to provide additional objects for reporting information available to the hardware on this platform which are not represented in the draft MIB.')
agentPethObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1))
agentPethPsePortTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1), )
if mibBuilder.loadTexts: agentPethPsePortTable.setStatus('current')
if mibBuilder.loadTexts: agentPethPsePortTable.setDescription('A table of per-port information and configuration objects relating to the power status of each port.')
agentPethPsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1), )
pethPsePortEntry.registerAugmentions(("DNOS-POWER-ETHERNET-MIB", "agentPethPsePortEntry"))
agentPethPsePortEntry.setIndexNames(*pethPsePortEntry.getIndexNames())
if mibBuilder.loadTexts: agentPethPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: agentPethPsePortEntry.setDescription('A collection of objects providing additional power information and control parameters for the specified port.')
agentPethPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 1), Gauge32()).setUnits('Milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethPowerLimit.setStatus('current')
if mibBuilder.loadTexts: agentPethPowerLimit.setDescription('The configured maximum power this port can provide to an attached device measured in Milliwatts.')
agentPethOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 2), Gauge32()).setUnits('Milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPethOutputPower.setStatus('current')
if mibBuilder.loadTexts: agentPethOutputPower.setDescription('The power this port is supplying to an attached device measured in Milliwatts.')
agentPethOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 3), Gauge32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPethOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: agentPethOutputCurrent.setDescription('The current this port is supplying to an attached device measured in Milliamps.')
agentPethOutputVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 4), Gauge32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPethOutputVolts.setStatus('current')
if mibBuilder.loadTexts: agentPethOutputVolts.setDescription('The voltage this port is supplying to an attached device measured in Volts.')
agentPethTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 5), Gauge32()).setUnits('DEGREES').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPethTemperature.setStatus('current')
if mibBuilder.loadTexts: agentPethTemperature.setDescription('The temperature measured at this port of the PoE Controller. It is measured in degree celcius.')
agentPethPowerLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot3af", 1), ("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethPowerLimitType.setReference('Broadcom 5910X programmers guide, IEEE Std 802.3af Section 30.9.1.1.6')
if mibBuilder.loadTexts: agentPethPowerLimitType.setStatus('current')
if mibBuilder.loadTexts: agentPethPowerLimitType.setDescription('Describes or controls the maximum power that a port can deliver A value of dot3af(1) means that the port power limit is as per the dot3af class of the PD attached. A value of user(2) means that the port power limit is equal to the value specified by agentPethPowerLimit')
agentPethHighPowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethHighPowerEnable.setReference('Broadcom 5910X programmers guide')
if mibBuilder.loadTexts: agentPethHighPowerEnable.setStatus('current')
if mibBuilder.loadTexts: agentPethHighPowerEnable.setDescription('true (1) The PSE port can deliver power up to 32Watts. false(2) The PSE port can deliver power up to 18Watts')
agentPethPowerDetectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("legacy", 1), ("fourPtdot3afonly", 2), ("fourPtdot3afandlegacy", 3), ("twoPtdot3afonly", 4), ("twoPtdot3afandlegacy", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethPowerDetectionType.setReference('Broadcom 5910X programmers guide, IEEE Std 802.3af Section 30.9.1.1.6')
if mibBuilder.loadTexts: agentPethPowerDetectionType.setStatus('current')
if mibBuilder.loadTexts: agentPethPowerDetectionType.setDescription("Describes PD detection mechanism performed by the PSE port. A value of none(0) means no detection is done. A value of legacy(1) means only legacy capacitive detection scheme is used. A value of 4ptdot3afonly(2) means that IEEE 802.3af 4point detection scheme is used. A value of 4ptdot3afandlegacy(3)means that IEEE 802.3af 4point detection scheme is used and when that fails to detect a connected PD, legacity capacitive detection is used. A value of 2ptdot3afonly(4) means that IEEE 802.3af 2point detection scheme is used. A value of 2ptdot3afandlegacy(5)means that IEEE 802.3af 2point detection scheme is used and when that fails to detect a connected PD, legacity capacitive detection is used. The value 'none' can not be forcibly set by the administrator.")
agentPethFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("mpsAbsent", 1), ("short", 2), ("overload", 3), ("powerDenied", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPethFaultStatus.setReference('Broadcom 5910X programmers guide, IEEE Std 802.3af')
if mibBuilder.loadTexts: agentPethFaultStatus.setStatus('current')
if mibBuilder.loadTexts: agentPethFaultStatus.setDescription('Describes the error description when the pse port is in fault status. A value of none(0) specifies that the pse port is not in any error state. A value of mpsAbsent(1) specifies that the pse port has detected and absence of main power supply. A value of short(2) specifies that the pse port has detected a short circuit condition. A value of overload(3) specifies that the pd connected to the pse port had tried to draw more power than permissible by the hardware. A value of powerDenied(4) specifies that the pse port has been denied power because of shortage of power or due to administrative action.')
agentPethPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethPortReset.setReference('Broadcom 5910X programmers guide, IEEE Std 802.3af')
if mibBuilder.loadTexts: agentPethPortReset.setStatus('current')
if mibBuilder.loadTexts: agentPethPortReset.setDescription('A value of reset(1) is used to move the pse port dot3af state to idle. A read on this object will always return the value none(0). The value none(0) can not be forcibly set by the administrtor.')
agentPethMainPseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 2))
agentPethMainPseTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 2, 1), )
if mibBuilder.loadTexts: agentPethMainPseTable.setStatus('current')
if mibBuilder.loadTexts: agentPethMainPseTable.setDescription('A table of objects that display and control attributes of the main power source in a PSE device. Ethernet switches are one example of boxes that would support these objects. Values of all read-write objects in this table are persistent at restart/reboot.')
agentPethMainPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 2, 1, 1), )
pethMainPseEntry.registerAugmentions(("DNOS-POWER-ETHERNET-MIB", "agentPethMainPseEntry"))
agentPethMainPseEntry.setIndexNames(*pethMainPseEntry.getIndexNames())
if mibBuilder.loadTexts: agentPethMainPseEntry.setStatus('current')
if mibBuilder.loadTexts: agentPethMainPseEntry.setDescription('A set of objects that display and control the Main power of a PSE. ')
agentPethMainPseLegacy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethMainPseLegacy.setStatus('current')
if mibBuilder.loadTexts: agentPethMainPseLegacy.setDescription('Enable/Disable Legacy device detection. The value true(1) means legacy devices are detected; the value false(2) means legacy devices are not detected.')
agentPethPseTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 3), )
if mibBuilder.loadTexts: agentPethPseTable.setStatus('current')
if mibBuilder.loadTexts: agentPethPseTable.setDescription('A table of per-unit information and configuration objects relating to the power configurtion for the entire pse unit.')
agentPethPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 3, 1), )
pethMainPseEntry.registerAugmentions(("DNOS-POWER-ETHERNET-MIB", "agentPethPseEntry"))
agentPethPseEntry.setIndexNames(*pethMainPseEntry.getIndexNames())
if mibBuilder.loadTexts: agentPethPseEntry.setStatus('current')
if mibBuilder.loadTexts: agentPethPseEntry.setDescription('A collection of objects providing additional power information and control parameters for the specified pse unit.')
agentPethPsePowerManagementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethPsePowerManagementMode.setReference('Broadcom 5910X programmers guide')
if mibBuilder.loadTexts: agentPethPsePowerManagementMode.setStatus('current')
if mibBuilder.loadTexts: agentPethPsePowerManagementMode.setDescription('Describes or controls the power management algorithm used by the pse to deliver power to the requesting PDsthat a pds. A value of dot3af(1) means that the port power limit is as per the dot3af class of the PD attached. A value of user(2) means that the port power limit is equal to the value specified by agentPethPowerLimit')
agentPethPseAutoResetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 15, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPethPseAutoResetEnable.setStatus('current')
if mibBuilder.loadTexts: agentPethPseAutoResetEnable.setDescription('true (1) The PSE port is reset with out administrator intervention whenver a fault condition occurs. false(2) Administrator has to reset the pse port whenver a fault condition is detected.')
mibBuilder.exportSymbols("DNOS-POWER-ETHERNET-MIB", agentPethMainPseObjects=agentPethMainPseObjects, agentPethPowerLimit=agentPethPowerLimit, agentPethHighPowerEnable=agentPethHighPowerEnable, agentPethPowerLimitType=agentPethPowerLimitType, agentPethOutputPower=agentPethOutputPower, agentPethOutputCurrent=agentPethOutputCurrent, agentPethPowerDetectionType=agentPethPowerDetectionType, fastPathpowerEthernetMIB=fastPathpowerEthernetMIB, agentPethPsePortEntry=agentPethPsePortEntry, agentPethPseTable=agentPethPseTable, agentPethOutputVolts=agentPethOutputVolts, agentPethPseAutoResetEnable=agentPethPseAutoResetEnable, agentPethMainPseLegacy=agentPethMainPseLegacy, agentPethPortReset=agentPethPortReset, PYSNMP_MODULE_ID=fastPathpowerEthernetMIB, agentPethMainPseTable=agentPethMainPseTable, agentPethFaultStatus=agentPethFaultStatus, agentPethTemperature=agentPethTemperature, agentPethPsePortTable=agentPethPsePortTable, agentPethObjects=agentPethObjects, agentPethPsePowerManagementMode=agentPethPsePowerManagementMode, agentPethMainPseEntry=agentPethMainPseEntry, agentPethPseEntry=agentPethPseEntry)
