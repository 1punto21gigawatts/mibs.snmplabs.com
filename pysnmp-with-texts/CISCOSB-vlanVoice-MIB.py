#
# PySNMP MIB module CISCOSB-vlanVoice-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-vlanVoice-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
VlanPriority, = mibBuilder.importSymbols("CISCOSB-MIB", "VlanPriority")
vlan, = mibBuilder.importSymbols("CISCOSB-vlan-MIB", "vlan")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, NotificationType, ModuleIdentity, ObjectIdentity, Unsigned32, IpAddress, Gauge32, MibIdentifier, Counter32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "Counter32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TruthValue, TextualConvention, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString", "RowStatus")
vlanVoice = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54))
vlanVoice.setRevisions(('2010-09-26 00:00', '2010-09-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vlanVoice.setRevisionsDescriptions(('Editorial changes to support new MIB compilers.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: vlanVoice.setLastUpdated('201001090000Z')
if mibBuilder.loadTexts: vlanVoice.setOrganization('Cisco Small Business')
if mibBuilder.loadTexts: vlanVoice.setContactInfo('Postal: 170 West Tasman Drive San Jose , CA 95134-1706 USA Website: Cisco Small Business Home http://www.cisco.com/smb>;, Cisco Small Business Support Community <http://www.cisco.com/go/smallbizsupport>')
if mibBuilder.loadTexts: vlanVoice.setDescription('The private MIB module definition for voice vlan support in switch devices.')
vlanVoiceAdminState = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("auto-enabled", 1), ("auto-triggered", 2), ("oui-enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAdminState.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAdminState.setDescription(' administrative voice vlan status ')
vlanVoiceOperState = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("auto-enabled", 1), ("auto-triggered", 2), ("oui-enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceOperState.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOperState.setDescription(' operational voice vlan status ')
vlanVoiceAdminVid = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAdminVid.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAdminVid.setDescription('1-4094 actual vlan (must exist in dot1qvlan static table)')
vlanVoiceOperVid = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceOperVid.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOperVid.setDescription(' operational Voice Vlan ID')
vlanVoiceUcDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10), )
if mibBuilder.loadTexts: vlanVoiceUcDeviceTable.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceTable.setDescription('A table containing static default and UC directly connected to device configuration.')
vlanVoiceUcDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1), ).setIndexNames((0, "CISCOSB-vlanVoice-MIB", "vlanVoiceUcDeviceType"), (0, "CISCOSB-vlanVoice-MIB", "vlanVoiceUcDeviceMacAddress"), (0, "CISCOSB-vlanVoice-MIB", "vlanVoiceUcDeviceInterface"))
if mibBuilder.loadTexts: vlanVoiceUcDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceEntry.setDescription('Static and dynamic per port information for a voice VLAN.')
vlanVoiceUcDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("static", 1), ("uc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceType.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceType.setDescription('type of entry')
vlanVoiceUcDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceMacAddress.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceMacAddress.setDescription('Mac address of UC')
vlanVoiceUcDeviceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceInterface.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceInterface.setDescription('Mac interface on which UC is connected')
vlanVoiceUcDeviceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceVid.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceVid.setDescription('The Voice Vlan ID')
vlanVoiceUcDeviceVpt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceVpt.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceVpt.setDescription('The entry VPT')
vlanVoiceUcDeviceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceDscp.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceDscp.setDescription('The entry DSCP value')
vlanVoiceUcDeviceIsBest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 10, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceUcDeviceIsBest.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceUcDeviceIsBest.setDescription('Indicates whether this entry is used as best local configuration')
vlanVoiceAuto = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11))
vlanVoiceAutoAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 1))
vlanVoiceAutoAdminVpt = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 1, 1), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAutoAdminVpt.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoAdminVpt.setDescription('user configured VPT for Voice Vlan operation')
vlanVoiceAutoAdminDscp = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAutoAdminDscp.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoAdminDscp.setDescription('user configured DSCP for Voice Vlan operation')
vlanVoiceAutoOper = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 2))
vlanVoiceAutoOperVpt = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 2, 1), VlanPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperVpt.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoOperVpt.setDescription('operational VPT for Voice Vlan operation')
vlanVoiceAutoOperDscp = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperDscp.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoOperDscp.setDescription('user configured DSCP for Voice Vlan operation')
vlanVoiceAutoOperSource = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 2, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperSource.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoOperSource.setDescription("The Mac address of the switch by which we've selected the VVID")
vlanVoiceAutoOperPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6, 10))).clone(namedValues=NamedValues(("staticActive", 0), ("staticInActive", 1), ("ucActive", 2), ("ucInActive", 3), ("default", 6), ("disabled", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoOperPriority.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoOperPriority.setDescription('The reason for which Voice Vlan ID was selected.')
vlanVoiceAutoRefresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAutoRefresh.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoRefresh.setDescription('By setting the MIB to True, VSDP refresh will be executed.')
vlanVoiceAutoAgreedVlanLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceAutoAgreedVlanLastChange.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceAutoAgreedVlanLastChange.setDescription('date format is DDMMYYHHMMSS')
vlanVoiceOUIBased = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12))
vlanVoiceOUIBasedAdminPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 1), VlanPriority().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedAdminPriority.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedAdminPriority.setDescription('An administratively assigned Priority, which will be used for all traffic on the voice vlan, this gives the packets the requested priority (CoS) within the bridge.')
vlanVoiceOUIBasedAdminRemark = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedAdminRemark.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedAdminRemark.setDescription('Remark VPT on tagged frames egress the voice vlan according. to priority true.false')
vlanVoiceOUIBasedSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedSetToDefault.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedSetToDefault.setDescription("The vlanVoiceOUIBasedSetToDefault indicates that vlanVoiceOUIBasedTable should be set to it's default values if existed (OUI default prefixes). To do so the vlanVoiceOUIBasedTable should be previously deleted by usual entries destroying. This object behaviors as write-only than reading this object will always return 'false'.")
vlanVoiceOUIBasedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 4), )
if mibBuilder.loadTexts: vlanVoiceOUIBasedTable.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedTable.setDescription('A table containing static global configuration information for Voice VLANs OUI MAC Prefixes. All entries are permanent and will be restored after the device is reset.')
vlanVoiceOUIBasedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 4, 1), ).setIndexNames((0, "CISCOSB-vlanVoice-MIB", "vlanVoiceOUIBasedPrefix"))
if mibBuilder.loadTexts: vlanVoiceOUIBasedEntry.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedEntry.setDescription('Information for a voice VLANs OUI MAC Prefixes configured into the device by management.')
vlanVoiceOUIBasedPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: vlanVoiceOUIBasedPrefix.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPrefix.setDescription('The index value used to identify the OUI MAC Prefix component associated with this entry. The value of this object is used as an index to the vlanVoiceOUIBasedTable. Voice VLANs OUI Prefix is the first 3 most significant octets of the MAC address.')
vlanVoiceOUIBasedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedDescription.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedDescription.setDescription('An optional text that describes the OUI.')
vlanVoiceOUIBasedEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoiceOUIBasedEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedEntryRowStatus.setDescription('This object indicates the status of this entry.')
vlanVoiceOUIBasedPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 5), )
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortTable.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortTable.setDescription('A table containing static and dynamic per port configuration information for Voice VLAN. All entries are permanent and will be restored after the device is reset.')
vlanVoiceOUIBasedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortEntry.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortEntry.setDescription('Static and dynamic per port information for a voice VLAN.')
vlanVoiceOUIBasedPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortEnable.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortEnable.setDescription('Enable this port to be a candidate to be added into the Voice VLAN.')
vlanVoiceOUIBasedPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 5, 1, 2), VlanIndex().clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortVlanIndex.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortVlanIndex.setDescription('The Voice VLAN-ID the port is a candidate to be in.')
vlanVoiceOUIBasedPortSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortSecure.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortSecure.setDescription('Specify this port to be in Secure Mode when entering the Voice VLAN. In Secure mode only frames with MAC prefix matched to one of the OUI table prefixes are accepted, otherwise dropped.')
vlanVoiceOUIBasedPortCurrentMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortCurrentMembership.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortCurrentMembership.setDescription("Port's current status of membership in Voice VLAN. Port's possible values of membership in Voice VLAN: 'Active(1)' - Port is currently added to a Voice VLAN . 'NotActive(2)' - Specifies either that port is a candidate to be in Voice VLAN or disabled.")
vlanVoiceOUIBasedPortQosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("src", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortQosMode.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedPortQosMode.setDescription("Port's current QOS mode in Voice VLAN. Possible values: 'src(1)' - Only traffic with OUI prefix in the source MAC received QOS of the Voice Vlan. 'all(2)' - All traffic through that port received QOS of the Voice Vlan.")
vlanVoiceOUIBasedAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 48, 54, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200)).clone(1440)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIBasedAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceOUIBasedAgingTimeout.setDescription('The vlanVoiceAgingTimeout indicates the time (in units of minutes) from when the last OUI MAC was ageout from the FDB the port will be removed from the Voice VLAN. The default value for vlanVoiceAgingTimeout object is 1440 minutes (24 hours). The value of this object must be restored from non-volatile storage after a re-initialization of the management system.')
mibBuilder.exportSymbols("CISCOSB-vlanVoice-MIB", vlanVoiceAdminVid=vlanVoiceAdminVid, vlanVoiceOUIBasedPortCurrentMembership=vlanVoiceOUIBasedPortCurrentMembership, vlanVoiceOUIBasedPrefix=vlanVoiceOUIBasedPrefix, vlanVoiceAdminState=vlanVoiceAdminState, vlanVoiceOUIBasedPortQosMode=vlanVoiceOUIBasedPortQosMode, vlanVoiceAutoAdmin=vlanVoiceAutoAdmin, vlanVoiceUcDeviceType=vlanVoiceUcDeviceType, vlanVoiceOUIBasedPortTable=vlanVoiceOUIBasedPortTable, vlanVoiceAutoAdminDscp=vlanVoiceAutoAdminDscp, vlanVoiceOperState=vlanVoiceOperState, vlanVoiceUcDeviceMacAddress=vlanVoiceUcDeviceMacAddress, vlanVoiceAutoAgreedVlanLastChange=vlanVoiceAutoAgreedVlanLastChange, PYSNMP_MODULE_ID=vlanVoice, vlanVoiceOUIBasedEntryRowStatus=vlanVoiceOUIBasedEntryRowStatus, vlanVoiceOUIBasedDescription=vlanVoiceOUIBasedDescription, vlanVoiceUcDeviceEntry=vlanVoiceUcDeviceEntry, vlanVoiceUcDeviceVpt=vlanVoiceUcDeviceVpt, vlanVoiceOUIBasedTable=vlanVoiceOUIBasedTable, vlanVoiceOUIBasedAdminPriority=vlanVoiceOUIBasedAdminPriority, vlanVoiceOUIBasedPortSecure=vlanVoiceOUIBasedPortSecure, vlanVoiceOUIBasedEntry=vlanVoiceOUIBasedEntry, vlanVoiceOUIBased=vlanVoiceOUIBased, vlanVoiceOUIBasedPortEntry=vlanVoiceOUIBasedPortEntry, vlanVoiceAutoOperVpt=vlanVoiceAutoOperVpt, vlanVoiceAutoOperDscp=vlanVoiceAutoOperDscp, vlanVoice=vlanVoice, vlanVoiceAutoOperSource=vlanVoiceAutoOperSource, vlanVoiceAutoAdminVpt=vlanVoiceAutoAdminVpt, vlanVoiceAutoOperPriority=vlanVoiceAutoOperPriority, vlanVoiceUcDeviceDscp=vlanVoiceUcDeviceDscp, vlanVoiceAuto=vlanVoiceAuto, vlanVoiceUcDeviceIsBest=vlanVoiceUcDeviceIsBest, vlanVoiceOUIBasedSetToDefault=vlanVoiceOUIBasedSetToDefault, vlanVoiceUcDeviceTable=vlanVoiceUcDeviceTable, vlanVoiceOperVid=vlanVoiceOperVid, vlanVoiceUcDeviceInterface=vlanVoiceUcDeviceInterface, vlanVoiceUcDeviceVid=vlanVoiceUcDeviceVid, vlanVoiceAutoRefresh=vlanVoiceAutoRefresh, vlanVoiceOUIBasedAdminRemark=vlanVoiceOUIBasedAdminRemark, vlanVoiceAutoOper=vlanVoiceAutoOper, vlanVoiceOUIBasedPortEnable=vlanVoiceOUIBasedPortEnable, vlanVoiceOUIBasedPortVlanIndex=vlanVoiceOUIBasedPortVlanIndex, vlanVoiceOUIBasedAgingTimeout=vlanVoiceOUIBasedAgingTimeout)
