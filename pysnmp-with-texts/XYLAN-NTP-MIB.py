#
# PySNMP MIB module XYLAN-NTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-NTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, Counter64, Unsigned32, MibIdentifier, IpAddress, ModuleIdentity, ObjectIdentity, TimeTicks, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "IpAddress", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanNtpArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanNtpArch")
xylanNtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 27, 1))
xylanNtpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 27, 2))
xylanNtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 27, 3))
xylanNtpAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 27, 4))
xylanNtpAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 27, 5))
xylanNtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpEnable.setDescription('Enables/disables NTP server.')
xylanNtpMonitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpMonitorEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpMonitorEnable.setDescription('Enables/disables NTP monitor.')
xylanNtpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3), )
if mibBuilder.loadTexts: xylanNtpPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerTable.setDescription('Table containing the synchronization host this switch will be associated with.')
xylanNtpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1), ).setIndexNames((0, "XYLAN-NTP-MIB", "xylanNtpPeerAddress"))
if mibBuilder.loadTexts: xylanNtpPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerEntry.setDescription('Each entry corresponds to a synchronization host.')
xylanNtpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerAddress.setDescription('The IP address of the synchronization host.')
xylanNtpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("active", 1), ("client", 3), ("broadcast", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPeerType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerType.setDescription('Type of synchronization host that will communicate with this switch.')
xylanNtpPeerAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPeerAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerAuth.setDescription('The authorization keyid for the remote host.')
xylanNtpPeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPeerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerVersion.setDescription('The NTP version to communicate with the remote host.')
xylanNtpPeerMinpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPeerMinpoll.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerMinpoll.setDescription('The minimum poll duration to the remote host. This value is a power of 2 seconds when the poll will occur. For example, 4 (2 to the power 4) is 16 seconds.')
xylanNtpPeerPrefer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prefer", 1), ("no-prefer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPeerPrefer.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerPrefer.setDescription('Marks the host as a preferred connection.')
xylanNtpPeerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPeerAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerAdmin.setDescription('The current state of the table entry. If the value written is a 2, the entry is deleted. ')
xylanNtpPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPeerName.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerName.setDescription('The DNS name for the peer association,')
xylanNtpAuthDelay = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpAuthDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAuthDelay.setDescription('This field sets a specified time interval that is added to timestamps included in requests to the server that required authentication. Typically this delay is needed in cases of long delay paths, or servers whose clocks are unsynchronized. Value is in milli-seconds')
xylanNtpKeysFile = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpKeysFile.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpKeysFile.setDescription('Name of the file which has the authorization keys.')
xylanNtpConfigReqKeyId = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpConfigReqKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpConfigReqKeyId.setDescription('Request messages ask for information from the NTP entity such as timestamp information, statistics, etc. This changes the authentication key identifier for request messages sent from the switch to another NTP entity.')
xylanNtpConfigCtlKeyId = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpConfigCtlKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpConfigCtlKeyId.setDescription('Control messages attempt to change the configuration of the NTP entity in some fashion. This changes the authentication key identifier for control messages sent from the switch to another NTP entity.')
xylanNtpConfigCfgKeyId = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpConfigCfgKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpConfigCfgKeyId.setDescription('Configuration messages changes information on the NTP entity.')
xylanNtpPrecision = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpPrecision.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPrecision.setDescription("This sets the server's advertised precision.")
xylanNtpPeerListTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1), )
if mibBuilder.loadTexts: xylanNtpPeerListTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListTable.setDescription('Used to display a brief list of all NTP associations related to this switch (servers, peers, etc.).')
xylanNtpPeerListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1), ).setIndexNames((0, "XYLAN-NTP-MIB", "xylanNtpPeerListAddress"))
if mibBuilder.loadTexts: xylanNtpPeerListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListEntry.setDescription('Each entry corresponds to one association.')
xylanNtpPeerListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListAddress.setDescription('The IP address of the association.')
xylanNtpPeerListLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListLocal.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListLocal.setDescription('The local interface address assigned by NTP to the remote association. If this address is 0.0.0.0, then the local address has yet to be determined.')
xylanNtpPeerListStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListStratum.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListStratum.setDescription('The stratum level of the remote peer. If this number is 16, the remote peer has not been synchronized.')
xylanNtpPeerListPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListPoll.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListPoll.setDescription('The polling interval, in seconds.')
xylanNtpPeerListReach = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListReach.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListReach.setDescription('The reachability register of the remote association, in octal format. This number is determined by the NTP algorithm.')
xylanNtpPeerListDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListDelay.setDescription('The currently estimated delay of this remote association, in seconds. This time is determined by the NTP algorithm.')
xylanNtpPeerListOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListOffset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListOffset.setDescription('The currently estimated offset of this remote association, in seconds. This time is determined by the NTP algorithm.')
xylanNtpPeerListDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListDispersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListDispersion.setDescription('The currently estimated dispersion of this remote association, in seconds. This time is determined by the NTP algorithm.')
xylanNtpPeerListSynced = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synchornized", 1), ("not-synchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListSynced.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListSynced.setDescription('Indicates that NTP is synchronized with this entity.')
xylanNtpPeerListName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerListName.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerListName.setDescription('The DNS name for the peer association,')
xylanNtpLocalInfo = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2), Integer32())
if mibBuilder.loadTexts: xylanNtpLocalInfo.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpLocalInfo.setDescription("Used to display information about the local switch's implementation of NTP.")
xylanNtpInfoPeer = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoPeer.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoPeer.setDescription('The IP address of the remote association.')
xylanNtpInfoMode = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoMode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoMode.setDescription('The peer mode of this remote association.')
xylanNtpInfoLeapIndicator = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoLeapIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoLeapIndicator.setDescription('The status of leap second insertion for this association.')
xylanNtpInfoStratum = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoStratum.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoStratum.setDescription('The stratum level of the remote peer. If this number is 16, the remote peer has not been synchronized.')
xylanNtpInfoPrecision = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoPrecision.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoPrecision.setDescription('The advertised precision of the switch. It will be a number between -4 and -20.')
xylanNtpInfoDistance = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoDistance.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoDistance.setDescription('This is a signed fixed-point number indicating the total roundtrip delay to the primary reference source at the root of the synchronization subnet, in seconds.')
xylanNtpInfoDispersion = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoDispersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoDispersion.setDescription('This is a signed fixed-point number indicating the maximum error relative to the primary reference source at the root of the synchronization subnet, in seconds.')
xylanNtpInfoReferenceId = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoReferenceId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoReferenceId.setDescription('This is a 32-bit code identifying the particular reference clock. Can be an IP address.')
xylanNtpInfoReferenceTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoReferenceTime.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoReferenceTime.setDescription('This is the local time at which the local clock was last set or corrected.')
xylanNtpInfoFrequency = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoFrequency.setDescription("A number determining the local clocks frequency in relation to a reference clock's Pulse per Second (PPS). If the clock is running in perfect synchronization, this number should be 1. Otherwise, it will be slightly lower or higher in order to compensate for the time differ-ence.")
xylanNtpInfoStability = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoStability.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoStability.setDescription("The stability of the clock in relation to a reference clock's Pulse per Second (PPS).")
xylanNtpInfoBroadcastDelay = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoBroadcastDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoBroadcastDelay.setDescription('The broadcast delay, in seconds, of this association.')
xylanNtpInfoAuthDelay = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpInfoAuthDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpInfoAuthDelay.setDescription('The authentication delay, in seconds, of this association.')
xylanNtpPeerShowTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3), )
if mibBuilder.loadTexts: xylanNtpPeerShowTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowTable.setDescription('Used to display a brief list of all NTP associations related to this switch (servers, peers, etc.).')
xylanNtpPeerShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1), ).setIndexNames((0, "XYLAN-NTP-MIB", "xylanNtpPeerShowRemote"))
if mibBuilder.loadTexts: xylanNtpPeerShowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowEntry.setDescription('Each entry corresponds to one association.')
xylanNtpPeerShowRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowRemote.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowRemote.setDescription('The IP address of the remote association.')
xylanNtpPeerShowLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowLocal.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowLocal.setDescription('The local interface address assigned by NTP to the remote associations.')
xylanNtpPeerShowHmode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowHmode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowHmode.setDescription('The host mode of this remote association.')
xylanNtpPeerShowPmode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowPmode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowPmode.setDescription('The peer mode of this remote association.')
xylanNtpPeerShowStratum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowStratum.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowStratum.setDescription('The stratum level of the remote peer.')
xylanNtpPeerShowPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowPrecision.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowPrecision.setDescription('The advertised precision of this association, which is a number from -4 to -20.')
xylanNtpPeerShowLeapIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowLeapIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowLeapIndicator.setDescription('The status of leap second insertion for this association.')
xylanNtpPeerShowReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowReferenceId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowReferenceId.setDescription('The status of leap second insertion for this association. Normally an IP address.')
xylanNtpPeerShowRootDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowRootDistance.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowRootDistance.setDescription('This is a signed fixed-point number indicating the total roundtrip delay to the primary reference source at the root of the synchronization subnet, in seconds.')
xylanNtpPeerShowRootDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowRootDispersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowRootDispersion.setDescription('This is a signed fixed-point number indicating the maximum error relative to the primary reference source at the root of the synchronization subnet, in seconds.')
xylanNtpPeerShowPpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowPpoll.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowPpoll.setDescription('The poll time for this association when it is a peer.')
xylanNtpPeerShowHpoll = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowHpoll.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowHpoll.setDescription('The poll time for this association when it is a host.')
xylanNtpPeerShowKeyid = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowKeyid.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowKeyid.setDescription('This is an integer identifying the cryptographic key used to generate the message authentication code.')
xylanNtpPeerShowVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowVersion.setDescription('What version of NTP this association is using.')
xylanNtpPeerShowAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowAssociation.setDescription('The number of seconds since this NTP entity was associated with the switch.')
xylanNtpPeerShowValid = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowValid.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowValid.setDescription('This is an integer counter indicating the valid samples remaining in the filter register.')
xylanNtpPeerShowReach = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowReach.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowReach.setDescription('This is a shift register used to determine the reachability status of this peer.')
xylanNtpPeerShowUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowUnreach.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowUnreach.setDescription('The number of times this NTP entity was unreachable.')
xylanNtpPeerShowFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowFlash.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowFlash.setDescription('These reveal the state at the last grumble from the peer and are most handy for diagnosing problems.')
xylanNtpPeerShowBroadcastOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowBroadcastOffset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowBroadcastOffset.setDescription('The broadcast delay.')
xylanNtpPeerShowTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowTTL.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowTTL.setDescription('This fields displays the Time-to-Live (TTL) time in seconds and the mode (unicast, multicast, or broadcast) of NTP messages sent to a broadcast address.')
xylanNtpPeerShowTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowTimer.setDescription('The time to next poll.')
xylanNtpPeerShowFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowFlags.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowFlags.setDescription('This counter lists what flags have been configured for this NTP entity. 0x01 - Configured 0x02 - System Peer 0x10 - Preferred 0x20 - Authentable.')
xylanNtpPeerShowReferenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowReferenceTime.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowReferenceTime.setDescription('This is the local time, in timestamp format, when the local clock was last updated.')
xylanNtpPeerShowOriginateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowOriginateTime.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowOriginateTime.setDescription('This is the local time, in timestamp format, of the peer when its latest NTP message was sent.')
xylanNtpPeerShowReceiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowReceiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowReceiveTime.setDescription('This is the local time, in timestamp format, when the latest NTP message from the peer arrived.')
xylanNtpPeerShowTransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowTransmitTime.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowTransmitTime.setDescription('This is the local time, in timestamp format, at which the last NTP message was sent from this association.')
xylanNtpPeerShowOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowOffset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowOffset.setDescription('The currently estimated offset of this remote association, in seconds.')
xylanNtpPeerShowDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowDelay.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowDelay.setDescription('The currently estimated delay of this remote association, in seconds.')
xylanNtpPeerShowDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowDispersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowDispersion.setDescription('The currently estimated dispersion of this remote association, in seconds.')
xylanNtpPeerShowName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 2, 3, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpPeerShowName.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpPeerShowName.setDescription('The DNS name for the peer association,')
xylanNtpStatsStat = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1), Integer32())
if mibBuilder.loadTexts: xylanNtpStatsStat.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStat.setDescription('The local server statistics.')
xylanNtpStatsStatUptime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatUptime.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatUptime.setDescription('The number of seconds the local NTP server has been associated with the switch.')
xylanNtpStatsStatReset = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatReset.setDescription('The number of seconds since the last time the local NTP server has been restarted.')
xylanNtpStatsStatBadStratum = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatBadStratum.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatBadStratum.setDescription('The number of NTP packets received that had a corrupted stratum bit in the data of the packet.')
xylanNtpStatsStatOldVersion = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatOldVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatOldVersion.setDescription('The number of NTP packets received that were of an older version of NTP (either version 1 or 2).')
xylanNtpStatsStatNewVersion = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatNewVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatNewVersion.setDescription('The number of NTP packets received that were version 3 of NTP.')
xylanNtpStatsStatUnknownVersion = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatUnknownVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatUnknownVersion.setDescription('The number of NTP packets received that the version was unknown (most likely due to packet corruption).')
xylanNtpStatsStatBadLength = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatBadLength.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatBadLength.setDescription('The number of NTP packets received that did not fit the NTP packet structure (most likely due to packet corruption).')
xylanNtpStatsStatProcessed = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatProcessed.setDescription('The total number of NTP packets processed.')
xylanNtpStatsStatBadAuth = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatBadAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatBadAuth.setDescription('The number of NTP packets rejected because they did not meet authentication standards.')
xylanNtpStatsStatLimitRejects = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsStatLimitRejects.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsStatLimitRejects.setDescription('The number of NTP packets rejected because they did not meet authentication standards.')
xylanNtpStatsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2), )
if mibBuilder.loadTexts: xylanNtpStatsPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerTable.setDescription('Table containing the synchronization host statistics.')
xylanNtpStatsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1), ).setIndexNames((0, "XYLAN-NTP-MIB", "xylanNtpStatsPeerAddress"))
if mibBuilder.loadTexts: xylanNtpStatsPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerEntry.setDescription('Each entry corresponds to a synchronization host.')
xylanNtpStatsPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerAddress.setDescription('The IP address of the synchronization host.')
xylanNtpStatsPeerLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerLocal.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerLocal.setDescription('The local interface address assigned by NTP to the remote association.')
xylanNtpStatsPeerLastRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerLastRcv.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerLastRcv.setDescription('The time since the last packet was received.')
xylanNtpStatsPeerNextSend = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerNextSend.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerNextSend.setDescription('The time until the next packet is to be sent.')
xylanNtpStatsPeerReachChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerReachChange.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerReachChange.setDescription('The time that the peer has been reachable.')
xylanNtpStatsPeerPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerPacketsSent.setDescription('The number of packets that have been sent.')
xylanNtpStatsPeerPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerPacketsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerPacketsRcvd.setDescription('The number of packets that have been received.')
xylanNtpStatsPeerBadAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerBadAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerBadAuth.setDescription('The number of packets received with bad authentication.')
xylanNtpStatsPeerBogusOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerBogusOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerBogusOrigin.setDescription('The number of bogus packets.')
xylanNtpStatsPeerDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerDuplicate.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerDuplicate.setDescription('The number of duplicated packets received.')
xylanNtpStatsPeerBadDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerBadDispersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerBadDispersion.setDescription('The number bad dispersions.')
xylanNtpStatsPeerBadRefTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerBadRefTime.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerBadRefTime.setDescription('The number of bad reference times received.')
xylanNtpStatsPeerCandidateOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerCandidateOrder.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerCandidateOrder.setDescription('The order of synchronization candidates.')
xylanNtpStatsPeerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 14), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerReset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerReset.setDescription('Resets the statistics for the peer.')
xylanNtpStatsPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsPeerName.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsPeerName.setDescription('The DNS name for the peer association,')
xylanNtpStatsLoop = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 3), Integer32())
if mibBuilder.loadTexts: xylanNtpStatsLoop.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsLoop.setDescription('The loop filter is used to control and correct the phase of timestamps as processed by the local clock. The loop filter examines timestamps sent to and from the local clock and can adjust them to account for natural wander and jitter.')
xylanNtpStatsLoopOffset = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsLoopOffset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsLoopOffset.setDescription('The currently estimated offset of this remote association, in seconds. This counter indicates the offset of the peer clock relative to the local clock.')
xylanNtpStatsLoopFrequency = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsLoopFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsLoopFrequency.setDescription('A number determining the local clocks frequency in relation to a reference clocks Pulse per Second (PPS). If the clock is running in perfect synchronization, this number should be 1. Otherwise, it will be slightly lower or higher in order to compensate for the time discrepancy between the reference clock and the local clock.')
xylanNtpStatsLoopPollAdjust = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsLoopPollAdjust.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsLoopPollAdjust.setDescription('Determines the peer polling time.')
xylanNtpStatsLoopWatchdog = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsLoopWatchdog.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsLoopWatchdog.setDescription('Makes sure that NTP timer continues to run.')
xylanNtpStatsIo = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4), Integer32())
if mibBuilder.loadTexts: xylanNtpStatsIo.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIo.setDescription('General statistics on received and transmitted NTP packets for this switch.')
xylanNtpStatsIoReset = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoReset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoReset.setDescription('The number of seconds since the last restart of NTP.')
xylanNtpStatsIoRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoRcvBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoRcvBuffers.setDescription('The number of switch receive buffers currently being used by this NTP entity.')
xylanNtpStatsIoFreeRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoFreeRcvBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoFreeRcvBuffers.setDescription('The number of free receive buffers.')
xylanNtpStatsIoUsedRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoUsedRcvBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoUsedRcvBuffers.setDescription('The number of receive buffers currently being used.')
xylanNtpStatsIoRefills = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoRefills.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoRefills.setDescription('The number of times we added packets.')
xylanNtpStatsIoDroppedPackets = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoDroppedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoDroppedPackets.setDescription('The number of packets dropped.')
xylanNtpStatsIoIgnoredPackets = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoIgnoredPackets.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoIgnoredPackets.setDescription('The number of packets ignored.')
xylanNtpStatsIoRcvPackets = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoRcvPackets.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoRcvPackets.setDescription('The total number of NTP packets received by the switch.')
xylanNtpStatsIoSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoSentPackets.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoSentPackets.setDescription('The total number of NTP packets sent by the switch.')
xylanNtpStatsIoNotSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoNotSentPackets.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoNotSentPackets.setDescription('The number of NTP packets generated but not sent due to restrictions.')
xylanNtpStatsIoInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoInterrupts.setDescription('The number of times NTP information was interrupted in the process of transmitting or receiving.')
xylanNtpStatsIoInterruptsRcv = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsIoInterruptsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsIoInterruptsRcv.setDescription('The number of packets received by the interrupt handler.')
xylanNtpStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanNtpStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsReset.setDescription('Resets the statistics counters for the following subsystems: 0x01 - all peers 0x02 - i/o 0x04 - system 0x08 - memory 0x10 - timer 0x20 - authentication 0x40 - control')
xylanNtpStatsMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6), )
if mibBuilder.loadTexts: xylanNtpStatsMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorTable.setDescription('Table containing the association monitoring list.')
xylanNtpStatsMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1), ).setIndexNames((0, "XYLAN-NTP-MIB", "xylanNtpStatsMonitorIndex"))
if mibBuilder.loadTexts: xylanNtpStatsMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorEntry.setDescription('Each entry corresponds to a synchronization host.')
xylanNtpStatsMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorIndex.setDescription('Table index.')
xylanNtpStatsMonitorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorAddress.setDescription('The IP address of the remote association.')
xylanNtpStatsMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorPort.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorPort.setDescription('The IP port number of the association.')
xylanNtpStatsMonitorLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorLocalAddress.setDescription('The local IP address of the association.')
xylanNtpStatsMonitorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorCount.setDescription('The number of NTP packets received from this association.')
xylanNtpStatsMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorMode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorMode.setDescription('The mode the NTP association uses in relation to the switch.')
xylanNtpStatsMonitorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorVersion.setDescription('The version of NTP the association is using.')
xylanNtpStatsMonitorDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorDrop.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorDrop.setDescription('The number of NTP packets received from this association that were dropped.')
xylanNtpStatsMonitorLast = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorLast.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorLast.setDescription('The number of seconds since the last NTP message has been received from this association.')
xylanNtpStatsMonitorFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorFirst.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorFirst.setDescription('The number of seconds since the first NTP message has been received from this association.')
xylanNtpStatsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 3, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpStatsMonitorName.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpStatsMonitorName.setDescription('The DNS name for the peer association,')
xylanNtpAccessKeyIdTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 1), )
if mibBuilder.loadTexts: xylanNtpAccessKeyIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessKeyIdTable.setDescription('Table containing the trusted keys.')
xylanNtpAccessKeyIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 1, 1), ).setIndexNames((0, "XYLAN-NTP-MIB", "xylanNtpAccessKeyIdKeyId"))
if mibBuilder.loadTexts: xylanNtpAccessKeyIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessKeyIdEntry.setDescription('Entry of a trusted key.')
xylanNtpAccessKeyIdKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpAccessKeyIdKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessKeyIdKeyId.setDescription('Keyid of the key in the key file.')
xylanNtpAccessKeyIdAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpAccessKeyIdAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessKeyIdAdmin.setDescription('The current state of the table entry. If the value written is a 2, the entry is deleted. ')
xylanNtpAccessRestrictedTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 2), )
if mibBuilder.loadTexts: xylanNtpAccessRestrictedTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRestrictedTable.setDescription('Table containing the restricted addresses.')
xylanNtpAccessRestrictedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 2, 1), ).setIndexNames((0, "XYLAN-NTP-MIB", "xylanNtpAccessRestrictedIpAddress"), (0, "XYLAN-NTP-MIB", "xylanNtpAccessRestrictedMask"))
if mibBuilder.loadTexts: xylanNtpAccessRestrictedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRestrictedEntry.setDescription('Entry of a restricted address.')
xylanNtpAccessRestrictedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpAccessRestrictedIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRestrictedIpAddress.setDescription('IP address to restrict.')
xylanNtpAccessRestrictedMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpAccessRestrictedMask.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRestrictedMask.setDescription('IP mask to restrict.')
xylanNtpAccessRestrictedRestrictions = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpAccessRestrictedRestrictions.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRestrictedRestrictions.setDescription('A mask indicating the restrictions to apply to the entry. 0x0001 - ignore, Ignore all packets from hosts. 0x0002 - noquery, Ignore all NTP information queries and configuration requests from the source. 0x0004 - nomodify, Ignore all NTP information queries and configuration requests that attempt to modify the state of the server. 0x0008 - notrap, Decline to provide control message trap service to matching hosts. 0x0010 - lowpriotrap, Declare traps set by matching hosts to be low priority. 0x0020 - noserve, Ignore NTP packets other than information queries and config-uration requests. 0x0040 - nopeer, Provide stateless time service to polling hosts, but do not allocate peer memory resources to these hosts even if they otherwise might be considered useful as future synchronization partners. 0x0080 - notrust, Treat these hosts normally in other respects, but never use them as synchronization sources. 0x0100 - limited, These hosts are subject to a limitation of the number of clients from the same net.')
xylanNtpAccessRestrictedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanNtpAccessRestrictedCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRestrictedCount.setDescription('Number of packets matched.')
xylanNtpAccessRestrictedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanNtpAccessRestrictedAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRestrictedAdmin.setDescription('The current state of the table entry. If the value written is a 2, the entry is deleted. ')
xylanNtpAccessRereadKeyFile = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 27, 5, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanNtpAccessRereadKeyFile.setStatus('mandatory')
if mibBuilder.loadTexts: xylanNtpAccessRereadKeyFile.setDescription("Re-examining the keys file will load all currently existing keys in the file into the switch's memory.")
mibBuilder.exportSymbols("XYLAN-NTP-MIB", xylanNtpAdmin=xylanNtpAdmin, xylanNtpInfoPeer=xylanNtpInfoPeer, xylanNtpAccess=xylanNtpAccess, xylanNtpStatsIoDroppedPackets=xylanNtpStatsIoDroppedPackets, xylanNtpPeerShowFlash=xylanNtpPeerShowFlash, xylanNtpStatsPeerNextSend=xylanNtpStatsPeerNextSend, xylanNtpStatsLoopPollAdjust=xylanNtpStatsLoopPollAdjust, xylanNtpPeerShowPrecision=xylanNtpPeerShowPrecision, xylanNtpStatsStatNewVersion=xylanNtpStatsStatNewVersion, xylanNtpStatsLoop=xylanNtpStatsLoop, xylanNtpPeerTable=xylanNtpPeerTable, xylanNtpPeerShowTimer=xylanNtpPeerShowTimer, xylanNtpPeerShowHpoll=xylanNtpPeerShowHpoll, xylanNtpStatsIoInterruptsRcv=xylanNtpStatsIoInterruptsRcv, xylanNtpLocalInfo=xylanNtpLocalInfo, xylanNtpPeerShowReferenceId=xylanNtpPeerShowReferenceId, xylanNtpPeerListDelay=xylanNtpPeerListDelay, xylanNtpStatsStatUnknownVersion=xylanNtpStatsStatUnknownVersion, xylanNtpPeerShowBroadcastOffset=xylanNtpPeerShowBroadcastOffset, xylanNtpPeerListReach=xylanNtpPeerListReach, xylanNtpStatsStatBadStratum=xylanNtpStatsStatBadStratum, xylanNtpStatsPeerAddress=xylanNtpStatsPeerAddress, xylanNtpPeerShowUnreach=xylanNtpPeerShowUnreach, xylanNtpPeerName=xylanNtpPeerName, xylanNtpStatsMonitorDrop=xylanNtpStatsMonitorDrop, xylanNtpStatsIo=xylanNtpStatsIo, xylanNtpStatsMonitorTable=xylanNtpStatsMonitorTable, xylanNtpAccessKeyIdEntry=xylanNtpAccessKeyIdEntry, xylanNtpPeerShowLocal=xylanNtpPeerShowLocal, xylanNtpStatsLoopOffset=xylanNtpStatsLoopOffset, xylanNtpStatsPeerTable=xylanNtpStatsPeerTable, xylanNtpInfoStability=xylanNtpInfoStability, xylanNtpAccessKeyIdKeyId=xylanNtpAccessKeyIdKeyId, xylanNtpStatsPeerBadDispersion=xylanNtpStatsPeerBadDispersion, xylanNtpInfoLeapIndicator=xylanNtpInfoLeapIndicator, xylanNtpPeerShowPmode=xylanNtpPeerShowPmode, xylanNtpStatsReset=xylanNtpStatsReset, xylanNtpStatsIoFreeRcvBuffers=xylanNtpStatsIoFreeRcvBuffers, xylanNtpAccessRereadKeyFile=xylanNtpAccessRereadKeyFile, xylanNtpStatsPeerLocal=xylanNtpStatsPeerLocal, xylanNtpPeerShowReach=xylanNtpPeerShowReach, xylanNtpInfoFrequency=xylanNtpInfoFrequency, xylanNtpAccessRestrictedEntry=xylanNtpAccessRestrictedEntry, xylanNtpPeerListOffset=xylanNtpPeerListOffset, xylanNtpStatsPeerReset=xylanNtpStatsPeerReset, xylanNtpPeerShowLeapIndicator=xylanNtpPeerShowLeapIndicator, xylanNtpAccessRestrictedTable=xylanNtpAccessRestrictedTable, xylanNtpPeerListPoll=xylanNtpPeerListPoll, xylanNtpStatsPeerPacketsSent=xylanNtpStatsPeerPacketsSent, xylanNtpPeerListAddress=xylanNtpPeerListAddress, xylanNtpStatsIoUsedRcvBuffers=xylanNtpStatsIoUsedRcvBuffers, xylanNtpPeerShowOriginateTime=xylanNtpPeerShowOriginateTime, xylanNtpPeerShowReferenceTime=xylanNtpPeerShowReferenceTime, xylanNtpStatsPeerEntry=xylanNtpStatsPeerEntry, xylanNtpStatsIoSentPackets=xylanNtpStatsIoSentPackets, xylanNtpStatsStatBadAuth=xylanNtpStatsStatBadAuth, xylanNtpPeerShowVersion=xylanNtpPeerShowVersion, xylanNtpInfoBroadcastDelay=xylanNtpInfoBroadcastDelay, xylanNtpStatsIoNotSentPackets=xylanNtpStatsIoNotSentPackets, xylanNtpStatsLoopWatchdog=xylanNtpStatsLoopWatchdog, xylanNtpStatsMonitorIndex=xylanNtpStatsMonitorIndex, xylanNtpPeerShowTTL=xylanNtpPeerShowTTL, xylanNtpPeerShowFlags=xylanNtpPeerShowFlags, xylanNtpPeerListLocal=xylanNtpPeerListLocal, xylanNtpStatsMonitorMode=xylanNtpStatsMonitorMode, xylanNtpPeerAuth=xylanNtpPeerAuth, xylanNtpAuthDelay=xylanNtpAuthDelay, xylanNtpStatsMonitorAddress=xylanNtpStatsMonitorAddress, xylanNtpAccessRestrictedMask=xylanNtpAccessRestrictedMask, xylanNtpInfoStratum=xylanNtpInfoStratum, xylanNtpStatsPeerBogusOrigin=xylanNtpStatsPeerBogusOrigin, xylanNtpAccessKeyIdTable=xylanNtpAccessKeyIdTable, xylanNtpPeerShowRemote=xylanNtpPeerShowRemote, xylanNtpPeerType=xylanNtpPeerType, xylanNtpInfoDispersion=xylanNtpInfoDispersion, xylanNtpStatsStatLimitRejects=xylanNtpStatsStatLimitRejects, xylanNtpPrecision=xylanNtpPrecision, xylanNtpPeerPrefer=xylanNtpPeerPrefer, xylanNtpStatsPeerBadAuth=xylanNtpStatsPeerBadAuth, xylanNtpPeerShowRootDistance=xylanNtpPeerShowRootDistance, xylanNtpPeerShowStratum=xylanNtpPeerShowStratum, xylanNtpPeerListStratum=xylanNtpPeerListStratum, xylanNtpStatsPeerReachChange=xylanNtpStatsPeerReachChange, xylanNtpAccessRestrictedAdmin=xylanNtpAccessRestrictedAdmin, xylanNtpConfigReqKeyId=xylanNtpConfigReqKeyId, xylanNtpPeerMinpoll=xylanNtpPeerMinpoll, xylanNtpPeerShowDispersion=xylanNtpPeerShowDispersion, xylanNtpAccessRestrictedCount=xylanNtpAccessRestrictedCount, xylanNtpStatsStatBadLength=xylanNtpStatsStatBadLength, xylanNtpStatsPeerName=xylanNtpStatsPeerName, xylanNtpPeerListTable=xylanNtpPeerListTable, xylanNtpPeerListEntry=xylanNtpPeerListEntry, xylanNtpStats=xylanNtpStats, xylanNtpStatsStatProcessed=xylanNtpStatsStatProcessed, xylanNtpStatsMonitorFirst=xylanNtpStatsMonitorFirst, xylanNtpStatsMonitorCount=xylanNtpStatsMonitorCount, xylanNtpPeerAdmin=xylanNtpPeerAdmin, xylanNtpInfoDistance=xylanNtpInfoDistance, xylanNtpPeerShowValid=xylanNtpPeerShowValid, xylanNtpStatsMonitorPort=xylanNtpStatsMonitorPort, xylanNtpPeerShowEntry=xylanNtpPeerShowEntry, xylanNtpPeerShowKeyid=xylanNtpPeerShowKeyid, xylanNtpPeerShowDelay=xylanNtpPeerShowDelay, xylanNtpStatsPeerDuplicate=xylanNtpStatsPeerDuplicate, xylanNtpPeerListSynced=xylanNtpPeerListSynced, xylanNtpStatsMonitorEntry=xylanNtpStatsMonitorEntry, xylanNtpStatsIoRcvPackets=xylanNtpStatsIoRcvPackets, xylanNtpAccessRestrictedRestrictions=xylanNtpAccessRestrictedRestrictions, xylanNtpStatsStatUptime=xylanNtpStatsStatUptime, xylanNtpStatsMonitorLast=xylanNtpStatsMonitorLast, xylanNtpStatsStat=xylanNtpStatsStat, xylanNtpAccessKeyIdAdmin=xylanNtpAccessKeyIdAdmin, xylanNtpStatsPeerBadRefTime=xylanNtpStatsPeerBadRefTime, xylanNtpStatsPeerCandidateOrder=xylanNtpStatsPeerCandidateOrder, xylanNtpStatsLoopFrequency=xylanNtpStatsLoopFrequency, xylanNtpStatsIoRefills=xylanNtpStatsIoRefills, xylanNtpPeerAddress=xylanNtpPeerAddress, xylanNtpEnable=xylanNtpEnable, xylanNtpPeerListDispersion=xylanNtpPeerListDispersion, xylanNtpPeerShowName=xylanNtpPeerShowName, xylanNtpPeerShowTable=xylanNtpPeerShowTable, xylanNtpStatsMonitorName=xylanNtpStatsMonitorName, xylanNtpConfigCtlKeyId=xylanNtpConfigCtlKeyId, xylanNtpPeerShowAssociation=xylanNtpPeerShowAssociation, xylanNtpStatsMonitorLocalAddress=xylanNtpStatsMonitorLocalAddress, xylanNtpInfoAuthDelay=xylanNtpInfoAuthDelay, xylanNtpPeerShowPpoll=xylanNtpPeerShowPpoll, xylanNtpPeerListName=xylanNtpPeerListName, xylanNtpPeerShowRootDispersion=xylanNtpPeerShowRootDispersion, xylanNtpStatsIoReset=xylanNtpStatsIoReset, xylanNtpPeerShowTransmitTime=xylanNtpPeerShowTransmitTime, xylanNtpPeerShowReceiveTime=xylanNtpPeerShowReceiveTime, xylanNtpStatsMonitorVersion=xylanNtpStatsMonitorVersion, xylanNtpPeerEntry=xylanNtpPeerEntry, xylanNtpStatsIoInterrupts=xylanNtpStatsIoInterrupts, xylanNtpStatsStatOldVersion=xylanNtpStatsStatOldVersion, xylanNtpConfigCfgKeyId=xylanNtpConfigCfgKeyId, xylanNtpMonitorEnable=xylanNtpMonitorEnable, xylanNtpStatsIoIgnoredPackets=xylanNtpStatsIoIgnoredPackets, xylanNtpAccessRestrictedIpAddress=xylanNtpAccessRestrictedIpAddress, xylanNtpPeerShowHmode=xylanNtpPeerShowHmode, xylanNtpInfoReferenceTime=xylanNtpInfoReferenceTime, xylanNtpPeerShowOffset=xylanNtpPeerShowOffset, xylanNtpKeysFile=xylanNtpKeysFile, xylanNtpInfoPrecision=xylanNtpInfoPrecision, xylanNtpInfoReferenceId=xylanNtpInfoReferenceId, xylanNtpStatsPeerLastRcv=xylanNtpStatsPeerLastRcv, xylanNtpConfig=xylanNtpConfig, xylanNtpStatsStatReset=xylanNtpStatsStatReset, xylanNtpPeerVersion=xylanNtpPeerVersion, xylanNtpStatsPeerPacketsRcvd=xylanNtpStatsPeerPacketsRcvd, xylanNtpStatsIoRcvBuffers=xylanNtpStatsIoRcvBuffers, xylanNtpInfo=xylanNtpInfo, xylanNtpInfoMode=xylanNtpInfoMode)
