#
# PySNMP MIB module SUPERMICRO-HEALTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SUPERMICRO-HEALTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, ObjectIdentity, MibIdentifier, Gauge32, iso, IpAddress, Bits, Unsigned32, NotificationType, ModuleIdentity, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "ObjectIdentity", "MibIdentifier", "Gauge32", "iso", "IpAddress", "Bits", "Unsigned32", "NotificationType", "ModuleIdentity", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
smHealth, = mibBuilder.importSymbols("SUPERMICRO-SMI", "smHealth")
smHealthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10876, 2, 1))
if mibBuilder.loadTexts: smHealthMIB.setLastUpdated('200110260000Z')
if mibBuilder.loadTexts: smHealthMIB.setOrganization('Super Micro Computer Inc.')
if mibBuilder.loadTexts: smHealthMIB.setContactInfo(' Software Lab Postal: 980 Rock Avenue San Jose, CA 95131 USA Tel: +1 408 503 8000 E-mail: SoftLab@supermicro.com')
if mibBuilder.loadTexts: smHealthMIB.setDescription('MIB module for monitoring health information')
class SMHealthInfoTypes(TextualConvention, Integer32):
    description = 'Represents the different types of health information that may be present in a managed device. The following health information types are currently predefined: 0: fan speed 1: voltage 2: temperature '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 64)

smHealthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1))
smHealthMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1), )
if mibBuilder.loadTexts: smHealthMonitorTable.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorTable.setDescription('A table of health monitoring entries.')
smHealthMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1), ).setIndexNames((0, "SUPERMICRO-HEALTH-MIB", "smHealthMonitorIndex"))
if mibBuilder.loadTexts: smHealthMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorEntry.setDescription('An entry in the health monitoring table. Entries cannot be created or deleted via SNMP operations.')
smHealthMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: smHealthMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorIndex.setDescription('The unique value which identifies this Monitor device.')
smHealthMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHealthMonitorName.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorName.setDescription('A textual full name assigned to the Monitor device. This object is suitable for output to a human operator.')
smHealthMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 3), SMHealthInfoTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHealthMonitorType.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorType.setDescription('Identifies this Monitor device type.')
smHealthMonitorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHealthMonitorReading.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorReading.setDescription('Indicates the value from the Monitor device that are currently in use on the managed device. FAN reading is in unit of RPM, Voltage reading is in unit of mV, Temperture reading is in unit of degree C')
smHealthMonitorHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smHealthMonitorHighLimit.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorHighLimit.setDescription('Indicates the value for the High limitation for the Monitor device that are currently in use on the managed device. Apply to Temperature and Voltage deivces only. Voltage limit is in unit of mV, Temperture limit is in unit of degree C')
smHealthMonitorLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smHealthMonitorLowLimit.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorLowLimit.setDescription('Indicates the value for the Low limitation for the Monitor device that are currently in use on the managed device. FAN limit is in unit of RPM, Voltage limit is in unit of mV, Temperture limit is in unit of degree C')
smHealthMonitorMaxReading = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHealthMonitorMaxReading.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorMaxReading.setDescription('Indicates the value for the possible Maximum reading value for the Monitor device that are currently in use on the managed device. FAN reading is in unit of RPM, Voltage reading is in unit of mV, Temperture reading is in unit of degree C')
smHealthMonitorMinReading = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smHealthMonitorMinReading.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorMinReading.setDescription('Indicates the value for the possible Minimum reading value for the Monitor device that are currently in use on the managed device. FAN reading is in unit of RPM, Voltage reading is in unit of mV, Temperture reading is in unit of degree C')
smHealthMonitorDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smHealthMonitorDivisor.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorDivisor.setDescription('Indicates the value for the Divisor for the Fan device that are currently in use on the managed device. Apply to Fan devices only.')
smHealthMonitorMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 10876, 2, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smHealthMonitorMonitor.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorMonitor.setDescription('Indicates the monitoring status for the Fan device that are currently in use on the managed device. 1 = monitor, 2=do not monitor')
smHealthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 2, 1, 2))
smHealthConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 2, 1, 3))
smHealthCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 2, 1, 3, 1))
smHealthGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10876, 2, 1, 3, 2))
smHealthCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10876, 2, 1, 3, 1, 1)).setObjects(("SUPERMICRO-HEALTH-MIB", "smHealthMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smHealthCompliance = smHealthCompliance.setStatus('current')
if mibBuilder.loadTexts: smHealthCompliance.setDescription('The compliance statement for entities which implement the Supermicro Health Monitoring MIB')
smHealthMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10876, 2, 1, 3, 2, 1)).setObjects(("SUPERMICRO-HEALTH-MIB", "smHealthMonitorType"), ("SUPERMICRO-HEALTH-MIB", "smHealthMonitorName"), ("SUPERMICRO-HEALTH-MIB", "smHealthMonitorReading"), ("SUPERMICRO-HEALTH-MIB", "smHealthMonitorHighLimit"), ("SUPERMICRO-HEALTH-MIB", "smHealthMonitorLowLimit"), ("SUPERMICRO-HEALTH-MIB", "smHealthMonitorMaxReading"), ("SUPERMICRO-HEALTH-MIB", "smHealthMonitorMinReading"), ("SUPERMICRO-HEALTH-MIB", "smHealthMonitorMonitor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smHealthMonitorGroup = smHealthMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: smHealthMonitorGroup.setDescription('A collection of objects providing Monitor devices.')
mibBuilder.exportSymbols("SUPERMICRO-HEALTH-MIB", smHealthMonitorLowLimit=smHealthMonitorLowLimit, smHealthMonitorHighLimit=smHealthMonitorHighLimit, smHealthCompliance=smHealthCompliance, smHealthMonitorDivisor=smHealthMonitorDivisor, smHealthMonitorGroup=smHealthMonitorGroup, SMHealthInfoTypes=SMHealthInfoTypes, smHealthMonitorMaxReading=smHealthMonitorMaxReading, PYSNMP_MODULE_ID=smHealthMIB, smHealthMonitorReading=smHealthMonitorReading, smHealthNotifications=smHealthNotifications, smHealthMonitorMonitor=smHealthMonitorMonitor, smHealthMonitorTable=smHealthMonitorTable, smHealthMIB=smHealthMIB, smHealthMonitorMinReading=smHealthMonitorMinReading, smHealthCompliances=smHealthCompliances, smHealthMonitorEntry=smHealthMonitorEntry, smHealthMonitorIndex=smHealthMonitorIndex, smHealthMonitorName=smHealthMonitorName, smHealthObjects=smHealthObjects, smHealthGroups=smHealthGroups, smHealthConformance=smHealthConformance, smHealthMonitorType=smHealthMonitorType)
