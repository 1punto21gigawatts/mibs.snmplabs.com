#
# PySNMP MIB module CISCO-MGX82XX-DSX3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-DSX3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
dsx3Framing, dsx3Line = mibBuilder.importSymbols("BASIS-MIB", "dsx3Framing", "dsx3Line")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Counter64, Counter32, iso, Gauge32, ModuleIdentity, Integer32, NotificationType, ObjectIdentity, Bits, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Counter64", "Counter32", "iso", "Gauge32", "ModuleIdentity", "Integer32", "NotificationType", "ObjectIdentity", "Bits", "MibIdentifier", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoMgx82xxDsx3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 59))
ciscoMgx82xxDsx3MIB.setRevisions(('2003-01-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMgx82xxDsx3MIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoMgx82xxDsx3MIB.setLastUpdated('200301110000Z')
if mibBuilder.loadTexts: ciscoMgx82xxDsx3MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMgx82xxDsx3MIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoMgx82xxDsx3MIB.setDescription('The MIB Module for DS3/E3 interface configuration , statistics and Alarm configuration. This MIB is supported in T3/E3 service modules in MGX products. Some of the T3/E3 service modules(Cards) are: PXM1 : Processor Switch Module. CESM-T3E3: Circuit Emulation Service Module FRSM-VHS : Frame Relay Service Module. Includes T3 and Channelized T3 categories. FRSM-2CT3: Channelized FRSM Module SRM-3T3 : Service Resource Module Terminologies Used : SDH : SONET Digital Hierarchy PLCP : Physical Layer Convergence Procedure. BERT : Bit Error Rate Testing. FEAC : Far End Alarm Code. OOF : Out Of Frame. AIS : Alarm Indication Signal. LOF : Loss Of Frame. RAI : Remote Alarm Indication. HCS : Header Check Sequence HEC : Header Error Control MA byte : Maintenance and Adaptation byte Tx MA Byte: This is explained in ITU-T G.832 This Byte contains following fields: Payload type Payload dependent bits Timing maker bit Rx MA Byte: This is explained in ITU-T G.832 This Byte contains following fields: Payload type Timing maker bit ')
dsx3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1))
dsx3AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2))
dsx3Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3))
dsx3Counter = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4))
dsx3PlcpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1))
dsx3PlcpAlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2))
dsx3PlcpAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3))
dsx3PlcpCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4))
cwDsx3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1), )
if mibBuilder.loadTexts: cwDsx3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cwDsx3ConfigTable.setDescription('The DS3/E3 Configuration table. There is one row for each DSX3 port in the system. The table size (number of rows) is given by the value of dsx3LineNumOfValidEntries.')
cwDsx3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3LineNum"))
if mibBuilder.loadTexts: cwDsx3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cwDsx3ConfigEntry.setDescription('An entry in the DSX3 Configuration table.')
dsx3LineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LineNum.setStatus('current')
if mibBuilder.loadTexts: dsx3LineNum.setDescription('This object is the identifier of a DS3/E3 Interface on a managed device. The range supported depends upon the type of the card(controller card, service module). For 1 port Card : Range is 1..1 Example : CESM-T3E3 For 2 Port Card : Range is 1..2 Example : PXM1-2T3E3. For 3 Port Card : Range is 1..3 Example: SRM-3T3')
cwDsx3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx3CbitParity", 1), ("g832-g804", 2), ("dsx3M23", 3), ("g751", 4), ("dsx3Unframed", 5), ("e3Unframed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwDsx3LineType.setStatus('current')
if mibBuilder.loadTexts: cwDsx3LineType.setDescription('This variable indicates the variety of DS3 C-bit or E3 application implementing this interface. The type of interface affects the interpretation of the usage and error statistics. The rate of DS3 is 44.736 Mbps and E3 is 34.368 Mbps. The values, in sequence, describe: TITLE: SPECIFICATION: dsx3CbitParity ANSI T1.107a-1990 [9a] g832-g804 ITU-T G.832, G.804 dsx3M23 ANSI T1.107-1988 [9] g751 ITU-T G.751 CESM-T3 supports only ds3Unframed linetype. CESM-E3 supports only e3Unframed linetype.')
cwDsx3LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx3B3ZS", 1), ("e3HDB3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwDsx3LineCoding.setStatus('current')
if mibBuilder.loadTexts: cwDsx3LineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on this interface, which in turn affects a number of its characteristics. dsx3B3ZS and e3HDB3 refer to the use of specified patterns of normal bits and bipolar violations which are used to replace sequences of zero bits of a specified length. dsx3B3ZS(1) : Bipolar 3-Zero Substitution(B3ZS) suppression. e3HDB3 (2) : High-Density Bipolar 3(HDB3) suppression.')
cwDsx3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessThan225", 1), ("moreThan225", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwDsx3LineLength.setStatus('current')
if mibBuilder.loadTexts: cwDsx3LineLength.setDescription('This object specifies the length of the DS3 Line. This object provides information for line build out circuitry if it exists and can use this object to adjust the line build out.')
dsx3LineOOFCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fBits3Of8", 1), ("fBits3Of16", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineOOFCriteria.setStatus('current')
if mibBuilder.loadTexts: dsx3LineOOFCriteria.setDescription('This object specifies the out of frame decision criteria. OOF is declared when errors are detected in the framing octets for four consecuitive frames. fBits3Of8(1) : an OOF condition is declared if at least 3 of 8 framing bits are in error. fBits3Of16(2): an OOF is declared if 3 of 16 framing bits are found to be in error. notApplicable(3) : used in case where it is not applicable. This value can not be set. This object is not applicable when cwDsx3LineType is set to g832-g804(2) or g751(4). This object is not applicable for CESM-T3/E3')
dsx3LineAIScBitsCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checkCbits", 1), ("ignorebits", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineAIScBitsCheck.setStatus('current')
if mibBuilder.loadTexts: dsx3LineAIScBitsCheck.setDescription('If check C-Bits options is chosen then AIS is declared when 1010 pattern is found and C-Bits are all zero. In the other case an AIS condition is declared when the AIS pattern 1010... is detected irrespective of the state of the C Bits. This object does not apply to the E3 interface. The value notApplicable(3) is used in case of interfaces where this object is not applicable. This object is not applicable for CESM-T3/E3.')
dsx3LineLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx3NoLoop", 1), ("dsx3RemoteLineLoop", 2), ("dsx3LocalLineLoop", 3), ("dsx3InbndLocalLoopback", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineLoopbackCommand.setStatus('current')
if mibBuilder.loadTexts: dsx3LineLoopbackCommand.setDescription("This variable represents the loopback configuration of the DS3/E3 interface. The values mean: dsx3NoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as it's value. dsx3RemoteLineLoop Near End loops back Remote data dsx3LocalLineLoop Near End loops back Local data(outbound). dsx3InboundLoopback Near End in bound loopback Local data(inbound).")
dsx3LineRcvFEACValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fFEACCodes4Of5", 1), ("fFEACCodes8Of10", 2), ("fFEACCodesDisable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineRcvFEACValidation.setStatus('current')
if mibBuilder.loadTexts: dsx3LineRcvFEACValidation.setDescription('This entry specifies the FEAC code validation criteria. fFEACCodes4Of5(1) : a valid FEAC code is declared if 4 of 5 codes match. fFEACCodes8Of10(2): a valid FEAC code is declared if 8 of 10 codes match. fFEACCodesDisable(3) : Do not respond to any valid FEAC code. This object is not applicable to E3 interface. This object is not supported in CESM-T3/E3.')
dsx3LineXmtFEACCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx3SendNoCode", 1), ("dsx3SendLineCode", 2), ("dsx3SendPayloadCode", 3), ("dsx3SendResetCode", 4), ("dsx3SendDS1LoopCode", 5), ("dsx3SendTestPattern", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineXmtFEACCode.setStatus('current')
if mibBuilder.loadTexts: dsx3LineXmtFEACCode.setDescription('This variable indicates what bit-oriented code to transmit over the far-end alarm and control (FEAC) channel. The values mean: dsx3SendNoCode sending looped or normal data dsx3SendLineCode sending a request for a line loopback dsx3SendPayloadCode sending a request for a payload loopback (i.e., all DS1/E1s in a DS3/E3 frame) dsx3SendResetCode sending a loopback deactivation request. dsx3SendDS1LoopCode sending a request to put part of DS1/E1 within T3/E3 respectively into loopback. dsx3SendTestPattern sending a test pattern. This object is not applicable for CESM-T3/E3')
dsx3LineBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineBERTEnable.setStatus('current')
if mibBuilder.loadTexts: dsx3LineBERTEnable.setDescription('This object enables/disables the BERT function on an interface. The possible values are : disabled(1): disables port BERT functionality enabled (2): enables port BERT functionality. value specified in dsx3LineBERTPattern is transmitted over the interface. The far end may be looped back and the test pattern verified.')
dsx3LineBERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("allZero", 1), ("allOnes", 2), ("alternateOneZero", 3), ("doubleOneZero", 4), ("userOneWord", 5), ("userTwoWords", 6), ("userThreeWords", 7), ("userFourWords", 8), ("pattern2p15minus1", 9), ("pattern2p20minus1", 10), ("pattern2p23minus1", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineBERTPattern.setStatus('current')
if mibBuilder.loadTexts: dsx3LineBERTPattern.setDescription("This object defines the test bit pattern to be used for BERT. The possible values are : Repetitive Patterns allZero(1): All Zeroes(Continuous spaces). This is repeating pattern of zeros(...000...). The use of this pattern is to test and verify that the ones density policing mechanism is functioning properly. This pattern must be used in circuits optioned for B8ZS. allOnes(2): All Ones(Continuous Marks). This is repeating pattern of ones(...1111...). This provides testing of maximum power level requirements. The all one pattern test causes the repeater to consume the maximum amount of power. If there is insufficient DC span power then the repeater may begin to fail. Typically this pattern is used for a simple continuity check. It may also be used to detect the presence of unwanted loop in the network. alternateOneZero(3): Alternate one/zero pattern(..1010..). This pattern produces a 50% ones density. It is used to stress the repeater's DC power consumption. doubleOneZero(4): Double alternate one/zero(..1100..). userOneWord(5), userTwoWords(6), userThreeWords(7), userFourWords(8), pattern2p15minus1(9) : This is the 2^15-1(32767 bit length) pattern as specified in ITU O.151. It has the maximum of 15(inverted) sequential zeros. This sequence is primarily intended for error and jitter measurements at bit rates of 1544, 2048, 6312, 8448, 32064 and 44736 kbit/s. pattern2p20minus1(10): This is the 2^20-1(1048575 bits in length) pattern specified in ITU O.153.It has the maximum of 19(non-inverted) sequential zeros. This pattern is primarily intended for error measurements at bit rates up to 73kbit/s. This pattern stresses the equalization and timing recovery circuitry of line repeaters. pattern2p23minus1(11): This is the 2^23-1(1048575 bits in length) pattern.")
dsx3LineBERTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bertFailed", 1), ("bertPassed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LineBERTResult.setStatus('current')
if mibBuilder.loadTexts: dsx3LineBERTResult.setDescription('Result of BERT Test. The value in this object is not applicable if dsx3LineBERTEnable is set to disabled(1).')
dsx3BERTResultClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3BERTResultClrButton.setStatus('current')
if mibBuilder.loadTexts: dsx3BERTResultClrButton.setDescription('Setting this object to clear(2) causes the BERT result field to get cleared.')
dsx3TrailTraceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3TrailTraceOption.setReference('ITU-T G.832')
if mibBuilder.loadTexts: dsx3TrailTraceOption.setStatus('current')
if mibBuilder.loadTexts: dsx3TrailTraceOption.setDescription('This object is used for enabling/disabling G.832 Trail Trace. The trail trace is used to repetitively transmit a trail access point identifier so that a trail receiving terminal can verify its continued connection to the intended transmitter. It uses a 16-byte numbering format (see Rec E.164). The first byte of the string is a frame start marker and includes the result of a CRC-7 calculation over the previous frame. The value of this object is set to disable(1) in case of cards where this feature is not supported. This object is not applicable for FRSM-VHS and CESM-T3/E3.')
dsx3TxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3TxTrailTrace.setReference('ITU-T G.832')
if mibBuilder.loadTexts: dsx3TxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: dsx3TxTrailTrace.setDescription('This object is used for specifying the data to be used for G.832 Trail Trace ID/String. This object is applicable only for E3 interfaces with G.832 framing. The trail trace ID is a 16 octet field that contains 1 octet of CRC-7(first octet) and 15 octets of data. The CRC-7 is automatically calculated by the system(card supporting this feature). The format of the value is: Frame Start Marker Error(HEX): CRC-7 Bytes 2-6 (ASCII) [Byte 1-5 of this object] Bytes 7-11 (ASCII) [Byte 6-10 of this object] Bytes 12-16 (ASCII) [Byte 11-15 of this object] This object is not applicable for FRSM-VHS and CESM-T3/E3.')
dsx3RxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RxTrailTrace.setReference('ITU-T G.832')
if mibBuilder.loadTexts: dsx3RxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: dsx3RxTrailTrace.setDescription('Received G.832 Trail Trace string. The format of the value is: First byte indicates CRC-7(frame start marker). Bytes 2-6 (ASCII) [Byte 1-5 of this object] Bytes 7-11 (ASCII) [Byte 6-10 of this object] Bytes 12-16 (ASCII) [Byte 11-15 of this object] The value of all zeroes indicates bad CRC-7. This object is not applicable for FRSM-VHS and CESM-T3/E3.')
dsx3TxTimingMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traceable", 1), ("untraceable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3TxTimingMarker.setReference('ITU-T G.832')
if mibBuilder.loadTexts: dsx3TxTimingMarker.setStatus('current')
if mibBuilder.loadTexts: dsx3TxTimingMarker.setDescription('Transmitted timing marker bit in G.832 MA byte. This object can be set to traceable(1) to indicate that the timing source is traceable to a primary reference clock and is otherwise set to untraceable(2). This is always set to untraceable(2) in case of card where this feature is not supported. This feature is not supported in FRSM-VHS and CESM-T3/E3.')
dsx3RxTimingMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("traceable", 1), ("untraceable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3RxTimingMarker.setReference('ITU-T G.832')
if mibBuilder.loadTexts: dsx3RxTimingMarker.setStatus('current')
if mibBuilder.loadTexts: dsx3RxTimingMarker.setDescription('Received timing marker bit in G.832 MA byte. This object can be set to traceable(1) to indicate that the timing source is tracable to a primary reference clock and is otherwise set to untraceable(2). This is always set to untraceable(2) in case of card where this feature is not supported. This feature is not supported in FRSM-VHS and CESM-T3/E3.')
dsx3TxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unequipped", 1), ("equipped", 2), ("atm", 3), ("sdhtu12s", 4))).clone('unequipped')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3TxPayloadType.setReference('ITU-T G.832 section 2.1.2.')
if mibBuilder.loadTexts: dsx3TxPayloadType.setStatus('current')
if mibBuilder.loadTexts: dsx3TxPayloadType.setDescription('This object specifies the G.832 payload type for transmit data. The possible values are : unequipped (1): not carrying any payload equipped (2): Equipped,non-specific atm (3): ATM sdhtu12s (4): SDH Elements mapping It is recommended that this object is not instantiated in case of cards which does not support G.832 functionality. This is not supported in FRSM-VHS and CESM-T3/E3')
dsx3RxPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unequipped", 1), ("equipped", 2), ("atm", 3), ("sdhtu12s", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RxPayloadType.setReference('ITU-T G.832 section 2.1.2.')
if mibBuilder.loadTexts: dsx3RxPayloadType.setStatus('current')
if mibBuilder.loadTexts: dsx3RxPayloadType.setDescription('Received payload type field in G.832 byte The possible values are : unequipped (1): not carrying any payload equipped (2): Equipped,non-specific atm (3): ATM sdhtu12s (4): SDH Elements mapping It is recommended that this object is not instantiated in case of cards which does not support G.832 functionality. This is not supported in FRSM-VHS and CESM-T3/E3')
dsx3TxTumf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3TxTumf.setReference('ITU-T G.832, section 3.4.3')
if mibBuilder.loadTexts: dsx3TxTumf.setStatus('current')
if mibBuilder.loadTexts: dsx3TxTumf.setDescription('This object contains the value of Tributary Multiframe Indicator(bits 6 and 7 of MA byte) in case of TU-1xs mapping. This is not supported in FRSM-VHS and CESM-T3/E3.')
dsx3RxTumf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RxTumf.setReference('ITU-T G.832, section 3.4.3')
if mibBuilder.loadTexts: dsx3RxTumf.setStatus('current')
if mibBuilder.loadTexts: dsx3RxTumf.setDescription('This object contains the value of Tributary Multiframe Indicator(bits 6 and 7 of MA byte) in case of TU-1xs mapping. This object is not supported in FRSM-VHS and CESM-T3/E3.')
dsx3LineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineEnable.setStatus('current')
if mibBuilder.loadTexts: dsx3LineEnable.setDescription('This object is used for enabling/disabling an interface and modifying the interface configuration. The possible values are: disable (1): Interface is administratively down enable (2): Interface is administratively up. modify (3): Used for modifying the parameters of an interface that has been already enabled(administratively up). To modify the parameters of this table, the value of this object must be set to enable(2) or modify(3).')
dsx3FarEndLoopbkLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("ds1line1", 1), ("ds1line2", 2), ("ds1line3", 3), ("ds1line4", 4), ("ds1line5", 5), ("ds1line6", 6), ("ds1line7", 7), ("ds1line8", 8), ("ds1line9", 9), ("ds1line10", 10), ("ds1line11", 11), ("ds1line12", 12), ("ds1line13", 13), ("ds1line14", 14), ("ds1line15", 15), ("ds1line16", 16), ("ds1line17", 17), ("ds1line18", 18), ("ds1line19", 19), ("ds1line20", 20), ("ds1line21", 21), ("ds1line22", 22), ("ds1line23", 23), ("ds1line24", 24), ("ds1line25", 25), ("ds1line26", 26), ("ds1line27", 27), ("ds1line28", 28), ("ds1line29", 29), ("ds3line", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3FarEndLoopbkLineNum.setStatus('current')
if mibBuilder.loadTexts: dsx3FarEndLoopbkLineNum.setDescription('Specify which DS1 or DS3 line in the far-end for the loopback testing. For CESM-T3/E3, only ds3line(30) is valid.')
dsx3LineXmtClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("backplaneClk", 1), ("recoverClk", 2), ("localClk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineXmtClockSrc.setStatus('current')
if mibBuilder.loadTexts: dsx3LineXmtClockSrc.setDescription('The source of the transmit clock. backplaneClk(2) : clock source is from the backplane. recoverClk (3) : clock source is derived from another t3 interface. localClk (4) : clock source is from a local oscillator on the card')
dsx3FarEndLoopbkLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3FarEndLoopbkLineStatus.setStatus('current')
if mibBuilder.loadTexts: dsx3FarEndLoopbkLineStatus.setDescription('This is a bitmap of the DSX3 FarEnd line loopback status bits Bit Position Loopback indicator ----------- ----- 1 DS1 Line 1 2 DS1 Line 2 3 DS1 Line 3 4 DS1 Line 4 5 DS1 Line 5 6 DS1 Line 6 7 DS1 Line 7 8 DS1 Line 8 9 DS1 Line 9 10 DS1 Line 10 11 DS1 Line 11 12 DS1 Line 12 ... ... ... 28 DS1 Line 28 29 all DS1 Lines 30 DSX3 For CESM-T3/E3, only DSX3 bit (bit 30) is valid.')
dsx3LineEqualizer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intrnlequalizer", 1), ("extequalizer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineEqualizer.setStatus('current')
if mibBuilder.loadTexts: dsx3LineEqualizer.setDescription('This object indicates whether the internal equalizer is being used or bypassed. Set this value depending on the line equipment to which the receiver is attached. intrnlequalizer(1): Use internal line equalizer extequalizer(2) : Use External equalizer or bypass internal equalizer.')
dsx3NearEndLoopbkLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3NearEndLoopbkLineStatus.setStatus('current')
if mibBuilder.loadTexts: dsx3NearEndLoopbkLineStatus.setDescription('This is a bitmap of the DSX3 NearEnd line loopback status bits BitPosition Loopback indicator ----------- ----- 1 DS1 Line 1 2 DS1 Line 2 3 DS1 Line 3 4 DS1 Line 4 5 DS1 Line 5 6 DS1 Line 6 7 DS1 Line 7 8 DS1 Line 8 9 DS1 Line 9 10 DS1 Line 10 11 DS1 Line 11 12 DS1 Line 12 ... ... ... 28 DS1 Line 28 29 DS1 Line 29 30 DSX3 For CESM-T3/E3, only DSX3 bit (bit 30) is valid.')
dsx3SubRateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3SubRateEnable.setStatus('current')
if mibBuilder.loadTexts: dsx3SubRateEnable.setDescription('This variable controls whether the DS3 subrates are enabled or not. The DS3 subrate is part of DSU functionality. This object is currently supported only in FRSM-VHS cards. It is recommended that this object is not instantiated in case of cards which does not support DSU functionality.')
dsx3DsuSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dl3100Mode", 1), ("adcKentroxMode", 2), ("larsCom", 3), ("clearChannel", 4), ("dsuAlgorithm2", 5), ("dsuAlgorithm3", 6), ("dsuAlgorithm4", 7), ("dsuAlgorithm5", 8))).clone('dl3100Mode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3DsuSelect.setStatus('current')
if mibBuilder.loadTexts: dsx3DsuSelect.setDescription("The dsx3DsuSelect variable controls the type of DSU mode to be selected. The 'dsx3SubRateEnable' has to be set to 'enable' before selecting the mode in 'dsx3DsuSelect'. The possible values for this are : dl3100Mode - Indicates compatibility with Digital Link Inc's DL3100 DSU mode of operation. This mode permits line rates to be in multiples of 300 Kbps. adcKentroxMode - Indicates compatibility with ADC Kentrox's DSU. This mode permits line rates to be in multiples of 500 Kbps. larsCom - Indicates compatability with LarsCom DSU. clearChannel - Indicates the standard G.751 framing format (12 overhead bits and 1524 data bits in an E3 frame).This option is supported only in FRSM-2E3. dsuAlgorithm1 - dsuAlgorith4 - Presently this is not used in any of the cards. This object is supported only in FRSM-VHS cards. It is recommended that this object is not instantiated in case of cards which does not support DSU functionality.")
dsx3LineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 44736))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineRate.setStatus('current')
if mibBuilder.loadTexts: dsx3LineRate.setDescription("The desired line rate when 'dsx3SubRateEnable' is enabled. If dsx3DsuSelect is set to 'dl3100Mode', the line rate can be configured in steps of 300 Kbps. If dsx3DsuSelect is set to 'adcKentroxMode', the line rate can be configured in steps of 500 Kbps. This object is supported only in FRSM-VHS cards. It is recommended that this object is not instantiated in case of cards which does not support DSU functionality.")
dsx3LineScrambleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineScrambleEnable.setStatus('current')
if mibBuilder.loadTexts: dsx3LineScrambleEnable.setDescription('This variable turns the scrambling feature ON/OFF The scrambling is a technique that enables framing to be maintained on certain medium-speed edge and trunk interfaces. This object is ONLY applicable for FRSM-2T3/E3.')
dsx3LineNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LineNumOfValidEntries.setStatus('current')
if mibBuilder.loadTexts: dsx3LineNumOfValidEntries.setDescription('The number of DSX3 configuration entries (regardless of their current configuration) in the cwDsx3ConfigTable.')
dsx3AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1), )
if mibBuilder.loadTexts: dsx3AlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: dsx3AlarmConfigTable.setDescription('The DSX3 interface alarm configuration table. This table contains the parameters associated with detecting and declaring alarms for the interface. The parameters include severity of alarm, alarm integration parameters and 15 minute and 24 hour thresholds. The number of rows is given by dsx3LineNumOfValidEntries.')
dsx3AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3LineNum"))
if mibBuilder.loadTexts: dsx3AlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dsx3AlarmConfigEntry.setDescription('An entry in the DSX3 Alarm Configuration table. Thresholds may be configured for: Line Code Violations (LCV), LineErrored Seconds (LES), Line Severely Errored Seconds (LSES), P-bit Coding Violations (PCV), P-bit Errored Seconds (PES), P-bit Severely Errored Seconds(PSES), Severely Errored Seconds (SES), Severely Errored Framing Seconds(SEFS), Unavailable Seconds (UAS), C-bit coding violations (CCV), C-bit errored seconds (CES), C-bit errored seconds (CSES). Once these thresholds are exceeded, minor or major alarms are raised. Please refer to RFC2496 for descriptions of these errors.')
dsx3RedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3RedSeverity.setStatus('current')
if mibBuilder.loadTexts: dsx3RedSeverity.setDescription('This variable is used to setup the severity of RED alarm. So when LOS/LOF alarm is detected the card will send the alarm with appropriate severity status. A major alarm will cause audible notification and the MAJOR ALARM LED will be turned ON. A minor alarm will just turn on the MINOR ALARM LED. LOF detection is not applicable for CESM-8T3/E3. ')
dsx3RAISeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3RAISeverity.setStatus('current')
if mibBuilder.loadTexts: dsx3RAISeverity.setDescription('This variable is used to setup the severity of RAI alarm. So when RAI alarm is detected the card will send the alarm with appropriate severity status. A major alarm will cause the audible notification and the MAJOR ALARM LED will be turned ON. A minor alarm will just turn on the MINOR ALARM LED. This is not applicable for CESM-T3/E3. ')
dsx3NEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3NEAlarmUpCount.setStatus('current')
if mibBuilder.loadTexts: dsx3NEAlarmUpCount.setDescription('This parameter specifies the increment to the Near End alarm integration counters. The local alarms are LOS and LOF. The Default value is 6 and the integration counter is incremented by this value every 10 ms while the alarm persists. The counter is decremented by the value of dsx3NEAlarmDnCount while there is no alarm (the counter does not decrement below zero). When the integration counter exceeds dsx3NEAlarmThreshold an Alarm of the severity specified for the particular NE alarm is declared. LOF detection is not applicable for CESM-T3/E3')
dsx3NEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3NEAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: dsx3NEAlarmDownCount.setDescription('This parameter specifies the decrement to the Near End alarm integration counters. The local alarms are LOS and LOF. The Default value is 1 and the integration counter is decremented by this value every 10 ms while no alarm persists. The counter is incremented by the value of dsx3NEAlarmUpCount while there is no alarm (the counter does not decrement below zero). When the integration counter reaches zero any Alarm previously declared is removed. LOF detection is not applicable for CESM-T3/E3')
dsx3NEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3NEAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3NEAlarmThreshold.setDescription('The value set in this object determines the value that the alarm integration counter must reach for an near end Alarm to be declared. If the up count is 6, the down count is 1 and the threshold 1500, an Alarm is integrated in 2.5 sec and removed in 15 seconds.')
dsx3FEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3FEAlarmUpCount.setStatus('current')
if mibBuilder.loadTexts: dsx3FEAlarmUpCount.setDescription('This parameter specifies the increment to the Far End alarm integration counters. The local alarms are RAI and AIS. The Default value is 6 and the integration counter is incremented by this value every 10 ms while the alarm persists. The counter is decremented by the value of dsx3FEAlarmDnCount while there is no alarm (the counter does not decrement below zero). When the integration counter exceeds dsx3FEAlarmThreshold an Alarm of the severity specified for the particular far end alarm is declared. This object is not applicable for CESM-T3/E3. ')
dsx3FEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3FEAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: dsx3FEAlarmDownCount.setDescription('This parameter specifies the decrement to the Far End alarm integration counters. The local alarms are AIS and RAI. The Default value is 1. The integration counter is decremented by this value every 10 ms (till zero), while no alarm persists. The counter is incremented by the value of dsx3FEAlarmUpCount while there is no alarm. When the integration counter decrements to zero any previously declared Alarm is removed. This object is not applicable for CESM-T3/E3. ')
dsx3FEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3FEAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3FEAlarmThreshold.setDescription('The value set in this object determines the value that the alarm integration counter must reach for an far end Alarm to be declared. If the up count is 6, the down count is 1 and the threshold 1500, an Alarm is integrated in 2.5 sec and removed in 15 seconds. This object is not applicable for CESM-T3/E3. ')
dsx3StatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3StatisticalAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: dsx3StatisticalAlarmSeverity.setDescription('This variable is used to setup the severity of any of the Statistical alarms. So when a Statistical Counter exceeds its specified threshold the card will send the alarm with appropriate severity. A major alarm will cause the audible notification and the MAJOR ALARM LED will be turned ON. A minor alarm will just turn on the MINOR ALARM LED.')
dsx3LCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LCV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3LCV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3LCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LCV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3LCV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3LES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3LES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3LES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3LES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3LSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3LSES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3LSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3LSES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3PCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PCV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PCV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object is not supported in CESM-T3/E3. This object is not applicable for E3 interface.')
dsx3PCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PCV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PCV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval This object is not supported in CESM-T3/E3. This object is not applicable for E3 interface.')
dsx3PES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object is not supported in CESM-T3/E3. This object is not applicable for E3 interface.')
dsx3PES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval. This object is not supported in CESM-T3/E3 This object is not applicable for E3 interface.')
dsx3PSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PSES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object does not apply to the E3 interface. This object is not supported in CESM-T3/E3.')
dsx3PSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PSES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval. This object is not applicable for E3 interface. This object is not supported in CESM-T3/E3.')
dsx3SEFS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3SEFS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3SEFS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object is not supported in CESM-T3/E3')
dsx3SEFS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3SEFS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3SEFS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval. This object is not supported in CESM-T3/E3')
dsx3AISS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3AISS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3AISS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object is not supported in CESM-T3/E3')
dsx3AISS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3AISS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3AISS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval This object is not supported in CESM-T3/E3')
dsx3UAS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3UAS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3UAS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3UAS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3UAS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3UAS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3E3BIP8CV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3E3BIP8CV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8CV15MinThreshold.setDescription('G.832 BIP-8 error monitoring byte. 15 minute threshold value. This has no significance to E3 with G.751 framing which is used in FRSM-VHS This object is not supported in CESM-T3/E3.')
dsx3E3BIP8CV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3E3BIP8CV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8CV24HrThreshold.setDescription('G.832 BIP-8 error monitoring byte. 24 hour threshold value. This has no significance to E3 with G.751 framing which is used in FRSM-VHS. This object is not supported in CESM-T3/E3.')
dsx3E3BIP8ES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3E3BIP8ES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8ES15MinThreshold.setDescription('G.832 BIP-8 error monitoring byte. 15 minute threshold value. This has no significance to E3 with G.751 framing which is used in FRSM-VHS. This object is not supported in CESM-T3/E3.')
dsx3E3BIP8ES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3E3BIP8ES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8ES24HrThreshold.setDescription('G.832 BIP-8 error monitoring byte. 24 hour threshold value. This has no significance to E3 with G.751 framing which is used in FRSM-VHS This object is not supported in CESM-T3/E3 ')
dsx3E3BIP8SES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3E3BIP8SES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8SES15MinThreshold.setDescription('G.832 BIP-8 error monitoring byte. 15 minute threshold value. This has no significance to E3 with G.751 framing which is used in FRSM-VHS This object is not supported in CESM-T3/E3 ')
dsx3E3BIP8SES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3E3BIP8SES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8SES24HrThreshold.setDescription('G.832 BIP-8 error monitoring byte. 24 hour threshold value. This has no significance to E3 with G.751 framing which is used in FRSM-VHS This object is not supported in CESM-T3/E3 ')
dsx3CCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3CCV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3CCV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object is not applicable for E3 interface. This object is not supported in CESM-T3/E3.')
dsx3CCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3CCV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3CCV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval This object is not applicable for E3 interface. This object is not supported in CESM-T3/E3.')
dsx3CES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3CES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3CES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object is not applicable for E3 interface. This object is not supported in CESM-T3/E3.')
dsx3CES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3CES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3CES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. This object is not applicable for E3 interface. This object is not supported in CESM-T3/E3.')
dsx3CSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3CSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3CSES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. This object is not applicable for E3 interface. This object is not supported in CESM-T3/E3.')
dsx3CSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3CSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3CSES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. This object is not applicable for E3 interface. This object is not supported in CESM-T3/E3.')
dsx3AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1), )
if mibBuilder.loadTexts: dsx3AlarmTable.setReference('RFC 2496, Section 2.4.1 and 2.4.2')
if mibBuilder.loadTexts: dsx3AlarmTable.setStatus('current')
if mibBuilder.loadTexts: dsx3AlarmTable.setDescription('The DSX3 interface alarm table. This table contains the performance statistics and Error Events based on 15 minute and/or 24 hour interval. Performance Parameters: LES : Line Errored Seconds PES : P-bit Errored Seconds PSES : P-bit Severely Errored Seconds CES : C-bit Errored Seconds CSES : C-bit Severely Errored Seconds SEFS : Severely Errored Framing Seconds UAS : Unavailable Seconds Error Events: BPV : Bipolar Violation EXZ : Excessive Zeros LCV : Line Coding Violation PCV : P-bit Coding Violation CCV : C-bit Coding Violation.')
dsx3AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3LineNum"))
if mibBuilder.loadTexts: dsx3AlarmEntry.setStatus('current')
if mibBuilder.loadTexts: dsx3AlarmEntry.setDescription('An entry in the DSX3 Alarm table. The bucket statistics(15 minute and 24 hour interval statistics) are gathered for each ds3/e3 interface. Any entry is created automatically when ds3 interface is created.')
dsx3LineAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LineAlarmState.setStatus('current')
if mibBuilder.loadTexts: dsx3LineAlarmState.setDescription('This variable is a bitmap of the DSX3 Line ALarms on the card. A value of zero indicates no alarms. Itemized below are the individual bits: BitPosition Alarm ----------- ----- 0 Receiving RAI 1 Transmitting RAI 2 Receiving AIS 3 Transmitting AIS 4 Receiving OOF 5 Receiving LOS 6 Near End Local Loopback in effect 7 Near End Remote Loopback in effect 8 Receiving test pattern 9 Receive LCD 10 Receiving C-bit Parity pattern ')
dsx3LineStatisticalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LineStatisticalAlarmState.setStatus('current')
if mibBuilder.loadTexts: dsx3LineStatisticalAlarmState.setDescription('This is a bitmap of the DSX3 Line Statistical Alarms on the card. Zero indicates no alarms. Itemized below are the individual alarm bits: BitPosition Alarm ----------- ----- 0 LCV 15 minute threshold exceeded 1 LCV 24 hour threshold exceeded 2 LES 15 minute threshold exceeded 3 LES 24 hour threshold exceeded 4 LSES 15 minute threshold exceeded 5 LSES 24 hour threshold exceeded 6 PCV 15 minute threshold exceeded 7 PCV 24 hour threshold exceeded 8 PES 15 minute threshold exceeded 9 PES 24 hour threshold exceeded 10 PSES 15 minute threshold exceeded 11 PSES 24 hour threshold exceeded 12 SEFS 15 minute threshold exceeded 13 SEFS 24 hour threshold exceeded 14 AISS 15 minute threshold exceeded 15 AISS 24 hour threshold exceeded 16 UAS 15 minute threshold exceeded 17 UAS 24 hour threshold exceeded 18 BIP8CV/G.832 15 minute threshold exceeded 19 BIP8CV/G.832 24 hour threshold exceeded 20 BIP8ES/G.832 15 minute threshold exceeded 21 BIP8ES/G.832 24 hour threshold exceeded 22 BIP8SES/G.832 15 minute threshold exceeded 23 BIP8SES/G.832 24 hour threshold exceeded 24 CCV 15 minute threshold exceeded 25 CCV 24 hour threshold exceeded 26 CES 15 minute threshold exceeded 27 CES 24 hour threshold exceeded 28 CSES 15 minute threshold exceeded 29 CSES 24 hour threshold exceeded Bits 18 to 23 do not have any significance if the framing is G.751(which is used in FRSM_VHS) only bits 0,1,2,3,4,5,16 and 17 are applicable to CESM-T3/E3. ')
dsx3LCVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LCVCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3LCVCurrent.setDescription('The number of Line Code Violations(LCV) encountered by the interface in current 15 minute period.')
dsx3LCV15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LCV15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3LCV15MinBucket.setDescription('The number of Line Code Violations(LCV) encountered by the interface in current last 15 minute period.')
dsx3LCV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LCV24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3LCV24HrBucket.setDescription('The number of Line Code Violations(LCV) encountered by the interface in current last 24 hour period.')
dsx3LESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3LESCurrent.setDescription('The number of Line Errored Seconds(LES) encountered by the interface in current 15 minute period.')
dsx3LES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3LES15MinBucket.setDescription('The number of Line Errored Seconds(LES) encountered by the interface in last 15 minute period.')
dsx3LES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3LES24HrBucket.setDescription('The number of Line Errored Seconds(LES) encountered by the interface in last 24 hour period.')
dsx3LSESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LSESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3LSESCurrent.setDescription('The number of Line Severely Errored Seconds(LSES) encountered by the interface in current 15 minute period.')
dsx3LSES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LSES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3LSES15MinBucket.setDescription('The number of Line Severely Errored Seconds(LSES) encountered by the interface in last 15 minute period.')
dsx3LSES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LSES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3LSES24HrBucket.setDescription('The number of Line Severely Errored Seconds(LSES) encountered by the interface in last 24 hour period.')
dsx3PCVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PCVCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PCVCurrent.setDescription('The number of P-bit Coding Violations(PCV) encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3PCV15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PCV15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PCV15MinBucket.setDescription('The number of P-bit Coding Violations(PCV) encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3PCV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PCV24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PCV24HrBucket.setDescription('The number of P-bit Coding Violations(PCV) encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3PESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PESCurrent.setDescription('The number of P-bit Errored Seconds(PES) encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3PES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PES15MinBucket.setDescription('The number of P-bit Errored Seconds(PES) encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3PES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PES24HrBucket.setDescription('The number of P-bit Errored Seconds(PES) encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3PSESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PSESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PSESCurrent.setDescription('The number of P-bit Severely Errored Seconds(PSES) encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3PSES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PSES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PSES15MinBucket.setDescription('The number of P-bit Severely Errored Seconds(PSES) encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3PSES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PSES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PSES24HrBucket.setDescription('The number of P-bit Severely Errored Seconds(PSES) encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3SEFSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3SEFSCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3SEFSCurrent.setDescription('The number of Severely Errored Framing Seconds(PSES) encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3SEFS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3SEFS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3SEFS15MinBucket.setDescription('The number of Severely Errored Framing Seconds(PSES) encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3SEFS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3SEFS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3SEFS24HrBucket.setDescription('The number of Severely Errored Framing Seconds(PSES) encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3AISSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3AISSCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3AISSCurrent.setDescription('The number of AIS Severely Errored Seconds encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3AISS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3AISS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3AISS15MinBucket.setDescription('The number of AIS Severely Errored Seconds encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3AISS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3AISS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3AISS24HrBucket.setDescription('The number of AIS Severely Errored Seconds encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3UASCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3UASCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3UASCurrent.setDescription('The number of Unavailable Seconds(UAS) encountered by the interface in current 15 minute period.')
dsx3UAS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3UAS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3UAS15MinBucket.setDescription('The number of Unavailable Seconds(UAS) encountered by the interface in last 15 minute period.')
dsx3UAS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3UAS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3UAS24HrBucket.setDescription('The number of Unavailable Seconds(UAS) encountered by the interface in last 24 Hour period.')
dsx3PercentLcvEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PercentLcvEFS.setStatus('current')
if mibBuilder.loadTexts: dsx3PercentLcvEFS.setDescription('This object gives the percentage of seconds without any LCV Errors in the total elapsed seconds.')
dsx3E3BIP8CVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8CVCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8CVCurrent.setDescription('The number of G.832 BIP-8 Coding Violations (CV) encountered by the interface in current 15 minute period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8CV15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8CV15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8CV15MinBucket.setDescription('The number of G.832 BIP-8 Coding Violations (CV) encountered by the interface in last 15 minute period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8CV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8CV24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8CV24HrBucket.setDescription('The number of G.832 BIP-8 Coding Violations (CV) encountered by the interface in last 24 Hour period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8ESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8ESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8ESCurrent.setDescription('The number of G.832 BIP-8 Errored Seconds(ES) encountered by the interface in current 15 minute period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8ES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8ES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8ES15MinBucket.setDescription('The number of G.832 BIP-8 Errored Seconds(ES) encountered by the interface in last 15 minute period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8ES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8ES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8ES24HrBucket.setDescription('The number of G.832 BIP-8 Errored Seconds(ES) encountered by the interface in last 24 Hour period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8SESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8SESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8SESCurrent.setDescription('The number of G.832 BIP-8 Severely Errored Seconds(SES) encountered by the interface in current 15 minute period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8SES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8SES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8SES15MinBucket.setDescription('The number of G.832 BIP-8 Severely Errored Seconds(SES) encountered by the interface in last 15 minute period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3E3BIP8SES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3E3BIP8SES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3E3BIP8SES24HrBucket.setDescription('The number of G.832 BIP-8 Severely Errored Seconds(SES) encountered by the interface in last 24 Hour period. This object is not supported in FRSM-VHS and CESM-T3/E3')
dsx3LineAlarmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3LineAlarmClrButton.setStatus('current')
if mibBuilder.loadTexts: dsx3LineAlarmClrButton.setDescription('Setting this object to dsx3LineAlarmClear will cause all the alarms statuses and counters to reset.')
dsx3CCVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CCVCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3CCVCurrent.setDescription('The number of C-bit Coding Violations(CCV) encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3CCV15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CCV15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3CCV15MinBucket.setDescription('The number of C-bit Coding Violations(CCV) encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3CCV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CCV24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3CCV24HrBucket.setDescription('The number of C-bit Coding Violations(CCV) encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3CESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3CESCurrent.setDescription('The number of C-bit Errored Seconds(CES) encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3CES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3CES15MinBucket.setDescription('The number of C-bit Errored Seconds(CES) encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3CES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3CES24HrBucket.setDescription('The number of C-bit Errored Seconds(CES) encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3CSESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CSESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3CSESCurrent.setDescription('The number of C-bit Severely Errored Seconds(CSES) encountered by the interface in current 15 minute period. This object is not supported in CESM-T3/E3')
dsx3CSES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CSES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3CSES15MinBucket.setDescription('The number of C-bit Severely Errored Seconds(CSES) encountered by the interface in last 15 minute period. This object is not supported in CESM-T3/E3')
dsx3CSES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 3, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CSES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3CSES24HrBucket.setDescription('The number of C-bit Severely Errored Seconds(CSES) encountered by the interface in last 24 Hour period. This object is not supported in CESM-T3/E3')
dsx3CounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1), )
if mibBuilder.loadTexts: dsx3CounterTable.setStatus('current')
if mibBuilder.loadTexts: dsx3CounterTable.setDescription('This table is for ds3/e3 statistics. This table maintains the number of times the line encountered LOS, LOF, AIS, RAI, CCV and Framing Errors(FE) from the time it is up. Error statistics are cleared when the line is brought up from the failure state.')
dsx3CounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3LineNum"))
if mibBuilder.loadTexts: dsx3CounterEntry.setStatus('current')
if mibBuilder.loadTexts: dsx3CounterEntry.setDescription('An entry in the table. Statistics are gathered for each ds3/e3 interface. An entry is created automatically for each ds3/e3 interface that is activated.')
dsx3RcvLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RcvLOSCount.setStatus('current')
if mibBuilder.loadTexts: dsx3RcvLOSCount.setDescription('The number of times the Loss of Signal was detected with or without integrating to LOS alarm.')
dsx3RcvOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RcvOOFCount.setStatus('current')
if mibBuilder.loadTexts: dsx3RcvOOFCount.setDescription('The number of times the Out of Frame was detected with or without integrating to OOF alarm. This object is not supported in CESM-T3/E3')
dsx3RAICount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RAICount.setStatus('current')
if mibBuilder.loadTexts: dsx3RAICount.setDescription('The number of times Yellow Alarms was detected with or without integrating to RAI alarm. This object is not supported in CESM-T3/E3')
dsx3CCVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3CCVCount.setStatus('current')
if mibBuilder.loadTexts: dsx3CCVCount.setDescription('The counter associated with the number of C Bit Coding Violations encountered by a DS3/E3 interface. This object is not supported in CESM-T3/E3')
dsx3FECount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3FECount.setStatus('current')
if mibBuilder.loadTexts: dsx3FECount.setDescription('The number of Framing Pattern Errors encountered by a DS3/E3 interface. This object is not supported in CESM-T3/E3')
dsx3AtmHECCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3AtmHECCount.setStatus('current')
if mibBuilder.loadTexts: dsx3AtmHECCount.setDescription('The number of Header Check Sequence(HCS) Errors. This object is not supported in CESM-T3/E3')
dsx3AtmHECSecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3AtmHECSecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3AtmHECSecCount.setDescription('The number of HEC errored seconds. This object is not supported in CESM-T3/E3')
dsx3AtmSEHECSecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3AtmSEHECSecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3AtmSEHECSecCount.setDescription('The number of Severely HEC error seconds. This object is not supported in CESM-T3/E3')
dsx3CounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3CounterClrButton.setStatus('current')
if mibBuilder.loadTexts: dsx3CounterClrButton.setDescription('This variable is used to clear all the counters.')
dsx3RcvPERRCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RcvPERRCounter.setStatus('current')
if mibBuilder.loadTexts: dsx3RcvPERRCounter.setDescription('The number of P-bit parity error. This object is not supported in CESM-T3/E3')
dsx3RcvFEBECounter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RcvFEBECounter.setStatus('current')
if mibBuilder.loadTexts: dsx3RcvFEBECounter.setDescription('The number of Far-end block error. This object is not supported in CESM-T3/E3')
dsx3RcvEXZCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3RcvEXZCounter.setStatus('current')
if mibBuilder.loadTexts: dsx3RcvEXZCounter.setDescription('The number of excessive zeros This object is not supported in CESM-T3/E3')
dsx3LCVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3LCVCount.setStatus('current')
if mibBuilder.loadTexts: dsx3LCVCount.setDescription('The counter associated with the number of Line Coding Violations encountered by a DS3/E3 interface.')
dsx3PlcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1, 1), )
if mibBuilder.loadTexts: dsx3PlcpConfigTable.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpConfigTable.setDescription('This table contains ATM interface DS3 PLCP configuration parameters.')
dsx3PlcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpNum"))
if mibBuilder.loadTexts: dsx3PlcpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpConfigEntry.setDescription('An entry in the DSX3 PLCP Configuration table.')
dsx3PlcpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpNum.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpNum.setDescription("This object identifies the dsx3 PLCP interface. The value of this object must be same as the value specified in 'dsx3LineNum' object from cwDsx3ConfigTable.")
dsx3PlcpCellFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("framingByPlcp", 1), ("framingbyAtmHec", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpCellFraming.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpCellFraming.setDescription('The value for this object sets the cell delineation method used by the interface. The cell delineation defines how a receiving device recognizes the start and end of an ATM cell. framingByPlcp (1): The ATM Cells are in predetermined location within each PLCP row, so no additional method is needed to delineate ATM cells. framingByAtmHec (2): The Header Error Control field of the ATM cell header is used to delineate ATM cells. ')
dsx3PlcpPayloadScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableScrambling", 1), ("disableScrambling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpPayloadScramble.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpPayloadScramble.setDescription('The value for this object is used for enabling/disabling PLCP cell scrambling.')
dsx3PlcpLoopCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("remoteLineLoop", 2), ("localLineLoop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpLoopCommand.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLoopCommand.setDescription('specifies the type of loopback on the line. The possible value(s) are : noLoop (1): Not in loopback. remoteLineLoop (2): Remote Line Loopback. localLineLoop (3): Local Line Loopback.')
dsx3PlcpNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpNumOfValidEntries.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpNumOfValidEntries.setDescription('This variable indicates the maximum number of entries in cwDsx3ConfigTable.')
dsx3PlcpAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1), )
if mibBuilder.loadTexts: dsx3PlcpAlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpAlarmConfigTable.setDescription('This table contains the ATM interface PLCP alarm parameters.')
dsx3PlcpAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpNum"))
if mibBuilder.loadTexts: dsx3PlcpAlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpAlarmConfigEntry.setDescription('An entry in the DSX3 PLCP Alarm Configuration table. Thresholds may be configured for: Errored Seconds (ES) Coding Violations (CV) Severely Errored Seconds (SES) Unavailable Seconds (UAS), Once these thresholds are exceeded, minor or major alarms are raised. Please refer to RFC2496 for descriptions of these errors.')
dsx3PlcpRedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpRedSeverity.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpRedSeverity.setDescription('This variable is used to setup the severity of PLCP RED alarm. So when PLCP_OOF alarm is detected the card will declare the alarm with appropriate severity status. A major alarm will cause the audible notification and the MAJOR ALARM LED will be turned ON. A minor alarm will just turn on the MINOR ALARM LED.')
dsx3PlcpRAISeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpRAISeverity.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpRAISeverity.setDescription('This variable is used to setup the severity of PLCP RAI alarm. So when PLCP RAI alarm is detected the card will send the alarm with appropriate severity status. A major alarm will cause the audible notification and the MAJOR ALARM LED will be turned ON. A minor alarm will just turn on the MINOR ALARM LED.')
dsx3PlcpLssSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpLssSeverity.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLssSeverity.setDescription('This variable is used to setup the severity of PLCP RAI alarm. So when PLCP LSS alarm is detected the card will send the alarm with appropriate severity status. A major alarm will cause the audible notification and the MAJOR ALARM LED will be turned ON. A minor alarm will just turn on the MINOR ALARM LED.')
dsx3PlcpLssEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lssEnable", 1), ("lssDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpLssEnable.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLssEnable.setDescription('This objects specifies whether the LSS feature is enabled/disabled.')
dsx3PlcpLssCodeConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpLssCodeConnected.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLssCodeConnected.setDescription('This object derfines the value of the LSS code that is to be interpreted as Link Connected.')
dsx3PlcpLssCodeRxLinkDn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpLssCodeRxLinkDn.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLssCodeRxLinkDn.setDescription('This object defines the value of the LSS code that is to be identified as Receive Link Down.')
dsx3PlcpLssCodeRxLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpLssCodeRxLinkUp.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLssCodeRxLinkUp.setDescription('This object defines the value of the LSS code that is to be interpreted as Receive Link Up.')
dsx3PlcpStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpStatisticalAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpStatisticalAlarmSeverity.setDescription('This variable sets up the severity of PLCP Statistical alarm. So when PLCP Statistical alarm is detected, the card will send the alarm with appropriate severity. A major alarm will cause the audible notification and the MAJOR ALARM LED will be turned ON. A minor alarm will just turn on the MINOR ALARM LED. ')
dsx3PlcpBip8CV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpBip8CV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8CV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3PlcpBip8CV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpBip8CV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8CV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3PlcpBip8ES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpBip8ES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8ES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3PlcpBip8ES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpBip8ES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8ES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3PlcpBip8SES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpBip8SES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8SES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3PlcpBip8SES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpBip8SES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8SES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3PlcpSEFS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpSEFS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEFS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3PlcpSEFS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpSEFS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEFS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3PlcpUAS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpUAS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpUAS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
dsx3PlcpUAS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpUAS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpUAS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx3PlcpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1), )
if mibBuilder.loadTexts: dsx3PlcpAlarmTable.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpAlarmTable.setDescription('This table contains ATM interface DS3 PLCP alarm configuration.')
dsx3PlcpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpNum"))
if mibBuilder.loadTexts: dsx3PlcpAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpAlarmEntry.setDescription('An entry in the ATM DS3 PLCP alarm table. Bucket statistics (15 minute and 24 Hour interval) are gathered for each ds3/e3 interface automatically.')
dsx3PlcpLineAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpLineAlarmState.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLineAlarmState.setDescription('This variable is a bitmap of the DSX3 Line alarms. A value of zero indicates no alarms. Itemized below are the individual bits: BitPosition Alarm ----------- ----- 0 Receiving RAI 1 Transmitting RAI 2 Receiving OOF 3 Receiving LSS Link Up 4 Transmitting LSS Link Up 5 Receiving LSS Link Down 6 Transmitting LSS Link Down 7 Near End Local Loopback in effect 8 Near End Remote Loopback in effect ')
dsx3PlcpLineStatisticalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpLineStatisticalAlarmState.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpLineStatisticalAlarmState.setDescription('This variable is a bitmap of the DSX3 Line Statictical Alarms on the card. A value of zero indicates no alarms. Itemized below are the individual alarm bits: BitPosition Alarm ----------- ----- 0 Bip8CV 15 minute threshold exceeded 1 Bip8CV 24 hour threshold exceeded 2 Bip8ES 15 minute threshold exceeded 3 Bip8ES 24 hour threshold exceeded 4 Bip8SES 15 minute threshold exceeded 5 Bip8SES 24 hour threshold exceeded 6 Plcp SEFS 15 minute threshold exceeded 7 Plcp SEFS 24 hour threshold exceeded 8 Plcp UAS 15 minute threshold exceeded 9 Plcp UAS 24 hour threshold exceeded ')
dsx3PlcpBip8CVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8CVCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8CVCurrent.setDescription('This counter counts the number of BIP-8 code violations encountered by the interface.')
dsx3PlcpBip8CV15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8CV15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8CV15MinBucket.setDescription('The counter associated with the number of BIP-8 code violations in the last 15 minute period encountered by the interface.')
dsx3PlcpBip8CV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8CV24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8CV24HrBucket.setDescription('The counter associated with the number of BIP-8 code violations in the last 24 hour period encountered by the interface.')
dsx3PlcpBip8ESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8ESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8ESCurrent.setDescription('This counter counts the number of BIP-8 code violations Errored Seconds encountered by the interface.')
dsx3PlcpBip8ES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8ES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8ES15MinBucket.setDescription('This counter counts the number of BIP-8 code violations Errored Seconds in the last 15 minutes encountered by the interface.')
dsx3PlcpBip8ES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8ES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8ES24HrBucket.setDescription('This counter counts the number of BIP-8 code violations Errored Seconds in the last 24 hours encountered by the interface.')
dsx3PlcpBip8SESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8SESCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8SESCurrent.setDescription('This counter counts the number of Bip8 code violations Severely Errored Seconds encountered by the interface.')
dsx3PlcpBip8SES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8SES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8SES15MinBucket.setDescription('This counter counts the number of BIP-8 Severely Errored Seconds in the last 15 minutes encountered by the interface.')
dsx3PlcpBip8SES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpBip8SES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpBip8SES24HrBucket.setDescription('This counter counts the number of BIP-8 Severely Errored Seconds in the last 24 hours encountered by the interface.')
dsx3PlcpSEFSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpSEFSCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEFSCurrent.setDescription('This counter counts the number of Severely Errored Framing Seconds encountered by the interface.')
dsx3PlcpSEFS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpSEFS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEFS15MinBucket.setDescription('This counter counts the number of Severely Errored Framing Seconds in the last 15 minutes encountered by the interface.')
dsx3PlcpSEFS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpSEFS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEFS24HrBucket.setDescription('This counter counts the number of Severely Errored Framing Seconds in the last 24 hours encountered by the interface.')
dsx3PlcpUASCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpUASCurrent.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpUASCurrent.setDescription('This counter counts the number of Unavailable Seconds encountered by the interface.')
dsx3PlcpUAS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpUAS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpUAS15MinBucket.setDescription('This counter counts the number of Unavailable Seconds in the last 15 minutes encountered by the interface.')
dsx3PlcpUAS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpUAS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpUAS24HrBucket.setDescription('This counter counts the number of Unavailable Seconds in the last 24 hours encountered by the interface.')
dsx3PlcpAlarmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx3PlcpAlarmNoAction", 1), ("dsx3PlcpAlarmClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpAlarmClrButton.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpAlarmClrButton.setDescription('This variable is used to clear all the alarms.')
dsx3PlcpCounterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1), )
if mibBuilder.loadTexts: dsx3PlcpCounterTable.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpCounterTable.setDescription('The table for DS3 PLCP counter table.')
dsx3PlcpCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpNum"))
if mibBuilder.loadTexts: dsx3PlcpCounterEntry.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpCounterEntry.setDescription('An entry in the DS3 PLCP counter table.')
dsx3PlcpRcvBip8Count = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpRcvBip8Count.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpRcvBip8Count.setDescription('The number of BIP-8 errors encountered by the interface.')
dsx3PlcpRcvOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpRcvOOFCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpRcvOOFCount.setDescription('The number of times the Out of Frame(OOF) was detected with or without integrating to OOF alarm.')
dsx3PlcpRcvRAICount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpRcvRAICount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpRcvRAICount.setDescription('The number of times Remote Alarm Indication(RAI) was detected with or without integrating to RAI alarm.')
dsx3PlcpFECount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpFECount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpFECount.setDescription('The number of Framing Errors detected.')
dsx3PlcpFESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpFESecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpFESecCount.setDescription('The number of Framing Error errored seconds.')
dsx3PlcpSEFESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpSEFESecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEFESecCount.setDescription('The number of Severely errored Framing error seconds.')
dsx3PlcpFEBECount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpFEBECount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpFEBECount.setDescription('The number of Far End Block Errors(FEBE) detected.')
dsx3PlcpFEBESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpFEBESecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpFEBESecCount.setDescription('The number of FEBE errored seconds.')
dsx3PlcpSEFEBESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpSEFEBESecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEFEBESecCount.setDescription('The number of Severely errored FEBE seconds.')
dsx3PlcpHECCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpHECCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpHECCount.setDescription('The number of HCS Errors.')
dsx3PlcpHECSecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpHECSecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpHECSecCount.setDescription('The number of HEC errored seconds.')
dsx3PlcpSEHECSecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpSEHECSecCount.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpSEHECSecCount.setDescription('The number of Severely HEC error seconds.')
dsx3PlcpCounterClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx3PlcpCounterNoAction", 1), ("dsx3PlcpCounterClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3PlcpCounterClrButton.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpCounterClrButton.setDescription('This variable is used to clear all the counters.')
dsx3PlcpCounterValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 4, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3PlcpCounterValidEntries.setStatus('current')
if mibBuilder.loadTexts: dsx3PlcpCounterValidEntries.setDescription('The maximum number of entries in the dsx3PlcpCounterTable.')
cmDsx3MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 59, 2))
cmDsx3MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1))
cmDsx3MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 2))
cmDsx3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 2, 1)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "cmDsx3GeneralGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3ConfGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3BertConfigGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3StatsGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3E3AlarmConfGenGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3AlarmStatsGenGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3PlcpConfGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3PlcpStatsGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3PlcpAlarmConfGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3PlcpAlarmGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3E3ConfGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3AlarmConfGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3E3AlarmConfGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3AlarmStatsGroup"), ("CISCO-MGX82XX-DSX3-MIB", "cmDsx3E3AlarmStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3Compliance = cmDsx3Compliance.setStatus('current')
if mibBuilder.loadTexts: cmDsx3Compliance.setDescription('The compliance statement for objects related to DS3 MIB.')
cmDsx3GeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 1)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3LineNumOfValidEntries"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpNumOfValidEntries"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpCounterValidEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3GeneralGroup = cmDsx3GeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3GeneralGroup.setDescription('The collection of objects which are used for providing number of entries in dsx3 and PLCP tables.')
cmDsx3ConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 2)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3LineNum"), ("CISCO-MGX82XX-DSX3-MIB", "cwDsx3LineType"), ("CISCO-MGX82XX-DSX3-MIB", "cwDsx3LineCoding"), ("CISCO-MGX82XX-DSX3-MIB", "cwDsx3LineLength"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineOOFCriteria"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineAIScBitsCheck"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineLoopbackCommand"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineXmtFEACCode"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineEnable"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3FarEndLoopbkLineNum"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineXmtClockSrc"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3FarEndLoopbkLineStatus"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineEqualizer"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3NearEndLoopbkLineStatus"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3SubRateEnable"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3DsuSelect"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineRate"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineScrambleEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3ConfGroup = cmDsx3ConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3ConfGroup.setDescription('The collection of objects which are used for configuring DS3/E3 interfaces.')
cmDsx3E3ConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 3)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3LineRcvFEACValidation"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3TrailTraceOption"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3TxTrailTrace"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RxTrailTrace"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3TxTimingMarker"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RxTimingMarker"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3TxPayloadType"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RxPayloadType"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3TxTumf"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RxTumf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3E3ConfGroup = cmDsx3E3ConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3E3ConfGroup.setDescription('The collection of objects which are applicable for E3 interfaces only.')
cmDsx3BertConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 4)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3LineBERTEnable"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineBERTPattern"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineBERTResult"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3BERTResultClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3BertConfigGroup = cmDsx3BertConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3BertConfigGroup.setDescription('The collection of objects which are used for BERT on DS3/E3 interfaces.')
cmDsx3StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 5)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3RcvLOSCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RcvOOFCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RAICount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CCVCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3FECount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AtmHECCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AtmHECSecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AtmSEHECSecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CounterClrButton"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RcvPERRCounter"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RcvFEBECounter"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RcvEXZCounter"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LCVCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3StatsGroup = cmDsx3StatsGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3StatsGroup.setDescription('The collection of objects related to DS3/E3 statistics.')
cmDsx3E3AlarmConfGenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 6)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3RedSeverity"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3RAISeverity"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3NEAlarmUpCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3NEAlarmDownCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3NEAlarmThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3FEAlarmUpCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3FEAlarmDownCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3FEAlarmThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3StatisticalAlarmSeverity"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LCV15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LCV24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LSES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LSES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3SEFS15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3SEFS24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3UAS15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3UAS24HrThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3E3AlarmConfGenGroup = cmDsx3E3AlarmConfGenGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3E3AlarmConfGenGroup.setDescription('The collection of objects used for alarm configuration of DS3 and E3 interfaces.')
cmDsx3AlarmConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 7)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3PCV15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PCV24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PSES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PSES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AISS15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AISS24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CCV15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CCV24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CSES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CSES24HrThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3AlarmConfGroup = cmDsx3AlarmConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3AlarmConfGroup.setDescription('The collection of objects used for alarm configuration of DS3 interfaces.')
cmDsx3E3AlarmConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 8)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8CV15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8CV24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8ES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8ES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8SES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8SES24HrThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3E3AlarmConfGroup = cmDsx3E3AlarmConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3E3AlarmConfGroup.setDescription('The collection of objects used for alarm configuration of E3 interfaces.')
cmDsx3AlarmStatsGenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 9)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3LineAlarmState"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineStatisticalAlarmState"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LCVCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LCV15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LCV24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LSESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LSES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LSES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3SEFSCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3SEFS15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3SEFS24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3UASCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3UAS15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3UAS24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PercentLcvEFS"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3LineAlarmClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3AlarmStatsGenGroup = cmDsx3AlarmStatsGenGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3AlarmStatsGenGroup.setDescription('The collection of objects related to performance statistics and error events for ds3 end e3 interfaces.')
cmDsx3AlarmStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 10)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3PCVCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PCV15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PCV24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PSESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PSES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PSES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AISSCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AISS15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3AISS24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CCVCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CCV15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CCV24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CSESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CSES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3CSES24HrBucket"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3AlarmStatsGroup = cmDsx3AlarmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3AlarmStatsGroup.setDescription('The collection of objects related to performance statistics and error events for ds3 interfaces.')
cmDsx3E3AlarmStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 11)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8CVCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8CV15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8CV24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8ESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8ES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8ES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8SESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8SES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3E3BIP8SES24HrBucket"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3E3AlarmStatsGroup = cmDsx3E3AlarmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3E3AlarmStatsGroup.setDescription('The collection of objects related to performance statistics and error events for e3 interfaces.')
cmDsx3PlcpConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 12)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpNum"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpCellFraming"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpPayloadScramble"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLoopCommand"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3PlcpConfGroup = cmDsx3PlcpConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3PlcpConfGroup.setDescription('The collection of objects related to PLCP Configuration on DS3 interfaces.')
cmDsx3PlcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 13)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpRcvBip8Count"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpRcvOOFCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpRcvRAICount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpFECount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpFESecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEFESecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpFEBECount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpFEBESecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEFEBESecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpHECCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpHECSecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEHECSecCount"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpCounterClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3PlcpStatsGroup = cmDsx3PlcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3PlcpStatsGroup.setDescription('The collection of objects related to PLCP statistics on DS3 interfaces.')
cmDsx3PlcpAlarmConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 14)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpRedSeverity"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpRAISeverity"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLssSeverity"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLssEnable"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLssCodeConnected"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLssCodeRxLinkDn"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLssCodeRxLinkUp"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpStatisticalAlarmSeverity"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8CV15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8CV24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8ES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8ES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8SES15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8SES24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEFS15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEFS24HrThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpUAS15MinThreshold"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpUAS24HrThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3PlcpAlarmConfGroup = cmDsx3PlcpAlarmConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3PlcpAlarmConfGroup.setDescription('The collection of objects used for PLCP Alarm configuration on DS3 interfaces.')
cmDsx3PlcpAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 59, 2, 1, 15)).setObjects(("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLineAlarmState"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpLineStatisticalAlarmState"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8CVCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8CV15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8CV24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8ESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8ES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8ES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8SESCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8SES15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpBip8SES24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEFSCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEFS15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpSEFS24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpUASCurrent"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpUAS15MinBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpUAS24HrBucket"), ("CISCO-MGX82XX-DSX3-MIB", "dsx3PlcpAlarmClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3PlcpAlarmGroup = cmDsx3PlcpAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3PlcpAlarmGroup.setDescription('The collection of objects used for PLCP Alarm configuration on DS3 interfaces.')
mibBuilder.exportSymbols("CISCO-MGX82XX-DSX3-MIB", dsx3PlcpSEFESecCount=dsx3PlcpSEFESecCount, dsx3PlcpFEBESecCount=dsx3PlcpFEBESecCount, dsx3PlcpUAS24HrBucket=dsx3PlcpUAS24HrBucket, cmDsx3BertConfigGroup=cmDsx3BertConfigGroup, dsx3RAISeverity=dsx3RAISeverity, dsx3PSES24HrThreshold=dsx3PSES24HrThreshold, dsx3LineRcvFEACValidation=dsx3LineRcvFEACValidation, dsx3PlcpRcvBip8Count=dsx3PlcpRcvBip8Count, dsx3PlcpCounter=dsx3PlcpCounter, dsx3PlcpUAS15MinThreshold=dsx3PlcpUAS15MinThreshold, dsx3PlcpBip8SES15MinThreshold=dsx3PlcpBip8SES15MinThreshold, dsx3PlcpCounterEntry=dsx3PlcpCounterEntry, dsx3PES15MinThreshold=dsx3PES15MinThreshold, dsx3LCV15MinBucket=dsx3LCV15MinBucket, dsx3PercentLcvEFS=dsx3PercentLcvEFS, dsx3NEAlarmDownCount=dsx3NEAlarmDownCount, dsx3UASCurrent=dsx3UASCurrent, dsx3PlcpNum=dsx3PlcpNum, dsx3PESCurrent=dsx3PESCurrent, dsx3PlcpBip8CV15MinThreshold=dsx3PlcpBip8CV15MinThreshold, dsx3PlcpBip8CVCurrent=dsx3PlcpBip8CVCurrent, dsx3PCV24HrThreshold=dsx3PCV24HrThreshold, dsx3PlcpRAISeverity=dsx3PlcpRAISeverity, dsx3AlarmEntry=dsx3AlarmEntry, dsx3CES24HrBucket=dsx3CES24HrBucket, dsx3DsuSelect=dsx3DsuSelect, dsx3LES15MinBucket=dsx3LES15MinBucket, dsx3LESCurrent=dsx3LESCurrent, dsx3PlcpBip8ES15MinBucket=dsx3PlcpBip8ES15MinBucket, dsx3SEFS24HrBucket=dsx3SEFS24HrBucket, dsx3PlcpBip8ES15MinThreshold=dsx3PlcpBip8ES15MinThreshold, cmDsx3GeneralGroup=cmDsx3GeneralGroup, dsx3RxTimingMarker=dsx3RxTimingMarker, dsx3E3BIP8ESCurrent=dsx3E3BIP8ESCurrent, dsx3RAICount=dsx3RAICount, dsx3PlcpPayloadScramble=dsx3PlcpPayloadScramble, dsx3FarEndLoopbkLineStatus=dsx3FarEndLoopbkLineStatus, dsx3FEAlarmDownCount=dsx3FEAlarmDownCount, dsx3CSES24HrBucket=dsx3CSES24HrBucket, dsx3TxTumf=dsx3TxTumf, dsx3PlcpBip8ESCurrent=dsx3PlcpBip8ESCurrent, dsx3CES24HrThreshold=dsx3CES24HrThreshold, dsx3CES15MinThreshold=dsx3CES15MinThreshold, dsx3E3BIP8SES15MinBucket=dsx3E3BIP8SES15MinBucket, cmDsx3E3AlarmStatsGroup=cmDsx3E3AlarmStatsGroup, dsx3AISSCurrent=dsx3AISSCurrent, dsx3RedSeverity=dsx3RedSeverity, dsx3PlcpAlarmConfigTable=dsx3PlcpAlarmConfigTable, dsx3AlarmConfigTable=dsx3AlarmConfigTable, dsx3LSESCurrent=dsx3LSESCurrent, dsx3SEFS24HrThreshold=dsx3SEFS24HrThreshold, cmDsx3MIBConformance=cmDsx3MIBConformance, dsx3CCV24HrThreshold=dsx3CCV24HrThreshold, dsx3PlcpBip8ES24HrThreshold=dsx3PlcpBip8ES24HrThreshold, dsx3LineBERTPattern=dsx3LineBERTPattern, dsx3PlcpLoopCommand=dsx3PlcpLoopCommand, dsx3PlcpSEHECSecCount=dsx3PlcpSEHECSecCount, dsx3PlcpCounterClrButton=dsx3PlcpCounterClrButton, dsx3PCVCurrent=dsx3PCVCurrent, dsx3LES24HrBucket=dsx3LES24HrBucket, dsx3LineBERTEnable=dsx3LineBERTEnable, dsx3RcvLOSCount=dsx3RcvLOSCount, dsx3LSES15MinThreshold=dsx3LSES15MinThreshold, dsx3CSES24HrThreshold=dsx3CSES24HrThreshold, dsx3PlcpConfigTable=dsx3PlcpConfigTable, dsx3LES15MinThreshold=dsx3LES15MinThreshold, dsx3PlcpLssEnable=dsx3PlcpLssEnable, dsx3FECount=dsx3FECount, dsx3LCV24HrBucket=dsx3LCV24HrBucket, dsx3PlcpAlarmConfig=dsx3PlcpAlarmConfig, dsx3CCV15MinThreshold=dsx3CCV15MinThreshold, cwDsx3LineCoding=cwDsx3LineCoding, dsx3PES15MinBucket=dsx3PES15MinBucket, dsx3UAS15MinBucket=dsx3UAS15MinBucket, cmDsx3MIBCompliances=cmDsx3MIBCompliances, dsx3PlcpHECSecCount=dsx3PlcpHECSecCount, dsx3PlcpAlarmConfigEntry=dsx3PlcpAlarmConfigEntry, dsx3SEFS15MinThreshold=dsx3SEFS15MinThreshold, dsx3PlcpFESecCount=dsx3PlcpFESecCount, dsx3PlcpCellFraming=dsx3PlcpCellFraming, cmDsx3PlcpAlarmConfGroup=cmDsx3PlcpAlarmConfGroup, dsx3LineStatisticalAlarmState=dsx3LineStatisticalAlarmState, cmDsx3E3ConfGroup=cmDsx3E3ConfGroup, cmDsx3PlcpAlarmGroup=cmDsx3PlcpAlarmGroup, dsx3PlcpBip8SES24HrThreshold=dsx3PlcpBip8SES24HrThreshold, PYSNMP_MODULE_ID=ciscoMgx82xxDsx3MIB, dsx3E3BIP8SES15MinThreshold=dsx3E3BIP8SES15MinThreshold, dsx3RcvOOFCount=dsx3RcvOOFCount, dsx3LineNumOfValidEntries=dsx3LineNumOfValidEntries, dsx3PlcpRedSeverity=dsx3PlcpRedSeverity, dsx3PlcpStatisticalAlarmSeverity=dsx3PlcpStatisticalAlarmSeverity, dsx3BERTResultClrButton=dsx3BERTResultClrButton, dsx3PlcpSEFSCurrent=dsx3PlcpSEFSCurrent, dsx3UAS15MinThreshold=dsx3UAS15MinThreshold, dsx3RxTumf=dsx3RxTumf, cmDsx3AlarmConfGroup=cmDsx3AlarmConfGroup, cmDsx3AlarmStatsGroup=cmDsx3AlarmStatsGroup, dsx3PlcpNumOfValidEntries=dsx3PlcpNumOfValidEntries, cmDsx3StatsGroup=cmDsx3StatsGroup, dsx3LineLoopbackCommand=dsx3LineLoopbackCommand, dsx3AISS24HrBucket=dsx3AISS24HrBucket, dsx3PlcpRcvRAICount=dsx3PlcpRcvRAICount, cmDsx3E3AlarmConfGroup=cmDsx3E3AlarmConfGroup, dsx3LCV24HrThreshold=dsx3LCV24HrThreshold, dsx3LES24HrThreshold=dsx3LES24HrThreshold, dsx3CCVCurrent=dsx3CCVCurrent, dsx3PCV15MinThreshold=dsx3PCV15MinThreshold, dsx3AlarmConfig=dsx3AlarmConfig, dsx3UAS24HrBucket=dsx3UAS24HrBucket, dsx3E3BIP8CV24HrThreshold=dsx3E3BIP8CV24HrThreshold, dsx3StatisticalAlarmSeverity=dsx3StatisticalAlarmSeverity, dsx3PlcpUAS15MinBucket=dsx3PlcpUAS15MinBucket, cmDsx3PlcpConfGroup=cmDsx3PlcpConfGroup, dsx3PlcpLssSeverity=dsx3PlcpLssSeverity, dsx3E3BIP8SESCurrent=dsx3E3BIP8SESCurrent, dsx3CSES15MinThreshold=dsx3CSES15MinThreshold, dsx3CCV24HrBucket=dsx3CCV24HrBucket, dsx3E3BIP8ES24HrThreshold=dsx3E3BIP8ES24HrThreshold, dsx3NEAlarmThreshold=dsx3NEAlarmThreshold, dsx3PES24HrBucket=dsx3PES24HrBucket, dsx3AISS15MinBucket=dsx3AISS15MinBucket, dsx3TxTimingMarker=dsx3TxTimingMarker, dsx3Alarm=dsx3Alarm, dsx3PlcpConfig=dsx3PlcpConfig, dsx3E3BIP8ES15MinBucket=dsx3E3BIP8ES15MinBucket, dsx3PCV24HrBucket=dsx3PCV24HrBucket, dsx3PlcpLineAlarmState=dsx3PlcpLineAlarmState, dsx3FarEndLoopbkLineNum=dsx3FarEndLoopbkLineNum, dsx3TrailTraceOption=dsx3TrailTraceOption, dsx3LineBERTResult=dsx3LineBERTResult, dsx3RcvEXZCounter=dsx3RcvEXZCounter, dsx3CSES15MinBucket=dsx3CSES15MinBucket, dsx3PlcpSEFS24HrBucket=dsx3PlcpSEFS24HrBucket, dsx3RxTrailTrace=dsx3RxTrailTrace, dsx3PES24HrThreshold=dsx3PES24HrThreshold, dsx3E3BIP8SES24HrThreshold=dsx3E3BIP8SES24HrThreshold, dsx3CCVCount=dsx3CCVCount, dsx3PlcpLineStatisticalAlarmState=dsx3PlcpLineStatisticalAlarmState, dsx3LineNum=dsx3LineNum, dsx3AISS15MinThreshold=dsx3AISS15MinThreshold, dsx3LineAlarmClrButton=dsx3LineAlarmClrButton, dsx3PlcpUAS24HrThreshold=dsx3PlcpUAS24HrThreshold, dsx3PlcpCounterValidEntries=dsx3PlcpCounterValidEntries, cmDsx3Compliance=cmDsx3Compliance, dsx3TxTrailTrace=dsx3TxTrailTrace, cmDsx3E3AlarmConfGenGroup=cmDsx3E3AlarmConfGenGroup, dsx3NEAlarmUpCount=dsx3NEAlarmUpCount, dsx3Config=dsx3Config, dsx3PSES15MinBucket=dsx3PSES15MinBucket, dsx3E3BIP8CVCurrent=dsx3E3BIP8CVCurrent, dsx3AtmHECCount=dsx3AtmHECCount, dsx3LineXmtClockSrc=dsx3LineXmtClockSrc, dsx3PlcpBip8SESCurrent=dsx3PlcpBip8SESCurrent, dsx3LineEqualizer=dsx3LineEqualizer, dsx3PlcpAlarmClrButton=dsx3PlcpAlarmClrButton, dsx3E3BIP8ES15MinThreshold=dsx3E3BIP8ES15MinThreshold, dsx3E3BIP8CV15MinThreshold=dsx3E3BIP8CV15MinThreshold, dsx3E3BIP8ES24HrBucket=dsx3E3BIP8ES24HrBucket, dsx3PlcpSEFEBESecCount=dsx3PlcpSEFEBESecCount, dsx3LSES15MinBucket=dsx3LSES15MinBucket, dsx3PlcpHECCount=dsx3PlcpHECCount, dsx3PlcpBip8SES24HrBucket=dsx3PlcpBip8SES24HrBucket, dsx3PlcpConfigEntry=dsx3PlcpConfigEntry, dsx3PlcpCounterTable=dsx3PlcpCounterTable, cwDsx3LineType=cwDsx3LineType, dsx3Counter=dsx3Counter, dsx3AlarmTable=dsx3AlarmTable, dsx3PlcpRcvOOFCount=dsx3PlcpRcvOOFCount, dsx3PlcpFECount=dsx3PlcpFECount, dsx3LSES24HrThreshold=dsx3LSES24HrThreshold, dsx3E3BIP8CV15MinBucket=dsx3E3BIP8CV15MinBucket, dsx3RcvFEBECounter=dsx3RcvFEBECounter, dsx3PlcpSEFS24HrThreshold=dsx3PlcpSEFS24HrThreshold, dsx3CCV15MinBucket=dsx3CCV15MinBucket, dsx3LCVCount=dsx3LCVCount, dsx3PlcpSEFS15MinBucket=dsx3PlcpSEFS15MinBucket, dsx3PlcpFEBECount=dsx3PlcpFEBECount, dsx3CounterClrButton=dsx3CounterClrButton, dsx3PSESCurrent=dsx3PSESCurrent, dsx3PCV15MinBucket=dsx3PCV15MinBucket, dsx3LineRate=dsx3LineRate, dsx3CES15MinBucket=dsx3CES15MinBucket, dsx3PlcpLssCodeConnected=dsx3PlcpLssCodeConnected, dsx3CounterEntry=dsx3CounterEntry, dsx3E3BIP8CV24HrBucket=dsx3E3BIP8CV24HrBucket, dsx3E3BIP8SES24HrBucket=dsx3E3BIP8SES24HrBucket, dsx3PlcpBip8CV15MinBucket=dsx3PlcpBip8CV15MinBucket, dsx3LCV15MinThreshold=dsx3LCV15MinThreshold, dsx3PlcpAlarmEntry=dsx3PlcpAlarmEntry, dsx3PlcpBip8ES24HrBucket=dsx3PlcpBip8ES24HrBucket, dsx3PlcpLssCodeRxLinkUp=dsx3PlcpLssCodeRxLinkUp, dsx3PlcpAlarm=dsx3PlcpAlarm, cmDsx3ConfGroup=cmDsx3ConfGroup, dsx3RxPayloadType=dsx3RxPayloadType, cwDsx3ConfigEntry=cwDsx3ConfigEntry, dsx3LineAlarmState=dsx3LineAlarmState, dsx3LineOOFCriteria=dsx3LineOOFCriteria, dsx3CSESCurrent=dsx3CSESCurrent, dsx3PlcpBip8CV24HrThreshold=dsx3PlcpBip8CV24HrThreshold, dsx3LineAIScBitsCheck=dsx3LineAIScBitsCheck, cmDsx3AlarmStatsGenGroup=cmDsx3AlarmStatsGenGroup, dsx3FEAlarmThreshold=dsx3FEAlarmThreshold, dsx3PlcpUASCurrent=dsx3PlcpUASCurrent, dsx3PlcpBip8CV24HrBucket=dsx3PlcpBip8CV24HrBucket, dsx3PSES15MinThreshold=dsx3PSES15MinThreshold, dsx3PlcpLssCodeRxLinkDn=dsx3PlcpLssCodeRxLinkDn, dsx3CounterTable=dsx3CounterTable, dsx3LSES24HrBucket=dsx3LSES24HrBucket, cmDsx3PlcpStatsGroup=cmDsx3PlcpStatsGroup, dsx3PSES24HrBucket=dsx3PSES24HrBucket, dsx3AtmSEHECSecCount=dsx3AtmSEHECSecCount, dsx3PlcpSEFS15MinThreshold=dsx3PlcpSEFS15MinThreshold, cwDsx3LineLength=cwDsx3LineLength, cwDsx3ConfigTable=cwDsx3ConfigTable, dsx3AtmHECSecCount=dsx3AtmHECSecCount, dsx3RcvPERRCounter=dsx3RcvPERRCounter, dsx3LineScrambleEnable=dsx3LineScrambleEnable, dsx3NearEndLoopbkLineStatus=dsx3NearEndLoopbkLineStatus, dsx3PlcpBip8SES15MinBucket=dsx3PlcpBip8SES15MinBucket, dsx3TxPayloadType=dsx3TxPayloadType, ciscoMgx82xxDsx3MIB=ciscoMgx82xxDsx3MIB, dsx3AISS24HrThreshold=dsx3AISS24HrThreshold, dsx3SubRateEnable=dsx3SubRateEnable, dsx3FEAlarmUpCount=dsx3FEAlarmUpCount, dsx3LineXmtFEACCode=dsx3LineXmtFEACCode, dsx3SEFS15MinBucket=dsx3SEFS15MinBucket, dsx3LineEnable=dsx3LineEnable, dsx3AlarmConfigEntry=dsx3AlarmConfigEntry, dsx3LCVCurrent=dsx3LCVCurrent, dsx3CESCurrent=dsx3CESCurrent, dsx3PlcpAlarmTable=dsx3PlcpAlarmTable, cmDsx3MIBGroups=cmDsx3MIBGroups, dsx3UAS24HrThreshold=dsx3UAS24HrThreshold, dsx3SEFSCurrent=dsx3SEFSCurrent)
