#
# PySNMP MIB module EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:10:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, TimeTicks, Gauge32, Counter32, Counter64, ObjectIdentity, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Unsigned32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Gauge32", "Counter32", "Counter64", "ObjectIdentity", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Unsigned32", "iso", "Bits")
DisplayString, MacAddress, DateAndTime, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "DateAndTime", "RowStatus", "TextualConvention")
fastPathdot1xAdvanced = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36))
fastPathdot1xAdvanced.setRevisions(('2011-01-26 00:00', '2007-05-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathdot1xAdvanced.setRevisionsDescriptions(('Postal address updated.', 'Ubiquiti branding related changes.',))
if mibBuilder.loadTexts: fastPathdot1xAdvanced.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathdot1xAdvanced.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: fastPathdot1xAdvanced.setContactInfo('')
if mibBuilder.loadTexts: fastPathdot1xAdvanced.setDescription('The Ubiquiti Private MIB for FastPath Dot1x Advanced Features ')
class Dot1xPortControlMode(TextualConvention, Integer32):
    description = 'The control values of the Authenticator PAE controlled Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3), ("macBased", 4))

class Dot1xSessionTerminationAction(TextualConvention, Integer32):
    description = 'The action to be taken on session termination .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("default", 1), ("reauthenticate", 2))

agentDot1xEnhancementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1))
agentDot1xRadiusVlanAssignment = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xRadiusVlanAssignment.setStatus('current')
if mibBuilder.loadTexts: agentDot1xRadiusVlanAssignment.setDescription('Enable/Disable dot1x Vlan Assignment Support on the switch.')
agentDot1xDynamicVlanCreationMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xDynamicVlanCreationMode.setStatus('current')
if mibBuilder.loadTexts: agentDot1xDynamicVlanCreationMode.setDescription('Enable/Disable dot1x dynamic vlan creation Support on the switch.')
agentDot1xEapolFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xEapolFloodMode.setStatus('current')
if mibBuilder.loadTexts: agentDot1xEapolFloodMode.setDescription('Enable/Disable dot1x eapol flooding mode on the switch.')
agentDot1xPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2))
agentDot1xPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1), )
if mibBuilder.loadTexts: agentDot1xPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortConfigTable.setDescription('A table for dot1x enhanced Port details and associated functionality.')
agentDot1xPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: agentDot1xPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortConfigEntry.setDescription('Represents entry for port config table.')
agentDot1xPortControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 1), Dot1xPortControlMode().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xPortControlMode.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortControlMode.setDescription('Dot1x port control mode of this port.The Port control mode . The port control mode for this interface can take the following values , force-unauthorized - the port is in unauthorized mode, auto-Port based mode. If a client authenticates suscessfully, then the interface is authorized . Otherwise, the port is in unauthorized mode. If more than one clients are attached to the port , then only one client needs to authenticate to allow other clients access. force-authorized - The port is placed in authorized mode macBased - If more than one client is attached to the port, then each client needs to authenticate separately. This object depcreates dot1xAuthAuthControlledPortControl object in IEEE8021-PAE-MIB')
agentDot1xGuestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xGuestVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDot1xGuestVlanId.setDescription('Specifies the Guest Vlan of the port. A port will be moved to its Guest Vlan if no client sucessfully authenticates on that port for the Guest Vlan Period. A value of zero indicates no Guest Vlan is configured for the interface.')
agentDot1xGuestVlanPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xGuestVlanPeriod.setStatus('current')
if mibBuilder.loadTexts: agentDot1xGuestVlanPeriod.setDescription('The value, in seconds, of the guestVlanPeriod constant currently in use for Guest Vlan Assignment for the port .')
agentDot1xUnauthenticatedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xUnauthenticatedVlan.setStatus('current')
if mibBuilder.loadTexts: agentDot1xUnauthenticatedVlan.setDescription('Specifies the Unauthenticated Vlan of the port. A port will be moved to its unauthenticated Vlan if the client authenticates unsucessfully on that port . A value of zero indicates no Unauthenticated Vlan is configured for the port. ')
agentDot1xMaxUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xMaxUsers.setStatus('current')
if mibBuilder.loadTexts: agentDot1xMaxUsers.setDescription(' Specifies the maximum users or clients that can authenticate on this port when the port control mode is macBased. ')
agentDot1xPortVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortVlanAssigned.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortVlanAssigned.setDescription(' Specifies the vlan the port is assigned to by Dot1x . Only relevant if the port control mode of the port is auto. ')
agentDot1xPortVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("monitorVlan", 6), ("notAssigned", 7))).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortVlanAssignedReason.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortVlanAssignedReason.setDescription(' Reason the port is assigned to the vlan specified by agentDot1xPortVlanAssigned . Only relevant if the port control mode of the port is auto. ')
agentDot1xPortSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortSessionTimeout.setDescription(' Specifies the session timeout value assigned by the Radius server for this port . Only relevant if the port control mode of the port is auto. ')
agentDot1xPortTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 9), Dot1xSessionTerminationAction().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortTerminationAction.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortTerminationAction.setDescription(' Specifies the session termination action assigned by the Radius Server .This is the action taken when the session times out . Only relevant if the port control mode of the port is auto. ')
agentDot1xPortMABenabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xPortMABenabled.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortMABenabled.setDescription(' Specifies if Mac-based bypass authentication is configured for the port. ')
agentDot1xPortMABenabledOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xPortMABenabledOperational.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortMABenabledOperational.setDescription(' Displays the operational value of the Mac-based authentication bypass mode (MAB) on the port. ')
agentDot1xClientConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3))
agentDot1xClientConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1), )
if mibBuilder.loadTexts: agentDot1xClientConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientConfigTable.setDescription('A table for dot1x Client details and associated functionality.')
agentDot1xClientConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1), ).setIndexNames((0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xClientMacAddress"))
if mibBuilder.loadTexts: agentDot1xClientConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientConfigEntry.setDescription('Represents entry for port config table.')
agentDot1xClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientMacAddress.setDescription('Specifies the client MAC address of the client. ')
agentDot1xLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xLogicalPort.setStatus('current')
if mibBuilder.loadTexts: agentDot1xLogicalPort.setDescription('Specifies the client MAC address of the client . ')
agentDot1xInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xInterface.setStatus('current')
if mibBuilder.loadTexts: agentDot1xInterface.setDescription('Specifies the physical interface to which the client is attached . ')
agentDot1xClientAuthPAEstate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientAuthPAEstate.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientAuthPAEstate.setDescription('The current value of the Authenticator PAE state machine for the client.')
agentDot1xClientBackendState = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientBackendState.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientBackendState.setDescription('The current state of the Backend Authentication state machine.')
agentDot1xClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientUserName.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientUserName.setDescription('Specifies the username with which the client is authenticated to the Radius server . This value is only valid when the client is in authenticated state. ')
agentDot1xClientSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientSessionTime.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientSessionTime.setDescription('Specifies the time elapsed in seconds since the client was authenticated in this session. This value is only valid when the client is in authenticated state. ')
agentDot1xClientFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientFilterID.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientFilterID.setDescription('Specifies the Filter ID or Diffserv Policy name to be applied to the session . This vlaue is populated only if it has been assigned by the RADIUS server. This value is only valid when the client is in authenticated state.')
agentDot1xClientVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientVlanAssigned.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientVlanAssigned.setDescription('Specifies the vlan the client is associated with by Dot1x . This value is only valid when the client is in authenticated state.')
agentDot1xClientVlanAssignedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("monitorVlan", 6), ("invalid", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientVlanAssignedReason.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientVlanAssignedReason.setDescription(' Reason the client is associated to the vlan specified by agentDot1xClientVlanAssigned . This value is only valid when the client is in authenticated state.')
agentDot1xClientSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientSessionTimeout.setDescription('Specifies the session time remaining for the client if assigned by the Radius server . A value of 0 indicates that no session timeout was assigned by the RADIUS server. This value is only valid when the client is in authenticated state. ')
agentDot1xClientTerminationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 3, 1, 1, 12), Dot1xSessionTerminationAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xClientTerminationAction.setStatus('current')
if mibBuilder.loadTexts: agentDot1xClientTerminationAction.setDescription('Specifies the session termination action assigned by the Radius Server . This is the action taken when the session times out . This value is only valid when the client is in authenticated state. ')
agentDot1xMonitorModeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4))
agentDot1xMonitorModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xMonitorModeEnabled.setStatus('current')
if mibBuilder.loadTexts: agentDot1xMonitorModeEnabled.setDescription('Enable/Disable Dot1x Monitor mode Support on the switch.')
agentDot1xMonitorModeClients = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xMonitorModeClients.setStatus('current')
if mibBuilder.loadTexts: agentDot1xMonitorModeClients.setDescription('Retrieves the number of clients that got authenticated by Monitor mode globally.')
agentDot1xNonMonitorModeClients = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xNonMonitorModeClients.setStatus('current')
if mibBuilder.loadTexts: agentDot1xNonMonitorModeClients.setDescription('Retrieves the number of clients that are granted access by Dot1x with no monitor mode enabled.')
agentDot1xAuthHistoryResultsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5))
agentDot1xPortAuthHistoryResultTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1), )
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultTable.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultTable.setDescription('A table to display the dot1x monitor mode results.')
agentDot1xPortAuthHistoryResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1), ).setIndexNames((0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xAuthHistoryResultIfaceIndex"), (0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xAuthHistoryResultIndex"))
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultEntry.setDescription('Represents Dot1x Authentication results for a Dot1x Authentication History table.')
agentDot1xAuthHistoryResultIfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIfaceIndex.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIfaceIndex.setDescription('This object represents the physical Bridge Port on which dot1x Auth event might be received.')
agentDot1xAuthHistoryResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIndex.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIndex.setDescription('Reference to the Dot1x Authentication history table maintained.')
agentDot1xAuthHistoryResultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultTimeStamp.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultTimeStamp.setDescription('Specifies the exact time of Dot1x Authentication event information occurred maintained in the history table.')
agentDot1xAuthHistoryResultAge = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAge.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAge.setDescription('Time since the authentication entry was added to the history table. It is displayed in days, hours, minutes, and seconds.')
agentDot1xAuthHistoryResultMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultMacAddress.setDescription('Specifies the client MAC Address maintained in the Dot1x Authentication history table.')
agentDot1xAuthHistoryResultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanId.setDescription('Specifies the VLANID maintained in the history table. It is the VLANID which is failed to associate to the port during authentication process. The VLANID is identified distinctly by the Reason code for the respective entry. Valid only when the reason code is set to 13 (VLAN assignment failure). In all the other cases, VLANID is set to 0. ')
agentDot1xAuthHistoryResultAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAuthStatus.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAuthStatus.setDescription('Specifies the Dot1x Authentication status (Success or Failure) for the Dot1x Authentication event takes place. ')
agentDot1xAuthHistoryResultAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("granted", 1), ("denied", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAccessStatus.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultAccessStatus.setDescription(' Authentication access status indicates the exact status of the dot1x client. Granted means the client is allowed access to the network using dot1x or monitor mode. Denied means the client is not allowed access to the network.')
agentDot1xAuthHistoryResultFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultFilterID.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultFilterID.setDescription('Specifies the Filter ID or Diffserv Policy name assigned by the RADIUS server. This value is only valid when the client is in authenticated state.')
agentDot1xAuthHistoryResultVlanAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanAssigned.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanAssigned.setDescription('Specifies the VLANID maintained in the history table (It is the VLANID Assigned to a Port or Client authenticate).')
agentDot1xAuthHistoryResultVlanAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("radius", 2), ("unauthenticatedVlan", 3), ("guestVlan", 4), ("voiceVlan", 5), ("monitorVlan", 6), ("notAssigned", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanAssignedType.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultVlanAssignedType.setDescription('Specifies the VLAN Assigned Reason maintained in the history table.')
agentDot1xAuthHistoryResultReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("supplicant-timeout", 1), ("eapol-timeout", 2), ("radius-request-timeout", 3), ("radius-auth-failure", 4), ("radius-auth-comm-failure", 5), ("radius-challenge-process-invalid-nas-port", 6), ("radius-challenge-process-wrong-eap-msg", 7), ("radius-request-send-msg-error", 8), ("radius-accept-process-invalid-nas-port", 9), ("radius-accept-process-wrong-eap-msg", 10), ("radius-accept-filter-assignment-failure", 11), ("radius-accept-diffserv-not-present", 12), ("radius-accept-vlan-assignment-failure", 13), ("vlan-assignment-feature-not-enabled", 14), ("radius-success", 15), ("local-auth-user-not-found", 16), ("local-auth-user-no-access", 17), ("local-auth-md5-validation-failure", 18), ("local-auth-invalid-eap-type", 19), ("local-failure", 20), ("local-success", 21), ("radius-invalid-radius-status", 22), ("guest-vlan-timer-expiry", 23), ("undefined-auth-method", 24), ("reject-auth-method", 25), ("invalid-auth-method", 26), ("auth-method-not-configured", 27), ("unauth-vlan-not-created", 28), ("guest-vlan-not-created", 29), ("radius-accept-invalid-vlan-failure", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultReasonCode.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultReasonCode.setDescription('Specifies the Dot1x authentication reason refered by the result index on a port.')
agentDot1xAuthHistoryResultsClear = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultsClear.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultsClear.setDescription('When set to enable(1), all Dot1x Authentication History information will be reset.')
agentDot1xPortAuthHistoryResultClearTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3), )
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultClearTable.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultClearTable.setDescription('A table to clear the dot1x monitor mode results per interface.')
agentDot1xPortAuthHistoryResultClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3, 1), ).setIndexNames((0, "EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", "agentDot1xAuthHistoryResultIfIndex"))
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultClearEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultClearEntry.setDescription('Represents to clear the Dot1x Authentication results for a Dot1x Authentication History table.')
agentDot1xAuthHistoryResultIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDot1xAuthHistoryResultIfIndex.setDescription('This object represents the physical Bridge Port on which dot1x Auth event might be received.')
agentDot1xPortAuthHistoryResultsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 36, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultsClear.setStatus('current')
if mibBuilder.loadTexts: agentDot1xPortAuthHistoryResultsClear.setDescription('When set to enable(1), all Dot1x Authentication History information for the given port will be reset. The value is write-only. Attempt to read will return disable(2).')
mibBuilder.exportSymbols("EdgeSwitch-DOT1X-ADVANCED-FEATURES-MIB", PYSNMP_MODULE_ID=fastPathdot1xAdvanced, agentDot1xAuthHistoryResultIfaceIndex=agentDot1xAuthHistoryResultIfaceIndex, agentDot1xMonitorModeClients=agentDot1xMonitorModeClients, agentDot1xPortTerminationAction=agentDot1xPortTerminationAction, agentDot1xPortAuthHistoryResultEntry=agentDot1xPortAuthHistoryResultEntry, Dot1xSessionTerminationAction=Dot1xSessionTerminationAction, agentDot1xMonitorModeConfigGroup=agentDot1xMonitorModeConfigGroup, agentDot1xPortAuthHistoryResultClearEntry=agentDot1xPortAuthHistoryResultClearEntry, agentDot1xAuthHistoryResultAuthStatus=agentDot1xAuthHistoryResultAuthStatus, agentDot1xGuestVlanPeriod=agentDot1xGuestVlanPeriod, agentDot1xClientUserName=agentDot1xClientUserName, agentDot1xAuthHistoryResultMacAddress=agentDot1xAuthHistoryResultMacAddress, agentDot1xEapolFloodMode=agentDot1xEapolFloodMode, agentDot1xClientConfigEntry=agentDot1xClientConfigEntry, agentDot1xClientSessionTime=agentDot1xClientSessionTime, agentDot1xUnauthenticatedVlan=agentDot1xUnauthenticatedVlan, agentDot1xClientSessionTimeout=agentDot1xClientSessionTimeout, agentDot1xNonMonitorModeClients=agentDot1xNonMonitorModeClients, agentDot1xPortVlanAssigned=agentDot1xPortVlanAssigned, agentDot1xAuthHistoryResultFilterID=agentDot1xAuthHistoryResultFilterID, agentDot1xAuthHistoryResultReasonCode=agentDot1xAuthHistoryResultReasonCode, agentDot1xPortMABenabled=agentDot1xPortMABenabled, agentDot1xAuthHistoryResultsClear=agentDot1xAuthHistoryResultsClear, agentDot1xPortControlMode=agentDot1xPortControlMode, agentDot1xPortAuthHistoryResultsClear=agentDot1xPortAuthHistoryResultsClear, agentDot1xPortAuthHistoryResultClearTable=agentDot1xPortAuthHistoryResultClearTable, agentDot1xGuestVlanId=agentDot1xGuestVlanId, agentDot1xAuthHistoryResultAge=agentDot1xAuthHistoryResultAge, agentDot1xClientConfigGroup=agentDot1xClientConfigGroup, agentDot1xDynamicVlanCreationMode=agentDot1xDynamicVlanCreationMode, agentDot1xPortConfigTable=agentDot1xPortConfigTable, Dot1xPortControlMode=Dot1xPortControlMode, fastPathdot1xAdvanced=fastPathdot1xAdvanced, agentDot1xAuthHistoryResultsGroup=agentDot1xAuthHistoryResultsGroup, agentDot1xClientTerminationAction=agentDot1xClientTerminationAction, agentDot1xAuthHistoryResultVlanAssignedType=agentDot1xAuthHistoryResultVlanAssignedType, agentDot1xEnhancementConfigGroup=agentDot1xEnhancementConfigGroup, agentDot1xPortVlanAssignedReason=agentDot1xPortVlanAssignedReason, agentDot1xAuthHistoryResultVlanId=agentDot1xAuthHistoryResultVlanId, agentDot1xMaxUsers=agentDot1xMaxUsers, agentDot1xClientAuthPAEstate=agentDot1xClientAuthPAEstate, agentDot1xPortAuthHistoryResultTable=agentDot1xPortAuthHistoryResultTable, agentDot1xClientMacAddress=agentDot1xClientMacAddress, agentDot1xPortConfigGroup=agentDot1xPortConfigGroup, agentDot1xAuthHistoryResultAccessStatus=agentDot1xAuthHistoryResultAccessStatus, agentDot1xClientVlanAssigned=agentDot1xClientVlanAssigned, agentDot1xPortConfigEntry=agentDot1xPortConfigEntry, agentDot1xPortMABenabledOperational=agentDot1xPortMABenabledOperational, agentDot1xAuthHistoryResultIndex=agentDot1xAuthHistoryResultIndex, agentDot1xAuthHistoryResultIfIndex=agentDot1xAuthHistoryResultIfIndex, agentDot1xAuthHistoryResultTimeStamp=agentDot1xAuthHistoryResultTimeStamp, agentDot1xClientConfigTable=agentDot1xClientConfigTable, agentDot1xInterface=agentDot1xInterface, agentDot1xPortSessionTimeout=agentDot1xPortSessionTimeout, agentDot1xClientBackendState=agentDot1xClientBackendState, agentDot1xMonitorModeEnabled=agentDot1xMonitorModeEnabled, agentDot1xRadiusVlanAssignment=agentDot1xRadiusVlanAssignment, agentDot1xAuthHistoryResultVlanAssigned=agentDot1xAuthHistoryResultVlanAssigned, agentDot1xLogicalPort=agentDot1xLogicalPort, agentDot1xClientFilterID=agentDot1xClientFilterID, agentDot1xClientVlanAssignedReason=agentDot1xClientVlanAssignedReason)
