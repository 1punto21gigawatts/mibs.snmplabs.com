#
# PySNMP MIB module AtiSwitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AtiSwitch-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, Counter64, ModuleIdentity, Counter32, Integer32, MibIdentifier, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, enterprises, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Counter64", "ModuleIdentity", "Counter32", "Integer32", "MibIdentifier", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "enterprises", "Gauge32", "NotificationType")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
atiSwitchMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 15))
if mibBuilder.loadTexts: atiSwitchMib.setLastUpdated('0205010000Z')
if mibBuilder.loadTexts: atiSwitchMib.setOrganization('Allied Telesyn International')
if mibBuilder.loadTexts: atiSwitchMib.setContactInfo('Allied Telesyn International')
if mibBuilder.loadTexts: atiSwitchMib.setDescription('Private MIB for ATI next generation layer 2 switches. This MIB can be used in Windows and UNIX environment')
class MACAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

atiProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
swhub = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4))
at_8024 = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 66)).setLabel("at-8024")
at_8024GB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 67)).setLabel("at-8024GB")
at_8024M = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 78)).setLabel("at-8024M")
at_8016F_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 79)).setLabel("at-8016F-SC")
at_8026FC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 80)).setLabel("at-8026FC")
at_8016F_MT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 82)).setLabel("at-8016F-MT")
at_8012M = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 86)).setLabel("at-8012M")
at_8088_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 87)).setLabel("at-8088-SC")
at_8088_MT = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 88)).setLabel("at-8088-MT")
at_8026T = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 4, 89)).setLabel("at-8026T")
atiswitchSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1))
atiswitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 2))
atiswitchPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 3))
atiswitchVlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 4))
atiswitchEthernetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 5))
atiswitchEthPortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 6))
atiswitchFwdVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 7))
atiswitchStaticMACGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 8))
atiswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 9))
atiswitchProductType = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20))).clone(namedValues=NamedValues(("at8024", 1), ("at8024GB", 2), ("at8024M", 3), ("at8016F-SC", 4), ("at8016F-MT", 5), ("at8026FC", 6), ("at8012M", 7), ("at8088-SC", 8), ("at8088-MT", 9), ("at8026T", 10), ("other", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchProductType.setStatus('current')
if mibBuilder.loadTexts: atiswitchProductType.setDescription('This object identifies the Product Type.')
atiswitchBasePortCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchBasePortCount.setStatus('current')
if mibBuilder.loadTexts: atiswitchBasePortCount.setDescription('This object determines the number of base Ethernet ports in the switch.')
atiswitchUplinkPortCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchUplinkPortCount.setStatus('current')
if mibBuilder.loadTexts: atiswitchUplinkPortCount.setDescription('This object determines the total number of uplink ports available in the switch.')
atiswitchReset = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchnoreset", 1), ("switchreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchReset.setStatus('current')
if mibBuilder.loadTexts: atiswitchReset.setDescription('Setting this object to switchreset will cause the switch to perform a soft reboot. Setting this object to switch_no_reset will have no effect.')
atiswitchUplink1Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchUplink1Type.setStatus('current')
if mibBuilder.loadTexts: atiswitchUplink1Type.setDescription('This object returns the MDA (Media Dependant Adapter) type of Uplink port 1. If there is no uplink installed it will return a value of none.')
atiswitchUplink2Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchUplink2Type.setStatus('current')
if mibBuilder.loadTexts: atiswitchUplink2Type.setDescription('This object returns the MDA (Media Dependant Adapter) type of Uplink port 2. If there is no uplink installed it will return a value of none.')
atiswitchSwGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 7))
atiswitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8))
atiswitchNMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9))
atiswitchSw = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchSw.setStatus('current')
if mibBuilder.loadTexts: atiswitchSw.setDescription('Identifies the name of the software running in the switch.')
atiswitchSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchSwVersion.setStatus('current')
if mibBuilder.loadTexts: atiswitchSwVersion.setDescription('Identifies the version number of the software running in the switch.')
atiswitchConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchConfigIpAddress.setStatus('current')
if mibBuilder.loadTexts: atiswitchConfigIpAddress.setDescription('IP address of the switch.')
atiswitchConfigSubMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchConfigSubMask.setStatus('current')
if mibBuilder.loadTexts: atiswitchConfigSubMask.setDescription('Subnet mask of the switch.')
atiswitchConfigRouting = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchConfigRouting.setStatus('current')
if mibBuilder.loadTexts: atiswitchConfigRouting.setDescription('Gateway address for the switch.')
atiswitchIPAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fromDhcp", 1), ("fromBootp", 2), ("fromStatic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchIPAddressStatus.setStatus('current')
if mibBuilder.loadTexts: atiswitchIPAddressStatus.setDescription('The IP Address can be obtained/configured through different ways - through DHCP, through Bootp or through a static configuration. This object specifies how the IP address, subnet mask and the gateway address currently used by the switch was configured/obtained.')
atiswitchDNServer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchDNServer.setStatus('current')
if mibBuilder.loadTexts: atiswitchDNServer.setDescription('This attribute specifies the DNS server address for the switch.')
atiswitchDefaultDomainName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchDefaultDomainName.setStatus('current')
if mibBuilder.loadTexts: atiswitchDefaultDomainName.setDescription('This attribute specifies the default Domain Name for the switch.')
atiswitchNwMgrTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1), )
if mibBuilder.loadTexts: atiswitchNwMgrTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchNwMgrTable.setDescription('This table contains the list of IP Addresses (management stations) to which SNMP Traps are sent. The maximum number of entries in the table is 4.')
atiswitchNwMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchNwMgrIndex"))
if mibBuilder.loadTexts: atiswitchNwMgrEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchNwMgrEntry.setDescription('An entry of atiswitchNwMgrTable specifying each management station to which a SNMP trap is sent.')
atiswitchNwMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchNwMgrIndex.setStatus('current')
if mibBuilder.loadTexts: atiswitchNwMgrIndex.setDescription('The index for the management station entry.')
atiswitchNwMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 1, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchNwMgrIpAddr.setStatus('current')
if mibBuilder.loadTexts: atiswitchNwMgrIpAddr.setDescription('The IP address of the management station.')
atiswitchMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2), ("both", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchMirrorState.setStatus('current')
if mibBuilder.loadTexts: atiswitchMirrorState.setDescription('If the attribute is set to one of the first three values, then port mirroring is enabled. If disabled, port operation works nomally. No traffic gets mirrored.')
atiswitchMirroringSourcePorts = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchMirroringSourcePorts.setStatus('current')
if mibBuilder.loadTexts: atiswitchMirroringSourcePorts.setDescription("This attribute identifies the source ports which are mirrored. All packets received, transmitted or both on these ports gets mirrored on to the destination port. It's value can be a single port number or a contiguous range of ports (eg. 1-5). This attribute will have an empty string when port mirroring is disabled.")
atiswitchMirroringDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchMirroringDestinationPort.setStatus('current')
if mibBuilder.loadTexts: atiswitchMirroringDestinationPort.setDescription('This attribute identifies the destination port number which mirrors the source port. All packets received, transmitted or both on the source port gets mirrored on to this port. This attribute will have the value 0 when port mirroring is disabled.')
atiswitchSecurityConfig = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledLearningLocked", 2), ("enabledLimited", 3), ("enabledSecured", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchSecurityConfig.setStatus('current')
if mibBuilder.loadTexts: atiswitchSecurityConfig.setDescription("This attribute is a port security configuration object. Setting the value to 'disabled' will allow the switch to learn new MAC addresses as they come in. In enabledLearningLocked mode, the device will stop learning new addresses and the old addresses that the device has learned will be locked. In enabledLimited mode, only a limited number of addresses will be learned. In enabledSecured mode, the administrator is responsible for entering the MAC addresses manually. By doing this, the administrator knows exactly who is connecting to the switch.")
atiswitchSecurityAction = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sendTrapOnly", 1), ("disablePortOnly", 2), ("disablePortAndSendTrap", 3), ("doNothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchSecurityAction.setStatus('current')
if mibBuilder.loadTexts: atiswitchSecurityAction.setDescription('This attribute identifies the security action taken in case of an intruder detected.')
atiswitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1), )
if mibBuilder.loadTexts: atiswitchPortTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortTable.setDescription('This table contains all the type of devices supported by this MIB.')
atiswitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchPortNumber"))
if mibBuilder.loadTexts: atiswitchPortEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortEntry.setDescription('The device type in the DeviceTable.')
atiswitchPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortNumber.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortNumber.setDescription(' The object identifies the port of the switch.')
atiswitchPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortName.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortName.setDescription('This attribute associates a user defined string name with the port.')
atiswitchPortAutosenseOrHalfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portAutoSense", 1), ("forceHalfDuplex-10M", 2), ("forceHalfDuplex-100M", 3), ("forceFullDuplex-10M", 4), ("forceFullDuplex-100M", 5), ("forceHalfDuplex-1G", 6), ("forceFullDuplex-1G", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortAutosenseOrHalfDuplex.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortAutosenseOrHalfDuplex.setDescription('This object allows an admin request to configure whether this port is set to autosense or one of the different speed/duplex combinations.')
atiswitchPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortLinkState.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortLinkState.setDescription('This attribute allows an admin request to read the status of link state on this port.')
atiswitchPortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autosense", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortDuplexStatus.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortDuplexStatus.setDescription('This object allows an admin request to read the status of Duplex on this port.')
atiswitchPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenMBits", 1), ("hundredMBits", 2), ("gigaBits", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPortSpeed.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortSpeed.setDescription('This attribute allows an admin request to read the speed of this port.')
atiswitchPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("blocking", 3), ("listening", 4), ("learning", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortState.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortState.setDescription('This attribute allows an admin request to disable or enable communications on this port. It also responds with the status of the port. Except enabled(1) and disabled(2), all values are read-only status.')
atiswitchPortFlowControlConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("transmit-only", 2), ("receive-only", 3), ("transmit-and-receive", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortFlowControlConfig.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortFlowControlConfig.setDescription('This per port attribute determines whether the port has flow control enabled or not. By default, flow control is disabled.')
atiswitchPortBackPressureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortBackPressureConfig.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortBackPressureConfig.setDescription('This per-port attribute describes whether the port identified has Back Pressure Enabled or not.By default, Back Pressure is Disabled.')
atiswitchPortVlanTagPriorityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use-vlan-priority", 1), ("override-vlan-priority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortVlanTagPriorityConfig.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortVlanTagPriorityConfig.setDescription('This per-port attribute allows the configuration of the Tag Priority to be Override or use the Tag Priority. By Default, all ports use Vlan Tag priority.')
atiswitchPortCOSPriorityConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortCOSPriorityConfig.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortCOSPriorityConfig.setDescription("This per-port attribute allows the configuration of the priority of the port. There are 8 priorities as per the IEEE standard with 0 being the lowest priority and 7 the highest. In a switch environment, ports with higher priority has it's to and from traffic given higher priority when compared with those with lower priority.")
atiswitchPortBroadcastConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard-broadcasts", 1), ("do-not-discard-broadcasts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortBroadcastConfig.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortBroadcastConfig.setDescription('This per-port attribute determines if broadcast packets received should be discarded or processed. By default, they will be processed.')
atiswitchPortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("no-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchPortReset.setStatus('current')
if mibBuilder.loadTexts: atiswitchPortReset.setDescription("This per-port attribute resets the port to the original default configuration.This can prove useful in situations where a port is experiencing a problem making a valid connection to the end node. Setting the value to 'no-reset' has no effect.")
atiswitchBasicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1), )
if mibBuilder.loadTexts: atiswitchBasicVlanTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchBasicVlanTable.setDescription('Table of Virtual LANs configured in the switch.')
atiswitchBasicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchBeVlanIndex"))
if mibBuilder.loadTexts: atiswitchBasicVlanEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchBasicVlanEntry.setDescription('An entry describing the configured Virtual LAN.')
atiswitchBeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchBeVlanIndex.setStatus('current')
if mibBuilder.loadTexts: atiswitchBeVlanIndex.setDescription('Index of the Virtual LAN entry. Maximum number of Virtual LANs in 8024/8024GB is 32.')
atiswitchBeVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanName.setStatus('current')
if mibBuilder.loadTexts: atiswitchBeVlanName.setDescription('Name of the Virtual LAN.')
atiswitchBeVlanTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanTagId.setStatus('current')
if mibBuilder.loadTexts: atiswitchBeVlanTagId.setDescription('VId of the Virtual LAN as stored in the tag information header in accordance with 802.1q specification.')
atiswitchBeVlanTaggedPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanTaggedPortMask.setStatus('current')
if mibBuilder.loadTexts: atiswitchBeVlanTaggedPortMask.setDescription('List of tagged ports in the Virtual LAN.')
atiswitchBeVlanUntaggedPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanUntaggedPortMask.setStatus('current')
if mibBuilder.loadTexts: atiswitchBeVlanUntaggedPortMask.setDescription('List of untagged ports in the Virtual LAN.')
atiswitchBeVlanMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanMirrorPort.setStatus('current')
if mibBuilder.loadTexts: atiswitchBeVlanMirrorPort.setDescription('Port number on which all Virtual LAN traffic is mirrored on. By default the value is 0 indicating no port mirroring.')
atiswitchBeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atiswitchBeVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: atiswitchBeVlanRowStatus.setDescription('Indicates the status of this entry. This object is used to create, modify or delete Virtual LAN entries as per the RowStatus specification of SMIv2. There are two ways to create a Virtual LAN entry - CreateAndGo (Used when all objects of the entry are set at one go) and CreateAndWait (Used when individual objects are set independently). CreateAndGo method: Assign values to all objects of the Virtual LAN entry. Set this object to CreateAndGo(4). CreateAndWait method: Set this object to CreateAndWait(5). Set individual object entries. When all other entries are set, set this object to Active(1). To delete a Virtual LAN entry, set this object to destroy(6).')
atiswitchPort2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2), )
if mibBuilder.loadTexts: atiswitchPort2VlanTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchPort2VlanTable.setDescription('Table of per port Virtual LAN configuration.')
atiswitchPort2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchPvPortNumber"))
if mibBuilder.loadTexts: atiswitchPort2VlanEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchPort2VlanEntry.setDescription('An entry in the table, containing per port Virtual LAN information.')
atiswitchPvPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPvPortNumber.setStatus('current')
if mibBuilder.loadTexts: atiswitchPvPortNumber.setDescription('This object identifies the port on the switch.')
atiswitchPvVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchPvVlanName.setStatus('current')
if mibBuilder.loadTexts: atiswitchPvVlanName.setDescription('This object identifies the Virtual LAN name to which the port belongs to.')
atiswitchVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user-configured", 1), ("multiple", 2), ("multiple-802-1Q", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchVlanMode.setStatus('current')
if mibBuilder.loadTexts: atiswitchVlanMode.setDescription("This object specifies the current VLAN mode. Setting this object to 'user-configured (1)' allows the manager to create, delete and modify VLANs using 'atiswitchBasicVlanTable'. Setting this object to 'multiple (2)' or 'multiple-802-1Q (3)'will result in the creation of predefined VLANs. Setting these values requires that the object 'atiswitchVlanUplinkVlanPort' also be set in the same SET request. Note that SET operations on any object under 'atiswitchBasicVlanTable' are not allowed in these two modes.")
atiswitchVlanUplinkVlanPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchVlanUplinkVlanPort.setStatus('current')
if mibBuilder.loadTexts: atiswitchVlanUplinkVlanPort.setDescription("This object specifies the Uplink VLAN Port ID used while creating pre-configured VLANs. This object can be set to any valid Port ID present on the switch. Note that a SET operation on the object 'atiswitchVlanMode' to the value 'multiple (2)' or 'multiple-802-1Q (3)' should always be accompanied by a SET operation on this object in the same SET request. By default this object is set to 0 when 'atiswitchVlanMode' is set to 'user-configured (1)'.")
atiswitchEthMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1))
atiswitchEthErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2))
atiswitchEthMonRxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonRxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonRxGoodFrames.setDescription('The total number of good frames received on the switch.')
atiswitchEthMonTxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonTxGoodFrames.setDescription('The total number of good frames that has been transimitted by the switch.')
atiswitchEthMonTxTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxTotalBytes.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonTxTotalBytes.setDescription('The total number of bytes transimitted from the switch.')
atiswitchEthMonTxDeferred = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxDeferred.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonTxDeferred.setDescription('The number of times a transmission attempt failed because of the medium being busy.')
atiswitchEthMonTxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxCollisions.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonTxCollisions.setDescription('The total number of collisions detected while transmitting from the switch.')
atiswitchEthMonTxBroadcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonTxBroadcastFrames.setDescription('The total number of Transmit Broadcast Frames while switching.')
atiswitchEthMonTxMulticastFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonTxMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonTxMulticastFrames.setDescription('The total number of Transmit Multicast frames while switching.')
atiswitchEthMonRxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthMonRxOverruns.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthMonRxOverruns.setDescription('The total number of Received Overrun Frames while switching.')
atiswitchEthErrorCRC = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorCRC.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthErrorCRC.setDescription('The total number of CRC errors on received packets.')
atiswitchEthErrorAlignment = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorAlignment.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthErrorAlignment.setDescription('The total number of packets received that has alignment errors.')
atiswitchEthErrorRxBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorRxBadFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthErrorRxBadFrames.setDescription('The total number of bad frames received.')
atiswitchEthErrorLateCollision = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorLateCollision.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthErrorLateCollision.setDescription('The number of times collision was detected in the switch.')
atiswitchEthErrorTxTotal = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 15, 5, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthErrorTxTotal.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthErrorTxTotal.setDescription('Total number of errors resulting from transmit operations.')
atiswitchEthPortMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1))
atiswitchEthPortError = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2))
atiswitchEthPortMonTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1), )
if mibBuilder.loadTexts: atiswitchEthPortMonTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonTable.setDescription('A list of statistics entry for each port.')
atiswitchEthPortMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchEthPortMonId"))
if mibBuilder.loadTexts: atiswitchEthPortMonEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonEntry.setDescription('A colletion of statistics kept for a particular port.')
atiswitchEthPortMonId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonId.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonId.setDescription('Port number.')
atiswitchEthPortMonRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonRxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonRxGoodFrames.setDescription('The total number of good frames received on this port.')
atiswitchEthPortMonTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonTxGoodFrames.setDescription('The total number of good frames transmitted from this port.')
atiswitchEthPortMonTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxTotalBytes.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonTxTotalBytes.setDescription('The total number of bytes transmitted from this port.')
atiswitchEthPortMonTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxDeferred.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonTxDeferred.setDescription('This is the count of first time Transmission attempt which failed on an interface due to medium being busy.')
atiswitchEthPortMonTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxCollisions.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonTxCollisions.setDescription('The total number of collisions while switching on an interface.')
atiswitchEthPortMonTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonTxBroadcastFrames.setDescription('The total number of broadcast frames transmitted from this port.')
atiswitchEthPortMonTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonTxMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonTxMulticastFrames.setDescription('The total number of multicast frames transmitted from this port.')
atiswitchEthPortMonRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortMonRxOverruns.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortMonRxOverruns.setDescription('The total number of over sized frames received on this port.')
atiswitchEthPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1), )
if mibBuilder.loadTexts: atiswitchEthPortErrorTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortErrorTable.setDescription('A list of statistics entries.')
atiswitchEthPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchEthPortErrorId"))
if mibBuilder.loadTexts: atiswitchEthPortErrorEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortErrorEntry.setDescription('A collection of statistics kept for a particular port.')
atiswitchEthPortErrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortErrorId.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortErrorId.setDescription('Port number.')
atiswitchEthPortErrorRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortErrorRxBadFrames.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortErrorRxBadFrames.setDescription('Total number of bad Frames received on this port.')
atiswitchEthPortErrorTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchEthPortErrorTxTotal.setStatus('current')
if mibBuilder.loadTexts: atiswitchEthPortErrorTxTotal.setDescription('Total number of errors resulting from transmit operations.')
atiswitchFwdVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1), )
if mibBuilder.loadTexts: atiswitchFwdVlanTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchFwdVlanTable.setDescription('This table associates MAC addresses (as stored in the forwarding table of the switch) to the Virtual LAN to which it belongs.')
atiswitchFwdVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchFwdVlanMACAddr"))
if mibBuilder.loadTexts: atiswitchFwdVlanEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchFwdVlanEntry.setDescription('Entry in the atiswitchFwdVlanTable.')
atiswitchFwdVlanMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 1), MACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanMACAddr.setStatus('current')
if mibBuilder.loadTexts: atiswitchFwdVlanMACAddr.setDescription('A MAC address from the forwarding table of the switch.')
atiswitchFwdVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: atiswitchFwdVlanVlanId.setDescription('The Virtual LAN to which atiswitchFwdVlanMACAddr belongs to.')
atiswitchFwdVlanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanAge.setStatus('current')
if mibBuilder.loadTexts: atiswitchFwdVlanAge.setDescription('Current age of the MAC Address in the forwarding table - 0 indicates it is still active, 1 indicates that the address has aged out.')
atiswitchFwdVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanStatus.setStatus('current')
if mibBuilder.loadTexts: atiswitchFwdVlanStatus.setDescription('Status of the MAC address - inactive (1): It is no longer valid e.g, it was learned and has since aged out, but has not yet been flushed from the table, active (2): Learned or statically assigned and currently in use and other (3): Neither of the other two.')
atiswitchFwdVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atiswitchFwdVlanPort.setStatus('current')
if mibBuilder.loadTexts: atiswitchFwdVlanPort.setDescription('Either the value 0, or the port number of the port on which a frame having a source address equal to the atiswitchFwdVlanMACAddr has been seen. A value of 0 indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address.')
atiswitchStaticMACTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1), )
if mibBuilder.loadTexts: atiswitchStaticMACTable.setStatus('current')
if mibBuilder.loadTexts: atiswitchStaticMACTable.setDescription('This tables lists MAC addresses lexicographically from the static table which binds MAC address to ports on the switch.')
atiswitchStaticMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1), ).setIndexNames((0, "AtiSwitch-MIB", "atiswitchStaticMACAddress"))
if mibBuilder.loadTexts: atiswitchStaticMACEntry.setStatus('current')
if mibBuilder.loadTexts: atiswitchStaticMACEntry.setDescription('Entry in the atiswitchStaticMACTable.')
atiswitchStaticMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1, 1), MACAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchStaticMACAddress.setStatus('current')
if mibBuilder.loadTexts: atiswitchStaticMACAddress.setDescription('This object identifies the MAC address associated with Static MAC table.')
atiswitchStaticMACPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchStaticMACPortNumber.setStatus('current')
if mibBuilder.loadTexts: atiswitchStaticMACPortNumber.setDescription('This object identifies the port for which the MAC address is associated statically in the MAC Table.')
atiswitchStaticMACEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 15, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atiswitchStaticMACEntryStatus.setStatus('current')
if mibBuilder.loadTexts: atiswitchStaticMACEntryStatus.setDescription('The status of this entry. The meanings of the values are: valid(1) : This entry is valid. invalid(2) : This entry is no longer valid, but has not yet been flushed from the table.')
atiswitchFanStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 15, 9, 1))
if mibBuilder.loadTexts: atiswitchFanStopTrap.setStatus('current')
if mibBuilder.loadTexts: atiswitchFanStopTrap.setDescription('Trap sent when an error in the fan operation is detected.')
atiswitchTemperatureAbnormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 15, 9, 2))
if mibBuilder.loadTexts: atiswitchTemperatureAbnormalTrap.setStatus('current')
if mibBuilder.loadTexts: atiswitchTemperatureAbnormalTrap.setDescription('Trap sent when the temperature of the switch is abnormal.')
mibBuilder.exportSymbols("AtiSwitch-MIB", atiswitchEthMonStats=atiswitchEthMonStats, atiswitchFwdVlanGroup=atiswitchFwdVlanGroup, atiswitchEthPortMonId=atiswitchEthPortMonId, atiswitchBeVlanRowStatus=atiswitchBeVlanRowStatus, atiswitchVlanConfigGroup=atiswitchVlanConfigGroup, mibObject=mibObject, atiswitchSysGroup=atiswitchSysGroup, atiswitchProductType=atiswitchProductType, atiswitchEthPortMonStats=atiswitchEthPortMonStats, atiswitchFwdVlanPort=atiswitchFwdVlanPort, at_8026FC=at_8026FC, atiswitchDefaultDomainName=atiswitchDefaultDomainName, atiswitchEthMonTxTotalBytes=atiswitchEthMonTxTotalBytes, atiswitchEthErrorAlignment=atiswitchEthErrorAlignment, atiswitchEthPortMonTxDeferred=atiswitchEthPortMonTxDeferred, atiswitchEthErrorTxTotal=atiswitchEthErrorTxTotal, atiswitchEthPortMonRxGoodFrames=atiswitchEthPortMonRxGoodFrames, atiswitchTraps=atiswitchTraps, atiswitchEthMonTxCollisions=atiswitchEthMonTxCollisions, atiswitchEthPortErrorTxTotal=atiswitchEthPortErrorTxTotal, atiswitchBeVlanTaggedPortMask=atiswitchBeVlanTaggedPortMask, atiswitchPortLinkState=atiswitchPortLinkState, atiswitchStaticMACTable=atiswitchStaticMACTable, at_8012M=at_8012M, atiswitchPvPortNumber=atiswitchPvPortNumber, atiswitchPortTable=atiswitchPortTable, atiswitchEthMonTxMulticastFrames=atiswitchEthMonTxMulticastFrames, atiswitchReset=atiswitchReset, atiswitchEthPortMonEntry=atiswitchEthPortMonEntry, atiswitchUplinkPortCount=atiswitchUplinkPortCount, atiswitchSecurityAction=atiswitchSecurityAction, atiswitchBasicVlanEntry=atiswitchBasicVlanEntry, atiSwitchMib=atiSwitchMib, at_8024=at_8024, atiswitchBeVlanUntaggedPortMask=atiswitchBeVlanUntaggedPortMask, atiswitchBasicVlanTable=atiswitchBasicVlanTable, atiswitchBeVlanName=atiswitchBeVlanName, Timeout=Timeout, atiswitchConfigRouting=atiswitchConfigRouting, atiswitchBeVlanMirrorPort=atiswitchBeVlanMirrorPort, atiswitchConfigIpAddress=atiswitchConfigIpAddress, atiswitchFwdVlanStatus=atiswitchFwdVlanStatus, atiswitchFwdVlanTable=atiswitchFwdVlanTable, atiswitchPortDuplexStatus=atiswitchPortDuplexStatus, atiswitchNwMgrEntry=atiswitchNwMgrEntry, atiswitchEthernetStatsGroup=atiswitchEthernetStatsGroup, atiswitchEthErrorLateCollision=atiswitchEthErrorLateCollision, atiswitchPortAutosenseOrHalfDuplex=atiswitchPortAutosenseOrHalfDuplex, atiswitchEthMonTxGoodFrames=atiswitchEthMonTxGoodFrames, atiswitchVlanUplinkVlanPort=atiswitchVlanUplinkVlanPort, atiswitchConfigGroup=atiswitchConfigGroup, atiswitchPortName=atiswitchPortName, atiswitchPortNumber=atiswitchPortNumber, atiswitchPortSpeed=atiswitchPortSpeed, atiswitchFwdVlanMACAddr=atiswitchFwdVlanMACAddr, atiswitchPort2VlanEntry=atiswitchPort2VlanEntry, atiswitchEthErrorCRC=atiswitchEthErrorCRC, atiswitchIPAddressStatus=atiswitchIPAddressStatus, atiswitchConfigSubMask=atiswitchConfigSubMask, atiswitchEthMonRxOverruns=atiswitchEthMonRxOverruns, atiswitchEthPortErrorId=atiswitchEthPortErrorId, MACAddress=MACAddress, atiswitchNwMgrIpAddr=atiswitchNwMgrIpAddr, atiswitchEthPortMonRxOverruns=atiswitchEthPortMonRxOverruns, BridgeId=BridgeId, atiswitchPortVlanTagPriorityConfig=atiswitchPortVlanTagPriorityConfig, atiswitchUplink1Type=atiswitchUplink1Type, atiswitchBeVlanIndex=atiswitchBeVlanIndex, atiswitchEthPortMonTxBroadcastFrames=atiswitchEthPortMonTxBroadcastFrames, atiswitchTemperatureAbnormalTrap=atiswitchTemperatureAbnormalTrap, atiswitchNwMgrIndex=atiswitchNwMgrIndex, atiswitchPortState=atiswitchPortState, at_8088_SC=at_8088_SC, atiswitchDNServer=atiswitchDNServer, alliedTelesyn=alliedTelesyn, atiswitchEthErrorRxBadFrames=atiswitchEthErrorRxBadFrames, at_8016F_SC=at_8016F_SC, atiswitchEthPortMonTxCollisions=atiswitchEthPortMonTxCollisions, atiswitchBeVlanTagId=atiswitchBeVlanTagId, atiswitchMirroringDestinationPort=atiswitchMirroringDestinationPort, atiswitchEthMonTxBroadcastFrames=atiswitchEthMonTxBroadcastFrames, at_8026T=at_8026T, atiswitchBasePortCount=atiswitchBasePortCount, PYSNMP_MODULE_ID=atiSwitchMib, atiswitchPortEntry=atiswitchPortEntry, atiswitchEthMonRxGoodFrames=atiswitchEthMonRxGoodFrames, atiswitchPvVlanName=atiswitchPvVlanName, atiswitchVlanMode=atiswitchVlanMode, atiswitchPortBackPressureConfig=atiswitchPortBackPressureConfig, atiswitchEthPortErrorEntry=atiswitchEthPortErrorEntry, atiswitchStaticMACEntryStatus=atiswitchStaticMACEntryStatus, atiswitchStaticMACEntry=atiswitchStaticMACEntry, atiswitchPortGroup=atiswitchPortGroup, atiswitchEthPortErrorTable=atiswitchEthPortErrorTable, atiswitchPortFlowControlConfig=atiswitchPortFlowControlConfig, atiswitchPort2VlanTable=atiswitchPort2VlanTable, atiswitchFwdVlanEntry=atiswitchFwdVlanEntry, atiswitchMirroringSourcePorts=atiswitchMirroringSourcePorts, atiswitchStaticMACPortNumber=atiswitchStaticMACPortNumber, atiswitchStaticMACGroup=atiswitchStaticMACGroup, atiswitchSw=atiswitchSw, atiswitchEthPortMonTable=atiswitchEthPortMonTable, atiswitchFwdVlanVlanId=atiswitchFwdVlanVlanId, atiswitchSwGroup=atiswitchSwGroup, atiswitchEthMonTxDeferred=atiswitchEthMonTxDeferred, atiswitchPortBroadcastConfig=atiswitchPortBroadcastConfig, at_8024GB=at_8024GB, atiswitchFanStopTrap=atiswitchFanStopTrap, atiswitchSwVersion=atiswitchSwVersion, atiswitchEthPortErrorRxBadFrames=atiswitchEthPortErrorRxBadFrames, atiswitchEthErrorStats=atiswitchEthErrorStats, atiswitchEthPortMonTxGoodFrames=atiswitchEthPortMonTxGoodFrames, atiswitchEthPortMonTxMulticastFrames=atiswitchEthPortMonTxMulticastFrames, atiswitchSecurityConfig=atiswitchSecurityConfig, swhub=swhub, atiswitchPortCOSPriorityConfig=atiswitchPortCOSPriorityConfig, atiswitchNwMgrTable=atiswitchNwMgrTable, atiswitchMirrorState=atiswitchMirrorState, atiProduct=atiProduct, atiswitchStaticMACAddress=atiswitchStaticMACAddress, atiswitchEthPortMonTxTotalBytes=atiswitchEthPortMonTxTotalBytes, at_8016F_MT=at_8016F_MT, at_8024M=at_8024M, atiswitchEthPortError=atiswitchEthPortError, atiswitchIpGroup=atiswitchIpGroup, atiswitchFwdVlanAge=atiswitchFwdVlanAge, atiswitchEthPortStatsGroup=atiswitchEthPortStatsGroup, at_8088_MT=at_8088_MT, atiswitchNMGroup=atiswitchNMGroup, atiswitchPortReset=atiswitchPortReset, atiswitchUplink2Type=atiswitchUplink2Type)
