#
# PySNMP MIB module F10-FPSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-FPSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, ObjectIdentity, NotificationType, Gauge32, Integer32, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, iso, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "ObjectIdentity", "NotificationType", "Gauge32", "Integer32", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "iso", "Counter64", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
f10FpStatsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 16))
f10FpStatsMib.setRevisions(('2013-02-20 12:00', '2011-03-22 12:48',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10FpStatsMib.setRevisionsDescriptions(('Added fpCpuDataPlaneCOSTable for Rx and Tx COS queues in CPU data plane.', 'Initial version of this mib.',))
if mibBuilder.loadTexts: f10FpStatsMib.setLastUpdated('201302201200Z')
if mibBuilder.loadTexts: f10FpStatsMib.setOrganization('Dell Inc')
if mibBuilder.loadTexts: f10FpStatsMib.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: f10FpStatsMib.setDescription('Dell Networking OS forward plane statistics mib.')
f10FpStatsObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1))
fpStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1))
fpCpuDataPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1), )
if mibBuilder.loadTexts: fpCpuDataPlaneTable.setStatus('current')
if mibBuilder.loadTexts: fpCpuDataPlaneTable.setDescription('The data plane statistics table contains the data plane statistics of a stack unit/line card which includes the received, dropped statistics and per COS transmission and reception statistics . In case of multi CPU platforms, this table contains the data plane statistics for each cpu. The table index will represent the CPUs in order as {CP cpus, RP cpus, LP cpus}.')
fpCpuDataPlaneStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"))
if mibBuilder.loadTexts: fpCpuDataPlaneStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fpCpuDataPlaneStatsEntry.setDescription('Data plane statistics')
fpStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: fpStackUnitIndex.setStatus('current')
if mibBuilder.loadTexts: fpStackUnitIndex.setDescription('Stack unit number or line card number.')
fpRxHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxHandle.setStatus('current')
if mibBuilder.loadTexts: fpRxHandle.setDescription('Reception Handle')
fpNoMhdr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpNoMhdr.setStatus('current')
if mibBuilder.loadTexts: fpNoMhdr.setDescription('Number of Message header')
fpNoMBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpNoMBuf.setStatus('current')
if mibBuilder.loadTexts: fpNoMBuf.setDescription('Number of Message buffer')
fpNoClus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpNoClus.setStatus('current')
if mibBuilder.loadTexts: fpNoClus.setDescription('Number of Clusters.')
fpRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRecvd.setStatus('current')
if mibBuilder.loadTexts: fpRecvd.setDescription('Received statistics.')
fpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDropped.setStatus('current')
if mibBuilder.loadTexts: fpDropped.setDescription('Dropped statistics.')
fpRecvToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRecvToNet.setStatus('current')
if mibBuilder.loadTexts: fpRecvToNet.setDescription('Received to network.')
fpRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxError.setStatus('current')
if mibBuilder.loadTexts: fpRxError.setDescription('Gives statistics about the reception error')
fpRxDatapathError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxDatapathError.setStatus('current')
if mibBuilder.loadTexts: fpRxDatapathError.setDescription('Statistics of reception data path error.')
fpRxPktCOS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS0.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS0.setDescription('Packets received in COS 0')
fpRxPktCOS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS1.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS1.setDescription('Packets received in COS 1')
fpRxPktCOS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS2.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS2.setDescription('Packets received in COS 2')
fpRxPktCOS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS3.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS3.setDescription('Packets received in COS 3')
fpRxPktCOS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS4.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS4.setDescription('Packets received in COS 4')
fpRxPktCOS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS5.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS5.setDescription('Packets received in COS 5')
fpRxPktCOS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS6.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS6.setDescription('Packets received in COS 6')
fpRxPktCOS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS7.setStatus('deprecated')
if mibBuilder.loadTexts: fpRxPktCOS7.setDescription('Packets received in COS 7')
fpRxPktUnit0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktUnit0.setStatus('current')
if mibBuilder.loadTexts: fpRxPktUnit0.setDescription('Packets received in Unit 0')
fpRxPktUnit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktUnit1.setStatus('current')
if mibBuilder.loadTexts: fpRxPktUnit1.setDescription('Packets received in Unit 1')
fpRxPktUnit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktUnit2.setStatus('current')
if mibBuilder.loadTexts: fpRxPktUnit2.setDescription('Packets received in Unit 2')
fpRxPktUnit3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktUnit3.setStatus('current')
if mibBuilder.loadTexts: fpRxPktUnit3.setDescription('Packets received in Unit 3')
fpTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTransmitted.setStatus('current')
if mibBuilder.loadTexts: fpTransmitted.setDescription('Transmitted statistics')
fpTxRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxRequested.setStatus('current')
if mibBuilder.loadTexts: fpTxRequested.setDescription('Transmission requested.')
fpNoTxDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpNoTxDesc.setStatus('current')
if mibBuilder.loadTexts: fpNoTxDesc.setDescription('Transmission descriptor')
fpTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxError.setStatus('current')
if mibBuilder.loadTexts: fpTxError.setDescription('Error in transmitted packets.')
fpTxReqTooLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxReqTooLarge.setStatus('current')
if mibBuilder.loadTexts: fpTxReqTooLarge.setDescription('Transmission requested too large.')
fpTxInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxInternalError.setStatus('current')
if mibBuilder.loadTexts: fpTxInternalError.setDescription('Internal error in transmitted data.')
fpTxDatapathErr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxDatapathErr.setStatus('current')
if mibBuilder.loadTexts: fpTxDatapathErr.setDescription('Data path error in transmitted data.')
fpTxPktCOS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS0.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS0.setDescription('Packets Transmitted from COS Queue 0')
fpTxPktCOS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS1.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS1.setDescription('Packets Transmitted from COS Queue 1')
fpTxPktCOS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS2.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS2.setDescription('Packets Transmitted from COS Queue 2')
fpTxPktCOS3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS3.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS3.setDescription('Packets Transmitted from COS Queue 3')
fpTxPktCOS4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS4.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS4.setDescription('Packets Transmitted from COS Queue 4')
fpTxPktCOS5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS5.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS5.setDescription('Packets Transmitted from COS Queue 5')
fpTxPktCOS6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS6.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS6.setDescription('Packets Transmitted from COS Queue 6')
fpTxPktCOS7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS7.setStatus('deprecated')
if mibBuilder.loadTexts: fpTxPktCOS7.setDescription('Packets Transmitted from COS Queue 7')
fpTxPktUnit0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktUnit0.setStatus('current')
if mibBuilder.loadTexts: fpTxPktUnit0.setDescription('Packets Transmitted from Unit 0')
fpTxPktUnit1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktUnit1.setStatus('current')
if mibBuilder.loadTexts: fpTxPktUnit1.setDescription('Packets Transmitted from Unit 1')
fpTxPktUnit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktUnit2.setStatus('current')
if mibBuilder.loadTexts: fpTxPktUnit2.setDescription('Packets Transmitted from Unit 2')
fpTxPktUnit3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktUnit3.setStatus('current')
if mibBuilder.loadTexts: fpTxPktUnit3.setDescription('Packets transmitted from Unit3')
fpCpuPartyBusTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2), )
if mibBuilder.loadTexts: fpCpuPartyBusTable.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusTable.setDescription('The party bus statistics table contains statistics about the number of input and output packets, bytes, error and the number of input packets dropped in a stack unit/line card.')
fpCpuPartyBusStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"))
if mibBuilder.loadTexts: fpCpuPartyBusStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusStatsEntry.setDescription('Cpu party bus statistics')
fpPartyBusInputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPartyBusInputPackets.setStatus('current')
if mibBuilder.loadTexts: fpPartyBusInputPackets.setDescription('Number of input packets.')
fpPartyBusInputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPartyBusInputBytes.setStatus('current')
if mibBuilder.loadTexts: fpPartyBusInputBytes.setDescription('Number of input bytes.')
fpPartyBusInputDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPartyBusInputDropped.setStatus('current')
if mibBuilder.loadTexts: fpPartyBusInputDropped.setDescription('Number of input packets dropped.')
fpPartyBusInputError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPartyBusInputError.setStatus('current')
if mibBuilder.loadTexts: fpPartyBusInputError.setDescription('Error in input packets.')
fpPartyBusOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPartyBusOutputPackets.setStatus('current')
if mibBuilder.loadTexts: fpPartyBusOutputPackets.setDescription('Number of output packets.')
fpPartyBusOutputBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPartyBusOutputBytes.setStatus('current')
if mibBuilder.loadTexts: fpPartyBusOutputBytes.setDescription('Number of bytes transmitted.')
fpPartyBusOutputError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPartyBusOutputError.setStatus('current')
if mibBuilder.loadTexts: fpPartyBusOutputError.setDescription('Error in output ')
fpDropsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3), )
if mibBuilder.loadTexts: fpDropsTable.setStatus('current')
if mibBuilder.loadTexts: fpDropsTable.setDescription('The forwarding plane drops table contains the list of various drops per port in a stack unit/line card.')
fpDropsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"))
if mibBuilder.loadTexts: fpDropsEntry.setStatus('current')
if mibBuilder.loadTexts: fpDropsEntry.setDescription('drops')
fpStackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: fpStackPortIndex.setStatus('current')
if mibBuilder.loadTexts: fpStackPortIndex.setDescription('Stack/line card port number.')
fpIngressDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngressDrops.setStatus('current')
if mibBuilder.loadTexts: fpIngressDrops.setDescription('Ingress Drops')
fpIngIBPCBPFullDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngIBPCBPFullDrops.setStatus('current')
if mibBuilder.loadTexts: fpIngIBPCBPFullDrops.setDescription('The number of packets discarded because of Ingress Back Pressure (flow control), or because the Common Buffer Pool is full.')
fpIngPortSTPnotFwdDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngPortSTPnotFwdDrops.setStatus('current')
if mibBuilder.loadTexts: fpIngPortSTPnotFwdDrops.setDescription('Packets dropped due to Spanning Tree State not in forwarding state.')
fpIngIPv4L3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngIPv4L3Discards.setStatus('current')
if mibBuilder.loadTexts: fpIngIPv4L3Discards.setDescription('IPv4 L3 Discards ')
fpIngPolicyDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngPolicyDiscards.setStatus('current')
if mibBuilder.loadTexts: fpIngPolicyDiscards.setDescription('Packet dropped due to policy discards.')
fpIngPacketsDroppedByFP = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngPacketsDroppedByFP.setStatus('current')
if mibBuilder.loadTexts: fpIngPacketsDroppedByFP.setDescription('Packets dropped by forwarding plane.')
fpIngL2L3Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngL2L3Drops.setStatus('current')
if mibBuilder.loadTexts: fpIngL2L3Drops.setDescription('L2 L3 packets dropped.')
fpIngPortBitMapZeroDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngPortBitMapZeroDrops.setStatus('current')
if mibBuilder.loadTexts: fpIngPortBitMapZeroDrops.setDescription('Port bitmap zero drop condition.')
fpIngRxVLANDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngRxVLANDrops.setStatus('current')
if mibBuilder.loadTexts: fpIngRxVLANDrops.setDescription('Rx VLAN drop condition.')
fpIngressFCSDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngressFCSDrops.setStatus('current')
if mibBuilder.loadTexts: fpIngressFCSDrops.setDescription('Ingress FCSDrops')
fpIngressMTUExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngressMTUExceeds.setStatus('current')
if mibBuilder.loadTexts: fpIngressMTUExceeds.setDescription('Ingress MTUExceeds')
fpMMUHOLDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpMMUHOLDrops.setStatus('current')
if mibBuilder.loadTexts: fpMMUHOLDrops.setDescription('MMU HOL DROPS')
fpMMUTxPurgeCellErr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpMMUTxPurgeCellErr.setStatus('current')
if mibBuilder.loadTexts: fpMMUTxPurgeCellErr.setDescription('TxPurge CellErr')
fpMMUAgedDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpMMUAgedDrops.setStatus('current')
if mibBuilder.loadTexts: fpMMUAgedDrops.setDescription('Aged Drops ')
fpEgressFCSDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgressFCSDrops.setStatus('current')
if mibBuilder.loadTexts: fpEgressFCSDrops.setDescription('Egress FCS Drops')
fpEgIPv4L3UCAgedDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgIPv4L3UCAgedDrops.setStatus('current')
if mibBuilder.loadTexts: fpEgIPv4L3UCAgedDrops.setDescription('IPv4 L3UC Aged & Drops')
fpEgTTLThresholdDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgTTLThresholdDrops.setStatus('current')
if mibBuilder.loadTexts: fpEgTTLThresholdDrops.setDescription('TTL Threshold Drops')
fpEgInvalidVLANCounterDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgInvalidVLANCounterDrops.setStatus('current')
if mibBuilder.loadTexts: fpEgInvalidVLANCounterDrops.setDescription('INVALID VLAN CNTR Drops ')
fpEgL2MCDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgL2MCDrops.setStatus('current')
if mibBuilder.loadTexts: fpEgL2MCDrops.setDescription('L2MC Drops ')
fpEgPktDropsOfAnyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgPktDropsOfAnyCondition.setStatus('current')
if mibBuilder.loadTexts: fpEgPktDropsOfAnyCondition.setDescription('PKT Drops of ANY Conditions ')
fpEgHgMacUnderFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgHgMacUnderFlow.setStatus('current')
if mibBuilder.loadTexts: fpEgHgMacUnderFlow.setDescription('Hg MacUnderflow ')
fpEgTxErrPktCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgTxErrPktCounter.setStatus('current')
if mibBuilder.loadTexts: fpEgTxErrPktCounter.setDescription('TX Err PKT Counter ')
fpPacketBufferTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 4), )
if mibBuilder.loadTexts: fpPacketBufferTable.setStatus('current')
if mibBuilder.loadTexts: fpPacketBufferTable.setDescription('The packet buffer table contains the modular packet buffers details per stack unit/line card and the mode of allocation.')
fpPacketBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 4, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpPortPipe"))
if mibBuilder.loadTexts: fpPacketBufferEntry.setStatus('current')
if mibBuilder.loadTexts: fpPacketBufferEntry.setDescription('Packet buffer details per stack unit/line card.')
fpPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: fpPortPipe.setStatus('current')
if mibBuilder.loadTexts: fpPortPipe.setDescription('fpPortPipe denotes the portpipe in the stack unit/line card.')
fpTotalPacketBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTotalPacketBuffer.setStatus('current')
if mibBuilder.loadTexts: fpTotalPacketBuffer.setDescription('Total packet buffer.')
fpCurrentAvailBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCurrentAvailBuffer.setStatus('current')
if mibBuilder.loadTexts: fpCurrentAvailBuffer.setDescription('Current available buffer.')
fpPacketBufferAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPacketBufferAlloc.setStatus('current')
if mibBuilder.loadTexts: fpPacketBufferAlloc.setDescription('Static or Dynamic allocation.')
fpStatsPerPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 5), )
if mibBuilder.loadTexts: fpStatsPerPortTable.setStatus('current')
if mibBuilder.loadTexts: fpStatsPerPortTable.setDescription('The forward plane stats per port table contains the packet buffer usage per port per stack unit/line card.')
fpStatsPerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 5, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"))
if mibBuilder.loadTexts: fpStatsPerPortEntry.setStatus('current')
if mibBuilder.loadTexts: fpStatsPerPortEntry.setDescription('Per port stats and per COS stats.')
fpCurrentUsagePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCurrentUsagePerPort.setStatus('current')
if mibBuilder.loadTexts: fpCurrentUsagePerPort.setDescription('Current usage per port.')
fpDefaultPacketBuffAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDefaultPacketBuffAlloc.setStatus('current')
if mibBuilder.loadTexts: fpDefaultPacketBuffAlloc.setDescription('Default packet buffer allocated.')
fpMaxLimitPerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpMaxLimitPerPort.setStatus('current')
if mibBuilder.loadTexts: fpMaxLimitPerPort.setDescription('MAx limit per port.')
fpStatsPerCOSTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 6), )
if mibBuilder.loadTexts: fpStatsPerCOSTable.setStatus('current')
if mibBuilder.loadTexts: fpStatsPerCOSTable.setDescription('The forwarding plane statistics per COS table gives packet buffer statistics per COS per port.')
fpStatsPerCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 6, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"), (0, "F10-FPSTATS-MIB", "fpPerPortCOSNumber"))
if mibBuilder.loadTexts: fpStatsPerCOSEntry.setStatus('current')
if mibBuilder.loadTexts: fpStatsPerCOSEntry.setDescription('Per port stats and per COS stats.')
fpPerPortCOSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21)))
if mibBuilder.loadTexts: fpPerPortCOSNumber.setStatus('current')
if mibBuilder.loadTexts: fpPerPortCOSNumber.setDescription('COS queue number')
fpCurrentUsagePerCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCurrentUsagePerCOS.setStatus('current')
if mibBuilder.loadTexts: fpCurrentUsagePerCOS.setDescription('Current usage per COS per port.')
fpDefaultPacketBuffAllocPerCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDefaultPacketBuffAllocPerCOS.setStatus('current')
if mibBuilder.loadTexts: fpDefaultPacketBuffAllocPerCOS.setDescription('Default packet buffer allocated per COS.')
fpMaxLimitPerCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpMaxLimitPerCOS.setStatus('current')
if mibBuilder.loadTexts: fpMaxLimitPerCOS.setDescription('Max limit per port.')
fpHOLDropsPerCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpHOLDropsPerCOS.setStatus('current')
if mibBuilder.loadTexts: fpHOLDropsPerCOS.setDescription('HOL Drops Per Queue.')
fpCpuDataPlaneCOSTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 7), )
if mibBuilder.loadTexts: fpCpuDataPlaneCOSTable.setStatus('current')
if mibBuilder.loadTexts: fpCpuDataPlaneCOSTable.setDescription('The CPU data plane COS table contains the per COS transmission and reception statistics of CPU dataplane.')
fpCpuDataPlaneCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 7, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpCOSIndex"))
if mibBuilder.loadTexts: fpCpuDataPlaneCOSEntry.setStatus('current')
if mibBuilder.loadTexts: fpCpuDataPlaneCOSEntry.setDescription('CPU Data plane per COS statistics')
fpCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11)))
if mibBuilder.loadTexts: fpCOSIndex.setStatus('current')
if mibBuilder.loadTexts: fpCOSIndex.setDescription('CPU dataplane COS queue number.')
fpRxPktCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpRxPktCOS.setStatus('current')
if mibBuilder.loadTexts: fpRxPktCOS.setDescription('Receive COS queue statistics in CPU dataplane.')
fpTxPktCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTxPktCOS.setStatus('current')
if mibBuilder.loadTexts: fpTxPktCOS.setDescription('Transmit COS queue statistics in CPU dataplane.')
fpCpuPartyBusPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12), )
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsTable.setDescription('The party bus port statistics table contains statistics about the number of input and output packets, bytes, error and the number of input packets dropped in a party bus port. This table is applicable to platforms which support party bus statistics at per port level.')
fpCpuPartyBusPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"))
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsEntry.setDescription('Cpu party bus statistics')
fpCpuPartyBusPortStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutOctets.setDescription('Number of output octets.')
fpCpuPartyBusPortStatsOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutDropPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutDropPkts.setDescription('Number of output packets dropped.')
fpCpuPartyBusPortStatsOutCOS0Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS0Pkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS0Pkts.setDescription('Number of output packets in COS queue 0.')
fpCpuPartyBusPortStatsOutCOS1Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS1Pkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS1Pkts.setDescription('Number of output packets in COS queue 1.')
fpCpuPartyBusPortStatsOutCOS2Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS2Pkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS2Pkts.setDescription('Number of output packets in COS queue 2.')
fpCpuPartyBusPortStatsOutCOS3Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS3Pkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS3Pkts.setDescription('Number of output packets in COS queue 3.')
fpCpuPartyBusPortStatsOutCOS4Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS4Pkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS4Pkts.setDescription('Number of output packets in COS queue 4.')
fpCpuPartyBusPortStatsOutCOS5Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS5Pkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCOS5Pkts.setDescription('Number of output packets in COS queue 5.')
fpCpuPartyBusPortStatsOutUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutUnicastPkts.setDescription('Number of unicast output packets.')
fpCpuPartyBusPortStatsOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutMulticastPkts.setDescription('Number of multicast output packets.')
fpCpuPartyBusPortStatsOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutBroadcastPkts.setDescription('Number of broadcast output packets.')
fpCpuPartyBusPortStatsOutPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutPausePkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutPausePkts.setDescription('Number of output pause packets.')
fpCpuPartyBusPortStatsOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCollisions.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutCollisions.setDescription('Number of output collisions.')
fpCpuPartyBusPortStatsOutSingleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutSingleCollisions.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutSingleCollisions.setDescription('Number of single output collisions.')
fpCpuPartyBusPortStatsOutMultiCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutMultiCollisions.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutMultiCollisions.setDescription('Number of multiple output collisions.')
fpCpuPartyBusPortStatsOutLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutLateCollisions.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutLateCollisions.setDescription('Number of late output collisions.')
fpCpuPartyBusPortStatsOutExcessCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutExcessCollisions.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutExcessCollisions.setDescription('Number of excess output collisions.')
fpCpuPartyBusPortStatsOutDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutDeferred.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutDeferred.setDescription('Number of output packets deferred.')
fpCpuPartyBusPortStatsOutDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutDiscarded.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsOutDiscarded.setDescription('Number of output packets discarded.')
fpCpuPartyBusPortStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInOctets.setDescription('Number of input octets.')
fpCpuPartyBusPortStatsInUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInUndersizePkts.setDescription('Number of undersize input packets.')
fpCpuPartyBusPortStatsInOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInOversizePkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInOversizePkts.setDescription('Number of oversize input packets.')
fpCpuPartyBusPortStatsInPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInPausePkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInPausePkts.setDescription('Number of input pause packets.')
fpCpuPartyBusPortStatsIn64OctetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn64OctetPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn64OctetPkts.setDescription('Number of input packets of size 64 octets.')
fpCpuPartyBusPortStatsIn65To127OctetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn65To127OctetPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn65To127OctetPkts.setDescription('Number of input packets of size 65 to 127 octets.')
fpCpuPartyBusPortStatsIn128To255OctetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn128To255OctetPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn128To255OctetPkts.setDescription('Number of input packets of size 128 to 255 octets.')
fpCpuPartyBusPortStatsIn256To511OctetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn256To511OctetPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn256To511OctetPkts.setDescription('Number of input packets of size 256 to 511 octets.')
fpCpuPartyBusPortStatsIn512To1023OctetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn512To1023OctetPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn512To1023OctetPkts.setDescription('Number of input packets of size 512 to 1023 octets.')
fpCpuPartyBusPortStatsIn1024ToMaxOctetPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn1024ToMaxOctetPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsIn1024ToMaxOctetPkts.setDescription('Number of input packets of size more than 1024 octets.')
fpCpuPartyBusPortStatsInJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInJabbers.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInJabbers.setDescription('Number of input jabbers.')
fpCpuPartyBusPortStatsInAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInAlignErrors.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInAlignErrors.setDescription('Number of input align errors.')
fpCpuPartyBusPortStatsInFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInFcsErrors.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInFcsErrors.setDescription('Number of input FCS errors.')
fpCpuPartyBusPortStatsInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInGoodOctets.setDescription('Number of good input octets.')
fpCpuPartyBusPortStatsInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInDropPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInDropPkts.setDescription('Number of input packets dropped.')
fpCpuPartyBusPortStatsInUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInUnicastPkts.setDescription('Number of unicast input packets.')
fpCpuPartyBusPortStatsInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInMulticastPkts.setDescription('Number of multicast input packets.')
fpCpuPartyBusPortStatsInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInBroadcastPkts.setDescription('Number of broadcast input packets.')
fpCpuPartyBusPortStatsInSrcAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInSrcAddrChanges.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInSrcAddrChanges.setDescription('Number of input source address changes.')
fpCpuPartyBusPortStatsInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInFragments.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInFragments.setDescription('Number of input fragments.')
fpCpuPartyBusPortStatsInJumboPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInJumboPkts.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInJumboPkts.setDescription('Number of jumbo input packets.')
fpCpuPartyBusPortStatsInSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInSymbolErrors.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInSymbolErrors.setDescription('Number of input symbol error.')
fpCpuPartyBusPortStatsInInRangeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInInRangeErrors.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInInRangeErrors.setDescription('Number of input in-range errors.')
fpCpuPartyBusPortStatsInOutRangeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 12, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInOutRangeErrors.setStatus('current')
if mibBuilder.loadTexts: fpCpuPartyBusPortStatsInOutRangeErrors.setDescription('Number of input out-of-range errors.')
fpEgrQBuffSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 8), )
if mibBuilder.loadTexts: fpEgrQBuffSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: fpEgrQBuffSnapshotTable.setDescription('Table to Show Egress queue level snapshot statistics. There are total of 21 queues out of which 12[1..12] are unicast queues and the remaining 9[13..21] are multicast queues.')
fpEgrQBuffSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 8, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"), (0, "F10-FPSTATS-MIB", "fpPerPortCOSNumber"))
if mibBuilder.loadTexts: fpEgrQBuffSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: fpEgrQBuffSnapshotEntry.setDescription('Egress queue snapshot info.')
fpEgrQTotBuffCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEgrQTotBuffCells.setStatus('current')
if mibBuilder.loadTexts: fpEgrQTotBuffCells.setDescription('Total Cell count per Egress queue.')
fpIngPgBuffSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 9), )
if mibBuilder.loadTexts: fpIngPgBuffSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: fpIngPgBuffSnapshotTable.setDescription('Table to Show Ingress priority-group level snapshot statistics for all priority-groups[1..8].')
fpIngPgBuffSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 9, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"), (0, "F10-FPSTATS-MIB", "fpPerPortPGIndex"))
if mibBuilder.loadTexts: fpIngPgBuffSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: fpIngPgBuffSnapshotEntry.setDescription('Priority group snapshot info.')
fpPerPortPGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: fpPerPortPGIndex.setStatus('current')
if mibBuilder.loadTexts: fpPerPortPGIndex.setDescription('Priority-Group number.')
fpIngSharedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngSharedCells.setStatus('current')
if mibBuilder.loadTexts: fpIngSharedCells.setDescription('Shared cell count per priority group.')
fpIngHeadroomCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIngHeadroomCells.setStatus('current')
if mibBuilder.loadTexts: fpIngHeadroomCells.setDescription('Headroom cell count per priority group.')
fpStatsPerPgTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10), )
if mibBuilder.loadTexts: fpStatsPerPgTable.setStatus('current')
if mibBuilder.loadTexts: fpStatsPerPgTable.setDescription('The forwarding plane statistics per PG table gives packet buffer allocated and used count per PG per port.')
fpStatsPerPgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"), (0, "F10-FPSTATS-MIB", "fpPerPortPGIndex"))
if mibBuilder.loadTexts: fpStatsPerPgEntry.setStatus('current')
if mibBuilder.loadTexts: fpStatsPerPgEntry.setDescription('Buffer statistics per PG per port.')
fpStatsPgLimitMinCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatsPgLimitMinCells.setStatus('current')
if mibBuilder.loadTexts: fpStatsPgLimitMinCells.setDescription('Min cells allocated per Priority Group.')
fpStatsPgSharedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatsPgSharedCells.setStatus('current')
if mibBuilder.loadTexts: fpStatsPgSharedCells.setDescription('Shared cells allocated per Priority Group.')
fpStatsPgSharedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dynamic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatsPgSharedMode.setStatus('current')
if mibBuilder.loadTexts: fpStatsPgSharedMode.setDescription('Priority group shared mode[static/dynamic].')
fpStatsPgHdrmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatsPgHdrmCells.setStatus('current')
if mibBuilder.loadTexts: fpStatsPgHdrmCells.setDescription('Headroom cells allocated per Priority group.')
fpStatsPgCounterMinCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatsPgCounterMinCells.setStatus('current')
if mibBuilder.loadTexts: fpStatsPgCounterMinCells.setDescription('Priority Group Min cell count.')
fpStatsPgCounterSharedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatsPgCounterSharedCells.setStatus('current')
if mibBuilder.loadTexts: fpStatsPgCounterSharedCells.setDescription('Priority Group Shared cell count.')
fpStatsPgCounterHdrmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpStatsPgCounterHdrmCells.setStatus('current')
if mibBuilder.loadTexts: fpStatsPgCounterHdrmCells.setDescription('Priority group Headroom cell count.')
pfcPerPrioTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 11), )
if mibBuilder.loadTexts: pfcPerPrioTable.setStatus('current')
if mibBuilder.loadTexts: pfcPerPrioTable.setDescription(' This table is used to fetch the number of tx and rx PFC frame counts per port per priority.')
pfcPerPrioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 11, 1), ).setIndexNames((0, "F10-FPSTATS-MIB", "fpStackUnitIndex"), (0, "F10-FPSTATS-MIB", "fpStackPortIndex"), (0, "F10-FPSTATS-MIB", "prioIndex"))
if mibBuilder.loadTexts: pfcPerPrioEntry.setReference('802.1Qbb clause 12.18')
if mibBuilder.loadTexts: pfcPerPrioEntry.setStatus('current')
if mibBuilder.loadTexts: pfcPerPrioEntry.setDescription('Rx and Tx PFC frame counter info.')
prioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: prioIndex.setStatus('current')
if mibBuilder.loadTexts: prioIndex.setDescription('Priority Index.')
pfcPerPrioRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 11, 1, 2), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfcPerPrioRequests.setStatus('current')
if mibBuilder.loadTexts: pfcPerPrioRequests.setDescription('PFC tx counters.')
pfcPerPrioIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 16, 1, 1, 11, 1, 3), Counter64()).setUnits('Indications').setMaxAccess("readonly")
if mibBuilder.loadTexts: pfcPerPrioIndications.setStatus('current')
if mibBuilder.loadTexts: pfcPerPrioIndications.setDescription('PFC rx counters.')
mibBuilder.exportSymbols("F10-FPSTATS-MIB", fpCurrentUsagePerCOS=fpCurrentUsagePerCOS, fpPartyBusInputPackets=fpPartyBusInputPackets, fpRecvd=fpRecvd, fpEgrQBuffSnapshotTable=fpEgrQBuffSnapshotTable, pfcPerPrioTable=pfcPerPrioTable, fpCpuPartyBusPortStatsTable=fpCpuPartyBusPortStatsTable, fpCpuPartyBusPortStatsIn256To511OctetPkts=fpCpuPartyBusPortStatsIn256To511OctetPkts, fpCpuPartyBusPortStatsOutCOS3Pkts=fpCpuPartyBusPortStatsOutCOS3Pkts, fpTxPktCOS=fpTxPktCOS, pfcPerPrioEntry=pfcPerPrioEntry, fpTxPktCOS6=fpTxPktCOS6, fpStatsPerCOSEntry=fpStatsPerCOSEntry, fpStackPortIndex=fpStackPortIndex, fpIngPgBuffSnapshotTable=fpIngPgBuffSnapshotTable, fpStatsPgCounterHdrmCells=fpStatsPgCounterHdrmCells, fpPartyBusOutputBytes=fpPartyBusOutputBytes, fpCpuPartyBusPortStatsInJabbers=fpCpuPartyBusPortStatsInJabbers, fpCurrentAvailBuffer=fpCurrentAvailBuffer, fpCpuPartyBusPortStatsInOversizePkts=fpCpuPartyBusPortStatsInOversizePkts, fpTxPktUnit3=fpTxPktUnit3, fpEgressFCSDrops=fpEgressFCSDrops, fpDropsTable=fpDropsTable, fpIngressDrops=fpIngressDrops, fpCpuPartyBusPortStatsInBroadcastPkts=fpCpuPartyBusPortStatsInBroadcastPkts, fpMaxLimitPerPort=fpMaxLimitPerPort, fpStatsPgLimitMinCells=fpStatsPgLimitMinCells, fpDropsEntry=fpDropsEntry, fpTxPktCOS5=fpTxPktCOS5, fpCpuPartyBusPortStatsIn64OctetPkts=fpCpuPartyBusPortStatsIn64OctetPkts, fpCpuPartyBusPortStatsInOutRangeErrors=fpCpuPartyBusPortStatsInOutRangeErrors, fpIngL2L3Drops=fpIngL2L3Drops, fpCpuPartyBusPortStatsInSrcAddrChanges=fpCpuPartyBusPortStatsInSrcAddrChanges, fpEgPktDropsOfAnyCondition=fpEgPktDropsOfAnyCondition, fpTxError=fpTxError, fpCpuPartyBusPortStatsInUnicastPkts=fpCpuPartyBusPortStatsInUnicastPkts, fpTxInternalError=fpTxInternalError, fpRxPktCOS2=fpRxPktCOS2, fpRxPktCOS0=fpRxPktCOS0, fpStatsObjects=fpStatsObjects, fpRxPktUnit2=fpRxPktUnit2, fpCpuPartyBusPortStatsOutOctets=fpCpuPartyBusPortStatsOutOctets, fpPerPortCOSNumber=fpPerPortCOSNumber, fpRxPktUnit3=fpRxPktUnit3, fpRxError=fpRxError, fpTxRequested=fpTxRequested, fpTxPktUnit0=fpTxPktUnit0, PYSNMP_MODULE_ID=f10FpStatsMib, fpTotalPacketBuffer=fpTotalPacketBuffer, fpCpuDataPlaneCOSTable=fpCpuDataPlaneCOSTable, fpCpuPartyBusPortStatsInAlignErrors=fpCpuPartyBusPortStatsInAlignErrors, fpCpuPartyBusPortStatsInFragments=fpCpuPartyBusPortStatsInFragments, fpTxPktCOS4=fpTxPktCOS4, fpMMUTxPurgeCellErr=fpMMUTxPurgeCellErr, fpIngPortSTPnotFwdDrops=fpIngPortSTPnotFwdDrops, fpCpuPartyBusPortStatsInSymbolErrors=fpCpuPartyBusPortStatsInSymbolErrors, fpStatsPerPgTable=fpStatsPerPgTable, fpCpuPartyBusStatsEntry=fpCpuPartyBusStatsEntry, fpTxPktCOS2=fpTxPktCOS2, fpIngressFCSDrops=fpIngressFCSDrops, fpRxPktUnit0=fpRxPktUnit0, fpCpuPartyBusPortStatsInMulticastPkts=fpCpuPartyBusPortStatsInMulticastPkts, fpCpuPartyBusPortStatsOutCOS5Pkts=fpCpuPartyBusPortStatsOutCOS5Pkts, fpIngSharedCells=fpIngSharedCells, fpStatsPgSharedMode=fpStatsPgSharedMode, fpHOLDropsPerCOS=fpHOLDropsPerCOS, fpCpuPartyBusPortStatsInPausePkts=fpCpuPartyBusPortStatsInPausePkts, fpStatsPgSharedCells=fpStatsPgSharedCells, fpStatsPgCounterSharedCells=fpStatsPgCounterSharedCells, fpTxPktCOS1=fpTxPktCOS1, fpTxPktCOS7=fpTxPktCOS7, fpTransmitted=fpTransmitted, fpCpuPartyBusPortStatsOutSingleCollisions=fpCpuPartyBusPortStatsOutSingleCollisions, fpStatsPerCOSTable=fpStatsPerCOSTable, fpCpuPartyBusPortStatsOutCollisions=fpCpuPartyBusPortStatsOutCollisions, fpCpuPartyBusPortStatsInInRangeErrors=fpCpuPartyBusPortStatsInInRangeErrors, fpCpuDataPlaneStatsEntry=fpCpuDataPlaneStatsEntry, fpCpuPartyBusPortStatsOutLateCollisions=fpCpuPartyBusPortStatsOutLateCollisions, fpCpuDataPlaneCOSEntry=fpCpuDataPlaneCOSEntry, fpCpuPartyBusPortStatsOutCOS1Pkts=fpCpuPartyBusPortStatsOutCOS1Pkts, fpCpuPartyBusPortStatsOutMultiCollisions=fpCpuPartyBusPortStatsOutMultiCollisions, fpIngHeadroomCells=fpIngHeadroomCells, fpRxPktCOS5=fpRxPktCOS5, fpStatsPerPgEntry=fpStatsPerPgEntry, fpStatsPgHdrmCells=fpStatsPgHdrmCells, fpStatsPgCounterMinCells=fpStatsPgCounterMinCells, fpNoTxDesc=fpNoTxDesc, fpCpuPartyBusPortStatsOutPausePkts=fpCpuPartyBusPortStatsOutPausePkts, fpCpuPartyBusPortStatsIn65To127OctetPkts=fpCpuPartyBusPortStatsIn65To127OctetPkts, fpPerPortPGIndex=fpPerPortPGIndex, fpEgInvalidVLANCounterDrops=fpEgInvalidVLANCounterDrops, fpRxPktCOS=fpRxPktCOS, fpNoMBuf=fpNoMBuf, f10FpStatsObject=f10FpStatsObject, fpRxPktCOS7=fpRxPktCOS7, fpPartyBusOutputPackets=fpPartyBusOutputPackets, fpCpuPartyBusPortStatsOutExcessCollisions=fpCpuPartyBusPortStatsOutExcessCollisions, fpCpuPartyBusPortStatsInDropPkts=fpCpuPartyBusPortStatsInDropPkts, fpEgHgMacUnderFlow=fpEgHgMacUnderFlow, fpIngPgBuffSnapshotEntry=fpIngPgBuffSnapshotEntry, fpDropped=fpDropped, fpPacketBufferTable=fpPacketBufferTable, fpCpuPartyBusPortStatsOutDeferred=fpCpuPartyBusPortStatsOutDeferred, fpCpuDataPlaneTable=fpCpuDataPlaneTable, fpRxHandle=fpRxHandle, fpStatsPerPortTable=fpStatsPerPortTable, fpCurrentUsagePerPort=fpCurrentUsagePerPort, fpCpuPartyBusPortStatsOutDropPkts=fpCpuPartyBusPortStatsOutDropPkts, fpPacketBufferEntry=fpPacketBufferEntry, fpCpuPartyBusPortStatsOutCOS4Pkts=fpCpuPartyBusPortStatsOutCOS4Pkts, fpDefaultPacketBuffAlloc=fpDefaultPacketBuffAlloc, fpCOSIndex=fpCOSIndex, fpTxPktUnit2=fpTxPktUnit2, fpNoMhdr=fpNoMhdr, fpIngIPv4L3Discards=fpIngIPv4L3Discards, fpPacketBufferAlloc=fpPacketBufferAlloc, fpEgrQBuffSnapshotEntry=fpEgrQBuffSnapshotEntry, fpRxPktCOS6=fpRxPktCOS6, fpTxPktCOS3=fpTxPktCOS3, fpCpuPartyBusPortStatsOutMulticastPkts=fpCpuPartyBusPortStatsOutMulticastPkts, fpRxPktCOS4=fpRxPktCOS4, fpRxDatapathError=fpRxDatapathError, fpRxPktCOS3=fpRxPktCOS3, fpStatsPerPortEntry=fpStatsPerPortEntry, fpCpuPartyBusPortStatsOutCOS0Pkts=fpCpuPartyBusPortStatsOutCOS0Pkts, fpNoClus=fpNoClus, fpTxPktCOS0=fpTxPktCOS0, fpEgTxErrPktCounter=fpEgTxErrPktCounter, fpCpuPartyBusPortStatsEntry=fpCpuPartyBusPortStatsEntry, fpCpuPartyBusPortStatsInUndersizePkts=fpCpuPartyBusPortStatsInUndersizePkts, fpCpuPartyBusPortStatsOutDiscarded=fpCpuPartyBusPortStatsOutDiscarded, pfcPerPrioIndications=pfcPerPrioIndications, fpTxDatapathErr=fpTxDatapathErr, fpCpuPartyBusPortStatsOutUnicastPkts=fpCpuPartyBusPortStatsOutUnicastPkts, fpIngPortBitMapZeroDrops=fpIngPortBitMapZeroDrops, fpCpuPartyBusPortStatsIn128To255OctetPkts=fpCpuPartyBusPortStatsIn128To255OctetPkts, fpCpuPartyBusPortStatsInOctets=fpCpuPartyBusPortStatsInOctets, pfcPerPrioRequests=pfcPerPrioRequests, fpIngPolicyDiscards=fpIngPolicyDiscards, fpStackUnitIndex=fpStackUnitIndex, fpRxPktUnit1=fpRxPktUnit1, fpPartyBusInputDropped=fpPartyBusInputDropped, fpPartyBusInputError=fpPartyBusInputError, fpIngIBPCBPFullDrops=fpIngIBPCBPFullDrops, fpEgL2MCDrops=fpEgL2MCDrops, fpMMUAgedDrops=fpMMUAgedDrops, fpCpuPartyBusPortStatsOutCOS2Pkts=fpCpuPartyBusPortStatsOutCOS2Pkts, fpCpuPartyBusPortStatsOutBroadcastPkts=fpCpuPartyBusPortStatsOutBroadcastPkts, fpEgIPv4L3UCAgedDrops=fpEgIPv4L3UCAgedDrops, fpMaxLimitPerCOS=fpMaxLimitPerCOS, fpDefaultPacketBuffAllocPerCOS=fpDefaultPacketBuffAllocPerCOS, fpTxReqTooLarge=fpTxReqTooLarge, fpIngressMTUExceeds=fpIngressMTUExceeds, fpCpuPartyBusPortStatsInFcsErrors=fpCpuPartyBusPortStatsInFcsErrors, fpRxPktCOS1=fpRxPktCOS1, fpCpuPartyBusPortStatsIn1024ToMaxOctetPkts=fpCpuPartyBusPortStatsIn1024ToMaxOctetPkts, fpTxPktUnit1=fpTxPktUnit1, fpEgTTLThresholdDrops=fpEgTTLThresholdDrops, fpPartyBusOutputError=fpPartyBusOutputError, fpIngRxVLANDrops=fpIngRxVLANDrops, f10FpStatsMib=f10FpStatsMib, prioIndex=prioIndex, fpCpuPartyBusTable=fpCpuPartyBusTable, fpPartyBusInputBytes=fpPartyBusInputBytes, fpMMUHOLDrops=fpMMUHOLDrops, fpCpuPartyBusPortStatsIn512To1023OctetPkts=fpCpuPartyBusPortStatsIn512To1023OctetPkts, fpCpuPartyBusPortStatsInGoodOctets=fpCpuPartyBusPortStatsInGoodOctets, fpCpuPartyBusPortStatsInJumboPkts=fpCpuPartyBusPortStatsInJumboPkts, fpEgrQTotBuffCells=fpEgrQTotBuffCells, fpRecvToNet=fpRecvToNet, fpIngPacketsDroppedByFP=fpIngPacketsDroppedByFP, fpPortPipe=fpPortPipe)
