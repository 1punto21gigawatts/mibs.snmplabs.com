#
# PySNMP MIB module CXSnaLinkConversionModule-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXSnaLinkConversionModule-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
SapIndex, cxSnalc, Alias = mibBuilder.importSymbols("CXProduct-SMI", "SapIndex", "cxSnalc", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, NotificationType, IpAddress, MibIdentifier, Unsigned32, iso, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "NotificationType", "IpAddress", "MibIdentifier", "Unsigned32", "iso", "Gauge32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snalcMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: snalcMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
snalcSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10), )
if mibBuilder.loadTexts: snalcSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: snalcSapTable.setDescription('This table contains configuration information for each SNA Link Conversion layer SAP (service access point).')
snalcSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1), ).setIndexNames((0, "CXSnaLinkConversionModule-MIB", "snalcSapNumber"))
if mibBuilder.loadTexts: snalcSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snalcSapEntry.setDescription('Defines a row in the snalcSapTable. Each row contains the objects which define a service access point.')
snalcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snalcSapNumber.setDescription('Identifies this SAP (service access point) with a numerical value which must be unique for each SNA Link Conversion SAP.')
snalcSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snalcSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row is deleted from the table valid (2): Values are enabled Configuration Changed: administrative')
snalcSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: snalcSapAlias.setDescription('Identifies this service access point by a textual name. Names must be unique across all service access points at all layers. Default Value: none Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Configuration Changed: administrative')
snalcSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: snalcSapCompanionAlias.setDescription('Determines the sub-layer SAP (service access point) this SAP communicates with. This object contains the textual name of the sub-layer SAP. SDLC, LLC-2 (LLCIM), or QLLC SAP aliases are valid. Default Value: none Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Configuration Changed: administrative')
snalcSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLine", 1), ("unbound", 2), ("bound", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcSapState.setStatus('mandatory')
if mibBuilder.loadTexts: snalcSapState.setDescription('Indicates the state of this SAP (service access point). Options: offLine (1): Indicates that the SAP is not configured. unbound (2): Indicates that this SAP is configured but not yet bound to its companion SAP. bound (3): Indicates that this SAP is bound to its companion SAP.')
snalcCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11), )
if mibBuilder.loadTexts: snalcCrossConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectTable.setDescription('This table contains configuration information for each SNA Link Conversion Module cross-connection. A cross-connection associates two link connections so that SNA traffic can flow from one connection to the other.')
snalcCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1), ).setIndexNames((0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectSrcSapNumber"), (0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectSrcLinkAddrIndex"), (0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectDstSapNumber"), (0, "CXSnaLinkConversionModule-MIB", "snalcCrossConnectDstLinkAddrIndex"))
if mibBuilder.loadTexts: snalcCrossConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectEntry.setDescription('The parameters for a particular SNA Link Conversion Module cross- connection. Up to 64 cross-connect rows may exist in the table.')
snalcCrossConnectSrcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectSrcSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectSrcSapNumber.setDescription('Identifies the source link for a cross-connection. When cross- connecting hierarchical SNA devices, the source link is the side which is attached to the SNA control unit (secondary link station). Related Objects: snalcSapNumber')
snalcCrossConnectSrcLinkAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectSrcLinkAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectSrcLinkAddrIndex.setDescription('Identifies the link level connection for the source-side of a cross- connection. Many link level connections can share the same source SAP (service access point). This number is used to uniquely identify each link. The value for this object depends on the type of link level service the source SAP (snalcCrossConnectSrcSapNumber) is associated with (snalcSapCompanionAlias). When the source SAP is associated with the LLC-2 module, this object is set to the value of the corresponding llcimSapNumber (lower SAP). When the source SAP is associated with the SDLC module, this object is set to the value of the corresponding sdlcCuId object. When the source SAP is associated with the QLLC module, this object is set to the value of the corresponding qllcDteIndex object. Range of Values: 1 - 255')
snalcCrossConnectDstSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 3), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectDstSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectDstSapNumber.setDescription('Identifies the destination link for a cross-connection. When cross- connecting hierarchical SNA devices, the destination link is the side which is attached to the SNA host (primary link station).')
snalcCrossConnectDstLinkAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectDstLinkAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectDstLinkAddrIndex.setDescription('Identifies the link level connection for the destination-side of a cross- connection. Many link level connections can share the same destination SAP (service access point). This number is used to uniquely identify each link. The value for this object depends on the type of link level service the source SAP (snalcCrossConnectSrcSapNumber) is associated with (snalcSapCompanionAlias). When the destination SAP is associated with the LLC-2 module, this object is set to the value of the corresponding llcimSapNumber (lower SAP). When the destination SAP is associated with the SDLC module, this object is set to the value of the corresponding sdlcCuId object. When the destination SAP is associated with the QLLC module, this object is set to the value of the corresponding qllcDteIndex object. Range of Values: 1 - 255')
snalcCrossConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Configuration Changed: administrative')
snalcCrossConnectPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectPuId.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectPuId.setDescription("Determines the SNA PU identifier sent to the host in an XID. The PU identifier is composed of the block ID and node ID. This object applies only when the destination-side of a cross- connection is LLC-2 (IEEE 802.2 LLC) and when snalcCrossConnectConnectMethod is set to 'local'. Range of Values: (eight hexadecimal digits) Default Value: 0 Configuration Changed: administrative and operative")
snalcCrossConnectMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectMaxRetries.setDescription('Determines the maximum number of attempts to establish this cross- connection before it is abandoned. If set to 255, SNA Link Conversion retries forever until successful. Range of Values: 1 - 255 Default Value: 255 Configuration Changed: administrative and operative')
snalcCrossConnectConnectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectConnectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectConnectInterval.setDescription('Determines the delay between attempts to establish this cross-connection when not in slow connect mode. Range of Values: 1 - 65535 seconds Default Value: 10 seconds Related Objects: snalcCrossConnectSlowConnectThreshold Configuration Changed: administrative and operative')
snalcCrossConnectSlowConnectThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectSlowConnectThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectSlowConnectThreshold.setDescription('Determines the number of attempts that are made to establish a cross- connection using the snalcCrossConnectConnectInterval . When the threshold defined by this object is reached, slow connect mode is initialized. In this mode, cross- connection attempts continue, but the interval between attempts is set by snalcCrossConnectSlowConnectInterval. Range of Values: 0 - 254 seconds (0 disables slow connect mode) Default Value: 0 (disabled) Related Objects: snalcCrossConnectConnectInterval snalcCrossConnectSlowConnectInterval Configuration Changed: administrative and operative')
snalcCrossConnectSlowConnectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectSlowConnectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectSlowConnectInterval.setDescription('Determines the delay between attempts to establish a cross-connection when in slow connect mode. Range of Values: 1 - 65535 Default Value: 60 Related Objects: snalcCrossConnectSlowConnectThreshold Configuration Changed: administrative and operative')
snalcCrossConnectWaitContactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectWaitContactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectWaitContactTimer.setDescription('Determines the amount of time to wait for a Set Mode or SNA XID frame from the remote station after the link has been established. Range of Values: 1 - 65535 seconds Default Value: 45 seconds Configuration Changed: administrative and operative')
snalcCrossConnectConnectMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("endToEnd", 2))).clone('endToEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectConnectMethod.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectConnectMethod.setDescription("Determines how the cross-connected links are established. This object may be set only if the value of the associated snalcCrossConnectAdminStatus object is 'down'. Options: local (1): The cross-connection is established by first attempting to bring up the source connection. The destination connection is only established after the source connection has transmitted data. This means that connection establishment frames are not transported between the source and destination links. endToEnd (2) The cross-connection is established by first bringing up both the source and destination links layers. Next, connection establishment frames are transported (with conversion) between the source and destination links to establish the connection. This option must be selected when connecting PUs 1 or Nodes Type 2.1, or when connecting SDLC or QLLC switched lines. It allows XID frames to be propagated between the two cross-connected stations. Default Value: endToEnd (2) Related Objects: snalcCrossConnectWaitContactTimer snalcCrossConnectAdminStatus Configuration Changed: administrative and operative ")
snalcCrossConnectAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectAdminStatus.setDescription('Control which allows the cross- connections to be established or disconnected. The order in which links are established is determined by object snalcCrossConnectConnectMethod. Options: up (1): Causes SNA Link Conversion to activate the cross-connection by establishing the source and destination links. down (2): Causes SNA Link Conversion to de-activate the cross-connection by disconnecting the source and destination links. Default Value: down (2) Related Objects: snalcCrossConnectConnectMethod Configuration Changed: administrative and operative')
snalcCrossConnectSrcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("connecting", 3), ("waitXid", 4), ("setMode", 5), ("waitPartner", 6), ("sendXid", 7), ("waitSetMode", 8), ("delayConnect", 9), ("associated", 10), ("disconnecting", 11), ("linkDisconnecting", 12), ("waitDisconnect", 13), ("failed", 14), ("data", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectSrcOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectSrcOperStatus.setDescription("Indicates the state of the source link. Options: offLine (1): Indicates that this cross-connection is not defined at the layer or too many cross-connections have been defined. notConnected (2): The connection is idle. connecting (3): The connection is in the process of being established. waitXid (4): Awaiting an incoming SNA XID frame to continue the link establishment process. setMode (5): A Set Mode command was sent to the remote station. waitPartner (6): The link is established but is waiting for establishment on the other cross- connected link. sendXid (7): Awaiting the appropriate response to an XID that was sent to the remote. waitSetMode (8): Waiting for a Set Mode command from the remote. delayConnect (9): Waiting for the connection timer (snalcCrossConnectDstConnectInterval) to expire in order to retry the connection. associated (10): Indicates that both the source and destination link levels are established and that connection establishment frames may be exchanged. disconnecting (11): The link is being disconnected. linkDisconnecting (12): The link is terminating data exchange mode. waitDisconnect (13): Waiting for the remote to clear the link. failed (14) The cross-connection process failed. To retry, set snalcCrossConnectAdminStatus from 'up' to 'down' and back to 'up'. data (15): Indicates that the cross- connection between the source and destination is established and that data frames may be exchanged.")
snalcCrossConnectDstOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("connecting", 3), ("waitXid", 4), ("setMode", 5), ("waitPartner", 6), ("sendXid", 7), ("waitSetMode", 8), ("delayConnect", 9), ("associated", 10), ("disconnecting", 11), ("linkDisconnecting", 12), ("waitDisconnect", 13), ("failed", 14), ("data", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snalcCrossConnectDstOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectDstOperStatus.setDescription("Indicates the state of the destination link. Options: offLine (1): Indicates that this cross-connection is not defined at the layer or too many cross-connections have been defined. notConnected (2): The connection is idle. connecting (3): The connection is in the process of being established. waitXid (4): Awaiting an incoming SNA XID frame to continue the link establishment process. setMode (5): A Set Mode command was sent to the remote station. waitPartner (6): The link is established but is waiting for establishment on the other cross- connected link. sendXid (7): Awaiting the appropriate response to an XID that was sent to the remote. waitSetMode (8): Waiting for a Set Mode command from the remote. delayConnect (9): Waiting for the connection timer (snalcCrossConnectDstConnectInterval) to expire in order to retry the connection. associated (10): Indicates that both the source and destination link levels are established and that connection establishment frames may be exchanged. disconnecting (11): The link is being disconnected. linkDisconnecting (12): The link is terminating data exchange mode. waitDisconnect (13): Waiting for the remote to clear the link. failed (14) The cross-connection process failed. To retry, set snalcCrossConnectAdminStatus from 'up' to 'down' and back to 'up'. data (15): Indicates that the cross- connection between the source and destination is established and that data frames may be exchanged.")
snalcCrossConnectXidTransparent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonTransparent", 1), ("transparent", 2))).clone('nonTransparent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectXidTransparent.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectXidTransparent.setDescription("Determines if any changes are to be made to the XID. If transparent mode is specified, XID information fields are not modified, and the XID's are passed transparently between the lower software layers (i.e.: SDLC, QLLC, LIM). Options: nonTransparent (1) transparent (2) Default Value: nonTransparent (1) Configuration Changed: administrative and operative")
snalcCrossConnectDataLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 35, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sna", 1), ("bsc", 2))).clone('sna')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snalcCrossConnectDataLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: snalcCrossConnectDataLinkType.setDescription('Configurates the type of connection. Two types are supported : SNA connections, using the SDLC data link layer. BSC connections, using the BSC data link layer. Options: sna (1) bsc (2) Default Value: sna (1) Configuration Changed: administrative and operative')
mibBuilder.exportSymbols("CXSnaLinkConversionModule-MIB", snalcCrossConnectDstLinkAddrIndex=snalcCrossConnectDstLinkAddrIndex, snalcCrossConnectConnectInterval=snalcCrossConnectConnectInterval, snalcCrossConnectAdminStatus=snalcCrossConnectAdminStatus, snalcCrossConnectXidTransparent=snalcCrossConnectXidTransparent, snalcSapEntry=snalcSapEntry, snalcMibLevel=snalcMibLevel, snalcSapState=snalcSapState, snalcSapNumber=snalcSapNumber, snalcCrossConnectDstSapNumber=snalcCrossConnectDstSapNumber, snalcCrossConnectSrcOperStatus=snalcCrossConnectSrcOperStatus, snalcCrossConnectEntry=snalcCrossConnectEntry, snalcSapTable=snalcSapTable, snalcCrossConnectTable=snalcCrossConnectTable, snalcCrossConnectSlowConnectThreshold=snalcCrossConnectSlowConnectThreshold, snalcCrossConnectMaxRetries=snalcCrossConnectMaxRetries, snalcSapCompanionAlias=snalcSapCompanionAlias, snalcSapAlias=snalcSapAlias, snalcCrossConnectDstOperStatus=snalcCrossConnectDstOperStatus, snalcCrossConnectSrcSapNumber=snalcCrossConnectSrcSapNumber, snalcSapRowStatus=snalcSapRowStatus, snalcCrossConnectPuId=snalcCrossConnectPuId, snalcCrossConnectSrcLinkAddrIndex=snalcCrossConnectSrcLinkAddrIndex, snalcCrossConnectWaitContactTimer=snalcCrossConnectWaitContactTimer, snalcCrossConnectConnectMethod=snalcCrossConnectConnectMethod, snalcCrossConnectSlowConnectInterval=snalcCrossConnectSlowConnectInterval, snalcCrossConnectDataLinkType=snalcCrossConnectDataLinkType, snalcCrossConnectRowStatus=snalcCrossConnectRowStatus)
