#
# PySNMP MIB module ALCATEL-IND1-VLAN-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-VLAN-MGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1VlanMgt, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1VlanMgt")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, IpAddress, ObjectIdentity, iso, Gauge32, NotificationType, Counter32, ModuleIdentity, Integer32, MibIdentifier, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "IpAddress", "ObjectIdentity", "iso", "Gauge32", "NotificationType", "Counter32", "ModuleIdentity", "Integer32", "MibIdentifier", "TimeTicks", "Bits")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1VLANMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1))
alcatelIND1VLANMgrMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line Vlan Manager for the distribution of vlan configuration information, including the association between vlans and ports. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
class IpxNetworkAddress(TextualConvention, Unsigned32):
    description = 'Textual convention for ipx network address. This is an unsigned integer (32 bits) that should be represented as a hexedecimal value.'
    status = 'current'
    displayHint = 'x'

alcatelIND1VLANMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBObjects.setDescription('Branch For VLAN Manager Subsystem Managed Objects.')
alcatelIND1VLANMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBConformance.setDescription('Branch For VLAN Manager Subsystem Conformance Information.')
alcatelIND1VLANMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBGroups.setDescription('Branch For VLAN Manager Subsystem Units Of Conformance.')
alcatelIND1VLANMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBCompliances.setDescription('Branch For VLAN Manager Subsystem Compliance Statements.')
vlanMgrVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1))
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('A list of Virtual LAN instances in this device.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanNumber"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('A VLAN entry.')
vlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNumber.setStatus('current')
if mibBuilder.loadTexts: vlanNumber.setDescription('The VLAN number identifying this instance. Valid range from 1 to 4094.')
vlanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDescription.setStatus('current')
if mibBuilder.loadTexts: vlanDescription.setDescription('Textual description of the VLAN instance.')
vlanAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAdmStatus.setStatus('current')
if mibBuilder.loadTexts: vlanAdmStatus.setDescription('The administrative status which can be set by configuration. Disable(1) will disable ALL vports that are connected to this VLAN, enable(2) will enable ALL ports on this VLAN, delete(3) will detach and delete the ports/routers AND remove the VLAN.')
vlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOperStatus.setStatus('current')
if mibBuilder.loadTexts: vlanOperStatus.setDescription('Provide operating status of a particular VLAN environment.')
vlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStatus.setStatus('current')
if mibBuilder.loadTexts: vlanStatus.setDescription('Row status to control creation/deletion of vlans.')
vlanStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStpStatus.setStatus('current')
if mibBuilder.loadTexts: vlanStpStatus.setDescription('Indicates status of spanning tree for the current VLAN.')
vlanAuthentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAuthentStatus.setStatus('current')
if mibBuilder.loadTexts: vlanAuthentStatus.setDescription('Indicates status of authentication for the current VLAN.')
vlanVoiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceStatus.setStatus('current')
if mibBuilder.loadTexts: vlanVoiceStatus.setDescription('Indicates status of voice usage for the current VLAN.')
vlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpAddress.setStatus('current')
if mibBuilder.loadTexts: vlanIpAddress.setDescription("IP address of the VLAN's virtual router port. Note: a vlan does not necessarily have an ip address. Setting one requires that the ip address be set, and optionally the following since they have defaults: ip mask, ip encap, ip forward. Then setting vlanIpStatus to add will create the ip router port for the given vlan (the index).")
vlanIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpMask.setStatus('current')
if mibBuilder.loadTexts: vlanIpMask.setDescription('Subnetwork mask for VLAN IP Address. Default is class level mask for the ip address.')
vlanIpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet2", 1), ("snap", 2), ("notApplicable", 3))).clone('ethernet2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpEncap.setStatus('current')
if mibBuilder.loadTexts: vlanIpEncap.setDescription("VLAN's IP router port encapsulation. Not applicable when there is no ip router port.")
vlanIpForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpForward.setStatus('current')
if mibBuilder.loadTexts: vlanIpForward.setDescription("VLAN's IP router port ip frame forwarding (disabled = ip host only). Not applicable when there is no ip router port.")
vlanIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpStatus.setStatus('current')
if mibBuilder.loadTexts: vlanIpStatus.setDescription('Provides ability to add and remove the VLAN ip address.')
vlanIpxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 14), IpxNetworkAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxNet.setStatus('current')
if mibBuilder.loadTexts: vlanIpxNet.setDescription('IPX network address. Note: a vlan does not necessarily have an ipx net number. Setting one requires that the ipx net be set, and optionally the ipx encap, ipx rip-sap mode, and delay ticks (all have defaults). Then the vlanIpxStatus should be set to add to create the ipx router port.')
vlanIpxEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet2", 1), ("novellraw", 2), ("llc", 3), ("snap", 4), ("notApplicable", 5))).clone('ethernet2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxEncap.setStatus('current')
if mibBuilder.loadTexts: vlanIpxEncap.setDescription('IPX of frame enapsulation of IPX VLAN router port. Not applicable when there is no ipx router port.')
vlanIpxRipSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("riponly", 1), ("ripsap", 2), ("triggered", 3), ("inactive", 4), ("notApplicable", 5))).clone('ripsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxRipSapMode.setStatus('current')
if mibBuilder.loadTexts: vlanIpxRipSapMode.setDescription('IPX advertisement mode. Not applicable when there is no ipx router port.')
vlanIpxDelayTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxDelayTicks.setStatus('current')
if mibBuilder.loadTexts: vlanIpxDelayTicks.setDescription('Tick metric to use for supporting IPX routing decisions.')
vlanIpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpxStatus.setStatus('current')
if mibBuilder.loadTexts: vlanIpxStatus.setDescription('Provides ability to add and remove the VLAN ipx network node.')
vlanTagMobilePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTagMobilePortStatus.setStatus('current')
if mibBuilder.loadTexts: vlanTagMobilePortStatus.setDescription('When enabled for a VLAN, a mobile port will be moved to the VLAN based on the tag.')
vlanPortMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortMacStatus.setStatus('current')
if mibBuilder.loadTexts: vlanPortMacStatus.setDescription('When enabled for a VLAN, it will be considered a special VLAN not affected by the ordinary vlan commands except the command to delete a VLAN')
vlanLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanLocalProxyArp.setStatus('current')
if mibBuilder.loadTexts: vlanLocalProxyArp.setDescription('When enabled for a VLAN, local proxy ARP processing happens on this= VLAN.')
vlanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1280, 9198))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMtu.setStatus('current')
if mibBuilder.loadTexts: vlanMtu.setDescription('Maximum transmission unit i.e. the maximum size of packet that this vlan can handle. It ranges from 1280 to 9198.')
vlan1x1StpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlan1x1StpStatus.setStatus('current')
if mibBuilder.loadTexts: vlan1x1StpStatus.setDescription('Indicates status of 1x1 spanning tree for the current VLAN.')
vlanflatStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanflatStpStatus.setStatus('current')
if mibBuilder.loadTexts: vlanflatStpStatus.setDescription('Indicates status of flat spanning tree for the current VLAN.')
vlanHABandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHABandwidth.setStatus('current')
if mibBuilder.loadTexts: vlanHABandwidth.setDescription('Bandwidth of flood queue allocated by Q-driver for High Availability vlans. The value ranges from 1 to 50 Mega bits per second.')
vlanSvlanTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 0), ("customer", 1), ("provider", 2), ("multicastEnterprise", 3), ("multicastVlanStacking", 4), ("eServiceCustomer", 6), ("eServiceManagement", 7), ("eServiceMulticastVlanStacking", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSvlanTrafficType.setStatus('current')
if mibBuilder.loadTexts: vlanSvlanTrafficType.setDescription('The created SVLAN is desired for carrying customer or provider traffic, default is customer. When creating standard Vlans the value should be notApplicable')
vlanSvlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSvlanPriority.setStatus('current')
if mibBuilder.loadTexts: vlanSvlanPriority.setDescription('All traffic getting mapped to this Svlan should be either priority mapped or mapped to a specific priority 0-7, default is priority 0. For standard Vlans the value should be -1')
vlanMacLearningControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacLearningControlStatus.setStatus('current')
if mibBuilder.loadTexts: vlanMacLearningControlStatus.setDescription('Status of Mac Learning on a vlan')
vlanMgrVpa = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2))
vpaTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1), )
if mibBuilder.loadTexts: vpaTable.setStatus('current')
if mibBuilder.loadTexts: vpaTable.setDescription('A list of Virtual LAN instances in this device.')
vpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vpaVlanNumber"), (0, "ALCATEL-IND1-VLAN-MGR-MIB", "vpaIfIndex"))
if mibBuilder.loadTexts: vpaEntry.setStatus('current')
if mibBuilder.loadTexts: vpaEntry.setDescription('A VLAN-Port Association (VPA) entry.')
vpaVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaVlanNumber.setStatus('current')
if mibBuilder.loadTexts: vpaVlanNumber.setDescription('The VLAN number component of this instance. Valid range from 1 to 4094.')
vpaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1001, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaIfIndex.setStatus('current')
if mibBuilder.loadTexts: vpaIfIndex.setDescription('The ifIndex component of this instance.')
vpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("cfgDefault", 1), ("qTagged", 2), ("mobile", 3), ("mirrored", 4), ("svlan", 6), ("dynamic", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpaType.setStatus('current')
if mibBuilder.loadTexts: vpaType.setDescription("The type of this vpa. Two are statically configured: configured default VPA and qTagged VPA. The mirrored is an internal type set for mirrored ports and the rest are dynamic vlan's 1. cfgDefault - Default vlan VPA Type 2. qTagged - The qTagged vlan VPA Type 3. mobile - The vpa is dynamically created according to rules/policies. 4. mirrored - Set internally when the vpa created is on a mirrored port. 6. slvan - Service vlan vpa's which are created. 7. dynamic - Created by dynamic GVRP or MVRP Protocol.")
vpaState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("blocking", 2), ("forwarding", 3), ("filtering", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpaState.setStatus('current')
if mibBuilder.loadTexts: vpaState.setDescription('The state of this vpa: 1. inactive - link down 2. blocking - link up, forwarding down 3. forwarding - link up, forwarding up, sources learned normally 4. filtering - link up, forwarding up, sources filtered.')
vpaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaStatus.setStatus('current')
if mibBuilder.loadTexts: vpaStatus.setDescription('This is used to create or delete staticPrimary VPAs (default vlans on a port ). Creation replaces the existing staticPrimary VPA while deletion replaces the existing VPA so that the vlan number is 1 for the given port. Of course the corresponding vlan and port must exist.')
vpaPortMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("inapplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpaPortMacType.setStatus('current')
if mibBuilder.loadTexts: vpaPortMacType.setDescription('Value of this field will decide whether the port represented by vpaIfIndex is a ingress port or egress port. This fiels is applicable only for portMac vlans')
vlanMgrVlanSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3))
vlanSetVlanCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetVlanCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetVlanCount.setDescription('Count of existing VLANs on switch.')
vlanSetVlanRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetVlanRouterCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetVlanRouterCount.setDescription('Count of VLANs on switch with at least one router port configured.')
vlanSetIpRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetIpRouterCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetIpRouterCount.setDescription('Count of VLANs on switch with IP router port configured.')
vlanSetIpxRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetIpxRouterCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetIpxRouterCount.setDescription('Count of VLANs on switch with IPX router port configured.')
vlanSetMultiRtrMacStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSetMultiRtrMacStatus.setStatus('current')
if mibBuilder.loadTexts: vlanSetMultiRtrMacStatus.setDescription('Controls whether unique mac assigned to each vlan with router port (limit 64).')
vlanMgrHAPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4))
vlanHAPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1), )
if mibBuilder.loadTexts: vlanHAPortTable.setStatus('current')
if mibBuilder.loadTexts: vlanHAPortTable.setDescription('A list of Port To HA vlan binding.')
vlanHAPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanHAPortVlanId"), (0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanHAPortIfIndex"), (0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanHAPortType"))
if mibBuilder.loadTexts: vlanHAPortEntry.setStatus('current')
if mibBuilder.loadTexts: vlanHAPortEntry.setDescription('Port To HA vlan binding entry.')
vlanHAPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanHAPortVlanId.setDescription('The vlan Id in which this port is a HA port')
vlanHAPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: vlanHAPortIfIndex.setDescription('This port is associated with a HA vlan.')
vlanHAPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortType.setStatus('current')
if mibBuilder.loadTexts: vlanHAPortType.setDescription('Value of this field will decide whether the port represented by vlanHAPortIfIndex is a ingress port or egress port.')
vlanHAPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanHAPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanHAPortRowStatus.setDescription('This indicate whether to add or delete the ifIndex')
alcatelIND1VLANMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVlanGroup"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVpaGroup"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVlanSetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1VLANMgrMIBCompliance = alcatelIND1VLANMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBCompliance.setDescription('Compliance statement for VLAN Manager.')
vlanMgrVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanNumber"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanDescription"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanAdmStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanOperStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlan1x1StpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanflatStpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanStpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanAuthentStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanVoiceStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpAddress"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpMask"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpEncap"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpForward"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxNet"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxEncap"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxRipSapMode"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxDelayTicks"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanIpxStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVlanGroup = vlanMgrVlanGroup.setStatus('current')
if mibBuilder.loadTexts: vlanMgrVlanGroup.setDescription('Collection of objects for management of Vlan Manager VLANs.')
vlanMgrVpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vpaVlanNumber"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaIfIndex"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaType"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaState"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVpaGroup = vlanMgrVpaGroup.setStatus('current')
if mibBuilder.loadTexts: vlanMgrVpaGroup.setDescription('Collection of objects for management of Vlan Manager VPAs.')
vlanMgrVlanSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetVlanCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetVlanRouterCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetIpRouterCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetIpxRouterCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetMultiRtrMacStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVlanSetGroup = vlanMgrVlanSetGroup.setStatus('current')
if mibBuilder.loadTexts: vlanMgrVlanSetGroup.setDescription('Collection of objects for Vlan Manager global properties.')
mibBuilder.exportSymbols("ALCATEL-IND1-VLAN-MGR-MIB", vlanHABandwidth=vlanHABandwidth, vlanHAPortEntry=vlanHAPortEntry, vlanIpxStatus=vlanIpxStatus, vlanDescription=vlanDescription, vlanIpStatus=vlanIpStatus, vpaIfIndex=vpaIfIndex, vlanIpxRipSapMode=vlanIpxRipSapMode, vpaVlanNumber=vpaVlanNumber, vlanIpAddress=vlanIpAddress, vlanSetVlanRouterCount=vlanSetVlanRouterCount, alcatelIND1VLANMgrMIBCompliance=alcatelIND1VLANMgrMIBCompliance, vpaEntry=vpaEntry, alcatelIND1VLANMgrMIB=alcatelIND1VLANMgrMIB, alcatelIND1VLANMgrMIBConformance=alcatelIND1VLANMgrMIBConformance, vlanMtu=vlanMtu, vlanSvlanTrafficType=vlanSvlanTrafficType, vlanNumber=vlanNumber, vlanHAPortVlanId=vlanHAPortVlanId, vlanAdmStatus=vlanAdmStatus, vlanIpxNet=vlanIpxNet, vlanStatus=vlanStatus, vlanLocalProxyArp=vlanLocalProxyArp, vlanIpxDelayTicks=vlanIpxDelayTicks, vlanSetMultiRtrMacStatus=vlanSetMultiRtrMacStatus, vlanMgrHAPort=vlanMgrHAPort, vlan1x1StpStatus=vlan1x1StpStatus, vlanMacLearningControlStatus=vlanMacLearningControlStatus, vlanMgrVlanSetGroup=vlanMgrVlanSetGroup, vlanSvlanPriority=vlanSvlanPriority, vlanSetVlanCount=vlanSetVlanCount, vlanSetIpxRouterCount=vlanSetIpxRouterCount, vlanHAPortType=vlanHAPortType, vlanMgrVpa=vlanMgrVpa, vlanMgrVlan=vlanMgrVlan, vpaType=vpaType, vlanIpEncap=vlanIpEncap, vlanHAPortIfIndex=vlanHAPortIfIndex, vlanHAPortRowStatus=vlanHAPortRowStatus, vlanVoiceStatus=vlanVoiceStatus, vlanSetIpRouterCount=vlanSetIpRouterCount, vpaState=vpaState, vlanflatStpStatus=vlanflatStpStatus, vlanMgrVpaGroup=vlanMgrVpaGroup, vlanIpForward=vlanIpForward, alcatelIND1VLANMgrMIBGroups=alcatelIND1VLANMgrMIBGroups, vlanIpxEncap=vlanIpxEncap, vlanOperStatus=vlanOperStatus, vlanPortMacStatus=vlanPortMacStatus, vpaStatus=vpaStatus, vlanMgrVlanSet=vlanMgrVlanSet, vlanMgrVlanGroup=vlanMgrVlanGroup, vpaTable=vpaTable, vlanEntry=vlanEntry, vlanTagMobilePortStatus=vlanTagMobilePortStatus, alcatelIND1VLANMgrMIBObjects=alcatelIND1VLANMgrMIBObjects, vlanAuthentStatus=vlanAuthentStatus, vlanStpStatus=vlanStpStatus, alcatelIND1VLANMgrMIBCompliances=alcatelIND1VLANMgrMIBCompliances, PYSNMP_MODULE_ID=alcatelIND1VLANMgrMIB, vlanTable=vlanTable, vpaPortMacType=vpaPortMacType, vlanIpMask=vlanIpMask, vlanHAPortTable=vlanHAPortTable, IpxNetworkAddress=IpxNetworkAddress)
