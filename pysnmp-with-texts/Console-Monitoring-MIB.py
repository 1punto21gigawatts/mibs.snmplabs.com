#
# PySNMP MIB module Console-Monitoring-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Console-Monitoring-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:36:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, Bits, Counter32, Unsigned32, Integer32, IpAddress, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "Bits", "Counter32", "Unsigned32", "Integer32", "IpAddress", "iso", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniAppMon = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 23))
appConsMon = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 23, 4))
consMonGlobalData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 1))
consMonBS2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2))
consMonVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonVersion.setStatus('mandatory')
if mibBuilder.loadTexts: consMonVersion.setDescription('Version of consol monitor')
consMonMsgFilter = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consMonMsgFilter.setStatus('mandatory')
if mibBuilder.loadTexts: consMonMsgFilter.setDescription('Pathname of the message filter file')
consMonNegMsgFilter = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonNegMsgFilter.setStatus('mandatory')
if mibBuilder.loadTexts: consMonNegMsgFilter.setDescription('Pathname of the negative message filter file; messages in this file are not sent as traps')
consMonCmdFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonCmdFreeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmdFreeIndex.setDescription('The next free index in the BS2000 command table. Read this object before setting a new entry in consMonCmdTable!')
consMonCmdTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonCmdTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmdTabNum.setDescription('The number of entries in the table consMonCmdTable')
consMonCmdTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 3), )
if mibBuilder.loadTexts: consMonCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmdTable.setDescription('The BS2000 command table')
consMonCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 3, 1), ).setIndexNames((0, "Console-Monitoring-MIB", "consMonCmdIndex"))
if mibBuilder.loadTexts: consMonCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmdEntry.setDescription('An entry in the command table')
consMonCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonCmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmdIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of consMonCmdTabNum')
consMonCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consMonCmd.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmd.setDescription('A BS2000 console command')
consMonCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("executing", 2), ("ok", 3), ("error", 4), ("waiting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonCmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmdResult.setDescription("Result of the BS2000 console command. 'none' means, that the command has not yet terminated")
consMonCmdMainRetco = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonCmdMainRetco.setStatus('mandatory')
if mibBuilder.loadTexts: consMonCmdMainRetco.setDescription('The main returncode of the console command')
consMonOutTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 4), )
if mibBuilder.loadTexts: consMonOutTable.setStatus('mandatory')
if mibBuilder.loadTexts: consMonOutTable.setDescription('The output table containing the result of the commands ')
consMonOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 4, 1), ).setIndexNames((0, "Console-Monitoring-MIB", "consMonOutCmdIndex"), (0, "Console-Monitoring-MIB", "consMonOutLineNo"))
if mibBuilder.loadTexts: consMonOutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: consMonOutEntry.setDescription('An entry in the output table')
consMonOutCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonOutCmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: consMonOutCmdIndex.setDescription('The first index in the output table. It is equal to consMonCmdIndex of the corresponding command in the command table')
consMonOutLineNo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonOutLineNo.setStatus('mandatory')
if mibBuilder.loadTexts: consMonOutLineNo.setDescription('The second index in the output table. It counts the number of output lines belonging of one command')
consMonOutContents = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consMonOutContents.setStatus('mandatory')
if mibBuilder.loadTexts: consMonOutContents.setDescription('the contents of one line of the output of the command')
consMonBS2Ans = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 23, 4, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consMonBS2Ans.setStatus('mandatory')
if mibBuilder.loadTexts: consMonBS2Ans.setDescription('Answer to an BS2000 console message')
mibBuilder.exportSymbols("Console-Monitoring-MIB", appConsMon=appConsMon, consMonBS2Group=consMonBS2Group, consMonBS2Ans=consMonBS2Ans, sni=sni, consMonVersion=consMonVersion, sniAppMon=sniAppMon, consMonCmdEntry=consMonCmdEntry, consMonOutEntry=consMonOutEntry, consMonCmdMainRetco=consMonCmdMainRetco, consMonCmdResult=consMonCmdResult, consMonOutCmdIndex=consMonOutCmdIndex, consMonGlobalData=consMonGlobalData, consMonOutTable=consMonOutTable, consMonOutLineNo=consMonOutLineNo, consMonMsgFilter=consMonMsgFilter, consMonCmdIndex=consMonCmdIndex, consMonCmd=consMonCmd, consMonCmdTabNum=consMonCmdTabNum, consMonCmdFreeIndex=consMonCmdFreeIndex, consMonOutContents=consMonOutContents, sniProductMibs=sniProductMibs, consMonNegMsgFilter=consMonNegMsgFilter, consMonCmdTable=consMonCmdTable)
