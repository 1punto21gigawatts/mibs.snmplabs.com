#
# PySNMP MIB module EXTREME-STACKING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent")
extremeCurrentTemperature, = mibBuilder.importSymbols("EXTREME-SYSTEM-MIB", "extremeCurrentTemperature")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, sysDescr = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime", "sysDescr")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
extremeStackable = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 33))
if mibBuilder.loadTexts: extremeStackable.setLastUpdated('0409270000Z')
if mibBuilder.loadTexts: extremeStackable.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeStackable.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeStackable.setDescription('Extreme Stackable MIB objects')
extremeStackDetection = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 33, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeStackDetection.setStatus('current')
if mibBuilder.loadTexts: extremeStackDetection.setDescription('This field provides the information as to whether the stacking is enabled (True) or disabled (False) for the system. The stacking feature is supported from extremeware version 7.4 and above')
extremeStackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2), )
if mibBuilder.loadTexts: extremeStackMemberTable.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberTable.setDescription('A table containing information about each stack member that are a part of this stacking. If extremeStackDetection is not enabled, we wouldnt not have any rows for this table.')
extremeStackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1), ).setIndexNames((0, "EXTREME-STACKING-MIB", "extremeStackMemberSlotId"))
if mibBuilder.loadTexts: extremeStackMemberEntry.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberEntry.setDescription('Entry in the table for a StackMember Entity')
extremeStackMemberSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberSlotId.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberSlotId.setDescription('The slot id of the stack member in the stack')
extremeStackMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberType.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberType.setDescription('The type of device of the stack member. This field reflects the individual sysOid of the member')
extremeStackMemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("mismatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberOperStatus.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberOperStatus.setDescription('The operational status of the stack member. When the stack comes up, if there is a vector mismatch namely license mismatch or platform mismatch between the master and the member, the member remains in the mismatch state. Further communication with the member is not possible')
extremeStackMemberRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberRole.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberRole.setDescription('The role of the stack member as to whether it is acting as a master or a slave')
extremeStackMemberEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberEntPhysicalIndex.setDescription('The entPhysicalIndex of the corresponding device as defined in the ENTITY-MIB')
extremeStackMemberMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberMACAddress.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberMACAddress.setDescription('The Mac address of the stack member')
extremeStackMemberCurImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberCurImageVersion.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberCurImageVersion.setDescription('The current image version of the stack member')
extremeStackMemberPriImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberPriImageVersion.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberPriImageVersion.setDescription('The primary image version of the stack member')
extremeStackMemberSecImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberSecImageVersion.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberSecImageVersion.setDescription('The secondary image version of the stack member')
extremeStackMemberBootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberBootRomVersion.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberBootRomVersion.setDescription('The boot rom version of the stack member')
extremeStackMemberCurConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberCurConfig.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberCurConfig.setDescription('The current configuration of the stack member')
extremeStackMemberConfigSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberConfigSelected.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberConfigSelected.setDescription('The config selected to be used on reboot for the stack member')
extremeStackMemberImageSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberImageSelected.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberImageSelected.setDescription('The image selected to be used on reboot for the stack member')
extremeStackMemberStackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberStackPriority.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberStackPriority.setDescription('The stack priority of the stack member. The stack priority is used for the master election algorithm. The member with the highest priority comes up as the master. If there are more than one switch with highest priority, the member with the least MAC among them comes up as the master')
extremeStackMemberMgmtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberMgmtIpAddress.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberMgmtIpAddress.setDescription('The fallback mgmt ip address which was configured through CLI for this stack member. This ipaddress can be used to communicate with this member, if it comes up as the master. The ipaddress is associated with the vlan configured')
extremeStackMemberSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeStackMemberSysLocation.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberSysLocation.setDescription("The physical location of this node (e.g., `telephone closet, 3rd floor'). If the location is unknown, the value is the zero-length string.")
extremeStackMemberAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackMemberAutoConfig.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberAutoConfig.setDescription(' This field provides the information whether the config of the stack member is autogenerated(true) or not(false)')
extremeStackMemberStackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeStackMemberStackStatus.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberStackStatus.setDescription('This status is used for disabling the stacking feature for the stack member. If stacking is enabled for the stack member we get the information as enable, if we mark it as disable, the stack member is removed from the stack and the corresponding row disappears')
extremeStackingPortTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 33, 3), )
if mibBuilder.loadTexts: extremeStackingPortTable.setStatus('current')
if mibBuilder.loadTexts: extremeStackingPortTable.setDescription('A table containing information about each stacking port in the stack. If extremeStackDetection is not enabled, we would not have any rows for this table')
extremeStackingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 33, 3, 1), ).setIndexNames((0, "EXTREME-STACKING-MIB", "extremeStackingPortIfIndex"))
if mibBuilder.loadTexts: extremeStackingPortEntry.setStatus('current')
if mibBuilder.loadTexts: extremeStackingPortEntry.setDescription('Entry in the table for each stacking port in the stack')
extremeStackingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackingPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremeStackingPortIfIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
extremeStackingPortRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackingPortRemoteMac.setStatus('current')
if mibBuilder.loadTexts: extremeStackingPortRemoteMac.setDescription('The Mac address of the remote system, this stacking port is connected to. The value of the mac address will be 00:00:00:00:00:00 if the stacking link is not active.')
extremeStackingPortLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackingPortLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: extremeStackingPortLinkSpeed.setDescription('The Speed of the stacking port link in bps. The speed will be zero if the link is not up')
extremeStackingPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeStackingPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: extremeStackingPortLinkStatus.setDescription('The Link status of the stacking port link ')
extremeStackableTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 33, 4))
extremeStackTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 33, 4, 0))
extremeStackMemberOverheat = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 33, 4, 0, 1)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("SNMPv2-MIB", "sysDescr"), ("EXTREME-SYSTEM-MIB", "extremeCurrentTemperature"), ("EXTREME-STACKING-MIB", "extremeStackMemberSlotId"))
if mibBuilder.loadTexts: extremeStackMemberOverheat.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberOverheat.setDescription('The extremeStackMemberOverheat notification is generated when the temperature of the stack member reaches the threshold temperature')
extremeStackMemberStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 33, 4, 0, 2)).setObjects(("EXTREME-STACKING-MIB", "extremeStackMemberSlotId"), ("EXTREME-STACKING-MIB", "extremeStackMemberOperStatus"))
if mibBuilder.loadTexts: extremeStackMemberStatusChanged.setStatus('current')
if mibBuilder.loadTexts: extremeStackMemberStatusChanged.setDescription('The extremeStackMemberStatusChanged notification is generated when the operational status of the stack member changes')
extremeStackingPortStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 33, 4, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("EXTREME-STACKING-MIB", "extremeStackingPortRemoteMac"), ("EXTREME-STACKING-MIB", "extremeStackingPortLinkSpeed"), ("EXTREME-STACKING-MIB", "extremeStackingPortLinkStatus"))
if mibBuilder.loadTexts: extremeStackingPortStatusChanged.setStatus('current')
if mibBuilder.loadTexts: extremeStackingPortStatusChanged.setDescription('The extremeStackingPortStatusChanged notification is generated when the operational status of the stacking port changes')
mibBuilder.exportSymbols("EXTREME-STACKING-MIB", extremeStackMemberMgmtIpAddress=extremeStackMemberMgmtIpAddress, extremeStackable=extremeStackable, extremeStackMemberRole=extremeStackMemberRole, extremeStackableTraps=extremeStackableTraps, extremeStackingPortStatusChanged=extremeStackingPortStatusChanged, extremeStackMemberEntPhysicalIndex=extremeStackMemberEntPhysicalIndex, extremeStackMemberAutoConfig=extremeStackMemberAutoConfig, extremeStackMemberBootRomVersion=extremeStackMemberBootRomVersion, extremeStackMemberCurConfig=extremeStackMemberCurConfig, extremeStackMemberMACAddress=extremeStackMemberMACAddress, extremeStackMemberOverheat=extremeStackMemberOverheat, extremeStackMemberStackPriority=extremeStackMemberStackPriority, extremeStackMemberStackStatus=extremeStackMemberStackStatus, extremeStackMemberTable=extremeStackMemberTable, extremeStackMemberSysLocation=extremeStackMemberSysLocation, extremeStackingPortEntry=extremeStackingPortEntry, extremeStackDetection=extremeStackDetection, extremeStackMemberSecImageVersion=extremeStackMemberSecImageVersion, extremeStackingPortLinkSpeed=extremeStackingPortLinkSpeed, PYSNMP_MODULE_ID=extremeStackable, extremeStackMemberEntry=extremeStackMemberEntry, extremeStackingPortIfIndex=extremeStackingPortIfIndex, extremeStackingPortRemoteMac=extremeStackingPortRemoteMac, extremeStackMemberOperStatus=extremeStackMemberOperStatus, extremeStackMemberPriImageVersion=extremeStackMemberPriImageVersion, extremeStackTrapsPrefix=extremeStackTrapsPrefix, extremeStackMemberSlotId=extremeStackMemberSlotId, extremeStackingPortLinkStatus=extremeStackingPortLinkStatus, extremeStackMemberCurImageVersion=extremeStackMemberCurImageVersion, extremeStackingPortTable=extremeStackingPortTable, extremeStackMemberStatusChanged=extremeStackMemberStatusChanged, extremeStackMemberType=extremeStackMemberType, extremeStackMemberConfigSelected=extremeStackMemberConfigSelected, extremeStackMemberImageSelected=extremeStackMemberImageSelected)
