#
# PySNMP MIB module DSX-TE1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSX-TE1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
nndsxT1E1IfGroup, = mibBuilder.importSymbols("DSX-TC-MIB", "nndsxT1E1IfGroup")
ntEnterpriseDataTasmanInterfaces, = mibBuilder.importSymbols("NT-ENTERPRISE-DATA-MIB", "ntEnterpriseDataTasmanInterfaces")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, iso, MibIdentifier, Counter64, Bits, Integer32, Counter32, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "iso", "MibIdentifier", "Counter64", "Bits", "Integer32", "Counter32", "Gauge32", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
nndsxT1E1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1))
nndsxT1E1MIB.setRevisions(('1999-04-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nndsxT1E1MIB.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: nndsxT1E1MIB.setLastUpdated('9904230000Z')
if mibBuilder.loadTexts: nndsxT1E1MIB.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: nndsxT1E1MIB.setContactInfo(' Nortel Networks 8200 Dixie Road Brampton, Ontario L6T 5P6 Canada 1-800-4Nortel www.nortelnetworks.com ')
if mibBuilder.loadTexts: nndsxT1E1MIB.setDescription(' Interface MIB definitions for T1/E1 interface modules.')
nndsxT1E1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2))
nndsxT1E1TrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 1))
nndsxT1E1Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 0))
nndsxT1E1IfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1))
nndsxT1E1IfStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2))
nndsxT1E1IfStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3))
nndsxT1E1IfConfigLineTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineTable.setDescription('A list of T1/E1 interfaces currently configured.')
nndsxT1E1IfConfigLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"))
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineEntry.setDescription('An entry containing configuration for each T1/E1 interface.')
nndsxT1E1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nndsxT1E1IfIndex.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIndex.setDescription('An integer value which is an index in to the entries of ifTable (MIB-II) whose interface type is ds1')
nndsxT1E1IfConfigServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigServiceMode.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigServiceMode.setDescription('Indicates the T1/E1 interface is in service if it is TRUE. ')
nndsxT1E1IfConfigLineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linemode-csu", 1), ("linemode-dsx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineMode.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineMode.setDescription('Line Mode for this T1/E1 interface')
nndsxT1E1IfConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("linetype-esf", 2), ("linetype-d4", 3), ("linetype-e1crcmf", 5), ("linetype-e1mf", 6), ("linetype-e1unframed", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineType.setDescription('This variable indicates the variety of T1/E1 interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: esf Extended SuperFrame DS1 d4 AT&T D4 format DS1 --*************************************************************************** -- Added by Smita , Wipro Technologies, to incorporate an OE1 card e1-MF G.704 (Table 4a) with TS16 multiframing enabled e1-CRC-MF G.704 (Table 4b) with TS16 multiframing enabled')
nndsxT1E1IfConfigLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 3))).clone(namedValues=NamedValues(("linecode-b8zs", 2), ("linecode-ami", 5), ("linecode-hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineCode.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigLineCode.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. b8zs refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. ami refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density re- quirements, such as inverting HDLC data. --************************************************************************ -- Added by Smita , Wipro Technologies, to incorporate an OE1 card E1 links, with or without CRC, use dsx1HDB3 or dsx1AMI.')
nndsxT1E1IfConfigLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lbo-zero-db", 1), ("lbo-75-db", 2), ("lbo-15-db", 3), ("lbo-225-db", 4), ("lbo-12-db", 5), ("lbo-43-db", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigLBO.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigLBO.setDescription('Signal attenuation at 772 kHz lbo-zero-db carrier advised LBO code A 0.0 - 5.5 db lbo-75-db carrier advised LBO code B 7.5 - 13.0 db lbo-15-db carrier advised LBO code C 15.0 - 22.0 db lbo-12-db carrier advised LBO code for E1 short haul lbo-43-db carrier advised LBO code for E1 long haul This variable can be set only for CSU linemode')
nndsxT1E1IfConfigCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cable-length-none", 0), ("cable-length-0-133-or-0-110", 1), ("cable-length-133-266-or-110-220", 2), ("cable-length-266-399-or-220-330", 3), ("cable-length-399-533-or-330-440", 4), ("cable-length-533-655-or-440-550", 5), ("cable-length-550-660", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigCableLength.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigCableLength.setDescription('This variable specifies the length of the cable in feet.')
nndsxT1E1IfConfigRaiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rai-gen-enable", 1), ("rai-det-enable", 2), ("rai-gen-det-enable", 3), ("rai-disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigRaiAlarm.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigRaiAlarm.setDescription('Configurition of Remote Alarm Indication Alarm generation and detection.')
nndsxT1E1IfConfigTransmitClock = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timing-line", 1), ("timing-internal", 2), ("timing-backplane", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigTransmitClock.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigTransmitClock.setDescription("The source of Transmit Clock. 'timing-line' indicates that the recovered re- ceive clock is used as the transmit clock. 'timing-internal' indicates that a local clock source is used.")
nndsxT1E1IfConfigTimeSlotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfConfigTimeSlotMap.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigTimeSlotMap.setDescription('Time slot map of the T1/E1 line that are being used if it is used corresponding bit position is set.')
nndsxT1E1IfConfigCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cable-type-none", 0), ("cable-type-coax", 1), ("cable-type-twistedpair", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfConfigCableType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigCableType.setDescription("The cable type that is being used. 'cable-type-coax' indicates that the cable is coaxial and the impedance is 75 ohm 'cable-type-twistedpair' indicates that the cable is a twisted pair and the impedance is 120 ohm.")
nndsxT1E1IfCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfCircuitId.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfCircuitId.setDescription('')
nndsxT1E1IfContactInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfContactInfo.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfContactInfo.setDescription('')
nndsxT1E1IfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 76))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfDescription.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfDescription.setDescription('')
nndsxT1E1IfConfigJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("jitter-none", 0), ("jitter-disable", 1), ("jitter-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigJitter.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigJitter.setDescription('Applicable only for E1 interface. Enable/Disable jitter attenuation at LIU. ')
nndsxT1E1IfConfigAlarmHierarchy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigAlarmHierarchy.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigAlarmHierarchy.setDescription('Enable/Disable alarm hierarchy for T1/E1 interface.')
nndsxT1E1IfConfigFdlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 2), )
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdlTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdlTable.setDescription('A list of T1/E1 interface currently configured.')
nndsxT1E1IfConfigFdlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 2, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfConfigFdlEntry"))
nndsxT1E1IfConfigFdlEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdlEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdlEntry.setDescription('Configurable Facility Data Link (FDL) field for enable/disable the FDL utility on T1/E1 interface.')
nndsxT1E1IfConfigFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fdl-ansi-only", 1), ("fdl-att-only", 2), ("fdl-ansi-att", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdl.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdl.setDescription('The configuration FDL type fdl-ansi-only - only supports ANSI FDL , fdl-att-only only supports ATT FDL, fdl-ansi-att supports both ANSI and ATT FDL.')
nndsxT1E1IfConfigFdlCsuDsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fdl-csu", 1), ("fdl-dsu", 2), ("fdl-csudsu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdlCsuDsuType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfConfigFdlCsuDsuType.setDescription('The configuration of the type of equipment fdl-csu - responds to only CSU FDL requests fdl-dsu - responds to only DSU FDL requests fdl-csudsu - responds to both CSU and DSU requests.')
nndsxT1E1IfAlarmConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3))
nndsxT1E1IfAlarmThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigTable.setDescription('A list of T1/E1 interface alarm threshold configuration parameters.')
nndsxT1E1IfAlarmThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"), (0, "DSX-TE1-MIB", "nndsxT1E1IfAlarmThresholdConfigIndex"))
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigEntry.setDescription('An entry containing alarm configuration parameters for each T1/E1 interface. ')
nndsxT1E1IfAlarmThresholdConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigIndex.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigIndex.setDescription('Index of the Threshold Alarms 1 - 10.')
nndsxT1E1IfAlarmThresholdConfigObject = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("te1-object-none", 0), ("te1-object-eev", 1), ("te1-object-es", 2), ("te1-object-uas", 3), ("te1-object-bes", 4), ("te1-object-ses", 5), ("te1-object-lofc", 6), ("te1-object-css", 7), ("te1-object-bpv", 8), ("te1-object-oof", 9), ("te1-object-crc", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigObject.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigObject.setDescription('Threshold alarm - variables being monitored.')
nndsxT1E1IfAlarmThresholdConfigSamplingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigSamplingInterval.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigSamplingInterval.setDescription('Sampling Interval is the time between each sampling period.')
nndsxT1E1IfAlarmThresholdConfigSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sample-absolute", 1), ("sample-delta", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigSampleType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigSampleType.setDescription('Threshold Alarm: Sampling type sample-absolute - compares the monitored variable value againist the thresholds, sample-delta - compares the monitored variable value change from previous interval against thresholds.')
nndsxT1E1IfAlarmThresholdConfigRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigRisingThreshold.setDescription('Threshold Alarm: Rising threshold limit ')
nndsxT1E1IfAlarmThresholdConfigFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigFallingThreshold.setDescription('Threshold Alarm: Falling threshold limit ')
nndsxT1E1IfAlarmThresholdConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigEnable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmThresholdConfigEnable.setDescription('Config Enable: If TRUE then configure the threshold. FALSE then remove the threshold.')
nndsxT1E1IfTestConfigTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4), )
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigTable.setDescription('A list of T1/E1 interface test configuration parameters.')
nndsxT1E1IfTestConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfTestConfigEntry"))
nndsxT1E1IfTestConfigEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigEntry.setDescription('An entry containing test configuration parameters for each currently T1/E1 interface.')
nndsxT1E1IfTestConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("no-test", 1), ("payload-loopback-test", 2), ("line-loopback-test", 3), ("local-loopback-test", 4), ("line-local-loopback-test", 5), ("inward1-loopback-test", 6), ("inward1-analog-loopback-test", 7), ("inward2-loopback-test", 8), ("pattern-test", 9), ("remote-lpup-test", 10), ("remote-lpdn-test", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigType.setDescription('Test type. Specifies the type of test to execute on this T1/E1 interface. To perform no-test, payload-loopback-test, line-loopback-test only TestType is mandatory. To perform pattern-test, ConfigTime and ConfigPattern are mandatory. To perform remote-lpup-test and remote-lpdn-test, ConfigLoopCode is mandatory')
nndsxT1E1IfTestConfigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigTime.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigTime.setDescription('Test time. when set to 0, test time is unlimited. Otherwise duration of test, specified in seconds.')
nndsxT1E1IfTestConfigPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("pattern-none", 0), ("pattern-all-ones", 1), ("pattern-all-zeros", 2), ("pattern-alternating", 3), ("pattern-3in24", 4), ("pattern-1in3", 5), ("pattern-1in5", 6), ("pattern-1in7", 7), ("pattern-smartjack-lpup", 8), ("pattern-smartjack-lpdown", 9), ("pattern-user1", 10), ("pattern-user2", 11), ("pattern-29minus1", 12), ("pattern-215minus1", 13), ("pattern-220minus1", 14), ("pattern-qrw", 15), ("pattern-223minus1", 16), ("pattern-std-setcode", 17), ("pattern-std-resetcod", 18), ("pattern-alt-setcode", 19), ("pattern-alt-resetcod", 20), ("pattern-211minus1", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigPattern.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigPattern.setDescription('Bit Pattern type used in testing T1/E1 for Pattern Test.')
nndsxT1E1IfTestConfigLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("loopcode-none", 1), ("loopcode-line-standard", 2), ("loopcode-line-alternate", 3), ("loopcode-line-ansiFDL", 4), ("loopcode-payload-ATTFDL", 6), ("loopcode-payload-ansiFDL", 7), ("loopcode-v54", 8), ("loopcode-smartjack", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigLoopCode.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestConfigLoopCode.setDescription(' Type of loopcode is used for loopback test.')
nndsxT1E1IfMonitorPortConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monitor-none", 1), ("monitor-enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nndsxT1E1IfMonitorPortConfigType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfMonitorPortConfigType.setDescription('Configure monitoring on the T1/E1 link')
nndsxT1E1IfMonitorPortTxInjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inject-none", 1), ("inject-sendtype", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nndsxT1E1IfMonitorPortTxInjectType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfMonitorPortTxInjectType.setDescription('Configure inject type on Tx')
nndsxT1E1IfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfStatusTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfStatusTable.setDescription('A list of T1/E1 interface status entries')
nndsxT1E1IfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 1, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfStatusEntry"))
nndsxT1E1IfStatusEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfStatusEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfStatusLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("rraiStatus", 2), ("traiStatus", 3), ("rlosStatus", 4), ("risStatus", 5), ("rexzStatus", 6), ("reserved3", 7), ("reserved4", 8), ("reserved5", 9), ("lorcStatus", 10), ("tpdeStatus", 11), ("reserved6", 12), ("reserved7", 13), ("sendLineCode", 14), ("sendPayLoadCode", 15), ("sendResetCode", 16), ("sendTE1Code", 17), ("sendPattern", 18), ("reserved8", 19), ("rcvTestCode", 20), ("reserved9", 21), ("reserved10", 22), ("reserved11", 23), ("loopbackStatus", 24), ("reserved12", 25), ("reserved13", 26), ("taisStatus", 27), ("raisStatus", 28), ("reserved14", 29), ("rlofStatus", 30), ("reserved15", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfStatusLineStatus.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfStatusLineStatus.setDescription('The summary of the status RRAIStatus - Recieve RAI (Recieve Alarm Indication), TRAIStatus - Transmit RAI , RLOSStatus - Recieve Loss Of Sync, RISStatus - Recieve Idle Signal REXZStatus - Recieve Excessive Zeros, LORCStatus - Loss Of Recive Clock (LORC), TDEStatus - transmit pulse density, SendLineCode - transmit linecode SendPayLoadCode - transmit paylode code SendResetCode - transmit reset code, SendTE1Code - transmit T1/E1 linecode, SendPattern - transmit T1/E1 Pattern, RcvTestCode - recive test code, LoopbackStatus - Status of Loop back, TAISStatus - Transmit Alarm Indication Siganl, RAISStatus - Recieve Alarm Indication Signal, LOFStatus - Loss Of Frame. ')
nndsxT1E1IfStatusTransmitClock = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("timing-line", 1), ("timing-internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfStatusTransmitClock.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfStatusTransmitClock.setDescription("The source of Tranmit Clock. 'timing-line' indicates that the recovered re- ceive clock is used as the transmit clock. 'timing-internal' indicates that a local clock source is used.")
nndsxT1E1IfAlarmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusTable.setDescription('A list of T1/E1 interface alarm status entries')
nndsxT1E1IfAlarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 2, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfAlarmStatusEntry"))
nndsxT1E1IfAlarmStatusEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusEntry.setDescription('An entry containing alarm status for each T1/E1 interface.')
nndsxT1E1IfAlarmStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1), Bits().clone(namedValues=NamedValues(("rraiAlarm", 0), ("traiAlarm", 1), ("raisAlarm", 2), ("taisAlarm", 3), ("rlofAlarm", 4), ("rlosAlarm", 5), ("loopbackStateAlarm", 6), ("rcvTestCode", 7), ("risAlarm", 8), ("rexzAlarm", 9), ("rfebeAlarm", 10), ("rpeAlarm", 11), ("rcpeAlarm", 12), ("lorcAlarm", 13), ("tpdeAlarm", 14), ("tfebeAlarm", 15), ("ibTestAlarm", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusAlarmStatus.setDescription('Alarm Status of T1/E1 interface. RRAI - Recieve Rx Alarm Indication, TRAI - Transmit Rx Alarm Indication, RAIS - Recieve Alarm Indication Signal, TAIS - Transmit Alarm Indication Signal, RLOF - Recieve Loss Of Frame, RLOS - Recieve Loss Of Signal, Loopback - if looped back state is true, RIS - Recieve Idle Signal, REXZ - Recieve Excessive Zeros, RFEBE - Recieve Far End Block Error, RPE - Recieve Parity Error, RCPE - Recieve C-Parity Error, LORC - Loss Of Recieve Clock, TPDE - Transmit Pulse DEnsity, TFEBE - Transmit Far End Block Error, ibTest - InBand Test running if true.')
nndsxT1E1IfAlarmStatusThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2), Bits().clone(namedValues=NamedValues(("threshold1", 0), ("threshold2", 1), ("threshold3", 2), ("threshold4", 3), ("threshold5", 4), ("threshold6", 5), ("threshold7", 6), ("threshold8", 7), ("threshold9", 8), ("threshold10", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAlarmStatusThresholdStatus.setDescription('Status of the user configurable threshold Alarms 1 means present.')
nndsxT1E1IfTestStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3), )
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfTestStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfTestStatusEntry"))
nndsxT1E1IfTestStatusEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusEntry.setDescription('An entry containing test status entry for each T1/E1 interface.')
nndsxT1E1IfTestStatusTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("testtype-notest", 1), ("testtype-payload-loopback", 2), ("testtype-line-loopback", 3), ("testtype-local-loopback", 4), ("testtype-line-local-loopback", 5), ("testtype-inward1-loopback", 6), ("testtype-inward1-analog-loopback", 7), ("testtype-inward2-loopback", 8), ("testtype-pattern", 9), ("testtype-remote-lpup", 10), ("testtype-remote-lpdn", 11), ("monitor-inject", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestType.setDescription('Test type initiated on T1/E1 line.')
nndsxT1E1IfTestStatusTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestTime.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestTime.setDescription('Time elapsed since the test started on T1/E1 line ')
nndsxT1E1IfTestStatusTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("test-state-idle", 1), ("test-state-searching", 2), ("test-state-locked", 3), ("test-state-relocked", 4), ("test-state-inprogress", 5), ("test-state-passed", 6), ("test-state-failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestState.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestState.setDescription('Current state of the running test on T1/E1 line ')
nndsxT1E1IfTestStatusTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("pattern-none", 0), ("pattern-all-ones", 1), ("pattern-all-zeros", 2), ("pattern-alternating", 3), ("pattern-3in24", 4), ("pattern-1in3", 5), ("pattern-1in5", 6), ("pattern-1in7", 7), ("pattern-smartjack-lpup", 8), ("pattern-smartjack-lpdown", 9), ("pattern-user1", 10), ("pattern-user2", 11), ("pattern-29minus1", 12), ("pattern-215minus1", 13), ("pattern-220minus1", 14), ("pattern-qrw", 15), ("pattern-223minus1", 16), ("pattern-std-setcode", 17), ("pattern-std-resetcod", 18), ("pattern-alt-setcode", 19), ("pattern-alt-resetcod", 20), ("pattern-211minus1", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestPattern.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusTestPattern.setDescription('Bit Pattern generated to test the T1/E1, only relevent to Pattern Test. ')
nndsxT1E1IfTestStatusLockedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusLockedSeconds.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusLockedSeconds.setDescription('Count of seconds, during which the pattern is synchronized ')
nndsxT1E1IfTestStatusSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusSyncLossCount.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusSyncLossCount.setDescription(' Counter for the pattern synchronization losses ')
nndsxT1E1IfTestStatusErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusErrorCount.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusErrorCount.setDescription('Counter for the Bit error during the test ')
nndsxT1E1IfTestStatusLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("loopcode-none", 1), ("loopcode-line-standard", 2), ("loopcode-line-alternate", 3), ("loopcode-line-ansiFDL", 4), ("loopcode-payload-ATTFDL", 6), ("loopcode-payload-ansiFDL", 7), ("loopcode-v54", 8), ("loopcode-smartjack", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusLoopCode.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfTestStatusLoopCode.setDescription('The loop codes transmitted on the T1/E1 interface Only relevent to the Remote LoopUp and Remote LoopDown tests.')
nndsxT1E1IfLastTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4), )
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTable.setDescription('A list of T1/E1 interface previous test status entries')
nndsxT1E1IfLastTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfLastTestResultEntry"))
nndsxT1E1IfLastTestResultEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultEntry.setDescription('An entry containing previous test status entry for each T1/E1 interface.')
nndsxT1E1IfLastTestResultTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 10, 11))).clone(namedValues=NamedValues(("testtype-notest", 1), ("testtype-payload-loopback", 2), ("testtype-line-loopback", 3), ("testtype-pattern", 9), ("testtype-remote-lpup", 10), ("testtype-remote-lpdn", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestType.setDescription('Status of the previous test conducted on this T1/E1 interface, this field corresponds to Type of Test conducted')
nndsxT1E1IfLastTestResultTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestTime.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestTime.setDescription('Duration of the test conducted in previous test ')
nndsxT1E1IfLastTestResultTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("test-state-idle", 1), ("test-state-searching", 2), ("test-state-locked", 3), ("test-state-relocked", 4), ("test-state-inprogress", 5), ("test-state-passed", 6), ("test-state-failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestState.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestState.setDescription(' This field shows in which state previous test was ended ')
nndsxT1E1IfLastTestResultTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("pattern-none", 0), ("pattern-all-ones", 1), ("pattern-all-zeros", 2), ("pattern-alternating", 3), ("pattern-3in24", 4), ("pattern-1in3", 5), ("pattern-1in5", 6), ("pattern-1in7", 7), ("pattern-smartjack-lpup", 8), ("pattern-smartjack-lpdown", 9), ("pattern-user1", 10), ("pattern-user2", 11), ("pattern-29minus1", 12), ("pattern-215minus1", 13), ("pattern-220minus1", 14), ("pattern-qrw", 15), ("pattern-223minus1", 16), ("pattern-std-setcode", 17), ("pattern-std-resetcod", 18), ("pattern-alt-setcode", 19), ("pattern-alt-resetcod", 20), ("pattern-211minus1", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestPattern.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultTestPattern.setDescription('If the previous test conducted was pattern test, This field will have type of pattern used to test. ')
nndsxT1E1IfLastTestResultLockedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultLockedSeconds.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultLockedSeconds.setDescription('Duration in which signal was synchronized while under test. ')
nndsxT1E1IfLastTestResultSyncLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultSyncLossCount.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultSyncLossCount.setDescription('Counter for the pattern synchronization losses in previous test results.')
nndsxT1E1IfLastTestResultErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultErrorCount.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultErrorCount.setDescription('Counter for the Bit error during the test in previous test')
nndsxT1E1IfLastTestResultLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("loopcode-none", 1), ("loopcode-line-standard", 2), ("loopcode-line-alternate", 3), ("loopcode-line-ansiFDL", 4), ("loopcode-payload-ATTFDL", 6), ("loopcode-payload-ansiFDL", 7), ("loopcode-v54", 8), ("loopcode-smartjack", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultLoopCode.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfLastTestResultLoopCode.setDescription('Type loopcode used to put interface under remote loop back')
nndsxT1E1IfArchiveStatsValidIntervalsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfArchiveStatsValidIntervalsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfArchiveStatsValidIntervalsTable.setDescription('Number of intervals available in archive statistics table for this T1/E1 interface')
nndsxT1E1IfArchiveStatsValidIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfArchiveStatsValidIntervalsEntry"))
nndsxT1E1IfArchiveStatsValidIntervalsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfArchiveStatsValidIntervalsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfArchiveStatsValidIntervalsEntry.setDescription('An entry containing statistics entry for each T1/E1 interface.')
nndsxT1E1IfAnsiArchiveStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveStatsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveStatsValidIntervals.setDescription('Total number of archived statistics collected according to ANSI standards.')
nndsxT1E1IfAttArchiveStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsValidIntervals.setDescription('Total number of archived statistics collected according to ATT standards.')
nndsxT1E1IfItutArchiveStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsValidIntervals.setDescription('Total number of archived statistics collected according to ITU-T standards.')
nndsxT1E1IfIetfArchiveStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsValidIntervals.setDescription(' Total number of archived statistics collected according to IETF standards.')
nndsxT1E1IfUserTotalStatsValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsValidDays.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsValidDays.setDescription('Total number of days archived statistics collected according to User definations.')
nndsxT1E1IfUserArchiveStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsValidIntervals.setDescription(' User Archive Stats Valid Interval. Setting this variable to 0 will clear all the User Statistics Tables ')
nndsxT1E1IfAnsiStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2))
nndsxT1E1IfAttStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3))
nndsxT1E1IfItutStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4))
nndsxT1E1IfIetfStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5))
nndsxT1E1IfUserStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6))
nndsxT1E1IfAnsiCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsTable.setDescription('Statistics collected according ANSI standards and collected in current 900 secondss period.')
nndsxT1E1IfAnsiCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfAnsiCurrentStatsEntry"))
nndsxT1E1IfAnsiCurrentStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsEntry.setDescription('Statistics collected in current 900 secs ( i.e. 15 mins) kept in this table')
nndsxT1E1IfAnsiCurrentStatsUASState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsUASState.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsUASState.setDescription('The State of T1/E1 line according to ANSI standards')
nndsxT1E1IfAnsiCurrentStatsTimeInCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsTimeInCurrent.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentStatsTimeInCurrent.setDescription('The number of seconds that have elapsed since the beginning of the current error measurement period')
nndsxT1E1IfAnsiCurrentPathStatsCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsCV.setDescription('The number of Path Coding Violations encoun- tered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAnsiCurrentPathStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsES.setDescription('The number of Errored Seconds, encountered by a T1/E1 interface in the current 15 minute inter- val. ')
nndsxT1E1IfAnsiCurrentPathStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsSES.setDescription('The number of Severely Errored Seconds encoun- tered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAnsiCurrentPathStatsSAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsSAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsSAS.setDescription('Seconds with Severe Alarms')
nndsxT1E1IfAnsiCurrentPathStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsCSS.setDescription('The number of Controlled Slip Seconds encoun- tered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAnsiCurrentPathStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentPathStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface in the current 15 minute in- terval. ')
nndsxT1E1IfAnsiCurrentLineStatsCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentLineStatsCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentLineStatsCV.setDescription('The number of Line Coding Violations encoun- tered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAnsiCurrentLineStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentLineStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentLineStatsES.setDescription('The number of Errored Seconds, encountered by a T1/E1 interface in the current 15 minute inter- val. ')
nndsxT1E1IfAnsiCurrentLineStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentLineStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiCurrentLineStatsSES.setDescription('The number of Severely Errored Seconds encoun- tered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAnsiTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2), )
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalStatsTable.setDescription('Table for the Total Statistics over past 24 hrs')
nndsxT1E1IfAnsiTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfAnsiTotalStatsEntry"))
nndsxT1E1IfAnsiTotalStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalStatsEntry.setDescription('Table for the Total Statistics over past 24 hrs')
nndsxT1E1IfAnsiTotalPathStatsCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsCV.setDescription('The number of Path Coding Violations encoun- tered by a T1/E1 interface in the previous 24 hour interval. ')
nndsxT1E1IfAnsiTotalPathStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsES.setDescription('The number of Errored Seconds encountered by a T1/E1 interface in the previous 24 hour interval. ')
nndsxT1E1IfAnsiTotalPathStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsSES.setDescription('The number of Severely Errored Seconds encoun- tered by a T1/E1 interface in the previous 24 hour interval. ')
nndsxT1E1IfAnsiTotalPathStatsSAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsSAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsSAS.setDescription('Total No seconds with Severe Alarms in past 24 hrs')
nndsxT1E1IfAnsiTotalPathStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsCSS.setDescription('The number of Controlled Slip Seconds encoun- tered by a T1/E1 interface in the previous 24 hour interval. ')
nndsxT1E1IfAnsiTotalPathStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalPathStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface in the previous 24 hour in- terval. ')
nndsxT1E1IfAnsiTotalLineStatsCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalLineStatsCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalLineStatsCV.setDescription('The number of Line Coding Violations encoun- tered by a T1/E1 interface in the previous 24 hour interval. ')
nndsxT1E1IfAnsiTotalLineStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalLineStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalLineStatsES.setDescription('The number of Errored Seconds encountered by a T1/E1 interface in the previous 24 hour interval. ')
nndsxT1E1IfAnsiTotalLineStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalLineStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiTotalLineStatsSES.setDescription('The number of Severely Errored Seconds encoun- tered by a T1/E1 interface in the previous 24 hour interval. ')
nndsxT1E1IfAnsiArchiveIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3), )
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfAnsiArchiveIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"), (0, "DSX-TE1-MIB", "nndsxT1E1IfAnsiArchiveStatsInterval"))
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfAnsiArchiveStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveStatsInterval.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveStatsInterval.setDescription('Number of Intervals available in archive table ')
nndsxT1E1IfAnsiArchiveIntervalPathStatsCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsCV.setDescription('The number of Path Coding Violations encoun- tered by a T1 interface in the archive intervals. ')
nndsxT1E1IfAnsiArchiveIntervalPathStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsES.setDescription('The number of Errored Seconds, encountered by a DS3 interface in the archive intervals. ')
nndsxT1E1IfAnsiArchiveIntervalPathStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsSES.setDescription('The number of Severely Errored Seconds encoun- tered by a T1/E1 interface in the archive intervals . ')
nndsxT1E1IfAnsiArchiveIntervalPathStatsSAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsSAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsSAS.setDescription('The number of Severely Errored Framing Seconds encountered by a T1/E1 interface in the archive intervals. ')
nndsxT1E1IfAnsiArchiveIntervalPathStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsCSS.setDescription('The number of Controlled Slip Seconds encountered by a T1/E1 interface in the archive intervals. ')
nndsxT1E1IfAnsiArchiveIntervalPathStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalPathStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface in the archive intervals. ')
nndsxT1E1IfAnsiArchiveIntervalLineStatsCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalLineStatsCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalLineStatsCV.setDescription('The number of Line Coding Violations encoun- tered by a T1/E1 interface in the archive intervals. ')
nndsxT1E1IfAnsiArchiveIntervalLineStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalLineStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalLineStatsES.setDescription('The number of Errored Seconds, encountered by a T1/E1 interface in the archive intervals. ')
nndsxT1E1IfAnsiArchiveIntervalLineStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 2, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalLineStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAnsiArchiveIntervalLineStatsSES.setDescription('The number of Severely Errored Seconds encoun- tered by a T1/E1 interface in the archive intervals . ')
nndsxT1E1IfAttCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsTable.setDescription('A list of T1/E1 interface statistics for current interval')
nndsxT1E1IfAttCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfAttCurrentStatsEntry"))
nndsxT1E1IfAttCurrentStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsEntry.setDescription('An entry containing statistics for each currently active T1/E1 interface.')
nndsxT1E1IfAttCurrentStatsUASState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsUASState.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsUASState.setDescription('The Current state of availablity of T1/E1 interface')
nndsxT1E1IfAttCurrentStatsTimeInCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsTimeInCurrent.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsTimeInCurrent.setDescription('The number of seconds that have elapsed since the beginning of the far end current error-measurement period. ')
nndsxT1E1IfAttCurrentStatsEEV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsEEV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsEEV.setDescription('The number of Far Far End Errored EVents en- countered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAttCurrentStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsES.setDescription('The number of Far Far End Errored Seconds en- countered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAttCurrentStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface in the current 15 minute in- terval. ')
nndsxT1E1IfAttCurrentStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsSES.setDescription('The number of Far End Severely Errored Seconds encountered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfAttCurrentStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttCurrentStatsCSS.setDescription('The number of Far End Controlled Slip Seconds encountered by a T1/E1 interface in the current interval. ')
nndsxT1E1IfAttTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 2), )
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfAttTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 2, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfAttTotalStatsEntry"))
nndsxT1E1IfAttTotalStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfAttTotalStatsEEV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsEEV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsEEV.setDescription('Invoke the configured test. ')
nndsxT1E1IfAttTotalStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsES.setDescription('The number of Near End Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfAttTotalStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfAttTotalStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsSES.setDescription('The number of Near End Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfAttTotalStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttTotalStatsCSS.setDescription('The number of Near End Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfAttArchiveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3), )
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfAttArchiveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"), (0, "DSX-TE1-MIB", "nndsxT1E1IfAttArchiveInterval"))
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfAttArchiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveInterval.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveInterval.setDescription('Time interval for archiving the statistics. ')
nndsxT1E1IfAttArchiveStatsEEV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsEEV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsEEV.setDescription('Invoke the configured test. ')
nndsxT1E1IfAttArchiveStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsES.setDescription('The number of Near End Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfAttArchiveStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfAttArchiveStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsSES.setDescription('The number of Near End Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfAttArchiveStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfAttArchiveStatsCSS.setDescription('The number of Near End Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfItutCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsTable.setDescription('A list of T1/E1 interface statistics for current interval')
nndsxT1E1IfItutCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfItutCurrentStatsEntry"))
nndsxT1E1IfItutCurrentStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsEntry.setDescription('An entry containing statistics for each currently active T1/E1 interface.')
nndsxT1E1IfItutCurrentStatsUASState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsUASState.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsUASState.setDescription('The Current state of availablity of T1/E1 interface')
nndsxT1E1IfItutCurrentStatsTimeInCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsTimeInCurrent.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsTimeInCurrent.setDescription('The number of seconds that have elapsed since the beginning of the far end current error-measurement period. ')
nndsxT1E1IfItutCurrentStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsES.setDescription('The number of Far Far End Errored Seconds en- countered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfItutCurrentStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface in the current 15 minute in- terval. ')
nndsxT1E1IfItutCurrentStatsBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsBBE.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsBBE.setDescription('The number of Background Block Errors encountered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfItutCurrentStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutCurrentStatsSES.setDescription('The number of Far End Severely Errored Seconds encountered by a T1/E1 interface in the current 15 minute interval. ')
nndsxT1E1IfItutTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 2), )
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfItutTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 2, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfItutTotalStatsEntry"))
nndsxT1E1IfItutTotalStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfItutTotalStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsES.setDescription('The number of Near End Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfItutTotalStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfItutTotalStatsBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsBBE.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsBBE.setDescription('The number of Background Block Errors (BBEs) encountered by a T1/E1 interface. ')
nndsxT1E1IfItutTotalStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutTotalStatsSES.setDescription('The number of Near End Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfItutArchiveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 3), )
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfItutArchiveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 3, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"), (0, "DSX-TE1-MIB", "nndsxT1E1IfItutArchiveInterval"))
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfItutArchiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveInterval.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveInterval.setDescription('Time interval for archiving the statistics. ')
nndsxT1E1IfItutArchiveStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsES.setDescription('The number of Near End Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfItutArchiveStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfItutArchiveStatsBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsBBE.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsBBE.setDescription('The number of Background Block Errors Errored Seconds (BESs)encountered by a T1/E1interface.')
nndsxT1E1IfItutArchiveStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfItutArchiveStatsSES.setDescription('The number of Near End Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfIetfCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfIetfCurrentStatsEntry"))
nndsxT1E1IfIetfCurrentStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfIetfCurrentStatsUASState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsUASState.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsUASState.setDescription('The Current state of availablity of T1/E1 interface.')
nndsxT1E1IfIetfCurrentStatsTimeInCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsTimeInCurrent.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsTimeInCurrent.setDescription('The number of seconds that have elapsed since the beginning of the IETF current error-measurement period. ')
nndsxT1E1IfIetfCurrentStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsES.setDescription('The number of IETF Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsSES.setDescription('The number of Far End Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsSEFS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsSEFS.setDescription('The number of IETF Severely Errored Framing Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsCSS.setDescription('The number of IETF Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsPCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsPCV.setDescription('The number of IETF Path Coding Violations reported via the far end block error count en- countered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsLES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsLES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsLES.setDescription('The number of IETF Line Errored Seconds en- countered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsBES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsBES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsDM = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsDM.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsDM.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfIetfCurrentStatsLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsLCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfCurrentStatsLCV.setDescription('Invoke the configured test. ')
nndsxT1E1IfIetfTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2), )
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfIetfTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfIetfTotalStatsEntry"))
nndsxT1E1IfIetfTotalStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfIetfTotalStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsES.setDescription('The number of IETF Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsSES.setDescription('The number of IETF Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsSEFS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsSEFS.setDescription('The number of IETF Severely Errored Framing Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsCSS.setDescription('The number of IETF Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsPCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsPCV.setDescription('The number of IETF Path Coding Violations reported via the far end block error count en- countered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsLES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsLES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsLES.setDescription('The number of IETF Line Errored Seconds en- countered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsBES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsBES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsDM = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsDM.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsDM.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfIetfTotalStatsLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsLCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfTotalStatsLCV.setDescription('Invoke the configured test. ')
nndsxT1E1IfIetfArchiveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3), )
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfIetfArchiveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"), (0, "DSX-TE1-MIB", "nndsxT1E1IfIetfArchiveStatsInterval"))
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfIetfArchiveStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsInterval.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsInterval.setDescription('The number of seconds that have elapsed since the beginning of the IETF current error-measurement period. ')
nndsxT1E1IfIetfArchiveStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsES.setDescription('The number of IETF Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsSES.setDescription('The number of IETF Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsSEFS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsSEFS.setDescription('The number of IETF Severely Errored Framing Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsCSS.setDescription('The number of IETF Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsPCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsPCV.setDescription('The number of IETF Path Coding Violations reported via the far end block error count en- countered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsLES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsLES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsLES.setDescription('The number of IETF Line Errored Seconds en- countered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsBES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsBES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsDM = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsDM.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsDM.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfIetfArchiveStatsLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 5, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsLCV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfIetfArchiveStatsLCV.setDescription('Invoke the configured test. ')
nndsxT1E1IfUserCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1), )
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfUserCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfUserCurrentStatsEntry"))
nndsxT1E1IfUserCurrentStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfUserCurrentStatsUASState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsUASState.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsUASState.setDescription('Current state of availablity of T1/E1 interface')
nndsxT1E1IfUserCurrentStatsTimeInCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsTimeInCurrent.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsTimeInCurrent.setDescription('The number of seconds that have elapsed since the beginning of the IETF current error-measurement period. ')
nndsxT1E1IfUserCurrentStatsEEV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsEEV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsEEV.setDescription('Invoke the configured test. ')
nndsxT1E1IfUserCurrentStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsES.setDescription('The number of Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfUserCurrentStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserCurrentStatsBES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsBES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a T1/E1 interface. ')
nndsxT1E1IfUserCurrentStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsSES.setDescription('The number of Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserCurrentStatsLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsLOFC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsLOFC.setDescription('Count of loss of frames. ')
nndsxT1E1IfUserCurrentStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsCSS.setDescription('The number of Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserCurrentStatsBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsBPV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsBPV.setDescription('The number of Bipolar Violation Error Event occurred for this interface. ')
nndsxT1E1IfUserCurrentStatsOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsOOF.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsOOF.setDescription('The number of Out of Frame Defect occurred for this interface. ')
nndsxT1E1IfUserCurrentStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsCRC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserCurrentStatsCRC.setDescription('The number of CRC Defects that occurred for this interface. ')
nndsxT1E1IfUserTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2), )
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsTable.setDescription('A list of T1/E1 interface test status entries')
nndsxT1E1IfUserTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"), (0, "DSX-TE1-MIB", "nndsxT1E1IfUserTotalStatsDay"))
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfUserTotalStatsDay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsDay.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsDay.setDescription('Total number of days elapsed since event recording started for this interface. ')
nndsxT1E1IfUserTotalStatsEEV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsEEV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsEEV.setDescription('Invoke the configured test. ')
nndsxT1E1IfUserTotalStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsES.setDescription('The number of Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfUserTotalStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserTotalStatsBES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsBES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a T1/E1 interface. ')
nndsxT1E1IfUserTotalStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsSES.setDescription('The number of Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserTotalStatsLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsLOFC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsLOFC.setDescription('Count of loss of frames. ')
nndsxT1E1IfUserTotalStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsCSS.setDescription('The number of Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserTotalStatsBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsBPV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsBPV.setDescription('The number of Bipolar Violation Error Event occurred for this interface. ')
nndsxT1E1IfUserTotalStatsOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsOOF.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsOOF.setDescription('The number of Out of Frame Defect occurred for this interface. ')
nndsxT1E1IfUserTotalStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsCRC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserTotalStatsCRC.setDescription('The number of Out of Frame Defect occurred for this interface. ')
nndsxT1E1IfUserLifetimeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3), )
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsTable.setDescription('Table maintained to keep the statistics for the whole lifetime of the system since it is first powered on.')
nndsxT1E1IfUserLifetimeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1), )
nndsxT1E1IfConfigLineEntry.registerAugmentions(("DSX-TE1-MIB", "nndsxT1E1IfUserLifetimeStatsEntry"))
nndsxT1E1IfUserLifetimeStatsEntry.setIndexNames(*nndsxT1E1IfConfigLineEntry.getIndexNames())
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfUserLifetimeStatsEEV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsEEV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsEEV.setDescription('The Total number of Error Events occured during since the system brought up')
nndsxT1E1IfUserLifetimeStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsES.setDescription('The number of Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfUserLifetimeStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserLifetimeStatsBES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsBES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a T1/E1 interface. ')
nndsxT1E1IfUserLifetimeStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsSES.setDescription('The number of Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserLifetimeStatsLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsLOFC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsLOFC.setDescription('Count of loss of frames. ')
nndsxT1E1IfUserLifetimeStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsCSS.setDescription('The number of Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserLifetimeStatsBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsBPV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsBPV.setDescription('The number of Bipolar Violation Error Event occurred for this interface. ')
nndsxT1E1IfUserLifetimeStatsOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsOOF.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsOOF.setDescription('The number of Out of Frame Defect occurred for this interface. ')
nndsxT1E1IfUserLifetimeStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsCRC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserLifetimeStatsCRC.setDescription('The number of Out of Frame Defect occurred for this interface. ')
nndsxT1E1IfUserArchiveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4), )
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsTable.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsTable.setDescription('The table maintained to keep last 24 hrs statistics in ')
nndsxT1E1IfUserArchiveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1), ).setIndexNames((0, "DSX-TE1-MIB", "nndsxT1E1IfIndex"), (0, "DSX-TE1-MIB", "nndsxT1E1IfUserArchiveStatsInterval"))
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsEntry.setDescription('An entry containing status entry for each currently active T1/E1 interface.')
nndsxT1E1IfUserArchiveStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsInterval.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsInterval.setDescription('The number of seconds that have elapsed since the beginning of the IETF current error-measurement period. ')
nndsxT1E1IfUserArchiveStatsEEV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsEEV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsEEV.setDescription('Error Events collected over each period of 15 mins')
nndsxT1E1IfUserArchiveStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsES.setDescription('The number of Errored Seconds encoun- tered by a T1/E1 interface. ')
nndsxT1E1IfUserArchiveStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsUAS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsUAS.setDescription('The number of Unavailable Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserArchiveStatsBES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsBES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a T1/E1 interface. ')
nndsxT1E1IfUserArchiveStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsSES.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsSES.setDescription('The number of Severely Errored Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserArchiveStatsLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsLOFC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsLOFC.setDescription('Count of loss of frames. ')
nndsxT1E1IfUserArchiveStatsCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsCSS.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsCSS.setDescription('The number of Controlled Slip Seconds encountered by a T1/E1 interface. ')
nndsxT1E1IfUserArchiveStatsBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsBPV.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsBPV.setDescription('The number of Bipolar Violation Error Event occurred for this interface. ')
nndsxT1E1IfUserArchiveStatsOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsOOF.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsOOF.setDescription('The number of Out of Frame Defect occurred for this interface. ')
nndsxT1E1IfUserArchiveStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 1, 3, 6, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsCRC.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1IfUserArchiveStatsCRC.setDescription('The number of Out of Frame Defect occurred for this interface. ')
nndsxT1E1Number = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nndsxT1E1Number.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1Number.setDescription(' This is the T1/E1 number of the interface from where this alarm is originating.')
nndsxT1E1Type = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("type-t1", 1), ("type-t1-within-ct3", 2), ("type-e1", 3), ("type-e1-within-ce3", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nndsxT1E1Type.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1Type.setDescription(' This variable indicates whether this T1/E1 interface is with in a T3/E3 or by itself.')
nndsxT1E1T3Number = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nndsxT1E1T3Number.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1T3Number.setDescription(" This variable is applicable only if dsxT1E1Type is 'type_t1_within_ct3' and it indicates the T3/E3 interface number this T1 belongs to.")
nndsxT1E1AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("te1-alarm-rais", 1), ("te1-alarm-rrai", 2), ("te1-alarm-roof", 3), ("te1-alarm-rlos", 4), ("te1-alarm-rlof", 5), ("te1-alarm-rexz", 6), ("te1-alarm-rfbe", 7), ("te1-alarm-lorc", 8), ("te1-alarm-tpde", 9), ("te1-alarm-tais", 10), ("te1-alarm-tblu", 11), ("te1-alarm-trai", 12), ("te1-alarm-ibtest", 13), ("te1-alarm-threshold1", 14), ("te1-alarm-threshold2", 15), ("te1-alarm-threshold3", 16), ("te1-alarm-threshold4", 17), ("te1-alarm-threshold5", 18), ("te1-alarm-threshold6", 19), ("te1-alarm-threshold7", 20), ("te1-alarm-threshold8", 21), ("te1-alarm-threshold9", 22), ("te1-alarm-threshold10", 23)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nndsxT1E1AlarmType.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1AlarmType.setDescription('Status of alarms for the T1/E1 interface RRAI - Recieve RAI (Recieve Alarm Indication), RLOS - Recieve Loss Of Sync, REXZ - Recieve Excessive Zeros, LORC - Loss Of Receive Clock (LORC), TPDE - transmit pulse density, TAIS - Transmit Alarm Indication Signal, RAIS - Recieve Alarm Indication Signal, RLOF - Recieve Loss Of Frame. RFBE - Recieve Frame Bit Error, ROOF - Recieve Out Of Frame, TRAI - Transmit RAI (Recieve Alarm Indication), Threshold 1-10 : TRUE if it is configured. ')
nndsxT1E1AlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 0, 1)).setObjects(("DSX-TE1-MIB", "nndsxT1E1IfIndex"), ("DSX-TE1-MIB", "nndsxT1E1Number"), ("DSX-TE1-MIB", "nndsxT1E1Type"), ("DSX-TE1-MIB", "nndsxT1E1T3Number"), ("DSX-TE1-MIB", "nndsxT1E1AlarmType"))
if mibBuilder.loadTexts: nndsxT1E1AlarmOnTrap.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1AlarmOnTrap.setDescription('T1/E1 interface alarm traps for the Alarm On state.')
nndsxT1E1AlarmOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 2, 0, 2)).setObjects(("DSX-TE1-MIB", "nndsxT1E1IfIndex"), ("DSX-TE1-MIB", "nndsxT1E1Number"), ("DSX-TE1-MIB", "nndsxT1E1Type"), ("DSX-TE1-MIB", "nndsxT1E1T3Number"), ("DSX-TE1-MIB", "nndsxT1E1AlarmType"))
if mibBuilder.loadTexts: nndsxT1E1AlarmOffTrap.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1AlarmOffTrap.setDescription('T1/E1 interface alarm trap for the Alarm Off state.')
nndsxT1E1NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 562, 73, 1, 1, 2, 1, 2, 3)).setObjects(("DSX-TE1-MIB", "nndsxT1E1AlarmOnTrap"), ("DSX-TE1-MIB", "nndsxT1E1AlarmOffTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nndsxT1E1NotificationGroup = nndsxT1E1NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: nndsxT1E1NotificationGroup.setDescription('The DsxT1E1 group notifications group')
mibBuilder.exportSymbols("DSX-TE1-MIB", PYSNMP_MODULE_ID=nndsxT1E1MIB, nndsxT1E1IfUserCurrentStatsLOFC=nndsxT1E1IfUserCurrentStatsLOFC, nndsxT1E1IfLastTestResultLoopCode=nndsxT1E1IfLastTestResultLoopCode, nndsxT1E1IfUserLifetimeStatsBES=nndsxT1E1IfUserLifetimeStatsBES, nndsxT1E1IfItutTotalStatsTable=nndsxT1E1IfItutTotalStatsTable, nndsxT1E1IfIetfArchiveStatsUAS=nndsxT1E1IfIetfArchiveStatsUAS, nndsxT1E1IfAnsiTotalPathStatsES=nndsxT1E1IfAnsiTotalPathStatsES, nndsxT1E1IfAttArchiveStatsTable=nndsxT1E1IfAttArchiveStatsTable, nndsxT1E1IfUserLifetimeStatsSES=nndsxT1E1IfUserLifetimeStatsSES, nndsxT1E1IfAnsiCurrentLineStatsSES=nndsxT1E1IfAnsiCurrentLineStatsSES, nndsxT1E1IfAttArchiveStatsUAS=nndsxT1E1IfAttArchiveStatsUAS, nndsxT1E1IfConfigTransmitClock=nndsxT1E1IfConfigTransmitClock, nndsxT1E1IfAttArchiveStatsEntry=nndsxT1E1IfAttArchiveStatsEntry, nndsxT1E1IfCircuitId=nndsxT1E1IfCircuitId, nndsxT1E1IfUserArchiveStatsEEV=nndsxT1E1IfUserArchiveStatsEEV, nndsxT1E1IfAnsiArchiveIntervalLineStatsCV=nndsxT1E1IfAnsiArchiveIntervalLineStatsCV, nndsxT1E1IfUserArchiveStatsInterval=nndsxT1E1IfUserArchiveStatsInterval, nndsxT1E1IfUserTotalStatsSES=nndsxT1E1IfUserTotalStatsSES, nndsxT1E1IfAnsiCurrentPathStatsCV=nndsxT1E1IfAnsiCurrentPathStatsCV, nndsxT1E1IfTestStatusSyncLossCount=nndsxT1E1IfTestStatusSyncLossCount, nndsxT1E1IfAttArchiveStatsValidIntervals=nndsxT1E1IfAttArchiveStatsValidIntervals, nndsxT1E1IfAttTotalStatsSES=nndsxT1E1IfAttTotalStatsSES, nndsxT1E1IfAttTotalStatsCSS=nndsxT1E1IfAttTotalStatsCSS, nndsxT1E1IfIetfCurrentStatsLCV=nndsxT1E1IfIetfCurrentStatsLCV, nndsxT1E1IfArchiveStatsValidIntervalsEntry=nndsxT1E1IfArchiveStatsValidIntervalsEntry, nndsxT1E1IfAnsiArchiveIntervalStatsTable=nndsxT1E1IfAnsiArchiveIntervalStatsTable, nndsxT1E1IfIetfCurrentStatsSES=nndsxT1E1IfIetfCurrentStatsSES, nndsxT1E1IfUserTotalStatsTable=nndsxT1E1IfUserTotalStatsTable, nndsxT1E1IfIetfArchiveStatsInterval=nndsxT1E1IfIetfArchiveStatsInterval, nndsxT1E1IfLastTestResultTestPattern=nndsxT1E1IfLastTestResultTestPattern, nndsxT1E1IfAttCurrentStatsTable=nndsxT1E1IfAttCurrentStatsTable, nndsxT1E1IfIetfArchiveStatsLES=nndsxT1E1IfIetfArchiveStatsLES, nndsxT1E1IfConfigTimeSlotMap=nndsxT1E1IfConfigTimeSlotMap, nndsxT1E1IfUserCurrentStatsOOF=nndsxT1E1IfUserCurrentStatsOOF, nndsxT1E1IfUserCurrentStatsCRC=nndsxT1E1IfUserCurrentStatsCRC, nndsxT1E1IfUserArchiveStatsCSS=nndsxT1E1IfUserArchiveStatsCSS, nndsxT1E1IfConfigCableLength=nndsxT1E1IfConfigCableLength, nndsxT1E1IfIetfCurrentStatsCSS=nndsxT1E1IfIetfCurrentStatsCSS, nndsxT1E1IfUserCurrentStatsUASState=nndsxT1E1IfUserCurrentStatsUASState, nndsxT1E1AlarmOnTrap=nndsxT1E1AlarmOnTrap, nndsxT1E1IfUserArchiveStatsEntry=nndsxT1E1IfUserArchiveStatsEntry, nndsxT1E1IfAttCurrentStatsSES=nndsxT1E1IfAttCurrentStatsSES, nndsxT1E1IfLastTestResultTestType=nndsxT1E1IfLastTestResultTestType, nndsxT1E1IfAnsiArchiveIntervalStatsEntry=nndsxT1E1IfAnsiArchiveIntervalStatsEntry, nndsxT1E1IfLastTestResultEntry=nndsxT1E1IfLastTestResultEntry, nndsxT1E1IfUserCurrentStatsSES=nndsxT1E1IfUserCurrentStatsSES, nndsxT1E1IfAttCurrentStatsCSS=nndsxT1E1IfAttCurrentStatsCSS, nndsxT1E1IfUserLifetimeStatsOOF=nndsxT1E1IfUserLifetimeStatsOOF, nndsxT1E1IfConfigFdlTable=nndsxT1E1IfConfigFdlTable, nndsxT1E1IfItutArchiveStatsValidIntervals=nndsxT1E1IfItutArchiveStatsValidIntervals, nndsxT1E1IfLastTestResultTestTime=nndsxT1E1IfLastTestResultTestTime, nndsxT1E1IfStatusEntry=nndsxT1E1IfStatusEntry, nndsxT1E1IfItutCurrentStatsUAS=nndsxT1E1IfItutCurrentStatsUAS, nndsxT1E1NotificationGroup=nndsxT1E1NotificationGroup, nndsxT1E1IfUserArchiveStatsSES=nndsxT1E1IfUserArchiveStatsSES, nndsxT1E1IfAnsiCurrentPathStatsES=nndsxT1E1IfAnsiCurrentPathStatsES, nndsxT1E1IfUserLifetimeStatsTable=nndsxT1E1IfUserLifetimeStatsTable, nndsxT1E1IfUserTotalStatsCRC=nndsxT1E1IfUserTotalStatsCRC, nndsxT1E1IfIetfArchiveStatsBES=nndsxT1E1IfIetfArchiveStatsBES, nndsxT1E1IfConfigServiceMode=nndsxT1E1IfConfigServiceMode, nndsxT1E1IfIetfCurrentStatsES=nndsxT1E1IfIetfCurrentStatsES, nndsxT1E1IfAttCurrentStatsUAS=nndsxT1E1IfAttCurrentStatsUAS, nndsxT1E1IfDescription=nndsxT1E1IfDescription, nndsxT1E1IfConfigCableType=nndsxT1E1IfConfigCableType, nndsxT1E1IfAnsiArchiveStatsValidIntervals=nndsxT1E1IfAnsiArchiveStatsValidIntervals, nndsxT1E1IfItutCurrentStatsBBE=nndsxT1E1IfItutCurrentStatsBBE, nndsxT1E1IfIndex=nndsxT1E1IfIndex, nndsxT1E1IfTestStatusLoopCode=nndsxT1E1IfTestStatusLoopCode, nndsxT1E1IfUserLifetimeStatsCSS=nndsxT1E1IfUserLifetimeStatsCSS, nndsxT1E1IfItutArchiveStatsUAS=nndsxT1E1IfItutArchiveStatsUAS, nndsxT1E1IfIetfCurrentStatsEntry=nndsxT1E1IfIetfCurrentStatsEntry, nndsxT1E1IfAlarmThresholdConfigFallingThreshold=nndsxT1E1IfAlarmThresholdConfigFallingThreshold, nndsxT1E1IfTestStatusEntry=nndsxT1E1IfTestStatusEntry, nndsxT1E1IfTestStatusLockedSeconds=nndsxT1E1IfTestStatusLockedSeconds, nndsxT1E1IfStatusTransmitClock=nndsxT1E1IfStatusTransmitClock, nndsxT1E1IfTestStatusTestTime=nndsxT1E1IfTestStatusTestTime, nndsxT1E1IfItutCurrentStatsES=nndsxT1E1IfItutCurrentStatsES, nndsxT1E1IfUserLifetimeStatsLOFC=nndsxT1E1IfUserLifetimeStatsLOFC, nndsxT1E1IfAnsiTotalPathStatsSAS=nndsxT1E1IfAnsiTotalPathStatsSAS, nndsxT1E1IfIetfCurrentStatsUAS=nndsxT1E1IfIetfCurrentStatsUAS, nndsxT1E1IfAnsiCurrentPathStatsUAS=nndsxT1E1IfAnsiCurrentPathStatsUAS, nndsxT1E1IfConfigRaiAlarm=nndsxT1E1IfConfigRaiAlarm, nndsxT1E1IfItutTotalStatsBBE=nndsxT1E1IfItutTotalStatsBBE, nndsxT1E1IfIetfArchiveStatsPCV=nndsxT1E1IfIetfArchiveStatsPCV, nndsxT1E1IfAnsiArchiveIntervalLineStatsSES=nndsxT1E1IfAnsiArchiveIntervalLineStatsSES, nndsxT1E1IfUserTotalStatsCSS=nndsxT1E1IfUserTotalStatsCSS, nndsxT1E1IfIetfTotalStatsEntry=nndsxT1E1IfIetfTotalStatsEntry, nndsxT1E1IfAnsiTotalPathStatsCV=nndsxT1E1IfAnsiTotalPathStatsCV, nndsxT1E1IfIetfCurrentStatsTable=nndsxT1E1IfIetfCurrentStatsTable, nndsxT1E1IfIetfArchiveStatsTable=nndsxT1E1IfIetfArchiveStatsTable, nndsxT1E1IfTestStatusTable=nndsxT1E1IfTestStatusTable, nndsxT1E1IfAlarmThresholdConfigRisingThreshold=nndsxT1E1IfAlarmThresholdConfigRisingThreshold, nndsxT1E1IfAnsiCurrentStatsTimeInCurrent=nndsxT1E1IfAnsiCurrentStatsTimeInCurrent, nndsxT1E1IfItutTotalStatsSES=nndsxT1E1IfItutTotalStatsSES, nndsxT1E1IfIetfTotalStatsLCV=nndsxT1E1IfIetfTotalStatsLCV, nndsxT1E1IfUserCurrentStatsTable=nndsxT1E1IfUserCurrentStatsTable, nndsxT1E1IfAnsiTotalPathStatsSES=nndsxT1E1IfAnsiTotalPathStatsSES, nndsxT1E1IfItutArchiveInterval=nndsxT1E1IfItutArchiveInterval, nndsxT1E1IfUserTotalStatsES=nndsxT1E1IfUserTotalStatsES, nndsxT1E1IfConfigLineTable=nndsxT1E1IfConfigLineTable, nndsxT1E1IfAlarmThresholdConfigEntry=nndsxT1E1IfAlarmThresholdConfigEntry, nndsxT1E1IfMonitorPortTxInjectType=nndsxT1E1IfMonitorPortTxInjectType, nndsxT1E1IfItutCurrentStatsTimeInCurrent=nndsxT1E1IfItutCurrentStatsTimeInCurrent, nndsxT1E1IfTestStatusTestPattern=nndsxT1E1IfTestStatusTestPattern, nndsxT1E1IfAnsiCurrentLineStatsES=nndsxT1E1IfAnsiCurrentLineStatsES, nndsxT1E1IfConfigAlarmHierarchy=nndsxT1E1IfConfigAlarmHierarchy, nndsxT1E1IfTestConfigLoopCode=nndsxT1E1IfTestConfigLoopCode, nndsxT1E1IfIetfArchiveStatsDM=nndsxT1E1IfIetfArchiveStatsDM, nndsxT1E1IfUserLifetimeStatsES=nndsxT1E1IfUserLifetimeStatsES, nndsxT1E1IfAlarmStatusTable=nndsxT1E1IfAlarmStatusTable, nndsxT1E1IfTestStatusTestType=nndsxT1E1IfTestStatusTestType, nndsxT1E1IfUserCurrentStatsEntry=nndsxT1E1IfUserCurrentStatsEntry, nndsxT1E1IfIetfCurrentStatsTimeInCurrent=nndsxT1E1IfIetfCurrentStatsTimeInCurrent, nndsxT1E1AlarmOffTrap=nndsxT1E1AlarmOffTrap, nndsxT1E1IfIetfTotalStatsUAS=nndsxT1E1IfIetfTotalStatsUAS, nndsxT1E1IfTestConfigPattern=nndsxT1E1IfTestConfigPattern, nndsxT1E1IfItutArchiveStatsES=nndsxT1E1IfItutArchiveStatsES, nndsxT1E1IfAttCurrentStatsEntry=nndsxT1E1IfAttCurrentStatsEntry, nndsxT1E1Notifications=nndsxT1E1Notifications, nndsxT1E1IfAnsiArchiveIntervalPathStatsCV=nndsxT1E1IfAnsiArchiveIntervalPathStatsCV, nndsxT1E1IfIetfCurrentStatsPCV=nndsxT1E1IfIetfCurrentStatsPCV, nndsxT1E1IfUserLifetimeStatsEntry=nndsxT1E1IfUserLifetimeStatsEntry, nndsxT1E1IfUserStatsGroup=nndsxT1E1IfUserStatsGroup, nndsxT1E1IfAttTotalStatsEntry=nndsxT1E1IfAttTotalStatsEntry, nndsxT1E1IfItutCurrentStatsUASState=nndsxT1E1IfItutCurrentStatsUASState, nndsxT1E1IfUserTotalStatsValidDays=nndsxT1E1IfUserTotalStatsValidDays, nndsxT1E1IfLastTestResultTable=nndsxT1E1IfLastTestResultTable, nndsxT1E1IfUserCurrentStatsES=nndsxT1E1IfUserCurrentStatsES, nndsxT1E1IfAnsiTotalStatsEntry=nndsxT1E1IfAnsiTotalStatsEntry, nndsxT1E1IfItutArchiveStatsBBE=nndsxT1E1IfItutArchiveStatsBBE, nndsxT1E1IfAnsiArchiveIntervalPathStatsSES=nndsxT1E1IfAnsiArchiveIntervalPathStatsSES, nndsxT1E1IfAttCurrentStatsUASState=nndsxT1E1IfAttCurrentStatsUASState, nndsxT1E1IfAttStatsGroup=nndsxT1E1IfAttStatsGroup, nndsxT1E1IfUserTotalStatsBPV=nndsxT1E1IfUserTotalStatsBPV, nndsxT1E1IfLastTestResultSyncLossCount=nndsxT1E1IfLastTestResultSyncLossCount, nndsxT1E1IfMonitorPortConfigType=nndsxT1E1IfMonitorPortConfigType, nndsxT1E1IfAnsiCurrentPathStatsSAS=nndsxT1E1IfAnsiCurrentPathStatsSAS, nndsxT1E1IfAttTotalStatsEEV=nndsxT1E1IfAttTotalStatsEEV, nndsxT1E1IfIetfArchiveStatsLCV=nndsxT1E1IfIetfArchiveStatsLCV, nndsxT1E1IfAlarmConfigGroup=nndsxT1E1IfAlarmConfigGroup, nndsxT1E1IfTestStatusErrorCount=nndsxT1E1IfTestStatusErrorCount, nndsxT1E1IfUserArchiveStatsES=nndsxT1E1IfUserArchiveStatsES, nndsxT1E1TrapVariables=nndsxT1E1TrapVariables, nndsxT1E1IfUserArchiveStatsLOFC=nndsxT1E1IfUserArchiveStatsLOFC, nndsxT1E1IfAnsiArchiveIntervalPathStatsUAS=nndsxT1E1IfAnsiArchiveIntervalPathStatsUAS, nndsxT1E1IfAnsiArchiveIntervalLineStatsES=nndsxT1E1IfAnsiArchiveIntervalLineStatsES, nndsxT1E1IfConfigGroup=nndsxT1E1IfConfigGroup, nndsxT1E1MIB=nndsxT1E1MIB, nndsxT1E1IfStatusTable=nndsxT1E1IfStatusTable, nndsxT1E1IfConfigFdlEntry=nndsxT1E1IfConfigFdlEntry, nndsxT1E1IfAttArchiveInterval=nndsxT1E1IfAttArchiveInterval, nndsxT1E1IfUserTotalStatsEntry=nndsxT1E1IfUserTotalStatsEntry, nndsxT1E1T3Number=nndsxT1E1T3Number, nndsxT1E1IfConfigLBO=nndsxT1E1IfConfigLBO, nndsxT1E1IfUserArchiveStatsBES=nndsxT1E1IfUserArchiveStatsBES, nndsxT1E1IfLastTestResultLockedSeconds=nndsxT1E1IfLastTestResultLockedSeconds, nndsxT1E1IfAnsiArchiveIntervalPathStatsSAS=nndsxT1E1IfAnsiArchiveIntervalPathStatsSAS, nndsxT1E1IfItutStatsGroup=nndsxT1E1IfItutStatsGroup, nndsxT1E1IfIetfTotalStatsES=nndsxT1E1IfIetfTotalStatsES, nndsxT1E1IfIetfArchiveStatsSEFS=nndsxT1E1IfIetfArchiveStatsSEFS, nndsxT1E1IfAnsiTotalLineStatsSES=nndsxT1E1IfAnsiTotalLineStatsSES, nndsxT1E1AlarmType=nndsxT1E1AlarmType, nndsxT1E1IfAlarmThresholdConfigTable=nndsxT1E1IfAlarmThresholdConfigTable, nndsxT1E1IfAttTotalStatsUAS=nndsxT1E1IfAttTotalStatsUAS, nndsxT1E1IfIetfCurrentStatsBES=nndsxT1E1IfIetfCurrentStatsBES, nndsxT1E1IfIetfTotalStatsPCV=nndsxT1E1IfIetfTotalStatsPCV, nndsxT1E1IfUserTotalStatsBES=nndsxT1E1IfUserTotalStatsBES, nndsxT1E1IfIetfTotalStatsBES=nndsxT1E1IfIetfTotalStatsBES, nndsxT1E1IfStatusGroup=nndsxT1E1IfStatusGroup, nndsxT1E1IfConfigFdlCsuDsuType=nndsxT1E1IfConfigFdlCsuDsuType, nndsxT1E1IfAttCurrentStatsTimeInCurrent=nndsxT1E1IfAttCurrentStatsTimeInCurrent, nndsxT1E1IfAttCurrentStatsEEV=nndsxT1E1IfAttCurrentStatsEEV, nndsxT1E1IfItutTotalStatsUAS=nndsxT1E1IfItutTotalStatsUAS, nndsxT1E1IfConfigLineEntry=nndsxT1E1IfConfigLineEntry, nndsxT1E1IfTestConfigTime=nndsxT1E1IfTestConfigTime, nndsxT1E1IfAnsiCurrentStatsTable=nndsxT1E1IfAnsiCurrentStatsTable, nndsxT1E1IfAnsiCurrentLineStatsCV=nndsxT1E1IfAnsiCurrentLineStatsCV, nndsxT1E1IfUserTotalStatsEEV=nndsxT1E1IfUserTotalStatsEEV, nndsxT1E1IfItutArchiveStatsSES=nndsxT1E1IfItutArchiveStatsSES, nndsxT1E1IfConfigLineMode=nndsxT1E1IfConfigLineMode, nndsxT1E1IfUserArchiveStatsOOF=nndsxT1E1IfUserArchiveStatsOOF, nndsxT1E1IfUserCurrentStatsBES=nndsxT1E1IfUserCurrentStatsBES, nndsxT1E1IfAnsiCurrentPathStatsSES=nndsxT1E1IfAnsiCurrentPathStatsSES, nndsxT1E1IfIetfTotalStatsLES=nndsxT1E1IfIetfTotalStatsLES, nndsxT1E1IfContactInfo=nndsxT1E1IfContactInfo, nndsxT1E1IfTestStatusTestState=nndsxT1E1IfTestStatusTestState, nndsxT1E1IfAttCurrentStatsES=nndsxT1E1IfAttCurrentStatsES, nndsxT1E1IfItutArchiveStatsTable=nndsxT1E1IfItutArchiveStatsTable, nndsxT1E1IfAnsiTotalPathStatsUAS=nndsxT1E1IfAnsiTotalPathStatsUAS, nndsxT1E1IfAlarmStatusAlarmStatus=nndsxT1E1IfAlarmStatusAlarmStatus, nndsxT1E1IfIetfArchiveStatsES=nndsxT1E1IfIetfArchiveStatsES, nndsxT1E1IfConfigJitter=nndsxT1E1IfConfigJitter, nndsxT1E1IfAlarmThresholdConfigEnable=nndsxT1E1IfAlarmThresholdConfigEnable, nndsxT1E1IfAnsiStatsGroup=nndsxT1E1IfAnsiStatsGroup, nndsxT1E1IfLastTestResultTestState=nndsxT1E1IfLastTestResultTestState, nndsxT1E1IfIetfTotalStatsTable=nndsxT1E1IfIetfTotalStatsTable, nndsxT1E1IfTestConfigType=nndsxT1E1IfTestConfigType, nndsxT1E1IfTestConfigTable=nndsxT1E1IfTestConfigTable, nndsxT1E1IfConfigLineCode=nndsxT1E1IfConfigLineCode, nndsxT1E1IfAnsiCurrentStatsEntry=nndsxT1E1IfAnsiCurrentStatsEntry, nndsxT1E1IfIetfArchiveStatsEntry=nndsxT1E1IfIetfArchiveStatsEntry, nndsxT1E1IfIetfArchiveStatsSES=nndsxT1E1IfIetfArchiveStatsSES, nndsxT1E1IfAttTotalStatsTable=nndsxT1E1IfAttTotalStatsTable, nndsxT1E1IfUserLifetimeStatsBPV=nndsxT1E1IfUserLifetimeStatsBPV, nndsxT1E1Type=nndsxT1E1Type, nndsxT1E1IfStatsGroup=nndsxT1E1IfStatsGroup, nndsxT1E1IfLastTestResultErrorCount=nndsxT1E1IfLastTestResultErrorCount, nndsxT1E1IfAnsiArchiveStatsInterval=nndsxT1E1IfAnsiArchiveStatsInterval, nndsxT1E1IfAnsiCurrentStatsUASState=nndsxT1E1IfAnsiCurrentStatsUASState, nndsxT1E1IfIetfArchiveStatsValidIntervals=nndsxT1E1IfIetfArchiveStatsValidIntervals, nndsxT1E1IfAttArchiveStatsEEV=nndsxT1E1IfAttArchiveStatsEEV, nndsxT1E1IfItutCurrentStatsEntry=nndsxT1E1IfItutCurrentStatsEntry, nndsxT1E1IfIetfTotalStatsDM=nndsxT1E1IfIetfTotalStatsDM, nndsxT1E1IfUserTotalStatsLOFC=nndsxT1E1IfUserTotalStatsLOFC, nndsxT1E1IfAnsiTotalPathStatsCSS=nndsxT1E1IfAnsiTotalPathStatsCSS, nndsxT1E1IfAlarmThresholdConfigIndex=nndsxT1E1IfAlarmThresholdConfigIndex, nndsxT1E1IfAttArchiveStatsCSS=nndsxT1E1IfAttArchiveStatsCSS, nndsxT1E1Number=nndsxT1E1Number, nndsxT1E1IfUserCurrentStatsUAS=nndsxT1E1IfUserCurrentStatsUAS, nndsxT1E1IfUserTotalStatsOOF=nndsxT1E1IfUserTotalStatsOOF, nndsxT1E1IfAnsiArchiveIntervalPathStatsCSS=nndsxT1E1IfAnsiArchiveIntervalPathStatsCSS, nndsxT1E1IfIetfCurrentStatsUASState=nndsxT1E1IfIetfCurrentStatsUASState, nndsxT1E1IfArchiveStatsValidIntervalsTable=nndsxT1E1IfArchiveStatsValidIntervalsTable, nndsxT1E1IfItutCurrentStatsTable=nndsxT1E1IfItutCurrentStatsTable, nndsxT1E1IfIetfTotalStatsCSS=nndsxT1E1IfIetfTotalStatsCSS, nndsxT1E1IfAnsiTotalStatsTable=nndsxT1E1IfAnsiTotalStatsTable, nndsxT1E1IfIetfCurrentStatsSEFS=nndsxT1E1IfIetfCurrentStatsSEFS, nndsxT1E1IfUserLifetimeStatsUAS=nndsxT1E1IfUserLifetimeStatsUAS, nndsxT1E1IfConfigFdl=nndsxT1E1IfConfigFdl, nndsxT1E1IfItutTotalStatsEntry=nndsxT1E1IfItutTotalStatsEntry, nndsxT1E1IfUserCurrentStatsCSS=nndsxT1E1IfUserCurrentStatsCSS, nndsxT1E1IfUserArchiveStatsTable=nndsxT1E1IfUserArchiveStatsTable, nndsxT1E1IfAnsiTotalLineStatsCV=nndsxT1E1IfAnsiTotalLineStatsCV, nndsxT1E1IfAttArchiveStatsES=nndsxT1E1IfAttArchiveStatsES, nndsxT1E1IfUserCurrentStatsBPV=nndsxT1E1IfUserCurrentStatsBPV, nndsxT1E1IfAnsiCurrentPathStatsCSS=nndsxT1E1IfAnsiCurrentPathStatsCSS, nndsxT1E1IfIetfCurrentStatsLES=nndsxT1E1IfIetfCurrentStatsLES, nndsxT1E1Traps=nndsxT1E1Traps, nndsxT1E1IfIetfCurrentStatsDM=nndsxT1E1IfIetfCurrentStatsDM, nndsxT1E1IfUserTotalStatsUAS=nndsxT1E1IfUserTotalStatsUAS, nndsxT1E1IfUserCurrentStatsTimeInCurrent=nndsxT1E1IfUserCurrentStatsTimeInCurrent, nndsxT1E1IfAlarmThresholdConfigObject=nndsxT1E1IfAlarmThresholdConfigObject, nndsxT1E1IfUserArchiveStatsBPV=nndsxT1E1IfUserArchiveStatsBPV, nndsxT1E1IfStatusLineStatus=nndsxT1E1IfStatusLineStatus, nndsxT1E1IfAttTotalStatsES=nndsxT1E1IfAttTotalStatsES, nndsxT1E1IfConfigLineType=nndsxT1E1IfConfigLineType, nndsxT1E1IfAlarmThresholdConfigSamplingInterval=nndsxT1E1IfAlarmThresholdConfigSamplingInterval, nndsxT1E1IfAnsiTotalLineStatsES=nndsxT1E1IfAnsiTotalLineStatsES, nndsxT1E1IfAnsiArchiveIntervalPathStatsES=nndsxT1E1IfAnsiArchiveIntervalPathStatsES, nndsxT1E1IfUserArchiveStatsUAS=nndsxT1E1IfUserArchiveStatsUAS, nndsxT1E1IfUserCurrentStatsEEV=nndsxT1E1IfUserCurrentStatsEEV, nndsxT1E1IfUserArchiveStatsCRC=nndsxT1E1IfUserArchiveStatsCRC, nndsxT1E1IfAlarmStatusThresholdStatus=nndsxT1E1IfAlarmStatusThresholdStatus, nndsxT1E1IfAlarmThresholdConfigSampleType=nndsxT1E1IfAlarmThresholdConfigSampleType)
mibBuilder.exportSymbols("DSX-TE1-MIB", nndsxT1E1IfUserArchiveStatsValidIntervals=nndsxT1E1IfUserArchiveStatsValidIntervals, nndsxT1E1IfItutTotalStatsES=nndsxT1E1IfItutTotalStatsES, nndsxT1E1IfIetfArchiveStatsCSS=nndsxT1E1IfIetfArchiveStatsCSS, nndsxT1E1IfTestConfigEntry=nndsxT1E1IfTestConfigEntry, nndsxT1E1IfUserLifetimeStatsCRC=nndsxT1E1IfUserLifetimeStatsCRC, nndsxT1E1IfIetfStatsGroup=nndsxT1E1IfIetfStatsGroup, nndsxT1E1IfAttArchiveStatsSES=nndsxT1E1IfAttArchiveStatsSES, nndsxT1E1IfIetfTotalStatsSES=nndsxT1E1IfIetfTotalStatsSES, nndsxT1E1IfUserTotalStatsDay=nndsxT1E1IfUserTotalStatsDay, nndsxT1E1IfUserLifetimeStatsEEV=nndsxT1E1IfUserLifetimeStatsEEV, nndsxT1E1IfAlarmStatusEntry=nndsxT1E1IfAlarmStatusEntry, nndsxT1E1IfItutArchiveStatsEntry=nndsxT1E1IfItutArchiveStatsEntry, nndsxT1E1IfIetfTotalStatsSEFS=nndsxT1E1IfIetfTotalStatsSEFS, nndsxT1E1IfItutCurrentStatsSES=nndsxT1E1IfItutCurrentStatsSES)
