#
# PySNMP MIB module Motorola-Cpe-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Motorola-Cpe-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifAdminStatus, ifIndex, ifOperStatus = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifIndex", "ifOperStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, enterprises, iso, IpAddress, MibIdentifier, Counter32, Gauge32, ModuleIdentity, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "iso", "IpAddress", "MibIdentifier", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "ObjectIdentity", "TimeTicks")
DisplayString, RowStatus, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "DateAndTime")
gemtekDevCpe = ModuleIdentity((1, 3, 6, 1, 4, 1, 10529, 300))
if mibBuilder.loadTexts: gemtekDevCpe.setLastUpdated('201006291431Z')
if mibBuilder.loadTexts: gemtekDevCpe.setOrganization('Cambium Networks')
if mibBuilder.loadTexts: gemtekDevCpe.setContactInfo('PMP Technical Support email : support@cambiumnetworks.com')
if mibBuilder.loadTexts: gemtekDevCpe.setDescription('PMP 320 CPE MIB tree')
gemtek = MibIdentifier((1, 3, 6, 1, 4, 1, 10529))
gemtekDevCpeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1))
gemtekDevCpeControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 2))
gemtekDevCpeTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 3))
gemtekDevCpeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 4))
gemtekDevCpeAccountManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 5))
gemtekDevCpeScanner = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 6))
gemtekDevCpeAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7))
gemtekDevCpeNetworkMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8))
gemtekDevCpeFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 9))
gemtekDevCpeServiceFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 11))
gemtekDevCpeSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 12))
gemtekDevCpeMaxTxPower = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 13))
gemtekDevCpePullFtpUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 21))
gemtekDevCpePushFtpUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 22))
gemtekDevCpeTftpUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 69))
wirelessStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1))
networkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2))
deviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3))
rebootWithResponse = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 255))).clone(namedValues=NamedValues(("rebootRequired", 1), ("rebootNotRequired", 0), ("reboot", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootWithResponse.setStatus('current')
if mibBuilder.loadTexts: rebootWithResponse.setDescription('If reading this OID, rebootRequired(1) indicates a reboot is currently required, else, returns rebootNotRequired(0).')
isRebootRequired = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("rebootRequired", 1), ("rebootNotRequired", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isRebootRequired.setStatus('current')
if mibBuilder.loadTexts: isRebootRequired.setDescription('If reading this OID, rebootRequired(1) indicates a reboot is currently required, else, returns rebootNotRequired(0).')
autoSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("autoSaveEnabled", 1), ("autoSaveDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSaveConfig.setStatus('current')
if mibBuilder.loadTexts: autoSaveConfig.setDescription("OID to enable/disable the system save to flash automatically. Change setting will save configuraition immediately. Set autoSaveConfig = 0 can save configuraition immediately and don't turn on auto save.")
autoSavePeriod = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSavePeriod.setStatus('obsolete')
if mibBuilder.loadTexts: autoSavePeriod.setDescription('The variable is deprecated. An OID to set the auto save period in seconds.')
startStopWimax = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("start", 1), ("stop", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startStopWimax.setStatus('current')
if mibBuilder.loadTexts: startStopWimax.setDescription('Start/Stop WiMAX')
snmpBuzzerConfig = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snmpBuzzerDisabled", 0), ("snmpBuzzerEnabled", 1), ("snmpBuzzerDemo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpBuzzerConfig.setStatus('current')
if mibBuilder.loadTexts: snmpBuzzerConfig.setDescription('OID to enable/disable/demo the system buzzer.')
snmpBuzzerDisableDelay = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpBuzzerDisableDelay.setStatus('current')
if mibBuilder.loadTexts: snmpBuzzerDisableDelay.setDescription('An OID to set the auto disable the buzzer in how many seconds after CPE operational.(0~1800)')
gemtekDevCpeSnmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpReadCommunity.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSnmpReadCommunity.setDescription('An OID to set/get the SNMP Read community.')
gemtekDevCpeSnmpSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpSetCommunity.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSnmpSetCommunity.setDescription('An OID to set/get the SNMP Set community.')
gemtekDevCpeRestFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRestFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeRestFactoryDefault.setDescription('Reset to factory default setting.')
gemtekDevCpeAutoFirmwareRollback = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("levelOne", 1), ("levelTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAutoFirmwareRollback.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAutoFirmwareRollback.setDescription('Auto firmware rollback Disable/Level 1/Level 2.(default:Disable)')
gemtekDevCpeFirmwareValidationTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareValidationTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirmwareValidationTime.setDescription('Auto firmware rollback Level 1: The duration of firmware validation test time(0~99999 seconds).')
gemtekDevCpeFirmwareValidationCount = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareValidationCount.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirmwareValidationCount.setDescription('Auto firmware rollback Level 2: Failure count in firmware validation test(0~999).')
gemtekDevCpeSnmpAccessFromLan = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessFromLan.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessFromLan.setDescription('Allow SNMP access from LAN enabled/disabled.(Default:disabled) Setting will take effect immediately.')
gemtekDevCpeDynamicMaxTxPowerBpsk = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerBpsk.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerBpsk.setDescription('BPSK Dynamic Max Tx Power(dBm)')
gemtekDevCpeDynamicMaxTxPowerQpsk = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQpsk.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQpsk.setDescription('QPSK Dynamic Max Tx Power(dBm)')
gemtekDevCpeDynamicMaxTxPowerQam16 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQam16.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQam16.setDescription('QAM16 Dynamic Max Tx Power(dBm)')
gemtekDevCpeDynamicMaxTxPowerQam64 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQam64.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQam64.setDescription('QAM64 Dynamic Max Tx Power(dBm)')
gemtekDevCpeSnmpAccessDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19))
gemtekDevCpeSnmpAccessDomainEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainEnable.setDescription('Enable/Disable SNMP access domain(Default:Disable) Setting will take effect until save and reboot.')
gemtekDevCpeSnmpAccessDomainIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainIp.setDescription('SNMP access domain IP')
gemtekDevCpeSnmpAccessDomainNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainNetmask.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainNetmask.setDescription('SNMP access domain netmask EX: gemtekDevCpeSnmpAccessDomainIp = 192.168.1.1 gemtekDevCpeSnmpAccessDomainNetmask = 255.255.255.0 SNMP access domain = 192.168.1.0')
gemtekDevCpeTrapServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1))
gemtekDevCpeTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2))
gemtekDevCpeSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeSystemDate.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSystemDate.setDescription('CPE system Date')
gemtekDevCpeNtpServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNtpServerEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNtpServerEnable.setDescription('NTP Server Enable/Disable')
gemtekDevCpeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNtpServer.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNtpServer.setDescription('NTP Server configuration')
gemtekDevCpeNtpServerFromDHCP = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNtpServerFromDHCP.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNtpServerFromDHCP.setDescription('NTP Server From DHCP')
gemtekDevCpeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTimeZone.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTimeZone.setDescription('CPE Time Zone configuration: 0 (GMT-12:00) International Date Line West , 1 (GMT-11:00) Midway Island, Samoa , 2 (GMT-10:00) Hawaii , 3 (GMT-09:00) Alaska , 4 (GMT-08:00) Pacific Time (US and Canada) , 5 (GMT-08:00) Tijuana, Baja California , 6 (GMT-07:00) Arizona , 7 (GMT-07:00) Chihuahua, La Paz, Mazatlan - New , 8 (GMT-07:00) Chihuahua, La Paz, Mazatlan - Old , 9 (GMT-07:00) Mountain Time (US and Canada) , 10 (GMT-06:00) Central America , 11 (GMT-06:00) Central Time (US and Canada) , 12 (GMT-06:00) Guadalajara, Mexico City, Monterrey - New , 13 (GMT-06:00) Guadalajara, Mexico City, Monterrey - Old , 14 (GMT-06:00) Saskatchewan , 15 (GMT-05:00) Bogota, Lima, Quito, Rio Branco , 16 (GMT-05:00) Eastern Time (US and Canada) , 17 (GMT-05:00) Indiana (East) , 18 (GMT-04:30) Caracas , 19 (GMT-04:00) Atlantic Time (Canada) , 20 (GMT-04:00) Caracas, La Paz , 21 (GMT-04:00) Manaus , 22 (GMT-04:00) Santiago , 23 (GMT-03:30) Newfoundland , 24 (GMT-03:00) Brasilia , 25 (GMT-03:00) Buenos Aires, Georgetown , 26 (GMT-03:00) Greenland , 27 (GMT-03:00) Montevideo , 28 (GMT-02:00) Mid-Atlantic , 29 (GMT-01:00) Azores , 30 (GMT-01:00) Cape Verde Is. , 31 (GMT) Casablanca, Monrovia, Reykjavik , 32 (GMT) Greenwich Mean Time - Dublin, Edinburgh, Lisbon, London , 33 (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna , 34 (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague , 35 (GMT+01:00) Brussels, Copenhagen, Madrid, Paris , 36 (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb , 37 (GMT+01:00) West Central Africa , 38 (GMT+02:00) Amman , 39 (GMT+02:00) Athens, Bucharest, Istanbul , 40 (GMT+02:00) Beirut , 41 (GMT+02:00) Cairo , 42 (GMT+02:00) Harare, Pretoria , 43 (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius , 44 (GMT+02:00) Jerusalem , 45 (GMT+02:00) Minsk , 46 (GMT+02:00) Windhoek , 47 (GMT+03:00) Baghdad , 48 (GMT+03:00) Kuwait, Riyadh , 49 (GMT+03:00) Moscow, St. Petersburg, Volgograd , 50 (GMT+03:00) Nairobi , 51 (GMT+03:00) Tbilisi , 52 (GMT+03:30) Tehran , 53 (GMT+04:00) Abu Dhabi, Muscat , 54 (GMT+04:00) Baku , 55 (GMT+04:00) Caucasus Standard Time , 56 (GMT+04:00) Yerevan , 57 (GMT+04:30) Kabul , 58 (GMT+05:00) Yekaterinburg , 59 (GMT+05:00) Islamabad, Karachi, Tashkent , 60 (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi , 61 (GMT+05:30) Sri Jayawardenapura-Kotte , 62 (GMT+05:45) Kathmandu , 63 (GMT+06:00) Almaty, Novosibirsk , 64 (GMT+06:00) Astana, Dhaka , 65 (GMT+06:30) Yangon (Rangoon) , 66 (GMT+07:00) Bangkok, Hanoi, Jakarta , 67 (GMT+07:00) Krasnoyarsk , 68 (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi , 69 (GMT+08:00) Irkutsk, Ulaan Bataar , 70 (GMT+08:00) Kuala Lumpur, Singapore , 71 (GMT+08:00) Perth , 72 (GMT+08:00) Taipei , 73 (GMT+09:00) Osaka, Sapporo, Tokyo , 74 (GMT+09:00) Seoul , 75 (GMT+09:00) Yakutsk , 76 (GMT+09:30) Adelaide , 77 (GMT+09:30) Darwin , 78 (GMT+10:00) Brisbane , 79 (GMT+10:00) Canberra, Melbourne, Sydney , 80 (GMT+10:00) Guam, Port Moresby , 81 (GMT+10:00) Hobart , 82 (GMT+10:00) Vladivostok , 83 (GMT+11:00) Magadan, Solomon Is., New Caledonia , 84 (GMT+12:00) Auckland, Wellington , 85 (GMT+12:00) Fiji, Kamchatka, Marshall Is. , 86 (GMT+13:00) Nuku`alofa ')
gemtekDevCpeDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDaylightSaving.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDaylightSaving.setDescription('Daylight Saving Enable configuration')
administratorUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: administratorUsername.setStatus('current')
if mibBuilder.loadTexts: administratorUsername.setDescription('set/get WEB administrator username')
administratorPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: administratorPassword.setStatus('current')
if mibBuilder.loadTexts: administratorPassword.setDescription('set-only WEB administrator password')
administratorEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: administratorEnable.setStatus('current')
if mibBuilder.loadTexts: administratorEnable.setDescription('set/get WEB administrator eabled/disabled')
operatorUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatorUsername.setStatus('current')
if mibBuilder.loadTexts: operatorUsername.setDescription('set/get WEB operator username')
operatorPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatorPassword.setStatus('current')
if mibBuilder.loadTexts: operatorPassword.setDescription('set-only WEB operator password')
operatorEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatorEnable.setStatus('current')
if mibBuilder.loadTexts: operatorEnable.setDescription('set/get WEB operator eabled/disabled')
adminUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminUsername.setStatus('current')
if mibBuilder.loadTexts: adminUsername.setDescription('set/get WEB admin username')
adminPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPassword.setStatus('current')
if mibBuilder.loadTexts: adminPassword.setDescription('set-only WEB admin password')
adminEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEnable.setStatus('current')
if mibBuilder.loadTexts: adminEnable.setDescription('set/get WEB admin eabled/disabled')
gemtekDevCpeChannelBandwidthRang = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("threeToFive", 0), ("sixToTen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeChannelBandwidthRang.setStatus('deprecated')
if mibBuilder.loadTexts: gemtekDevCpeChannelBandwidthRang.setDescription('No function for this OID since f03b00-5.8.8Moto Select the Channel Bandwidth Rang. 0: threeToFive 3MHz ~ 5MHz => 3MHz, 3.5MHz, 5MHz 1: sixToTen 6MHz ~ 10MHz => 6MHz, 7MHz, 8.75MHz, 10MHz')
gemtekDevCpeChannelApplyLoadOrSave = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("load", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeChannelApplyLoadOrSave.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelApplyLoadOrSave.setDescription('Channel Scanner Setting load or save (defualut:0). Saved channel Table will take effect until reboot.')
gemtekDevCpeChannelTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3), )
if mibBuilder.loadTexts: gemtekDevCpeChannelTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelTable.setDescription('Channel Table')
gemtekDevCpeFrequencyRangeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4))
gemtekDevCpeAPPreferredList = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5))
gemtekDevCpeLockFrequencyRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRangeMin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRangeMin.setDescription('CPE lock frequency range Min(kHz)')
gemtekDevCpeLockFrequencyRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRangeMax.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRangeMax.setDescription('CPE lock frequency range Max(kHz)')
gemtekDevCpeLockFrequencyRange = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unlock", 0), ("lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRange.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRange.setDescription('Lock/Unlock frequency range state.')
gemtekDevCpeModelFrequencyRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeModelFrequencyRangeMin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeModelFrequencyRangeMin.setDescription('CPE model frequency range Min(kHz)')
gemtekDevCpeModelFrequencyRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeModelFrequencyRangeMax.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeModelFrequencyRangeMax.setDescription('CPE Model frequency range Max(kHz)')
gemtekDevCpeAPPreferredSelectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredSelectionEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredSelectionEnable.setDescription('AP Preferred Selection eabled/disabled')
gemtekDevCpeAPPreferredBsIdListLocked = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredBsIdListLocked.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredBsIdListLocked.setDescription('Configured BsId List Locked eabled/disabled')
gemtekDevCpeAPPreferredPriorityOneBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityOneBsId.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityOneBsId.setDescription('Priority 1 BsId Address')
gemtekDevCpeAPPreferredPriorityTwoBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityTwoBsId.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityTwoBsId.setDescription('Priority 2 BsId Address')
gemtekDevCpeAPPreferredPriorityThreeBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityThreeBsId.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityThreeBsId.setDescription('Priority 3 BsId Address')
gemtekDevCpeAPPreferredPriorityFourBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityFourBsId.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityFourBsId.setDescription('Priority 4 BsId Address')
gemtekDevCpeChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeChannelIndex"))
if mibBuilder.loadTexts: gemtekDevCpeChannelEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelEntry.setDescription('Channel Entry')
gemtekDevCpeChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelIndex.setDescription('Channel Index')
gemtekDevCpeChannelActive = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelActive.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelActive.setDescription('Channel Active/Disactive')
gemtekDevCpeChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelFrequency.setDescription('Channel Frequency configuration (kHz)')
gemtekDevCpeChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelBandwidth.setDescription('Channel Bandwidth configuration(kHz) 3.5MHz = 3500kHz 5MHz = 5000kHz 7MHz = 7000kHz 10MHz = 10000kHz')
gemtekDevCpeChannelRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelRssi.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelRssi.setDescription('Channel RSSI (dBm)')
gemtekDevCpeChannelCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelCinr.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelCinr.setDescription('Channel CINR(dB)')
gemtekDevCpeChannelEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelEntryEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelEntryEnable.setDescription('Channel Entry Enable(Disable/Enable)')
gemtekDevCpeChannelRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelRowstatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelRowstatus.setDescription('active(1) to active the row and save setting to memory. createAndWait(5) to create a row in the bottom. destroy(6) to delete a row.')
gemtekDevCpeChannelBsId = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelBsId.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelBsId.setDescription('Channel Bs Id')
gemtekDevCpeChannelPreambelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelPreambelIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeChannelPreambelIndex.setDescription('Channel Preamble Index')
gemtekDevCpeAuthenticationSelectionPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("eapTtls", 1), ("eapTls", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAuthenticationSelectionPhase1.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAuthenticationSelectionPhase1.setDescription('Authentication Selection Phase1(None/EAP-TLS/EAP-TTLS) EAP-TLS needs at least one Device certificate file. Please upload a device certificate file to CPE then you can set EAP-TLS.')
eapIdentityType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noIdentity", 0), ("manaulIdentity", 1), ("randomIdentity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapIdentityType.setStatus('current')
if mibBuilder.loadTexts: eapIdentityType.setDescription('EAP-TLS/EAP-TTLS Identity type 0: no Identity(Use realm) 1: manaul Identity 2: random Identity')
eapIdentityUseRealm = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapIdentityUseRealm.setStatus('current')
if mibBuilder.loadTexts: eapIdentityUseRealm.setDescription('EAP-TLS/EAP-TTLS Identity use realm Enable/Disable')
eapIdentityString = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapIdentityString.setStatus('current')
if mibBuilder.loadTexts: eapIdentityString.setDescription('EAP-TLS/EAP-TTLS Identity String configuration')
eapRealmString = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapRealmString.setStatus('current')
if mibBuilder.loadTexts: eapRealmString.setDescription('EAP-TLS/EAP-TTLS Identity String configuration')
eapValidateTheDateDurationOfCaCertificate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapValidateTheDateDurationOfCaCertificate.setStatus('current')
if mibBuilder.loadTexts: eapValidateTheDateDurationOfCaCertificate.setDescription('EAP-TLS/EAP-TTLS Validate the date duration of CA certificate(Disable/Enable)')
eapValidateTheServerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapValidateTheServerCertificate.setStatus('current')
if mibBuilder.loadTexts: eapValidateTheServerCertificate.setDescription('EAP-TLS/EAP-TTLS Validate the server certificate(Disable/Enable) It needs at least one CA certificate file. Please upload a CA certificate file to CPE then you can set it enabled.')
gemtekDevCpeAuthenticationEAPTLS = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 8))
gemtekDevCpeAuthenticationEAPTTLS = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9))
gemtekDevCpeCertificationFileManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10))
gemtekDevCpeCertificateUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1))
gemtekDevCpeCACertificateFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileName.setDescription('specify the CA certificate file name on the FTP server.')
gemtekDevCpeCACertificateFileUpload = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("upload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileUpload.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileUpload.setDescription('check and upload the CA certificate file.')
gemtekDevCpeUserCertificateFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileName.setDescription('specify the user certificate file name on the FTP server.')
gemtekDevCpeUserCertificateFileUpload = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("upload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileUpload.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileUpload.setDescription('check and upload the user certificate file.')
gemtekDevCpeCACertificateFileDelete = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fileOne", 1), ("fileTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileDelete.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileDelete.setDescription('delete the CA certificate file. Validate the server certificate needs at least one CA certificate file. If you delete all CA certificate files, it will change eapValidateTheServerCertificate to disabled.')
gemtekDevCpeUserCertificateFileDelete = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fileOne", 1), ("fileTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileDelete.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileDelete.setDescription('delete the user certificate file. EAP-TLS needs at least one device certificate file. If you delete all user certificate files, it will change gemtekDevCpeAuthenticationSelectionPhase1 to EAP-TTLS, and use device certificate disabled.')
gemtekDevCpeCACertificateFileTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4), )
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileTable.setDescription('CA certificate file table')
gemtekDevCpeCACertificateFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeCACertificateIndex"))
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileEntry.setDescription('CA certificate file entry')
gemtekDevCpeCACertificateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateIndex.setDescription('CA certificate file Table Index')
gemtekDevCpeCACertificateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateSize.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateSize.setDescription('CA certificate file size(Byte)')
gemtekDevCpeCACertificateIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateIssuer.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateIssuer.setDescription('CA certificate file issuer')
gemtekDevCpeCAValidityDateBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCAValidityDateBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCAValidityDateBegin.setDescription('CA certificate file validity date begin')
gemtekDevCpeCAValidityDateEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCAValidityDateEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCAValidityDateEnd.setDescription('CA certificate file validity date end')
gemtekDevCpeCACertificateSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateSubject.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCACertificateSubject.setDescription('CA certificate file subject')
gemtekDevCpeUserCertificateFileTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5), )
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileTable.setDescription('User certificate file table')
gemtekDevCpeUserCertificateFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeUserCertificateIndex"))
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileEntry.setDescription('User certificate file entry')
gemtekDevCpeUserCertificateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateIndex.setDescription('User certificate file Table Index')
gemtekDevCpeUserCertificateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateSize.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateSize.setDescription('User certificate file size(Byte)')
gemtekDevCpeUserCertificateIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateIssuer.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateIssuer.setDescription('User certificate file issuer')
gemtekDevCpeUserValidityDateBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserValidityDateBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserValidityDateBegin.setDescription('User certificate file validity date begin')
gemtekDevCpeUserValidityDateEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserValidityDateEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserValidityDateEnd.setDescription('User certificate file validity date end')
gemtekDevCpeUserCertificateSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateSubject.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateSubject.setDescription('User certificate file subject')
gemtekDevCpeNetoworkOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nat", 0), ("bridge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNetoworkOperatingMode.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNetoworkOperatingMode.setDescription('Netowork Operating Mode(Bridge/NAT)')
gemtekDevCpeBridgeMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2))
gemtekDevCpeNatMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3))
gemtekDevCpeAllowWebAccessingFromWan = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAllowWebAccessingFromWan.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAllowWebAccessingFromWan.setDescription('Allow Web Accessing From WAN(disable/enable)')
gemtekDevCpeAllowTelnetAccessingFromWan = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAllowTelnetAccessingFromWan.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAllowTelnetAccessingFromWan.setDescription('Allow Telnet Accessing From WAN(disable/enable)')
gemtekDevCpeDmzEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDmzEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDmzEnable.setDescription('DMZ Enable/Disable')
gemtekDevCpeDmzIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDmzIpAddress.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDmzIpAddress.setDescription('DMZ IP Address')
gemtekDevCpeRedirectIcmpToTheDmzHostEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRedirectIcmpToTheDmzHostEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeRedirectIcmpToTheDmzHostEnable.setDescription('Redirect ICMP packets to the DMZ host Enable/Disable')
gemtekDevCpeFirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEnable.setDescription('Firewall Enable/Disable')
gemtekDevCpeFirewallTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7), )
if mibBuilder.loadTexts: gemtekDevCpeFirewallTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallTable.setDescription('Firewall Table')
gemtekDevCpeFirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeFirewallIndex"))
if mibBuilder.loadTexts: gemtekDevCpeFirewallEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEntry.setDescription('Firewall Entry')
gemtekDevCpeFirewallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFirewallIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallIndex.setDescription('Firewall Index')
gemtekDevCpeFirewallName = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallName.setDescription('Firewall Name')
gemtekDevCpeFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallAction.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallAction.setDescription('Firewall Action(Deny/Allow)')
gemtekDevCpeFirewallInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet", 0), ("wimax", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallInterface.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallInterface.setDescription('Firewall Interface(Ethernet/Wimax)')
gemtekDevCpeFirewallProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 17))).clone(namedValues=NamedValues(("any", 0), ("icmp", 1), ("tcp", 6), ("udp", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallProtocol.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallProtocol.setDescription('Firewall Protocol')
gemtekDevCpeFirewallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("hi", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("lo", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallPriority.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallPriority.setDescription('Firewall Entry Priority')
gemtekDevCpeFirewallEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEntryEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEntryEnable.setDescription('Firewall Entry Enable/Disable')
gemtekDevCpeFirewallSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcMac.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcMac.setDescription('Firewall Source MAC Address')
gemtekDevCpeFirewallDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstMac.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstMac.setDescription('Firewall Destination MAC Address')
gemtekDevCpeFirewallSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcIpAddress.setDescription('Firewall Source IP Address')
gemtekDevCpeFirewallDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstIpAddress.setDescription('Firewall Destination IP Address')
gemtekDevCpeFirewallSrcPortRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcPortRangeBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcPortRangeBegin.setDescription('Firewall Source Port Range Begin(1~65535)')
gemtekDevCpeFirewallSrcPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcPortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcPortRangeEnd.setDescription('Firewall Source Port Range End(1~65535)')
gemtekDevCpeFirewallDstPortRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstPortRangeBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstPortRangeBegin.setDescription('Firewall Destination Port Range Begin(1~65535)')
gemtekDevCpeFirewallDstPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstPortRangeEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstPortRangeEnd.setDescription('Firewall Destination Port Range End(1~65535)')
gemtekDevCpeFirewallRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallRowstatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallRowstatus.setDescription('active(1) to active the row and save setting to memory. createAndWait(5) to create a row in the bottom. destroy(6) to delete a row.')
gemtekDevCpeTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTelnetEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTelnetEnable.setDescription('Telnet Enable/Disable')
gemtekDevCpeFirewallEtherTypeFilterOneEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterOneEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterOneEnable.setDescription('Firewall Ether-Type Filter Group One Enable/Disable')
gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny.setDescription('Firewall Ether-Type Filter Group One Type Deny')
gemtekDevCpeFirewallEtherTypeFilterTwoEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterTwoEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterTwoEnable.setDescription('Firewall Ether-Type Filter Group Two Enable/Disable')
gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny.setDescription('Firewall Ether-Type Filter Group Two Type Deny')
gemtekDevCpeFirewallEtherTypeFilterThreeEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterThreeEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterThreeEnable.setDescription('Firewall Ether-Type Filter Group Three Enable/Disable')
gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny.setDescription('Firewall Ether-Type Filter Group Three Type Deny')
gemtekDevCpeFirewallEtherTypeFilterFourEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFourEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFourEnable.setDescription('Firewall Ether-Type Filter Group Four Enable/Disable')
gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny.setDescription('Firewall Ether-Type Filter Group Four Type Deny')
gemtekDevCpeFirewallEtherTypeFilterFiveEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFiveEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFiveEnable.setDescription('Firewall Ether-Type Filter Group Five Enable/Disable')
gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny.setDescription('Firewall Ether-Type Filter Group Five Type Deny')
gemtekDevCpeFirewallPPPoEEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallPPPoEEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirewallPPPoEEnable.setDescription('PPPoE Enable/Disable (Only allow PPPoE traffic pass through)')
gemtekDevCpeServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1), )
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowTable.setDescription('gemtekDevCpeServiceFlowTable')
gemtekDevCpeServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeServiceFlowIndex"))
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowEntry.setDescription('gemtekDevCpeServiceFlowEntry')
gemtekDevCpeServiceFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowIndex.setDescription('Service Flow Index')
gemtekDevCpeServiceFlowSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowSFID.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowSFID.setDescription('Service Flow SFID')
gemtekDevCpeServiceFlowCID = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowCID.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowCID.setDescription('Service Flow CID')
gemtekDevCpeServiceFlowBCID = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowBCID.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowBCID.setDescription('Service Flow Basic CID')
gemtekDevCpeServiceFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("basic", 0), ("primary", 1), ("secondary", 2), ("data", 3), ("multicast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowType.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowType.setDescription('Service Flow Type: 0:basic 1:primary 2:secondary 3:data 4multicast')
gemtekDevCpeServiceFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("provisioned", 0), ("admitted", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowState.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowState.setDescription('Service Flow State: 0:provisioned 1:admitted 2:active')
gemtekDevCpeServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uplink", 1), ("downlink", 2), ("bidirectional", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowDirection.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowDirection.setDescription('Service Flow Direction 1:uplink 2:downlink 3:bidirectional')
gemtekDevCpeServiceFlowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowEnable.setDescription('Service Flow Enable/Disable')
gemtekDevCpeServiceFlowScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bestEffort", 2), ("nrtps", 3), ("rtps", 4), ("ertps", 5), ("ugs", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowScheduling.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowScheduling.setDescription('Service Flow Scheduling type')
gemtekDevCpeServiceFlowMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowMaxRate.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowMaxRate.setDescription('Service Flow Max Rate(bit/s)')
gemtekDevCpeServiceFlowARQ = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowARQ.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowARQ.setDescription('Service Flow ARQ Enable yes/no')
gemtekDevCpeServiceFlowHARQ = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowHARQ.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowHARQ.setDescription('Service Flow HARQ Enable yes/no')
gemtekDevCpeServiceFlowRules = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowRules.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowRules.setDescription('Service Flow calssifier rule numbers')
gemtekDevCpePullFtpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerIP.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerIP.setDescription('FTP upgrade server IP')
gemtekDevCpePullFtpServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerUserName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerUserName.setDescription('Ftp Server User Name')
gemtekDevCpePullFtpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerPassword.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerPassword.setDescription('Ftp Server Password')
gemtekDevCpePullFtpFilePath = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpFilePath.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePullFtpFilePath.setDescription('Ftp File Path')
gemtekDevCpePullFtpFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpFileName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePullFtpFileName.setDescription('Ftp File Name')
gemtekDevCpePullFtpUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("downloadAndUpgrade", 1), ("rollback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpUpgradeCmd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePullFtpUpgradeCmd.setDescription('Control FTP upgrade')
gemtekDevCpePullFtpUpgradeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 0), ("downloading", 1), ("installing", 2), ("error", 3), ("success", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePullFtpUpgradeAdminStatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePullFtpUpgradeAdminStatus.setDescription('Device status information on the progress of the upgrade.')
gemtekDevCpeCurrentSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCurrentSwVersion.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeCurrentSwVersion.setDescription('This value identifies the version of software currently running in the CPE')
gemtekDevCpePreviousSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePreviousSwVersion.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePreviousSwVersion.setDescription('This value identifies the previous software version in the CPE')
gemtekDevCpeDownloadSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDownloadSwVersion.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDownloadSwVersion.setDescription('This value identifies the version of software to download')
gemtekDevCpePushFtpUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("download", 1), ("upgrade", 2), ("rollback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePushFtpUpgradeCmd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePushFtpUpgradeCmd.setDescription('Control FTP upgrade process')
gemtekDevCpePushFtpUpgradeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ready", 0), ("installing", 1), ("error", 2), ("success", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePushFtpUpgradeAdminStatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePushFtpUpgradeAdminStatus.setDescription('Device status information on the progress of the upgrade.')
gemtekDevCpeWimaxRssi = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxRssi.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxRssi.setDescription('RSSI Report(dBm)')
gemtekDevCpeWimaxCinr = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinr.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinr.setDescription('CINR Report(dB)')
gemtekDevCpeWimaxTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxTxPower.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxTxPower.setDescription('Tx Power Report(dBm)')
gemtekDevCpeWimaxMaxTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxMaxTxPower.setDescription('MAX Tx Power Report(dBm)')
gemtekDevCpeWimaxUpLinkModulation = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxUpLinkModulation.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxUpLinkModulation.setDescription('Up Link Modulation Type : QPSK [CC] 1/2 QPSK [CC] 3/4 16-QAM [CC] 1/2 16-QAM [CC] 3/4 64-QAM [CC] 1/2 64-QAM [CC] 2/3 64-QAM [CC] 3/4 QPSK [BTC] 1/2 QPSK [BTC] 3/4 16-QAM [BTC] 3/5 16-QAM [BTC] 4/5 64-QAM [BTC] 5/8 64-QAM [BTC] 4/5 QPSK [CTC] 1/2 Reserved QPSK [CTC] 3/4 16-QAM [CTC] 1/2 16-QAM [CTC] 3/4 64-QAM [CTC] 1/2 64-QAM [CTC] 2/3 64-QAM [CTC] 3/4 64-QAM [CTC] 5/6 QPSK [ZT CC] 1/2 QPSK [ZT CC] 3/4 16-QAM [ZT CC] 1/2 16-QAM [ZT CC] 3/4 64-QAM [ZT CC] 1/2 64-QAM [ZT CC] 2/3 64-QAM [ZT CC] 3/4 QPSK [LDPC] 1/2 QPSK [LDPC] 2/3 A code QPSK [LDPC] 3/4 A code 16-QAM [LDPC] 1/2 16-QAM [LDPC] 2/3 A code 16-QAM [LDPC] 3/4 A code 64-QAM [LDPC] 1/2 64-QAM [LDPC] 2/3 A code 64-QAM [LDPC] 3/4 A code QPSK [CC with optional interleaver] 1/2 QPSK [CC with optional interleaver] 3/4 16-QAM [CC with optional interleaver] 1/2 16-QAM [CC with optional interleaver] 3/4 64-QAM [CC with optional interleaver] 2/3 64-QAM [CC with optional interleaver] 3/4 QPSK [LDPC] 5/6 16-QAM [LDPC] 5/6 64-QAM [LDPC] 5/6')
gemtekDevCpeWimaxDownLinkModulation = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxDownLinkModulation.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxDownLinkModulation.setDescription('Down Link Modulation Type : QPSK [CC] 1/2 QPSK [CC] 3/4 16-QAM [CC] 1/2 16-QAM [CC] 3/4 64-QAM [CC] 1/2 64-QAM [CC] 2/3 64-QAM [CC] 3/4 QPSK [BTC] 1/2 QPSK [BTC] 3/4 or 2/3 16-QAM [BTC] 3/5 16-QAM [BTC] 4/5 64-QAM [BTC] 2/3 or 5/8 64-QAM [BTC] 5/6 or 4/5 QPSK [CTC] 1/2 Reserved QPSK [CTC] 3/4 16-QAM [CTC] 1/2 16-QAM [CTC] 3/4 64-QAM [CTC] 1/2 64-QAM [CTC] 2/3 64-QAM [CTC] 3/4 64-QAM [CTC] 5/6 QPSK [ZT CC] 1/2 QPSK [ZT CC] 3/4 16-QAM [ZT CC] 1/2 16-QAM [ZT CC] 3/4 64-QAM [ZT CC] 1/2 64-QAM [ZT CC] 2/3 64-QAM [ZT CC] 3/4 QPSK [LDPC] 1/2 QPSK [LDPC] 2/3 A code QPSK [LDPC] 3/4 A code 16-QAM [LDPC] 1/2 16-QAM [LDPC] 2/3 A code 16-QAM [LDPC] 3/4 A code 64-QAM [LDPC] 1/2 64-QAM [LDPC] 2/3 A code 64-QAM [LDPC] 3/4 A code QPSK [LDPC] 2/3 B code QPSK [LDPC] 3/4 B code 16-QAM [LDPC] 2/3 B code 16-QAM [LDPC] 3/4 B code 64-QAM [LDPC] 2/3 B code 64-QAM [LDPC] 3/4 B code QPSK [CC with optional interleaver] 1/2 QPSK [CC with optional interleaver] 3/4 16-QAM [CC with optional interleaver] 1/2 16-QAM [CC with optional interleaver] 3/4 64-QAM [CC with optional interleaver] 2/3 64-QAM [CC with optional interleaver] 3/4 QPSK [LDPC] 5/6 16-QAM [LDPC] 5/6 64-QAM [LDPC] 5/6')
gemtekDevCpeWimaxBsid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxBsid.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxBsid.setDescription('Base Station MAC Address')
gemtekDevCpeWimaxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxFrequency.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxFrequency.setDescription('Center Frequency (kHz)')
gemtekDevCpeWimaxUpLinkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxUpLinkDataRate.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxUpLinkDataRate.setDescription('Up Link Data Rate Report(Kbps)')
gemtekDevCpeWimaxDownLinkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxDownLinkDataRate.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxDownLinkDataRate.setDescription('Down Link Data Rate Report(Kbps)')
gemtekDevCpeWimaxTotalUpLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxTotalUpLinkDataByte.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxTotalUpLinkDataByte.setDescription('Total Up Link Data Bytes Report(Bytes)')
gemtekDevCpeWimaxTotalDownLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxTotalDownLinkDataByte.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxTotalDownLinkDataByte.setDescription('Total Down Link Data Bytes Report(Bytes)')
gemtekDevCpeWimaxCpeState = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCpeState.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxCpeState.setDescription('CPE State')
gemtekDevCpeWimaxCinrReuse1 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinrReuse1.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinrReuse1.setDescription('CINR Reuse1 Report(dB)')
gemtekDevCpeWimaxCinrReuse3 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinrReuse3.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinrReuse3.setDescription('CINR Reuse3 Report(dB)')
gemtekDevCpeWimaxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxBandwidth.setDescription('CPE Bandwidth(kHz)')
gemtekDevCpeWimaxZoneCinrChannelZero = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxZoneCinrChannelZero.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxZoneCinrChannelZero.setDescription('Zone CINR channel 0 Report(dB)')
gemtekDevCpeWimaxMimoMode = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("siso", 0), ("mimoMatrixA", 1), ("mimoMatrixB", 2), ("disconnect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxMimoMode.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWimaxMimoMode.setDescription('MIMO mode status')
gemtekDevCpeLanMacAddresss = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanMacAddresss.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLanMacAddresss.setDescription('CPE LAN MAC Address')
gemtekDevCpeLanTotalDownLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalDownLinkDataByte.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLanTotalDownLinkDataByte.setDescription('Total Down Link Data Bytes Report(Bytes)')
gemtekDevCpeLanTotalUpLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalUpLinkDataByte.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLanTotalUpLinkDataByte.setDescription('Total Up Link Data Bytes Report(Bytes)')
gemtekDevCpeLanTotalDownLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalDownLinkDataPackets.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLanTotalDownLinkDataPackets.setDescription('LAN Total Down Link Data Packets Report(Packets)')
gemtekDevCpeLanTotalUpLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalUpLinkDataPackets.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLanTotalUpLinkDataPackets.setDescription('LAN Total Up Link Data Packets Report(Packets)')
gemtekDevCpeWanMacAddresss = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWanMacAddresss.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWanMacAddresss.setDescription('CPE WAN MAC Address')
gemtekDevCpeWanTotalDownLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWanTotalDownLinkDataPackets.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWanTotalDownLinkDataPackets.setDescription('WAN Total Down Link Data Packets Report(Packets)')
gemtekDevCpeWanTotalUpLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWanTotalUpLinkDataPackets.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeWanTotalUpLinkDataPackets.setDescription('WAN Total Up Link Data Packets Report(Packets)')
gemtekDevCpeHardwareModel = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeHardwareModel.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeHardwareModel.setDescription('Hardware Model of CPE')
gemtekDevCpeFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirmwareVersion.setDescription('Firmware Version of CPE')
gemtekDevCpeFirmwareCreationDate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareCreationDate.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFirmwareCreationDate.setDescription('Firmware Creation Date')
gemtekDevCpeFrequencyRange = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFrequencyRange.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeFrequencyRange.setDescription('Frequency Range of CPE')
gemtekDevCpeSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeSerialNumber.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSerialNumber.setDescription('Serial Number of CPE')
gemtekDevCpeLatitude = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeLatitude.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLatitude.setDescription('CPE Latitude Report')
gemtekDevCpeLongitude = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeLongitude.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeLongitude.setDescription('CPE Longitude Report')
gemtekDevCpeHeight = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeHeight.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeHeight.setDescription('CPE Height Report')
gemtekDevCpeMibsVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeMibsVersion.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeMibsVersion.setDescription('MIBs Version of CPE')
gemtekDevCpeBootromVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBootromVersion.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBootromVersion.setDescription('Bootrom Version of CPE')
gemtekDevCpeBootromCreationDate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBootromCreationDate.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBootromCreationDate.setDescription('Bootrom Creation Date')
gemtekDevCpeProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeProductVersion.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeProductVersion.setDescription('Product Version of CPE')
trapServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerEnable.setStatus('current')
if mibBuilder.loadTexts: trapServerEnable.setDescription('Enables/disables trap. Default: Disable')
trapServerIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerIp.setStatus('current')
if mibBuilder.loadTexts: trapServerIp.setDescription('trap server')
trapServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerPort.setStatus('current')
if mibBuilder.loadTexts: trapServerPort.setDescription('trap port')
trapServerCommunity = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerCommunity.setStatus('current')
if mibBuilder.loadTexts: trapServerCommunity.setDescription('trap community')
coldStart = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 1))
if mibBuilder.loadTexts: coldStart.setStatus('current')
if mibBuilder.loadTexts: coldStart.setDescription('A coldStart trap signifies that the SNMP entity, supporting a notification originator application, is reinitializing itself and that its configuration may have been altered.')
warmStart = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 2))
if mibBuilder.loadTexts: warmStart.setStatus('current')
if mibBuilder.loadTexts: warmStart.setDescription('A warmStart trap signifies that the SNMP entity, supporting a notification originator application, is reinitializing itself such that its configuration is unaltered.')
fatalErrorRestart = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 3))
if mibBuilder.loadTexts: fatalErrorRestart.setStatus('current')
if mibBuilder.loadTexts: fatalErrorRestart.setDescription('A fatalErrorRestart trap signifies that the SNMP entity, supporting a notification originator application, is reinitializing itself such that fatal error may have occured.')
linkUp = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: linkUp.setStatus('current')
if mibBuilder.loadTexts: linkUp.setDescription('A linkUp trap signifies that the SNMP entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links left the down state and transitioned into some other state (but not into the notPresent state). This other state is indicated by the included value of ifOperStatus.')
notTheHightestPriorityAP = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 5))
if mibBuilder.loadTexts: notTheHightestPriorityAP.setStatus('current')
if mibBuilder.loadTexts: notTheHightestPriorityAP.setDescription('When the AP preferred selection mode is enabled and the PMP320CPE synchronizes to an AP that is not the highest priority AP in the BSID list, the CPE shall send an SNMP trap after initial service flows and PMP320CPE management IP connectivity are established.')
eapTlsPrivateKeyPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTlsPrivateKeyPassword.setStatus('current')
if mibBuilder.loadTexts: eapTlsPrivateKeyPassword.setDescription('EAP-TLS Private key password')
eapTtlsPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2), ("mschap", 3), ("mschapV2", 4), ("md5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsPhase2.setStatus('current')
if mibBuilder.loadTexts: eapTtlsPhase2.setDescription('EAP-TTLS Phase2(PAP/CHAP/MSCHAP/MSCHAPV2/MD5)')
eapTtlsUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsUsername.setStatus('current')
if mibBuilder.loadTexts: eapTtlsUsername.setDescription('EAP-TTLS Username')
eapTtlsPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsPassword.setStatus('current')
if mibBuilder.loadTexts: eapTtlsPassword.setDescription('EAP-TTLS Password')
eapTtlsUseDeviceCertificate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsUseDeviceCertificate.setStatus('current')
if mibBuilder.loadTexts: eapTtlsUseDeviceCertificate.setDescription('EAP-TTLS Use device certificate(Disable/Enable) It needs at least one user certificate file. Please upload a user certificate file to CPE then you can set it enabled.')
eapTtlsPrivateKeyPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsPrivateKeyPassword.setStatus('current')
if mibBuilder.loadTexts: eapTtlsPrivateKeyPassword.setDescription('EAP-TTLS Private key password(the same as EAP-TLS).')
gemtekDevCpeBridgeIpType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeIpType.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBridgeIpType.setDescription('Bridge IP Type(Static/DHCP)')
gemtekDevCpeBridgeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeIpAddress.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBridgeIpAddress.setDescription('Bridge Mode Static IP Address configuration')
gemtekDevCpeBridgeNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeNetmask.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBridgeNetmask.setDescription('Bridge Mode Static Netmask configuration')
gemtekDevCpeBridgeGateway = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeGateway.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBridgeGateway.setDescription('Bridge Mode Static IP Gateway')
gemtekDevCpeBridgeDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpLeaseTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpLeaseTime.setDescription('Bridge Mode DHCP IP Lease time(sec).')
gemtekDevCpeBridgeDhcpRenewalTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpRenewalTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpRenewalTime.setDescription('Bridge Mode DHCP IP Renewal time(sec).')
gemtekDevCpeBridgeDhcpRebindTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpRebindTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpRebindTime.setDescription('Bridge Mode DHCP IP Rebind time(sec).')
gemtekDevCpeMVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8))
gemtekDevCpeMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1))
gemtekDevCpeDataVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2))
gemtekDevCpeVlanMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3), )
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipTable.setDescription('VLAN Membership Table')
gemtekDevCpeVlanMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeVlanMembershipIndex"))
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipEntry.setDescription('VLAN Membership Entry')
gemtekDevCpeDscpToVp = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 4))
gemtekDevCpePktCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5))
gemtekDevCpeMgmtVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanEnalbe.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanEnalbe.setDescription('Management VLAN (Enabled/Disabled)')
gemtekDevCpeMgmtVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanVid.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanVid.setDescription('Setting Management VLAN VID(0~4095).')
gemtekDevCpeMgmtVlanVp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanVp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanVp.setDescription('Management VLAN VP.')
gemtekDevCpeDataVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDataVlanEnalbe.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDataVlanEnalbe.setDescription('Data VLAN (Enabled/Disabled)')
gemtekDevCpeDataVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDataVlanVid.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDataVlanVid.setDescription('Setting Data VLAN VID(0~4095).')
gemtekDevCpeAllowPacketType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("taggedOnly", 1), ("untaggedOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAllowPacketType.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeAllowPacketType.setDescription('Data VLN allow packet type')
gemtekDevCpeVlanMembershipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipIndex.setDescription('VLAN Membership Index')
gemtekDevCpeVlanMembershipVidBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidBegin.setDescription('VLAN Membership VLAN VID Begin(0~4095).')
gemtekDevCpeVlanMembershipVidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidEnd.setDescription('VLAN Membership VLAN VID End(0~4095).')
gemtekDevCpeVlanMembershipVidRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidRowstatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidRowstatus.setDescription("active(1) to active the row and save setting to memory. createAndWait(5) to create a row in the bottom. destroy(6) to delete a row. Every row can't overlap(Begin,End). ")
gemtekDevCpeDscpToVpMapping = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDscpToVpMapping.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDscpToVpMapping.setDescription('DSCP To VP Mapping, CP00~CP63,CP00=0,CP48=6,CP56=7.')
gemtekDevCpeTaggedPkts = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeTaggedPkts.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTaggedPkts.setDescription('CPE tagged packets.')
gemtekDevCpeTaggedPktsReset = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTaggedPktsReset.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTaggedPktsReset.setDescription('Reset CPE tagged packets.')
gemtekDevCpeUntaggedPkts = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUntaggedPkts.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUntaggedPkts.setDescription('CPE tagged packets.')
gemtekDevCpeUntaggedPktsReset = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUntaggedPktsReset.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeUntaggedPktsReset.setDescription('Reset CPE untagged packets.')
gemtekDevCpeNonmemberPkts = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNonmemberPkts.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNonmemberPkts.setDescription('CPE Non-member packets.')
gemtekDevCpeNonmemberPktsReset = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNonmemberPktsReset.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNonmemberPktsReset.setDescription('Reset CPE Non-member packets.')
gemtekDevCpeNatWanIpType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanIpType.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatWanIpType.setDescription('NAT WAN IP Type(Static/DHCP)')
gemtekDevCpeNatWanIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanIpAddress.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatWanIpAddress.setDescription('NAT Static WAN IP Address configuration')
gemtekDevCpeNatWanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanNetmask.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatWanNetmask.setDescription('NAT Static WAN Netmask configuration')
gemtekDevCpeNatWanGateway = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanGateway.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatWanGateway.setDescription('NAT Static WAN Gateway configuration')
gemtekDevCpeNatWanDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpLeaseTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpLeaseTime.setDescription('NAT Mode DHCP IP Lease time(sec).')
gemtekDevCpeNatWanDhcpRenewalTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpRenewalTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpRenewalTime.setDescription('NAT Mode DHCP IP Renewal time(sec).')
gemtekDevCpeNatWanDhcpRebindTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpRebindTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpRebindTime.setDescription('NAT Mode DHCP IP Rebind time(sec).')
gemtekDevCpeNatLanIpType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatLanIpType.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatLanIpType.setDescription('NAT LAN IP Type(Static/DHCP)')
gemtekDevCpeNatLanIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatLanIpAddress.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatLanIpAddress.setDescription('NAT LAN IP Address configuration')
gemtekDevCpeNatLanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatLanNetmask.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatLanNetmask.setDescription('NAT LAN Netmask configuration')
gemtekDevCpeNatMtu = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatMtu.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatMtu.setDescription('NAT Ethernet MTU size(Default:1476)')
gemtekDevCpeDhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9))
gemtekDevCpePortForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10))
gemtekDevCpePortTrigger = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11))
gemtekDevCpeDhcpClientList = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12))
gemtekDevCpeDscpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 13))
gemtekDevCpeNatModeVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17))
gemtekDevCpeNatModeMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1))
gemtekDevCpeNatModeDataVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2))
gemtekDevCpeNatModeMgmtVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanEnalbe.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanEnalbe.setDescription('[Nat Mode] Management VLAN (Enabled/Disabled)')
gemtekDevCpeNatModeMgmtVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanVid.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanVid.setDescription('[Nat Mode] Setting Management VLAN VID(1~4095).')
gemtekDevCpeNatModeMgmtVlanVp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanVp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanVp.setDescription('[Nat Mode] Setting Management VLAN VP(0~7).')
gemtekDevCpeNatModeDataVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanEnalbe.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanEnalbe.setDescription('[Nat Mode] Data VLAN (Enabled/Disabled)')
gemtekDevCpeNatModeDataVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanVid.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanVid.setDescription('[Nat Mode] Setting Data VLAN VID(1~4095).')
gemtekDevCpeNatModeDataVlanVp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanVp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanVp.setDescription('[Nat Mode] Setting Data VLAN VP(0~7).')
gemtekDevCpeDhcpServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerEnable.setDescription('DHCP Server Enable/Disable')
gemtekDevCpeDhcpServerStartIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerStartIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerStartIp.setDescription('DHCP Server Start IP')
gemtekDevCpeDhcpServerEndIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerEndIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerEndIp.setDescription('DHCP Server End IP')
gemtekDevCpeDhcpServerPrimaryDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPrimaryDnsIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPrimaryDnsIp.setDescription('DHCP Server Primary DNS IP Address configuration')
gemtekDevCpeDhcpServerPrimaryDnsFromIsp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPrimaryDnsFromIsp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPrimaryDnsFromIsp.setDescription('DHCP Server Primary DNS From ISP Enable/Disable')
gemtekDevCpeDhcpServerSecondDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerSecondDnsIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerSecondDnsIp.setDescription('DHCP Server Second DNS IP Address configuration')
gemtekDevCpeDhcpServerSecondDnsFromIsp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerSecondDnsFromIsp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerSecondDnsFromIsp.setDescription('DHCP Server Second DNS From ISP Enable/Disable')
gemtekDevCpeDhcpServerTertiaryDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerTertiaryDnsIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerTertiaryDnsIp.setDescription('DHCP Server Tertiary DNS IP Address configuration')
gemtekDevCpeDhcpServerTertiaryDnsFromIsp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerTertiaryDnsFromIsp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerTertiaryDnsFromIsp.setDescription('DHCP Server Tertiary DNS From ISP Enable/Disable')
gemtekDevCpeDhcpServerDomainName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerDomainName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerDomainName.setDescription('DHCP Server Domain Name')
gemtekDevCpeDhcpServerMaxLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerMaxLeaseTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerMaxLeaseTime.setDescription('DHCP Server MAX Lease Time')
gemtekDevCpeDhcpServerPermanentHostTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12), )
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostTable.setDescription('DHCP Server Permanent Host Table')
gemtekDevCpeDhcpServerPermanentHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeDhcpServerPermanentHostIndex"))
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostEntry.setDescription('DHCP Server Permanent Host Entry')
gemtekDevCpeDhcpServerPermanentHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostIndex.setDescription('DHCP Server Permanent Host Index')
gemtekDevCpeDhcpServerPermanentHostMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostMac.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostMac.setDescription('DHCP Server Permanent Host MAC')
gemtekDevCpeDhcpServerPermanentHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostIp.setDescription('DHCP Server Permanent Host IP')
gemtekDevCpeDhcpServerPermanentHostEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostEntryEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostEntryEnable.setDescription('DHCP Server Permanent Host Entry Enable/Disable')
gemtekDevCpeDhcpServerPermanentRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentRowstatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentRowstatus.setDescription('active(1) to active the row and save setting to memory. createAndWait(5) to create a row in the bottom. destroy(6) to delete a row.')
gemtekDevCpePortForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1), )
if mibBuilder.loadTexts: gemtekDevCpePortForwardingTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingTable.setDescription('Port Forwarding Table')
gemtekDevCpePortForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpePortForwardingIndex"))
if mibBuilder.loadTexts: gemtekDevCpePortForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingEntry.setDescription('Port Forwarding Entry WAN End - WAN Begin=LAN End - LAN Begin, WAN End - WAN Begin <=30, WAN Begin=>1 WAN End<=65535, LAN Begin=>1 LAN End<=65535')
gemtekDevCpePortForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingIndex.setDescription('Port Forwarding Index')
gemtekDevCpePortForwardingWanPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingWanPortBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingWanPortBegin.setDescription('Port Forwarding Wan Port Begin')
gemtekDevCpePortForwardingWanPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingWanPortEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingWanPortEnd.setDescription('Port Forwarding Wan Port End')
gemtekDevCpePortForwardingLanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanIp.setDescription('Port Forwarding Lan Ip')
gemtekDevCpePortForwardingLanPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanPortBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanPortBegin.setDescription('Port Forwarding Lan Port Begin')
gemtekDevCpePortForwardingLanPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanPortEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanPortEnd.setDescription('Port Forwarding Lan Port End')
gemtekDevCpePortForwardingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1), ("tcpAndUdp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingProtocol.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingProtocol.setDescription('Port Forwarding Entry Protocol')
gemtekDevCpePortForwardingEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingEntryEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingEntryEnable.setDescription('Port Forwarding Entry Enable')
gemtekDevCpePortForwardingRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingRowstatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortForwardingRowstatus.setDescription('active(1) to active the row and save setting to memory. createAndWait(5) to create a row in the bottom. destroy(6) to delete a row.')
gemtekDevCpePortTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1), )
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTable.setDescription('Port Trigger Table')
gemtekDevCpePortTriggerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpePortTriggerIndex"))
if mibBuilder.loadTexts: gemtekDevCpePortTriggerEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerEntry.setDescription('Port Trigger Entry 1<=TriggerPortBegin<TriggerPortEnd<=65535 1<=ForwardingPortBegin<ForwardingPortEnd<=65535 (ForwardingPortEnd-ForwardingPortBegin)<=30')
gemtekDevCpePortTriggerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerIndex.setDescription('Port Trigger Index')
gemtekDevCpePortTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerName.setDescription('Port Trigger Name')
gemtekDevCpePortTriggerTriggerPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTriggerPortBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTriggerPortBegin.setDescription('Port Trigger Trigger Port Begin')
gemtekDevCpePortTriggerTriggerPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTriggerPortEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTriggerPortEnd.setDescription('Port Trigger Trigger Port End')
gemtekDevCpePortTriggerForwardingPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerForwardingPortBegin.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerForwardingPortBegin.setDescription('Port Trigger Forwarding Port Begin')
gemtekDevCpePortTriggerForwardingPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerForwardingPortEnd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerForwardingPortEnd.setDescription('Port Trigger Forwarding Port End')
gemtekDevCpePortTriggerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerProtocol.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerProtocol.setDescription('Port Trigger Protocol')
gemtekDevCpePortTriggerEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerEntryEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerEntryEnable.setDescription('Port Trigger Entry Enable')
gemtekDevCpePortTriggerRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerRowstatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpePortTriggerRowstatus.setDescription('active(1) to active the row and save setting to memory. createAndWait(5) to create a row in the bottom. destroy(6) to delete a row.')
gemtekDevCpeDhcpClentListTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1), )
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListTable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListTable.setDescription('gemtekDevCpeDhcpClentListTable')
gemtekDevCpeDhcpClentListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeDhcpClentListIndex"))
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListEntry.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListEntry.setDescription('gemtekDevCpeDhcpClentListEntry')
gemtekDevCpeDhcpClentListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListIndex.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListIndex.setDescription('DHCP Clent List Index')
gemtekDevCpeDhcpClentListIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListIp.setDescription('DHCP Clent List: IP Address')
gemtekDevCpeDhcpClentListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListMacAddress.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListMacAddress.setDescription('DHCP Clent List: MAC Address')
gemtekDevCpeDhcpClentListExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListExpireTime.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListExpireTime.setDescription('DHCP Clent List: Expire Time')
gemtekDevCpeTftpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTftpServerIP.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTftpServerIP.setDescription('TFTP upgrade server IP')
gemtekDevCpeTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTftpFileName.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTftpFileName.setDescription('TFTP File Name')
gemtekDevCpeTftpUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("downloadAndUpgrade", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTftpUpgradeCmd.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTftpUpgradeCmd.setDescription('Control TFTP upgrade')
gemtekDevCpeTftpUpgradeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 0), ("downloading", 1), ("installing", 2), ("error", 3), ("success", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeTftpUpgradeAdminStatus.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeTftpUpgradeAdminStatus.setDescription('Device status information on the progress of the upgrade.')
gemtekDevCpeMgmtDscpId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMgmtDscpId.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeMgmtDscpId.setDescription('MGMT DSCP ID(range:0~63, default:0)')
gemtekDevCpeDropDataPacket = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDropDataPacket.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeDropDataPacket.setDescription('Drop data packet if its dscp is the same as mgmt Enabled/Disabled(default:Disabled)')
gemtekDevCpeSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSyslogEnable.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSyslogEnable.setDescription('Send syslog to syslog server enable/disable')
gemtekDevCpeSyslogServerIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSyslogServerIp.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSyslogServerIp.setDescription('config syslog server IP')
gemtekDevCpeSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 12, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeSyslogServerPort.setStatus('current')
if mibBuilder.loadTexts: gemtekDevCpeSyslogServerPort.setDescription('config syslog server port(1~65535,default:514)')
gemtekDevCpeMaxTxPowerModeSelection = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rf", 0), ("eirp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMaxTxPowerModeSelection.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeMaxTxPowerModeSelection.setDescription('The variable is deprecated. Max Tx Power Mode Selection (RF Mode/EIRP Mode)')
gemtekDevCpeMaxTxPowerRfMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2))
gemtekDevCpeMaxTxPowerEirpMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3))
gemtekDevCpeRfModeBPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeBPSK.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeRfModeBPSK.setDescription('The variable is deprecated. RF Mode BPSK Setting(0~2750)')
gemtekDevCpeRfModeQPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeQPSK.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeRfModeQPSK.setDescription('The variable is deprecated. RF Mode QPSK Setting(0~2750)')
gemtekDevCpeRfModeQAM16 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeQAM16.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeRfModeQAM16.setDescription('The variable is deprecated. RF Mode QAM16 Setting(0~2750)')
gemtekDevCpeRfModeQAM64 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeQAM64.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeRfModeQAM64.setDescription('The variable is deprecated. RF Mode QAM64 Setting(0~2450)')
gemtekDevCpeEirpModeAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeAntennaGain.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeEirpModeAntennaGain.setDescription('The variable is deprecated. EIRP Mode Antenna Gain(0~2450)')
gemtekDevCpeEirpModeBPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeBPSK.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeEirpModeBPSK.setDescription('The variable is deprecated. EIRP Mode BPSK Setting(0~2750)')
gemtekDevCpeEirpModeQPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQPSK.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQPSK.setDescription('The variable is deprecated. EIRP Mode QPSK Setting(0~2750)')
gemtekDevCpeEirpModeQAM16 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQAM16.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQAM16.setDescription('The variable is deprecated. EIRP Mode QAM16 Setting(0~2750)')
gemtekDevCpeEirpModeQAM64 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQAM64.setStatus('obsolete')
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQAM64.setDescription('The variable is deprecated. EIRP Mode QAM64 Setting(0~2450)')
mibBuilder.exportSymbols("Motorola-Cpe-PRIVATE-MIB", gemtekDevCpeServiceFlow=gemtekDevCpeServiceFlow, eapRealmString=eapRealmString, gemtekDevCpeWimaxBandwidth=gemtekDevCpeWimaxBandwidth, gemtekDevCpeDownloadSwVersion=gemtekDevCpeDownloadSwVersion, gemtekDevCpeTrap=gemtekDevCpeTrap, gemtekDevCpeAuthenticationSelectionPhase1=gemtekDevCpeAuthenticationSelectionPhase1, gemtekDevCpePullFtpUpgradeAdminStatus=gemtekDevCpePullFtpUpgradeAdminStatus, gemtekDevCpeNatWanDhcpRenewalTime=gemtekDevCpeNatWanDhcpRenewalTime, gemtekDevCpeEirpModeQPSK=gemtekDevCpeEirpModeQPSK, gemtekDevCpeFirewallInterface=gemtekDevCpeFirewallInterface, gemtekDevCpePullFtpServerPassword=gemtekDevCpePullFtpServerPassword, eapIdentityUseRealm=eapIdentityUseRealm, gemtekDevCpeServiceFlowEnable=gemtekDevCpeServiceFlowEnable, gemtekDevCpeFirewallPriority=gemtekDevCpeFirewallPriority, gemtekDevCpeAutoFirmwareRollback=gemtekDevCpeAutoFirmwareRollback, gemtekDevCpeAPPreferredList=gemtekDevCpeAPPreferredList, gemtekDevCpeDhcpClentListExpireTime=gemtekDevCpeDhcpClentListExpireTime, gemtekDevCpeStatus=gemtekDevCpeStatus, gemtekDevCpeWimaxTotalDownLinkDataByte=gemtekDevCpeWimaxTotalDownLinkDataByte, gemtekDevCpeChannelRssi=gemtekDevCpeChannelRssi, gemtekDevCpeAuthenticationEAPTLS=gemtekDevCpeAuthenticationEAPTLS, gemtekDevCpeLanTotalUpLinkDataPackets=gemtekDevCpeLanTotalUpLinkDataPackets, gemtekDevCpeServiceFlowTable=gemtekDevCpeServiceFlowTable, gemtekDevCpeCertificationFileManagement=gemtekDevCpeCertificationFileManagement, gemtekDevCpeDataVlanEnalbe=gemtekDevCpeDataVlanEnalbe, gemtekDevCpeMgmtVlanVid=gemtekDevCpeMgmtVlanVid, gemtekDevCpeDhcpServerPermanentHostMac=gemtekDevCpeDhcpServerPermanentHostMac, gemtekDevCpeDhcpServerSecondDnsFromIsp=gemtekDevCpeDhcpServerSecondDnsFromIsp, gemtekDevCpePortTriggerRowstatus=gemtekDevCpePortTriggerRowstatus, gemtekDevCpeChannelEntryEnable=gemtekDevCpeChannelEntryEnable, gemtekDevCpeNtpServerFromDHCP=gemtekDevCpeNtpServerFromDHCP, gemtekDevCpeSnmpReadCommunity=gemtekDevCpeSnmpReadCommunity, gemtekDevCpeNatLanIpType=gemtekDevCpeNatLanIpType, gemtekDevCpeFirewallSrcIpAddress=gemtekDevCpeFirewallSrcIpAddress, gemtekDevCpePortTriggerIndex=gemtekDevCpePortTriggerIndex, gemtekDevCpeMaxTxPowerModeSelection=gemtekDevCpeMaxTxPowerModeSelection, gemtekDevCpeSyslogServerIp=gemtekDevCpeSyslogServerIp, gemtekDevCpeSystemDate=gemtekDevCpeSystemDate, gemtekDevCpeWimaxMimoMode=gemtekDevCpeWimaxMimoMode, gemtekDevCpeServiceFlowARQ=gemtekDevCpeServiceFlowARQ, gemtekDevCpeMgmtVlanEnalbe=gemtekDevCpeMgmtVlanEnalbe, gemtekDevCpeServiceFlowRules=gemtekDevCpeServiceFlowRules, gemtekDevCpeNatWanGateway=gemtekDevCpeNatWanGateway, gemtekDevCpeAPPreferredPriorityTwoBsId=gemtekDevCpeAPPreferredPriorityTwoBsId, trapServerCommunity=trapServerCommunity, gemtekDevCpeDynamicMaxTxPowerQpsk=gemtekDevCpeDynamicMaxTxPowerQpsk, gemtekDevCpeCACertificateSubject=gemtekDevCpeCACertificateSubject, gemtekDevCpeVlanMembershipIndex=gemtekDevCpeVlanMembershipIndex, gemtekDevCpeUserCertificateIssuer=gemtekDevCpeUserCertificateIssuer, gemtekDevCpeRfModeBPSK=gemtekDevCpeRfModeBPSK, gemtekDevCpeDhcpServerEndIp=gemtekDevCpeDhcpServerEndIp, gemtekDevCpeFirewallSrcMac=gemtekDevCpeFirewallSrcMac, gemtekDevCpeAPPreferredPriorityFourBsId=gemtekDevCpeAPPreferredPriorityFourBsId, gemtekDevCpeWanTotalDownLinkDataPackets=gemtekDevCpeWanTotalDownLinkDataPackets, gemtekDevCpeDhcpClentListEntry=gemtekDevCpeDhcpClentListEntry, gemtekDevCpeWanTotalUpLinkDataPackets=gemtekDevCpeWanTotalUpLinkDataPackets, gemtekDevCpeWanMacAddresss=gemtekDevCpeWanMacAddresss, gemtekDevCpeSyslog=gemtekDevCpeSyslog, gemtekDevCpeFrequencyRange=gemtekDevCpeFrequencyRange, adminPassword=adminPassword, gemtekDevCpeModelFrequencyRangeMin=gemtekDevCpeModelFrequencyRangeMin, gemtekDevCpePortForwarding=gemtekDevCpePortForwarding, gemtekDevCpeFirmwareValidationTime=gemtekDevCpeFirmwareValidationTime, gemtekDevCpeDhcpServerMaxLeaseTime=gemtekDevCpeDhcpServerMaxLeaseTime, gemtekDevCpeAPPreferredBsIdListLocked=gemtekDevCpeAPPreferredBsIdListLocked, gemtekDevCpeFirewallEtherTypeFilterFourEnable=gemtekDevCpeFirewallEtherTypeFilterFourEnable, gemtekDevCpeAuthenticationEAPTTLS=gemtekDevCpeAuthenticationEAPTTLS, gemtekDevCpeAllowTelnetAccessingFromWan=gemtekDevCpeAllowTelnetAccessingFromWan, gemtekDevCpeNatWanNetmask=gemtekDevCpeNatWanNetmask, gemtekDevCpeRedirectIcmpToTheDmzHostEnable=gemtekDevCpeRedirectIcmpToTheDmzHostEnable, gemtekDevCpeDhcpServerPermanentHostIp=gemtekDevCpeDhcpServerPermanentHostIp, gemtekDevCpeFirmwareCreationDate=gemtekDevCpeFirmwareCreationDate, gemtekDevCpeChannelFrequency=gemtekDevCpeChannelFrequency, gemtek=gemtek, gemtekDevCpeEirpModeBPSK=gemtekDevCpeEirpModeBPSK, notTheHightestPriorityAP=notTheHightestPriorityAP, gemtekDevCpeUserCertificateFileTable=gemtekDevCpeUserCertificateFileTable, gemtekDevCpeControl=gemtekDevCpeControl, gemtekDevCpePullFtpServerIP=gemtekDevCpePullFtpServerIP, eapTtlsUseDeviceCertificate=eapTtlsUseDeviceCertificate, gemtekDevCpeWimaxTxPower=gemtekDevCpeWimaxTxPower, gemtekDevCpePortTriggerTriggerPortBegin=gemtekDevCpePortTriggerTriggerPortBegin, gemtekDevCpeCACertificateIssuer=gemtekDevCpeCACertificateIssuer, gemtekDevCpeNatModeMgmtVlanEnalbe=gemtekDevCpeNatModeMgmtVlanEnalbe, gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny=gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny, gemtekDevCpeSnmpAccessDomain=gemtekDevCpeSnmpAccessDomain, gemtekDevCpeFirewall=gemtekDevCpeFirewall, gemtekDevCpeChannelBandwidth=gemtekDevCpeChannelBandwidth, trapServerEnable=trapServerEnable, gemtekDevCpeDhcpServerPrimaryDnsFromIsp=gemtekDevCpeDhcpServerPrimaryDnsFromIsp, gemtekDevCpeServiceFlowDirection=gemtekDevCpeServiceFlowDirection, gemtekDevCpeDhcpServerPermanentHostTable=gemtekDevCpeDhcpServerPermanentHostTable, gemtekDevCpeChannelCinr=gemtekDevCpeChannelCinr, gemtekDevCpeFirewallTable=gemtekDevCpeFirewallTable, gemtekDevCpeSnmpAccessFromLan=gemtekDevCpeSnmpAccessFromLan, gemtekDevCpeWimaxFrequency=gemtekDevCpeWimaxFrequency, eapIdentityString=eapIdentityString, gemtekDevCpeNetworkMode=gemtekDevCpeNetworkMode, gemtekDevCpeNetoworkOperatingMode=gemtekDevCpeNetoworkOperatingMode, gemtekDevCpeServiceFlowCID=gemtekDevCpeServiceFlowCID, gemtekDevCpeUntaggedPktsReset=gemtekDevCpeUntaggedPktsReset, gemtekDevCpeSnmpAccessDomainEnable=gemtekDevCpeSnmpAccessDomainEnable, gemtekDevCpeUserCertificateFileEntry=gemtekDevCpeUserCertificateFileEntry, gemtekDevCpePreviousSwVersion=gemtekDevCpePreviousSwVersion, gemtekDevCpeUntaggedPkts=gemtekDevCpeUntaggedPkts, gemtekDevCpePortTriggerForwardingPortEnd=gemtekDevCpePortTriggerForwardingPortEnd, rebootWithResponse=rebootWithResponse, gemtekDevCpePushFtpUpgradeCmd=gemtekDevCpePushFtpUpgradeCmd, gemtekDevCpeCurrentSwVersion=gemtekDevCpeCurrentSwVersion, gemtekDevCpeWimaxUpLinkDataRate=gemtekDevCpeWimaxUpLinkDataRate, gemtekDevCpeFirewallAction=gemtekDevCpeFirewallAction, linkUp=linkUp, gemtekDevCpeDhcpClentListIp=gemtekDevCpeDhcpClentListIp, gemtekDevCpeMgmtVlanVp=gemtekDevCpeMgmtVlanVp, eapTtlsUsername=eapTtlsUsername, gemtekDevCpe=gemtekDevCpe, snmpBuzzerConfig=snmpBuzzerConfig, gemtekDevCpeFirewallEntry=gemtekDevCpeFirewallEntry, gemtekDevCpeNatWanIpAddress=gemtekDevCpeNatWanIpAddress, gemtekDevCpeWimaxCinrReuse3=gemtekDevCpeWimaxCinrReuse3, eapTtlsPassword=eapTtlsPassword, gemtekDevCpeRfModeQAM64=gemtekDevCpeRfModeQAM64, gemtekDevCpeEirpModeQAM64=gemtekDevCpeEirpModeQAM64, gemtekDevCpeFirewallEtherTypeFilterFiveEnable=gemtekDevCpeFirewallEtherTypeFilterFiveEnable, eapTtlsPhase2=eapTtlsPhase2, gemtekDevCpeBridgeDhcpRenewalTime=gemtekDevCpeBridgeDhcpRenewalTime, gemtekDevCpeRfModeQAM16=gemtekDevCpeRfModeQAM16, gemtekDevCpeUserCertificateFileUpload=gemtekDevCpeUserCertificateFileUpload, gemtekDevCpeMibsVersion=gemtekDevCpeMibsVersion, gemtekDevCpeDhcpClentListMacAddress=gemtekDevCpeDhcpClentListMacAddress, gemtekDevCpePortForwardingEntryEnable=gemtekDevCpePortForwardingEntryEnable, gemtekDevCpeNatMode=gemtekDevCpeNatMode, gemtekDevCpeScanner=gemtekDevCpeScanner, gemtekDevCpeServiceFlowState=gemtekDevCpeServiceFlowState, gemtekDevCpeSyslogServerPort=gemtekDevCpeSyslogServerPort, gemtekDevCpePushFtpUpgrade=gemtekDevCpePushFtpUpgrade, gemtekDevCpeDaylightSaving=gemtekDevCpeDaylightSaving, autoSavePeriod=autoSavePeriod, gemtekDevCpeFirmwareVersion=gemtekDevCpeFirmwareVersion, gemtekDevCpeNatWanDhcpRebindTime=gemtekDevCpeNatWanDhcpRebindTime, gemtekDevCpeServiceFlowType=gemtekDevCpeServiceFlowType, gemtekDevCpeNatMtu=gemtekDevCpeNatMtu, gemtekDevCpeBridgeDhcpLeaseTime=gemtekDevCpeBridgeDhcpLeaseTime, gemtekDevCpeVlanMembershipVidEnd=gemtekDevCpeVlanMembershipVidEnd, administratorEnable=administratorEnable, gemtekDevCpePktCounter=gemtekDevCpePktCounter, gemtekDevCpeCACertificateFileEntry=gemtekDevCpeCACertificateFileEntry, gemtekDevCpeNatWanIpType=gemtekDevCpeNatWanIpType, gemtekDevCpeMgmtDscpId=gemtekDevCpeMgmtDscpId, gemtekDevCpePortForwardingEntry=gemtekDevCpePortForwardingEntry, trapServerIp=trapServerIp, wirelessStatus=wirelessStatus, gemtekDevCpeProductVersion=gemtekDevCpeProductVersion, gemtekDevCpeServiceFlowEntry=gemtekDevCpeServiceFlowEntry, gemtekDevCpeRfModeQPSK=gemtekDevCpeRfModeQPSK, eapTtlsPrivateKeyPassword=eapTtlsPrivateKeyPassword, gemtekDevCpeLockFrequencyRangeMin=gemtekDevCpeLockFrequencyRangeMin, gemtekDevCpeTrapServer=gemtekDevCpeTrapServer, gemtekDevCpeFirewallSrcPortRangeBegin=gemtekDevCpeFirewallSrcPortRangeBegin, gemtekDevCpeTimeZone=gemtekDevCpeTimeZone, gemtekDevCpeNatWanDhcpLeaseTime=gemtekDevCpeNatWanDhcpLeaseTime, gemtekDevCpeWimaxCpeState=gemtekDevCpeWimaxCpeState, gemtekDevCpeFirewallIndex=gemtekDevCpeFirewallIndex, gemtekDevCpePullFtpUpgrade=gemtekDevCpePullFtpUpgrade, gemtekDevCpeDhcpServerTertiaryDnsIp=gemtekDevCpeDhcpServerTertiaryDnsIp, gemtekDevCpeDataVlan=gemtekDevCpeDataVlan, gemtekDevCpePortTriggerProtocol=gemtekDevCpePortTriggerProtocol, gemtekDevCpeUserCertificateIndex=gemtekDevCpeUserCertificateIndex, gemtekDevCpeDhcpServerPrimaryDnsIp=gemtekDevCpeDhcpServerPrimaryDnsIp, gemtekDevCpeBridgeNetmask=gemtekDevCpeBridgeNetmask, gemtekDevCpeServiceFlowHARQ=gemtekDevCpeServiceFlowHARQ, gemtekDevCpePortForwardingLanIp=gemtekDevCpePortForwardingLanIp, gemtekDevCpeTaggedPktsReset=gemtekDevCpeTaggedPktsReset, gemtekDevCpeDynamicMaxTxPowerBpsk=gemtekDevCpeDynamicMaxTxPowerBpsk, gemtekDevCpeChannelBsId=gemtekDevCpeChannelBsId, gemtekDevCpeTelnetEnable=gemtekDevCpeTelnetEnable, gemtekDevCpeChannelIndex=gemtekDevCpeChannelIndex, gemtekDevCpeNonmemberPktsReset=gemtekDevCpeNonmemberPktsReset, gemtekDevCpeAPPreferredPriorityOneBsId=gemtekDevCpeAPPreferredPriorityOneBsId, warmStart=warmStart, gemtekDevCpeAPPreferredPriorityThreeBsId=gemtekDevCpeAPPreferredPriorityThreeBsId, gemtekDevCpePortForwardingIndex=gemtekDevCpePortForwardingIndex, operatorUsername=operatorUsername, eapValidateTheDateDurationOfCaCertificate=eapValidateTheDateDurationOfCaCertificate, gemtekDevCpeDhcpServerDomainName=gemtekDevCpeDhcpServerDomainName, gemtekDevCpeMgmtVlan=gemtekDevCpeMgmtVlan, gemtekDevCpeAllowPacketType=gemtekDevCpeAllowPacketType, coldStart=coldStart, gemtekDevCpeUserCertificateFileDelete=gemtekDevCpeUserCertificateFileDelete, gemtekDevCpeNatModeDataVlan=gemtekDevCpeNatModeDataVlan, gemtekDevCpeDscpConfiguration=gemtekDevCpeDscpConfiguration, gemtekDevCpeFirewallDstPortRangeEnd=gemtekDevCpeFirewallDstPortRangeEnd, gemtekDevCpeDhcpServerPermanentHostEntryEnable=gemtekDevCpeDhcpServerPermanentHostEntryEnable, gemtekDevCpePortTriggerEntryEnable=gemtekDevCpePortTriggerEntryEnable, gemtekDevCpeChannelBandwidthRang=gemtekDevCpeChannelBandwidthRang, gemtekDevCpeFirewallDstIpAddress=gemtekDevCpeFirewallDstIpAddress, snmpBuzzerDisableDelay=snmpBuzzerDisableDelay, gemtekDevCpeDscpToVp=gemtekDevCpeDscpToVp, gemtekDevCpeAuthentication=gemtekDevCpeAuthentication, gemtekDevCpeSerialNumber=gemtekDevCpeSerialNumber, startStopWimax=startStopWimax, gemtekDevCpeAccountManagement=gemtekDevCpeAccountManagement, gemtekDevCpeBridgeDhcpRebindTime=gemtekDevCpeBridgeDhcpRebindTime, gemtekDevCpeNatLanNetmask=gemtekDevCpeNatLanNetmask, gemtekDevCpeNatModeMgmtVlanVp=gemtekDevCpeNatModeMgmtVlanVp, gemtekDevCpeDynamicMaxTxPowerQam16=gemtekDevCpeDynamicMaxTxPowerQam16, gemtekDevCpeFirewallRowstatus=gemtekDevCpeFirewallRowstatus, gemtekDevCpeVlanMembershipEntry=gemtekDevCpeVlanMembershipEntry, gemtekDevCpeWimaxZoneCinrChannelZero=gemtekDevCpeWimaxZoneCinrChannelZero, gemtekDevCpeTrapPrefix=gemtekDevCpeTrapPrefix, gemtekDevCpeFirewallEnable=gemtekDevCpeFirewallEnable, gemtekDevCpeFirmwareValidationCount=gemtekDevCpeFirmwareValidationCount, gemtekDevCpeBridgeGateway=gemtekDevCpeBridgeGateway, gemtekDevCpeChannelActive=gemtekDevCpeChannelActive, gemtekDevCpePullFtpFilePath=gemtekDevCpePullFtpFilePath, eapTlsPrivateKeyPassword=eapTlsPrivateKeyPassword, gemtekDevCpeNatModeDataVlanEnalbe=gemtekDevCpeNatModeDataVlanEnalbe, gemtekDevCpeTftpServerIP=gemtekDevCpeTftpServerIP, gemtekDevCpePullFtpServerUserName=gemtekDevCpePullFtpServerUserName, gemtekDevCpePortTriggerName=gemtekDevCpePortTriggerName, gemtekDevCpePortTriggerForwardingPortBegin=gemtekDevCpePortTriggerForwardingPortBegin, gemtekDevCpePortForwardingLanPortEnd=gemtekDevCpePortForwardingLanPortEnd, operatorPassword=operatorPassword, gemtekDevCpeBridgeIpAddress=gemtekDevCpeBridgeIpAddress, gemtekDevCpePortForwardingWanPortEnd=gemtekDevCpePortForwardingWanPortEnd, gemtekDevCpeSnmpSetCommunity=gemtekDevCpeSnmpSetCommunity, gemtekDevCpeWimaxDownLinkDataRate=gemtekDevCpeWimaxDownLinkDataRate, gemtekDevCpeCACertificateFileDelete=gemtekDevCpeCACertificateFileDelete, gemtekDevCpeFirewallEtherTypeFilterTwoEnable=gemtekDevCpeFirewallEtherTypeFilterTwoEnable, gemtekDevCpeFirewallDstMac=gemtekDevCpeFirewallDstMac, gemtekDevCpeRestFactoryDefault=gemtekDevCpeRestFactoryDefault, gemtekDevCpeDscpToVpMapping=gemtekDevCpeDscpToVpMapping, gemtekDevCpePortTriggerEntry=gemtekDevCpePortTriggerEntry, gemtekDevCpeTaggedPkts=gemtekDevCpeTaggedPkts, fatalErrorRestart=fatalErrorRestart, gemtekDevCpeNatModeVLAN=gemtekDevCpeNatModeVLAN, gemtekDevCpeDate=gemtekDevCpeDate, gemtekDevCpeWimaxTotalUpLinkDataByte=gemtekDevCpeWimaxTotalUpLinkDataByte, gemtekDevCpeWimaxCinr=gemtekDevCpeWimaxCinr, gemtekDevCpeMaxTxPowerRfMode=gemtekDevCpeMaxTxPowerRfMode, gemtekDevCpeTftpFileName=gemtekDevCpeTftpFileName, gemtekDevCpeNtpServer=gemtekDevCpeNtpServer, gemtekDevCpeChannelTable=gemtekDevCpeChannelTable, administratorPassword=administratorPassword, autoSaveConfig=autoSaveConfig, gemtekDevCpeServiceFlowSFID=gemtekDevCpeServiceFlowSFID, eapIdentityType=eapIdentityType, gemtekDevCpePortForwardingProtocol=gemtekDevCpePortForwardingProtocol, gemtekDevCpeLatitude=gemtekDevCpeLatitude, gemtekDevCpeUserCertificateSize=gemtekDevCpeUserCertificateSize, gemtekDevCpeServiceFlowMaxRate=gemtekDevCpeServiceFlowMaxRate, gemtekDevCpeNatModeMgmtVlanVid=gemtekDevCpeNatModeMgmtVlanVid, gemtekDevCpeBridgeMode=gemtekDevCpeBridgeMode, gemtekDevCpeDropDataPacket=gemtekDevCpeDropDataPacket)
mibBuilder.exportSymbols("Motorola-Cpe-PRIVATE-MIB", gemtekDevCpeServiceFlowIndex=gemtekDevCpeServiceFlowIndex, gemtekDevCpeVlanMembershipVidBegin=gemtekDevCpeVlanMembershipVidBegin, gemtekDevCpeSnmpAccessDomainNetmask=gemtekDevCpeSnmpAccessDomainNetmask, gemtekDevCpeChannelEntry=gemtekDevCpeChannelEntry, gemtekDevCpePortForwardingTable=gemtekDevCpePortForwardingTable, gemtekDevCpeFirewallEtherTypeFilterThreeEnable=gemtekDevCpeFirewallEtherTypeFilterThreeEnable, gemtekDevCpeDataVlanVid=gemtekDevCpeDataVlanVid, gemtekDevCpePortForwardingLanPortBegin=gemtekDevCpePortForwardingLanPortBegin, gemtekDevCpeUserCertificateFileName=gemtekDevCpeUserCertificateFileName, gemtekDevCpeEirpModeAntennaGain=gemtekDevCpeEirpModeAntennaGain, gemtekDevCpeFirewallEntryEnable=gemtekDevCpeFirewallEntryEnable, gemtekDevCpeBootromCreationDate=gemtekDevCpeBootromCreationDate, operatorEnable=operatorEnable, gemtekDevCpePortForwardingRowstatus=gemtekDevCpePortForwardingRowstatus, gemtekDevCpeEirpModeQAM16=gemtekDevCpeEirpModeQAM16, gemtekDevCpeFirewallName=gemtekDevCpeFirewallName, gemtekDevCpeServiceFlowScheduling=gemtekDevCpeServiceFlowScheduling, gemtekDevCpeSyslogEnable=gemtekDevCpeSyslogEnable, gemtekDevCpeCACertificateIndex=gemtekDevCpeCACertificateIndex, gemtekDevCpeFrequencyRangeSetting=gemtekDevCpeFrequencyRangeSetting, gemtekDevCpePortForwardingWanPortBegin=gemtekDevCpePortForwardingWanPortBegin, gemtekDevCpeFirewallProtocol=gemtekDevCpeFirewallProtocol, administratorUsername=administratorUsername, gemtekDevCpeDhcpServerPermanentHostEntry=gemtekDevCpeDhcpServerPermanentHostEntry, gemtekDevCpeDhcpServerTertiaryDnsFromIsp=gemtekDevCpeDhcpServerTertiaryDnsFromIsp, gemtekDevCpeLanMacAddresss=gemtekDevCpeLanMacAddresss, gemtekDevCpePortTrigger=gemtekDevCpePortTrigger, gemtekDevCpeCACertificateFileUpload=gemtekDevCpeCACertificateFileUpload, gemtekDevCpePortTriggerTable=gemtekDevCpePortTriggerTable, gemtekDevCpeChannelApplyLoadOrSave=gemtekDevCpeChannelApplyLoadOrSave, gemtekDevCpeWimaxMaxTxPower=gemtekDevCpeWimaxMaxTxPower, gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny=gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny, gemtekDevCpeChannelRowstatus=gemtekDevCpeChannelRowstatus, gemtekDevCpeNtpServerEnable=gemtekDevCpeNtpServerEnable, gemtekDevCpeCACertificateFileTable=gemtekDevCpeCACertificateFileTable, gemtekDevCpeDmzIpAddress=gemtekDevCpeDmzIpAddress, gemtekDevCpeDhcpClentListIndex=gemtekDevCpeDhcpClentListIndex, gemtekDevCpeCACertificateFileName=gemtekDevCpeCACertificateFileName, gemtekDevCpeWimaxCinrReuse1=gemtekDevCpeWimaxCinrReuse1, gemtekDevCpeMaxTxPower=gemtekDevCpeMaxTxPower, gemtekDevCpeHeight=gemtekDevCpeHeight, gemtekDevCpeNatModeMgmtVlan=gemtekDevCpeNatModeMgmtVlan, gemtekDevCpeDhcpServerEnable=gemtekDevCpeDhcpServerEnable, gemtekDevCpeLanTotalUpLinkDataByte=gemtekDevCpeLanTotalUpLinkDataByte, gemtekDevCpePushFtpUpgradeAdminStatus=gemtekDevCpePushFtpUpgradeAdminStatus, gemtekDevCpeHardwareModel=gemtekDevCpeHardwareModel, gemtekDevCpeDhcpServer=gemtekDevCpeDhcpServer, gemtekDevCpeCertificateUpload=gemtekDevCpeCertificateUpload, PYSNMP_MODULE_ID=gemtekDevCpe, gemtekDevCpeServiceFlowBCID=gemtekDevCpeServiceFlowBCID, gemtekDevCpeTftpUpgrade=gemtekDevCpeTftpUpgrade, networkStatus=networkStatus, gemtekDevCpeFirewallEtherTypeFilterOneEnable=gemtekDevCpeFirewallEtherTypeFilterOneEnable, gemtekDevCpeWimaxDownLinkModulation=gemtekDevCpeWimaxDownLinkModulation, adminEnable=adminEnable, gemtekDevCpeLanTotalDownLinkDataByte=gemtekDevCpeLanTotalDownLinkDataByte, gemtekDevCpeWimaxBsid=gemtekDevCpeWimaxBsid, isRebootRequired=isRebootRequired, gemtekDevCpeTftpUpgradeAdminStatus=gemtekDevCpeTftpUpgradeAdminStatus, gemtekDevCpeWimaxRssi=gemtekDevCpeWimaxRssi, gemtekDevCpeLongitude=gemtekDevCpeLongitude, gemtekDevCpeCAValidityDateBegin=gemtekDevCpeCAValidityDateBegin, gemtekDevCpeLockFrequencyRangeMax=gemtekDevCpeLockFrequencyRangeMax, gemtekDevCpeFirewallPPPoEEnable=gemtekDevCpeFirewallPPPoEEnable, gemtekDevCpeFirewallSrcPortRangeEnd=gemtekDevCpeFirewallSrcPortRangeEnd, gemtekDevCpePortTriggerTriggerPortEnd=gemtekDevCpePortTriggerTriggerPortEnd, gemtekDevCpeNatModeDataVlanVp=gemtekDevCpeNatModeDataVlanVp, gemtekDevCpeUserValidityDateBegin=gemtekDevCpeUserValidityDateBegin, eapValidateTheServerCertificate=eapValidateTheServerCertificate, gemtekDevCpeCAValidityDateEnd=gemtekDevCpeCAValidityDateEnd, gemtekDevCpeTftpUpgradeCmd=gemtekDevCpeTftpUpgradeCmd, gemtekDevCpeCACertificateSize=gemtekDevCpeCACertificateSize, gemtekDevCpeDhcpClientList=gemtekDevCpeDhcpClientList, gemtekDevCpeNatModeDataVlanVid=gemtekDevCpeNatModeDataVlanVid, gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny=gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny, gemtekDevCpeBridgeIpType=gemtekDevCpeBridgeIpType, gemtekDevCpeLockFrequencyRange=gemtekDevCpeLockFrequencyRange, gemtekDevCpeNonmemberPkts=gemtekDevCpeNonmemberPkts, gemtekDevCpeNatLanIpAddress=gemtekDevCpeNatLanIpAddress, gemtekDevCpeDhcpServerPermanentRowstatus=gemtekDevCpeDhcpServerPermanentRowstatus, trapServerPort=trapServerPort, gemtekDevCpeDhcpServerPermanentHostIndex=gemtekDevCpeDhcpServerPermanentHostIndex, adminUsername=adminUsername, gemtekDevCpeChannelPreambelIndex=gemtekDevCpeChannelPreambelIndex, gemtekDevCpeMaxTxPowerEirpMode=gemtekDevCpeMaxTxPowerEirpMode, deviceStatus=deviceStatus, gemtekDevCpeLanTotalDownLinkDataPackets=gemtekDevCpeLanTotalDownLinkDataPackets, gemtekDevCpeModelFrequencyRangeMax=gemtekDevCpeModelFrequencyRangeMax, gemtekDevCpePullFtpFileName=gemtekDevCpePullFtpFileName, gemtekDevCpeVlanMembershipVidRowstatus=gemtekDevCpeVlanMembershipVidRowstatus, gemtekDevCpeMVLAN=gemtekDevCpeMVLAN, gemtekDevCpeBootromVersion=gemtekDevCpeBootromVersion, gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny=gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny, gemtekDevCpeVlanMembershipTable=gemtekDevCpeVlanMembershipTable, gemtekDevCpeDmzEnable=gemtekDevCpeDmzEnable, gemtekDevCpePullFtpUpgradeCmd=gemtekDevCpePullFtpUpgradeCmd, gemtekDevCpeAPPreferredSelectionEnable=gemtekDevCpeAPPreferredSelectionEnable, gemtekDevCpeDhcpServerSecondDnsIp=gemtekDevCpeDhcpServerSecondDnsIp, gemtekDevCpeWimaxUpLinkModulation=gemtekDevCpeWimaxUpLinkModulation, gemtekDevCpeDhcpServerStartIp=gemtekDevCpeDhcpServerStartIp, gemtekDevCpeFirewallDstPortRangeBegin=gemtekDevCpeFirewallDstPortRangeBegin, gemtekDevCpeSnmpAccessDomainIp=gemtekDevCpeSnmpAccessDomainIp, gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny=gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny, gemtekDevCpeDhcpClentListTable=gemtekDevCpeDhcpClentListTable, gemtekDevCpeUserCertificateSubject=gemtekDevCpeUserCertificateSubject, gemtekDevCpeDynamicMaxTxPowerQam64=gemtekDevCpeDynamicMaxTxPowerQam64, gemtekDevCpeAllowWebAccessingFromWan=gemtekDevCpeAllowWebAccessingFromWan, gemtekDevCpeUserValidityDateEnd=gemtekDevCpeUserValidityDateEnd)
