#
# PySNMP MIB module DES6500-SWL3MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES6500-SWL3MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
AreaID, TOSType, UpToMaxAge, Metric, HelloRange, Status, PositiveInteger, DesignatedRouterPriority, RouterID = mibBuilder.importSymbols("OSPF-MIB", "AreaID", "TOSType", "UpToMaxAge", "Metric", "HelloRange", "Status", "PositiveInteger", "DesignatedRouterPriority", "RouterID")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Unsigned32, Bits, TimeTicks, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, NotificationType, Counter64, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Unsigned32", "Bits", "TimeTicks", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "NotificationType", "Counter64", "MibIdentifier", "ObjectIdentity")
RowStatus, DisplayString, PhysAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "PhysAddress", "TextualConvention", "TruthValue")
des6500, = mibBuilder.importSymbols("SW6500PRIMGMT-MIB", "des6500")
swL3MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3))
if mibBuilder.loadTexts: swL3MgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swL3MgmtMIB.setOrganization('enterprise, Inc.')
if mibBuilder.loadTexts: swL3MgmtMIB.setContactInfo(' Customer Service Postal: Tel: E-mail: ')
if mibBuilder.loadTexts: swL3MgmtMIB.setDescription('The Structure of Layer 3 Network Management Information for the proprietary enterprise.')
class NodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NetAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

swL3DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1))
swL3IpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2))
swL3RelayMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3))
swL3IpCtrlMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1))
swL3IpFdbMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2))
swL3RelayDhcpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1))
swL3RelayDnsMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2))
swL3DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1))
swL3DevCtrlRIPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlRIPState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlRIPState.setDescription('This object indicates Routing Information Protocol (RIP) version 2 function is enabled or disabled.')
swL3DevCtrlOSPFState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlOSPFState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlOSPFState.setDescription('This object indicates OSPF protocol is enabled or disabled.')
swL3DevCtrlDVMRPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlDVMRPState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlDVMRPState.setDescription('This object indicates DVMRP protocol is enabled or disabled.')
swL3DevCtrlVrrpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVrrpState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlVrrpState.setDescription('This object indicates VRRP protocol is enabled or disabled.')
swL3DevCtrlVrrpPingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlVrrpPingState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlVrrpPingState.setDescription('This object indicates VRRP protocol Ping is enabled or disabled.')
swL3DevCtrlDHCPAutoConfigState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlDHCPAutoConfigState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlDHCPAutoConfigState.setDescription('This object indicates auto config is enabled or disabled.')
swL3DevCtrlPIMGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3DevCtrlPIMGlobalState.setStatus('current')
if mibBuilder.loadTexts: swL3DevCtrlPIMGlobalState.setDescription('This object indicates PIM protocol is enabled or disabled.')
swL3IpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1), )
if mibBuilder.loadTexts: swL3IpCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlTable.setDescription('This table contain IP interface information.')
swL3IpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3IpCtrlIpAddr"))
if mibBuilder.loadTexts: swL3IpCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlEntry.setDescription('A list of information about a specific IP interface.')
swL3IpCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3IpCtrlIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpAddr.setDescription('The IP address of the interface. This object only can take the value of the unicast IP address.')
swL3IpCtrlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlIfIndex.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIfIndex.setDescription('This object uniquely identifies the IP interface number in the swL3IpCtrlTable.')
swL3IpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlInterfaceName.setDescription('This object indicates the name of the IP interface.')
swL3IpCtrlIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlIpSubnetMask.setDescription('The IP net mask for this interface.')
swL3IpCtrlVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlVlanName.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlVlanName.setDescription("This object indicates the IP control entry's VLAN name. The VLAN name in each entry must be unique in the IP Control Table.")
swL3IpCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("manual", 2), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlMode.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlMode.setDescription('This object indicates the IP operation mode. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. manual(2) - the IP address will be set by manual. bootp(3) - the IP address will be set automatically from BOOTP server. dhcp(4) - the IP address will be set automatically from DHCP server.')
swL3IpCtrlSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlSecondary.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlSecondary.setDescription('When this is true(1) the IP address is the secondary IP. When false(2), the IP address is the primary IP.')
swL3IpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlState.setDescription('This variable displays the status of the entry. The status used for creating, modifying, and deleting instances of the objects in this table.')
swL3IpCtrlOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpCtrlOperState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlOperState.setDescription('The current operational state of the IP interface.PS: Link state')
swL3IpCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL3IpCtrlAdminState.setDescription('The state of a specific IP interface.')
swL3IpFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: swL3IpFdbInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoTable.setDescription('A table that contains forwarding and/or filtering information. This information is used by the switch in determining how to propagate the received IP packets.')
swL3IpFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3IpFdbInfoIpAddr"))
if mibBuilder.loadTexts: swL3IpFdbInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoEntry.setDescription('Information about a specific IP address for which the bridge has some forwarding and/or filtering information.')
swL3IpFdbInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoIpAddr.setDescription('A IP address for which switch has forwarding and/or filtering information.')
swL3IpFdbInfoIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoIpSubnetMask.setDescription('A IP net mask for this interface.for which switch has forwarding and/or filtering information.')
swL3IpFdbInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoPort.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoPort.setDescription("Either the value '0', or the port number of the port on which packet having a IP address equal to the value of the corresponding instance of swL3IpFdbInfoIpAddr has been seen. A value of '0' indicates that the port number has not been learned but that switch does have some forwarding/filtering information about this address.")
swL3IpFdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpFdbInfoType.setStatus('current')
if mibBuilder.loadTexts: swL3IpFdbInfoType.setDescription('The status of this entry.')
swL3IpArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3IpArpAgingTime.setStatus('current')
if mibBuilder.loadTexts: swL3IpArpAgingTime.setDescription('The timeout period in minutes for aging out dynamically learned arp information.')
swL3IpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5), )
if mibBuilder.loadTexts: swL3IpStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteTable.setDescription("This entity's IP static Routing table.")
swL3IpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteDest"), (0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteMask"), (0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteBkupState"), (0, "DES6500-SWL3MGMT-MIB", "swL3IpStaticRouteNextHop"))
if mibBuilder.loadTexts: swL3IpStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteEntry.setDescription("A particular route to a particular destination, under a particular policy. Once an entry be built,it shouldn't be modified.That is,it just support create and delete action.")
swL3IpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteDest.setDescription('The destination IP address of this route. This object may not take a Multicast (Class D) address value. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the swL3IpStaticRouteMask object is not equal to x.')
swL3IpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the swL3IpStaticRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the swL3IpStaticRouteMask by reference to the IP Address Class. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the swL3IpStaticRouteDest object is not equal to swL3IpStaticRouteDest.')
swL3IpStaticRouteBkupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteBkupState.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteBkupState.setDescription('The routing state for this route.The value SHOULD be primary(1) or backup(2).')
swL3IpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3IpStaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteNextHop.setDescription('On remote routes, the address of the next sys- tem en route; Otherwise, 0.0.0.0.')
swL3IpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteMetric.setDescription('The routing metric for this route.')
swL3IpStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 2, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3IpStaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: swL3IpStaticRouteStatus.setDescription('This object indicates the status of this entry.')
swL3RelayBootpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayBootpState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayBootpState.setDescription('This object indicates DHCP Relay function is enabled or disabled.')
swL3RelayBootpHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayBootpHopCount.setStatus('current')
if mibBuilder.loadTexts: swL3RelayBootpHopCount.setDescription('This object indicates the maximum number of router hops that the DHCP packets can cross.')
swL3RelayBootpTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayBootpTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: swL3RelayBootpTimeThreshold.setDescription('This object indicates the minimum time in seconds within which the switch must relay the DHCP request. If this time is exceeded, the switch will drop the BOOTP packet.')
swL3RelayDhcpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4), )
if mibBuilder.loadTexts: swL3RelayDhcpCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpCtrlTable.setDescription('This table specifys the IP address as a destination to forward (relay) DHCP packets to.')
swL3RelayDhcpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3RelayDhcpCtrlInterfaceName"), (0, "DES6500-SWL3MGMT-MIB", "swL3RelayDhcpCtrlServer"))
if mibBuilder.loadTexts: swL3RelayDhcpCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpCtrlEntry.setDescription('A list of information specifies the IP address as a destination to forward (relay) DHCP packets to.')
swL3RelayDhcpCtrlInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDhcpCtrlInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpCtrlInterfaceName.setDescription('The name of the IP interface.')
swL3RelayDhcpCtrlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDhcpCtrlServer.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpCtrlServer.setDescription('The DHCP server IP address.')
swL3RelayDhcpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
swL3RelayDhcpOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpOption82State.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpOption82State.setDescription('This object indicates DHCP Relay Option 82 function is enabled or disabled.')
swL3RelayDhcpOption82ChceckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpOption82ChceckState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpOption82ChceckState.setDescription('This object indicates DHCP Relay Option 82 Chceck function is enabled or disabled.')
swL3RelayDhcpOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("replace", 0), ("drop", 1), ("keep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDhcpOption82Policy.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDhcpOption82Policy.setDescription('This object indicates DHCP Relay Option 82 Policy.')
swL3RelayDnsState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsState.setDescription('This object indicates DNS Relay function is enabled or disabled.')
swL3RelayDnsPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsPrimaryServer.setDescription('This object indicates the address of the primary DNS server.')
swL3RelayDnsSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsSecondaryServer.setDescription('This object indicates the address of the secondary DNS server.')
swL3RelayDnsCacheState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCacheState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCacheState.setDescription('This object indicates DNS Relay cache is enabled or disabled.')
swL3RelayDnsStaticTableState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsStaticTableState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsStaticTableState.setDescription('This object indicates DNS Relay static table is enabled or disabled.')
swL3RelayDnsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6), )
if mibBuilder.loadTexts: swL3RelayDnsCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlTable.setDescription('This table display the current DNS relay static table.')
swL3RelayDnsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3RelayDnsCtrlDomainName"), (0, "DES6500-SWL3MGMT-MIB", "swL3RelayDnsCtrlIpAddr"))
if mibBuilder.loadTexts: swL3RelayDnsCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlEntry.setDescription('A list of information display the current DNS relay static table.')
swL3RelayDnsCtrlDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlDomainName.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlDomainName.setDescription('The domain name of the entry.')
swL3RelayDnsCtrlIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RelayDnsCtrlIpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlIpAddr.setDescription('The IP address of the entry.')
swL3RelayDnsCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3RelayDnsCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL3RelayDnsCtrlState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
swL3Md5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4), )
if mibBuilder.loadTexts: swL3Md5Table.setStatus('current')
if mibBuilder.loadTexts: swL3Md5Table.setDescription('This table display the current MD5 key table.')
swL3Md5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3Md5KeyId"))
if mibBuilder.loadTexts: swL3Md5Entry.setStatus('current')
if mibBuilder.loadTexts: swL3Md5Entry.setDescription('A list of information display the current MD5 key table.')
swL3Md5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3Md5KeyId.setStatus('current')
if mibBuilder.loadTexts: swL3Md5KeyId.setDescription('The MD5 key ID.')
swL3Md5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5Key.setStatus('current')
if mibBuilder.loadTexts: swL3Md5Key.setDescription('An MD5 password of up to 16 bytes.')
swL3Md5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3Md5RowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3Md5RowStatus.setDescription('This object indicates the status of this entry.')
swL3RouteRedistriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5), )
if mibBuilder.loadTexts: swL3RouteRedistriTable.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriTable.setDescription('Route redistribution allows routers on the network. That are running different routing protocols to exchange routing information. This is accomplished by comparing the routes stored in the vairous routers routing tables and assinging appropriate metrics. This information is then exchanged among the various routers according to the individual routers current routing protocol.')
swL3RouteRedistriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3RouteRedistriSrcProtocol"), (0, "DES6500-SWL3MGMT-MIB", "swL3RouteRedistriDstProtocol"))
if mibBuilder.loadTexts: swL3RouteRedistriEntry.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriEntry.setDescription('A list of information display the route redistribution table.')
swL3RouteRedistriSrcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("static", 4), ("local", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriSrcProtocol.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriSrcProtocol.setDescription('Allows the selection of the protocol of the source device.')
swL3RouteRedistriDstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3RouteRedistriDstProtocol.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriDstProtocol.setDescription('Allows the selection of the protocol of the destination device.')
swL3RouteRedistriType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("all", 0), ("internal", 1), ("external", 2), ("extType1", 3), ("extType2", 4), ("type-1", 5), ("type-2", 6), ("inter-E1", 7), ("inter-E2", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriType.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriType.setDescription('Allows the selection of one of the methods for calcalculating the metric value.')
swL3RouteRedistriMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriMetric.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriMetric.setDescription("Allows the entry of an OSPF interface cost. This is analogous to a Hop Count in the RIP routing protocol. The value '0' indicates default value.")
swL3RouteRedistriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3RouteRedistriRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3RouteRedistriRowStatus.setDescription('This object indicates the status of this entry.')
swL3OspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6), )
if mibBuilder.loadTexts: swL3OspfHostTable.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostTable.setDescription('The list of Hosts, and their metrics, that the router will advertise as host routes.')
swL3OspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3OspfHostIpAddress"), (0, "DES6500-SWL3MGMT-MIB", "swL3OspfHostTOS"))
if mibBuilder.loadTexts: swL3OspfHostEntry.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostEntry.setDescription('A metric to be advertised, for a given type of service, when a given host is reachable.')
swL3OspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostIpAddress.setDescription('The IP Address of the Host.')
swL3OspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3OspfHostTOS.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostTOS.setDescription('The Type of Service of the route being configured.')
swL3OspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostMetric.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostMetric.setDescription('The Metric to be advertised.')
swL3OspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 4), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostAreaID.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostAreaID.setDescription('The Area the Host Entry is to be found within. By default, the area that a subsuming OSPF interface is in, or 0.0.0.0')
swL3OspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3OspfHostStatus.setStatus('current')
if mibBuilder.loadTexts: swL3OspfHostStatus.setDescription("This variable displays the status of the entry. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
swL3ospfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7), )
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setReference('OSPF Version 2, Appendix C.4 Virtual link parameters')
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfTable.setDescription("Information about this router's virtual inter- faces.")
swL3ospfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3ospfVirtIfAreaId"), (0, "DES6500-SWL3MGMT-MIB", "swL3ospfVirtIfNeighbor"))
if mibBuilder.loadTexts: swL3ospfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfEntry.setDescription('Information about a single Virtual Interface.')
swL3ospfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfAreaId.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
swL3ospfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfNeighbor.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
swL3ospfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link- state update packet over this interface.')
swL3ospfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets. This value should be well over the expected round- trip time.')
swL3ospfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the in- terface. This value must be the same for the virtual neighbor.')
swL3ospfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 6), PositiveInteger().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neigh- bor.")
swL3ospfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfState.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfState.setDescription('OSPF virtual interface states.')
swL3ospfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfVirtIfEvents.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfEvents.setDescription('The number of state changes or error events on this Virtual Link')
swL3ospfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthType.setDescription('The authentication type specified for a virtu- al interface. Additional authentication types may be assigned locally.')
swL3ospfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKey.setDescription('If Authentication Type is simplePassword, the device will left adjust and zero fill to 8 oc- tets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment.')
swL3ospfVirtIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKeyID.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfAuthKeyID.setDescription('The MD5 key ID.')
swL3ospfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 7, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfVirtIfStatus.setStatus('current')
if mibBuilder.loadTexts: swL3ospfVirtIfStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
swL3ospfIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8), )
if mibBuilder.loadTexts: swL3ospfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: swL3ospfIfTable.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF.')
swL3ospfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3ospfIfIpAddress"), (0, "DES6500-SWL3MGMT-MIB", "swL3ospfAddressLessIf"))
if mibBuilder.loadTexts: swL3ospfIfEntry.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF.')
swL3ospfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfIpAddress.setDescription('The IP address of this OSPF interface.')
swL3ospfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: swL3ospfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.')
swL3ospfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAreaId.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAreaId.setDescription('A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.')
swL3ospfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfType.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfType.setDescription("The OSPF interface type. By way of a default, this field may be intuited from the corresponding value of ifType. Broad- cast LANs, such as Ethernet and IEEE 802.5, take the value 'broadcast', X.25 and similar technologies take the value 'nbma', and links that are definitively point to point take the value 'pointToPoint'.")
swL3ospfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAdminStat.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAdminStat.setDescription("The OSPF interface's administrative status. The value formed on the interface, and the in- terface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.")
swL3ospfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfRtrPriority.setDescription('The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligi- ble to become the designated router on this particular network. In the event of a tie in this value, routers will use their Router ID as a tie breaker.')
swL3ospfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface.')
swL3ospfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets.')
swL3ospfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 9), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the in- terface. This value must be the same for all routers attached to a common network.')
swL3ospfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.")
swL3ospfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfPollInterval.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfPollInterval.setDescription('The larger time interval, in seconds, between the Hello packets sent to an inactive non- broadcast multi- access neighbor.')
swL3ospfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfState.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfState.setDescription('The OSPF Interface State.')
swL3ospfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfDesignatedRouter.setDescription('The IP Address of the Designated Router.')
swL3ospfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfBackupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfBackupDesignatedRouter.setDescription('The IP Address of the Backup Designated Router.')
swL3ospfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3ospfIfEvents.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfEvents.setDescription('The number of times this OSPF interface has changed its state, or an error has occurred.')
swL3ospfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfMulticastForwarding.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfMulticastForwarding.setDescription('The way multicasts should forwarded on this interface; not forwarded, forwarded as data link multicasts, or forwarded as data link uni- casts. Data link multicasting is not meaning- ful on point to point and NBMA interfaces, and setting ospfMulticastForwarding to 0 effective- ly disables all multicast forwarding.')
swL3ospfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfDemand.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfDemand.setDescription('Indicates whether Demand OSPF procedures (hel- lo supression to FULL neighbors and setting the DoNotAge flag on proogated LSAs) should be per- formed on this interface.')
swL3ospfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: swL3ospfIfAuthType.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAuthType.setDescription('The authentication type specified for an in- terface. Additional authentication types may be assigned locally.')
swL3ospfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAuthKey.setDescription("The Authentication Key. If the Area's Author- ization Type is simplePassword, and the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment. When read, ospfIfAuthKey always returns an Oc- tet String of length zero.")
swL3ospfIfAuthKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfAuthKeyID.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfAuthKeyID.setDescription('The MD5 key ID.')
swL3ospfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 8, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3ospfIfStatus.setStatus('current')
if mibBuilder.loadTexts: swL3ospfIfStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
swL3dvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9), )
if mibBuilder.loadTexts: swL3dvmrpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceTable.setDescription("The (conceptual) table listing the router's multicast- capable interfaces.")
swL3dvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3dvmrpInterfaceIfIndex"))
if mibBuilder.loadTexts: swL3dvmrpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceEntry.setDescription('An entry (conceptual row) in the dvmrpInterfaceTable. This row augments ipMRouteInterfaceEntry in the IP Multicast MIB, where the threshold object resides.')
swL3dvmrpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: swL3dvmrpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceIfIndex.setDescription('The ifIndex value of the interface for which DVMRP is enabled.')
swL3dvmrpInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceLocalAddress.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceLocalAddress.setDescription('The IP address this system will use as a source address on this interface. On unnumbered interfaces, it must be the same value as dvmrpInterfaceLocalAddress for some interface on the system.')
swL3dvmrpInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceMetric.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceMetric.setDescription('The distance metric for this interface which is used to calculate distance vectors.')
swL3dvmrpInterfaceProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceProbe.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceProbe.setDescription('the period of sending probe ')
swL3dvmrpInterfaceNbrTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(35)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceNbrTimeout.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceNbrTimeout.setDescription('the timer when neighbor expired.')
swL3dvmrpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3dvmrpInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceStatus.setDescription('The status of this entry. Creating the entry enables DVMRP on the virtual interface; destroying the entry or setting it to notInService disables DVMRP on the virtual interface.')
swL3dvmrpInterfaceRcvBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadPkts.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadPkts.setDescription('The number of DVMRP packets received on the interface by the DVMRP process which were subsequently discarded as invalid (e.g. invalid packet format, or a route report from an unknown neighbor).')
swL3dvmrpInterfaceRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: swL3dvmrpInterfaceRcvBadRoutes.setDescription('The number of routes, in valid DVMRP packets, which were ignored because the entry was invalid.')
swL3PimMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10))
swL3PimCbsrInfoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 1))
swL3pimCbsrBootStrapPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCbsrBootStrapPeriod.setStatus('current')
if mibBuilder.loadTexts: swL3pimCbsrBootStrapPeriod.setDescription('At the elected BSR, this is the interval between originating Bootstrap messages, and should be equal to 60 seconds.')
swL3pimCbsrHashMaskLen = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCbsrHashMaskLen.setStatus('current')
if mibBuilder.loadTexts: swL3pimCbsrHashMaskLen.setDescription('The length (in bits) of the mask to use in the hash function. For IPv4 we recommend a value of 30. For IPv6 we recommand a value of 126.')
swL3pimCandidateRPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2))
swL3pimCandidateRPHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCandidateRPHoldtime.setStatus('current')
if mibBuilder.loadTexts: swL3pimCandidateRPHoldtime.setDescription('For C-RPs, this is the Holdtime specified in C-RP-Adv message, and is used by the BSR to time out RPs. This should be set to 2.5 * [C-RP-Adv-Period]. Default: 150 seconds.')
swL3pimCandidateRPPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCandidateRPPriority.setStatus('current')
if mibBuilder.loadTexts: swL3pimCandidateRPPriority.setDescription("The 'priority' of the included RP, for the corresponding Encoded-Group Address (if any), highest priority is '0' (i.e. the lower the value of the 'Priority' field, the higher the priority). This field is stored at the BSR upon receipt along with the RP address and corresponding Encoded-Group Address.")
swL3pimCandidateRPWildcardPrefixCnt = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimCandidateRPWildcardPrefixCnt.setStatus('current')
if mibBuilder.loadTexts: swL3pimCandidateRPWildcardPrefixCnt.setDescription("The number of enocded group addresses included in the message; indicating the group prefixes for which the C-RP is advertising. A Prefix-Cnt of '0' implies a prefix of 224.0.0.0 with mask length of 4; i.e. all multicast groups. If the C-RP is not configured with Group-prefix information, the C-RP puts a default value of '0' in this field.")
swL3pimSptMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 3))
swL3pimLastHopSptThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimLastHopSptThreshold.setStatus('current')
if mibBuilder.loadTexts: swL3pimLastHopSptThreshold.setDescription('Specifies a last hop router threshold.')
swL3pimRPSptThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimRPSptThreshold.setStatus('current')
if mibBuilder.loadTexts: swL3pimRPSptThreshold.setDescription('Specifies an RP threshold.')
swL3pimRegChksumIncDataTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4), )
if mibBuilder.loadTexts: swL3pimRegChksumIncDataTable.setStatus('current')
if mibBuilder.loadTexts: swL3pimRegChksumIncDataTable.setDescription('The PIM Register Checksum Including Data Table contains the PIM register checksum including data information, like RP address and state.')
swL3pimRegChksumIncDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3SwL3pimRegChksumIncDataRpAddr"))
if mibBuilder.loadTexts: swL3pimRegChksumIncDataEntry.setStatus('current')
if mibBuilder.loadTexts: swL3pimRegChksumIncDataEntry.setDescription('An entry in the PIM Register Checksum Including Data Table.')
swL3SwL3pimRegChksumIncDataRpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3SwL3pimRegChksumIncDataRpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3SwL3pimRegChksumIncDataRpAddr.setDescription('Specifies the RP address.')
swL3SwL3pimRegChksumIncDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3SwL3pimRegChksumIncDataState.setStatus('current')
if mibBuilder.loadTexts: swL3SwL3pimRegChksumIncDataState.setDescription('The state of register checksum including data for RPs.')
swL3PimInfoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5))
swL3pimRegisterProbeTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimRegisterProbeTime.setStatus('current')
if mibBuilder.loadTexts: swL3pimRegisterProbeTime.setDescription('When null Registers are used, this is the time between sending a null Register and the Register-Suppression-Timer expiring unless it is restarted by receiving a Register-Stop. Thus, a null Register would be sent when the Register-Suppression-Timer reaches this value. Default: 5 seconds.')
swL3pimRegisterSuppressionTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimRegisterSuppressionTime.setStatus('current')
if mibBuilder.loadTexts: swL3pimRegisterSuppressionTime.setDescription('This is the mean interval between receiving a Register-Stop and allowing Registers to be sent again. A lower value means more frequent register bursts at RP, while a higher value means longer join latency for new receiver. Default: 60 seconds.')
swL3pimInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3), )
if mibBuilder.loadTexts: swL3pimInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL3pimInfoTable.setDescription('The PIM Information Table contains the PIM related information, like DR priority.')
swL3pimInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3pimInterface"))
if mibBuilder.loadTexts: swL3pimInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL3pimInfoEntry.setDescription('An entry in the PIM Information Table.')
swL3pimInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: swL3pimInterface.setStatus('current')
if mibBuilder.loadTexts: swL3pimInterface.setDescription('The ifIndex value of this PIM interface.')
swL3pimDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 5, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL3pimDRPriority.setStatus('current')
if mibBuilder.loadTexts: swL3pimDRPriority.setDescription("The DR Priority is a 32-bit unsigned number and the numerically larger priority is always prefered. A router's idea of the current DR on an interface can change when a PIM Hello message is received, when a neighbor timers out, or when a router's own DR priority changes.")
swL3pimStaticRPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6), )
if mibBuilder.loadTexts: swL3pimStaticRPTable.setStatus('current')
if mibBuilder.loadTexts: swL3pimStaticRPTable.setDescription('The PIM Static RP Table contains the PIM static RP related information, like group address, group mask, RP address and RP row status.')
swL3pimStaticRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1), ).setIndexNames((0, "DES6500-SWL3MGMT-MIB", "swL3pimStaticRPGroupAddress"), (0, "DES6500-SWL3MGMT-MIB", "swL3pimStaticRPGroupMask"), (0, "DES6500-SWL3MGMT-MIB", "swL3pimStaticRPAddress"))
if mibBuilder.loadTexts: swL3pimStaticRPEntry.setStatus('current')
if mibBuilder.loadTexts: swL3pimStaticRPEntry.setDescription('An entry in the PIM Static RP Table.')
swL3pimStaticRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3pimStaticRPGroupAddress.setStatus('current')
if mibBuilder.loadTexts: swL3pimStaticRPGroupAddress.setDescription('The IP multicast group address which, when combined with swL3pimStaticRPGroupMask, identifies a group prefix for which the local router will advertise itself as a static RP.')
swL3pimStaticRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: swL3pimStaticRPGroupMask.setStatus('current')
if mibBuilder.loadTexts: swL3pimStaticRPGroupMask.setDescription('The multicast group address mask which, when combined with swL3pimStaticRPGroupAddress, identifies a group prefix for which the local router will advertise itself as a static RP.')
swL3pimStaticRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: swL3pimStaticRPAddress.setStatus('current')
if mibBuilder.loadTexts: swL3pimStaticRPAddress.setDescription('The (unicast) address of the interface which will be advertised as a static RP.')
swL3pimStaticRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 3, 10, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3pimStaticRPRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL3pimStaticRPRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
mibBuilder.exportSymbols("DES6500-SWL3MGMT-MIB", swL3ospfIfTransitDelay=swL3ospfIfTransitDelay, swL3RelayDnsPrimaryServer=swL3RelayDnsPrimaryServer, swL3Md5Key=swL3Md5Key, swL3OspfHostEntry=swL3OspfHostEntry, swL3RouteRedistriSrcProtocol=swL3RouteRedistriSrcProtocol, swL3RouteRedistriMetric=swL3RouteRedistriMetric, swL3ospfVirtIfEvents=swL3ospfVirtIfEvents, swL3ospfVirtIfStatus=swL3ospfVirtIfStatus, swL3RelayDhcpCtrlTable=swL3RelayDhcpCtrlTable, swL3pimStaticRPEntry=swL3pimStaticRPEntry, swL3Md5RowStatus=swL3Md5RowStatus, swL3IpCtrlAdminState=swL3IpCtrlAdminState, swL3pimDRPriority=swL3pimDRPriority, swL3IpCtrlInterfaceName=swL3IpCtrlInterfaceName, swL3pimRegisterProbeTime=swL3pimRegisterProbeTime, swL3ospfVirtIfAreaId=swL3ospfVirtIfAreaId, swL3ospfVirtIfRetransInterval=swL3ospfVirtIfRetransInterval, swL3OspfHostMetric=swL3OspfHostMetric, swL3ospfVirtIfHelloInterval=swL3ospfVirtIfHelloInterval, swL3pimLastHopSptThreshold=swL3pimLastHopSptThreshold, swL3IpStaticRouteBkupState=swL3IpStaticRouteBkupState, swL3RelayDnsCtrlEntry=swL3RelayDnsCtrlEntry, swL3dvmrpInterfaceStatus=swL3dvmrpInterfaceStatus, swL3pimCbsrHashMaskLen=swL3pimCbsrHashMaskLen, swL3RelayDnsState=swL3RelayDnsState, swL3pimCandidateRPPriority=swL3pimCandidateRPPriority, swL3ospfIfType=swL3ospfIfType, swL3RouteRedistriDstProtocol=swL3RouteRedistriDstProtocol, swL3pimRegChksumIncDataEntry=swL3pimRegChksumIncDataEntry, swL3pimInfoEntry=swL3pimInfoEntry, swL3pimRegChksumIncDataTable=swL3pimRegChksumIncDataTable, swL3ospfIfAreaId=swL3ospfIfAreaId, swL3DevCtrlDVMRPState=swL3DevCtrlDVMRPState, swL3ospfIfIpAddress=swL3ospfIfIpAddress, swL3DevCtrlRIPState=swL3DevCtrlRIPState, swL3IpCtrlIpAddr=swL3IpCtrlIpAddr, swL3RelayDnsCtrlDomainName=swL3RelayDnsCtrlDomainName, swL3RelayDhcpMgmt=swL3RelayDhcpMgmt, swL3IpStaticRouteNextHop=swL3IpStaticRouteNextHop, swL3DevCtrlVrrpState=swL3DevCtrlVrrpState, swL3RelayBootpState=swL3RelayBootpState, swL3ospfIfStatus=swL3ospfIfStatus, swL3RelayDnsCtrlTable=swL3RelayDnsCtrlTable, swL3Md5Entry=swL3Md5Entry, swL3RelayDhcpOption82ChceckState=swL3RelayDhcpOption82ChceckState, swL3IpCtrlIfIndex=swL3IpCtrlIfIndex, swL3RelayBootpTimeThreshold=swL3RelayBootpTimeThreshold, swL3ospfVirtIfTable=swL3ospfVirtIfTable, swL3RelayDnsCtrlIpAddr=swL3RelayDnsCtrlIpAddr, swL3ospfVirtIfEntry=swL3ospfVirtIfEntry, swL3RouteRedistriType=swL3RouteRedistriType, swL3IpCtrlMode=swL3IpCtrlMode, swL3RouteRedistriTable=swL3RouteRedistriTable, swL3pimCbsrBootStrapPeriod=swL3pimCbsrBootStrapPeriod, swL3ospfIfAdminStat=swL3ospfIfAdminStat, swL3DevCtrl=swL3DevCtrl, swL3dvmrpInterfaceMetric=swL3dvmrpInterfaceMetric, swL3SwL3pimRegChksumIncDataState=swL3SwL3pimRegChksumIncDataState, swL3IpCtrlTable=swL3IpCtrlTable, swL3RelayDhcpCtrlState=swL3RelayDhcpCtrlState, swL3IpCtrlOperState=swL3IpCtrlOperState, swL3ospfVirtIfAuthKeyID=swL3ospfVirtIfAuthKeyID, swL3dvmrpInterfaceTable=swL3dvmrpInterfaceTable, NodeAddress=NodeAddress, swL3RelayBootpHopCount=swL3RelayBootpHopCount, swL3RelayDhcpCtrlServer=swL3RelayDhcpCtrlServer, swL3RelayDhcpCtrlInterfaceName=swL3RelayDhcpCtrlInterfaceName, swL3RelayMgmt=swL3RelayMgmt, swL3Md5KeyId=swL3Md5KeyId, swL3RouteRedistriEntry=swL3RouteRedistriEntry, swL3ospfIfEntry=swL3ospfIfEntry, swL3pimInterface=swL3pimInterface, swL3ospfIfPollInterval=swL3ospfIfPollInterval, swL3pimStaticRPRowStatus=swL3pimStaticRPRowStatus, swL3ospfVirtIfState=swL3ospfVirtIfState, swL3ospfIfAuthKey=swL3ospfIfAuthKey, swL3ospfIfAuthKeyID=swL3ospfIfAuthKeyID, swL3ospfVirtIfRtrDeadInterval=swL3ospfVirtIfRtrDeadInterval, swL3pimStaticRPAddress=swL3pimStaticRPAddress, swL3IpCtrlSecondary=swL3IpCtrlSecondary, swL3pimCandidateRPWildcardPrefixCnt=swL3pimCandidateRPWildcardPrefixCnt, swL3pimRPSptThreshold=swL3pimRPSptThreshold, swL3pimSptMgmt=swL3pimSptMgmt, swL3IpCtrlState=swL3IpCtrlState, swL3ospfIfBackupDesignatedRouter=swL3ospfIfBackupDesignatedRouter, swL3ospfIfRtrDeadInterval=swL3ospfIfRtrDeadInterval, swL3OspfHostAreaID=swL3OspfHostAreaID, swL3IpCtrlEntry=swL3IpCtrlEntry, swL3ospfIfDesignatedRouter=swL3ospfIfDesignatedRouter, swL3IpFdbInfoTable=swL3IpFdbInfoTable, swL3IpStaticRouteTable=swL3IpStaticRouteTable, swL3ospfIfRtrPriority=swL3ospfIfRtrPriority, swL3pimInfoTable=swL3pimInfoTable, swL3RelayDnsSecondaryServer=swL3RelayDnsSecondaryServer, swL3OspfHostIpAddress=swL3OspfHostIpAddress, swL3RelayDnsCacheState=swL3RelayDnsCacheState, swL3dvmrpInterfaceEntry=swL3dvmrpInterfaceEntry, swL3PimMgmt=swL3PimMgmt, swL3pimRegisterSuppressionTime=swL3pimRegisterSuppressionTime, swL3IpStaticRouteMetric=swL3IpStaticRouteMetric, swL3dvmrpInterfaceLocalAddress=swL3dvmrpInterfaceLocalAddress, swL3IpCtrlMgmt=swL3IpCtrlMgmt, swL3ospfVirtIfNeighbor=swL3ospfVirtIfNeighbor, swL3RelayDnsMgmt=swL3RelayDnsMgmt, swL3ospfIfDemand=swL3ospfIfDemand, swL3DevCtrlVrrpPingState=swL3DevCtrlVrrpPingState, swL3dvmrpInterfaceIfIndex=swL3dvmrpInterfaceIfIndex, swL3IpStaticRouteMask=swL3IpStaticRouteMask, swL3ospfIfRetransInterval=swL3ospfIfRetransInterval, swL3dvmrpInterfaceRcvBadRoutes=swL3dvmrpInterfaceRcvBadRoutes, swL3DevCtrlDHCPAutoConfigState=swL3DevCtrlDHCPAutoConfigState, swL3ospfIfMulticastForwarding=swL3ospfIfMulticastForwarding, swL3RouteRedistriRowStatus=swL3RouteRedistriRowStatus, swL3DevCtrlPIMGlobalState=swL3DevCtrlPIMGlobalState, swL3IpFdbInfoIpSubnetMask=swL3IpFdbInfoIpSubnetMask, swL3RelayDnsStaticTableState=swL3RelayDnsStaticTableState, swL3RelayDhcpOption82Policy=swL3RelayDhcpOption82Policy, NetAddress=NetAddress, swL3IpFdbInfoType=swL3IpFdbInfoType, swL3ospfIfHelloInterval=swL3ospfIfHelloInterval, swL3RelayDhcpCtrlEntry=swL3RelayDhcpCtrlEntry, swL3ospfAddressLessIf=swL3ospfAddressLessIf, swL3ospfIfState=swL3ospfIfState, swL3PimInfoMgmt=swL3PimInfoMgmt, swL3pimCandidateRPHoldtime=swL3pimCandidateRPHoldtime, swL3IpCtrlIpSubnetMask=swL3IpCtrlIpSubnetMask, swL3OspfHostStatus=swL3OspfHostStatus, swL3ospfVirtIfAuthType=swL3ospfVirtIfAuthType, swL3IpStaticRouteEntry=swL3IpStaticRouteEntry, swL3pimStaticRPGroupAddress=swL3pimStaticRPGroupAddress, swL3PimCbsrInfoMgmt=swL3PimCbsrInfoMgmt, swL3RelayDnsCtrlState=swL3RelayDnsCtrlState, swL3MgmtMIB=swL3MgmtMIB, swL3OspfHostTable=swL3OspfHostTable, swL3IpFdbMgmt=swL3IpFdbMgmt, swL3SwL3pimRegChksumIncDataRpAddr=swL3SwL3pimRegChksumIncDataRpAddr, swL3IpFdbInfoEntry=swL3IpFdbInfoEntry, swL3IpFdbInfoIpAddr=swL3IpFdbInfoIpAddr, PYSNMP_MODULE_ID=swL3MgmtMIB, swL3IpStaticRouteStatus=swL3IpStaticRouteStatus, swL3IpStaticRouteDest=swL3IpStaticRouteDest, swL3ospfIfAuthType=swL3ospfIfAuthType, swL3OspfHostTOS=swL3OspfHostTOS, swL3IpMgmt=swL3IpMgmt, swL3ospfVirtIfTransitDelay=swL3ospfVirtIfTransitDelay, swL3ospfIfTable=swL3ospfIfTable, swL3DevCtrlOSPFState=swL3DevCtrlOSPFState, swL3ospfIfEvents=swL3ospfIfEvents, swL3RelayDhcpOption82State=swL3RelayDhcpOption82State, swL3IpCtrlVlanName=swL3IpCtrlVlanName, swL3pimStaticRPTable=swL3pimStaticRPTable, swL3dvmrpInterfaceProbe=swL3dvmrpInterfaceProbe, swL3pimStaticRPGroupMask=swL3pimStaticRPGroupMask, swL3pimCandidateRPMgmt=swL3pimCandidateRPMgmt, swL3IpFdbInfoPort=swL3IpFdbInfoPort, swL3ospfVirtIfAuthKey=swL3ospfVirtIfAuthKey, swL3dvmrpInterfaceRcvBadPkts=swL3dvmrpInterfaceRcvBadPkts, swL3DevMgmt=swL3DevMgmt, swL3IpArpAgingTime=swL3IpArpAgingTime, swL3Md5Table=swL3Md5Table, swL3dvmrpInterfaceNbrTimeout=swL3dvmrpInterfaceNbrTimeout)
