#
# PySNMP MIB module CISCO-LOCAL-DIRECTOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LOCAL-DIRECTOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, Integer32, iso, NotificationType, ModuleIdentity, Counter32, Unsigned32, Bits, Counter64, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Integer32", "iso", "NotificationType", "ModuleIdentity", "Counter32", "Unsigned32", "Bits", "Counter64", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention")
ciscoLocalDirectorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 99))
ciscoLocalDirectorMIB.setRevisions(('2001-05-14 00:00', '1999-10-21 00:00', '1999-02-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLocalDirectorMIB.setRevisionsDescriptions(('Added table cldexVirtualTable reflecting the additional index cldexVirtualRule that is the name of the Content Rule for the Virtual. Deprecated cldeVirtualTable and associated objects. Added 3 missing Notification Groups to the Compliance section of the MIB. These groups represent the set of notifications added via 9910210000Z, but that were not added as groups. Obsoleted/Deprecated the first 2 sets of these groups that are based on Notifications being replaced by new objects in this MIB.', 'Added tables cldeVirtualTable and cldeRealTable reflecting additional indices allowing the retrieval of additional entries for the different protocols supported. Obsoleted cldVirtualTable, cldRealTable and associated objects. Updated notifications and traps to not use Deprecated objects.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLocalDirectorMIB.setLastUpdated('200105140000Z')
if mibBuilder.loadTexts: ciscoLocalDirectorMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoLocalDirectorMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ld@cisco.com')
if mibBuilder.loadTexts: ciscoLocalDirectorMIB.setDescription("The MIB module to view information about LocalDirector. The Cisco LocalDirector is a device designed for the purpose of load balancing TCP traffic at an Internet site. To implement load balancing, an IP address (and optionally a port and a 'bind ID') is chosen to be the publically accessible 'virtual machine'. Then a number of actual Internet servers are 'bound' to this virtual machine. The servers are called 'real machines'. The relationships between virtual and real machines can be one to many, many to one, or many to many. More detailed information about the LocalDirector is available in the 'Cisco LocalDirector Installation and Configuration Guide', available online at www.cisco.com.")
ciscoLocalDirectorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 1))
cldVirtualMachine = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1))
cldRealMachine = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2))
cldFailover = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 3))
class CldMachineState(TextualConvention, Integer32):
    description = "The state of a real or virtual machine. inService: normal. outOfService: manually taken offline. testing: machine has failed, but is being tested for availability. failed: machine has failed. maxCapacity: machine has reached connection limit. maintenance: manually taken offine, and when brought back online, sticky associations will not be cleared. stickyOnly: machine will only accept new connections for which a 'Sticky Association' already exists in cache. externalFailed: An external management application determined that the real or virtual server is no longer available to service connections. The management application has indicated such to this LD and this LD has failed the server."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("inService", 1), ("outOfService", 2), ("testing", 3), ("failed", 4), ("maxCapacity", 5), ("maintenance", 6), ("stickyOnly", 7), ("externalFailed", 8))

class CldFailoverEnabledState(TextualConvention, Integer32):
    description = 'Indicates if failover mechanism is turned on or off for this LocalDirector. failoverOn: normal failoverOff: manually taken offline'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("failoverOn", 1), ("failoverOff", 2))

class CldFailoverCableState(TextualConvention, Integer32):
    description = 'Indicates state of serial failover cable between LocalDirector units. normalConnected: cable connected on both sides and both units powered on. otherSidePoweredOff: cable connected on both sides, but other unit is powered off. mySideNotConnected: my side of serial cable is not connected. otherSideNotConnected: my side of serial cable is connected, but other unit is not connected. badCable: problem is detected with serial cable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("normalConnected", 1), ("otherSidePoweredOff", 2), ("mySideNotConnected", 3), ("otherSideNotConnected", 4), ("badCable", 5))

class CldFailoverUnitTypeDescriptor(TextualConvention, Integer32):
    description = "Indicates LocalDirector's role in failover setup; primary or secondary. primary: Primary end of serial cable plugged into unit. secondary: Secondary end of serial cable plugged into unit."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("primary", 1), ("secondary", 2))

class CldFailoverUnitStatusDescriptor(TextualConvention, Integer32):
    description = "Indicates LocalDirector's current activity; active or standby. active: LocalDirector is currently active and handling load-balancing for site. standby:LocalDirector is currently not active and is only monitoring 'active' unit."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("standby", 2))

class MachineProtocol(TextualConvention, Integer32):
    reference = 'Assigned numbers. J.K. Reynolds, J. Postel. RFC1700.'
    description = 'IP protocol number defining the protocol used for sending packets between the client and the Virtual Server. protocolTypeAll : signifies that all IP protocol numbers are handled by the GLoBal Service Manager for this Virtual Server. protocolTypeTCP : signifies that TCP/IP is the protocol used for sending packets between the client and the Virtual Server. protocolTypeUDP : signifies that UDP/IP is the protocol used for sending packets between the client and the Virtual Server. protocolTypeGRE : signifies that Generic Routing Encapulation (GRE) is used for sending packets between the client and the Virtual Server.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 6, 17, 47))
    namedValues = NamedValues(("protocolTypeAll", 0), ("protocolTypeTCP", 6), ("protocolTypeUDP", 17), ("protocolTypeGRE", 47))

class MachineBindID(TextualConvention, Integer32):
    description = 'Used to associate clients with a Virtual Server. A 0 value indicates all clients are associated with the Virtual Server.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

cldVirtualTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1), )
if mibBuilder.loadTexts: cldVirtualTable.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualTable.setDescription('Information about all Virtual machines that exist on LocalDirector.')
cldVirtualTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualIpAddress"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualPort"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualBindID"))
if mibBuilder.loadTexts: cldVirtualTableEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualTableEntry.setDescription("A LocalDirector Virtual Table entry. Entries are added to this table via the 'virtual' command on the command line interface.")
cldVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cldVirtualIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualIpAddress.setDescription('The IP address of the virtual machine.')
cldVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldVirtualPort.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualPort.setDescription('The TCP port of the virtual machine (default is 0, which is all ports).')
cldVirtualBindID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldVirtualBindID.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualBindID.setDescription('The Bind ID of the virtual machine (default is 0, which is for all clients.')
cldVirtualState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 4), CldMachineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldVirtualState.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualState.setDescription('The service state of the virtual machine.')
cldVirtualTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldVirtualTotalConnections.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualTotalConnections.setDescription('The total number of connections to/from the virtual machine since reboot.')
cldVirtualTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldVirtualTotalPackets.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualTotalPackets.setDescription('The total number of packets to/from the virtual machine since reboot.')
cldVirtualTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldVirtualTotalBytes.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualTotalBytes.setDescription('The total number of bytes to/from the virtual machine since reboot.')
cldVirtualWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldVirtualWeight.setStatus('obsolete')
if mibBuilder.loadTexts: cldVirtualWeight.setDescription('The weight reflects the availability of a virtual machine, which is the total weights/availability of all real machines bound the virtual machine.')
cldRealTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1), )
if mibBuilder.loadTexts: cldRealTable.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealTable.setDescription('Information about all Real machines that exist on LocalDirector.')
cldRealTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LOCAL-DIRECTOR-MIB", "cldRealIpAddress"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldRealPort"))
if mibBuilder.loadTexts: cldRealTableEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealTableEntry.setDescription("A LocalDirector Real Table entry. Entries are added via the 'real' command on the command line interface.")
cldRealIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cldRealIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealIpAddress.setDescription('The IP address of the real machine.')
cldRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldRealPort.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealPort.setDescription('The TCP port of the real machine (default is 0, which is all ports).')
cldRealState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1, 3), CldMachineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRealState.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealState.setDescription('The service state of the real machine (defaul is 0, which is all clients.')
cldRealTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRealTotalConnections.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealTotalConnections.setDescription('The total number of connections to this machine since reboot.')
cldRealTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRealTotalPackets.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealTotalPackets.setDescription('The total number of packets to/from the real machine since reboot.')
cldRealTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldRealTotalBytes.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealTotalBytes.setDescription('The total number of bytes to/from the real machine since reboot.')
cldRealWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldRealWeight.setStatus('obsolete')
if mibBuilder.loadTexts: cldRealWeight.setDescription('The weight for the real machine.')
cldeVirtualTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2), )
if mibBuilder.loadTexts: cldeVirtualTable.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualTable.setDescription('Information about all Virtual machines that exist on LocalDirector.')
cldeVirtualTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualIpAddress"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualPort"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualBindID"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualProtocol"))
if mibBuilder.loadTexts: cldeVirtualTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualTableEntry.setDescription("A LocalDirector Virtual Table entry. Entries are added to this table via the 'virtual' command on the command line interface.")
cldeVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cldeVirtualIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualIpAddress.setDescription('The IP address of the virtual machine.')
cldeVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldeVirtualPort.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualPort.setDescription('The TCP port of the virtual machine (default is 0, which is all ports).')
cldeVirtualBindID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldeVirtualBindID.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualBindID.setDescription('The Bind ID of the virtual machine (default is 0, which is for all clients.')
cldeVirtualProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 4), MachineProtocol())
if mibBuilder.loadTexts: cldeVirtualProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualProtocol.setDescription('The TCP/UDP protocol field value used in sending packets to this Virtual Server.')
cldeVirtualState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 5), CldMachineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeVirtualState.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualState.setDescription('The service state of the virtual machine.')
cldeVirtualTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeVirtualTotalConnections.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualTotalConnections.setDescription('The total number of connections to/from the virtual machine since reboot.')
cldeVirtualTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeVirtualTotalPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualTotalPackets.setDescription('The total number of packets to/from the virtual machine since reboot.')
cldeVirtualTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeVirtualTotalBytes.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualTotalBytes.setDescription('The total number of bytes to/from the virtual machine since reboot.')
cldeVirtualWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeVirtualWeight.setStatus('deprecated')
if mibBuilder.loadTexts: cldeVirtualWeight.setDescription('The weight reflects the availability of a virtual machine, which is the total weights/availability of all real machines bound the virtual machine.')
cldeRealTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2), )
if mibBuilder.loadTexts: cldeRealTable.setStatus('current')
if mibBuilder.loadTexts: cldeRealTable.setDescription('Information about all Real machines that exist on LocalDirector.')
cldeRealTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeRealIpAddress"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeRealPort"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeRealBindID"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldeRealProtocol"))
if mibBuilder.loadTexts: cldeRealTableEntry.setStatus('current')
if mibBuilder.loadTexts: cldeRealTableEntry.setDescription("A LocalDirector Real Table entry. Entries are added via the 'real' command on the command line interface.")
cldeRealIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cldeRealIpAddress.setStatus('current')
if mibBuilder.loadTexts: cldeRealIpAddress.setDescription('The IP address of the real machine.')
cldeRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldeRealPort.setStatus('current')
if mibBuilder.loadTexts: cldeRealPort.setDescription('The TCP port of the real machine (default is 0, which is all ports).')
cldeRealBindID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 3), MachineBindID())
if mibBuilder.loadTexts: cldeRealBindID.setStatus('current')
if mibBuilder.loadTexts: cldeRealBindID.setDescription('The Bind ID of the Real Server.')
cldeRealProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 4), MachineProtocol())
if mibBuilder.loadTexts: cldeRealProtocol.setStatus('current')
if mibBuilder.loadTexts: cldeRealProtocol.setDescription('The TCP/UDP protocol field value used in sending packets to this Real Server.')
cldeRealState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 5), CldMachineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeRealState.setStatus('current')
if mibBuilder.loadTexts: cldeRealState.setDescription('The service state of the real machine (defaul is 0, which is all clients.')
cldeRealTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeRealTotalConnections.setStatus('current')
if mibBuilder.loadTexts: cldeRealTotalConnections.setDescription('The total number of connections to this machine since reboot.')
cldeRealTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeRealTotalPackets.setStatus('current')
if mibBuilder.loadTexts: cldeRealTotalPackets.setDescription('The total number of packets to/from the real machine since reboot.')
cldeRealTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldeRealTotalBytes.setStatus('current')
if mibBuilder.loadTexts: cldeRealTotalBytes.setDescription('The total number of bytes to/from the real machine since reboot.')
cldeRealWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldeRealWeight.setStatus('current')
if mibBuilder.loadTexts: cldeRealWeight.setDescription('The weight for the real machine.')
cldexVirtualTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3), )
if mibBuilder.loadTexts: cldexVirtualTable.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualTable.setDescription('Information about all Virtual machines that exist on LocalDirector.')
cldexVirtualTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualIpAddress"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualPort"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualBindID"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualProtocol"), (0, "CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualRule"))
if mibBuilder.loadTexts: cldexVirtualTableEntry.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualTableEntry.setDescription("A LocalDirector Virtual Table entry. Entries are added to this table via the 'virtual' command on the command line interface.")
cldexVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: cldexVirtualIpAddress.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualIpAddress.setDescription('The IP address of the virtual machine.')
cldexVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldexVirtualPort.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualPort.setDescription('The TCP port of the virtual machine (default is 0, which is all ports).')
cldexVirtualBindID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cldexVirtualBindID.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualBindID.setDescription('The Bind ID of the virtual machine (default is 0, which is for all clients.')
cldexVirtualProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 4), MachineProtocol())
if mibBuilder.loadTexts: cldexVirtualProtocol.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualProtocol.setDescription('The TCP/UDP protocol field value used in sending packets to this Virtual Server.')
cldexVirtualRule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: cldexVirtualRule.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualRule.setDescription('The administratively assigned content rule name associated with this Virtual Server.')
cldexVirtualState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 6), CldMachineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldexVirtualState.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualState.setDescription('The service state of the virtual machine.')
cldexVirtualTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldexVirtualTotalConnections.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualTotalConnections.setDescription('The total number of connections to/from the virtual machine since reboot.')
cldexVirtualTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldexVirtualTotalPackets.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualTotalPackets.setDescription('The total number of packets to/from the virtual machine since reboot.')
cldexVirtualTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldexVirtualTotalBytes.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualTotalBytes.setDescription('The total number of bytes to/from the virtual machine since reboot.')
cldexVirtualWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldexVirtualWeight.setStatus('current')
if mibBuilder.loadTexts: cldexVirtualWeight.setDescription('The weight reflects the availability of a virtual machine, which is the total weights/availability of all real machines bound the virtual machine.')
cldFailoverEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 3, 1), CldFailoverEnabledState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldFailoverEnabled.setStatus('current')
if mibBuilder.loadTexts: cldFailoverEnabled.setDescription('Is failover mechanism enabled.')
cldFailoverCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 3, 2), CldFailoverCableState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldFailoverCableStatus.setStatus('current')
if mibBuilder.loadTexts: cldFailoverCableStatus.setDescription('Status of failover serial cable.')
cldFailoverUnitType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 3, 3), CldFailoverUnitTypeDescriptor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldFailoverUnitType.setStatus('current')
if mibBuilder.loadTexts: cldFailoverUnitType.setDescription('The failover unit type, which is determined by Failover serial cable; primary or secondary.')
cldFailoverUnitStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 3, 4), CldFailoverUnitStatusDescriptor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldFailoverUnitStatus.setStatus('current')
if mibBuilder.loadTexts: cldFailoverUnitStatus.setDescription("The unit's failover activity; active or standby.")
cldFailoverActiveTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 99, 1, 3, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldFailoverActiveTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cldFailoverActiveTimeStamp.setDescription('The value of sysUpTime when unit went active.')
ciscoLocalDirectorMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 2))
ciscoLocalDirectorMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0))
ciscoLocalDirectorVirtualStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 1)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualState"))
if mibBuilder.loadTexts: ciscoLocalDirectorVirtualStateChange.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLocalDirectorVirtualStateChange.setDescription('When a Virtual machine changes state, a notification is sent.')
ciscoLocalDirectorRealStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 2)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldRealState"))
if mibBuilder.loadTexts: ciscoLocalDirectorRealStateChange.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLocalDirectorRealStateChange.setDescription('When a Real machine changes state, a notification is sent.')
ciscoLocalDirectorFailoverEnableChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 3)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverEnabled"))
if mibBuilder.loadTexts: ciscoLocalDirectorFailoverEnableChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorFailoverEnableChange.setDescription('Failover is turned on/off.')
ciscoLocalDirectorFailoverCableChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 4)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverCableStatus"))
if mibBuilder.loadTexts: ciscoLocalDirectorFailoverCableChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorFailoverCableChange.setDescription("Failover's serial cable has a status change.")
ciscoLocalDirectorFailoverUnitStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 5)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverUnitStatus"))
if mibBuilder.loadTexts: ciscoLocalDirectorFailoverUnitStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorFailoverUnitStatus.setDescription('Failover event occurs.')
ciscoLocalDirectorEVirtualStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 6)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualState"))
if mibBuilder.loadTexts: ciscoLocalDirectorEVirtualStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLocalDirectorEVirtualStateChange.setDescription('When a Virtual machine changes state, a notification is sent.')
ciscoLocalDirectorERealStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 7)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealState"))
if mibBuilder.loadTexts: ciscoLocalDirectorERealStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorERealStateChange.setDescription('When a Real machine changes state, a notification is sent.')
ciscoLocalDirectorExVirtualStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 99, 2, 0, 8)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualState"))
if mibBuilder.loadTexts: ciscoLocalDirectorExVirtualStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorExVirtualStateChange.setDescription('When a Virtual machine changes state, a notification is sent.')
ciscoLocalDirectorMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 3))
ciscoLocalDirectorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 1))
ciscoLocalDirectorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2))
ciscoLocalDirectorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 1, 1)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorMIBCompliance = ciscoLocalDirectorMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLocalDirectorMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco LocalDirector MIB.')
ciscoLocalDirectorMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2, 1)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualState"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualTotalConnections"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualTotalPackets"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualTotalBytes"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldVirtualWeight"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldRealState"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldRealTotalConnections"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldRealTotalPackets"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldRealTotalBytes"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldRealWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorMIBGroup = ciscoLocalDirectorMIBGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLocalDirectorMIBGroup.setDescription('A collection of objects providing the LocalDirector MIB capability.')
ciscoLocalDirectorFailoverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2, 2)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverEnabled"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverCableStatus"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverUnitType"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverUnitStatus"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldFailoverActiveTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorFailoverGroup = ciscoLocalDirectorFailoverGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorFailoverGroup.setDescription('A collection of objects providing the LocalDirector MIB capability.')
ciscoLocalDirectorEMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2, 3)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualState"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualTotalConnections"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualTotalPackets"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualTotalBytes"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeVirtualWeight"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealState"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealTotalConnections"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealTotalPackets"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealTotalBytes"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorEMIBGroup = ciscoLocalDirectorEMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLocalDirectorEMIBGroup.setDescription('A collection of objects providing the LocalDirector MIB capability.')
ciscoLocalDirectorNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2, 4)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorVirtualStateChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorRealStateChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverEnableChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverCableChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverUnitStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorNotificationGroup = ciscoLocalDirectorNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoLocalDirectorNotificationGroup.setDescription('A collection of objects providing the LocalDirector MIB capability.')
ciscoLocalDirectorNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2, 5)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorEVirtualStateChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorERealStateChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverEnableChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverCableChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverUnitStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorNotificationGroupRev1 = ciscoLocalDirectorNotificationGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLocalDirectorNotificationGroupRev1.setDescription('A collection of objects providing the LocalDirector MIB capability.')
ciscoLocalDirectorEMIBGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2, 6)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualState"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualTotalConnections"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualTotalPackets"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualTotalBytes"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldexVirtualWeight"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealState"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealTotalConnections"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealTotalPackets"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealTotalBytes"), ("CISCO-LOCAL-DIRECTOR-MIB", "cldeRealWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorEMIBGroupRev1 = ciscoLocalDirectorEMIBGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorEMIBGroupRev1.setDescription('A collection of objects providing the LocalDirector MIB capability.')
ciscoLocalDirectorNotificationGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 99, 3, 2, 7)).setObjects(("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorExVirtualStateChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorERealStateChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverEnableChange"), ("CISCO-LOCAL-DIRECTOR-MIB", "ciscoLocalDirectorFailoverCableChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLocalDirectorNotificationGroupRev2 = ciscoLocalDirectorNotificationGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLocalDirectorNotificationGroupRev2.setDescription('A collection of objects providing the LocalDirector MIB capability.')
mibBuilder.exportSymbols("CISCO-LOCAL-DIRECTOR-MIB", cldeRealPort=cldeRealPort, ciscoLocalDirectorNotificationGroupRev2=ciscoLocalDirectorNotificationGroupRev2, cldFailoverUnitStatus=cldFailoverUnitStatus, cldVirtualTable=cldVirtualTable, cldexVirtualIpAddress=cldexVirtualIpAddress, cldeVirtualTotalPackets=cldeVirtualTotalPackets, cldexVirtualPort=cldexVirtualPort, cldRealWeight=cldRealWeight, cldeRealWeight=cldeRealWeight, cldFailoverUnitType=cldFailoverUnitType, cldRealTotalPackets=cldRealTotalPackets, cldeVirtualIpAddress=cldeVirtualIpAddress, cldeVirtualTotalConnections=cldeVirtualTotalConnections, cldRealTotalConnections=cldRealTotalConnections, cldVirtualBindID=cldVirtualBindID, cldeVirtualTotalBytes=cldeVirtualTotalBytes, cldexVirtualWeight=cldexVirtualWeight, PYSNMP_MODULE_ID=ciscoLocalDirectorMIB, cldexVirtualRule=cldexVirtualRule, cldexVirtualTotalBytes=cldexVirtualTotalBytes, cldVirtualWeight=cldVirtualWeight, cldFailoverEnabled=cldFailoverEnabled, ciscoLocalDirectorEMIBGroup=ciscoLocalDirectorEMIBGroup, MachineProtocol=MachineProtocol, ciscoLocalDirectorMIBConformance=ciscoLocalDirectorMIBConformance, CldFailoverUnitStatusDescriptor=CldFailoverUnitStatusDescriptor, CldFailoverCableState=CldFailoverCableState, ciscoLocalDirectorMIBNotificationPrefix=ciscoLocalDirectorMIBNotificationPrefix, ciscoLocalDirectorERealStateChange=ciscoLocalDirectorERealStateChange, ciscoLocalDirectorMIBCompliances=ciscoLocalDirectorMIBCompliances, cldexVirtualTable=cldexVirtualTable, ciscoLocalDirectorMIBCompliance=ciscoLocalDirectorMIBCompliance, cldeVirtualState=cldeVirtualState, cldFailover=cldFailover, cldFailoverCableStatus=cldFailoverCableStatus, cldFailoverActiveTimeStamp=cldFailoverActiveTimeStamp, cldeVirtualTableEntry=cldeVirtualTableEntry, cldRealTable=cldRealTable, cldRealIpAddress=cldRealIpAddress, CldFailoverEnabledState=CldFailoverEnabledState, cldeRealState=cldeRealState, cldexVirtualTotalConnections=cldexVirtualTotalConnections, cldexVirtualTotalPackets=cldexVirtualTotalPackets, CldFailoverUnitTypeDescriptor=CldFailoverUnitTypeDescriptor, cldeRealTotalPackets=cldeRealTotalPackets, ciscoLocalDirectorFailoverUnitStatus=ciscoLocalDirectorFailoverUnitStatus, cldeVirtualWeight=cldeVirtualWeight, cldexVirtualBindID=cldexVirtualBindID, cldRealTotalBytes=cldRealTotalBytes, cldeVirtualProtocol=cldeVirtualProtocol, ciscoLocalDirectorMIB=ciscoLocalDirectorMIB, cldVirtualPort=cldVirtualPort, cldeRealBindID=cldeRealBindID, ciscoLocalDirectorFailoverGroup=ciscoLocalDirectorFailoverGroup, ciscoLocalDirectorMIBObjects=ciscoLocalDirectorMIBObjects, ciscoLocalDirectorEMIBGroupRev1=ciscoLocalDirectorEMIBGroupRev1, ciscoLocalDirectorExVirtualStateChange=ciscoLocalDirectorExVirtualStateChange, ciscoLocalDirectorVirtualStateChange=ciscoLocalDirectorVirtualStateChange, ciscoLocalDirectorRealStateChange=ciscoLocalDirectorRealStateChange, cldeRealProtocol=cldeRealProtocol, cldexVirtualProtocol=cldexVirtualProtocol, cldVirtualTotalPackets=cldVirtualTotalPackets, cldeRealTable=cldeRealTable, cldeVirtualTable=cldeVirtualTable, ciscoLocalDirectorMIBGroup=ciscoLocalDirectorMIBGroup, cldeRealTableEntry=cldeRealTableEntry, cldVirtualState=cldVirtualState, ciscoLocalDirectorEVirtualStateChange=ciscoLocalDirectorEVirtualStateChange, cldeVirtualBindID=cldeVirtualBindID, ciscoLocalDirectorFailoverCableChange=ciscoLocalDirectorFailoverCableChange, CldMachineState=CldMachineState, cldexVirtualTableEntry=cldexVirtualTableEntry, cldeRealIpAddress=cldeRealIpAddress, cldVirtualMachine=cldVirtualMachine, cldRealTableEntry=cldRealTableEntry, MachineBindID=MachineBindID, cldRealState=cldRealState, cldRealPort=cldRealPort, cldRealMachine=cldRealMachine, cldeVirtualPort=cldeVirtualPort, cldVirtualIpAddress=cldVirtualIpAddress, ciscoLocalDirectorMIBNotifications=ciscoLocalDirectorMIBNotifications, cldVirtualTotalBytes=cldVirtualTotalBytes, cldeRealTotalBytes=cldeRealTotalBytes, ciscoLocalDirectorNotificationGroupRev1=ciscoLocalDirectorNotificationGroupRev1, ciscoLocalDirectorMIBGroups=ciscoLocalDirectorMIBGroups, cldeRealTotalConnections=cldeRealTotalConnections, cldexVirtualState=cldexVirtualState, cldVirtualTableEntry=cldVirtualTableEntry, ciscoLocalDirectorFailoverEnableChange=ciscoLocalDirectorFailoverEnableChange, cldVirtualTotalConnections=cldVirtualTotalConnections, ciscoLocalDirectorNotificationGroup=ciscoLocalDirectorNotificationGroup)
