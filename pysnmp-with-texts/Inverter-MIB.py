#
# PySNMP MIB module Inverter-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Inverter-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Unsigned32, NotificationType, TimeTicks, ObjectIdentity, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Counter64, IpAddress, Gauge32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Unsigned32", "NotificationType", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Counter64", "IpAddress", "Gauge32", "Bits", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
argus = ModuleIdentity((1, 3, 6, 1, 4, 1, 7309))
if mibBuilder.loadTexts: argus.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: argus.setOrganization('Argus Technologies')
if mibBuilder.loadTexts: argus.setContactInfo('Postal: Argus Technologies 5700 Sidley Street Burnaby, BC V5J 5E5 Canada Tel: 1-604-436-5900 Fax: 1-604-436-1233')
if mibBuilder.loadTexts: argus.setDescription('TSI Inverter Support for CXC controllers.')
pwrSysInv = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 10))
tsiModules = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 10, 5))
phaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 10, 6))
acGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 10, 7))
dcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 10, 8))
miscInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 10, 9))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 10, 10))
pwrInvCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwrInvCount.setStatus('current')
if mibBuilder.loadTexts: pwrInvCount.setDescription('')
tsiModulesCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 10, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiModulesCount.setStatus('current')
if mibBuilder.loadTexts: tsiModulesCount.setDescription('Number of TSI modules acquired by the Inv.')
tsiModulesTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5), )
if mibBuilder.loadTexts: tsiModulesTable.setStatus('current')
if mibBuilder.loadTexts: tsiModulesTable.setDescription('TSI Modules information table.')
tsiModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1), ).setIndexNames((0, "Inverter-MIB", "tsiModulesIndex"))
if mibBuilder.loadTexts: tsiModulesEntry.setStatus('current')
if mibBuilder.loadTexts: tsiModulesEntry.setDescription('One TSI Modules information entry.')
tsiModulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiModulesIndex.setStatus('current')
tsiStatusACOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiStatusACOut.setStatus('current')
tsiStatusACIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiStatusACIn.setStatus('current')
tsiStatusDCIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiStatusDCIn.setStatus('current')
tsiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiAddress.setStatus('current')
tsiLoadPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiLoadPosition.setStatus('current')
tsiLoadRatioW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiLoadRatioW.setStatus('current')
tsiLoadRatioVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiLoadRatioVA.setStatus('current')
tsiSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiSerialNumber.setStatus('current')
tsiVout = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiVout.setStatus('current')
tsiIout = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiIout.setStatus('current')
tsiPoutW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPoutW.setStatus('current')
tsiPoutVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPoutVA.setStatus('current')
tsiVinAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiVinAC.setStatus('current')
tsiIinAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiIinAC.setStatus('current')
tsiPinACW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPinACW.setStatus('current')
tsiPinACVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPinACVA.setStatus('current')
tsiACInFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiACInFreq.setStatus('current')
tsiVinDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiVinDC.setStatus('current')
tsiIinDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiIinDC.setStatus('current')
tsiPinDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPinDC.setStatus('current')
tsiTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiTemperature.setStatus('current')
tsiSoftVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiSoftVersion.setStatus('current')
tsiBusErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiBusErrorCnt.setStatus('current')
tsiPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPhaseNumber.setStatus('current')
tsiStatusMod = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiStatusMod.setStatus('current')
tsiStatusAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiStatusAC.setStatus('current')
tsiStatusDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiStatusDC.setStatus('current')
tsiPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPresent.setStatus('current')
tsiGroupAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiGroupAC.setStatus('current')
tsiGroupDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiGroupDC.setStatus('current')
tsiRestrained = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiRestrained.setStatus('current')
tsiNoEPC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiNoEPC.setStatus('current')
tsiPoutNominalW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPoutNominalW.setStatus('current')
tsiPoutNominalVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiPoutNominalVA.setStatus('current')
tsiVinNominalAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiVinNominalAC.setStatus('current')
tsiVinNominalDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiVinNominalDC.setStatus('current')
tsiVinNominalFreqAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 5, 5, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsiVinNominalFreqAC.setStatus('current')
phaseCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 10, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phaseCount.setStatus('current')
phaseGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5), )
if mibBuilder.loadTexts: phaseGroupTable.setStatus('current')
phaseGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1), ).setIndexNames((0, "Inverter-MIB", "phaseGroupIndex"))
if mibBuilder.loadTexts: phaseGroupEntry.setStatus('current')
phaseGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phaseGroupIndex.setStatus('current')
bRatioAvailableW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRatioAvailableW.setStatus('current')
bRatioAvailableVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRatioAvailableVA.setStatus('current')
bRatioInstalledW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRatioInstalledW.setStatus('current')
bRatioInstalledWA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRatioInstalledWA.setStatus('current')
wVout = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wVout.setStatus('current')
wIout = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wIout.setStatus('current')
bNbOndCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbOndCfg.setStatus('current')
bRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bRedundancy.setStatus('current')
wACOutFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wACOutFreq.setStatus('current')
lPinDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lPinDC.setStatus('current')
lPinACW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lPinACW.setStatus('current')
lPinACVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lPinACVA.setStatus('current')
lCurrentPowerInW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCurrentPowerInW.setStatus('current')
lCurrentPowerInVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCurrentPowerInVA.setStatus('current')
lInstalledPowerInW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lInstalledPowerInW.setStatus('current')
lInstalledPowerInVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lInstalledPowerInVA.setStatus('current')
lAvailablePowerInW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lAvailablePowerInW.setStatus('current')
lAvailablePowerInVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lAvailablePowerInVA.setStatus('current')
bNbInvSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbInvSeen.setStatus('current')
bNbInvOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbInvOK.setStatus('current')
bNbInvMO = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbInvMO.setStatus('current')
bNbInvKO = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbInvKO.setStatus('current')
bNbInvNT = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 6, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbInvNT.setStatus('current')
acGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 10, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGroupCount.setStatus('current')
acGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5), )
if mibBuilder.loadTexts: acGroupTable.setStatus('current')
acGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1), ).setIndexNames((0, "Inverter-MIB", "acGroupIndex"))
if mibBuilder.loadTexts: acGroupEntry.setStatus('current')
acGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acGroupIndex.setStatus('current')
acNbInvOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acNbInvOK.setStatus('current')
acNbInvMO = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acNbInvMO.setStatus('current')
acNbInvKO = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acNbInvKO.setStatus('current')
acNbInvSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acNbInvSeen.setStatus('current')
acPinACW = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPinACW.setStatus('current')
acPinACVA = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPinACVA.setStatus('current')
acVinAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acVinAC.setStatus('current')
acIinAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIinAC.setStatus('current')
acACinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acACinFreq.setStatus('current')
acACinOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 7, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acACinOK.setStatus('current')
dcGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 10, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGroupCount.setStatus('current')
dcGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5), )
if mibBuilder.loadTexts: dcGroupTable.setStatus('current')
dcGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1), ).setIndexNames((0, "Inverter-MIB", "dcGroupIndex"))
if mibBuilder.loadTexts: dcGroupEntry.setStatus('current')
dcGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGroupIndex.setStatus('current')
dcNbInvOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNbInvOK.setStatus('current')
dcNbInvMO = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNbInvMO.setStatus('current')
dcNbInvKO = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNbInvKO.setStatus('current')
dcNbInvSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNbInvSeen.setStatus('current')
dcPinDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcPinDC.setStatus('current')
dcVinDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcVinDC.setStatus('current')
dcIinDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcIinDC.setStatus('current')
dcDCInOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcDCInOK.setStatus('current')
miscInfoGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 10, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscInfoGroupCount.setStatus('current')
miscInfoGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5), )
if mibBuilder.loadTexts: miscInfoGroupTable.setStatus('current')
miscInfoGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1), ).setIndexNames((0, "Inverter-MIB", "miscInfoGroupIndex"))
if mibBuilder.loadTexts: miscInfoGroupEntry.setStatus('current')
miscInfoGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscInfoGroupIndex.setStatus('current')
bOldVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bOldVersionNumber.setStatus('current')
ePhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePhaseNumber.setStatus('current')
bNbMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbMajor.setStatus('current')
wTempoMajorAl = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wTempoMajorAl.setStatus('current')
wtempoMinorAl = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtempoMinorAl.setStatus('current')
lSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSerialNumber.setStatus('current')
bNbMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbMinor.setStatus('current')
bNbTotalAlarmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbTotalAlarmNumber.setStatus('current')
bACInputPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bACInputPresent.setStatus('current')
bSaturationThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSaturationThresh.setStatus('current')
bNbGroupsDC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbGroupsDC.setStatus('current')
bNbGroupsAC = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bNbGroupsAC.setStatus('current')
bProgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bProgRelay.setStatus('current')
bSystemLoadPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bSystemLoadPosition.setStatus('current')
wSoftSubRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wSoftSubRevision.setStatus('current')
wSoftMainRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wSoftMainRevision.setStatus('current')
wInvVersionTextError = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wInvVersionTextError.setStatus('current')
bInvMaxKnowParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 9, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bInvMaxKnowParameters.setStatus('current')
alarmGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 7309, 10, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmGroupCount.setStatus('current')
alarmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7309, 10, 10, 5), )
if mibBuilder.loadTexts: alarmGroupTable.setStatus('current')
alarmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7309, 10, 10, 5, 1), ).setIndexNames((0, "Inverter-MIB", "alarmGroupIndex"))
if mibBuilder.loadTexts: alarmGroupEntry.setStatus('current')
alarmGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmGroupIndex.setStatus('current')
bDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bDeviceNumber.setStatus('current')
bEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bEventType.setStatus('current')
wEventNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEventNumber.setStatus('current')
sEventString = MibTableColumn((1, 3, 6, 1, 4, 1, 7309, 10, 10, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEventString.setStatus('current')
if mibBuilder.loadTexts: sEventString.setDescription('String identifier of the occurring event.')
mibBuilder.exportSymbols("Inverter-MIB", lCurrentPowerInVA=lCurrentPowerInVA, tsiAddress=tsiAddress, lAvailablePowerInVA=lAvailablePowerInVA, bNbInvMO=bNbInvMO, dcNbInvOK=dcNbInvOK, dcIinDC=dcIinDC, acACinOK=acACinOK, tsiIinAC=tsiIinAC, acGroupTable=acGroupTable, bSystemLoadPosition=bSystemLoadPosition, miscInfoGroupIndex=miscInfoGroupIndex, wACOutFreq=wACOutFreq, dcGroup=dcGroup, bNbInvSeen=bNbInvSeen, phaseGroupIndex=phaseGroupIndex, bRatioAvailableVA=bRatioAvailableVA, phaseGroupEntry=phaseGroupEntry, bInvMaxKnowParameters=bInvMaxKnowParameters, tsiModulesTable=tsiModulesTable, wSoftSubRevision=wSoftSubRevision, tsiStatusMod=tsiStatusMod, bSaturationThresh=bSaturationThresh, wSoftMainRevision=wSoftMainRevision, tsiVinAC=tsiVinAC, tsiVout=tsiVout, tsiPoutVA=tsiPoutVA, alarmGroupIndex=alarmGroupIndex, tsiACInFreq=tsiACInFreq, miscInfoGroupTable=miscInfoGroupTable, tsiPoutW=tsiPoutW, pwrSysInv=pwrSysInv, bNbMinor=bNbMinor, tsiVinDC=tsiVinDC, lPinDC=lPinDC, dcNbInvKO=dcNbInvKO, tsiPinACW=tsiPinACW, bNbMajor=bNbMajor, tsiModulesCount=tsiModulesCount, dcGroupEntry=dcGroupEntry, acGroupCount=acGroupCount, miscInfoGroupCount=miscInfoGroupCount, bProgRelay=bProgRelay, tsiRestrained=tsiRestrained, tsiPoutNominalVA=tsiPoutNominalVA, dcGroupCount=dcGroupCount, acACinFreq=acACinFreq, argus=argus, tsiIinDC=tsiIinDC, tsiSoftVersion=tsiSoftVersion, bRatioAvailableW=bRatioAvailableW, acNbInvOK=acNbInvOK, tsiPhaseNumber=tsiPhaseNumber, lInstalledPowerInVA=lInstalledPowerInVA, acPinACW=acPinACW, tsiSerialNumber=tsiSerialNumber, tsiBusErrorCnt=tsiBusErrorCnt, tsiIout=tsiIout, lSerialNumber=lSerialNumber, tsiStatusDC=tsiStatusDC, acGroup=acGroup, bNbInvKO=bNbInvKO, tsiPinACVA=tsiPinACVA, dcPinDC=dcPinDC, lPinACVA=lPinACVA, alarmGroupTable=alarmGroupTable, lPinACW=lPinACW, bEventType=bEventType, bRedundancy=bRedundancy, tsiLoadRatioVA=tsiLoadRatioVA, tsiVinNominalFreqAC=tsiVinNominalFreqAC, dcGroupTable=dcGroupTable, tsiModulesEntry=tsiModulesEntry, tsiLoadPosition=tsiLoadPosition, bNbGroupsAC=bNbGroupsAC, dcNbInvMO=dcNbInvMO, tsiStatusACOut=tsiStatusACOut, acVinAC=acVinAC, phaseCount=phaseCount, acGroupEntry=acGroupEntry, tsiLoadRatioW=tsiLoadRatioW, ePhaseNumber=ePhaseNumber, tsiPinDC=tsiPinDC, dcDCInOK=dcDCInOK, tsiVinNominalAC=tsiVinNominalAC, acNbInvMO=acNbInvMO, wtempoMinorAl=wtempoMinorAl, miscInfoGroupEntry=miscInfoGroupEntry, lInstalledPowerInW=lInstalledPowerInW, lCurrentPowerInW=lCurrentPowerInW, pwrInvCount=pwrInvCount, dcNbInvSeen=dcNbInvSeen, phaseGroup=phaseGroup, acNbInvKO=acNbInvKO, tsiNoEPC=tsiNoEPC, tsiPresent=tsiPresent, tsiStatusAC=tsiStatusAC, bNbInvOK=bNbInvOK, tsiVinNominalDC=tsiVinNominalDC, bRatioInstalledW=bRatioInstalledW, bNbOndCfg=bNbOndCfg, bRatioInstalledWA=bRatioInstalledWA, acIinAC=acIinAC, tsiPoutNominalW=tsiPoutNominalW, tsiModulesIndex=tsiModulesIndex, PYSNMP_MODULE_ID=argus, bNbInvNT=bNbInvNT, tsiStatusACIn=tsiStatusACIn, bNbTotalAlarmNumber=bNbTotalAlarmNumber, alarmGroupCount=alarmGroupCount, tsiTemperature=tsiTemperature, bOldVersionNumber=bOldVersionNumber, bACInputPresent=bACInputPresent, tsiModules=tsiModules, phaseGroupTable=phaseGroupTable, tsiStatusDCIn=tsiStatusDCIn, wTempoMajorAl=wTempoMajorAl, miscInfoGroup=miscInfoGroup, wInvVersionTextError=wInvVersionTextError, bDeviceNumber=bDeviceNumber, wVout=wVout, acPinACVA=acPinACVA, wEventNumber=wEventNumber, dcGroupIndex=dcGroupIndex, alarmGroupEntry=alarmGroupEntry, sEventString=sEventString, acNbInvSeen=acNbInvSeen, alarmGroup=alarmGroup, lAvailablePowerInW=lAvailablePowerInW, wIout=wIout, bNbGroupsDC=bNbGroupsDC, dcVinDC=dcVinDC, tsiGroupDC=tsiGroupDC, tsiGroupAC=tsiGroupAC, acGroupIndex=acGroupIndex)
