#
# PySNMP MIB module Unisphere-Data-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:32:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, ObjectIdentity, Unsigned32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, MibIdentifier, iso, Counter32, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Unsigned32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "MibIdentifier", "iso", "Counter32", "TimeTicks", "Bits")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdName, UsdEnable, UsdNextIfIndex = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdName", "UsdEnable", "UsdNextIfIndex")
usdPppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11))
usdPppMIB.setRevisions(('2002-05-09 20:31', '2002-05-08 20:00', '2000-10-09 16:10', '2000-02-15 12:00', '1999-07-01 00:00', '1998-11-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdPppMIB.setRevisionsDescriptions(('Added new objects to usdPppIpGroup, usdPppLcpGroup and usdPppMlpppGroup.', 'Revised the conformance statements.', 'Added usdPppLinkConfigStandardIfIndex object for cross referencing with standard PPP mibs.', 'Added usdPppLinkStatusTunnelIfIndex, Multi-Link PPP support, and PPP Interface Summary counts. Modified Terminate reasons to include tunnel-related events.', 'Additional objects added to support remote access capabilities, including termination reason, authentication protocol, option negotiation status.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdPppMIB.setLastUpdated('200205092031Z')
if mibBuilder.loadTexts: usdPppMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdPppMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdPppMIB.setDescription('The Point-to-Point Protocol (PPP) MIB for the Unisphere enterprise.')
class UsdPppAuthentication(TextualConvention, Integer32):
    description = 'Specifies the type(s) of PPP authentication used, if any: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("pap", 1), ("chap", 2), ("papChap", 3), ("chapPap", 4))

class UsdPppMlPppBundleName(TextualConvention, OctetString):
    description = 'MLPPP Bundle name. The bundle name is a characteristic of a MLPPP network interface.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

usdPppObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1))
usdPppLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1))
usdPppSec = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 2))
usdPppIp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3))
usdPppOsi = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4))
usdPppSession = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5))
usdPppMlPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6))
usdPppSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7))
usdPppLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1), )
if mibBuilder.loadTexts: usdPppLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusTable.setDescription('This table contains entries for PPP interfaces present in the system.')
usdPppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdPppLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusEntry.setDescription('Each entry describes the characteristics of a PPP interface.')
usdPppLinkStatusTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("adminDisable", 2), ("lowerLayerDown", 3), ("noUpperInterface", 4), ("authenticationFailure", 5), ("peerTerminated", 6), ("peerRenegotiated", 7), ("maxRetriesExceeded", 8), ("negotiationFailure", 9), ("keepaliveFailure", 10), ("sessionTimeout", 11), ("inactivityTimeout", 12), ("addressLeaseExpired", 13), ("adminLogout", 14), ("tunnelFailed", 15), ("tunnelDisconnected", 16), ("loopback", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusTerminateReason.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusTerminateReason.setDescription('Reason the PPP link was terminated: none None. other Not specified. adminDisable Interface administratively disabled. lowerLayerDown Underlying interface is down. noUpperInterface No interface above PPP. authenticationFailure Authentication failed. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate LCP option. See usdPppLinkStatusTerminateNegFailOption. keepaliveFailure Keepalive failed. sessionTimeout Maximum session period expired. inactivityTimeout Maximum inactivity period expired. addressLeaseExpired Lease for network address expired. adminLogout Session administratively terminated. tunnelFailed Associated tunnel failed. tunnelDisconnected Associated tunnel disconnected. loopback Loopback detected.')
usdPppLinkStatusTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localMru", 2), ("remoteMru", 3), ("localMagicNumber", 4), ("remoteMagicNumber", 5), ("localAuthentication", 6), ("localToRemoteProtocolCompression", 7), ("localToRemoteACCompression", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusTerminateNegFailOption.setDescription("Reports the PPP LCP option for which negotiation failed, when usdPppLinkStatusTerminateReason has the value 'negotiationFailure'.")
usdPppLinkStatusInKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusInKeepaliveRequests.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusInKeepaliveRequests.setDescription('Number of keepalive requests received.')
usdPppLinkStatusOutKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusOutKeepaliveRequests.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusOutKeepaliveRequests.setDescription('Number of keepalive requests transmitted.')
usdPppLinkStatusInKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusInKeepaliveReplies.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusInKeepaliveReplies.setDescription('Number of keepalive replies received.')
usdPppLinkStatusOutKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusOutKeepaliveReplies.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusOutKeepaliveReplies.setDescription('Number of keepalive replies transmitted.')
usdPppLinkStatusKeepaliveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusKeepaliveFailures.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusKeepaliveFailures.setDescription('Number of keepalive failures detected.')
usdPppLinkStatusLocalMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusLocalMagicNumber.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusLocalMagicNumber.setDescription('Magic number negotiated for the local side.')
usdPppLinkStatusRemoteMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusRemoteMagicNumber.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusRemoteMagicNumber.setDescription('Magic number negotiated for the remote side.')
usdPppLinkStatusLocalAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 10), UsdPppAuthentication()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusLocalAuthentication.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusLocalAuthentication.setDescription('Authentication protocol negotiated for the local side.')
usdPppLinkStatusTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkStatusTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkStatusTunnelIfIndex.setDescription('The ifIndex of an associated interface pertaining to a tunneling protocol, or zero if no such interface exists. The type of tunneling interface can be identified from information in the entries in ifTable and usdIfTable for this tunnel interface.')
usdPppLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2), )
if mibBuilder.loadTexts: usdPppLinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigTable.setDescription('This table contains entries for PPP interfaces present in the system.')
usdPppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-PPP-MIB", "usdPppLinkConfigIfIndex"))
if mibBuilder.loadTexts: usdPppLinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigEntry.setDescription('Each entry describes the characteristics of a PPP interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/usdIfTable.')
usdPppLinkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdPppLinkConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigIfIndex.setDescription('The ifIndex of the PPP interface. When creating entries in this table, suitable values for this object are determined by reading usdPppNextIfIndex.')
usdPppLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdPppLinkConfigRowStatus usdPppLinkConfigLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for usdPppLinkConfigIndex must have been determined previously, by reading usdPppNextIfIndex. The interface identified by usdPppLinkConfigLowerIfIndex must exist. A corresponding entry in ifTable/ifXTable/usdIfTable is created/destroyed as a result of creating/destroying an entry in this table.')
usdPppLinkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigLowerIfIndex.setDescription('The ifIndex of an interface over which this PPP interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a non-zero value be configured at entry creation.')
usdPppLinkConfigKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 300), )).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigKeepalive.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigKeepalive.setDescription('Keepalive interval in seconds. A value of zero disables keepalive. Keepalive is performed using LCP Echo.')
usdPppLinkConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 5), UsdPppAuthentication().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigAuthentication.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigAuthentication.setDescription('Specifies the type(s) of authentication, if any, to be negotiated with the peer: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP. If authentication negotiation is not supported for this PPP interface, then any attempt to explicitely set this object will result in a notWritable error and it will be implicitily set to the DEFVAL on row creation. Setting this object to none will set usdPppLinkConfigAuthenticatorVirtualRouter object to an empty string.')
usdPppLinkConfigMaxAuthenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigMaxAuthenRetries.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigMaxAuthenRetries.setDescription('The number of authentication retries permitted, in addition to a failed initial attempt. If all retries fail, the link is reset. If authentication negotiation is not supported for this PPP interface, then any attempt to explicitely set this object will result in a notWritable error and it will be implicitily set to the DEFVAL on row creation.')
usdPppLinkConfigStandardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 7), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppLinkConfigStandardIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigStandardIfIndex.setDescription('The ifIndex value for this interface in the standard PPP MIBs. The ifIndex value for PPP interfaces is not the same for both proprietary and standard MIB tables pertaining to PPP interface. Therefore this value is provide to simply cross referencing standard PPP and proprietary PPP MIB information.')
usdPppLinkConfigChapMinChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigChapMinChallengeLength.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigChapMinChallengeLength.setDescription('Minimum value of the CHAP authenticator challenge length value. This value is never allowed to be set to a value greater than usdPppLinkConfigChapMaxChallengeLength.')
usdPppLinkConfigChapMaxChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigChapMaxChallengeLength.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigChapMaxChallengeLength.setDescription('Maximum value of the CHAP authenticator challenge length value. This value is never allowed to be set to a value less than usdPppLinkConfigChapMinChallengeLength.')
usdPppLinkConfigPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 10), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigPassiveMode.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigPassiveMode.setDescription('When enabled, LCP state machine is forced into passive mode on lower layer UP message. It adds compatibility with slow and buggy clients.')
usdPppLinkConfigAuthenticatorVirtualRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 2, 1, 11), UsdName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppLinkConfigAuthenticatorVirtualRouter.setStatus('current')
if mibBuilder.loadTexts: usdPppLinkConfigAuthenticatorVirtualRouter.setDescription('The name of the virtual router (Unisphere-Data-ROUTER-MIB.usdRouterName) to be used for authentication on the PPP interface. Setting this object statically binds the authenticating virtual router with the PPP interface. If this object is not explicitly set or it is set to null string, then this object is ignored and the virtual router used for authentication is determined by other means. On a Set operation, if the value of this object is not null and does not correspond to an existing virtual router, then an inconsistentValue error is returned. Setting this object to non null string returns inconsistentValue error if usdPppLinkConfigAuthentication object is none or not configured.')
usdPppNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 1, 3), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in the usdPppLinkConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdPppIpTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1), )
if mibBuilder.loadTexts: usdPppIpTable.setStatus('current')
if mibBuilder.loadTexts: usdPppIpTable.setDescription('Table containing the IP parameters for the local PPP entity.')
usdPppIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdPppIpEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppIpEntry.setDescription('IPCP status information for a particular PPP link.')
usdPppIpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 1), UsdEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpServiceStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppIpServiceStatus.setDescription('Indicates whether IP protocol service is operating over this PPP link. Service is established on this link through means outside this MIB.')
usdPppIpTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpTerminateReason.setStatus('current')
if mibBuilder.loadTexts: usdPppIpTerminateReason.setDescription('Reason the IPCP link was terminated: none None. other Not specified. noService No IP service configured on this PPP link. admin Administratively disabled. linkDown Underlying link is down. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate IPCP option. See usdPppIpTerminateNegFailOption.')
usdPppIpTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localIpAddress", 2), ("remoteIpAddress", 3), ("remotePrimaryDnsAddress", 4), ("remoteSecondaryDnsAddress", 5), ("remotePrimaryWinsAddress", 6), ("remoteSecondaryWinsAddress", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: usdPppIpTerminateNegFailOption.setDescription("Reports the PPP IPCP option for which negotiation failed, when usdPppIpTerminateReason has the value 'negotiationFailure'.")
usdPppIpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppIpLocalIpAddress.setDescription('IP Address used by the local side.')
usdPppIpRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppIpRemoteIpAddress.setDescription('IP Address used by the remote side.')
usdPppIpRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpRemotePrimaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppIpRemotePrimaryDnsAddress.setDescription('Primary DNS server used by the remote side.')
usdPppIpRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpRemoteSecondaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppIpRemoteSecondaryDnsAddress.setDescription('Secondary DNS server used by the remote side.')
usdPppIpRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpRemotePrimaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppIpRemotePrimaryWinsAddress.setDescription('Primary WINS server used by the remote side.')
usdPppIpRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppIpRemoteSecondaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppIpRemoteSecondaryWinsAddress.setDescription('Secondary WINS server used by the remote side.')
usdPppIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 2), )
if mibBuilder.loadTexts: usdPppIpConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdPppIpConfigTable.setDescription('Table containing the IP parameters for the local PPP entity.')
usdPppIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdPppIpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppIpConfigEntry.setDescription('IPCP configuration information for a particular PPP link.')
usdPppIpConfigPeerDnsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 2, 1, 1), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppIpConfigPeerDnsPriority.setStatus('current')
if mibBuilder.loadTexts: usdPppIpConfigPeerDnsPriority.setDescription("When enabled, allows peer's DNS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's DNS address prevails.")
usdPppIpConfigPeerWinsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 2, 1, 2), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppIpConfigPeerWinsPriority.setStatus('current')
if mibBuilder.loadTexts: usdPppIpConfigPeerWinsPriority.setDescription("When enabled, allows peer's WINS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's WINS address prevails.")
usdPppIpConfigIpcpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 3, 2, 1, 3), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppIpConfigIpcpNetmask.setStatus('current')
if mibBuilder.loadTexts: usdPppIpConfigIpcpNetmask.setDescription('Enables the negotiation of the IPCP option netmask (0x90) during IPCP negotiation.')
usdPppOsiTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1), )
if mibBuilder.loadTexts: usdPppOsiTable.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiTable.setDescription('Table containing the OSI parameters for the local PPP entity.')
usdPppOsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdPppOsiEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiEntry.setDescription('OSICP status information for a particular PPP link.')
usdPppOsiServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1, 1, 1), UsdEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppOsiServiceStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiServiceStatus.setDescription('Indicates whether OSI protocol service is operating over this PPP link. Service is established on this link through means outside this MIB.')
usdPppOsiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("notOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppOsiOperStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiOperStatus.setDescription('The operational status of the OSI network protocol. If the value of this object is up then the finite state machine for the OSI network protocol has reached the Opened state.')
usdPppOsiTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppOsiTerminateReason.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiTerminateReason.setDescription('Reason the OSICP link was terminated: none None. other Not specified. noService No OSI service configured on this PPP link. admin Administratively disabled. linkDown Underlying link is down. peerTerminated Peer initiated termination. peerRenegotiated Peer initiated renegotiation. maxRetriesExceeded Maximum number of config retries exceeded. negotiationFailure Failed to negotiate IPCP option. See usdPppOsiTerminateNegFailOption.')
usdPppOsiTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localAlignNpdu", 2), ("remoteAlignNpdu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppOsiTerminateNegFailOption.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiTerminateNegFailOption.setDescription("Reports the PPP OSICP option for which negotiation failed, when usdPppOsiTerminateReason has the value 'negotiationFailure'.")
usdPppOsiLocalAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppOsiLocalAlignNpdu.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiLocalAlignNpdu.setDescription('Local alignment of network PDU: none No alignment specified. oneModulo4 Alignment on first octet (out of four). twoModulo4 Alignment on second octet (out of four). threeModulo4 Alignment on third octet (out of four). fourModulo4 Alignment on fourth octet (out of four). even Alignment on even-octet boundary. odd Alignment on odd-octet boundary.')
usdPppOsiRemoteAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppOsiRemoteAlignNpdu.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiRemoteAlignNpdu.setDescription('Remote alignment of network PDU. none No alignment specified. oneModulo4 Alignment on first octet (out of four). twoModulo4 Alignment on second octet (out of four). threeModulo4 Alignment on third octet (out of four). fourModulo4 Alignment on fourth octet (out of four). even Alignment on even-octet boundary. odd Alignment on odd-octet boundary.')
usdPppOsiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 2), )
if mibBuilder.loadTexts: usdPppOsiConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiConfigTable.setDescription('Table containing configuration variables for the OSICP for the local PPP entity.')
usdPppOsiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdPppOsiConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiConfigEntry.setDescription('OSICP information for a particular PPP link.')
usdPppOsiConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppOsiConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiConfigAdminStatus.setDescription("The immediate desired status of the OSI network protocol. Setting this object to open will inject an administrative open event into the OSI network protocol's finite state machine. Setting this object to close will inject an administrative close event into the OSI network protocol's finite state machine.")
usdPppSessionTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1), )
if mibBuilder.loadTexts: usdPppSessionTable.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionTable.setDescription('This table contains entries for PPP interfaces present in the system.')
usdPppSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: usdPppSessionEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionEntry.setDescription('Each entry describes the characteristics of a PPP interface.')
usdPppSessionGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionGrant.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionGrant.setDescription('Indicates whether a session has been granted via the authentication mechanism.')
usdPppSessionTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("userRequest", 2), ("keepaliveFailure", 3), ("sessionTimeout", 4), ("inactivityTimeout", 5), ("adminDisable", 6), ("lowerLayerDown", 7), ("noUpperInterface", 8), ("deny", 9), ("noHardware", 10), ("noResources", 11), ("noInterface", 12), ("challengeTimeout", 13), ("requestTimeout", 14), ("authenticatorTimeout", 15), ("addressLeaseExpired", 16), ("adminLogout", 17), ("tunnelFailed", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionTerminateReason.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionTerminateReason.setDescription('The reason the session was terminated.')
usdPppSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionStartTime.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionStartTime.setDescription('The value of sysUpTime when this session last became active.')
usdPppSessionInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 4), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionInOctets.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionInOctets.setDescription('Number of octets received since this session last became active, as denoted by usdPppSessionStartTime.')
usdPppSessionOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionOutOctets.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionOutOctets.setDescription('Number of octets sent since this session last became active, as denoted by usdPppSessionStartTime.')
usdPppSessionInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionInPackets.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionInPackets.setDescription('Number of packets received since this session last became active, as denoted by usdPppSessionStartTime.')
usdPppSessionOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionOutPackets.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionOutPackets.setDescription('Number of packets sent since this session last became active, as denoted by usdPppSessionStartTime.')
usdPppSessionSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionSessionTimeout.setDescription('Maximum duration for the session, after which the session terminates automatically.')
usdPppSessionInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionInactivityTimeout.setDescription('Maximum inactivity duration for the session, after which the session terminates automatically.')
usdPppSessionAccountingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionAccountingInterval.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionAccountingInterval.setDescription('Interval that must elapse between generation of accounting records for this session.')
usdPppSessionRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionRemoteIpAddress.setDescription('Remote IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
usdPppSessionRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionRemotePrimaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionRemotePrimaryDnsAddress.setDescription('Remote primary DNS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
usdPppSessionRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionRemoteSecondaryDnsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionRemoteSecondaryDnsAddress.setDescription('Remote secondary DNS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
usdPppSessionRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionRemotePrimaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionRemotePrimaryWinsAddress.setDescription('Remote primary WINS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
usdPppSessionRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSessionRemoteSecondaryWinsAddress.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionRemoteSecondaryWinsAddress.setDescription('Remote secondary WINS IP address, obtained from the authentication service, to be used during IPCP negotiation with the remote side.')
usdPppMlPppBundleTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 1), )
if mibBuilder.loadTexts: usdPppMlPppBundleTable.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBundleTable.setDescription('This table contains entries for MLPPP bundles present in the system.')
usdPppMlPppBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 1, 1), ).setIndexNames((0, "Unisphere-Data-PPP-MIB", "usdPppMlPppBundleName"))
if mibBuilder.loadTexts: usdPppMlPppBundleEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBundleEntry.setDescription('Each entry describes the characteristics of a MLPPP bundle.')
usdPppMlPppBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 1, 1, 1), UsdPppMlPppBundleName())
if mibBuilder.loadTexts: usdPppMlPppBundleName.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBundleName.setDescription('The administrative name of the MLPPP bundle associated with this MLPPP network interface.')
usdPppMlPppBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppBundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBundleRowStatus.setDescription('The rowStatus for this entry. The following sets are supported: createAndGo(4), destroy(6) The following values can be read from this object: active(1) ')
usdPppMlPppBundleNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppMlPppBundleNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBundleNetworkIfIndex.setDescription('The ifIndex of this MLPPP network interface. It is a valid ifIndex even if there is no corresponding network interface instance in the usdPppMlPppLinkConfigTable.')
usdPppMlPppNextLinkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 2), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppMlPppNextLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNextLinkIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdPppMlPppLinkConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdPppMlPppLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3), )
if mibBuilder.loadTexts: usdPppMlPppLinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigTable.setDescription('This table contains entries for MLPPP interfaces present in the system.')
usdPppMlPppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3, 1), ).setIndexNames((0, "Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigIfIndex"))
if mibBuilder.loadTexts: usdPppMlPppLinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigEntry.setDescription('Each entry describes the characteristics of MLPPP interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/usdIfTable.')
usdPppMlPppLinkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdPppMlPppLinkConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigIfIndex.setDescription('The ifIndex of the MLPPP interface. When creating entries in this table, suitable values for this object are determined by reading usdPppMlPppNextLinkIfIndex.')
usdPppMlPppLinkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppLinkConfigLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigLowerIfIndex.setDescription('The ifIndex of an interface over which this PPP interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a non-zero value be configured at entry creation.')
usdPppMlPppLinkConfigKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 300), )).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppLinkConfigKeepalive.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigKeepalive.setDescription('Keepalive interval in seconds. A value of zero disables keepalive. Keepalive is performed using LCP Echo.')
usdPppMlPppLinkConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3, 1, 5), UsdPppAuthentication().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppLinkConfigAuthentication.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigAuthentication.setDescription('Specifies the type(s) of authentication, if any, to be negotiated with the peer: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP.')
usdPppMlPppLinkConfigMaxAuthenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppLinkConfigMaxAuthenRetries.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigMaxAuthenRetries.setDescription('The number of authentication retries permitted, in addition to a failed initial attempt. If all retries fail, the link is reset.')
usdPppMlPppLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppLinkConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkConfigRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdPppMlPppLinkConfigRowStatus usdPppMlPppLinkConfigLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for usdPppMlPppLinkConfigIndex must have been determined previously, by reading usdPppMlPppNextIfIndex. The interface identified by usdPppMlPppLinkConfigLowerIfIndex must exist. A corresponding entry in ifTable/ifXTable/usdIfTable is created/destroyed as a result of creating/destroying an entry in this table.')
usdPppMlPppNextNetworkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 4), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppMlPppNextNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNextNetworkIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdPppMlPppNetworkConfigTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdPppMlPppNetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 5), )
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigTable.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigTable.setDescription('This table contains entries for MLPPP network interfaces present in the system.')
usdPppMlPppNetworkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 5, 1), ).setIndexNames((0, "Unisphere-Data-PPP-MIB", "usdPppMlPppNetworkConfigIfIndex"))
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigEntry.setDescription('Each entry describes the characteristics of MLPPP interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/usdIfTable.')
usdPppMlPppNetworkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigIfIndex.setDescription('The ifIndex of the MLPPP network interface. When creating entries in this table, suitable values for this object are determined by reading usdPppMlPppNextNetworkIfIndex.')
usdPppMlPppNetworkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 5, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNetworkConfigLowerIfIndex.setDescription('The ifIndex of a PPP link interface over which this PPP network interface is to be layered. On sets, the value of this object must equal on of the previously created PPP link interfaces created in the usdPppMlPppLinkConfigTable. On gets, the value of this object is the lexicographically least PPP link interface in a potential bundle of PPP link interfaces.')
usdPppMlPppNetworkBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 5, 1, 3), UsdPppMlPppBundleName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppNetworkBundleName.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNetworkBundleName.setDescription('The MLPPP bundle name administratively assigned.')
usdPppMlPppNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppNetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppNetworkRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdPppMlPppNetworkConfigLowerIfIndex usdPppMlPppNetworkBundleName usdPppMlPppNetworkConfigRowStatus In addition, when creating an entry the following conditions must hold: A value for usdPppMlPppNetworkConfigIndex must have been determined previously, by reading usdPppMlPppNextNetworkIfIndex. The interface identified by usdPppMlPppNetworkConfigLowerIfIndex must exist by a creation request to the usdPppMlPppLinkConfigTable. The bundleName specified in usdPppMlPppNetworkBundleName must have been created first in the usdPppMlPppBundleTable. A corresponding entry in ifTable/ifXTable/usdIfTable is created/destroyed as a result of creating/destroying an entry in this table. ')
usdPppMlPppLinkBindTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 6), )
if mibBuilder.loadTexts: usdPppMlPppLinkBindTable.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkBindTable.setDescription('This table contains entries for MLPPP Link interface to MLPPP network interfaces bindings.')
usdPppMlPppLinkBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 6, 1), ).setIndexNames((0, "Unisphere-Data-PPP-MIB", "usdPppMlPppBindNetworkIfIndex"), (0, "Unisphere-Data-PPP-MIB", "usdPppMlPppBindLinkIfIndex"))
if mibBuilder.loadTexts: usdPppMlPppLinkBindEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppLinkBindEntry.setDescription('Each entry describes the MLPPP link interface to MLPPP network interface bindings.')
usdPppMlPppBindNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdPppMlPppBindNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBindNetworkIfIndex.setDescription('The ifIndex of the MLPPP network interface.')
usdPppMlPppBindLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 6, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: usdPppMlPppBindLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBindLinkIfIndex.setDescription('The ifIndex of a MLPPP link interface bound by the MLPPP network interface defined by usdPppMlPppBindNetworkIfIndex.')
usdPppMlPppBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 6, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPppMlPppBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppBindRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdPppMlPppBindRowStatus In addition, when creating an entry the following conditions must hold: The interfaces identified by usdPppMlPppBindNetworkIfIndex and usdPppMlPppBindLinkIfIndex must be created in the usdPppMlPppNetworkConfigTable and usdPppMlPppLinkConfigTable respectively. A MLPPP bundle must be associated with the usdPppMlPppNetworkIfIndex and exist in the usdPppMibPppBundleTable. A corresponding entry in ifStackTable is created/destroyed as a result of creating/destroying an entry in this table.')
usdPppSummaryPppInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppInterfaceCount.setDescription('The total number of PPP interfaces configured in the system.')
usdPppSummaryPppIpNCPs = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIpNCPs.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIpNCPs.setDescription("The total number IP NCP's configured in the system.")
usdPppSummaryPppOsiNCPs = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppOsiNCPs.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppOsiNCPs.setDescription("The total number of OSI NCP's configured in the system.")
usdPppSummaryPppIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfAdminUp.setReference('ifAdminStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIfAdminUp.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfAdminUp.setDescription('The total number of PPP interfaces in the system that are administratively configured to up(1).')
usdPppSummaryPppIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfAdminDown.setReference('ifAdminStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIfAdminDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfAdminDown.setDescription('The total number of PPP interfaces in the system that are administrateively configued to down(2).')
usdPppSummaryPppIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfOperUp.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIfOperUp.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfOperUp.setDescription('The total number of PPP interfaces in the system with an operational state of up(1).')
usdPppSummaryPppIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfOperDown.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIfOperDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfOperDown.setDescription('The total number of PPP interfaces in the system with an operational state of down(2).')
usdPppSummaryPppIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfOperDormant.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIfOperDormant.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfOperDormant.setDescription('The total number of PPP interfaces in the system with an operational state of dormant(5).')
usdPppSummaryPppIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfNotPresent.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIfNotPresent.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfNotPresent.setDescription('The total number of PPP interfaces in the system with an operational state of notPresent(6).')
usdPppSummaryPppIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfLowerLayerDown.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIfLowerLayerDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfLowerLayerDown.setDescription('The total number of PPP interfaces in the system with an operational state of lowerLayerDown(7).')
usdPppSummaryPppIpNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIpNcpOpened.setReference('pppIpOperStatus from PPP-IP-NCP-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIpNcpOpened.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIpNcpOpened.setDescription('The total number of PPP IP NCPs in the system with an operational state of opened(1).')
usdPppSummaryPppIpNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIpNcpClosed.setReference('pppIpOperStatus from PPP-IP-NCP-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppIpNcpClosed.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIpNcpClosed.setDescription("The total number of PPP IP NCP's in the system with an operational state of not-opened(2).")
usdPppSummaryPppOsiNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppOsiNcpOpened.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppOsiNcpOpened.setDescription("The total number of PPP OSI NCP's in the system with an operational state of opened.")
usdPppSummaryPppOsiNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppOsiNcpClosed.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppOsiNcpClosed.setDescription("The total number of PPP OSI NCP's in the system with an operational state of closed.")
usdPppSummaryPppIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppIfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppIfLastChangeTime.setDescription('The value of the sysUpTime at the time of the last PPP interface creation or deletion in the system. If the number of PPP interfaces has been unchanged since the last re-initialization of the system, then this object contains a zero value. ')
usdPppSummaryPppLinkInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkInterfaceCount.setDescription('The total number of PPP Link interfaces configured in the system.')
usdPppSummaryPppLinkIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfAdminUp.setReference('ifAdminStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfAdminUp.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfAdminUp.setDescription('The total number of PPP Link interfaces in the system that are administratively configured to up(1).')
usdPppSummaryPppLinkIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfAdminDown.setReference('ifAdminStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfAdminDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfAdminDown.setDescription('The total number of PPP Link interfaces in the system that are administrateively configued to down(2).')
usdPppSummaryPppLinkIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperUp.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperUp.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperUp.setDescription('The total number of PPP Link interfaces in the system with an operational state of up(1).')
usdPppSummaryPppLinkIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperDown.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperDown.setDescription('The total number of PPP Link interfaces in the system with an operational state of down(2).')
usdPppSummaryPppLinkIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperDormant.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperDormant.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfOperDormant.setDescription('The total number of PPP Link interfaces in the system with an operational state of dormant(5).')
usdPppSummaryPppLinkIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfNotPresent.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfNotPresent.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfNotPresent.setDescription('The total number of PPP link interfaces in the system with an operational state of notPresent(6).')
usdPppSummaryPppLinkIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfLowerLayerDown.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfLowerLayerDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfLowerLayerDown.setDescription('The total number of PPP Link interfaces in the system with an operational state of lowerLayerDown(7).')
usdPppSummaryPppLinkIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppLinkIfLastChangeTime.setDescription('The value of the sysUpTime at the time of the last PPP Link interface creation or deletion in the system. If the number of PPP interfaces has been unchanged since the last re-initialization of the system, then this object contains a zero value. ')
usdPppSummaryPppNetworkInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkInterfaceCount.setDescription('The total number of PPP network interfaces configured in the system.')
usdPppSummaryPppNetworkIpNCPs = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIpNCPs.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIpNCPs.setDescription("The total number IP NCP's in the system configured on PPP network interfaces.")
usdPppSummaryPppNetworkOsiNCPs = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkOsiNCPs.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkOsiNCPs.setDescription("The total number of OSI NCP's in the system configured on PPP network interfaces.")
usdPppSummaryPppNetworkIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfAdminUp.setReference('ifAdminStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfAdminUp.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfAdminUp.setDescription('The total number of PPP network interfaces in the system that are administratively configured to up(1).')
usdPppSummaryPppNetworkIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfAdminDown.setReference('ifAdminStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfAdminDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfAdminDown.setDescription('The total number of PPP network interfaces in the system that are administrateively configued to down(2).')
usdPppSummaryPppNetworkIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperUp.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperUp.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperUp.setDescription('The total number of PPP network interfaces in the system with an operational state of up(1).')
usdPppSummaryPppNetworkIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperDown.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperDown.setDescription('The total number of PPP network interfaces in the system with an operational state of down(2).')
usdPppSummaryPppNetworkIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperDormant.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperDormant.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfOperDormant.setDescription('The total number of PPP network interfaces in the system with an operational state of dormant(5).')
usdPppSummaryPppNetworkIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfNotPresent.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfNotPresent.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfNotPresent.setDescription('The total number of PPP network interfaces in the system with an operational state of notPresent(6).')
usdPppSummaryPppNetworkIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfLowerLayerDown.setReference('ifOperStatus from IF-MIB')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfLowerLayerDown.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfLowerLayerDown.setDescription('The total number of PPP network interfaces in the system with an operational state of lowerLayerDown(7).')
usdPppSummaryPppNetworkIpNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIpNcpOpened.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIpNcpOpened.setDescription("The total number of PPP IP NCP's in the system with an operational state of opened.")
usdPppSummaryPppNetworkIpNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIpNcpClosed.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIpNcpClosed.setDescription("The total number of PPP IP NCP's in the system with an operational state of closed.")
usdPppSummaryPppNetworkOsiNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkOsiNcpOpened.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkOsiNcpOpened.setDescription("The total number of PPP OSI NCP's in the system with an operational state of opened.")
usdPppSummaryPppNetworkOsiNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkOsiNcpClosed.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkOsiNcpClosed.setDescription("The total number of PPP OSI NCP's in the system with an operational state of closed.")
usdPppSummaryPppNetworkIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 1, 7, 40), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryPppNetworkIfLastChangeTime.setDescription('The value of the sysUpTime at the time of the last PPP network interface creation or deletion in the system. If the number of PPP network interfaces has been unchanged since the last re-initialization of the system, then this object contains a zero value. ')
usdPppConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4))
usdPppCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 1))
usdPppGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2))
usdPppCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 1, 1)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLcpGroup"), ("Unisphere-Data-PPP-MIB", "usdPppIpGroup"), ("Unisphere-Data-PPP-MIB", "usdPppOsiGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppCompliance = usdPppCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppCompliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP MIB. This statement became obsolete when additional objects were added to the MIB.')
usdPppCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 1, 2)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLcpGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppIpGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppOsiGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppSessionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppCompliance2 = usdPppCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppCompliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP MIB. This statement became obsolete when the usdPppMlPppGroup and usdPppSummaryGroup objects were added.')
usdPppCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 1, 3)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLcpGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppIpGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppOsiGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppSessionGroup"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppGroup"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppCompliance3 = usdPppCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppCompliance3.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP MIB. This statement became obsolete when the usdPppLinkConfigStandardIfIndex object was added to the MIB.')
usdPppCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 1, 4)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLcpGroup3"), ("Unisphere-Data-PPP-MIB", "usdPppIpGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppOsiGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppSessionGroup"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppGroup"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppCompliance4 = usdPppCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppCompliance4.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP MIB. This statement became obsolete when the usdPppMlPppGroup, usdPppSummaryLinkGroup and usdPppSummaryNetworkGroup were moved from the list of mandatory groups.')
usdPppCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 1, 5)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLcpGroup3"), ("Unisphere-Data-PPP-MIB", "usdPppIpGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppOsiGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppSessionGroup"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryBasicGroup"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppGroup"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryLinkGroup"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryNetworkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppCompliance5 = usdPppCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppCompliance5.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP MIB. This statement became obsolete when new usdPppIpGroup, usdPppLcpGroup and usdPppMlPppGroup objects were added.')
usdPppCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 1, 6)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLcpGroup4"), ("Unisphere-Data-PPP-MIB", "usdPppIpGroup3"), ("Unisphere-Data-PPP-MIB", "usdPppOsiGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppSessionGroup"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryBasicGroup"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppGroup2"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryLinkGroup"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryNetworkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppCompliance6 = usdPppCompliance6.setStatus('current')
if mibBuilder.loadTexts: usdPppCompliance6.setDescription('The compliance statement for entities which implement the Unisphere PPP MIB.')
usdPppLcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 1)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLinkConfigRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppNextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppLcpGroup = usdPppLcpGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppLcpGroup.setDescription('Obsolete collection of objects providing management of link-layer functionality (LCP) of PPP interfaces in a Unisphere product. This group became obsolete when additional objects were added.')
usdPppIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 2)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppIpServiceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppIpGroup = usdPppIpGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppIpGroup.setDescription('Obsolete collection of objects providing management of IP network control protocol functionality (IPCP) of PPP interfaces in a Unisphere product. This group became obsolete when additional objects were added.')
usdPppOsiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 3)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppOsiServiceStatus"), ("Unisphere-Data-PPP-MIB", "usdPppOsiOperStatus"), ("Unisphere-Data-PPP-MIB", "usdPppOsiConfigAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppOsiGroup = usdPppOsiGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppOsiGroup.setDescription('Obsolete collection of objects providing management of OSI network control protocol functionality (OSICP) of PPP interfaces in a Unisphere product. This group became obsolete when additional objects were added.')
usdPppLcpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 4)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTerminateReason"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTerminateNegFailOption"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusInKeepaliveRequests"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusOutKeepaliveRequests"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusInKeepaliveReplies"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusOutKeepaliveReplies"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusKeepaliveFailures"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusLocalMagicNumber"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusRemoteMagicNumber"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusLocalAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTunnelIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigKeepalive"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigMaxAuthenRetries"), ("Unisphere-Data-PPP-MIB", "usdPppNextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppLcpGroup2 = usdPppLcpGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppLcpGroup2.setDescription('Obsolete collection of objects providing management of link-layer functionality (LCP) of PPP interfaces in a Unisphere product. This group became obsolete when the usdPppLinkConfigStandardIfIndex object was added.')
usdPppIpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 5)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppIpServiceStatus"), ("Unisphere-Data-PPP-MIB", "usdPppIpTerminateReason"), ("Unisphere-Data-PPP-MIB", "usdPppIpTerminateNegFailOption"), ("Unisphere-Data-PPP-MIB", "usdPppIpLocalIpAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemoteIpAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemotePrimaryDnsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemoteSecondaryDnsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemotePrimaryWinsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemoteSecondaryWinsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpConfigPeerDnsPriority"), ("Unisphere-Data-PPP-MIB", "usdPppIpConfigPeerWinsPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppIpGroup2 = usdPppIpGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppIpGroup2.setDescription('Obsolete collection of objects providing management of IP network control protocol functionality (IPCP) of PPP interfaces in a Unisphere product. This group became obsolete when additional objects were added.')
usdPppOsiGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 6)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppOsiServiceStatus"), ("Unisphere-Data-PPP-MIB", "usdPppOsiOperStatus"), ("Unisphere-Data-PPP-MIB", "usdPppOsiTerminateReason"), ("Unisphere-Data-PPP-MIB", "usdPppOsiTerminateNegFailOption"), ("Unisphere-Data-PPP-MIB", "usdPppOsiLocalAlignNpdu"), ("Unisphere-Data-PPP-MIB", "usdPppOsiRemoteAlignNpdu"), ("Unisphere-Data-PPP-MIB", "usdPppOsiConfigAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppOsiGroup2 = usdPppOsiGroup2.setStatus('current')
if mibBuilder.loadTexts: usdPppOsiGroup2.setDescription('A collection of objects providing management of OSI network control protocol functionality (OSICP) of PPP interfaces in a Unisphere product.')
usdPppSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 7)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppSessionGrant"), ("Unisphere-Data-PPP-MIB", "usdPppSessionTerminateReason"), ("Unisphere-Data-PPP-MIB", "usdPppSessionStartTime"), ("Unisphere-Data-PPP-MIB", "usdPppSessionInOctets"), ("Unisphere-Data-PPP-MIB", "usdPppSessionOutOctets"), ("Unisphere-Data-PPP-MIB", "usdPppSessionInPackets"), ("Unisphere-Data-PPP-MIB", "usdPppSessionOutPackets"), ("Unisphere-Data-PPP-MIB", "usdPppSessionSessionTimeout"), ("Unisphere-Data-PPP-MIB", "usdPppSessionInactivityTimeout"), ("Unisphere-Data-PPP-MIB", "usdPppSessionAccountingInterval"), ("Unisphere-Data-PPP-MIB", "usdPppSessionRemoteIpAddress"), ("Unisphere-Data-PPP-MIB", "usdPppSessionRemotePrimaryDnsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppSessionRemoteSecondaryDnsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppSessionRemotePrimaryWinsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppSessionRemoteSecondaryWinsAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppSessionGroup = usdPppSessionGroup.setStatus('current')
if mibBuilder.loadTexts: usdPppSessionGroup.setDescription('A collection of objects providing management of PPP session functionality of PPP interfaces in a Unisphere product.')
usdPppMlPppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 8)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppMlPppBundleRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNextLinkIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigKeepalive"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigMaxAuthenRetries"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNextNetworkIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNetworkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNetworkBundleName"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNetworkRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppMlPppGroup = usdPppMlPppGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppMlPppGroup.setDescription('Obsolete collection of objects providing management of multi link PPP management support in a Unisphere product. This group became obsolete when additional objects were added.')
usdPppSummaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 9)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppSummaryPppInterfaceCount"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIpNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppOsiNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfAdminUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfAdminDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfOperUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfOperDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfOperDormant"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfNotPresent"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfLowerLayerDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfLastChangeTime"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkInterfaceCount"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfAdminUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfAdminDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfOperUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfOperDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfOperDormant"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfNotPresent"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfLowerLayerDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfLastChangeTime"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkInterfaceCount"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIpNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkOsiNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfAdminUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfAdminDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfOperUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfOperDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfOperDormant"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfNotPresent"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfLowerLayerDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfLastChangeTime"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIpNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIpNcpClosed"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppOsiNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppOsiNcpClosed"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIpNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIpNcpClosed"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkOsiNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkOsiNcpClosed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppSummaryGroup = usdPppSummaryGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppSummaryGroup.setDescription('Obsolete collection of objects providing PPP interface summary information in a Unisphere product. This group became obsolete when it was divided into three groups so that the link and network object would not be manditory.')
usdPppLcpGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 10)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTerminateReason"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTerminateNegFailOption"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusInKeepaliveRequests"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusOutKeepaliveRequests"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusInKeepaliveReplies"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusOutKeepaliveReplies"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusKeepaliveFailures"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusLocalMagicNumber"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusRemoteMagicNumber"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusLocalAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTunnelIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigKeepalive"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigMaxAuthenRetries"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigStandardIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppNextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppLcpGroup3 = usdPppLcpGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppLcpGroup3.setDescription('Obsolete collection of objects providing management of link-layer functionality (LCP) of PPP interfaces in a Unisphere product. This group became obsolete when additional objects were added.')
usdPppSummaryBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 11)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppSummaryPppInterfaceCount"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIpNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppOsiNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfAdminUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfAdminDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfOperUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfOperDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfOperDormant"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfNotPresent"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfLowerLayerDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIfLastChangeTime"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIpNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppIpNcpClosed"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppOsiNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppOsiNcpClosed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppSummaryBasicGroup = usdPppSummaryBasicGroup.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryBasicGroup.setDescription('A collection of objects providing PPP interface basic summary information in a Unisphere product.')
usdPppSummaryLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 12)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkInterfaceCount"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfAdminUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfAdminDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfOperUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfOperDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfOperDormant"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfNotPresent"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfLowerLayerDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppLinkIfLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppSummaryLinkGroup = usdPppSummaryLinkGroup.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryLinkGroup.setDescription('A collection of objects providing PPP interface link summary information in a Unisphere product.')
usdPppSummaryNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 13)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkInterfaceCount"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIpNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkOsiNCPs"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfAdminUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfAdminDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfOperUp"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfOperDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfOperDormant"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfNotPresent"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfLowerLayerDown"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIfLastChangeTime"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIpNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkIpNcpClosed"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkOsiNcpOpened"), ("Unisphere-Data-PPP-MIB", "usdPppSummaryPppNetworkOsiNcpClosed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppSummaryNetworkGroup = usdPppSummaryNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: usdPppSummaryNetworkGroup.setDescription('A collection of objects providing PPP interface network summary information in a Unisphere product.')
usdPppLcpGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 14)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTerminateReason"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTerminateNegFailOption"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusInKeepaliveRequests"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusOutKeepaliveRequests"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusInKeepaliveReplies"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusOutKeepaliveReplies"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusKeepaliveFailures"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusLocalMagicNumber"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusRemoteMagicNumber"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusLocalAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppLinkStatusTunnelIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigKeepalive"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigMaxAuthenRetries"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigStandardIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigChapMinChallengeLength"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigChapMaxChallengeLength"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigPassiveMode"), ("Unisphere-Data-PPP-MIB", "usdPppLinkConfigAuthenticatorVirtualRouter"), ("Unisphere-Data-PPP-MIB", "usdPppNextIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppLcpGroup4 = usdPppLcpGroup4.setStatus('current')
if mibBuilder.loadTexts: usdPppLcpGroup4.setDescription('A collection of objects providing management of link-layer functionality (LCP) of PPP interfaces in a Unisphere product.')
usdPppIpGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 15)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppIpServiceStatus"), ("Unisphere-Data-PPP-MIB", "usdPppIpTerminateReason"), ("Unisphere-Data-PPP-MIB", "usdPppIpTerminateNegFailOption"), ("Unisphere-Data-PPP-MIB", "usdPppIpLocalIpAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemoteIpAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemotePrimaryDnsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemoteSecondaryDnsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemotePrimaryWinsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpRemoteSecondaryWinsAddress"), ("Unisphere-Data-PPP-MIB", "usdPppIpConfigPeerDnsPriority"), ("Unisphere-Data-PPP-MIB", "usdPppIpConfigPeerWinsPriority"), ("Unisphere-Data-PPP-MIB", "usdPppIpConfigIpcpNetmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppIpGroup3 = usdPppIpGroup3.setStatus('current')
if mibBuilder.loadTexts: usdPppIpGroup3.setDescription('A collection of objects providing management of IP network control protocol functionality (IPCP) of PPP interfaces in a Unisphere product.')
usdPppMlPppGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 11, 4, 2, 16)).setObjects(("Unisphere-Data-PPP-MIB", "usdPppMlPppBundleRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppBundleNetworkIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNextLinkIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigKeepalive"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigAuthentication"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigMaxAuthenRetries"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppLinkConfigRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNetworkConfigLowerIfIndex"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNetworkBundleName"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppNetworkRowStatus"), ("Unisphere-Data-PPP-MIB", "usdPppMlPppBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppMlPppGroup2 = usdPppMlPppGroup2.setStatus('current')
if mibBuilder.loadTexts: usdPppMlPppGroup2.setDescription('A collection of objects providing management of multi link PPP management support in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-PPP-MIB", usdPppMlPpp=usdPppMlPpp, usdPppSummaryPppNetworkIfLastChangeTime=usdPppSummaryPppNetworkIfLastChangeTime, usdPppIpTerminateReason=usdPppIpTerminateReason, usdPppSessionOutOctets=usdPppSessionOutOctets, usdPppMlPppLinkBindTable=usdPppMlPppLinkBindTable, usdPppIpGroup2=usdPppIpGroup2, usdPppSessionOutPackets=usdPppSessionOutPackets, usdPppIpRemotePrimaryDnsAddress=usdPppIpRemotePrimaryDnsAddress, usdPppSummaryPppNetworkOsiNcpClosed=usdPppSummaryPppNetworkOsiNcpClosed, usdPppMlPppBindLinkIfIndex=usdPppMlPppBindLinkIfIndex, usdPppLinkConfigLowerIfIndex=usdPppLinkConfigLowerIfIndex, usdPppSummaryPppNetworkIfOperDormant=usdPppSummaryPppNetworkIfOperDormant, usdPppIpConfigPeerDnsPriority=usdPppIpConfigPeerDnsPriority, usdPppIpRemoteSecondaryWinsAddress=usdPppIpRemoteSecondaryWinsAddress, usdPppSummaryPppLinkIfAdminDown=usdPppSummaryPppLinkIfAdminDown, usdPppLinkStatusTunnelIfIndex=usdPppLinkStatusTunnelIfIndex, usdPppSummaryPppNetworkIfAdminDown=usdPppSummaryPppNetworkIfAdminDown, usdPppSummaryPppNetworkIfLowerLayerDown=usdPppSummaryPppNetworkIfLowerLayerDown, usdPppSummaryPppNetworkIfOperDown=usdPppSummaryPppNetworkIfOperDown, usdPppLinkStatusKeepaliveFailures=usdPppLinkStatusKeepaliveFailures, usdPppSessionGrant=usdPppSessionGrant, usdPppMlPppNetworkConfigEntry=usdPppMlPppNetworkConfigEntry, usdPppSummaryPppOsiNcpClosed=usdPppSummaryPppOsiNcpClosed, usdPppLinkStatusLocalAuthentication=usdPppLinkStatusLocalAuthentication, usdPppLinkConfigChapMaxChallengeLength=usdPppLinkConfigChapMaxChallengeLength, usdPppLinkStatusRemoteMagicNumber=usdPppLinkStatusRemoteMagicNumber, usdPppSummaryPppInterfaceCount=usdPppSummaryPppInterfaceCount, usdPppLinkStatusTerminateReason=usdPppLinkStatusTerminateReason, usdPppOsiServiceStatus=usdPppOsiServiceStatus, usdPppSummaryPppLinkIfLastChangeTime=usdPppSummaryPppLinkIfLastChangeTime, usdPppLcpGroup2=usdPppLcpGroup2, usdPppSessionSessionTimeout=usdPppSessionSessionTimeout, usdPppSessionRemoteSecondaryDnsAddress=usdPppSessionRemoteSecondaryDnsAddress, usdPppMlPppBundleTable=usdPppMlPppBundleTable, usdPppIpRemotePrimaryWinsAddress=usdPppIpRemotePrimaryWinsAddress, usdPppSummaryPppIfOperUp=usdPppSummaryPppIfOperUp, usdPppConformance=usdPppConformance, usdPppMlPppBindRowStatus=usdPppMlPppBindRowStatus, usdPppOsiConfigTable=usdPppOsiConfigTable, usdPppMlPppBundleName=usdPppMlPppBundleName, usdPppObjects=usdPppObjects, usdPppLinkStatusTable=usdPppLinkStatusTable, usdPppSummaryPppIpNcpClosed=usdPppSummaryPppIpNcpClosed, usdPppMlPppNetworkConfigLowerIfIndex=usdPppMlPppNetworkConfigLowerIfIndex, usdPppMlPppLinkBindEntry=usdPppMlPppLinkBindEntry, usdPppIp=usdPppIp, usdPppSummaryPppNetworkIpNCPs=usdPppSummaryPppNetworkIpNCPs, usdPppMlPppLinkConfigRowStatus=usdPppMlPppLinkConfigRowStatus, usdPppLinkStatusLocalMagicNumber=usdPppLinkStatusLocalMagicNumber, usdPppCompliance=usdPppCompliance, usdPppLinkStatusOutKeepaliveReplies=usdPppLinkStatusOutKeepaliveReplies, usdPppSummaryPppLinkIfOperUp=usdPppSummaryPppLinkIfOperUp, usdPppOsiConfigEntry=usdPppOsiConfigEntry, usdPppSessionRemotePrimaryWinsAddress=usdPppSessionRemotePrimaryWinsAddress, usdPppOsiGroup=usdPppOsiGroup, usdPppSessionTerminateReason=usdPppSessionTerminateReason, usdPppLinkConfigTable=usdPppLinkConfigTable, usdPppSessionTable=usdPppSessionTable, usdPppSummaryPppLinkIfNotPresent=usdPppSummaryPppLinkIfNotPresent, usdPppLinkConfigAuthentication=usdPppLinkConfigAuthentication, usdPppMlPppLinkConfigIfIndex=usdPppMlPppLinkConfigIfIndex, usdPppSummaryPppNetworkIfOperUp=usdPppSummaryPppNetworkIfOperUp, usdPppLinkStatusOutKeepaliveRequests=usdPppLinkStatusOutKeepaliveRequests, usdPppSummaryBasicGroup=usdPppSummaryBasicGroup, usdPppIpTerminateNegFailOption=usdPppIpTerminateNegFailOption, usdPppIpConfigPeerWinsPriority=usdPppIpConfigPeerWinsPriority, usdPppNextIfIndex=usdPppNextIfIndex, usdPppSummaryNetworkGroup=usdPppSummaryNetworkGroup, usdPppIpLocalIpAddress=usdPppIpLocalIpAddress, usdPppLinkConfigAuthenticatorVirtualRouter=usdPppLinkConfigAuthenticatorVirtualRouter, usdPppMIB=usdPppMIB, usdPppIpConfigTable=usdPppIpConfigTable, usdPppSessionRemotePrimaryDnsAddress=usdPppSessionRemotePrimaryDnsAddress, usdPppMlPppNetworkConfigTable=usdPppMlPppNetworkConfigTable, usdPppSummaryPppOsiNcpOpened=usdPppSummaryPppOsiNcpOpened, usdPppSession=usdPppSession, usdPppMlPppLinkConfigAuthentication=usdPppMlPppLinkConfigAuthentication, usdPppSummaryPppNetworkIpNcpClosed=usdPppSummaryPppNetworkIpNcpClosed, usdPppCompliance3=usdPppCompliance3, usdPppCompliance5=usdPppCompliance5, usdPppSessionInOctets=usdPppSessionInOctets, usdPppSummaryPppIfOperDormant=usdPppSummaryPppIfOperDormant, usdPppSessionStartTime=usdPppSessionStartTime, usdPppMlPppLinkConfigKeepalive=usdPppMlPppLinkConfigKeepalive, usdPppMlPppNextNetworkIfIndex=usdPppMlPppNextNetworkIfIndex, usdPppMlPppNetworkRowStatus=usdPppMlPppNetworkRowStatus, usdPppLinkStatusEntry=usdPppLinkStatusEntry, usdPppSummaryPppIfNotPresent=usdPppSummaryPppIfNotPresent, usdPppOsiGroup2=usdPppOsiGroup2, usdPppOsiTable=usdPppOsiTable, usdPppMlPppBundleNetworkIfIndex=usdPppMlPppBundleNetworkIfIndex, usdPppSummaryPppIpNcpOpened=usdPppSummaryPppIpNcpOpened, usdPppSummaryPppOsiNCPs=usdPppSummaryPppOsiNCPs, usdPppGroups=usdPppGroups, usdPppSummaryPppIpNCPs=usdPppSummaryPppIpNCPs, usdPppOsiRemoteAlignNpdu=usdPppOsiRemoteAlignNpdu, usdPppSummaryPppNetworkOsiNCPs=usdPppSummaryPppNetworkOsiNCPs, usdPppIpGroup=usdPppIpGroup, usdPppIpRemoteIpAddress=usdPppIpRemoteIpAddress, usdPppMlPppNetworkBundleName=usdPppMlPppNetworkBundleName, UsdPppMlPppBundleName=UsdPppMlPppBundleName, usdPppOsi=usdPppOsi, PYSNMP_MODULE_ID=usdPppMIB, usdPppSummaryPppNetworkOsiNcpOpened=usdPppSummaryPppNetworkOsiNcpOpened, usdPppMlPppBindNetworkIfIndex=usdPppMlPppBindNetworkIfIndex, usdPppSummaryPppIfOperDown=usdPppSummaryPppIfOperDown, usdPppMlPppNetworkConfigIfIndex=usdPppMlPppNetworkConfigIfIndex, usdPppIpConfigEntry=usdPppIpConfigEntry, usdPppMlPppLinkConfigTable=usdPppMlPppLinkConfigTable, usdPppLcpGroup3=usdPppLcpGroup3, usdPppMlPppNextLinkIfIndex=usdPppMlPppNextLinkIfIndex, usdPppMlPppBundleRowStatus=usdPppMlPppBundleRowStatus, usdPppMlPppLinkConfigEntry=usdPppMlPppLinkConfigEntry, usdPppLinkConfigEntry=usdPppLinkConfigEntry, usdPppSummaryLinkGroup=usdPppSummaryLinkGroup, usdPppSummaryPppNetworkIpNcpOpened=usdPppSummaryPppNetworkIpNcpOpened, usdPppSummaryPppIfLowerLayerDown=usdPppSummaryPppIfLowerLayerDown, usdPppSummaryPppLinkIfOperDormant=usdPppSummaryPppLinkIfOperDormant, usdPppLinkStatusInKeepaliveRequests=usdPppLinkStatusInKeepaliveRequests, usdPppOsiOperStatus=usdPppOsiOperStatus, usdPppSummaryPppNetworkIfAdminUp=usdPppSummaryPppNetworkIfAdminUp, usdPppIpServiceStatus=usdPppIpServiceStatus, usdPppSummaryPppLinkInterfaceCount=usdPppSummaryPppLinkInterfaceCount, usdPppSessionGroup=usdPppSessionGroup, usdPppLinkConfigRowStatus=usdPppLinkConfigRowStatus, usdPppSec=usdPppSec, usdPppLinkConfigKeepalive=usdPppLinkConfigKeepalive, usdPppOsiTerminateNegFailOption=usdPppOsiTerminateNegFailOption, usdPppOsiEntry=usdPppOsiEntry, usdPppMlPppBundleEntry=usdPppMlPppBundleEntry, usdPppSessionEntry=usdPppSessionEntry, usdPppOsiLocalAlignNpdu=usdPppOsiLocalAlignNpdu, usdPppLinkConfigIfIndex=usdPppLinkConfigIfIndex, usdPppSummaryPppLinkIfLowerLayerDown=usdPppSummaryPppLinkIfLowerLayerDown, usdPppIpGroup3=usdPppIpGroup3, usdPppMlPppGroup2=usdPppMlPppGroup2, usdPppSessionRemoteSecondaryWinsAddress=usdPppSessionRemoteSecondaryWinsAddress, usdPppMlPppGroup=usdPppMlPppGroup, usdPppLinkStatusTerminateNegFailOption=usdPppLinkStatusTerminateNegFailOption, usdPppIpTable=usdPppIpTable, usdPppSummaryPppLinkIfOperDown=usdPppSummaryPppLinkIfOperDown, usdPppLinkConfigStandardIfIndex=usdPppLinkConfigStandardIfIndex, usdPppSummaryPppLinkIfAdminUp=usdPppSummaryPppLinkIfAdminUp, usdPppCompliances=usdPppCompliances, usdPppSessionInactivityTimeout=usdPppSessionInactivityTimeout, usdPppSessionRemoteIpAddress=usdPppSessionRemoteIpAddress, usdPppCompliance2=usdPppCompliance2, usdPppOsiConfigAdminStatus=usdPppOsiConfigAdminStatus, usdPppSummaryPppNetworkInterfaceCount=usdPppSummaryPppNetworkInterfaceCount, usdPppMlPppLinkConfigLowerIfIndex=usdPppMlPppLinkConfigLowerIfIndex, usdPppIpConfigIpcpNetmask=usdPppIpConfigIpcpNetmask, usdPppLinkConfigMaxAuthenRetries=usdPppLinkConfigMaxAuthenRetries, usdPppSummaryPppIfAdminDown=usdPppSummaryPppIfAdminDown, UsdPppAuthentication=UsdPppAuthentication, usdPppIpRemoteSecondaryDnsAddress=usdPppIpRemoteSecondaryDnsAddress, usdPppOsiTerminateReason=usdPppOsiTerminateReason, usdPppCompliance4=usdPppCompliance4, usdPppLcp=usdPppLcp, usdPppLcpGroup=usdPppLcpGroup, usdPppLinkConfigPassiveMode=usdPppLinkConfigPassiveMode, usdPppCompliance6=usdPppCompliance6, usdPppSummaryPppNetworkIfNotPresent=usdPppSummaryPppNetworkIfNotPresent, usdPppLcpGroup4=usdPppLcpGroup4, usdPppLinkConfigChapMinChallengeLength=usdPppLinkConfigChapMinChallengeLength, usdPppSummary=usdPppSummary, usdPppSummaryPppIfLastChangeTime=usdPppSummaryPppIfLastChangeTime, usdPppIpEntry=usdPppIpEntry, usdPppSessionInPackets=usdPppSessionInPackets, usdPppSummaryGroup=usdPppSummaryGroup, usdPppSummaryPppIfAdminUp=usdPppSummaryPppIfAdminUp, usdPppLinkStatusInKeepaliveReplies=usdPppLinkStatusInKeepaliveReplies, usdPppMlPppLinkConfigMaxAuthenRetries=usdPppMlPppLinkConfigMaxAuthenRetries, usdPppSessionAccountingInterval=usdPppSessionAccountingInterval)
