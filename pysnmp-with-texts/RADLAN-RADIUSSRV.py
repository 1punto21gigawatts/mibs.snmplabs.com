#
# PySNMP MIB module RADLAN-RADIUSSRV (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-RADIUSSRV
# Produced by pysmi-0.3.4 at Wed May  1 14:48:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InetAddressIPv6, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressType", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
rnd, rlAAAEap, rlRadius = mibBuilder.importSymbols("RADLAN-MIB", "rnd", "rlAAAEap", "rlRadius")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, Integer32, TimeTicks, iso, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, IpAddress, MibIdentifier, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Integer32", "TimeTicks", "iso", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "IpAddress", "MibIdentifier", "Counter64", "Counter32")
TimeStamp, RowStatus, DateAndTime, TruthValue, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "DateAndTime", "TruthValue", "TextualConvention", "DisplayString", "MacAddress")
rlRadiusServ = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 226))
rlRadiusServ.setRevisions(('2015-06-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlRadiusServ.setRevisionsDescriptions(('Added this MODULE-IDENTITY clause.',))
if mibBuilder.loadTexts: rlRadiusServ.setLastUpdated('201506210000Z')
if mibBuilder.loadTexts: rlRadiusServ.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlRadiusServ.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlRadiusServ.setDescription('The private MIB module definition for Authentication, Authorization and Accounting in Radlan devices.')
rlRadiusServEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServEnable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServEnable.setDescription('Specifies whether Radius Server enabled on the switch. ')
rlRadiusServAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServAcctPort.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctPort.setDescription('To define the accounting UDP port used for accounting requests.')
rlRadiusServAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServAuthPort.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAuthPort.setDescription('To define the authentication UDP port used for authentication requests.')
rlRadiusServDefaultKey = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServDefaultKey.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServDefaultKey.setDescription('Default Secret key to be shared with this all Radius Clients server.')
rlRadiusServDefaultKeyMD5 = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServDefaultKeyMD5.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServDefaultKeyMD5.setDescription('Default Secret key MD5.')
rlRadiusServTrapAcct = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServTrapAcct.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServTrapAcct.setDescription('To enable sending accounting traps.')
rlRadiusServTrapAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServTrapAuthFailure.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServTrapAuthFailure.setDescription('To enable sending traps when an authentication failed and Access-Reject is sent.')
rlRadiusServTrapAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServTrapAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServTrapAuthSuccess.setDescription('To enable sending traps when a user is successfully authorized.')
rlRadiusServGroupTable = MibTable((1, 3, 6, 1, 4, 1, 89, 226, 9), )
if mibBuilder.loadTexts: rlRadiusServGroupTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupTable.setDescription('The (conceptual) table listing the RADIUS server group entry.')
rlRadiusServGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 226, 9, 1), ).setIndexNames((0, "RADLAN-RADIUSSRV", "rlRadiusServGroupName"))
if mibBuilder.loadTexts: rlRadiusServGroupEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupEntry.setDescription('The (conceptual) table listing the RADIUS server group entry.')
rlRadiusServGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupName.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupName.setDescription('To define Radius Server Group Name')
rlRadiusServGroupVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupVLAN.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupVLAN.setDescription('To define Radius Assigned VLAN')
rlRadiusServGroupVLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupVLANName.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupVLANName.setDescription('To define Radius Assigned VLAN name')
rlRadiusServGroupACL1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupACL1.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupACL1.setDescription('To define first Radius Assigned ACL')
rlRadiusServGroupACL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupACL2.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupACL2.setDescription('To define second Radius Assigned ACL')
rlRadiusServGroupPrvLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupPrvLevel.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupPrvLevel.setDescription('To define the user privilege level')
rlRadiusServGroupTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupTimeRangeName.setDescription('To define the time user can connect')
rlRadiusServGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 9, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServGroupStatus.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServGroupStatus.setDescription('')
rlRadiusServUserTable = MibTable((1, 3, 6, 1, 4, 1, 89, 226, 10), )
if mibBuilder.loadTexts: rlRadiusServUserTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServUserTable.setDescription('The (conceptual) table listing the RADIUS server user entry.')
rlRadiusServUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 226, 10, 1), ).setIndexNames((0, "RADLAN-RADIUSSRV", "rlRadiusServUserName"))
if mibBuilder.loadTexts: rlRadiusServUserEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServUserEntry.setDescription('The (conceptual) table listing the RADIUS server User entry.')
rlRadiusServUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServUserName.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServUserName.setDescription('To define Radius Server User Name')
rlRadiusServUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServUserPassword.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServUserPassword.setDescription('Plain text Radius Server User Password')
rlRadiusServUserPasswordMD5 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServUserPasswordMD5.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServUserPasswordMD5.setDescription('The MD5 of the rlRadiusServUserPassword')
rlRadiusServUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServUserGroupName.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServUserGroupName.setDescription('Assigned Radius Server Group Name to specific user')
rlRadiusServUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 10, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServUserStatus.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServUserStatus.setDescription('')
rlRadiusServClientInetTable = MibTable((1, 3, 6, 1, 4, 1, 89, 226, 11), )
if mibBuilder.loadTexts: rlRadiusServClientInetTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClientInetTable.setDescription('The (conceptual) table listing the RADIUS server group entry.')
rlRadiusServClientInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 226, 11, 1), ).setIndexNames((0, "RADLAN-RADIUSSRV", "rlRadiusServClientInetAddressType"), (0, "RADLAN-RADIUSSRV", "rlRadiusServClientInetAddress"))
if mibBuilder.loadTexts: rlRadiusServClientInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClientInetEntry.setDescription('The (conceptual) table listing the RADIUS Client entry.')
rlRadiusServClientInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 11, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClientInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClientInetAddressType.setDescription('The Inet address type of RADIUS client reffered to in this table entry .IPv6Z type is not supported.')
rlRadiusServClientInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 11, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClientInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClientInetAddress.setDescription('The Inet address of the RADIUS client referred to in this table entry.')
rlRadiusServClientInetKey = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClientInetKey.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClientInetKey.setDescription('Secret key to be shared with this RADIUS client.')
rlRadiusServClientInetKeyMD5 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServClientInetKeyMD5.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClientInetKeyMD5.setDescription('The MD5 of the rlRadiusServClientInetKey')
rlRadiusServClientInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 11, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClientInetStatus.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClientInetStatus.setDescription('')
rlRadiusServClearAccounting = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClearAccounting.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearAccounting.setDescription('etting this object to TRUE clears the Radius Accounting cache.')
rlRadiusServClearRejectedUsers = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClearRejectedUsers.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearRejectedUsers.setDescription('etting this object to TRUE clears the Radius Rejected Users cache.')
rlRadiusServClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClearStatistics.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearStatistics.setDescription('Setting this object to TRUE clears the Radius server counters.')
rlRadiusServClearUsersOfGivenGroup = MibScalar((1, 3, 6, 1, 4, 1, 89, 226, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClearUsersOfGivenGroup.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearUsersOfGivenGroup.setDescription('Clears users of specified Group. 0 string signes to clear all users.')
rlRadiusServClearClientStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 226, 16), )
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsTable.setDescription('Action MIB to clear radius server statistics per client.')
rlRadiusServClearClientStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 226, 16, 1), ).setIndexNames((0, "RADLAN-RADIUSSRV", "rlRadiusServClearClientStatisticsIndex"))
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsEntry.setDescription('The row definition for this table.')
rlRadiusServClearClientStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsIndex.setDescription('Index in the table. Already 1.')
rlRadiusServClearClientStatisticsInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 16, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsInetAddressType.setDescription('Clear statistics Inet address type parameter.')
rlRadiusServClearClientStatisticsInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 16, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServClearClientStatisticsInetAddress.setDescription('Clear statistics Inet address parameter.')
class RlRadiusServUserType(TextualConvention, Integer32):
    description = 'Radius Server user service type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("x", 1), ("login", 2))

class RlRadiusServRejectedEventType(TextualConvention, Integer32):
    description = 'Rejected Users Event Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))
    namedValues = NamedValues(("invalid", 0), ("reboot", 2), ("dateTimeChanged", 3), ("rejected", 4))

class RlRadiusServRejectedReasonType(TextualConvention, Integer32):
    description = 'Authentication service rejects reason'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noError", 0), ("unknownUser", 1), ("illegalPassword", 2), ("notAllowedTime", 3))

rlRadiusServRejectedTable = MibTable((1, 3, 6, 1, 4, 1, 89, 226, 17), )
if mibBuilder.loadTexts: rlRadiusServRejectedTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedTable.setDescription('The (conceptual) table listing the RADIUS server rejected user entry.')
rlRadiusServRejectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 226, 17, 1), ).setIndexNames((0, "RADLAN-RADIUSSRV", "rlRadiusServRejectedIndex"))
if mibBuilder.loadTexts: rlRadiusServRejectedEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedEntry.setDescription('The (conceptual) table listing the RADIUS Rejected user entry.')
rlRadiusServRejectedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlRadiusServRejectedIndex.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedIndex.setDescription('Rejected User Index')
rlRadiusServRejectedUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedUserName.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedUserName.setDescription('Rejected User Name. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServRejectedUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 3), RlRadiusServUserType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedUserType.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedUserType.setDescription('Contains type of service.')
rlRadiusServRejectedEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 4), RlRadiusServRejectedEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedEvent.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedEvent.setDescription('Contains type of event.')
rlRadiusServRejectedDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedDateTime.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedDateTime.setDescription('Date of rejected event.')
rlRadiusServRejectedUpdatedDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedUpdatedDateTime.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedUpdatedDateTime.setDescription('In case of dateTimeChanged event contains New assigned Date and Time. Otherwise contains 0.')
rlRadiusServRejectedNASInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedNASInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedNASInetAddressType.setDescription('Rejected user NAS Inet address type. In case of dateTimeChange and reboot event contains 0.')
rlRadiusServRejectedNASInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedNASInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedNASInetAddress.setDescription('Rejected user NAS Inet address. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServRejectedNASPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedNASPort.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedNASPort.setDescription('Rejected user NAS port. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServRejectedUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedUserAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedUserAddress.setDescription('Rejected user Inet address type. In case of 1x user contains mac address string, in case of login contains inet address.')
rlRadiusServRejectedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 17, 1, 11), RlRadiusServRejectedReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServRejectedReason.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServRejectedReason.setDescription('Rejected user reason.')
class RlRadiusServAcctLogUserAuthType(TextualConvention, Integer32):
    description = 'User Authentication Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("radius", 1), ("local", 2), ("remote", 3))

class RlRadiusServAcctLogEventType(TextualConvention, Integer32):
    description = 'Accounting Event Type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5))
    namedValues = NamedValues(("invalid", 0), ("reboot", 2), ("dateTimeChanged", 3), ("start", 4), ("stop", 5))

class RlRadiusServAcctLogTerminationReasonType(TextualConvention, Integer32):
    description = 'Accounting User Termination reason'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("noError", 0), ("userRequest", 1), ("lostCarrier", 2), ("lostService", 3), ("idleTimeout", 4), ("sessionTimeout", 5), ("adminReset", 6), ("adminReboot", 7), ("portError", 8), ("nasError", 9), ("nasRequest", 10), ("nasReboot", 11), ("portUnneeded", 12), ("portPreempted", 13), ("portSuspended", 14), ("serviceUnavailable", 15), ("callback", 16), ("userError", 17), ("hostRequest", 18))

rlRadiusServAcctLogTable = MibTable((1, 3, 6, 1, 4, 1, 89, 226, 18), )
if mibBuilder.loadTexts: rlRadiusServAcctLogTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogTable.setDescription('The (conceptual) table listing the RADIUS server accounting log entry.')
rlRadiusServAcctLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 226, 18, 1), ).setIndexNames((0, "RADLAN-RADIUSSRV", "rlRadiusServAcctLogIndex"))
if mibBuilder.loadTexts: rlRadiusServAcctLogEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogEntry.setDescription('The (conceptual) table listing the RADIUS server accounting log entry.')
rlRadiusServAcctLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rlRadiusServAcctLogIndex.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogIndex.setDescription('Accounting Log Index')
rlRadiusServAcctLogUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogUserName.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogUserName.setDescription('Accounting Log User Name. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServAcctLogUserAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 3), RlRadiusServAcctLogUserAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogUserAuth.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogUserAuth.setDescription('Contains type of authenticator.')
rlRadiusServAcctLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 4), RlRadiusServAcctLogEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogEvent.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogEvent.setDescription('Contains type of event.')
rlRadiusServAcctLogDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogDateTime.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogDateTime.setDescription('Date of accounting event.')
rlRadiusServAcctLogUpdatedDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogUpdatedDateTime.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogUpdatedDateTime.setDescription('In case of dateTimeChanged event contains New assigned Date and Time. Otherwise contains 0.')
rlRadiusServAcctLogSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogSessionDuration.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogSessionDuration.setDescription('Contains duration of user session in seconds. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServAcctLogNASInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogNASInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogNASInetAddressType.setDescription('Accounting log user NAS Inet address type. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServAcctLogNASInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogNASInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogNASInetAddress.setDescription('Accounting log user NAS Inet address. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServAcctLogNASPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogNASPort.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogNASPort.setDescription('Accounting log user NAS port. In case of dateTimeChanged and reboot event contains 0.')
rlRadiusServAcctLogUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogUserAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogUserAddress.setDescription('Accounting log user address. In case of 1x user contains mac address string, in case of login contains inet address.')
rlRadiusServAcctLogTerminationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 226, 18, 1, 12), RlRadiusServAcctLogTerminationReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusServAcctLogTerminationReason.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServAcctLogTerminationReason.setDescription('User Session termination reason.')
mibBuilder.exportSymbols("RADLAN-RADIUSSRV", rlRadiusServAcctLogTable=rlRadiusServAcctLogTable, RlRadiusServUserType=RlRadiusServUserType, rlRadiusServGroupACL2=rlRadiusServGroupACL2, rlRadiusServDefaultKeyMD5=rlRadiusServDefaultKeyMD5, rlRadiusServGroupStatus=rlRadiusServGroupStatus, rlRadiusServRejectedNASInetAddressType=rlRadiusServRejectedNASInetAddressType, rlRadiusServAcctLogDateTime=rlRadiusServAcctLogDateTime, rlRadiusServGroupName=rlRadiusServGroupName, rlRadiusServClientInetTable=rlRadiusServClientInetTable, rlRadiusServGroupVLAN=rlRadiusServGroupVLAN, rlRadiusServRejectedUserAddress=rlRadiusServRejectedUserAddress, rlRadiusServAcctLogUserName=rlRadiusServAcctLogUserName, rlRadiusServAcctLogEntry=rlRadiusServAcctLogEntry, rlRadiusServTrapAuthSuccess=rlRadiusServTrapAuthSuccess, rlRadiusServClearClientStatisticsEntry=rlRadiusServClearClientStatisticsEntry, rlRadiusServClearClientStatisticsInetAddress=rlRadiusServClearClientStatisticsInetAddress, rlRadiusServAcctLogUserAddress=rlRadiusServAcctLogUserAddress, rlRadiusServAcctLogEvent=rlRadiusServAcctLogEvent, RlRadiusServRejectedEventType=RlRadiusServRejectedEventType, rlRadiusServUserPassword=rlRadiusServUserPassword, rlRadiusServGroupTimeRangeName=rlRadiusServGroupTimeRangeName, rlRadiusServGroupACL1=rlRadiusServGroupACL1, rlRadiusServUserEntry=rlRadiusServUserEntry, rlRadiusServDefaultKey=rlRadiusServDefaultKey, rlRadiusServClientInetKey=rlRadiusServClientInetKey, rlRadiusServRejectedUserName=rlRadiusServRejectedUserName, rlRadiusServUserName=rlRadiusServUserName, rlRadiusServUserStatus=rlRadiusServUserStatus, rlRadiusServGroupVLANName=rlRadiusServGroupVLANName, rlRadiusServEnable=rlRadiusServEnable, rlRadiusServAcctLogIndex=rlRadiusServAcctLogIndex, rlRadiusServGroupEntry=rlRadiusServGroupEntry, rlRadiusServRejectedDateTime=rlRadiusServRejectedDateTime, rlRadiusServAcctLogUserAuth=rlRadiusServAcctLogUserAuth, rlRadiusServClearUsersOfGivenGroup=rlRadiusServClearUsersOfGivenGroup, rlRadiusServ=rlRadiusServ, rlRadiusServRejectedReason=rlRadiusServRejectedReason, rlRadiusServUserPasswordMD5=rlRadiusServUserPasswordMD5, rlRadiusServClientInetEntry=rlRadiusServClientInetEntry, rlRadiusServRejectedNASInetAddress=rlRadiusServRejectedNASInetAddress, rlRadiusServAcctLogNASInetAddress=rlRadiusServAcctLogNASInetAddress, rlRadiusServAuthPort=rlRadiusServAuthPort, rlRadiusServAcctLogTerminationReason=rlRadiusServAcctLogTerminationReason, rlRadiusServAcctPort=rlRadiusServAcctPort, rlRadiusServClearClientStatisticsIndex=rlRadiusServClearClientStatisticsIndex, rlRadiusServGroupPrvLevel=rlRadiusServGroupPrvLevel, rlRadiusServRejectedEvent=rlRadiusServRejectedEvent, rlRadiusServTrapAuthFailure=rlRadiusServTrapAuthFailure, rlRadiusServClearRejectedUsers=rlRadiusServClearRejectedUsers, rlRadiusServClearStatistics=rlRadiusServClearStatistics, rlRadiusServRejectedUpdatedDateTime=rlRadiusServRejectedUpdatedDateTime, RlRadiusServAcctLogUserAuthType=RlRadiusServAcctLogUserAuthType, RlRadiusServRejectedReasonType=RlRadiusServRejectedReasonType, rlRadiusServAcctLogNASInetAddressType=rlRadiusServAcctLogNASInetAddressType, RlRadiusServAcctLogEventType=RlRadiusServAcctLogEventType, rlRadiusServAcctLogNASPort=rlRadiusServAcctLogNASPort, rlRadiusServClientInetAddressType=rlRadiusServClientInetAddressType, rlRadiusServClearClientStatisticsTable=rlRadiusServClearClientStatisticsTable, rlRadiusServRejectedTable=rlRadiusServRejectedTable, rlRadiusServAcctLogUpdatedDateTime=rlRadiusServAcctLogUpdatedDateTime, PYSNMP_MODULE_ID=rlRadiusServ, rlRadiusServClientInetAddress=rlRadiusServClientInetAddress, rlRadiusServTrapAcct=rlRadiusServTrapAcct, rlRadiusServAcctLogSessionDuration=rlRadiusServAcctLogSessionDuration, RlRadiusServAcctLogTerminationReasonType=RlRadiusServAcctLogTerminationReasonType, rlRadiusServRejectedIndex=rlRadiusServRejectedIndex, rlRadiusServGroupTable=rlRadiusServGroupTable, rlRadiusServUserTable=rlRadiusServUserTable, rlRadiusServUserGroupName=rlRadiusServUserGroupName, rlRadiusServRejectedNASPort=rlRadiusServRejectedNASPort, rlRadiusServClientInetStatus=rlRadiusServClientInetStatus, rlRadiusServClearAccounting=rlRadiusServClearAccounting, rlRadiusServRejectedUserType=rlRadiusServRejectedUserType, rlRadiusServRejectedEntry=rlRadiusServRejectedEntry, rlRadiusServClientInetKeyMD5=rlRadiusServClientInetKeyMD5, rlRadiusServClearClientStatisticsInetAddressType=rlRadiusServClearClientStatisticsInetAddressType)
