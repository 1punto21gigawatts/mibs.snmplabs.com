#
# PySNMP MIB module Nortel-Magellan-Passport-VoiceNetworkingMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-VoiceNetworkingMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
DisplayString, RowPointer, Unsigned32, RowStatus, Integer32, PassportCounter64, Gauge32, StorageType, Counter32, InterfaceIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "RowPointer", "Unsigned32", "RowStatus", "Integer32", "PassportCounter64", "Gauge32", "StorageType", "Counter32", "InterfaceIndex")
Hex, DigitString, EnterpriseDateAndTime, NonReplicated, Link, AsciiString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Hex", "DigitString", "EnterpriseDateAndTime", "NonReplicated", "Link", "AsciiString")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ObjectIdentity, Unsigned32, Bits, Counter64, iso, MibIdentifier, Integer32, Gauge32, Counter32, IpAddress, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Unsigned32", "Bits", "Counter64", "iso", "MibIdentifier", "Integer32", "Gauge32", "Counter32", "IpAddress", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
voiceNetworkingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109))
sigChan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115))
sigChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 1), )
if mibBuilder.loadTexts: sigChanRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanRowStatusTable.setDescription('This entry controls the addition and deletion of sigChan components.')
sigChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"))
if mibBuilder.loadTexts: sigChanRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanRowStatusEntry.setDescription('A single entry in the table represents a single sigChan component.')
sigChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanRowStatus.setDescription('This variable is used as the basis for SNMP naming of sigChan components. These components can be added and deleted.')
sigChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
sigChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanStorageType.setDescription('This variable represents the storage type value for the sigChan tables.')
sigChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: sigChanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanIndex.setDescription('This variable represents the index for the sigChan tables.')
sigChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 100), )
if mibBuilder.loadTexts: sigChanCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
sigChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"))
if mibBuilder.loadTexts: sigChanCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanCidDataEntry.setDescription('An entry in the sigChanCidDataTable.')
sigChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
sigChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 101), )
if mibBuilder.loadTexts: sigChanIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
sigChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"))
if mibBuilder.loadTexts: sigChanIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanIfEntryEntry.setDescription('An entry in the sigChanIfEntryTable.')
sigChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 101, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
sigChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 101, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
sigChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 102), )
if mibBuilder.loadTexts: sigChanOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
sigChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 102, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"))
if mibBuilder.loadTexts: sigChanOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanOperStatusEntry.setDescription('An entry in the sigChanOperStatusTable.')
sigChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
sigChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 103), )
if mibBuilder.loadTexts: sigChanStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
sigChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"))
if mibBuilder.loadTexts: sigChanStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanStateEntry.setDescription('An entry in the sigChanStateTable.')
sigChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
sigChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
sigChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
sigChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 104), )
if mibBuilder.loadTexts: sigChanProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanProvTable.setDescription('This group represents the provisionable attributes of a SigChan.')
sigChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"))
if mibBuilder.loadTexts: sigChanProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanProvEntry.setDescription('An entry in the sigChanProvTable.')
sigChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 104, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanCommentText.setDescription('Use of this attribute is at the discretion of the system administrator. Typically, this attribute specifies the name of the customer that is using this SigChan.')
sigChanOctothorpeEod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanOctothorpeEod.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanOctothorpeEod.setDescription('This attribute specifies whether the octothorpe should be used as an end of dialling indication. When this character is received, only the digits that have been received to that point will be used for address resolution. All subsequent digits will be forwarded to the far-end, but they will not be used. The octothorpe will not be sent to the far-end.')
sigChanForceNpiTon = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanForceNpiTon.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanForceNpiTon.setDescription('This attribute, together with the defaultNpiTon attribute, controls Numbering Plan Identifier (NPI) and Type Of Number (TON) values to be used by the SigChan component for egress calls (if applicable). If set to yes, NPI and TON values defined by the defaultNpiTon attribute unconditionally overwrite values received in the call setup message from the subnet.')
sigChanDefaultNpiTon = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 104, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("international", 1), ("national", 2), ("subscriber", 3), ("p0", 4), ("p1", 5), ("p2", 6), ("p3", 7), ("p4", 8), ("p5", 9), ("p6", 10), ("p7", 11), ("casUnknown", 12))).clone('casUnknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanDefaultNpiTon.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanDefaultNpiTon.setDescription("This attribute, together with the forceNpiTon attribute, controls Numbering Plan Identifier (NPI) and Type Of Number (TON) values to be used by the SigChan component for egress calls (if applicable). The combination of NPI and TON values defined by the defaultNpiTon attribute is used for an egress call whenever: - the call setup message received from subnet indicates that NPI or TON information is not supplied or doesn't make sense, or - attribute forceNpiTon is set to yes Mapping between values of the defaultNpiTon attribute and associated combinations of NPI and TON values follows: casUnknown: NPI=unknown (0) TON=unknown (0) unknown: NPI=E.164 (1) TON=unknown (0) international: NPI=E.164 (1) TON=international (1) national: NPI=E.164 (1) TON=national (2) subscriber: NPI=E.164 (1) TON=subscriber (4) p0: NPI=private(9) TON=0 p1: NPI=private(9) TON=1 p2: NPI=private(9) TON=2 p3: NPI=private(9) TON=3 p4: NPI=private(9) TON=4 p5: NPI=private(9) TON=5 p6: NPI=private(9) TON=6 p7: NPI=private(9) TON=7")
sigChanSubroutesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 307), )
if mibBuilder.loadTexts: sigChanSubroutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanSubroutesTable.setDescription('This attribute identifies all of the VoiceSubroutes which are associated with this signalling channel.')
sigChanSubroutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 307, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanSubroutesValue"))
if mibBuilder.loadTexts: sigChanSubroutesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanSubroutesEntry.setDescription('An entry in the sigChanSubroutesTable.')
sigChanSubroutesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 307, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanSubroutesValue.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanSubroutesValue.setDescription('This variable represents both the value and the index for the sigChanSubroutesTable.')
sigChanSubroutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 307, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sigChanSubroutesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanSubroutesRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the sigChanSubroutesTable.')
sigChanDegradedSubroutesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 308), )
if mibBuilder.loadTexts: sigChanDegradedSubroutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanDegradedSubroutesTable.setDescription('This attribute lists all of the VoiceSubroute components that do not have all of their SwitchedVoiceService subcomponents available for use.')
sigChanDegradedSubroutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 308, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanDegradedSubroutesValue"))
if mibBuilder.loadTexts: sigChanDegradedSubroutesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanDegradedSubroutesEntry.setDescription('An entry in the sigChanDegradedSubroutesTable.')
sigChanDegradedSubroutesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 308, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanDegradedSubroutesValue.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanDegradedSubroutesValue.setDescription('This variable represents both the value and the index for the sigChanDegradedSubroutesTable.')
sigChanBch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7))
sigChanBchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 1), )
if mibBuilder.loadTexts: sigChanBchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of sigChanBch components.')
sigChanBchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanBchIndex"))
if mibBuilder.loadTexts: sigChanBchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchRowStatusEntry.setDescription('A single entry in the table represents a single sigChanBch component.')
sigChanBchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanBchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchRowStatus.setDescription('This variable is used as the basis for SNMP naming of sigChanBch components. These components cannot be added nor deleted.')
sigChanBchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanBchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
sigChanBchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanBchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchStorageType.setDescription('This variable represents the storage type value for the sigChanBch tables.')
sigChanBchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 331)))
if mibBuilder.loadTexts: sigChanBchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchIndex.setDescription('This variable represents the index for the sigChanBch tables.')
sigChanBchOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 4), )
if mibBuilder.loadTexts: sigChanBchOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains various operational attributes of a B-channel serviced by a Signalling Channel.')
sigChanBchOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 4, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanBchIndex"))
if mibBuilder.loadTexts: sigChanBchOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchOperEntry.setDescription('An entry in the sigChanBchOperTable.')
sigChanBchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("maintB", 1), ("idle", 2), ("busy", 3), ("ingress", 4), ("egress", 5), ("idleMaintenance", 6), ("ingressMaintenance", 7), ("egressMaintenance", 8), ("outOfService", 9))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanBchStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchStatus.setDescription('This attribute indicates what is current internal B-channel state. The attribute may have the following values for any supported access signalling protocol on Passport: unknown, the B-channel has not registered yet for SigChan services maintB, the B-channel is undergoing a maintenance action idle, the B-channel is available for ingress/egress calls busy, the B-channel is currently being used for an ingress or egress call ingress, the B-channel is currently being used for an ingress call (from the external network to the subnet) egress, the B-channel is currently being used for an egress call (from the subnet to the external network) In addition, CCS protocols supporting SERVICE messaging may also use the following values: idleMaintenance, the B-channel received a SERVICE message placing the channel in maintenance, and no calls are active on the channel ingressMaintenance, the B-channel received a SERVICE message placing the channel in maintenance, and an incoming call is active on the channel egressMaintenance, the B-channel received a SERVICE message placing the channel in maintenance, and an outgoing call is active on the channel outOfService, a SERVICE message to or from the PBX has placed the channel out of service')
sigChanBchTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanBchTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchTimeSlot.setDescription('This attribute indicates which timeslot the B-channel uses.')
sigChanBchVsrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanBchVsrInstance.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchVsrInstance.setDescription('This attribute indicates the component instance of the VoiceSubroute to which the B-channel belongs.')
sigChanBchCalledDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 7, 4, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanBchCalledDirectoryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanBchCalledDirectoryNumber.setDescription('This attribute indicates the dialled number for the currently active call on this B-channel.')
sigChanGw = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15))
sigChanGwRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 1), )
if mibBuilder.loadTexts: sigChanGwRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwRowStatusTable.setDescription('This entry controls the addition and deletion of sigChanGw components.')
sigChanGwRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanGwIndex"))
if mibBuilder.loadTexts: sigChanGwRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwRowStatusEntry.setDescription('A single entry in the table represents a single sigChanGw component.')
sigChanGwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanGwRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwRowStatus.setDescription('This variable is used as the basis for SNMP naming of sigChanGw components. These components cannot be added nor deleted.')
sigChanGwComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanGwComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
sigChanGwStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanGwStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwStorageType.setDescription('This variable represents the storage type value for the sigChanGw tables.')
sigChanGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: sigChanGwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwIndex.setDescription('This variable represents the index for the sigChanGw tables.')
sigChanGwStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 101), )
if mibBuilder.loadTexts: sigChanGwStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwStatsTable.setDescription('This group provides signalling gateway related statistical attributes for the SigChan component.')
sigChanGwStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanGwIndex"))
if mibBuilder.loadTexts: sigChanGwStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwStatsEntry.setDescription('An entry in the sigChanGwStatsTable.')
sigChanGwRequiredConversions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 101, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanGwRequiredConversions.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwRequiredConversions.setDescription('This attribute counts the total number of calls that have been made from the subnet to the interface (that is external equipment, for example a PBX) which needed signalling protocol conversion. The value wraps to zero when it exceeds its maximum. The count includes both, supported and unsupported conversions.')
sigChanGwUnsupportedConversions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 101, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanGwUnsupportedConversions.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwUnsupportedConversions.setDescription('This attribute counts the total number of calls that have been made from the subnet to the interface (that is external equipment, for example a PBX) which needed signalling protocol conversion but were rejected since the requested conversion was not supported. The value wraps to zero when it exceeds its maximum.')
sigChanGwGwcTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 301), )
if mibBuilder.loadTexts: sigChanGwGwcTable.setStatus('obsolete')
if mibBuilder.loadTexts: sigChanGwGwcTable.setDescription('This attribute has been migrated to gatewayCapability.')
sigChanGwGwcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 301, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanGwIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanGwGwcIndex"))
if mibBuilder.loadTexts: sigChanGwGwcEntry.setStatus('obsolete')
if mibBuilder.loadTexts: sigChanGwGwcEntry.setDescription('An entry in the sigChanGwGwcTable.')
sigChanGwGwcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 301, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("etsiQsigPG", 0), ("nisPG", 1), ("analogAndCasPG", 2), ("euroIsdnPG", 3), ("mcdnPG", 4), ("mcdnUniPG", 5))))
if mibBuilder.loadTexts: sigChanGwGwcIndex.setStatus('obsolete')
if mibBuilder.loadTexts: sigChanGwGwcIndex.setDescription('This variable represents the sigChanGwGwcTable specific index for the sigChanGwGwcTable.')
sigChanGwGwcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 301, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noGw", 0), ("singleEndedGw", 1), ("doubleEndedGw", 2), ("singleOrDoubleEndedGw", 3), ("nativePG", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanGwGwcValue.setStatus('obsolete')
if mibBuilder.loadTexts: sigChanGwGwcValue.setDescription('This variable represents an individual value for the sigChanGwGwcTable.')
sigChanGwGatewayCapTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 302), )
if mibBuilder.loadTexts: sigChanGwGatewayCapTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwGatewayCapTable.setDescription("This attribute indicates the SigChan component's capability to convert from one access signalling type to another. Access signalling protocols (protocols between a Passport and external switching equipment, for example a PBX) are grouped into protocol groups. Protocols within the same protocol group are considered completely compatible. This means that no extra processing is needed when a call originates from an ingress link using protocol A and terminates on an egress link using protocol B if protocols A and B belong to the same protocol group. The following protocol groups are defined: etsiQsigPG - ETSI QSIG protocol group containing ETSI QSIG protocol, mcdnFamilyPG - MCDN Family protocol group containing NIS, Meridian Customer Defined Network (MCDN) peer to peer, and MCDN User to Network (UNI) protocols, analogAndCasPG - Analog and CAS protocol group containing most of the analog and channel associated signalling protocols with steady state line signalling and DTMF register signalling, euroIsdnPG - EURO ISDN protocol group containing most of the European national ISDN protocols based on ETSI ISDN (ETSI-T) standard. For every of the protocols group this attribute indicates what is the level of protocol conversion support available on the SigChan component: noGw - no protocol conversion available for the protocol group, singleEndedGw - only full protocol conversion available for the protocol group (that is the SigChan component on the other side of the subnet does not have to get involved in the gateway processing), doubleEndedGw - only partial protocol conversion available for the protocol group (that is both SigChan components, ingress and egress, have to get involved in signalling conversion), singleOrDoubleEndedGw - both, full and partial protocol conversions available for the protocol group, nativePG - the protocol group is the native protocol group for the SigChan component.")
sigChanGwGatewayCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 302, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanGwIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanGwGatewayCapIndex"))
if mibBuilder.loadTexts: sigChanGwGatewayCapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwGatewayCapEntry.setDescription('An entry in the sigChanGwGatewayCapTable.')
sigChanGwGatewayCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 302, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("etsiQsigPG", 0), ("mcdnPG", 1), ("analogAndCasPG", 2), ("euroIsdnPG", 3))))
if mibBuilder.loadTexts: sigChanGwGatewayCapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwGatewayCapIndex.setDescription('This variable represents the sigChanGwGatewayCapTable specific index for the sigChanGwGatewayCapTable.')
sigChanGwGatewayCapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 15, 302, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noGw", 0), ("singleEndedGw", 1), ("doubleEndedGw", 2), ("singleOrDoubleEndedGw", 3), ("nativePG", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanGwGatewayCapValue.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanGwGatewayCapValue.setDescription('This variable represents an individual value for the sigChanGwGatewayCapTable.')
sigChanNcas = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16))
sigChanNcasRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 1), )
if mibBuilder.loadTexts: sigChanNcasRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of sigChanNcas components.')
sigChanNcasRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanNcasIndex"))
if mibBuilder.loadTexts: sigChanNcasRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasRowStatusEntry.setDescription('A single entry in the table represents a single sigChanNcas component.')
sigChanNcasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanNcasRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasRowStatus.setDescription('This variable is used as the basis for SNMP naming of sigChanNcas components. These components cannot be added nor deleted.')
sigChanNcasComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanNcasComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
sigChanNcasStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanNcasStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasStorageType.setDescription('This variable represents the storage type value for the sigChanNcas tables.')
sigChanNcasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: sigChanNcasIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasIndex.setDescription('This variable represents the index for the sigChanNcas tables.')
sigChanNcasOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 100), )
if mibBuilder.loadTexts: sigChanNcasOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains various operational attributes of a non call-associated signalling session serviced by a SigChan component.')
sigChanNcasOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanNcasIndex"))
if mibBuilder.loadTexts: sigChanNcasOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasOperEntry.setDescription('An entry in the sigChanNcasOperTable.')
sigChanNcasDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanNcasDirection.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasDirection.setDescription('This attribute indicates what is the direction of the non call-associated signalling session. The attribute may have the following values: ingress, the NCAS session is originated by the external equipment into the subnet egress, the NCAS session is originated by the subnet into the external equipment')
sigChanNcasCallReference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 100, 1, 2), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanNcasCallReference.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasCallReference.setDescription('This attribute indicates which call reference the NCAS session uses.')
sigChanNcasCalledDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 100, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanNcasCalledDirectoryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasCalledDirectoryNumber.setDescription('This attribute indicates the dialled number for the NCAS session.')
sigChanNcasDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 16, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanNcasDuration.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanNcasDuration.setDescription('This attribute indicates duration of the NCAS session since its establishment.')
sigChanICmap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18))
sigChanICmapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 1), )
if mibBuilder.loadTexts: sigChanICmapRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapRowStatusTable.setDescription('This entry controls the addition and deletion of sigChanICmap components.')
sigChanICmapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanICmapIndex"))
if mibBuilder.loadTexts: sigChanICmapRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapRowStatusEntry.setDescription('A single entry in the table represents a single sigChanICmap component.')
sigChanICmapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapRowStatus.setDescription('This variable is used as the basis for SNMP naming of sigChanICmap components. These components can be added and deleted.')
sigChanICmapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanICmapComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
sigChanICmapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigChanICmapStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapStorageType.setDescription('This variable represents the storage type value for the sigChanICmap tables.')
sigChanICmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: sigChanICmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapIndex.setDescription('This variable represents the index for the sigChanICmap tables.')
sigChanICmapIntCauseTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100), )
if mibBuilder.loadTexts: sigChanICmapIntCauseTable.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapIntCauseTable.setDescription('This group contains the provisionable, Passport generated clearing reasons of an establishing call.')
sigChanICmapIntCauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "sigChanICmapIndex"))
if mibBuilder.loadTexts: sigChanICmapIntCauseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapIntCauseEntry.setDescription('An entry in the sigChanICmapIntCauseTable.')
sigChanICmapEgressLinkOutOfServCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapEgressLinkOutOfServCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapEgressLinkOutOfServCause.setDescription('This attribute specifies the cause code sent to the originating PBX when the data link to the remote PBX is down or when remote channels are in maintenance. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, a typical cause code value sent back to the originating PBX is 27. VALUES ( 128 = autoConfigure )')
sigChanICmapChanOrCircNotAvailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapChanOrCircNotAvailCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapChanOrCircNotAvailCause.setDescription('This attribute specifies the cause code sent to the originating PBX if no timeslot is available for an incoming call. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, a typical cause code value sent back to the originating PBX is 34. VALUES ( 128 = autoConfigure )')
sigChanICmapTempFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapTempFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapTempFailureCause.setDescription('This attribute specifies the cause code sent to the originating PBX when PORS fails to establish a call due to congestion or a disabled trunk. It is also generated when the calling side fails to decode payload capabilities sent by the called side. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, a typical cause code value sent back to the originating PBX is 41. VALUES ( 128 = autoConfigure )')
sigChanICmapSwitchCongestCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapSwitchCongestCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapSwitchCongestCause.setDescription('This attribute specifies the cause code sent to the originating PBX when the allocation of internal resources for an incoming call fails. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, typical cause code values sent back to the originating PBX are 42 for NIS and 41 for ETSI. VALUES ( 128 = autoConfigure )')
sigChanICmapReqChanOrCircNotAvailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapReqChanOrCircNotAvailCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapReqChanOrCircNotAvailCause.setDescription('This attribute specifies the cause code sent to the originating PBX when an exclusively requested channel is not in service or a channel request is unsuccessful. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, a typical cause code value sent back to the originating PBX is 44. VALUES ( 128 = autoConfigure )')
sigChanICmapResourceUnavailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapResourceUnavailCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapResourceUnavailCause.setDescription('This attribute specifies the cause code sent to the originating PBX when the path establishing timer expires, when the switched voice service associated to a call is locked by CAS or when an H-channel is requested. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, typical cause code values sent back to the originating PBX are 47 for NIS and 44 for ETSI. VALUES ( 128 = autoConfigure )')
sigChanICmapServNotAllowedCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapServNotAllowedCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapServNotAllowedCause.setDescription('This attribute specifies the cause code sent to the originating PBX when the requested call type (voice or data) is not compatible with Vroute typeOfRoute at the calling side. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, a typical cause code value sent back to the originating PBX is 63. VALUES ( 128 = autoConfigure )')
sigChanICmapNoSuchChannelCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapNoSuchChannelCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapNoSuchChannelCause.setDescription('This attribute specifies the cause code sent to the originating PBX when a requested channel does not exist. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, a typical cause code value sent back to the originating PBX is 82. VALUES ( 128 = autoConfigure )')
sigChanICmapIncompatDestCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 115, 18, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 127), ValueRangeConstraint(128, 128), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sigChanICmapIncompatDestCause.setStatus('mandatory')
if mibBuilder.loadTexts: sigChanICmapIncompatDestCause.setDescription('This attribute specifies the cause code sent to the originating PBX when the calling and called side capabilities do not match. If the component is not added or if the default value autoConfigure is provisioned for the attribute the cause code sent to the originating PBX is not manipulated and the clearing process is not influenced. For this case, a typical cause code value sent back to the originating PBX is 88. VALUES ( 128 = autoConfigure )')
vRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116))
vRouteRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 1), )
if mibBuilder.loadTexts: vRouteRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteRowStatusTable.setDescription('This entry controls the addition and deletion of vRoute components.')
vRouteRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"))
if mibBuilder.loadTexts: vRouteRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteRowStatusEntry.setDescription('A single entry in the table represents a single vRoute component.')
vRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteRowStatus.setDescription('This variable is used as the basis for SNMP naming of vRoute components. These components can be added and deleted.')
vRouteComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteStorageType.setDescription('This variable represents the storage type value for the vRoute tables.')
vRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: vRouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteIndex.setDescription('This variable represents the index for the vRoute tables.')
vRouteProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10), )
if mibBuilder.loadTexts: vRouteProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteProvTable.setDescription('This group contains the provisionable attributes of a Voice Networking VoiceRoute component.')
vRouteProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"))
if mibBuilder.loadTexts: vRouteProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteProvEntry.setDescription('An entry in the vRouteProvTable.')
vRouteCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteCommentText.setDescription('Use of this attribute is at the discretion of the system administrator. Typically, it specifies the name of the customer that is using this VoiceRoute.')
vRouteTypeOfRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("voiceData", 2))).clone('voiceData')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteTypeOfRoute.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteTypeOfRoute.setDescription('This attribute specifies the type of calls (either voice, data, or both voice and data) that this VoiceRoute will accept from the Passport subnet and the local PBX. If typeOfRoute is set to voice, then all data calls from the subnet and the local PBX will be rejected. If typeOfRoute is set to data, then all voice calls from the subnet and the local PBX will be rejected. If typeOfRoute is set to voiceData, then all data and voice calls will be accepted from the subnet and the local PBX.')
vRouteDiallingPlan0 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="fff8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDiallingPlan0.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDiallingPlan0.setDescription('This attribute specifies how to map the numbering plan indication and the type of number into the Vncs database diallingPlan0. For more information refer to NTP 241-7001-4xx Voice Networking Users Guide. There are three numbering plans that are allowed, unknown, E.164, and private. Within each of these, there are eight possible type of numbers. Since the name for the type of numbers for the private numbering plans varies from protocol to protocol, a generic scheme has been adopted. unknown means that the sending and receiving switches have no knowledge of the numbering plan. international means that the sending switch has identified the number format as matching the E.164 international dialling. national means that the sending switch has identified the number as conforming to the E.164 national dialling plan subscriber means that the number is the address of a customer conforming to the local public network. p0, p1, p2, p3, p4, p5, p6 and p7 are private numbering plans, with a type of number zero to seven. casUnknown means any number received from a Channel Associated Signalling (CAS) trunk. Description of bits: unknown(0) international(1) national(2) subscriber(3) p0(4) p1(5) p2(6) p3(7) p4(8) p5(9) p6(10) p7(11) casUnknown(12)')
vRouteDiallingPlan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDiallingPlan1.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDiallingPlan1.setDescription('This attribute specifies how to map the numbering plan indication and the type of number into the Vncs database diallingPlan1. For more information refer to NTP 241-7001-4xx Voice Networking Users Guide. There are three numbering plans that are allowed, unknown, E.164, and private. Within each of these, there are eight possible type of numbers. Since the name for the type of numbers for the private numbering plans varies from protocol to protocol, a generic scheme has been adopted. unknown means that the sending and receiving switches have no knowledge of the numbering plan. international means that the sending switch has identified the number format as matching the E.164 international dialling plan. national means that the sending switch has identified the number as conforming to the E.164 national dialling plan subscriber means that the number is the address of a customer conforming to the local public network. p0, p1, p2, p3, p4, p5, p6 and p7 are private numbering plans, with a type of number zero to seven. casUnknown means any number received from a Channel Associated Signalling (CAS) trunk. Description of bits: unknown(0) international(1) national(2) subscriber(3) p0(4) p1(5) p2(6) p3(7) p4(8) p5(9) p6(10) p7(11) casUnknown(12)')
vRouteDiallingPlan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDiallingPlan2.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDiallingPlan2.setDescription('This attribute specifies how to map the numbering plan indication and the type of number into the Vncs database diallingPlan2. For more information refer to NTP 241-7001-4xx Voice Networking Users Guide. There are three numbering plans that are allowed, unknown, E.164, and private. Within each of these, there are eight possible type of numbers. Since the name for the type of numbers for the private numbering plans varies from protocol to protocol, a generic scheme has been adopted. unknown means that the sending and receiving switches have no knowledge of the numbering plan. international means that the sending switch has identified the number format as matching the E.164 international dialling plan. national means that the sending switch has identified the number as conforming to the E.164 national dialling plan subscriber means that the number is the address of a customer conforming to the local public network. p0, p1, p2, p3, p4, p5, p6 and p7 are private numbering plans, with a type of number zero to seven. casUnknown means any number received from a Channel Associated Signalling (CAS) trunk. Description of bits: unknown(0) international(1) national(2) subscriber(3) p0(4) p1(5) p2(6) p3(7) p4(8) p5(9) p6(10) p7(11) casUnknown(12)')
vRouteHuntingAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bottomUpLinear", 0), ("topDownLinear", 1))).clone('bottomUpLinear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteHuntingAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteHuntingAlgorithm.setDescription('This attribute specifies the type of hunting algorithm that should be used by the VoiceRoute and VoiceSubroutes when selecting a channel to make an outgoing call. bottomUpLinear means that a call from the subnet will be passed to the lowest instance of the VoiceSubroutes, which in turn will pass the call to the lowest instance of SwitchedVoiceService. If there are no available SwitchedVoiceServices in that VoiceSubroute then the process will be repeated for the next lowest instance of VoiceSubroute. topDownLinear means that a call from the subnet will be passed to the highest instance of the VoiceSubroutes, which in turn will pass the call to the highest instance of SwitchedVoiceService. If there are no available SwitchedVoiceServices in that VoiceSubroute then the process will be repeated for the next highest instance of VoiceSubroute.')
vRouteMinimumDigitsToRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteMinimumDigitsToRoute.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteMinimumDigitsToRoute.setDescription('This attribute specifies the number of digits that must be received before an address resolution request will be sent to the VoiceNetworkingCallServer. Once this level has been exceeded an address resolution request will be sent for every digit received until the dialled number has been resolved in the database. This number should be set to a value which represents the average number of digits that will allow for a unique end-point to be identified. If the number is set too low, then the number of simultaneous calls that can be handled by the VoiceNetworkingCallServer will be reduced since the number of address resolution requests sent for each call will be increased. If it is set too high then address resolution request messages will not be sent to the VoiceNetworkingCallServer until the end-of-dial timer has expired (approximately 12 seconds after the last digit has been received). This can result in very long call setup times.')
vRouteVoiceNetworkingCallServer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 11), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteVoiceNetworkingCallServer.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteVoiceNetworkingCallServer.setDescription('This attribute specifies which Vncs instance should be used by all calls into this VoiceRoute from the PBX.')
vRouteOverrideDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 12), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteOverrideDirectoryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteOverrideDirectoryNumber.setDescription('The number specified here will be used in place of the dialled number to lookup the destination in the VoiceNetworkingCallServer. A null string means that the routing decision should be based on the dialled number. The numbering plan type that will be used will be noAccessCode.')
vRoutePrivateNetworkIdentifer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRoutePrivateNetworkIdentifer.setStatus('mandatory')
if mibBuilder.loadTexts: vRoutePrivateNetworkIdentifer.setDescription('This attribute specifies the private network identifier (PNI) value. If the value is zero then connectionless supplementary service transport for TCAP formatted FACILITY messages is not supported.')
vRouteCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 11), )
if mibBuilder.loadTexts: vRouteCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
vRouteCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"))
if mibBuilder.loadTexts: vRouteCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteCidDataEntry.setDescription('An entry in the vRouteCidDataTable.')
vRouteCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
vRouteIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 12), )
if mibBuilder.loadTexts: vRouteIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
vRouteIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"))
if mibBuilder.loadTexts: vRouteIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteIfEntryEntry.setDescription('An entry in the vRouteIfEntryTable.')
vRouteIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
vRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 12, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
vRouteStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 13), )
if mibBuilder.loadTexts: vRouteStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vRouteStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"))
if mibBuilder.loadTexts: vRouteStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteStateEntry.setDescription('An entry in the vRouteStateTable.')
vRouteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vRouteOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vRouteUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vRouteOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 14), )
if mibBuilder.loadTexts: vRouteOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vRouteOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"))
if mibBuilder.loadTexts: vRouteOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteOperStatusEntry.setDescription('An entry in the vRouteOperStatusTable.')
vRouteSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vRouteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 15), )
if mibBuilder.loadTexts: vRouteStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteStatsTable.setDescription('This group provides the operational attributes for the VoiceRoute component. It contains information relating to calls that originate from the network.')
vRouteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"))
if mibBuilder.loadTexts: vRouteStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteStatsEntry.setDescription('An entry in the vRouteStatsTable.')
vRouteTotalCallsFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteTotalCallsFromSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteTotalCallsFromSubnet.setDescription('This attribute counts the total number of calls that have been received from the Passport subnet, including calls that fail. The value wraps to zero when it reaches its maximum.')
vRouteCallsClearedNoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteCallsClearedNoChannel.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteCallsClearedNoChannel.setDescription('This attribute counts the total number of calls from the subnet that were rejected when all of the in-service channels were busy. When a call is rejected for this reason, the cause code sent to the originator is 34, no circuit/channel available. The value wraps to zero when it reaches its maximum.')
vRouteCallsClearedOutOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteCallsClearedOutOfService.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteCallsClearedOutOfService.setDescription("This attribute counts the total number of calls from the subnet that were rejected because all of the channels were out-of-service. A channel is considered out-of-service if it is unavailable for any reason other than it is being engaged in handling a call. That is, an operator lock of any of the components required for the channel's operation, or problems which interfere with the connection to the PBX, will cause the channel to be considered out-of-service. When a call is rejected for this reason, the cause code sent back to the originator is 27, destination out-of-service. The value wraps to zero when it reaches its maximum.")
vRouteCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteCallsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteCallsRejected.setDescription('This attribute counts the total number of calls from the subnet that were rejected because they were: 1) voice calls to a typeOfRoute which is set to data, 2) data calls to a typeOfRoute which is set to voice, 3) using a signalling protocol which is incompatible with this end. The value wraps to zero when it reaches its maximum.')
vRouteSubroutesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 309), )
if mibBuilder.loadTexts: vRouteSubroutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteSubroutesTable.setDescription('This attribute specifies all of the VoiceSubroutes which are associated with this VoiceRoute. There are only 4 VoiceSubroutes allowed per VoiceRoute.')
vRouteSubroutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 309, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteSubroutesValue"))
if mibBuilder.loadTexts: vRouteSubroutesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteSubroutesEntry.setDescription('An entry in the vRouteSubroutesTable.')
vRouteSubroutesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 309, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteSubroutesValue.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteSubroutesValue.setDescription('This variable represents both the value and the index for the vRouteSubroutesTable.')
vRouteSubroutesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 309, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vRouteSubroutesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteSubroutesRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the vRouteSubroutesTable.')
vRouteDegradedSubroutesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 310), )
if mibBuilder.loadTexts: vRouteDegradedSubroutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDegradedSubroutesTable.setDescription('This attribute indicates all of the VoiceSubroutes that have at least one SwitchedVoiceService whose operationalState is disabled.')
vRouteDegradedSubroutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 310, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDegradedSubroutesValue"))
if mibBuilder.loadTexts: vRouteDegradedSubroutesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDegradedSubroutesEntry.setDescription('An entry in the vRouteDegradedSubroutesTable.')
vRouteDegradedSubroutesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 310, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDegradedSubroutesValue.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDegradedSubroutesValue.setDescription('This variable represents both the value and the index for the vRouteDegradedSubroutesTable.')
vRouteDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 2))
vRouteDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 2, 1), )
if mibBuilder.loadTexts: vRouteDebugRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDebugRowStatusTable.setDescription('This entry controls the addition and deletion of vRouteDebug components.')
vRouteDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDebugIndex"))
if mibBuilder.loadTexts: vRouteDebugRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDebugRowStatusEntry.setDescription('A single entry in the table represents a single vRouteDebug component.')
vRouteDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDebugRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDebugRowStatus.setDescription('This variable is used as the basis for SNMP naming of vRouteDebug components. These components cannot be added nor deleted.')
vRouteDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDebugComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDebugComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vRouteDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDebugStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDebugStorageType.setDescription('This variable represents the storage type value for the vRouteDebug tables.')
vRouteDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vRouteDebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDebugIndex.setDescription('This variable represents the index for the vRouteDebug tables.')
vRouteInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3))
vRouteInterfaceRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 1), )
if mibBuilder.loadTexts: vRouteInterfaceRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceRowStatusTable.setDescription('This entry controls the addition and deletion of vRouteInterface components.')
vRouteInterfaceRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteInterfaceIndex"))
if mibBuilder.loadTexts: vRouteInterfaceRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceRowStatusEntry.setDescription('A single entry in the table represents a single vRouteInterface component.')
vRouteInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteInterfaceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceRowStatus.setDescription('This variable is used as the basis for SNMP naming of vRouteInterface components. These components cannot be added nor deleted.')
vRouteInterfaceComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteInterfaceComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vRouteInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteInterfaceStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceStorageType.setDescription('This variable represents the storage type value for the vRouteInterface tables.')
vRouteInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vRouteInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceIndex.setDescription('This variable represents the index for the vRouteInterface tables.')
vRouteInterfaceProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10), )
if mibBuilder.loadTexts: vRouteInterfaceProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceProvTable.setDescription('This group contains attributes specifying the interface to a PBX.')
vRouteInterfaceProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteInterfaceIndex"))
if mibBuilder.loadTexts: vRouteInterfaceProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceProvEntry.setDescription('An entry in the vRouteInterfaceProvTable.')
vRouteInterfaceIngressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceIngressAudioGain.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceIngressAudioGain.setDescription('This attribute specifies the gain in dB that is applied to data coming from outside the network before it is transferred across the network. It applies to voice, modem and fax traffic. For example, ingress gain is applied to audio data coming from a PBX. If ingressAudioGain is negative, a loss is applied. ingressAudioGain and egressAudioGain are used in loss planning, which is the configuration of the devices in a network to ensure that the signal level from any point in the network to any other point is correct. ingressAudioGain is ignored for calls on 1pDS1V and 1pE1V cards.')
vRouteInterfaceEgressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceEgressAudioGain.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceEgressAudioGain.setDescription('This attribute specifies the gain in dB that is applied to data leaving the network. It applies to voice, modem and fax traffic. For example, egress gain is applied to audio data going to a PBX. If egressAudioGain is negative, a loss is applied. ingressAudioGain and egressAudioGain are used in loss planning, which is the configuration of the devices in the network to ensure that the signal level from any point in the network to any other point is correct.')
vRouteInterfaceTandemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceTandemPassThrough.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceTandemPassThrough.setDescription('This attribute specifies whether tandem pass through is desired. If tandemPassThrough is enabled, tandem pass through is used if possible. If tandemPassThrough is disabled, tandem pass through is not used under any circumstances. The actual state of tandem pass through is indicated in Vsr Svs Framer tptStatus. The negotiated tandem pass through is available in Vsr Svs Framer negotiatedTandemPassThrough. Tandem pass through is not supported on 1pDS1V and 1pE1V cards, so tandemPassThrough is ignored on these cards.')
vRouteInterfaceEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceEchoCancellation.setStatus('obsolete')
if mibBuilder.loadTexts: vRouteInterfaceEchoCancellation.setDescription('This attribute has been migrated to echoCancellation.')
vRouteInterfaceComfortNoiseCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-78, -78), ValueRangeConstraint(-65, -65), ValueRangeConstraint(-60, -60), ValueRangeConstraint(-54, -54), ValueRangeConstraint(-52, -52), ValueRangeConstraint(-50, -50), ValueRangeConstraint(-48, -48), ValueRangeConstraint(-46, -46), ValueRangeConstraint(-44, -44), ValueRangeConstraint(-42, -42), ValueRangeConstraint(-40, -40), )).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceComfortNoiseCap.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceComfortNoiseCap.setDescription('This attribute specifies the maximum level at which comfort noise is generated. The comfort noise is limited by comfortNoiseCap before egressAudioGain is applied. The default value of -40 dBm0 equates to the maximum level of comfort noise available and effectively disables the comfortNoiseCap.')
vRouteInterfaceSpeechHangoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 500)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceSpeechHangoverTime.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceSpeechHangoverTime.setDescription('This attribute specifies the time after the end of speech before silence suppression starts. It applies only to voice traffic. It is not used unless Vsr Svs Framer negotiatedSilenceSuppression is on, congested or slowAndCongested. Higher values of speechHangoverTime reduce undesirable clipping but increase bandwidth usage. speechHangoverTime is not used on DS1V, E1V, 1pDS1V, 1pE1V and J2MV cards.')
vRouteInterfaceFaxHangoverTimeG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 20000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceFaxHangoverTimeG711G726.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceFaxHangoverTimeG711G726.setDescription('This attribute specifies the time after the end of fax traffic before G.711/G.726 fax idle suppression starts. It applies only if the negotiated fax encoding, available in Vsr Svs Framer negotiatedEncoding, is g711, g726 or g711G726 and Vsr Svs Framer negotiatedFisG711G726 is on. Higher values of faxHangoverTimeG711G726 reduce undesirable clipping but increase bandwidth usage. faxHangoverTimeG711G726 is not used on DS1V, E1V, 1pDS1V, 1pE1V and J2MV cards.')
vRouteInterfaceModemFaxSpeechDiscrim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceModemFaxSpeechDiscrim.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceModemFaxSpeechDiscrim.setDescription('This attribute specifies whether this VoiceRoute differentiates between modemFax traffic and speech. If modemFaxSpeechDiscrim is on and a false 2100 Hz tone is detected, any Svs using this route reverts to speech mode when speech is detected. modemFaxSpeechDiscrim is not used on DS1V, E1V, 1pDS1V, 1pE1V and J2MV cards.')
vRouteInterfaceEchoTailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), )).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceEchoTailDelay.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceEchoTailDelay.setDescription('This attribute specifies the maximum echo canceller tail delay coverage. It should be selected higher than the summation of the round trip delay of echo and hybrid response time. A 32 msec setting is good for a radius of 2700 km, assuming that the signal is going through 4 exchanges and the hybrid response time is 6 msec. A 64 msec setting offers even greater coverage (more distance or more switches), with comparable convergence time. The recommended setting is 64 msec. This attribute is not used on DS1V, E1V, 1pDS1V, 1pE1V, J2MV, 1pE1Mvp, 1pDS1Mvp, or 1pTTC2mMvp card.')
vRouteInterfaceEchoReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 3), ValueRangeConstraint(6, 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceEchoReturnLoss.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceEchoReturnLoss.setDescription('This attribute specifies the echo return loss parameter of the echo canceller. 0 db is the normal value for most line conditions. If the line quality is poor, in terms of echo, selecting a higher value may allow the echo canceller to perform better. A side effect is that the voice level is attenuated by the same amount, which may not always be acceptable. This attribute is not used on DS1V, E1V, 1pDS1V, 1pE1V, J2MV, 1pE1Mvp, 1pDS1Mvp, or 1pTTC2mMvp card.')
vRouteInterfaceEcanBypassMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("g164", 0), ("g165", 1), ("never", 2))).clone('g165')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceEcanBypassMode.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceEcanBypassMode.setDescription('This attribute specifies when version 2 internal echo cancellers are placed in bypass mode on this VoiceRoute. This attribute only applies if v2 of echoCancellation is on. If ecanBypassMode is g165, the internal echo canceller is placed in bypass mode as per ITU-T G.165. If ecanBypassMode is g164, the internal echo canceller is placed in bypass mode as per ITU-T G.164. If ecanBypassMode is never, the internal echo canceller is never placed in bypass mode. This mode should only be used for debugging. This attribute does not apply to 1pE1V, 1pDS1V, J2MV, 1pE1Mvp, 1pDS1Mvp or 1pTTC2mMvp cards.')
vRouteInterfaceStructuredEchoCancellationTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 472), )
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationTable.setDescription('This attribute specifies whether echo cancellation is performed on this VoiceRoute. v1 specifies whether echo cancellation is performed by version 1 internal echo cancellers. v2 specifes whether echo cancellation is performed by version 2 echo cancellers. If echoCancellation is on, the internal echo canceller is enabled and echo cancellation is performed. If echoCancellation is off, the internal echo canceller is placed in transparent bypass mode and echo cancellation is never performed.')
vRouteInterfaceStructuredEchoCancellationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 472, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteInterfaceIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteInterfaceStructuredEchoCancellationIndex"))
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationEntry.setDescription('An entry in the vRouteInterfaceStructuredEchoCancellationTable.')
vRouteInterfaceStructuredEchoCancellationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 472, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2", 1))))
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationIndex.setDescription('This variable represents the vRouteInterfaceStructuredEchoCancellationTable specific index for the vRouteInterfaceStructuredEchoCancellationTable.')
vRouteInterfaceStructuredEchoCancellationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 3, 472, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationValue.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteInterfaceStructuredEchoCancellationValue.setDescription('This variable represents an individual value for the vRouteInterfaceStructuredEchoCancellationTable.')
vRouteDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4))
vRouteDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 1), )
if mibBuilder.loadTexts: vRouteDnaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaRowStatusTable.setDescription('This entry controls the addition and deletion of vRouteDna components.')
vRouteDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaIndex"))
if mibBuilder.loadTexts: vRouteDnaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaRowStatusEntry.setDescription('A single entry in the table represents a single vRouteDna component.')
vRouteDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaRowStatus.setDescription('This variable is used as the basis for SNMP naming of vRouteDna components. These components cannot be added nor deleted.')
vRouteDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vRouteDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaStorageType.setDescription('This variable represents the storage type value for the vRouteDna tables.')
vRouteDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vRouteDnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaIndex.setDescription('This variable represents the index for the vRouteDna tables.')
vRouteDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 10), )
if mibBuilder.loadTexts: vRouteDnaAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaAddressTable.setDescription("Address group contains attributes common to all Dna's. Every Dna used in the network is defined with this group of 2 attributes. String of address digits is complemented by type of address and Npi. These attributes are used to interpret format of the address digits.")
vRouteDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaIndex"))
if mibBuilder.loadTexts: vRouteDnaAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaAddressEntry.setDescription('An entry in the vRouteDnaAddressTable.')
vRouteDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDnaNumberingPlanIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaNumberingPlanIndicator.setDescription('This attribute indicates the Numbering Plan Indicator (NPI) of the Dna that is entered. Address may belong to X.121 or E.164 plans. X.121 is used in packet svitched data networks.')
vRouteDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDnaDataNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaDataNetworkAddress.setDescription('Dna attribute contains digits which form unique identifier of the customer interface. It can be compared (approximation only) to telephone number where phone number identifies unique telephone set. Dna digits are selected and assigned by network operators.')
vRouteDnaHgm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3))
vRouteDnaHgmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 1), )
if mibBuilder.loadTexts: vRouteDnaHgmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmRowStatusTable.setDescription('This entry controls the addition and deletion of vRouteDnaHgm components.')
vRouteDnaHgmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaHgmIndex"))
if mibBuilder.loadTexts: vRouteDnaHgmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmRowStatusEntry.setDescription('A single entry in the table represents a single vRouteDnaHgm component.')
vRouteDnaHgmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDnaHgmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmRowStatus.setDescription('This variable is used as the basis for SNMP naming of vRouteDnaHgm components. These components can be added and deleted.')
vRouteDnaHgmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaHgmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vRouteDnaHgmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaHgmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmStorageType.setDescription('This variable represents the storage type value for the vRouteDnaHgm tables.')
vRouteDnaHgmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vRouteDnaHgmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmIndex.setDescription('This variable represents the index for the vRouteDnaHgm tables.')
vRouteDnaHgmIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 10), )
if mibBuilder.loadTexts: vRouteDnaHgmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmIfTable.setDescription('This group contains the interface parameters between the HuntGroupMember and the Hunt Group server.')
vRouteDnaHgmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaHgmIndex"))
if mibBuilder.loadTexts: vRouteDnaHgmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmIfEntry.setDescription('An entry in the vRouteDnaHgmIfTable.')
vRouteDnaHgmUsageDeltaUpdateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDnaHgmUsageDeltaUpdateThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmUsageDeltaUpdateThreshold.setDescription("This attribute specifies by how much the availability of a hunt group member must change before the member's availability is updated to the hunt group server.")
vRouteDnaHgmOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 11), )
if mibBuilder.loadTexts: vRouteDnaHgmOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmOpTable.setDescription('This group contains the operational attributes of the HuntGroupMember component.')
vRouteDnaHgmOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaHgmIndex"))
if mibBuilder.loadTexts: vRouteDnaHgmOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmOpEntry.setDescription('An entry in the vRouteDnaHgmOpTable.')
vRouteDnaHgmMaxAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaHgmMaxAvailableChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmMaxAvailableChannels.setDescription('This attribute indicates the maximum number of available channels for this HuntGroupMember.')
vRouteDnaHgmAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaHgmAvailableChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmAvailableChannels.setDescription('This attribute indicates the number of available channels reported to the hunt group in the Availability Message Packet (AMP). It is incremented by the application when a channel is freed and decremented when a channel is active.')
vRouteDnaHgmAvailabilityDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4096, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaHgmAvailabilityDelta.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmAvailabilityDelta.setDescription("This attribute specifies the delta between the actual availability of a hunt group member and the hunt group member's currentAvailability. Once the absolute value of this attribute reaches the usageDeltaUpdateThreshold, the currentAvailability of the hunt group member is then updated with the actual availability and the availabilityDelta is reset to 0. If this attribute is positive the number of available channels has increased since the last AMP was sent. If it is negative the number of available channels has decreased since the last AMP was sent.")
vRouteDnaHgmHgAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2))
vRouteDnaHgmHgAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 1), )
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrRowStatusTable.setDescription('This entry controls the addition and deletion of vRouteDnaHgmHgAddr components.')
vRouteDnaHgmHgAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaHgmIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaHgmHgAddrIndex"))
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrRowStatusEntry.setDescription('A single entry in the table represents a single vRouteDnaHgmHgAddr component.')
vRouteDnaHgmHgAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of vRouteDnaHgmHgAddr components. These components can be added and deleted.')
vRouteDnaHgmHgAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vRouteDnaHgmHgAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrStorageType.setDescription('This variable represents the storage type value for the vRouteDnaHgmHgAddr tables.')
vRouteDnaHgmHgAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrIndex.setDescription('This variable represents the index for the vRouteDnaHgmHgAddr tables.')
vRouteDnaHgmHgAddrAddrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 10), )
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrAddrTable.setDescription('This group contains DNA attributes common to all DNAs.')
vRouteDnaHgmHgAddrAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaHgmIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteDnaHgmHgAddrIndex"))
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrAddrEntry.setDescription('An entry in the vRouteDnaHgmHgAddrAddrTable.')
vRouteDnaHgmHgAddrNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrNumberingPlanIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrNumberingPlanIndicator.setDescription('This attribute specifies the Numbering Plan Indicator (NPI) of the Dna that is entered. The address may belong to the X.121 or E.164 numbering plans.')
vRouteDnaHgmHgAddrDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 4, 3, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrDataNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteDnaHgmHgAddrDataNetworkAddress.setDescription('This attribute specifies the digits that form the unique identifier of the customer interface. It can be compared to a telephone number where phone number identifies unique telephone set. Dna digits are selected and assigned by network operators.')
vRouteAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5))
vRouteAcctRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 1), )
if mibBuilder.loadTexts: vRouteAcctRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctRowStatusTable.setDescription('This entry controls the addition and deletion of vRouteAcct components.')
vRouteAcctRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteAcctIndex"))
if mibBuilder.loadTexts: vRouteAcctRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctRowStatusEntry.setDescription('A single entry in the table represents a single vRouteAcct component.')
vRouteAcctRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteAcctRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctRowStatus.setDescription('This variable is used as the basis for SNMP naming of vRouteAcct components. These components cannot be added nor deleted.')
vRouteAcctComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteAcctComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vRouteAcctStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouteAcctStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctStorageType.setDescription('This variable represents the storage type value for the vRouteAcct tables.')
vRouteAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vRouteAcctIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctIndex.setDescription('This variable represents the index for the vRouteAcct tables.')
vRouteAcctProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 2), )
if mibBuilder.loadTexts: vRouteAcctProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctProvTable.setDescription('This group contains the provisionable attributes of a VoiceAccounting component.')
vRouteAcctProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vRouteAcctIndex"))
if mibBuilder.loadTexts: vRouteAcctProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctProvEntry.setDescription('An entry in the vRouteAcctProvTable.')
vRouteAcctAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteAcctAccountCollection.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctAccountCollection.setDescription('This attribute specifies that accounting records are to be collected for the various reasons: bill, test, study, audit. The last of the parameters, force, specifies that accounting records are to be collected irrespective of other collection reasons. If none of these reasons is set, then accounting will be suppressed. Description of bits: bill(0) test(1) study(2) audit(3) force(4)')
vRouteAcctAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteAcctAccountClass.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctAccountClass.setDescription('This attribute specifies the accounting class which is reserved for network operations usage. Its value is returned in the accounting record in the local and remote service type attributes. The use of this attribute is decided by the network operator.')
vRouteAcctServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteAcctServiceExchange.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctServiceExchange.setDescription('This attribute specifies a user defined value, Data Service Exchange, as entered by the network operator and reported in the accounting record.')
vRouteAcctDigitsSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteAcctDigitsSuppressed.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctDigitsSuppressed.setDescription("This attribute specifies the number of trailing digits which will be suppressed in the calledNumber in the accounting records. Each of the specified number of trailing digits are replaced with an 'X'. This option exists to satisfy privacy requirements in a number of countries.")
vRouteAcctAccountingOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 116, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRouteAcctAccountingOptions.setStatus('mandatory')
if mibBuilder.loadTexts: vRouteAcctAccountingOptions.setDescription('This attribute specifies optional settings for the voice networking accounting system. The options are: suppressTerminatingEndRecords - setting this option suppresses the generation of accounting records at the destination node. This reduces the volume of accounting data. This option has local significance only. It only suppresses the generation of accounting records for calls received by this node. Description of bits: notused0(0) suppressTerminatingEndRecords(1)')
vsr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117))
vsrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 1), )
if mibBuilder.loadTexts: vsrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrRowStatusTable.setDescription('This entry controls the addition and deletion of vsr components.')
vsrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrRowStatusEntry.setDescription('A single entry in the table represents a single vsr component.')
vsrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsr components. These components can be added and deleted.')
vsrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrStorageType.setDescription('This variable represents the storage type value for the vsr tables.')
vsrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vsrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrIndex.setDescription('This variable represents the index for the vsr tables.')
vsrCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 10), )
if mibBuilder.loadTexts: vsrCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
vsrCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrCidDataEntry.setDescription('An entry in the vsrCidDataTable.')
vsrCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: vsrCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
vsrIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 11), )
if mibBuilder.loadTexts: vsrIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
vsrIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrIfEntryEntry.setDescription('An entry in the vsrIfEntryTable.')
vsrIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
vsrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
vsrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 12), )
if mibBuilder.loadTexts: vsrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrProvTable.setDescription('This group represents the provisionable attributes of a VoiceSubroute.')
vsrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrProvEntry.setDescription('An entry in the vsrProvTable.')
vsrCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: vsrCommentText.setDescription('Use of this attribute is at the discretion of the system administrator. Typically, it specifies the name of the customer that is using this VoiceSubroute. Typical use of this attribute is to store customer name.')
vsrVoiceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 12, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrVoiceRoute.setStatus('mandatory')
if mibBuilder.loadTexts: vsrVoiceRoute.setDescription('This attribute specifies the VoiceRoute component that this VoiceSubroute belongs to.')
vsrSignallingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 12, 1, 311), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSignallingChannel.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSignallingChannel.setDescription('This attribute specifies the signalling channel to be used by the VoiceSubroute.')
vsrStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 13), )
if mibBuilder.loadTexts: vsrStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vsrStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrStateEntry.setDescription('An entry in the vsrStateTable.')
vsrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vsrOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vsrUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vsrOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 14), )
if mibBuilder.loadTexts: vsrOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vsrOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrOperStatusEntry.setDescription('An entry in the vsrOperStatusTable.')
vsrSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vsrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15), )
if mibBuilder.loadTexts: vsrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrStatsTable.setDescription('This group provides the operational statistics for the VoiceSubroute component.')
vsrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrStatsEntry.setDescription('An entry in the vsrStatsTable.')
vsrTotalCallsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrTotalCallsFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: vsrTotalCallsFromIf.setDescription('This attribute indicates the total number of calls that have been received by this VoiceSubroute from the PBX. The value wraps to zero when it reaches its maximum.')
vsrTotalFailedCallsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrTotalFailedCallsFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: vsrTotalFailedCallsFromIf.setDescription('This attribute counts indicates the total number of calls that have been received by this VoiceSubroute from the PBX which failed to be successfully routed through the subnet for various reasons. The value wraps to zero when it reaches its maximum.')
vsrInvalidNumberingPlanCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrInvalidNumberingPlanCalls.setStatus('mandatory')
if mibBuilder.loadTexts: vsrInvalidNumberingPlanCalls.setDescription('This attribute counts the calls from the interface for which the type of number and the numbering plan identification was not associated to an access code. The numbering plan types noAccessCode, accessCode1 and accessCode2 are provisioned in the VoiceRoute. Refer to NTP-241-7001-xxx for more information. The value wraps to zero when it reaches its maximum.')
vsrAddressResolutionFailedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrAddressResolutionFailedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: vsrAddressResolutionFailedCalls.setDescription('This attribute counts the calls from the interface which had dialled numbers that had no entry in the VoiceNetworkingCallServer data base. The value wraps to zero when it reaches its maximum.')
vsrAddressIncompleteCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrAddressIncompleteCalls.setStatus('mandatory')
if mibBuilder.loadTexts: vsrAddressIncompleteCalls.setDescription('This attribute counts the calls from the interface which had dialled numbers with insufficient digits to resolve to a unique entry in the VoiceNetworkingCallServer data base. The value wraps to zero when it reaches its maximum.')
vsrPathAttributesNotMetCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPathAttributesNotMetCalls.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPathAttributesNotMetCalls.setDescription('This attribute counts the calls from the interface for which a path to the end point could not be established based on the attributes specified in the VoiceProfile. The value wraps to zero when it reaches its maximum.')
vsrPathSetupTimeOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPathSetupTimeOutCalls.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPathSetupTimeOutCalls.setDescription('This attribute counts the calls from the interface for which a path to the end point could not be established due to a subnet path setup time-out. The value wraps to zero when it reaches its maximum.')
vsrCallsRejectedLocally = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrCallsRejectedLocally.setStatus('mandatory')
if mibBuilder.loadTexts: vsrCallsRejectedLocally.setDescription('This attribute counts the calls from the interface which were rejected by the originating end because it was: 1) a data call on a voice only VoiceRoute, or 2) a voice call on a data only VoiceRoute, or 3) a data call to an end-point whose VoiceProfile prevents data calls from being made. The value wraps to zero when it reaches its maximum.')
vsrCallsRejectedByFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrCallsRejectedByFarEnd.setStatus('mandatory')
if mibBuilder.loadTexts: vsrCallsRejectedByFarEnd.setDescription('This attribute counts the calls from the interface which were rejected by the far-end. This rejection could be due to: 1) no free channels at the end-point, or 2) a voice call going to a data only VoiceRoute, or 3) a data call going to a voice only VoiceRoute, or 4) a signalling protocol incompatibility between end-points. The value wraps to zero when it reaches its maximum.')
vsrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16), )
if mibBuilder.loadTexts: vsrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrOperTable.setDescription('This group provides the operational attributes for the VoiceSubroute component.')
vsrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"))
if mibBuilder.loadTexts: vsrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrOperEntry.setDescription('An entry in the vsrOperTable.')
vsrActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrActiveChannels.setDescription('This attribute indicates the total number of B-channels that currently have active calls.')
vsrPeakActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPeakActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPeakActiveChannels.setDescription('This attribute indicates the peak number of B-channels that were active during the previous polling period.')
vsrActiveVoiceChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrActiveVoiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrActiveVoiceChannels.setDescription('This attribute indicates the number of B-channels that are currently carrying voice.')
vsrActiveModemChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrActiveModemChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrActiveModemChannels.setDescription('This attribute indicates the number of B-channels that are currently active, where a 2100Hz tone was detected.')
vsrActiveDataChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrActiveDataChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrActiveDataChannels.setDescription('This attribute indicates the number of B-channels that are currently active carrying data.')
vsrPeakActiveVoiceChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPeakActiveVoiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPeakActiveVoiceChannels.setDescription('This attribute indicates the peak number of B-channels that were active carrying voice during the previous polling period.')
vsrPeakActiveModemChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPeakActiveModemChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPeakActiveModemChannels.setDescription('This attribute indicates the peak number of active B-channels that a 2100Hz tone was detected during the previous polling period.')
vsrPeakActiveDataChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPeakActiveDataChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPeakActiveDataChannels.setDescription('This attribute indicates the maximum number of B-channels that were active carrying data during the previous polling period.')
vsrActiveFaxRelayChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrActiveFaxRelayChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrActiveFaxRelayChannels.setDescription('This attribute indicates the number of B-channels that are currently performing fax relay.')
vsrActiveTptChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrActiveTptChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrActiveTptChannels.setDescription('This attribute indicates the number of B-channels that are currently performing tandem pass through.')
vsrPeakActiveFaxRelayChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPeakActiveFaxRelayChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPeakActiveFaxRelayChannels.setDescription('This attribute indicates the peak number of B-channels that performed fax relay during the previous polling period.')
vsrPeakActiveTptChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 16, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrPeakActiveTptChannels.setStatus('mandatory')
if mibBuilder.loadTexts: vsrPeakActiveTptChannels.setDescription('This attribute indicates the peak number of B-channels that performed tandem pass through during the previous polling period.')
vsrSvs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2))
vsrSvsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 1), )
if mibBuilder.loadTexts: vsrSvsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsRowStatusTable.setDescription('This entry controls the addition and deletion of vsrSvs components.')
vsrSvsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"))
if mibBuilder.loadTexts: vsrSvsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsRowStatusEntry.setDescription('A single entry in the table represents a single vsrSvs component.')
vsrSvsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrSvs components. These components can be added and deleted.')
vsrSvsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrSvsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsStorageType.setDescription('This variable represents the storage type value for the vsrSvs tables.')
vsrSvsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: vsrSvsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsIndex.setDescription('This variable represents the index for the vsrSvs tables.')
vsrSvsIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 11), )
if mibBuilder.loadTexts: vsrSvsIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
vsrSvsIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"))
if mibBuilder.loadTexts: vsrSvsIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsIfEntryEntry.setDescription('An entry in the vsrSvsIfEntryTable.')
vsrSvsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
vsrSvsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
vsrSvsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12), )
if mibBuilder.loadTexts: vsrSvsOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsOperTable.setDescription('This group provides the operational attributes for the SwitchedVoiceService component.')
vsrSvsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"))
if mibBuilder.loadTexts: vsrSvsOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsOperEntry.setDescription('An entry in the vsrSvsOperTable.')
vsrSvsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("seized", 1), ("answered", 2), ("clearing", 3), ("lockout", 4), ("idleMaintenance", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsStatus.setDescription('This attribute indicates the current state of the channel. idle means that there is no call currently active on this channel. seized means that the channel is currently setting up a call, but a connect message has not been received. answered means that a connect message has been received. clearing means that the call is being taken down. lockout means that due to glare or channel rejection, the channel is available for ingress calls only. That is, either the PBX and the Passport tried to seize the channel for a call at the same time (glare), or the PBX rejected the Passport seizure. idleMaintenance means that due to explicit channel maintenance messages, the channel is not available for egress calls. This can only happen when the protocol control places the channel into a maintenance state, and only happens if the Passport receives a message causing the channel state change such as the SERVICE maintenance message.')
vsrSvsProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsProfileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsProfileNumber.setDescription('This attribute indicates the VoiceProfile number that is being used for this call. If no call is active, then it displays the value of the last profile used.')
vsrSvsCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("modem", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsCallType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsCallType.setDescription('This attribute indicates the type of call that this channel is currently carrying. If no call is active, then it displays the value for the last call.')
vsrSvsCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsCalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsCalledNumber.setDescription('This attribute indicates the dialled number that is active on this channel. If no call is active, then it displays the dialled number from the last call.')
vsrSvsCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12, 1, 5), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsCallingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsCallingNumber.setDescription("This attribute indicates the originator's number for the currently active call. If no call is active, then it displays the originator's number from the last call.")
vsrSvsClearCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 12, 1, 6), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsClearCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsClearCauseCode.setDescription('This attribute indicates the clear cause code of the call. This code is always the Q.931 code, regardless of the access protocol.')
vsrSvsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 13), )
if mibBuilder.loadTexts: vsrSvsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsStatsTable.setDescription('This group provides the operational attributes for the SwitchedVoiceService component.')
vsrSvsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"))
if mibBuilder.loadTexts: vsrSvsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsStatsEntry.setDescription('An entry in the vsrSvsStatsTable.')
vsrSvsTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsTotalCalls.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsTotalCalls.setDescription('This attribute counts the call attempts processed on this channel (in both directions). This counter includes the number of unsuccessful as well as successful call attempts. The value wraps when it reaches its maximum.')
vsrSvsTotalCallSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsTotalCallSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsTotalCallSeconds.setDescription('This attribute indicates the total number of seconds that this channel is handling a call. This is regardless of whether the call is successful or not. In other words, this is the amount of time that the channel is not in the idle state. The value wraps when it reaches its maximum.')
vsrSvsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 14), )
if mibBuilder.loadTexts: vsrSvsStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vsrSvsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"))
if mibBuilder.loadTexts: vsrSvsStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsStateEntry.setDescription('An entry in the vsrSvsStateTable.')
vsrSvsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vsrSvsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vsrSvsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vsrSvsOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 15), )
if mibBuilder.loadTexts: vsrSvsOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vsrSvsOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"))
if mibBuilder.loadTexts: vsrSvsOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsOperStatusEntry.setDescription('An entry in the vsrSvsOperStatusTable.')
vsrSvsSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vsrSvsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2))
vsrSvsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 1), )
if mibBuilder.loadTexts: vsrSvsFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerRowStatusTable.setDescription('This entry controls the addition and deletion of vsrSvsFramer components.')
vsrSvsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"))
if mibBuilder.loadTexts: vsrSvsFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerRowStatusEntry.setDescription('A single entry in the table represents a single vsrSvsFramer component.')
vsrSvsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrSvsFramer components. These components cannot be added nor deleted.')
vsrSvsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrSvsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerStorageType.setDescription('This variable represents the storage type value for the vsrSvsFramer tables.')
vsrSvsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsrSvsFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerIndex.setDescription('This variable represents the index for the vsrSvsFramer tables.')
vsrSvsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 10), )
if mibBuilder.loadTexts: vsrSvsFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
vsrSvsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"))
if mibBuilder.loadTexts: vsrSvsFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerProvEntry.setDescription('An entry in the vsrSvsFramerProvTable.')
vsrSvsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
vsrSvsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 14), )
if mibBuilder.loadTexts: vsrSvsFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vsrSvsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"))
if mibBuilder.loadTexts: vsrSvsFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerStateEntry.setDescription('An entry in the vsrSvsFramerStateTable.')
vsrSvsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vsrSvsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vsrSvsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vsrSvsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15), )
if mibBuilder.loadTexts: vsrSvsFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
vsrSvsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"))
if mibBuilder.loadTexts: vsrSvsFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerStatsEntry.setDescription('An entry in the vsrSvsFramerStatsTable.')
vsrSvsFramerTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerTotalCells.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerTotalCells.setDescription('This attribute counts the total number of cells received from the interface. Each cell contains 44 bytes of data from the DS0 channel. Since a DS0 provides data at 64 kbit/s, each cell contains 5.5 ms of audio data. This data flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
vsrSvsFramerAudioCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerAudioCells.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerAudioCells.setDescription('This attribute counts the total number of cells containing audio data received from the interface while the channel was seized. A CCS channel is always considered to be seized. Audio data includes cells containing voice as well modem audio, but not silence. A cell contains 44 bytes of data from the DS0 channel(5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
vsrSvsFramerSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerSilenceCells.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerSilenceCells.setDescription('This attribute counts the total number of cells containing silence data received from the interface which was not forwarded into the network, thus saving bandwidth. A channel may go into silence due to the operation of the silence suppression feature or for CAS channels when the ABCD signalling bits go idle. A cell contains 44 bytes of data from the DS0 channel(5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
vsrSvsFramerModemCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerModemCells.setStatus('obsolete')
if mibBuilder.loadTexts: vsrSvsFramerModemCells.setDescription('This attribute is migrated into modemFaxCells.')
vsrSvsFramerCurrentEncodingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerCurrentEncodingRate.setStatus('obsolete')
if mibBuilder.loadTexts: vsrSvsFramerCurrentEncodingRate.setDescription('This attribute has been migrated to currentRate in Operational group.')
vsrSvsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerLrcErrors.setDescription('This attribute counts the number of frames received from the network with LRC errors.')
vsrSvsFramerFrmLostInNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerFrmLostInNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmLostInNetwork.setDescription('This attribute counts the number of frames which the service knows it did not receive from the network although they were sent in to the network from the far end.')
vsrSvsFramerFrmUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerFrmUnderRuns.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmUnderRuns.setDescription('This attribute counts the number of times that a frame was needed but was not available because it had been delayed too long in the network. This error may occur repeatedly if the interface clocks at the two access points to the network are operating at different rates.')
vsrSvsFramerFrmDumped = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerFrmDumped.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmDumped.setDescription('This attribute counts the number of frames which have been dumped because the output queue grew too large. This can occur if the clock rate on the incoming interface is faster than the clock rate on the outgoing interface and there are no silence periods to absorb the difference, or when a compression rate change occurs. This count wraps to zero after reaching its maximum value.')
vsrSvsFramerModemSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerModemSilenceCells.setStatus('obsolete')
if mibBuilder.loadTexts: vsrSvsFramerModemSilenceCells.setDescription('This attribute is migrated into faxIdleCells.')
vsrSvsFramerCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerCurrentEncoding.setStatus('obsolete')
if mibBuilder.loadTexts: vsrSvsFramerCurrentEncoding.setDescription('This attribute has been migrated to currentEncoding in Operational group.')
vsrSvsFramerTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("rejected", 1), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerTptStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vsrSvsFramerTptStatus.setDescription('This attribute has been migrated to tptStatus in Operational group.')
vsrSvsFramerFaxRelayCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerFaxRelayCells.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFaxRelayCells.setDescription('This attribute counts the total number of fax relay cells sent to the network. This counter wraps to zero after reaching its maximum value.')
vsrSvsFramerModemFaxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerModemFaxCells.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerModemFaxCells.setDescription('This attribute counts the total number of cells containing modem data received from the interface while the channel was seized. A CCS channel is always considered to be seized. Cells are considered to be modem data if a constant energy level above -25 dBmO is detected for more than 900 ms. An energy level below -36 dBmO for more than 650 ms is required to detect that the modem is no longer present. A cell contains 44 bytes of data from the DS0 channel (5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
vsrSvsFramerFaxIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 15, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerFaxIdleCells.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFaxIdleCells.setDescription('This attribute counts the total number of cells containing silent fax data received from the interface which were not forwarded into the network, thus saving bandwidth. A channel may go into silence due to the silence Suppression feature or for CAS channels when the ABCD signalling bits go idle. A cell contains 44 bytes of data from the DS0 channel (5.5 ms). This flow is measured before compression is performed on the channel. This counter wraps to zero after reaching its maximum value.')
vsrSvsFramerOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 16), )
if mibBuilder.loadTexts: vsrSvsFramerOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerOperTable.setDescription('This group contains the operational data for a Svs Framer.')
vsrSvsFramerOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"))
if mibBuilder.loadTexts: vsrSvsFramerOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerOperEntry.setDescription('An entry in the vsrSvsFramerOperTable.')
vsrSvsFramerOpCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerOpCurrentEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerOpCurrentEncoding.setDescription('This attribute indicates the encoding currently being performed on this channel. g711 indicates that pulse code modulation (PCM) defined by ITU-T G.711 is being performed. g726 indicates that adaptive differential pulse code modulation (ADPCM) defined by ITU-T G.726 is being performed. g728 indicates that the Low Delay Coded Excited Linear Predictive Coder (LD-CELP) algorithm defined by ITU-T G.728 is being performed. g729 indicates that the Conjunctive Structure Algebraic Code Excited Linear Predictive Coder (CS-ACELP) algorithm defined by ITU-T G.729 is being performed. v27 indicates that the algorithm defined by ITU-T V.27 is being performed. v29 indicates that the algorithm defined by ITU-T V.29 is being performed.')
vsrSvsFramerCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerCurrentRate.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerCurrentRate.setDescription('This attribute indicates the current encoding rate for frames being sent to the network.')
vsrSvsFramerOpTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerOpTptStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerOpTptStatus.setDescription('This attribute indicates the current status of the tandem pass through algorithm. If tptStatus is operating, the tandem pass through algorithm is cutting through a voice switch. If tptStatus is monitoring, negotiatedTandemPassThrough is enabled, but the tandem pass through algorithm is not cutting through a voice switch. If tptStatus is disabled, negotiatedTandemPassThrough is disabled.')
vsrSvsFramerNegTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 17), )
if mibBuilder.loadTexts: vsrSvsFramerNegTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNegTable.setDescription('This group contains the attributes indicating the results of voice networking end to end negotiation.')
vsrSvsFramerNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"))
if mibBuilder.loadTexts: vsrSvsFramerNegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNegEntry.setDescription('An entry in the vsrSvsFramerNegTable.')
vsrSvsFramerNegotiatedSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedSilenceSuppression.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedSilenceSuppression.setDescription('This attribute indicates the result of negotiating silence suppression with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp silenceSuppression. If negotiatedSilenceSuppression is off, silence suppression is never performed. If negotiatedSilenceSuppression is on, silence suppression is always performed. If negotiatedSilenceSuppression is congested, silence suppression is performed only when the network is congested. If negotiatedSilenceSuppression is slow, silence suppression begins after 10 to 20 seconds without any speech or audio being detected. If negotiatedSilenceSuppression is slowAndCongested, both the slow and congested options are applied.')
vsrSvsFramerNegotiatedFisG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedFisG711G726.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedFisG711G726.setDescription('This attribute indicates the result of negotiating G.711/G.726 fax idle suppression with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp faxIdleSuppressionG711G726.')
vsrSvsFramerNegotiatedDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedDtmfRegeneration.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedDtmfRegeneration.setDescription('This attribute indicates the result of negotiating DTMF regeneration with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp dtmfRegeneration. If negotiatedDtmfRegeneration is on, DTMF tones received from the link are first converted to digits before being sent to the subnet. When a digit is received from the subnet, its respective DTMF tone is generated before being sent to the link. If negotiatedDtmfRegeneration is off, DTMF tones are transported transparently.')
vsrSvsFramerNegotiatedV17AsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedV17AsG711G726.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedV17AsG711G726.setDescription('This attribute indicates how this SwitchedVoiceService negotiates with V.17 fax machines, as determined by negotiation with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp v17EncodedAsG711G726. If negotiatedV17AsG711G726 is no, V.17 fax machines are instructed to use V.29, and V.29 fax traffic sent by fax machines is demodulated and encoded using fax relay. If negotiatedV17AsG711G726 is yes, V.17 fax machines are permitted to use V.17 and V.17 fax traffic sent by fax machines is encoded using G.711 or G.726, at the rates given in negotiatedRates.')
vsrSvsFramerNegotiatedTandemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedTandemPassThrough.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNegotiatedTandemPassThrough.setDescription('This attribute indicates the result of negotiating tandem pass through with the remote end across the subnet. The parameter used for negotiating with the remote end is provisioned in Vncs Vp tandemPassThrough.')
vsrSvsFramerFrmToNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 315), )
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkTable.setDescription('This attribute counts the number of frames sent to the network at each encoding rate. Fax relay cells are not included.')
vsrSvsFramerFrmToNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 315, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerFrmToNetworkIndex"))
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkEntry.setDescription('An entry in the vsrSvsFramerFrmToNetworkTable.')
vsrSvsFramerFrmToNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 315, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkIndex.setDescription('This variable represents the vsrSvsFramerFrmToNetworkTable specific index for the vsrSvsFramerFrmToNetworkTable.')
vsrSvsFramerFrmToNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 315, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkValue.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmToNetworkValue.setDescription('This variable represents an individual value for the vsrSvsFramerFrmToNetworkTable.')
vsrSvsFramerFrmFromNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 316), )
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkTable.setDescription('This attribute counts the number of frames received from the network at each encoding rate.')
vsrSvsFramerFrmFromNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 316, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerFrmFromNetworkIndex"))
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkEntry.setDescription('An entry in the vsrSvsFramerFrmFromNetworkTable.')
vsrSvsFramerFrmFromNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 316, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkIndex.setDescription('This variable represents the vsrSvsFramerFrmFromNetworkTable specific index for the vsrSvsFramerFrmFromNetworkTable.')
vsrSvsFramerFrmFromNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 316, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkValue.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerFrmFromNetworkValue.setDescription('This variable represents an individual value for the vsrSvsFramerFrmFromNetworkTable.')
vsrSvsFramerNEncodingTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 467), )
if mibBuilder.loadTexts: vsrSvsFramerNEncodingTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNEncodingTable.setDescription('This attribute indicates the results of negotiating audio call encodings for voice, modemFax and fax traffic with the remote end across the subnet. The parameters used for negotiating with the remote end are provisioned in Vncs Vp voiceEncodingChoice and Vncs Vp modemFaxEncodingChoice. voice traffic is all traffic from the start of a call or speech until a 2100 Hz tone or call release. modemFax traffic is all traffic after a 2100 Hz tone but before a fax preamble, speech or call release. fax traffic is all traffic after a fax preamble but before speech or call release. g711 indicates that pulse code modulation (PCM) defined by ITU-T G.711 is the negotiated encoding. g726 indicates that Adaptive Differential Pulse Code Modulation (ADPCM) defined by ITU-T G.726 is the negotiated encoding. g711G726 indicates that pulse code modulation (PCM) defined by ITU-T G.711 and Adaptive Differential Pulse Code Modulation (ADPCM) defined by ITU-T G.726 are both negotiated encodings. If negotiatedEncoding is g711G726, the actual encoding performed can be either G.711 or G.726, depending on network congestion. g728 indicates that Low Delay Coded Excited Linear Predictive Coder (CS-ACELP) defined by ITU-T G.728 is the negotiated encoding. g729 indicates that Conjunctive Structure Algebraic Code Excited Linear Predictive Coder (CS-ACELP) defined by ITU-T G.729 is the negotiated encoding. v29V27Relay indicates that fax relay using ITU-T V.27 or ITU-T V.29 is the negotiated encoding. v17V29V27Relay indicates that fax relay using ITU-T V.17, ITU-T V.27, or ITU-T V.29 is the negotiated encoding. If all negotiated encodings are none, the negotiation of audio call encodings is not complete.')
vsrSvsFramerNEncodingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 467, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerNEncodingIndex"))
if mibBuilder.loadTexts: vsrSvsFramerNEncodingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNEncodingEntry.setDescription('An entry in the vsrSvsFramerNEncodingTable.')
vsrSvsFramerNEncodingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 467, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: vsrSvsFramerNEncodingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNEncodingIndex.setDescription('This variable represents the vsrSvsFramerNEncodingTable specific index for the vsrSvsFramerNEncodingTable.')
vsrSvsFramerNEncodingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 467, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 31, 64, 68, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g726", 4), ("g711", 5), ("g711G726", 31), ("v29V27Relay", 64), ("v17V29V27Relay", 68), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsFramerNEncodingValue.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNEncodingValue.setDescription('This variable represents an individual value for the vsrSvsFramerNEncodingTable.')
vsrSvsFramerNRatesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 479), )
if mibBuilder.loadTexts: vsrSvsFramerNRatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNRatesTable.setDescription('This attribute indicates the results of negotiating minimum and maximum rates for voice, modemFax and fax traffic with the remote end across the subnet. The parameters used for negotiating with the remote end are provisioned in Vncs Vp voiceRates and Vncs Vp modemFaxRates.')
vsrSvsFramerNRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 479, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerNRatesTrafficIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerNRatesRateIndex"))
if mibBuilder.loadTexts: vsrSvsFramerNRatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNRatesEntry.setDescription('An entry in the vsrSvsFramerNRatesTable.')
vsrSvsFramerNRatesTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 479, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: vsrSvsFramerNRatesTrafficIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNRatesTrafficIndex.setDescription('This variable represents the next to last index for the vsrSvsFramerNRatesTable.')
vsrSvsFramerNRatesRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 479, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("min", 0), ("max", 1))))
if mibBuilder.loadTexts: vsrSvsFramerNRatesRateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNRatesRateIndex.setDescription('This variable represents the final index for the vsrSvsFramerNRatesTable.')
vsrSvsFramerNRatesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 479, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("n00", 0), ("n03", 1), ("n12", 2), ("n24", 3), ("n48", 4), ("n72", 5), ("n96", 6), ("n120", 7), ("n144", 8), ("n80", 66), ("n160", 67), ("n240", 68), ("n320", 69), ("n640", 70)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsFramerNRatesValue.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerNRatesValue.setDescription('This variable represents an individual value for the vsrSvsFramerNRatesTable.')
vsrSvsFramerVfpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 5))
vsrSvsFramerVfpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 5, 1), )
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugRowStatusTable.setDescription('This entry controls the addition and deletion of vsrSvsFramerVfpDebug components.')
vsrSvsFramerVfpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerVfpDebugIndex"))
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugRowStatusEntry.setDescription('A single entry in the table represents a single vsrSvsFramerVfpDebug component.')
vsrSvsFramerVfpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrSvsFramerVfpDebug components. These components cannot be added nor deleted.')
vsrSvsFramerVfpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrSvsFramerVfpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugStorageType.setDescription('This variable represents the storage type value for the vsrSvsFramerVfpDebug tables.')
vsrSvsFramerVfpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerVfpDebugIndex.setDescription('This variable represents the index for the vsrSvsFramerVfpDebug tables.')
vsrSvsFramerMvpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 6))
vsrSvsFramerMvpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 6, 1), )
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugRowStatusTable.setDescription('This entry controls the addition and deletion of vsrSvsFramerMvpDebug components.')
vsrSvsFramerMvpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerMvpDebugIndex"))
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugRowStatusEntry.setDescription('A single entry in the table represents a single vsrSvsFramerMvpDebug component.')
vsrSvsFramerMvpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrSvsFramerMvpDebug components. These components cannot be added nor deleted.')
vsrSvsFramerMvpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrSvsFramerMvpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugStorageType.setDescription('This variable represents the storage type value for the vsrSvsFramerMvpDebug tables.')
vsrSvsFramerMvpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerMvpDebugIndex.setDescription('This variable represents the index for the vsrSvsFramerMvpDebug tables.')
vsrSvsFramerPcmCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 7))
vsrSvsFramerPcmCaptureRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 7, 1), )
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureRowStatusTable.setDescription('This entry controls the addition and deletion of vsrSvsFramerPcmCapture components.')
vsrSvsFramerPcmCaptureRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsFramerPcmCaptureIndex"))
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureRowStatusEntry.setDescription('A single entry in the table represents a single vsrSvsFramerPcmCapture component.')
vsrSvsFramerPcmCaptureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrSvsFramerPcmCapture components. These components cannot be added nor deleted.')
vsrSvsFramerPcmCaptureComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrSvsFramerPcmCaptureStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureStorageType.setDescription('This variable represents the storage type value for the vsrSvsFramerPcmCapture tables.')
vsrSvsFramerPcmCaptureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 2, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsFramerPcmCaptureIndex.setDescription('This variable represents the index for the vsrSvsFramerPcmCapture tables.')
vsrSvsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3))
vsrSvsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 1), )
if mibBuilder.loadTexts: vsrSvsLCoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRowStatusTable.setDescription('This entry controls the addition and deletion of vsrSvsLCo components.')
vsrSvsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsLCoIndex"))
if mibBuilder.loadTexts: vsrSvsLCoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRowStatusEntry.setDescription('A single entry in the table represents a single vsrSvsLCo component.')
vsrSvsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrSvsLCo components. These components cannot be added nor deleted.')
vsrSvsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrSvsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoStorageType.setDescription('This variable represents the storage type value for the vsrSvsLCo tables.')
vsrSvsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsrSvsLCoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoIndex.setDescription('This variable represents the index for the vsrSvsLCo tables.')
vsrSvsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10), )
if mibBuilder.loadTexts: vsrSvsLCoPathDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathDataTable.setDescription('This group contains all operational attributes for the path oriented LCo.')
vsrSvsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsLCoIndex"))
if mibBuilder.loadTexts: vsrSvsLCoPathDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathDataEntry.setDescription('An entry in the vsrSvsLCoPathDataTable.')
vsrSvsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoState.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoState.setDescription('This attribute reflects the current state of the connection. The pathDown state indicates a connection that has no remote end provisioned or the application has not yet signalled for a path. The selectingRoute state occurs when a request has been sent to route selector and it has not yet responded. The connectingState occurs while a path is being established. The pathUp state is the normal operational state of a path. The pathDownRetrying state indicates a path that attempted route selection but received no route and is now waiting to retry route selection again.')
vsrSvsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsrSvsLCoOverrideRemoteName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoOverrideRemoteName.setDescription("If set and the current PLC remoteName is blank this remoteName will override the blank PLC remoteName. Usually you would set this attribute and then lock/unlock the service component which will result in this new overrideRemoteName being used as if it had been provisioned into the PLC remoteName. The advantage of this attribute is that the connection's remoteName can be changed immediately without having to 'activate prov' but the disadvantage is that the overrideRemoteName is not permanent and if the card or switch is reset the override will be lost.")
vsrSvsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoEnd.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoEnd.setDescription('This attribute identifies whether this is the calling or called end of the path.')
vsrSvsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoCostMetric.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoCostMetric.setDescription("This attribute gives the route's total cost metric. It is calculated as the sum of the cost metric of all trunks in the path at the time the connection was established. The cost metric of a trunk is defined by the trunkCost attribute of the Trunk component. The costMetric for an LCo that is originated and terminated on the same module is 0.")
vsrSvsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoDelayMetric.setDescription('This attribute gives the total delay of the route as the one way delay for a 512 byte packet. It is calculated as the sum of the delays of all trunks in the path stored in topology at the time the connection was established. The delay for an LCo that is originated and terminated on the same module is 0.')
vsrSvsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRoundTripDelay.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRoundTripDelay.setDescription('This attribute contains the time taken for a packet (cell) of 44 bytes to be transmitted to the remote LCo and return to this LCo. The number reported is given in milliseconds to the nearest millisecond. A value of one millisecond is reported if the time is less than 1 millisecond even though the delay may be less than 1 Millisecond when the LCo is originated and terminated on the same module.')
vsrSvsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoSetupPriority.setDescription('This attribute gives the priority at which the current path is established. Zero is the highest priority and four is the lowest. The holdingPriority, a complementary attribute of this component, indicates the priority a path maintains once it is established.')
vsrSvsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoHoldingPriority.setDescription('This attribute gives the priority at which a path holds its current path once the path is established. Zero is the highest priority and four is the lowest. The setupPriority, a complementary attribute, indicates the priority of a path at establishment time.')
vsrSvsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRequiredTxBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRequiredTxBandwidth.setDescription('This attribute gives the actual bandwidth (in bits per second) reserved by this path on each of the trunks of its route. This attribute represents the bandwidth for traffic outgoing to the remote end point. The originating end of the connection determines this value.')
vsrSvsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRequiredRxBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRequiredRxBandwidth.setDescription('This attribute gives the actual bandwidth (in bits per second) reserved by this path on each of trunks of its route. This attribute represents the bandwidth for traffic incoming from the remote end point. The originating end of the connection determines this value')
vsrSvsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRequiredTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRequiredTrafficType.setDescription('This operational attribute indicates the type of traffic transmitted over the path. There are eight possible traffic types, and the path can transmit only one of them. The originating end of the connection determines the type. These are arbitrary designations for traffic type. The voice, data and video traffic types are defined, and five other arbitrary traffic types can be defined by the network administration. This attribute is used in the route selection process to restrict the route to trunks that support this traffic type. The supportedTrafficType trunk attribute lists all the types of traffic allowed on the trunk. For example, if requiredTrafficType is specified as trafficType1 then only trunks that include trafficType1 in supportedTrafficType, will be candidates for this connection.')
vsrSvsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPermittedTrunkTypes.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPermittedTrunkTypes.setDescription("This operational attribute lists up to eight types of trunk that can be used on the route. The originating end of the connection determines the types. The terrestrial and satellite trunk types have been defined, leaving six remaining arbitrary types that can be defined by the network administration. The trunk's type is indicated in the trunkType attribute of the Trunk component. When selecting a route, PORS only chooses trunks whose trunkType are in the permittedTrunkTypes for the path. Description of bits: terrestrial(0) satellite(1) trunkType1(2) trunkType2(3) trunkType3(4) trunkType4(5) trunkType5(6) trunkType6(7)")
vsrSvsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRequiredSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRequiredSecurity.setDescription("This attribute indicates the required minimum level of security of the trunks on the route. Zero represents the most secure and seven represents the least secure. The trunk's security is indicated by the trunkSecurity attribute of the Trunk component, and has values identical in range and meaning to the requiredSecurity attribute. PORS ensures that any route selected does not contain a trunk whose trunkSecurity attribute is numerically greater than the requiredSecurity.")
vsrSvsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRequiredCustomerParameter.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRequiredCustomerParameter.setDescription('This attribute indicates the allowed customer defined parameter of the trunks on the route.The originating end of the connection determines the customer defined parameter. Its value, a number from zero to seven, is chosen by a network administration to have a meaning specific to their network, thus allowing them to customize the use of their trunks. A complementary trunk attribute, customerParameter, also has a value from zero to seven. The route selection process does not consider trunks whose customerParameter is greater than the requiredCustomerParameter of the path.')
vsrSvsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoEmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoEmissionPriority.setDescription('This attribute indicates the urgency with which packets on the path are emitted by the trunks on the route. The originating end of the connection selects the emissionPriority. EmissionPriority of zero indicates the highest emission priority, while two indicates the lowest emission priority. Packets with a higher emissionPriority (or numerically less) are serviced and sent out before the packets of lower emissionPriority (or numerically higher).')
vsrSvsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoDiscardPriority.setDescription('This attribute indicates the importance of the packets on the path.The originating end of the connection sets discardPriority. One is used for paths carrying the most important traffic, and three is used for paths carrying the least important traffic. Packets with lower discardPriority(numerically lower) are discarded after packets with a higher discardPriority(numerically higher).')
vsrSvsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPathType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathType.setDescription('This attribute indicates whether the path for this PLC was determined automatically or by static provisioning. Normal pathTypes are selected automatically by Route Selector.The other pathTypes are both manual pathTypes where the operator must specify, through provisioning, a static route termed the manualPath. A manual pathType connection is nearly identical to a normal path type connection with the exception that the route is pre-provisioned. For a manual pathType, bandwidth reservations are respected along the path exactly as in a normal path. The last type, the forced pathType, is also a manual path but regardless of the bandwidth available the route is granted provided the trunks are operational and there are sufficient Logical Channels (LChs). The forced pathType could result in over committing the reserved bandwidth allowed on a trunk. A better way to achieve the effects of a forced pathType is to use a manual pathType with setupPriority = 0 and holdingPriority = 0. In this manner the path will reserve correct bandwidth and it will bump other paths if required while not being bumped itself.')
vsrSvsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoRetryCount.setDescription('This attribute is the count of the number of times the path chosen during route selection could not be instantiated. This count should be three or below if the network is performing adequately. A high value indicates that the route selection is often performed using an out-of-date view of available network bandwidth and/or topology. This attribute will only increase at the calling end of the connection. This attribute is reset each time a path reconnects and stops counting when it reaches its maximum value.')
vsrSvsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPathFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathFailureCount.setDescription('This attribute is the count of the number of times the path has successfully connected. It is set to zero the first time the path is up. If a path fails anytime after connecting this count will be incremented when the path is up again. Failed route requests do not count in this statistic. See retryCount above. This attribute stops counting at its maximum value.')
vsrSvsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoReasonForNoRoute.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoReasonForNoRoute.setDescription("This attribute is the route selection's reasonForNoRoute and provides a brief reason for which a route was not selected. The reasons are essentially self-explanatory. Perhaps two reasons for no route require some explanation. The reason unknownRemoteNodeName is issued when the remote node name is not in the topological database. The reason plcAttributesNotMet is issued when there is no network connectivity at a level specified by the PLC attributes. This reason is also issued when there is no physical connectivity between two end nodes.")
vsrSvsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoLastTearDownReason.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoLastTearDownReason.setDescription("This attribute reflects the last tear down reason for a connection (LCo). In many cases this displays the reason for a momentary service interruption. This attribute applies to the last path failure only. If a path is no longer up, this may give an indication to the reason that the path has failed. In many cases an alarm will also be generated with more specific information. The following is a brief description of the reasons: none - This path has no information for the teardown this is typical of a path provisioned with no remoteName that has not been up. normalShutDown - This path has gone down due to normal call termination. insufficientTxLcOrBandwidth - At present there is either no available bandwidth or logical channel numbers available on one or more of the trunks for this path in the transmit direction. insufficientRxLcOrBandwidth - At present there is either no available bandwidth or logical channel numbers available on one or more of the trunks for this path in the receive direction. trunkFailure- A trunk on the path has failed or has gone down due to a provisioning change of a critical attribute. trunkCardFailure- A trunk FP card has failed along the path. accessCardFailure- The FP on which the peer access service was running has failed. operatorForced- The path has terminated due to the operator locking a trunk along the path. lostLcnClash- The path has terminated because the PA's at both ends of an intermediate trunk have allocated the same LC to different calls. When this happens both calls must go down and then try to come up again a fraction of a second later (effectively ensuring that they will now be assigned different LC's). It is normal to get the odd clash especially when the PA's usedLC is approaching the PA's maxLC. networkCongestion - The path has failed due to control information being lost and not recoverable. trunkNotFound - Occurs on a manual path usually. Check for trunks not up or names provisioned incorrectly. farEndNotFound - The far end is not provisioned or is not up. Check remote Name. wrongModuleReached - This may occur on a manual path. Check provisioning for correct trunk and service names. For a normal path, the network Topology may be changing check remoteName. farEndBusy - The far end has been reached but it is busy. Check remoteName and remote end provisioning. callLoopedBack - This LCo is provisioned to call itself. Re- provision since this is invalid. unknownReason - The failure was not resolved. farEndNotReady - The remote end was reached but the connection was refused due to the remote end not being enabled. remoteNameMismatch - The remote end has alarmed and rejected this setup due to remoteName provisioning. serviceTypeMismatch - The remote Service Type does not match this service type. Check provisioning. reconnectFromFarEnd - The remote end re-established this connection. Check the remote end lastTearDownReason to determine the real reason. bumped - Another call bumped this path from a trunk to get bandwidth (or an LC) which it required to come up. This other path had a higher setupPriority than this path's holdingPriority hence it was allowed to steal the bandwidth (or LC) from this path. optimized - This call has been rerouted due to the optimization feature. The call is still active this just indicates why the path changed. trunkOrFarEndDidNotSupportMode - This call was unable to complete because a mode required by the service was not supported by one of the trunks the route went through or by the far end service it connected to. Currently the only mode that this applies to is the map/mux mode on TRUNK PA ATM component. Map mode was required by the application (CES/FrAtm etc.) but was not available on the TRUNK PA ATM component through which the call was routed or the far end CES/FrAtm component did not specify the same mode.")
vsrSvsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPathFailureAction.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathFailureAction.setDescription('This attribute displays whether the application is set to tolerate momentary interruption of a path while a new path is selected. If disconnectConnection is displayed, the application is informed as soon as possible about a failure by disconnection. If the attribute displays reRoutePath, the path may attempt an immediate reroute, provided the failure is a recoverable failure. If rerouting fails the application is informed of the failure. With this option set to reRoutePath the LCo may wait up to 30 seconds before informing the service of complete disconnection in order to allow both ends to attempt to reconnect. Note that if PLC components are different at both ends only the calling end is allowed to reconnect. All pathTypes respect this attribute. Also on a manualPath with both ends provisioned with independent paths (at least with respect to the failure) this option will have the desired effect that the path is rerouted without complete disconnection at both ends')
vsrSvsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoBumpPreference.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoBumpPreference.setDescription("This attribute specifies when bumping will occur during route selection process. Bumping may occur when necessary or always. It will be necessary for a connection to bump if there is not enough resources for the connection to be established and these resources are occupied by a connection whose setupPriority is lower (numerically higher) than the connection's setupPriority. A connection may also always bump in order to obtain the best route.")
vsrSvsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoOptimization.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoOptimization.setDescription('This attribute is used to specify whether this connection should attempt to optimize its path when requested by the routing PORS component. Every path is as optimal as it can be when it is established, but as network traffic patterns and configurations change this path may no longer be as optimal as it could be. The PORS connection manager on a module requests circuits to optimize at the optimization interval.')
vsrSvsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPathUpDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathUpDateTime.setDescription('This is the time stamp when the current path was established or reestablished.')
vsrSvsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 11), )
if mibBuilder.loadTexts: vsrSvsLCoStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoStatsTable.setDescription('This group contains the operational statistics attributes for the path oriented LCo.')
vsrSvsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsLCoIndex"))
if mibBuilder.loadTexts: vsrSvsLCoStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoStatsEntry.setDescription('An entry in the vsrSvsLCoStatsTable.')
vsrSvsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPktsToNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPktsToNetwork.setDescription('This attribute counts the number of packets transmitted to the network over this Logical Connection.')
vsrSvsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoBytesToNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoBytesToNetwork.setDescription('This attribute counts the number of bytes sent to the network over this Logical Connection.')
vsrSvsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPktsFromNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPktsFromNetwork.setDescription('This attribute counts the number of packets received from the remote LCo via the network.')
vsrSvsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoBytesFromNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoBytesFromNetwork.setDescription('This attribute counts the number of bytes received from the remote LCo via the network.')
vsrSvsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 264), )
if mibBuilder.loadTexts: vsrSvsLCoPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathTable.setDescription('This attribute contains the trunk component names over which the path has been instantiated and the remote end point name terminating the path.')
vsrSvsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 264, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsLCoIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsLCoPathValue"))
if mibBuilder.loadTexts: vsrSvsLCoPathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathEntry.setDescription('An entry in the vsrSvsLCoPathTable.')
vsrSvsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 3, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsLCoPathValue.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsLCoPathValue.setDescription('This variable represents both the value and the index for the vsrSvsLCoPathTable.')
vsrSvsDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 4))
vsrSvsDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 4, 1), )
if mibBuilder.loadTexts: vsrSvsDebugRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsDebugRowStatusTable.setDescription('This entry controls the addition and deletion of vsrSvsDebug components.')
vsrSvsDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrSvsDebugIndex"))
if mibBuilder.loadTexts: vsrSvsDebugRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsDebugRowStatusEntry.setDescription('A single entry in the table represents a single vsrSvsDebug component.')
vsrSvsDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsDebugRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsDebugRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrSvsDebug components. These components cannot be added nor deleted.')
vsrSvsDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsDebugComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsDebugComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrSvsDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrSvsDebugStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsDebugStorageType.setDescription('This variable represents the storage type value for the vsrSvsDebug tables.')
vsrSvsDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 2, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsrSvsDebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrSvsDebugIndex.setDescription('This variable represents the index for the vsrSvsDebug tables.')
vsrDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 3))
vsrDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 3, 1), )
if mibBuilder.loadTexts: vsrDebugRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vsrDebugRowStatusTable.setDescription('This entry controls the addition and deletion of vsrDebug components.')
vsrDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrIndex"), (0, "Nortel-Magellan-Passport-VoiceNetworkingMIB", "vsrDebugIndex"))
if mibBuilder.loadTexts: vsrDebugRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vsrDebugRowStatusEntry.setDescription('A single entry in the table represents a single vsrDebug component.')
vsrDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrDebugRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vsrDebugRowStatus.setDescription('This variable is used as the basis for SNMP naming of vsrDebug components. These components cannot be added nor deleted.')
vsrDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrDebugComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vsrDebugComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vsrDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsrDebugStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vsrDebugStorageType.setDescription('This variable represents the storage type value for the vsrDebug tables.')
vsrDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 117, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vsrDebugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vsrDebugIndex.setDescription('This variable represents the index for the vsrDebug tables.')
voiceNetworkingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 1))
voiceNetworkingGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 1, 5))
voiceNetworkingGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 1, 5, 2))
voiceNetworkingGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 1, 5, 2, 2))
voiceNetworkingCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 3))
voiceNetworkingCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 3, 5))
voiceNetworkingCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 3, 5, 2))
voiceNetworkingCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 109, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VoiceNetworkingMIB", vRouteAcctIndex=vRouteAcctIndex, sigChanICmapReqChanOrCircNotAvailCause=sigChanICmapReqChanOrCircNotAvailCause, vsrSvsFramerStateEntry=vsrSvsFramerStateEntry, sigChanSnmpOperStatus=sigChanSnmpOperStatus, vsrSvsOperStatusTable=vsrSvsOperStatusTable, vRouteAcctAccountingOptions=vRouteAcctAccountingOptions, vsrDebug=vsrDebug, vsrSvsUsageState=vsrSvsUsageState, vsrSvsFramerIndex=vsrSvsFramerIndex, vsrSvsLCoRowStatusEntry=vsrSvsLCoRowStatusEntry, vRouteDegradedSubroutesEntry=vRouteDegradedSubroutesEntry, vRouteAcctServiceExchange=vRouteAcctServiceExchange, vsrSvsStateEntry=vsrSvsStateEntry, sigChanRowStatusEntry=sigChanRowStatusEntry, vsrPeakActiveChannels=vsrPeakActiveChannels, vsrSvsLCoBumpPreference=vsrSvsLCoBumpPreference, sigChanSubroutesTable=sigChanSubroutesTable, sigChanICmapRowStatus=sigChanICmapRowStatus, vsrSvsFramerNegotiatedFisG711G726=vsrSvsFramerNegotiatedFisG711G726, sigChanDegradedSubroutesEntry=sigChanDegradedSubroutesEntry, vsrSvsLCoComponentName=vsrSvsLCoComponentName, vRouteInterfaceRowStatus=vRouteInterfaceRowStatus, vsrSvsStatsEntry=vsrSvsStatsEntry, vsrSvsLCoOverrideRemoteName=vsrSvsLCoOverrideRemoteName, sigChanICmap=sigChanICmap, vRouteCallsClearedOutOfService=vRouteCallsClearedOutOfService, vsrSvsFramerNEncodingEntry=vsrSvsFramerNEncodingEntry, vRouteStorageType=vRouteStorageType, voiceNetworkingCapabilitiesBE=voiceNetworkingCapabilitiesBE, vsrSvsFramerPcmCapture=vsrSvsFramerPcmCapture, vsrSvsFramerPcmCaptureStorageType=vsrSvsFramerPcmCaptureStorageType, vRouteInterfaceEchoCancellation=vRouteInterfaceEchoCancellation, vRouteInterfaceFaxHangoverTimeG711G726=vRouteInterfaceFaxHangoverTimeG711G726, vsrDebugComponentName=vsrDebugComponentName, vRouteDnaHgmHgAddrRowStatusTable=vRouteDnaHgmHgAddrRowStatusTable, sigChanSubroutesValue=sigChanSubroutesValue, sigChanDegradedSubroutesTable=sigChanDegradedSubroutesTable, vsrSvsLCoRowStatusTable=vsrSvsLCoRowStatusTable, vsrSvsStateTable=vsrSvsStateTable, vsrSvsFramerVfpDebugComponentName=vsrSvsFramerVfpDebugComponentName, vsrSvsFramerNEncodingIndex=vsrSvsFramerNEncodingIndex, vRouteInterfaceProvTable=vRouteInterfaceProvTable, vRouteDnaHgmMaxAvailableChannels=vRouteDnaHgmMaxAvailableChannels, vRouteOverrideDirectoryNumber=vRouteOverrideDirectoryNumber, vRouteSubroutesValue=vRouteSubroutesValue, vsrSvsFramerRowStatusTable=vsrSvsFramerRowStatusTable, sigChanICmapChanOrCircNotAvailCause=sigChanICmapChanOrCircNotAvailCause, vsrSvsStorageType=vsrSvsStorageType, vRouteCallsRejected=vRouteCallsRejected, vsrSvsFramerStateTable=vsrSvsFramerStateTable, vRouteDebugRowStatusTable=vRouteDebugRowStatusTable, vRouteInterfaceIngressAudioGain=vRouteInterfaceIngressAudioGain, sigChanOperStatusTable=sigChanOperStatusTable, vRouteSubroutesEntry=vRouteSubroutesEntry, vsrSvsFramerAudioCells=vsrSvsFramerAudioCells, vsrSvsDebugIndex=vsrSvsDebugIndex, vsrActiveTptChannels=vsrActiveTptChannels, sigChanNcasComponentName=sigChanNcasComponentName, vsrStorageType=vsrStorageType, vsrSvsCallingNumber=vsrSvsCallingNumber, vsrSvsFramerOperTable=vsrSvsFramerOperTable, vsrSvsFramerFrmFromNetworkEntry=vsrSvsFramerFrmFromNetworkEntry, sigChanBchRowStatusEntry=sigChanBchRowStatusEntry, vRouteHuntingAlgorithm=vRouteHuntingAlgorithm, vRouteOperStatusEntry=vRouteOperStatusEntry, vsrCallsRejectedByFarEnd=vsrCallsRejectedByFarEnd, sigChanCidDataTable=sigChanCidDataTable, vsrSvsLCoPathFailureCount=vsrSvsLCoPathFailureCount, sigChanBch=sigChanBch, vsrTotalFailedCallsFromIf=vsrTotalFailedCallsFromIf, vRouteSubroutesTable=vRouteSubroutesTable, vRouteAcctRowStatusEntry=vRouteAcctRowStatusEntry, sigChanGwRequiredConversions=sigChanGwRequiredConversions, vsrSvsFramerFrmToNetworkValue=vsrSvsFramerFrmToNetworkValue, vsrSvsLCoRequiredRxBandwidth=vsrSvsLCoRequiredRxBandwidth, vsrSvsFramerVfpDebug=vsrSvsFramerVfpDebug, sigChanGwUnsupportedConversions=sigChanGwUnsupportedConversions, sigChanNcasRowStatusEntry=sigChanNcasRowStatusEntry, sigChanStateTable=sigChanStateTable, vsrSvsFramerVfpDebugStorageType=vsrSvsFramerVfpDebugStorageType, vRouteInterfaceIndex=vRouteInterfaceIndex, vsrSvsLCoIndex=vsrSvsLCoIndex, vsrDebugRowStatusTable=vsrDebugRowStatusTable, vRouteInterfaceStructuredEchoCancellationTable=vRouteInterfaceStructuredEchoCancellationTable, vsrSvsLCoStatsEntry=vsrSvsLCoStatsEntry, sigChanBchOperTable=sigChanBchOperTable, vRouteAdminState=vRouteAdminState, vRouteDnaAddressTable=vRouteDnaAddressTable, vsrOperStatusTable=vsrOperStatusTable, sigChanIfAdminStatus=sigChanIfAdminStatus, vsrSvsFramerComponentName=vsrSvsFramerComponentName, vsrSvsFramerFrmDumped=vsrSvsFramerFrmDumped, vRouteTypeOfRoute=vRouteTypeOfRoute, vsrSvsFramerStatsTable=vsrSvsFramerStatsTable, vsrSvsRowStatusTable=vsrSvsRowStatusTable, vsrSvs=vsrSvs, vRouteIfEntryEntry=vRouteIfEntryEntry, vRouteDebugIndex=vRouteDebugIndex, vsrActiveVoiceChannels=vsrActiveVoiceChannels, sigChanGwGatewayCapIndex=sigChanGwGatewayCapIndex, sigChanICmapComponentName=sigChanICmapComponentName, vRouteAcctProvTable=vRouteAcctProvTable, vsrSvsOperationalState=vsrSvsOperationalState, sigChanICmapIntCauseTable=sigChanICmapIntCauseTable, vRouteInterfaceEchoReturnLoss=vRouteInterfaceEchoReturnLoss, vRouteComponentName=vRouteComponentName, vsrSvsDebugStorageType=vsrSvsDebugStorageType, vRouteDnaHgmHgAddrIndex=vRouteDnaHgmHgAddrIndex, vsrSvsLCoRoundTripDelay=vsrSvsLCoRoundTripDelay, vRouteIndex=vRouteIndex, vsrSvsProfileNumber=vsrSvsProfileNumber, vsrSvsFramerVfpDebugIndex=vsrSvsFramerVfpDebugIndex, vsrIfIndex=vsrIfIndex, vRouteInterfaceTandemPassThrough=vRouteInterfaceTandemPassThrough, vsrSvsLCoEnd=vsrSvsLCoEnd, sigChanIfEntryTable=sigChanIfEntryTable, vRouteDnaHgmOpTable=vRouteDnaHgmOpTable, vRouteOperStatusTable=vRouteOperStatusTable, vRouteDnaHgmHgAddrRowStatusEntry=vRouteDnaHgmHgAddrRowStatusEntry, vsrSvsFramerNEncodingTable=vsrSvsFramerNEncodingTable, sigChanNcasIndex=sigChanNcasIndex, vsrSvsFramerVfpDebugRowStatusEntry=vsrSvsFramerVfpDebugRowStatusEntry, vsrRowStatus=vsrRowStatus, vRouteDnaRowStatusEntry=vRouteDnaRowStatusEntry, vsrSvsFramerFrmToNetworkTable=vsrSvsFramerFrmToNetworkTable, vsrAdminState=vsrAdminState, sigChanBchStorageType=sigChanBchStorageType, vRouteDnaHgmUsageDeltaUpdateThreshold=vRouteDnaHgmUsageDeltaUpdateThreshold, vsrCommentText=vsrCommentText, vsrSvsFramerPcmCaptureRowStatusEntry=vsrSvsFramerPcmCaptureRowStatusEntry, sigChanSubroutesEntry=sigChanSubroutesEntry, sigChanGwGatewayCapEntry=sigChanGwGatewayCapEntry, vRouteIfIndex=vRouteIfIndex, sigChanOctothorpeEod=sigChanOctothorpeEod, vRouteAcctComponentName=vRouteAcctComponentName, vsrOperEntry=vsrOperEntry, vRouteDnaHgmHgAddrRowStatus=vRouteDnaHgmHgAddrRowStatus, sigChanGwRowStatusTable=sigChanGwRowStatusTable, vRouteRowStatusEntry=vRouteRowStatusEntry, sigChan=sigChan, vsrActiveFaxRelayChannels=vsrActiveFaxRelayChannels, sigChanComponentName=sigChanComponentName, vsrActiveModemChannels=vsrActiveModemChannels, vsrSvsCalledNumber=vsrSvsCalledNumber, vsrSvsFramerLrcErrors=vsrSvsFramerLrcErrors, vsrSvsLCoBytesFromNetwork=vsrSvsLCoBytesFromNetwork, voiceNetworkingGroupBE01A=voiceNetworkingGroupBE01A, vRouteMinimumDigitsToRoute=vRouteMinimumDigitsToRoute, vRouteAcctAccountCollection=vRouteAcctAccountCollection, sigChanGwGwcEntry=sigChanGwGwcEntry, vsrPeakActiveModemChannels=vsrPeakActiveModemChannels, vRouteDegradedSubroutesValue=vRouteDegradedSubroutesValue, vsrSvsRowStatus=vsrSvsRowStatus, vsrStatsTable=vsrStatsTable, vsr=vsr, sigChanICmapStorageType=sigChanICmapStorageType, vsrSvsOperEntry=vsrSvsOperEntry, vsrIndex=vsrIndex, vsrSvsFramerRowStatus=vsrSvsFramerRowStatus, vsrSvsLCoRequiredTrafficType=vsrSvsLCoRequiredTrafficType, sigChanBchVsrInstance=sigChanBchVsrInstance, vRouteCustomerIdentifier=vRouteCustomerIdentifier, vsrSvsFramerVfpDebugRowStatusTable=vsrSvsFramerVfpDebugRowStatusTable, vsrTotalCallsFromIf=vsrTotalCallsFromIf, voiceNetworkingCapabilitiesBE01A=voiceNetworkingCapabilitiesBE01A, vRouteDnaHgmIfTable=vRouteDnaHgmIfTable, vsrSvsLCoPktsFromNetwork=vsrSvsLCoPktsFromNetwork, vsrSvsFramerRowStatusEntry=vsrSvsFramerRowStatusEntry, sigChanICmapRowStatusEntry=sigChanICmapRowStatusEntry, vRouteDnaHgmAvailabilityDelta=vRouteDnaHgmAvailabilityDelta, vsrSvsLCoStorageType=vsrSvsLCoStorageType, vRouteInterfaceStructuredEchoCancellationEntry=vRouteInterfaceStructuredEchoCancellationEntry, vsrSvsLCoPathType=vsrSvsLCoPathType, vsrSvsComponentName=vsrSvsComponentName, vsrCallsRejectedLocally=vsrCallsRejectedLocally, vsrSvsStatus=vsrSvsStatus, vRouteInterfaceEchoTailDelay=vRouteInterfaceEchoTailDelay, sigChanICmapEgressLinkOutOfServCause=sigChanICmapEgressLinkOutOfServCause, vsrSvsLCoLastTearDownReason=vsrSvsLCoLastTearDownReason, vsrDebugRowStatus=vsrDebugRowStatus, vsrPeakActiveVoiceChannels=vsrPeakActiveVoiceChannels, vsrDebugIndex=vsrDebugIndex, vsrSvsFramerFrmToNetworkIndex=vsrSvsFramerFrmToNetworkIndex, vRouteDnaHgmIndex=vRouteDnaHgmIndex, vsrSvsFramerNRatesTrafficIndex=vsrSvsFramerNRatesTrafficIndex, vsrSvsFramerModemCells=vsrSvsFramerModemCells, vRouteDiallingPlan1=vRouteDiallingPlan1, vRouteAcctDigitsSuppressed=vRouteAcctDigitsSuppressed, sigChanNcasRowStatusTable=sigChanNcasRowStatusTable, vsrSvsFramerMvpDebugRowStatusEntry=vsrSvsFramerMvpDebugRowStatusEntry, vsrSvsFramerMvpDebugIndex=vsrSvsFramerMvpDebugIndex, vRouteInterfaceComfortNoiseCap=vRouteInterfaceComfortNoiseCap, vsrSvsLCoRequiredTxBandwidth=vsrSvsLCoRequiredTxBandwidth, sigChanRowStatusTable=sigChanRowStatusTable, vRouteIfAdminStatus=vRouteIfAdminStatus, sigChanICmapIncompatDestCause=sigChanICmapIncompatDestCause, vsrSvsIfEntryEntry=vsrSvsIfEntryEntry, vRouteAcctRowStatus=vRouteAcctRowStatus, vsrSvsFramerMvpDebugRowStatus=vsrSvsFramerMvpDebugRowStatus, voiceNetworkingCapabilities=voiceNetworkingCapabilities, vsrVoiceRoute=vsrVoiceRoute, sigChanGw=sigChanGw, vRouteDnaNumberingPlanIndicator=vRouteDnaNumberingPlanIndicator, sigChanUsageState=sigChanUsageState, voiceNetworkingMIB=voiceNetworkingMIB, sigChanICmapTempFailureCause=sigChanICmapTempFailureCause, vsrSvsFramerVfpDebugRowStatus=vsrSvsFramerVfpDebugRowStatus, vsrDebugStorageType=vsrDebugStorageType, vsrSvsFramerNRatesEntry=vsrSvsFramerNRatesEntry, sigChanICmapNoSuchChannelCause=sigChanICmapNoSuchChannelCause, vsrSvsLCoPermittedTrunkTypes=vsrSvsLCoPermittedTrunkTypes, vsrSvsFramerNRatesValue=vsrSvsFramerNRatesValue, vRouteInterfaceStructuredEchoCancellationValue=vRouteInterfaceStructuredEchoCancellationValue, vsrSvsFramerFrmFromNetworkValue=vsrSvsFramerFrmFromNetworkValue, vsrUsageState=vsrUsageState, vRouteDnaDataNetworkAddress=vRouteDnaDataNetworkAddress, sigChanSubroutesRowStatus=sigChanSubroutesRowStatus, vRouteDnaHgmHgAddrAddrTable=vRouteDnaHgmHgAddrAddrTable, sigChanGwRowStatusEntry=sigChanGwRowStatusEntry, vsrOperStatusEntry=vsrOperStatusEntry, vsrSvsFramerPcmCaptureIndex=vsrSvsFramerPcmCaptureIndex, vsrSvsDebugRowStatusTable=vsrSvsDebugRowStatusTable, vsrSvsFramerMvpDebugRowStatusTable=vsrSvsFramerMvpDebugRowStatusTable, vRouteProvEntry=vRouteProvEntry, sigChanNcasStorageType=sigChanNcasStorageType, vsrSvsLCoBytesToNetwork=vsrSvsLCoBytesToNetwork, vRouteStateEntry=vRouteStateEntry, vRouteDnaHgm=vRouteDnaHgm, vsrSvsLCoPathTable=vsrSvsLCoPathTable, vRouteInterfaceModemFaxSpeechDiscrim=vRouteInterfaceModemFaxSpeechDiscrim, vsrSvsLCoRowStatus=vsrSvsLCoRowStatus, sigChanGwStatsTable=sigChanGwStatsTable, vsrSvsDebugRowStatus=vsrSvsDebugRowStatus, vRouteTotalCallsFromSubnet=vRouteTotalCallsFromSubnet, vRouteInterfaceProvEntry=vRouteInterfaceProvEntry, sigChanGwGwcTable=sigChanGwGwcTable, vsrSvsFramerMvpDebug=vsrSvsFramerMvpDebug, vsrAddressResolutionFailedCalls=vsrAddressResolutionFailedCalls, vRouteDnaStorageType=vRouteDnaStorageType, vRouteDna=vRouteDna, vRouteDnaRowStatus=vRouteDnaRowStatus, vRouteInterfaceStructuredEchoCancellationIndex=vRouteInterfaceStructuredEchoCancellationIndex, vsrSvsFramerAdminState=vsrSvsFramerAdminState, vRouteAcctStorageType=vRouteAcctStorageType, vRouteDnaHgmHgAddr=vRouteDnaHgmHgAddr, vsrStateEntry=vsrStateEntry, vRouteCommentText=vRouteCommentText, vsrRowStatusEntry=vsrRowStatusEntry, vRouteDnaHgmRowStatus=vRouteDnaHgmRowStatus, vsrIfEntryTable=vsrIfEntryTable, sigChanGwGwcIndex=sigChanGwGwcIndex, vsrSvsLCoOptimization=vsrSvsLCoOptimization, vsrSvsFramerOpTptStatus=vsrSvsFramerOpTptStatus, vsrSvsFramerUsageState=vsrSvsFramerUsageState)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-VoiceNetworkingMIB", vsrSvsLCoPktsToNetwork=vsrSvsLCoPktsToNetwork, sigChanGwIndex=sigChanGwIndex, vRouteInterfaceComponentName=vRouteInterfaceComponentName, vsrSvsFramerCurrentEncodingRate=vsrSvsFramerCurrentEncodingRate, sigChanDefaultNpiTon=sigChanDefaultNpiTon, vsrSvsFramerFrmFromNetworkTable=vsrSvsFramerFrmFromNetworkTable, sigChanGwRowStatus=sigChanGwRowStatus, vsrPeakActiveTptChannels=vsrPeakActiveTptChannels, vRouteDnaHgmHgAddrAddrEntry=vRouteDnaHgmHgAddrAddrEntry, sigChanNcasCallReference=sigChanNcasCallReference, sigChanGwGatewayCapValue=sigChanGwGatewayCapValue, voiceNetworkingGroupBE=voiceNetworkingGroupBE, sigChanICmapServNotAllowedCause=sigChanICmapServNotAllowedCause, vsrSvsFramerOpCurrentEncoding=vsrSvsFramerOpCurrentEncoding, vsrSvsTotalCallSeconds=vsrSvsTotalCallSeconds, vsrSvsLCoRequiredSecurity=vsrSvsLCoRequiredSecurity, vsrSvsLCoHoldingPriority=vsrSvsLCoHoldingPriority, vsrSvsLCoDiscardPriority=vsrSvsLCoDiscardPriority, sigChanGwStorageType=sigChanGwStorageType, vsrCidDataTable=vsrCidDataTable, vRouteCallsClearedNoChannel=vRouteCallsClearedNoChannel, vRouteInterfaceEgressAudioGain=vRouteInterfaceEgressAudioGain, vsrSvsLCo=vsrSvsLCo, vRouteInterfaceRowStatusEntry=vRouteInterfaceRowStatusEntry, vsrSvsLCoPathValue=vsrSvsLCoPathValue, sigChanForceNpiTon=sigChanForceNpiTon, sigChanNcasOperTable=sigChanNcasOperTable, vRouteVoiceNetworkingCallServer=vRouteVoiceNetworkingCallServer, sigChanNcasDuration=sigChanNcasDuration, vsrOperTable=vsrOperTable, vRouteDnaRowStatusTable=vRouteDnaRowStatusTable, vsrSvsOperStatusEntry=vsrSvsOperStatusEntry, vsrSvsFramerProvEntry=vsrSvsFramerProvEntry, sigChanNcasCalledDirectoryNumber=sigChanNcasCalledDirectoryNumber, sigChanCidDataEntry=sigChanCidDataEntry, vsrSvsLCoSetupPriority=vsrSvsLCoSetupPriority, sigChanProvEntry=sigChanProvEntry, vsrSvsFramerModemFaxCells=vsrSvsFramerModemFaxCells, sigChanCustomerIdentifier=sigChanCustomerIdentifier, vsrProvEntry=vsrProvEntry, vsrIfEntryEntry=vsrIfEntryEntry, vRouteDebugComponentName=vRouteDebugComponentName, vsrSvsLCoPathFailureAction=vsrSvsLCoPathFailureAction, sigChanBchCalledDirectoryNumber=sigChanBchCalledDirectoryNumber, vsrSvsFramerFrmFromNetworkIndex=vsrSvsFramerFrmFromNetworkIndex, vsrSvsIfAdminStatus=vsrSvsIfAdminStatus, vsrSvsFramerMvpDebugStorageType=vsrSvsFramerMvpDebugStorageType, sigChanIfIndex=sigChanIfIndex, vsrSnmpOperStatus=vsrSnmpOperStatus, vsrSvsFramerMvpDebugComponentName=vsrSvsFramerMvpDebugComponentName, vsrStateTable=vsrStateTable, vsrActiveChannels=vsrActiveChannels, vRouteAcctProvEntry=vRouteAcctProvEntry, vsrSvsFramerTptStatus=vsrSvsFramerTptStatus, vsrSvsLCoDelayMetric=vsrSvsLCoDelayMetric, vsrSvsFramerNegEntry=vsrSvsFramerNegEntry, vsrSvsIfEntryTable=vsrSvsIfEntryTable, sigChanNcasDirection=sigChanNcasDirection, sigChanOperStatusEntry=sigChanOperStatusEntry, vsrAddressIncompleteCalls=vsrAddressIncompleteCalls, vsrInvalidNumberingPlanCalls=vsrInvalidNumberingPlanCalls, vsrPathSetupTimeOutCalls=vsrPathSetupTimeOutCalls, vRouteAcctRowStatusTable=vRouteAcctRowStatusTable, vsrSvsFramerPcmCaptureRowStatus=vsrSvsFramerPcmCaptureRowStatus, vsrSvsAdminState=vsrSvsAdminState, vsrSvsLCoPathUpDateTime=vsrSvsLCoPathUpDateTime, sigChanICmapSwitchCongestCause=sigChanICmapSwitchCongestCause, vsrSvsStatsTable=vsrSvsStatsTable, vsrSvsLCoStatsTable=vsrSvsLCoStatsTable, vsrProvTable=vsrProvTable, vsrSvsDebug=vsrSvsDebug, sigChanBchStatus=sigChanBchStatus, sigChanStateEntry=sigChanStateEntry, vRouteDnaHgmIfEntry=vRouteDnaHgmIfEntry, vsrCustomerIdentifier=vsrCustomerIdentifier, sigChanBchIndex=sigChanBchIndex, vRouteUsageState=vRouteUsageState, vsrSvsFramerFaxIdleCells=vsrSvsFramerFaxIdleCells, vsrSignallingChannel=vsrSignallingChannel, sigChanBchOperEntry=sigChanBchOperEntry, vsrDebugRowStatusEntry=vsrDebugRowStatusEntry, vRouteCidDataTable=vRouteCidDataTable, vsrSvsClearCauseCode=vsrSvsClearCauseCode, vsrSvsFramerNegotiatedTandemPassThrough=vsrSvsFramerNegotiatedTandemPassThrough, vsrSvsFramerFaxRelayCells=vsrSvsFramerFaxRelayCells, sigChanGwGwcValue=sigChanGwGwcValue, vsrPeakActiveFaxRelayChannels=vsrPeakActiveFaxRelayChannels, sigChanBchTimeSlot=sigChanBchTimeSlot, sigChanStorageType=sigChanStorageType, vsrSvsIndex=vsrSvsIndex, vsrSvsLCoRequiredCustomerParameter=vsrSvsLCoRequiredCustomerParameter, vsrSvsFramerTotalCells=vsrSvsFramerTotalCells, vRouteInterfaceRowStatusTable=vRouteInterfaceRowStatusTable, sigChanBchComponentName=sigChanBchComponentName, vRouteDebugRowStatus=vRouteDebugRowStatus, sigChanNcasRowStatus=sigChanNcasRowStatus, vRouteDnaComponentName=vRouteDnaComponentName, vsrSvsFramerInterfaceName=vsrSvsFramerInterfaceName, vsrSvsLCoReasonForNoRoute=vsrSvsLCoReasonForNoRoute, vRouteStateTable=vRouteStateTable, sigChanOperationalState=sigChanOperationalState, vRouteDiallingPlan0=vRouteDiallingPlan0, vRouteDnaHgmHgAddrStorageType=vRouteDnaHgmHgAddrStorageType, sigChanICmapIntCauseEntry=sigChanICmapIntCauseEntry, vRouteStatsEntry=vRouteStatsEntry, vRouteAcctAccountClass=vRouteAcctAccountClass, sigChanRowStatus=sigChanRowStatus, vsrSvsFramerNEncodingValue=vsrSvsFramerNEncodingValue, vRouteInterfaceSpeechHangoverTime=vRouteInterfaceSpeechHangoverTime, vRouteRowStatus=vRouteRowStatus, vRouteDebugRowStatusEntry=vRouteDebugRowStatusEntry, vsrSvsFramerNegotiatedSilenceSuppression=vsrSvsFramerNegotiatedSilenceSuppression, vsrSvsFramerModemSilenceCells=vsrSvsFramerModemSilenceCells, vRouteInterfaceEcanBypassMode=vRouteInterfaceEcanBypassMode, vRouteDnaIndex=vRouteDnaIndex, sigChanAdminState=sigChanAdminState, sigChanBchRowStatus=sigChanBchRowStatus, vRouteSubroutesRowStatus=vRouteSubroutesRowStatus, vRouteCidDataEntry=vRouteCidDataEntry, vsrSvsRowStatusEntry=vsrSvsRowStatusEntry, sigChanNcasOperEntry=sigChanNcasOperEntry, vsrStatsEntry=vsrStatsEntry, vsrSvsFramerNegotiatedV17AsG711G726=vsrSvsFramerNegotiatedV17AsG711G726, vsrCidDataEntry=vsrCidDataEntry, vsrActiveDataChannels=vsrActiveDataChannels, vsrSvsFramerPcmCaptureRowStatusTable=vsrSvsFramerPcmCaptureRowStatusTable, vRouteIfEntryTable=vRouteIfEntryTable, vsrSvsLCoState=vsrSvsLCoState, vsrSvsFramerNegTable=vsrSvsFramerNegTable, vRouteProvTable=vRouteProvTable, vRoute=vRoute, sigChanCommentText=sigChanCommentText, sigChanICmapIndex=sigChanICmapIndex, vsrPathAttributesNotMetCalls=vsrPathAttributesNotMetCalls, vsrSvsCallType=vsrSvsCallType, vsrSvsFramerOperEntry=vsrSvsFramerOperEntry, sigChanIndex=sigChanIndex, vRouteDnaHgmHgAddrNumberingPlanIndicator=vRouteDnaHgmHgAddrNumberingPlanIndicator, vRouteInterfaceStorageType=vRouteInterfaceStorageType, vsrSvsFramerFrmLostInNetwork=vsrSvsFramerFrmLostInNetwork, vsrSvsLCoPathEntry=vsrSvsLCoPathEntry, vsrSvsLCoPathDataEntry=vsrSvsLCoPathDataEntry, voiceNetworkingGroupBE01=voiceNetworkingGroupBE01, vsrSvsOperTable=vsrSvsOperTable, vRouteDnaHgmRowStatusTable=vRouteDnaHgmRowStatusTable, vRouteInterface=vRouteInterface, sigChanGwGatewayCapTable=sigChanGwGatewayCapTable, vRouteDegradedSubroutesTable=vRouteDegradedSubroutesTable, vsrSvsFramerCurrentEncoding=vsrSvsFramerCurrentEncoding, vsrPeakActiveDataChannels=vsrPeakActiveDataChannels, vRouteDnaHgmHgAddrDataNetworkAddress=vRouteDnaHgmHgAddrDataNetworkAddress, vRouteSnmpOperStatus=vRouteSnmpOperStatus, vsrSvsLCoEmissionPriority=vsrSvsLCoEmissionPriority, vRouteDnaHgmHgAddrComponentName=vRouteDnaHgmHgAddrComponentName, vRouteDnaHgmAvailableChannels=vRouteDnaHgmAvailableChannels, vRouteAcct=vRouteAcct, vsrSvsFramerStorageType=vsrSvsFramerStorageType, vsrSvsFramerFrmToNetworkEntry=vsrSvsFramerFrmToNetworkEntry, voiceNetworkingGroup=voiceNetworkingGroup, vRouteDiallingPlan2=vRouteDiallingPlan2, vRouteOperationalState=vRouteOperationalState, voiceNetworkingCapabilitiesBE01=voiceNetworkingCapabilitiesBE01, sigChanIfEntryEntry=sigChanIfEntryEntry, vRouteDebugStorageType=vRouteDebugStorageType, vsrSvsIfIndex=vsrSvsIfIndex, vsrSvsFramerNRatesRateIndex=vsrSvsFramerNRatesRateIndex, vsrSvsLCoRetryCount=vsrSvsLCoRetryCount, vsrSvsSnmpOperStatus=vsrSvsSnmpOperStatus, vsrSvsTotalCalls=vsrSvsTotalCalls, vsrSvsFramerFrmUnderRuns=vsrSvsFramerFrmUnderRuns, vsrSvsFramerPcmCaptureComponentName=vsrSvsFramerPcmCaptureComponentName, vsrSvsFramerSilenceCells=vsrSvsFramerSilenceCells, sigChanProvTable=sigChanProvTable, vsrSvsFramerOperationalState=vsrSvsFramerOperationalState, vRouteDnaHgmRowStatusEntry=vRouteDnaHgmRowStatusEntry, vsrSvsFramerProvTable=vsrSvsFramerProvTable, sigChanICmapResourceUnavailCause=sigChanICmapResourceUnavailCause, vsrSvsDebugRowStatusEntry=vsrSvsDebugRowStatusEntry, vRouteDnaHgmStorageType=vRouteDnaHgmStorageType, vsrSvsFramerStatsEntry=vsrSvsFramerStatsEntry, vRoutePrivateNetworkIdentifer=vRoutePrivateNetworkIdentifer, sigChanBchRowStatusTable=sigChanBchRowStatusTable, vsrSvsFramer=vsrSvsFramer, vsrIfAdminStatus=vsrIfAdminStatus, vRouteDebug=vRouteDebug, vsrComponentName=vsrComponentName, sigChanGwComponentName=sigChanGwComponentName, vsrRowStatusTable=vsrRowStatusTable, vsrSvsLCoPathDataTable=vsrSvsLCoPathDataTable, vRouteDnaHgmOpEntry=vRouteDnaHgmOpEntry, vRouteDnaAddressEntry=vRouteDnaAddressEntry, sigChanGwStatsEntry=sigChanGwStatsEntry, vsrSvsFramerCurrentRate=vsrSvsFramerCurrentRate, vRouteDnaHgmComponentName=vRouteDnaHgmComponentName, vsrSvsFramerNegotiatedDtmfRegeneration=vsrSvsFramerNegotiatedDtmfRegeneration, sigChanICmapRowStatusTable=sigChanICmapRowStatusTable, vsrSvsLCoCostMetric=vsrSvsLCoCostMetric, sigChanNcas=sigChanNcas, vsrSvsFramerNRatesTable=vsrSvsFramerNRatesTable, sigChanDegradedSubroutesValue=sigChanDegradedSubroutesValue, vRouteRowStatusTable=vRouteRowStatusTable, vsrSvsDebugComponentName=vsrSvsDebugComponentName, vRouteStatsTable=vRouteStatsTable, vsrOperationalState=vsrOperationalState)
