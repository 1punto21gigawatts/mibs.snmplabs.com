#
# PySNMP MIB module CISCO-SELECTIVE-VRF-DOWNLOAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SELECTIVE-VRF-DOWNLOAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
MplsL3VpnName, = mibBuilder.importSymbols("MPLS-L3VPN-STD-MIB", "MplsL3VpnName")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Integer32, Bits, IpAddress, TimeTicks, NotificationType, Counter64, MibIdentifier, Counter32, Unsigned32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Integer32", "Bits", "IpAddress", "TimeTicks", "NotificationType", "Counter64", "MibIdentifier", "Counter32", "Unsigned32", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp")
ciscoSelectiveVrfDownloadMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 775))
ciscoSelectiveVrfDownloadMIB.setRevisions(('2011-06-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSelectiveVrfDownloadMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSelectiveVrfDownloadMIB.setLastUpdated('201106220000Z')
if mibBuilder.loadTexts: ciscoSelectiveVrfDownloadMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSelectiveVrfDownloadMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSelectiveVrfDownloadMIB.setDescription('This MIB module defines objects describing selective VRF download. The selective VRF download feature makes a best effort to download only those prefixes and labels to a physical entity required to forward traffic through the physical entity. The feature accomplishes this by characterizing roles for physical entities baed on their configuration. Following terminology is introduced with selective VRF download feature: Core Facing A physical entity which has only core facing interfaces (interfaces that connect to other Provider/Provider Edge devices). Customer Facing A line physical entity which has one or more customer facing interfaces (interfaces that connect to Customer Edge devices in different VRFs). Local prefix A prefix that is received from a Customer edge device connected to the router in a configured VRF context. Remote prefix A prefix received from another Provider Edge device and is imported to a configured VRF. See the following references for futher information: RFC 3813 - Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information base (MIB), C. Srinivasan, A. Vishwanathan, and T. Nadeau, June 2004 RFC 4382 - MPLS/BGP Layer 3 Virtual Private Network (VPN) Management Information Base, T. Nadeau & van Der Linde, February 2006 Acronyms: VRF Virtual Routing and Forwarding VPN Virtual Private Network P Provider Core Device PE Provider Edge Device CE Customer Edge Device AFI Address Family Identifier CEF Cisco Express Forwarding')
ciscoSelectiveVrfDownloadMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 775, 0))
ciscoSelectiveVrfDownloadMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 775, 1))
ciscoSelectiveVrfDownloadMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 775, 2))
class SVDEntityRole(TextualConvention, Integer32):
    description = "This textual convention denotes the role of a physical entity with respect to selective VRF download feature. 'invalid': The role of the physical entity is unknown, unconfigured, or the selective VRF download feature has yet to calculate it. 'standard': The role of the physical entity has interfaces configured in the default table and other VRF tables. The selective VRF download feature downloads all VRFs and prefixes to the physical entity. 'core': The role of the physical entity only has interfaces configured in the default table. The selective VRF download feature downloads all VRFs and local customer prefixes to the physical entity. 'customer': The role of the physical entity only has interfaces configured in VRF tables other than the default. The selective VRF download feature downloads all prefixes for locally provisioned VRFs. 'noInterest': The role of the physical entity does not have interfaces configured in any VRF tables. The selective VRF download feature does not download any prefixes to the physical entity. 'vpnOnlyCustomer': The role of the physical entity is for VPN-only customers (i.e., customers that do not need access to global routes). The selective VRF download feature downloads provisioned VRFs to the physical entity, and it filters all BGP routes from the default table."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("invalid", 1), ("standard", 2), ("core", 3), ("customer", 4), ("noInterest", 5), ("vpnOnlyCustomer", 6))

csvdAdminEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csvdAdminEnable.setStatus('current')
if mibBuilder.loadTexts: csvdAdminEnable.setDescription('This object specifies the desired state of selective VRF download feature. When a managed system initializes, it starts with csvdAdminEnable in the true(1) state. As a result of either explicit management action or per configuration information retained by the managed system, csvdAdminEnable is then changed to false(2) state (or remains in the true(1) state.')
csvdOperEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdOperEnable.setStatus('current')
if mibBuilder.loadTexts: csvdOperEnable.setDescription('This object indicates the current operational state of selective VRF download feature. If csvdAdminEnable is changed then csvdOperEnable should change to the same value after the external action is triggered. As an external action implementations may require router reload or switchover of the route-processor for the change to take effect.')
csvdEntityRoleChangeNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csvdEntityRoleChangeNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: csvdEntityRoleChangeNotificationEnable.setDescription('This object specifies whether the system generates the csvdEntityRoleChangeNotification.')
csvdCounterDiscontinuityTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: csvdCounterDiscontinuityTime.setDescription('This object indicates the value of sysUpTime on the most recent occasion at which selective VRF download counters suffered a discontinuity. The relevant counters are the instances of any Counter32 objects contained in csvdStateTable. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
csvdStateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 5), )
if mibBuilder.loadTexts: csvdStateTable.setStatus('current')
if mibBuilder.loadTexts: csvdStateTable.setDescription('This table lists the state relating to the selective VRF download feature for each physical entity capable of forwarding packets. This table has an expansion dependent relationship on the entPhysicalTable, containing zero or more rows each row in the entPhysicalEntity. If the physical entity is capable of forwarding packets, it contains a row for each address family it supports.')
csvdStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdStateAFI"))
if mibBuilder.loadTexts: csvdStateEntry.setStatus('current')
if mibBuilder.loadTexts: csvdStateEntry.setDescription('An entry describes state relating to the selective VRF download feature. The system creates an entry each for each supported AFI when a new physical entity capable of forwarding packets becomes operational. The system destroys all the entries associated with the physical entity when it goes away.')
csvdStateAFI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 5, 1, 1), AddressFamilyNumbers())
if mibBuilder.loadTexts: csvdStateAFI.setStatus('current')
if mibBuilder.loadTexts: csvdStateAFI.setDescription('This object indicates the AFI for which the row pertains.')
csvdStateEntityRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 5, 1, 2), SVDEntityRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csvdStateEntityRole.setStatus('current')
if mibBuilder.loadTexts: csvdStateEntityRole.setDescription('This object specifies the selective VRF download role of the physical entity. It can be updated based on interface to VRF association change or ip-address assignment to an interface belonging to the physical entity. For example:- - if no interfaces on a physical entity have IPv4 address configured, then it would be in Customer Facing Role for IPv4 address family. - if no interfaces on a physical entity have IPv6 address configured, then it would be in Not Interested Role for IPv6 address family. - now if the user adds an IPv4 address to an interface in default VRF, then the physical entity would turn Core-Facing for IPv4 AFI. - if the user would have added this interface in a named VRF, then the physical entity would have remained in Customer-Facing for IPv4 AFI. - if there are interfaces configured in both default VRF and named VRFs then the physical entity would turn in to Standard Role.')
csvdStateEntityRoleLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 5, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdStateEntityRoleLastChange.setStatus('current')
if mibBuilder.loadTexts: csvdStateEntityRoleLastChange.setDescription('This object indicates the value of sysUpTime the last time the corresponding instance of csvdStateEntityRole changed.')
csvdStateEntityRoleTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdStateEntityRoleTransitions.setStatus('current')
if mibBuilder.loadTexts: csvdStateEntityRoleTransitions.setDescription('This object indicates the number of times the corresponding instance of csvdStateEntityRole has changed. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the corresponding instance of csvdCounterDiscontinuityTime.')
csvdRoleHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6))
csvdRoleHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csvdRoleHistorySize.setStatus('current')
if mibBuilder.loadTexts: csvdRoleHistorySize.setDescription('This object specifies the maximum number of rows the csvdRoleHistoryTable can contain at any given time. If the role changes and the csvdRoleHistoryTable already contains a number of rows equal to the value of this object, then it destroys the oldest row before creating a new one.')
csvdRoleHistoryLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdRoleHistoryLastIndex.setStatus('current')
if mibBuilder.loadTexts: csvdRoleHistoryLastIndex.setDescription('This object indicates the value of csvdRoleHistoryIndex corresponding to the last row created in the csvdRoleHistoryTable.')
csvdRoleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6, 3), )
if mibBuilder.loadTexts: csvdRoleHistoryTable.setStatus('current')
if mibBuilder.loadTexts: csvdRoleHistoryTable.setDescription('This table lists the role change history per address family (ipv4 and ipv6) for each physical entity capable of forwarding packets. This table has an expansion dependant relationship on csvdStateTable, containing zero or more rows for each row in csvdStateTable.')
csvdRoleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdStateAFI"), (0, "CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdRoleHistoryIndex"))
if mibBuilder.loadTexts: csvdRoleHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: csvdRoleHistoryEntry.setDescription('An entry describes a change in the role of a physical entity.')
csvdRoleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csvdRoleHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: csvdRoleHistoryIndex.setDescription('This object indicates an arbitrary integer-value uniquely identifying the entry.')
csvdRoleHistoryRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6, 3, 1, 2), SVDEntityRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdRoleHistoryRole.setStatus('current')
if mibBuilder.loadTexts: csvdRoleHistoryRole.setDescription('This object indicates the selective VRF download role for a given history index.')
csvdRoleHistoryRoleChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 6, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdRoleHistoryRoleChangeTime.setStatus('current')
if mibBuilder.loadTexts: csvdRoleHistoryRoleChangeTime.setDescription('This object indicates the value of sysUpTime when entry was created.')
csvdVrfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 7), )
if mibBuilder.loadTexts: csvdVrfTable.setStatus('current')
if mibBuilder.loadTexts: csvdVrfTable.setDescription('This table lists VRF tables selectively downloaded to each physical entity capable of forwarding packets. This table has an expansion dependent relationship on the csvdStateTable, containing zero or more rows for each address family supported by each physical entity capable of forwarding packets.')
csvdVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdStateAFI"), (0, "CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdVrfName"))
if mibBuilder.loadTexts: csvdVrfEntry.setStatus('current')
if mibBuilder.loadTexts: csvdVrfEntry.setDescription('An entry describes a VRF selectively downloaded to a physical entity capable of forwarding packets. The system creates an entry when the selective VRF download feature determines that a physical entity requires a VRF. The system destroys an entry when the selective VRF download feature determines that a physical entity does not require a VRF.')
csvdVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 7, 1, 1), MplsL3VpnName())
if mibBuilder.loadTexts: csvdVrfName.setReference("T. Nadeau and H. van der Linde, 'MPLS/BGP Layer 3 Virtual Private Network (VPN) Management Information Base', RFC-4382, February 2006.")
if mibBuilder.loadTexts: csvdVrfName.setStatus('current')
if mibBuilder.loadTexts: csvdVrfName.setDescription('This object indicates the name of the VRF.')
csvdPrefixCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdPrefixCount.setStatus('current')
if mibBuilder.loadTexts: csvdPrefixCount.setDescription('This object indicates the total number of prefixes downloaded from the VRF table. The value of this object may not equal to the sum of the values of the corresponding instance of csvdLocalPrefixCount and csvdRemotePrefixCount, as the VRF table may have special internal prefixes to support the CEF implementation.')
csvdLocalPrefixCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdLocalPrefixCount.setStatus('current')
if mibBuilder.loadTexts: csvdLocalPrefixCount.setDescription('This object indicates the number of local prefixes downloaded from the VRF table.')
csvdRemotePrefixCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdRemotePrefixCount.setStatus('current')
if mibBuilder.loadTexts: csvdRemotePrefixCount.setDescription('This object indicates the number of remote prefixes downloaded from the VRF table.')
csvdTableConvergedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 775, 1, 7, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csvdTableConvergedFlag.setStatus('current')
if mibBuilder.loadTexts: csvdTableConvergedFlag.setDescription('This object indicates whether the VRF table has converged. Once all the prefixes for the VRF table have been updated and downloaded, convergence is complete. The flag is set to false when the VRF is created initially or selectively downloaded to the physical entity. Once the initial download of all the prefixes for the VRF to the physical entity completes, the flag is set to true.')
csvdEntityRoleChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 775, 0, 1)).setObjects(("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdStateEntityRole"))
if mibBuilder.loadTexts: csvdEntityRoleChangeNotification.setStatus('current')
if mibBuilder.loadTexts: csvdEntityRoleChangeNotification.setDescription('This notification is sent when the role of the physical entity for a given address family changes. csvdStateEntityRole indicates the role the entity is transitioning to.')
csvdMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 775, 2, 1))
csvdMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 775, 2, 2))
csvdMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 775, 2, 1, 1)).setObjects(("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdMIBGroup"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdMIBNotificationEnableGroup"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdMIBNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csvdMIBCompliance = csvdMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: csvdMIBCompliance.setDescription('The compliance statement for entities which implement the MIB')
csvdMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 775, 2, 2, 1)).setObjects(("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdAdminEnable"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdOperEnable"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdCounterDiscontinuityTime"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdStateEntityRole"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdStateEntityRoleLastChange"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdStateEntityRoleTransitions"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdRoleHistorySize"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdRoleHistoryLastIndex"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdRoleHistoryRole"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdRoleHistoryRoleChangeTime"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdPrefixCount"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdLocalPrefixCount"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdRemotePrefixCount"), ("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdTableConvergedFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csvdMIBGroup = csvdMIBGroup.setStatus('current')
if mibBuilder.loadTexts: csvdMIBGroup.setDescription('A collection of objects providing selective VRF download feature state information to a NMS agent.')
csvdMIBNotificationEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 775, 2, 2, 2)).setObjects(("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdEntityRoleChangeNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csvdMIBNotificationEnableGroup = csvdMIBNotificationEnableGroup.setStatus('current')
if mibBuilder.loadTexts: csvdMIBNotificationEnableGroup.setDescription('A collection of objects for controlling (enabling/disabling) selective VRF download feature notifications to a NMS agent.')
csvdMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 775, 2, 2, 3)).setObjects(("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", "csvdEntityRoleChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csvdMIBNotificationGroup = csvdMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: csvdMIBNotificationGroup.setDescription('A collection of notifications used for monitoring selective VRF download feature state.')
mibBuilder.exportSymbols("CISCO-SELECTIVE-VRF-DOWNLOAD-MIB", csvdRemotePrefixCount=csvdRemotePrefixCount, SVDEntityRole=SVDEntityRole, csvdVrfTable=csvdVrfTable, PYSNMP_MODULE_ID=ciscoSelectiveVrfDownloadMIB, ciscoSelectiveVrfDownloadMIBConform=ciscoSelectiveVrfDownloadMIBConform, csvdRoleHistoryTable=csvdRoleHistoryTable, csvdVrfEntry=csvdVrfEntry, csvdMIBNotificationEnableGroup=csvdMIBNotificationEnableGroup, csvdLocalPrefixCount=csvdLocalPrefixCount, csvdStateEntry=csvdStateEntry, ciscoSelectiveVrfDownloadMIBObjects=ciscoSelectiveVrfDownloadMIBObjects, csvdOperEnable=csvdOperEnable, csvdStateEntityRoleLastChange=csvdStateEntityRoleLastChange, csvdRoleHistoryIndex=csvdRoleHistoryIndex, ciscoSelectiveVrfDownloadMIB=ciscoSelectiveVrfDownloadMIB, csvdVrfName=csvdVrfName, csvdStateEntityRole=csvdStateEntityRole, csvdStateAFI=csvdStateAFI, csvdRoleHistoryEntry=csvdRoleHistoryEntry, csvdRoleHistoryRole=csvdRoleHistoryRole, csvdEntityRoleChangeNotification=csvdEntityRoleChangeNotification, csvdAdminEnable=csvdAdminEnable, csvdRoleHistoryLastIndex=csvdRoleHistoryLastIndex, csvdTableConvergedFlag=csvdTableConvergedFlag, csvdMIBGroups=csvdMIBGroups, csvdStateEntityRoleTransitions=csvdStateEntityRoleTransitions, csvdPrefixCount=csvdPrefixCount, csvdMIBCompliance=csvdMIBCompliance, csvdMIBGroup=csvdMIBGroup, csvdCounterDiscontinuityTime=csvdCounterDiscontinuityTime, csvdStateTable=csvdStateTable, csvdRoleHistoryRoleChangeTime=csvdRoleHistoryRoleChangeTime, csvdEntityRoleChangeNotificationEnable=csvdEntityRoleChangeNotificationEnable, csvdMIBCompliances=csvdMIBCompliances, csvdMIBNotificationGroup=csvdMIBNotificationGroup, ciscoSelectiveVrfDownloadMIBNotifs=ciscoSelectiveVrfDownloadMIBNotifs, csvdRoleHistorySize=csvdRoleHistorySize, csvdRoleHistory=csvdRoleHistory)
