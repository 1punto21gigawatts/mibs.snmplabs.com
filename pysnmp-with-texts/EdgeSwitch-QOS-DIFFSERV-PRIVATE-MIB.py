#
# PySNMP MIB module EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:10:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, iso, Gauge32, Unsigned32, MibIdentifier, ModuleIdentity, IpAddress, Integer32, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "iso", "Gauge32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "IpAddress", "Integer32", "Counter32", "NotificationType")
StorageType, TextualConvention, RowStatus, PhysAddress, MacAddress, DisplayString, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TextualConvention", "RowStatus", "PhysAddress", "MacAddress", "DisplayString", "TruthValue", "RowPointer")
fastPathQOSDiffServPrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7))
fastPathQOSDiffServPrivate.setRevisions(('2011-01-26 00:00', '2007-11-12 00:00', '2007-05-23 00:00', '2005-06-23 00:00', '2004-10-06 00:00', '2003-11-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathQOSDiffServPrivate.setRevisionsDescriptions(('Postal address updated.', 'Deprecated outbound policy instance performance counters, added new ones.', 'Ubiquiti branding related changes.', 'Added mirror policy attribute.', 'DiffServ enhancements for EdgeSwitch Release 4.3.0.', 'Revisions made for new release.',))
if mibBuilder.loadTexts: fastPathQOSDiffServPrivate.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathQOSDiffServPrivate.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: fastPathQOSDiffServPrivate.setContactInfo('')
if mibBuilder.loadTexts: fastPathQOSDiffServPrivate.setDescription('The Ubiquiti Private MIB for EdgeSwitch DiffServ')
class QosBurstSize(TextualConvention, Unsigned32):
    description = 'The number of kilobytes (Kbytes) in a packet that may be sent in a traffic stream without regard for other traffic streams.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 128)

class IntfDirection(TextualConvention, Integer32):
    description = "IntfDirection specifies a direction of data travel on an interface. 'inbound' traffic is operated on during reception from the interface, while 'outbound' traffic is operated on prior to transmission on the interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

class EtypeValue(TextualConvention, Unsigned32):
    description = 'Ethertype value of a packet. The allowed value is 0x0600 to 0xFFFF.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1536, 65535)

class Ipv6AddressPrefix(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 address prefixes. This is a binary string of up to 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

agentDiffServGenStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1))
agentDiffServGenStatusAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDiffServGenStatusAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusAdminMode.setDescription(' DiffServ Admin Mode')
agentDiffServGenStatusClassTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableSize.setDescription(' Current size of the Class Table')
agentDiffServGenStatusClassTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableMax.setDescription(' Max size of the Class Table')
agentDiffServGenStatusClassRuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableSize.setDescription(' Current size of Class Rule Table')
agentDiffServGenStatusClassRuleTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableMax.setDescription(' Max size of the Class Rule Table.')
agentDiffServGenStatusPolicyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableSize.setDescription(' Current Size of the Policy Table.')
agentDiffServGenStatusPolicyTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableMax.setDescription(' Max size of the Policy Table')
agentDiffServGenStatusPolicyInstTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableSize.setDescription(' Current size of the Policy-Class Instance Table')
agentDiffServGenStatusPolicyInstTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableMax.setDescription(' Max size of the Policy-Class Instance Table')
agentDiffServGenStatusPolicyAttrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableSize.setDescription(' Current size of the Policy Attribute Table')
agentDiffServGenStatusPolicyAttrTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableMax.setDescription(' Max size of the Policy Attribute Table')
agentDiffServGenStatusServiceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableSize.setDescription(' Current size of the Service Table')
agentDiffServGenStatusServiceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableMax.setDescription(' Max size of the Service Table')
agentDiffServClassGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2))
agentDiffServClassIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassIndexNextFree.setDescription('This object contains an unused value for classIndex, or a zero to indicate that none exists.')
agentDiffServClassTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2), )
if mibBuilder.loadTexts: agentDiffServClassTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassTable.setDescription('A table of the DiffServ class entries')
agentDiffServClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassIndex"))
if mibBuilder.loadTexts: agentDiffServClassEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassEntry.setDescription('Represents entry for a DiffServ traffic class')
agentDiffServClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServClassIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassIndex.setDescription('The identifier for DiffServ Class entry ')
agentDiffServClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassName.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassName.setDescription('Name of the DiffServ traffic class')
agentDiffServClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("any", 2), ("acl", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassType.setDescription('The class type indicates how the individual class match criteria are evaluated. For type all, all of the individual match conditions must be true for a packet to be considered a member of the class. For types any and acl, only one of the match criteria must be true for a packet to belong to the class; multiple matching criteria are evaluated in a sequential order, with the highest precedence awarded to the first criterion defined for the class. An acl class type copies its set of match criteria from the current rule definition of the specified ACL number.')
agentDiffServClassAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassAclNum.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassAclNum.setDescription('The access list number used to define the match conditions for the DiffServ class. This attribute is only valid if the value of agentDiffServClassType is set to acl(3). Match conditions are copied from the ACL definition at the time the class is created and do not reflect subsequent changes to the ACL definition. This attribute requires that the agentDiffServClassAclType object also be set so that the ACL number can be interpreted relative to ip(1) or mac(2) ACLs. The objects may be set in either order. The EdgeSwitch-QOS-ACL-MIB defines an aclIndex for IP ACLs and an aclMacIndex for MAC ACLs. Setting this object to one of these values per the agentDiffServClassAclType causes the corresponding ACL rules to be used for creating the DiffServ class.')
agentDiffServClassRuleIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassRuleIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleIndexNextFree.setDescription('This object contains an unused value for classRuleIndex, or a zero to indicate that none exists. This index is maintained on a per-class basis.')
agentDiffServClassStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRowStatus.setDescription("The status of this conceptual row. All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'. Entries can not be deleted until all rows in agentDiffServClassRuleTable with corresponding values of agentDiffServClassIndex have been deleted.")
agentDiffServClassAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("ipv6", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassAclType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassAclType.setDescription('The access list type used to define the match conditions for the DiffServ class. This attribute is only valid if the value of agentDiffServClassType is set to acl(3). When this attribute is set to ip(1), the agentDiffServClassAclNum object is interpreted as an IP ACL number per the aclIndex definition from the EdgeSwitch-QOS-ACL-MIB. When set to mac(2), the agentDiffServClassAclNum object is interpreted as a MAC ACL index per the aclMacIndex definition in the EdgeSwitch-QOS-ACL-MIB. When set to ipv6(3), the agentDiffServClassAclNum object is interpreted as a IPv6 ACL index per the aclIpv6Index definition in the EdgeSwitch-QOS-ACL-MIB. All these objects and agentDiffServClassAclNum must be set (in either order) for an agentDiffServClassType of acl(3).')
agentDiffServClassProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassProtoType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassProtoType.setDescription('The diffserv class protocol type used to indicate how to interpret any layer 3. This attribute is only valid if the value of agentDiffServClassProtoType is set to all(1) or any(2).')
agentDiffServClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3), )
if mibBuilder.loadTexts: agentDiffServClassRuleTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleTable.setDescription('A table of the DiffServ Class Rule entries')
agentDiffServClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassIndex"), (0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassRuleIndex"))
if mibBuilder.loadTexts: agentDiffServClassRuleEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleEntry.setDescription('Represents entry for a set of class-match rules')
agentDiffServClassRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServClassRuleIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleIndex.setDescription('The identifier for DiffServ Class Rule Table entry within a class')
agentDiffServClassRuleMatchEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("cos", 1), ("dstip", 2), ("dstl4port", 3), ("dstmac", 4), ("every", 5), ("ipdscp", 6), ("ipprecedence", 7), ("iptos", 8), ("protocol", 9), ("refclass", 10), ("srcip", 11), ("srcl4port", 12), ("srcmac", 13), ("vlan", 14), ("cos2", 15), ("etype", 16), ("vlanid", 17), ("vlanid2", 18), ("flowLabel", 19), ("srcPrefix", 20), ("dstPrefix", 21)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEntryType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEntryType.setDescription('Class Rule match entry type, it determines which one of the individual match conditions is defined for the present class rule. This object must be created before any other match object in this row.')
agentDiffServClassRuleMatchCos = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos.setDescription('Three-bit user priority field in the 802.1Q tag header of a tagged Ethernet frame used as a class-match parameter - only valid if the agentDiffServClassRuleMatchEntryType is set to cos(1). For frames containing a double VLAN tag, this field is located in the first/outer tag.')
agentDiffServClassRuleMatchDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpAddr.setDescription('Destination IP address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstip(2).')
agentDiffServClassRuleMatchDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpMask.setDescription('Destination IP address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstip(2). This mask value identifies the portion of agentDiffServClassRuleMatchDstIpAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchDstL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortStart.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortStart.setDescription('Destination layer 4 port range start match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstl4port(3).')
agentDiffServClassRuleMatchDstL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortEnd.setDescription('Destination layer 4 port range end match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstl4port(3).')
agentDiffServClassRuleMatchDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacAddr.setDescription('Destination MAC address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstmac(4).')
agentDiffServClassRuleMatchDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacMask.setDescription('Destination MAC address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstmac(4). This mask value identifies the portion of agentDiffServClassRuleMatchDstMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEvery.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEvery.setDescription('Flag to indicate that the class rule is defined to match on every packet, regardless of content. - only valid if the agentDiffServClassRuleMatchEntryType is set to every(5).')
agentDiffServClassRuleMatchIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpDscp.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpDscp.setDescription('IP DiffServ Code Point (DSCP) match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to ipdscp(6). The DSCP is defined as the high-order six bits of the Service Type octet in the IPv4 header.')
agentDiffServClassRuleMatchIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpPrecedence.setDescription('IP Precedence match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to ipprecedence(7). The Precedence bits are defined as the high-order three bits of the Service Type octed in the IPv4 header.')
agentDiffServClassRuleMatchIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosBits.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosBits.setDescription('IP TOS bits match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to iptos(8). The TOS bits are defined as all eight bits of the Service Type octet in the IPv4 header.')
agentDiffServClassRuleMatchIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosMask.setDescription('IP TOS bits mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to iptos(8). This mask value identifies the portion of agentDiffServClassRuleMatchIpTosBits that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchProtocolNum.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchProtocolNum.setDescription('Protocol number match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to protocol(9).')
agentDiffServClassRuleMatchRefClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchRefClassIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchRefClassIndex.setDescription('Index of the corresponding referenced class - only valid if the agentDiffServClassRuleMatchEntryType is set to refclass(10). The set of match conditions defined for the reference class are directly inherited by the current class. Restrictions: 1) The class types of both, current class and the reference class must be identical (i.e., any vs. any, or all vs. all). 2) Self-referencing of class-name is not allowed. 3) Any attempt to delete the reference class while still referenced by any class shall fail. 4) The combined match criteria of classname and reference class name must be an allowed combination based on the class type. Any subsequent changes to the reference class name match criteria must maintain this validity, or the change attempt shall fail.')
agentDiffServClassRuleMatchSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpAddr.setDescription('Source IP address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcip(11).')
agentDiffServClassRuleMatchSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpMask.setDescription('Source IP address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcip(11). This mask value identifies the portion of agentDiffServClassRuleMatchSrcIpAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchSrcL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 19), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortStart.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortStart.setDescription('Source layer 4 port range start match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcl4port(12).')
agentDiffServClassRuleMatchSrcL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 20), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortEnd.setDescription('Source layer 4 port range end match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcl4port(12).')
agentDiffServClassRuleMatchSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 21), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacAddr.setDescription('Source MAC address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcmac(13).')
agentDiffServClassRuleMatchSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 22), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacMask.setDescription('Source MAC address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcmac(13). This mask value identifies the portion of agentDiffServClassRuleMatchSrcMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId.setDescription('VLAN ID match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to vlan(14). This object is obsoleted by agentDiffServClassRuleMatchVlanIdStart and agentDiffServClassRuleMatchVlanIdEnd.')
agentDiffServClassRuleMatchExcludeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchExcludeFlag.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchExcludeFlag.setDescription('Class Rule exclude flag - when set to true(1), the match condition identified by agentDiffServClassRuleMatchEntryType is negated. This means that for a given field, every value is considered to be a match EXCEPT for the value specified in the class rule. This flag must be false(2) for an agendDiffServClassRuleMatchEntryType of refClass(10). This object must be set after the agentDiffServClassRuleMatchEntryType object, but before any other match object in this row')
agentDiffServClassRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 25), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServClassRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleRowStatus.setDescription("The status of this conceptual row. All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'.")
agentDiffServClassRuleMatchCos2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos2.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos2.setDescription('Three-bit user priority field in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame used as a class-match parameter - only valid if the agentDiffServClassRuleMatchEntryType is set to cos2(15).')
agentDiffServClassRuleMatchEtypeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("custom", 1), ("appletalk", 2), ("arp", 3), ("ibmsna", 4), ("ipv4", 5), ("ipv6", 6), ("ipx", 7), ("mplsmcast", 8), ("mplsucast", 9), ("netbios", 10), ("novell", 11), ("pppoe", 12), ("rarp", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEtypeKey.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEtypeKey.setDescription('Ethertype keyword match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to etype(16). A keyword of custom(1) requires that the agentDiffServClassRuleMatchEtypeValue object also be set.')
agentDiffServClassRuleMatchEtypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 29), EtypeValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEtypeValue.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEtypeValue.setDescription('Ethertype match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to etype(16) and the agentDiffServClassRuleMatchEtypeKey is set to custom(1). The allowed value for this object is 0x0600 to 0xFFFF.')
agentDiffServClassRuleMatchVlanIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanIdStart.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanIdStart.setDescription('VLAN ID range start match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to vlanid(17). The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame.')
agentDiffServClassRuleMatchVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanIdEnd.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanIdEnd.setDescription('VLAN ID range end match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to vlanid(17). The VLAN ID field is defined as the 12-bit VLAN identifier in the 802.1Q tag header of a tagged Ethernet frame. This is contained in the first/outer tag of a double VLAN tagged frame.')
agentDiffServClassRuleMatchVlanId2Start = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId2Start.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId2Start.setDescription('Secondary VLAN ID range start match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to vlanid2(18). The Secondary VLAN ID field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
agentDiffServClassRuleMatchVlanId2End = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId2End.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId2End.setDescription('Secondary VLAN ID range end match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to vlanid2(18). The Secondary VLAN ID field is defined as the 12-bit VLAN identifier in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame.')
agentDiffServClassRuleMatchFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchFlowLabel.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchFlowLabel.setDescription('Flow label is 20-bit number that is unique to an IPv6 packet, used by end stations to signify quality-of-service handling in routers.')
agentDiffServClassRuleMatchDstIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 35), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpv6Prefix.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpv6Prefix.setDescription('The Ipv6 Prefix Address configured on the Service Port.')
agentDiffServClassRuleMatchSrcIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 36), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpv6Prefix.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpv6Prefix.setDescription('The Ipv6 Prefix Address configured on the Service Port.')
agentDiffServClassRuleMatchDstIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpv6PrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpv6PrefixLength.setDescription('The Prefix Length.')
agentDiffServClassRuleMatchSrcIpv6PrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpv6PrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpv6PrefixLength.setDescription('The Prefix Length.')
agentDiffServPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3))
agentDiffServPolicyIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyIndexNextFree.setDescription('This object contains an unused value for agentDiffServPolicyIndex, or a zero to indicate that none exists.')
agentDiffServPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2), )
if mibBuilder.loadTexts: agentDiffServPolicyTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyTable.setDescription('A table of the DiffServ policy entries.')
agentDiffServPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyEntry.setDescription('Represents entry for a DiffServ policy.')
agentDiffServPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyIndex.setDescription('The identifier for DiffServ Policy table entry.')
agentDiffServPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyName.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyName.setDescription('Name of the policy')
agentDiffServPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2, 1, 3), IntfDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyType.setDescription(' The policy type dictates whether inbound or outbound policy attribute statements are used in the policy definition.')
agentDiffServPolicyInstIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyInstIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstIndexNextFree.setDescription('This object contains an unused value for agentDiffServPolicyInstIndex, or a zero to indicate that none exists. This index is maintained on a per-policy basis.')
agentDiffServPolicyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyRowStatus.setDescription("The status of this conceptual row. active(1) - this Diffserv Policy is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'. Entries can not be deleted until all rows in agentDiffServPolicyInstTable with corresponding values of agentDiffServPolicyIndex have been deleted.")
agentDiffServPolicyInstTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 3), )
if mibBuilder.loadTexts: agentDiffServPolicyInstTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstTable.setDescription('A table of the policy-class instance entries.')
agentDiffServPolicyInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 3, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyInstEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstEntry.setDescription('Represents entry for a policy-class instance.')
agentDiffServPolicyInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyInstIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstIndex.setDescription('The identifier for policy-class Instance table entry within a policy.')
agentDiffServPolicyInstClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstClassIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstClassIndex.setDescription('Index of the DiffServ Class Table row, whose class definition is used as the policy class instance. The class index identifies the classifier definition used by the policy to establish an instance of that class (to which policy attributes can be attached). This is what connects a class (instance) to a policy.')
agentDiffServPolicyInstAttrIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyInstAttrIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstAttrIndexNextFree.setDescription('This object contains an unused value for agentDiffServPolicyAttrIndex, or a zero to indicate that none exists. This index is maintained on a per-policy-class-instance basis.')
agentDiffServPolicyInstStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 3, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstRowStatus.setDescription("The status of this conceptual row. active(1) - this Diffserv Policy Instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'. Entries can not be deleted until all rows in agentDiffServPolicyAttrTable with corresponding values of agentDiffServPolicyIndex and agentDiffServPolicyInstIndex have been deleted.")
agentDiffServPolicyAttrTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4), )
if mibBuilder.loadTexts: agentDiffServPolicyAttrTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrTable.setDescription('A table of policy attribute entries')
agentDiffServPolicyAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyAttrIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyAttrEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrEntry.setDescription('Represents entry for policy attributes')
agentDiffServPolicyAttrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyAttrIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrIndex.setDescription('The identifier for policy-attribute entry ')
agentDiffServPolicyAttrStmtEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("bandwidth", 1), ("expedite", 2), ("markCosVal", 3), ("markIpDscpVal", 4), ("markIpPrecedenceVal", 5), ("policeSimple", 6), ("policeSinglerate", 7), ("policeTworate", 8), ("randomdrop", 9), ("shapeAverage", 10), ("shapePeak", 11), ("assignQueue", 12), ("drop", 13), ("markCos2Val", 14), ("redirect", 15), ("mirror", 16), ("markCosAsSecCos", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtEntryType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtEntryType.setDescription('Policy attribute statement entry type -- this entry type is essential to determine which of the individual object(s) is defined for this policy attribute statement. This object must be created before any other policy attribute statement object in the row. The markIpDscpVal(4), markIpPrecedenceVal(5), policeSimple(6), policeSinglerate(7) and policeTworate(8) values are only allowed for an agentDiffServPolicyType of in(1). The remaining values are only allowed for an agentDiffServPolicyType of out(2).')
agentDiffServPolicyAttrStmtBandwidthCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrate.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrate.setDescription('Bandwidth committed rate attribute statement value -- identifies the minimum amount of bandwidth to be reserved for the specified class instance within the policy. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to bandwidth(1).')
agentDiffServPolicyAttrStmtBandwidthCrateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrateUnits.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrateUnits.setDescription('Bandwidth committed rate units attribute statement value -- this value determines the interpretation of the agentDiffServPolicyAttrStmtBandwidthCrate object as either kilobits-per-second or as a percentage of interface link speed. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to bandwidth(1).')
agentDiffServPolicyAttrStmtExpediteCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrate.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrate.setDescription('Expedited (bandwidth) committed rate attribute statement value -- it identifies the maximum guaranteed amount of bandwidth to be reserved for the specified class instance within the policy. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to expedite(2). ')
agentDiffServPolicyAttrStmtExpediteCrateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrateUnits.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrateUnits.setDescription('Expedited (bandwidth) committed rate units attribute statement value -- determines the interpretation of the agentDiffServPolicyAttrStmtExpediteCrate object as either kilobits-per-second or as a percentage of interface link speed. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to expedite(2).')
agentDiffServPolicyAttrStmtExpediteCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 7), QosBurstSize().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCburst.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCburst.setDescription('Expedited (bandwidth) committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to expedite(2).')
agentDiffServPolicyAttrStmtMarkCosVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosVal.setDescription('Three-bit user priority field value in the 802.1Q tag header of a tagged Ethernet frame, marked as part of the inbound policy for a class instance. For frames containing a double VLAN tag, this field is located in the first/outer tag. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to markCosVal(3).')
agentDiffServPolicyAttrStmtMarkIpDscpVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpDscpVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpDscpVal.setDescription('Specified IP DSCP value to mark in all inbound packets belonging to the class-instance. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to markIpDscpVal(4).')
agentDiffServPolicyAttrStmtMarkIpPrecedenceVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpPrecedenceVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpPrecedenceVal.setDescription('Specified IP Precedence value to mark in all inbound packets belonging to the class-instance. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to markIpPrecedenceVal(5).')
agentDiffServPolicyAttrStmtPoliceConformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('send')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformAct.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformAct.setDescription('Policing conform action attribute statement value -- determines the action taken on conforming traffic for the policing style (simple,singlerate,tworate) currently configured for the specified class instance within the policy. The default conform action is send(3). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceConformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformVal.setDescription('Policing conform value attribute statement -- used to mark conforming packets when the conform action is one of the following: markdscp(2) - mark IP DSCP field markprec(3) - mark IP Precedence field markcos(5) - mark 802.1p CoS field (first/only tag) markcos2(6) - mark secondary 802.1p CoS field (inner tag) markcosAsSecCos(7) - mark CoS as Secondary CoS value This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedAct.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedAct.setDescription('Policing exceed action attribute statement value -- determines the action taken on excess traffic for the policing style (singlerate, tworate) currently configured for the specified class instance within the policy. The default exceed action is drop(1). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceExceedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedVal.setDescription('Policing exceed value attribute statement -- used to mark excess packets when the exceed action is one of the following: markdscp(2) - mark IP DSCP field markprec(3) - mark IP Precedence field markcos(5) - mark 802.1p CoS field (first/only tag) markcos2(6) - mark secondary 802.1p CoS field (inner tag) markcosAsSecCos(7) - mark CoS as Secondary CoS value This is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceNonconformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4), ("markcos", 5), ("markcos2", 6), ("markcosAsSecCos", 7))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformAct.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformAct.setDescription('Policing non-conform action attribute statement value -- determines the action taken on nonconforming traffic for the policing style (simple, singlerate,tworate) currently configured for the specified class instance within the policy. The default non-conform action is drop(1). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceNonconformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformVal.setDescription('Policing non-conform value attribute statement -- used to mark nonconforming packets when the nonconform action is one of the following: markdscp(2) - mark IP DSCP field markprec(3) - mark IP Precedence field markcos(5) - mark 802.1p CoS field (first/only tag) markcos2(6) - mark secondary 802.1p CoS field (inner tag) markcosAsSecCos(7) - mark CoS as Secondary CoS value This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceSimpleCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCrate.setDescription('Simple policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSimple(6).')
agentDiffServPolicyAttrStmtPoliceSimpleCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 18), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCburst.setDescription('Simple policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSimple(6).')
agentDiffServPolicyAttrStmtPoliceSinglerateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCrate.setDescription('Single-rate policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
agentDiffServPolicyAttrStmtPoliceSinglerateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 20), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCburst.setDescription('Single-rate policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
agentDiffServPolicyAttrStmtPoliceSinglerateEburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 21), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateEburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateEburst.setDescription('Single-rate policing excess burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
agentDiffServPolicyAttrStmtPoliceTworateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCrate.setDescription('Two-rate policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceTworateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 23), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCburst.setDescription('Two-rate policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceTworatePrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePrate.setDescription('Two-rate policing peak rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceTworatePburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 25), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePburst.setDescription('Two-rate policing peak burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtRandomdropMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMinThresh.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMinThresh.setDescription('Random drop minimum threshold attribute statement value -- the average queue depth minimum threshold in bytes used by the WRED algorithm. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxThresh.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxThresh.setDescription('Random drop maximum threshold attribute statement value -- the average queue depth maximum threshold in bytes used by the WRED algorithm. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropMaxDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxDropProb.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxDropProb.setDescription('Random drop maximum drop probability attribute statement value -- the packet drop probability when the queue depth average reaches its maximum threshold. It is expressed as a percentage, and is an integer from 0 to 100. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropSamplingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropSamplingRate.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropSamplingRate.setDescription('Random drop sampling rate attribute statement value -- the period at which the queue depth is sampled for computing an average, expressed in microseconds. This value is an integer from 0 to 1000000, with a default value of 0 (meaning per packet sampling). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropDecayExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropDecayExponent.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropDecayExponent.setDescription('Random drop decay exponent attribute statement value -- determines how quickly the average queue length calculation decays over time, with a higher number causing a slower decay. This value is an integer from 0 to 16, with a default of 9. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtShapeAverageCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapeAverageCrate.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapeAverageCrate.setDescription('Average-rate shaping committed rate attribute statement value, specified in kbps -- used to establish average rate traffic shaping for the specified class , which limits transmissions for the class to the committed information rate, with any excess traffic delayed via queueing. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to shapeAverage(10).')
agentDiffServPolicyAttrStmtShapePeakCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 32), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakCrate.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakCrate.setDescription('Peak-rate shaping committed rate attribute statement value, specified in kbps -- used to establish peak rate traffic shaping for the specified class , which allows transmissions for the class to exceed the committed information rate by sending excess traffic with the understanding that it could be dropped by a downstream network element. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to shapePeak(11).')
agentDiffServPolicyAttrStmtShapePeakPrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 33), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakPrate.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakPrate.setDescription('Peak-rate shaping peak rate attribute statement value, specified in kbps -- used to establish peak rate traffic shaping for the specified class, which allows transmissions for the class to exceed the committed information rate by sending excess traffic with the understanding that it could be dropped by a downstream network element. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to shapePeak(11).')
agentDiffServPolicyAttrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 34), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyAttrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrRowStatus.setDescription("The status of this conceptual row. active(1) - this Diffserv Policy Attribute is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'.")
agentDiffServPolicyAttrStmtAssignQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 36), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtAssignQueueId.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtAssignQueueId.setDescription('Queue identifier to which all inbound packets belonging to this class-instance are directed. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to assignQueue(12).')
agentDiffServPolicyAttrStmtDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtDrop.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtDrop.setDescription('Flag to indicate that all inbound packets belonging to this class-instance are dropped at ingress. This attribute is only valid if the agentDiffServPolicyAttrStmtEntryType is set to drop(13).')
agentDiffServPolicyAttrStmtMarkCos2Val = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCos2Val.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCos2Val.setDescription('Three-bit user priority field value in the second/inner 802.1Q tag header of a double VLAN tagged Ethernet frame, marked as part of the inbound policy for a class instance. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to markCos2Val(14).')
agentDiffServPolicyAttrStmtPoliceColorConformIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 39), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformIndex.setDescription("Index of the DiffServ Class Table row whose class definition is used to specify the policing color conform mode and value. This identifies incoming traffic categorized as 'green' packets in the network. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8). The DiffServ class referred to by this object must comply with the following restrictions: 1) Contains only a single, non-excluded match condition identifying one of the following fields: COS, IP DSCP, IP Precedence, or Secondary COS, in accordance with platform support capabilities. This is represented by an agentDiffServClassRuleMatchEntryType value of cos(1), ipdscp(6), ipprecedence(7), or cos2(15), respectively. 2) Must not conflict with any (non-excluded) match conditions in the classifier used for this policy-class instance, as indicated by the agentDiffServPolicyInstClassIndex object. 3) The color conform mode and value identified by this class index must not be the same as an existing color-aware exceed mode and value defined by the agentDiffServPolicyAttrStmtPoliceColorExceedIndex object. A class index value of 0 for this object indicates conform color awareness is not being used (e.g. color-blind mode). Setting this object to 0 causes the agentDiffServPolicyAttrStmtPoliceColorExceedIndex object to be set to 0 as well.")
agentDiffServPolicyAttrStmtPoliceColorConformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blind", 1), ("cos", 2), ("cos2", 3), ("ipdscp", 4), ("ipprec", 5))).clone('blind')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformMode.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformMode.setDescription("Policing color conform mode -- indicates the color awareness mode of conforming traffic for the policing style (simple, singlerate, or tworate) currently configured for the specified class instance within the policy. The default value is blind(1). Any value other than blind(1) denotes the packet field to check for the existing conform color marking, which is compared to the agentDiffServPolicyAttrStmtPoliceColorConformVal object value. Packets matching this specification are considered to be colored 'green'. This read-only object reflects the DiffServ class definition as indicated by agentDiffServPolicyAttrStmtPoliceColorConformIndex. This attribute is only valid for agentDiffServPolicyAttrStmtEntryType values of policeSimple(6), policeSinglerate(7), or policeTworate(8).")
agentDiffServPolicyAttrStmtPoliceColorConformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorConformVal.setDescription("Policing color conform value -- indicates the color awareness packet mark value of conforming traffic for the policing style (simple, singlerate, or tworate) currently configured for the specified class instance within the policy. For the color conform field indicated by agentDiffServPolicyAttrStmtPoliceColorConformMode, packets containing this value are considered to be colored 'green'. This read-only object reflects the DiffServ class definition as indicated by agentDiffServPolicyAttrStmtPoliceColorConformIndex. This attribute is only valid for agentDiffServPolicyAttrStmtEntryType values of policeSimple(6), policeSinglerate(7), or policeTworate(8), and agentDiffServPolicyAttrStmtPoliceColorConformMode values of cos(2), cos2(3), ipdscp(4), or ipprec(5).")
agentDiffServPolicyAttrStmtPoliceColorExceedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 42), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedIndex.setDescription("Index of the DiffServ Class Table row whose class definition is used to specify the policing color exceed mode and value. This identifies incoming traffic categorized as 'yellow' packets in the network. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8). The DiffServ class referred to by this object must comply with the following restrictions: 1) Contains only a single, non-excluded match condition identifying one of the following fields: COS, IP DSCP, IP Precedence, or Secondary COS, in accordance with platform support capabilities. This is represented by an agentDiffServClassRuleMatchEntryType value of cos(1), ipdscp(6), ipprecedence(7), or cos2(15), respectively. 2) Must not conflict with any (non-excluded) match conditions in the classifier used for this policy-class instance, as indicated by the agentDiffServPolicyInstClassIndex object. 3) The color exceed mode and value identified by this class index must not be the same as an existing color-aware exceed mode and value defined by the agentDiffServPolicyAttrStmtPoliceColorConformIndex object. A class index value of 0 for this object indicates exceed color awareness is not being used. When the agentDiffServPolicyAttrStmtPoliceColorConformIndex object is 0, indicating color-blind operation, this object must also be 0. When a non-0 value is used for the agentDiffServPolicyAttrStmtPoliceColorConformIndex object, this object may remain set to 0 if exceed color awareness is not desired, or may be set to an appropriate class index value to activate exceed color aware mode.")
agentDiffServPolicyAttrStmtPoliceColorExceedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("blind", 1), ("cos", 2), ("cos2", 3), ("ipdscp", 4), ("ipprec", 5), ("unused", 6))).clone('blind')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedMode.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedMode.setDescription("Policing color exceed mode -- indicates the color awareness mode of exceeding traffic for the policing style (singlerate or tworate) currently configured for the specified class instance within the policy. The default value is blind(1). Any value other than blind(1) or unused(6) denotes the packet field to check for the existing exceed color marking, which is compared to the agentDiffServPolicyAttrStmtPoliceColorExceedVal object value. Packets matching this specification are considered to be colored 'yellow'. Use of exceed color awareness is optional, and this field is set to unused(6) when color conform aware policing is used but the color exceed value is not used. When agentDiffServPolicyAttrStmtPoliceColorConformMode value is blind(1), this object is blind(1) as well. This read-only object reflects the DiffServ class definition as indicated by agentDiffServPolicyAttrStmtPoliceColorExceedIndex. This attribute is only valid for agentDiffServPolicyAttrStmtEntryType values of policeSinglerate(7) or policeTworate(8).")
agentDiffServPolicyAttrStmtPoliceColorExceedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceColorExceedVal.setDescription("Policing color exceed value -- indicates the color awareness packet mark value of exceeding traffic for the policing style (singlerate or tworate) currently configured for the specified class instance within the policy. For the color exceed field indicated by agentDiffServPolicyAttrStmtPoliceColorExceedMode, packets containing this value are considered to be colored 'yellow'. This read-only object reflects the DiffServ class definition as indicated by agentDiffServPolicyAttrStmtPoliceColorExceedIndex. This attribute is only valid for agentDiffServPolicyAttrStmtEntryType values of policeSinglerate(7) or policeTworate(8), and agentDiffServPolicyAttrStmtPoliceColorExceedMode values of cos(2), cos2(3), ipdscp(4), or ipprec(5).")
agentDiffServPolicyAttrStmtRedirectIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 45), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRedirectIntf.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRedirectIntf.setDescription('External interface number to which all inbound packets belonging to this class-instance are redirected. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to redirect(15).')
agentDiffServPolicyAttrStmtMirrorIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 46), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMirrorIntf.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMirrorIntf.setDescription('External interface number to which all inbound packets belonging to this class-instance are mirrored. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to mirror(16).')
agentDiffServPolicyAttrStmtMarkCosAsSecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 4, 1, 47), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosAsSecCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosAsSecCos.setDescription('Flag to indicate that all inbound packets belonging to this class-instance are marked with secondary cos at ingress. This attribute is only valid if the agentDiffServPolicyAttrStmtEntryType is set to markCosAsSecCos(17).')
agentDiffServPolicyPerfInTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5), )
if mibBuilder.loadTexts: agentDiffServPolicyPerfInTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInTable.setDescription('A table of inbound policy-class performance entries')
agentDiffServPolicyPerfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyPerfInEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInEntry.setDescription('Represents entry for the performance attributes of the associated inbound policy-class instance')
agentDiffServPolicyPerfInOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedPackets.setDescription('Offered packets count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedPackets.setDescription('Discarded packets count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedPackets.setDescription('Offered packets high capacity count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedPackets.setDescription('Discarded packets high capacity count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyPerfInRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 5, 1, 10), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInRowStatus.setDescription('The status of this conceptual row.')
agentDiffServPolicyPerfOutTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6), )
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTable.setDescription('A table of outbound policy-class performance entries')
agentDiffServPolicyPerfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutEntry.setDescription('Represents entry for the performance attributes of the associated outbound policy-class instance')
agentDiffServPolicyPerfOutTailDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedPackets.setDescription('Tail-dropped packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutRandomDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedPackets.setDescription('Random-dropped packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutShapeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedPackets.setDescription('Shape-delayed packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCTailDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedPackets.setDescription('Tail-dropped packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCRandomDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedPackets.setDescription('Random-dropped packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCShapeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedPackets.setDescription('Shape-delayed packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutOfferedPackets.setDescription('Offered packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutDiscardedPackets.setDescription('Discarded packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCOfferedPackets.setDescription('Offered packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCDiscardedPackets.setDescription('Discarded packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 25), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyPerfOutRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 3, 6, 1, 26), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRowStatus.setDescription('The status of this conceptual row.')
agentDiffServServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4))
agentDiffServServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1), )
if mibBuilder.loadTexts: agentDiffServServiceTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceTable.setDescription('A table of the service entries.')
agentDiffServServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1, 1), ).setIndexNames((0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServiceIfIndex"), (0, "EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServiceIfDirection"))
if mibBuilder.loadTexts: agentDiffServServiceEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceEntry.setDescription('Represents entry for policy assigned to an interface in a particular direction.')
agentDiffServServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: agentDiffServServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceIfIndex.setDescription('External interface number of the interface to which policy is assigned.')
agentDiffServServiceIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1, 1, 2), IntfDirection())
if mibBuilder.loadTexts: agentDiffServServiceIfDirection.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceIfDirection.setDescription('Interface direction to which the policy is assigned.')
agentDiffServServicePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServicePolicyIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePolicyIndex.setDescription('Index of the Policy Table row whose policy definition is attached to the interface in the specified direction.')
agentDiffServServiceIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServiceIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceIfOperStatus.setDescription('The current operational state of the DiffServ service interface. If agentDiffServGenStatusAdminMode is disable(2) then agentDiffServServiceIfOperStatus should be down(2). If agentDiffServServiceGenStatusAdminMode is changed to enable(1) then agentDiffServServiceIfOperStatus should change to up(1) if the service interface is ready to send and receive DiffServ traffic; it should remain in the down(2) state if the underlying interface hardware is not in a link up condition, if the policy definition represented by agentDiffServServicePolicyIndex is incompatible with the interface (e.g., requires more bandwidth than the current capacity of the interface), or if the policy definition is considered to be incomplete (e.g., one or more composite rows is not in the active(1) state).')
agentDiffServServiceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServiceStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 7, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceRowStatus.setDescription("The status of this conceptual row. active(1) - Diffserv is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance All RowStatus operations are permitted. Other columns in this row may be modified when the status is 'active'.")
mibBuilder.exportSymbols("EdgeSwitch-QOS-DIFFSERV-PRIVATE-MIB", agentDiffServPolicyAttrStmtMarkIpPrecedenceVal=agentDiffServPolicyAttrStmtMarkIpPrecedenceVal, agentDiffServPolicyAttrStmtPoliceTworateCburst=agentDiffServPolicyAttrStmtPoliceTworateCburst, agentDiffServServiceTable=agentDiffServServiceTable, agentDiffServPolicyAttrStmtShapeAverageCrate=agentDiffServPolicyAttrStmtShapeAverageCrate, agentDiffServGenStatusPolicyInstTableSize=agentDiffServGenStatusPolicyInstTableSize, agentDiffServClassRuleMatchIpTosMask=agentDiffServClassRuleMatchIpTosMask, agentDiffServGenStatusServiceTableMax=agentDiffServGenStatusServiceTableMax, agentDiffServClassRuleStorageType=agentDiffServClassRuleStorageType, agentDiffServClassIndex=agentDiffServClassIndex, agentDiffServServiceStorageType=agentDiffServServiceStorageType, agentDiffServPolicyAttrStmtMarkCosAsSecCos=agentDiffServPolicyAttrStmtMarkCosAsSecCos, agentDiffServClassTable=agentDiffServClassTable, agentDiffServPolicyAttrStmtEntryType=agentDiffServPolicyAttrStmtEntryType, agentDiffServClassRuleEntry=agentDiffServClassRuleEntry, agentDiffServPolicyPerfOutDiscardedPackets=agentDiffServPolicyPerfOutDiscardedPackets, agentDiffServPolicyAttrStmtPoliceNonconformAct=agentDiffServPolicyAttrStmtPoliceNonconformAct, agentDiffServPolicyAttrStmtRandomdropDecayExponent=agentDiffServPolicyAttrStmtRandomdropDecayExponent, agentDiffServGenStatusPolicyInstTableMax=agentDiffServGenStatusPolicyInstTableMax, agentDiffServClassRuleMatchDstL4PortEnd=agentDiffServClassRuleMatchDstL4PortEnd, agentDiffServPolicyAttrStmtMarkCosVal=agentDiffServPolicyAttrStmtMarkCosVal, agentDiffServClassRuleIndex=agentDiffServClassRuleIndex, agentDiffServClassRuleMatchVlanId2End=agentDiffServClassRuleMatchVlanId2End, agentDiffServPolicyAttrStmtAssignQueueId=agentDiffServPolicyAttrStmtAssignQueueId, agentDiffServPolicyAttrStmtPoliceColorConformIndex=agentDiffServPolicyAttrStmtPoliceColorConformIndex, agentDiffServClassRuleMatchIpTosBits=agentDiffServClassRuleMatchIpTosBits, agentDiffServClassRuleMatchVlanId=agentDiffServClassRuleMatchVlanId, agentDiffServPolicyAttrStmtPoliceSinglerateCburst=agentDiffServPolicyAttrStmtPoliceSinglerateCburst, agentDiffServPolicyPerfOutTable=agentDiffServPolicyPerfOutTable, agentDiffServPolicyPerfInTable=agentDiffServPolicyPerfInTable, agentDiffServPolicyAttrStmtBandwidthCrateUnits=agentDiffServPolicyAttrStmtBandwidthCrateUnits, IntfDirection=IntfDirection, agentDiffServGenStatusClassTableSize=agentDiffServGenStatusClassTableSize, agentDiffServClassRuleMatchVlanIdEnd=agentDiffServClassRuleMatchVlanIdEnd, agentDiffServClassRuleMatchSrcL4PortStart=agentDiffServClassRuleMatchSrcL4PortStart, agentDiffServPolicyPerfInRowStatus=agentDiffServPolicyPerfInRowStatus, agentDiffServClassRuleMatchDstIpv6PrefixLength=agentDiffServClassRuleMatchDstIpv6PrefixLength, agentDiffServPolicyInstEntry=agentDiffServPolicyInstEntry, agentDiffServPolicyPerfOutHCRandomDroppedPackets=agentDiffServPolicyPerfOutHCRandomDroppedPackets, agentDiffServPolicyPerfOutHCTailDroppedPackets=agentDiffServPolicyPerfOutHCTailDroppedPackets, agentDiffServPolicyGroup=agentDiffServPolicyGroup, agentDiffServPolicyAttrStmtShapePeakCrate=agentDiffServPolicyAttrStmtShapePeakCrate, Ipv6AddressPrefix=Ipv6AddressPrefix, agentDiffServPolicyTable=agentDiffServPolicyTable, agentDiffServPolicyPerfOutOfferedPackets=agentDiffServPolicyPerfOutOfferedPackets, agentDiffServClassRuleMatchProtocolNum=agentDiffServClassRuleMatchProtocolNum, agentDiffServClassRuleMatchVlanId2Start=agentDiffServClassRuleMatchVlanId2Start, agentDiffServClassRuleMatchDstL4PortStart=agentDiffServClassRuleMatchDstL4PortStart, agentDiffServPolicyAttrStmtRandomdropMaxThresh=agentDiffServPolicyAttrStmtRandomdropMaxThresh, fastPathQOSDiffServPrivate=fastPathQOSDiffServPrivate, agentDiffServClassName=agentDiffServClassName, agentDiffServPolicyIndex=agentDiffServPolicyIndex, agentDiffServPolicyAttrStmtPoliceSinglerateCrate=agentDiffServPolicyAttrStmtPoliceSinglerateCrate, agentDiffServPolicyAttrStmtExpediteCrate=agentDiffServPolicyAttrStmtExpediteCrate, agentDiffServServiceIfOperStatus=agentDiffServServiceIfOperStatus, EtypeValue=EtypeValue, agentDiffServClassRuleMatchDstIpv6Prefix=agentDiffServClassRuleMatchDstIpv6Prefix, agentDiffServClassRuleMatchVlanIdStart=agentDiffServClassRuleMatchVlanIdStart, agentDiffServPolicyAttrStmtPoliceTworatePburst=agentDiffServPolicyAttrStmtPoliceTworatePburst, agentDiffServGenStatusPolicyAttrTableSize=agentDiffServGenStatusPolicyAttrTableSize, agentDiffServPolicyPerfOutHCShapeDelayedPackets=agentDiffServPolicyPerfOutHCShapeDelayedPackets, agentDiffServPolicyAttrIndex=agentDiffServPolicyAttrIndex, agentDiffServPolicyAttrStmtPoliceColorConformMode=agentDiffServPolicyAttrStmtPoliceColorConformMode, agentDiffServClassRuleMatchCos2=agentDiffServClassRuleMatchCos2, agentDiffServClassRuleMatchEtypeKey=agentDiffServClassRuleMatchEtypeKey, agentDiffServPolicyInstRowStatus=agentDiffServPolicyInstRowStatus, agentDiffServClassRuleMatchDstIpMask=agentDiffServClassRuleMatchDstIpMask, agentDiffServClassRuleMatchSrcIpv6Prefix=agentDiffServClassRuleMatchSrcIpv6Prefix, agentDiffServPolicyAttrStmtShapePeakPrate=agentDiffServPolicyAttrStmtShapePeakPrate, agentDiffServClassRuleMatchSrcIpMask=agentDiffServClassRuleMatchSrcIpMask, agentDiffServClassRuleMatchIpDscp=agentDiffServClassRuleMatchIpDscp, agentDiffServPolicyAttrStmtRedirectIntf=agentDiffServPolicyAttrStmtRedirectIntf, agentDiffServPolicyInstAttrIndexNextFree=agentDiffServPolicyInstAttrIndexNextFree, agentDiffServGenStatusPolicyAttrTableMax=agentDiffServGenStatusPolicyAttrTableMax, agentDiffServPolicyAttrStmtExpediteCrateUnits=agentDiffServPolicyAttrStmtExpediteCrateUnits, agentDiffServGenStatusGroup=agentDiffServGenStatusGroup, agentDiffServPolicyAttrStmtMarkCos2Val=agentDiffServPolicyAttrStmtMarkCos2Val, agentDiffServPolicyPerfOutTailDroppedPackets=agentDiffServPolicyPerfOutTailDroppedPackets, agentDiffServPolicyAttrStmtPoliceExceedAct=agentDiffServPolicyAttrStmtPoliceExceedAct, agentDiffServPolicyAttrStmtPoliceColorExceedMode=agentDiffServPolicyAttrStmtPoliceColorExceedMode, agentDiffServGenStatusClassTableMax=agentDiffServGenStatusClassTableMax, agentDiffServPolicyPerfInStorageType=agentDiffServPolicyPerfInStorageType, agentDiffServPolicyPerfOutShapeDelayedPackets=agentDiffServPolicyPerfOutShapeDelayedPackets, agentDiffServServiceIfDirection=agentDiffServServiceIfDirection, agentDiffServPolicyInstIndex=agentDiffServPolicyInstIndex, agentDiffServPolicyAttrStmtRandomdropSamplingRate=agentDiffServPolicyAttrStmtRandomdropSamplingRate, agentDiffServClassRuleMatchSrcMacAddr=agentDiffServClassRuleMatchSrcMacAddr, agentDiffServGenStatusClassRuleTableMax=agentDiffServGenStatusClassRuleTableMax, agentDiffServPolicyAttrStmtPoliceSimpleCburst=agentDiffServPolicyAttrStmtPoliceSimpleCburst, agentDiffServClassRuleMatchRefClassIndex=agentDiffServClassRuleMatchRefClassIndex, agentDiffServPolicyAttrStmtPoliceColorConformVal=agentDiffServPolicyAttrStmtPoliceColorConformVal, agentDiffServClassRuleMatchDstIpAddr=agentDiffServClassRuleMatchDstIpAddr, agentDiffServPolicyAttrStmtRandomdropMinThresh=agentDiffServPolicyAttrStmtRandomdropMinThresh, agentDiffServPolicyAttrRowStatus=agentDiffServPolicyAttrRowStatus, agentDiffServClassRuleMatchEvery=agentDiffServClassRuleMatchEvery, agentDiffServPolicyPerfOutStorageType=agentDiffServPolicyPerfOutStorageType, agentDiffServPolicyPerfInHCOfferedPackets=agentDiffServPolicyPerfInHCOfferedPackets, agentDiffServPolicyAttrStmtExpediteCburst=agentDiffServPolicyAttrStmtExpediteCburst, agentDiffServGenStatusPolicyTableSize=agentDiffServGenStatusPolicyTableSize, agentDiffServPolicyAttrStmtPoliceNonconformVal=agentDiffServPolicyAttrStmtPoliceNonconformVal, agentDiffServClassRuleMatchSrcL4PortEnd=agentDiffServClassRuleMatchSrcL4PortEnd, agentDiffServClassRuleTable=agentDiffServClassRuleTable, agentDiffServClassRuleMatchIpPrecedence=agentDiffServClassRuleMatchIpPrecedence, agentDiffServPolicyAttrStmtPoliceSimpleCrate=agentDiffServPolicyAttrStmtPoliceSimpleCrate, agentDiffServClassRuleRowStatus=agentDiffServClassRuleRowStatus, agentDiffServServiceIfIndex=agentDiffServServiceIfIndex, agentDiffServPolicyPerfOutRandomDroppedPackets=agentDiffServPolicyPerfOutRandomDroppedPackets, agentDiffServServiceEntry=agentDiffServServiceEntry, agentDiffServPolicyPerfInDiscardedPackets=agentDiffServPolicyPerfInDiscardedPackets, agentDiffServPolicyPerfOutRowStatus=agentDiffServPolicyPerfOutRowStatus, agentDiffServClassRuleMatchCos=agentDiffServClassRuleMatchCos, agentDiffServClassRuleMatchFlowLabel=agentDiffServClassRuleMatchFlowLabel, agentDiffServPolicyName=agentDiffServPolicyName, agentDiffServServiceRowStatus=agentDiffServServiceRowStatus, agentDiffServPolicyAttrStmtRandomdropMaxDropProb=agentDiffServPolicyAttrStmtRandomdropMaxDropProb, agentDiffServClassRuleMatchSrcIpv6PrefixLength=agentDiffServClassRuleMatchSrcIpv6PrefixLength, agentDiffServClassStorageType=agentDiffServClassStorageType, agentDiffServPolicyRowStatus=agentDiffServPolicyRowStatus, agentDiffServGenStatusPolicyTableMax=agentDiffServGenStatusPolicyTableMax, agentDiffServPolicyAttrEntry=agentDiffServPolicyAttrEntry, agentDiffServPolicyAttrStmtPoliceTworateCrate=agentDiffServPolicyAttrStmtPoliceTworateCrate, agentDiffServClassGroup=agentDiffServClassGroup, agentDiffServClassRuleIndexNextFree=agentDiffServClassRuleIndexNextFree, agentDiffServPolicyAttrStmtBandwidthCrate=agentDiffServPolicyAttrStmtBandwidthCrate, agentDiffServPolicyAttrStmtPoliceSinglerateEburst=agentDiffServPolicyAttrStmtPoliceSinglerateEburst, agentDiffServPolicyAttrStmtMarkIpDscpVal=agentDiffServPolicyAttrStmtMarkIpDscpVal, agentDiffServServiceGroup=agentDiffServServiceGroup, QosBurstSize=QosBurstSize, agentDiffServClassProtoType=agentDiffServClassProtoType, agentDiffServPolicyType=agentDiffServPolicyType, agentDiffServPolicyAttrStmtMirrorIntf=agentDiffServPolicyAttrStmtMirrorIntf, agentDiffServGenStatusClassRuleTableSize=agentDiffServGenStatusClassRuleTableSize, agentDiffServPolicyInstIndexNextFree=agentDiffServPolicyInstIndexNextFree, agentDiffServPolicyPerfOutHCDiscardedPackets=agentDiffServPolicyPerfOutHCDiscardedPackets, agentDiffServPolicyInstClassIndex=agentDiffServPolicyInstClassIndex, agentDiffServClassRuleMatchExcludeFlag=agentDiffServClassRuleMatchExcludeFlag, agentDiffServServicePolicyIndex=agentDiffServServicePolicyIndex, agentDiffServPolicyPerfOutEntry=agentDiffServPolicyPerfOutEntry, agentDiffServPolicyStorageType=agentDiffServPolicyStorageType, agentDiffServClassRuleMatchEtypeValue=agentDiffServClassRuleMatchEtypeValue, agentDiffServPolicyEntry=agentDiffServPolicyEntry, agentDiffServPolicyAttrStmtPoliceConformVal=agentDiffServPolicyAttrStmtPoliceConformVal, agentDiffServPolicyAttrStmtPoliceColorExceedIndex=agentDiffServPolicyAttrStmtPoliceColorExceedIndex, agentDiffServClassAclNum=agentDiffServClassAclNum, agentDiffServPolicyIndexNextFree=agentDiffServPolicyIndexNextFree, agentDiffServClassEntry=agentDiffServClassEntry, agentDiffServPolicyAttrStmtPoliceColorExceedVal=agentDiffServPolicyAttrStmtPoliceColorExceedVal, agentDiffServPolicyAttrStmtPoliceExceedVal=agentDiffServPolicyAttrStmtPoliceExceedVal, agentDiffServClassRuleMatchSrcIpAddr=agentDiffServClassRuleMatchSrcIpAddr, agentDiffServGenStatusServiceTableSize=agentDiffServGenStatusServiceTableSize, agentDiffServPolicyPerfInEntry=agentDiffServPolicyPerfInEntry, agentDiffServPolicyPerfInHCDiscardedPackets=agentDiffServPolicyPerfInHCDiscardedPackets, agentDiffServClassRuleMatchSrcMacMask=agentDiffServClassRuleMatchSrcMacMask, agentDiffServPolicyInstTable=agentDiffServPolicyInstTable, agentDiffServClassRuleMatchEntryType=agentDiffServClassRuleMatchEntryType, agentDiffServPolicyAttrStmtDrop=agentDiffServPolicyAttrStmtDrop, agentDiffServGenStatusAdminMode=agentDiffServGenStatusAdminMode, agentDiffServPolicyPerfInOfferedPackets=agentDiffServPolicyPerfInOfferedPackets, agentDiffServPolicyInstStorageType=agentDiffServPolicyInstStorageType, agentDiffServPolicyPerfOutHCOfferedPackets=agentDiffServPolicyPerfOutHCOfferedPackets, agentDiffServPolicyAttrTable=agentDiffServPolicyAttrTable, agentDiffServPolicyAttrStmtPoliceTworatePrate=agentDiffServPolicyAttrStmtPoliceTworatePrate, agentDiffServPolicyAttrStmtPoliceConformAct=agentDiffServPolicyAttrStmtPoliceConformAct, agentDiffServClassRowStatus=agentDiffServClassRowStatus, agentDiffServClassRuleMatchDstMacAddr=agentDiffServClassRuleMatchDstMacAddr, agentDiffServPolicyAttrStorageType=agentDiffServPolicyAttrStorageType, PYSNMP_MODULE_ID=fastPathQOSDiffServPrivate, agentDiffServClassRuleMatchDstMacMask=agentDiffServClassRuleMatchDstMacMask, agentDiffServClassIndexNextFree=agentDiffServClassIndexNextFree, agentDiffServClassAclType=agentDiffServClassAclType, agentDiffServClassType=agentDiffServClassType)
