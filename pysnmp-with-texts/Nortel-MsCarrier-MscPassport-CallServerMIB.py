#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-CallServerMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-CallServerMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:29:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
RowStatus, Unsigned32, DisplayString, StorageType, Counter32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowStatus", "Unsigned32", "DisplayString", "StorageType", "Counter32")
NonReplicated, WildcardedDigitString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "WildcardedDigitString")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, Unsigned32, NotificationType, iso, IpAddress, ModuleIdentity, TimeTicks, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Unsigned32", "NotificationType", "iso", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
callServerMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41))
mscCR = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42))
mscCRRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 1), )
if mibBuilder.loadTexts: mscCRRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRRowStatusTable.setDescription('This entry controls the addition and deletion of mscCR components.')
mscCRRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRIndex"))
if mibBuilder.loadTexts: mscCRRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRRowStatusEntry.setDescription('A single entry in the table represents a single mscCR component.')
mscCRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscCRRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscCR components. These components can be added and deleted.')
mscCRComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscCRStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRStorageType.setDescription('This variable represents the storage type value for the mscCR tables.')
mscCRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscCRIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRIndex.setDescription('This variable represents the index for the mscCR tables.')
mscCRNpi = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2))
mscCRNpiRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 1), )
if mibBuilder.loadTexts: mscCRNpiRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiRowStatusTable.setDescription('This entry controls the addition and deletion of mscCRNpi components.')
mscCRNpiRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRIndex"), (0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRNpiIndex"))
if mibBuilder.loadTexts: mscCRNpiRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiRowStatusEntry.setDescription('A single entry in the table represents a single mscCRNpi component.')
mscCRNpiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscCRNpiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscCRNpi components. These components can be added and deleted.')
mscCRNpiComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRNpiComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscCRNpiStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRNpiStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiStorageType.setDescription('This variable represents the storage type value for the mscCRNpi tables.')
mscCRNpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))))
if mibBuilder.loadTexts: mscCRNpiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiIndex.setDescription('This variable represents the index for the mscCRNpi tables.')
mscCRNpiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 10), )
if mibBuilder.loadTexts: mscCRNpiStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiStatsTable.setDescription('This group of attributes contains the statistics kept for a particular numbering plan indicator.')
mscCRNpiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRIndex"), (0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRNpiIndex"))
if mibBuilder.loadTexts: mscCRNpiStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiStatsEntry.setDescription('An entry in the mscCRNpiStatsTable.')
mscCRNpiTotalDnas = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRNpiTotalDnas.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiTotalDnas.setDescription('This attribute contains the total number of prefix-DNAs provisioned.')
mscCRNpiCallsRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRNpiCallsRouted.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiCallsRouted.setDescription('This attribute contains the total number of call setup packets routed. When the counter reaches the maximum, it wraps back to zero.')
mscCRNpiCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRNpiCallsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiCallsFailed.setDescription('This attribute contains the total number of call setup packets that failed to route. This could be caused by the MID or RID being unreachable or by the DNA failing to translate to a MID or RID. Check the prefix-DNA provisioning data and the DNAs associated to the endpoints of the connection. When the counter reaches the maximum, it wraps back to zero.')
mscCRNpiDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2))
mscCRNpiDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 1), )
if mibBuilder.loadTexts: mscCRNpiDnaRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaRowStatusTable.setDescription('This entry controls the addition and deletion of mscCRNpiDna components.')
mscCRNpiDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRIndex"), (0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRNpiIndex"), (0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRNpiDnaIndex"))
if mibBuilder.loadTexts: mscCRNpiDnaRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaRowStatusEntry.setDescription('A single entry in the table represents a single mscCRNpiDna component.')
mscCRNpiDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscCRNpiDnaRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscCRNpiDna components. These components can be added and deleted.')
mscCRNpiDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRNpiDnaComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscCRNpiDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscCRNpiDnaStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaStorageType.setDescription('This variable represents the storage type value for the mscCRNpiDna tables.')
mscCRNpiDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 1, 1, 10), WildcardedDigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: mscCRNpiDnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaIndex.setDescription('This variable represents the index for the mscCRNpiDna tables.')
mscCRNpiDnaProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 10), )
if mibBuilder.loadTexts: mscCRNpiDnaProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaProvTable.setDescription('This group of attributes represents what the prefix-DNA maps to.')
mscCRNpiDnaProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRIndex"), (0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRNpiIndex"), (0, "Nortel-MsCarrier-MscPassport-CallServerMIB", "mscCRNpiDnaIndex"))
if mibBuilder.loadTexts: mscCRNpiDnaProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaProvEntry.setDescription('An entry in the mscCRNpiDnaProvTable.')
mscCRNpiDnaRoutingId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscCRNpiDnaRoutingId.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaRoutingId.setDescription('This attribute identifies the routingId that the prefix-DNA maps to. If the value is set to zero, then the routingId is not used. Note that at least one and only one of the attributes in this group must be set to a non-zero value.')
mscCRNpiDnaModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 42, 2, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1909))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscCRNpiDnaModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: mscCRNpiDnaModuleId.setDescription('This attribute contains the module identifier value that the DNA maps to. If the value is set to zero, then the moduleId is not used. Note that at least one and only one of the attributes in this group must be set to a non-zero value.')
callServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 1))
callServerGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 1, 1))
callServerGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 1, 1, 3))
callServerGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 1, 1, 3, 2))
callServerCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 3))
callServerCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 3, 1))
callServerCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 3, 1, 3))
callServerCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 41, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-CallServerMIB", mscCRNpiDnaStorageType=mscCRNpiDnaStorageType, mscCRStorageType=mscCRStorageType, mscCRNpiCallsRouted=mscCRNpiCallsRouted, mscCRNpiDnaRoutingId=mscCRNpiDnaRoutingId, mscCRNpiDnaComponentName=mscCRNpiDnaComponentName, callServerCapabilitiesCA02A=callServerCapabilitiesCA02A, mscCRNpiRowStatus=mscCRNpiRowStatus, callServerCapabilitiesCA02=callServerCapabilitiesCA02, mscCRRowStatusTable=mscCRRowStatusTable, mscCR=mscCR, mscCRNpiStatsTable=mscCRNpiStatsTable, callServerMIB=callServerMIB, callServerCapabilitiesCA=callServerCapabilitiesCA, callServerGroupCA02A=callServerGroupCA02A, mscCRNpiComponentName=mscCRNpiComponentName, mscCRNpiTotalDnas=mscCRNpiTotalDnas, mscCRNpiDnaProvTable=mscCRNpiDnaProvTable, mscCRRowStatusEntry=mscCRRowStatusEntry, mscCRNpiCallsFailed=mscCRNpiCallsFailed, mscCRNpiDnaModuleId=mscCRNpiDnaModuleId, mscCRNpiDnaRowStatusTable=mscCRNpiDnaRowStatusTable, callServerGroupCA=callServerGroupCA, mscCRNpiDnaRowStatusEntry=mscCRNpiDnaRowStatusEntry, callServerGroupCA02=callServerGroupCA02, mscCRIndex=mscCRIndex, mscCRComponentName=mscCRComponentName, mscCRNpiDnaProvEntry=mscCRNpiDnaProvEntry, mscCRNpiRowStatusTable=mscCRNpiRowStatusTable, mscCRNpiStorageType=mscCRNpiStorageType, mscCRRowStatus=mscCRRowStatus, callServerGroup=callServerGroup, mscCRNpi=mscCRNpi, mscCRNpiDnaRowStatus=mscCRNpiDnaRowStatus, callServerCapabilities=callServerCapabilities, mscCRNpiIndex=mscCRNpiIndex, mscCRNpiStatsEntry=mscCRNpiStatsEntry, mscCRNpiDna=mscCRNpiDna, mscCRNpiRowStatusEntry=mscCRNpiRowStatusEntry, mscCRNpiDnaIndex=mscCRNpiDnaIndex)
