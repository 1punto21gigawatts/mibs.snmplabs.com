#
# PySNMP MIB module NBS-OBA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-OBA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NbsTcMHz, nbs = mibBuilder.importSymbols("NBS-MIB", "NbsTcMHz", "nbs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, ModuleIdentity, iso, Counter32, Integer32, Counter64, TimeTicks, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "ModuleIdentity", "iso", "Counter32", "Integer32", "Counter64", "TimeTicks", "NotificationType", "Bits")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
nbsObaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 240))
if mibBuilder.loadTexts: nbsObaMib.setLastUpdated('201503270000Z')
if mibBuilder.loadTexts: nbsObaMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsObaMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsObaMib.setDescription('Optical bandwidth allocation (OBA) information.')
nbsObaInfoGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 240, 1))
if mibBuilder.loadTexts: nbsObaInfoGrp.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoGrp.setDescription('For users to know if OBA is accessible')
nbsObaDefineGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 240, 2))
if mibBuilder.loadTexts: nbsObaDefineGrp.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineGrp.setDescription('For users to configure OBAs')
nbsObaAlsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 240, 3))
if mibBuilder.loadTexts: nbsObaAlsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsObaAlsGrp.setDescription('For users to configure the Automatic Laser Shut-down (ALS) feature')
nbsObaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 629, 240, 1, 1), )
if mibBuilder.loadTexts: nbsObaInfoTable.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoTable.setDescription('Optical bandwidth allocation (OBA) definition(s); table entries are expected to be configured and viewed from the port-level.')
nbsObaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 240, 1, 1, 1), ).setIndexNames((0, "NBS-OBA-MIB", "nbsObaInfoLineIfIndex"))
if mibBuilder.loadTexts: nbsObaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoEntry.setDescription('Optical bandwidth allocation (OBA) definition.')
nbsObaInfoLineIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaInfoLineIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoLineIfIndex.setDescription('The trunk or line port ifindex.')
nbsObaInfoAvails = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaInfoAvails.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoAvails.setDescription('The comma separated list of bandwidth units available to the user')
nbsObaInfoUnitSize = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 1, 1, 1, 3), NbsTcMHz()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaInfoUnitSize.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoUnitSize.setDescription('Shows the unit size in MHz')
nbsObaInfoMaxUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaInfoMaxUnits.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoMaxUnits.setDescription('Shows the maximum number of OBA units allowed on this port')
nbsObaInfoMaxUnitsPerClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaInfoMaxUnitsPerClientPort.setStatus('current')
if mibBuilder.loadTexts: nbsObaInfoMaxUnitsPerClientPort.setDescription('Shows the maximum number of OBA units allowed on client ports')
nbsObaDefineTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 240, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaDefineTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineTableSize.setDescription('The number of entries for the nbsObaDefineTable in this port ')
nbsObaDefineTable = MibTable((1, 3, 6, 1, 4, 1, 629, 240, 2, 2), )
if mibBuilder.loadTexts: nbsObaDefineTable.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineTable.setDescription('Optical bandwidth allocation (OBA) definition(s); table entries are expected to be configured and viewed from the port-level.')
nbsObaDefineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1), ).setIndexNames((0, "NBS-OBA-MIB", "nbsObaDefineLinePort"), (0, "NBS-OBA-MIB", "nbsObaDefineOrdinalIndex"))
if mibBuilder.loadTexts: nbsObaDefineEntry.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineEntry.setDescription('Optical bandwidth allocation (OBA) definition.')
nbsObaDefineLinePort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaDefineLinePort.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineLinePort.setDescription('The line port (aka trunk port) associated with this entry.')
nbsObaDefineOrdinalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaDefineOrdinalIndex.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineOrdinalIndex.setDescription('Ordinal index for this entry; arbitrarily picked, starting from 1. It is hidden from the CLI.')
nbsObaDefineLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsObaDefineLabel.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineLabel.setDescription('User defined label that uniquely identifies this OBA.')
nbsObaDefineOduType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unconfigured", 1), ("odu0", 2))).clone('unconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsObaDefineOduType.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineOduType.setDescription('The information structure data unit (data rate): * ODU0 (1.24416 Gb/s)')
nbsObaDefineOduList = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsObaDefineOduList.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineOduList.setDescription('A comma separated list of data unit identifiers assigned to this OBA; an identifier may be assigned to one OBA only. ODU0 identifiers are the letters a-h. The count of identifiers determines the maximum bandwidth available, based on nbsObaDefineOduType. Just enough should be assigned to convey the desired protocol; an overly generous assignment wastes a limited resource and reduces overall service capacity.')
nbsObaDefineOduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaDefineOduCount.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineOduCount.setDescription('The count of identifiers found in nbsObaDefineOduList.')
nbsObaDefineMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unconfigured", 1), ("express", 2), ("standAlone", 3), ("primary", 4), ("secondary", 5))).clone('unconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsObaDefineMapType.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineMapType.setDescription('Specifies the OBA traffic mapping type: * an express OBA passes from one line port to the other; * a standAlone OBA has no redundant backup; * a primary OBA is the first choice for redundant service; * a secondary OBA provides service when the primary OBA fails.')
nbsObaDefineClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 21), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsObaDefineClientPort.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineClientPort.setDescription('The add/drop client port (aka user or access port) associated with this entry.')
nbsObaDefineCoupledWith = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsObaDefineCoupledWith.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineCoupledWith.setDescription("This object's content depends on the 'nbsObaDefineMapType' value: * express -- the associated OBA on the other line port; * standAlone -- N/A * primary -- label of the associated secondary OBA; * secondary -- label of the associated primary OBA. Using an OBA's label instead of its ordinal index avoids unexpected and unintential associations after create/delete activities.")
nbsObaDefinePresentState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("active", 3), ("standby", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaDefinePresentState.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefinePresentState.setDescription('Current OBA status.')
nbsObaDefineAllocationInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("unitsExceedProtocolSpec", 2), ("additionalUnitsNeededForProtocol", 3), ("unitsMatchProtocolSpec", 4), ("unitsExceedExpress", 5), ("additionalUnitsNeededForExpress", 6), ("unitsMatchExpress", 7))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaDefineAllocationInfo.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineAllocationInfo.setDescription('Indicates if the number of units (ODUs) exceed, are under, or match the port protocol specifications.')
nbsObaDefineRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 2, 2, 1, 99), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nbsObaDefineRowStatus.setStatus('current')
if mibBuilder.loadTexts: nbsObaDefineRowStatus.setDescription('Used to create and delete OBAs')
nbsObaAlsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 240, 3, 1), )
if mibBuilder.loadTexts: nbsObaAlsTable.setStatus('current')
if mibBuilder.loadTexts: nbsObaAlsTable.setDescription('The Automatic Laser Shutdown (ALS) setting for each port.')
nbsObaAlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 240, 3, 1, 1), ).setIndexNames((0, "NBS-OBA-MIB", "nbsObaAlsIfIndex"))
if mibBuilder.loadTexts: nbsObaAlsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsObaAlsEntry.setDescription('Optical bandwidth allocation (OBA) port.')
nbsObaAlsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsObaAlsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsObaAlsIfIndex.setDescription('The ifindex associated with this entry.')
nbsObaAlsState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 240, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsObaAlsState.setStatus('current')
if mibBuilder.loadTexts: nbsObaAlsState.setDescription('Defines whether the Automatic Laser Shut-down (ALS) feature is enabled or disabled.')
mibBuilder.exportSymbols("NBS-OBA-MIB", nbsObaInfoLineIfIndex=nbsObaInfoLineIfIndex, nbsObaAlsTable=nbsObaAlsTable, nbsObaDefineGrp=nbsObaDefineGrp, nbsObaDefineLabel=nbsObaDefineLabel, nbsObaAlsState=nbsObaAlsState, nbsObaMib=nbsObaMib, nbsObaDefineAllocationInfo=nbsObaDefineAllocationInfo, nbsObaDefineClientPort=nbsObaDefineClientPort, nbsObaInfoMaxUnits=nbsObaInfoMaxUnits, nbsObaDefineOduCount=nbsObaDefineOduCount, PYSNMP_MODULE_ID=nbsObaMib, nbsObaDefineMapType=nbsObaDefineMapType, nbsObaDefineEntry=nbsObaDefineEntry, nbsObaInfoTable=nbsObaInfoTable, nbsObaAlsIfIndex=nbsObaAlsIfIndex, nbsObaInfoGrp=nbsObaInfoGrp, nbsObaAlsEntry=nbsObaAlsEntry, nbsObaAlsGrp=nbsObaAlsGrp, nbsObaDefineTableSize=nbsObaDefineTableSize, nbsObaDefineOrdinalIndex=nbsObaDefineOrdinalIndex, nbsObaDefinePresentState=nbsObaDefinePresentState, nbsObaDefineTable=nbsObaDefineTable, nbsObaDefineLinePort=nbsObaDefineLinePort, nbsObaDefineOduList=nbsObaDefineOduList, nbsObaInfoUnitSize=nbsObaInfoUnitSize, nbsObaDefineRowStatus=nbsObaDefineRowStatus, nbsObaDefineOduType=nbsObaDefineOduType, nbsObaInfoMaxUnitsPerClientPort=nbsObaInfoMaxUnitsPerClientPort, nbsObaInfoEntry=nbsObaInfoEntry, nbsObaInfoAvails=nbsObaInfoAvails, nbsObaDefineCoupledWith=nbsObaDefineCoupledWith)
