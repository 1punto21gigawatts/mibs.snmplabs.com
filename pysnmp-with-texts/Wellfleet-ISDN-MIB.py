#
# PySNMP MIB module Wellfleet-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Unsigned32, Integer32, Counter64, NotificationType, Gauge32, IpAddress, iso, ObjectIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Unsigned32", "Integer32", "Counter64", "NotificationType", "Gauge32", "IpAddress", "iso", "ObjectIdentity", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIsdnGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIsdnGroup")
wfModemIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1), )
if mibBuilder.loadTexts: wfModemIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfTable.setDescription('ISDN SYNC line record')
wfModemIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfModemIfSlot"), (0, "Wellfleet-ISDN-MIB", "wfModemIfConnector"))
if mibBuilder.loadTexts: wfModemIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfEntry.setDescription('An entry in the MODEM_IF table')
wfModemIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfDelete.setDescription('Create/Delete parameter')
wfModemIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfSlot.setDescription('Instance ID Slot, filled in by driver')
wfModemIfConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfConnectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfConnectStatus.setDescription('Dial up connection status')
wfModemIfConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfConnector.setDescription('Instance ID Connector, filled in by driver')
wfModemIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfCct.setDescription('CCT number for this line instance')
wfModemIfConnectWhen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("enable", 2))).clone('data')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfConnectWhen.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfConnectWhen.setDescription('when to connect line')
wfModemIfConnectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfConnectionTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfConnectionTime.setDescription('connection wait timer interval (Seconds)')
wfModemIfMinDurationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfMinDurationTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfMinDurationTime.setDescription('min duration time for the call (Seconds)')
wfModemIfInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfInactivityTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfInactivityTime.setDescription('In the absence of data traffic, the timeout period before a dial line is disconnected. Value is in MINUTES (max 12 hours)')
wfModemIfRetryDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("default", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfRetryDelayTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfRetryDelayTime.setDescription('delay to wait after retrys fails.')
wfModemIfLineBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64, 384, 1536))).clone(namedValues=NamedValues(("bw56k", 56), ("bw64k", 64), ("bw484k", 384), ("bw1536k", 1536)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfLineBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfLineBandwidth.setDescription('requested bandwidth. NULL_VAL = Default not to set bandwidth')
wfModemIfChanAggrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfChanAggrMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfChanAggrMax.setDescription('max number of chans to aggregate. NULL_VAL = Default not to used value.')
wfModemIfChanAggrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfChanAggrMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfChanAggrMin.setDescription('min number of chans to aggregate. NULL_VAL = Default not to used value.')
wfModemIfChanMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disablemgmt", 1), ("minmgmt", 2), ("deltamgmt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfChanMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfChanMgmt.setDescription('channel mgmt type. NULL_VAL = no management')
wfModemIfRestrictType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("calls", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfRestrictType.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfRestrictType.setDescription('call restriction type. NULL_VAL = Default not to restrict calls, 1 = Allow defined inbound call numbers only')
wfModemIfDialRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfDialRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfDialRetryCount.setDescription('Redial count')
wfModemIfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfRetries.setDescription('Number of retries attempted to connect a dialup line')
wfModemIfForceDial = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfForceDial.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfForceDial.setDescription('Force the modem to dial')
wfModemIfForceHangup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfForceHangup.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfForceHangup.setDescription('Force the modem to disconnect')
wfModemIfBringUpHour = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfBringUpHour.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfBringUpHour.setDescription('Time of day hour to allow a line to dial')
wfModemIfBringUpMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfBringUpMinute.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfBringUpMinute.setDescription('Time of day minute to allow a line to dial')
wfModemIfTakeDownHour = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfTakeDownHour.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfTakeDownHour.setDescription('Time of day hour to take down a dial line')
wfModemIfTakeDownMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfTakeDownMinute.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfTakeDownMinute.setDescription('Time of day minute to take down a dial line')
wfModemIfConnectRmtStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfConnectRmtStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfConnectRmtStationNum.setDescription('Phone number connected to (V.25bis mode only)')
wfModemIfConnectSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfConnectSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfConnectSubAddr.setDescription('Phone number sub address for isdn numbers')
wfModemIfMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raisedtr", 1), ("v25bis", 2), ("hayes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIfMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfMediaType.setDescription('modem type')
wfModemIfUpperLayerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfUpperLayerTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfUpperLayerTimeOut.setDescription('time out value for upper layer protocol initialization (seconds)')
wfModemIfRingIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfRingIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfRingIndicator.setDescription('Ring Indicator enable/disable parameter')
wfModemIfFsmDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemIfFsmDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIfFsmDebug.setDescription('FSM Debug indicator (for V25bis or RaiseDtr FSM)')
wfIsdnMsgCtrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4), )
if mibBuilder.loadTexts: wfIsdnMsgCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgCtrTable.setDescription('ISDN message counters, one entry per Digital Subscriber Loop (DSL), maintained by the Line Manager.')
wfIsdnMsgCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnMsgCtrSlot"), (0, "Wellfleet-ISDN-MIB", "wfIsdnMsgCtrDslID"))
if mibBuilder.loadTexts: wfIsdnMsgCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgCtrEntry.setDescription('An entry in the ISDN message counter table')
wfIsdnMsgCtrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnMsgCtrSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgCtrSlot.setDescription('Digital Subscriber Loop (DSL) these counters apply to')
wfIsdnMsgCtrDslID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnMsgCtrDslID.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgCtrDslID.setDescription('Digital Subscriber Loop (DSL) these counters apply to')
wfIsdnMsgCallProcInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgCallProcInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgCallProcInd.setDescription('Call Proceeding Indication from the network')
wfIsdnMsgClearConf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgClearConf.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgClearConf.setDescription('Release Complete from the network')
wfIsdnMsgClearInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgClearInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgClearInd.setDescription('Release Indication from the network')
wfIsdnMsgConnectInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgConnectInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgConnectInd.setDescription('Connect Indication from the network')
wfIsdnMsgSetupInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgSetupInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgSetupInd.setDescription('Setup Indication from the network')
wfIsdnMsgRegisterConf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgRegisterConf.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgRegisterConf.setDescription('Register Confirmation from the network')
wfIsdnMsgMgmtInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgMgmtInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgMgmtInd.setDescription('Management Indication from the network')
wfIsdnMsgDiscInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgDiscInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgDiscInd.setDescription('Disconnect Indication from the network')
wfIsdnMsgActInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgActInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgActInd.setDescription('Activation Indication from the driver')
wfIsdnMsgDeactInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgDeactInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgDeactInd.setDescription('Deactivation Indication from the driver')
wfIsdnMsgConnectConf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgConnectConf.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgConnectConf.setDescription('Connect Acknowledge from the network')
wfIsdnMsgAlertReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgAlertReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgAlertReq.setDescription('Alert Request to the network')
wfIsdnMsgCallProcReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgCallProcReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgCallProcReq.setDescription('Call Proceeding Request to the network')
wfIsdnMsgClearReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgClearReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgClearReq.setDescription('Clear Request to the network')
wfIsdnMsgConnectReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgConnectReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgConnectReq.setDescription('Connect Request to the network')
wfIsdnMsgSetupReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgSetupReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgSetupReq.setDescription('Setup Request to the network')
wfIsdnMsgMgmtReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgMgmtReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgMgmtReq.setDescription('Management Request to the network')
wfIsdnMsgDiscReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgDiscReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgDiscReq.setDescription('Disconnect Request to the network')
wfIsdnMsgActReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgActReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgActReq.setDescription('Activate Request to the driver')
wfIsdnMsgDeactReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgDeactReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgDeactReq.setDescription('Deactivate Request to the driver')
wfIsdnMsgAlertInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgAlertInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgAlertInd.setDescription('Alert Indication from the network')
wfIsdnMsgInfoInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnMsgInfoInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnMsgInfoInd.setDescription('Information Indication from the network')
wfIsdnHostActionTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5), )
if mibBuilder.loadTexts: wfIsdnHostActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActionTable.setDescription('This table is for debugging purposes only! It allows Host initiated call control actions.')
wfIsdnHostActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnHostActSlot"))
if mibBuilder.loadTexts: wfIsdnHostActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActionEntry.setDescription('An entry in the host action table')
wfIsdnHostActSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnHostActSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActSlot.setDescription('the slot the interface is on')
wfIsdnHostActDslId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActDslId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActDslId.setDescription('DSL id of the interface')
wfIsdnHostActCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCallID.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCallID.setDescription('Call ID')
wfIsdnHostActMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 28, 50, 82, 83))).clone(namedValues=NamedValues(("info", 15), ("setup", 28), ("disc", 50), ("activate", 82), ("deactivate", 83)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActMsgType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActMsgType.setDescription('type of message to be sent to call control (or ME)')
wfIsdnHostActCalledPtyType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("intl", 1), ("nat", 2), ("loc", 4))).clone('nat')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCalledPtyType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCalledPtyType.setDescription('called party type')
wfIsdnHostActCalledPtyPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9))).clone(namedValues=NamedValues(("isdn", 1), ("tele", 2), ("pvt", 9))).clone('isdn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCalledPtyPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCalledPtyPlan.setDescription('called party plan')
wfIsdnHostActCalledPtyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCalledPtyNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCalledPtyNum.setDescription('called party number in ASCII digits')
wfIsdnHostActCallingPtyType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("intl", 1), ("nat", 2), ("loc", 4))).clone('nat')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyType.setDescription('calling party type')
wfIsdnHostActCallingPtyPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9))).clone(namedValues=NamedValues(("isdn", 1), ("tele", 2), ("pvt", 9))).clone('isdn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyPlan.setDescription('calling party plan')
wfIsdnHostActCallingPtyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyNum.setDescription('calling party number in ASCII digits')
wfIsdnHostActCallingPtyPres = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rest", 1), ("unavl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyPres.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCallingPtyPres.setDescription('calling party presentation indicator')
wfIsdnHostActChanPrefBit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActChanPrefBit.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActChanPrefBit.setDescription('channel preferred/exclusive bit')
wfIsdnHostActChanSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("channelb1", 1), ("channelb2", 2), ("channel", 3))).clone('channelb1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActChanSelection.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActChanSelection.setDescription('channel selection')
wfIsdnHostActCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 21, 31, 54))).clone(namedValues=NamedValues(("normal", 16), ("rejected", 21), ("unspecified", 31), ("barred", 54))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCauseCode.setDescription('cause code')
wfIsdnHostActTransferCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9))).clone(namedValues=NamedValues(("unrestricted", 8), ("restricted", 9))).clone('unrestricted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActTransferCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActTransferCap.setDescription('Transfer Capability required for Bearer Cap IE')
wfIsdnHostActCldSadType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCldSadType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCldSadType.setDescription('Called Party Subaddress Type')
wfIsdnHostActCldSadNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCldSadNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCldSadNum.setDescription('Called Party subaddress Max length 20 octets')
wfIsdnHostActClgSadType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActClgSadType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActClgSadType.setDescription('Calling party subaddress Type')
wfIsdnHostActClgSadNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActClgSadNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActClgSadNum.setDescription('Called Party subaddress Max length 20 octets')
wfIsdnHostActCldSadPres = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActCldSadPres.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActCldSadPres.setDescription('Called party subaddress Type')
wfIsdnHostActClgSadPres = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnHostActClgSadPres.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnHostActClgSadPres.setDescription('Calling party subaddress presentation indication')
wfIsdnSwitchCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6), )
if mibBuilder.loadTexts: wfIsdnSwitchCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchCfgTable.setDescription('This is the Switchtype Configuration for the ISDN signaling stack.')
wfIsdnSwitchCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnSwitchCfgSlot"))
if mibBuilder.loadTexts: wfIsdnSwitchCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchCfgEntry.setDescription('An entry in the ISDN Switch table')
wfIsdnSwitchCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchCfgDelete.setDescription('Create / Delete Parameter')
wfIsdnSwitchCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnSwitchCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchCfgSlot.setDescription('Slot which has the ISDN interface')
wfIsdnSwitchCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 27, 29))).clone(namedValues=NamedValues(("brinet3", 1), ("briswissnet3", 2), ("bri5ess", 4), ("bridms100", 7), ("brivn3", 10), ("brikdd", 11), ("brintt", 12), ("brits013", 14), ("brini1", 15), ("pri4ess", 17), ("pri5ess", 18), ("pridms100", 20), ("prikdd", 21), ("printt", 22), ("prinet5", 27), ("prits014", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchCfgType.setDescription('The Type of switch from which the ISDN service is subscribed for this slot.')
wfIsdnSwitchTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchTestMode.setDescription('enable engineering test mode')
wfIsdnSwitchIncomingFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchIncomingFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchIncomingFilter.setDescription('Filter Calling address in the Incoming call')
wfIsdnSwitchTraceFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchTraceFacility.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchTraceFacility.setDescription('Enable/Disable ISDN protocol stack message tracing facility - when this is enabled, all messages exchanged between Layer 2 and Layer 3 ISDN entities will be captured to the event log as TRACE messages')
wfIsdnSwitchScreenedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnSwitchScreenedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchScreenedCalls.setDescription('Number of incoming calls ignored because of screening, ie. the Calling Party number was not in the list of approved numbers')
wfIsdnSwitchSendingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchSendingComplete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchSendingComplete.setDescription('The Sending Complete IE is required to be sent in the Setup message indicating en-bloc sending. Enable this attribute to include Sending Complete IE if the Switch providing ISDN service requires it.')
wfIsdnSwitchGlobalRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate64", 1), ("rate56", 2))).clone('rate64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchGlobalRateAdaption.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchGlobalRateAdaption.setDescription('Global Rate Adaption, If this value is configured request the configured Rate adpation when establishing connection.')
wfIsdnSwitchX25D = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchX25D.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchX25D.setDescription('Enable this attribute to support the X25 over ISDN D channel feature.')
wfIsdnSwitchAllowedScreeningBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchAllowedScreeningBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchAllowedScreeningBits.setDescription('Set this attribute to the value of the screening bits that is allowed in the incoming calling number IE. Only a calling number with screening bits matching this attribute will be recognised, all others will be ignored. If this attribute is disabled, the first calling number found will be used.')
wfIsdnSwitchPreauthTodCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSwitchPreauthTodCheck.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSwitchPreauthTodCheck.setDescription('Enable this attribute to attempt to identify whether a caller is outside of a valid TOD window using the calling number, before accepting the call.')
wfIsdnCallInfoTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7), )
if mibBuilder.loadTexts: wfIsdnCallInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoTable.setDescription('Call Information Table - contains data pertinent to a an active call, both incoming and outgoing, indexed by an internally generated call reference number.')
wfIsdnCallInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnCallInfoSlot"), (0, "Wellfleet-ISDN-MIB", "wfIsdnCallInfoDslID"), (0, "Wellfleet-ISDN-MIB", "wfIsdnCallInfoCallID"))
if mibBuilder.loadTexts: wfIsdnCallInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoEntry.setDescription('An entry in the ISDN Call Info Table')
wfIsdnCallInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoSlot.setDescription('The slot this call resides on')
wfIsdnCallInfoDslID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoDslID.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoDslID.setDescription('Digital Subscriber Loop (DSL) this call resides on')
wfIsdnCallInfoCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoCallID.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoCallID.setDescription('Call ID instance identifier - numbers in the range 0x0000 - 0x7FFF are assigned to incoming calls, 0x8000 - 0xFFFF are assigned to outgoing calls - this is used as a handle to manage an active call')
wfIsdnCallInfoBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoBChannel.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoBChannel.setDescription('B Channel this call resides on')
wfIsdnCallInfoCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoCallState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoCallState.setDescription('Line Manager Call State')
wfIsdnCallInfoTransferCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9))).clone(namedValues=NamedValues(("udi", 8), ("rdi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoTransferCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoTransferCap.setDescription('Transfer Capability value from the Bearer Capability Information Element')
wfIsdnCallInfoCalledPtyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoCalledPtyNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoCalledPtyNum.setDescription('Called Party Number')
wfIsdnCallInfoCallingPtyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoCallingPtyNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoCallingPtyNum.setDescription('Calling Party Number')
wfIsdnCallInfoDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoDuration.setDescription('Duration of the call in minutes')
wfIsdnCallInfoConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoConnectTime.setDescription('Start time of the call (HHMMSS)')
wfIsdnCallInfoRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoRateAdaption.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoRateAdaption.setDescription('Rate adaption for this call in KBPS')
wfIsdnCallInfoCalledPtySub = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoCalledPtySub.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoCalledPtySub.setDescription('Called Party Subaddress')
wfIsdnCallInfoCallingPtySub = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoCallingPtySub.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoCallingPtySub.setDescription('Calling Party Subaddress')
wfIsdnCallInfoChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bchannel", 1), ("multirate", 2))).clone('bchannel')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoChanType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoChanType.setDescription('ISDN call channel type: B Channel or Multirate')
wfIsdnCallInfoAggrChanCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoAggrChanCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoAggrChanCnt.setDescription("PRI Multirate call's aggreated channel count")
wfIsdnCallInfoTimeslotMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnCallInfoTimeslotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoTimeslotMask.setDescription('Timeslots used by a PRI Multirate call')
wfIsdnCallInfoCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 7, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnCallInfoCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnCallInfoCct.setDescription('Circuit using this call')
wfIsdnBriInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9), )
if mibBuilder.loadTexts: wfIsdnBriInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriInterfaceTable.setDescription(' ISDN BRI D Channel MIB Record ')
wfIsdnBriInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnBriSlot"), (0, "Wellfleet-ISDN-MIB", "wfIsdnBriConnector"))
if mibBuilder.loadTexts: wfIsdnBriInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriInterfaceEntry.setDescription('An entry in the ISDN table')
wfIsdnBriDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriDelete.setDescription('Create/Delete parameter')
wfIsdnBriDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriDisable.setDescription('Enable/Disable parameter')
wfIsdnBriState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("ubcwaiting", 10), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriState.setDescription('Line Driver state variable, Not Present, Init, Down, Up')
wfIsdnBriSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriSlot.setDescription('Instance ID Slot, filled in by driver.')
wfIsdnBriConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriConnector.setDescription("Instance ID Connector, filled in by driver. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 9 and 'connector' is defined in attribute 10 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfIsdnBriCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriCct.setDescription('CCT number for this interface instance')
wfIsdnBriDslId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriDslId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriDslId.setDescription("The ID of this DSL interface. This stands for 'Digital Subscriber Loop' which is the physical link from the TE (us) to the NT (switch).")
wfIsdnBriLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriLineNumber.setDescription('Line number for this line instance. This is assigned at configuration time and uniquely identifies this line')
wfIsdnBriModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriModule.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriModule.setDescription('Module number for ASN platform, filled in by driver. For non-ASN platforms this attribute will not be used.')
wfIsdnBriActualConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriActualConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriActualConnector.setDescription('Actual connector number for ASN platform, filled in by driver. For non-ASN platforms, this attribute will not be used.')
wfIsdnBriTeState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inactive", 1), ("sensing", 2), ("deactivated", 3), ("awaitsignal", 4), ("identifyinput", 5), ("synchronized", 6), ("activated", 7), ("lostframing", 8))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTeState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTeState.setDescription('State of the S/T interface from the routers point of view. These states correspond to those described in the CCITT I.430 recommendation and with those described with relation to the ISAC-S.')
wfIsdnBriMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1024)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriMtu.setDescription('Contains the largest frame size that can be received by this interface. Anything larger than the MTU will be discarded.')
wfIsdnBriBChanLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriBChanLoop.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriBChanLoop.setDescription('This allows us to put the B Channels into loopback at the physical interface. This is usually used for Layer 1 conformance testing.')
wfIsdnBriTimer3Tmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriTimer3Tmo.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTimer3Tmo.setDescription("Indicates the amount of time in seconds for our T3 timer. The T3 timer is initiated by the host (i.e. the router). The T3 timer is started whenever the S/T interface is in a deactivated state and the host (i.e. the Router) wishes to activate the interface. As an example, for our application, the Router would activate the interface when there was data to be transmitted out that interface. At the point when we try activating the interface, the T3 timer is started. During the duration of the T3 timer, the router in trying to activate the interface will transmit INFO 1's out the S/T interface until either a signal is detected (from the network) or the T3 timer expires.")
wfIsdnBriTimer4Tmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1000)).clone(750)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriTimer4Tmo.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTimer4Tmo.setDescription('Indicates the amount of time in milliseconds for our T4 timer. The T4 timer is a debounce timer which is used to shield the upper layers from short glitches at the S/T interface. Spurious problems of short duration will not be reported to the upper layers until the T4 timer expires. The T4 timer is started when leaving state F7 or F8 upon the reception of INFO 0. The corresponding Deactivation Indication will be delivered to layer 2 only if layer 1 does not enter an active state before expiration of this timer. (Note that a value of 0 indicates the timer is disabled).')
wfIsdnBriRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxOctets.setDescription('Number of octets received without error')
wfIsdnBriRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxFrames.setDescription('Number of frames received without error')
wfIsdnBriTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTxOctets.setDescription('Number of octets transmitted without error')
wfIsdnBriTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTxFrames.setDescription('Number of frames transmitted without error')
wfIsdnBriRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxErrors.setDescription('Total number of receive errors')
wfIsdnBriTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTxErrors.setDescription('Total number of transmission errors')
wfIsdnBriRxLackRescs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxLackRescs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxLackRescs.setDescription('Number of times a receive packet was discarded because there was no receive descriptor available.')
wfIsdnBriTxLackRescs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTxLackRescs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTxLackRescs.setDescription("Number of frames clipped in driver's transmit routine due to transmit congestion.")
wfIsdnBriTxUnderFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTxUnderFlows.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTxUnderFlows.setDescription('Number of transmission underflows, device FIFO went empty before driver could replenish with more data')
wfIsdnBriTxDChanCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTxDChanCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTxDChanCollisions.setDescription('Number of times a collison occurred on the S-Bus transmitting a frame greater than 32 bytes, so frame had to be retransmitted')
wfIsdnBriRxOverFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxOverFlows.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxOverFlows.setDescription('Number of receive overflows, device FIFO overflowed before the driver was able to read/empty the FIFO.')
wfIsdnBriRxTooLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxTooLongFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxTooLongFrames.setDescription('Number of frames received which were larger than the defined MTU')
wfIsdnBriRxBadCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxBadCrcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxBadCrcs.setDescription('Number of bad receive frames caused by FCS errors')
wfIsdnBriRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxAborts.setDescription("Number of aborted frames due to being non octet aligned (i.e seven one's in a row received)")
wfIsdnBriRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriRxReplenMisses.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriRxReplenMisses.setDescription('Number of packet buffer misses while attempting to replenish driver receive descriptor ring.')
wfIsdnBriTimer3Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTimer3Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTimer3Timeouts.setDescription("Number of Timer 3 timeout's detected. This indicates the number of times the Router tried to activate the S/T interface without success.")
wfIsdnBriTimer4Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriTimer4Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTimer4Timeouts.setDescription("Number of Timer 4 timeout's detected. The T4 timer is started when leaving state F7 or F8 upon the reception of INFO 0. If layer 1 does not enter an active state before expiration of this timer, then a Deactivation Indication will be sent to layer 2.")
wfIsdnBriLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptp", 1), ("mtp", 2))).clone('ptp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriLineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriLineType.setDescription('BRI line type can be either Multipoint (passive bus configuration with more than one device connected) or Point-to-Point with a single device attached.')
wfIsdnBriMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dialup", 1), ("leased", 2), ("floatb", 3))).clone('dialup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriMode.setDescription('This attribute controls the operation of the Basic Rate Interface. DIALUP is the traditional mode of operation in which call setup signalling is done in concert with the ISDN switch. LEASED is a special case of ISDN in which no signalling will be done with the switch and instead the switch is configured with nailed up connections to specific remote ISDN termination points.')
wfIsdnBriInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isdns", 1), ("isdnu", 2))).clone('isdns')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriInterfaceType.setDescription("Type of ISDN interface card being used. It can either be 'U' or 'S/T'.")
wfIsdnBriNtState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("fullreset", 1), ("alerting", 2), ("receivereset", 3), ("synchronized1", 4), ("synchronized2", 5), ("deactivated", 6), ("activated", 7), ("test", 8), ("error", 9), ("pendreceivereset", 10))).clone('deactivated')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBriNtState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriNtState.setDescription('State of the U interface from the routers point of view. These states correspond to those described in the ANSI T1.601 recommendation and with those described in relation to the IEC-Q.')
wfIsdnBriTimerM4Tmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriTimerM4Tmo.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTimerM4Tmo.setDescription('Indicates the amount of time in seconds for our M4 timer. The M4 timer is initiated by the host (i.e. the router). The M4 timer is started whenever the host receives a wakeup signal from the U interface. During the duration of the M4 timer, the router in trying to activate the interface will respond with a TN signal followed with SN1 (optional) signal. The router will then receive SL1 from the U interface followed with SL2. Upon reception of SL2 signal, the router will respond with SN2. At this point the timer is stopped if it has not expired yet.')
wfIsdnBriTimerM6Tmo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriTimerM6Tmo.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriTimerM6Tmo.setDescription('Indicates the amount of time in milliseconds for our M6 timer. The M6 timer is initiated by the host (i.e. the router). The host has to complete the start-up sequence for the duration of the M6 timer. If it fails to do so, it will enter the receivereset state and remain in that state until it receives a wakeup signal from the U interface.')
wfIsdnBriX25D = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriX25D.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriX25D.setDescription('enable/disable the X25 over ISDN D channel feature on the interface.')
wfIsdnBriX25DTeiType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2))).clone('fixed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriX25DTeiType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriX25DTeiType.setDescription('TEI type used for the X25 over ISDN D channel feature.')
wfIsdnBriX25DTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 9, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBriX25DTeiValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBriX25DTeiValue.setDescription('TEI value used for the X25 over ISDN D channel feature. 0 to 63 are for fixed TEI type and 127 for auto TEI type')
wfIsdnBChanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10), )
if mibBuilder.loadTexts: wfIsdnBChanInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanInterfaceTable.setDescription(' ISDN Logical B channel MIB Record ')
wfIsdnBChanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnBChanLineNumber"), (0, "Wellfleet-ISDN-MIB", "wfIsdnBChanIndex"))
if mibBuilder.loadTexts: wfIsdnBChanInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanInterfaceEntry.setDescription('An entry in the ISDN table')
wfIsdnBChanDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanDelete.setDescription('Create/Delete parameter')
wfIsdnBChanLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBChanLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanLineNumber.setDescription('line number for this line instance')
wfIsdnBChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBChanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanIndex.setDescription('a unique one up type number to create a list')
wfIsdnBChanDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanDisable.setDescription('Enable/Disable parameter')
wfIsdnBChanState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBChanState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanState.setDescription('Line Driver state variable, Not Present, Init, Down, Up')
wfIsdnBChanCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanCct.setDescription('CCT number for this interface instance')
wfIsdnBChanWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ppp", 1), ("framerelay", 2), ("x25", 3))).clone('ppp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanWanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanWanProtocol.setDescription('WAN protocol selection is provided via this parameter. The supported protocols can be selected per interface.')
wfIsdnBChanBackupPool = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanBackupPool.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanBackupPool.setDescription('Backup pool id containing this line driver')
wfIsdnBChanDemandPool = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanDemandPool.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanDemandPool.setDescription('Dial on demand pool id containing this line driver')
wfIsdnBChanDirectoryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanDirectoryNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanDirectoryNum.setDescription('Directory Number associated with the interface')
wfIsdnBChanSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanSpid.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanSpid.setDescription('Service Profile IDentifier - assigned by the Central Office on ordering ISDN service from a switch conforming to National ISDN.')
wfIsdnBChanActiveCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnBChanActiveCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanActiveCct.setDescription('CCT number for this interface instance')
wfIsdnBChanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBChanPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBChanPriority.setDescription('Priority associated with this ISDN B Channel')
wfIsdnBchanMultilineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("master", 2), ("slave", 3), ("secondary", 4))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnBchanMultilineMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnBchanMultilineMode.setDescription('This indicates the roll the B channel plays in a Bandwidth on Demand-Multiline Circuit. If this is not BOD, the mode is standard.')
wfIsdnPoolTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11), )
if mibBuilder.loadTexts: wfIsdnPoolTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolTable.setDescription(' ISDN Pool MIB Record ')
wfIsdnPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnPoolType"), (0, "Wellfleet-ISDN-MIB", "wfIsdnPoolLineNumber"), (0, "Wellfleet-ISDN-MIB", "wfIsdnPoolId"))
if mibBuilder.loadTexts: wfIsdnPoolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolEntry.setDescription('An entry in the Pool table')
wfIsdnPoolDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnPoolDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolDelete.setDescription('Create/Delete parameter')
wfIsdnPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("demand", 1), ("backup", 2), ("bandwidth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnPoolType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolType.setDescription('Type of Pool . Backup or Demand')
wfIsdnPoolLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnPoolLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolLineNumber.setDescription('D channel line number associated with this pool instance')
wfIsdnPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnPoolId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolId.setDescription('a unique pool ID')
wfIsdnPoolChannelCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnPoolChannelCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolChannelCnt.setDescription('Number of Channels allocated for this Pool')
wfIsdnPoolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnPoolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolPriority.setDescription('Priority of Lines in Pool')
wfIsdnPoolChannelInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnPoolChannelInUse.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnPoolChannelInUse.setDescription('Number of Channels in use from this Pool.')
wfIsdnLocalPhoneNumTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12), )
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumTable.setDescription('ISDN Local phone number list ')
wfIsdnLocalPhoneNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfIsdnLocalPhoneNumLineNum"), (0, "Wellfleet-ISDN-MIB", "wfIsdnLocalPhoneNumIndex"))
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumEntry.setDescription('An entry in table')
wfIsdnLocalPhoneNumDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumDelete.setDescription('Delete this phone number from the list')
wfIsdnLocalPhoneNumLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumLineNum.setDescription('D Channel Line Number')
wfIsdnLocalPhoneNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalPhoneNumIndex.setDescription('a unique sequetial index to create a list')
wfIsdnLocalDirectoryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnLocalDirectoryNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalDirectoryNum.setDescription('Directory Number (local phone number) assiciated with the interface')
wfIsdnLocalSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnLocalSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalSubAddr.setDescription('Local Phone Number, the sub address portion')
wfIsdnLocalSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnLocalSpid.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalSpid.setDescription('Service Profile IDentifier - assigned by the Central Office on ordering ISDN service from a switch conforming to National ISDN.')
wfIsdnLocalAssignedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnLocalAssignedChannel.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalAssignedChannel.setDescription('for Swserv phone numbers, the delimiter portion')
wfIsdnLocalSpidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accepted", 1), ("rejected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdnLocalSpidStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalSpidStatus.setDescription('The status of SPID registration')
wfIsdnLocalDirectoryNumType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 32, 48, 64, 96))).clone(namedValues=NamedValues(("unknown", 1), ("international", 16), ("national", 32), ("specific", 48), ("subscriber", 64), ("abbreviated", 96))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnLocalDirectoryNumType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalDirectoryNumType.setDescription('For ISDN type number, it needs type of number UNKNOWN Type is 0, use 1 to satisfy MDL requirement This attribute value will be ANDED with 0xFFF0 before using it.')
wfIsdnLocalDirectoryNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 1, 3, 4, 8, 9))).clone(namedValues=NamedValues(("unknown", 16), ("telephony", 1), ("x121", 3), ("telex", 4), ("standard", 8), ("private", 9))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnLocalDirectoryNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnLocalDirectoryNumPlan.setDescription('If Isdn and if type of number is UNKNOWN or INERNATIONAL or NATIONAL or SUBSCRIBER then a plan number is needed. UNKNOWN is 0 , using 16 (0x10)to satisfy MDL requirement. We will AND this field with 0x0F before using it.')
wfIsdnSpidRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 11), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSpidRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSpidRetries.setDescription('Number of times the SPID registration request is sent to the ISDN switch')
wfIsdnSpidRetryAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSpidRetryAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSpidRetryAttempts.setDescription('Number of times the SPID registration is re-envoked.')
wfIsdnSpidRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 13), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSpidRetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSpidRetryTimer.setDescription('Amount of time in seconds to wait before re-envoking SPID registration')
wfIsdnSpidResetBri = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 12, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdnSpidResetBri.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdnSpidResetBri.setDescription('When enabled the ISDN BRI interface is reset after all the SPID registartion attempts fail, zero setting disables this functionality. When set to a nonzero N the interface will be reset if the total number of BRI interface resets on this slot is less than N.')
wfModemCommandTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 13), )
if mibBuilder.loadTexts: wfModemCommandTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCommandTable.setDescription('Modem Command String interface Entry ')
wfModemCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 13, 1), ).setIndexNames((0, "Wellfleet-ISDN-MIB", "wfModemCommandSlot"), (0, "Wellfleet-ISDN-MIB", "wfModemCommandConnector"))
if mibBuilder.loadTexts: wfModemCommandEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCommandEntry.setDescription('An entry in table')
wfModemCommandDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCommandDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCommandDelete.setDescription('Delete this Modem Command Entry mib record')
wfModemCommandSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemCommandSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCommandSlot.setDescription('Instance ID Slot, filled in by driver')
wfModemCommandConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemCommandConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCommandConnector.setDescription('Instance ID Connector, filled in by driver')
wfModemCommandString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 8, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCommandString.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCommandString.setDescription('String to be passed to the modem to configure it. Syntax of the string is not checked')
mibBuilder.exportSymbols("Wellfleet-ISDN-MIB", wfModemIfEntry=wfModemIfEntry, wfIsdnCallInfoTable=wfIsdnCallInfoTable, wfIsdnBriRxLackRescs=wfIsdnBriRxLackRescs, wfIsdnBriNtState=wfIsdnBriNtState, wfModemIfLineBandwidth=wfModemIfLineBandwidth, wfIsdnBriTxLackRescs=wfIsdnBriTxLackRescs, wfModemIfRingIndicator=wfModemIfRingIndicator, wfModemCommandTable=wfModemCommandTable, wfModemIfTakeDownHour=wfModemIfTakeDownHour, wfIsdnBriTimer3Timeouts=wfIsdnBriTimer3Timeouts, wfModemIfRestrictType=wfModemIfRestrictType, wfIsdnBriInterfaceEntry=wfIsdnBriInterfaceEntry, wfIsdnBChanDirectoryNum=wfIsdnBChanDirectoryNum, wfIsdnHostActCallingPtyPres=wfIsdnHostActCallingPtyPres, wfModemIfCct=wfModemIfCct, wfIsdnPoolTable=wfIsdnPoolTable, wfIsdnBriTxOctets=wfIsdnBriTxOctets, wfIsdnBriTxUnderFlows=wfIsdnBriTxUnderFlows, wfIsdnBriTimerM6Tmo=wfIsdnBriTimerM6Tmo, wfIsdnMsgCallProcInd=wfIsdnMsgCallProcInd, wfIsdnBriBChanLoop=wfIsdnBriBChanLoop, wfIsdnPoolChannelCnt=wfIsdnPoolChannelCnt, wfIsdnPoolChannelInUse=wfIsdnPoolChannelInUse, wfIsdnHostActChanSelection=wfIsdnHostActChanSelection, wfIsdnHostActCallingPtyNum=wfIsdnHostActCallingPtyNum, wfIsdnBriTimer4Tmo=wfIsdnBriTimer4Tmo, wfIsdnBChanLineNumber=wfIsdnBChanLineNumber, wfModemCommandSlot=wfModemCommandSlot, wfIsdnCallInfoEntry=wfIsdnCallInfoEntry, wfModemCommandDelete=wfModemCommandDelete, wfModemIfDelete=wfModemIfDelete, wfIsdnBriTxDChanCollisions=wfIsdnBriTxDChanCollisions, wfIsdnBChanBackupPool=wfIsdnBChanBackupPool, wfIsdnBChanSpid=wfIsdnBChanSpid, wfIsdnBriDelete=wfIsdnBriDelete, wfIsdnMsgInfoInd=wfIsdnMsgInfoInd, wfIsdnHostActCalledPtyType=wfIsdnHostActCalledPtyType, wfIsdnBriRxTooLongFrames=wfIsdnBriRxTooLongFrames, wfIsdnCallInfoChanType=wfIsdnCallInfoChanType, wfIsdnBriDisable=wfIsdnBriDisable, wfIsdnSwitchCfgTable=wfIsdnSwitchCfgTable, wfIsdnCallInfoRateAdaption=wfIsdnCallInfoRateAdaption, wfIsdnBChanWanProtocol=wfIsdnBChanWanProtocol, wfIsdnBriRxFrames=wfIsdnBriRxFrames, wfIsdnMsgRegisterConf=wfIsdnMsgRegisterConf, wfIsdnBriSlot=wfIsdnBriSlot, wfIsdnCallInfoDslID=wfIsdnCallInfoDslID, wfIsdnBriTimer4Timeouts=wfIsdnBriTimer4Timeouts, wfIsdnHostActCauseCode=wfIsdnHostActCauseCode, wfIsdnMsgClearConf=wfIsdnMsgClearConf, wfIsdnBriInterfaceType=wfIsdnBriInterfaceType, wfModemIfForceHangup=wfModemIfForceHangup, wfIsdnBriCct=wfIsdnBriCct, wfIsdnBChanIndex=wfIsdnBChanIndex, wfModemIfForceDial=wfModemIfForceDial, wfIsdnHostActDslId=wfIsdnHostActDslId, wfIsdnBriRxReplenMisses=wfIsdnBriRxReplenMisses, wfIsdnHostActCallingPtyPlan=wfIsdnHostActCallingPtyPlan, wfIsdnBChanActiveCct=wfIsdnBChanActiveCct, wfIsdnCallInfoConnectTime=wfIsdnCallInfoConnectTime, wfIsdnMsgClearInd=wfIsdnMsgClearInd, wfIsdnBchanMultilineMode=wfIsdnBchanMultilineMode, wfIsdnLocalSpid=wfIsdnLocalSpid, wfIsdnBriRxErrors=wfIsdnBriRxErrors, wfIsdnSwitchTestMode=wfIsdnSwitchTestMode, wfIsdnMsgDiscInd=wfIsdnMsgDiscInd, wfIsdnMsgDeactInd=wfIsdnMsgDeactInd, wfIsdnBChanInterfaceEntry=wfIsdnBChanInterfaceEntry, wfModemIfChanAggrMin=wfModemIfChanAggrMin, wfIsdnBChanDemandPool=wfIsdnBChanDemandPool, wfModemCommandEntry=wfModemCommandEntry, wfIsdnSwitchCfgSlot=wfIsdnSwitchCfgSlot, wfIsdnCallInfoCallState=wfIsdnCallInfoCallState, wfIsdnCallInfoDuration=wfIsdnCallInfoDuration, wfIsdnBriRxAborts=wfIsdnBriRxAborts, wfIsdnSwitchScreenedCalls=wfIsdnSwitchScreenedCalls, wfIsdnSwitchCfgType=wfIsdnSwitchCfgType, wfIsdnHostActSlot=wfIsdnHostActSlot, wfModemIfUpperLayerTimeOut=wfModemIfUpperLayerTimeOut, wfIsdnCallInfoCalledPtyNum=wfIsdnCallInfoCalledPtyNum, wfIsdnLocalSubAddr=wfIsdnLocalSubAddr, wfIsdnSwitchTraceFacility=wfIsdnSwitchTraceFacility, wfIsdnLocalDirectoryNumPlan=wfIsdnLocalDirectoryNumPlan, wfIsdnBriInterfaceTable=wfIsdnBriInterfaceTable, wfIsdnHostActCallingPtyType=wfIsdnHostActCallingPtyType, wfIsdnSwitchCfgDelete=wfIsdnSwitchCfgDelete, wfIsdnSwitchIncomingFilter=wfIsdnSwitchIncomingFilter, wfIsdnCallInfoTransferCap=wfIsdnCallInfoTransferCap, wfIsdnMsgConnectInd=wfIsdnMsgConnectInd, wfModemIfBringUpMinute=wfModemIfBringUpMinute, wfModemIfDialRetryCount=wfModemIfDialRetryCount, wfIsdnBChanInterfaceTable=wfIsdnBChanInterfaceTable, wfIsdnHostActClgSadType=wfIsdnHostActClgSadType, wfIsdnLocalDirectoryNumType=wfIsdnLocalDirectoryNumType, wfIsdnCallInfoAggrChanCnt=wfIsdnCallInfoAggrChanCnt, wfIsdnMsgCtrDslID=wfIsdnMsgCtrDslID, wfModemIfChanAggrMax=wfModemIfChanAggrMax, wfIsdnMsgCtrTable=wfIsdnMsgCtrTable, wfIsdnCallInfoCct=wfIsdnCallInfoCct, wfModemIfConnectWhen=wfModemIfConnectWhen, wfIsdnCallInfoTimeslotMask=wfIsdnCallInfoTimeslotMask, wfModemCommandConnector=wfModemCommandConnector, wfIsdnMsgAlertReq=wfIsdnMsgAlertReq, wfIsdnBriTxErrors=wfIsdnBriTxErrors, wfIsdnLocalPhoneNumDelete=wfIsdnLocalPhoneNumDelete, wfIsdnMsgDiscReq=wfIsdnMsgDiscReq, wfIsdnBriDslId=wfIsdnBriDslId, wfIsdnBriLineType=wfIsdnBriLineType, wfIsdnHostActCldSadType=wfIsdnHostActCldSadType, wfIsdnHostActMsgType=wfIsdnHostActMsgType, wfModemIfConnectionTime=wfModemIfConnectionTime, wfIsdnMsgCtrSlot=wfIsdnMsgCtrSlot, wfIsdnSpidResetBri=wfIsdnSpidResetBri, wfIsdnBriActualConnector=wfIsdnBriActualConnector, wfIsdnHostActCalledPtyPlan=wfIsdnHostActCalledPtyPlan, wfModemIfConnectStatus=wfModemIfConnectStatus, wfIsdnBriRxOverFlows=wfIsdnBriRxOverFlows, wfIsdnMsgConnectReq=wfIsdnMsgConnectReq, wfIsdnBriTxFrames=wfIsdnBriTxFrames, wfModemIfConnector=wfModemIfConnector, wfIsdnBriX25DTeiType=wfIsdnBriX25DTeiType, wfIsdnBChanDelete=wfIsdnBChanDelete, wfIsdnMsgActReq=wfIsdnMsgActReq, wfIsdnHostActTransferCap=wfIsdnHostActTransferCap, wfIsdnLocalDirectoryNum=wfIsdnLocalDirectoryNum, wfIsdnMsgMgmtInd=wfIsdnMsgMgmtInd, wfIsdnHostActClgSadNum=wfIsdnHostActClgSadNum, wfIsdnSwitchPreauthTodCheck=wfIsdnSwitchPreauthTodCheck, wfModemIfMinDurationTime=wfModemIfMinDurationTime, wfIsdnBriModule=wfIsdnBriModule, wfIsdnLocalAssignedChannel=wfIsdnLocalAssignedChannel, wfModemIfMediaType=wfModemIfMediaType, wfIsdnHostActionEntry=wfIsdnHostActionEntry, wfIsdnHostActCldSadNum=wfIsdnHostActCldSadNum, wfIsdnPoolPriority=wfIsdnPoolPriority, wfIsdnHostActClgSadPres=wfIsdnHostActClgSadPres, wfModemIfTable=wfModemIfTable, wfIsdnHostActCallID=wfIsdnHostActCallID, wfIsdnBriX25D=wfIsdnBriX25D, wfIsdnBriTimer3Tmo=wfIsdnBriTimer3Tmo, wfIsdnBriState=wfIsdnBriState, wfIsdnMsgDeactReq=wfIsdnMsgDeactReq, wfIsdnCallInfoSlot=wfIsdnCallInfoSlot, wfIsdnSwitchAllowedScreeningBits=wfIsdnSwitchAllowedScreeningBits, wfIsdnHostActionTable=wfIsdnHostActionTable, wfIsdnPoolEntry=wfIsdnPoolEntry, wfModemIfSlot=wfModemIfSlot, wfModemIfFsmDebug=wfModemIfFsmDebug, wfIsdnBChanDisable=wfIsdnBChanDisable, wfIsdnPoolLineNumber=wfIsdnPoolLineNumber, wfIsdnCallInfoBChannel=wfIsdnCallInfoBChannel, wfIsdnCallInfoCalledPtySub=wfIsdnCallInfoCalledPtySub, wfIsdnBriLineNumber=wfIsdnBriLineNumber, wfModemIfChanMgmt=wfModemIfChanMgmt, wfModemIfInactivityTime=wfModemIfInactivityTime, wfIsdnCallInfoCallingPtyNum=wfIsdnCallInfoCallingPtyNum, wfIsdnBChanState=wfIsdnBChanState, wfIsdnBriRxOctets=wfIsdnBriRxOctets, wfIsdnBriConnector=wfIsdnBriConnector, wfIsdnSwitchSendingComplete=wfIsdnSwitchSendingComplete, wfIsdnPoolId=wfIsdnPoolId, wfIsdnMsgConnectConf=wfIsdnMsgConnectConf, wfIsdnSwitchCfgEntry=wfIsdnSwitchCfgEntry, wfIsdnBriMtu=wfIsdnBriMtu, wfIsdnMsgMgmtReq=wfIsdnMsgMgmtReq, wfIsdnBriTimerM4Tmo=wfIsdnBriTimerM4Tmo, wfIsdnBriX25DTeiValue=wfIsdnBriX25DTeiValue, wfModemIfConnectRmtStationNum=wfModemIfConnectRmtStationNum, wfIsdnLocalPhoneNumLineNum=wfIsdnLocalPhoneNumLineNum, wfIsdnLocalPhoneNumIndex=wfIsdnLocalPhoneNumIndex, wfIsdnPoolDelete=wfIsdnPoolDelete, wfIsdnMsgAlertInd=wfIsdnMsgAlertInd, wfIsdnSpidRetryAttempts=wfIsdnSpidRetryAttempts, wfModemIfTakeDownMinute=wfModemIfTakeDownMinute, wfModemCommandString=wfModemCommandString, wfIsdnSwitchX25D=wfIsdnSwitchX25D, wfIsdnBriMode=wfIsdnBriMode, wfIsdnCallInfoCallID=wfIsdnCallInfoCallID, wfIsdnHostActChanPrefBit=wfIsdnHostActChanPrefBit, wfModemIfRetries=wfModemIfRetries, wfIsdnHostActCalledPtyNum=wfIsdnHostActCalledPtyNum, wfIsdnMsgCtrEntry=wfIsdnMsgCtrEntry, wfIsdnBriTeState=wfIsdnBriTeState, wfModemIfBringUpHour=wfModemIfBringUpHour, wfIsdnBriRxBadCrcs=wfIsdnBriRxBadCrcs, wfIsdnBChanCct=wfIsdnBChanCct, wfModemIfConnectSubAddr=wfModemIfConnectSubAddr, wfIsdnPoolType=wfIsdnPoolType, wfModemIfRetryDelayTime=wfModemIfRetryDelayTime, wfIsdnLocalSpidStatus=wfIsdnLocalSpidStatus, wfIsdnSpidRetryTimer=wfIsdnSpidRetryTimer, wfIsdnMsgClearReq=wfIsdnMsgClearReq, wfIsdnMsgActInd=wfIsdnMsgActInd, wfIsdnMsgSetupReq=wfIsdnMsgSetupReq, wfIsdnLocalPhoneNumEntry=wfIsdnLocalPhoneNumEntry, wfIsdnHostActCldSadPres=wfIsdnHostActCldSadPres, wfIsdnCallInfoCallingPtySub=wfIsdnCallInfoCallingPtySub, wfIsdnSpidRetries=wfIsdnSpidRetries, wfIsdnMsgSetupInd=wfIsdnMsgSetupInd, wfIsdnSwitchGlobalRateAdaption=wfIsdnSwitchGlobalRateAdaption, wfIsdnBChanPriority=wfIsdnBChanPriority, wfIsdnMsgCallProcReq=wfIsdnMsgCallProcReq, wfIsdnLocalPhoneNumTable=wfIsdnLocalPhoneNumTable)
