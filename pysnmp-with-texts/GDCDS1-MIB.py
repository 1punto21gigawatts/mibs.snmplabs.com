#
# PySNMP MIB module GDCDS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCDS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ds1, = mibBuilder.importSymbols("RFC1406-MIB", "ds1")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibIdentifier, IpAddress, NotificationType, Integer32, Gauge32, Counter32, Counter64, Bits, iso, ObjectIdentity, enterprises, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, transmission, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "IpAddress", "NotificationType", "Integer32", "Gauge32", "Counter32", "Counter64", "Bits", "iso", "ObjectIdentity", "enterprises", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "transmission", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
csu = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 2))
csuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 1), )
if mibBuilder.loadTexts: csuConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuConfigTable.setDescription('The GDC csu Configuration Table.')
csuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 1, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuConfigLineIndex"))
if mibBuilder.loadTexts: csuConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuConfigEntry.setDescription('An entry in the GDC csu Configuration Table.')
csuConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuConfigLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuConfigLineIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is used to expand the standard MIB with the GDC specific information on an object.')
csuOnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inhibit", 1), ("csuMax15Zeros", 2), ("csuMax39Zeros", 3), ("csu8N1Restrict", 4), ("csuMin1in8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuOnesDensity.setStatus('mandatory')
if mibBuilder.loadTexts: csuOnesDensity.setDescription("This variable is used to indicate the pulse density on the network side. inhibit refers to no minimum pulse density csuMax15Zeros refers to a maximum of 15 consecutive zeros transmitted toward the network before a one is inserted. csuMax39Zeros refers to a maximum of 39 consecutive zeros transmitted toward the network before a one is inserted. csu8N1Restrict refers to a minimum of N ones per 8(N+1) bits, where N = 1 to 24; the Line Code option for the network side must be set to AMI. csuMin1in8 refers to a minimum of 1 one per 8 bits; with this selection, pulse density violations are enforced but enforcement can't be read through this MIB. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Ones Density Same as defined in managed object 552a Ones Density Same as defined in managed object 552a V1.1 Ones Density Same as defined in managed object 551 Ones Density Same as defined in managed object")
csuFrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuFrontPanel.setStatus('mandatory')
if mibBuilder.loadTexts: csuFrontPanel.setDescription('This variable is used to indicate whether the front panel switches are operational or not. inhibit refers to when the front panel switches are not operational. enable refers to when the front panel switches are operational. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 None 551 Front Panel Same as defined in managed object')
csuInbandLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuInbandLoop.setStatus('mandatory')
if mibBuilder.loadTexts: csuInbandLoop.setDescription('This variable is used to set the In-Band DS1 Loopback Code Detection. inhibit refers to when the in-band loopback codes are ignored. enable refers to when the in-band loopback codes are detected and reacted to. When enabled, the Loopback Configuration must also be set. When a loopback activation or deactivation code is detected, the DSU starts or stops the type of loopback test selected with the Loopback Configuration. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Inband Loop Same as defined in managed object 552a Inband Loop Same as defined in managed object 552a V1.1 Inband Loop Same as defined in managed object 551 Inband Loop Same as defined in managed object')
csuILBFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unframed", 1), ("framed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuILBFrame.setStatus('mandatory')
if mibBuilder.loadTexts: csuILBFrame.setDescription('This variable is used to set the In-Band DS1 Loopback Code Framing option. unframed refers to the DSU transmitting unframed in-band loopback codes when a DS1 Remote Test is started. framed refers to the DSU transmitting framed in-band loopback codes when a DS1 Remote Test is started. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 ILB Frame Same as defined in managed object 552a ILB Frame Same as defined in managed object 552a V1.1 ILB Frame Same as defined in managed object 551 ILB Frame Same as defined in managed object')
csuLineBuildOutCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuMan", 1), ("csuAuto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLineBuildOutCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: csuLineBuildOutCtrl.setDescription('This variable is used to set the Network Line Build-Out control option for the network side. Man refers to manually setting the Network Line Build-Out to one of the specified attenuation levels in csuLineBuildOutValue. Auto refers to automatic Network Line Build-Out, based on the signal level received from the network. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Line Build-out Same as defined in managed object 552a Line Build-out Same as defined in managed object 552a V1.1 Line Build-out Same as defined in managed object 551 Line Build-out Same as defined in managed object')
csuLineBuildOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("csu00dB", 2), ("csu75dB", 3), ("csu150dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLineBuildOutValue.setStatus('mandatory')
if mibBuilder.loadTexts: csuLineBuildOutValue.setDescription('This variable is used to set the Network Line Build-Out value on the network side. In manual mode, these values can be written and read back. In auto mode, a read will retreive the value which was automatically derived and a write will have no effect. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Line Build-out Same as defined in managed object 552a Line Build-out Same as defined in managed object 552a V1.1 Line Build-out Same as defined in managed object 551 Line Build-out Same as defined in managed object')
csuLineTypeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("csuMan", 2), ("csuAuto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLineTypeCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: csuLineTypeCtrl.setDescription('This variable is used to set the Line Type control. None refers to the unframed mode of the DC551. Man refers to manually setting the line type to one of the specified types in dsx1LineType. When set, read and write dsx1LineType for ESF or D4. Auto refers to automatic setting of line type, based on the framing format received from the other side. When set, read dsx1LineType for negotiated value but, writing dsx1LineType should be ignored. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Network Frame AUTO, MAN 552a Cascade or Network Frame AUTO, MAN 552a V1.1 Cascade or Network Frame AUTO, MAN 551 DTE or NET FRAME AUTO, MAN, NONE')
csuAISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuAISLoopdown.setStatus('mandatory')
if mibBuilder.loadTexts: csuAISLoopdown.setDescription('This variable is used to set the AIS Loop-Down option for remotely-initiated DS1 loopbacks. 4, inhibit, refers to when a continuous received AIS does not terminate the loopback. 5-60, enable, refers to when a continuous received AIS terminates the loopback. The value is used to determine the loop-down activation time in seconds. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 AIS Loopdown inhibit, Enable-30seconds, Enable-<n> seconds 552a AIS Loopdown inhibit, Enable-30seconds, Enable-<n> seconds 552a V1.1 AIS Loopdown inhibit, Enable-30seconds, Enable-<n> seconds 551 None')
csuPreEqualizer = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("csuNoEqual", 1), ("csu130ft", 2), ("csu260ft", 3), ("csu390ft", 4), ("csu530ft", 5), ("csu655ft", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuPreEqualizer.setStatus('mandatory')
if mibBuilder.loadTexts: csuPreEqualizer.setDescription('This variable is used to set the Cascade PreEqualization option for matching the cascade port line length, providing transmitter pre-equalization for lengths of 130 ft (0-130 feet), 260 ft (130-260 feet) 390 ft (260-390 feet), 530 ft (390-530 feet) or 655 ft (530-655 feet). Selecting the proper length ensures that the signal reaching the customer cascade equipment is satisfactory. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a PreEqualization Same as defined in managed object 552a V1.1 PreEqualization Same as defined in managed object 551 PreEqualization Same as defined in managed object')
csuInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("csuAlarmHistory", 1), ("csu24HourCounter", 2), ("csuFactoryDefaults", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: csuInitialize.setStatus('mandatory')
if mibBuilder.loadTexts: csuInitialize.setDescription("This variable is used to initialize specific items on the csu, csuAlarmHistory refers to initializing the Alarm History Report and a new start time is recorded. csu24HourCounter refers to initializing the 24 Hour statistics counters. All of the counters associated with the statistics will be initialized to zero. csuFactoryDefaults refers to initializing all soft-configurable options to the factory default settings. Option 'F' from the maintenance screen. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Initialize Alarm History, Initialize Local 24 Hour Counters 552a Initialize Alarm History, Initialize Local 24 Hour Counters 552a V1.1 Initialize Alarm History, Initialize Local 24 Hour Counters 551 Initialize Alarm History, Initialize One Hour")
csuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuTime.setStatus('mandatory')
if mibBuilder.loadTexts: csuTime.setDescription('This variable is used to set the time for the real-time clock located on the network element. The string is fixed at a length of 9 octets with the format of: hh:mm:ssA. Where hh is the hour (01-12) in 12 hour format, mm is minutes (00-59), ss is seconds (00-59) and A is am (A) or pm (P). GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Maintenance menu set time 552a Maintenance menu set time 552a V1.1 Maintenance menu set time 551 none')
csuDate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuDate.setStatus('mandatory')
if mibBuilder.loadTexts: csuDate.setDescription('This variable is used to set the date for the real-time clock located on the network element. The string is fixed at a length of 8 octets with the format of: mm-dd-yy. Where mm is the month (01-12), dd is the day (01-31), and yy is the year (00-99). GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Maintenance menu set date 552a Maintenance menu set date 552a V1.1 Maintenance menu set date 551 none')
csuTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuLLB", 1), ("csuTLB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuTestType.setStatus('mandatory')
if mibBuilder.loadTexts: csuTestType.setDescription('This variable is used to set the network side DS1 loop type. If csuLLB is set, a line loop is done when the proper inband loop pattern is detected. If csuTLB is set, a test loop (or payload loop) is done when the proper inband loop pattern is detected. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Test Type Same as defined in managed object 552a Test Type Same as defined in managed object 552a V1.1 Test Type Same as defined in managed object 551 Test Type Same as defined in managed object')
csuReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuReceiveLevel.setStatus('mandatory')
if mibBuilder.loadTexts: csuReceiveLevel.setDescription('This variable is used to display the current receive level as reported by the Receive Level screen. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Receive Level 552a Receive Level 552a V1.1 Receive Level 551 Receive Level')
csuChanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 2), )
if mibBuilder.loadTexts: csuChanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanConfigTable.setDescription('The GDC csu Channel Configuration Table.')
csuChanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 2, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuChanConfigLineIndex"), (0, "GDCDS1-MIB", "csuChanConfigNum"))
if mibBuilder.loadTexts: csuChanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanConfigEntry.setDescription('An entry in the GDC csu Channel Configuration Table.')
csuChanConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanConfigLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanConfigLineIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is use to expand the standard MIB with the GDC specific information on an object.')
csuChanConfigNum = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanConfigNum.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanConfigNum.setDescription('This variable is used to link the Fractional Group from RFC1406 to its GDC configuration. It is linked by the FracIfIndex in the Fractional Group from RFC1406. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Channel Number A 552a Channel Number A, B 552a V1.1 Channel Number A, B 551 None')
csuStartDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuStartDS0.setStatus('mandatory')
if mibBuilder.loadTexts: csuStartDS0.setDescription("This variable is used to set the Starting DS0 Number option for the selected channel to 0 to 24, defining where the selected bandwidth begins. The number of DS0s used (the DS0 bundle) depends on the equipment data rate and whether the network accommodates Nx56 kbps DS0s or Nx64 kbps 'Clear Channel' DS0s, and is calculated automatically by the DSU after entering the starting DS0. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Starting DS0 Same as defined in managed object 552a Starting DS0 Same as defined in managed object 552a V1.1 Starting DS0 Same as defined in managed object 551 None")
csuRTSCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("csuCTSDelayed", 2), ("csuCTSForcedOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuRTSCTS.setStatus('mandatory')
if mibBuilder.loadTexts: csuRTSCTS.setDescription('This variable is used to set the CTS operation option for the selected channel. csuCTSDelayed refers to CTS responding to RTS after a 10 ms delay. csuCTSForcedOn refers to CTS forced ON at all times. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 RTS to CTS Option Same as defined in managed object 552a RTS to CTS Option Same as defined in managed object 552a V1.1 RTS to CTS Option Same as defined in managed object 551 None')
csuControlModeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuControlModeIdle.setStatus('mandatory')
if mibBuilder.loadTexts: csuControlModeIdle.setDescription('This variable is used to set the CMI Signalling option for the selected channel. off refers to when the CMI signalling is disabled. on refers to when the CMI signalling is enabled for use in polling applications on 56 kbps DDS I lines with remote DSUs. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Control Mode Idle Same as defined in managed object 552a Control Mode Idle Same as defined in managed object 552a V1.1 Control Mode Idle Same as defined in managed object 551 None')
csuRDLInbandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("csuPN127", 2), ("csuFixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuRDLInbandCode.setStatus('mandatory')
if mibBuilder.loadTexts: csuRDLInbandCode.setDescription('This variable is used to set the Remote Digital Loop Pattern option for the selected channel. csuFixed refers to a proprietary 7-bit loop-up/down in-band codes for RDL. csuPN127 refers to CCITT V.54 PN-127 scrambled codes. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 RDL Inband Code Same as defined in managed object 552a RDL Inband Code Same as defined in managed object 552a V1.1 RDL Inband Code Same as defined in managed object 551 None')
csuChanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChanRate.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanRate.setDescription('This variable is used to setup the channel rate used by the DSU to calculate the number of DS0s, or bandwidth, required for the channel. The rate depends on the equipment data rate and must equal or exceed it. The available range is from 0 kbps to 1536 kbps, in multiples of Nx56 kbps and Nx64 kbps. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Channel Rate Same as defined in managed object 552a Channel Rate Same as defined in managed object 552a V1.1 Channel Rate Same as defined in managed object 551 None')
csuAlternateDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuAlternateDS0.setStatus('mandatory')
if mibBuilder.loadTexts: csuAlternateDS0.setDescription('This variable is used to set the Alternate DS0 option. off refers to channel data that is carried in consecutive blocks of DS0s and the full T1 bandwidth is available for customer data. on refers to the channel data that is carried in alternate DS0s, with unused DS0s carrying all ones. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Alternate DS0 Same as defined in managed object 552a Alternate DS0 Same as defined in managed object 552a V1.1 Alternate DS0 Same as defined in managed object 551 None')
csuRespondRDL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuRespondRDL.setStatus('mandatory')
if mibBuilder.loadTexts: csuRespondRDL.setDescription('This variable is used to set the Channel RDL Response option. no refers to the channel ignores in-band loopback codes. yes refers to when the channel responds to in-band loopback codes for Digital Loop received from the network or the remote DSU. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Respond RDL Same as defined in managed object 552a Respond RDL Same as defined in managed object 552a V1.1 Respond RDL Same as defined in managed object 551 None')
csuInbandDLTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("csuEnable10Min", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuInbandDLTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: csuInbandDLTimeout.setDescription('This variable is used to set the Channel Digital Loop Timer option for remotely-initiated Channel Digital Loop tests. inhibit refers to when the test is unaffected. csuEnable10Min refers to when the test is terminated after 10 minutes. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Inband DL Time-out Same as defined in managed object 552a Inband DL Time-out Same as defined in managed object 552a V1.1 Inband DL Time-out Same as defined in managed object 551 None')
csuChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanStatus.setDescription('This variable is used to read the status of the channel. Each bit in the csuChanStatus indicates some status information. NoAlarm bit 1 Everything is ok ConfigErr bit 2 A configuration error exists')
csuChan6456 = MibScalar((1, 3, 6, 1, 4, 1, 498, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode56", 1), ("mode64", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChan6456.setStatus('mandatory')
if mibBuilder.loadTexts: csuChan6456.setDescription(' This value is used by the csu if the value of csuChanRate is a multiple of both 56 & 64. This value is not used if dsx1FracNumber is used to configure the csu. In that case dsx1LineCoding will determine the channel rate if there is a common multiple. write to this variable: 1) snmp set 2) dividing csuChanRate by the number of ds0s found in dsx1FracNumber read from this variable: 1) dividing csuChanRate by the number of ds0s found in dsx1FracNumber')
csuIndicatorTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 3), )
if mibBuilder.loadTexts: csuIndicatorTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorTable.setDescription('The GDC csu Indicator Table.')
csuIndicatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 3, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuIndicatorIndex"))
if mibBuilder.loadTexts: csuIndicatorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorEntry.setDescription('An entry in the GDC Indicator Table.')
csuIndicatorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is use to expand the standard MIB with the GDC specific information on an object.')
csuIndicatorOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-synchronized", 1), ("synchronized", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorOOF.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorOOF.setDescription('This object is the Network Out of Frame indicator. It indicates whether the CSU/DSU is or is not synchronized with network framing. In a CSU this is also known as Network Synchronization (SYN). GDCPRODUCT STATUS BAR 551 SYN 551 (unframed) none 552a OOF 552a-1 OOF')
csuIndicatorNNS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-signal", 1), ("signal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNNS.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorNNS.setDescription('This object is the Network No Signal indicator. It indicates whether the CSU/DSU is or is not receiving a network signal. GDCPRODUCT STATUS BAR 551 NNS 551 (unframed) NNS 552a NS 552a-1 NS')
csuIndicatorYEL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorYEL.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorYEL.setDescription('This object is the Network Yellow Alarm receive indicator. It indicates whether the CSU/DSU is or is not receiving a network yellow alarm. GDCPRODUCT STATUS BAR 551 YEL 551 (unframed) none 552a YEL 552a-1 YEL')
csuIndicatorAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorAIS.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorAIS.setDescription('This object is the Network Alarm Indication Signal indicator. It indicates whether the CSU/DSU is or is not receiving AIS from the network. GDCPRODUCT STATUS BAR 551 AIS 551 (unframed) none 552a AIS 552a-1 AIS')
csuIndicatorNLB = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-loopback", 1), ("loopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNLB.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorNLB.setDescription('This object is the Network Loopback indicator. It indicates whether the CSU/DSU is or is not in a DS1 loopback test towards the network. GDCPRODUCT STATUS BAR 551 NLB 551 (unframed) NLB 552a NLB 552a-1 NLB')
csuIndicatorBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorBPV.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorBPV.setDescription('This object is the Network BiPolar Violation indicator. It indicates whether the CSU/DSU has or has not received a BPV. GDCPRODUCT STATUS BAR 551 BPV 551 (unframed) BPV 552a BPV 552a-1 BPV')
csuIndicatorCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorCRC.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorCRC.setDescription('This object is the Network Cyclic Redundancy Check indicator. It indicates whether the CSU/DSU has or has not received a CRC error. GDCPRODUCT STATUS BAR 551 CRC 551 (unframed) none 552a CRC 552a-1 CRC')
csuIndicatorTSY = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-synchronized", 1), ("synchronized", 2), ("unframed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorTSY.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorTSY.setDescription('This object is the Terminal Equipment Synchronization indicator. It indicates whether the CSU is or is not synchronized with equipment framing. GDCPRODUCT STATUS BAR 551 TSY 551 (unframed) none 552a none 552a-1 none')
csuIndicatorTNS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorTNS.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorTNS.setDescription('This object is the Terminal No Signal indicator. It indicates whether the CSU is or is not receiving an equipment signal. GDCPRODUCT STATUS BAR 551 TNS 551 (unframed) TNS 552a none 552a-1 none')
csuIndicatorOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorOS.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorOS.setDescription("This object is the Equipment Zero's indicator. It indicates whether the CSU is or is not receiving an excessive number of consecutive zero's (see one's density option). GDCPRODUCT STATUS BAR 551 0'S 551 (unframed) 0'S 552a none 552a-1 none")
csuIndicatorLAD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorLAD.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorLAD.setDescription("This object is the Low Average Density indicator. It indicates whether the CSU is or is not receiving an average pulse density less than that selected with the one's density option. GDCPRODUCT STATUS BAR 551 LAD 551 (unframed) LAD 552a none 552a-1 none")
csuIndicatorCascadeOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-synchronized", 1), ("synchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorCascadeOOF.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorCascadeOOF.setDescription('This object is the Cascade Out of Frame indicator. It indicates whether the T1 Cascade port is or is not synchronized with customer cascade equipment framing. GDCPRODUCT STATUS BAR 551 none 551 (unframed) none 552a OOF 552a-1 none')
csuIndicatorCascadeNS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-receiving", 1), ("receiving", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorCascadeNS.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorCascadeNS.setDescription('This object is the Cascade No Signal indicator. It indicates whether the T1 Cascade port is or is not receiving a customer cascade equipment signal. GDCPRODUCT STATUS BAR 551 none 551 (unframed) none 552a NS 552a-1 none')
csuIndicatorNetworkLT = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-active", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNetworkLT.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorNetworkLT.setDescription('This object is the Local Test indicator. It indicates whether the DS1 local test is or is not active. GDCPRODUCT STATUS BAR 551 LT 551 (unframed) LT 552a LT 552a-1 LT')
csuIndicatorNetworkST = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-active", 1), ("active-DS0", 2), ("active-DS1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNetworkST.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorNetworkST.setDescription('This object is the Self Test indicator. It indicates whether the DS0 self test, DS1 self test or no self test is active. GDCPRODUCT STATUS BAR 551 ST 551 (unframed) ST 552a ST 552a-1 ST')
csuIndicatorNetworkRT = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-active", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorNetworkRT.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorNetworkRT.setDescription('This object is the DS1 Remote Test indicator. It indicates whether the DS1 remote test is or is not active. GDCPRODUCT STATUS BAR 551 RT 551 (unframed) RT 552a RT 552a-1 RT')
csuIndicatorChannelRDL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3), ("active-chAB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelRDL.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorChannelRDL.setDescription('This object is the channel Remote Digital Loopback indicator. It indicates whether the channel Remote Digital Loop is active on channel A, active on channel B or is not active. GDCPRODUCT STATUS BAR 551 none 551 (unframed) none 552a RDL 552a-1 RDL')
csuIndicatorChannelST = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelST.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorChannelST.setDescription('This object is the channel Self Test indicator. It indicates whether the channel Self Test is active on channel A, active on channel B or is not active. GDCPRODUCT STATUS BAR 551 none 551 (unframed) none 552a ST 552a-1 ST')
csuIndicatorChannelDL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3), ("active-chAB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelDL.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorChannelDL.setDescription('This object is the channel Digital Loopback indicator. It indicates whether the channel Digital Loop is active on channel A, active on channel B, active on both channels A and B or is not active. GDCPRODUCT STATUS BAR 551 none 551 (unframed) none 552a DL 552a-1 DL')
csuIndicatorChannelLL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("active-chA", 2), ("active-chB", 3), ("active-chAB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorChannelLL.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorChannelLL.setDescription('This object is the channel Local Loopback indicator. It indicates whether the channel Local Loop is active on channel A, active on channel B or is not active. GDCPRODUCT STATUS BAR 551 none 551 (unframed) none 552a LL 552a-1 LL')
csuIndicatorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hard", 2), ("soft", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorMode.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorMode.setDescription('This object is the unit mode indicator. It indicates whether the CSU/DSU is in hard (or LOR) mode where on board DIP switches are used or soft mode where programmable options are allowed. GDCPRODUCT STATUS BAR 551 LOR 551 (unframed) LOR 552a HARD 552a-1 HARD')
csuIndicatorDS0LB = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-loopback", 1), ("loopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIndicatorDS0LB.setStatus('mandatory')
if mibBuilder.loadTexts: csuIndicatorDS0LB.setDescription('This object is the DS) Loopback indicator. It indicates whether DS0 loopback at the local CSU is active or not. GDCPRODUCT STATUS BAR 551 DS0LB 551 (unframed) none 552a none 552a-1 none')
csuSelftestDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 4), )
if mibBuilder.loadTexts: csuSelftestDiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuSelftestDiagTable.setDescription('The GDC csu Selftest Diagnostic Table.')
csuSelftestDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 4, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuSelftestDiagLineIndex"))
if mibBuilder.loadTexts: csuSelftestDiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuSelftestDiagEntry.setDescription('An entry in the GDC csu Selftest Diagnostic Table.')
csuSelftestDiagLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSelftestDiagLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuSelftestDiagLineIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is use to expand the standard MIB with the GDC specific information on an object.')
csuDiagSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuDiagSelftest.setStatus('obsolete')
if mibBuilder.loadTexts: csuDiagSelftest.setDescription('This variable is used to indicate whether a selftest is currently on going. This will allow a Loopback to occur while a selftest is occurring. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Selftest Same as defined in managed object 552a Selftest Same as defined in managed object 552a V1.1 Selftest Same as defined in managed object 551 Selftest Same as defined in managed object')
csuGDCSelftestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("csu2047", 2), ("csuPROG", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuGDCSelftestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: csuGDCSelftestPattern.setDescription('This variable is used in conjunction with the dsx1SendCode managed object in the RFC1406 Configuration Group. It selects the test pattern to be used in the BIT ERROR TEST mode. csu2047 refers to 2047-bit test pattern. When set, the 2047 selftest will start. csuPROG refers to a user-programmable test pattern. The pattern is defined in csuSelftestUserPattern. When set, the programmable pattern selftest will start. When dsx1SendCode is set to dsx1SendNoCode, these tests will stop. When the GDC specific test patterns defined here are used, reading dsx1SendCode will return dsx1SendOtherTestPattern. When the test patterns from dsx1SendCode are set, this object returns other. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Selftest Pattern Same as defined in managed object 552a Selftest Pattern Same as defined in managed object 552a V1.1 Selftest Pattern Same as defined in managed object 551 Selftest Pattern Same as defined in managed object')
csuSelftestUserPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuSelftestUserPattern.setStatus('mandatory')
if mibBuilder.loadTexts: csuSelftestUserPattern.setDescription('This variable contains a user specified 16 bit pattern that will be sent during a selftest. The default pattern is 1100000000000000. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Selftest User Pattern default, pattern 552a Selftest User Pattern default, pattern 552a V1.1 Selftest User Pattern default, pattern 551 Selftest User Pattern default, pattern')
csuSelftestFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unframed", 1), ("framed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuSelftestFrame.setStatus('mandatory')
if mibBuilder.loadTexts: csuSelftestFrame.setDescription('This variable is used to set whether the self test pattern is ESF/D4 framed or not. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 None 551 Selftest Frame Same as defined in managed object')
csuSelftestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSelftestResults.setStatus('mandatory')
if mibBuilder.loadTexts: csuSelftestResults.setDescription('This variable is used to read the results of the selftest. BER Inactive is used to indicate that no selftest is running, otherwise the number of errors. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Test Results Same as defined in managed object 552a Test Results Same as defined in managed object 552a V1.1 Test Results Same as defined in managed object 551 Test Results Same as defined in managed object')
csuSelftestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSelftestTime.setStatus('mandatory')
if mibBuilder.loadTexts: csuSelftestTime.setDescription('This variable is used to read the active test time. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Test Time Same as defined in managed object 552a Test Time Same as defined in managed object 552a V1.1 Test Time Same as defined in managed object 551 Test Time Same as defined in managed object')
csuLoopbackDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 5), )
if mibBuilder.loadTexts: csuLoopbackDiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuLoopbackDiagTable.setDescription('The GDC csu Loopback Diagnostic Table.')
csuLoopbackDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 5, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuLoopbackDiagLineIndex"))
if mibBuilder.loadTexts: csuLoopbackDiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuLoopbackDiagEntry.setDescription('An entry in the GDC csu Loopback Diagnostic Table.')
csuLoopbackDiagLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLoopbackDiagLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuLoopbackDiagLineIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is use to expand the standard MIB with the GDC specific information on an object.')
csuGDCLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("csuLocalTest", 2), ("csuNILoop", 3), ("csuCascadeDigitalLoop", 4), ("csuRemoteLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuGDCLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: csuGDCLoopback.setDescription("This variable is used to initiate a specific test. It is used in conjunction with the dsx1LoopbackConfig managed object in RFC1406 Configuration Group. Setting dsx1NoLoop(1) stops all tests. Setting dsx1PayloadLoop(2) or dsx1LineLoop(3) causes that test to start as well as automatically setting this variable to other(1). other indicates that the dsx1LoopbackConfig option should be checked. The rest of the options have the following in common: Setting any of them causes that test to start as well as automatically setting dsx1LoopbackConfig to dsx1OtherLoop(4). csuLocalTest refers to a test that transmits a locally-generated test message through the DSU and looping it back at the network interface to the test equipment for verification. During this test, data is also transmitted to the T1 link, with pulse density constraints, but data is not received from the cascade port or the line. csuNILoop refers a test that tests the local DSU and the T1 link by transmitting a locally-generated test message through the local DSU to the remote DS1 Interface Connector and looping it back to the test equipment for verification. csuCascadeDigitalLoop refers to a test that tests both DSUs' circuitry and the T1 link by transmitting a remotely-generated test message through the remote DSU to the local DSU's cascade port interface and looping it back to the test equipment for verification. This test loops only those DS0s allocated to equipment on the cascade side of the local DSU. DS0s allocated to the local DSU or to the DSU on the network side of T1 are unaffected. csuRemoteLoop refers to a test that activates the remote DSU's DS1 Line Loopback function or DS1 Test Loopback function, depending on which one is enabled in the remote DSU. This tests both DSUs and the T1 link by transmitting a locally-generated test message through the local DSU to the remote DSU and looping it back to the test equipment for verification. Bipolar violations are uncorrected during this test when the remote DSU has its LLB function enabled. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Loopback Test Loop, Line Loop, Local Test, Remote Test, NI Loop 552a Loopback Test Loop, Line Loop, Local Test, Remote Test, NI Loop, Cascade Digital Loop 552a V1.1 Loopback Test Loop, Line Loop, Local Test, Remote Test, NI Loop, Cascade Digital Loop 551 Loopback Test Loop, Line Loop, Local Test, Remote Test, NI Loop")
csuDS0DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 6), )
if mibBuilder.loadTexts: csuDS0DiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuDS0DiagTable.setDescription('The GDC csu DS0 Diagnostic Table.')
csuDS0DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 6, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuDS0LineIndex"))
if mibBuilder.loadTexts: csuDS0DiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuDS0DiagEntry.setDescription('An entry in the GDC csu DS0 Diagnostic Table.')
csuDS0LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDS0LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuDS0LineIndex.setDescription('This object is used to associate DS0s withe the appropriate DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is used to expand the standard MIB with the GDC specific information on an object.')
csuDS0Num = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuDS0Num.setStatus('mandatory')
if mibBuilder.loadTexts: csuDS0Num.setDescription('This variable holds the DS0 number under test. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 DS0 Channel Number same as defined in managed object 552a DS0 Channel Number same as defined in managed object 552a V1.1 DS0 Channel Number same as defined in managed object 551 DS0 Channel Number same as defined in managed object')
csuTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("csu511", 2), ("csuQRS", 3), ("csu2047", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: csuTestPattern.setDescription('This variable holds the test pattern the DS0 will use for testing. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Test Pattern 511, QRS and 2047 552a Test Pattern 511, QRS and 2047 552a V1.1 Test Pattern 511, QRS and 2047 551 Test Pattern 511, QRS and 2047')
csuResetResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: csuResetResults.setStatus('mandatory')
if mibBuilder.loadTexts: csuResetResults.setDescription('This variable is used to reset the results from the previous test. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Reset Test Results same as defined in managed object 552a Reset Test Results same as defined in managed object 552a V1.1 Reset Test Results same as defined in managed object 551 Reset Test Results same as defined in managed object')
csuBERtest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds0BERoff", 1), ("ds0BERon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuBERtest.setStatus('mandatory')
if mibBuilder.loadTexts: csuBERtest.setDescription("This variable is used to control the DS0 BER test. It controls a combination of 'M', Test Mode to BIT ERROR TEST and 'I', Initiate Test for on(2) and 'T', Terminate Test for off(1). GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 BIT ERROR TEST same as defined in managed object 552a BIT ERROR TEST same as defined in managed object 552a V1.1 BIT ERROR TEST same as defined in managed object 551 BIT ERROR TEST same as defined in managed object")
csuCumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCumErrs.setStatus('mandatory')
if mibBuilder.loadTexts: csuCumErrs.setDescription('This variable is used to read the cumulative errors counted during the test. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Cumulative Errors same as defined in managed object 552a Cumulative Errors same as defined in managed object 552a V1.1 Cumulative Errors same as defined in managed object 551 Cumulative Errors same as defined in managed object')
csuDataBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuDataBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: csuDataBlocks.setDescription('This variable is used to read the number of blocks tested. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Test Data Blocks same as defined in managed object 552a Test Data Blocks same as defined in managed object 552a V1.1 Test Data Blocks same as defined in managed object 551 Test Data Blocks same as defined in managed object')
csuCircuitDelayCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: csuCircuitDelayCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: csuCircuitDelayCtrl.setDescription("This variable is used to control the circuit delay test. It controls a combination of 'M', Test Mode to DELAY TEST and 'I', Initiate Test. A write of any value begins the test. The test ends by itself within within 2 seconds. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Circuit Delay same as defined in managed object 552a Circuit Delay same as defined in managed object 552a V1.1 Circuit Delay same as defined in managed object 551 Circuit Delay same as defined in managed object")
csuCircuitDelayResult = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCircuitDelayResult.setStatus('mandatory')
if mibBuilder.loadTexts: csuCircuitDelayResult.setDescription('This variable is used to read the circuit delay detected during the test. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Circuit Delay same as defined in managed object 552a Circuit Delay same as defined in managed object 552a V1.1 Circuit Delay same as defined in managed object 551 Circuit Delay same as defined in managed object')
csuLBtest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds0LBoff", 1), ("ds0LBon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuLBtest.setStatus('mandatory')
if mibBuilder.loadTexts: csuLBtest.setDescription("This variable is used to control the DS0 LOOPBACK test. It controls a combination of 'M', Test Mode to LOOPBACK and 'I', Initiate Test for DS0LBon(2) and 'T', Terminate Test for DS0LBoff(1). GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 LOOPBACK same as defined in managed object 552a LOOPBACK same as defined in managed object 552a V1.1 LOOPBACK same as defined in managed object 551 LOOPBACK same as defined in managed object")
csuChanDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 7), )
if mibBuilder.loadTexts: csuChanDiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanDiagTable.setDescription('The GDC csu Channel Diagnostic Table.')
csuChanDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 7, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuChanLineIndex"), (0, "GDCDS1-MIB", "csuChanNum"))
if mibBuilder.loadTexts: csuChanDiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanDiagEntry.setDescription('An entry in the GDC csu Channel Diagnostic Table.')
csuChanLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanLineIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is use to expand the standard MIB with the GDC specific information on an object.')
csuChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanNum.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanNum.setDescription('This variable is used to link the Fractional Group from RFC1406 to its GDC configuration. It is linked by the FracIfIndex in the Fractional Group from RFC1406.')
csuChanSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChanSelftest.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanSelftest.setDescription('This variable is used start and stop the selftest on the channel. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Selftest same as defined in managed object 552a Selftest same as defined in managed object 552a V1.1 Selftest same as defined in managed object 551 None')
csuChanLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("csuNoLoop", 1), ("csuRDL", 2), ("csuDL", 3), ("csuLL", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuChanLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanLoopback.setDescription('This variable is used to initiate a channel test. NoLoop refers to when no test is currently being performed, it also is used to terminate a test. csuRDL refers to a test that tests the local channel equipment, both DSUs and the T1 link. It does so by transmitting a locally-generated test message through the local DSU to the remote DSU, looping it back at the remote channel interface, and returning it to the test equipment for verification. Loopback of the remote channel is controlled by in-band loopback codes transmitted by the local DSU after starting or stopping the test. csuDL refers to a test that tests the remote channel equipment, both DSUs and the T1 link. It does so by transmitting a remotely-generated test message through the remote DSU to the local DSU, looping it back at the local channel interface, and returning it to the test equipment for verification. csuLL refers to a test that tests the local channel equipment and the local DSU. It does so by transmitting a locally-generated test message through the local DSU, looping it back at the local multiplexer interface, and returning it to the test equipment for verification. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Channel Diagnostic RDL, DL, LL 552a Channel Diagnostic RDL, DL, LL 552a V1.1 Channel Diagnostic RDL, DL, LL 551 None')
csuChanSelftestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuChanSelftestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: csuChanSelftestStatus.setDescription('This variable is used to read the results of the selftest. The value will be OFF, Chx NO ERRORS or ChX ERRORS - Proceed to DS0 test GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Test Results Same as defined in managed object 552a Test Results Same as defined in managed object 552a V1.1 Test Results Same as defined in managed object 551 None')
csuAlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 8), )
if mibBuilder.loadTexts: csuAlarmHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuAlarmHistoryTable.setDescription('The GDC csu Alarm History Table.')
csuAlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 8, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuAlarmHistoryIndex"), (0, "GDCDS1-MIB", "csuAlarmType"))
if mibBuilder.loadTexts: csuAlarmHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuAlarmHistoryEntry.setDescription('An entry in the GDC csu Alarm History Table.')
csuAlarmHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarmHistoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuAlarmHistoryIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is used to expand the standard MIB with the GDC specific information on an object.')
csuAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("csuNetworkLossOfSignal", 1), ("csuNetworkOutOfFrame", 2), ("csuAlarmIndication", 3), ("csuFailedSignalState", 4), ("csuReceivedYellow", 5), ("csuExcessiveZeros", 6), ("csuLowAverageDensity", 7), ("csuBipolarViolations", 8), ("csuCRCErrors", 9), ("csuControlledSlips", 10), ("csuUnavailableSignalState", 11), ("csuCascadeLossOfSignal", 12), ("csuCascadeOutOfFrame", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: csuAlarmType.setDescription('This variable is used to indicate the alarm that the count, first occurance and last occurance is associated with. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Major/Minor/Other NLOS, NOOF, AI, FSS, RY, EZ, LAD, BPV, CRC,CS 552a Major/Minor/Other NLOS, NOOF, AI, FSS, RY, EZ, LAD, BPV, CRC, CS, CLOF, COOF 552a V1.1 Major/Minor/Other NLOS, NOOF, AI, FSS, RY, EZ, LAD, BPV, CRC, CS, USS, CLOF, COOF 551 None')
csuAlarmHistoryStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAlarmHistoryStart.setStatus('mandatory')
if mibBuilder.loadTexts: csuAlarmHistoryStart.setDescription('This variable is used to hold when the alarm history was initialized. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Initialized Time and Date 552a Initialized Time and Date 552a V1.1 Start Time Time and Date 551 Elapsed Time Hours and Minutes')
csuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCount.setStatus('mandatory')
if mibBuilder.loadTexts: csuCount.setDescription('This is used to indicate the number of recorded events of each of the listed errors, since the alarm history was initialized or cleared. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Count Same as defined in managed object 552a Count Same as defined in managed object 552a V1.1 Count Same as defined in managed object 551 Count Same as defined in managed object')
csuFirstOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFirstOccur.setStatus('mandatory')
if mibBuilder.loadTexts: csuFirstOccur.setDescription('This variable is used to indicate when a specific alarm first occurred since last initialized. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 First Occurance Time and Date 552a First Occurance Time and Date 552a V1.1 First Occurance Time and Date 551 None')
csuLastOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuLastOccur.setStatus('mandatory')
if mibBuilder.loadTexts: csuLastOccur.setDescription('This variable is used to indicate when the last alarm occurred. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Last Occurance Time and Date 552a Last Occurance Time and Date 552a V1.1 Last Occurance Time and Date 551 None')
csuSchedPerfRprtTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 9), )
if mibBuilder.loadTexts: csuSchedPerfRprtTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuSchedPerfRprtTable.setDescription('The GDC csu Scheduled Performance Report Table.')
csuSchedPerfRprtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 9, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuSchedPerfRprtIndex"), (0, "GDCDS1-MIB", "csuPerfRprtIntervalNumber"))
if mibBuilder.loadTexts: csuSchedPerfRprtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuSchedPerfRprtEntry.setDescription('An entry in the GDC csu Scheduled Performance Report Table.')
csuSchedPerfRprtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSchedPerfRprtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuSchedPerfRprtIndex.setDescription('This object is the identifier of a DS1 interface on a managed object. It is used to associate the DS1 Configuration Group in the standard, RFC-1406. It should reference the dsx1LineIndex associated with this object. This is use to expand the standard MIB with the GDC specific information on an object.')
csuPerfRprtIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuPerfRprtIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csuPerfRprtIntervalNumber.setDescription('A number between 1 and 4 denoting a 1 second interval. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Interval 1st, 2nd, 3rd, 4th 552a Interval 1st, 2nd, 3rd, 4th 552a V1.1 Interval 1st, 2nd, 3rd, 4th 551 Interval 1st, 2nd, 3rd, 4th')
csuPerfRprtMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csuPerfRprtMsg.setStatus('mandatory')
if mibBuilder.loadTexts: csuPerfRprtMsg.setDescription('This variable is used to toggle between the Performance Report Message transmitted toward the network, outbound, and received from the network, inbound. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 Performance Report Same as defined in managed object 552a Performance Report Same as defined in managed object 552a V1.1 Performance Report Same as defined in managed object 551 Performance Report Same as defined in managed object')
csuCRCErrEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneError", 2), ("csuLessFive", 3), ("csuLessTen", 4), ("csuLess100", 5), ("csuLess320", 6), ("csuGreater320", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCRCErrEvent.setStatus('mandatory')
if mibBuilder.loadTexts: csuCRCErrEvent.setDescription('This variable is used to indicate the CRC-6 Error Events. They are displayed in the ranges specified. RANGE DESCRIPTION SCREEN NoErrors no errors exist 0 OneError one error 1 LessFive 2-4 errors <5 LessTen 5-9 errors <10 Less100 10-99 errors <100 Less320 100-319 errors <320 Greater320 320 or more errors >320 GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 CRC Error Event Same as defined in managed object 552a CRC Error Event Same as defined in managed object 552a V1.1 CRC Error Event Same as defined in managed object 551 CRC Error Event Same as defined in managed object')
csuSEEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuSEEvent.setStatus('mandatory')
if mibBuilder.loadTexts: csuSEEvent.setDescription('This variable is used to indicate Severe Error Events. RANGE DESCRIPTION SCREEN NoErrors 0 errors . OneOrMore 1 or more errors * GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 SE Event Same as defined in managed object 552a SE Event Same as defined in managed object 552a V1.1 SE Event Same as defined in managed object 551 SE Event Same as defined in managed object')
csuFEEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFEEvent.setStatus('mandatory')
if mibBuilder.loadTexts: csuFEEvent.setDescription('This variable is used to indicate a Frame Error Event. RANGE DESCRIPTION SCREEN NoErrors 0 errors . OneOrMore 1 or more errors * GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 FE Event Same as defined in managed object 552a FE Event Same as defined in managed object 552a V1.1 FE Event Same as defined in managed object 551 FE Event Same as defined in managed object')
csuCVEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCVEvent.setStatus('mandatory')
if mibBuilder.loadTexts: csuCVEvent.setDescription('This variable is used to indicate Code Violation Event. RANGE DESCRIPTION SCREEN NoErrors 0 errors . OneOrMore 1 or more errors * GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 CV Event Same as defined in managed object 552a CV Event Same as defined in managed object 552a V1.1 CV Event Same as defined in managed object 551 CV Event Same as defined in managed object')
csuCSEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuOneOrMore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCSEvent.setStatus('mandatory')
if mibBuilder.loadTexts: csuCSEvent.setDescription('This variable is used to indicate Controlled Slip Event RANGE DESCRIPTION SCREEN NoErrors 0 errors . OneOrMore 1 or more errors * GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 CS Event Same as defined in managed object 552a CS Event Same as defined in managed object 552a V1.1 CS Event Same as defined in managed object 551 CS Event Same as defined in managed object')
csuAPLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csuNoErrors", 1), ("csuInPayload", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuAPLoop.setStatus('mandatory')
if mibBuilder.loadTexts: csuAPLoop.setDescription('This variable is used to indicate Active Payload Loop condition occurred, this is the looping back toward the network frames consisting of the received 192 information bits plus its own frame in, CRC-6, and Data Link bits. RANGE DESCRIPTION SCREEN NoErrors 0 errors . InPayload in payload * GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 AP Loop Same as defined in managed object 552a AP Loop Same as defined in managed object 552a V1.1 AP Loop Same as defined in managed object 551 AP Loop Same as defined in managed object')
csuCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 10), )
if mibBuilder.loadTexts: csuCurrentStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuCurrentStatsTable.setDescription('The GDC csu Current Statistics Table.')
csuCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 10, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuCurrentIndex"))
if mibBuilder.loadTexts: csuCurrentStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuCurrentStatsEntry.setDescription('An entry in the GDC csu Scheduled Performance Report Table.')
csuCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuCurrentIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
csuCurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 10, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuCurrentLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: csuCurrentLOFC.setDescription('The number of Loss of Frame Count encountered by a DS1 interface in the current 15 minute interval. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 LOFC 551 None')
csuIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 11), )
if mibBuilder.loadTexts: csuIntervalStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuIntervalStatsTable.setDescription('The GDC csu Interval Statistics Table.')
csuIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 11, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuIntervalIndex"), (0, "GDCDS1-MIB", "csuIntervalNumber"))
if mibBuilder.loadTexts: csuIntervalStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuIntervalStatsEntry.setDescription('An entry in the GDC csu Scheduled Performance Report Table.')
csuIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuIntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
csuIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csuIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minute interval (assuming tht all 96 intervals are valid).')
csuIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuIntervalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: csuIntervalLOFC.setDescription('The number of Loss of Frame Count encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 LOFC 551 None')
csuTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 12), )
if mibBuilder.loadTexts: csuTotalStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuTotalStatsTable.setDescription('The GDC csu Total Statistics Table.')
csuTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 12, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuTotalIndex"))
if mibBuilder.loadTexts: csuTotalStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuTotalStatsEntry.setDescription('An entry in the GDC csu Scheduled Performance Report Table.')
csuTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuTotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
csuTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuTotalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: csuTotalLOFC.setDescription('The number of Loss of Frame Count encountered by a DS1 interface in the previous 24 hour interval. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 LOFC 551 None')
csuFarEndCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 13), )
if mibBuilder.loadTexts: csuFarEndCurrentStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndCurrentStatsTable.setDescription('The GDC csu Current Statistics Table.')
csuFarEndCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 13, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuFarEndCurrentIndex"))
if mibBuilder.loadTexts: csuFarEndCurrentStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndCurrentStatsEntry.setDescription('An entry in the GDC csu Scheduled Performance Report Table.')
csuFarEndCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndCurrentIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
csuFarEndCurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 13, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndCurrentLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndCurrentLOFC.setDescription('The number of LOFC encountered by a DS1 interface in the current 15 minute interval. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 LOFC 551 None')
csuFarEndIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 14), )
if mibBuilder.loadTexts: csuFarEndIntervalStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndIntervalStatsTable.setDescription('The GDC csu Interval Statistics Table.')
csuFarEndIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 14, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuFarEndIntervalIndex"), (0, "GDCDS1-MIB", "csuFarEndIntervalNumber"))
if mibBuilder.loadTexts: csuFarEndIntervalStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndIntervalStatsEntry.setDescription('An entry in the GDC csu Scheduled Performance Report Table.')
csuFarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndIntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
csuFarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minute interval (assuming tht all 96 intervals are valid).')
csuFarEndIntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndIntervalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndIntervalLOFC.setDescription('The number of LOFC encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 LOFC 551 None')
csuFarEndTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 2, 15), )
if mibBuilder.loadTexts: csuFarEndTotalStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndTotalStatsTable.setDescription('The GDC csu Total Statistics Table.')
csuFarEndTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 2, 15, 1), ).setIndexNames((0, "GDCDS1-MIB", "csuFarEndTotalIndex"))
if mibBuilder.loadTexts: csuFarEndTotalStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndTotalStatsEntry.setDescription('An entry in the GDC csu Scheduled Performance Report Table.')
csuFarEndTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndTotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
csuFarEndTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 2, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csuFarEndTotalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: csuFarEndTotalLOFC.setDescription('The number of LOFC encountered by a DS1 interface in the previous 24 hour interval. GDCPRODUCT EQUIVALENT POSSIBLESELECTIONS 552a-1 None 552a None 552a V1.1 LOFC 551 None')
mibBuilder.exportSymbols("GDCDS1-MIB", csuCurrentStatsTable=csuCurrentStatsTable, csuSelftestFrame=csuSelftestFrame, csuChanLoopback=csuChanLoopback, csuChanDiagTable=csuChanDiagTable, csuSEEvent=csuSEEvent, csuFarEndIntervalStatsEntry=csuFarEndIntervalStatsEntry, csuAlternateDS0=csuAlternateDS0, csuCVEvent=csuCVEvent, csuIndicatorCascadeNS=csuIndicatorCascadeNS, csuCurrentIndex=csuCurrentIndex, csuAlarmHistoryIndex=csuAlarmHistoryIndex, csuIndicatorChannelRDL=csuIndicatorChannelRDL, csuLoopbackDiagTable=csuLoopbackDiagTable, csuCRCErrEvent=csuCRCErrEvent, csuIntervalStatsEntry=csuIntervalStatsEntry, csuFarEndTotalStatsTable=csuFarEndTotalStatsTable, csuIndicatorChannelLL=csuIndicatorChannelLL, csuTotalIndex=csuTotalIndex, csuIndicatorNNS=csuIndicatorNNS, csu=csu, csuRTSCTS=csuRTSCTS, csuLBtest=csuLBtest, csuTotalLOFC=csuTotalLOFC, csuControlModeIdle=csuControlModeIdle, csuChanSelftest=csuChanSelftest, csuCount=csuCount, csuFarEndIntervalStatsTable=csuFarEndIntervalStatsTable, csuFarEndIntervalIndex=csuFarEndIntervalIndex, csuIndicatorTable=csuIndicatorTable, csuStartDS0=csuStartDS0, csuFarEndCurrentIndex=csuFarEndCurrentIndex, csuLoopbackDiagEntry=csuLoopbackDiagEntry, csuLineBuildOutValue=csuLineBuildOutValue, csuFarEndIntervalNumber=csuFarEndIntervalNumber, csuAPLoop=csuAPLoop, csuAlarmType=csuAlarmType, csuCurrentLOFC=csuCurrentLOFC, csuGDCSelftestPattern=csuGDCSelftestPattern, csuSelftestResults=csuSelftestResults, csuTotalStatsEntry=csuTotalStatsEntry, gdc=gdc, csuIndicatorNetworkST=csuIndicatorNetworkST, csuCSEvent=csuCSEvent, csuAlarmHistoryStart=csuAlarmHistoryStart, csuTime=csuTime, csuOnesDensity=csuOnesDensity, csuDS0Num=csuDS0Num, csuBERtest=csuBERtest, csuLineBuildOutCtrl=csuLineBuildOutCtrl, csuIndicatorChannelDL=csuIndicatorChannelDL, csuFarEndCurrentLOFC=csuFarEndCurrentLOFC, csuFarEndCurrentStatsTable=csuFarEndCurrentStatsTable, csuChanRate=csuChanRate, csuFEEvent=csuFEEvent, csuTotalStatsTable=csuTotalStatsTable, csuIndicatorCRC=csuIndicatorCRC, csuChanLineIndex=csuChanLineIndex, csuDataBlocks=csuDataBlocks, csuRespondRDL=csuRespondRDL, csuSelftestDiagLineIndex=csuSelftestDiagLineIndex, csuLoopbackDiagLineIndex=csuLoopbackDiagLineIndex, csuChanConfigTable=csuChanConfigTable, csuIndicatorOS=csuIndicatorOS, csuAlarmHistoryEntry=csuAlarmHistoryEntry, csuIndicatorNetworkRT=csuIndicatorNetworkRT, csuChanDiagEntry=csuChanDiagEntry, csuSelftestDiagTable=csuSelftestDiagTable, csuFrontPanel=csuFrontPanel, csuTestType=csuTestType, csuAISLoopdown=csuAISLoopdown, csuGDCLoopback=csuGDCLoopback, csuLineTypeCtrl=csuLineTypeCtrl, csuIndicatorMode=csuIndicatorMode, csuLastOccur=csuLastOccur, csuFarEndTotalLOFC=csuFarEndTotalLOFC, csuReceiveLevel=csuReceiveLevel, csuIndicatorCascadeOOF=csuIndicatorCascadeOOF, csuPerfRprtIntervalNumber=csuPerfRprtIntervalNumber, csuInbandDLTimeout=csuInbandDLTimeout, csuRDLInbandCode=csuRDLInbandCode, csuSelftestUserPattern=csuSelftestUserPattern, csuDate=csuDate, csuInitialize=csuInitialize, csuIndicatorNLB=csuIndicatorNLB, csuConfigEntry=csuConfigEntry, csuConfigLineIndex=csuConfigLineIndex, csuInbandLoop=csuInbandLoop, csuIndicatorEntry=csuIndicatorEntry, csuIndicatorNetworkLT=csuIndicatorNetworkLT, csuDS0DiagTable=csuDS0DiagTable, csuIntervalLOFC=csuIntervalLOFC, csuChan6456=csuChan6456, csuAlarmHistoryTable=csuAlarmHistoryTable, csuChanSelftestStatus=csuChanSelftestStatus, csuIndicatorTNS=csuIndicatorTNS, csuSchedPerfRprtEntry=csuSchedPerfRprtEntry, csuSelftestDiagEntry=csuSelftestDiagEntry, csuIndicatorTSY=csuIndicatorTSY, csuCurrentStatsEntry=csuCurrentStatsEntry, csuCircuitDelayResult=csuCircuitDelayResult, csuIndicatorYEL=csuIndicatorYEL, csuChanConfigLineIndex=csuChanConfigLineIndex, csuSchedPerfRprtIndex=csuSchedPerfRprtIndex, csuConfigTable=csuConfigTable, csuIntervalIndex=csuIntervalIndex, csuSelftestTime=csuSelftestTime, csuTestPattern=csuTestPattern, csuILBFrame=csuILBFrame, csuFarEndCurrentStatsEntry=csuFarEndCurrentStatsEntry, csuPreEqualizer=csuPreEqualizer, csuDS0DiagEntry=csuDS0DiagEntry, csuIndicatorChannelST=csuIndicatorChannelST, csuResetResults=csuResetResults, csuChanStatus=csuChanStatus, csuChanConfigEntry=csuChanConfigEntry, csuIndicatorOOF=csuIndicatorOOF, csuFirstOccur=csuFirstOccur, csuIntervalNumber=csuIntervalNumber, csuFarEndTotalStatsEntry=csuFarEndTotalStatsEntry, csuFarEndTotalIndex=csuFarEndTotalIndex, csuChanConfigNum=csuChanConfigNum, csuCircuitDelayCtrl=csuCircuitDelayCtrl, csuIndicatorIndex=csuIndicatorIndex, csuPerfRprtMsg=csuPerfRprtMsg, csuIndicatorDS0LB=csuIndicatorDS0LB, csuSchedPerfRprtTable=csuSchedPerfRprtTable, csuFarEndIntervalLOFC=csuFarEndIntervalLOFC, csuChanNum=csuChanNum, csuIndicatorBPV=csuIndicatorBPV, csuIndicatorLAD=csuIndicatorLAD, csuDiagSelftest=csuDiagSelftest, csuDS0LineIndex=csuDS0LineIndex, csuIndicatorAIS=csuIndicatorAIS, csuCumErrs=csuCumErrs, csuIntervalStatsTable=csuIntervalStatsTable)
