#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-FileSystemMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-FileSystemMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
RowStatus, Unsigned32, StorageType, RowPointer, Integer32, DisplayString, Gauge32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowStatus", "Unsigned32", "StorageType", "RowPointer", "Integer32", "DisplayString", "Gauge32")
NonReplicated, AsciiString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "AsciiString")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, ModuleIdentity, ObjectIdentity, TimeTicks, Counter32, IpAddress, NotificationType, Integer32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Counter32", "IpAddress", "NotificationType", "Integer32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fileSystemMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16))
mscFs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15))
mscFsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 1), )
if mibBuilder.loadTexts: mscFsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsRowStatusTable.setDescription('This entry controls the addition and deletion of mscFs components.')
mscFsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"))
if mibBuilder.loadTexts: mscFsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsRowStatusEntry.setDescription('A single entry in the table represents a single mscFs component.')
mscFsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscFs components. These components cannot be added nor deleted.')
mscFsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscFsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsStorageType.setDescription('This variable represents the storage type value for the mscFs tables.')
mscFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscFsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsIndex.setDescription('This variable represents the index for the mscFs tables.')
mscFsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 10), )
if mibBuilder.loadTexts: mscFsStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscFsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"))
if mibBuilder.loadTexts: mscFsStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsStateEntry.setDescription('An entry in the mscFsStateTable.')
mscFsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscFsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscFsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscFsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11), )
if mibBuilder.loadTexts: mscFsOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsOperTable.setDescription('This group contains the filesystem operational data.')
mscFsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"))
if mibBuilder.loadTexts: mscFsOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsOperEntry.setDescription('An entry in the mscFsOperTable.')
mscFsVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsVolumeName.setDescription('This attribute describes the volume name of the filesystem. This is the active disk volume name.')
mscFsActiveDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsActiveDisk.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsActiveDisk.setDescription('The activeDisk attribute value is the Disk component instance value of the active disk. This is also the card number of the active control processor.')
mscFsSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("synchronized", 0), ("unSynchronized", 1), ("synchronizing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsSyncStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsSyncStatus.setDescription('The synchronization status value indicates whether the file system is synchronized or not.')
mscFsSyncProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsSyncProgress.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsSyncProgress.setDescription('The synchronization progress value indicates the percentage of the standby disk already synchronized with the active disk. This value is equal to 100 if the two disks are synchronized or 0 if they are out of synchronization.')
mscFsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsCapacity.setDescription('The Capacity attribute value is the total size of the filesystem (in bytes). This value is equal to the smallest disk size in a synchronized filesystem, otherwise it is the capacity of the active disk.')
mscFsFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsFreeSpace.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsFreeSpace.setDescription('This attribute describes the free disk space (in bytes) currently available in the filesystem. It is equal to the smallest free disk space size of the active and standby disks in a synchronized filesystem. When the filesystem is unsynchronized it is the free disk space of the active disk.')
mscFsUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 11, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsUsage.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsUsage.setDescription('This attribute describes the percentage of the free space available on the filesystem.')
mscFsDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2))
mscFsDiskRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 1), )
if mibBuilder.loadTexts: mscFsDiskRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscFsDisk components.')
mscFsDiskRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskIndex"))
if mibBuilder.loadTexts: mscFsDiskRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskRowStatusEntry.setDescription('A single entry in the table represents a single mscFsDisk component.')
mscFsDiskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscFsDisk components. These components cannot be added nor deleted.')
mscFsDiskComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscFsDiskStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskStorageType.setDescription('This variable represents the storage type value for the mscFsDisk tables.')
mscFsDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscFsDiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskIndex.setDescription('This variable represents the index for the mscFsDisk tables.')
mscFsDiskStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 10), )
if mibBuilder.loadTexts: mscFsDiskStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskStateTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscFsDiskStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskIndex"))
if mibBuilder.loadTexts: mscFsDiskStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskStateEntry.setDescription('An entry in the mscFsDiskStateTable.')
mscFsDiskAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscFsDiskOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscFsDiskUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscFsDiskOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 11), )
if mibBuilder.loadTexts: mscFsDiskOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the disk component operational data.')
mscFsDiskOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskIndex"))
if mibBuilder.loadTexts: mscFsDiskOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskOperEntry.setDescription('An entry in the mscFsDiskOperTable.')
mscFsDiskVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscFsDiskVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskVolumeName.setDescription('This attribute describes the volume name of the disk. The volume names of the two disks must be identical to be synchronized.')
mscFsDiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskCapacity.setDescription('This attribute describes the total formatted disk size (in bytes) of the disk.')
mscFsDiskFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskFreeSpace.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskFreeSpace.setDescription('freeSpace This attribute indicates the available free disk space(in bytes) on the disk. Free space is reduced by bad blocks (if any). If there are different numbers of bad blocks on the disks in a dual-disk system, the reported free space will differ on the two disks. Moreover, due to the DOS file system internal representation of directories and files, adding and deleting files may fragment the disks differently resulting in some disk space wasted. A small discrepancy (less than 1% of the disk size) in the disks free space is considered as normal.')
mscFsDiskBadBlocksPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 11, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskBadBlocksPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskBadBlocksPercentage.setDescription('This attribute records the percentage of the disk space lost because of defects. If this percentage is high, it is recommended to change the disk.')
mscFsDiskUnformattedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskUnformattedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskUnformattedCapacity.setDescription('unformattedCapacity This attribute indicates the physical disk size (in bytes). The physical disk size may be different from the formatted disk size if there are bad blocks or the disk has been formatted to a smaller disk size for backward compatibility with older releases.')
mscFsDiskTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2))
mscFsDiskTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 1), )
if mibBuilder.loadTexts: mscFsDiskTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscFsDiskTest components.')
mscFsDiskTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskTestIndex"))
if mibBuilder.loadTexts: mscFsDiskTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestRowStatusEntry.setDescription('A single entry in the table represents a single mscFsDiskTest component.')
mscFsDiskTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscFsDiskTest components. These components cannot be added nor deleted.')
mscFsDiskTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscFsDiskTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestStorageType.setDescription('This variable represents the storage type value for the mscFsDiskTest tables.')
mscFsDiskTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscFsDiskTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestIndex.setDescription('This variable represents the index for the mscFsDiskTest tables.')
mscFsDiskTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 10), )
if mibBuilder.loadTexts: mscFsDiskTestStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestStateTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscFsDiskTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskTestIndex"))
if mibBuilder.loadTexts: mscFsDiskTestStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestStateEntry.setDescription('An entry in the mscFsDiskTestStateTable.')
mscFsDiskTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscFsDiskTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscFsDiskTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscFsDiskTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 11), )
if mibBuilder.loadTexts: mscFsDiskTestSetupTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestSetupTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the Test component operational data. The testCount, duration and type can be set to control the duration and the test type which will be run.')
mscFsDiskTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskTestIndex"))
if mibBuilder.loadTexts: mscFsDiskTestSetupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestSetupEntry.setDescription('An entry in the mscFsDiskTestSetupTable.')
mscFsDiskTestTestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscFsDiskTestTestCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestTestCount.setDescription("This attribute indicates the number of times that the test will run. Note that the test will not run that many times if 'duration' is not long enough to allow the test to complete. The test will execute at least one and then stop at the count where duration has just exceeded.")
mscFsDiskTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35791394)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscFsDiskTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestDuration.setDescription('This attribute is the maximum duration (in minutes) that the test will run. The test can finish in less time if the number of tests, as recorded by testCount, is reached before this time. A test may take longer than the specified duration since a test cycle (or pass) is not interruptible.')
mscFsDiskTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("filesystemCheck", 0), ("diskRead", 1), ("flakyBitDetection", 2), ("surfaceAnalysis", 3))).clone('filesystemCheck')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscFsDiskTestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestType.setDescription('This attribute is the type of the test to be run. The diskRead test reads every sector on the disk once and reports bad sectors. The filesystemCheck does a sanity check and attempts to repair corruption. The flakyBitDetection test reads every sector on the disk twice and compares the two read results. The surfaceAnalysis test writes a magnetically hard to record pattern to the disk and reads back the pattern to determine the condition of the magnetic surface of the disk. The surface analysis test destroys all the data and disk should be formatted afterward.')
mscFsDiskTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 12), )
if mibBuilder.loadTexts: mscFsDiskTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestResultsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the results of the test.')
mscFsDiskTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskIndex"), (0, "Nortel-MsCarrier-MscPassport-FileSystemMIB", "mscFsDiskTestIndex"))
if mibBuilder.loadTexts: mscFsDiskTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestResultsEntry.setDescription('An entry in the mscFsDiskTestResultsTable.')
mscFsDiskTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("testCountReached", 0), ("testTimeExpired", 1), ("stoppedByOperator", 2), ("neverStarted", 3), ("testRunning", 4), ("error", 5), ("internalError", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestCauseOfTermination.setDescription('This attribute records the reason why the test was terminated. The reasons are: testCountReached: the test ran the number of times specified in the attribute testCount and ended normally. error: the test was terminated by an error that is recorded in the natureOfError attribute. neverStarted: the test was never started. stoppedByOperator: the test was terminated by the Stop command. testTimeExpired: the duration of the test expired. testRunning: the test is still running. unknown: the test terminated for unknown reasons. internalError: An internal error terminated the test.')
mscFsDiskTestNatureOfError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("logical", 0), ("media", 1), ("noErrorDetected", 2), ("failedToComplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestNatureOfError.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestNatureOfError.setDescription('This attribute describes the error found by a test. A logical error can be fixed by a filesystemCheck test followed eventually by a synchronization. A media error indicates that a fault in the disk hardware is suspected. A failedToComplete error indicates that the test was terminated.')
mscFsDiskTestSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noDataLost", 0), ("dataLost", 1), ("hardwareProblem", 2), ("noError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestSeverity.setDescription('This attribute describes the severity of the error found by a test. There are three types of severity: no data was lost, data was lost and hardware problem. If the test found no error(s), this will be reported as noError. If the test found error(s) but no data was lost, then noDataLost is reported.')
mscFsDiskTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestElapsedTime.setDescription('This attribute records the elapsed time (in minutes) since the test was started.')
mscFsDiskTestTestExecutionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 15, 2, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscFsDiskTestTestExecutionCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscFsDiskTestTestExecutionCount.setDescription('The number of times the test had actually run.')
fileSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 1))
fileSystemGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 1, 1))
fileSystemGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 1, 1, 3))
fileSystemGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 1, 1, 3, 2))
fileSystemCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 3))
fileSystemCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 3, 1))
fileSystemCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 3, 1, 3))
fileSystemCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 16, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-FileSystemMIB", mscFsRowStatusTable=mscFsRowStatusTable, mscFsSyncStatus=mscFsSyncStatus, mscFsDiskCapacity=mscFsDiskCapacity, mscFsStateTable=mscFsStateTable, mscFsAdminState=mscFsAdminState, mscFsDiskTestRowStatusEntry=mscFsDiskTestRowStatusEntry, mscFsCapacity=mscFsCapacity, fileSystemGroupCA=fileSystemGroupCA, mscFsUsage=mscFsUsage, mscFsDiskTestStorageType=mscFsDiskTestStorageType, mscFsDiskTestResultsEntry=mscFsDiskTestResultsEntry, fileSystemCapabilitiesCA02=fileSystemCapabilitiesCA02, mscFsDiskTestComponentName=mscFsDiskTestComponentName, mscFsStateEntry=mscFsStateEntry, mscFsStorageType=mscFsStorageType, mscFsFreeSpace=mscFsFreeSpace, mscFsDiskTestIndex=mscFsDiskTestIndex, mscFsDiskTestNatureOfError=mscFsDiskTestNatureOfError, mscFsDiskTestElapsedTime=mscFsDiskTestElapsedTime, fileSystemGroup=fileSystemGroup, mscFsDiskComponentName=mscFsDiskComponentName, mscFsDiskOperTable=mscFsDiskOperTable, mscFsComponentName=mscFsComponentName, mscFsOperEntry=mscFsOperEntry, mscFsVolumeName=mscFsVolumeName, mscFsDiskBadBlocksPercentage=mscFsDiskBadBlocksPercentage, mscFsDiskUnformattedCapacity=mscFsDiskUnformattedCapacity, fileSystemGroupCA02=fileSystemGroupCA02, mscFsDiskAdminState=mscFsDiskAdminState, mscFsDiskTestOperationalState=mscFsDiskTestOperationalState, mscFsDiskTestCauseOfTermination=mscFsDiskTestCauseOfTermination, mscFsDiskTestSetupEntry=mscFsDiskTestSetupEntry, mscFsDiskTestTestExecutionCount=mscFsDiskTestTestExecutionCount, mscFsDiskTestResultsTable=mscFsDiskTestResultsTable, mscFsDiskIndex=mscFsDiskIndex, mscFsDiskTestStateEntry=mscFsDiskTestStateEntry, mscFsOperationalState=mscFsOperationalState, mscFsDiskTestAdminState=mscFsDiskTestAdminState, fileSystemCapabilities=fileSystemCapabilities, fileSystemCapabilitiesCA=fileSystemCapabilitiesCA, mscFsDiskOperationalState=mscFsDiskOperationalState, mscFsRowStatus=mscFsRowStatus, mscFsDiskTestUsageState=mscFsDiskTestUsageState, mscFsDiskTestSetupTable=mscFsDiskTestSetupTable, mscFsUsageState=mscFsUsageState, mscFsDiskTestRowStatusTable=mscFsDiskTestRowStatusTable, mscFsOperTable=mscFsOperTable, mscFsDiskTestDuration=mscFsDiskTestDuration, mscFsDiskUsageState=mscFsDiskUsageState, fileSystemGroupCA02A=fileSystemGroupCA02A, mscFsIndex=mscFsIndex, mscFsDiskFreeSpace=mscFsDiskFreeSpace, mscFsRowStatusEntry=mscFsRowStatusEntry, mscFsActiveDisk=mscFsActiveDisk, mscFsDiskRowStatusTable=mscFsDiskRowStatusTable, mscFsDiskTest=mscFsDiskTest, mscFsDiskTestType=mscFsDiskTestType, mscFsSyncProgress=mscFsSyncProgress, mscFsDiskRowStatus=mscFsDiskRowStatus, mscFsDiskTestSeverity=mscFsDiskTestSeverity, fileSystemCapabilitiesCA02A=fileSystemCapabilitiesCA02A, mscFsDisk=mscFsDisk, mscFsDiskRowStatusEntry=mscFsDiskRowStatusEntry, fileSystemMIB=fileSystemMIB, mscFsDiskStateEntry=mscFsDiskStateEntry, mscFsDiskTestRowStatus=mscFsDiskTestRowStatus, mscFsDiskTestTestCount=mscFsDiskTestTestCount, mscFsDiskVolumeName=mscFsDiskVolumeName, mscFsDiskOperEntry=mscFsDiskOperEntry, mscFs=mscFs, mscFsDiskStateTable=mscFsDiskStateTable, mscFsDiskStorageType=mscFsDiskStorageType, mscFsDiskTestStateTable=mscFsDiskTestStateTable)
