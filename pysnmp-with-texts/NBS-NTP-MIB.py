#
# PySNMP MIB module NBS-NTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-NTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
nbsCmmcNtpGrp, = mibBuilder.importSymbols("NBS-CMMC-MIB", "nbsCmmcNtpGrp")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, Counter32, ModuleIdentity, NotificationType, Counter64, ObjectIdentity, MibIdentifier, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Counter32", "ModuleIdentity", "NotificationType", "Counter64", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbsNtpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 200, 9, 1))
if mibBuilder.loadTexts: nbsNtpMib.setLastUpdated('200711210000Z')
if mibBuilder.loadTexts: nbsNtpMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsNtpMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsNtpMib.setDescription('MIB for representing NBS NTP private information')
nbsNtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 629, 200, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("no", 2), ("yes", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsNtpEnable.setStatus('current')
if mibBuilder.loadTexts: nbsNtpEnable.setDescription('Whether or not to enable NTP')
nbsNtpServerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 200, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsNtpServerTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsNtpServerTableSize.setDescription('The number of rows in the NTP Server table')
nbsNtpServerTable = MibTable((1, 3, 6, 1, 4, 1, 629, 200, 9, 1, 3), )
if mibBuilder.loadTexts: nbsNtpServerTable.setStatus('current')
if mibBuilder.loadTexts: nbsNtpServerTable.setDescription('A table of NTP servers to consult for time synchronization. It represents the current operational table as well as the NVRAM saved table. The entries in the table are saved over system resets and power up cycles')
nbsNtpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 200, 9, 1, 3, 1), ).setIndexNames((0, "NBS-NTP-MIB", "nbsNtpServerIpAddr"))
if mibBuilder.loadTexts: nbsNtpServerEntry.setStatus('current')
if mibBuilder.loadTexts: nbsNtpServerEntry.setDescription('Contains the information necessary to contact an NTP server. The object nbsNtpServerTableEntryStatus, when written, is used to create or delete an entry/row in nbsNtpServerTable. To create a new entry, a SET PDU with the nbsNtpServerIpAddr object is required.')
nbsNtpServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 200, 9, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: nbsNtpServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: nbsNtpServerIpAddr.setDescription('IP Address of an NTP server that should be used for time synchronization.')
nbsNtpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 200, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsNtpServerStatus.setStatus('current')
if mibBuilder.loadTexts: nbsNtpServerStatus.setDescription("This object is used to get/set the validity of the information contained by nbsNtpServerEntry row. Setting this object to the value invalid(1) has the effect of deleting the corresponding nbsNtpServerTable entry. Deleting and entry has the effect of initializing it to default values : IpAddr = 0.0.0.0 Setting this object to the value valid(2) entry has the effect of creating a new row in the nbsNtpServerTable object, if an entry with the same nbsNtpServerIpAddr does not exist. If such an entry exists, then a 'badValue' error will be returned. The GET operations will receive a value of valid(2) for existing entries. An invalid(1) value indicates an entry that was deleted by a previous SET operation.")
mibBuilder.exportSymbols("NBS-NTP-MIB", nbsNtpMib=nbsNtpMib, nbsNtpServerTableSize=nbsNtpServerTableSize, nbsNtpServerStatus=nbsNtpServerStatus, nbsNtpServerTable=nbsNtpServerTable, nbsNtpEnable=nbsNtpEnable, PYSNMP_MODULE_ID=nbsNtpMib, nbsNtpServerEntry=nbsNtpServerEntry, nbsNtpServerIpAddr=nbsNtpServerIpAddr)
