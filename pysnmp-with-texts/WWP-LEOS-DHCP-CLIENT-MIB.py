#
# PySNMP MIB module WWP-LEOS-DHCP-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-DHCP-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, MibIdentifier, Integer32, ModuleIdentity, Counter32, Gauge32, Counter64, NotificationType, ObjectIdentity, Bits, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "MibIdentifier", "Integer32", "ModuleIdentity", "Counter32", "Gauge32", "Counter64", "NotificationType", "ObjectIdentity", "Bits", "Unsigned32", "iso")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosDhcpClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17))
wwpLeosDhcpClientMIB.setRevisions(('2006-04-18 17:00', '2002-11-01 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosDhcpClientMIB.setRevisionsDescriptions(('Add new tables to support DHCP relay agent functionality. Range of wwpLeosDhcpRelayAgentInterfaceIpAddr limited to 1..15.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosDhcpClientMIB.setLastUpdated('200604181700Z')
if mibBuilder.loadTexts: wwpLeosDhcpClientMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosDhcpClientMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosDhcpClientMIB.setDescription('The MIB module to manage DHCP client on WWP LEOS products.')
wwpLeosDhcpClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1))
wwpLeosDhcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1))
wwpLeosDhcpRelayAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2))
wwpLeosDhcpRelayAgentGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 1))
wwpLeosDhcpClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 2))
wwpLeosDhcpClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 2, 0))
wwpLeosDhcpClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 3))
wwpLeosDhcpClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 3, 1))
wwpLeosDhcpClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 3, 2))
wwpLeosDhcpIfName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpIfName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpIfName.setDescription("The ifDesc associated with the DHCP client. it can be set to 'remote' or 'local'")
wwpLeosDhcpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpStatus.setDescription("Setting this object to 'enable' will enable the DHCP client on this interface.")
wwpLeosDhcpState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("bound", 1), ("disabled", 2), ("inform", 3), ("init", 4), ("rebinding", 5), ("renewing", 6), ("requesting", 7), ("selecting", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpState.setDescription('The current state of the DHCP client on this interface as per RFC2131.')
wwpLeosDhcpLeaseOffered = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpLeaseOffered.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpLeaseOffered.setDescription('The lease time authorized by the server.')
wwpLeosDhcpLeaseRemaining = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpLeaseRemaining.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpLeaseRemaining.setDescription('The time remaining for the lease to expire.')
wwpLeosDhcpDiscoveryMsgInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpDiscoveryMsgInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpDiscoveryMsgInterval.setDescription('The time interval for discovery messages issued before the client receives the first reply.')
wwpLeosDhcpRenewalTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRenewalTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRenewalTime.setDescription('The number of seconds before the client begins to renew its address lease with the DHCP server. This time is a function typically 50% of the full configured duration (or lease time) for a client lease. Referred to as T1 in RFC2131.')
wwpLeosDhcpRebindingTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRebindingTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRebindingTime.setDescription('The number of seconds before the client enters the rebinding state if it has not renewed its current address lease with the DHCP server. This time is a function (typically, 87.5%) of the full configured duration (or lease time) for a client lease. Referred to as T2 in RFC2131.')
wwpLeosDhcpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpServerAddress.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpServerAddress.setDescription('The IP address that identifies the DHCP server.')
wwpLeosDhcpRenewLease = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpRenewLease.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRenewLease.setDescription('Setting this object to true will force the DHCP client to renew its lease.')
wwpLeosDhcpReleaseLease = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpReleaseLease.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpReleaseLease.setDescription('Setting this object to true will force the DHCP client to release its lease, if the client DHCP is in the bound state')
wwpLeosDhcpClientOptionTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 13), )
if mibBuilder.loadTexts: wwpLeosDhcpClientOptionTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpClientOptionTable.setDescription('List of options supported by the DHCP client.')
wwpLeosDhcpClientOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 13, 1), ).setIndexNames((0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpOptionCodeIndex"))
if mibBuilder.loadTexts: wwpLeosDhcpClientOptionEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpClientOptionEntry.setDescription('An entry containing list of options supported by DHCP client.')
wwpLeosDhcpOptionCodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpOptionCodeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpOptionCodeIndex.setDescription('Specifies the index used for this entry.')
wwpLeosDhcpOptionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpOptionDesc.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpOptionDesc.setDescription('Specifies the description for the given DHCP option code.')
wwpLeosDhcpOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpOptionCode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpOptionCode.setDescription('Specifies the option code specified by RFC specification.')
wwpLeosDhcpOptionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpOptionState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpOptionState.setDescription('Specifies if the given option is enabled/disabled.')
wwpLeosDhcpRelayAgentCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slotAndPort", 1), ("slotAndPortAndVlan", 2), ("cidString", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCircuitId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCircuitId.setDescription('Specifies what circuit ID should be used by DHCP relay agent.')
wwpLeosDhcpRelayAgentRemoteId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macAddress", 1), ("hostName", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentRemoteId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentRemoteId.setDescription('This object specifies what remote agent ID is used by DHCP relay agent. it can be set to macAddress or hostName.')
wwpLeosDhcpRelayAgentL2State = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2State.setDescription('Specifies the global state of DHCP L2 relay agent.')
wwpLeosDhcpRelayAgentL3State = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3State.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3State.setDescription('Specifies the global state of DHCP L3 relay agent.')
wwpLeosDhcpRelayAgentL2StateTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StateTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StateTable.setDescription('Tables allows changing configuration of DHCP relay agent functionality for each wwpLeosDhcpRelayAgentVlan.')
wwpLeosDhcpRelayAgentL2StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentVlan"))
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StateEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StateEntry.setDescription('Entry in the table to configure DHCP relay agent functionality.')
wwpLeosDhcpRelayAgentVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentVlan.setDescription('This mib object specifies the VLAN on which DHCP relay agent is configured.')
wwpLeosDhcpRelayAgentL2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2AdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2AdminState.setDescription('This object allows to disable or enable DHCP relay agent functionality on the given VLAN specified by wwpLeosDhcpRelayAgentVlan.')
wwpLeosDhcpRelayAgentL2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2OperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2OperState.setDescription('This object shows the operational status of the DHCP relay agent on given VLAN.')
wwpLeosDhcpRelayAgentL2StatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StatsClear.setDescription("This mib object when set to 'true' clears DHCP relay agent stats for given VLAN.")
wwpLeosDhcpRelayAgentL2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2RowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2RowStatus.setDescription("Set this MIB object to 'Destroy' to terminate DHCP L2 Relaying on the VLAN specified by wwpLeosDhcpRelayAgentVlan. Set this MIB object to 'CreateAndGo' to enable DHCP L2 Relaying on the VLAN specified by wwpLeosDhcpRelayAgentVlan.")
wwpLeosDhcpRelayAgentL3StateTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 3), )
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3StateTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3StateTable.setDescription('Tables allows changing configuration of DHCP relay agent functionality for each wwpLeosDhcpRelayAgentInterfaceIndex.')
wwpLeosDhcpRelayAgentL3StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 3, 1), ).setIndexNames((0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentInterfaceIndex"))
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3StateEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3StateEntry.setDescription('Entry in the table to configure DHCP relay agent functionality.')
wwpLeosDhcpRelayAgentInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIndex.setDescription('This mib object specifies the value of the mib object wwpLeosDhcpRelayAgentIndexType. So if wwpLeosDhcpRelayAgentIndexType = interface then this object represents the interface index. if it is set to VLAN then this object represents the VLAN id and so on.')
wwpLeosDhcpRelayAgentL3AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3AdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3AdminState.setDescription('This object allows to disable or enable DHCP relay agent functionality for each wwpLeosDhcpRelayAgentIndexType.')
wwpLeosDhcpRelayAgentL3OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3OperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3OperState.setDescription('This object shows the operational status of the DHCP relay agent on the given interface.')
wwpLeosDhcpRelayAgentL3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3RowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL3RowStatus.setDescription("Set this MIB object to 'Destroy' to terminate DHCP L3 Relaying on the VLAN specified by wwpLeosDhcpRelayAgentInterfaceIndex. Set this MIB object to 'CreateAndGo' to enable DHCP L3 Relaying on the VLAN specified by wwpLeosDhcpRelayAgentInterfaceIndex.")
wwpLeosDhcpRelayAgentInterfaceIpTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 4), )
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpTable.setDescription('This table can be used to add the trusted IP addresses or host names on each interface.')
wwpLeosDhcpRelayAgentInterfaceIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 4, 1), ).setIndexNames((0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentInterfaceIpIndex"))
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpEntry.setDescription('Each entry in this table represents the trusted DHCP server IP address on each interface. ')
wwpLeosDhcpRelayAgentInterfaceIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpIndex.setDescription('This mib object is used as an index in the table and represents the unique index of the IP address for a given wwpLeosDhcpRelayAgentInterfaceIndex.')
wwpLeosDhcpRelayAgentInterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpAddr.setDescription('This mib object is used to specify the IP address of the DHCP server which is trusted IP address. This object cannot be modified once entry is created with some IP.')
wwpLeosDhcpRelayAgentInterfaceIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentInterfaceIpRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
wwpLeosDhcpRelayAgentTrustTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 5), )
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentTrustTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentTrustTable.setDescription('This table can be used to specify what slot / ports and vlans DHCP relay agent can trust.')
wwpLeosDhcpRelayAgentTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 5, 1), ).setIndexNames((0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentVlan"), (0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentPort"))
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentTrustEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentTrustEntry.setDescription('Each entry in this table can be used to specify the slot / port and VLAN to be trusted.')
wwpLeosDhcpRelayAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentPort.setDescription('This mib object is used as index in the table and is used to specify the port.')
wwpLeosDhcpRelayAgentTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clientTrust", 1), ("serverTrust", 2), ("dualRoleTrust", 3), ("unTrust", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentTrustMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentTrustMode.setDescription('This mib object can be used to set the port as client trusted, server trusted or not trusted.')
wwpLeosDhcpRelayAgentL2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6), )
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StatsTable.setDescription('Tables to display L2 statistics for each wwpLeosDhcpRelayAgentVlan.')
wwpLeosDhcpRelayAgentL2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1), ).setIndexNames((0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentVlan"))
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2StatsEntry.setDescription('Entry in the table to display l2 stats.')
wwpLeosDhcpRelayAgentL2IpSecHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2IpSecHeaders.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2IpSecHeaders.setDescription('This MIB object specifies the number of packets that include IP Sec Headers.')
wwpLeosDhcpRelayAgentL2Option82Added = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2Option82Added.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2Option82Added.setDescription('This MIB object specifies the number of packets that have had option 82 added.')
wwpLeosDhcpRelayAgentL2Option82Removed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2Option82Removed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2Option82Removed.setDescription('This MIB object specifies the number of packets that have had option 82 removed.')
wwpLeosDhcpRelayAgentL2UntrustedClientPortPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2UntrustedClientPortPktsRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2UntrustedClientPortPktsRx.setDescription('This MIB object specifies the number of packets received on untrusted client ports.')
wwpLeosDhcpRelayAgentL2UntrustedServerPortPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2UntrustedServerPortPktsRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2UntrustedServerPortPktsRx.setDescription('This MIB object specifies the number of packets received from untrusted server ports.')
wwpLeosDhcpRelayAgentL2SpoofedDhcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2SpoofedDhcpPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2SpoofedDhcpPkts.setDescription('This MIB object specifies the number of spoofed DHCP packets.')
wwpLeosDhcpRelayAgentL2Option82ExceedMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2Option82ExceedMTU.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2Option82ExceedMTU.setDescription('This MIB object specifies the number of packets with DHCP option 82 that exceed option 82.')
wwpLeosDhcpRelayAgentL2NoTrustedServerPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2NoTrustedServerPktDrop.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2NoTrustedServerPktDrop.setDescription('This MIB object specifies the number of DHCP packets dropped because there are no server trusted ports configured.')
wwpLeosDhcpRelayAgentL2NoTrustedClientPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2NoTrustedClientPktDrop.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentL2NoTrustedClientPktDrop.setDescription('This MIB object specifies the number of DHCP packets dropped because there are no client trusted ports configured.')
wwpLeosDhcpRelayAgentCidStringTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 7), )
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringTable.setDescription('This table can be used to specify cid strings for slot / ports and vlans dhcp relay agent can specify in Option 82 CID information.')
wwpLeosDhcpRelayAgentCidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 7, 1), ).setIndexNames((0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentVlan"), (0, "WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpRelayAgentCidStringPort"))
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringEntry.setDescription('Each entry in this table can be used to specify a cid string for slot / port and vlan combinations.')
wwpLeosDhcpRelayAgentCidStringPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringPort.setDescription('This mib object is used as index in the table and is used to specify the port.')
wwpLeosDhcpRelayAgentCidString = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 7, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidString.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidString.setDescription('This mib object can be used to set the cid string for the port.')
wwpLeosDhcpRelayAgentCidStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 1, 2, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpRelayAgentCidStringRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
wwpLeosDhcpClientOptionDisabledNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 17, 2, 0, 1)).setObjects(("WWP-LEOS-DHCP-CLIENT-MIB", "wwpLeosDhcpOptionCode"))
if mibBuilder.loadTexts: wwpLeosDhcpClientOptionDisabledNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosDhcpClientOptionDisabledNotification.setDescription('A wwpLeosDhcpClientOptionDisabledNotification is sent whenever device receives DHCP option which is disabled on the device.')
mibBuilder.exportSymbols("WWP-LEOS-DHCP-CLIENT-MIB", wwpLeosDhcpRenewalTime=wwpLeosDhcpRenewalTime, wwpLeosDhcpRebindingTime=wwpLeosDhcpRebindingTime, wwpLeosDhcpIfName=wwpLeosDhcpIfName, wwpLeosDhcpRelayAgentL2NoTrustedClientPktDrop=wwpLeosDhcpRelayAgentL2NoTrustedClientPktDrop, wwpLeosDhcpRelayAgentGlobalAttrs=wwpLeosDhcpRelayAgentGlobalAttrs, wwpLeosDhcpRelayAgentL2NoTrustedServerPktDrop=wwpLeosDhcpRelayAgentL2NoTrustedServerPktDrop, wwpLeosDhcpState=wwpLeosDhcpState, wwpLeosDhcpClient=wwpLeosDhcpClient, wwpLeosDhcpClientMIBNotificationPrefix=wwpLeosDhcpClientMIBNotificationPrefix, wwpLeosDhcpRelayAgentCidStringTable=wwpLeosDhcpRelayAgentCidStringTable, wwpLeosDhcpOptionCode=wwpLeosDhcpOptionCode, wwpLeosDhcpRelayAgentL2StateEntry=wwpLeosDhcpRelayAgentL2StateEntry, wwpLeosDhcpRelayAgentL2State=wwpLeosDhcpRelayAgentL2State, wwpLeosDhcpRelayAgentL2Option82ExceedMTU=wwpLeosDhcpRelayAgentL2Option82ExceedMTU, wwpLeosDhcpRelayAgentInterfaceIpIndex=wwpLeosDhcpRelayAgentInterfaceIpIndex, wwpLeosDhcpClientOptionEntry=wwpLeosDhcpClientOptionEntry, wwpLeosDhcpRelayAgentL2SpoofedDhcpPkts=wwpLeosDhcpRelayAgentL2SpoofedDhcpPkts, wwpLeosDhcpRelayAgentInterfaceIpAddr=wwpLeosDhcpRelayAgentInterfaceIpAddr, wwpLeosDhcpRelayAgentCidStringEntry=wwpLeosDhcpRelayAgentCidStringEntry, wwpLeosDhcpStatus=wwpLeosDhcpStatus, wwpLeosDhcpRelayAgentL2UntrustedClientPortPktsRx=wwpLeosDhcpRelayAgentL2UntrustedClientPortPktsRx, wwpLeosDhcpRelayAgentL2UntrustedServerPortPktsRx=wwpLeosDhcpRelayAgentL2UntrustedServerPortPktsRx, wwpLeosDhcpRelayAgent=wwpLeosDhcpRelayAgent, wwpLeosDhcpOptionState=wwpLeosDhcpOptionState, wwpLeosDhcpOptionCodeIndex=wwpLeosDhcpOptionCodeIndex, wwpLeosDhcpRelayAgentVlan=wwpLeosDhcpRelayAgentVlan, wwpLeosDhcpRelayAgentL2StatsClear=wwpLeosDhcpRelayAgentL2StatsClear, wwpLeosDhcpClientMIBConformance=wwpLeosDhcpClientMIBConformance, wwpLeosDhcpRelayAgentCidString=wwpLeosDhcpRelayAgentCidString, wwpLeosDhcpRelayAgentL2StateTable=wwpLeosDhcpRelayAgentL2StateTable, wwpLeosDhcpReleaseLease=wwpLeosDhcpReleaseLease, wwpLeosDhcpClientMIBCompliances=wwpLeosDhcpClientMIBCompliances, wwpLeosDhcpRenewLease=wwpLeosDhcpRenewLease, wwpLeosDhcpRelayAgentTrustTable=wwpLeosDhcpRelayAgentTrustTable, wwpLeosDhcpRelayAgentCidStringPort=wwpLeosDhcpRelayAgentCidStringPort, wwpLeosDhcpRelayAgentL2Option82Added=wwpLeosDhcpRelayAgentL2Option82Added, wwpLeosDhcpRelayAgentL2OperState=wwpLeosDhcpRelayAgentL2OperState, wwpLeosDhcpServerAddress=wwpLeosDhcpServerAddress, wwpLeosDhcpRelayAgentInterfaceIndex=wwpLeosDhcpRelayAgentInterfaceIndex, wwpLeosDhcpRelayAgentCircuitId=wwpLeosDhcpRelayAgentCircuitId, wwpLeosDhcpRelayAgentL2AdminState=wwpLeosDhcpRelayAgentL2AdminState, wwpLeosDhcpRelayAgentL3StateTable=wwpLeosDhcpRelayAgentL3StateTable, wwpLeosDhcpRelayAgentInterfaceIpTable=wwpLeosDhcpRelayAgentInterfaceIpTable, wwpLeosDhcpRelayAgentL3RowStatus=wwpLeosDhcpRelayAgentL3RowStatus, wwpLeosDhcpRelayAgentInterfaceIpRowStatus=wwpLeosDhcpRelayAgentInterfaceIpRowStatus, wwpLeosDhcpRelayAgentL2Option82Removed=wwpLeosDhcpRelayAgentL2Option82Removed, wwpLeosDhcpRelayAgentPort=wwpLeosDhcpRelayAgentPort, wwpLeosDhcpRelayAgentTrustEntry=wwpLeosDhcpRelayAgentTrustEntry, wwpLeosDhcpRelayAgentCidStringRowStatus=wwpLeosDhcpRelayAgentCidStringRowStatus, wwpLeosDhcpRelayAgentL2RowStatus=wwpLeosDhcpRelayAgentL2RowStatus, wwpLeosDhcpClientMIB=wwpLeosDhcpClientMIB, wwpLeosDhcpRelayAgentInterfaceIpEntry=wwpLeosDhcpRelayAgentInterfaceIpEntry, wwpLeosDhcpRelayAgentL2StatsEntry=wwpLeosDhcpRelayAgentL2StatsEntry, wwpLeosDhcpRelayAgentL3OperState=wwpLeosDhcpRelayAgentL3OperState, wwpLeosDhcpClientMIBObjects=wwpLeosDhcpClientMIBObjects, wwpLeosDhcpOptionDesc=wwpLeosDhcpOptionDesc, wwpLeosDhcpClientMIBNotifications=wwpLeosDhcpClientMIBNotifications, wwpLeosDhcpRelayAgentL2IpSecHeaders=wwpLeosDhcpRelayAgentL2IpSecHeaders, wwpLeosDhcpLeaseRemaining=wwpLeosDhcpLeaseRemaining, wwpLeosDhcpRelayAgentL2StatsTable=wwpLeosDhcpRelayAgentL2StatsTable, wwpLeosDhcpClientOptionTable=wwpLeosDhcpClientOptionTable, wwpLeosDhcpRelayAgentL3State=wwpLeosDhcpRelayAgentL3State, wwpLeosDhcpRelayAgentL3AdminState=wwpLeosDhcpRelayAgentL3AdminState, wwpLeosDhcpRelayAgentL3StateEntry=wwpLeosDhcpRelayAgentL3StateEntry, wwpLeosDhcpRelayAgentTrustMode=wwpLeosDhcpRelayAgentTrustMode, wwpLeosDhcpLeaseOffered=wwpLeosDhcpLeaseOffered, wwpLeosDhcpDiscoveryMsgInterval=wwpLeosDhcpDiscoveryMsgInterval, wwpLeosDhcpClientMIBGroups=wwpLeosDhcpClientMIBGroups, wwpLeosDhcpRelayAgentRemoteId=wwpLeosDhcpRelayAgentRemoteId, PYSNMP_MODULE_ID=wwpLeosDhcpClientMIB, wwpLeosDhcpClientOptionDisabledNotification=wwpLeosDhcpClientOptionDisabledNotification)
