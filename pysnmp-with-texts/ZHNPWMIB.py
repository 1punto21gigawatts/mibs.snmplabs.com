#
# PySNMP MIB module ZHNPWMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNPWMIB
# Produced by pysmi-0.3.4 at Wed May  1 15:46:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
IANAPwCapabilities, IANAPwPsnTypeTC, IANAPwTypeTC = mibBuilder.importSymbols("IANA-PWE3-MIB", "IANAPwCapabilities", "IANAPwPsnTypeTC", "IANAPwTypeTC")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
PwIndexOrZeroType, PwIndexType, PwVlanCfg = mibBuilder.importSymbols("PW-TC-STD-MIB", "PwIndexOrZeroType", "PwIndexType", "PwVlanCfg")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
transmission, IpAddress, iso, NotificationType, Gauge32, Unsigned32, ModuleIdentity, Counter64, TimeTicks, MibIdentifier, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "transmission", "IpAddress", "iso", "NotificationType", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter64", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32")
TextualConvention, DisplayString, TruthValue, TimeStamp, RowStatus, StorageType, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp", "RowStatus", "StorageType", "MacAddress")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
zhnPwMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31))
zhnPwMib.setRevisions(('2012-05-16 12:00', '2012-01-27 12:00', '2011-08-29 00:00', '2008-11-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhnPwMib.setRevisionsDescriptions(('Removed comma in the end of the last line of the enum definitions.', 'Added new PWE table objects: zhnPwClkAcquisitionLevel zhnPwClearTotalStats ', 'Added new PWE table objects: zhnPwActualPayloadSize zhnPwRxRaiAction zhnPwRxAisAction zhnPwLopAction zhnPwAdaptState zhnPwAdaptTime zhnPwIsdn zhnPwOuterLabel And, added new PWE scalar objects: zhnPwRtpHeaderMode zhnPwAdaptPllMode zhnPwAutoAdclEnable zhnPwAdaptSourceActual zhnPwSourceIPAddr zhnPwSourceIPMask zhnPwSourceGateway zhnPwUdpDstPort zhnPwT1E1Mode zhnPeerPingName zhnPeerPingRequest zhnPeerPingStatus ', 'Initial release.',))
if mibBuilder.loadTexts: zhnPwMib.setLastUpdated('201205161200Z')
if mibBuilder.loadTexts: zhnPwMib.setOrganization('Zhone Technologies')
if mibBuilder.loadTexts: zhnPwMib.setContactInfo('Zhone Technologies, Inc. Florida Design Center 8545 126th Avenue North Largo, FL 33773 Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhnPwMib.setDescription('This is the Zhone Enterprise MIB module for the Configuration of Zhone Proprietary Pseudo-Wire Interfaces.')
class PwClearStatisticsTC(TextualConvention, Integer32):
    description = 'Indicates the action to perform on statistics counters. - noAction(0): No action. - clear(1): Clear the statistics counters. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noAction", 0), ("clear", 1))

zhnPwNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 0))
zhnPwObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1))
zhnPwConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 2))
zhnPwTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1), )
if mibBuilder.loadTexts: zhnPwTable.setStatus('current')
if mibBuilder.loadTexts: zhnPwTable.setDescription('This table contains the Zhone Proprietary Pseudo-Wire interface information.')
zhnPwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1), ).setIndexNames((0, "ZHNPWMIB", "zhnPwIndex"))
if mibBuilder.loadTexts: zhnPwEntry.setStatus('current')
if mibBuilder.loadTexts: zhnPwEntry.setDescription('A row in this table represents a pseudowire (PW) virtual connection across a packet network. It is indexed by pwIndex, which uniquely identifies a singular connection. A row is only created when an entry in the PW-STD-MIB pwTable is created and includes adjunct information to the pwTable.')
zhnPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 1), PwIndexType())
if mibBuilder.loadTexts: zhnPwIndex.setStatus('current')
if mibBuilder.loadTexts: zhnPwIndex.setDescription('A unique index for the conceptual row identifying a PW within this table.')
zhnPwVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 2), PwVlanCfg()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnPwVlanID.setStatus('current')
if mibBuilder.loadTexts: zhnPwVlanID.setDescription('The VLAN ID which this PW is mapped to. If the value is zero, the VLAN is untagged. ')
zhnPwVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnPwVlanPriority.setStatus('current')
if mibBuilder.loadTexts: zhnPwVlanPriority.setDescription('The VLAN priority.')
zhnPwPeerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnPwPeerMask.setStatus('current')
if mibBuilder.loadTexts: zhnPwPeerMask.setDescription('This object contains the subnet mask for the peer. This object is required if the Peer Type is IPv4.')
zhnPwPeerGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnPwPeerGateway.setStatus('current')
if mibBuilder.loadTexts: zhnPwPeerGateway.setDescription('This object contains the gateway address for the peer. This object is required if the Peer Type is IPv4.')
zhnPwPeerMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnPwPeerMAC.setStatus('current')
if mibBuilder.loadTexts: zhnPwPeerMAC.setDescription('This object contains the MAC address for the peer.')
zhnPwMappedIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnPwMappedIfName.setStatus('current')
if mibBuilder.loadTexts: zhnPwMappedIfName.setDescription('The name of the interface mapped to this PW. If the PW is a structure-agnostic (i.e. SATOP) connection, the interface name should be that of a T1/E1 port. It the PW is a structure-aware connection, the interface name should be that of a DS0 Bundle.')
zhnPwLocalLMBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noDefect", 0), ("reserved1", 1), ("rxRDI", 2), ("nonTDMData", 3), ("txAIS", 4), ("reserved2", 5), ("reserved3", 6), ("reserved4", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwLocalLMBits.setStatus('current')
if mibBuilder.loadTexts: zhnPwLocalLMBits.setDescription('Indicates the value of the Local TDM Failure (L-Bit) and the Modifier bits (M-bits) currently transmitted. Refer to RFC 5086 for more information on the L/M bits.')
zhnPwLocalRBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwLocalRBit.setStatus('current')
if mibBuilder.loadTexts: zhnPwLocalRBit.setDescription('Indicates the value of the Remote Loss of Frames indication (R-Bit) currently transmitted.')
zhnPwRemoteLMBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noDefect", 0), ("reserved1", 1), ("rxRDI", 2), ("nonTDMData", 3), ("txAIS", 4), ("reserved2", 5), ("reserved3", 6), ("reserved4", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwRemoteLMBits.setStatus('current')
if mibBuilder.loadTexts: zhnPwRemoteLMBits.setDescription('Indicates the value of the Local Failure (L-Bit) and the Modifier bits (M-bits) currently received. Refer to RFC 5086 for more information on the L/M bits.')
zhnPwRemoteRBit = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwRemoteRBit.setStatus('current')
if mibBuilder.loadTexts: zhnPwRemoteRBit.setDescription('Indicates the value of the Remote Loss of Frames indication (R-Bit) currently received.')
zhnPwPeerMACMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwPeerMACMode.setStatus('current')
if mibBuilder.loadTexts: zhnPwPeerMACMode.setDescription('Setting this object to dynamic(1) will cause PW to ARP for the MAC address of the peer node. If the value of this object is static(2), the peer MAC address is the value of object pwPeerMAC.')
zhnPwActualPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwActualPayloadSize.setStatus('current')
if mibBuilder.loadTexts: zhnPwActualPayloadSize.setDescription('The value of this object indicates the actual PayLoad Size (in bytes).')
zhnPwRxRaiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("txAIS", 2), ("txRAI", 3), ("txChlIdle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwRxRaiAction.setStatus('current')
if mibBuilder.loadTexts: zhnPwRxRaiAction.setDescription('Indicates the action to be taken upon when receiving L,M bits equal to 0,10 (rxRAI). When set to none (1), the payload will be transmitted as it was received. When set to txAIS (2), the AIS pattern will be transmitted towards the local CE. When set to txRAI (3), the RAI pattern will be transmitted towards the local CE. When set to txChlIdle (4), the Channel Idle signal will be transmitted towards the local CE.')
zhnPwRxAisAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("txAIS", 2), ("txRAI", 3), ("txChlIdle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwRxAisAction.setStatus('current')
if mibBuilder.loadTexts: zhnPwRxAisAction.setDescription('Indicates the action to be taken upon when receiving L,M bits equal to 1,00 (rxAIS). When set to none (1), the payload will be transmitted as it was received. When set to txAIS (2), the AIS pattern will be transmitted towards the local CE. When set to txRAI (3), the RAI pattern will be transmitted towards the local CE. When set to txChlIdle (4), the Channel Idle signal will be transmitted towards the local CE. ')
zhnPwLopAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("txAIS", 2), ("txRAI", 3), ("txChlIdle", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwLopAction.setStatus('current')
if mibBuilder.loadTexts: zhnPwLopAction.setDescription('Indicates the action to be taken while in a Loss or Packets state. When set to none (1), the payload will be transmitted as it was received. When set to txAIS (2), the AIS pattern will be transmitted towards the local CE. When set to txRAI (3), the RAI pattern will be transmitted towards the local CE. When set to txChlIdle (4), the Channel Idle signal will be transmitted towards the local CE.')
zhnPwAdaptState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("acquisition", 2), ("tracking1", 3), ("tracking2", 4), ("locked", 5), ("recovery", 6), ("restart", 7), ("disabled", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwAdaptState.setStatus('current')
if mibBuilder.loadTexts: zhnPwAdaptState.setDescription('Indicates the current adaptive state. The only value that can be written for this object is restart (7), which will restart clock adaption on the port associated with the bundle.')
zhnPwAdaptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwAdaptTime.setStatus('current')
if mibBuilder.loadTexts: zhnPwAdaptTime.setDescription('Indicates the current adaptive timestamp.')
zhnPwIsdn = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("lt", 2), ("nt1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwIsdn.setStatus('current')
if mibBuilder.loadTexts: zhnPwIsdn.setDescription('Indicates the endpoint is of IDSN type as defined in ETS 300 233. When Idsn type is set to disabled (1), the payload is transmitted as it was received. When set to lt (2), the Line Termination unit is connected to the Terminal Equipment. When set to nt1 (3), the Network Termination unit connected to the Exchange Equipment.')
zhnPwOuterLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwOuterLabel.setStatus('current')
if mibBuilder.loadTexts: zhnPwOuterLabel.setDescription('The value of this object is the MPLS 20-bit outer tag. This object is only applicable for MPLS PW connections.')
zhnPwClkAcquisitionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwClkAcquisitionLevel.setStatus('current')
if mibBuilder.loadTexts: zhnPwClkAcquisitionLevel.setDescription('The PLL clock acquisition level from 0 - 15. Level 8 or higher is required for reliable operation. During the clock acquisition process, the Phase Lock Loop moves through 16 adjustment levels. Level 0 is the starting phase, with very coarse adjustments. Level 15 is the final phase, with very fine adjustment. Once level 8 has been reached, the acquired clock is highly accurate. This object is also referred to as the PWE Adaptive Clock Counter.')
zhnPwClearTotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 1, 1, 22), PwClearStatisticsTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwClearTotalStats.setStatus('current')
if mibBuilder.loadTexts: zhnPwClearTotalStats.setDescription('This object can be used to clear all PWE total statistics counters, contained in the pwPerfTotalTable and defined in the PW-STD mib.')
zhnPwRtpHeaderMode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwRtpHeaderMode.setStatus('current')
if mibBuilder.loadTexts: zhnPwRtpHeaderMode.setDescription('Enable or disable the transmission of a RTP header mode for all Pseudo-wire connections. Note, the configuration must be saved and the system rebooted for this item to take effect.')
zhnPwAdaptPllMode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("fine", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwAdaptPllMode.setStatus('current')
if mibBuilder.loadTexts: zhnPwAdaptPllMode.setDescription('Configure the accuracy of the recovered clock for all Pseudo-wire connections. Note, configuration must be saved and system rebooted for this item to take effect. When set to normal(1), the system will support reliable timing recovery in networks with occasional packet delay variation and packet loss. This is the recommended mode of operation. When set to fine(2), the accuracy of the recovered clock will be slightly higher than normal(1) mode, but during the clock recovery phase the network must be stable and predictable and requires pristine network conditions during timing acquisition.')
zhnPwAutoAdclEnable = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwAutoAdclEnable.setStatus('current')
if mibBuilder.loadTexts: zhnPwAutoAdclEnable.setDescription('Enable or disable the ability to automatically select the first available Pseudo Wire connection to use for adaptive clock recovery.')
zhnPwAdaptSourceActual = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnPwAdaptSourceActual.setStatus('current')
if mibBuilder.loadTexts: zhnPwAdaptSourceActual.setDescription('The actual Pseudo Wire connection in use for adaptive clock recovery if automatic adaptive is disabled.')
zhnPwSourceIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwSourceIPAddr.setStatus('current')
if mibBuilder.loadTexts: zhnPwSourceIPAddr.setDescription('This object contains the IP address for all local Pseudo Wire connections.')
zhnPwSourceIPMask = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwSourceIPMask.setStatus('current')
if mibBuilder.loadTexts: zhnPwSourceIPMask.setDescription('This object contains the subnet mask for all local Pseudo Wire connections.')
zhnPwSourceGateway = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwSourceGateway.setStatus('current')
if mibBuilder.loadTexts: zhnPwSourceGateway.setDescription('This object contains the gateway address for all local Pseudo Wire connections.')
zhnPwUdpDstPort = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: zhnPwUdpDstPort.setDescription('This object contains the UDP port used by the peer.')
zhnPwT1E1Mode = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPwT1E1Mode.setStatus('current')
if mibBuilder.loadTexts: zhnPwT1E1Mode.setDescription('This object identifies the DS1 mode of operation for all DS1 ports in the system.')
zhnPeerPingName = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 11), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPeerPingName.setStatus('current')
if mibBuilder.loadTexts: zhnPeerPingName.setDescription('This object identifies the name of the peer Pseudo Wire connection with which to initiate a ping test.')
zhnPeerPingRequest = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("nop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPeerPingRequest.setStatus('current')
if mibBuilder.loadTexts: zhnPeerPingRequest.setDescription('This object starts or stops a Pseudo Wire ping test. A valid zhnPeerPingName must be configured for the ping test to be successful.')
zhnPeerPingStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reply", 1), ("timedout", 2), ("none", 3), ("unconfigured", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnPeerPingStatus.setStatus('current')
if mibBuilder.loadTexts: zhnPeerPingStatus.setDescription('This object retrieves the status of the current or last Pseudo Wire ping test initiated by the CPE.')
zhnPwMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 2))
zhnPwMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 2, 1))
zhnPwMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 2, 2))
zhnPwMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 2, 2, 1)).setObjects(("ZHNPWMIB", "zhnPwMibGroup"), ("ZHNPWMIB", "zhnPwMibScalars"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnPwMibCompliance = zhnPwMibCompliance.setStatus('current')
if mibBuilder.loadTexts: zhnPwMibCompliance.setDescription('The Compliance statement for SNMP entities which manage display the Zhone Pseudo-Wire Information. ')
zhnPwMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 2, 1, 1)).setObjects(("ZHNPWMIB", "zhnPwVlanID"), ("ZHNPWMIB", "zhnPwVlanPriority"), ("ZHNPWMIB", "zhnPwPeerMask"), ("ZHNPWMIB", "zhnPwPeerGateway"), ("ZHNPWMIB", "zhnPwPeerMAC"), ("ZHNPWMIB", "zhnPwMappedIfName"), ("ZHNPWMIB", "zhnPwLocalLMBits"), ("ZHNPWMIB", "zhnPwLocalRBit"), ("ZHNPWMIB", "zhnPwRemoteLMBits"), ("ZHNPWMIB", "zhnPwRemoteRBit"), ("ZHNPWMIB", "zhnPwPeerMACMode"), ("ZHNPWMIB", "zhnPwActualPayloadSize"), ("ZHNPWMIB", "zhnPwRxRaiAction"), ("ZHNPWMIB", "zhnPwRxAisAction"), ("ZHNPWMIB", "zhnPwLopAction"), ("ZHNPWMIB", "zhnPwAdaptState"), ("ZHNPWMIB", "zhnPwAdaptTime"), ("ZHNPWMIB", "zhnPwIsdn"), ("ZHNPWMIB", "zhnPwOuterLabel"), ("ZHNPWMIB", "zhnPwClkAcquisitionLevel"), ("ZHNPWMIB", "zhnPwClearTotalStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnPwMibGroup = zhnPwMibGroup.setStatus('current')
if mibBuilder.loadTexts: zhnPwMibGroup.setDescription('A collection of Zhone Pseudo-Wire table objects that describe the pseudo-wire interfaces of the device.')
zhnPwMibScalars = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 31, 2, 1, 2)).setObjects(("ZHNPWMIB", "zhnPwRtpHeaderMode"), ("ZHNPWMIB", "zhnPwAdaptPllMode"), ("ZHNPWMIB", "zhnPwAutoAdclEnable"), ("ZHNPWMIB", "zhnPwAdaptSourceActual"), ("ZHNPWMIB", "zhnPwSourceIPAddr"), ("ZHNPWMIB", "zhnPwSourceIPMask"), ("ZHNPWMIB", "zhnPwSourceGateway"), ("ZHNPWMIB", "zhnPwUdpDstPort"), ("ZHNPWMIB", "zhnPwT1E1Mode"), ("ZHNPWMIB", "zhnPeerPingName"), ("ZHNPWMIB", "zhnPeerPingRequest"), ("ZHNPWMIB", "zhnPeerPingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnPwMibScalars = zhnPwMibScalars.setStatus('current')
if mibBuilder.loadTexts: zhnPwMibScalars.setDescription('A collection of Zhone Pseudo-Wire table scalar objects that describe the pseudo-wire emulation of the device.')
mibBuilder.exportSymbols("ZHNPWMIB", PYSNMP_MODULE_ID=zhnPwMib, zhnPwMib=zhnPwMib, zhnPwMibConformance=zhnPwMibConformance, zhnPwRtpHeaderMode=zhnPwRtpHeaderMode, zhnPeerPingName=zhnPeerPingName, zhnPwPeerMAC=zhnPwPeerMAC, zhnPwLopAction=zhnPwLopAction, zhnPwAdaptState=zhnPwAdaptState, zhnPwClkAcquisitionLevel=zhnPwClkAcquisitionLevel, zhnPwLocalLMBits=zhnPwLocalLMBits, zhnPwMibScalars=zhnPwMibScalars, zhnPwRxRaiAction=zhnPwRxRaiAction, zhnPwIsdn=zhnPwIsdn, zhnPwUdpDstPort=zhnPwUdpDstPort, zhnPwVlanPriority=zhnPwVlanPriority, zhnPwMibCompliances=zhnPwMibCompliances, zhnPwAdaptTime=zhnPwAdaptTime, zhnPwRemoteRBit=zhnPwRemoteRBit, zhnPwEntry=zhnPwEntry, PwClearStatisticsTC=PwClearStatisticsTC, zhnPwVlanID=zhnPwVlanID, zhnPwMappedIfName=zhnPwMappedIfName, zhnPwIndex=zhnPwIndex, zhnPwSourceIPMask=zhnPwSourceIPMask, zhnPwPeerMask=zhnPwPeerMask, zhnPwRemoteLMBits=zhnPwRemoteLMBits, zhnPwSourceIPAddr=zhnPwSourceIPAddr, zhnPwAdaptPllMode=zhnPwAdaptPllMode, zhnPwRxAisAction=zhnPwRxAisAction, zhnPwMibCompliance=zhnPwMibCompliance, zhnPwAutoAdclEnable=zhnPwAutoAdclEnable, zhnPwTable=zhnPwTable, zhnPeerPingStatus=zhnPeerPingStatus, zhnPwAdaptSourceActual=zhnPwAdaptSourceActual, zhnPwNotifications=zhnPwNotifications, zhnPwPeerGateway=zhnPwPeerGateway, zhnPwT1E1Mode=zhnPwT1E1Mode, zhnPwSourceGateway=zhnPwSourceGateway, zhnPwActualPayloadSize=zhnPwActualPayloadSize, zhnPwConformance=zhnPwConformance, zhnPwMibGroup=zhnPwMibGroup, zhnPwClearTotalStats=zhnPwClearTotalStats, zhnPwMibGroups=zhnPwMibGroups, zhnPeerPingRequest=zhnPeerPingRequest, zhnPwLocalRBit=zhnPwLocalRBit, zhnPwPeerMACMode=zhnPwPeerMACMode, zhnPwObjects=zhnPwObjects, zhnPwOuterLabel=zhnPwOuterLabel)
