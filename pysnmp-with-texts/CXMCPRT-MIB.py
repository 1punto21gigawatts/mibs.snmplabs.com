#
# PySNMP MIB module CXMCPRT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXMCPRT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
cxMc600, = mibBuilder.importSymbols("CXProduct-SMI", "cxMc600")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, Counter64, MibIdentifier, iso, Unsigned32, NotificationType, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Counter64", "MibIdentifier", "iso", "Unsigned32", "NotificationType", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "ObjectIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxMcPrt = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1))
cxMcPrtGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1))
cxMcPrtGlobalConsoleRate = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 19200)).clone(19200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtGlobalConsoleRate.setStatus('optional')
if mibBuilder.loadTexts: cxMcPrtGlobalConsoleRate.setDescription('The front panel console rate for the HC600. Range of Values: 300-19 200 Default Value: 19 200')
cxMcPrtGlobalResetStat = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtGlobalResetStat.setStatus('optional')
if mibBuilder.loadTexts: cxMcPrtGlobalResetStat.setDescription('Resets all statistics. Options: no(1) yes (2) Default Value: no (1)')
cxMcPrtGlobalStationId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12)).clone('           ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtGlobalStationId.setStatus('optional')
if mibBuilder.loadTexts: cxMcPrtGlobalStationId.setDescription('The local station identification. No space allowed in write.')
cxMcPrtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cxMcPrtCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCfgTable.setDescription('cx Port Station Configuration Table.')
cxMcPrtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtCfgPortIndex"))
if mibBuilder.loadTexts: cxMcPrtCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCfgEntry.setDescription('cx Port Station Configuration Entry gives the state of the configuration associated to a particular port.')
cxMcPrtCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCfgPortIndex.setDescription('Identifies the port by a numerical value. Range of Values: 1-4')
cxMcPrtCfgDriverUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCfgDriverUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCfgDriverUsed.setDescription('Specifies the port driver used. The driver is associated with a numerical value that identify one of the tables below the object identifier; cxMcPrtDriver for MC600, or cxMcPrtDriver for HC600 driver. Note that HC600 has only one driver. Options: bop(1): MC600 or HC600 asy(2): MC600 only cop(3): MC600 only bsy(4): MC600 only ')
cxMcPrtCfgReinitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCfgReinitPort.setStatus('optional')
if mibBuilder.loadTexts: cxMcPrtCfgReinitPort.setDescription('Activate the planned configurations of the indexed port. Options: no (1) yes (2)')
cxMcPrtCfgUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtCfgUpdated.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCfgUpdated.setDescription('The status of the configuration of a port. Options: no (1) yes (2)')
cxMcPrtStatTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3), )
if mibBuilder.loadTexts: cxMcPrtStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatTable.setDescription('cx Port Station Statistic Table.')
cxMcPrtStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtStatPortNumber"))
if mibBuilder.loadTexts: cxMcPrtStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatEntry.setDescription('cx Port Station Statistic Entry gives the state of the counters associated with a particular port.')
cxMcPrtStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatPortNumber.setDescription('Indicates the port number of the statistics. Range of Values: 1-4')
cxMcPrtStatRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatRts.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatRts.setDescription('Indicates the current state of the Request to Send signal. Options: off (1) on (2)')
cxMcPrtStatDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatDtr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatDtr.setDescription('Indicates the current state of the Data Terminal Ready signal. Options: off (1) on (2)')
cxMcPrtStatDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatDsr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatDsr.setDescription('Indicates the current state of the Data Set Ready signal. Options: off (1) on (2)')
cxMcPrtStatDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatDcd.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatDcd.setDescription('Indicates the current state of the Data Carrier Detect signal. Options: off (1) on (2)')
cxMcPrtStatCts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCts.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCts.setDescription('Indicates the current state of the Clear to Send signal. Options: off (1) on (2)')
cxMcPrtStatCntMsgTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntMsgTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntMsgTx.setDescription('Indicates the number of frames transmitted on the specified port.')
cxMcPrtStatCntMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntMsgRx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntMsgRx.setDescription('Indicates the number of frames received on the specified port.')
cxMcPrtStatCntReinit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntReinit.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntReinit.setDescription('Indicates the number of times that the specified port has reinitialized.')
cxMcPrtStatCntFlowCtrlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntFlowCtrlTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntFlowCtrlTx.setDescription('Indicates the number of times that the specified port has performed output flow control.')
cxMcPrtStatCntFlowCtrlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntFlowCtrlRx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntFlowCtrlRx.setDescription('Indicates the number of times that the specified port has performed input flow control.')
cxMcPrtStatCntErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntErrTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntErrTx.setDescription('Indicates the number of bad frames transmitted on the specified port.')
cxMcPrtStatCntErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntErrRx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntErrRx.setDescription('Indicates the number of bad frames received on the specified port.')
cxMcPrtStatCntConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntConnect.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntConnect.setDescription('Indicates the number of connections for the specified port. The number of connections is equal to the number of times that the DTR modem signal changed from OFF to ON.')
cxMcPrtStatCntChrDecomp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntChrDecomp.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntChrDecomp.setDescription('Indicates the number of characters transmitted on the port.')
cxMcPrtStatCntChrComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntChrComp.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntChrComp.setDescription('Indicates the number of characters received on the port.')
cxMcPrtStatCntBitDecomp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntBitDecomp.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntBitDecomp.setDescription('Indicates the number of bits transmitted on the port.')
cxMcPrtStatCntBitComp = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatCntBitComp.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatCntBitComp.setDescription('Indicates the number of bits received on the port.')
cxMcPrtStatStation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatStation.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatStation.setDescription('Indicates the station that the port is using to transmit and receive data.')
cxMcPrtStatRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatRoute.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatRoute.setDescription('Indicates the route of the station that the port is using.')
cxMcPrtStatHwInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatHwInterface.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatHwInterface.setDescription('Indicates whether the hardware port interface is DCE or DTE. The value depends on the I/O hardware. Options: dce (1) dte (2)')
cxMcPrtStatTimeTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 3, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtStatTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtStatTimeTicks.setDescription('Indicates the number of milliseconds since the last reset for the current station.')
cxMcPrtPath = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4))
cxMcPrtPathStationPri = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathStationPri.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtPathStationPri.setDescription('The primary port station. Range of Values: 1-16 Default Value: 1')
cxMcPrtPathRoutePri = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathRoutePri.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtPathRoutePri.setDescription('The primary route. Range of Values: 1-64 Default Value: 1')
cxMcPrtPathStationScd = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathStationScd.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtPathStationScd.setDescription('The secondary port station. Range of Values: 1-16 Default Value: 2')
cxMcPrtPathRouteScd = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtPathRouteScd.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtPathRouteScd.setDescription('The secondary route. Range of Values: 1-64 Default Value: 2')
cxMcPrtDriver = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5))
cxMcPrtBopTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: cxMcPrtBopTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopTable.setDescription('cx Port Station MC600 & HC600 Bop Driver Table.')
cxMcPrtBopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtBopPortUsed"))
if mibBuilder.loadTexts: cxMcPrtBopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopEntry.setDescription('cx Port Station MC600 & HC600 Bop Driver Entry gives the state of the variables associated to the Bit Oriented Protocol.')
cxMcPrtBopPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtBopPortUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopPortUsed.setDescription('Indicates the current port number that is used by the BOP driver. Range of Values: 1-4')
cxMcPrtBopPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopPortStatus.setDescription('Indicates whether the port is enabled or disabled. Options: disable (1) enable (2) Default Value: disable (1)')
cxMcPrtBopComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopComRate.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopComRate.setDescription('Indicates the port communication rates. Range of Values: HC600: 9600-2048000 MC600: 110-128000 Default Value: HC600: 56 000, MC600: 9600')
cxMcPrtBopUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseLnkErrPassthro.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseLnkErrPassthro.setDescription('Indicates the link error passthrough state on the port. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtBopInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopInterface.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopInterface.setDescription('Indicates whether the port interface is DTE or DCE. Options: dce (1) dte (2) Default Value: dce (1)')
cxMcPrtBopRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopRtsDcdModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopRtsDcdModemCtrl.setDescription('Use the RTS or DCD modem control on the port. Options: on (1) vary (2) Default Value: on (1)')
cxMcPrtBopUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndDataTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndDataTx.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the presence of data in output queue. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtBopUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndLnk.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the main link status. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtBopUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseRtsDcdCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtBopDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopDtrCtsModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopDtrCtsModemCtrl.setDescription('Use the DTR or CTS modem control on the port. Options: on (1) vary (2) Default Value: on (1)')
cxMcPrtBopUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndRts.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndRts.setDescription('Use the state of the CTS modem control when the port selected is conditioned by the local RTS. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtBopUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndLnk.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the main link status. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtBopUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseDtrCtsCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtBopLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopLimitBeforeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopLimitBeforeOut.setDescription('The limit before activation of output for the port. Range of Values: HC600: 2-100, MC600: 5-4000 Default Value: HC600: 5, MC600: 15')
cxMcPrtBopUseOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseOutCndCtsDtrOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseOutCndCtsDtrOn.setDescription('Use the output enable on CTS or DTR modem control for the port. Options: no(1) yes (2) Default Value: no (1)')
cxMcPrtBopUseInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseInCndDcdRtsOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseInCndDcdRtsOn.setDescription('Use the input enable on DCD or RTS modem control for the port. Options: no(1) yes (2) Default Value: no (1)')
cxMcPrtBopSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopSyncMode.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopSyncMode.setDescription('The clock synchronization for the port. Options: normal (1) extern (2) Default Value: normal (1)')
cxMcPrtBopDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopDataLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopDataLifetime.setDescription('The data lifetime in millisecond for the port. Range of Values: 1-60000 Default Value: 2000')
cxMcPrtBopUseClockSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseClockSync.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseClockSync.setDescription('The clocks synchronization on the port. Options: no(1) yes (2) Default Value: no (1)')
cxMcPrtBopUseFlowCtrlClock = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopUseFlowCtrlClock.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopUseFlowCtrlClock.setDescription('Use the flow control by clocks for the synchronous port. Options: no(1) yes (2) Default Value: yes (2)')
cxMcPrtBopFlowCtrlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopFlowCtrlRate.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopFlowCtrlRate.setDescription('The flow control rate of the synchronous port. Range of Values: HC600: 300-5609, MC600: 110-9600 Default Value: HC600: 2400. MC600: 300 HC600 DEFVAL { 2400 } MC600 DEFVAL { 300 }')
cxMcPrtBopLimitOutFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopLimitOutFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopLimitOutFlowCtrl.setDescription('The limit before output flow control of the synchronous port. Range of Values: HC600: 1-100, MC600: 0-4000 Default Value: HC600: 15, MC600: 3 ')
cxMcPrtBopLimitInFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopLimitInFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopLimitInFlowCtrl.setDescription('The overflow limit before input flow control of the synchronous port. Ranges of Values: HC600: 1-100, MC600: 0-4000 Default Value: HC600: 32, MC600: 512')
cxMcPrtBopCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi", 2))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopCoding.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopCoding.setDescription('The coding on the port for bit-oriented protocols. Options: nrz (1) nrzi (2) Default Value: nrz (1)')
cxMcPrtBopOutIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flag", 1), ("mark", 2))).clone('flag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopOutIdleState.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopOutIdleState.setDescription('The output idle state of the synchronous port. Options: flag (1) mark (2) Default Value: flag (1)')
cxMcPrtBopDelayBeforeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopDelayBeforeIdle.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopDelayBeforeIdle.setDescription('The delay between frames before idle for the port. Range of Values: 0-2000 Default Value: 0')
cxMcPrtBopOutPreambleLng = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBopOutPreambleLng.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBopOutPreambleLng.setDescription('The output preamble length of the synchronous port. Options: zero (1): HC600 or MC600 one (2): HC600 only two (3): HC600 only four (4): HC600 only eight (5): HC600 only Default Value: zero (1)')
cxMcPrtAsyTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2), )
if mibBuilder.loadTexts: cxMcPrtAsyTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyTable.setDescription('cx Port Station MC600 Asy Driver Table.')
cxMcPrtAsyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtAsyPortUsed"))
if mibBuilder.loadTexts: cxMcPrtAsyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyEntry.setDescription('cx Port Station MC600 Asy Driver Entry gives the state of the variables associated to the Asynchronous Protocol.')
cxMcPrtAsyPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtAsyPortUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyPortUsed.setDescription('The current port number that is used by the ASY driver.')
cxMcPrtAsyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyPortStatus.setDescription('The port status for enabling or disabling the port. Options: disable (1) enable (2) Default Value: disable (1)')
cxMcPrtAsyComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 128000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyComRate.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyComRate.setDescription('The port communication rates. Range of Values: 110-128000 Default Value: 9600')
cxMcPrtAsyUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseLnkErrPassthro.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseLnkErrPassthro.setDescription('Use the link error pass through on the port. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtAsyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyInterface.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyInterface.setDescription('The port interface to DTE or DCE. Options: dce (1) dte (2) Default Value: dce (1)')
cxMcPrtAsyRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyRtsDcdModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyRtsDcdModemCtrl.setDescription('Use the RTS or DCD modem control on the port. Options: on (1) vary (2) Default Value: on (1)')
cxMcPrtAsyUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndDataTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndDataTx.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the presence of data in output queue. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtAsyUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndLnk.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the main link status. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtAsyUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseRtsDcdCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtAsyDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyDtrCtsModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyDtrCtsModemCtrl.setDescription('Use the DTR or CTS modem control on the port. Options: on (1) vary (2) Default Value: on (1)')
cxMcPrtAsyUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndRts.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndRts.setDescription('Use the state of the CTS modem control when the port selected is conditioned by the local RTS. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtAsyUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndLnk.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the main link status. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtAsyUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseDtrCtsCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtAsyLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyLimitBeforeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyLimitBeforeOut.setDescription('The limit before activation of output for the port. Range of Values: 1-100 Default Value: 15')
cxMcPrtAsyOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyOutCndCtsDtrOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyOutCndCtsDtrOn.setDescription('Use the output enable on CTS or DTR modem control for the port. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtAsyInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyInCndDcdRtsOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyInCndDcdRtsOn.setDescription('Use the input enable on DCD or RTS modem control for the port. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtAsySyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsySyncMode.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsySyncMode.setDescription('The clock synchronization for the port. Options: normal (1) extern (2) Default Value: normal (1)')
cxMcPrtAsyUseDataLifeLimited = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseDataLifeLimited.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseDataLifeLimited.setDescription('Use the data lifetime limited on the asynchronous port. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtAsyDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyDataLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyDataLifetime.setDescription('The data lifetime in milliseconds for the port. Range of Values: 1-60000 Default Value: 2000')
cxMcPrtAsyOutFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("xonxoff", 2), ("ctsdtr", 3))).clone('xonxoff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyOutFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyOutFlowCtrl.setDescription('The output flow control of the asynchronous port. Options: disable (1) xonxoff (2) ctsdtr (3) Default Value: xonxoff (2)')
cxMcPrtAsyInFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("xonxoff", 2), ("ctsdtr", 3))).clone('xonxoff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyInFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyInFlowCtrl.setDescription('The input flow control of the asynchronous port. Options: disable (1) xonxoff (2) ctsdtr (3) Default Value: xonxoff (2)')
cxMcPrtAsyXonChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyXonChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyXonChr.setDescription('The XON character value of the asynchronous port. Range of Values: 0-255 Default Value: 17 ')
cxMcPrtAsyXoffChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyXoffChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyXoffChr.setDescription('The XOFF character value of the asynchronous port. Range of Values: 0-255 Default Value: 19')
cxMcPrtAsyNbBitPerChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("six", 1), ("seven", 2), ("eight", 3))).clone('eight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyNbBitPerChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyNbBitPerChr.setDescription('The number of bits per character on the port. Options: six (1) seven (2) eight (3) Default Value: eight (3)')
cxMcPrtAsyParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyParity.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyParity.setDescription('The parity on the port. Options: none (1) even (2) odd (3) Default Value: none (1)')
cxMcPrtAsyNbStopBit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("onehalf", 2), ("two", 3))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyNbStopBit.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyNbStopBit.setDescription('The number of stop bits per character on the asynchronous port. Options: one (1) onehalf (2) two (3) Default Value: one (1)')
cxMcPrtAsyUseFlushOutChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyUseFlushOutChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyUseFlushOutChr.setDescription('The flush output on specific character on the asynchronous port. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtAsyFlushOutChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtAsyFlushOutChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtAsyFlushOutChr.setDescription('The flush character on the asynchronous port. Range of Values: 0-255 Default Value: 127')
cxMcPrtCopTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3), )
if mibBuilder.loadTexts: cxMcPrtCopTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopTable.setDescription('cx Port Station MC600 Cop Driver Table.')
cxMcPrtCopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtCopPortUsed"))
if mibBuilder.loadTexts: cxMcPrtCopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopEntry.setDescription('cx Port Station MC600 Cop Driver Entry gives the state of the variables associated to the Character Oriented Protocol.')
cxMcPrtCopPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtCopPortUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopPortUsed.setDescription('The current port number that is used by the COP Driver. Range of Values: 1-4')
cxMcPrtCopPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopPortStatus.setDescription('The port status for enabling or disabling the port. Options: disable (1) enable (2) Default Value: disable (1)')
cxMcPrtCopComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 128000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopComRate.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopComRate.setDescription('The port communication rates. Range of Values: 110-128000 Default Value: 9600')
cxMcPrtCopUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseLnkErrPassthro.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseLnkErrPassthro.setDescription('Use the link error pass through on the port. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtCopInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopInterfaceType.setDescription('The port interface type: DTE or DCE. Options: dce (1) dte (2) Default: dce (2)')
cxMcPrtCopRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopRtsDcdModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopRtsDcdModemCtrl.setDescription('Use the RTS or DCD modem control on the port. Options on (1) vary (2) Default Value: on (1)')
cxMcPrtCopUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndDataTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndDataTx.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the presence of data in output queue. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtCopUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndLnk.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the main link status. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtCopUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseRtsDcdCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtCopDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopDtrCtsModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopDtrCtsModemCtrl.setDescription('Use the DTR or CTS modem control on the port. Options: on (1) vary (2) Default Value: on (1)')
cxMcPrtCopUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndRts.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndRts.setDescription('Use the state of the CTS modem control when the port selected is conditioned by the local RTS. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtCopUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndLnk.setDescription('Use the the RTS or DCD modem control when the port selected is conditioned by the main link status. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtCopUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseDtrCtsCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS. Options: no (1) yes (2) Default Value: yes (2)')
cxMcPrtCopLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 4000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopLimitBeforeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopLimitBeforeOut.setDescription('The limit before activation of output for the port. Range of Values: 5-4000 Default Value: 15')
cxMcPrtCopUseOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseOutCndCtsDtrOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseOutCndCtsDtrOn.setDescription('The output enable on CTS or DTR modem control for the port. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtCopUseInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseInCndDcdRtsOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseInCndDcdRtsOn.setDescription('The input enable on DCD or RTS modem control for the port. Options: no (1) yes (2) Default Value: no (1)')
cxMcPrtCopSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopSyncMode.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopSyncMode.setDescription('The clock synchronization for the port. Options: normal (1) extern (2) Default Value: normal (1)')
cxMcPrtCopDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopDataLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopDataLifetime.setDescription('The data lifetime in milliseconds for the port. Range of Values: 1-60000')
cxMcPrtCopUseClockSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseClockSync.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseClockSync.setDescription('The clocks synchronization on the port.')
cxMcPrtCopUseFlowCtrlClock = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseFlowCtrlClock.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseFlowCtrlClock.setDescription('The use of flow control by clocks of the synchronous port.')
cxMcPrtCopFlowCtrlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 9600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopFlowCtrlRate.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopFlowCtrlRate.setDescription('The use of flow control rate of the synchronous port.')
cxMcPrtCopLimitOutFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopLimitOutFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopLimitOutFlowCtrl.setDescription('The limit before output flow control of the synchronous port.')
cxMcPrtCopLimitInFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopLimitInFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopLimitInFlowCtrl.setDescription('The overflow limit before input flow control for the port.')
cxMcPrtCopOutIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("space", 1), ("mark", 2))).clone('mark')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopOutIdleState.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopOutIdleState.setDescription('The output idle state for the port.')
cxMcPrtCopNbBitPerChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("six", 1), ("seven", 2), ("eight", 3))).clone('eight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopNbBitPerChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopNbBitPerChr.setDescription('The number of bits per character on the port.')
cxMcPrtCopParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopParity.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopParity.setDescription('The parity on the port.')
cxMcPrtCopSyncChrOne = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopSyncChrOne.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopSyncChrOne.setDescription('The synchronization character number one for the port.')
cxMcPrtCopSyncChrTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopSyncChrTwo.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopSyncChrTwo.setDescription('The synchronization character number two for the port.')
cxMcPrtCopNbSyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopNbSyncChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopNbSyncChr.setDescription('The number of synchronization character for the port.')
cxMcPrtCopUseDesyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDesyncChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseDesyncChr.setDescription('Use the desynchronization character on the port.')
cxMcPrtCopDesyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopDesyncChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopDesyncChr.setDescription('The desynchronization character for the port.')
cxMcPrtCopNbDesyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopNbDesyncChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopNbDesyncChr.setDescription('The number of desynchronization character for the port.')
cxMcPrtCopUseDesyncRtsFall = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopUseDesyncRtsFall.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopUseDesyncRtsFall.setDescription('Use the desynchronization on RTS fall on the port.')
cxMcPrtCopBitSense = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtCopBitSense.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtCopBitSense.setDescription('The bit sense on the port.')
cxMcPrtBsyTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4), )
if mibBuilder.loadTexts: cxMcPrtBsyTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyTable.setDescription('cx Port Station MC600 Bsy Driver Table.')
cxMcPrtBsyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1), ).setIndexNames((0, "CXMCPRT-MIB", "cxMcPrtBsyPortUsed"))
if mibBuilder.loadTexts: cxMcPrtBsyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyEntry.setDescription('cx Port Station MC600 Bsy Driver Entry gives the state of the variables associated to the Bi-synchronous Protocol.')
cxMcPrtBsyPortUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxMcPrtBsyPortUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyPortUsed.setDescription('The current port number that is used by the BSY Driver.')
cxMcPrtBsyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyPortStatus.setDescription('The port status for enabling or disabling the port.')
cxMcPrtBsyComRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(110, 64000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyComRate.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyComRate.setDescription('The port communication rates.')
cxMcPrtBsyUseLnkErrPassthro = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseLnkErrPassthro.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseLnkErrPassthro.setDescription('Use the link error pass through on the port.')
cxMcPrtBsyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyInterface.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyInterface.setDescription('The port interface type: DTE or DCE.')
cxMcPrtBsyRtsDcdModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyRtsDcdModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyRtsDcdModemCtrl.setDescription('Use the RTS or DCD modem control on the port.')
cxMcPrtBsyUseRtsDcdCndDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndDataTx.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndDataTx.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the presence of data in output queue.')
cxMcPrtBsyUseRtsDcdCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndLnk.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the main link status.')
cxMcPrtBsyUseRtsDcdCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseRtsDcdCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS.')
cxMcPrtBsyDtrCtsModemCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("vary", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyDtrCtsModemCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyDtrCtsModemCtrl.setDescription('Use the DTR or CTS modem control on the port.')
cxMcPrtBsyUseDtrCtsCndRts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndRts.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndRts.setDescription('Use the state of the CTS modem control when the port selected is conditioned by the local RTS.')
cxMcPrtBsyUseDtrCtsCndLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndLnk.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndLnk.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the main link status.')
cxMcPrtBsyUseDtrCtsCndRem = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndRem.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseDtrCtsCndRem.setDescription('Use the state of the RTS or DCD modem control when the port selected is conditioned by the remote DCD or RTS.')
cxMcPrtBsyLimitBeforeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 4000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyLimitBeforeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyLimitBeforeOut.setDescription('The limit before activation of output for the port.')
cxMcPrtBsyUseOutCndCtsDtrOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseOutCndCtsDtrOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseOutCndCtsDtrOn.setDescription('Use the output enable on CTS or DTR modem control for the port.')
cxMcPrtBsyUseInCndDcdRtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyUseInCndDcdRtsOn.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyUseInCndDcdRtsOn.setDescription('Use the input enable on DCD or RTS modem control for the port.')
cxMcPrtBsySyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("extern", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsySyncMode.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsySyncMode.setDescription('The clock synchronization for the port.')
cxMcPrtBsyDataLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyDataLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyDataLifetime.setDescription('The data lifetime in milliseconds for the port.')
cxMcPrtBsyChrSet = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ebcdic", 1), ("usaascii", 2), ("trans", 3))).clone('usaascii')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyChrSet.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyChrSet.setDescription('The character set on the port.')
cxMcPrtBsyParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyParity.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyParity.setDescription('The parity on the port.')
cxMcPrtBsyBlkChkChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc", 1), ("lrc", 2))).clone('crc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyBlkChkChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyBlkChkChr.setDescription('The block check character on the port.')
cxMcPrtBsyNbSyncChr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyNbSyncChr.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyNbSyncChr.setDescription('The number of synchronization character for the port.')
cxMcPrtBsyMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 1, 1, 5, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxMcPrtBsyMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: cxMcPrtBsyMaxFrameSize.setDescription('The maximum frame size for the port.')
mibBuilder.exportSymbols("CXMCPRT-MIB", cxMcPrtBsyDtrCtsModemCtrl=cxMcPrtBsyDtrCtsModemCtrl, cxMcPrtAsyUseDtrCtsCndRts=cxMcPrtAsyUseDtrCtsCndRts, cxMcPrtAsyInCndDcdRtsOn=cxMcPrtAsyInCndDcdRtsOn, cxMcPrtCopUseLnkErrPassthro=cxMcPrtCopUseLnkErrPassthro, cxMcPrtCopDesyncChr=cxMcPrtCopDesyncChr, cxMcPrtAsyOutCndCtsDtrOn=cxMcPrtAsyOutCndCtsDtrOn, cxMcPrtStatCntReinit=cxMcPrtStatCntReinit, cxMcPrtCopNbSyncChr=cxMcPrtCopNbSyncChr, cxMcPrtAsyOutFlowCtrl=cxMcPrtAsyOutFlowCtrl, cxMcPrtBsyLimitBeforeOut=cxMcPrtBsyLimitBeforeOut, cxMcPrtStatCntErrTx=cxMcPrtStatCntErrTx, cxMcPrtStatCntBitDecomp=cxMcPrtStatCntBitDecomp, cxMcPrtCopBitSense=cxMcPrtCopBitSense, cxMcPrtBopUseRtsDcdCndRem=cxMcPrtBopUseRtsDcdCndRem, cxMcPrtCfgTable=cxMcPrtCfgTable, cxMcPrtBopPortUsed=cxMcPrtBopPortUsed, cxMcPrtCopFlowCtrlRate=cxMcPrtCopFlowCtrlRate, cxMcPrtCopLimitOutFlowCtrl=cxMcPrtCopLimitOutFlowCtrl, cxMcPrtStatHwInterface=cxMcPrtStatHwInterface, cxMcPrtCopUseRtsDcdCndRem=cxMcPrtCopUseRtsDcdCndRem, cxMcPrtStatCntFlowCtrlTx=cxMcPrtStatCntFlowCtrlTx, cxMcPrtAsyUseRtsDcdCndDataTx=cxMcPrtAsyUseRtsDcdCndDataTx, cxMcPrtAsyLimitBeforeOut=cxMcPrtAsyLimitBeforeOut, cxMcPrtCopUseOutCndCtsDtrOn=cxMcPrtCopUseOutCndCtsDtrOn, cxMcPrtStatDsr=cxMcPrtStatDsr, cxMcPrtCfgReinitPort=cxMcPrtCfgReinitPort, cxMcPrtBsyUseInCndDcdRtsOn=cxMcPrtBsyUseInCndDcdRtsOn, cxMcPrtPathStationScd=cxMcPrtPathStationScd, cxMcPrtStatCntBitComp=cxMcPrtStatCntBitComp, cxMcPrtBopSyncMode=cxMcPrtBopSyncMode, cxMcPrtCopPortStatus=cxMcPrtCopPortStatus, cxMcPrtBopInterface=cxMcPrtBopInterface, cxMcPrtCopUseClockSync=cxMcPrtCopUseClockSync, cxMcPrtAsyEntry=cxMcPrtAsyEntry, cxMcPrtBsyDataLifetime=cxMcPrtBsyDataLifetime, cxMcPrtPathRouteScd=cxMcPrtPathRouteScd, cxMcPrtStatCntMsgRx=cxMcPrtStatCntMsgRx, cxMcPrtBopOutPreambleLng=cxMcPrtBopOutPreambleLng, cxMcPrtBopLimitOutFlowCtrl=cxMcPrtBopLimitOutFlowCtrl, cxMcPrtCopTable=cxMcPrtCopTable, cxMcPrtAsyFlushOutChr=cxMcPrtAsyFlushOutChr, cxMcPrtAsyPortStatus=cxMcPrtAsyPortStatus, cxMcPrtCopInterfaceType=cxMcPrtCopInterfaceType, cxMcPrtBopUseDtrCtsCndRts=cxMcPrtBopUseDtrCtsCndRts, cxMcPrtCopSyncMode=cxMcPrtCopSyncMode, cxMcPrtAsyXoffChr=cxMcPrtAsyXoffChr, cxMcPrtBopFlowCtrlRate=cxMcPrtBopFlowCtrlRate, cxMcPrtBsyPortUsed=cxMcPrtBsyPortUsed, cxMcPrtBopEntry=cxMcPrtBopEntry, cxMcPrtBopOutIdleState=cxMcPrtBopOutIdleState, cxMcPrtCopNbBitPerChr=cxMcPrtCopNbBitPerChr, cxMcPrtCopEntry=cxMcPrtCopEntry, cxMcPrtBsyTable=cxMcPrtBsyTable, cxMcPrtStatRoute=cxMcPrtStatRoute, cxMcPrtAsyComRate=cxMcPrtAsyComRate, cxMcPrtAsyDataLifetime=cxMcPrtAsyDataLifetime, cxMcPrtBsyUseRtsDcdCndRem=cxMcPrtBsyUseRtsDcdCndRem, cxMcPrtBsyUseDtrCtsCndRem=cxMcPrtBsyUseDtrCtsCndRem, cxMcPrtStatCntConnect=cxMcPrtStatCntConnect, cxMcPrtDriver=cxMcPrtDriver, cxMcPrtBopUseClockSync=cxMcPrtBopUseClockSync, cxMcPrtGlobalResetStat=cxMcPrtGlobalResetStat, cxMcPrtAsyParity=cxMcPrtAsyParity, cxMcPrtStatRts=cxMcPrtStatRts, cxMcPrtBopUseRtsDcdCndDataTx=cxMcPrtBopUseRtsDcdCndDataTx, cxMcPrtCopLimitInFlowCtrl=cxMcPrtCopLimitInFlowCtrl, cxMcPrtCopUseRtsDcdCndDataTx=cxMcPrtCopUseRtsDcdCndDataTx, cxMcPrtBsyUseLnkErrPassthro=cxMcPrtBsyUseLnkErrPassthro, cxMcPrtCopSyncChrOne=cxMcPrtCopSyncChrOne, cxMcPrtCopUseRtsDcdCndLnk=cxMcPrtCopUseRtsDcdCndLnk, cxMcPrtAsyPortUsed=cxMcPrtAsyPortUsed, cxMcPrtAsyUseRtsDcdCndRem=cxMcPrtAsyUseRtsDcdCndRem, cxMcPrtAsyUseFlushOutChr=cxMcPrtAsyUseFlushOutChr, cxMcPrtCopUseDtrCtsCndRem=cxMcPrtCopUseDtrCtsCndRem, cxMcPrtBsyUseRtsDcdCndLnk=cxMcPrtBsyUseRtsDcdCndLnk, cxMcPrtBsyChrSet=cxMcPrtBsyChrSet, cxMcPrtBsyRtsDcdModemCtrl=cxMcPrtBsyRtsDcdModemCtrl, cxMcPrtStatTable=cxMcPrtStatTable, cxMcPrtBopDelayBeforeIdle=cxMcPrtBopDelayBeforeIdle, cxMcPrtAsyNbStopBit=cxMcPrtAsyNbStopBit, cxMcPrtStatCntChrDecomp=cxMcPrtStatCntChrDecomp, cxMcPrtCopDtrCtsModemCtrl=cxMcPrtCopDtrCtsModemCtrl, cxMcPrtStatPortNumber=cxMcPrtStatPortNumber, cxMcPrtStatCntChrComp=cxMcPrtStatCntChrComp, cxMcPrtAsyRtsDcdModemCtrl=cxMcPrtAsyRtsDcdModemCtrl, cxMcPrtBsyUseDtrCtsCndLnk=cxMcPrtBsyUseDtrCtsCndLnk, cxMcPrtBopCoding=cxMcPrtBopCoding, cxMcPrtBopTable=cxMcPrtBopTable, cxMcPrtAsyUseRtsDcdCndLnk=cxMcPrtAsyUseRtsDcdCndLnk, cxMcPrtCopParity=cxMcPrtCopParity, cxMcPrtBopDataLifetime=cxMcPrtBopDataLifetime, cxMcPrtBsyNbSyncChr=cxMcPrtBsyNbSyncChr, cxMcPrtBsySyncMode=cxMcPrtBsySyncMode, cxMcPrtCopUseDtrCtsCndLnk=cxMcPrtCopUseDtrCtsCndLnk, cxMcPrtBsyPortStatus=cxMcPrtBsyPortStatus, cxMcPrtStatTimeTicks=cxMcPrtStatTimeTicks, cxMcPrtStatStation=cxMcPrtStatStation, cxMcPrtAsyNbBitPerChr=cxMcPrtAsyNbBitPerChr, cxMcPrtCopRtsDcdModemCtrl=cxMcPrtCopRtsDcdModemCtrl, cxMcPrtGlobal=cxMcPrtGlobal, cxMcPrtCfgDriverUsed=cxMcPrtCfgDriverUsed, cxMcPrtAsySyncMode=cxMcPrtAsySyncMode, cxMcPrtGlobalConsoleRate=cxMcPrtGlobalConsoleRate, cxMcPrtAsyXonChr=cxMcPrtAsyXonChr, cxMcPrtCopComRate=cxMcPrtCopComRate, cxMcPrtBopDtrCtsModemCtrl=cxMcPrtBopDtrCtsModemCtrl, cxMcPrtAsyUseLnkErrPassthro=cxMcPrtAsyUseLnkErrPassthro, cxMcPrtBopPortStatus=cxMcPrtBopPortStatus, cxMcPrtAsyInFlowCtrl=cxMcPrtAsyInFlowCtrl, cxMcPrtBopUseLnkErrPassthro=cxMcPrtBopUseLnkErrPassthro, cxMcPrtStatCts=cxMcPrtStatCts, cxMcPrtBsyComRate=cxMcPrtBsyComRate, cxMcPrtCfgPortIndex=cxMcPrtCfgPortIndex, cxMcPrtBopUseOutCndCtsDtrOn=cxMcPrtBopUseOutCndCtsDtrOn, cxMcPrtCopUseFlowCtrlClock=cxMcPrtCopUseFlowCtrlClock, cxMcPrtCopLimitBeforeOut=cxMcPrtCopLimitBeforeOut, cxMcPrtBopUseInCndDcdRtsOn=cxMcPrtBopUseInCndDcdRtsOn, cxMcPrtCopDataLifetime=cxMcPrtCopDataLifetime, cxMcPrt=cxMcPrt, cxMcPrtAsyUseDataLifeLimited=cxMcPrtAsyUseDataLifeLimited, cxMcPrtBopLimitBeforeOut=cxMcPrtBopLimitBeforeOut, cxMcPrtStatEntry=cxMcPrtStatEntry, cxMcPrtCfgEntry=cxMcPrtCfgEntry, cxMcPrtBopComRate=cxMcPrtBopComRate, cxMcPrtStatDcd=cxMcPrtStatDcd, cxMcPrtBopUseRtsDcdCndLnk=cxMcPrtBopUseRtsDcdCndLnk, cxMcPrtBopUseFlowCtrlClock=cxMcPrtBopUseFlowCtrlClock, cxMcPrtAsyTable=cxMcPrtAsyTable, cxMcPrtCopSyncChrTwo=cxMcPrtCopSyncChrTwo, cxMcPrtCopNbDesyncChr=cxMcPrtCopNbDesyncChr, cxMcPrtBsyParity=cxMcPrtBsyParity, cxMcPrtPathRoutePri=cxMcPrtPathRoutePri, cxMcPrtBsyEntry=cxMcPrtBsyEntry, cxMcPrtStatCntMsgTx=cxMcPrtStatCntMsgTx, cxMcPrtBsyBlkChkChr=cxMcPrtBsyBlkChkChr, cxMcPrtCopPortUsed=cxMcPrtCopPortUsed, cxMcPrtAsyUseDtrCtsCndRem=cxMcPrtAsyUseDtrCtsCndRem, cxMcPrtStatDtr=cxMcPrtStatDtr, cxMcPrtBsyUseRtsDcdCndDataTx=cxMcPrtBsyUseRtsDcdCndDataTx, cxMcPrtAsyUseDtrCtsCndLnk=cxMcPrtAsyUseDtrCtsCndLnk, cxMcPrtBopUseDtrCtsCndRem=cxMcPrtBopUseDtrCtsCndRem, cxMcPrtStatCntErrRx=cxMcPrtStatCntErrRx, cxMcPrtBopUseDtrCtsCndLnk=cxMcPrtBopUseDtrCtsCndLnk, cxMcPrtBsyMaxFrameSize=cxMcPrtBsyMaxFrameSize, cxMcPrtCopUseInCndDcdRtsOn=cxMcPrtCopUseInCndDcdRtsOn, cxMcPrtPathStationPri=cxMcPrtPathStationPri, cxMcPrtCopUseDtrCtsCndRts=cxMcPrtCopUseDtrCtsCndRts, cxMcPrtCfgUpdated=cxMcPrtCfgUpdated, cxMcPrtCopOutIdleState=cxMcPrtCopOutIdleState, cxMcPrtBopLimitInFlowCtrl=cxMcPrtBopLimitInFlowCtrl, cxMcPrtAsyInterface=cxMcPrtAsyInterface, cxMcPrtBsyUseDtrCtsCndRts=cxMcPrtBsyUseDtrCtsCndRts, cxMcPrtBsyUseOutCndCtsDtrOn=cxMcPrtBsyUseOutCndCtsDtrOn, cxMcPrtPath=cxMcPrtPath, cxMcPrtCopUseDesyncRtsFall=cxMcPrtCopUseDesyncRtsFall, cxMcPrtStatCntFlowCtrlRx=cxMcPrtStatCntFlowCtrlRx, cxMcPrtBopRtsDcdModemCtrl=cxMcPrtBopRtsDcdModemCtrl, cxMcPrtCopUseDesyncChr=cxMcPrtCopUseDesyncChr, cxMcPrtBsyInterface=cxMcPrtBsyInterface, cxMcPrtAsyDtrCtsModemCtrl=cxMcPrtAsyDtrCtsModemCtrl, cxMcPrtGlobalStationId=cxMcPrtGlobalStationId)
