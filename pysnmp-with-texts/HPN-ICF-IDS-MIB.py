#
# PySNMP MIB module HPN-ICF-IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-IDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:39:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, iso, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, Unsigned32, MibIdentifier, Integer32, Counter32, NotificationType, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibIdentifier", "Integer32", "Counter32", "NotificationType", "IpAddress", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpnicfIDSMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1))
if mibBuilder.loadTexts: hpnicfIDSMib.setLastUpdated('200507141942Z')
if mibBuilder.loadTexts: hpnicfIDSMib.setOrganization('')
if mibBuilder.loadTexts: hpnicfIDSMib.setContactInfo('')
if mibBuilder.loadTexts: hpnicfIDSMib.setDescription('This MIB describes IDS private information. IDS(Instruction Detecting System) is used to detect intruder activity. ')
hpnicfIds = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47))
hpnicfIDSTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1))
hpnicfIDSTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1))
hpnicfIDSTrapIPFragmentQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapIPFragmentQueueLen.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapIPFragmentQueueLen.setDescription('The length of IP fragment queue.')
hpnicfIDSTrapStatSessionTabLen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapStatSessionTabLen.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapStatSessionTabLen.setDescription('The length of status session table.')
hpnicfIDSTrapIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapIPAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapIPAddressType.setDescription('The type of IP Address.')
hpnicfIDSTrapIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapIPAddress.setDescription('IP Address.')
hpnicfIDSTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapUserName.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapUserName.setDescription('User name.')
hpnicfIDSTrapLoginType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("telnet", 1), ("ssh", 2), ("web", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapLoginType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapLoginType.setDescription('Login type, including telnet, ssh and web.')
hpnicfIDSTrapUpgradeType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("programme", 1), ("crb", 2), ("vrb", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapUpgradeType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapUpgradeType.setDescription('Upgrade type, including programme(system image), crb(custom rule base, one kind of configuration file), vrb(vendor rule base, one kind of configuration file).')
hpnicfIDSTrapCRLName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapCRLName.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapCRLName.setDescription('CRL(Certificate Revoke List) name.')
hpnicfIDSTrapCertName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapCertName.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapCertName.setDescription('Certificate name.')
hpnicfIDSTrapDetectRuleID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapDetectRuleID.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapDetectRuleID.setDescription('The rule ID which is a unique identifier for a specified detect rule.')
hpnicfIDSTrapEngineID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapEngineID.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapEngineID.setDescription('A unique number used to identify an interface.')
hpnicfIDSTrapFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapFileName.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapFileName.setDescription('The file name.')
hpnicfIDSTrapCfgLineInFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapCfgLineInFile.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapCfgLineInFile.setDescription('The line number in the configuration file.')
hpnicfIDSTrapReasonForError = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfIDSTrapReasonForError.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapReasonForError.setDescription('The information of the notification. Although the format and content of this object are device specific, they should be defined uniformly in the device.')
hpnicfIDSTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2))
hpnicfIDSTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0))
hpnicfIDSTrapIPFragQueueFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 1)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapIPFragmentQueueLen"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapIPFragQueueFull.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapIPFragQueueFull.setDescription('This notification will be generated when the IP fragment queue is full. The hpnicfIDSTrapIPFragmentQueueLen describes the length of current fragment queue. The hpnicfIDSTrapReasonForError describes reason for error.')
hpnicfIDSTrapStatSessTabFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 2)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapStatSessionTabLen"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapStatSessTabFull.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapStatSessTabFull.setDescription('This notification will be generated when the status session table is full. The hpnicfIDSTrapStatSessionTabLen describes the length of current status session table. The hpnicfIDSTrapReasonForError describes reason for error.')
hpnicfIDSTrapDetectRuleParseFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 3)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapDetectRuleID"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapEngineID"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapDetectRuleParseFail.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapDetectRuleParseFail.setDescription('This notification will be generated when failing to parse the rules for detecting. The hpnicfIDSTrapDetectRuleID object describes rule ID. The hpnicfIDSTrapEngineID object identifies an interface the rule applies to. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapDBConnLost = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 4)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapIPAddressType"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapIPAddress"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapDBConnLost.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapDBConnLost.setDescription('This notification will be generated when connecting with database server fails. The hpnicfIDSTrapIPAddressType object describes the IP address type of database server. The hpnicfIDSTrapIPAddress object describes the IP address of database server. The hpnicfIDSTrapReasonForError describes reason of connecting failure.')
hpnicfIDSTrapCRLNeedUpdate = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 5)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapCRLName"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapCRLNeedUpdate.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapCRLNeedUpdate.setDescription('This notification will be generated when IDS device detects that CRL is out of date. The hpnicfIDSTrapCRLName object describes the CRL(Certificate Revoke List) name. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapCertOverdue = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 6)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapCertName"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapCertOverdue.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapCertOverdue.setDescription('This notification will be generated when IDS device detects that certificate is overdue. The hpnicfIDSTrapCertName object describes the certificate name. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapTooManyLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 7)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapUserName"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapIPAddressType"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapIPAddress"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapLoginType"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapTooManyLoginFail.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapTooManyLoginFail.setDescription('This notification will be generated when the login failure times of a user over a certain number. The hpnicfIDSTrapUserName object describes the user name when logging in. The hpnicfIDSTrapIPAddressType object describes the IP address type of client. The hpnicfIDSTrapIPAddress object describes the IP address of client. The hpnicfIDSTrapLoginType object describes login type, including: telnet, ssh, web. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapUpgradeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 8)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapUpgradeType"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapUpgradeError.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapUpgradeError.setDescription('This notification will be generated when upgrading fails. The hpnicfIDSTrapUpgradeType object describes upgrade type, including: programme, vrb. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapFileAccessError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 9)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapFileName"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapFileAccessError.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapFileAccessError.setDescription('This notification will be generated when accessing file fails. The hpnicfIDSTrapFileName object describes the name of file accessed. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapConsArithMemLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 10)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapConsArithMemLow.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapConsArithMemLow.setDescription('This notification will be generated when memory used by constructing the arithmetic to seek content is lacking. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapSSRAMOperFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 11)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapSSRAMOperFail.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapSSRAMOperFail.setDescription('This notification will be generated when reading or writing SSRAM of CIE card fails. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapPacketProcessDisorder = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 12)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapReasonForError"))
if mibBuilder.loadTexts: hpnicfIDSTrapPacketProcessDisorder.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapPacketProcessDisorder.setDescription('This notification will be generated when packets processed is in disorder. The hpnicfIDSTrapReasonForError object describes reason for error.')
hpnicfIDSTrapCfgFileFormatError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 47, 1, 1, 2, 0, 13)).setObjects(("HPN-ICF-IDS-MIB", "hpnicfIDSTrapFileName"), ("HPN-ICF-IDS-MIB", "hpnicfIDSTrapCfgLineInFile"))
if mibBuilder.loadTexts: hpnicfIDSTrapCfgFileFormatError.setStatus('current')
if mibBuilder.loadTexts: hpnicfIDSTrapCfgFileFormatError.setDescription('When devices startup and load the configuration file, if format error is found, this notification will be generated. The hpnicfIDSTrapFileName object describes the name of configuration file. The hpnicfIDSTrapCfgLineInFile object describes the line number in the file.')
mibBuilder.exportSymbols("HPN-ICF-IDS-MIB", hpnicfIDSTrapPacketProcessDisorder=hpnicfIDSTrapPacketProcessDisorder, hpnicfIDSTrapUpgradeError=hpnicfIDSTrapUpgradeError, hpnicfIDSTrapCertName=hpnicfIDSTrapCertName, hpnicfIds=hpnicfIds, hpnicfIDSTrapIPAddress=hpnicfIDSTrapIPAddress, hpnicfIDSTrap=hpnicfIDSTrap, hpnicfIDSMib=hpnicfIDSMib, hpnicfIDSTrapDetectRuleParseFail=hpnicfIDSTrapDetectRuleParseFail, hpnicfIDSTrapIPAddressType=hpnicfIDSTrapIPAddressType, hpnicfIDSTrapFileAccessError=hpnicfIDSTrapFileAccessError, hpnicfIDSTrapTooManyLoginFail=hpnicfIDSTrapTooManyLoginFail, hpnicfIDSTrapCRLName=hpnicfIDSTrapCRLName, hpnicfIDSTrapIPFragmentQueueLen=hpnicfIDSTrapIPFragmentQueueLen, hpnicfIDSTrapCertOverdue=hpnicfIDSTrapCertOverdue, hpnicfIDSTrapSSRAMOperFail=hpnicfIDSTrapSSRAMOperFail, hpnicfIDSTrapCfgFileFormatError=hpnicfIDSTrapCfgFileFormatError, PYSNMP_MODULE_ID=hpnicfIDSMib, hpnicfIDSTrapConsArithMemLow=hpnicfIDSTrapConsArithMemLow, hpnicfIDSTrapEngineID=hpnicfIDSTrapEngineID, hpnicfIDSTrapStatSessTabFull=hpnicfIDSTrapStatSessTabFull, hpnicfIDSTrapStatSessionTabLen=hpnicfIDSTrapStatSessionTabLen, hpnicfIDSTrapInfo=hpnicfIDSTrapInfo, hpnicfIDSTrapIPFragQueueFull=hpnicfIDSTrapIPFragQueueFull, hpnicfIDSTrapFileName=hpnicfIDSTrapFileName, hpnicfIDSTrapPrefix=hpnicfIDSTrapPrefix, hpnicfIDSTrapUpgradeType=hpnicfIDSTrapUpgradeType, hpnicfIDSTrapReasonForError=hpnicfIDSTrapReasonForError, hpnicfIDSTrapCRLNeedUpdate=hpnicfIDSTrapCRLNeedUpdate, hpnicfIDSTrapDetectRuleID=hpnicfIDSTrapDetectRuleID, hpnicfIDSTrapLoginType=hpnicfIDSTrapLoginType, hpnicfIDSTrapCfgLineInFile=hpnicfIDSTrapCfgLineInFile, hpnicfIDSTrapDBConnLost=hpnicfIDSTrapDBConnLost, hpnicfIDSTrapUserName=hpnicfIDSTrapUserName, hpnicfIDSTrapGroup=hpnicfIDSTrapGroup)
