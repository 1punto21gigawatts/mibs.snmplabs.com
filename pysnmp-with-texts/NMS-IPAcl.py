#
# PySNMP MIB module NMS-IPAcl (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-IPAcl
# Produced by pysmi-0.3.4 at Wed May  1 14:22:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
nmslocal, = mibBuilder.importSymbols("NMS-SMI", "nmslocal")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, MibIdentifier, Counter64, Counter32, TimeTicks, Gauge32, ModuleIdentity, Unsigned32, ObjectIdentity, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "MibIdentifier", "Counter64", "Counter32", "TimeTicks", "Gauge32", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Bits", "Integer32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
nmsIPAclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5))
if mibBuilder.loadTexts: nmsIPAclMIB.setLastUpdated('200811180000Z')
if mibBuilder.loadTexts: nmsIPAclMIB.setOrganization('')
if mibBuilder.loadTexts: nmsIPAclMIB.setContactInfo('')
if mibBuilder.loadTexts: nmsIPAclMIB.setDescription('This MIB module defines the generic managed objects for IP Acl.')
nmsAclTotal = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsAclTotal.setStatus('mandatory')
if mibBuilder.loadTexts: nmsAclTotal.setDescription('the total num of access-lists')
nmsIPAclTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 2), )
if mibBuilder.loadTexts: nmsIPAclTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclTable.setDescription('This table containing one entry for each IP Acl on this device.')
nmsIPAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 2, 1), ).setIndexNames((0, "NMS-IPAcl", "nmsIPAclname"))
if mibBuilder.loadTexts: nmsIPAclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclEntry.setDescription('An entry (conceptual row) containing information about an IP Acl on this device.')
nmsIPAclname = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsIPAclname.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclname.setDescription('The name of this IP Acl.')
nmsIPAclEntrytotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsIPAclEntrytotal.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclEntrytotal.setDescription('The total number of this IP Acl entries.')
nmsIPAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("standard", 1), ("extended", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclType.setDescription('The type of this IP Acl.')
nmsIPAclMergeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclMergeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclMergeEnable.setDescription('if merge enable')
nmsIPAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclRowStatus.setDescription('table row status')
nmsIPAclsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3), )
if mibBuilder.loadTexts: nmsIPAclsRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclsRuleTable.setDescription('')
nmsIPAclsRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1), ).setIndexNames((0, "NMS-IPAcl", "nmsIPAclsname"), (0, "NMS-IPAcl", "nmsIPAclsentryId"))
if mibBuilder.loadTexts: nmsIPAclsRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclsRuleEntry.setDescription('')
nmsIPAclsname = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsIPAclsname.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclsname.setDescription('The name of this IP Acl.')
nmsIPAclsentryId = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclsentryId.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclsentryId.setDescription('Index of the entry')
nmsIPAclsrule = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclsrule.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclsrule.setDescription('IP ACL rule')
nmsIPAclssrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclssrcip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclssrcip.setDescription('source ip address')
nmsIPAclssrcmask = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclssrcmask.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclssrcmask.setDescription('subnet mask of source ip address')
nmsIPAclssrcbeginip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclssrcbeginip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclssrcbeginip.setDescription('destination ip address')
nmsIPAclssrcendip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclssrcendip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclssrcendip.setDescription('subnet mask of destination ip address')
nmsIPAclscompare = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usemask", 1), ("userange", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclscompare.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclscompare.setDescription('compare flag')
nmsIPAclsany = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("usezero", 1), ("useany", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclsany.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclsany.setDescription('any flag')
nmsIPAclslog = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclslog.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclslog.setDescription('logging packet')
nmsIPAclsrowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 3, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclsrowstatus.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclsrowstatus.setDescription('table row status')
nmsIPAcleRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4), )
if mibBuilder.loadTexts: nmsIPAcleRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAcleRuleTable.setDescription('')
nmsIPAcleRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1), ).setIndexNames((0, "NMS-IPAcl", "nmsIPAclename"), (0, "NMS-IPAcl", "nmsIPAcleentryId"))
if mibBuilder.loadTexts: nmsIPAcleRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAcleRuleEntry.setDescription('')
nmsIPAclename = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsIPAclename.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclename.setDescription('The name of this IP Acl.')
nmsIPAcleentryId = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcleentryId.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcleentryId.setDescription('Index of the entry')
nmsIPAclerule = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("permit", 1), ("deny", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclerule.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAclerule.setDescription('IP ACL rule')
nmsIPAcleprotocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcleprotocol.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcleprotocol.setDescription('protocol num')
nmsIPAclesrceid = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrceid.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrceid.setDescription('source interface id')
nmsIPAclesrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcip.setDescription('source ip address')
nmsIPAclesrcmask = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcmask.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcmask.setDescription('subnet mask of source ip address')
nmsIPAclesrcport = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcport.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcport.setDescription('source port num')
nmsIPAclesrcpflag = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("gt", 1), ("lt", 2), ("eq", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcpflag.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcpflag.setDescription('source port flag')
nmsIPAclesrcbeginip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcbeginip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcbeginip.setDescription('source ip address range begin')
nmsIPAclesrcendip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcendip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcendip.setDescription('source ip address range end')
nmsIPAclesrcbeginport = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcbeginport.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcbeginport.setDescription('source port range begin')
nmsIPAclesrcendport = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcendport.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcendport.setDescription('source port range end')
nmsIPAclesrccompare = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usemask", 1), ("userange", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrccompare.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrccompare.setDescription('source compare flag')
nmsIPAclesrcany = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("usezero", 1), ("useany", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclesrcany.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclesrcany.setDescription('source any flag')
nmsIPAcledeseid = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledeseid.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledeseid.setDescription('destination interface id')
nmsIPAcledesip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesip.setDescription('destination ip address')
nmsIPAcledesmask = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesmask.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesmask.setDescription('subnet mask of destination ip address')
nmsIPAcledesport = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesport.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesport.setDescription('destination port num')
nmsIPAcledespflag = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("gt", 1), ("lt", 2), ("eq", 3), ("neq", 4), ("range", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledespflag.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledespflag.setDescription('destination port flag')
nmsIPAcledesbeginip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesbeginip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesbeginip.setDescription('destination ip address range begin')
nmsIPAcledesendip = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesendip.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesendip.setDescription('destination ip address range end')
nmsIPAcledesbeginport = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesbeginport.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesbeginport.setDescription('destination port range begin')
nmsIPAcledesendport = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesendport.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesendport.setDescription('destination port range end')
nmsIPAcledescompare = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usemask", 1), ("userange", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledescompare.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledescompare.setDescription('destination compare flag')
nmsIPAcledesany = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("usezero", 1), ("useany", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledesany.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledesany.setDescription('destination any flag')
nmsIPAcleicmptype = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcleicmptype.setStatus('mandatory')
if mibBuilder.loadTexts: nmsIPAcleicmptype.setDescription('ICMP type')
nmsIPAcleigmptype = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcleigmptype.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcleigmptype.setDescription('IGMP type')
nmsIPAcletimerange = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcletimerange.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcletimerange.setDescription('Time-range name')
nmsIPAcletos = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcletos.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcletos.setDescription('tos level')
nmsIPAcleprecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcleprecedence.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcleprecedence.setDescription('precedence level')
nmsIPAcleestablished = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("yes", 1), ("no", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcleestablished.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcleestablished.setDescription('if an established connection')
nmsIPAclelog = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclelog.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclelog.setDescription('logging packet')
nmsIPAcledonotfragment = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("notset", 2), ("set", 1), ("donotcheck", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcledonotfragment.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcledonotfragment.setDescription('if donotfragment flag is set')
nmsIPAcleisfragment = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("notset", 2), ("set", 1), ("donotcheck", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcleisfragment.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcleisfragment.setDescription('if isfragment flag is set')
nmsIPAcletotallen = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcletotallen.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcletotallen.setDescription('total length of ip packet')
nmsIPAcletotallenflag = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("donotcheck", 0), ("gt", 1), ("lt", 2), ("eq", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAcletotallenflag.setStatus('current')
if mibBuilder.loadTexts: nmsIPAcletotallenflag.setDescription('flag of total length value')
nmsIPAclettl = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclettl.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclettl.setDescription('time to live of ip packet')
nmsIPAclettlflag = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("donotcheck", 0), ("gt", 1), ("lt", 2), ("eq", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclettlflag.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclettlflag.setDescription('flag of time to live value')
nmsIPAclerowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 5, 4, 1, 40), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsIPAclerowstatus.setStatus('current')
if mibBuilder.loadTexts: nmsIPAclerowstatus.setDescription('The table row status')
mibBuilder.exportSymbols("NMS-IPAcl", nmsIPAclsany=nmsIPAclsany, nmsIPAcledesport=nmsIPAcledesport, nmsIPAclelog=nmsIPAclelog, nmsIPAcleicmptype=nmsIPAcleicmptype, nmsIPAcletotallen=nmsIPAcletotallen, nmsIPAclEntry=nmsIPAclEntry, nmsIPAcledespflag=nmsIPAcledespflag, nmsIPAclMergeEnable=nmsIPAclMergeEnable, nmsIPAcledesendport=nmsIPAcledesendport, nmsIPAclTable=nmsIPAclTable, nmsIPAclesrcbeginport=nmsIPAclesrcbeginport, nmsIPAclesrcip=nmsIPAclesrcip, nmsIPAcledesbeginip=nmsIPAcledesbeginip, nmsIPAcledescompare=nmsIPAcledescompare, nmsIPAcletimerange=nmsIPAcletimerange, nmsIPAclesrceid=nmsIPAclesrceid, nmsIPAclesrcmask=nmsIPAclesrcmask, PYSNMP_MODULE_ID=nmsIPAclMIB, nmsIPAcleRuleEntry=nmsIPAcleRuleEntry, nmsIPAclettl=nmsIPAclettl, nmsIPAclsentryId=nmsIPAclsentryId, nmsIPAcleigmptype=nmsIPAcleigmptype, nmsIPAclsrule=nmsIPAclsrule, nmsAclTotal=nmsAclTotal, nmsIPAcledonotfragment=nmsIPAcledonotfragment, nmsIPAcleisfragment=nmsIPAcleisfragment, nmsIPAclesrcpflag=nmsIPAclesrcpflag, nmsIPAclEntrytotal=nmsIPAclEntrytotal, nmsIPAcletotallenflag=nmsIPAcletotallenflag, nmsIPAclsRuleTable=nmsIPAclsRuleTable, nmsIPAcleentryId=nmsIPAcleentryId, nmsIPAclettlflag=nmsIPAclettlflag, nmsIPAclssrcendip=nmsIPAclssrcendip, nmsIPAcledesendip=nmsIPAcledesendip, nmsIPAclesrcany=nmsIPAclesrcany, nmsIPAclsname=nmsIPAclsname, nmsIPAclesrcport=nmsIPAclesrcport, nmsIPAcleprotocol=nmsIPAcleprotocol, nmsIPAclType=nmsIPAclType, nmsIPAclslog=nmsIPAclslog, nmsIPAclename=nmsIPAclename, nmsIPAcleestablished=nmsIPAcleestablished, nmsIPAclerule=nmsIPAclerule, nmsIPAclscompare=nmsIPAclscompare, nmsIPAclMIB=nmsIPAclMIB, nmsIPAclesrcbeginip=nmsIPAclesrcbeginip, nmsIPAclRowStatus=nmsIPAclRowStatus, nmsIPAcleprecedence=nmsIPAcleprecedence, nmsIPAcledeseid=nmsIPAcledeseid, nmsIPAclssrcbeginip=nmsIPAclssrcbeginip, nmsIPAclesrccompare=nmsIPAclesrccompare, nmsIPAcledesbeginport=nmsIPAcledesbeginport, nmsIPAclesrcendip=nmsIPAclesrcendip, nmsIPAclssrcip=nmsIPAclssrcip, nmsIPAcledesany=nmsIPAcledesany, nmsIPAclesrcendport=nmsIPAclesrcendport, nmsIPAcledesip=nmsIPAcledesip, nmsIPAclsRuleEntry=nmsIPAclsRuleEntry, nmsIPAcletos=nmsIPAcletos, nmsIPAclerowstatus=nmsIPAclerowstatus, nmsIPAclsrowstatus=nmsIPAclsrowstatus, nmsIPAcleRuleTable=nmsIPAcleRuleTable, nmsIPAclssrcmask=nmsIPAclssrcmask, nmsIPAcledesmask=nmsIPAcledesmask, nmsIPAclname=nmsIPAclname)
