#
# PySNMP MIB module PDN-LINK-FAULT-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-LINK-FAULT-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdnLinkFaultMgmt, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdnLinkFaultMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, NotificationType, Integer32, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, Unsigned32, IpAddress, TimeTicks, Counter32, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Integer32", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "Unsigned32", "IpAddress", "TimeTicks", "Counter32", "ObjectIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pdnLinkFaultMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1))
pdnLinkFaultMgmtMIB.setRevisions(('2003-04-23 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnLinkFaultMgmtMIB.setRevisionsDescriptions(('- Added pdnLinkFailureSfPeriodBeforeSwitching object, - Added pdnLinkFailureSfBerThreshold object.',))
if mibBuilder.loadTexts: pdnLinkFaultMgmtMIB.setLastUpdated('200304031900Z')
if mibBuilder.loadTexts: pdnLinkFaultMgmtMIB.setOrganization('Paradyne Corporation MIB Working Group')
if mibBuilder.loadTexts: pdnLinkFaultMgmtMIB.setContactInfo(' Paradyne Networks Inc. Postal: 8545, 126th Ave. N. Largo, FL 33779 US Editor: Jesus Pinto Email: mibwg_team@eng.paradyne.com')
if mibBuilder.loadTexts: pdnLinkFaultMgmtMIB.setDescription('This management information module supports the objects to be used for fault management configuration on primary and secondary links.')
pdnLinkFaultMgmtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1))
pdnLinkFaultMgmtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 2))
pdnLinkFaultMgmtApsSelection = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFaultMgmtApsSelection.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFaultMgmtApsSelection.setDescription('This object is used to enable or disable the Automatic Protection Switching (Aps) feature on this device. This object can not be enabled if the -Switchover due to link failures- is enabled.')
pdnLinkFaultMgmtSwitchoverSelection = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFaultMgmtSwitchoverSelection.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFaultMgmtSwitchoverSelection.setDescription('This object is used to enable or disable the Switchover Due to link failures feature on on this device. This object can not be enabled if the APS feature is enabled.')
pdnDualLinkSelection = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDualLinkSelection.setStatus('current')
if mibBuilder.loadTexts: pdnDualLinkSelection.setDescription('This object is used to enable or disable the ability to split traffic among dual links.')
pdnLinkFailureConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3), )
if mibBuilder.loadTexts: pdnLinkFailureConfigTable.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureConfigTable.setDescription('This table contains one row per link being monitored for link failures.')
pdnLinkFailureConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnLinkFailureConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureConfigEntry.setDescription('Configuration information about a particular interface being monitored for link failured.')
pdnLinkFailureLOSPeriodBeforeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFailureLOSPeriodBeforeSwitching.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureLOSPeriodBeforeSwitching.setDescription('This object allows users to configure the amount of time a LOS condition shall exist on this uplink before initiating a switchover. Switchover due to LOS condition on this uplink will not be valid if any of the APS (Automatic Protection Switching) is enabled.')
pdnLinkFailureLOFPeriodBeforeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFailureLOFPeriodBeforeSwitching.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureLOFPeriodBeforeSwitching.setDescription('This object allows users to configure the amount of time a LOF condition shall exist on this uplink before initiating a switchover. Switchover due to LOF condition on this uplink will not be valid if any of the APS (Automatic Protection Switching) is enabled.')
pdnLinkFailureAISLPeriodBeforeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFailureAISLPeriodBeforeSwitching.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureAISLPeriodBeforeSwitching.setDescription('This object allows users to configure the amount of time a AIS-L condition shall exist on this uplink before initiating a switchover. Switchover due to AIS-L condition on this uplink will not be valid if any of the APS (Automatic Protection Switching) is enabled.')
pdnLinkFailureSdPeriodBeforeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFailureSdPeriodBeforeSwitching.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureSdPeriodBeforeSwitching.setDescription('This object allows users to configure the amount of time a Signal Degraded (Sd) condition shall exist on this uplink before initiating a switchover. Switchover due to Sd condition on this uplink will not be valid if any of the APS (Automatic Protection Switching) is enabled.')
pdnLinkFailureSfPeriodBeforeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFailureSfPeriodBeforeSwitching.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureSfPeriodBeforeSwitching.setDescription('This object allows users to configure the amount of time a Signal Failure Bit (Sf) condition shall exist on this uplink before initiating a switchover. Switchover due to Sf condition on this uplink will not be valid if any of the APS (Automatic Protection Switching) is enabled.')
pdnLinkFailureSdBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFailureSdBerThreshold.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureSdBerThreshold.setDescription('This object allows users to configure the threshold for the Signal Degrade Bit Error Rate (Sd). The negated value of this number is used as the exponent of 10 for computing the threshold value for the Bit Error Rate (BER). For example, a value of 5 indicates a BER threshold of 10^-5.')
pdnLinkFailureSfBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnLinkFailureSfBerThreshold.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFailureSfBerThreshold.setDescription('This object allows users to configure the threshold for the Signal Failure Bit Error Rate (Sf). The negated value of this number is used as the exponent of 10 for computing the threshold value for the Bit Error Rate (BER). For example, a value of 5 indicates a BER threshold of 10^-5.')
pdnLinkFaultMgmtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 2, 1))
pdnLinkFaultMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 2, 2))
pdnLinkFaultMgmtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 2, 1, 1)).setObjects(("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFaultMgmtGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnLinkFaultMgmtCompliance = pdnLinkFaultMgmtCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFaultMgmtCompliance.setDescription('The compliance statement for SNMP entities capable of configuring link fault conditions.')
pdnLinkFaultMgmtGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 2, 2, 1)).setObjects(("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFaultMgmtApsSelection"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFaultMgmtSwitchoverSelection"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnDualLinkSelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnLinkFaultMgmtGeneralGroup = pdnLinkFaultMgmtGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: pdnLinkFaultMgmtGeneralGroup.setDescription('A collection of configuration objects applicable to link fault mgmt implementation.')
pdnLinkSwitchoverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 40, 1, 2, 2, 2)).setObjects(("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFailureLOSPeriodBeforeSwitching"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFailureLOFPeriodBeforeSwitching"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFailureAISLPeriodBeforeSwitching"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFailureSdPeriodBeforeSwitching"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFailureSfPeriodBeforeSwitching"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFailureSdBerThreshold"), ("PDN-LINK-FAULT-MGMT-MIB", "pdnLinkFailureSfBerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnLinkSwitchoverGroup = pdnLinkSwitchoverGroup.setStatus('current')
if mibBuilder.loadTexts: pdnLinkSwitchoverGroup.setDescription('A collection of configuration objects applicable to all redundancy implementations.')
mibBuilder.exportSymbols("PDN-LINK-FAULT-MGMT-MIB", pdnLinkFailureLOFPeriodBeforeSwitching=pdnLinkFailureLOFPeriodBeforeSwitching, pdnDualLinkSelection=pdnDualLinkSelection, pdnLinkFaultMgmtCompliances=pdnLinkFaultMgmtCompliances, pdnLinkFaultMgmtCompliance=pdnLinkFaultMgmtCompliance, pdnLinkFaultMgmtGroups=pdnLinkFaultMgmtGroups, pdnLinkFaultMgmtGeneralGroup=pdnLinkFaultMgmtGeneralGroup, pdnLinkFailureConfigTable=pdnLinkFailureConfigTable, pdnLinkFailureLOSPeriodBeforeSwitching=pdnLinkFailureLOSPeriodBeforeSwitching, pdnLinkFailureSfPeriodBeforeSwitching=pdnLinkFailureSfPeriodBeforeSwitching, pdnLinkFaultMgmtMIB=pdnLinkFaultMgmtMIB, pdnLinkFailureSdPeriodBeforeSwitching=pdnLinkFailureSdPeriodBeforeSwitching, pdnLinkFaultMgmtMIBConformance=pdnLinkFaultMgmtMIBConformance, pdnLinkFailureConfigEntry=pdnLinkFailureConfigEntry, pdnLinkFailureSdBerThreshold=pdnLinkFailureSdBerThreshold, PYSNMP_MODULE_ID=pdnLinkFaultMgmtMIB, pdnLinkFaultMgmtMIBObjects=pdnLinkFaultMgmtMIBObjects, pdnLinkFailureAISLPeriodBeforeSwitching=pdnLinkFailureAISLPeriodBeforeSwitching, pdnLinkFaultMgmtSwitchoverSelection=pdnLinkFaultMgmtSwitchoverSelection, pdnLinkFailureSfBerThreshold=pdnLinkFailureSfBerThreshold, pdnLinkFaultMgmtApsSelection=pdnLinkFaultMgmtApsSelection, pdnLinkSwitchoverGroup=pdnLinkSwitchoverGroup)
