#
# PySNMP MIB module Cisco90Series-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Cisco90Series-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:36:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, ObjectIdentity, enterprises, Bits, NotificationType, Unsigned32, TimeTicks, NotificationType, iso, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "ObjectIdentity", "enterprises", "Bits", "NotificationType", "Unsigned32", "TimeTicks", "NotificationType", "iso", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

ciscoTelesend = MibIdentifier((1, 3, 6, 1, 4, 1, 1570))
frMux = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1))
frxSys = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 1))
frxDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 2))
frxBank = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 3))
frxChUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 4))
frxMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 5))
frxPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1570, 1, 6))
frxSysDescr = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxSysDescr.setStatus('mandatory')
if mibBuilder.loadTexts: frxSysDescr.setDescription('Description of the Cisco 90 Series System.')
frxClockHour = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxClockHour.setStatus('mandatory')
if mibBuilder.loadTexts: frxClockHour.setDescription('Synchronized 24 hour clock for the Cisco 90 Series system - Hour. This clock is used by the channel units and BRITE cards to set the performance monitoring end-of-hour and end-of-day intervals.')
frxClockMin = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: frxClockMin.setDescription('Synchronized 24 hour clock for the Cisco 90 Series system - Minutes. This clock is used by the channel units and BRITE cards to set the performance monitoring end-of-hour and end-of-day intervals.')
frxClockSec = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxClockSec.setStatus('mandatory')
if mibBuilder.loadTexts: frxClockSec.setDescription('Synchronized 24 hour clock for the Cisco 90 Series system - Seconds. This clock is used by the channel units and BRITE cards to set the performance monitoring end-of-hour and end-of-day intervals.')
frxUpTime = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: frxUpTime.setDescription('Time since the agent was last initialized in 0.01 second increments.')
frxAdminContact = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxAdminContact.setStatus('mandatory')
if mibBuilder.loadTexts: frxAdminContact.setDescription('Cisco 90 Series administrative contact name.')
frxSysName = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxSysName.setStatus('mandatory')
if mibBuilder.loadTexts: frxSysName.setDescription('Administratively assigned name for this Cisco 90 Series agent.')
frxSysLoc = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxSysLoc.setStatus('mandatory')
if mibBuilder.loadTexts: frxSysLoc.setDescription('Physical location of the Cisco 90 Series agent.')
frxSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: frxSysVersion.setDescription('Cisco 90 Series Agent version number. The version number is an INTEGER representation of the actual version number string. The way to translate to a version number string is 200 = 2.0.0, 201 = 2.0.1, etc.')
frxUPerfTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableUPerfTrap", 1), ("disableUPerfTrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxUPerfTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: frxUPerfTrapEnable.setDescription('1=Enable sending the frxUPerfTrap trap to the SNMP manager when a performance monitoring threshold is crossed at an Cisco 90 Series channel unit or a downstream BRITE card. 2=Disable Trap.')
frxAgtLinkErrors = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtLinkErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frxAgtLinkErrors.setDescription('Number of Annex-D signaling link reliability errors between the Cisco 90 Series Agent and the Frame Relay Switch. A signaling reliability error is declared whenever the Cisco 90 Series Agent did not receive a reply from the frame relay switch in response to an Annex-D link integrity poll or full status inquiry poll')
frxAgtProtErrors = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtProtErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frxAgtProtErrors.setDescription('Number of Annex-D signaling protocol errors between the Cisco 90 Series Agent and the Frame Relay Switch. A signaling protocol error is declared whenever the Cisco 90 Series Agent receives a reply with incorrect format or sequence numbers from the frame relay switch in response to an Annex-D link integrity poll or full status inquiry poll')
frxAgtChInactive = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtChInactive.setStatus('mandatory')
if mibBuilder.loadTexts: frxAgtChInactive.setDescription('Number of times the Cisco 90 Series Agent Annex-D signaling channel was declared inactive.')
frxAgtChStatus = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxAgtChStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frxAgtChStatus.setDescription('Current status of the Annex-D signaling channel between the Cisco 90 Series Agent and the Frame Relay Switch.')
frxDefaultEnable = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableAutoLoad", 1), ("disableAutoLoad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDefaultEnable.setStatus('mandatory')
if mibBuilder.loadTexts: frxDefaultEnable.setDescription('1=Enable automatic loading of defaults (defined in this group) to the channel unit when the Download Configuration pushbutton on the channel unit faceplate is pushed. 2=Disable loading.')
frxDefaultTrap = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableConfigureTrap", 1), ("disableConfigureTrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDefaultTrap.setStatus('mandatory')
if mibBuilder.loadTexts: frxDefaultTrap.setDescription('1=Enable sending the frxDownloadTrap trap to the SNMP manager when the Download Configuration pushbutton on the channel unit faceplate is pushed. 2=Disable Trap')
frxDConfigSrc = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexD", 1), ("snmp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDConfigSrc.setStatus('mandatory')
if mibBuilder.loadTexts: frxDConfigSrc.setDescription('System default for frxConfigSrc - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. 1=Data rate and protocol set by Annex-D assignment rules. 2=Data rate and protocol set by the SNMP variables frxPortSpeed and frxPortProtocol')
frxDMgtT391 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtT391.setStatus('mandatory')
if mibBuilder.loadTexts: frxDMgtT391.setDescription('System Default for frxMgtT391 - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. This controls how often (in seconds) the channel units send an Annex-D poll to the frame relay switch. This is the Annex-D T391 parameter (Typical value 10)')
frxDMgtT392 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtT392.setStatus('mandatory')
if mibBuilder.loadTexts: frxDMgtT392.setDescription('System Default for frxMgtT392 - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. This controls how long (in seconds) the channel unit will wait for a subscriber to send it an Annex-D poll before declaring a link error from the subscriber. This is the Annex-D T392 parameter (Typical value 15)')
frxDMgtN391 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtN391.setStatus('mandatory')
if mibBuilder.loadTexts: frxDMgtN391.setDescription('System Default for frxMgtN391 - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. This controls how often the channel units send a full status inquiry poll to the frame relay switch instead of a link integrity verification poll. This is the Annex-D N391 parameter (Typical value 6)')
frxDMgtN392 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtN392.setStatus('mandatory')
if mibBuilder.loadTexts: frxDMgtN392.setDescription('System Default for frxMgtN392 - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. When more than frxMgtN392 errors are detected in any frxMgtN393 monitored Annex-D events, the network is declared inactive. This is the Annex-D N392 parameter (Typical value 3)')
frxDMgtN393 = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDMgtN393.setStatus('mandatory')
if mibBuilder.loadTexts: frxDMgtN393.setDescription('System Default for frxMgtN393 - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. When more than frxMgtN392 errors are detected in any frxMgtN393 monitored Annex-D events, the network is declared inactive. This is the Annex-D N393 parameter (Typical value 4)')
frxDPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("use56kbps", 1), ("use64kbps", 2), ("use128kbps", 3), ("use144kbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: frxDPortSpeed.setDescription('System Default for frxPortSpeed - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. This is the speed that the channel unit port runs at. 1=56kbps 2=64kbps 3=128kbps 4=144kbps')
frxDPortProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frameRelay", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDPortProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: frxDPortProtocol.setDescription('System Default for frxPortProtocol - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. 1=Port uses Frame Relay protocol 2=Port uses PPP protocol - do RFC-1973 encapsulation')
frxDCktCIR = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1544000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDCktCIR.setStatus('mandatory')
if mibBuilder.loadTexts: frxDCktCIR.setDescription('System Default for frxCktCIR - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. This is the committed information rate (CIR) in bits per second. (Typical value 1536000/#ports)')
frxDCktBc = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDCktBc.setStatus('mandatory')
if mibBuilder.loadTexts: frxDCktBc.setDescription('System Default for frxCktBc - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. This is the committed BurstSize (Bc) in bits. The time interval over which the burst is measured is Bc/CIR. (Typically set to same number as frxDCktCIR).')
frxDCktBe = MibScalar((1, 3, 6, 1, 4, 1, 1570, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777212))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxDCktBe.setStatus('mandatory')
if mibBuilder.loadTexts: frxDCktBe.setDescription('System Default for frxCktBe - used when the Download Configuration pushbutton on the channel unit faceplate is pushed and when frxDefaultEnable is set to 1. This is the excess BurstSize (Be) in bits. The time interval over which the excess burst is measured is Be/CIR. (Typical value 1536000).')
frxBankTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1), )
if mibBuilder.loadTexts: frxBankTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxBankTable.setDescription('This Cisco 90 Series Bank Di-group Table contains channel bank level information for each of the channel bank di-groups in the system. A di-group is a T1 interface to the frame relay network. The table is indexed using the Cisco 90 Series channel bank digroup number')
frxBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"))
if mibBuilder.loadTexts: frxBankEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxBankEntry.setDescription('A specific entry in the Cisco 90 Series Bank Di-group Table. There is one entry for each channel bank di-group (T1) in the system. There are no entries for unused banks')
frxBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBankIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frxBankIndex.setDescription('Channel Bank Di-group Number. This index is used to address the various channel banks in the system. This number is the same as the DLCI number used to communicate with the bank at the Cisco 90 SNMP Agent. (note that this is NOT the same as the DLCI number at the channel bank. The channel bank always uses DLCI 30 or 31 to communicate with the Agent.)')
frxBankType = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("d4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxBankType.setStatus('mandatory')
if mibBuilder.loadTexts: frxBankType.setDescription('This is the type of channel bank and is for future use. D4 banks return a value of 1.')
frxChUTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1), )
if mibBuilder.loadTexts: frxChUTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxChUTable.setDescription('This Cisco 90 Series Channel Unit Table contains channel unit level control and statistics for each of the Cisco 90 Series channel units in the system. The table is indexed first using the Cisco 90 Series channel bank digroup number, then the channel unit number (1 to 24).')
frxChUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxChUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxChUEntry.setDescription('A specific entry in the Cisco 90 Series Channel Unit Table. There is one entry for each Cisco 90 Series channel unit in the system. There are no entries for unused banks or empty channel unit slots')
frxChUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frxChUIndex.setDescription('Channel Unit Number. This index is used to address a specific channel unit in a bank. For D4 channel banks this number is the same as the physical slot number 1-24')
frxChUType = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("cisco90i", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChUType.setStatus('mandatory')
if mibBuilder.loadTexts: frxChUType.setDescription('Type of Cisco 90 Series channel unit installed.')
frxChUVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChUVersion.setStatus('mandatory')
if mibBuilder.loadTexts: frxChUVersion.setDescription('Cisco 90 Series channel unit version number.')
frxSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("annexD", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxSigProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: frxSigProtocol.setDescription('This is the type of Local In-channel Signaling used when the subscriber is running frame relay protocol. It is provided for future use. Set to 1 for T1.617 Annex-D')
frxConfigSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexD", 1), ("snmp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxConfigSrc.setStatus('mandatory')
if mibBuilder.loadTexts: frxConfigSrc.setDescription('Source for configuring speed and protocol for each port. 1=Data rate and protocol set by DLCI assignment rules as reported by Annex-D. This option allows control of these basic parameters from the frame relay switch management station instead of the Cisco 90 Series management station. 2=Data rate and protocol set by SNMP variables frxPortSpeed and frxPortProtocol')
frxDLCIAdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("twoOctetDlci", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDLCIAdLen.setStatus('mandatory')
if mibBuilder.loadTexts: frxDLCIAdLen.setDescription('The number of bytes used for the DLCI address. For future use. 1=two octets.')
frxNetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetInOctets.setDescription('Total number of octets received by this channel unit from Frame Relay Switch (on the T1 interface) Only frames whose DLCI is addressed to a port on this channel unit are counted. Bad frames, Annex-D and SNMP frames are not counted. CRC bytes are not counted')
frxNetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetOutOctets.setDescription('Total number of octets transmitted to the Frame Relay Switch (on the T1 interface) by this channel unit. Annex-D and SNMP frames are not counted. CRC bytes are not counted')
frxNetBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetBadFrames.setDescription('Total number of frames received on the network (T1) interface that are discarded by this channel unit. Possible reasons for discard are: Frame contained HDLC abort (7 or more ones in a row) Frame had a CRC error Frame had a non-integral number of bytes Frame was too short (less than 5 bytes) Frame was too long (more than 8192 bytes) Frame had bad RFC-1973 (PPP) header - this error only occurs if destination port is set for PPP protocol. Frame was discarded due to lack of buffer space. Only frames whose DLCI is addressed to a port on this channel unit are counted.')
frxNetHDLCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetHDLCEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetHDLCEs.setDescription('Network Errored Seconds caused by HDLC aborts (7 or more ones in a row). Total number of seconds in which a frame with an HDLC abort is received by this channel unit on the network (T1) interface. Only frames whose DLCI is addressed to a port on this channel unit are counted.')
frxNetCRCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetCRCEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetCRCEs.setDescription('Network Errored Seconds caused by CRC errors. Total number of seconds in which a frame with a CRC error is received by this channel unit on the network (T1) interface. Only frames whose DLCI is addressed to a port on this channel unit are counted.')
frxNetLinkEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetLinkEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetLinkEs.setDescription('Network Errored Seconds caused by Non-integral Bytes. Total number of seconds in which a frame with a non-integral number of bytes is received by this channel unit on the network (T1) interface. Only frames whose DLCI is addressed to a port on this channel unit are counted.')
frxNetFrShEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetFrShEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetFrShEs.setDescription('Network Errored Seconds caused by Short Frames received. Total number of seconds in which a frame that is too short (less than 5 bytes) is received by this channel unit on the network (T1) interface. Only frames whose DLCI is addressed to a port on this channel unit are counted.')
frxNetFrLgEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetFrLgEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetFrLgEs.setDescription('Network Errored Seconds caused by Long Frames received. Total number of seconds in which a frame that is too long (more than 8192 bytes) is received by this channel unit on the network (T1) interface. Only frames whose DLCI is addressed to a port on this channel unit are counted.')
frxNetPPPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetPPPEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetPPPEs.setDescription('Errored seconds caused by bad RFC-1973 (PPP) header. Total number of seconds in which a frame with an invalid RFC-1973 (PPP) header is received by this channel unit on the network (T1) interface. Only frames whose DLCI is addressed to a port that is set to PPP protocol and is on this channel unit are counted.')
frxNetBufEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetBufEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetBufEs.setDescription('Errored Seconds caused by Buffer Overflow. Total number of seconds in which a frame received by this channel unit on the network (T1) interface was discarded due to insufficient buffer space. Only frames whose DLCI is addressed to a port on this channel unit are counted.')
frxMgtTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1), )
if mibBuilder.loadTexts: frxMgtTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtTable.setDescription('This table monitors and controls the T1-617 Annex-D parameters used by the channel units. There is one table row for every channel unit in every bank. The table is indexed first using the Cisco 90 Series channel bank digroup number, then the channel unit number (1 to 24). For best performance, all of the channel units in a given bank should be set to identical values. These values are typically set using global parameters in the frxDefaultTable instead of directly via this table. ')
frxMgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxMgtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtEntry.setDescription('A specific entry in the Cisco 90 Series Management Table. There is one entry for each Cisco 90 Series channel unit in the system. There are no entries for unused banks or empty channel unit slots')
frxPortsInSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortsInSvc.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortsInSvc.setDescription('Ports in service. The number of ports on a Cisco 90 Series channel unit that have one or more active PVCs, as determined by Annex-D.')
frxMgtT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtT391.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtT391.setDescription('This controls how often (in seconds) the channel unit sends an Annex-D poll to the frame relay switch. This is the Annex-D T391 parameter (Typical value 10)')
frxMgtT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtT392.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtT392.setDescription('This controls how long (in seconds) the channel unit will wait for a subscriber to send it an Annex-D poll before declaring a link error from the subscriber. This is the Annex-D T392 parameter (Typical value 15)')
frxMgtN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtN391.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtN391.setDescription('This controls how often (in polls) the channel unit sends a full status inquiry poll to the frame relay switch instead of a link integrity verification poll. This is the Annex-D N391 parameter (Typical value 6)')
frxMgtN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtN392.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtN392.setDescription('When more than frxMgtN392 errors are detected in any frxMgtN393 monitored Annex-D events, the network is declared inactive. This is the Annex-D N392 parameter (Typical value 3)')
frxMgtN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxMgtN393.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtN393.setDescription('When more than frxMgtN392 errors are detected in any frxMgtN393 monitored Annex-D events, the network is declared inactive. This is the Annex-D N393 parameter (Typical value 4)')
frxNetLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetLinkErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetLinkErrors.setDescription('Number of signaling link reliability errors from network. A signaling reliability error is declared whenever the channel units did not receive a reply from the frame relay switch to an Annex-D link integrity poll or full status inquiry poll')
frxNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetProtErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetProtErrors.setDescription('Number of signaling protocol errors from network. A signaling protocol error is declared whenever the channel units receive a reply with incorrect format or sequence numbers from the frame relay switch in response to an Annex-D link integrity poll or full status inquiry poll')
frxNetChInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetChInactive.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetChInactive.setDescription('Number of times network Annex-D signaling channel was declared inactive.')
frxNetChStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxNetChStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frxNetChStatus.setDescription('Current status of the Annex-D signaling channel on the network side of the channel bank.')
frxMgtPortTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2), )
if mibBuilder.loadTexts: frxMgtPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtPortTable.setDescription('This table monitors the T1-617 Annex-D link between the channel units and the subscribers. There is one table row for every port on every channel unit in every bank. The table is indexed first using the channel bank digroup number, then the channel unit number (1 to 24), and then the port number (0 to 3).')
frxMgtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"))
if mibBuilder.loadTexts: frxMgtPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxMgtPortEntry.setDescription('A specific entry in the Cisco 90 Series Management Port Table. There is one entry for each port on each Cisco 90 Series channel unit in the system. There are no entries for unused banks or empty channel unit slots.')
frxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortIndex.setDescription('Which subscriber port on the channel unit is addressed. Ports are numbered from 0 to 3. Some channel unit types have less than 4 ports.')
frxPortLinkErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortLinkErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortLinkErrors.setDescription('Number of signaling link reliability errors from subscriber port. A signaling reliability error is declared whenever the channel units did not receive an Annex-D link integrity poll or full status inquiry poll from the subscriber port within the required time.')
frxPortProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortProtErrors.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortProtErrors.setDescription('Number of signaling protocol errors from subscriber port. A signaling protocol error is declared whenever the channel units receive an Annex-D link integrity poll or full status inquiry poll with incorrect format or sequence numbers from the subscriber port.')
frxPortChInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortChInactive.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortChInactive.setDescription('Number of times the subscriber port Annex-D signaling channel was declared inactive')
frxPortTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1), )
if mibBuilder.loadTexts: frxPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortTable.setDescription('This Cisco 90 Series Port Table contains per-port control and statistics for each of the subscriber ports in the system. The table is indexed first using the Cisco 90 Series channel bank digroup number, then by the channel unit number (1 to 24), and finally by the port number (0-3).')
frxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"))
if mibBuilder.loadTexts: frxPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortEntry.setDescription('A specific entry in the Cisco 90 Series Port Table. There is one entry for each port on each Cisco 90 Series channel unit in the system. There are no entries for unused banks or empty channel unit slots.')
frxPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("use56kbps", 1), ("use64kbps", 2), ("use128kbps", 3), ("use144kbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortSpeed.setDescription('This is the speed that the channel unit port runs at. 1=56kbps 2=64kbps 3=128kbps 4=144kbps This parameter can only be changed if frxConfigSrc is set to SNMP.')
frxPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frameRelay", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxPortProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortProtocol.setDescription('This parameter controls what protocol the channel unit should expect the subscriber to send on the port. 1=Port uses Frame Relay protocol - no encapsulation 2=Port uses PPP protocol - do RFC-1973 encapsulation This parameter can only be changed if frxConfigSrc is set to SNMP.')
frxDSLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopDown", 1), ("dslSyncOnly", 2), ("loopUpInactive", 3), ("loopUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLStatus.setDescription('This is the status of the DSL loop to the subscriber. 1=Loop is down. 2=Frx card has achieved physical layer activation with the first BRITE card or the NT1 if there are no BRITE cards. 3=Link is up but Annex-D is still inactive. The ACT bit has been exchanged with the NT1 indicating a clear channel path to the customer has been established. Ports running protocols (i.e. PPP) that do not support Annex-D will never be in this state. 4=Link is fully up. Annex-D (if appropriate) is active.')
frxPVCAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPVCAssigned.setStatus('mandatory')
if mibBuilder.loadTexts: frxPVCAssigned.setDescription('Number of PVCs assigned to Subscriber Port as determined by Annex-D')
frxLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: frxLastChange.setDescription('Time since DSL went in sync or lost sync in 0.01 second increments.')
frxBrite = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBrite.setStatus('mandatory')
if mibBuilder.loadTexts: frxBrite.setDescription('Number of BRITE cards downstream. BRITE cards are used to extend the loop over subscriber loop carrier systems and are detected via a background polling operation.')
frxDSLInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLInOctets.setDescription('Number of octets received from the subscriber DSL Does not include Annex-D octets')
frxDSLOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLOutOctets.setDescription('Number of octets transmitted to the subscriber DSL. Does not include Annex-D octets')
frxT1InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxT1InOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxT1InOctets.setDescription('Number of octets received from the network directed at this subscriber port')
frxT1OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxT1OutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxT1OutOctets.setDescription('Number of octets transmitted to the network from this subscriber port')
frxDSLBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLBadFrames.setDescription('Total number of frames received from this subscriber port that were discarded. Possible reasons for discard are: Frame contained HDLC abort (7 or more ones in a row) Frame had a CRC error Frame had a non-integral number of bytes Frame was too short (less than 5 bytes) Frame was too long (more than 8192 bytes) Frame had illegal DLCI (not 16-23) Frame was discarded due to lack of buffer space or due to congestion control')
frxDSLHDLCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLHDLCEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLHDLCEs.setDescription('Subscriber port Errored Seconds caused by HDLC aborts (7 or more ones in a row). Total number of seconds in which a frame with an HDLC abort is received from this port.')
frxDSLCRCEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLCRCEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLCRCEs.setDescription('Subscriber port Errored Seconds caused by CRC errors. Total number of seconds in which a frame with a CRC error is received from this port.')
frxDSLLinkEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLLinkEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLLinkEs.setDescription('Subscriber port Errored Seconds caused by Non-integral Bytes. Total number of seconds in which a frame with a non-integral number of bytes is received from this port.')
frxDSLFrShEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLFrShEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLFrShEs.setDescription('Subscriber port Errored Seconds caused by Short Frames. received Total number of seconds in which a frame that is too short (less than 5 bytes) is received from this port.')
frxDSLFrLgEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLFrLgEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLFrLgEs.setDescription('Subscriber port Errored Seconds caused by Long Frames received. Total number of seconds in which a frame that is too long (more than 8192 bytes) is received from this port.')
frxDSLDLCIEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxDSLDLCIEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxDSLDLCIEs.setDescription('Subscriber port Errored Seconds caused by illegal DLCI. Total number of seconds in which a frame that has a DLCI other than 16 to 23 (or 0) is received from this port.')
frxTxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxTxBuf.setStatus('mandatory')
if mibBuilder.loadTexts: frxTxBuf.setDescription('Number of octets in the transmit buffer for this subscriber port. This data is waiting to be sent to the network (T1).')
frxRxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxRxBuf.setStatus('mandatory')
if mibBuilder.loadTexts: frxRxBuf.setDescription('Number of octets in the receive buffer for this subscriber port. This data is from the network (T1) and is waiting to be sent to the subscriber port.')
frxPortNetEs = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPortNetEs.setStatus('mandatory')
if mibBuilder.loadTexts: frxPortNetEs.setDescription('Total number of seconds in which a frame received from the network (T1) and targeted at this subscriber port was discarded.')
frxCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2), )
if mibBuilder.loadTexts: frxCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxCircuitTable.setDescription('This Cisco 90 Series Circuit Table contains per-virtual-circuit control and statistics for each of the permanent virtual circuits in the system. The table is indexed first using the Cisco 90 Series channel bank digroup number, then by the channel unit number (1 to 24), then by the port number (0-3) and finally by the circuit DLCI number (16 to 23).')
frxCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"), (0, "Cisco90Series-MIB", "frxPvcIndex"))
if mibBuilder.loadTexts: frxCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxCircuitEntry.setDescription('A specific entry in the Cisco 90 Series Circuit Table. There is one entry for each permanent virtual circuit in the system. There are no entries for unused banks or empty channel unit slots.')
frxPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frxPvcIndex.setDescription('This index is the subscriber loop DLCI number of the permanent virtual circuit. It ranges from 16 to 23. The corresponding network side DLCI must be assigned in the frame relay switch and communicated to the Cisco 90 Series channel units via the Annex-D protocol before this element can be addressed.')
frxCktCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1544000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCktCIR.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktCIR.setDescription('This is the committed information rate (CIR) in bits per second for the addressed permanent virtual circuit. (Typical value 1536000/#ports).')
frxCktBc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCktBc.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktBc.setDescription('This is the Committed Burst Size (Bc) in bits for the addressed permanent virtual circuit. The time interval over which the burst is measured is Bc/CIR. (Typically set to same number as frxCktCIR).')
frxCktBe = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCktBe.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktBe.setDescription('This is the Excess Burst Size (Be) in bits for the addressed permanent virtual circuit. The time interval over which the excess burst is measured is Be/CIR. (Typical value 1536000).')
frxFarEndOpStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxFarEndOpStat.setStatus('mandatory')
if mibBuilder.loadTexts: frxFarEndOpStat.setDescription('This is the status of the far end of the frame relay permanent virtual circuit (through the frame relay network) as determined by Annex-D. 1=active 2=inactive')
frxCktInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktInOctets.setDescription('The number of input octets from the subscriber port on the addressed permanent virtual circuit. These octets are destined for the network (T1).')
frxCktOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktOutOctets.setDescription('The number of output octets to the subscriber port on the addressed permanent virtual circuit. These octets were received from the network (T1).')
frxCktInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktInFrames.setDescription('The number of input frames from the subscriber port on the addressed permanent virtual circuit. These frames are destined for the network (T1).')
frxCktOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktOutFrames.setDescription('The number of output frames to the subscriber port on the addressed permanent virtual circuit. These frames were received from the network (T1).')
frxCktDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCktDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frxCktDiscards.setDescription('The number of input frames from the subscriber port on the addressed permanent virtual circuit that were discarded due to congestion (lack of buffer space or congestion control.')
frxUEocTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3), )
if mibBuilder.loadTexts: frxUEocTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxUEocTable.setDescription('This Cisco 90 Series Embedded Operations Channel Table is used to diagnose and sectionalize problems with the subscriber loop. It contains one entry for each of the Cisco 90 Series channel units in the system. The table is indexed first using the Cisco 90 Series channel bank digroup number, then the channel unit number (1 to 24).')
frxUEocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxUEocEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxUEocEntry.setDescription('A specific entry in the Cisco 90 Series Embedded Operations Channel Table. There is one entry for each Cisco 90 Series channel unit in the system. There are no entries for unused banks or empty channel unit slots')
frxTestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxTestPort.setStatus('mandatory')
if mibBuilder.loadTexts: frxTestPort.setDescription('This parameter indicates which subscriber port on the channel unit to test. It has no effect until frxStartTest is set to start the test. Only one port on a given channel unit may be tested at a time.')
frxTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("loopbackAndBert", 1), ("bertOnly", 2), ("sendCorruptCRC", 3), ("loopbackOnly", 4), ("localLoopAllPorts", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxTestType.setStatus('mandatory')
if mibBuilder.loadTexts: frxTestType.setDescription('This parameter indicates the type of test to perform. It has no effect until frxStartTest is set to start the test. 1=Set up a loopback and run a PN-2047 Bit Error Rate Test. 2=Run a (straightaway) PN-2047 Bit Error Rate Test. This test assumes a loopback has been manually set up somewhere downstream or another test set running PN-2047 BERT is connected downstream. 3=Send corrupted CRC on the DSL. This has no effect on the frame relay CRC, only the out-of-band DSL CRC (used for performance monitoring) is corrupted. 4=Set up a loopback at the specified location to loop the frame relay or PPP data in both directions. 5=Setup a local loopback on all 4 ports. frxTestPort and frxLoopLoc are ignored for this test.')
frxLoopLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 1, 2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("localFrx", 7), ("briteCard1", 1), ("briteCard2", 2), ("briteCard3", 3), ("briteCard4", 4), ("briteCard5", 5), ("briteCard6", 6), ("nt1", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxLoopLoc.setStatus('mandatory')
if mibBuilder.loadTexts: frxLoopLoc.setDescription('This parameter indicates the location of the loopback or the card that will send corrupt CRC. It has no effect until frxStartTest is set to start the test. It has no effect for a BertOnly test. 7=Local Cisco 90 Series card 8=NT1 at customer premise 1 to 6 is used to address intervening BRITE cards.')
frxLoopCh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b1only", 1), ("b2only", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxLoopCh.setStatus('mandatory')
if mibBuilder.loadTexts: frxLoopCh.setDescription('This parameter indicates which channels to use for the loopbackOnly and localLoopAllPorts test. It has no effect until frxStartTest is set to start the test. Note that the loopbackAndBert test always loops all channels back. 1=B1 channel 2=B2 channel 3=All channels (includes all B channels plus all D channels')
frxStartTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopTest", 1), ("startTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxStartTest.setStatus('mandatory')
if mibBuilder.loadTexts: frxStartTest.setDescription('This parameter is used to start and stop the test. frxTestPort, frxTestType, frxLoopLoc, and frxLoopCh should be set up prior to starting the test. 1=stop test. 2=start test.')
frxBertRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetBert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxBertRst.setStatus('mandatory')
if mibBuilder.loadTexts: frxBertRst.setDescription('This parameter may be used during a LoopbackAndBert test or a BertOnly test to reset the frxBertBE counter. It must be returned to the normal posiion to allow errors to be counted. 1=normal. 2=Reset BERT counter.')
frxBertBE = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBertBE.setStatus('mandatory')
if mibBuilder.loadTexts: frxBertBE.setDescription('BERT test block errors')
frxBertTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxBertTestTime.setStatus('mandatory')
if mibBuilder.loadTexts: frxBertTestTime.setDescription('BERT test time in 0.01 second increments')
frxTestInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testInProgress", 1), ("normalOperation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxTestInProg.setStatus('mandatory')
if mibBuilder.loadTexts: frxTestInProg.setDescription('Test in progress (1); Normal operation (2)')
frxUThrTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4), )
if mibBuilder.loadTexts: frxUThrTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxUThrTable.setDescription('This table contains the U-interface Performance Monitoring Thresholds and Alarms for each of the subscriber loops in the system and for any BRITE cards extending those loops (e.g. using Subscriber Loop Carrier systems) The table is indexed first using the Cisco 90 Series channel bank digroup number, then the channel unit number (1 to 24), then the port number (0, 1, etc) and finally the location number (the BRITE card number (1 to 6) or 7 for local parameters in the Cisco 90 Series card). These registers are defined by Bellcore TR-TSY-000829.')
frxUThrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"), (0, "Cisco90Series-MIB", "frxPAddrIndex"))
if mibBuilder.loadTexts: frxUThrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxUThrEntry.setDescription('A specific entry in the U-interface Performance Monitoring Threshold table. There is one entry for each port on each Cisco 90 Series channel unit in the system and one entry for each BRITE card extending those ports. There are no entries for unused banks or empty channel unit slots')
frxPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("localFrx", 7), ("briteCard1", 1), ("briteCard2", 2), ("briteCard3", 3), ("briteCard4", 4), ("briteCard5", 5), ("briteCard6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frxPAddrIndex.setDescription('This is the physical location where the performance monitoring takes place. It may be set to localFrx(7) to access and control PM values local to the Cisco 90 Series channel unit. If there are BRITE cards in the subscriber loop between the Cisco 90 Series channel unit and the customer, PM values contained in those cards may be accessed using briteCard1(1) to briteCard6(6) where briteCard1 is the card closest to the Cisco 90 Series channel unit.')
frxChEsTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxChEsTh.setStatus('mandatory')
if mibBuilder.loadTexts: frxChEsTh.setDescription('Current Hour Errored Seconds threshold. This threshold is used for both the transmit and receive directions. When errors are detected that exceed this threshold and the corresponding bit in the frxAlertMask register is 0, the corresponding bit in the frxThCond register is set and a trap is generated (depending on the state of frxUPerfTrapEnable). Factory defaut is 40. Indexed by Bank.ChannelUnit.Port.Address')
frxCdEsTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCdEsTh.setStatus('mandatory')
if mibBuilder.loadTexts: frxCdEsTh.setDescription('Current Day Errored Seconds threshold. This threshold is used for both the transmit and receive directions. When errors are detected that exceed this threshold and the corresponding bit in the frxAlertMask register is 0, the corresponding bit in the frxThCond register is set and a trap is generated (depending on the state of frxUPerfTrapEnable). Factory defaut is 100. Indexed by Bank.ChannelUnit.Port.Address')
frxChSesTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxChSesTh.setStatus('mandatory')
if mibBuilder.loadTexts: frxChSesTh.setDescription('Current Hour Severely Errored Seconds threshold. This threshold is used for both the transmit and receive directions. When errors are detected that exceed this threshold and the corresponding bit in the frxAlertMask register is 0, the corresponding bit in the frxThCond register is set and a trap is generated (depending on the state of frxUPerfTrapEnable). Factory defaut is 10. Indexed by Bank.ChannelUnit.Port.Address')
frxCdSesTh = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxCdSesTh.setStatus('mandatory')
if mibBuilder.loadTexts: frxCdSesTh.setDescription('Current Day Severely Errored Seconds threshold. This threshold is used for both the transmit and receive directions. When errors are detected that exceed this threshold and the corresponding bit in the frxAlertMask register is 0, the corresponding bit in the frxThCond register is set and a trap is generated (depending on the state of frxUPerfTrapEnable). Factory defaut is 25. Indexed by Bank.ChannelUnit.Port.Address')
frxAlertMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxAlertMask.setStatus('mandatory')
if mibBuilder.loadTexts: frxAlertMask.setDescription('8-bit Alert Mask register. One bit for each threshold in both directions. When set to 1, the corresponding threshold crossing is ignored. When set to 0, the corresponding threshold crossing is indicated in frxThCond and may cause a trap to be sent depending on the state of frxUPerfTrapEnable. 1 Current Day Severely Errored Seconds Receive 2 Current Day Severely Errored Seconds Transmit 4 Current Day Errored Seconds Receive 8 Current Day Errored Seconds Receive 16 Current Hour Severely Errored Seconds Receive 32 Current Hour Severely Errored Seconds Transmit 64 Current Hour Errored Seconds Receive 128 Current Hour Errored Seconds Transmit Transmit is data from the customer towards the network. Receive is data from the network towards the Customer. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxThCond = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxThCond.setStatus('mandatory')
if mibBuilder.loadTexts: frxThCond.setDescription('8-bit Threshold Condition register. One bit for each threshold in both directions. Set to 1 if the threshold is exceeded and the corresponding bit in the frxAlertMask register is set to 0. Only set to 0 by the SNMP manager. 1 Current Day Severely Errored Seconds Receive 2 Current Day Severely Errored Seconds Transmit 4 Current Day Errored Seconds Receive 8 Current Day Errored Seconds Receive 16 Current Hour Severely Errored Seconds Receive 32 Current Hour Severely Errored Seconds Transmit 64 Current Hour Errored Seconds Receive 128 Current Hour Errored Seconds Transmit Receive is data from the customer towards the network. Transmit is data from the network towards the Customer. SNMP manager should reset bits to 0 after they it has been read by issuing a set using the inverted byte read. Sets will only reset bits where the set data is a 0. Setting a bit to a 1 has no effect. This register is defined by Bellcore TR-TSY-000829. In the spirit of SNMP, the bits are inverted when read relative to that specification so the sense of the bits is the same for sets and gets. Indexed by Bank.ChannelUnit.Port.Address')
frxUPerfTable = MibTable((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5), )
if mibBuilder.loadTexts: frxUPerfTable.setStatus('mandatory')
if mibBuilder.loadTexts: frxUPerfTable.setDescription('This table contains the U-interface Performance Monitoring Statistics for each of the subscriber loops in the system and for any BRITE cards extending those loops (e.g. using Subscriber Loop Carrier systems) The table is indexed first using the Cisco 90 Series channel bank digroup number, then the channel unit number (1 to 24), then the port number (0, 1, etc) and finally the location number (the BRITE card number (1 to 6) or 7 for local parameters in the Cisco 90 Series card). These registers are defined by Bellcore TR-TSY-000829.')
frxUPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1), ).setIndexNames((0, "Cisco90Series-MIB", "frxBankIndex"), (0, "Cisco90Series-MIB", "frxChUIndex"), (0, "Cisco90Series-MIB", "frxPortIndex"), (0, "Cisco90Series-MIB", "frxPAddrIndex"))
if mibBuilder.loadTexts: frxUPerfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frxUPerfEntry.setDescription('A specific entry in the U-interface Performance Monitoring Statistics table. There is one entry for each port on each Cisco 90 Series channel unit in the system and one entry for each BRITE card extending those ports. There are no entries for unused banks or empty channel unit slots')
frxResetPM = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetPM", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frxResetPM.setStatus('mandatory')
if mibBuilder.loadTexts: frxResetPM.setDescription('Reset all of the performance monitoring statistics on the specified Cisco 90 Series channel unit or BRITE card. 1=Normal. 2=Reset. There is no need to set this register back to Normal after doing a reset.')
frxPMtype = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segmentedPM", 1), ("pathPM", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPMtype.setStatus('mandatory')
if mibBuilder.loadTexts: frxPMtype.setDescription('Determines if the Cisco 90 Series channel unit or the downstream BRITE cards is doing segmented or path performance monitoring as specified in Bellcore document TR-NWT-000397. Only segmented performance monitoring should be used. In segmented PM, CRC errors are counted on each segment of the loop, instead of over the entire path. If no BRITE cards exist in the system, there is no difference between segmented and path PM 1=Segmented. 2=Path.')
frxChEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChEsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxChEsTx.setDescription('Current Hour Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxChEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChEsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxChEsRx.setDescription('Current Hour Errored Seconds - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxPhEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhEsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPhEsTx.setDescription('Previous Hour Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxPhEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhEsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPhEsRx.setDescription('Previous Hour Errored Seconds - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxH2EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH2EsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH2EsTx.setDescription('Errored Seconds 2 hours ago - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxH2EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH2EsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH2EsRx.setDescription('Errored Seconds 2 hours ago - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxH3EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH3EsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH3EsTx.setDescription('Errored Seconds 3 hours ago - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxH3EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH3EsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH3EsRx.setDescription('Errored Seconds 3 hours ago - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxH4EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH4EsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH4EsTx.setDescription('Errored Seconds 4 hours ago - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxH4EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH4EsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH4EsRx.setDescription('Errored Seconds 4 hours ago - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxH5EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH5EsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH5EsTx.setDescription('Errored Seconds 5 hours ago - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxH5EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH5EsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH5EsRx.setDescription('Errored Seconds 5 hours ago - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxH6EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH6EsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH6EsTx.setDescription('Errored Seconds 6 hours ago - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxH6EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH6EsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH6EsRx.setDescription('Errored Seconds 6 hours ago - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxH7EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH7EsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH7EsTx.setDescription('Errored Seconds 7 hours ago - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxH7EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH7EsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH7EsRx.setDescription('Errored Seconds 7 hours ago - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxH8EsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH8EsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH8EsTx.setDescription('Errored Seconds 8 hours ago - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxH8EsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxH8EsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxH8EsRx.setDescription('Errored Seconds 8 hours ago - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxCdEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdEsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxCdEsTx.setDescription('Current Day Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxCdEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdEsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxCdEsRx.setDescription('Current Day Errored Seconds - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxPdEsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdEsTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPdEsTx.setDescription('Previous Day Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxPdEsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdEsRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPdEsRx.setDescription('Previous Day Errored Seconds - Receive direction. Receive is data from the customer towards the network. Errored Seconds are seconds in which one or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxChSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChSesTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxChSesTx.setDescription('Current Hour Severely Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxChSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChSesRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxChSesRx.setDescription('Current Hour Severely Errored Seconds - Receive direction. Receive is data from the customer towards the network. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxPhSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhSesTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPhSesTx.setDescription('Previous Hour Severely Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address (note: DDS loops cannot detect transmit errors)')
frxPhSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhSesRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPhSesRx.setDescription('Previous Hour Severely Errored Seconds - Receive direction. Receive is data from the customer towards the network. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxCdSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdSesTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxCdSesTx.setDescription('Current Day Severely Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxCdSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxCdSesRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxCdSesRx.setDescription('Current Day Severely Errored Seconds - Receive direction. Receive is data from the customer towards the network. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxPdSesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdSesTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPdSesTx.setDescription('Previous Day Severely Errored Seconds - Transmit direction. Transmit is data from the network towards the customer. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxPdSesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPdSesRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPdSesRx.setDescription('Previous Day Severely Errored Seconds - Receive direction. Receive is data from the customer towards the network. Severely Errored Seconds are seconds in which three or more block errors occur. These errors are measured at the physical link level (e.g. DSL CRC or BPV errors) and not at the frame relay level. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxChBeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChBeTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxChBeTx.setDescription('Current Hour Block Errors - Transmit direction. Transmit is data from the network towards the customer. Block errors are 12 millisecond time periods in which a physical link level (e.g. DSL CRC or BPV) error occurs. These errors are not the same as frame relay level errors. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxChBeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxChBeRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxChBeRx.setDescription('Current Hour Block Errors - Receive direction. Receive is data from the customer towards the network. Block errors are 12 millisecond time periods in which a physical link level (e.g. DSL CRC or BPV) error occurs. These errors are not the same as frame relay level errors. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxPhBeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhBeTx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPhBeTx.setDescription('Previous Hour Block Errors - Transmit direction. Transmit is data from the network towards the customer. Block errors are 12 millisecond time periods in which a physical link level (e.g. DSL CRC or BPV) error occurs. These errors are not the same as frame relay level errors. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxPhBeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1570, 1, 6, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frxPhBeRx.setStatus('mandatory')
if mibBuilder.loadTexts: frxPhBeRx.setDescription('Previous Hour Block Errors - Receive direction. Receive is data from the customer towards the network. Block errors are 12 millisecond time periods in which a physical link level (e.g. DSL CRC or BPV) error occurs. These errors are not the same as frame relay level errors. This register is defined by Bellcore TR-TSY-000829. Indexed by Bank.ChannelUnit.Port.Address')
frxDownloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,1)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxDownloadTrap.setDescription('This trap is sent if the Download Config pushbutton on the channel unit faceplate is pushed and frxDefaultTrap is set to 1.')
frxUPerfTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,2)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxUPerfTrap.setDescription('This trap is sent if a performance monitoring threshold on a channel unit or a BRITE card is exceeded and the corresponding bit in the frxAlertMask is enabled and frxUPerfTrapEnable is enabled. The manager should read and clear all of the threshold condition registers for the specified channel unit to enable the trap to be sent again.')
frxInsertChUTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,3)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxInsertChUTrap.setDescription('This trap is sent when the channel unit is inserted.')
frxRemoveChUTrap = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,4)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxRemoveChUTrap.setDescription('This trap is sent when the channel unit is removed.')
frxDConfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 1570, 1) + (0,5)).setObjects(("Cisco90Series-MIB", "frxBankIndex"), ("Cisco90Series-MIB", "frxChUIndex"))
if mibBuilder.loadTexts: frxDConfigFailed.setDescription('This trap is sent if downloading configuration data to a channel unit fails.')
mibBuilder.exportSymbols("Cisco90Series-MIB", frMux=frMux, frxTestInProg=frxTestInProg, frxDPortProtocol=frxDPortProtocol, frxDSLCRCEs=frxDSLCRCEs, frxDefault=frxDefault, frxCktOutOctets=frxCktOutOctets, frxChBeRx=frxChBeRx, frxSigProtocol=frxSigProtocol, frxChUTable=frxChUTable, frxDMgtN391=frxDMgtN391, frxPortSpeed=frxPortSpeed, frxCktBc=frxCktBc, frxPhEsTx=frxPhEsTx, frxH2EsTx=frxH2EsTx, frxDMgtT392=frxDMgtT392, frxMgtEntry=frxMgtEntry, frxH7EsRx=frxH7EsRx, frxPortChInactive=frxPortChInactive, frxCktInFrames=frxCktInFrames, frxMgtN391=frxMgtN391, ciscoTelesend=ciscoTelesend, frxLoopLoc=frxLoopLoc, frxCircuitTable=frxCircuitTable, frxCdSesRx=frxCdSesRx, frxNetBadFrames=frxNetBadFrames, DisplayString=DisplayString, frxRxBuf=frxRxBuf, frxNetPPPEs=frxNetPPPEs, frxDSLFrLgEs=frxDSLFrLgEs, frxNetChStatus=frxNetChStatus, frxH2EsRx=frxH2EsRx, frxMgtN392=frxMgtN392, frxDSLDLCIEs=frxDSLDLCIEs, frxSys=frxSys, frxNetLinkErrors=frxNetLinkErrors, frxCktBe=frxCktBe, frxAgtProtErrors=frxAgtProtErrors, frxPVCAssigned=frxPVCAssigned, frxMgtPortEntry=frxMgtPortEntry, frxUPerfTrap=frxUPerfTrap, frxAgtChInactive=frxAgtChInactive, frxBertTestTime=frxBertTestTime, frxBankIndex=frxBankIndex, frxH4EsTx=frxH4EsTx, frxCdEsTh=frxCdEsTh, frxTestType=frxTestType, frxPort=frxPort, frxDMgtN392=frxDMgtN392, frxDMgtT391=frxDMgtT391, frxBrite=frxBrite, frxLoopCh=frxLoopCh, frxCdEsRx=frxCdEsRx, frxT1OutOctets=frxT1OutOctets, frxH3EsRx=frxH3EsRx, frxPortTable=frxPortTable, frxDSLStatus=frxDSLStatus, frxH7EsTx=frxH7EsTx, frxAgtChStatus=frxAgtChStatus, frxPdSesTx=frxPdSesTx, frxPortEntry=frxPortEntry, frxDSLOutOctets=frxDSLOutOctets, frxRemoveChUTrap=frxRemoveChUTrap, frxBankTable=frxBankTable, frxChUIndex=frxChUIndex, frxDefaultTrap=frxDefaultTrap, frxCdEsTx=frxCdEsTx, frxChEsTh=frxChEsTh, frxPvcIndex=frxPvcIndex, frxNetProtErrors=frxNetProtErrors, frxSysDescr=frxSysDescr, frxFarEndOpStat=frxFarEndOpStat, frxDCktCIR=frxDCktCIR, frxPortProtErrors=frxPortProtErrors, frxUThrTable=frxUThrTable, frxCdSesTx=frxCdSesTx, frxUThrEntry=frxUThrEntry, frxNetInOctets=frxNetInOctets, frxH5EsRx=frxH5EsRx, frxPortLinkErrors=frxPortLinkErrors, frxDCktBc=frxDCktBc, frxClockHour=frxClockHour, frxH6EsRx=frxH6EsRx, frxMgtPortTable=frxMgtPortTable, frxChSesTh=frxChSesTh, frxNetOutOctets=frxNetOutOctets, frxDConfigFailed=frxDConfigFailed, frxDownloadTrap=frxDownloadTrap, frxClockSec=frxClockSec, frxTxBuf=frxTxBuf, frxUEocEntry=frxUEocEntry, frxCktInOctets=frxCktInOctets, frxNetFrLgEs=frxNetFrLgEs, frxStartTest=frxStartTest, frxH5EsTx=frxH5EsTx, frxChEsTx=frxChEsTx, frxMgt=frxMgt, frxChUType=frxChUType, frxUPerfTrapEnable=frxUPerfTrapEnable, frxCdSesTh=frxCdSesTh, frxNetCRCEs=frxNetCRCEs, frxPhSesRx=frxPhSesRx, frxPortsInSvc=frxPortsInSvc, frxChUEntry=frxChUEntry, frxPortProtocol=frxPortProtocol, frxCircuitEntry=frxCircuitEntry, frxChEsRx=frxChEsRx, frxH8EsRx=frxH8EsRx, frxBankType=frxBankType, frxResetPM=frxResetPM, frxDSLHDLCEs=frxDSLHDLCEs, frxPMtype=frxPMtype, frxChSesTx=frxChSesTx, frxDefaultEnable=frxDefaultEnable, frxChUnit=frxChUnit, frxSysLoc=frxSysLoc, frxDMgtN393=frxDMgtN393, frxDCktBe=frxDCktBe, frxDPortSpeed=frxDPortSpeed, frxT1InOctets=frxT1InOctets, frxChUVersion=frxChUVersion, frxBertBE=frxBertBE, frxMgtT392=frxMgtT392, frxUEocTable=frxUEocTable, frxChSesRx=frxChSesRx, frxMgtN393=frxMgtN393, frxPdEsRx=frxPdEsRx, frxThCond=frxThCond, frxUpTime=frxUpTime, frxPortIndex=frxPortIndex, frxConfigSrc=frxConfigSrc, frxDSLInOctets=frxDSLInOctets, frxUPerfTable=frxUPerfTable, frxUPerfEntry=frxUPerfEntry, frxPdEsTx=frxPdEsTx, frxH3EsTx=frxH3EsTx, frxNetLinkEs=frxNetLinkEs, frxNetHDLCEs=frxNetHDLCEs, frxSysVersion=frxSysVersion, frxNetFrShEs=frxNetFrShEs, frxH4EsRx=frxH4EsRx, frxCktOutFrames=frxCktOutFrames, frxH6EsTx=frxH6EsTx, frxDSLLinkEs=frxDSLLinkEs, frxBankEntry=frxBankEntry, frxLastChange=frxLastChange, frxNetBufEs=frxNetBufEs, frxBertRst=frxBertRst, frxPhBeTx=frxPhBeTx, frxAgtLinkErrors=frxAgtLinkErrors, frxAdminContact=frxAdminContact, frxDSLFrShEs=frxDSLFrShEs, frxMgtTable=frxMgtTable, frxDConfigSrc=frxDConfigSrc, frxInsertChUTrap=frxInsertChUTrap, frxPAddrIndex=frxPAddrIndex, frxPhBeRx=frxPhBeRx, frxClockMin=frxClockMin, frxSysName=frxSysName, frxCktDiscards=frxCktDiscards, frxPhSesTx=frxPhSesTx, frxCktCIR=frxCktCIR, frxNetChInactive=frxNetChInactive, frxAlertMask=frxAlertMask, frxMgtT391=frxMgtT391, frxDSLBadFrames=frxDSLBadFrames, frxBank=frxBank, frxPdSesRx=frxPdSesRx, frxPortNetEs=frxPortNetEs, frxChBeTx=frxChBeTx, frxTestPort=frxTestPort, frxDLCIAdLen=frxDLCIAdLen, frxH8EsTx=frxH8EsTx, frxPhEsRx=frxPhEsRx)
