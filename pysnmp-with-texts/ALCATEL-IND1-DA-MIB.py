#
# PySNMP MIB module ALCATEL-IND1-DA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-DA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:17:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Da, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Da")
TmnxEncapVal, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxEncapVal")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddressIPv4, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, TimeTicks, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, ModuleIdentity, MibIdentifier, Counter64, iso, ObjectIdentity, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "ModuleIdentity", "MibIdentifier", "Counter64", "iso", "ObjectIdentity", "IpAddress", "NotificationType")
TimeStamp, RowStatus, MacAddress, DateAndTime, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "MacAddress", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")
alcatelIND1DaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1))
alcatelIND1DaMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1DaMIB.setRevisionsDescriptions(('DA module is taking care of the authentication and classification of MACs on a DA port. The pkts from the MAC would be allowed to enter the network only if the authentication and/or classification is done by the DA task.',))
if mibBuilder.loadTexts: alcatelIND1DaMIB.setLastUpdated('201008160000Z')
if mibBuilder.loadTexts: alcatelIND1DaMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1DaMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1DaMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alaIND1DaMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0))
if mibBuilder.loadTexts: alaIND1DaMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBNotifications.setDescription('Branch For DA Subsystem Notifications.')
alaIND1DaMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1))
if mibBuilder.loadTexts: alaIND1DaMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBObjects.setDescription('Branch For DA Subsystem Managed Objects.')
alaIND1DaMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2))
if mibBuilder.loadTexts: alaIND1DaMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBConformance.setDescription('Branch for DA Module MIB Subsystem Conformance Information.')
alaIND1DaMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1))
if mibBuilder.loadTexts: alaIND1DaMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBGroups.setDescription('Branch for DA Module MIB Subsystem Units of Conformance.')
class AlaDaClassificationPolicyType(TextualConvention, Integer32):
    description = 'This policy type is the classification policy used to classify a device onto the system. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))
    namedValues = NamedValues(("authPassAltUnp", 1), ("authPassDefUnp", 2), ("authPassSrvUnp", 3), ("noAuthMacRuleUnp", 4), ("noAuthMacRangeRuleUnp", 5), ("noAuthIpRuleUnp", 6), ("authFailDefUnp", 7), ("authFailMacRuleUnp", 8), ("authFailMacRangeRuleUnp", 9), ("authFailIpRuleUnp", 10), ("authFailRuleDefUnp", 11), ("authFailMacRangeVlanTagRuleUnp", 12), ("tagAuthFailMacRuleUnp", 13), ("tagAuthFailMacVlanTagRuleUnp", 14), ("tagAuthFailMacRangeRuleUnp", 15), ("tagAuthFailMacRangeVlanTagRuleUnp", 16), ("tagAuthFailIpRuleUnp", 17), ("tagAuthFailIpVlanTagRuleUnp", 18), ("tagAuthFailVlanTagRuleUnp", 19), ("tagAuthPassAltUnp", 20), ("tagAuthPassDefUnp", 21), ("tagAuthPassSrvUnp", 22), ("tagMacRuleUnp", 23), ("tagMacVlanTagRuleUnp", 24), ("tagMacRangeRuleUnp", 25), ("tagMacRangeVlanTagRuleUnp", 26), ("tagIpRuleUnp", 27), ("tagIpVlanTagRuleUnp", 28), ("tagVlanTagRuleUnp", 29), ("tagRuleDefUnp", 30), ("authPassDefUnpBlk", 31), ("authFailDefUnpBlk", 32), ("authFailRuleDefUnpBlk", 33), ("tagAuthPassDefUnpBlk", 34), ("tagRuleDefUnpBlk", 35), ("authPassSrvUnpTagMismatchBlk", 36), ("authPassAltUnpTagMismatchBlk", 37), ("authPassDefUnpTagMismatchBlk", 38), ("authFailMacRuleUnpTagMismatchBlk", 39), ("authFailMacVlanRuleUnpTagMismatchBlk", 40), ("authFailMacRangeRuleUnpTagMismatchBlk", 41), ("authFailMacRangeVlanRuleUnpTagMismatchBlk", 42), ("authFailIpRuleUnpTagMismatchBlk", 43), ("authFailIpVlanRuleUnpTagMismatchBlk", 44), ("authFailVlanRuleUnpTagMismatchBlk", 45), ("defUnpBlk", 46), ("authPassSrvUnpBlk", 47), ("authPassAltUnpBlk", 48), ("authFailMacRuleUnpBlk", 49), ("authFailMacRangeRuleUnpBlk", 50), ("authFailIpRuleUnpBlk", 51), ("tagMacRuleUnpBlk", 52), ("tagMacVlanTagRuleUnpBlk", 53), ("tagMacRangeRuleUnpBlk", 54), ("tagMacRangeVlanTagRuleUnpBlk", 55), ("tagIpRuleUnpBlk", 56), ("tagIpVlanTagRuleUnpBlk", 57), ("tagVlanTagRuleUnpBlk", 58), ("authSrvDownUnpTagMismatchBlk", 59), ("noMatchingUnpBlk", 60), ("trustTag", 61), ("authSrvDownUnp", 62), ("defUnp", 63), ("lpsUnpBlk", 64), ("sysDefSpb", 65), ("defSpbProfile", 66), ("noSpbResource", 67))

class AlaDaAuthenticationType(TextualConvention, Integer32):
    description = 'The type of authentication used'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAuthentication", 1), ("dot1XAuthentication", 2), ("macAuthentication", 3), ("captivePortal", 4))

class AlaDaAuthenticationResult(TextualConvention, Integer32):
    description = 'The result of the authentication. If the AlaDaAuthenticationType of this device is noAuthentication then this object will return notApplicable. If the authentication has not completed then this object will return inProgress.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("inProgress", 1), ("success", 2), ("fail", 3))

class AlaDaMacLearntState(TextualConvention, Integer32):
    description = 'The state of MAC address in the system'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("bridging", 0), ("filtering", 1))

class AlaMultiChassisConfigStatus(TextualConvention, Integer32):
    description = 'The status of Multi-Chassis consistency check. If no MCLAG involved then status is local to the switch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("sync", 2), ("outOfSync", 3))

alaDaUserNetProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1), )
if mibBuilder.loadTexts: alaDaUserNetProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileTable.setDescription('This table stores the UNP profiles created in the system. The entries would be mapped to vlan ID which would be used by device authentication for classifying users.')
alaDaUserNetProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileName"))
if mibBuilder.loadTexts: alaDaUserNetProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileEntry.setDescription('User Network Profile entry')
alaDaUserNetProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUserNetProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileName.setDescription('The name of this profile.')
alaDaUserNetProfileVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileVlanID.setDescription('The VLAN id for this profile.')
alaDaUserNetProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileRowStatus.setDescription('The status of this table entry.')
alaDaUserNetProfileQosPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileQosPolicyListName.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileQosPolicyListName.setDescription('The name of the QoS Policy List name that will be used if this User Network Profile is applied for a given device along with alaDaUserNetProfileVlanID.')
alaDaUserNetProfileMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUserNetProfileMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUserNetProfileSaaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileSaaProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileSaaProfileName.setDescription('The name of the SAA profile that is associated to this profile.')
alaDaUNPIpNetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2), )
if mibBuilder.loadTexts: alaDaUNPIpNetRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleTable.setDescription('A list of IP network address rules. This is used to match the InetAddress of a packet to a User Network Profile entry.')
alaDaUNPIpNetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleMask"))
if mibBuilder.loadTexts: alaDaUNPIpNetRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleEntry.setDescription('An IP network address rule entry.')
alaDaUNPIpNetRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddrType.setDescription('The IP network address type used for VLAN classification. For now Only IPv4 is supported.')
alaDaUNPIpNetRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddr.setDescription('The IP network address used for VLAN classification. Only IPv4 is supported.')
alaDaUNPIpNetRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMask.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMask.setDescription('The IP network mask applying to the IP network address.')
alaDaUNPIpNetRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPIpNetRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts. Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPIpNetRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPIpNetRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 7), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3), )
if mibBuilder.loadTexts: alaDaUNPMacRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleTable.setDescription('A list of MAC address rules. This is used to match the MAC Address of a packet to a User Network Profile entry ')
alaDaUNPMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleAddr"))
if mibBuilder.loadTexts: alaDaUNPMacRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleEntry.setDescription('A MAC rule entry.')
alaDaUNPMacRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaDaUNPMacRuleAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleAddr.setDescription('The MAC address used for VLAN classification.')
alaDaUNPMacRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPMacRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts. Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPMacRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPMacRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPMacRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPMacRangeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4), )
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleTable.setDescription('A list of MAC range rules. This is used to match the MAC Address Range of a packet to a User Network Profile entry.')
alaDaUNPMacRangeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleLoAddr"))
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleEntry.setDescription('A MAC range rule entry.')
alaDaUNPMacRangeRuleLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleLoAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleLoAddr.setDescription('The lower bound of MAC address range used for VLAN classification.')
alaDaUNPMacRangeRuleHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleHiAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleHiAddr.setDescription('The upper bound of MAC address range used for VLAN classification.')
alaDaUNPMacRangeRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPMacRangeRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts. The range states the valid vlan range in the system. Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPMacRangeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPMacRangeRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 6), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPVlanTagRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5), )
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleTable.setDescription('A list of Vlan Tag based classification rules. This is used to match the vlan tag in a packet to a User Network Profile entry ')
alaDaUNPVlanTagRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleVlan"))
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleEntry.setDescription('A Vlan Tag rule entry.')
alaDaUNPVlanTagRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleVlan.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleVlan.setDescription('The Vlan Tag used for VLAN classification. The range states the valid Vlan range in the system.')
alaDaUNPVlanTagRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPVlanTagRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPVlanTagRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 4), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaMacUserTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6), )
if mibBuilder.loadTexts: alaDaMacUserTable.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserTable.setDescription('A table of MAC address learned on an UNP port.')
alaDaMacUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaMacUserIntfNum"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacUserMACAddress"))
if mibBuilder.loadTexts: alaDaMacUserEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserEntry.setDescription('Non 802.1x supplicant information.')
alaDaMacUserIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDaMacUserIntfNum.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserIntfNum.setDescription('The ifIndex representing the slot and port where the non 802.1x supplicant is learned.')
alaDaMacUserMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaMacUserMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserMACAddress.setDescription('The MAC address of the non 802.1x supplicant.')
alaDaMacUserVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserVlanID.setDescription('The Id of the VLAN on which the non 802.1x supplicant is learned.')
alaDaAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("authenticated", 3), ("failed", 4), ("failedTimeout", 5), ("failedNoServer", 6), ("failedNoResources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaAuthenticationStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaAuthenticationStatus.setDescription('Authentication status of the non 802.1x supplicant.')
alaDaMacUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserIpAddress.setDescription('The ip address from which the mac user is sending the packets')
alaDaMacUserUnpUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserUnpUsed.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserUnpUsed.setDescription('The UNP used for classifying the mac user')
alaDaMacUserLoginTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserLoginTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserLoginTimeStamp.setDescription('The Login time stamp of the mac user')
alaDaMacUserAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("macAuthentication", 0), ("others", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserAuthtype.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserAuthtype.setDescription('The authentication type of the mac user')
alaDaMacUserClassificationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 9), AlaDaClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserClassificationSource.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserClassificationSource.setDescription('Classification policy under which the non 802.1x supplicant is learned.')
alaDaUNPPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7), )
if mibBuilder.loadTexts: alaDaUNPPortTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTable.setDescription('A table of system level information for each port supported by the Port Access Entity. An entry appears in this table for each port of this system.')
alaDaUNPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortIfIndex"))
if mibBuilder.loadTexts: alaDaUNPPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortEntry.setDescription('Each of these entries represents a user port on which UNP is enabled and their configuration.')
alaDaUNPPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaDaUNPPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortIfIndex.setDescription('The interface index of the UNP enabled port.')
alaDaUNPPortDefaultProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDefaultProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortDefaultProfileName.setDescription('The default UNP name.')
alaDaUNPPortPassAltProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortPassAltProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortPassAltProfileName.setDescription('The Pass alternate UNP name.')
alaDaUNPPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRowStatus.setDescription('The status of this table entry.')
alaDaUNPPortMacAuthFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortMacAuthFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMacAuthFlag.setDescription('The flag to indicate if MAC AUTH is enabled on port.')
alaDaUNPPortClassificationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortClassificationFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortClassificationFlag.setDescription('The flag to indicate if Classification is enabled on port.')
alaDaUNPPortTrustTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTrustTagStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTrustTagStatus.setDescription('The flag to indicate whether the vlan tag in the incoming packet could be used for classifying the user when mac authentication fails and classification rules dont match.')
alaDaUNPPortMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 8), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPPortCustomerDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortCustomerDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortCustomerDomainId.setDescription('The Customer Domain that this port belongs to. Default is on domain 0.')
alaDaUNPPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridgePort", 1), ("spbAccessPort", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortType.setDescription('The object defines the port as UNP enable bridge port (1), spb-access-port (2).')
alaDaUNPPortPassAltSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortPassAltSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortPassAltSpbProfileName.setDescription('The Pass alternate Spb Profile name. This is to be used on a successful authentication and there is no SPB profile passed back from the Authentication Server.')
alaDaUNPPortDefaultSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDefaultSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortDefaultSpbProfileName.setDescription('The default Spb Profile name.')
alaDaUNPGlobalConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8))
alaDaUNPDynamicVlanConfigFlag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPDynamicVlanConfigFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicVlanConfigFlag.setDescription('Indicated whether dynamic vlan configuration is enabled or not.')
alaDaUNPAuthServerDownUnp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUnp.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUnp.setDescription('The UNP to be used for classification if the authentication server is not reachable.')
alaDaUNPAuthServerDownTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(60)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeout.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeout.setDescription('The timeout, in seconds, after which all the users learned in the auth-server-down UNP will be sent for re-authentication.')
alaDaUNPDynamicVlanMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 4), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPDynamicVlanMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicVlanMCLagConfigStatus.setDescription('Indicated whether dynamic vlan configuration is sync across both MCLAG chassis or not. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPAuthServerDownUNPMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUNPMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUNPMCLagConfigStatus.setDescription('Indicated whether Auth server down UNP config is sync across both MCLAG chassis or not. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPAuthServerDownTimeoutMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 6), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeoutMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeoutMCLagConfigStatus.setDescription('Indicated whether Auth server down timeout config is sync across both MCLAG chassis or not. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPDynamicProfileConfigFlag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigFlag.setDescription('Indicated whether dynamic profile configuration is enabled or not.')
alaDaUNPDynamicProfileConfigMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 8), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigMCLagConfigStatus.setDescription('Indicated whether dynamic profile creation is sync across both MCLAG chassis or not.')
alaDaUNPReloadVsiTypeDB = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPReloadVsiTypeDB.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPReloadVsiTypeDB.setDescription('The object triggers the system to reload the VSI Type DB from flash. Once the operation is done it is reset to zero (0).')
alaDaMacVlanUserTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9), )
if mibBuilder.loadTexts: alaDaMacVlanUserTable.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserTable.setDescription('A table of non 802.1x supplicants learned on 802.1x authenticated ports.')
alaDaMacVlanUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserIntfNum"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserMACAddress"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserVlanID"))
if mibBuilder.loadTexts: alaDaMacVlanUserEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserEntry.setDescription('Non 802.1x supplicant information.')
alaDaMacVlanUserIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDaMacVlanUserIntfNum.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserIntfNum.setDescription('The ifIndex representing the slot and port where the non 802.1x supplicant is learned.')
alaDaMacVlanUserMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaMacVlanUserMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserMACAddress.setDescription('The MAC address of the non 802.1x supplicant.')
alaDaMacVlanUserVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: alaDaMacVlanUserVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserVlanID.setDescription('The Id of the VLAN on which the non 802.1x supplicant is learned.')
alaDaMacVlanUserAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("authenticated", 3), ("failed", 4), ("failedTimeout", 5), ("failedNoServer", 6), ("failedNoResources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthStatus.setDescription('Authentication status of the non 802.1x supplicant.')
alaDaMacVlanUserIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddressType.setDescription('The type of the IP address of the user. For now only IPv4 is supported.')
alaDaMacVlanUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddress.setDescription('The ip address from which the mac user is sending the packets')
alaDaMacVlanUserUnpUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserUnpUsed.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserUnpUsed.setDescription('The UNP used for classifying the mac user')
alaDaMacVlanUserLoginTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserLoginTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserLoginTimeStamp.setDescription('The Login time stamp of the mac user')
alaDaMacVlanUserAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("macAuthentication", 0), ("others", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthtype.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthtype.setDescription('The authentication type of the mac user')
alaDaMacVlanUserClassificationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 10), AlaDaClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserClassificationSource.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserClassificationSource.setDescription('Classification policy under which the non 802.1x supplicant is learned.')
alaDaMacVlanUserMCLagLearningLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserMCLagLearningLoc.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserMCLagLearningLoc.setDescription('Source of Learning. Informs whether the Mac was learnt locally or through remote.')
alaDaUNPNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10))
unpMcLagMacIgnored = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0, 1)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpSourceIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpNativeVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMCLAGId"))
if mibBuilder.loadTexts: unpMcLagMacIgnored.setStatus('current')
if mibBuilder.loadTexts: unpMcLagMacIgnored.setDescription('This trap is generated if a MAC/User is dropped due to vlan not existing or UNP is not enabled on the MCLAG')
unpMcLagConfigInconsistency = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0, 2)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpCommandType"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpName"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr1"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr2"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpMask"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMCLAGId"))
if mibBuilder.loadTexts: unpMcLagConfigInconsistency.setStatus('current')
if mibBuilder.loadTexts: unpMcLagConfigInconsistency.setDescription('This trap is generated when configuration becomes Out_of_Sync.')
alaDaUnpMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMacAddr.setDescription('The mac which failed to get configured on peer chassis.')
alaDaUnpSourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpSourceIpAddr.setDescription('The ip-address of mac which failed to get configured on peer chassis.')
alaDaUnpNativeVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpNativeVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpNativeVlan.setDescription('The native vlan of MCLAG on which the mac ingressed.')
alaDaUnpVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpVlan.setDescription('The vlan on which mac was classified on local chassis')
alaDaUnpMCLAGId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMCLAGId.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMCLAGId.setDescription('The lag id for MCLAG')
alaDaUnpCommandType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unpConfigCmd", 1), ("macRuleConfigCmd", 2), ("macRangeRuleConfigCmd", 3), ("ipRuleConfigCmd", 4), ("vlanTagRuleConfigCmd", 5), ("authServerUnpConfigCmd", 6), ("authServerTimerConfigCmd", 7), ("dynamicVlanConfigCmd", 8), ("lagConfigCmd", 9), ("dynamicProfileConfigCmd", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpCommandType.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCommandType.setDescription('Indicates which configuration command is out-of-sync')
alaDaUnpName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpName.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpName.setDescription('Indicates which unp profile is out-of-sync. If there is no UNP Profile associated then zero length string is sent')
alaDaUnpMacAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMacAddr1.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMacAddr1.setDescription('The mac for mac rule or the lower limit of mac-range rule.')
alaDaUnpMacAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 9), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMacAddr2.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMacAddr2.setDescription('The upper limit of mac-range rule.')
alaDaUnpIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 10), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpIpAddr.setDescription('The ip-address in ip-rule')
alaDaUnpIpMask = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 11), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpIpMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpIpMask.setDescription('The ip-address in ip-rule')
alaDaUnpVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpVlanTag.setDescription('The vlan vlan-tag rule. Zero value means it is not applicable')
alaDaUnpCustomerDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11), )
if mibBuilder.loadTexts: alaDaUnpCustomerDomainTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainTable.setDescription('This table creates and deletes the UNP group within a switch.')
alaDaUnpCustomerDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainId"))
if mibBuilder.loadTexts: alaDaUnpCustomerDomainEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainEntry.setDescription('UNP Group: entry')
alaDaUnpCustomerDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUnpCustomerDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainId.setDescription('The Customer Domain ID. Domain ID zero (0) is the default and is always present in the switch.')
alaDaUnpCustomerDomainDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUnpCustomerDomainDesc.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainDesc.setDescription('A field to provide meaningful description of the Customer Domain for easy identification of the domain.')
alaDaUnpCustomerDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUnpCustomerDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainRowStatus.setDescription('The status of this table entry.')
alaDaSpbProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12), )
if mibBuilder.loadTexts: alaDaSpbProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileTable.setDescription('This table stores the Service Classification profiles created in the system. The entries provides information to classify device in the Service domain.')
alaDaSpbProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaSpbProfileName"))
if mibBuilder.loadTexts: alaDaSpbProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileEntry.setDescription('Service Classification Profile entry')
alaDaSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileName.setDescription('The name of this profile.')
alaDaSpbProfileEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 2), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileEncapVal.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileEncapVal.setDescription('The encapsulation to be used for the SAP connecting to the service.')
alaDaSpbProfileQosPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileQosPolicyListName.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileQosPolicyListName.setDescription('The name of the QoS Policy List name that will be used if this User Network Profile is applied for a given device along with alaDaSpbProfileVlanID.')
alaDaSpbProfileIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileIsid.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileIsid.setDescription('The object represnet the I-SID that is to be dynamically created when alaDaSpbProfileServiceID does not exist in the system and must be used along with alaDaSpbProfileBVlan.')
alaDaSpbProfileBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileBVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileBVlan.setDescription('The Backbone VLAN ID (BVLAN) used for the I-SID specified in alaDaSpbProfileIsid. This object must be specified along with alaDaSpbProfileIsid.')
alaDaSpbProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileRowStatus.setDescription('The row status of this table entry.')
alaDaSpbProfileMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("headend", 1), ("tandem", 2))).clone('headend')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileMulticastMode.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileMulticastMode.setDescription('To configure the multicast replication mode for each service: Head-end(1) where a non-unicast packet entering the SAP port is replicated once for each receiver in the b-domain using its unicast BMAC. Tandem(2) where a non-unicast packet entering the SAP port is replicated once at each node using the multicast group address.')
alaDaSpbProfileSapVlanXlation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileSapVlanXlation.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileSapVlanXlation.setDescription('To enable/disable the vlan translation for all the SAPs configured in this service if the corresponding access ports for the SAPs also has the vlan translation enabled.')
alaDaUNPCustDomainEvbGpIdRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13), )
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleTable.setDescription('A list of EVB group ID based classification rules. This is used to match the EVB Group ID passed from EVB to a User Network Profile entry ')
alaDaUNPCustDomainEvbGpIdRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleGroupId"))
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleEntry.setDescription('A EVB Group ID rule entry.')
alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId.setDescription('The UNP Customer Domain ID that will be used for profile lookup.')
alaDaUNPCustDomainEvbGpIdRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleGroupId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleGroupId.setDescription('The EVB Group ID used for profile lookup.')
alaDaUNPCustDomainEvbGpIdRuleVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleVlanProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleVlanProfileName.setDescription('The VLAN profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainEvbGpIdRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleSpbProfileName.setDescription('The SBP profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainEvbGpIdRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainVlanTagRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14), )
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTable.setDescription("A list of Customer Domain and Vlan Tag based classification rules. This is used to match the vlan tag in a packet and the port's UNP Customer Domain to a User Network Profile entry ")
alaDaUNPCustDomainVlanTagRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleVlan"))
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleEntry.setDescription('A Vlan Tag rule entry.')
alaDaUNPCustDomainVlanTagRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainVlanTagRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlan.setDescription('The Vlan Tag used for VLAN classification. The range states the valid Vlan range in the system.')
alaDaUNPCustDomainVlanTagRuleVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlanProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlanProfileName.setDescription('The VLAN profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainVlanTagRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainVlanTagRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleSpbProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainVlanTagRuleTagPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("outerTag", 1), ("innerTag", 2))).clone('outerTag')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTagPosition.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTagPosition.setDescription('This object specify the tag position to apply this Vlan Tag rule for double tagged frames.')
alaDaUNPCustDomainIpNetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15), )
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleTable.setDescription('A list of IP network address rules. This is used to match the InetAddress of a packet to a User Network Profile entry.')
alaDaUNPCustDomainIpNetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleMask"))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleEntry.setDescription('An IP network address rule entry.')
alaDaUNPCustDomainIpNetRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainIpNetRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddrType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddrType.setDescription('The IP network address type used for VLAN classification. For now Only IPv4 is supported.')
alaDaUNPCustDomainIpNetRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddr.setDescription('The IP network address used for VLAN classification. Only IPv4 is supported.')
alaDaUNPCustDomainIpNetRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMask.setDescription('The IP network mask applying to the IP network address.')
alaDaUNPCustDomainIpNetRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainIpNetRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts. Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPCustDomainIpNetRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainIpNetRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 8), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainIpNetRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleSpbProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16), )
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleTable.setDescription('A list of MAC address rules. This is used to match the MAC Address of a packet to a User Network Profile entry ')
alaDaUNPCustDomainMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleAddr"))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleEntry.setDescription('A MAC rule entry.')
alaDaUNPCustDomainMacRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainMacRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleAddr.setDescription('The MAC address used for VLAN classification.')
alaDaUNPCustDomainMacRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainMacRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts. Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPCustDomainMacRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainMacRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 6), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainMacRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleSpbProfileName.setDescription('The SBP profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainMacRangeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17), )
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleTable.setDescription('A list of MAC range rules. This is used to match the MAC Address Range of a packet to a User Network Profile entry.')
alaDaUNPCustDomainMacRangeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleLoAddr"))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleEntry.setDescription('A MAC range rule entry.')
alaDaUNPCustDomainMacRangeRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainMacRangeRuleLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleLoAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleLoAddr.setDescription('The lower bound of MAC address range used for VLAN classification.')
alaDaUNPCustDomainMacRangeRuleHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleHiAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleHiAddr.setDescription('The upper bound of MAC address range used for VLAN classification.')
alaDaUNPCustDomainMacRangeRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfileName.setDescription('The profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainMacRangeRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts. The range states the valid vlan range in the system. Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPCustDomainMacRangeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 7), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local. Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainMacRangeRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleSpbProfileName.setDescription('The SBP profile name in the User Network Profile Table to be applied.')
alaDaSaaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18), )
if mibBuilder.loadTexts: alaDaSaaProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileTable.setDescription('This table stores the SAA Performance Monitoring profiles that holds the Latency and Jitter Threshold of a network connection.')
alaDaSaaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaSaaProfileName"))
if mibBuilder.loadTexts: alaDaSaaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileEntry.setDescription('Service Classification Profile entry')
alaDaSaaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaSaaProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileName.setDescription('The name of this profile.')
alaDaSaaProfileLatencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSaaProfileLatencyThreshold.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileLatencyThreshold.setDescription('The object holds the Latency Threshold. A value of zero (0) means no threshold')
alaDaSaaProfileJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSaaProfileJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileJitterThreshold.setDescription('The object holds the Jitter Threshold. A value of zero (0) means no threshold')
alaDaSaaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSaaProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileRowStatus.setDescription('The row status of this table entry.')
alaIND1DaMIBCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 2)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPGlobalGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaNotificationObjectGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaNotificationsGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1DaMIBCompliances = alaIND1DaMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBCompliances.setDescription('Compliance statement for Alcatel DA module.')
alaDaUserNetProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileVlanID"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileQosPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileSaaProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUserNetProfileGroup = alaDaUserNetProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUserNetProfileGroup.setDescription('Collection of DA objects for UNP Table')
alaDaUNPIpNetRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPIpNetRuleGroup = alaDaUNPIpNetRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleGroup.setDescription('Collection of DA objects for system level UNP Ip rule')
alaDaUNPMacRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacRuleGroup = alaDaUNPMacRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacRuleGroup.setDescription('Collection of DA objects for system level UNP Mac Rule')
alaDaUNPMacRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleHiAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacRangeGroup = alaDaUNPMacRangeGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacRangeGroup.setDescription('Collection of DA objects for system level UNP Mac Range Rule')
alaDaUNPVlanTagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVlanTagGroup = alaDaUNPVlanTagGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanTagGroup.setDescription('Collection of DA objects for system level Vlan Tag Rule')
alaDaMacUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaMacUserVlanID"), ("ALCATEL-IND1-DA-MIB", "alaDaAuthenticationStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserIpAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserUnpUsed"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserLoginTimeStamp"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserAuthtype"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserClassificationSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaMacUserGroup = alaDaMacUserGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserGroup.setDescription('Collection of DA objects for UNP Mac User')
alaDaUNPPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDefaultProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortPassAltProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMacAuthFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortClassificationFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTrustTagStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPPortGroup = alaDaUNPPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortGroup.setDescription('Collection of DA UNP Ports')
alaDaUNPGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicVlanConfigFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownUnp"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownTimeout"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicVlanMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownUNPMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownTimeoutMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicProfileConfigFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicProfileConfigMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPReloadVsiTypeDB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPGlobalGroup = alaDaUNPGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPGlobalGroup.setDescription('Collection of DA objects for Global parameters')
alaDaNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpSourceIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpNativeVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMCLAGId"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpCommandType"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpName"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr1"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr2"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpMask"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaNotificationObjectGroup = alaDaNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaNotificationObjectGroup.setDescription('Collection of DA objects for Notifications')
alaDaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-DA-MIB", "unpMcLagMacIgnored"), ("ALCATEL-IND1-DA-MIB", "unpMcLagConfigInconsistency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaNotificationsGroup = alaDaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaNotificationsGroup.setDescription('Collection of Notifications for management of DA.')
alaDaMacVlanUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserIpAddressType"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserIpAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserUnpUsed"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserLoginTimeStamp"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthtype"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserClassificationSource"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserMCLagLearningLoc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaMacVlanUserGroup = alaDaMacVlanUserGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserGroup.setDescription('Collection of DA objects for UNP Mac User')
alaDaUnpCustomerDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainDesc"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUnpCustomerDomainGroup = alaDaUnpCustomerDomainGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainGroup.setDescription('Collection of DA objects for UNP Group')
alaDaSpbProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileQosPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileIsid"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileBVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileMulticastMode"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileSapVlanXlation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaSpbProfileGroup = alaDaSpbProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaSpbProfileGroup.setDescription('Collection of DA objects for Service Classification Profile.')
alaDaUNPCustDomainEvbGpIdRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleVlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleSpbProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainEvbGpIdRuleGroup = alaDaUNPCustDomainEvbGpIdRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleGroup.setDescription('Collection of DA objects for system level EVB Group ID Rule.')
alaDaUNPCustDomainVlanTagRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleVlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleTagPosition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainVlanTagRuleGroup = alaDaUNPCustDomainVlanTagRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleGroup.setDescription('Collection of DA objects for system level Vlan Tag Rule')
alaDaUNPCustDomainIpNetRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainIpNetRuleGroup = alaDaUNPCustDomainIpNetRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleGroup.setDescription('Collection of DA objects for system level UNP Ip rule')
alaDaUNPCustDomainMacRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainMacRuleGroup = alaDaUNPCustDomainMacRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleGroup.setDescription('Collection of DA objects for system level UNP Mac Rule')
alaDaUNPCustDomainMacRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleHiAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainMacRangeGroup = alaDaUNPCustDomainMacRangeGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeGroup.setDescription('Collection of DA objects for system level UNP Mac Range Rule')
alaDaUNPGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortCustomerDomainId"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortPassAltSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDefaultSpbProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPGroupObjects = alaDaUNPGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPGroupObjects.setDescription('Collection of DA objects created to keep SNMP4J compiler happy.')
alaDaSaaProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 20)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileLatencyThreshold"), ("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileJitterThreshold"), ("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaSaaProfileGroup = alaDaSaaProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileGroup.setDescription('Collection of DA objects for SAA Profile.')
mibBuilder.exportSymbols("ALCATEL-IND1-DA-MIB", alaDaUNPCustDomainMacRangeRuleVlanTag=alaDaUNPCustDomainMacRangeRuleVlanTag, alaDaMacVlanUserClassificationSource=alaDaMacVlanUserClassificationSource, alaDaUNPPortMacAuthFlag=alaDaUNPPortMacAuthFlag, alaDaUNPCustDomainIpNetRuleDomainId=alaDaUNPCustDomainIpNetRuleDomainId, alaDaSaaProfileLatencyThreshold=alaDaSaaProfileLatencyThreshold, alaDaUNPVlanTagGroup=alaDaUNPVlanTagGroup, alaDaMacVlanUserMACAddress=alaDaMacVlanUserMACAddress, alaDaMacUserUnpUsed=alaDaMacUserUnpUsed, alaDaUNPCustDomainIpNetRuleAddr=alaDaUNPCustDomainIpNetRuleAddr, alaDaUNPIpNetRuleAddrType=alaDaUNPIpNetRuleAddrType, alaDaUNPCustDomainEvbGpIdRuleGroupId=alaDaUNPCustDomainEvbGpIdRuleGroupId, alaDaUNPMacRuleEntry=alaDaUNPMacRuleEntry, alaDaSpbProfileQosPolicyListName=alaDaSpbProfileQosPolicyListName, alaDaUserNetProfileVlanID=alaDaUserNetProfileVlanID, alaDaUNPCustDomainVlanTagRuleDomainId=alaDaUNPCustDomainVlanTagRuleDomainId, alaDaUNPCustDomainIpNetRuleMCLagConfigStatus=alaDaUNPCustDomainIpNetRuleMCLagConfigStatus, alaDaMacVlanUserEntry=alaDaMacVlanUserEntry, alaDaUNPMacRangeRuleMCLagConfigStatus=alaDaUNPMacRangeRuleMCLagConfigStatus, alaDaUnpIpMask=alaDaUnpIpMask, alaDaUNPCustDomainVlanTagRuleEntry=alaDaUNPCustDomainVlanTagRuleEntry, alaDaUNPCustDomainIpNetRuleEntry=alaDaUNPCustDomainIpNetRuleEntry, alaDaUNPVlanTagRuleEntry=alaDaUNPVlanTagRuleEntry, alaDaSpbProfileIsid=alaDaSpbProfileIsid, alaDaUNPPortCustomerDomainId=alaDaUNPPortCustomerDomainId, alaDaSaaProfileTable=alaDaSaaProfileTable, alaDaUNPPortPassAltProfileName=alaDaUNPPortPassAltProfileName, alaDaUNPIpNetRuleMask=alaDaUNPIpNetRuleMask, alaDaUserNetProfileEntry=alaDaUserNetProfileEntry, alaDaUNPAuthServerDownUNPMCLagConfigStatus=alaDaUNPAuthServerDownUNPMCLagConfigStatus, alaDaUnpCustomerDomainTable=alaDaUnpCustomerDomainTable, alaDaUNPCustDomainMacRuleTable=alaDaUNPCustDomainMacRuleTable, alaDaUnpCommandType=alaDaUnpCommandType, alaDaUNPIpNetRuleGroup=alaDaUNPIpNetRuleGroup, alaDaUNPPortGroup=alaDaUNPPortGroup, alaDaUnpVlan=alaDaUnpVlan, alaDaSaaProfileName=alaDaSaaProfileName, alaDaUNPCustDomainEvbGpIdRuleGroup=alaDaUNPCustDomainEvbGpIdRuleGroup, AlaMultiChassisConfigStatus=AlaMultiChassisConfigStatus, alaDaUNPCustDomainMacRuleEntry=alaDaUNPCustDomainMacRuleEntry, alaDaUNPCustDomainMacRangeRuleDomainId=alaDaUNPCustDomainMacRangeRuleDomainId, alaDaUNPCustDomainVlanTagRuleRowStatus=alaDaUNPCustDomainVlanTagRuleRowStatus, alaDaMacUserVlanID=alaDaMacUserVlanID, alaDaUNPCustDomainIpNetRuleTable=alaDaUNPCustDomainIpNetRuleTable, alaDaUNPCustDomainMacRuleMCLagConfigStatus=alaDaUNPCustDomainMacRuleMCLagConfigStatus, alaDaMacVlanUserVlanID=alaDaMacVlanUserVlanID, alaDaUNPVlanTagRuleProfileName=alaDaUNPVlanTagRuleProfileName, alaDaUnpName=alaDaUnpName, alaDaMacUserClassificationSource=alaDaMacUserClassificationSource, alaDaUnpCustomerDomainId=alaDaUnpCustomerDomainId, alaDaUNPMacRuleVlanTag=alaDaUNPMacRuleVlanTag, alaDaUNPPortPassAltSpbProfileName=alaDaUNPPortPassAltSpbProfileName, alaDaMacVlanUserMCLagLearningLoc=alaDaMacVlanUserMCLagLearningLoc, alaDaUNPCustDomainMacRangeRuleRowStatus=alaDaUNPCustDomainMacRangeRuleRowStatus, alaDaSaaProfileRowStatus=alaDaSaaProfileRowStatus, alaDaUNPGlobalGroup=alaDaUNPGlobalGroup, alaDaUNPCustDomainVlanTagRuleTagPosition=alaDaUNPCustDomainVlanTagRuleTagPosition, alaDaUNPCustDomainMacRangeGroup=alaDaUNPCustDomainMacRangeGroup, AlaDaClassificationPolicyType=AlaDaClassificationPolicyType, alaDaUNPPortTrustTagStatus=alaDaUNPPortTrustTagStatus, alaDaUserNetProfileSaaProfileName=alaDaUserNetProfileSaaProfileName, alaDaUNPMacRuleTable=alaDaUNPMacRuleTable, alaDaUNPMacRangeRuleVlanTag=alaDaUNPMacRangeRuleVlanTag, alaDaUNPVlanTagRuleTable=alaDaUNPVlanTagRuleTable, alaDaUNPCustDomainIpNetRuleProfileName=alaDaUNPCustDomainIpNetRuleProfileName, alaDaUNPGroupObjects=alaDaUNPGroupObjects, alaDaUNPDynamicProfileConfigFlag=alaDaUNPDynamicProfileConfigFlag, alaDaUNPIpNetRuleTable=alaDaUNPIpNetRuleTable, alaDaSpbProfileEncapVal=alaDaSpbProfileEncapVal, alaDaUNPPortMCLagConfigStatus=alaDaUNPPortMCLagConfigStatus, alaDaUNPVlanTagRuleMCLagConfigStatus=alaDaUNPVlanTagRuleMCLagConfigStatus, alaDaSpbProfileMulticastMode=alaDaSpbProfileMulticastMode, alcatelIND1DaMIB=alcatelIND1DaMIB, alaDaUNPPortDefaultSpbProfileName=alaDaUNPPortDefaultSpbProfileName, alaDaUnpNativeVlan=alaDaUnpNativeVlan, alaDaUNPMacRuleProfileName=alaDaUNPMacRuleProfileName, alaDaUNPPortType=alaDaUNPPortType, alaDaUnpIpAddr=alaDaUnpIpAddr, alaDaMacUserLoginTimeStamp=alaDaMacUserLoginTimeStamp, AlaDaAuthenticationType=AlaDaAuthenticationType, alaDaSpbProfileSapVlanXlation=alaDaSpbProfileSapVlanXlation, alaDaUNPCustDomainMacRuleDomainId=alaDaUNPCustDomainMacRuleDomainId, alaDaUNPCustDomainEvbGpIdRuleEntry=alaDaUNPCustDomainEvbGpIdRuleEntry, unpMcLagMacIgnored=unpMcLagMacIgnored, alaDaSpbProfileEntry=alaDaSpbProfileEntry, alaDaUNPIpNetRuleEntry=alaDaUNPIpNetRuleEntry, alaDaUserNetProfileRowStatus=alaDaUserNetProfileRowStatus, alaDaUNPIpNetRuleVlanTag=alaDaUNPIpNetRuleVlanTag, alaDaUNPCustDomainMacRuleGroup=alaDaUNPCustDomainMacRuleGroup, alaDaUnpCustomerDomainDesc=alaDaUnpCustomerDomainDesc, alaDaUnpCustomerDomainRowStatus=alaDaUnpCustomerDomainRowStatus, alaIND1DaMIBConformance=alaIND1DaMIBConformance, alaDaUNPCustDomainVlanTagRuleVlan=alaDaUNPCustDomainVlanTagRuleVlan, alaDaUNPPortEntry=alaDaUNPPortEntry, alaDaUNPNotificationObjects=alaDaUNPNotificationObjects, alaDaMacVlanUserTable=alaDaMacVlanUserTable, alaDaUnpMacAddr2=alaDaUnpMacAddr2, alaDaUNPAuthServerDownTimeout=alaDaUNPAuthServerDownTimeout, alaDaUserNetProfileName=alaDaUserNetProfileName, alaDaUNPCustDomainIpNetRuleAddrType=alaDaUNPCustDomainIpNetRuleAddrType, alaDaUNPVlanTagRuleVlan=alaDaUNPVlanTagRuleVlan, alaDaMacVlanUserGroup=alaDaMacVlanUserGroup, alaDaUNPPortClassificationFlag=alaDaUNPPortClassificationFlag, alaDaUNPMacRangeRuleProfileName=alaDaUNPMacRangeRuleProfileName, alaDaUNPCustDomainMacRangeRuleSpbProfileName=alaDaUNPCustDomainMacRangeRuleSpbProfileName, alaDaUNPAuthServerDownUnp=alaDaUNPAuthServerDownUnp, alaDaUNPPortRowStatus=alaDaUNPPortRowStatus, alaDaMacVlanUserUnpUsed=alaDaMacVlanUserUnpUsed, alaDaUnpMacAddr=alaDaUnpMacAddr, alaDaSpbProfileGroup=alaDaSpbProfileGroup, alaDaUNPCustDomainVlanTagRuleTable=alaDaUNPCustDomainVlanTagRuleTable, alaDaSpbProfileBVlan=alaDaSpbProfileBVlan, alaDaMacUserTable=alaDaMacUserTable, AlaDaAuthenticationResult=AlaDaAuthenticationResult, alaDaUNPMacRangeRuleLoAddr=alaDaUNPMacRangeRuleLoAddr, alaDaUnpCustomerDomainGroup=alaDaUnpCustomerDomainGroup, alaDaSpbProfileName=alaDaSpbProfileName, PYSNMP_MODULE_ID=alcatelIND1DaMIB, alaDaMacUserIntfNum=alaDaMacUserIntfNum, alaDaUNPCustDomainVlanTagRuleVlanProfileName=alaDaUNPCustDomainVlanTagRuleVlanProfileName, alaDaUNPGlobalConfiguration=alaDaUNPGlobalConfiguration, alaDaUNPCustDomainEvbGpIdRuleSpbProfileName=alaDaUNPCustDomainEvbGpIdRuleSpbProfileName, alaDaUNPMacRuleGroup=alaDaUNPMacRuleGroup, alaDaUNPCustDomainEvbGpIdRuleVlanProfileName=alaDaUNPCustDomainEvbGpIdRuleVlanProfileName, alaDaUNPCustDomainMacRuleAddr=alaDaUNPCustDomainMacRuleAddr, alaDaMacUserEntry=alaDaMacUserEntry, alaDaUNPPortDefaultProfileName=alaDaUNPPortDefaultProfileName, alaDaSaaProfileEntry=alaDaSaaProfileEntry, alaDaAuthenticationStatus=alaDaAuthenticationStatus, alaDaUNPCustDomainIpNetRuleMask=alaDaUNPCustDomainIpNetRuleMask, alaDaUNPCustDomainMacRangeRuleHiAddr=alaDaUNPCustDomainMacRangeRuleHiAddr, alaDaUNPCustDomainMacRangeRuleProfileName=alaDaUNPCustDomainMacRangeRuleProfileName, alaDaUNPPortTable=alaDaUNPPortTable, alaDaSpbProfileTable=alaDaSpbProfileTable, alaDaUNPMacRangeRuleTable=alaDaUNPMacRangeRuleTable, alaDaUNPIpNetRuleAddr=alaDaUNPIpNetRuleAddr, alaDaUNPMacRuleMCLagConfigStatus=alaDaUNPMacRuleMCLagConfigStatus, alaDaMacVlanUserIntfNum=alaDaMacVlanUserIntfNum, alaDaUNPMacRangeRuleEntry=alaDaUNPMacRangeRuleEntry, alaDaUnpCustomerDomainEntry=alaDaUnpCustomerDomainEntry, alaDaUNPMacRangeGroup=alaDaUNPMacRangeGroup, alaIND1DaMIBGroups=alaIND1DaMIBGroups, alaDaUserNetProfileQosPolicyListName=alaDaUserNetProfileQosPolicyListName, alaDaUNPIpNetRuleProfileName=alaDaUNPIpNetRuleProfileName, alaDaNotificationObjectGroup=alaDaNotificationObjectGroup, alaDaMacVlanUserAuthtype=alaDaMacVlanUserAuthtype, alaDaUNPCustDomainMacRuleProfileName=alaDaUNPCustDomainMacRuleProfileName, alaDaUNPCustDomainIpNetRuleSpbProfileName=alaDaUNPCustDomainIpNetRuleSpbProfileName, alaDaUNPMacRuleAddr=alaDaUNPMacRuleAddr, alaIND1DaMIBCompliances=alaIND1DaMIBCompliances, alaDaUserNetProfileTable=alaDaUserNetProfileTable, alaDaMacVlanUserLoginTimeStamp=alaDaMacVlanUserLoginTimeStamp, alaDaUNPCustDomainMacRangeRuleLoAddr=alaDaUNPCustDomainMacRangeRuleLoAddr, alaDaMacVlanUserIpAddressType=alaDaMacVlanUserIpAddressType, alaDaUNPCustDomainEvbGpIdRuleRowStatus=alaDaUNPCustDomainEvbGpIdRuleRowStatus, alaDaUNPCustDomainMacRangeRuleTable=alaDaUNPCustDomainMacRangeRuleTable, alaDaSaaProfileGroup=alaDaSaaProfileGroup, alaDaMacUserIpAddress=alaDaMacUserIpAddress, alaDaUnpVlanTag=alaDaUnpVlanTag, alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId=alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId, alaDaUNPCustDomainMacRuleRowStatus=alaDaUNPCustDomainMacRuleRowStatus, alaDaUnpMCLAGId=alaDaUnpMCLAGId, alaDaUNPCustDomainMacRangeRuleEntry=alaDaUNPCustDomainMacRangeRuleEntry, alaDaUnpSourceIpAddr=alaDaUnpSourceIpAddr, alaDaUNPCustDomainVlanTagRuleGroup=alaDaUNPCustDomainVlanTagRuleGroup, alaDaUserNetProfileMCLagConfigStatus=alaDaUserNetProfileMCLagConfigStatus, alaDaUNPDynamicVlanConfigFlag=alaDaUNPDynamicVlanConfigFlag, alaDaUNPCustDomainMacRuleSpbProfileName=alaDaUNPCustDomainMacRuleSpbProfileName, AlaDaMacLearntState=AlaDaMacLearntState, alaDaUNPCustDomainIpNetRuleGroup=alaDaUNPCustDomainIpNetRuleGroup, alaIND1DaMIBObjects=alaIND1DaMIBObjects, alaDaUNPDynamicVlanMCLagConfigStatus=alaDaUNPDynamicVlanMCLagConfigStatus, alaDaMacVlanUserAuthStatus=alaDaMacVlanUserAuthStatus, alaDaUNPCustDomainVlanTagRuleSpbProfileName=alaDaUNPCustDomainVlanTagRuleSpbProfileName, alaDaSaaProfileJitterThreshold=alaDaSaaProfileJitterThreshold, alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus=alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus, alaDaNotificationsGroup=alaDaNotificationsGroup, alaDaUNPIpNetRuleRowStatus=alaDaUNPIpNetRuleRowStatus, alaDaMacUserMACAddress=alaDaMacUserMACAddress, unpMcLagConfigInconsistency=unpMcLagConfigInconsistency, alaIND1DaMIBNotifications=alaIND1DaMIBNotifications, alaDaSpbProfileRowStatus=alaDaSpbProfileRowStatus, alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus=alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus, alaDaUserNetProfileGroup=alaDaUserNetProfileGroup, alaDaMacUserGroup=alaDaMacUserGroup, alaDaUNPPortIfIndex=alaDaUNPPortIfIndex, alaDaMacVlanUserIpAddress=alaDaMacVlanUserIpAddress, alaDaUnpMacAddr1=alaDaUnpMacAddr1, alaDaUNPDynamicProfileConfigMCLagConfigStatus=alaDaUNPDynamicProfileConfigMCLagConfigStatus, alaDaUNPReloadVsiTypeDB=alaDaUNPReloadVsiTypeDB, alaDaUNPCustDomainEvbGpIdRuleTable=alaDaUNPCustDomainEvbGpIdRuleTable, alaDaUNPAuthServerDownTimeoutMCLagConfigStatus=alaDaUNPAuthServerDownTimeoutMCLagConfigStatus, alaDaUNPMacRangeRuleRowStatus=alaDaUNPMacRangeRuleRowStatus, alaDaMacUserAuthtype=alaDaMacUserAuthtype, alaDaUNPIpNetRuleMCLagConfigStatus=alaDaUNPIpNetRuleMCLagConfigStatus, alaDaUNPVlanTagRuleRowStatus=alaDaUNPVlanTagRuleRowStatus, alaDaUNPCustDomainIpNetRuleRowStatus=alaDaUNPCustDomainIpNetRuleRowStatus, alaDaUNPMacRuleRowStatus=alaDaUNPMacRuleRowStatus, alaDaUNPMacRangeRuleHiAddr=alaDaUNPMacRangeRuleHiAddr, alaDaUNPCustDomainMacRuleVlanTag=alaDaUNPCustDomainMacRuleVlanTag, alaDaUNPCustDomainIpNetRuleVlanTag=alaDaUNPCustDomainIpNetRuleVlanTag)
