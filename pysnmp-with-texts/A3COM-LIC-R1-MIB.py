#
# PySNMP MIB module A3COM-LIC-R1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-LIC-R1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:08:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, enterprises, iso, NotificationType, ModuleIdentity, IpAddress, MibIdentifier, Integer32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "enterprises", "iso", "NotificationType", "ModuleIdentity", "IpAddress", "MibIdentifier", "Integer32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

a3com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
llc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26))
llcPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 1))
llcSapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 2))
llcCcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 3))
llcTunnelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 4))
llcPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1), )
if mibBuilder.loadTexts: llcPortAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminTable.setDescription('This table contains objects that can be changed to manage an LLC port. Changing one of these parameters may take effect in the operating port immediately or may wait until the interface is restarted depending on the details of the implementation. The operating values may be different from these configured values if a configured parameter was changed after the interface was started.')
llcPortAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: llcPortAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminEntry.setDescription('A list of configured values for an LLC port.')
llcPortAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortAdminName.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminName.setDescription('An octet string that defines the physical port to which this interface is assigned. It has implementation-specific significance. Its value shall be unique within the administered system. It must contain only ASCII printable characters.')
llcPortAdminMaxSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxSaps.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxSaps.setDescription('This parameter specifies the maximum number of SAPs that can be defined for this port.')
llcPortAdminMaxCcs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxCcs.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxCcs.setDescription('This parameter specifies the maximum number of connection components that can be administratively defined for this port.')
llcPortAdminMaxPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxPDUOctets.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxPDUOctets.setDescription("This object denotes the default maximum I PDU size, in octets, that LLCs on this port may send to and receive from their remote LLC partners. This count is referred to as 'N1' in the IEEE 802.2 specification [5]. This size includes I-Frames, UI-Frames, XIDs, and TEST frames. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header, and the LLC header.")
llcPortAdminMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsSend.setDescription("This object denotes the default maximum consecutive unacknowledged I PDU frames that LLCs on this port may send to their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [5]. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamically learned value and should reflect this in the llcCcOperMaxUnackedIPDUsSend object for the connection component.")
llcPortAdminMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxUnackedIPDUsRcv.setDescription("This object denotes the default maximum number of unacknowledged I PDUs that LLCs on this port can expect to receive from their remote LLC partners. This count is referred to as 'k' in the IEEE 802.2 specification [5]. At connection setup, an implementation may choose to send this value to the remote LLC, using an XID frame.")
llcPortAdminMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 7), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminMaxRetransmits.setDescription("This object denotes the default value for the maximum number of times which LLCs on this port shall retry a PDU following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [5].")
llcPortAdminAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 8), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminAckTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the unacknowledged frames to be retransmitted (up to N2 times). For Implementations that only use a single 'T1' Value (ref. IBM Token-Ring Network technical reference Chapter 11). This object will be used to control/read the value.")
llcPortAdminPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 9), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminPbitTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the command with the poll bit to be retransmitted (up to N2 times).")
llcPortAdminRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 10), TimeTicks().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminRejTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminRejTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times).')
llcPortAdminBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 11), TimeTicks().clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminBusyTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive an indication that a busy condition at the remote LLC has cleared. The expiration of this timer causes the adjacent connection component to be polled.')
llcPortAdminInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 12), TimeTicks().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminInactTimer.setDescription("This object denotes the default value for the time interval during which the LLCs on this port shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture [6] Reference as the Ti parameter and is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcPortAdminDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 13), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminDelayAckCount.setDescription('This object denotes the default value for the maximum number of consecutive I PDUs which the LLCs on this port shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDUsRcv. This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture Reference [6] as the N3 parameter and is widely implemented. A value of one indicates that acknowledgments will be sent immediately and that the value of llcPortAdminDelayAckTimer shall be ignored.')
llcPortAdminDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminDelayAckTimer.setDescription('This object denotes the default value for the time interval during which the LLCs on this port shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [5]. It is listed in the IBM Token-Ring Network Architecture Reference [6] as the T2 parameter and is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. A value of 0 means that an acknowledgement will be sent immediately. This object is associated with the llcPortAdminDelayAckCount object and is only defined if that object has a value greater than one.')
llcPortAdminNw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 1, 1, 15), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcPortAdminNw.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortAdminNw.setDescription('This object denotes the default value for the number of IPDUs that must be acknowledged before the working window size (Ww) can be incremented by 1 when the working window is not equal to the maximum transmit window size (TW). It controls the gradual incrementing of Ww in congestion situations. This function is not described in the IEEE 802.2 specification [5]. However, it is listed in the IBM Token-Ring Network Architecture Reference [6] as the Nw parameter and is widely implemented.')
llcPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2), )
if mibBuilder.loadTexts: llcPortOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperTable.setDescription('This table contains current LLC port parameters. Many of these objects have corresponding objects in the llcPortAdminTable.')
llcPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: llcPortOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperEntry.setDescription('Currently set parameters for a specific LLC port.')
llcPortOperNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperNumSaps.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperNumSaps.setDescription("This object defines the number of SAPs on this port that are currently enabled. In other words, this object is a count of the number of instances of llcSapOperEntry that have a llcSapOperStatus value of 'active(2)'.")
llcPortOperSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperSimRim.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperSimRim.setDescription('This object reflects support for transmission and receipt of SIM and RIM control frames for this port. SIM and RIM are not defined in the ANSI/IEEE 802.2 specification [5] nor in the IBM Token Ring Architecture Reference [6]. These control frames are used for the remote program load of IBM communications processors.')
llcPortOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcPortOperLastModifyTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcPortOperLastModifyTime.setDescription('This object describes the value of sysUpTime when this port definition was last modified. If the port has not been modified, then this value shall be zero.')
llcSapAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 1), )
if mibBuilder.loadTexts: llcSapAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminTable.setDescription('This table contains objects that can be changed to manage a local SAP. Changing one of these parameters may take effect in the operating SAP immediately or may wait until the interface is restarted depending on the details of the implementation. The operating values may be different from these configured values if a configured parameter was changed after the interface was started.')
llcSapAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapAdminEntry.setDescription('A list of configured values for a local SAP.')
llcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapNumber.setDescription('The address of this local SAP.')
llcSapOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2), )
if mibBuilder.loadTexts: llcSapOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperTable.setDescription('This table contains objects that reflect the current operational parameters of a local SAP.')
llcSapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperEntry.setDescription('A list of configured values for a local SAP.')
llcSapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperStatus.setDescription('This parameter describes the actual state of this local SAP.')
llcSapOperNumCcs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperNumCcs.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperNumCcs.setDescription("This object defines the number of connection components on this SAP that are currently in one of the 'connected' states. In other words, this object is a count of the number of instances of llcCcOperEntry that have a llcCcOperState value greater than or equal to 'normal(3)'.")
llcSapOperLlc2Support = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapOperLlc2Support.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapOperLlc2Support.setDescription('This parameter describes whether or not the LLC implementation supports LLC2 connection components.')
llcSapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3), )
if mibBuilder.loadTexts: llcSapStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTable.setDescription('This table contains objects that reflect the current operational statistics of a local SAP.')
llcSapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcSapNumber"))
if mibBuilder.loadTexts: llcSapStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsEntry.setDescription('A list of configured values for a local SAP.')
llcSapStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsLocalBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsLocalBusies.setDescription('This object reflects the total number of times that the local connection components on this SAP have entered a busy state (RNR). This object is initialized to zero when the SAP is created.')
llcSapStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsRemoteBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsRemoteBusies.setDescription('This object reflects the total number of times that the adjacent (i.e. remote) connection components on this SAP have entered a busy state (RNR). This object is initialized to zero when the SAP is created.')
llcSapStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsIFramesIn.setDescription('This object reflects the total number of I-Frames that have been received by connection components on this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsIFramesOut.setDescription('This object reflects the total number of I-Frames that have been transmitted by connection components on this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsIOctetsIn.setDescription('This object reflects the total octets received from adjacent connection components on this SAP. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsIOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsIOctetsOut.setDescription('This object reflects the total octets transmitted to adjacent connection components on this SAP. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsSFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsSFramesIn.setDescription('This object reflects the total number of S-Frames that have been received by connection components on this SAP. This object is initialized to zero when the SAP is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcSapStatsSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsSFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsSFramesOut.setDescription('This object reflects the total number of S-Frames that have been transmitted by connection components on this SAP. This object is initialized to zero when the SAP is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcSapStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsRetransmitsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsRetransmitsOut.setDescription('This object reflects the total number of I-Frames retransmitted by all local connection components on this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsREJsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsREJsIn.setDescription('This object reflects the total REJ frames received from all adjacent LLC connection components on this SAP since it was created.')
llcSapStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsREJsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsREJsOut.setDescription('This object reflects the total REJ frames transmitted to an adjacent LLC connection components on this SAP since it was created.')
llcSapStatsWwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsWwCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsWwCount.setDescription('This object reflects the total number of times, since this SAP was created, that the dynamic window algorithm has been invoked to reduce the value of Ww on any of the connection components of this SAP. This object is initialized to zero when the SAP is created. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
llcSapStatsTESTCommandsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTCommandsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTESTCommandsIn.setDescription('This object denotes the number of TEST commands this SAP has received and is a measure of the number of stations in the network trying to connect up. This object is initialized to zero when the SAP is created.')
llcSapStatsTESTCommandsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTCommandsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTESTCommandsOut.setDescription('This object denotes the number of TEST commands this SAP has sent and is a measure of the number of other stations we are trying to connect to. This object is initialized to zero when the SAP is created.')
llcSapStatsTESTResponsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTResponsesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTESTResponsesIn.setDescription('This object denotes the number of TEST responses this SAP has received and is a measure of the number of stations in the network responding to TEST commands this SAP has sent. This object is initialized to zero when the SAP is created.')
llcSapStatsTESTResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsTESTResponsesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsTESTResponsesOut.setDescription('This object denotes the number of TEST responses this SAP has sent and is a measure of the number of other stations trying to connect to this SAP. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDCommandsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDCommandsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsXIDCommandsIn.setDescription('This object denotes the number of XID commands this SAP has received and is a measure of the number of stations in the network trying to connect to this SAP. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDCommandsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDCommandsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsXIDCommandsOut.setDescription('This object denotes the number of XID commands this SAP has sent and is a measure of the number of other stations this SAP is trying to connect to. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDResponsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDResponsesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsXIDResponsesIn.setDescription('This object denotes the number of XID responses this SAP has received and is a measure of the number of stations in the network responding to TEST commands this SAP has sent. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsXIDResponsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsXIDResponsesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsXIDResponsesOut.setDescription('This object denotes the number of XID responses this SAP has sent and is a measure of the number of other stations trying to connect to this SAP. This object is a count of all XIDs, including SNA XID, IEEE XID, null XID, and non-activation XIDs. This object is initialized to zero when the SAP is created.')
llcSapStatsUIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsUIFramesIn.setDescription('This object reflects the total number of unnumbered information (UI) frames received on a local SAP.')
llcSapStatsUIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsUIFramesOut.setDescription('This object reflects the total number of unnumbered information (UI) frames sent on a local SAP.')
llcSapStatsUIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsUIOctetsIn.setDescription('This object reflects the total octets received from adjacent connection components on this SAP. This object covers the address, control, and information field of UI-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsUIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsUIOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsUIOctetsOut.setDescription('This object reflects the total octets transmitted to adjacent connection components on this SAP. This object covers the address, control, and information field of UI-Frames only. This object is initialized to zero when the SAP is created.')
llcSapStatsConnectOk = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsConnectOk.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsConnectOk.setDescription('This object reflects the total number of successful connections that have been established on this SAP since the SAP was created. A successful connection is indicated by a successful SABME/UA exchange.')
llcSapStatsConnectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsConnectFail.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsConnectFail.setDescription('This object reflects the total number of unsuccessful connections that have been attempted on this SAP since the SAP was created. An unsuccessful connection attempt is indicated by a SABME/DM exchange or a SABME/timeout.')
llcSapStatsDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsDisconnect.setDescription('This object reflects the total number of normal disconnections that have been performed on this SAP since the SAP was created. A normal disconnection is indicated by a successful DISC/UA exchange or merely a DISC sent or received.')
llcSapStatsDisconnectFRMRSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRSend.setDescription('This object reflects the total number of abnormal disconnections (resulting from a FRMR being sent) that have been performed on this SAP since the SAP was created.')
llcSapStatsDisconnectFRMRRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsDisconnectFRMRRcv.setDescription('This object reflects the total number of abnormal disconnections (resulting from a FRMR being received) that have been performed on this SAP since the SAP was created.')
llcSapStatsDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsDisconnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsDisconnectTimer.setDescription('This object reflects the total number of abnormal disconnections (resulting from a timer expiration) that have been performed on this SAP since the SAP was created.')
llcSapStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcSapStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: llcSapStatsReset.setDescription('This object reflects the total number of resets that have been performed on this SAP since the SAP was created. A reset is ... ')
llcCcAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1), )
if mibBuilder.loadTexts: llcCcAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminTable.setDescription('This table contains objects that can be changed to manage an LLC connection component. Changing one of these parameters may take effect in the operating link immediately or may wait until the link is restarted depending on the details of the implementation. The operating values may be different from these configured values if changed by XID negotiation or if a configured parameter was changed after the link was started.')
llcCcAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcCcLSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRMac"), (0, "A3COM-LIC-R1-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcAdminEntry.setDescription('A list of configured values for an LLC connection component.')
llcCcLSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcLSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcLSap.setDescription('This value is the address of the local SAP for this Connection Component.')
llcCcRSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcRSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcRSap.setDescription('This value is the address of the remote SAP for this Connection Component.')
llcCcLMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcLMac.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcLMac.setDescription('This value is the local MAC address for this Connection Component.')
llcCcRMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcRMac.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcRMac.setDescription('This value is the remote MAC address for this Connection Component.')
llcCcOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2), )
if mibBuilder.loadTexts: llcCcOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperTable.setDescription('This table contains current LLC link parameters. Many of these objects have corresponding objects in the llcCcAdminTable.')
llcCcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcCcLSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRMac"), (0, "A3COM-LIC-R1-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperEntry.setDescription('A list of status and control values for an LLC connection component.')
llcCcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("aDM", 1), ("setup", 2), ("normal", 3), ("busy", 4), ("reject", 5), ("await", 6), ("awaitBusy", 7), ("awaitReject", 8), ("dConn", 9), ("reset", 10), ("error", 11), ("conn", 12), ("resetCheck", 13), ("resetWait", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperState.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperState.setDescription('This object describes the operational state of the LLC connection. If the connection component is disabled, llcCcOperState will be allowed to transition to aDM(1). If the connection component is enabled, llcCcOperState will be allowed to transition to normal(3).')
llcCcOperMaxIPDUOctetsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsSend.setDescription("This object denotes the maximum I PDU size, in octets, that this LLC SAP may send to its remote connection component partner. This count is referred to as 'N1' in the IEEE 802.2 specification [5]. At connection setup, the remote LLC may send, using an XID frame, the maximum I PDU size which it is prepared to receive. If so, an implementation may choose to override the administered maximum PDU size with the dynamically learned value and should reflect that in this object. The I PDU size includes all octets in a frame, excluding framing characters, the MAC header and link header.")
llcCcOperMaxIPDUOctetsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxIPDUOctetsRcv.setDescription("This object denotes the maximum I PDU size,in octets, that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'N1' in the IEEE 802.2 specification [5] The I PDU size includes all octets in a frame with the exception of the framing characters, the MAC header and the link header.")
llcCcOperMaxUnackedIPDUsSend = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsSend.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsSend.setDescription("This object denotes the maximum consecutive unacknowledged I PDU frames that this LLC may send to its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [5]. At connection setup, the remote LLC may send, using an XID frame, the maximum number of unacknowledged I PDUs which it is prepared to receive. If so, an implementation may choose to override the administered maximum number of unacknowledged PDUs with the dynamically learned value and should reflect that in this object.")
llcCcOperMaxUnackedIPDUsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxUnackedIPDUsRcv.setDescription("This object denotes the maximum number of unacknowledged I PDUs that this LLC can expect to receive from its remote LLC partner. This count is referred to as 'k' in the IEEE 802.2 specification [5].")
llcCcOperMaxRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperMaxRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperMaxRetransmits.setDescription("This object denotes the value for the maximum number of times that this LLC shall retry PDUs following the expiration of the acknowledgement timer, the P-bit timer or the reject timer. When these retries are exhausted, the link shall be declared inactive. This count is referred to as 'N2' in the IEEE 802.2 specification [5].")
llcCcOperAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive either: 1) an acknowledgement to one or more outstanding I PDUs. or 2) a response PDU to an unnumbered command PDU. The expiration of this timer shall cause the frame unacknowledged frames to be retransmitted (up to N2 times).')
llcCcOperPbitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperPbitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperPbitTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive a PDU with the F bit set to '1' in response to a Type 2 command with the P bit set to '1'. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times).")
llcCcOperRejTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperRejTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperRejTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive a reply to a REJ PDU. The expiration of this timer shall cause the REJ PDU to be retransmitted (up to N2 times).')
llcCcOperBusyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperBusyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperBusyTimer.setDescription('This object denotes the value for the time interval during which this LLC shall expect to receive an indication that a busy condition at the remote LLC has cleared.')
llcCcOperInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperInactTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperInactTimer.setDescription("This object denotes the value for the time interval during which this LLC shall expect to receive any PDU from the remote LLC. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. The expiration of this timer shall cause the local LLC to send a PDU to the remote LLC with the P bit set to '1'. Any value for this object less than or equal to the acknowledgement timer shall mean that the timer is not used.")
llcCcOperDelayAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperDelayAckCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperDelayAckCount.setDescription('This object denotes the value for the maximum number of consecutive I PDUs which this LLC shall receive during the interval defined by llcCcOperDelayTimer without sending an immediate acknowledgement. This must be less than or equal to the value of llcCcOperMaxUnackIPDUsRcv. This function is not described in the IEEE 802.2 specification [5] but is widely implemented. A value of one indicates that acknowledgments will be sent immediately and that the value of llcCcOperDelayAckTimer should be ignored.')
llcCcOperDelayAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperDelayAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperDelayAckTimer.setDescription('This object denotes the value for the time interval during which this LLC shall delay acknowledgment of one or more I PDUs (up to the value of llcCcOperDelayAckCount). This function is not described in the IEEE 802.2 specification [5] but is widely implemented. The expiration of this timer shall cause the local LLC to acknowledge all unacknowledged I PDUs. This object is associated with the llcCcOperDelayAckCount object and only has meaning if that object has a value greater than one.')
llcCcOperNw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperNw.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperNw.setDescription('This object denotes the value for the number of IPDUs that must be acknowledged before the working window size (Ww) can be incremented by 1 when the working window is not equal to the maximum transmit window size (TW). It controls the gradual incrementing of Ww in congestion situations. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
llcCcOperWw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperWw.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperWw.setDescription('Maximum number of sequentially numbered IPDUs that the connection component may have outstanding (unacknowledged) at any given time. Ww is initialized to the value of llcCcOperMaxUnackedIPDUsSend when the link is established. When the dynamic window algorithm is invoked, Ww varies from 1 up to llcCcOperMaxUnackedIPDUsSend. Each time the llcCcOperWw value is decreased, the reason is recorded in llcCcOperLastWwCause, and llcCcStatWwCount is incremented by 1. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
llcCcOperCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperCreateTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperCreateTime.setDescription('This object describes the value of sysUpTime when this row was created.')
llcCcOperLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastModifyTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastModifyTime.setDescription('For administered connection components, this object describes the value of sysUpTime the last time this row was modified. If the row has not been modified, then this value shall be zero. For dynamic connection components, this object identifies the time this connection component was created.')
llcCcOperLastFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastFailTime.setDescription('This object describes the value of sysUpTime the last time this connection component failed. Connection component failure is defined as a transition to an llcCcOperState value of aDM(1). If the connection component has not failed, then this value shall be zero.')
llcCcOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 1), ("rxFRMR", 2), ("txFRMR", 3), ("discReceived", 4), ("discSent", 5), ("retriesExpired", 6), ("forcedShutdown", 7))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastFailCause.setDescription('This enumerated object reflects the cause of the last failure of this LLC connection component. If the connection component has not failed, then this object will have a value of undefined(1).')
llcCcOperLastFailFRMRInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastFailFRMRInfo.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastFailFRMRInfo.setDescription('This object reflects the information field of the FRMR frame if the last failure for this LLC connection component was a result of an invalid frame. Otherwise, this field has no meaning.')
llcCcOperLastWwCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("neverInvoked", 1), ("lostData", 2), ("macLayerCongestion", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcOperLastWwCause.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcOperLastWwCause.setDescription('This object indicates the reason that the llcCcOperWw was reduced the last time this occurred.')
llcCcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3), )
if mibBuilder.loadTexts: llcCcStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsTable.setDescription('Each entry in this table contains statistics for a specific LLC connection component.')
llcCcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-LIC-R1-MIB", "llcCcLSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRSap"), (0, "A3COM-LIC-R1-MIB", "llcCcRMac"), (0, "A3COM-LIC-R1-MIB", "llcCcLMac"))
if mibBuilder.loadTexts: llcCcStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsEntry.setDescription('A list of statistics for an LLC connection component.')
llcCcStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsLocalBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsLocalBusies.setDescription('This object reflects the total number of times that the local connection component has entered a busy state (RNR). This object is initialized to zero when the connection component is created.')
llcCcStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRemoteBusies.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsRemoteBusies.setDescription('This object reflects the total number of times that the adjacent (i.e. remote) connection component has entered a busy state (RNR). This object is initialized to zero when the connection component is created.')
llcCcStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIFramesIn.setDescription('This object reflects the total number of I-Frames that have been received by the connection component. This object is initialized to zero when the connection component is created.')
llcCcStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIFramesOut.setDescription('This object reflects the total number of I-Frames that have been transmitted by this connection component. This object is initialized to zero when the connection component is created.')
llcCcStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIOctetsIn.setDescription('This object reflects the total octets received from the adjacent connection component. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the connection component is created.')
llcCcStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsIOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsIOctetsOut.setDescription('This object reflects the total octets transmitted to the adjacent connection component. This object covers the address, control, and information field of I-Frames only. This object is initialized to zero when the connection component is created.')
llcCcStatsSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsSFramesIn.setDescription('This object reflects the total number of S-Frames that have been received by this connection component. This object is initialized to zero when the connection component is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcCcStatsSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsSFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsSFramesOut.setDescription('This object reflects the total number of S-Frames that have been transmitted by this connection component. This object is initialized to zero when the connection component is created. Note - the ratio of the number of I-Frames to S-Frames might serve as a measure of link efficiency and, for instance, could be used to tune the acknowledgement timer.')
llcCcStatsRetransmitsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsRetransmitsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsRetransmitsOut.setDescription('This object reflects the total number of I-Frames retransmitted by the local connection component. This object is initialized to zero when the connection component is created.')
llcCcStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsIn.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsREJsIn.setDescription('This object reflects the total REJ frames received from an adjacent LLC connection component since connection component startup.')
llcCcStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsREJsOut.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsREJsOut.setDescription('This object reflects the total REJ frames transmitted to an adjacent LLC connection component since connection component startup.')
llcCcStatsWwCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcCcStatsWwCount.setStatus('mandatory')
if mibBuilder.loadTexts: llcCcStatsWwCount.setDescription('This object reflects the total number of times, since connection component startup, that the dynamic window algorithm has been invoked to reduce the value of Ww. At connection component startup, this object must be initialized to zero. This function is not described in the IEEE 802.2 specification [5], but is widely implemented.')
ccsLlcTunnelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1))
ccsLlcTunnelVirtualRing = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcTunnelVirtualRing.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelVirtualRing.setDescription('This defines the number of the virtual token ring used by Logical Link Control. Changing this parameter may take effect for the tunnel immediately or may wait until the tunnel is restarted depending on the details of the implementation.')
ccsLlcTunnelMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 20, 24, 32, 36, 40))).clone(namedValues=NamedValues(("qTunnelEnable", 4), ("qTunnelDisable", 8), ("qTunnelSecure", 16), ("qTunnelEnableSecure", 20), ("qTunnelDisableSecure", 24), ("qTunnelNonSecure", 32), ("qTunnelEnableNonSecure", 36), ("qTunnelDisableNonSecure", 40)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcTunnelMode.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelMode.setDescription("This allows one to enable tunneling on the box and describe the mode of operation i.e. Secure or NonSecure. Secure mode means that this box will only accept connection from partners listed in the tunnel peer list. In the non- Secure mode any incoming IP address is accepted. This parameter may combine one of qTunnelEnable and qTunnelDisable (Enable/Disable set) with one of qTunnelSecure and qTunnelNonSecure (Secure/Nonsecure set); e.g. qTunnelEnable and qTunnelSecure is a legal combination. If a member of one set is not supplied on a 'write' operation, the value for that set remains unchanged. Changing this parameter may take effect for the tunnel immediately or may wait until the tunnel is restarted depending on the details of the implementation.")
ccsLlcTunnelSNAPriority = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qPrioDefault", 1), ("qPrioHigh", 2), ("qPrioMedium", 3), ("qPrioLow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcTunnelSNAPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelSNAPriority.setDescription('This determines the priority of the tunnel traffic on the Logical Link Control link. Changing this parameter may take effect for the tunnel immediately or may wait until the tunnel is restarted depending on the details of the implementation.')
ccsLlcTunnelRouterTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2), )
if mibBuilder.loadTexts: ccsLlcTunnelRouterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelRouterTable.setDescription('A table of information regarding all routers participating in Logical Link Control 2. Changing one of these parameters may take effect for the tunnel immediately or may wait until the tunnel is restarted depending on the details of the implementation.')
ccsLlcTunnelRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1), ).setIndexNames((0, "A3COM-LIC-R1-MIB", "ccsLlcTunnelId"))
if mibBuilder.loadTexts: ccsLlcTunnelRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelRouterEntry.setDescription('Information for a single participating router.')
ccsLlcPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcPeerAddress.setDescription("The IP address of the Logical Link Control node's peer. The peer is at the remote end of the tunnel.")
ccsLlcLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcLocalAddress.setDescription('The IP address of the Logical Link Control node at the local end of the tunnel.')
ccsLlcTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLlcTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelId.setDescription('The tunnel index. This is a unique identifier for the tunnel.')
ccsLlcRouterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qTunEnable", 1), ("qtunDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRouterEnable.setDescription('Allows tunnel peer to be enabled.')
ccsLlcRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qTransparent", 1), ("qSpecificTerm", 2), ("qLocalTerm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterMode.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRouterMode.setDescription('Mode of the peer.')
ccsLlcRouterTunnelTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("qTcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterTunnelTransport.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRouterTunnelTransport.setDescription('Type of transport protocol used for tunnelling.')
ccsLlcRouterTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterTunnelPort.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRouterTunnelPort.setDescription('Port number if TCP is used for tunnelling.')
ccsLlcRouterPeerString = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRouterPeerString.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRouterPeerString.setDescription("The name of Logical Link Control node's peer.")
ccsLlcTunnelDefaultDestTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3), )
if mibBuilder.loadTexts: ccsLlcTunnelDefaultDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelDefaultDestTable.setDescription("Table of default routes for frames that arrive at this router. The route on which a particular frame is sent is determined from the frames's destination MAC address. Changing one of these parameters may take effect for the tunnel immediately or may wait until the tunnel is restarted depending on the details of the implementation.")
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1) + (1000, ), Integer32())
ccsLlcTunnelDefaultDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1), ).setIndexNames((0, "A3COM-LIC-R1-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: ccsLlcTunnelDefaultDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcTunnelDefaultDestEntry.setDescription('Mapping of a MAC address to a destination router.')
ccsLlcDestTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccsLlcDestTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcDestTunnelId.setDescription("The destination's llcTunnelId for it's associated ccsLlcTunnelRouterTable entry.")
ccsLlcRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRemoteMacAddress.setDescription('The MAC address used for reaching the remote router.')
ccsLlcRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteSap.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRemoteSap.setDescription('The current Service Access Port used for reaching the destination address.')
ccsLlcRemoteSapLowRange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteSapLowRange.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRemoteSapLowRange.setDescription('The lowest Service Access Port that can be used to reach the destination address.')
ccsLlcRemoteSapHighRange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 26, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccsLlcRemoteSapHighRange.setStatus('mandatory')
if mibBuilder.loadTexts: ccsLlcRemoteSapHighRange.setDescription('The highest Service Access Port that can be used to reach the destination address.')
mibBuilder.exportSymbols("A3COM-LIC-R1-MIB", ccsLlcRouterTunnelTransport=ccsLlcRouterTunnelTransport, llcPortAdminMaxSaps=llcPortAdminMaxSaps, llcCcRMac=llcCcRMac, llcCcOperLastFailTime=llcCcOperLastFailTime, llcPortOperNumSaps=llcPortOperNumSaps, llcCcOperBusyTimer=llcCcOperBusyTimer, llcSapStatsConnectOk=llcSapStatsConnectOk, llcCcOperWw=llcCcOperWw, llcCcOperLastWwCause=llcCcOperLastWwCause, llcPortOperEntry=llcPortOperEntry, llcCcStatsSFramesIn=llcCcStatsSFramesIn, llcSapStatsIOctetsIn=llcSapStatsIOctetsIn, llcCcOperMaxUnackedIPDUsSend=llcCcOperMaxUnackedIPDUsSend, ccsLlcRemoteSap=ccsLlcRemoteSap, llcCcStatsIOctetsIn=llcCcStatsIOctetsIn, llcSapStatsTESTResponsesIn=llcSapStatsTESTResponsesIn, llcCcOperAckTimer=llcCcOperAckTimer, llcPortAdminMaxRetransmits=llcPortAdminMaxRetransmits, llcSapGroup=llcSapGroup, llcCcRSap=llcCcRSap, llcPortAdminDelayAckTimer=llcPortAdminDelayAckTimer, llcSapNumber=llcSapNumber, ccsLlcRouterPeerString=ccsLlcRouterPeerString, llcPortAdminRejTimer=llcPortAdminRejTimer, llcCcLSap=llcCcLSap, ccsLlcRouterEnable=ccsLlcRouterEnable, llcSapStatsLocalBusies=llcSapStatsLocalBusies, a3com=a3com, llcPortAdminMaxPDUOctets=llcPortAdminMaxPDUOctets, llcCcOperRejTimer=llcCcOperRejTimer, ccsLlcRemoteSapLowRange=ccsLlcRemoteSapLowRange, ccsLlcRouterTunnelPort=ccsLlcRouterTunnelPort, llcCcStatsRetransmitsOut=llcCcStatsRetransmitsOut, llcCcStatsREJsIn=llcCcStatsREJsIn, MacAddress=MacAddress, llcPortOperSimRim=llcPortOperSimRim, llcSapStatsTable=llcSapStatsTable, llcCcOperEntry=llcCcOperEntry, llcPortAdminPbitTimer=llcPortAdminPbitTimer, llcPortAdminMaxUnackedIPDUsRcv=llcPortAdminMaxUnackedIPDUsRcv, llcTunnelGroup=llcTunnelGroup, llcCcOperNw=llcCcOperNw, llcSapStatsREJsOut=llcSapStatsREJsOut, llcSapStatsTESTCommandsIn=llcSapStatsTESTCommandsIn, pysmiFakeCol1000=pysmiFakeCol1000, llcCcStatsIOctetsOut=llcCcStatsIOctetsOut, llcSapStatsRemoteBusies=llcSapStatsRemoteBusies, llcCcOperLastFailCause=llcCcOperLastFailCause, llcPortOperLastModifyTime=llcPortOperLastModifyTime, llcSapOperNumCcs=llcSapOperNumCcs, llcSapStatsTESTResponsesOut=llcSapStatsTESTResponsesOut, llcCcOperPbitTimer=llcCcOperPbitTimer, llcSapStatsUIFramesOut=llcSapStatsUIFramesOut, llcSapStatsREJsIn=llcSapStatsREJsIn, llcSapStatsXIDCommandsIn=llcSapStatsXIDCommandsIn, llcSapStatsTESTCommandsOut=llcSapStatsTESTCommandsOut, ccsLlcTunnelDefaultDestEntry=ccsLlcTunnelDefaultDestEntry, ccsLlcTunnelId=ccsLlcTunnelId, llcPortAdminEntry=llcPortAdminEntry, llcSapOperEntry=llcSapOperEntry, llcSapOperStatus=llcSapOperStatus, llcPortAdminMaxUnackedIPDUsSend=llcPortAdminMaxUnackedIPDUsSend, llcCcStatsLocalBusies=llcCcStatsLocalBusies, llcPortAdminNw=llcPortAdminNw, llcPortAdminName=llcPortAdminName, llcCcOperDelayAckTimer=llcCcOperDelayAckTimer, llcCcOperTable=llcCcOperTable, llcSapStatsIFramesOut=llcSapStatsIFramesOut, ccsLlcTunnelRouterEntry=ccsLlcTunnelRouterEntry, llcPortOperTable=llcPortOperTable, llcSapStatsDisconnectTimer=llcSapStatsDisconnectTimer, llc=llc, ccsLlcTunnelMode=ccsLlcTunnelMode, llcCcStatsTable=llcCcStatsTable, llcCcStatsIFramesIn=llcCcStatsIFramesIn, llcSapOperLlc2Support=llcSapOperLlc2Support, ccsLlcDestTunnelId=ccsLlcDestTunnelId, llcCcOperMaxIPDUOctetsSend=llcCcOperMaxIPDUOctetsSend, llcSapStatsUIOctetsOut=llcSapStatsUIOctetsOut, llcCcOperLastModifyTime=llcCcOperLastModifyTime, llcSapStatsIOctetsOut=llcSapStatsIOctetsOut, llcSapStatsIFramesIn=llcSapStatsIFramesIn, llcCcOperLastFailFRMRInfo=llcCcOperLastFailFRMRInfo, ccsLlcTunnelDefaultDestTable=ccsLlcTunnelDefaultDestTable, llcCcOperMaxRetransmits=llcCcOperMaxRetransmits, llcPortAdminAckTimer=llcPortAdminAckTimer, llcSapOperTable=llcSapOperTable, ccsLlcTunnelSNAPriority=ccsLlcTunnelSNAPriority, ccsLlcTunnelVirtualRing=ccsLlcTunnelVirtualRing, llcPortAdminInactTimer=llcPortAdminInactTimer, llcSapStatsRetransmitsOut=llcSapStatsRetransmitsOut, llcSapStatsXIDResponsesIn=llcSapStatsXIDResponsesIn, ccsLlcRemoteSapHighRange=ccsLlcRemoteSapHighRange, llcSapStatsDisconnectFRMRRcv=llcSapStatsDisconnectFRMRRcv, llcCcStatsIFramesOut=llcCcStatsIFramesOut, ccsLlcTunnelRouterTable=ccsLlcTunnelRouterTable, llcCcStatsREJsOut=llcCcStatsREJsOut, ccsLlcPeerAddress=ccsLlcPeerAddress, ccsLlcRouterMode=ccsLlcRouterMode, ccsLlcLocalAddress=ccsLlcLocalAddress, llcCcOperInactTimer=llcCcOperInactTimer, llcCcStatsWwCount=llcCcStatsWwCount, llcSapStatsDisconnectFRMRSend=llcSapStatsDisconnectFRMRSend, llcCcAdminTable=llcCcAdminTable, llcCcOperDelayAckCount=llcCcOperDelayAckCount, llcSapStatsEntry=llcSapStatsEntry, ccsLlcRemoteMacAddress=ccsLlcRemoteMacAddress, llcCcStatsRemoteBusies=llcCcStatsRemoteBusies, llcCcStatsEntry=llcCcStatsEntry, llcSapStatsWwCount=llcSapStatsWwCount, llcCcStatsSFramesOut=llcCcStatsSFramesOut, llcCcOperMaxIPDUOctetsRcv=llcCcOperMaxIPDUOctetsRcv, llcPortAdminTable=llcPortAdminTable, llcCcAdminEntry=llcCcAdminEntry, llcPortAdminBusyTimer=llcPortAdminBusyTimer, llcSapStatsXIDCommandsOut=llcSapStatsXIDCommandsOut, llcSapStatsSFramesIn=llcSapStatsSFramesIn, llcSapStatsXIDResponsesOut=llcSapStatsXIDResponsesOut, llcPortAdminMaxCcs=llcPortAdminMaxCcs, llcSapAdminTable=llcSapAdminTable, llcSapStatsUIFramesIn=llcSapStatsUIFramesIn, llcCcLMac=llcCcLMac, llcCcOperState=llcCcOperState, llcSapStatsConnectFail=llcSapStatsConnectFail, llcPortAdminDelayAckCount=llcPortAdminDelayAckCount, ccsLlcTunnelInfo=ccsLlcTunnelInfo, llcSapStatsSFramesOut=llcSapStatsSFramesOut, llcCcOperMaxUnackedIPDUsRcv=llcCcOperMaxUnackedIPDUsRcv, llcPortGroup=llcPortGroup, llcSapStatsUIOctetsIn=llcSapStatsUIOctetsIn, llcSapAdminEntry=llcSapAdminEntry, llcCcGroup=llcCcGroup, llcSapStatsReset=llcSapStatsReset, brouterMIB=brouterMIB, llcCcOperCreateTime=llcCcOperCreateTime, llcSapStatsDisconnect=llcSapStatsDisconnect)
