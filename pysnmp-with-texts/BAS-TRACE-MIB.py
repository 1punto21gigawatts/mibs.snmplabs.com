#
# PySNMP MIB module BAS-TRACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-TRACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
BasLogicalPortId, basTrace, BasSlotId, BasInterfaceId, BasChassisId = mibBuilder.importSymbols("BAS-MIB", "BasLogicalPortId", "basTrace", "BasSlotId", "BasInterfaceId", "BasChassisId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, IpAddress, Bits, MibIdentifier, Integer32, Unsigned32, Counter64, ObjectIdentity, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "IpAddress", "Bits", "MibIdentifier", "Integer32", "Unsigned32", "Counter64", "ObjectIdentity", "Counter32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
basTraceLog = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1))
if mibBuilder.loadTexts: basTraceLog.setLastUpdated('9903141120Z')
if mibBuilder.loadTexts: basTraceLog.setOrganization('Broadband Access Systems, Inc.')
if mibBuilder.loadTexts: basTraceLog.setContactInfo(' Tech Support Broadband Access Systems, Inc. 201 Forest Street Marlborough, MA 01752 USA 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basTraceLog.setDescription('The MIB module defining Trace Logging.')
basTraceLogNotifyComponentId = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: basTraceLogNotifyComponentId.setStatus('current')
if mibBuilder.loadTexts: basTraceLogNotifyComponentId.setDescription('')
basTraceLogNotifyString = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: basTraceLogNotifyString.setStatus('current')
if mibBuilder.loadTexts: basTraceLogNotifyString.setDescription('')
basTraceLogTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3), )
if mibBuilder.loadTexts: basTraceLogTable.setStatus('current')
if mibBuilder.loadTexts: basTraceLogTable.setDescription('')
basTraceLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3, 1), ).setIndexNames((0, "BAS-TRACE-MIB", "basTraceLogChassis"), (0, "BAS-TRACE-MIB", "basTraceLogSlot"), (0, "BAS-TRACE-MIB", "basTraceLogIf"), (0, "BAS-TRACE-MIB", "basTraceLogLPort"), (0, "BAS-TRACE-MIB", "basTraceLogComponentId"))
if mibBuilder.loadTexts: basTraceLogEntry.setStatus('current')
if mibBuilder.loadTexts: basTraceLogEntry.setDescription('')
basTraceLogChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basTraceLogChassis.setStatus('current')
if mibBuilder.loadTexts: basTraceLogChassis.setDescription('The BAS Chassis ID of the card.')
basTraceLogSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basTraceLogSlot.setStatus('current')
if mibBuilder.loadTexts: basTraceLogSlot.setDescription('The BAS Slot ID of the card.')
basTraceLogIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basTraceLogIf.setStatus('current')
if mibBuilder.loadTexts: basTraceLogIf.setDescription('The BAS interface ID of the card.')
basTraceLogLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basTraceLogLPort.setStatus('current')
if mibBuilder.loadTexts: basTraceLogLPort.setDescription('The BAS logical port ID of the card.')
basTraceLogComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71))).clone(namedValues=NamedValues(("cfm", 1), ("ma", 2), ("la", 3), ("rm", 4), ("ldp", 5), ("cmts", 6), ("cmtsMac", 7), ("cmtsBpi", 8), ("snmp", 9), ("agentx", 10), ("dhcpRelay", 11), ("mal", 12), ("javaRmiServ", 13), ("cfgRmiServ", 14), ("provRmiServ", 15), ("faultsRmiServ", 16), ("ldap", 17), ("jni", 18), ("ca", 19), ("rbp", 20), ("crp", 21), ("ftd", 22), ("rip", 23), ("ospf", 24), ("ip", 25), ("udp", 26), ("tcp", 27), ("sw", 28), ("icmp", 29), ("dhcpServ", 30), ("timeServ", 31), ("syslogServ", 32), ("tftpServ", 33), ("cli", 34), ("log", 35), ("tracelogd", 36), ("cmts-generic", 37), ("cmts-0", 38), ("cmts-1", 39), ("cmts-2", 40), ("cmts-3", 41), ("cmts-4", 42), ("cmts-5", 43), ("cmts-6", 44), ("cmts-7", 45), ("cmts-8", 46), ("cmts-9", 47), ("cmts-10", 48), ("cmts-11", 49), ("cmts-12", 50), ("cmts-13", 51), ("cmts-14", 52), ("cmts-15", 53), ("cmts-docsis-err", 54), ("idle", 55), ("rcv", 56), ("cmts-17", 57), ("rip-debug", 58), ("rip-console", 59), ("routing-trace", 60), ("ospf-debug", 61), ("ip-debug", 62), ("bas-rip-rx", 63), ("bas-rip-tx", 64), ("bas-rip-task", 65), ("bas-rip-timer", 66), ("bas-rip-route", 67), ("bas-rip-gen", 68), ("bas-rip-mem", 69), ("bas-rip-state", 70), ("last-app", 71))))
if mibBuilder.loadTexts: basTraceLogComponentId.setStatus('current')
if mibBuilder.loadTexts: basTraceLogComponentId.setDescription('The software component ID.')
basTraceLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 14, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("critical", 2), ("warning", 3), ("info", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basTraceLogLevel.setStatus('current')
if mibBuilder.loadTexts: basTraceLogLevel.setDescription("The software component's trace logging severity level.")
mibBuilder.exportSymbols("BAS-TRACE-MIB", basTraceLogNotifyComponentId=basTraceLogNotifyComponentId, PYSNMP_MODULE_ID=basTraceLog, basTraceLogEntry=basTraceLogEntry, basTraceLogSlot=basTraceLogSlot, basTraceLogIf=basTraceLogIf, basTraceLog=basTraceLog, basTraceLogComponentId=basTraceLogComponentId, basTraceLogNotifyString=basTraceLogNotifyString, basTraceLogLPort=basTraceLogLPort, basTraceLogLevel=basTraceLogLevel, basTraceLogTable=basTraceLogTable, basTraceLogChassis=basTraceLogChassis)
