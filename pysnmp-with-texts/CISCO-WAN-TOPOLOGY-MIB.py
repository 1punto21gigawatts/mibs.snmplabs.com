#
# PySNMP MIB module CISCO-WAN-TOPOLOGY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-TOPOLOGY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
PnniNodeId, = mibBuilder.importSymbols("PNNI-MIB", "PnniNodeId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, iso, TimeTicks, Counter64, Integer32, NotificationType, IpAddress, MibIdentifier, ModuleIdentity, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "TimeTicks", "Counter64", "Integer32", "NotificationType", "IpAddress", "MibIdentifier", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits")
TimeStamp, DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
ciscoWanTopologyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 234))
ciscoWanTopologyMIB.setRevisions(('2002-07-16 00:00', '2002-05-20 00:00', '2002-04-22 00:00', '2001-12-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanTopologyMIB.setRevisionsDescriptions(('Added cwtLinkOutsideLink to cwtLinkInfoTable.', 'Added cwtLinkInfoTable to this MIB to support Link Persistency. Also added the following notifications: a) cwtLinkInfoAdd, b) cwtLinkInfoDelete and c) cwtLinkModify.', 'Added cwtFeederInfoTable to this MIB to support Feeder Persistency. Also added the following notifications: a) cwtFeederInfoAdd, b) cwtFeederInfoDelete and c) cwtFeederInfoModify.', 'Initial version of the MIB.',))
if mibBuilder.loadTexts: ciscoWanTopologyMIB.setLastUpdated('200207160000Z')
if mibBuilder.loadTexts: ciscoWanTopologyMIB.setOrganization('Cisco System Inc.')
if mibBuilder.loadTexts: ciscoWanTopologyMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive, San Jose CA 95134-1706. USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanTopologyMIB.setDescription("A management station can use this MIB module for the maintenance of persistent topology information of the PNNI network. Previously, a management station had to query the network to retrieve the network topology via an Integrated Local Management Interface (ILMI) link. The nodes that are down or the nodes whose ILMI-enabled links are down will not be included in the topology. To rectify this limitation, the concept of persistent topology is used. The persistent topology feature requires the following: - a node configured to be the gateway node - PNNI links between the nodes - node and feeder database. A Gateway Node, for the purpose of this MIB module, is defined to be a node that is capable of maintaining a persistent topology database based on the PNNI Topology State Elements (PTSEs) sent by the other nodes in the PNNI peer group. The topology database is persistent across reboots. A feeder, in the context of this MIB, is defined as an ATM switch which does not have PNNI feature. It is connected to a node(with PNNI feature, therefore with routing capability) through a physical link. (The provisioning of the feeder and the link are beyond the scope of this MIB.) When a feeder and the link are provisioned, the feeder will update the routing node with its information(for example: feeder name, the feeder's port ifIndex etc.). The routing node will group these feeder information along with its own information(for example: its node identifier, its feeder port's information etc.) and send it to other nodes in the peer group in the PTSE. Upon receiving this PTSE, each node will update its database. The same actions are repeated when some information are modified on the feeder. A network management station can retrieve these information from a Gateway Node's database. In the case of a feeder failure, or a feeder is removed from the network, or the feeder's routing node failure, the feeder's corresponding entry in the database will not be removed. The only way to remove an entry from the database is for the network management station to delete this entry explicitly. A link, in the context of this MIB, is defined as a PNNI link between two PNNI nodes. (a) The nodal information for each node in the peer group stored in the persistent topology database includes: - node id - node name - Primary IP address - Secondary IP address - system object identifier - gateway node flag (a flag which indicates whether the node is configured to be a Gateway Node) Each node in a peer group has its own entry in the database. (b) The feeder information for each feeder in the peer group stored in the persistent topology database includes: - Routing node ID(local node ID) - A local port's 'ifIndex' which identifies the port the feeder is connected to on the routing node. - The feeder's 'shelf, slot, port' numbers which identifies the port on the feeder itself. - The protocol type that is used on the link. - The name of the feeder. - The LAN IP address of the feeder. - The ATM IP address of the feeder. - The model number of the feeder which identifies the type of the feeder. Each feeder in a peer group has its own entry in the database. (c) The link information for each node in the peer group stored in the persistent topology database includes: - local node's id, - local node port's ifIndex and corresponding physical descriptor - remote node's id - remote node port's ifIndex and corresponding physical descriptor Each link in a peer group has its own entry in the database. The concept of peer groups is defined by PNNI, and each peer group contains at least one node. The persistent topology database only contains nodal information for the nodes in a particular peer group, because the Gateway Nodes extract the nodal information from PNNI PTSEs, and the PTSEs are flooded only within a peer group. The persistent topology database is used by a management station to discover the topology of the network irrespective of the state and reachability of the nodes in that network. The information in the topology database will not be deleted automatically. The information can only be deleted by the network operator as an administrative measure. This is to ensure that even if a node has gone down, its information will still be in the topology database until it is deleted by the network operator. An outside link is a link that connects to a lowest-level outside node. In contrast to an inside link (i.e., horizontal link) or an uplink, an outside link does not form part of the PNNI topology, and is therefore not used in path computation.")
ciscoWanTopologyMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 0))
ciscoWanTopologyMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 1))
cwtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 2))
cwtSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 1))
cwtNodalInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2))
cwtFeederInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3))
cwtLinkInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4))
class CwtNodeInfoTableIndex(TextualConvention, Integer32):
    description = 'The index of the cwtNodeInfoTable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1024)

cwtGatewayAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwtGatewayAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cwtGatewayAdminStatus.setDescription("The value of this object determines whether this node is a Gateway Node or not. A value of `enable' configures this node to be the Gateway Node, and enables the generation of the topology database. A value of `disable' configures this node to not be a Gateway Node, and deletes the topology database if it exists.")
cwtGatewayNodeOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("disabling", 3), ("enabling", 4), ("enabledAndFull", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtGatewayNodeOperStatus.setStatus('current')
if mibBuilder.loadTexts: cwtGatewayNodeOperStatus.setDescription("This is the operational status of the Gateway Node. 'disabled' indicates that this node is not a Gateway Node and no topology database is available on this node. 'enabled' indicates that this node has been configured as the Gateway Node and the topology database has been built. 'disabling' indicates that this node is no longer the Gateway Node and is in the process of deleting the topology database. 'enabling' indicates that this node has been configured as the Gateway Node and is in the process of building the topology database. 'enabledAndFull' indicates that this node has been configured as the Gateway Node but its topology database is full. The management station should always poll this object first before taking action to: a) 'enable' or 'disable' the Gateway Node b) remove an entry or entries from 'cwtNodeInfoTable' and its corresponding entries from 'cwtFeederInfoTable'. If the object returns 'disabled', the management station can 'enable' the Gateway Node if it desires. If the object returns 'enabled', the management station can 'disable' the Gateway Node if it desires. If the object returns 'enabling' or 'disabling', the management station should not take any actions. If the object returns 'enabledAndFull', the management station can take one of the following actions: a) remove enties from the cwtNodeInfoTable b) 'disable' and then 'enable' the Gateway Node, which would cause the node to delete and then rebuild the topology database. ")
cwtDBLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtDBLastChange.setStatus('current')
if mibBuilder.loadTexts: cwtDBLastChange.setDescription("The value of MIB II's sysUpTime object at the time that: a) the topology database is last changed on this node. b) the cwtGatewayAdminStatus is last changed. c) the cwtGatewayNodeOperStatus enters the 'enabledAndFull' state.")
cwtNodeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1), )
if mibBuilder.loadTexts: cwtNodeInfoTable.setStatus('current')
if mibBuilder.loadTexts: cwtNodeInfoTable.setDescription('A table of node topology information is to be maintained for the management station. This table contains the information for the nodes in the peer group.')
cwtNodeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-TOPOLOGY-MIB", "cwtIndex"))
if mibBuilder.loadTexts: cwtNodeInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cwtNodeInfoEntry.setDescription('This is a row entry in the topology node info table. Each entry corresponds to one node in the network.')
cwtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 1), CwtNodeInfoTableIndex())
if mibBuilder.loadTexts: cwtIndex.setStatus('current')
if mibBuilder.loadTexts: cwtIndex.setDescription("This is the index into the topology database array. This value should remain persistent while the topology database exists, which means that it'll be consistent across boots. However, if this node is disabled as the gateway node, and later on enabled (by changing the value of cwtGatewayAdminStatus), then the cwtIndex may be different for the same node info entry in the topology database.")
cwtGatewayNodeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtGatewayNodeFlag.setStatus('current')
if mibBuilder.loadTexts: cwtGatewayNodeFlag.setDescription("This variable indicates if the corresponding entry is a Gateway Node or not. If this value contains 'true', the corresponding node is a Gateway Node. If this value contains 'false', then the corresponding node is not a Gateway Node.")
cwtNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 3), PnniNodeId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtNodeId.setReference('ATM Forum PNNI 1.0 Section 5.3.3')
if mibBuilder.loadTexts: cwtNodeId.setStatus('current')
if mibBuilder.loadTexts: cwtNodeId.setDescription('The unique Id which identifies the node in the entry. This value is different from cwtIndex because it is a unique number which identifies a node in the ATM network, while cwtIndex is an index for an entry in the topology database. The same physical node can have different cwtIndex in different topology databases.')
cwtNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtNodeName.setStatus('current')
if mibBuilder.loadTexts: cwtNodeName.setDescription('The configured name of the node.')
cwtPrimIPIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 5), IANAifType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtPrimIPIfType.setStatus('current')
if mibBuilder.loadTexts: cwtPrimIPIfType.setDescription('This object specifies the type of interface for the associated instance of cwtPrimIP.')
cwtPrimIPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtPrimIPIfName.setStatus('current')
if mibBuilder.loadTexts: cwtPrimIPIfName.setDescription('This object specifies the name of the interface for the associated instance of cwtPrimIP.')
cwtPrimIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtPrimIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cwtPrimIPAddrType.setDescription('This object specifies the type of address contained in the associated instance of cwtPrimIP.')
cwtPrimIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtPrimIP.setStatus('current')
if mibBuilder.loadTexts: cwtPrimIP.setDescription('Primary IP address of the corresponding node. This value is taken from the PNNI Nodal PTSE. The primary IP address is used by the NMS to manage the switch. The type of interface (i.e. ATM interface, LAN interface, etc) for this IP address is specified by cwtPrimIPIfType. The NMS will use this IP address first, but if it can not connect to the switch on this address, then it will try to contact the switch using the secondary IP address instead.')
cwtSecIPIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 9), IANAifType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtSecIPIfType.setStatus('current')
if mibBuilder.loadTexts: cwtSecIPIfType.setDescription('This object specifies the type of interface for the associated instance of cwtSecIP.')
cwtSecIPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtSecIPIfName.setStatus('current')
if mibBuilder.loadTexts: cwtSecIPIfName.setDescription('This object specifies the name of the interface for the associated instance of cwtSecIP.')
cwtSecIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 11), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtSecIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cwtSecIPAddrType.setDescription('This object specifies the type of address contained in the associated instance of cwtSecIP.')
cwtSecIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtSecIP.setStatus('current')
if mibBuilder.loadTexts: cwtSecIP.setDescription('Secondary IP address of the corresponding node. This value is taken from the PNNI Nodal PTSE. This value is used by the NMS to manage the switch. Please refer to the Description section of cwtPrimIP for more information.')
cwtSysObjId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 13), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtSysObjId.setReference('RFC 1907')
if mibBuilder.loadTexts: cwtSysObjId.setStatus('current')
if mibBuilder.loadTexts: cwtSysObjId.setDescription('This variable contains the sysObjectID of the node, which is used to identify different hardware platforms. The actual values are defined in CISCO-PRODUCTS-MIB.')
cwtNodeInfoTimeOutFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtNodeInfoTimeOutFlag.setStatus('current')
if mibBuilder.loadTexts: cwtNodeInfoTimeOutFlag.setDescription("This variable indicates if the PTSE of this node is currently contained in the PNNI PTSE database. The nodal information in the persistent topology database is derived from the PTSEs in the PNNI PTSE database. The entries in the PNNI PTSE database times out if no new PTSE is received from a node after a certain time. If that happens, this object is set to 'false'. This object would allow the NMS to determine whether this node currently has connectivity with the rest of the network.")
cwtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 2, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwtRowStatus.setDescription("In our implementation, we'll be supporting 'active', 'createAndGo', and 'destroy'. The value of this variable is set to 'active' by the managed system for each valid entry. If a management station wants to delete an entry from the database, this value is set to 'destroy'. If a management station wants to create a new entry, this value is set to 'createAndGo'.")
cwtFeederInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1), )
if mibBuilder.loadTexts: cwtFeederInfoTable.setStatus('current')
if mibBuilder.loadTexts: cwtFeederInfoTable.setDescription("A table of 'feeder' information to be maintained for the management station. This table contains the information for the 'feeders' in this peer group.")
cwtFeederInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-TOPOLOGY-MIB", "cwtFeederIndex"))
if mibBuilder.loadTexts: cwtFeederInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cwtFeederInfoEntry.setDescription("This is a row entry in the feeder info table. Each entry corresponds to one 'feeder' in the network.")
cwtFeederIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: cwtFeederIndex.setStatus('current')
if mibBuilder.loadTexts: cwtFeederIndex.setDescription("This is the index into the feeder database array. This value should remain persistent while the feeder database exists, which means that it'll be consistent across boots. However, if this node is disabled as the gateway node, and later on enabled, then the 'cwtFeederIndex' may be different for the same feeder info entry in the 'feeder database'.")
cwtLocalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtLocalNodeId.setReference('ATM Forum PNNI 1.0 Section 5.3.3')
if mibBuilder.loadTexts: cwtLocalNodeId.setStatus('current')
if mibBuilder.loadTexts: cwtLocalNodeId.setDescription('The unique Id which identifies the node the feeder is attached to.')
cwtLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtLocalIfIndex.setStatus('current')
if mibBuilder.loadTexts: cwtLocalIfIndex.setDescription("This variable contains the 'ifIndex' of the local port this feeder is connected to.")
cwtLocalIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtLocalIfName.setStatus('current')
if mibBuilder.loadTexts: cwtLocalIfName.setDescription("The textual name of the interface of the local port this feeder is connected to. This should contain the same 'ifName' associated with the 'cwtLocalIfIndex'. If this interface does not have a textual name, the value of this object is a zero length string.")
cwtFeederShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederShelf.setStatus('current')
if mibBuilder.loadTexts: cwtFeederShelf.setDescription('This variable contains the physcial shelf number of the feeder module.')
cwtFeederSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederSlot.setStatus('current')
if mibBuilder.loadTexts: cwtFeederSlot.setDescription('This variable contains the physical slot number of the feeder module.')
cwtFeederPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederPort.setStatus('current')
if mibBuilder.loadTexts: cwtFeederPort.setDescription('This variable contains the physical port number of the feeder module.')
cwtFeederLMIType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("feeder", 1), ("xLMI", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederLMIType.setStatus('current')
if mibBuilder.loadTexts: cwtFeederLMIType.setDescription("This object identifies the 'link' type. feeder(1) is applicable when cwtFeederType contains a value other than fdrNON(12). xLMI(2) is applicable only when cwtFeederType contains a value of fdrNON(12). Both feeder(1) and xLMI(2) are CISCO proprietary interfaces. xLMI stands for 'extended local management interface.")
cwtFeederType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("fdrIPX", 1), ("fdrBPX", 2), ("fdrIpxAF", 3), ("fdrBASIS", 4), ("fdrUNKNOWN", 5), ("fdrUNI", 6), ("fdrAPS", 7), ("fdrIGX", 8), ("fdrIgxAF", 9), ("fdrVSI", 10), ("fdrPAR", 11), ("fdrNON", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederType.setStatus('current')
if mibBuilder.loadTexts: cwtFeederType.setDescription('This identifies the feeder type. fdrNON(12) is applicable when cwfLMIType is xLMI(2). Other values are applicable when cwtFeederLMIType is feeder(1). The possible values are : fdrIPX -- Feeder is an IPX node in a routing network fdrBPX -- Feeder is an BPX node in a routing network fdrIpxAF -- Feeder is a stand-alone IPX node fdrBASIS -- Feeder is a stand-alone BASIS node fdrUNKNOWN -- Feeder is unknown fdrUNI -- Feeder is a UNI AIT (phase 0) fdrAPS -- Feeder is an APS (Adjunct Processor Shelf) fdrIGX -- Feeder is an IGX node in a routing network fdrIgxAF -- Feeder is a stand-alone IGX node fdrVSI -- Feeder is an VSI Controller fdrPAR -- Feeder is a PAR fdrNON -- This is non-feeder type')
cwtFeederName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederName.setStatus('current')
if mibBuilder.loadTexts: cwtFeederName.setDescription('The configured name of the feeder.')
cwtFeederLanIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederLanIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cwtFeederLanIPAddrType.setDescription('This object specifies the type of address contained in the associated instance of cwtFeederLanIP.')
cwtFeederLanIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederLanIP.setStatus('current')
if mibBuilder.loadTexts: cwtFeederLanIP.setDescription("This object specifies the LAN IP address of the 'feeder'. The type of this address is specified by cwtFeederLanIPAddrType.")
cwtFeederAtmIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 13), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederAtmIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cwtFeederAtmIPAddrType.setDescription('This object specifies the type of address contained in the associated instance of cwtFeederAtmIP.')
cwtFeederAtmIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederAtmIP.setStatus('current')
if mibBuilder.loadTexts: cwtFeederAtmIP.setDescription("This object identifies the ATM IP address of the 'feeder'. The type of this address is specified by cwtFeederAtmIP.")
cwtFeederModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwtFeederModelNumber.setStatus('current')
if mibBuilder.loadTexts: cwtFeederModelNumber.setDescription("This variable contains the 'model number' of the corresponding feeder. This is an implementation specific integer value which is used to differentiate between feeder platforms.")
cwtFeederRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 3, 1, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwtFeederRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwtFeederRowStatus.setDescription("In our implementation, we'll be supporting 'active', and 'destroy'. The value of this variable is set to 'active' by the managed system for each valid entry. If a management station wants to delete an entry from the database, this value is set to 'destroy'.")
cwtLinkInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1), )
if mibBuilder.loadTexts: cwtLinkInfoTable.setStatus('current')
if mibBuilder.loadTexts: cwtLinkInfoTable.setDescription("A table of 'link' information in the PNNI network. If a switch is managed by multiple network management stations, these network management stations can have a persistent view of links in the network by retrieving this table. A link is a PNNI link between two nodes.")
cwtLinkInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-WAN-TOPOLOGY-MIB", "cwtLinkIndex"))
if mibBuilder.loadTexts: cwtLinkInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cwtLinkInfoEntry.setDescription("This is an entry in the 'cwtLinkInfoTable'. Each entry corresponds to one link in the network. a) The entries in this table are derived from PNNI PTSE database or added by a network management station. b) The entries in the PNNI PTSE database time out when no new PTSE is received from a node after a certain time. However, the corresponding entries are not removed from this table. c) Only the network management station can delete an entry from this table. d) A network management station cannot modify an existing entry in this table.")
cwtLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: cwtLinkIndex.setStatus('current')
if mibBuilder.loadTexts: cwtLinkIndex.setDescription("This is the index into the link database array. This value is of local significance to the gateway node. As long as a node remains 'enabled' as a gateway node, this value remains persistent across boots. However, if this node is disabled as the gateway node, and is enabled later on, the cwtLinkIndex may be different for the same link info entry in the topology database.")
cwtLinkLocalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 2), PnniNodeId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkLocalNodeId.setReference('ATM Forum PNNI 1.0 Section 5.3.3')
if mibBuilder.loadTexts: cwtLinkLocalNodeId.setStatus('current')
if mibBuilder.loadTexts: cwtLinkLocalNodeId.setDescription('The unique Id which identifies the local node this link resides on.')
cwtLinkRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 3), PnniNodeId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkRemoteNodeId.setReference('ATM Forum PNNI 1.0 Section 5.3.3')
if mibBuilder.loadTexts: cwtLinkRemoteNodeId.setStatus('current')
if mibBuilder.loadTexts: cwtLinkRemoteNodeId.setDescription('The unique Id which identifies the remote node this link resides on.')
cwtLinkLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkLocalIfIndex.setStatus('current')
if mibBuilder.loadTexts: cwtLinkLocalIfIndex.setDescription("The local 'ifIndex' of this link.")
cwtLinkRemoteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkRemoteIfIndex.setStatus('current')
if mibBuilder.loadTexts: cwtLinkRemoteIfIndex.setDescription("The remote 'ifIndex' of this link.")
cwtLinkLocalPhysicalId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkLocalPhysicalId.setStatus('current')
if mibBuilder.loadTexts: cwtLinkLocalPhysicalId.setDescription('The local physical port identifier of this link.')
cwtLinkRemotePhysicalId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkRemotePhysicalId.setStatus('current')
if mibBuilder.loadTexts: cwtLinkRemotePhysicalId.setDescription('The remote physcial port identifier of this link.')
cwtLinkInfoTimeOutFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkInfoTimeOutFlag.setStatus('current')
if mibBuilder.loadTexts: cwtLinkInfoTimeOutFlag.setDescription("This variable indicates if the PTSE of this link is currently contained in the PNNI PTSE database. If this entry is also contained in the PNNI PTSE database, the agent sets the value of this variable to 'true'. If this entry is not contained in the PNNI PTSE database, the agent set the value of this variable to 'false'. ")
cwtLinkOutsideLink = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkOutsideLink.setStatus('current')
if mibBuilder.loadTexts: cwtLinkOutsideLink.setDescription('This variable indicates if the link is an outside link.')
cwtLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 234, 1, 4, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwtLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwtLinkRowStatus.setDescription("In our implementation, we'll be supporting 'active', 'createAndGo', and 'destroy'. The value of this variable is set to 'active' by the managed system for each valid entry. If a management station wants to delete an entry from the database, this value is set to 'destroy'. If a management station wants to create a new entry, this value is set to 'createAndGo'. The network management station should provide the intial values of all mib objects when setting this variable to 'createAndGo'.")
cwtConfigGatewayStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 1)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtGatewayAdminStatus"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtDBLastChange"))
if mibBuilder.loadTexts: cwtConfigGatewayStatus.setStatus('current')
if mibBuilder.loadTexts: cwtConfigGatewayStatus.setDescription('This notification is generated when the gateway node admin status is changed.')
cwtTopoInfoAdd = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 2)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtGatewayNodeFlag"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPIfType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPIfType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSysObjId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeInfoTimeOutFlag"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtDBLastChange"))
if mibBuilder.loadTexts: cwtTopoInfoAdd.setStatus('current')
if mibBuilder.loadTexts: cwtTopoInfoAdd.setDescription('This notification is generated when a new topology nodal info entry is added in the topology database.')
cwtTopoInfoModify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 3)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtGatewayNodeFlag"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPIfType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPIfType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSysObjId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeInfoTimeOutFlag"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtDBLastChange"))
if mibBuilder.loadTexts: cwtTopoInfoModify.setStatus('current')
if mibBuilder.loadTexts: cwtTopoInfoModify.setDescription('This notification is generated when an existing topology nodal info entry is modified in the topology database.')
cwtTopoInfoDelete = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 4)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtDBLastChange"))
if mibBuilder.loadTexts: cwtTopoInfoDelete.setStatus('current')
if mibBuilder.loadTexts: cwtTopoInfoDelete.setDescription('This notification is generated when an existing topology nodal info entry is deleted in the topology database.')
cwtTopoDbFull = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 5)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtDBLastChange"))
if mibBuilder.loadTexts: cwtTopoDbFull.setStatus('current')
if mibBuilder.loadTexts: cwtTopoDbFull.setDescription('This notification is generated when the topology database becomes full.')
cwtFeederInfoAdd = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 6)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederShelf"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederSlot"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederPort"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLMIType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLanIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLanIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederAtmIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederAtmIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederModelNumber"))
if mibBuilder.loadTexts: cwtFeederInfoAdd.setStatus('current')
if mibBuilder.loadTexts: cwtFeederInfoAdd.setDescription('This notification is generated when a new feeder info entry is added in the database.')
cwtFeederInfoModify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 7)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLMIType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLanIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLanIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederAtmIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederAtmIP"))
if mibBuilder.loadTexts: cwtFeederInfoModify.setStatus('current')
if mibBuilder.loadTexts: cwtFeederInfoModify.setDescription('This notification is generated when an existing feeder info entry is modified in the database.')
cwtFeederInfoDelete = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 8)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederName"))
if mibBuilder.loadTexts: cwtFeederInfoDelete.setStatus('current')
if mibBuilder.loadTexts: cwtFeederInfoDelete.setDescription('This notification is generated when an existing feeder info entry is deleted in the database.')
cwtLinkInfoAdd = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 9)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalPhysicalId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemotePhysicalId"))
if mibBuilder.loadTexts: cwtLinkInfoAdd.setStatus('current')
if mibBuilder.loadTexts: cwtLinkInfoAdd.setDescription("This notification is generated when a new link info entry is added in the 'link' database.")
cwtLinkInfoModify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 10)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkInfoTimeOutFlag"))
if mibBuilder.loadTexts: cwtLinkInfoModify.setStatus('current')
if mibBuilder.loadTexts: cwtLinkInfoModify.setDescription("This notification is generated when an existing link info entry is modified in the 'link' database.")
cwtLinkInfoDelete = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 234, 0, 11)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteIfIndex"))
if mibBuilder.loadTexts: cwtLinkInfoDelete.setStatus('current')
if mibBuilder.loadTexts: cwtLinkInfoDelete.setDescription("This notification is generated when an existing link info entry is deleted in the 'link' database.")
cwtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 1))
cwtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2))
cwtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 1, 1)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtSystemMIBGroups"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodalMIBGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtMIBCompliance = cwtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cwtMIBCompliance.setDescription('The compliance statement for SNMPv2 entities which implement persistent topology solution for CWM.')
cwtMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 1, 2)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtSystemMIBGroups"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodalMIBGroups"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederMIBGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtMIBCompliance2 = cwtMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cwtMIBCompliance2.setDescription('The compliance statement for SNMPv2 entities which implement persistent topology solution for CWM.')
cwtMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 1, 3)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtSystemMIBGroups"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodalMIBGroups"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederMIBGroups"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkMIBGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtMIBCompliance3 = cwtMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: cwtMIBCompliance3.setDescription('The compliance statement for SNMPv2 entities which implement persistent topology solution for CWM.')
cwtSystemMIBGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2, 1)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtGatewayAdminStatus"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtGatewayNodeOperStatus"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtDBLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtSystemMIBGroups = cwtSystemMIBGroups.setStatus('current')
if mibBuilder.loadTexts: cwtSystemMIBGroups.setDescription('This group contains the object which enables a node to function as a Gateway Node.')
cwtNodalMIBGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2, 2)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtGatewayNodeFlag"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPIfType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtPrimIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPIfType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSecIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtSysObjId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtNodeInfoTimeOutFlag"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtNodalMIBGroups = cwtNodalMIBGroups.setStatus('current')
if mibBuilder.loadTexts: cwtNodalMIBGroups.setDescription('This group contains objects which identify a node in the network.')
cwtFeederMIBGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2, 3)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLocalIfName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederShelf"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederSlot"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederPort"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLMIType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederName"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLanIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederLanIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederAtmIPAddrType"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederAtmIP"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederModelNumber"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtFeederMIBGroups = cwtFeederMIBGroups.setStatus('current')
if mibBuilder.loadTexts: cwtFeederMIBGroups.setDescription('This group contains objects which identify a node in the network.')
cwtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2, 4)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtConfigGatewayStatus"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoAdd"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoModify"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoDelete"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoDbFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtNotificationsGroup = cwtNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cwtNotificationsGroup.setDescription('A collection of notifications which indicate changes in the topology database.')
cwtNotificationsGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2, 5)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtConfigGatewayStatus"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoAdd"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoModify"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoDelete"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoDbFull"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederInfoAdd"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederInfoModify"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederInfoDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtNotificationsGroup2 = cwtNotificationsGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: cwtNotificationsGroup2.setDescription('A collection of notifications which indicate changes in the topology database.')
cwtNotificationsGroup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2, 6)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtConfigGatewayStatus"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoAdd"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoModify"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoInfoDelete"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtTopoDbFull"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederInfoAdd"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederInfoModify"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtFeederInfoDelete"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkInfoAdd"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkInfoModify"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkInfoDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtNotificationsGroup3 = cwtNotificationsGroup3.setStatus('current')
if mibBuilder.loadTexts: cwtNotificationsGroup3.setDescription('A collection of notifications which indicate changes in the topology database.')
cwtLinkMIBGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 234, 2, 2, 7)).setObjects(("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteNodeId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemoteIfIndex"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkLocalPhysicalId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRemotePhysicalId"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkInfoTimeOutFlag"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkOutsideLink"), ("CISCO-WAN-TOPOLOGY-MIB", "cwtLinkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwtLinkMIBGroups = cwtLinkMIBGroups.setStatus('current')
if mibBuilder.loadTexts: cwtLinkMIBGroups.setDescription('This group contains objects which identify a link in the network.')
mibBuilder.exportSymbols("CISCO-WAN-TOPOLOGY-MIB", cwtSystemMIBGroups=cwtSystemMIBGroups, cwtLinkRemoteNodeId=cwtLinkRemoteNodeId, cwtMIBConformance=cwtMIBConformance, cwtNodeId=cwtNodeId, cwtLinkInfoDelete=cwtLinkInfoDelete, cwtNotificationsGroup3=cwtNotificationsGroup3, cwtTopoInfoModify=cwtTopoInfoModify, cwtFeederInfoModify=cwtFeederInfoModify, cwtTopoDbFull=cwtTopoDbFull, cwtNodeInfoTimeOutFlag=cwtNodeInfoTimeOutFlag, cwtLinkRemoteIfIndex=cwtLinkRemoteIfIndex, cwtLocalIfIndex=cwtLocalIfIndex, cwtFeederLanIPAddrType=cwtFeederLanIPAddrType, cwtFeederRowStatus=cwtFeederRowStatus, cwtMIBCompliance3=cwtMIBCompliance3, cwtFeederMIBGroups=cwtFeederMIBGroups, cwtSystemGroup=cwtSystemGroup, cwtMIBCompliance=cwtMIBCompliance, cwtFeederInfoAdd=cwtFeederInfoAdd, CwtNodeInfoTableIndex=CwtNodeInfoTableIndex, cwtLinkOutsideLink=cwtLinkOutsideLink, ciscoWanTopologyMIBNotifs=ciscoWanTopologyMIBNotifs, cwtNodeInfoTable=cwtNodeInfoTable, cwtFeederInfoEntry=cwtFeederInfoEntry, ciscoWanTopologyMIBObjects=ciscoWanTopologyMIBObjects, cwtConfigGatewayStatus=cwtConfigGatewayStatus, cwtLinkLocalNodeId=cwtLinkLocalNodeId, cwtLinkMIBGroups=cwtLinkMIBGroups, cwtGatewayAdminStatus=cwtGatewayAdminStatus, cwtPrimIPIfName=cwtPrimIPIfName, cwtFeederModelNumber=cwtFeederModelNumber, cwtGatewayNodeFlag=cwtGatewayNodeFlag, cwtLinkLocalIfIndex=cwtLinkLocalIfIndex, cwtRowStatus=cwtRowStatus, cwtMIBCompliances=cwtMIBCompliances, cwtMIBCompliance2=cwtMIBCompliance2, cwtNodalInfoGroup=cwtNodalInfoGroup, cwtLinkIndex=cwtLinkIndex, cwtSecIP=cwtSecIP, cwtDBLastChange=cwtDBLastChange, cwtFeederAtmIP=cwtFeederAtmIP, cwtTopoInfoDelete=cwtTopoInfoDelete, cwtLinkInfoModify=cwtLinkInfoModify, cwtFeederSlot=cwtFeederSlot, cwtLinkLocalPhysicalId=cwtLinkLocalPhysicalId, cwtNotificationsGroup2=cwtNotificationsGroup2, cwtFeederIndex=cwtFeederIndex, cwtPrimIP=cwtPrimIP, cwtFeederType=cwtFeederType, cwtFeederInfoGroup=cwtFeederInfoGroup, cwtLinkInfoEntry=cwtLinkInfoEntry, cwtNodalMIBGroups=cwtNodalMIBGroups, ciscoWanTopologyMIB=ciscoWanTopologyMIB, cwtSecIPIfType=cwtSecIPIfType, cwtFeederPort=cwtFeederPort, cwtGatewayNodeOperStatus=cwtGatewayNodeOperStatus, cwtLinkInfoGroup=cwtLinkInfoGroup, PYSNMP_MODULE_ID=ciscoWanTopologyMIB, cwtSysObjId=cwtSysObjId, cwtPrimIPAddrType=cwtPrimIPAddrType, cwtFeederInfoDelete=cwtFeederInfoDelete, cwtIndex=cwtIndex, cwtLocalNodeId=cwtLocalNodeId, cwtSecIPAddrType=cwtSecIPAddrType, cwtNotificationsGroup=cwtNotificationsGroup, cwtSecIPIfName=cwtSecIPIfName, cwtPrimIPIfType=cwtPrimIPIfType, cwtLinkInfoTable=cwtLinkInfoTable, cwtLinkInfoTimeOutFlag=cwtLinkInfoTimeOutFlag, cwtFeederLMIType=cwtFeederLMIType, cwtLinkRowStatus=cwtLinkRowStatus, cwtFeederAtmIPAddrType=cwtFeederAtmIPAddrType, cwtLocalIfName=cwtLocalIfName, cwtFeederName=cwtFeederName, cwtLinkInfoAdd=cwtLinkInfoAdd, cwtNodeName=cwtNodeName, cwtFeederInfoTable=cwtFeederInfoTable, cwtTopoInfoAdd=cwtTopoInfoAdd, cwtNodeInfoEntry=cwtNodeInfoEntry, cwtFeederShelf=cwtFeederShelf, cwtMIBGroups=cwtMIBGroups, cwtFeederLanIP=cwtFeederLanIP, cwtLinkRemotePhysicalId=cwtLinkRemotePhysicalId)
