#
# PySNMP MIB module ETHER-CHIPSET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ETHER-CHIPSET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
dot3, = mibBuilder.importSymbols("EtherLike-MIB", "dot3")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, TimeTicks, Counter32, IpAddress, NotificationType, Gauge32, iso, Unsigned32, ObjectIdentity, Counter64, mib_2, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "TimeTicks", "Counter32", "IpAddress", "NotificationType", "Gauge32", "iso", "Unsigned32", "ObjectIdentity", "Counter64", "mib-2", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
etherChipsetMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 70))
etherChipsetMIB.setRevisions(('1999-08-24 04:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etherChipsetMIB.setRevisionsDescriptions(('Initial version of this module created by splitting the chipset registration information out from the EtherLike-MIB. Version published as RFC 2666.',))
if mibBuilder.loadTexts: etherChipsetMIB.setLastUpdated('9908240400Z')
if mibBuilder.loadTexts: etherChipsetMIB.setOrganization('IETF 802.3 Hub MIB Working Group')
if mibBuilder.loadTexts: etherChipsetMIB.setContactInfo('WG E-mail: hubmib@hprnd.rose.hp.com To subscribe: hubmib-request@hprnd.rose.hp.com Chair: Dan Romascanu Postal: Lucent Technologies Atidum Technology Park, Bldg. 3 Tel Aviv 61131 Israel Tel: +972 3 645 8414 E-mail: dromasca@lucent.com Editor: John Flick Postal: Hewlett-Packard Company 8000 Foothills Blvd. M/S 5556 Roseville, CA 95747-5556 USA Tel: +1 916 785 4018 Fax: +1 916 785 3583 E-mail: johnf@rose.hp.com')
if mibBuilder.loadTexts: etherChipsetMIB.setDescription('This MIB module contains registered values for use by the dot3StatsEtherChipSet object in the EtherLike-MIB. This object is used to identify the MAC hardware used to communicate on an interface. Note that the dot3StatsEtherChipSet object has been deprecated. The primary purpose of this module is to capture historic assignments made by the various IETF working groups that have been responsible for maintaining the EtherLike-MIB. Implementations which support the dot3StatsEtherChipSet object for backwards compatability may continue to use these values. For those chipsets not represented in this module, registration is required in other documentation, e.g., assignment within that part of the registration tree delegated to individual enterprises (see RFC 1155 and RFC 1902).')
dot3ChipSets = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8))
dot3ChipSetAMD = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 1))
dot3ChipSetAMD7990 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 1))
if mibBuilder.loadTexts: dot3ChipSetAMD7990.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD7990.setDescription('The authoritative identifier for the Advanced Micro Devices Am7990 Local Area Network Controller for Ethernet (LANCE).')
dot3ChipSetAMD79900 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 2))
if mibBuilder.loadTexts: dot3ChipSetAMD79900.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79900.setDescription('The authoritative identifier for the Advanced Micro Devices Am79900 chip.')
dot3ChipSetAMD79C940 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 3))
if mibBuilder.loadTexts: dot3ChipSetAMD79C940.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C940.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C940 Media Access Controller for Ethernet (MACE).')
dot3ChipSetAMD79C90 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 4))
if mibBuilder.loadTexts: dot3ChipSetAMD79C90.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C90.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C90 CMOS Local Area Network Controller for Ethernet (C-LANCE).')
dot3ChipSetAMD79C960 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 5))
if mibBuilder.loadTexts: dot3ChipSetAMD79C960.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C960.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C960 PCnet-ISA Single Chip Ethernet Controller for ISA.')
dot3ChipSetAMD79C961 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 6))
if mibBuilder.loadTexts: dot3ChipSetAMD79C961.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C961.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C961 PCnet-ISA+ Single Chip Plug & Play Full-Duplex Ethernet Controller for ISA.')
dot3ChipSetAMD79C961A = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 7))
if mibBuilder.loadTexts: dot3ChipSetAMD79C961A.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C961A.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C961A PCnet-ISA II Single Chip Plug & Play Full-Duplex Ethernet Controller for ISA.')
dot3ChipSetAMD79C965 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 8))
if mibBuilder.loadTexts: dot3ChipSetAMD79C965.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C965.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C965 PCnet-32 Single Chip Ethernet Controller for PCI.')
dot3ChipSetAMD79C970 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 9))
if mibBuilder.loadTexts: dot3ChipSetAMD79C970.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C970.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C970 PCnet PCI Single Chip Ethernet Controller for PCI Local Bus.')
dot3ChipSetAMD79C970A = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 10))
if mibBuilder.loadTexts: dot3ChipSetAMD79C970A.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C970A.setDescription('The authoritative identifier for the Advanced Micro Devices AM79C970A PCnet PCI II Single Chip Full-Duplex Ethernet Controller for PCI Local Bus.')
dot3ChipSetAMD79C971 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 11))
if mibBuilder.loadTexts: dot3ChipSetAMD79C971.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C971.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C971 PCnet-FAST Single Chip Full-Duplex 10/100 Mbps Ethernet Controller for PCI Local Bus.')
dot3ChipSetAMD79C972 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 1, 12))
if mibBuilder.loadTexts: dot3ChipSetAMD79C972.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetAMD79C972.setDescription('The authoritative identifier for the Advanced Micro Devices Am79C972 PCnet-FAST+ Enhanced 10/100 Mbps PCI Ethernet Controller with OnNow Support.')
dot3ChipSetIntel = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 2))
dot3ChipSetIntel82586 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 2, 1))
if mibBuilder.loadTexts: dot3ChipSetIntel82586.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetIntel82586.setDescription('The authoritative identifier for the Intel 82586 IEEE 802.3 Ethernet LAN Coprocessor.')
dot3ChipSetIntel82596 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 2, 2))
if mibBuilder.loadTexts: dot3ChipSetIntel82596.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetIntel82596.setDescription('The authoritative identifier for the Intel 82596 High-Performance 32-Bit Local Area Network Coprocessor.')
dot3ChipSetIntel82595 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 2, 3))
if mibBuilder.loadTexts: dot3ChipSetIntel82595.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetIntel82595.setDescription('The authoritative identifier for the Intel 82595 High Integration Ethernet Controller.')
dot3ChipSetIntel82557 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 2, 4))
if mibBuilder.loadTexts: dot3ChipSetIntel82557.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetIntel82557.setDescription('The authoritative identifier for the Intel 82557 Fast Ethernet PCI Bus Lan Controller.')
dot3ChipSetIntel82558 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 2, 5))
if mibBuilder.loadTexts: dot3ChipSetIntel82558.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetIntel82558.setDescription('The authoritative identifier for the Intel 82558 Fast Ethernet PCI Bus LAN Controller with Integrated PHY.')
dot3ChipSetSeeq = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 3))
dot3ChipSetSeeq8003 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 1))
if mibBuilder.loadTexts: dot3ChipSetSeeq8003.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq8003.setDescription('The authoritative identifier for the SEEQ 8003 chip set.')
dot3ChipSetSeeq80C03 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 2))
if mibBuilder.loadTexts: dot3ChipSetSeeq80C03.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq80C03.setDescription('The authoritative identifier for the SEEQ 80C03 Full-Duplex CMOS Ethernet Data Link Controller (MAC).')
dot3ChipSetSeeq84C30 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 3))
if mibBuilder.loadTexts: dot3ChipSetSeeq84C30.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq84C30.setDescription('The authoritative identifier for the SEEQ 4-Port 84C30 Full-Duplex CMOS Ethernet 10 MBit/Sec Data Link Controller (MAC).')
dot3ChipSetSeeq8431 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 4))
if mibBuilder.loadTexts: dot3ChipSetSeeq8431.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq8431.setDescription('The authoritative identifier for the SEEQ 4-Port 8431 Full-Duplex CMOS Ethernet 10 MBit/Sec Data Link Controller (MAC).')
dot3ChipSetSeeq80C300 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 5))
if mibBuilder.loadTexts: dot3ChipSetSeeq80C300.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq80C300.setDescription('The authoritative identifier for the SEEQ 80C300 Full-Duplex CMOS Ethernet 10/100 Mbit/Sec Data Link Controller (MAC).')
dot3ChipSetSeeq84C300 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 6))
if mibBuilder.loadTexts: dot3ChipSetSeeq84C300.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq84C300.setDescription('The authoritative identifier for the SEEQ 4-Port 84C300 Fast Ethernet Controller (MAC).')
dot3ChipSetSeeq84301 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 7))
if mibBuilder.loadTexts: dot3ChipSetSeeq84301.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq84301.setDescription('The authoritative identifier for the SEEQ 4-Port 84301 Fast Ethernet Controller (MAC).')
dot3ChipSetSeeq84302 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 8))
if mibBuilder.loadTexts: dot3ChipSetSeeq84302.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq84302.setDescription('The authoritative identifier for the SEEQ 4-Port 84302 Fast Ethernet Controller (MAC).')
dot3ChipSetSeeq8100 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 3, 9))
if mibBuilder.loadTexts: dot3ChipSetSeeq8100.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetSeeq8100.setDescription('The authoritative identifier for the SEEQ 8100 Gigabit Ethernet Controller (MAC & PCS).')
dot3ChipSetNational = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 4))
dot3ChipSetNational8390 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 1))
if mibBuilder.loadTexts: dot3ChipSetNational8390.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational8390.setDescription('The authoritative identifier for the National Semiconductor DP8390 Network Interface Controller.')
dot3ChipSetNationalSonic = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 2))
if mibBuilder.loadTexts: dot3ChipSetNationalSonic.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNationalSonic.setDescription('The authoritative identifier for the National Semiconductor DP83932 Systems-Oriented Network Interface Controller (SONIC).')
dot3ChipSetNational83901 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 3))
if mibBuilder.loadTexts: dot3ChipSetNational83901.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational83901.setDescription('The authoritative identifier for the National Semiconductor DP83901 Serial Network Interface Controller (SNIC).')
dot3ChipSetNational83902 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 4))
if mibBuilder.loadTexts: dot3ChipSetNational83902.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational83902.setDescription('The authoritative identifier for the National Semiconductor DP83902 Serial Network Interface Controller for Twisted Pair (ST-NIC).')
dot3ChipSetNational83905 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 5))
if mibBuilder.loadTexts: dot3ChipSetNational83905.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational83905.setDescription('The authoritative identifier for the National Semiconductor DP83905 AT Local Area Network Twisted-Pair Interface (AT/LANTIC).')
dot3ChipSetNational83907 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 6))
if mibBuilder.loadTexts: dot3ChipSetNational83907.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational83907.setDescription('The authoritative identifier for the National Semiconductor DP83907 AT Twisted-Pair Enhanced Coaxial Network Interface Controller (AT/LANTIC II).')
dot3ChipSetNational83916 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 7))
if mibBuilder.loadTexts: dot3ChipSetNational83916.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational83916.setDescription('The authoritative identifier for the National Semiconductor DP83916 Systems-Oriented Network Interface Controller (SONIC-16).')
dot3ChipSetNational83934 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 8))
if mibBuilder.loadTexts: dot3ChipSetNational83934.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational83934.setDescription('The authoritative identifier for the National Semiconductor DP83934 Systems-Oriented Network Interface Controller with Twisted Pair Interface (SONIC-T).')
dot3ChipSetNational83936 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 4, 9))
if mibBuilder.loadTexts: dot3ChipSetNational83936.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetNational83936.setDescription('The authoritative identifier for the National Semiconductor DP83936AVUL Full-Duplex Systems- Oriented Network Interface Controller with Twisted Pair Interface (SONIC-T).')
dot3ChipSetFujitsu = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 5))
dot3ChipSetFujitsu86950 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 5, 1))
if mibBuilder.loadTexts: dot3ChipSetFujitsu86950.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetFujitsu86950.setDescription('The authoritative identifier for the Fujitsu 86950 chip.')
dot3ChipSetFujitsu86960 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 5, 2))
if mibBuilder.loadTexts: dot3ChipSetFujitsu86960.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetFujitsu86960.setDescription('The authoritative identifier for the Fujitsu MB86960 Network Interface Controller with Encoder/Decoder (NICE).')
dot3ChipSetFujitsu86964 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 5, 3))
if mibBuilder.loadTexts: dot3ChipSetFujitsu86964.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetFujitsu86964.setDescription('The authoritative identifier for the Fujitsu MB86964 Ethernet Controller with 10BASE-T Tranceiver.')
dot3ChipSetFujitsu86965A = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 5, 4))
if mibBuilder.loadTexts: dot3ChipSetFujitsu86965A.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetFujitsu86965A.setDescription('The authoritative identifier for the Fujitsu MB86965A EtherCoupler Single-Chip Ethernet Controller.')
dot3ChipSetFujitsu86965B = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 5, 5))
if mibBuilder.loadTexts: dot3ChipSetFujitsu86965B.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetFujitsu86965B.setDescription('The authoritative identifier for the Fujitsu MB86965B EtherCoupler Single-Chip Ethernet Controller (supports full-duplex).')
dot3ChipSetDigital = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 6))
dot3ChipSetDigitalDC21040 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 6, 1))
if mibBuilder.loadTexts: dot3ChipSetDigitalDC21040.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetDigitalDC21040.setDescription('The authoritative identifier for the Digital Semiconductor DC21040 chip.')
dot3ChipSetDigital21041 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 6, 2))
if mibBuilder.loadTexts: dot3ChipSetDigital21041.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetDigital21041.setDescription('The authoritative identifier for the Digital Semiconductor 21041 PCI Ethernet LAN Controller.')
dot3ChipSetDigital21140 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 6, 3))
if mibBuilder.loadTexts: dot3ChipSetDigital21140.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetDigital21140.setDescription('The authoritative identifier for the Digital Semiconductor 21140 PCI Fast Ethernet LAN Controller.')
dot3ChipSetDigital21143 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 6, 4))
if mibBuilder.loadTexts: dot3ChipSetDigital21143.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetDigital21143.setDescription('The authoritative identifier for the Digital Semiconductor 21143 PCI/CardBus 10/100-Mb/s Ethernet LAN Controller.')
dot3ChipSetDigital21340 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 6, 5))
if mibBuilder.loadTexts: dot3ChipSetDigital21340.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetDigital21340.setDescription('The authoritative identifier for the Digital Semiconductor 21340 10/100-MB/s managed buffered port switch.')
dot3ChipSetDigital21440 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 6, 6))
if mibBuilder.loadTexts: dot3ChipSetDigital21440.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetDigital21440.setDescription('The authoritative identifier for the Digital Semiconductor 21440 Multiport 10/100Mbps Ethernet Controller.')
dot3ChipSetDigital21540 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 6, 7))
if mibBuilder.loadTexts: dot3ChipSetDigital21540.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetDigital21540.setDescription('The authoritative identifier for the Digital Semiconductor 21540 PCI/CardBus Ethernet LAN Controller with Modem Interface.')
dot3ChipSetTI = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 7))
dot3ChipSetTIE100 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 7, 1))
if mibBuilder.loadTexts: dot3ChipSetTIE100.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetTIE100.setDescription('The authoritative identifier for the Texas Instruments TNETE100 ThunderLAN PCI Fast Ethernet Controller.')
dot3ChipSetTIE110 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 7, 2))
if mibBuilder.loadTexts: dot3ChipSetTIE110.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetTIE110.setDescription('The authoritative identifier for the Texas Instruments TNETE110 ThunderLAN PCI 10BASE-T Ethernet Adapter.')
dot3ChipSetTIX3100 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 7, 3))
if mibBuilder.loadTexts: dot3ChipSetTIX3100.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetTIX3100.setDescription('The authoritative identifier for the Texas Instruments TNETX3100 Desktop ThunderSWITCH 8/2.')
dot3ChipSetTIX3150 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 7, 4))
if mibBuilder.loadTexts: dot3ChipSetTIX3150.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetTIX3150.setDescription('The authoritative identifier for the Texas Instruments TNETX3150 ThunderSWITCH 12/3.')
dot3ChipSetTIX3270 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 7, 5))
if mibBuilder.loadTexts: dot3ChipSetTIX3270.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetTIX3270.setDescription('The authoritative identifier for the Texas Instruments TNETX3270 ThunderSWITCH 24/3.')
dot3ChipSetToshiba = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 8))
dot3ChipSetToshibaTC35815F = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 8, 1))
if mibBuilder.loadTexts: dot3ChipSetToshibaTC35815F.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetToshibaTC35815F.setDescription('The authoritative identifier for the Toshiba TC35815F PCI-Based 100/10Mbps Ethernet Controller.')
dot3ChipSetLucent = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 9))
dot3ChipSetLucentATT1MX10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 9, 1))
if mibBuilder.loadTexts: dot3ChipSetLucentATT1MX10.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetLucentATT1MX10.setDescription('The authoritative identifier for the Lucent Technologies ATT1MX10 (Spinnaker) Quad MAC and Tranceiver for Ethernet Frame Switching.')
dot3ChipSetLucentLUC3M08 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 9, 2))
if mibBuilder.loadTexts: dot3ChipSetLucentLUC3M08.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetLucentLUC3M08.setDescription('The authoritative identifier for the Lucent Technologies LUC3M08 Eight Ethernet MACs for 10/100 Mbits/s Frame Switching.')
dot3ChipSetGalileo = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 10))
dot3ChipSetGalileoGT48001 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 10, 1))
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48001.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48001.setDescription('The authoritative identifier for the Galileo Technology GT-48001A Switched Ethernet Controller.')
dot3ChipSetGalileoGT48002 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 10, 2))
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48002.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48002.setDescription('The authoritative identifier for the Galileo Technology GT-48002A Switched Fast Ethernet Controller.')
dot3ChipSetGalileoGT48004 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 10, 3))
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48004.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48004.setDescription('The authoritative identifier for the Galileo Technology GT-48004A Four Port Fast Ethernet Switch for Multiport 10/100BASE-X Systems.')
dot3ChipSetGalileoGT48207 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 10, 4))
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48207.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48207.setDescription('The authoritative identifier for the Galileo Technology GT-48207 Low-Cost 10 Port Switched Ethernet Controller for 10+10/100BASE-X.')
dot3ChipSetGalileoGT48208 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 10, 5))
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48208.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48208.setDescription('The authoritative identifier for the Galileo Technology GT-48208 Advanced 10 Port Switched Ethernet Controller for 10+10/100BASE-X.')
dot3ChipSetGalileoGT48212 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 10, 6))
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48212.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetGalileoGT48212.setDescription('The authoritative identifier for the Galileo Technology GT-48212 Advanced 14 Port Switched Ethernet Controller for 10+10/100BASE-X.')
dot3ChipSetJato = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 11))
dot3ChipSetJatoJT1001 = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 11, 1))
if mibBuilder.loadTexts: dot3ChipSetJatoJT1001.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetJatoJT1001.setDescription('The authoritative identifier for the Jato Technologies JT1001 GigEMAC Server 10/100/1000Mbps Ethernet Controller with PCI interface.')
dot3ChipSetXaQti = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 7, 8, 12))
dot3ChipSetXaQtiXQ11800FP = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 12, 1))
if mibBuilder.loadTexts: dot3ChipSetXaQtiXQ11800FP.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetXaQtiXQ11800FP.setDescription('The authoritative identifier for the XaQTI XQ11800FP XMAC II Gigabit Ethernet Media Access Controller.')
dot3ChipSetXaQtiXQ18110FP = ObjectIdentity((1, 3, 6, 1, 2, 1, 10, 7, 8, 12, 2))
if mibBuilder.loadTexts: dot3ChipSetXaQtiXQ18110FP.setStatus('current')
if mibBuilder.loadTexts: dot3ChipSetXaQtiXQ18110FP.setDescription('The authoritative identifier for the XaQTI XQ18110FP GigaPower Protocol Accelerator.')
mibBuilder.exportSymbols("ETHER-CHIPSET-MIB", dot3ChipSetAMD79C965=dot3ChipSetAMD79C965, dot3ChipSetAMD79C970=dot3ChipSetAMD79C970, dot3ChipSetLucentATT1MX10=dot3ChipSetLucentATT1MX10, dot3ChipSetAMD7990=dot3ChipSetAMD7990, dot3ChipSetAMD79C960=dot3ChipSetAMD79C960, dot3ChipSetAMD79C961=dot3ChipSetAMD79C961, dot3ChipSetFujitsu86965B=dot3ChipSetFujitsu86965B, dot3ChipSetSeeq8003=dot3ChipSetSeeq8003, dot3ChipSetDigital21143=dot3ChipSetDigital21143, dot3ChipSetLucentLUC3M08=dot3ChipSetLucentLUC3M08, dot3ChipSetAMD79C971=dot3ChipSetAMD79C971, dot3ChipSetSeeq84301=dot3ChipSetSeeq84301, dot3ChipSetNational8390=dot3ChipSetNational8390, dot3ChipSetSeeq80C03=dot3ChipSetSeeq80C03, dot3ChipSetNationalSonic=dot3ChipSetNationalSonic, dot3ChipSetAMD=dot3ChipSetAMD, dot3ChipSetGalileo=dot3ChipSetGalileo, dot3ChipSetLucent=dot3ChipSetLucent, dot3ChipSetDigital21041=dot3ChipSetDigital21041, dot3ChipSetFujitsu86964=dot3ChipSetFujitsu86964, dot3ChipSetXaQtiXQ18110FP=dot3ChipSetXaQtiXQ18110FP, dot3ChipSetDigital21440=dot3ChipSetDigital21440, dot3ChipSetGalileoGT48207=dot3ChipSetGalileoGT48207, dot3ChipSetTIX3270=dot3ChipSetTIX3270, dot3ChipSetGalileoGT48002=dot3ChipSetGalileoGT48002, dot3ChipSets=dot3ChipSets, dot3ChipSetNational83905=dot3ChipSetNational83905, dot3ChipSetAMD79900=dot3ChipSetAMD79900, dot3ChipSetDigital=dot3ChipSetDigital, dot3ChipSetNational83916=dot3ChipSetNational83916, dot3ChipSetToshibaTC35815F=dot3ChipSetToshibaTC35815F, dot3ChipSetDigital21540=dot3ChipSetDigital21540, dot3ChipSetSeeq8100=dot3ChipSetSeeq8100, dot3ChipSetGalileoGT48212=dot3ChipSetGalileoGT48212, dot3ChipSetGalileoGT48001=dot3ChipSetGalileoGT48001, dot3ChipSetNational83902=dot3ChipSetNational83902, dot3ChipSetDigitalDC21040=dot3ChipSetDigitalDC21040, dot3ChipSetTIE110=dot3ChipSetTIE110, PYSNMP_MODULE_ID=etherChipsetMIB, dot3ChipSetIntel82586=dot3ChipSetIntel82586, dot3ChipSetJato=dot3ChipSetJato, etherChipsetMIB=etherChipsetMIB, dot3ChipSetFujitsu86960=dot3ChipSetFujitsu86960, dot3ChipSetNational83901=dot3ChipSetNational83901, dot3ChipSetAMD79C90=dot3ChipSetAMD79C90, dot3ChipSetAMD79C970A=dot3ChipSetAMD79C970A, dot3ChipSetToshiba=dot3ChipSetToshiba, dot3ChipSetFujitsu86950=dot3ChipSetFujitsu86950, dot3ChipSetTIE100=dot3ChipSetTIE100, dot3ChipSetTIX3100=dot3ChipSetTIX3100, dot3ChipSetSeeq8431=dot3ChipSetSeeq8431, dot3ChipSetIntel82557=dot3ChipSetIntel82557, dot3ChipSetTI=dot3ChipSetTI, dot3ChipSetFujitsu86965A=dot3ChipSetFujitsu86965A, dot3ChipSetIntel=dot3ChipSetIntel, dot3ChipSetGalileoGT48004=dot3ChipSetGalileoGT48004, dot3ChipSetDigital21340=dot3ChipSetDigital21340, dot3ChipSetXaQti=dot3ChipSetXaQti, dot3ChipSetJatoJT1001=dot3ChipSetJatoJT1001, dot3ChipSetNational=dot3ChipSetNational, dot3ChipSetIntel82596=dot3ChipSetIntel82596, dot3ChipSetTIX3150=dot3ChipSetTIX3150, dot3ChipSetSeeq84302=dot3ChipSetSeeq84302, dot3ChipSetXaQtiXQ11800FP=dot3ChipSetXaQtiXQ11800FP, dot3ChipSetSeeq=dot3ChipSetSeeq, dot3ChipSetNational83907=dot3ChipSetNational83907, dot3ChipSetSeeq84C30=dot3ChipSetSeeq84C30, dot3ChipSetIntel82595=dot3ChipSetIntel82595, dot3ChipSetAMD79C972=dot3ChipSetAMD79C972, dot3ChipSetAMD79C940=dot3ChipSetAMD79C940, dot3ChipSetSeeq84C300=dot3ChipSetSeeq84C300, dot3ChipSetGalileoGT48208=dot3ChipSetGalileoGT48208, dot3ChipSetAMD79C961A=dot3ChipSetAMD79C961A, dot3ChipSetSeeq80C300=dot3ChipSetSeeq80C300, dot3ChipSetDigital21140=dot3ChipSetDigital21140, dot3ChipSetFujitsu=dot3ChipSetFujitsu, dot3ChipSetIntel82558=dot3ChipSetIntel82558, dot3ChipSetNational83936=dot3ChipSetNational83936, dot3ChipSetNational83934=dot3ChipSetNational83934)
