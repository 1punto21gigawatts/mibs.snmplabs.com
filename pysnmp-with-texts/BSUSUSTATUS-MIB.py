#
# PySNMP MIB module BSUSUSTATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSUSUSTATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aniBsuSuGroup, = mibBuilder.importSymbols("ANIROOT-MIB", "aniBsuSuGroup")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
aniBsuWirelessPort, = mibBuilder.importSymbols("BSUWIRELESSIF-MIB", "aniBsuWirelessPort")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Unsigned32, MibIdentifier, iso, Bits, NotificationType, TimeTicks, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "MibIdentifier", "iso", "Bits", "NotificationType", "TimeTicks", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Integer32", "IpAddress")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
aniBsuSuStatus = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3))
if mibBuilder.loadTexts: aniBsuSuStatus.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniBsuSuStatus.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniBsuSuStatus.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniBsuSuStatus.setDescription('This group allows the users of the BSU to access status information about the SU. It consists of 2 tables - The Upstream Link Status Table and Downstream Link Status Table. ')
aniBsuSuUSLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1), )
if mibBuilder.loadTexts: aniBsuSuUSLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuUSLinkStatusTable.setDescription('This table accesses the upstream status attributes of each SU connected to this BSU. ')
aniBsuSuUSLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"), (0, "BSUSUSTATUS-MIB", "aniBsuSuStatusMacAddr"))
if mibBuilder.loadTexts: aniBsuSuUSLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuUSLinkStatusEntry.setDescription('Upstream Status information for a single SU. An entry in this table exists for each SU that is connected to the BSU. ')
aniBsuSuStatusMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusMacAddr.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusMacAddr.setDescription('The SU MAC Address. ')
aniBsuSuStatusIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusIpAddr.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusIpAddr.setDescription('The SU IP Address. ')
aniBsuSuStatusUSPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusUSPolarization.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusUSPolarization.setDescription('The upstream Polarization. This field is used by SU to adjust the polarization selection when transmitting a burst to the BSU. Each SU has a single antenna which can be polarized either horizontally(1) or vertically(2). ')
aniBsuSuStatusUSModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qpsk", 1), ("qam16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusUSModulation.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusUSModulation.setDescription('The current upstream Modulation for this SU. ')
aniBsuSuStatusUSFec = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusUSFec.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusUSFec.setDescription('The current upstream FEC method for this SU. ')
aniBsuSuStatusSuTxPowerAttn = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 62))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusSuTxPowerAttn.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusSuTxPowerAttn.setDescription('The SU Tx Power Attenuation. ')
aniBsuSuStatusUSRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusUSRxPower.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusUSRxPower.setDescription('The Upstream Receive Power. The value -130 is considered invalid. ')
aniBsuSuStatusSuTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 1, 1, 8), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusSuTxPower.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusSuTxPower.setDescription('The Upstream SU Tx Power. The value -130 is considered invalid. ')
aniBsuSuDSLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 2), )
if mibBuilder.loadTexts: aniBsuSuDSLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuDSLinkStatusTable.setDescription('This table accesses the downstream status attributes of each SU connected to this BSU. ')
aniBsuSuDSLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 2, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"), (0, "BSUSUSTATUS-MIB", "aniBsuSuStatusMacAddr"))
if mibBuilder.loadTexts: aniBsuSuDSLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuDSLinkStatusEntry.setDescription('Downstream Status information for a single SU. An entry in this table exists for each SU that is connected to the BSU. ')
aniBsuSuStatusDSPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusDSPolarization.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusDSPolarization.setDescription('The downstream Polarization. This field is used by BSU to adjust the polarization selection when transmitting a burst to the SU. Each SU has a single antenna which can be polarized either horizontally(1) or vertically(2). ')
aniBsuSuStatusDSModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qpsk", 1), ("qam16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusDSModulation.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusDSModulation.setDescription('The current downstream Modulation for this SU. ')
aniBsuSuStatusDSFec = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusDSFec.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusDSFec.setDescription('The current downstream FEC method for this SU. ')
aniBsuSuStatusDSRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusDSRxPower.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusDSRxPower.setDescription("The Downstream Receive Power in dBm. It consists of 2 values, one for vertical polarization and one for horizontal polarization. It is displayed as 'vertical,horizontal' When nothing is being received, a value NA is displayed. Eg. for vertical = -20 and horizontal = NA, the agent will display '-20,NA'. ")
aniBsuSuStatusBsuTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 2, 1, 6), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusBsuTxPower.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusBsuTxPower.setDescription('The BSU Tx Power for a particular SU. ')
aniBsuSuLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 3), )
if mibBuilder.loadTexts: aniBsuSuLinkStatusTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuLinkStatusTable.setDescription('This table accesses the other link status attributes of each SU connected to this BSU. ')
aniBsuSuLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 3, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"), (0, "BSUSUSTATUS-MIB", "aniBsuSuStatusMacAddr"))
if mibBuilder.loadTexts: aniBsuSuLinkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuLinkStatusEntry.setDescription('Link Status information for a single SU. An entry in this table exists for each SU that is connected to the BSU. ')
aniBsuSuStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusIpAddress.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusIpAddress.setDescription('The SU IP Address. ')
aniBsuSuStatusPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusPropagationDelay.setDescription('The time taken to transmit a packet from BSU to SU (or vice versa) in microseconds. ')
aniBsuSuStatusDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusDistance.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusDistance.setDescription('The distance in meters between the BSU and SU. ')
aniBsuSuStatusLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusLinkType.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusLinkType.setDescription('The link type for a particular SU. ')
aniBsuSuStatusPathLossExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 7, 3, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuSuStatusPathLossExponent.setStatus('current')
if mibBuilder.loadTexts: aniBsuSuStatusPathLossExponent.setDescription('The path loss exponent from BSU to SU ')
mibBuilder.exportSymbols("BSUSUSTATUS-MIB", aniBsuSuStatusUSPolarization=aniBsuSuStatusUSPolarization, aniBsuSuStatusIpAddr=aniBsuSuStatusIpAddr, aniBsuSuStatusBsuTxPower=aniBsuSuStatusBsuTxPower, aniBsuSuDSLinkStatusEntry=aniBsuSuDSLinkStatusEntry, aniBsuSuStatusSuTxPowerAttn=aniBsuSuStatusSuTxPowerAttn, aniBsuSuStatusDistance=aniBsuSuStatusDistance, aniBsuSuStatusSuTxPower=aniBsuSuStatusSuTxPower, aniBsuSuLinkStatusEntry=aniBsuSuLinkStatusEntry, PYSNMP_MODULE_ID=aniBsuSuStatus, aniBsuSuStatus=aniBsuSuStatus, aniBsuSuUSLinkStatusTable=aniBsuSuUSLinkStatusTable, aniBsuSuStatusIpAddress=aniBsuSuStatusIpAddress, aniBsuSuStatusPathLossExponent=aniBsuSuStatusPathLossExponent, aniBsuSuStatusUSRxPower=aniBsuSuStatusUSRxPower, aniBsuSuStatusDSFec=aniBsuSuStatusDSFec, aniBsuSuStatusPropagationDelay=aniBsuSuStatusPropagationDelay, aniBsuSuStatusDSModulation=aniBsuSuStatusDSModulation, aniBsuSuStatusDSRxPower=aniBsuSuStatusDSRxPower, aniBsuSuLinkStatusTable=aniBsuSuLinkStatusTable, aniBsuSuUSLinkStatusEntry=aniBsuSuUSLinkStatusEntry, aniBsuSuStatusUSModulation=aniBsuSuStatusUSModulation, aniBsuSuStatusMacAddr=aniBsuSuStatusMacAddr, aniBsuSuDSLinkStatusTable=aniBsuSuDSLinkStatusTable, aniBsuSuStatusLinkType=aniBsuSuStatusLinkType, aniBsuSuStatusUSFec=aniBsuSuStatusUSFec, aniBsuSuStatusDSPolarization=aniBsuSuStatusDSPolarization)
