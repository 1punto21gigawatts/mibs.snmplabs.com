#
# PySNMP MIB module ITOUCH-LINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-LINK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
iTouch, = mibBuilder.importSymbols("ITOUCH-MIB", "iTouch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter32, MibIdentifier, ModuleIdentity, iso, Integer32, ObjectIdentity, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "MibIdentifier", "ModuleIdentity", "iso", "Integer32", "ObjectIdentity", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xLink = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 24))
xLinkBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 24, 1))
xWan = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 24, 3))
linkTable = MibTable((1, 3, 6, 1, 4, 1, 33, 24, 1, 1), )
if mibBuilder.loadTexts: linkTable.setStatus('mandatory')
if mibBuilder.loadTexts: linkTable.setDescription('A list of links.')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: linkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkEntry.setDescription('Link entry.')
linkNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: linkNoBuffers.setDescription('The number of packets discarded because of lack of buffers.')
linkDelayExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDelayExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: linkDelayExceeded.setDescription('The number of packets discarded because they were held to long.')
linkOutputQFull = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOutputQFull.setStatus('mandatory')
if mibBuilder.loadTexts: linkOutputQFull.setDescription('The number of packets discarded because the output queue was full.')
linkDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDownTime.setStatus('mandatory')
if mibBuilder.loadTexts: linkDownTime.setDescription('Total number of seconds that the link has been down.')
linkDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDownCount.setStatus('mandatory')
if mibBuilder.loadTexts: linkDownCount.setDescription('Number of times that the link has been down.')
linkDownLastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDownLastStart.setStatus('mandatory')
if mibBuilder.loadTexts: linkDownLastStart.setDescription('Value of sysUpTime when the link last went down. If the link is up the value is 0.')
linkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 143, 145, 146))).clone(namedValues=NamedValues(("running1", 7), ("initWaitDsr", 128), ("initWait", 129), ("running2", 130), ("purgeWait", 131), ("down", 132), ("purging", 133), ("loop", 138), ("testSend", 139), ("testReceive", 140), ("testLoop", 141), ("speedChange", 143), ("disabled", 145), ("badQuality", 146)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatus.setDescription('The status of the link')
linkLostBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLostBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: linkLostBuffers.setDescription('Number of packets discarded because of lost buffers')
linkResourceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 24, 1, 2), )
if mibBuilder.loadTexts: linkResourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: linkResourceTable.setDescription('A list of link resources.')
linkResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 24, 1, 2, 1), ).setIndexNames((0, "ITOUCH-LINK-MIB", "linkResourceType"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: linkResourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkResourceEntry.setDescription('link entry.')
linkResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("utilization", 1), ("outputQueue", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: linkResourceType.setDescription('The resource type.')
linkResourceCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkResourceCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: linkResourceCurrent.setDescription('The current percent of the resource used.')
linkResourceHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkResourceHigh.setStatus('mandatory')
if mibBuilder.loadTexts: linkResourceHigh.setDescription('The highest percent of the resource used.')
linkResourceAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkResourceAverage.setStatus('mandatory')
if mibBuilder.loadTexts: linkResourceAverage.setDescription('The average percent of the resource used.')
wanTable = MibTable((1, 3, 6, 1, 4, 1, 33, 24, 3, 1), )
if mibBuilder.loadTexts: wanTable.setStatus('mandatory')
if mibBuilder.loadTexts: wanTable.setDescription('A list of WANs.')
wanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 24, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: wanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wanEntry.setDescription('WAN entry.')
wanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("xcp", 2), ("fr", 3), ("ppp", 4), ("frlmi", 5), ("fransi", 6), ("frdcelmi", 7), ("frdceansi", 8), ("x25", 9))).clone('xcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wanProtocol.setDescription("Controls the protocol run on the link, changes ifType, typically to 'other'.")
wanCompressionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 256))).clone(namedValues=NamedValues(("noCompression", 1), ("compress", 2), ("auto", 256))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanCompressionAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wanCompressionAdminStatus.setDescription('Controls whether link compression will be run if the link is running the xyplex protocol. Auto will enable compression for links slower than 67000.')
wanMaxForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanMaxForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wanMaxForwardDelay.setDescription('The number of milliseconds that a packet may be held on the Wan link before it will be discarded. The value 0 indicates no limit.')
wanMaxMultiForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000)).clone(700)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanMaxMultiForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wanMaxMultiForwardDelay.setDescription('The number of milliseconds that a multicast packet may be held on the Wan link before it will be discarded. The value 0 indicates no delay.')
wanAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanAdminSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wanAdminSpeed.setDescription('The speed that the software should use for the wan link. The value 0 indicates that the measured speed should be used.')
wanCompressionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 24, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCompressing", 1), ("compressing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanCompressionOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wanCompressionOperStatus.setDescription('If the link is running the Xyplex protocol, indicates whether link compression is running.')
mibBuilder.exportSymbols("ITOUCH-LINK-MIB", wanMaxMultiForwardDelay=wanMaxMultiForwardDelay, wanMaxForwardDelay=wanMaxForwardDelay, linkResourceCurrent=linkResourceCurrent, linkResourceAverage=linkResourceAverage, xLinkBasic=xLinkBasic, linkDelayExceeded=linkDelayExceeded, wanCompressionAdminStatus=wanCompressionAdminStatus, xLink=xLink, linkResourceEntry=linkResourceEntry, linkResourceHigh=linkResourceHigh, linkTable=linkTable, linkDownLastStart=linkDownLastStart, linkEntry=linkEntry, linkDownCount=linkDownCount, linkOutputQFull=linkOutputQFull, linkStatus=linkStatus, wanEntry=wanEntry, linkResourceTable=linkResourceTable, xWan=xWan, linkDownTime=linkDownTime, wanCompressionOperStatus=wanCompressionOperStatus, linkResourceType=linkResourceType, wanTable=wanTable, wanAdminSpeed=wanAdminSpeed, linkLostBuffers=linkLostBuffers, wanProtocol=wanProtocol, linkNoBuffers=linkNoBuffers)
