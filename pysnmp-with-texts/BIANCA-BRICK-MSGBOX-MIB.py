#
# PySNMP MIB module BIANCA-BRICK-MSGBOX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-MSGBOX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
Date, BitValue = mibBuilder.importSymbols("BIANCA-BRICK-PPP-MIB", "Date", "BitValue")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Counter64, Counter32, ObjectIdentity, Gauge32, Unsigned32, NotificationType, TimeTicks, MibIdentifier, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Counter64", "Counter32", "ObjectIdentity", "Gauge32", "Unsigned32", "NotificationType", "TimeTicks", "MibIdentifier", "iso", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
isdn = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 2))
class HexValue(Integer32):
    pass

msgForwardTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 2, 13), )
if mibBuilder.loadTexts: msgForwardTable.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardTable.setDescription("The msgForwardTable contains information about the behavior of the message box. You can configure which extensions are used to accept fax calls and how these faxes should be forwarded to the receiver. Deleting entries: An entry can be removed by assigning the value `delete' to its msgForwardPoll object.")
msgForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1), ).setIndexNames((0, "BIANCA-BRICK-MSGBOX-MIB", "msgForwardExtension"))
if mibBuilder.loadTexts: msgForwardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardEntry.setDescription('')
msgForwardExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardExtension.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardExtension.setDescription("The extension of the incoming calls that is accepted by the message box. For this extension you also have to set the pabxExtDestination field in the pabxExtensionTable to `msg_box'.")
msgForwardAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardAddr.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardAddr.setDescription('The Called Party Number that is used to send stored faxes. If this field is empty, stored faxes are not sent automatically to another number.')
msgForwardDeleteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delivered", 1), ("forwarded", 2), ("polled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardDeleteAction.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardDeleteAction.setDescription("This field defines when a fax message, that was sent successfully, should be deleted. When set to `delivered' the fax will be deleted after it is sent anyway. When set to `forwarded' it will be deleted immediately after it was sent successfully to the number specified in the msgForwardAddr field. When set to `polled', the fax is deleted after someone received the fax via fax polling.")
msgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1209600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardDelay.setDescription('The time in seconds to wait before the message box tries or retries to send a stored fax to the msgForwardAddr.')
msgForwardPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardPoll.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardPoll.setDescription("To allow polling stored fax messages this value must be set to `enable'. When set to `disable' fax polling is not allowed. When set to delete, the table-entry will be deleted.")
msgForwardPollPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardPollPassword.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardPollPassword.setDescription('The password you have to use if you like to poll a stored fax.')
msgForwardMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardMaxRetries.setDescription("Number of trials to forward a fax message to an external fax station before the msgForwardState changes to the value `blocked'. A trial counts only when a connection could be established. When this field is set to zero, the state never changes to `blocked'.")
msgForwardState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("blocked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgForwardState.setStatus('mandatory')
if mibBuilder.loadTexts: msgForwardState.setDescription("Faxes are only forwarded to msgForwardAddr if the msgForwardState has the value `enabled'. The msgForwardState is set automatically to `blocked' when the number of retries reaches msgForwardMaxRetries.")
msgDirTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 2, 14), )
if mibBuilder.loadTexts: msgDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirTable.setDescription("The msgDirTable contains information for all FAX messages that are currently stored in the flash ROM. Deleting entries: An entry can be removed by assigning the value `delete' to its msgDirState object.")
msgDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1), ).setIndexNames((0, "BIANCA-BRICK-MSGBOX-MIB", "msgDirExtension"))
if mibBuilder.loadTexts: msgDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirEntry.setDescription('')
msgDirExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDirExtension.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirExtension.setDescription('The called number when the fax was received.')
msgDirType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("fax", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDirType.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirType.setDescription('The msgDirType specifies which kind of data belongs to this msgDirTable entry')
msgDirContent = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDirContent.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirContent.setDescription('The msgDirContent is a unique string to identify the msgDirTable entry. It contains the data type, a unique number and the number of the remote fax station')
msgDirTime = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1, 4), Date()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDirTime.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirTime.setDescription('The msgDirTime contains the date and time when the fax was received.')
msgDirDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDirDuration.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirDuration.setDescription('The msgDirDuration contains for fax messages the number of stored pages.')
msgDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgDirSize.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirSize.setDescription('The msgDirSize contains the number Bytes that are used to store this message in the flash ROM.')
msgDirState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("receiving", 1), ("received", 2), ("sent", 3), ("deleted", 4), ("delete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgDirState.setStatus('mandatory')
if mibBuilder.loadTexts: msgDirState.setDescription("The state of the message. To delete a message, assign the value `delete' to this object, then the msgDirState will change to `deleted' and the memory that is used by this message will be available again after the next automatic reorganisation of the flash ROM.")
mibBuilder.exportSymbols("BIANCA-BRICK-MSGBOX-MIB", msgForwardDeleteAction=msgForwardDeleteAction, internet=internet, msgForwardState=msgForwardState, msgDirEntry=msgDirEntry, msgForwardDelay=msgForwardDelay, bintec=bintec, msgDirTable=msgDirTable, isdn=isdn, msgDirContent=msgDirContent, msgDirState=msgDirState, private=private, msgDirType=msgDirType, msgDirExtension=msgDirExtension, HexValue=HexValue, msgForwardExtension=msgForwardExtension, enterprises=enterprises, dod=dod, msgForwardMaxRetries=msgForwardMaxRetries, msgForwardTable=msgForwardTable, msgForwardAddr=msgForwardAddr, msgDirSize=msgDirSize, msgDirTime=msgDirTime, msgDirDuration=msgDirDuration, msgForwardEntry=msgForwardEntry, org=org, msgForwardPoll=msgForwardPoll, msgForwardPollPassword=msgForwardPollPassword, bibo=bibo)
