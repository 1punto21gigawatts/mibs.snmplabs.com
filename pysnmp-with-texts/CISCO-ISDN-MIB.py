#
# PySNMP MIB module CISCO-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
isdnLapdOperStatus, isdnSignalingIfIndex, isdnSignalingIndex = mibBuilder.importSymbols("ISDN-MIB", "isdnLapdOperStatus", "isdnSignalingIfIndex", "isdnSignalingIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, IpAddress, Counter32, Integer32, Unsigned32, ModuleIdentity, ObjectIdentity, TimeTicks, iso, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "IpAddress", "Counter32", "Integer32", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "iso", "Gauge32", "MibIdentifier")
RowStatus, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TimeStamp")
ciscoIsdnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 26))
ciscoIsdnMib.setRevisions(('2001-02-09 00:00', '2000-03-27 00:00', '2000-02-23 00:00', '1999-05-07 00:00', '1996-02-21 00:00', '1995-08-15 00:00', '1995-01-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIsdnMib.setRevisionsDescriptions(('For a call connects, demandNbrLastDuration, demandNbrClearReason, and demandNbrClearCode objects are not included in the trap.', 'Added demandNbrCNANotification when call rejected with channel not available cause code', 'Removed an instantiated clause in description for ciscoCallHistoryCallingNumber.', 'Added a new trap for PRI layer 2 state changes.', 'Add a new object demandNbrCallOrigin.', 'Specify a correct (non-negative) range for an index object.', 'Initial version of Cisco ISDN MIB.',))
if mibBuilder.loadTexts: ciscoIsdnMib.setLastUpdated('200102090000Z')
if mibBuilder.loadTexts: ciscoIsdnMib.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIsdnMib.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-isdn@cisco.com')
if mibBuilder.loadTexts: ciscoIsdnMib.setDescription('The MIB module to describe the status of the ISDN Interfaces on the routers.')
ciscoIsdnMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 1))
isdnNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1))
demandNbrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1), )
if mibBuilder.loadTexts: demandNbrTable.setStatus('current')
if mibBuilder.loadTexts: demandNbrTable.setDescription('The list of neighbors from which the router will accept calls or to which it will place them.')
demandNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ISDN-MIB", "demandNbrPhysIf"), (0, "CISCO-ISDN-MIB", "demandNbrId"))
if mibBuilder.loadTexts: demandNbrEntry.setStatus('current')
if mibBuilder.loadTexts: demandNbrEntry.setDescription('A single Neighbor. This entry is effectively permanent, and contains information describing the neighbor, his permissions, his last call attempt, and his cumulative effects.')
demandNbrPhysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: demandNbrPhysIf.setStatus('current')
if mibBuilder.loadTexts: demandNbrPhysIf.setDescription('ifIndex value of the physical interface the neighbor will be called on. On an ISDN interface, this is the ifIndex value of the D channel.')
demandNbrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: demandNbrId.setStatus('current')
if mibBuilder.loadTexts: demandNbrId.setDescription('arbitrary sequence number associated with the neighbor.')
demandNbrLogIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrLogIf.setStatus('current')
if mibBuilder.loadTexts: demandNbrLogIf.setDescription('ifIndex value of virtual interface associated with the neighbor. This interface maintains a queue of messages holding for the neighbor awaiting call completion, and all statistics.')
demandNbrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrName.setStatus('current')
if mibBuilder.loadTexts: demandNbrName.setDescription('ASCII name of the neighbor.')
demandNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrAddress.setStatus('current')
if mibBuilder.loadTexts: demandNbrAddress.setDescription("Call Address at which the neighbor should be called. Think of this as the set of characters following 'ATDT ' or the 'phone number' included in a D channel call request.")
demandNbrPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iCanCallHim", 1), ("heCanCallMe", 2), ("weCanCallEachOther", 3))).clone('weCanCallEachOther')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrPermission.setStatus('current')
if mibBuilder.loadTexts: demandNbrPermission.setDescription('applicable permissions.')
demandNbrMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(2147483647)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrMaxDuration.setStatus('current')
if mibBuilder.loadTexts: demandNbrMaxDuration.setDescription('Maximum call duration in seconds.')
demandNbrLastDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrLastDuration.setStatus('current')
if mibBuilder.loadTexts: demandNbrLastDuration.setDescription('Duration of last call in seconds.')
demandNbrClearReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrClearReason.setStatus('current')
if mibBuilder.loadTexts: demandNbrClearReason.setDescription('ASCII reason that the last call terminated.')
demandNbrClearCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrClearCode.setStatus('current')
if mibBuilder.loadTexts: demandNbrClearCode.setDescription('encoded reason for the last call tear down.')
demandNbrSuccessCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrSuccessCalls.setStatus('current')
if mibBuilder.loadTexts: demandNbrSuccessCalls.setDescription('number of completed calls to neighbor since system reset.')
demandNbrFailCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrFailCalls.setStatus('current')
if mibBuilder.loadTexts: demandNbrFailCalls.setDescription('Number of call attempts that have failed.')
demandNbrAcceptCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrAcceptCalls.setStatus('current')
if mibBuilder.loadTexts: demandNbrAcceptCalls.setDescription('Number of calls accepted from the neighbor.')
demandNbrRefuseCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrRefuseCalls.setStatus('current')
if mibBuilder.loadTexts: demandNbrRefuseCalls.setDescription('Number of calls from neighbor that we have refused.')
demandNbrLastAttemptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrLastAttemptTime.setStatus('current')
if mibBuilder.loadTexts: demandNbrLastAttemptTime.setDescription('sysUpTime of last call attempt.')
demandNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: demandNbrStatus.setStatus('current')
if mibBuilder.loadTexts: demandNbrStatus.setDescription('Somebody might want to manage the device using SNMP some day...')
demandNbrCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 26, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("callback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: demandNbrCallOrigin.setStatus('current')
if mibBuilder.loadTexts: demandNbrCallOrigin.setDescription('Indication of outgoing or incoming call.')
ciscoIsdnMibTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 2))
ciscoIsdnMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0))
demandNbrCallInformation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 1)).setObjects(("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ("CISCO-ISDN-MIB", "demandNbrClearCode"))
if mibBuilder.loadTexts: demandNbrCallInformation.setStatus('obsolete')
if mibBuilder.loadTexts: demandNbrCallInformation.setDescription('This trap/inform is sent to the manager whenever a successful call clears, or a failed call attempt is determined to have ultimately failed. In the event that call retry is active, then this is after all retry attempts have failed. However, only one such trap is sent in between successful call attempts; subsequent call attempts result in no trap.')
demandNbrCallDetails = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 2)).setObjects(("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ("CISCO-ISDN-MIB", "demandNbrClearCode"), ("CISCO-ISDN-MIB", "demandNbrCallOrigin"))
if mibBuilder.loadTexts: demandNbrCallDetails.setStatus('current')
if mibBuilder.loadTexts: demandNbrCallDetails.setDescription('This trap/inform is sent to the manager whenever a call connects, or clears, or a failed call attempt is determined to have ultimately failed. In the event that call retry is active, then this is after all retry attempts have failed. However, only one such trap is sent in between successful call attempts; subsequent call attempts result in no trap. Whenever a call connects, demandNbrLastDuration, demandNbrClearReason, and demandNbrClearCode objects are not included in the trap.')
demandNbrLayer2Change = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("ISDN-MIB", "isdnLapdOperStatus"))
if mibBuilder.loadTexts: demandNbrLayer2Change.setStatus('current')
if mibBuilder.loadTexts: demandNbrLayer2Change.setDescription('This trap/inform is sent to the manager whenever the D-channel of an interface changes state.')
demandNbrCNANotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 26, 2, 0, 4)).setObjects(("ISDN-MIB", "isdnSignalingIfIndex"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: demandNbrCNANotification.setStatus('current')
if mibBuilder.loadTexts: demandNbrCNANotification.setDescription("This trap/inform is sent to the manager whenever the an incoming call request is rejected with cause 'requested circuit/channel not available' (CNA), code number 44. isdnSignalingIfIndex is the ifIndex value of the interface associated with this signaling channel. ifIndex is the interface index of the requested bearer channel ")
ciscoIsdnMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 3))
ciscoIsdnMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 1))
ciscoIsdnMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 2))
ciscoIsdnMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 1, 1)).setObjects(("CISCO-ISDN-MIB", "ciscoIsdnMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIsdnMibCompliance = ciscoIsdnMibCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIsdnMibCompliance.setDescription('The compliance statement for entities which implement the Cisco ISDN MIB')
ciscoIsdnMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 1, 2)).setObjects(("CISCO-ISDN-MIB", "ciscoIsdnMibGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIsdnMibComplianceRev1 = ciscoIsdnMibComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoIsdnMibComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco ISDN MIB')
ciscoIsdnMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 2, 1)).setObjects(("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrPermission"), ("CISCO-ISDN-MIB", "demandNbrMaxDuration"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ("CISCO-ISDN-MIB", "demandNbrClearCode"), ("CISCO-ISDN-MIB", "demandNbrSuccessCalls"), ("CISCO-ISDN-MIB", "demandNbrFailCalls"), ("CISCO-ISDN-MIB", "demandNbrAcceptCalls"), ("CISCO-ISDN-MIB", "demandNbrRefuseCalls"), ("CISCO-ISDN-MIB", "demandNbrLastAttemptTime"), ("CISCO-ISDN-MIB", "demandNbrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIsdnMibGroup = ciscoIsdnMibGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIsdnMibGroup.setDescription('A collection of objects providing the ISDN MIB capability.')
ciscoIsdnMibGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 26, 3, 2, 2)).setObjects(("CISCO-ISDN-MIB", "demandNbrLogIf"), ("CISCO-ISDN-MIB", "demandNbrName"), ("CISCO-ISDN-MIB", "demandNbrAddress"), ("CISCO-ISDN-MIB", "demandNbrPermission"), ("CISCO-ISDN-MIB", "demandNbrMaxDuration"), ("CISCO-ISDN-MIB", "demandNbrLastDuration"), ("CISCO-ISDN-MIB", "demandNbrClearReason"), ("CISCO-ISDN-MIB", "demandNbrClearCode"), ("CISCO-ISDN-MIB", "demandNbrSuccessCalls"), ("CISCO-ISDN-MIB", "demandNbrFailCalls"), ("CISCO-ISDN-MIB", "demandNbrAcceptCalls"), ("CISCO-ISDN-MIB", "demandNbrRefuseCalls"), ("CISCO-ISDN-MIB", "demandNbrLastAttemptTime"), ("CISCO-ISDN-MIB", "demandNbrStatus"), ("CISCO-ISDN-MIB", "demandNbrCallOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIsdnMibGroupRev1 = ciscoIsdnMibGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoIsdnMibGroupRev1.setDescription('A collection of objects providing the call origin capability.')
mibBuilder.exportSymbols("CISCO-ISDN-MIB", demandNbrLastAttemptTime=demandNbrLastAttemptTime, demandNbrPhysIf=demandNbrPhysIf, demandNbrMaxDuration=demandNbrMaxDuration, ciscoIsdnMibComplianceRev1=ciscoIsdnMibComplianceRev1, demandNbrClearCode=demandNbrClearCode, demandNbrId=demandNbrId, ciscoIsdnMibObjects=ciscoIsdnMibObjects, demandNbrCallInformation=demandNbrCallInformation, ciscoIsdnMib=ciscoIsdnMib, isdnNeighbor=isdnNeighbor, demandNbrAcceptCalls=demandNbrAcceptCalls, demandNbrClearReason=demandNbrClearReason, demandNbrSuccessCalls=demandNbrSuccessCalls, PYSNMP_MODULE_ID=ciscoIsdnMib, ciscoIsdnMibCompliance=ciscoIsdnMibCompliance, demandNbrAddress=demandNbrAddress, ciscoIsdnMibCompliances=ciscoIsdnMibCompliances, ciscoIsdnMibGroupRev1=ciscoIsdnMibGroupRev1, demandNbrTable=demandNbrTable, demandNbrLayer2Change=demandNbrLayer2Change, demandNbrCNANotification=demandNbrCNANotification, demandNbrRefuseCalls=demandNbrRefuseCalls, demandNbrCallDetails=demandNbrCallDetails, demandNbrStatus=demandNbrStatus, demandNbrPermission=demandNbrPermission, ciscoIsdnMibConformance=ciscoIsdnMibConformance, demandNbrFailCalls=demandNbrFailCalls, ciscoIsdnMibTraps=ciscoIsdnMibTraps, demandNbrCallOrigin=demandNbrCallOrigin, ciscoIsdnMibGroups=ciscoIsdnMibGroups, demandNbrName=demandNbrName, demandNbrLogIf=demandNbrLogIf, ciscoIsdnMibTrapPrefix=ciscoIsdnMibTrapPrefix, demandNbrLastDuration=demandNbrLastDuration, demandNbrEntry=demandNbrEntry, ciscoIsdnMibGroup=ciscoIsdnMibGroup)
