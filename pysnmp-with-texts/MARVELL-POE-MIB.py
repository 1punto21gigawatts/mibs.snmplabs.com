#
# PySNMP MIB module MARVELL-POE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MARVELL-POE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:10:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, Integer32, IpAddress, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Counter64, MibIdentifier, TimeTicks, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Integer32", "IpAddress", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Counter64", "MibIdentifier", "TimeTicks", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rlPoe = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 108))
rlPoe.setRevisions(('2010-06-02 00:00', '2009-11-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlPoe.setRevisionsDescriptions(('The private MIB module definition for Power Over Ethernet.', 'Initial revision.',))
if mibBuilder.loadTexts: rlPoe.setLastUpdated('200911260000Z')
if mibBuilder.loadTexts: rlPoe.setOrganization('Marvell.')
if mibBuilder.loadTexts: rlPoe.setContactInfo('Marvell.com')
if mibBuilder.loadTexts: rlPoe.setDescription('Add a new field in the PoE MIB to indicate Max power allocation allowed')
class RlPoeType(TextualConvention, Integer32):
    description = 'PoE types: 1 - none: no PoE, unknown type; 2 - PoE: Standard AF PoE 3 - PoE Plus: Standard AT PoE 4 - 60 W: 60W poe port '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("poe", 2), ("poeplus", 3), ("poe60w", 4))

rlPethPsePortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 108, 1), )
if mibBuilder.loadTexts: rlPethPsePortTable.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortTable.setDescription(' The table listing additional information for Power Over Ethernet ports.')
rlPethPsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 108, 1, 1), ).setIndexNames((0, "MARVELL-POE-MIB", "rlPethPsePortGroupIndex"), (0, "MARVELL-POE-MIB", "rlPethPsePortIndex"))
if mibBuilder.loadTexts: rlPethPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortEntry.setDescription(' An entry in the rlPethPsePortTable.')
rlPethPsePortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rlPethPsePortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortGroupIndex.setDescription('This variable uniquely identifies the group containing the port to which a power Ethernet PSE is connected. Group means box in the stack, module in a rack and the value 1 MUST be used for non-modular devices. Furthermore, the same value MUST be used in this variable, pethMainPseGroupIndex, and pethNotificationControlGroupIndex to refer to a given box in a stack or module in the rack.')
rlPethPsePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rlPethPsePortIndex.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortIndex.setDescription('This variable uniquely identifies the power Ethernet PSE port within group pethPsePortGroupIndex to which the power Ethernet PSE entry is connected.')
rlPethPsePortOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortOutputVoltage.setDescription('This variable indicates on the output voltage level in milli volts from rlPethPsePortIndex.')
rlPethPsePortOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortOutputCurrent.setDescription('This variable indicates on the output current level in milli amper from rlPethPsePortIndex.')
rlPethPsePortOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortOutputPower.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortOutputPower.setDescription('This variable indicates on the output power level in milli watts from rlPethPsePortIndex.')
rlPethPsePortPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPsePortPowerLimit.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortPowerLimit.setDescription('This variable indicates on the user configured power level in milli watts which is available from rlPethPsePortIndex.')
rlPethPsePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortStatus.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortStatus.setDescription('This variable indicates on the hardware status of rlPethPsePortIndex.')
rlPethPsePortStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortStatusDescription.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortStatusDescription.setDescription('This variable indicates the description of the hardware status of rlPethPsePortIndex.')
rlPethPsePortOperPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortOperPowerLimit.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortOperPowerLimit.setDescription('This variable indicates the maximum power level in milli watts which is available from rlPethPsePortIndex.')
rlPethPsePortTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPsePortTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortTimeRangeName.setDescription('This variable is used to bind PoE port to time range.')
rlPethPsePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortOperStatus.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortOperStatus.setDescription('This Read-Only variable indicates PoE port current status affected by time range active/inactive and admin status.')
rlPethPsePortMaxPowerAllocAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortMaxPowerAllocAllowed.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortMaxPowerAllocAllowed.setDescription('This variable indicates the maximum power allocation allowed per port (including wire power loses) in milli-watts which is available from rlPethPsePortIndex.')
rlPethPsePortSupportPoeType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 13), RlPoeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortSupportPoeType.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortSupportPoeType.setDescription('This variable indicates the supported type of the PoE port')
rlPethPsePortLinkPartnerPoeType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 14), RlPoeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortLinkPartnerPoeType.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortLinkPartnerPoeType.setDescription('This variable indicates the link partner PoE type.')
rlPethPsePortFourPairForced = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forcedEnable", 0), ("forcedDisable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPsePortFourPairForced.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortFourPairForced.setDescription('This variable enabled the spare pair ALT_B in 60W port to force 4 pair enable.')
rlPethPsePortFourPairEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourPairEnable", 1), ("fourPairDisable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortFourPairEnabled.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortFourPairEnabled.setDescription('This variable indicates that spare pair ALT_B is enable.')
rlPethPsePortNegotiationAllocatedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortNegotiationAllocatedPower.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortNegotiationAllocatedPower.setDescription('This variable indicates the power allocation in milli watts from power negotiation')
rlPethPsePortNegotiationProtocolOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("protocolOwnerNone", 0), ("protocolOwnerCDP", 1), ("protocolOwnerLLDP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPsePortNegotiationProtocolOwner.setStatus('current')
if mibBuilder.loadTexts: rlPethPsePortNegotiationProtocolOwner.setDescription('This variable indicates the protocol owner on power management negotiation protocol')
rlPethMainPseTable = MibTable((1, 3, 6, 1, 4, 1, 89, 108, 2), )
if mibBuilder.loadTexts: rlPethMainPseTable.setStatus('current')
if mibBuilder.loadTexts: rlPethMainPseTable.setDescription(' The table listing additional read - only information for Power Over Ethernet.')
rlPethMainPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 108, 2, 1), ).setIndexNames((0, "MARVELL-POE-MIB", "rlPethMainPseGroupIndex"))
if mibBuilder.loadTexts: rlPethMainPseEntry.setStatus('current')
if mibBuilder.loadTexts: rlPethMainPseEntry.setDescription(' An entry in the rlPethMainPseTable.')
rlPethMainPseGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rlPethMainPseGroupIndex.setStatus('current')
if mibBuilder.loadTexts: rlPethMainPseGroupIndex.setDescription('This variable uniquely identifies the group containing the port to which a power Ethernet PSE is connected. Group means box in the stack, module in a rack and the value 1 MUST be used for non-modular devices. Furthermore, the same value MUST be used in this variable, pethMainPseGroupIndex, and pethNotificationControlGroupIndex to refer to a given box in a stack or module in the rack.')
rlPethMainPseSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethMainPseSwVersion.setStatus('current')
if mibBuilder.loadTexts: rlPethMainPseSwVersion.setDescription('This variable identifies the MCU SW version.')
rlPethMainPseHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethMainPseHwVersion.setStatus('current')
if mibBuilder.loadTexts: rlPethMainPseHwVersion.setDescription('This variable identifies the MCU HW version.')
rlPethMainPseHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enhanced", 1), ("plus", 2), ("auto", 3), ("nonPoe", 4), ("enhancedPlus", 5), ("poe60w", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethMainPseHwType.setStatus('current')
if mibBuilder.loadTexts: rlPethMainPseHwType.setDescription('This variable identifies the MCU HW type (enhanced, plus, none).')
rlPethMainPsePowerGuardBand = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethMainPsePowerGuardBand.setStatus('current')
if mibBuilder.loadTexts: rlPethMainPsePowerGuardBand.setDescription('This variable identifies the guard band in [W] for not connecting additional ports.')
rlPethPowerPseTable = MibTable((1, 3, 6, 1, 4, 1, 89, 108, 3), )
if mibBuilder.loadTexts: rlPethPowerPseTable.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPseTable.setDescription(' The table listing additional read-write information for Power Over Ethernet - PSE side.')
rlPethPowerPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 108, 3, 1), ).setIndexNames((0, "MARVELL-POE-MIB", "rlPethPowerPseGroupIndex"))
if mibBuilder.loadTexts: rlPethPowerPseEntry.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPseEntry.setDescription(' An entry in the rlPethPowerPseTable.')
rlPethPowerPseGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rlPethPowerPseGroupIndex.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPseGroupIndex.setDescription('This variable uniquely identifies the group containing the port to which a power Ethernet PSE is connected. Group means box in the stack, module in a rack and the value 1 MUST be used for non-modular devices. Furthermore, the same value MUST be used in this variable, PethPowerPseGroupIndex, and pethNotificationControlGroupIndex to refer to a given box in a stack or module in the rack.')
rlPethPowerPsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ps1", 1), ("ps2", 2), ("ps3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPowerPsePower.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPsePower.setDescription('This variable identifies the maximum power in [W] supplied by PSE.')
rlPethPowerPseRpsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("rps1", 1), ("rps2", 2), ("rps3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPowerPseRpsPower.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPseRpsPower.setDescription('This variable identifies the maximum power in [W] supplied by PSE + RPS.')
rlPethPowerPsePowerManagementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5, 6))).clone(namedValues=NamedValues(("portlimit", 0), ("classlimit", 5), ("maxlimit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPowerPsePowerManagementMode.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPsePowerManagementMode.setDescription('This variable identifies power management mode.')
rlPethPowerPsedisconnectMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("lowestpriority", 0), ("nextport", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPowerPsedisconnectMethod.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPsedisconnectMethod.setDescription('This variable identifies disconnect method. ')
rlPethPowerPseTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-200, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPowerPseTemperatureSensor.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPseTemperatureSensor.setDescription('This variable identifies the pd temperature sensor. ')
rlPethPowerPseInrushTestEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPowerPseInrushTestEnabled.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPseInrushTestEnabled.setDescription('This variable identifies if HW inrush test will be disabled. by default HW inrush test is enabled.')
rlPethPowerPseLegacyDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPowerPseLegacyDisabled.setStatus('current')
if mibBuilder.loadTexts: rlPethPowerPseLegacyDisabled.setDescription('This variable identifies poe Legacy global configuration mode')
rlPethPdPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 108, 4), )
if mibBuilder.loadTexts: rlPethPdPortTable.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortTable.setDescription(' The table listing additional read-write information for Power Over Ethernet - PD side.')
rlPethPdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 108, 4, 1), ).setIndexNames((0, "MARVELL-POE-MIB", "rlPethPdPortIndex"))
if mibBuilder.loadTexts: rlPethPdPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortEntry.setDescription(' An entry in the rlPethPdPortTable.')
rlPethPdPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlPethPdPortIndex.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortIndex.setDescription('This variable uniquely identifies the power Ethernet PD port within group rlPethPdPortGroupIndex to which the power Ethernet PSE entry is connected.')
rlPethPdPortSupportPoeType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 4, 1, 2), RlPoeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPdPortSupportPoeType.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortSupportPoeType.setDescription('This variable indicates the PoE type of the PD port (AF/AT/60W)')
rlPethPdPortOperPoeType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 4, 1, 3), RlPoeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPdPortOperPoeType.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortOperPoeType.setDescription('This variable indicates the operational PoE status of the PD port')
rlPethPdPortPowerRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPdPortPowerRequest.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortPowerRequest.setDescription('This variable indicates the requested power the PD port request from the PSE in mili-Watts')
rlPethPdPortPowerAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPdPortPowerAvailable.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortPowerAvailable.setDescription('This variable indicates the available power the PSE port offers to the PD port in mili-Watts')
rlPethPdPortForcedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 4, 1, 6), RlPoeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPethPdPortForcedMode.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortForcedMode.setDescription('This variable indicates the powered PD port forced mode')
rlPethPdPortNegotiationProtocolOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 108, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("protocolOwnerNone", 0), ("protocolOwnerCDP", 1), ("protocolOwnerLLDP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPethPdPortNegotiationProtocolOwner.setStatus('current')
if mibBuilder.loadTexts: rlPethPdPortNegotiationProtocolOwner.setDescription('This variable indicates the protocol owner on power management negotiation protocol')
mibBuilder.exportSymbols("MARVELL-POE-MIB", rlPethPdPortNegotiationProtocolOwner=rlPethPdPortNegotiationProtocolOwner, rlPethPdPortForcedMode=rlPethPdPortForcedMode, rlPoe=rlPoe, rlPethPdPortPowerAvailable=rlPethPdPortPowerAvailable, rlPethPowerPseGroupIndex=rlPethPowerPseGroupIndex, rlPethPsePortSupportPoeType=rlPethPsePortSupportPoeType, rlPethPsePortStatusDescription=rlPethPsePortStatusDescription, rlPethMainPseEntry=rlPethMainPseEntry, rlPethPdPortOperPoeType=rlPethPdPortOperPoeType, rlPethPsePortMaxPowerAllocAllowed=rlPethPsePortMaxPowerAllocAllowed, rlPethPdPortPowerRequest=rlPethPdPortPowerRequest, PYSNMP_MODULE_ID=rlPoe, rlPethPsePortNegotiationAllocatedPower=rlPethPsePortNegotiationAllocatedPower, rlPethMainPseTable=rlPethMainPseTable, rlPethPowerPseLegacyDisabled=rlPethPowerPseLegacyDisabled, rlPethMainPseSwVersion=rlPethMainPseSwVersion, rlPethPowerPsePowerManagementMode=rlPethPowerPsePowerManagementMode, rlPethPsePortFourPairEnabled=rlPethPsePortFourPairEnabled, rlPethMainPseHwVersion=rlPethMainPseHwVersion, rlPethPowerPseTemperatureSensor=rlPethPowerPseTemperatureSensor, rlPethPowerPseEntry=rlPethPowerPseEntry, RlPoeType=RlPoeType, rlPethPsePortOutputCurrent=rlPethPsePortOutputCurrent, rlPethPdPortIndex=rlPethPdPortIndex, rlPethMainPseGroupIndex=rlPethMainPseGroupIndex, rlPethMainPseHwType=rlPethMainPseHwType, rlPethPsePortNegotiationProtocolOwner=rlPethPsePortNegotiationProtocolOwner, rlPethPowerPseTable=rlPethPowerPseTable, rlPethPowerPsedisconnectMethod=rlPethPowerPsedisconnectMethod, rlPethPsePortOutputPower=rlPethPsePortOutputPower, rlPethPowerPsePower=rlPethPowerPsePower, rlPethPsePortPowerLimit=rlPethPsePortPowerLimit, rlPethPsePortLinkPartnerPoeType=rlPethPsePortLinkPartnerPoeType, rlPethPdPortSupportPoeType=rlPethPdPortSupportPoeType, rlPethPsePortOperStatus=rlPethPsePortOperStatus, rlPethPsePortOperPowerLimit=rlPethPsePortOperPowerLimit, rlPethPdPortTable=rlPethPdPortTable, rlPethPsePortEntry=rlPethPsePortEntry, rlPethPsePortGroupIndex=rlPethPsePortGroupIndex, rlPethPsePortFourPairForced=rlPethPsePortFourPairForced, rlPethMainPsePowerGuardBand=rlPethMainPsePowerGuardBand, rlPethPsePortIndex=rlPethPsePortIndex, rlPethPsePortStatus=rlPethPsePortStatus, rlPethPsePortTable=rlPethPsePortTable, rlPethPsePortTimeRangeName=rlPethPsePortTimeRangeName, rlPethPowerPseInrushTestEnabled=rlPethPowerPseInrushTestEnabled, rlPethPdPortEntry=rlPethPdPortEntry, rlPethPowerPseRpsPower=rlPethPowerPseRpsPower, rlPethPsePortOutputVoltage=rlPethPsePortOutputVoltage)
