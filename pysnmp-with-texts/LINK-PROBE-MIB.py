#
# PySNMP MIB module LINK-PROBE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINK-PROBE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:07:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Gauge32, IpAddress, NotificationType, MibIdentifier, Counter64, Unsigned32, enterprises, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Integer32, NotificationType, Bits, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "NotificationType", "MibIdentifier", "Counter64", "Unsigned32", "enterprises", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Integer32", "NotificationType", "Bits", "iso", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netQuest = MibIdentifier((1, 3, 6, 1, 4, 1, 568))
link_probe = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8)).setLabel("link-probe")
probeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1))
probeStat = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 2))
probePerform = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 3))
probeTrafficShape = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 4))
probeHistorical = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 5))
probeIntervalStartTime = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 6))
dbuConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 7))
deviceStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 8))
trapAcknowledgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 9))
chan_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 1)).setLabel("chan-config")
lmi_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 2)).setLabel("lmi-config")
pro_fun_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 3)).setLabel("pro-fun-config")
trap_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 4)).setLabel("trap-config")
pvc_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 5)).setLabel("pvc-config")
file_download_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 6)).setLabel("file-download-config")
net_management_config = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 1, 7)).setLabel("net-management-config")
lmi_Operation = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setLabel("lmi-Operation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmi_Operation.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_Operation.setDescription(' LMI operation, on -- enabled, off -- disabled ')
lmi_DLCI = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc-0", 1), ("pvc-1023", 2)))).setLabel("lmi-DLCI").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmi_DLCI.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_DLCI.setDescription(' LMI DLCI can just take two values: DLCI 0 or DLCI 1023, default is 0.')
inband_IP_DLCI = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("inband-IP-DLCI").setMaxAccess("readwrite")
if mibBuilder.loadTexts: inband_IP_DLCI.setStatus('mandatory')
if mibBuilder.loadTexts: inband_IP_DLCI.setDescription(' valid Inband IP DLCI ranges from 16 to 991, read only object')
ip_Encapsu = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("raw-ip", 1), ("ietf-ip", 2), ("snap-ip", 3)))).setLabel("ip-Encapsu").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ip_Encapsu.setStatus('mandatory')
if mibBuilder.loadTexts: ip_Encapsu.setDescription(' Indicate which IP DLCI Encapsulation method')
interface_Speed = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("n64-kbps", 1), ("n128-kbps", 2), ("n192-kbps", 3), ("n256-kbps", 4), ("n320-kbps", 5), ("n384-kbps", 6), ("n448-kbps", 7), ("n512-kbps", 8), ("n576-kbps", 9), ("n640-kbps", 10), ("n704-kbps", 11), ("n768-kbps", 12), ("n832-kbps", 13), ("n896-kbps", 14), ("n960-kbps", 15), ("n1024-kbps", 16), ("n1088-kbps", 17), ("n1152-kbps", 18), ("n1216-kbps", 19), ("n1280-kbps", 20), ("n1344-kbps", 21), ("n1408-kbps", 22), ("n1472-kbps", 23), ("n1536-kbps", 24), ("n1600-kbps", 25), ("n1664-kbps", 26), ("n1728-kbps", 27), ("n1792-kbps", 28), ("n1856-kbps", 29), ("n1920-kbps", 30), ("n1984-kbps", 31), ("n2048-kbps", 32)))).setLabel("interface-Speed").setMaxAccess("readwrite")
if mibBuilder.loadTexts: interface_Speed.setStatus('mandatory')
if mibBuilder.loadTexts: interface_Speed.setDescription(' Interface Speed is n*8 kpbs, the default value is 64 kbps. ')
nvram_update = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("write-to-nvram", 1), ("restoreParam", 2)))).setLabel("nvram-update").setMaxAccess("writeonly")
if mibBuilder.loadTexts: nvram_update.setStatus('mandatory')
if mibBuilder.loadTexts: nvram_update.setDescription(" This object lets the user decide if he (she) wants to write the just modified parameters in channel configuration group to nvram, if he chose 'write', these parameters will be updated; and if he chose 'restore', the modifications are lost.")
lmi_type = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annex-a", 1), ("annex-d", 2), ("lmi-rev1", 3)))).setLabel("lmi-type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmi_type.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_type.setDescription(' This object identifies the LMI type the network is currently using, read/write object.')
max_Info_Length = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 4000))).setLabel("max-Info-Length").setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Info_Length.setStatus('mandatory')
if mibBuilder.loadTexts: max_Info_Length.setDescription(' Maximum supported frame information length ranges from 400 to 4000, the default value is 4000.')
n391_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("n391-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n391_Counter.setStatus('mandatory')
if mibBuilder.loadTexts: n391_Counter.setDescription(' N391 Counter ranges from 1 to 255, the default value is 6.')
n392_Net_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n392-Net-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n392_Net_Counter.setStatus('mandatory')
if mibBuilder.loadTexts: n392_Net_Counter.setDescription(' N392 Net Counter ranges from 1 to 10, the default value is 3.')
n392_User_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n392-User-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n392_User_Counter.setStatus('mandatory')
if mibBuilder.loadTexts: n392_User_Counter.setDescription(' N392 User Counter ranges from 1 to 10, the default value is 3.')
n393_Net_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n393-Net-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n393_Net_Counter.setStatus('mandatory')
if mibBuilder.loadTexts: n393_Net_Counter.setDescription(' N393 Net Counter ranges from 1 to 10, the default value is 4.')
n393_User_Counter = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n393-User-Counter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: n393_User_Counter.setStatus('mandatory')
if mibBuilder.loadTexts: n393_User_Counter.setDescription(' N393 User Counter ranges from 1 to 10, the default value is 4.')
t391_Timer = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setLabel("t391-Timer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: t391_Timer.setStatus('mandatory')
if mibBuilder.loadTexts: t391_Timer.setDescription(' T391 Timer ranges from 5 to 30, the default value is 10, which would always less than or equal to T392 Timer.')
t392_Timer = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setLabel("t392-Timer").setMaxAccess("readwrite")
if mibBuilder.loadTexts: t392_Timer.setStatus('mandatory')
if mibBuilder.loadTexts: t392_Timer.setDescription(' T392 Timer ranges from 5 to 30, the default value is 15. which should always greater than T391 Timer.')
lMI_Controller = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("update-para", 1), ("restoreParam", 2)))).setLabel("lMI-Controller").setMaxAccess("writeonly")
if mibBuilder.loadTexts: lMI_Controller.setStatus('mandatory')
if mibBuilder.loadTexts: lMI_Controller.setDescription(' This object lets the user decide if he (she) wants to update the just modified LMI parameters, only when the user chooses to update will the new parameters be accepted by the system. If the user selects the restoreParam value then the LMI parameters will revert to the previous values, and the modifications are lost.')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: softwareVersion.setDescription(' This object displays the software version we are currently running, so according to the version number, the user can determine which version is newer.')
probe_Mode = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generator", 1), ("responder", 2), ("both", 3), ("disabled", 4)))).setLabel("probe-Mode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: probe_Mode.setStatus('mandatory')
if mibBuilder.loadTexts: probe_Mode.setDescription(' Probe mode defines whether the link probe is generator, responder, both or disabled. ')
poll_Period = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setLabel("poll-Period").setMaxAccess("readwrite")
if mibBuilder.loadTexts: poll_Period.setStatus('mandatory')
if mibBuilder.loadTexts: poll_Period.setDescription(' poll period defines the frequency of sending the polling frame by the link probe. The value is between 1 to 60 sec. The poll period applies to all PVCs that are to be probed. ')
sys_current_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("sys-current-time").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sys_current_time.setStatus('mandatory')
if mibBuilder.loadTexts: sys_current_time.setDescription(' sys-current-time displays the system current time with 4 digits year, 2 digits month, 2 digits date and hours, minutes and seconds, which are each 2 digits. If the user wants to set the current time, he (she) must follow the correct formats.')
current_intv_start_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("current-intv-start-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: current_intv_start_time.setStatus('mandatory')
if mibBuilder.loadTexts: current_intv_start_time.setDescription(' current-intv-start-time displays the current interval starting time with 4 digits year, 2 digits month, 2 digits date and hours, minutes and seconds, which are each 2 digits.')
pvc_Count = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setLabel("pvc-Count").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_Count.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_Count.setDescription(' PVC count defines the total number of PVCs which are to be probed. The value is between 1 to 20. ')
probeTokenSize = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(19, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probeTokenSize.setStatus('mandatory')
if mibBuilder.loadTexts: probeTokenSize.setDescription(' This object defines the probe token size.')
pvc_add = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-add").setMaxAccess("writeonly")
if mibBuilder.loadTexts: pvc_add.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_add.setDescription(' This object allows the user to add a PVC to the existing PVC table, the added PVC must not exist before it is added.')
pvc_delete = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-delete").setMaxAccess("writeonly")
if mibBuilder.loadTexts: pvc_delete.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_delete.setDescription(' This object allows the user to delete a PVC from the existing PVC table, the deleted PVC must exist before it was deleted.')
pvc_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10), ).setLabel("pvc-Table")
if mibBuilder.loadTexts: pvc_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_Table.setDescription(' PVC table, which lists PVCs that currently are probed. ')
pvc_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1), ).setLabel("pvc-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvc-Table-Index"))
if mibBuilder.loadTexts: pvc_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_Entry.setDescription(' Identifies an entry (row) in PVC table.')
pvc_Table_Index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-Table-Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_Table_Index.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_Table_Index.setDescription(' Identifies an entry (row) in PVC table. ')
pvc_Operation = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc-not-probed", 1), ("pvc-in-waiting", 2), ("pvc-probed", 3)))).setLabel("pvc-Operation").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvc_Operation.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_Operation.setDescription(" This object identifies the three possible states which a pvc can be in, '1' means we are just collecting the statistical data for this PVC, '2' means we are not just collecting statistic data for this PVC, but also put it into a pending table waiting for probe, '3' means this PVC is used for both collecting statistic data and probing. Even though we can view three states for this PVC, we can just set '1' or '2' for this PVC.")
pvc_Remote_IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 10, 1, 3), IpAddress()).setLabel("pvc-Remote-IpAddress").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_Remote_IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_Remote_IpAddress.setDescription('This object defines the IP address of the remote probe used with IP monitoring.')
alternateVersion = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alternateVersion.setStatus('mandatory')
if mibBuilder.loadTexts: alternateVersion.setDescription(' This object displays the software version we are not currently running, so according to the version number, the user can determine which version is newer.')
bypassStatus = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bypass-off", 1), ("bypass-on", 2), ("bypass-auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bypassStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bypassStatus.setDescription(" This object identifies the three possible states which data bypass can be in. '1' means frame relay data bypass is off. '2' means frame relay data bypass is on. '3' means frame relay data bypass is on and was set on automatically because there was no DCD and no RTS. State '1' can only be set if state is '2'. State '2' can only be set if state is '1'. State '3' cannot be set manually.")
trapCtlGlobal = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCtlGlobal.setStatus('mandatory')
if mibBuilder.loadTexts: trapCtlGlobal.setDescription(' This object is used to enable or disable system traps. Only when it is enabled, the standard traps, such as cold start trap, warm start trap; and enterprise specific traps can be sent.')
trapCtlSpecific = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCtlSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: trapCtlSpecific.setDescription('This parameter is a bitmap for the 16 enterprise specific traps, zero means all the traps are disabled and 0xffff means all the traps are enabled. The following lists the 16 bits which are defined: 1st bit = pvcNotAvailDCE-trap; 2nd bit = pvcNotAvailDTE-trap; 3rd bit = pvcAveRTD-trap; 4th bit = frChanUtilizeToDTE-trap; 5th bit = frChanUtilizeToDCE-trap; 6th bit = pvcBecn-trap; 7th bit = pvcFecn-trap; 8th bit = pvcUtilToDTE-trap; 9th bit = pvcUtilToDCE-trap; 10th bit = pvcCIRExceed-trap; 11th bit = pvcEIRExceed-trap; 12th bit = pvcLossFrameTx-trap; 13th bit = pvcLossFrameRx-trap; 14th bit = all real-time exception and endOfException traps; 15th bit = pvcStatusChange; 16th bit = dbuTrapsEnable; ')
pvcNotAvailThreshDCE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcNotAvailThreshDCE.setStatus('mandatory')
if mibBuilder.loadTexts: pvcNotAvailThreshDCE.setDescription('This parameter defines the allowed maximum PVC not availability threshold within current time interval due to a network fault. It is expressed as a percentage of full interval time. If the actual average value is more than this threshold, a trap will be sent at the end of the interval. ')
pvcNotAvailThreshDTE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcNotAvailThreshDTE.setStatus('mandatory')
if mibBuilder.loadTexts: pvcNotAvailThreshDTE.setDescription('This parameter defines the allowed maximum PVC not availability threshold within current time interval due to the local DTE fault. It is expressed as a percentage of full interval time. If the actual average value is more than this threshold, a trap will be sent at the end of the interval. ')
pvcAveRTDThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcAveRTDThresh.setStatus('mandatory')
if mibBuilder.loadTexts: pvcAveRTDThresh.setDescription('This parameter defines the allowed maximum PVC round trip time delay (milliseconds) within the current time interval. If the actual average round trip delay is more than this threshold, a trap will be sent at the end of the interval. ')
frChanUtilizThreshToDTE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanUtilizThreshToDTE.setStatus('mandatory')
if mibBuilder.loadTexts: frChanUtilizThreshToDTE.setDescription('This parameter defines the maximum allowed frame relay channel utilization to the DTE direction. It is expressed in percentage. If the actual average utilization is more than this threshold, a trap will be sent at the end of the interval. ')
frChanUtilizThreshToDCE = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frChanUtilizThreshToDCE.setStatus('mandatory')
if mibBuilder.loadTexts: frChanUtilizThreshToDCE.setDescription('This parameter defines the maximum allowed frame relay channel utilization to the DCE direction. It is expressed in percentage. If the actual average utilization is more than this threshold, a trap will be sent at the end of the interval. ')
pvcBecnThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcBecnThresh.setStatus('mandatory')
if mibBuilder.loadTexts: pvcBecnThresh.setDescription('This parameter defines the maximum allowed BECNs for a PVC within current interval. If the actual BECNs are more than this threshold, a trap will be sent at the end of the interval. ')
pvcFecnThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcFecnThresh.setStatus('mandatory')
if mibBuilder.loadTexts: pvcFecnThresh.setDescription('This parameter defines the maximum allowed FECNs for a PVC within current interval. If the actual FECNs are more than this threshold, a trap will be sent at the end of the interval. ')
pvcUtilToDTEThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUtilToDTEThresh.setStatus('mandatory')
if mibBuilder.loadTexts: pvcUtilToDTEThresh.setDescription('This parameter defines the maximum allowed PVC utilization to DTE within current interval. If the actual average utilization is more than this threshold, a trap will be sent at the end of the interval. ')
pvcUtilToDCEThresh = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUtilToDCEThresh.setStatus('mandatory')
if mibBuilder.loadTexts: pvcUtilToDCEThresh.setDescription('This parameter defines the maximum allowed PVC utilization to DCE within current interval. If the actual average utilization is more than this threshold, a trap will be sent at the end of the interval. ')
chanLoadToDTEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("chanLoadToDTEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadToDTEThresh_realTime.setStatus('mandatory')
if mibBuilder.loadTexts: chanLoadToDTEThresh_realTime.setDescription('This parameter defines the maximum allowed real-time channel load to the DTE direction (calculated within every TC). It is expressed in percentage. If the actual load is more than this threshold, an exception trap will be sent immediately. ')
chanLoadToDCEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("chanLoadToDCEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadToDCEThresh_realTime.setStatus('mandatory')
if mibBuilder.loadTexts: chanLoadToDCEThresh_realTime.setDescription('This parameter defines the maximum allowed real-time channel load to the DCE direction (calculated within every TC). It is expressed in percentage. If the actual load is more than this, threshold, an exception trap will be sent immediately. ')
chanLoadThreshToDTE_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("chanLoadThreshToDTE-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadThreshToDTE_realTimeRange.setStatus('mandatory')
if mibBuilder.loadTexts: chanLoadThreshToDTE_realTimeRange.setDescription('This parameter defines the variation range for real-time channel load to the DTE exception trap. If within the current TC interval, the variation of the actual utilization is more than that range compared with previous trap value, another exception trap will be sent immediately. This variation range is defined in percentage. ')
chanLoadThreshToDCE_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("chanLoadThreshToDCE-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanLoadThreshToDCE_realTimeRange.setStatus('mandatory')
if mibBuilder.loadTexts: chanLoadThreshToDCE_realTimeRange.setDescription('This parameter defines the variation range for real-time channel load to the DCE exception trap. If within the current TC interval, the variation of the actual utilization is more than that range compared with previous trap value, another exception trap will be sent immediately. This variation range is defined in percentage. ')
pvcRTDThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("pvcRTDThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRTDThresh_realTime.setStatus('mandatory')
if mibBuilder.loadTexts: pvcRTDThresh_realTime.setDescription('This parameter defines the maximum allowed real-time PVC Round Trip Delay in msec., it is calculated as the same frequency as the Probe Polls (1 to 60 sec.). If the actual RTD is more than this threshold, an exception trap will be sent immediately. ')
pvcRTDThresh_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcRTDThresh-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcRTDThresh_realTimeRange.setStatus('mandatory')
if mibBuilder.loadTexts: pvcRTDThresh_realTimeRange.setDescription('This parameter defines the variation range for real-time PVC RTD exception trap. If the variation of the current RTD value is more than this range compared with previous trap value, another exception trap or endOfException will be sent immediately. This variation range is defined in percentage. ')
pvcLoadToDTEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("pvcLoadToDTEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDTEThresh_realTime.setStatus('mandatory')
if mibBuilder.loadTexts: pvcLoadToDTEThresh_realTime.setDescription('This parameter defines the maximum allowed real-time PVC load to the DTE direction (calculated within every TC). It is expressed in percentage. If the actual load is more than this threshold, an exception trap will be sent immediately. ')
pvcLoadToDCEThresh_realTime = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setLabel("pvcLoadToDCEThresh-realTime").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDCEThresh_realTime.setStatus('mandatory')
if mibBuilder.loadTexts: pvcLoadToDCEThresh_realTime.setDescription('This parameter defines the maximum allowed real-time PVC load to the DCE direction (calculated within every TC). It is expressed in percentage. If the actual load is more than this threshold, an exception trap will be sent immediately. ')
pvcLoadToDTEThresh_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcLoadToDTEThresh-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDTEThresh_realTimeRange.setStatus('mandatory')
if mibBuilder.loadTexts: pvcLoadToDTEThresh_realTimeRange.setDescription('This parameter defines the variation range for real-time PVC load to the DTE exception trap. If within the current TC interval, the variation of the actual utilization is more than that range compared with previous trap value, another exception trap will be sent immediately. This variation range is defined in percentage. ')
pvcLoadToDCEThresh_realTimeRange = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcLoadToDCEThresh-realTimeRange").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcLoadToDCEThresh_realTimeRange.setStatus('mandatory')
if mibBuilder.loadTexts: pvcLoadToDCEThresh_realTimeRange.setDescription('This parameter defines the variation range for real-time PVC load to the DCE exception trap. If within the current TC interval, the variation of the actual utilization is more than that range compared with previous trap value, another exception trap will be sent immediately. This variation range is defined in percentage. ')
pvcTC = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcTC.setStatus('mandatory')
if mibBuilder.loadTexts: pvcTC.setDescription('This parameter defines the committed rate measurement time interval (in 1/10 second) which can be calculated as Bc/CIR. For example, if we want TC to be 1 sec., this object should be set as 10.')
pvcCirEir_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2), ).setLabel("pvcCirEir-Table")
if mibBuilder.loadTexts: pvcCirEir_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcCirEir_Table.setDescription(' PVC table, which lists PVCs for which the statistical data are collected. ')
pvcCirEir_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1), ).setLabel("pvcCirEir-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcCirEir-Table-Index"))
if mibBuilder.loadTexts: pvcCirEir_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcCirEir_Entry.setDescription(' Identifies an entry (row) in PVC CIR/EIR table.')
pvcCirEir_Table_Index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcCirEir-Table-Index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcCirEir_Table_Index.setStatus('mandatory')
if mibBuilder.loadTexts: pvcCirEir_Table_Index.setDescription(' Identifies an entry (row) in PVC table. ')
pvcCirToDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcCirToDTE.setStatus('mandatory')
if mibBuilder.loadTexts: pvcCirToDTE.setDescription('This parameter defines the committed information rate (bps) under normal condition in the direction of to DTE. ')
pvcCirToDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcCirToDCE.setStatus('mandatory')
if mibBuilder.loadTexts: pvcCirToDCE.setDescription('This parameter defines the committed information rate (bps) under normal condition in the direction of to DCE. ')
pvcEirToDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcEirToDTE.setStatus('mandatory')
if mibBuilder.loadTexts: pvcEirToDTE.setDescription('This parameter defines the maximum transfer information rate (bps) which the network is accepting in the direction of to DTE. ')
pvcEirToDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcEirToDCE.setStatus('mandatory')
if mibBuilder.loadTexts: pvcEirToDCE.setDescription('This parameter defines the maximum transfer information rate (bps) which the network is accepting in the direction of to DCE. ')
sourceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sourceIpAddress.setDescription('This object defines the IP address of the place where the updated file would store, currently we use a long integer to display.')
sourceFileName = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFileName.setStatus('mandatory')
if mibBuilder.loadTexts: sourceFileName.setDescription('This object defines the name of the updated file.')
sourceFileMode = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("netAscii", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFileMode.setStatus('mandatory')
if mibBuilder.loadTexts: sourceFileMode.setDescription('This object defines the mode of the updated file.')
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("getfile", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tftpAction.setStatus('mandatory')
if mibBuilder.loadTexts: tftpAction.setDescription('This object defines the action we will take of TFTP.')
changeVersion = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sameVersion", 1), ("switchVersion", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: changeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: changeVersion.setDescription('This object is related to the next software reset object, the user can change the version of software and reset it. If in the middle of a TFTP transfer, this object cannot be set. It also cannot be set to switchVersion if there is no other version to which to switch. An undefined value of 0 is also sameVersion.')
softwareReset = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: softwareReset.setStatus('mandatory')
if mibBuilder.loadTexts: softwareReset.setDescription('This object is related to the previous software version object, the user can choose the version of software and reset it. If in the middle of a TFTP transfer, this object can not be set.')
tftpState = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle-ok", 1), ("active", 2), ("idle-failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpState.setStatus('mandatory')
if mibBuilder.loadTexts: tftpState.setDescription('This object defines the current state of the TFTP download.')
ipInterface = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pppIpInterface", 1), ("ethernetIpInterface", 2), ("privateInbandIpInterface", 3), ("userInbandIpInterface", 4), ("isdnIpInterface", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterface.setDescription('This object defines the type of IP interface currently used in the system. pppIpInterface is an asynchronous ppp interface and isdnIpInterface is a synchronous ppp interface.')
inbandIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inbandIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: inbandIpAddress.setDescription('This object defines the IP address of the probe over the inband interface. Even though separate from outbandIpAddress, this address only used when ipInterface is inbandIpInterface.')
outbandIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outbandIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: outbandIpAddress.setDescription('This object defines the IP address of the probe over the current out of band interface: asynchronous ppp, ethernet, or synchronous ppp over ISDN.')
routerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: routerIpAddress.setDescription('This object defines the default gateway or next-hop IP address which is used when no route is found.')
subnetmaskIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 1, 7, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetmaskIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: subnetmaskIpAddress.setDescription('This object defines the network Id portion of our inbandIpAddress or outbandIpAddress.')
chStCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 2, 1))
dte_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 1), Counter32()).setLabel("dte-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dte_frames_ch_curr.setDescription(' Identifies total frames received from DTE device within current 15 minutes interval. ')
dce_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 2), Counter32()).setLabel("dce-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dce_frames_ch_curr.setDescription(' Identifies total frames received from DCE device within current 15 minutes interval. ')
dte_octets_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 3), Counter32()).setLabel("dte-octets-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dte_octets_ch_curr.setDescription(' Identifies total octets received from DTE device within current 15 minutes interval. ')
dce_octets_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 4), Counter32()).setLabel("dce-octets-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dce_octets_ch_curr.setDescription(' Identifies total octets received from DTE device within current 15 minutes interval. ')
lmi_enq_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 5), Counter32()).setLabel("lmi-enq-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_tx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_enq_tx_ch_curr.setDescription(' Identifies the total number of LMI enquiries sent to DCE within current 15 minutes interval. ')
lmi_resp_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 6), Counter32()).setLabel("lmi-resp-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_tx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_resp_tx_ch_curr.setDescription(' Identifies the total number of LMI responses sent to DTE within current 15 minutes interval. ')
lmi_enq_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 7), Counter32()).setLabel("lmi-enq-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_rx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_enq_rx_ch_curr.setDescription(' Identifies the total number of LMI enquiries from the DTE within current 15 minutes interval. ')
lmi_resp_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 8), Counter32()).setLabel("lmi-resp-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_rx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_resp_rx_ch_curr.setDescription(' Identifies the total number of LMI status responses received from the DCE within current 15 minutes interval. ')
fecn_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 9), Counter32()).setLabel("fecn-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: fecn_frames_ch_curr.setDescription(' Identifies total number of frames with FECN set received within current 15 minutes interval. ')
becn_frames_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 10), Counter32()).setLabel("becn-frames-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: becn_frames_ch_curr.setDescription(' Identifies total number of frames with BECN set received within current 15 minutes interval. ')
ip_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 11), Counter32()).setLabel("ip-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_tx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: ip_tx_ch_curr.setDescription(' Identifies total number of IP packets sent on inband DLCI within current 15 minutes interval. ')
ip_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 12), Counter32()).setLabel("ip-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_rx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: ip_rx_ch_curr.setDescription(' Identifies total number of IP packets received on inband DLCI within current 15 minutes interval. ')
poll_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 13), Counter32()).setLabel("poll-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: poll_tx_ch_curr.setDescription(' Identifies total number of probe polls sent to DCE within current 15 minutes interval. ')
resp_tx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 14), Counter32()).setLabel("resp-tx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: resp_tx_ch_curr.setDescription(' Identifies total number of probe responses sent to DCE within current 15 minutes interval. ')
poll_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 15), Counter32()).setLabel("poll-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: poll_rx_ch_curr.setDescription(' Identifies total number of probe polls received from DCE within current 15 minutes interval. ')
resp_rx_ch_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 1, 16), Counter32()).setLabel("resp-rx-ch-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_ch_curr.setStatus('mandatory')
if mibBuilder.loadTexts: resp_rx_ch_curr.setDescription(' Identifies total number of probe responses received from DCE within current 15 minutes interval. ')
chStInterval_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 2, 2), ).setLabel("chStInterval-Table")
if mibBuilder.loadTexts: chStInterval_Table.setStatus('mandatory')
if mibBuilder.loadTexts: chStInterval_Table.setDescription(' probe statistic table, row 1 to row 96, which defines the time interval for every 15 minutes. ')
chStInterval_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1), ).setLabel("chStInterval-Entry").setIndexNames((0, "LINK-PROBE-MIB", "chStIntv-index"))
if mibBuilder.loadTexts: chStInterval_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: chStInterval_Entry.setDescription(' Identifies an entry (row) in probe statistic table.')
chStIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("chStIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: chStIntv_index.setStatus('mandatory')
if mibBuilder.loadTexts: chStIntv_index.setDescription(' Identifies an entry (row) in channel statistic table, 1-96 time intervals. ')
dte_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 2), Counter32()).setLabel("dte-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dte_frames_ch_intv.setDescription(' Identifies total frames received from DTE device within a 15 minutes interval. ')
dce_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 3), Counter32()).setLabel("dce-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dce_frames_ch_intv.setDescription(' Identifies total frames received from DCE device within a 15 minutes interval. ')
dte_octets_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 4), Counter32()).setLabel("dte-octets-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dte_octets_ch_intv.setDescription(' Identifies total octets received from DTE device within a 15 minutes interval. ')
dce_octets_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 5), Counter32()).setLabel("dce-octets-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dce_octets_ch_intv.setDescription(' Identifies total octets received from DTE device within a 15 minutes interval. ')
lmi_enq_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 6), Counter32()).setLabel("lmi-enq-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_tx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_enq_tx_ch_intv.setDescription(' Identifies the total number of LMI enquiries sent to DCE within a 15 minutes interval. ')
lmi_resp_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 7), Counter32()).setLabel("lmi-resp-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_tx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_resp_tx_ch_intv.setDescription(' Identifies the total number of LMI responses send to DTE within a 15 minutes interval. ')
lmi_enq_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 8), Counter32()).setLabel("lmi-enq-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_enq_rx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_enq_rx_ch_intv.setDescription(' Identifies the total number of LMI enquiries received within a 15 minutes interval. ')
lmi_resp_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 9), Counter32()).setLabel("lmi-resp-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: lmi_resp_rx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: lmi_resp_rx_ch_intv.setDescription(' Identifies the total number of LMI status responses received from the DCE within a 15 minutes interval. ')
fecn_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 10), Counter32()).setLabel("fecn-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: fecn_frames_ch_intv.setDescription(' Identifies total number of frames with FECN set received within a 15 minutes interval. ')
becn_frames_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 11), Counter32()).setLabel("becn-frames-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: becn_frames_ch_intv.setDescription(' Identifies total number of frames with BECN set received within a 15 minutes interval. ')
ip_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 12), Counter32()).setLabel("ip-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_tx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: ip_tx_ch_intv.setDescription(' Identifies total number of IP packets sent on inband DLCI within a 15 minutes interval. ')
ip_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 13), Counter32()).setLabel("ip-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_rx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: ip_rx_ch_intv.setDescription(' Identifies total number of IP packets received on inband DLCI within a 15 minutes interval. ')
poll_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 14), Counter32()).setLabel("poll-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: poll_tx_ch_intv.setDescription(' Identifies total number of probe polls sent to DCE within a 15 minutes interval. ')
resp_tx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 15), Counter32()).setLabel("resp-tx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: resp_tx_ch_intv.setDescription(' Identifies total number of probe response sent to DCE within a 15 minutes interval. ')
poll_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 16), Counter32()).setLabel("poll-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: poll_rx_ch_intv.setDescription(' Identifies total number of probe polls received from DCE within a 15 minutes interval. ')
resp_rx_ch_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 2, 1, 17), Counter32()).setLabel("resp-rx-ch-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_ch_intv.setStatus('mandatory')
if mibBuilder.loadTexts: resp_rx_ch_intv.setDescription(' Identifies total number of probe responses received from DCE within a 15 minutes interval. ')
pvcStCurrent_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 2, 3), ).setLabel("pvcStCurrent-Table")
if mibBuilder.loadTexts: pvcStCurrent_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStCurrent_Table.setDescription(' PVC statistic table.')
pvcStCurrent_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1), ).setLabel("pvcStCurrent-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvc-number-index-curr"))
if mibBuilder.loadTexts: pvcStCurrent_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStCurrent_Entry.setDescription(' Identifies an entry (row) in PVC statistic table')
pvc_number_index_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-number-index-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_number_index_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_number_index_curr.setDescription(' Index in PVC statistics table, which identifies the PVC number, up to 20 PVCs can exist. ')
dte_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 2), Counter32()).setLabel("dte-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dte_frames_pvc_curr.setDescription(' Identifies total frames received from DTE device for a specific PVC within current 15 minutes interval. ')
dce_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 3), Counter32()).setLabel("dce-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dce_frames_pvc_curr.setDescription(' Identifies total frames received from DCE device for a specific PVC within current 15 minutes interval. ')
dte_octets_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 4), Counter32()).setLabel("dte-octets-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dte_octets_pvc_curr.setDescription(' Identifies total octets received from DTE device for a specific PVC within current 15 minutes interval. ')
dce_octets_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 5), Counter32()).setLabel("dce-octets-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dce_octets_pvc_curr.setDescription(' Identifies total octets received from DTE device for a specific PVC within current 15 minutes interval. ')
dte_frames_with_DE_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 6), Counter32()).setLabel("dte-frames-with-DE-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_with_DE_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dte_frames_with_DE_pvc_curr.setDescription(' Identifies total frames with DE bit set received from DTE device for a specific PVC within current 15 minutes interval. ')
dce_frames_with_DE_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 7), Counter32()).setLabel("dce-frames-with-DE-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_with_DE_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: dce_frames_with_DE_pvc_curr.setDescription(' Identifies total frames with DE bit set received from DCE device for a specific PVC within current 15 minutes interval. ')
fecn_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 8), Counter32()).setLabel("fecn-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: fecn_frames_pvc_curr.setDescription(' Identifies total number of frames for a specific PVC with FECN set received within current 15 minutes interval. ')
becn_frames_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 9), Counter32()).setLabel("becn-frames-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: becn_frames_pvc_curr.setDescription(' Identifies total number of frames for a specific PVC with BECN set received within current 15 minutes interval. ')
poll_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 10), Counter32()).setLabel("poll-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: poll_tx_pvc_curr.setDescription(' Identifies total number of probe polls sent to DCE within current 15 minutes interval. ')
resp_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 11), Counter32()).setLabel("resp-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: resp_tx_pvc_curr.setDescription(' Identifies total number of probe responses sent to DCE within current 15 minutes interval. ')
poll_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 12), Counter32()).setLabel("poll-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: poll_rx_pvc_curr.setDescription(' Identifies total number of probe polls received from DCE on a specific PVC within current 15 minutes interval. ')
resp_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 13), Counter32()).setLabel("resp-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: resp_rx_pvc_curr.setDescription(' Identifies total number of probe responses received from DCE on a specific PVC within current 15 minutes interval. ')
pvc_loop_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback", 1), ("no-loopback", 2)))).setLabel("pvc-loop-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loop_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_loop_curr.setDescription(" Identifies whether the specific PVC has been found to be in a loop back state by link probe's generator process. ")
ip_poll_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 15), Counter32()).setLabel("ip-poll-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_tx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: ip_poll_tx_pvc_curr.setDescription(' Identifies total number of probe IP polls sent to ethernet within current 15 minutes interval. ')
ip_resp_tx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 16), Counter32()).setLabel("ip-resp-tx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_tx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: ip_resp_tx_pvc_curr.setDescription(' Identifies total number of probe IP responses sent to ethernet within current 15 minutes interval. ')
ip_poll_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 17), Counter32()).setLabel("ip-poll-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_rx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: ip_poll_rx_pvc_curr.setDescription(' Identifies total number of probe IP polls received from ethernet on a specific PVC within current 15 minutes interval. ')
ip_resp_rx_pvc_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 18), Counter32()).setLabel("ip-resp-rx-pvc-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_rx_pvc_curr.setStatus('mandatory')
if mibBuilder.loadTexts: ip_resp_rx_pvc_curr.setDescription(' Identifies total number of probe IP responses received from ethernet on a specific PVC within current 15 minutes interval. ')
ipRtrRxLatTxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatTxPvcCurr.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrRxLatTxPvcCurr.setDescription(' Identifies total number of Router Receive Latency IP packets transmitted out the To-Dte port within current 15 minute interval. ')
ipRtrRxLatRxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatRxPvcCurr.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrRxLatRxPvcCurr.setDescription(' Identifies total number of Router Receive Latency IP packets received at the Ethernet port within current 15 minute interval. ')
ipRtrTxLatTxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatTxPvcCurr.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrTxLatTxPvcCurr.setDescription(' Identifies total number of Router Transmit Latency IP packets transmitted out the Ethernet port within current 15 minute interval. ')
ipRtrTxLatRxPvcCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatRxPvcCurr.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrTxLatRxPvcCurr.setDescription(' Identifies total number of Router Transmit Latency IP packets received at the To-Dte port within current 15 minute interval. ')
pvcStInterval_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 2, 4), ).setLabel("pvcStInterval-Table")
if mibBuilder.loadTexts: pvcStInterval_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStInterval_Table.setDescription(' PVC statistic interval table: ')
pvcStInterval_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1), ).setLabel("pvcStInterval-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvc-number-index-intv"), (0, "LINK-PROBE-MIB", "pvcStIntv-index"))
if mibBuilder.loadTexts: pvcStInterval_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStInterval_Entry.setDescription(' Identifies an entry (row) in pvc statistic table')
pvc_number_index_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvc-number-index-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_number_index_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_number_index_intv.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
pvcStIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcStIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStIntv_index.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStIntv_index.setDescription(' A number between 1 and 96, where 1 is the most recently completed 15 minutes interval and 96 is the least recently completed 15 minutes interval. ')
dte_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 3), Counter32()).setLabel("dte-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dte_frames_pvc_intv.setDescription(' Identifies total frames received from DTE device for a specific PVC within a 15 minutes interval. ')
dce_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 4), Counter32()).setLabel("dce-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dce_frames_pvc_intv.setDescription(' Identifies total frames received from DCE device for a specific PVC within a 15 minutes interval. ')
dte_octets_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 5), Counter32()).setLabel("dte-octets-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_octets_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dte_octets_pvc_intv.setDescription(' Identifies total octets received from DTE device for a specific PVC within a 15 minutes interval. ')
dce_octets_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 6), Counter32()).setLabel("dce-octets-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_octets_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dce_octets_pvc_intv.setDescription(' Identifies total octets received from DTE device for a specific PVC within a 15 minutes interval. ')
dte_frames_with_DE_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 7), Counter32()).setLabel("dte-frames-with-DE-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dte_frames_with_DE_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dte_frames_with_DE_pvc_intv.setDescription(' Identifies the frames with DE bit set received from DTE device for a specific PVC within a 15 minutes interval. ')
dce_frames_with_DE_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 8), Counter32()).setLabel("dce-frames-with-DE-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: dce_frames_with_DE_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: dce_frames_with_DE_pvc_intv.setDescription(' Identifies the frames with DE bit set received from DCE device for a specific PVC within a 15 minutes interval. ')
fecn_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 9), Counter32()).setLabel("fecn-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: fecn_frames_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: fecn_frames_pvc_intv.setDescription(' Identifies total number of frames for a specific PVC with FECN set received within a 15 minutes interval. ')
becn_frames_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 10), Counter32()).setLabel("becn-frames-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: becn_frames_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: becn_frames_pvc_intv.setDescription(' Identifies total number of frames for a specific PVC with BECN set received within a 15 minutes interval. ')
poll_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 11), Counter32()).setLabel("poll-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_tx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: poll_tx_pvc_intv.setDescription(' Identifies total number of probe polls sent to DCE within a 15 minutes interval. ')
resp_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 12), Counter32()).setLabel("resp-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_tx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: resp_tx_pvc_intv.setDescription(' Identifies total number of probe responses sent to DCE within a 15 minutes interval. ')
poll_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 13), Counter32()).setLabel("poll-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: poll_rx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: poll_rx_pvc_intv.setDescription(' Identifies total number of probe polls received from DCE on a specific PVC within a 15 minutes interval. ')
resp_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 14), Counter32()).setLabel("resp-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: resp_rx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: resp_rx_pvc_intv.setDescription(' Identifies total number of probe responses received from DCE on a specific PVC within a 15 minutes interval. ')
pvc_loop_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 15), Integer32()).setLabel("pvc-loop-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loop_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_loop_intv.setDescription(" Identifies whether the specific PVC has been found to be in a loop back state by link probe's generator process. ")
ip_poll_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 16), Counter32()).setLabel("ip-poll-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_tx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: ip_poll_tx_pvc_intv.setDescription(' Identifies total number of probe IP polls sent to ethernet within a 15 minutes interval. ')
ip_resp_tx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 17), Counter32()).setLabel("ip-resp-tx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_tx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: ip_resp_tx_pvc_intv.setDescription(' Identifies total number of probe IP responses sent to ethernet within a 15 minutes interval. ')
ip_poll_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 18), Counter32()).setLabel("ip-poll-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_poll_rx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: ip_poll_rx_pvc_intv.setDescription(' Identifies total number of probe IP polls received from ethernet on a specific PVC within a 15 minutes interval. ')
ip_resp_rx_pvc_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 19), Counter32()).setLabel("ip-resp-rx-pvc-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_resp_rx_pvc_intv.setStatus('mandatory')
if mibBuilder.loadTexts: ip_resp_rx_pvc_intv.setDescription(' Identifies total number of probe IP responses received from ethernet on a specific PVC within a 15 minutes interval. ')
ipRtrRxLatTxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatTxPvcIntv.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrRxLatTxPvcIntv.setDescription(' Identifies total number of Router Receive Latency IP packets transmitted out the To-Dte port within a 15 minute interval. ')
ipRtrRxLatRxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrRxLatRxPvcIntv.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrRxLatRxPvcIntv.setDescription(' Identifies total number of Router Receive Latency IP packets received at the Ethernet port within a 15 minute interval. ')
ipRtrTxLatTxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatTxPvcIntv.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrTxLatTxPvcIntv.setDescription(' Identifies total number of Router Transmit Latency IP packets transmitted out the Ethernet port within a 15 minute interval. ')
ipRtrTxLatRxPvcIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRtrTxLatRxPvcIntv.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtrTxLatRxPvcIntv.setDescription(' Identifies total number of Router Transmit Latency IP packets received at the To-Dte port within a 15 minute interval. ')
chanPerfCurr = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 3, 1))
chan_unvail_toDte_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unvail-toDte-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unvail_toDte_curr.setStatus('mandatory')
if mibBuilder.loadTexts: chan_unvail_toDte_curr.setDescription(' This object identifies the channel unavailability due to remote DTE fault within the latest 15 minutes. This statistical data is calculated by the channel unavailable time over the full time interval.')
chan_unavail_toDce_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unavail-toDce-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unavail_toDce_curr.setStatus('mandatory')
if mibBuilder.loadTexts: chan_unavail_toDce_curr.setDescription(' This object identifies the channel unavailability due to local DTE fault within the latest 15 minutes. This statistical data is calculated by the channel unavailable time over the full time interval.')
chan_user_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_tx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: chan_user_load_tx_curr.setDescription(' channel average user tx load within the latest 15 minutes, this statistical data is calculated by user data octets sent by the channel within the 15 minutes over the total channel available load ( which depends on physical interface speed). ')
chan_user_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_rx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: chan_user_load_rx_curr.setDescription(' channel average user rx load within the latest 15 minutes, this statistical data is calculated by user data octets received by the channel within the 15 minutes over the total channel available load ( which depends on physical interface speed). ')
chan_total_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_tx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: chan_total_load_tx_curr.setDescription(' channel total tx load within the latest 15 minutes, this statistical data is calculated by the total data octets sent by the channel within the 15 minutes over the channel available load ( which depends on physical interface speed). ')
chan_total_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_rx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: chan_total_load_rx_curr.setDescription(' channel total rx load within the latest 15 minutes, this statistical data is calculated by total data octets received by the channel within the 15 minutes over the channel total available load ( which depends on physical interface speed). ')
chanPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 3, 2), ).setLabel("chanPerfIntv-Table")
if mibBuilder.loadTexts: chanPerfIntv_Table.setStatus('mandatory')
if mibBuilder.loadTexts: chanPerfIntv_Table.setDescription(' Probe channel performance table, which displays the performance statistical data based on the probe channel within previous 24 hours.')
chanPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1), ).setLabel("chanPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "chanPerfIntv-index"))
if mibBuilder.loadTexts: chanPerfIntv_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: chanPerfIntv_Entry.setDescription(' Identifies an entry (row) in probe channel performance table.')
chanPerfIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("chanPerfIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: chanPerfIntv_index.setStatus('mandatory')
if mibBuilder.loadTexts: chanPerfIntv_index.setDescription(' Identifies an entry (row) in historical PVC performance table, total 96 time intervals, where 1 is the most recently completed 15 minutes interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid). ')
chan_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unavail_toDte_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_unavail_toDte_intv.setDescription(' This object identifies the channel unavailability due to remote DTE fault within a 15 minutes interval. This statistical data is calculated by the channel unavailable time over the full time interval.')
chan_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_unavail_toDce_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_unavail_toDce_intv.setDescription(' This object identifies the channel unavailability due to local DTE fault within a 15 minutes interval. This statistical data is calculated by the channel unavailable time over the full time interval.')
chan_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_user_load_tx_intv.setDescription(' channel average user tx load within a 15 minutes interval, this statistical data is calculated by user data octets sent by the channel within the 15 minutes over the total channel available load ( which depends on physical interface speed). ')
chan_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_user_load_rx_intv.setDescription(' channel average user rx load within a 15 minutes interval, this statistical data is calculated by user data octets received by the channel within the 15 minutes over the total channel available load( which depends on physical interface speed). ')
chan_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_total_load_tx_intv.setDescription(' channel total tx load within a 15 minutes interval, this statistical data is calculated by the total data octets sent by the channel within the 15 minutes over the total channel available load ( which depends on physical interface speed). ')
chan_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_total_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_total_load_rx_intv.setDescription(' Channel total rx load within a 15 minutes interval, this statistical data is calculated by the total data octets received by the channel within the 15 minutes over the total channel available load ( which depends on physical interface speed). ')
chan_min_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_user_load_tx_intv.setDescription(' Minimum chan-user-load-tx within a 15 minutes interval. ')
chan_min_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_user_load_tx_time_intv.setDescription(' Timestamp of when the minimum chan-user-load-tx within a 15 minutes interval occurred. ')
chan_min_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_user_load_rx_intv.setDescription(' Minimum chan-user-load-rx within a 15 minutes interval. ')
chan_min_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_user_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_user_load_rx_time_intv.setDescription(' Timestamp of when the minimum chan-user-load-rx within a 15 minutes interval occurred. ')
chan_min_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_total_load_tx_intv.setDescription(' Minimum chan-total-load-tx within a 15 minutes interval. ')
chan_min_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_total_load_tx_time_intv.setDescription(' Timestamp of when the minimum chan-total-load-tx within a 15 minutes interval occurred. ')
chan_min_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-min-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_total_load_rx_intv.setDescription(' Minimum chan-total-load-rx within a 15 minutes interval. ')
chan_min_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-min-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_min_total_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_min_total_load_rx_time_intv.setDescription(' Timestamp of when the minimum chan-total-load-rx within a 15 minutes interval occurred. ')
chan_max_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_user_load_tx_intv.setDescription(' Maximum chan-user-load-tx within a 15 minutes interval. ')
chan_max_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-max-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_user_load_tx_time_intv.setDescription(' Timestamp of when the maximum chan-user-load-tx within a 15 minutes interval occurred. ')
chan_max_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_user_load_rx_intv.setDescription(' Maximum chan-user-load-rx within a 15 minutes interval. ')
chan_max_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-max-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_user_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_user_load_rx_time_intv.setDescription(' Timestamp of when the maximum chan-user-load-rx within a 15 minutes interval occurred. ')
chan_max_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_total_load_tx_intv.setDescription(' Maximum chan-total-load-tx within a 15 minutes interval. ')
chan_max_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_total_load_tx_time_intv.setDescription(' Timestamp of when the maximum chan-total-load-tx within a 15 minutes interval occurred. ')
chan_max_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("chan-max-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_total_load_rx_intv.setDescription(' Maximum chan-total-load-rx within a 15 minutes interval. ')
chan_max_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chan-max-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: chan_max_total_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: chan_max_total_load_rx_time_intv.setDescription(' Timestamp of when the maximum chan-total-load-rx within a 15 minutes interval occurred. ')
pvcPerfCurr_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 3, 3), ).setLabel("pvcPerfCurr-Table")
if mibBuilder.loadTexts: pvcPerfCurr_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcPerfCurr_Table.setDescription(' PVC performance table, which displays the performance statistical data based on each PVC.')
pvcPerfCurr_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1), ).setLabel("pvcPerfCurr-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcPerfCurr-num-index"))
if mibBuilder.loadTexts: pvcPerfCurr_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcPerfCurr_Entry.setDescription(' Identifies an entry (row) in pvc statistic table')
pvcPerfCurr_num_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcPerfCurr-num-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfCurr_num_index.setStatus('mandatory')
if mibBuilder.loadTexts: pvcPerfCurr_num_index.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
pvc_tx_time_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 2), Integer32()).setLabel("pvc-tx-time-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_tx_time_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_tx_time_curr.setDescription(' Probe token average round trip time within the latest 15 minutes for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvc_unavail_toDte = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDte").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDte.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_unavail_toDte.setDescription(' This object identifies the PVC average unavailability within the latest 15 minutes. This statistical data is calculated by a PVC unavailable time due to the network or remote DTE fault over the full time interval.')
pvc_unavail_toDce = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDce").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDce.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_unavail_toDce.setDescription(' This object identifies the PVC average unavailability within the latest 15 minutes. This statistical data is calculated by a PVC unavailable time due to the local DTE fault over the full time interval.')
pvc_user_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_tx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_user_load_tx_curr.setDescription(' This object identifies the PVC average user tx load within the latest 15 minutes. This statistical data is calculated by user data octets sent by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_user_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_rx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_user_load_rx_curr.setDescription(' This object identifies the PVC average user rx load within the latest 15 minutes. This statistical data is calculated by user data octets received by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_total_load_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_tx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_total_load_tx_curr.setDescription(' This object identifies the PVC total tx load within the latest 15 minutes. This statistical data is calculated by total data octets sent by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_total_load_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_rx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_total_load_rx_curr.setDescription(' This object identifies the PVC total rx load within the latest 15 minutes. This statistical data is calculated by total data octets received by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_CIR_toNet_exceed_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 9), Integer32()).setLabel("pvc-CIR-toNet-exceed-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_CIR_toNet_exceed_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_CIR_toNet_exceed_curr.setDescription(' This object identifies the number of exceeding CIR times that the network detected within the current interval. The measurement is done for every Tc, and the direction is to the network.')
pvc_EIR_toNet_exceed_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 10), Integer32()).setLabel("pvc-EIR-toNet-exceed-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_EIR_toNet_exceed_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_EIR_toNet_exceed_curr.setDescription(' This object identifies the number of exceeding EIR times that the network detected within the current interval. The measurement is done for every Tc, and the direction is to the network.')
pvc_loss_frame_tx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 11), Integer32()).setLabel("pvc-loss-frame-tx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_tx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_loss_frame_tx_curr.setDescription(' This object identifies the percentage of tx loss of frames within the total tx frames for this PVC. A -1 value indicates data is Not-Avail. ')
pvc_loss_frame_rx_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 12), Integer32()).setLabel("pvc-loss-frame-rx-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_rx_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_loss_frame_rx_curr.setDescription(' This object identifies the percentage of rx loss of frames within the total rx frames for this PVC. A -1 value indicates data is Not-Avail. ')
pvc_ip_tx_time_curr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 13), Integer32()).setLabel("pvc-ip-tx-time-curr").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_ip_tx_time_curr.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_ip_tx_time_curr.setDescription(' Probe token average round trip time via ethernet and using UDP/IP packets within the latest 15 minutes for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvcIpRtrRxLatTxTimeCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrRxLatTxTimeCurr.setStatus('mandatory')
if mibBuilder.loadTexts: pvcIpRtrRxLatTxTimeCurr.setDescription(' Router Receive Latency IP Packet average round trip time from first byte transmitted out the To-Dte port, to the last byte received on the Ethernet port, within the latest 15 minutes for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvcIpRtrTxLatTxTimeCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrTxLatTxTimeCurr.setStatus('mandatory')
if mibBuilder.loadTexts: pvcIpRtrTxLatTxTimeCurr.setDescription(' Router Transmit Latency IP Packet average round trip time from first byte transmitted out the Ethernet port, to the last byte received on the To-Dte port, within the latest 15 minutes for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvcPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 3, 4), ).setLabel("pvcPerfIntv-Table")
if mibBuilder.loadTexts: pvcPerfIntv_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcPerfIntv_Table.setDescription(' PVC performance interval table, which displays the performance statistical data based on each PVC in previous 24 hours.')
pvcPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1), ).setLabel("pvcPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcPerfIntv-num-index"), (0, "LINK-PROBE-MIB", "pvcPerf-intv-index"))
if mibBuilder.loadTexts: pvcPerfIntv_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcPerfIntv_Entry.setDescription(' Identifies an entry (row) in pvc statistic table')
pvcPerfIntv_num_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcPerfIntv-num-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerfIntv_num_index.setStatus('mandatory')
if mibBuilder.loadTexts: pvcPerfIntv_num_index.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
pvcPerf_intv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcPerf-intv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPerf_intv_index.setStatus('mandatory')
if mibBuilder.loadTexts: pvcPerf_intv_index.setDescription(' Identifies an entry (row) in PVC performance table, with total 96 time intervals, where 1 is the most recently completed 15 minutes interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid). ')
pvc_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 3), Integer32()).setLabel("pvc-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_tx_time_intv.setDescription(' Probe token average round trip time within a 15 minutes interval for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvc_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDte_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_unavail_toDte_intv.setDescription(' This object identifies the PVC average unavailability within a 15 minutes interval. This statistical data is calculated by a PVC unavailable time due to the network or remote DTE fault over the full time interval.')
pvc_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_unavail_toDce_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_unavail_toDce_intv.setDescription(' This object identifies the PVC average unavailability within a 15 minutes interval. This statistical data is calculated by a PVC unavailable time due to the local DTE fault over the full time interval.')
pvc_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_user_load_tx_intv.setDescription(' This object identifies the PVC average user tx load within a 15 minutes interval. This statistical data is calculated by user data octets sent by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_user_load_rx_intv.setDescription(' This object identifies the PVC average user rx load within a 15 minutes interval. This statistical data is calculated by user data octets received by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_total_load_tx_intv.setDescription(' This object identifies the PVC total tx load within a 15 minutes interval. This statistical data is calculated by total data octets sent by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_total_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_total_load_rx_intv.setDescription(' This object identifies the PVC total rx load within a 15 minutes interval. This statistical data is calculated by total data octets received by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
pvc_CIR_toNet_exceed_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 10), Integer32()).setLabel("pvc-CIR-toNet-exceed-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_CIR_toNet_exceed_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_CIR_toNet_exceed_intv.setDescription(' This object identifies the number of exceeding CIR times that the network detected within an interval. The measurement is done for every Tc, and the direction is to the network.')
pvc_EIR_toNet_exceed_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 11), Integer32()).setLabel("pvc-EIR-toNet-exceed-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_EIR_toNet_exceed_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_EIR_toNet_exceed_intv.setDescription(' This object identifies the number of exceeding EIR times that the network detected within an interval. The measurement is done for every Tc, and the direction is to the network.')
pvc_loss_frame_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("not-avail", 255)))).setLabel("pvc-loss-frame-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_loss_frame_tx_intv.setDescription(' This object identifies the percentage of tx loss of frames within the total tx frames for this PVC in this interval.')
pvc_loss_frame_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("not-avail", 255)))).setLabel("pvc-loss-frame-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_loss_frame_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_loss_frame_rx_intv.setDescription(' This object identifies the percentage of rx loss of frames within the total rx frames for this PVC in this interval.')
pvc_ip_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 14), Integer32()).setLabel("pvc-ip-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_ip_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_ip_tx_time_intv.setDescription(' Probe token average round trip time via ethernet and using UDP/IP packets within a 15 minutes interval for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvcIpRtrRxLatTxTimeIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrRxLatTxTimeIntv.setStatus('mandatory')
if mibBuilder.loadTexts: pvcIpRtrRxLatTxTimeIntv.setDescription(' Router Receive Latency IP Packet average round trip time from first byte transmitted out the To-Dte port, to the last byte received on the Ethernet port, within a 15 minute interval for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvcIpRtrTxLatTxTimeIntv = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIpRtrTxLatTxTimeIntv.setStatus('mandatory')
if mibBuilder.loadTexts: pvcIpRtrTxLatTxTimeIntv.setDescription(' Router Transmit Latency IP Packet average round trip time from first byte transmitted out the Ethernet port, to the last byte received on the To-Dte port, within a 15 minute interval for a specific PVC. A -1 value indicates data is Not-Avail. ')
pvc_min_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 17), Integer32()).setLabel("pvc-min-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_tx_time_intv.setDescription(' Minimum pvc-tx-time within a 15 minutes interval for a specific PVC.')
pvc_min_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_tx_time_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_tx_time_time_intv.setDescription(' Timestamp of when the minimum pvc-tx-time within a 15 minutes interval occurred.')
pvc_min_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_user_load_tx_intv.setDescription(' Minimum pvc-user-load-tx within a 15 minutes interval.')
pvc_min_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_user_load_tx_time_intv.setDescription(' Timestamp of when the minimum pvc-user-load-tx within a 15 minutes interval occurred.')
pvc_min_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_user_load_rx_intv.setDescription(' Minimum pvc-user-load-rx within a 15 minutes interval.')
pvc_min_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_user_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_user_load_rx_time_intv.setDescription(' Timestamp of when the minimum pvc-user-load-rx within a 15 minutes interval occurred.')
pvc_min_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_total_load_tx_intv.setDescription(' Minimum pvc-total-load-tx within a 15 minutes interval.')
pvc_min_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_total_load_tx_time_intv.setDescription(' Timestamp of when the minimum pvc-total-load-tx within a 15 minutes interval occurred.')
pvc_min_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-min-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_total_load_rx_intv.setDescription(' Minimum pvc-total-load-rx within a 15 minutes interval.')
pvc_min_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_total_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_total_load_rx_time_intv.setDescription(' Timestamp of when the minimum pvc-total-load-rx within a 15 minutes interval occurred.')
pvc_min_ip_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 27), Integer32()).setLabel("pvc-min-ip-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_ip_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_ip_tx_time_intv.setDescription(' Minimum pvc-ip-tx-time within a 15 minutes interval.')
pvc_min_ip_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-min-ip-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_min_ip_tx_time_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_min_ip_tx_time_time_intv.setDescription(' Timestamp of when the minimum pvc-ip-tx-time within a 15 minutes interval occurred.')
pvc_max_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 29), Integer32()).setLabel("pvc-max-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_tx_time_intv.setDescription(' Maximum pvc-tx-time within a 15 minutes interval.')
pvc_max_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_tx_time_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_tx_time_time_intv.setDescription(' Timestamp of when the maximum pvc-tx-time within a 15 minutes interval occurred.')
pvc_max_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_user_load_tx_intv.setDescription(' Maximum pvc-user-load-tx within a 15 minutes interval.')
pvc_max_user_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-user-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_user_load_tx_time_intv.setDescription(' Timestamp of when the maximum pvc-user-load-tx within a 15 minutes interval occurred.')
pvc_max_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_user_load_rx_intv.setDescription(' Maximum pvc-user-load-rx within a 15 minutes interval.')
pvc_max_user_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-user-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_user_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_user_load_rx_time_intv.setDescription(' Timestamp of when the maximum pvc-user-load-rx within a 15 minutes interval occurred.')
pvc_max_total_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-total-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_total_load_tx_intv.setDescription(' Maximum pvc-total-load-tx within a 15 minutes interval.')
pvc_max_total_load_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-total-load-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_total_load_tx_time_intv.setDescription(' Timestamp of when the maximum pvc-total-load-tx within a 15 minutes interval occurred.')
pvc_max_total_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("pvc-max-total-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_total_load_rx_intv.setDescription(' Maximum pvc-total-load-rx within a 15 minutes interval.')
pvc_max_total_load_rx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-total-load-rx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_total_load_rx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_total_load_rx_time_intv.setDescription(' Timestamp of when the maximum pvc-total-load-rx within a 15 minutes interval occurred.')
pvc_max_ip_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 39), Integer32()).setLabel("pvc-max-ip-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_ip_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_ip_tx_time_intv.setDescription(' Maximum pvc-ip-tx-time within a 15 minutes interval.')
pvc_max_ip_tx_time_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 3, 4, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("pvc-max-ip-tx-time-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvc_max_ip_tx_time_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: pvc_max_ip_tx_time_time_intv.setDescription(' Timestamp of when the maximum pvc-ip-tx-time within a 15 minutes interval occurred.')
pvcShapeThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 568, 8, 4, 1))
pvcShapeThreshLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_1.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeThreshLevel_1.setDescription('This parameter defines the maximum percentage of PVC traffic (measured in TC) within this PVC CIR in shape level 1 (currently is 10%). ')
pvcShapeThreshLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_2.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeThreshLevel_2.setDescription('This parameter defines the maximum percentage of PVC traffic (measured in TC) within this PVC CIR in shape level 2 (currently is 25%). ')
pvcShapeThreshLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_3.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeThreshLevel_3.setDescription('This parameter defines the maximum percentage of PVC traffic (measured in TC) within this PVC CIR in shape level 3 (currently is 45%). ')
pvcShapeThreshLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_4.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeThreshLevel_4.setDescription('This parameter defines the maximum percentage of PVC traffic (measured in TC) within this PVC CIR in shape level 4 (currently is 75%). ')
pvcShapeThreshLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_5.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeThreshLevel_5.setDescription('This parameter defines the maximum percentage of PVC traffic (measured in TC) within this PVC CIR in shape level 5 (currently is 90%). ')
pvcShapeThreshLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeThreshLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_6.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeThreshLevel_6.setDescription('This parameter defines the maximum percentage of PVC traffic (measured in TC) within this PVC CIR in shape level 6 (currently is 100%). ')
pvcShapeThreshLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 1, 7), Integer32()).setLabel("pvcShapeThreshLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeThreshLevel_7.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeThreshLevel_7.setDescription('This parameter defines the maximum percentage of PVC traffic (measured in TC) within this PVC CIR in shape level 7 (currently is more than 100%). ')
pvcShapeCurrToDce_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 2), ).setLabel("pvcShapeCurrToDce-Table")
if mibBuilder.loadTexts: pvcShapeCurrToDce_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDce_Table.setDescription(' PVC current traffic shape to DCE table, which displays the traffic shape information based on each PVC.')
pvcShapeCurrToDce_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1), ).setLabel("pvcShapeCurrToDce-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeCurrToDce-index"))
if mibBuilder.loadTexts: pvcShapeCurrToDce_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDce_Entry.setDescription(' Identifies an entry (row) in pvc current traffic shape to DCE table')
pvcShapeCurrToDce_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeCurrToDce-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDce_index.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDce_index.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
pvcShapeCurrToDceLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_1.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_1.setDescription(' This object identifies the percentage of traffic in level one in current 15 minutes to the direction of DCE.')
pvcShapeCurrToDceLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_2.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_2.setDescription(' This object identifies the percentage of traffic in level two in current 15 minutes to the direction of DCE.')
pvcShapeCurrToDceLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_3.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_3.setDescription(' This object identifies the percentage of traffic in level three in current 15 minutes to the direction of DCE.')
pvcShapeCurrToDceLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_4.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_4.setDescription(' This object identifies the percentage of traffic in level four in current 15 minutes to the direction of DCE.')
pvcShapeCurrToDceLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_5.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_5.setDescription(' This object identifies the percentage of traffic in level five in current 15 minutes to the direction of DCE.')
pvcShapeCurrToDceLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_6.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_6.setDescription(' This object identifies the percentage of traffic in level six in current 15 minutes to the direction of DCE.')
pvcShapeCurrToDceLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDceLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_7.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDceLevel_7.setDescription(' This object identifies the percentage of traffic in level seven in current 15 minutes to the direction of DCE.')
pvcShapeCurrToDte_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 3), ).setLabel("pvcShapeCurrToDte-Table")
if mibBuilder.loadTexts: pvcShapeCurrToDte_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDte_Table.setDescription(' PVC current traffic shape table, which displays the traffic shape information based on each PVC.')
pvcShapeCurrToDte_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1), ).setLabel("pvcShapeCurrToDte-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeCurrToDte-index"))
if mibBuilder.loadTexts: pvcShapeCurrToDte_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDte_Entry.setDescription(' Identifies an entry (row) in pvc current traffic shape to DTE table')
pvcShapeCurrToDte_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeCurrToDte-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDte_index.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDte_index.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
pvcShapeCurrToDteLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_1.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_1.setDescription(' This object identifies the percentage of traffic in level one in current 15 minutes to the direction of DTE.')
pvcShapeCurrToDteLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_2.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_2.setDescription(' This object identifies the percentage of traffic in level two in current 15 minutes to the direction of DTE.')
pvcShapeCurrToDteLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_3.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_3.setDescription(' This object identifies the percentage of traffic in level three in current 15 minutes to the direction of DTE.')
pvcShapeCurrToDteLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_4.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_4.setDescription(' This object identifies the percentage of traffic in level four in current 15 minutes to the direction of DTE.')
pvcShapeCurrToDteLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_5.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_5.setDescription(' This object identifies the percentage of traffic in level five in current 15 minutes to the direction of DTE.')
pvcShapeCurrToDteLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_6.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_6.setDescription(' This object identifies the percentage of traffic in level six in current 15 minutes to the direction of DTE.')
pvcShapeCurrToDteLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeCurrToDteLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_7.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeCurrToDteLevel_7.setDescription(' This object identifies the percentage of traffic in level seven in current 15 minutes to the direction of DTE.')
pvcShapeIntvToDce_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 4), ).setLabel("pvcShapeIntvToDce-Table")
if mibBuilder.loadTexts: pvcShapeIntvToDce_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDce_Table.setDescription(' PVC shape to DCE interval table, which displays the pvc traffic shape information to the direction of DCE within 24 hours. ')
pvcShapeIntvToDce_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1), ).setLabel("pvcShapeIntvToDce-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeIntvToDce-pvcIx"), (0, "LINK-PROBE-MIB", "pvcShapeIntvToDce-intvIx"))
if mibBuilder.loadTexts: pvcShapeIntvToDce_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDce_Entry.setDescription(' Identifies an entry (row) in pvc traffic shape to DCE interval table')
pvcShapeIntvToDce_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeIntvToDce-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDce_pvcIx.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDce_pvcIx.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
pvcShapeIntvToDce_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcShapeIntvToDce-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDce_intvIx.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDce_intvIx.setDescription(' The index value which uniquely identifies the interval number to which this entry is applicable. ')
pvcShapeIntvToDceLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_1.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_1.setDescription(' This object identifies the percentage of traffic in level one within a specific 15-minutes interval in the direction of DCE.')
pvcShapeIntvToDceLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_2.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_2.setDescription(' This object identifies the percentage of traffic in level two within a specific 15-minutes interval in the direction of DCE.')
pvcShapeIntvToDceLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_3.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_3.setDescription(' This object identifies the percentage of traffic in level three within a specific 15-minutes interval in the direction of DCE.')
pvcShapeIntvToDceLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_4.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_4.setDescription(' This object identifies the percentage of traffic in level four within a specific 15-minutes interval in the direction of DCE.')
pvcShapeIntvToDceLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_5.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_5.setDescription(' This object identifies the percentage of traffic in level five within a specific 15-minutes interval in the direction of DCE.')
pvcShapeIntvToDceLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_6.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_6.setDescription(' This object identifies the percentage of traffic in level six within a specific 15-minutes interval in the direction of DCE.')
pvcShapeIntvToDceLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDceLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_7.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDceLevel_7.setDescription(' This object identifies the percentage of traffic in level seven within a specific 15-minutes interval in the direction of DCE.')
pvcShapeIntvToDte_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 4, 5), ).setLabel("pvcShapeIntvToDte-Table")
if mibBuilder.loadTexts: pvcShapeIntvToDte_Table.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDte_Table.setDescription(' PVC shape to DTE interval table, which displays the pvc traffic information to the direction of DTE within 24 hours. ')
pvcShapeIntvToDte_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1), ).setLabel("pvcShapeIntvToDte-Entry").setIndexNames((0, "LINK-PROBE-MIB", "pvcShapeIntvToDte-pvcIx"), (0, "LINK-PROBE-MIB", "pvcShapeIntvToDte-intvIx"))
if mibBuilder.loadTexts: pvcShapeIntvToDte_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDte_Entry.setDescription(' Identifies an entry (row) in pvc traffic shape to DTE interval table')
pvcShapeIntvToDte_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("pvcShapeIntvToDte-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDte_pvcIx.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDte_pvcIx.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
pvcShapeIntvToDte_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("pvcShapeIntvToDte-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDte_intvIx.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDte_intvIx.setDescription(' The index value which uniquely identifies the interval number to which this entry is applicable. ')
pvcShapeIntvToDteLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_1.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_1.setDescription(' This object identifies the percentage of traffic in level one within a specific 15-minutes interval in the direction of DTE.')
pvcShapeIntvToDteLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_2.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_2.setDescription(' This object identifies the percentage of traffic in level two within a specific 15-minutes interval in the direction of DTE.')
pvcShapeIntvToDteLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_3.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_3.setDescription(' This object identifies the percentage of traffic in level three within a specific 15-minutes interval in the direction of DTE.')
pvcShapeIntvToDteLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_4.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_4.setDescription(' This object identifies the percentage of traffic in level four within a specific 15-minutes interval in the direction of DTE.')
pvcShapeIntvToDteLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_5.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_5.setDescription(' This object identifies the percentage of traffic in level five within a specific 15-minutes interval in the direction of DTE.')
pvcShapeIntvToDteLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_6.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_6.setDescription(' This object identifies the percentage of traffic in level six within a specific 15-minutes interval in the direction of DTE.')
pvcShapeIntvToDteLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("pvcShapeIntvToDteLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_7.setStatus('mandatory')
if mibBuilder.loadTexts: pvcShapeIntvToDteLevel_7.setDescription(' This object identifies the percentage of traffic in level seven within a specific 15-minutes interval in the direction of DTE.')
pvcNotAvailDCE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_unavail_toDce"), ("LINK-PROBE-MIB", "pvcNotAvailThreshDCE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcNotAvailDCE.setDescription(" This trap is generated when a PVC's unavailability is exceed the preset threshold due to the network fault.")
pvcNotAvailDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_unavail_toDte"), ("LINK-PROBE-MIB", "pvcNotAvailThreshDTE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcNotAvailDTE.setDescription(" This trap is generated when a PVC's unavailability is exceed the preset threshold due to the local DTE fault.")
pvcRTD = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcAveRTDThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcRTD.setDescription(" This trap is generated when a PVC's average round trap delay (RTD) is exceed the preset threshold.")
frChanUtilizeToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "frChanUtilizThreshToDTE"), ("LINK-PROBE-MIB", "chan_user_load_rx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: frChanUtilizeToDTE.setDescription(' This trap is generated when channel utilization to DTE direction is exceed the preset threshold.')
frChanUtilizeToDCE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "frChanUtilizThreshToDCE"), ("LINK-PROBE-MIB", "chan_user_load_tx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: frChanUtilizeToDCE.setDescription(' This trap is generated when channel utilization to DCE direction is exceed the preset threshold.')
pvcBecn = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvc_number_index_curr"), ("LINK-PROBE-MIB", "becn_frames_pvc_curr"), ("LINK-PROBE-MIB", "pvcBecnThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcBecn.setDescription(" This trap is generated when a PVC's BECNs is exceed the preset threshold within current interval.")
pvcFecn = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,7)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvc_number_index_curr"), ("LINK-PROBE-MIB", "fecn_frames_pvc_curr"), ("LINK-PROBE-MIB", "pvcFecnThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcFecn.setDescription(" This trap is generated when a PVC's FECNs is exceed the preset threshold within current interval.")
pvcUtilToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,8)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_user_load_rx_curr"), ("LINK-PROBE-MIB", "pvcUtilToDTEThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcUtilToDTE.setDescription(" This trap is generated when a PVC's utilization is exceeding the preset threshold within current interval.")
pvcUtilToDCE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,9)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_user_load_tx_curr"), ("LINK-PROBE-MIB", "pvcUtilToDCEThresh"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcUtilToDCE.setDescription(" This trap is generated when a PVC's utilization is exceeding the preset threshold within current interval.")
pvcCIRExceedToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,10)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_CIR_toNet_exceed_curr"), ("LINK-PROBE-MIB", "pvcCirToDTE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcCIRExceedToDTE.setDescription(' This trap is generated when the octets transmitted to the network direction is exceeding the CIR within current interval.')
pvcEIRExceedToDTE = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,11)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_EIR_toNet_exceed_curr"), ("LINK-PROBE-MIB", "pvcEirToDTE"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcEIRExceedToDTE.setDescription(' This trap is generated when the octets transmitted to the network direction is exceeding the EIR within current interval.')
pvcLossFrameTx = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,12)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_loss_frame_tx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcLossFrameTx.setDescription(' This trap is generated when frames were lost in the transmission direction within current interval.')
pvcLossFrameRx = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,13)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvc_loss_frame_rx_curr"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcLossFrameRx.setDescription(' This trap is generated when frames were lost in the receiving direction within current interval.')
frChanUtilToDTE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,14)).setLabel("frChanUtilToDTE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: frChanUtilToDTE_exception.setDescription(' This trap will be sent at any time in two cases: 1. The channel utilization to DTE (measured in TC) is exceeding the threshold if such trap never be sent in this interval or the frChanUtilToDTE-endException trap was just sent; 2. The variation of the channel utilization to DTE is exceeding the trapRange if such trap has just be sent. ')
frChanUtilToDCE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,15)).setLabel("frChanUtilToDCE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDCEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: frChanUtilToDCE_exception.setDescription(' This trap will be sent at any time in two cases: 1. The channel utilization to DCE (measured in TC) is exceeding the threshold if such trap never be sent in this interval or the frChanUtilToDTE-endException trap was just sent; 2. The variation of the channel utilization to DCE is exceeding the trapRange if such trap has just be sent. ')
frChanUtilToDTE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,16)).setLabel("frChanUtilToDTE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: frChanUtilToDTE_endException.setDescription(' This trap will be sent if the channel utilization to DTE (measured in TC) is changed back below the threshold.')
frChanUtilToDCE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,17)).setLabel("frChanUtilToDCE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "chanLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: frChanUtilToDCE_endException.setDescription(' This trap will be sent if the channel utilization to DCE (measured in TC) is changed back below the threshold.')
pvcRTD_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,18)).setLabel("pvcRTD-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcRTDThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcRTD_exception.setDescription(' This trap will be sent at any time in two cases: 1. The PVC RTD real time value (measured at every Poll interval) is exceeding the threshold if such trap never be sent in this interval or the pvcRTD-endException trap was just sent; 2. The variation of the pvc-RTD-realTime is exceeding the trapRange if such trap has just be sent. ')
pvcRTD_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,19)).setLabel("pvcRTD-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcRTDThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcRTD_endException.setDescription(' This trap will be sent if the PVC DTD real time (measured at every Poll interval) is changed back below the threshold.')
pvcLoadToDTE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,20)).setLabel("pvcLoadToDTE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcLoadToDTE_exception.setDescription(' This trap will be sent at any time at these two cases: 1. The PVC load to DTE real time value (measured in TC ) is exceeding the threshold if such trap has never be sent in this interval or the pvcLoadToDTE-endException trap was just sent; 2. The variation of the pvc-load-toDTE-realTime is exceeding the trapRange if such trap has just be sent. ')
pvcLoadToDCE_exception = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,21)).setLabel("pvcLoadToDCE-exception").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDCEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcLoadToDCE_exception.setDescription(' This trap will be sent at any time at these two cases: 1. The PVC load to DCE real time value (measured in TC, ) is exceeding the threshold if such trap has never be sent in this interval or the pvcLoadToDCE-endException trap was just sent; 2. The variation of the pvc-load-toDCE-realTime is exceeding the trapRange if such trap has just be sent. ')
pvcLoadToDTE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,22)).setLabel("pvcLoadToDTE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDTEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcLoadToDTE_endException.setDescription(' This trap will be sent if the PVC load to DTE real time (measured in TC) is changed back below the threshold.')
pvcLoadToDCE_endException = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,23)).setLabel("pvcLoadToDCE-endException").setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "pvcLoadToDCEThresh_realTime"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcLoadToDCE_endException.setDescription(' This trap will be sent if the PVC load to DCE real time (measured in TC) is changed back below the threshold.')
pvcStatusChangeAvail = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,24)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcStatusChangeAvail.setDescription(' This trap is generated when a PVC status changes from unavailable to available.')
pvcStatusChangeUnavail = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,25)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "pvcPerfCurr_num_index"), ("LINK-PROBE-MIB", "current_intv_start_time"))
if mibBuilder.loadTexts: pvcStatusChangeUnavail.setDescription(' This trap is generated when a PVC status changes from available to unavailable, or from valid to invalid (PVC becomes deleted).')
dbuPvcStatusChangeBackedUp = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,26)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuPVCTableIndex"), ("LINK-PROBE-MIB", "sys_current_time"))
if mibBuilder.loadTexts: dbuPvcStatusChangeBackedUp.setDescription(' This trap is generated when a DBU PVC status changes to backed-up.')
dbuPvcStatusChangeNotBackedUp = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,27)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuPVCTableIndex"), ("LINK-PROBE-MIB", "sys_current_time"))
if mibBuilder.loadTexts: dbuPvcStatusChangeNotBackedUp.setDescription(' This trap is generated when a DBU PVC status changes to not backed-up.')
dbuBackupCallActivation = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,28)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuDialedIsdnAddress"), ("LINK-PROBE-MIB", "sys_current_time"))
if mibBuilder.loadTexts: dbuBackupCallActivation.setDescription(' This trap is generated when a back-up call is activated.')
dbuBackupCallDeactivation = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,29)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuDialedIsdnAddress"), ("LINK-PROBE-MIB", "sys_current_time"))
if mibBuilder.loadTexts: dbuBackupCallDeactivation.setDescription(' This trap is generated when a back-up call is deactivated.')
dbuBackupCallFailed = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,30)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "dbuDialedIsdnAddress"), ("LINK-PROBE-MIB", "sys_current_time"))
if mibBuilder.loadTexts: dbuBackupCallFailed.setDescription(' This trap is generated when a back-up call failed to activate.')
dcdAlarmDetection = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,31)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "sys_current_time"))
if mibBuilder.loadTexts: dcdAlarmDetection.setDescription(' This trap is generated when a DCD alarm is detected.')
cp3000Event = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,32)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "sys_current_time"), ("LINK-PROBE-MIB", "eventSubject"), ("LINK-PROBE-MIB", "pvcIdentifier"), ("LINK-PROBE-MIB", "cp3000LogCode"), ("LINK-PROBE-MIB", "cp3000LogSpeed"), ("LINK-PROBE-MIB", "cp3000LogDate"), ("LINK-PROBE-MIB", "cp3000LogInfo"))
if mibBuilder.loadTexts: cp3000Event.setDescription(' This trap is the CP-3000 compliant Log Event trap, generated when a Device or PVC specific status change occurs.')
bypassEnabled = NotificationType((1, 3, 6, 1, 4, 1, 568, 8) + (0,33)).setObjects(("SNMPv2-MIB", "sysName"), ("LINK-PROBE-MIB", "bypassStatus"), ("LINK-PROBE-MIB", "sys_current_time"))
if mibBuilder.loadTexts: bypassEnabled.setDescription(' This trap is generated when frame relay automatically enables frame relay data BYPASS.')
histIntvStartTimeIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 1), ).setLabel("histIntvStartTimeIntv-Table")
if mibBuilder.loadTexts: histIntvStartTimeIntv_Table.setStatus('mandatory')
if mibBuilder.loadTexts: histIntvStartTimeIntv_Table.setDescription(' Probe historical interval start time table, which displays the interval starting time for each interval covering an historical 3 hours.')
histIntvStartTimeIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 1, 1), ).setLabel("histIntvStartTimeIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histIntvStartTimeIntv-index"))
if mibBuilder.loadTexts: histIntvStartTimeIntv_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: histIntvStartTimeIntv_Entry.setDescription(' Identifies an entry (row) in probe interval start time interval table.')
histIntvStartTimeIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histIntvStartTimeIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histIntvStartTimeIntv_index.setStatus('mandatory')
if mibBuilder.loadTexts: histIntvStartTimeIntv_index.setDescription(' Identifies an entry (row) in historical PVC performance table, total 12 time intervals, where 1 is the most recently completed 15 minutes interval and 12 is the least recently completed 15 minutes interval (assuming that all 12 intervals are valid). ')
hist_intv_start_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("hist-intv-start-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_intv_start_time.setStatus('mandatory')
if mibBuilder.loadTexts: hist_intv_start_time.setDescription(' hist-intv-start-time displays the current interval starting time with 4 digits year, 2 digits month, 2 digits date and hours, minutes and seconds, which are each 2 digits.')
histChanPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 2), ).setLabel("histChanPerfIntv-Table")
if mibBuilder.loadTexts: histChanPerfIntv_Table.setStatus('mandatory')
if mibBuilder.loadTexts: histChanPerfIntv_Table.setDescription(' Probe channel performance table, which displays the performance statistical data based on the probe channel covering an historical 3 hours.')
histChanPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1), ).setLabel("histChanPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histChanPerfIntv-index"))
if mibBuilder.loadTexts: histChanPerfIntv_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: histChanPerfIntv_Entry.setDescription(' Identifies an entry (row) in probe historical channel performance table.')
histChanPerfIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histChanPerfIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histChanPerfIntv_index.setStatus('mandatory')
if mibBuilder.loadTexts: histChanPerfIntv_index.setDescription(' Identifies an entry (row) in historical PVC performance table, total 12 time intervals, where 1 is the most recently completed 15 minutes interval and 12 is the least recently completed 15 minutes interval (assuming that all 12 intervals are valid). ')
hist_chan_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_unavail_toDte_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_chan_unavail_toDte_intv.setDescription(' This object identifies the channel unavailability due to remote DTE fault within a 15 minute interval. This statistical data is calculated by the channel unavailable time over the full time interval.')
hist_chan_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_unavail_toDce_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_chan_unavail_toDce_intv.setDescription(' This object identifies the channel unavailability due to local DTE fault within a 15 minutes interval. This statistical data is calculated by the channel unavailable time over the full time interval.')
hist_chan_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_chan_user_load_tx_intv.setDescription(' channel average user tx load within a 15 minute interval, this statistical data is calculated by user data octets sent by the channel within the 15 minutes over the total channel available load ( which depends on physical interface speed). ')
hist_chan_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-chan-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_chan_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_chan_user_load_rx_intv.setDescription(' channel average user rx load within a 15 minute interval, this statistical data is calculated by user data octets received by the channel within the 15 minutes over the total channel available load( which depends on physical interface speed). ')
histPvcPerfIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 3), ).setLabel("histPvcPerfIntv-Table")
if mibBuilder.loadTexts: histPvcPerfIntv_Table.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcPerfIntv_Table.setDescription(' PVC performance interval table, which displays the performance statistical data based on each PVC in an historical 3 hours.')
histPvcPerfIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1), ).setLabel("histPvcPerfIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histPvcPerfIntv-num-index"), (0, "LINK-PROBE-MIB", "histPvcPerf-intv-index"))
if mibBuilder.loadTexts: histPvcPerfIntv_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcPerfIntv_Entry.setDescription(' Identifies an entry (row) in pvc statistic table')
histPvcPerfIntv_num_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("histPvcPerfIntv-num-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcPerfIntv_num_index.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcPerfIntv_num_index.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
histPvcPerf_intv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histPvcPerf-intv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcPerf_intv_index.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcPerf_intv_index.setDescription(' Identifies an entry (row) in historical PVC performance table, total 12 time intervals, where 1 is the most recently completed 15 minutes interval and 12 is the least recently completed 15 minutes interval (assuming that all 12 intervals are valid). ')
hist_pvc_tx_time_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 3), Integer32()).setLabel("hist-pvc-tx-time-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_tx_time_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_tx_time_intv.setDescription(' Probe token average round trip time within a 15 minutes interval for a specific PVC. A -1 value indicates data is Not-Avail. ')
hist_pvc_unavail_toDte_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-unavail-toDte-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_unavail_toDte_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_unavail_toDte_intv.setDescription(' This object identifies the PVC average unavailability within a 15 minutes interval. This statistical data is calculated by a PVC unavailable time due to the network or remote DTE fault over the full time interval.')
hist_pvc_unavail_toDce_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-unavail-toDce-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_unavail_toDce_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_unavail_toDce_intv.setDescription(' This object identifies the PVC average unavailability within a 15 minutes interval. This statistical data is calculated by a PVC unavailable time due to the local DTE fault over the full time interval.')
hist_pvc_user_load_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-user-load-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_user_load_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_user_load_tx_intv.setDescription(' This object identifies the PVC average user tx load within a 15 minutes interval. This statistical data is calculated by user data octets sent by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
hist_pvc_user_load_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setLabel("hist-pvc-user-load-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_user_load_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_user_load_rx_intv.setDescription(' This object identifies the PVC average user rx load within a 15 minutes interval. This statistical data is calculated by user data octets received by a specific PVC within the 15 minutes over the PVC total available load. Note: If the CIR is correctly defined for this PVC, PVC available load will depend on CIR, otherwise, it will get it from interface speed. ')
hist_pvc_CIR_toNet_exceed_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 8), Integer32()).setLabel("hist-pvc-CIR-toNet-exceed-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_CIR_toNet_exceed_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_CIR_toNet_exceed_intv.setDescription(' This object identifies the number of exceeding CIR times that the network detected within an interval. The measurement is done for every Tc, and the direction is to the network.')
hist_pvc_loss_frame_tx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(254, 255))).clone(namedValues=NamedValues(("no-resp", 254), ("not-avail", 255)))).setLabel("hist-pvc-loss-frame-tx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_loss_frame_tx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_loss_frame_tx_intv.setDescription(' This object identifies the percentage of tx loss of frames within the total tx frames for this PVC in this interval.')
hist_pvc_loss_frame_rx_intv = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(254, 255))).clone(namedValues=NamedValues(("no-resp", 254), ("not-avail", 255)))).setLabel("hist-pvc-loss-frame-rx-intv").setMaxAccess("readonly")
if mibBuilder.loadTexts: hist_pvc_loss_frame_rx_intv.setStatus('mandatory')
if mibBuilder.loadTexts: hist_pvc_loss_frame_rx_intv.setDescription(' This object identifies the percentage of rx loss of frames within the total rx frames for this PVC in this interval.')
histPvcShapeIntvToDce_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 4), ).setLabel("histPvcShapeIntvToDce-Table")
if mibBuilder.loadTexts: histPvcShapeIntvToDce_Table.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDce_Table.setDescription(' PVC shape to DCE interval table, which displays the pvc traffic shape information to the direction of DCE over 3 previous hours. ')
histPvcShapeIntvToDce_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1), ).setLabel("histPvcShapeIntvToDce-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histPvcShapeIntvToDce-pvcIx"), (0, "LINK-PROBE-MIB", "histPvcShapeIntvToDce-intvIx"))
if mibBuilder.loadTexts: histPvcShapeIntvToDce_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDce_Entry.setDescription(' Identifies an entry (row) in pvc traffic shape to DCE interval table')
histPvcShapeIntvToDce_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("histPvcShapeIntvToDce-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDce_pvcIx.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDce_pvcIx.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
histPvcShapeIntvToDce_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histPvcShapeIntvToDce-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDce_intvIx.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDce_intvIx.setDescription(' The index value which uniquely identifies the interval number to which this entry is applicable. ')
histPvcShapeIntvToDceLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_1.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_1.setDescription(' This object identifies the percentage of traffic in level one within a specific 15-minutes interval in the direction of DCE.')
histPvcShapeIntvToDceLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_2.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_2.setDescription(' This object identifies the percentage of traffic in level two within a specific 15-minutes interval in the direction of DCE.')
histPvcShapeIntvToDceLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_3.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_3.setDescription(' This object identifies the percentage of traffic in level three within a specific 15-minutes interval in the direction of DCE.')
histPvcShapeIntvToDceLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_4.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_4.setDescription(' This object identifies the percentage of traffic in level four within a specific 15-minutes interval in the direction of DCE.')
histPvcShapeIntvToDceLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_5.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_5.setDescription(' This object identifies the percentage of traffic in level five within a specific 15-minutes interval in the direction of DCE.')
histPvcShapeIntvToDceLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_6.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_6.setDescription(' This object identifies the percentage of traffic in level six within a specific 15-minutes interval in the direction of DCE.')
histPvcShapeIntvToDceLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDceLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_7.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDceLevel_7.setDescription(' This object identifies the percentage of traffic in level seven within a specific 15-minutes interval in the direction of DCE.')
histPvcShapeIntvToDte_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 5, 5), ).setLabel("histPvcShapeIntvToDte-Table")
if mibBuilder.loadTexts: histPvcShapeIntvToDte_Table.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDte_Table.setDescription(' PVC shape to DTE interval table, which displays the pvc traffic information to the direction of DTE over 3 previous hours. ')
histPvcShapeIntvToDte_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1), ).setLabel("histPvcShapeIntvToDte-Entry").setIndexNames((0, "LINK-PROBE-MIB", "histPvcShapeIntvToDte-pvcIx"), (0, "LINK-PROBE-MIB", "histPvcShapeIntvToDte-intvIx"))
if mibBuilder.loadTexts: histPvcShapeIntvToDte_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDte_Entry.setDescription(' Identifies an entry (row) in pvc traffic shape to DTE interval table')
histPvcShapeIntvToDte_pvcIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setLabel("histPvcShapeIntvToDte-pvcIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDte_pvcIx.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDte_pvcIx.setDescription(' The index value which uniquely identifies the PVC number to which this entry is applicable. ')
histPvcShapeIntvToDte_intvIx = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("histPvcShapeIntvToDte-intvIx").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDte_intvIx.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDte_intvIx.setDescription(' The index value which uniquely identifies the interval number to which this entry is applicable. ')
histPvcShapeIntvToDteLevel_1 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_1.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_1.setDescription(' This object identifies the percentage of traffic in level one within a specific 15-minutes interval in the direction of DTE.')
histPvcShapeIntvToDteLevel_2 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-2").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_2.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_2.setDescription(' This object identifies the percentage of traffic in level two within a specific 15-minutes interval in the direction of DTE.')
histPvcShapeIntvToDteLevel_3 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_3.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_3.setDescription(' This object identifies the percentage of traffic in level three within a specific 15-minutes interval in the direction of DTE.')
histPvcShapeIntvToDteLevel_4 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-4").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_4.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_4.setDescription(' This object identifies the percentage of traffic in level four within a specific 15-minutes interval in the direction of DTE.')
histPvcShapeIntvToDteLevel_5 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-5").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_5.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_5.setDescription(' This object identifies the percentage of traffic in level five within a specific 15-minutes interval in the direction of DTE.')
histPvcShapeIntvToDteLevel_6 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-6").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_6.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_6.setDescription(' This object identifies the percentage of traffic in level six within a specific 15-minutes interval in the direction of DTE.')
histPvcShapeIntvToDteLevel_7 = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("histPvcShapeIntvToDteLevel-7").setMaxAccess("readonly")
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_7.setStatus('mandatory')
if mibBuilder.loadTexts: histPvcShapeIntvToDteLevel_7.setDescription(' This object identifies the percentage of traffic in level seven within a specific 15-minutes interval in the direction of DTE.')
intvStartTimeIntv_Table = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 6, 1), ).setLabel("intvStartTimeIntv-Table")
if mibBuilder.loadTexts: intvStartTimeIntv_Table.setStatus('mandatory')
if mibBuilder.loadTexts: intvStartTimeIntv_Table.setDescription(' Probe interval start time table, which displays the interval starting time for each interval covering the last 24 hours.')
intvStartTimeIntv_Entry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 6, 1, 1), ).setLabel("intvStartTimeIntv-Entry").setIndexNames((0, "LINK-PROBE-MIB", "intvStartTimeIntv-index"))
if mibBuilder.loadTexts: intvStartTimeIntv_Entry.setStatus('mandatory')
if mibBuilder.loadTexts: intvStartTimeIntv_Entry.setDescription(' Identifies an entry (row) in probe interval start time interval table.')
intvStartTimeIntv_index = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setLabel("intvStartTimeIntv-index").setMaxAccess("readonly")
if mibBuilder.loadTexts: intvStartTimeIntv_index.setStatus('mandatory')
if mibBuilder.loadTexts: intvStartTimeIntv_index.setDescription(' Identifies an entry (row) in interval start time table, total 96 time intervals, where 1 is the most recently completed 15 minutes interval and 96 is the least recently completed 15 minutes interval. ')
intv_start_time = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("intv-start-time").setMaxAccess("readonly")
if mibBuilder.loadTexts: intv_start_time.setStatus('mandatory')
if mibBuilder.loadTexts: intv_start_time.setDescription(' intv-start-time displays the current interval starting time with 4 digits year, 2 digits month, 2 digits date and hours, minutes and seconds, which are each 2 digits.')
dbuPVCTable = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 7, 1), )
if mibBuilder.loadTexts: dbuPVCTable.setStatus('mandatory')
if mibBuilder.loadTexts: dbuPVCTable.setDescription(' DBU PVC table. It contains PVC/DLCI Dial-Backup information ')
dbuPVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1), ).setIndexNames((0, "LINK-PROBE-MIB", "dbuPVCTableIndex"))
if mibBuilder.loadTexts: dbuPVCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dbuPVCEntry.setDescription(' Identifies an entry (row) in dbuPVCTable.')
dbuPVCTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuPVCTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dbuPVCTableIndex.setDescription('Identifies an entry (row) in PVC table as the local PVC (DLCI) Number. ')
dbuRemotePVCDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuRemotePVCDlci.setStatus('mandatory')
if mibBuilder.loadTexts: dbuRemotePVCDlci.setDescription("Defines the remote PVC's DLCI number the data is to be routed to. ")
dbuIsdnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuIsdnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dbuIsdnAddress.setDescription("Defines the ISDN Dialing Address to reach the PVC's backup site")
dbuPvcCir = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuPvcCir.setStatus('mandatory')
if mibBuilder.loadTexts: dbuPvcCir.setDescription('This parameter defines the maximum transfer information rate (Bits Per Second) toward the backup PVC. ')
dbuMasterSlave = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuMasterSlave.setStatus('mandatory')
if mibBuilder.loadTexts: dbuMasterSlave.setDescription(' Defines whether the DBU probe is a Master or Slave. ')
dbuBackupType = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("linkProbe", 1), ("dte2Dbu1", 2), ("dte2Dbu2", 3), ("channelDbu", 4), ("pvcDbu", 5), ("channelDbu-noProbe", 6), ("pvcDbu-noProbe", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuBackupType.setStatus('mandatory')
if mibBuilder.loadTexts: dbuBackupType.setDescription(' Defines the type of backup. ')
dbuPVCAdd = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dbuPVCAdd.setStatus('mandatory')
if mibBuilder.loadTexts: dbuPVCAdd.setDescription(' This object allows the user to add a PVC to the existing PVC table, the added PVC must not exist before it is added.')
dbuPVCDelete = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dbuPVCDelete.setStatus('mandatory')
if mibBuilder.loadTexts: dbuPVCDelete.setDescription(' This object allows the user to delete a PVC from the existing PVC table, the PVC must exist before it is deleted.')
dbuRecoverCount = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbuRecoverCount.setStatus('mandatory')
if mibBuilder.loadTexts: dbuRecoverCount.setDescription(' Number of LMI Active Occurrences to restore PVC change request. The value is between 1 to 20. ')
dbuDialedIsdnAddress = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbuDialedIsdnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dbuDialedIsdnAddress.setDescription('Defines the Dialed ISDN Address for the most recent DBU call')
globalStatus = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("connected", 2), ("test", 3), ("hwFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: globalStatus.setDescription(' Defines device status as: ready = Device is operating normally. connected = At least one PVC is in backup mode. test = Device is in test mode (Not implemented yet). hwFailure = ISDN line is not operable due to a hardware failure.')
pvcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 568, 8, 8, 2), )
if mibBuilder.loadTexts: pvcStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStatusTable.setDescription(' Per PVC status table. The PVCs(DLCIs) monitored are PVCs(DLCIs) defined by LMI messages from the network. ')
pvcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 568, 8, 8, 2, 1), ).setIndexNames((0, "LINK-PROBE-MIB", "pvcStatusIndex"))
if mibBuilder.loadTexts: pvcStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStatusEntry.setDescription(' Identifies an entry (row) in pvcStatusTable.')
pvcStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStatusIndex.setDescription('Identifies an entry (row) in pvcStatusTable as the local PVC (DLCI) Number. ')
pvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 568, 8, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pvcInactive", 1), ("pvcActive", 2), ("pvcConnected", 3), ("pvcTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pvcStatus.setDescription(' Defines the PVC Status as: pvcInactive = Configured at the network, but not active. pvcActive = Configured at the network, and active. pvcConnected = Pvc connected in backup mode. pvcTest = Pvc in test mode (Not yet implemented). ')
eventSubject = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("device", 1), ("pvc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSubject.setStatus('mandatory')
if mibBuilder.loadTexts: eventSubject.setDescription(' Defines CP-3000 Log Events as: device = Device specific events. pvc = PVC specific events.')
pvcIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: pvcIdentifier.setDescription('Identifies the PVC Number for PVC specific events only. This objects has no meaning for Device specific events. ')
cp3000LogCode = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogCode.setStatus('mandatory')
if mibBuilder.loadTexts: cp3000LogCode.setDescription('CP-3000 ASCII Log Code for Device or PVC events')
cp3000LogSpeed = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cp3000LogSpeed.setDescription('CP-3000 ASCII Log Code for ISDN Line Speed')
cp3000LogDate = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogDate.setStatus('mandatory')
if mibBuilder.loadTexts: cp3000LogDate.setDescription('Date and Time in ASCII format: YYMMDDhhmmss ')
cp3000LogInfo = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cp3000LogInfo.setStatus('mandatory')
if mibBuilder.loadTexts: cp3000LogInfo.setDescription('Need to ask what goes in here ')
trapAckEnable = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckEnable.setStatus('mandatory')
if mibBuilder.loadTexts: trapAckEnable.setDescription("Acknowledgement setting for CP-3000 Log Event Traps: enabled = NMS has to acknowledge traps received. disabled = NMS doesn't need to acknowledge traps received.")
trapAckTimeout = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: trapAckTimeout.setDescription('Timeout value to retransmit a trap when trapAckEnable object == enabled and no ACK received from NMS.')
trapAckFromMngr = MibScalar((1, 3, 6, 1, 4, 1, 568, 8, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapNotAcked", 1), ("trapAcked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAckFromMngr.setStatus('mandatory')
if mibBuilder.loadTexts: trapAckFromMngr.setDescription('Trap Acknowledgement Indication: When trapAckEnable object == enabled NMS has to ACK every trap received.')
mibBuilder.exportSymbols("LINK-PROBE-MIB", ip_resp_rx_pvc_intv=ip_resp_rx_pvc_intv, pvcLoadToDCEThresh_realTime=pvcLoadToDCEThresh_realTime, resp_tx_ch_intv=resp_tx_ch_intv, chanPerfIntv_index=chanPerfIntv_index, sourceIpAddress=sourceIpAddress, ip_poll_rx_pvc_curr=ip_poll_rx_pvc_curr, pvcStCurrent_Table=pvcStCurrent_Table, fecn_frames_ch_curr=fecn_frames_ch_curr, inbandIpAddress=inbandIpAddress, pvcBecn=pvcBecn, pvcLossFrameRx=pvcLossFrameRx, pvc_max_user_load_rx_intv=pvc_max_user_load_rx_intv, hist_pvc_unavail_toDce_intv=hist_pvc_unavail_toDce_intv, pvc_loss_frame_rx_intv=pvc_loss_frame_rx_intv, pvcStatusChangeUnavail=pvcStatusChangeUnavail, histPvcShapeIntvToDteLevel_4=histPvcShapeIntvToDteLevel_4, dbuBackupCallFailed=dbuBackupCallFailed, histPvcShapeIntvToDceLevel_2=histPvcShapeIntvToDceLevel_2, ipRtrRxLatRxPvcIntv=ipRtrRxLatRxPvcIntv, pvc_total_load_tx_intv=pvc_total_load_tx_intv, pvcEirToDCE=pvcEirToDCE, dte_frames_with_DE_pvc_curr=dte_frames_with_DE_pvc_curr, cp3000LogCode=cp3000LogCode, pvcShapeCurrToDceLevel_7=pvcShapeCurrToDceLevel_7, pvc_unavail_toDce=pvc_unavail_toDce, frChanUtilizeToDTE=frChanUtilizeToDTE, pvcEIRExceedToDTE=pvcEIRExceedToDTE, chan_min_total_load_tx_time_intv=chan_min_total_load_tx_time_intv, histIntvStartTimeIntv_Entry=histIntvStartTimeIntv_Entry, hist_chan_user_load_rx_intv=hist_chan_user_load_rx_intv, ipRtrRxLatTxPvcIntv=ipRtrRxLatTxPvcIntv, pvcShapeIntvToDte_Table=pvcShapeIntvToDte_Table, pvcShapeCurrToDceLevel_4=pvcShapeCurrToDceLevel_4, chan_min_user_load_tx_time_intv=chan_min_user_load_tx_time_intv, pvcShapeCurrToDceLevel_5=pvcShapeCurrToDceLevel_5, dcdAlarmDetection=dcdAlarmDetection, lmi_enq_rx_ch_intv=lmi_enq_rx_ch_intv, chStIntv_index=chStIntv_index, resp_rx_pvc_intv=resp_rx_pvc_intv, pvc_max_total_load_rx_intv=pvc_max_total_load_rx_intv, histChanPerfIntv_Entry=histChanPerfIntv_Entry, dbuBackupType=dbuBackupType, lmi_enq_tx_ch_intv=lmi_enq_tx_ch_intv, histIntvStartTimeIntv_index=histIntvStartTimeIntv_index, pvcPerfCurr_Entry=pvcPerfCurr_Entry, chan_max_total_load_tx_time_intv=chan_max_total_load_tx_time_intv, chanLoadToDCEThresh_realTime=chanLoadToDCEThresh_realTime, deviceStatusGroup=deviceStatusGroup, subnetmaskIpAddress=subnetmaskIpAddress, fecn_frames_pvc_intv=fecn_frames_pvc_intv, pvcCirToDCE=pvcCirToDCE, outbandIpAddress=outbandIpAddress, pvc_CIR_toNet_exceed_intv=pvc_CIR_toNet_exceed_intv, chan_max_user_load_tx_intv=chan_max_user_load_tx_intv, probeConfig=probeConfig, pvcShapeIntvToDte_intvIx=pvcShapeIntvToDte_intvIx, pvcShapeIntvToDce_Table=pvcShapeIntvToDce_Table, pvcLoadToDTEThresh_realTime=pvcLoadToDTEThresh_realTime, pvcBecnThresh=pvcBecnThresh, chan_max_user_load_rx_time_intv=chan_max_user_load_rx_time_intv, pvcLoadToDTEThresh_realTimeRange=pvcLoadToDTEThresh_realTimeRange, pvcCirToDTE=pvcCirToDTE, nvram_update=nvram_update, pvcStatusEntry=pvcStatusEntry, pvcCIRExceedToDTE=pvcCIRExceedToDTE, dbuRemotePVCDlci=dbuRemotePVCDlci, chan_min_user_load_rx_time_intv=chan_min_user_load_rx_time_intv, lmi_resp_rx_ch_curr=lmi_resp_rx_ch_curr, pvcPerfCurr_Table=pvcPerfCurr_Table, pvcShapeIntvToDteLevel_5=pvcShapeIntvToDteLevel_5, pvc_max_user_load_rx_time_intv=pvc_max_user_load_rx_time_intv, frChanUtilToDTE_endException=frChanUtilToDTE_endException, pvc_CIR_toNet_exceed_curr=pvc_CIR_toNet_exceed_curr, becn_frames_pvc_intv=becn_frames_pvc_intv, pvc_number_index_intv=pvc_number_index_intv, pvc_loop_intv=pvc_loop_intv, softwareVersion=softwareVersion, lmi_resp_tx_ch_curr=lmi_resp_tx_ch_curr, poll_Period=poll_Period, pvc_min_user_load_tx_intv=pvc_min_user_load_tx_intv, dte_frames_pvc_curr=dte_frames_pvc_curr, pvc_unavail_toDte_intv=pvc_unavail_toDte_intv, intvStartTimeIntv_index=intvStartTimeIntv_index, ip_resp_tx_pvc_intv=ip_resp_tx_pvc_intv, pvcShapeIntvToDte_Entry=pvcShapeIntvToDte_Entry, pvcStInterval_Entry=pvcStInterval_Entry, dte_octets_pvc_curr=dte_octets_pvc_curr, histPvcShapeIntvToDce_Entry=histPvcShapeIntvToDce_Entry, lmi_DLCI=lmi_DLCI, hist_chan_unavail_toDte_intv=hist_chan_unavail_toDte_intv, ip_poll_rx_pvc_intv=ip_poll_rx_pvc_intv, ip_resp_rx_pvc_curr=ip_resp_rx_pvc_curr, chan_min_user_load_tx_intv=chan_min_user_load_tx_intv, pvc_min_ip_tx_time_intv=pvc_min_ip_tx_time_intv, pvcShapeIntvToDce_pvcIx=pvcShapeIntvToDce_pvcIx, hist_pvc_tx_time_intv=hist_pvc_tx_time_intv, globalStatus=globalStatus, pvc_ip_tx_time_curr=pvc_ip_tx_time_curr, histPvcShapeIntvToDce_Table=histPvcShapeIntvToDce_Table, n393_User_Counter=n393_User_Counter, pvc_total_load_rx_intv=pvc_total_load_rx_intv, pvcPerfIntv_Entry=pvcPerfIntv_Entry, eventSubject=eventSubject, hist_pvc_loss_frame_tx_intv=hist_pvc_loss_frame_tx_intv, pvc_max_tx_time_intv=pvc_max_tx_time_intv, poll_rx_ch_curr=poll_rx_ch_curr, pvcIpRtrTxLatTxTimeIntv=pvcIpRtrTxLatTxTimeIntv, resp_rx_ch_intv=resp_rx_ch_intv, pvcShapeIntvToDceLevel_4=pvcShapeIntvToDceLevel_4, histPvcPerf_intv_index=histPvcPerf_intv_index, pvc_ip_tx_time_intv=pvc_ip_tx_time_intv, pvcShapeCurrToDteLevel_5=pvcShapeCurrToDteLevel_5, chan_max_total_load_rx_time_intv=chan_max_total_load_rx_time_intv, pvcShapeIntvToDteLevel_7=pvcShapeIntvToDteLevel_7, histPvcPerfIntv_num_index=histPvcPerfIntv_num_index, pvcShapeCurrToDteLevel_1=pvcShapeCurrToDteLevel_1, pvc_loop_curr=pvc_loop_curr, pvcShapeCurrToDte_Entry=pvcShapeCurrToDte_Entry, pvc_EIR_toNet_exceed_curr=pvc_EIR_toNet_exceed_curr, poll_tx_ch_intv=poll_tx_ch_intv, resp_tx_ch_curr=resp_tx_ch_curr, pvcShapeIntvToDteLevel_2=pvcShapeIntvToDteLevel_2, dbuPvcStatusChangeBackedUp=dbuPvcStatusChangeBackedUp, chan_config=chan_config, chStCurrent=chStCurrent, histPvcShapeIntvToDceLevel_1=histPvcShapeIntvToDceLevel_1, pvc_config=pvc_config, pvc_min_tx_time_intv=pvc_min_tx_time_intv, chanLoadThreshToDTE_realTimeRange=chanLoadThreshToDTE_realTimeRange, ipRtrRxLatTxPvcCurr=ipRtrRxLatTxPvcCurr, histPvcShapeIntvToDceLevel_5=histPvcShapeIntvToDceLevel_5, chanLoadToDTEThresh_realTime=chanLoadToDTEThresh_realTime, ip_resp_tx_pvc_curr=ip_resp_tx_pvc_curr, histPvcShapeIntvToDce_pvcIx=histPvcShapeIntvToDce_pvcIx, histIntvStartTimeIntv_Table=histIntvStartTimeIntv_Table, histPvcShapeIntvToDteLevel_1=histPvcShapeIntvToDteLevel_1, cp3000LogInfo=cp3000LogInfo, pvc_min_total_load_rx_time_intv=pvc_min_total_load_rx_time_intv, tftpState=tftpState, chan_total_load_tx_intv=chan_total_load_tx_intv, trapCtlSpecific=trapCtlSpecific, trap_config=trap_config, poll_rx_pvc_curr=poll_rx_pvc_curr, pvc_Count=pvc_Count, hist_pvc_CIR_toNet_exceed_intv=hist_pvc_CIR_toNet_exceed_intv, intvStartTimeIntv_Entry=intvStartTimeIntv_Entry, chan_user_load_tx_intv=chan_user_load_tx_intv, n391_Counter=n391_Counter, chan_unvail_toDte_curr=chan_unvail_toDte_curr, pvcShapeCurrToDteLevel_7=pvcShapeCurrToDteLevel_7, chan_max_user_load_tx_time_intv=chan_max_user_load_tx_time_intv, pvcStatus=pvcStatus, pvcShapeIntvToDce_Entry=pvcShapeIntvToDce_Entry, pvc_unavail_toDte=pvc_unavail_toDte, probe_Mode=probe_Mode, hist_pvc_user_load_tx_intv=hist_pvc_user_load_tx_intv, pvc_delete=pvc_delete, poll_tx_pvc_intv=poll_tx_pvc_intv, pvc_min_user_load_rx_time_intv=pvc_min_user_load_rx_time_intv, ip_Encapsu=ip_Encapsu, probeTokenSize=probeTokenSize, pvc_loss_frame_tx_curr=pvc_loss_frame_tx_curr, pvc_min_total_load_tx_intv=pvc_min_total_load_tx_intv, pvcShapeCurrToDceLevel_2=pvcShapeCurrToDceLevel_2, pvcPerfIntv_Table=pvcPerfIntv_Table, pvcShapeIntvToDteLevel_3=pvcShapeIntvToDteLevel_3, dte_octets_ch_curr=dte_octets_ch_curr, pvcStatusChangeAvail=pvcStatusChangeAvail, dte_frames_ch_curr=dte_frames_ch_curr, dce_frames_ch_intv=dce_frames_ch_intv, dbuPVCAdd=dbuPVCAdd, hist_pvc_user_load_rx_intv=hist_pvc_user_load_rx_intv, chan_min_total_load_tx_intv=chan_min_total_load_tx_intv, chan_total_load_tx_curr=chan_total_load_tx_curr, pvcNotAvailThreshDTE=pvcNotAvailThreshDTE, chan_unavail_toDce_intv=chan_unavail_toDce_intv, n392_Net_Counter=n392_Net_Counter, pvcUtilToDTEThresh=pvcUtilToDTEThresh, histPvcShapeIntvToDte_Entry=histPvcShapeIntvToDte_Entry, becn_frames_pvc_curr=becn_frames_pvc_curr, dte_frames_ch_intv=dte_frames_ch_intv, pvcFecn=pvcFecn, probeStat=probeStat, t391_Timer=t391_Timer, pvcRTDThresh_realTimeRange=pvcRTDThresh_realTimeRange, histChanPerfIntv_index=histChanPerfIntv_index, pvc_max_total_load_tx_intv=pvc_max_total_load_tx_intv, trapAckTimeout=trapAckTimeout, pvcRTD=pvcRTD, pvcFecnThresh=pvcFecnThresh, chan_max_user_load_rx_intv=chan_max_user_load_rx_intv, chStInterval_Table=chStInterval_Table, pvcShapeThresh=pvcShapeThresh, pvcUtilToDCE=pvcUtilToDCE, pvcRTD_endException=pvcRTD_endException, sourceFileMode=sourceFileMode, histPvcShapeIntvToDceLevel_4=histPvcShapeIntvToDceLevel_4, dbuPVCEntry=dbuPVCEntry, dbuPVCDelete=dbuPVCDelete, pvcRTDThresh_realTime=pvcRTDThresh_realTime, histPvcShapeIntvToDteLevel_6=histPvcShapeIntvToDteLevel_6, pvc_user_load_rx_curr=pvc_user_load_rx_curr, intvStartTimeIntv_Table=intvStartTimeIntv_Table, ipRtrRxLatRxPvcCurr=ipRtrRxLatRxPvcCurr, pvc_user_load_tx_curr=pvc_user_load_tx_curr, pvc_add=pvc_add, hist_pvc_loss_frame_rx_intv=hist_pvc_loss_frame_rx_intv, trapAckFromMngr=trapAckFromMngr, pvcShapeIntvToDceLevel_5=pvcShapeIntvToDceLevel_5, pvcRTD_exception=pvcRTD_exception, pvcPerfCurr_num_index=pvcPerfCurr_num_index, pvcShapeCurrToDce_Entry=pvcShapeCurrToDce_Entry, pvc_user_load_tx_intv=pvc_user_load_tx_intv, ipRtrTxLatTxPvcIntv=ipRtrTxLatTxPvcIntv, dbuBackupCallActivation=dbuBackupCallActivation, pvc_number_index_curr=pvc_number_index_curr, histPvcShapeIntvToDteLevel_2=histPvcShapeIntvToDteLevel_2, hist_chan_user_load_tx_intv=hist_chan_user_load_tx_intv, pvc_max_user_load_tx_time_intv=pvc_max_user_load_tx_time_intv, pvcShapeIntvToDteLevel_6=pvcShapeIntvToDteLevel_6, ip_rx_ch_curr=ip_rx_ch_curr, pvcStIntv_index=pvcStIntv_index, ipRtrTxLatRxPvcCurr=ipRtrTxLatRxPvcCurr, pvcShapeIntvToDceLevel_1=pvcShapeIntvToDceLevel_1, chanPerfIntv_Table=chanPerfIntv_Table, pvcShapeCurrToDceLevel_3=pvcShapeCurrToDceLevel_3, pvc_EIR_toNet_exceed_intv=pvc_EIR_toNet_exceed_intv, pvcNotAvailDCE=pvcNotAvailDCE, dbuPVCTableIndex=dbuPVCTableIndex, histPvcShapeIntvToDteLevel_5=histPvcShapeIntvToDteLevel_5, pvc_total_load_tx_curr=pvc_total_load_tx_curr, netQuest=netQuest, trapCtlGlobal=trapCtlGlobal, dce_frames_pvc_intv=dce_frames_pvc_intv, dbuPvcStatusChangeNotBackedUp=dbuPvcStatusChangeNotBackedUp, lmi_config=lmi_config, ipRtrTxLatRxPvcIntv=ipRtrTxLatRxPvcIntv, pvcStatusIndex=pvcStatusIndex, net_management_config=net_management_config, changeVersion=changeVersion, pvc_Operation=pvc_Operation, ip_poll_tx_pvc_curr=ip_poll_tx_pvc_curr, chan_user_load_tx_curr=chan_user_load_tx_curr, dte_frames_with_DE_pvc_intv=dte_frames_with_DE_pvc_intv, histPvcShapeIntvToDceLevel_3=histPvcShapeIntvToDceLevel_3, pvcLoadToDCE_endException=pvcLoadToDCE_endException, lmi_type=lmi_type, frChanUtilToDCE_exception=frChanUtilToDCE_exception, frChanUtilizeToDCE=frChanUtilizeToDCE, pvcShapeCurrToDce_index=pvcShapeCurrToDce_index, cp3000Event=cp3000Event, pvcShapeThreshLevel_1=pvcShapeThreshLevel_1, pvcLossFrameTx=pvcLossFrameTx, pvcShapeThreshLevel_5=pvcShapeThreshLevel_5)
mibBuilder.exportSymbols("LINK-PROBE-MIB", pvcIdentifier=pvcIdentifier, resp_tx_pvc_intv=resp_tx_pvc_intv, pvcShapeCurrToDte_Table=pvcShapeCurrToDte_Table, histPvcShapeIntvToDce_intvIx=histPvcShapeIntvToDce_intvIx, pvcShapeIntvToDteLevel_4=pvcShapeIntvToDteLevel_4, pvcShapeIntvToDteLevel_1=pvcShapeIntvToDteLevel_1, chan_unavail_toDte_intv=chan_unavail_toDte_intv, pvcShapeThreshLevel_3=pvcShapeThreshLevel_3, histChanPerfIntv_Table=histChanPerfIntv_Table, dce_frames_ch_curr=dce_frames_ch_curr, pvcShapeIntvToDceLevel_7=pvcShapeIntvToDceLevel_7, routerIpAddress=routerIpAddress, pvcShapeCurrToDce_Table=pvcShapeCurrToDce_Table, becn_frames_ch_curr=becn_frames_ch_curr, trapAckEnable=trapAckEnable, hist_intv_start_time=hist_intv_start_time, interface_Speed=interface_Speed, chStInterval_Entry=chStInterval_Entry, lmi_resp_tx_ch_intv=lmi_resp_tx_ch_intv, resp_rx_ch_curr=resp_rx_ch_curr, dbuBackupCallDeactivation=dbuBackupCallDeactivation, pvcLoadToDCE_exception=pvcLoadToDCE_exception, cp3000LogDate=cp3000LogDate, pvcPerfIntv_num_index=pvcPerfIntv_num_index, ip_rx_ch_intv=ip_rx_ch_intv, lmi_Operation=lmi_Operation, chan_user_load_rx_intv=chan_user_load_rx_intv, ip_tx_ch_intv=ip_tx_ch_intv, dce_frames_pvc_curr=dce_frames_pvc_curr, histPvcShapeIntvToDteLevel_3=histPvcShapeIntvToDteLevel_3, pvcAveRTDThresh=pvcAveRTDThresh, pvcShapeCurrToDteLevel_2=pvcShapeCurrToDteLevel_2, lmi_enq_rx_ch_curr=lmi_enq_rx_ch_curr, pvc_max_ip_tx_time_time_intv=pvc_max_ip_tx_time_time_intv, pvcShapeThreshLevel_2=pvcShapeThreshLevel_2, pvcNotAvailThreshDCE=pvcNotAvailThreshDCE, ip_poll_tx_pvc_intv=ip_poll_tx_pvc_intv, pvcShapeThreshLevel_7=pvcShapeThreshLevel_7, histPvcShapeIntvToDte_Table=histPvcShapeIntvToDte_Table, frChanUtilToDCE_endException=frChanUtilToDCE_endException, pvc_min_user_load_tx_time_intv=pvc_min_user_load_tx_time_intv, sourceFileName=sourceFileName, chan_unavail_toDce_curr=chan_unavail_toDce_curr, dbuMasterSlave=dbuMasterSlave, sys_current_time=sys_current_time, dce_octets_pvc_curr=dce_octets_pvc_curr, histPvcPerfIntv_Table=histPvcPerfIntv_Table, probeHistorical=probeHistorical, pvcStCurrent_Entry=pvcStCurrent_Entry, chan_min_total_load_rx_intv=chan_min_total_load_rx_intv, histPvcShapeIntvToDteLevel_7=histPvcShapeIntvToDteLevel_7, probePerform=probePerform, pvc_tx_time_intv=pvc_tx_time_intv, frChanUtilizThreshToDTE=frChanUtilizThreshToDTE, chan_total_load_rx_curr=chan_total_load_rx_curr, lmi_enq_tx_ch_curr=lmi_enq_tx_ch_curr, resp_tx_pvc_curr=resp_tx_pvc_curr, chan_min_total_load_rx_time_intv=chan_min_total_load_rx_time_intv, pvc_min_ip_tx_time_time_intv=pvc_min_ip_tx_time_time_intv, dbuConfigGroup=dbuConfigGroup, pvc_min_total_load_rx_intv=pvc_min_total_load_rx_intv, softwareReset=softwareReset, pvcIpRtrTxLatTxTimeCurr=pvcIpRtrTxLatTxTimeCurr, pvc_max_tx_time_time_intv=pvc_max_tx_time_time_intv, pvc_Entry=pvc_Entry, chan_max_total_load_tx_intv=chan_max_total_load_tx_intv, histPvcPerfIntv_Entry=histPvcPerfIntv_Entry, lmi_resp_rx_ch_intv=lmi_resp_rx_ch_intv, pvc_max_ip_tx_time_intv=pvc_max_ip_tx_time_intv, pvc_min_tx_time_time_intv=pvc_min_tx_time_time_intv, fecn_frames_ch_intv=fecn_frames_ch_intv, dte_octets_pvc_intv=dte_octets_pvc_intv, chan_total_load_rx_intv=chan_total_load_rx_intv, pvc_Table=pvc_Table, frChanUtilizThreshToDCE=frChanUtilizThreshToDCE, ipRtrTxLatTxPvcCurr=ipRtrTxLatTxPvcCurr, trapAcknowledgeGroup=trapAcknowledgeGroup, pvc_Table_Index=pvc_Table_Index, pvcShapeCurrToDte_index=pvcShapeCurrToDte_index, frChanUtilToDTE_exception=frChanUtilToDTE_exception, pvcShapeIntvToDte_pvcIx=pvcShapeIntvToDte_pvcIx, dce_octets_ch_intv=dce_octets_ch_intv, pvcShapeIntvToDceLevel_3=pvcShapeIntvToDceLevel_3, pvcUtilToDTE=pvcUtilToDTE, becn_frames_ch_intv=becn_frames_ch_intv, chanPerfCurr=chanPerfCurr, pvcShapeCurrToDteLevel_4=pvcShapeCurrToDteLevel_4, histPvcShapeIntvToDceLevel_6=histPvcShapeIntvToDceLevel_6, link_probe=link_probe, poll_tx_ch_curr=poll_tx_ch_curr, dbuIsdnAddress=dbuIsdnAddress, pvcCirEir_Table=pvcCirEir_Table, pvc_unavail_toDce_intv=pvc_unavail_toDce_intv, intv_start_time=intv_start_time, resp_rx_pvc_curr=resp_rx_pvc_curr, pvcPerf_intv_index=pvcPerf_intv_index, dte_frames_pvc_intv=dte_frames_pvc_intv, ipInterface=ipInterface, lMI_Controller=lMI_Controller, ip_tx_ch_curr=ip_tx_ch_curr, pvcStatusTable=pvcStatusTable, dce_frames_with_DE_pvc_curr=dce_frames_with_DE_pvc_curr, chan_max_total_load_rx_intv=chan_max_total_load_rx_intv, chan_min_user_load_rx_intv=chan_min_user_load_rx_intv, pvcShapeCurrToDceLevel_1=pvcShapeCurrToDceLevel_1, pvcLoadToDTE_endException=pvcLoadToDTE_endException, pvcShapeCurrToDceLevel_6=pvcShapeCurrToDceLevel_6, pvcUtilToDCEThresh=pvcUtilToDCEThresh, hist_pvc_unavail_toDte_intv=hist_pvc_unavail_toDte_intv, dbuRecoverCount=dbuRecoverCount, pvc_loss_frame_rx_curr=pvc_loss_frame_rx_curr, dce_octets_ch_curr=dce_octets_ch_curr, pvc_max_user_load_tx_intv=pvc_max_user_load_tx_intv, pvc_Remote_IpAddress=pvc_Remote_IpAddress, pvc_min_user_load_rx_intv=pvc_min_user_load_rx_intv, pvcShapeIntvToDce_intvIx=pvcShapeIntvToDce_intvIx, poll_rx_pvc_intv=poll_rx_pvc_intv, n392_User_Counter=n392_User_Counter, cp3000LogSpeed=cp3000LogSpeed, pro_fun_config=pro_fun_config, probeIntervalStartTime=probeIntervalStartTime, chanPerfIntv_Entry=chanPerfIntv_Entry, pvcIpRtrRxLatTxTimeIntv=pvcIpRtrRxLatTxTimeIntv, bypassEnabled=bypassEnabled, pvc_min_total_load_tx_time_intv=pvc_min_total_load_tx_time_intv, pvcStInterval_Table=pvcStInterval_Table, hist_chan_unavail_toDce_intv=hist_chan_unavail_toDce_intv, pvc_user_load_rx_intv=pvc_user_load_rx_intv, chanLoadThreshToDCE_realTimeRange=chanLoadThreshToDCE_realTimeRange, tftpAction=tftpAction, pvcShapeIntvToDceLevel_2=pvcShapeIntvToDceLevel_2, pvcLoadToDCEThresh_realTimeRange=pvcLoadToDCEThresh_realTimeRange, pvcCirEir_Entry=pvcCirEir_Entry, pvc_total_load_rx_curr=pvc_total_load_rx_curr, dte_octets_ch_intv=dte_octets_ch_intv, file_download_config=file_download_config, dbuDialedIsdnAddress=dbuDialedIsdnAddress, poll_tx_pvc_curr=poll_tx_pvc_curr, alternateVersion=alternateVersion, current_intv_start_time=current_intv_start_time, pvc_loss_frame_tx_intv=pvc_loss_frame_tx_intv, pvcTC=pvcTC, probeTrafficShape=probeTrafficShape, pvcShapeThreshLevel_6=pvcShapeThreshLevel_6, pvcShapeCurrToDteLevel_3=pvcShapeCurrToDteLevel_3, inband_IP_DLCI=inband_IP_DLCI, pvcShapeCurrToDteLevel_6=pvcShapeCurrToDteLevel_6, histPvcShapeIntvToDte_intvIx=histPvcShapeIntvToDte_intvIx, histPvcShapeIntvToDceLevel_7=histPvcShapeIntvToDceLevel_7, pvcIpRtrRxLatTxTimeCurr=pvcIpRtrRxLatTxTimeCurr, dbuPVCTable=dbuPVCTable, pvc_max_total_load_tx_time_intv=pvc_max_total_load_tx_time_intv, chan_user_load_rx_curr=chan_user_load_rx_curr, t392_Timer=t392_Timer, pvcShapeIntvToDceLevel_6=pvcShapeIntvToDceLevel_6, dce_octets_pvc_intv=dce_octets_pvc_intv, pvc_max_total_load_rx_time_intv=pvc_max_total_load_rx_time_intv, pvcNotAvailDTE=pvcNotAvailDTE, pvcLoadToDTE_exception=pvcLoadToDTE_exception, bypassStatus=bypassStatus, max_Info_Length=max_Info_Length, dce_frames_with_DE_pvc_intv=dce_frames_with_DE_pvc_intv, fecn_frames_pvc_curr=fecn_frames_pvc_curr, histPvcShapeIntvToDte_pvcIx=histPvcShapeIntvToDte_pvcIx, dbuPvcCir=dbuPvcCir, pvcCirEir_Table_Index=pvcCirEir_Table_Index, poll_rx_ch_intv=poll_rx_ch_intv, pvc_tx_time_curr=pvc_tx_time_curr, pvcEirToDTE=pvcEirToDTE, pvcShapeThreshLevel_4=pvcShapeThreshLevel_4, n393_Net_Counter=n393_Net_Counter)
