#
# PySNMP MIB module RFC1381-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1381-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
PositiveInteger, = mibBuilder.importSymbols("RFC1253-MIB", "PositiveInteger")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, MibIdentifier, NotificationType, transmission, TimeTicks, Integer32, Bits, Unsigned32, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "MibIdentifier", "NotificationType", "transmission", "TimeTicks", "Integer32", "Bits", "Unsigned32", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lapb = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 16))
class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

lapbAdmnTable = MibTable((1, 3, 6, 1, 2, 1, 10, 16, 1), )
if mibBuilder.loadTexts: lapbAdmnTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnTable.setDescription('This table contains objects that can be changed to manage a LAPB interface. Changing one of these parameters may take effect in the operating LAPB immediately or may wait until the interface is restarted depending on the details of the implementation. Most of the objects in this read-write table have corresponding read-only objects in the lapbOperTable that return the current operating value. The operating values may be different from these configured values if changed by XID negotiation or if a configured parameter was changed after the interface was started.')
lapbAdmnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 16, 1, 1), ).setIndexNames((0, "RFC1381-MIB", "lapbAdmnIndex"))
if mibBuilder.loadTexts: lapbAdmnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnEntry.setDescription('Configured parameter values for a specific LAPB.')
lapbAdmnIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbAdmnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnIndex.setDescription('The ifIndex value for the LAPB interface.')
lapbAdmnStationType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dxe", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnStationType.setReference('ISO 7776 section 3.1')
if mibBuilder.loadTexts: lapbAdmnStationType.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnStationType.setDescription('Identifies the desired station type of this interface.')
lapbAdmnControlField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnControlField.setReference('ISO 8885 Table 3, Name: HDLC Option - 10')
if mibBuilder.loadTexts: lapbAdmnControlField.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnControlField.setDescription('The desired size of the sequence numbers used to number frames.')
lapbAdmnTransmitN1FrameSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 4), PositiveInteger().clone(36000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnTransmitN1FrameSize.setReference('ISO 8885 Table 3, Name: Information Field length')
if mibBuilder.loadTexts: lapbAdmnTransmitN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnTransmitN1FrameSize.setDescription('The default maximum N1 frame size desired in number of bits for a frame transmitted by this DTE. This excludes flags and 0 bits inserted for transparency.')
lapbAdmnReceiveN1FrameSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 5), PositiveInteger().clone(36000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnReceiveN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnReceiveN1FrameSize.setDescription('The default maximum N1 frame size desired in number of bits for a frame the DCE/remote DTE transmits to this DTE. This excludes flags and 0 bits inserted for transparency.')
lapbAdmnTransmitKWindowSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnTransmitKWindowSize.setReference('ISO 8885 Table 3, Name: Window size')
if mibBuilder.loadTexts: lapbAdmnTransmitKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnTransmitKWindowSize.setDescription('The default transmit window size for this Interface. This is the maximum number of unacknowledged sequenced PDUs that may be outstanding from this DTE at any one time.')
lapbAdmnReceiveKWindowSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnReceiveKWindowSize.setReference('ISO 8885 Table 3, Name: Window size')
if mibBuilder.loadTexts: lapbAdmnReceiveKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnReceiveKWindowSize.setDescription('The default receive window size for this Interface. This is the maximum number of unacknowledged sequenced PDUs that may be outstanding from the DCE/remote DTE at any one time.')
lapbAdmnN2RxmitCount = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnN2RxmitCount.setReference('ISO 8885 Table 3, Name: Retransmission Attempts')
if mibBuilder.loadTexts: lapbAdmnN2RxmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnN2RxmitCount.setDescription('The default N2 retry counter for this interface. This specifies the number of times a PDU will be resent after the T1 timer expires without an acknowledgement for the PDU.')
lapbAdmnT1AckTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 9), PositiveInteger().clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnT1AckTimer.setReference('ISO 8885 Table 3, Name: Acknowledgement timer')
if mibBuilder.loadTexts: lapbAdmnT1AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnT1AckTimer.setDescription('The default T1 timer for this interface. This specifies the maximum time in Milliseconds to wait for acknowledgment of a PDU.')
lapbAdmnT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 10), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnT2AckDelayTimer.setReference('ISO 8885 Table 3, Name: Reply delay timer')
if mibBuilder.loadTexts: lapbAdmnT2AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnT2AckDelayTimer.setDescription('The default T2 timer for this interface. This specifies the maximum time in Milliseconds to wait before sending an acknowledgment for a sequenced PDU. A value of zero means there will be no delay in acknowledgement generation.')
lapbAdmnT3DisconnectTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 11), PositiveInteger().clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnT3DisconnectTimer.setReference('ISO 7776 section 5.7.1.3')
if mibBuilder.loadTexts: lapbAdmnT3DisconnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnT3DisconnectTimer.setDescription('The T3 timer for this interface. This specifies the time in Milliseconds to wait before considering the link disconnected. A value of zero indicates the link will be considered disconnected upon completion of the frame exchange to disconnect the link.')
lapbAdmnT4IdleTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 12), PositiveInteger().clone(2147483647)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnT4IdleTimer.setReference('ISO 7776 section 5.7.1.4')
if mibBuilder.loadTexts: lapbAdmnT4IdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnT4IdleTimer.setDescription('The T4 timer for this interface. This specifies the maximum time in Milliseconds to allow without frames being exchanged on the data link. A value of 2147483647 indicates no idle timer is being kept.')
lapbAdmnActionInitiate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sendSABM", 1), ("sendDISC", 2), ("sendDM", 3), ("none", 4), ("other", 5))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnActionInitiate.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnActionInitiate.setDescription('This identifies the action LAPB will take to initiate link set-up.')
lapbAdmnActionRecvDM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sendSABM", 1), ("sendDISC", 2), ("other", 3))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbAdmnActionRecvDM.setStatus('mandatory')
if mibBuilder.loadTexts: lapbAdmnActionRecvDM.setDescription('This identifies the action LAPB will take when it receives a DM response.')
lapbOperTable = MibTable((1, 3, 6, 1, 2, 1, 10, 16, 2), )
if mibBuilder.loadTexts: lapbOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperTable.setDescription('This table contains configuration information about interface parameters currently set in the interface. Many of these objects have corresponding objects in the lapbAdmnTable.')
lapbOperEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 16, 2, 1), ).setIndexNames((0, "RFC1381-MIB", "lapbOperIndex"))
if mibBuilder.loadTexts: lapbOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperEntry.setDescription('Currently set parameter values for a specific LAPB.')
lapbOperIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperIndex.setDescription('The ifIndex value for the LAPB interface.')
lapbOperStationType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dxe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperStationType.setReference('ISO 7776 section 3.1')
if mibBuilder.loadTexts: lapbOperStationType.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperStationType.setDescription('Identifies the current operating station type of this interface. A value of dxe (3) indicates XID negotiation has not yet taken place.')
lapbOperControlField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperControlField.setReference('ISO 7776 section 3.3')
if mibBuilder.loadTexts: lapbOperControlField.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperControlField.setDescription('The current operating size of the sequence numbers used to number frames.')
lapbOperTransmitN1FrameSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 4), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperTransmitN1FrameSize.setReference('ISO 7776 section 5.7.3')
if mibBuilder.loadTexts: lapbOperTransmitN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperTransmitN1FrameSize.setDescription('The current operating N1 frame size used for the maximum number of bits in a frame this DTE can transmit. This excludes flags and 0 bits inserted for transparency.')
lapbOperReceiveN1FrameSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperReceiveN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperReceiveN1FrameSize.setDescription('The current operating N1 frame size used for the maximum number of bits in a frame the DCE/remote DTE can transmit. This excludes flags and 0 bits inserted for transparency.')
lapbOperTransmitKWindowSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperTransmitKWindowSize.setReference('ISO 7776 section 5.7.4')
if mibBuilder.loadTexts: lapbOperTransmitKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperTransmitKWindowSize.setDescription('The current PDU window size this Interface uses to transmit. This is the maximum number of unacknowledged sequenced PDUs that may be outstanding from this DTE at any one time.')
lapbOperReceiveKWindowSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperReceiveKWindowSize.setReference('ISO 7776 section 5.7.4')
if mibBuilder.loadTexts: lapbOperReceiveKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperReceiveKWindowSize.setDescription('The current receive PDU window size for this Interface. This is the maximum number of unacknowledged sequenced PDUs that may be outstanding from the DCE/remote DTE at any one time.')
lapbOperN2RxmitCount = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperN2RxmitCount.setReference('ISO 7776 section 5.7.2')
if mibBuilder.loadTexts: lapbOperN2RxmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperN2RxmitCount.setDescription('The current N2 retry counter used for this interface. This specifies the number of times a PDU will be resent after the T1 timer expires without an acknowledgement for the PDU.')
lapbOperT1AckTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 9), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperT1AckTimer.setReference('ISO 7776 section 5.7.1.1')
if mibBuilder.loadTexts: lapbOperT1AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT1AckTimer.setDescription('The current T1 timer for this interface. This specifies the maximum time in Milliseconds to wait for acknowledgment of a PDU.')
lapbOperT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 10), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperT2AckDelayTimer.setReference('ISO 7776 section 5.7.1.2')
if mibBuilder.loadTexts: lapbOperT2AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT2AckDelayTimer.setDescription('The current T2 timer for this interface. This specifies the maximum time in Milliseconds to wait before sending an acknowledgment for a sequenced PDU. A value of zero means there will be no delay in acknowledgement generation.')
lapbOperT3DisconnectTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 11), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperT3DisconnectTimer.setReference('ISO 7776 section 5.7.1.3')
if mibBuilder.loadTexts: lapbOperT3DisconnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT3DisconnectTimer.setDescription('The current T3 timer for this interface. This specifies the time in Milliseconds to wait before considering the link disconnected. A value of zero indicates the link will be considered disconnected upon completion of the frame exchange to disconnect the link.')
lapbOperT4IdleTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 12), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbOperT4IdleTimer.setReference('ISO 7776 section 5.7.1.4')
if mibBuilder.loadTexts: lapbOperT4IdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT4IdleTimer.setDescription('The current T4 timer for this interface. This specifies the maximum time in Milliseconds to allow without frames being exchanged on the data link. A value of 2147483647 indicates no idle timer is being kept.')
lapbOperPortId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperPortId.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperPortId.setDescription('This object identifies an instance of the index object in the first group of objects in the MIB specific to the physical device or interface used to send and receive frames. If an agent does not support any such objects, it should return nullSpec OBJECT IDENTIFIER {0 0}.')
lapbOperProtocolVersionId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 2, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperProtocolVersionId.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperProtocolVersionId.setDescription('This object identifies the version of the lapb protocol implemented by this interface.')
lapbFlowTable = MibTable((1, 3, 6, 1, 2, 1, 10, 16, 3), )
if mibBuilder.loadTexts: lapbFlowTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowTable.setDescription('This table defines the objects recorded by LAPB to provide information about the traffic flow through the interface.')
lapbFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 16, 3, 1), ).setIndexNames((0, "RFC1381-MIB", "lapbFlowIfIndex"))
if mibBuilder.loadTexts: lapbFlowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowEntry.setDescription('The information regarding the effects of flow controls in LAPB.')
lapbFlowIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowIfIndex.setDescription('The ifIndex value for the LAPB Interface.')
lapbFlowStateChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowStateChanges.setDescription('The number of LAPB State Changes, including resets.')
lapbFlowChangeReason = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notStarted", 1), ("abmEntered", 2), ("abmeEntered", 3), ("abmReset", 4), ("abmeReset", 5), ("dmReceived", 6), ("dmSent", 7), ("discReceived", 8), ("discSent", 9), ("frmrReceived", 10), ("frmrSent", 11), ("n2Timeout", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowChangeReason.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowChangeReason.setDescription('The reason for the most recent incrementing of lapbFlowStateChanges. A DM or DISC frame generated to initiate link set-up does not alter this object. When the MIB-II object ifOperStatus does not have a value of testing, there exists a correlation between this object and ifOperStatus. IfOperStatus will have a value of up when this object contains: abmEntered, abmeEntered, abmReset, or abmeReset. IfOperStatus will have a value of down when this object has a value of notStarted, or dmReceived through n2Timeout. There is no correlation when this object has the value other.')
lapbFlowCurrentMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("frameReject", 3), ("disconnectRequest", 4), ("informationTransfer", 5), ("rejFrameSent", 6), ("waitingAcknowledgement", 7), ("stationBusy", 8), ("remoteStationBusy", 9), ("bothStationsBusy", 10), ("waitingAckStationBusy", 11), ("waitingAckRemoteBusy", 12), ("waitingAckBothBusy", 13), ("rejFrameSentRemoteBusy", 14), ("xidFrameSent", 15), ("error", 16), ("other", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowCurrentMode.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowCurrentMode.setDescription('The current condition of the conversation.')
lapbFlowBusyDefers = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowBusyDefers.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowBusyDefers.setDescription('The number of times this device was unable to transmit a frame due to a perceived remote busy condition. Busy conditions can result from the receipt of an RNR from the remote device, the lack of valid sequence number space (window saturation), or other conditions.')
lapbFlowRejOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowRejOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowRejOutPkts.setDescription('The number of REJ or SREJ frames sent by this station.')
lapbFlowRejInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowRejInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowRejInPkts.setDescription('The number of REJ or SREJ frames received by this station.')
lapbFlowT1Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowT1Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowT1Timeouts.setDescription('The number of times a re-transmission was effected by the T1 Timer expiring.')
lapbFlowFrmrSent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowFrmrSent.setReference('ISO 7776 Section 4.3.9, tables 7 and 8')
if mibBuilder.loadTexts: lapbFlowFrmrSent.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowFrmrSent.setDescription("The Information Field of the FRMR most recently sent. If no FRMR has been sent (the normal case) or the information isn't available, this will be an OCTET STRING of zero length.")
lapbFlowFrmrReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowFrmrReceived.setReference('ISO 7776 Section 4.3.9, tables 7 and 8')
if mibBuilder.loadTexts: lapbFlowFrmrReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowFrmrReceived.setDescription("The Information Field of the FRMR most recently received. If no FRMR has been received (the normal case) or the information isn't available, this will be an OCTET STRING of zero length.")
lapbFlowXidReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8206))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowXidReceived.setReference('ISO 8885')
if mibBuilder.loadTexts: lapbFlowXidReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowXidReceived.setDescription('The Information Field of the XID frame most recently received. If no XID frame has been received, this will be an OCTET STRING of zero length.')
lapbXidTable = MibTable((1, 3, 6, 1, 2, 1, 10, 16, 4), )
if mibBuilder.loadTexts: lapbXidTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidTable.setDescription("This table defines values to use for XID negotiation that are not found in the lapbAdmnTable. This table is optional for implementations that don't support XID and mandatory for implementations that do initiate XID negotiation.")
lapbXidEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 16, 4, 1), ).setIndexNames((0, "RFC1381-MIB", "lapbXidIndex"))
if mibBuilder.loadTexts: lapbXidEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidEntry.setDescription('XId negotiation parameter values for a specific LAPB.')
lapbXidIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbXidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidIndex.setDescription('The ifIndex value for the LAPB interface.')
lapbXidAdRIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbXidAdRIdentifier.setReference('ISO 8885 Table 2, Name: Identifier')
if mibBuilder.loadTexts: lapbXidAdRIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidAdRIdentifier.setDescription('The value of the Address Resolution Identifier. A zero length string indicates no Identifier value has been assigned.')
lapbXidAdRAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbXidAdRAddress.setReference('ISO 8885 Table 2, Name: Address')
if mibBuilder.loadTexts: lapbXidAdRAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidAdRAddress.setDescription('The value of the Address Resolution Address. A zero length string indicates no Address value has been assigned.')
lapbXidParameterUniqueIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbXidParameterUniqueIdentifier.setReference('ISO 8885 Table 3, Name: Identifier')
if mibBuilder.loadTexts: lapbXidParameterUniqueIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidParameterUniqueIdentifier.setDescription('The value of the parameter unique Identifier. A zero length string indicates no Unique identifier value has been assigned.')
lapbXidGroupAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbXidGroupAddress.setReference('ISO 8885 Table 3, Name: Group address')
if mibBuilder.loadTexts: lapbXidGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidGroupAddress.setDescription('The value of the parameter Group address. A zero length string indicates no Group address value has been assigned.')
lapbXidPortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbXidPortNumber.setReference('ISO 8885 Table 3, Name: Port number')
if mibBuilder.loadTexts: lapbXidPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidPortNumber.setDescription('The port number assigned for this link. A zero length string indicates no local port number identifier has been assigned.')
lapbXidUserDataSubfield = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 16, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8206)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbXidUserDataSubfield.setReference('ISO 8885 section 4.3')
if mibBuilder.loadTexts: lapbXidUserDataSubfield.setStatus('mandatory')
if mibBuilder.loadTexts: lapbXidUserDataSubfield.setDescription('A user data subfield, if any, to be transmitted in an XID frame. A zero length frame indicates no user data subfield has been assigned. The octet string should include both the User data identifier and User data field as shown in Figures 1 and 4.')
lapbProtocolVersion = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 16, 5))
lapbProtocolIso7776v1986 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 16, 5, 1))
lapbProtocolCcittV1980 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 16, 5, 2))
lapbProtocolCcittV1984 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 16, 5, 3))
mibBuilder.exportSymbols("RFC1381-MIB", lapbOperProtocolVersionId=lapbOperProtocolVersionId, lapbAdmnStationType=lapbAdmnStationType, lapbAdmnT4IdleTimer=lapbAdmnT4IdleTimer, lapbFlowCurrentMode=lapbFlowCurrentMode, lapbFlowFrmrSent=lapbFlowFrmrSent, lapbXidParameterUniqueIdentifier=lapbXidParameterUniqueIdentifier, lapbFlowT1Timeouts=lapbFlowT1Timeouts, lapbXidTable=lapbXidTable, lapbFlowRejOutPkts=lapbFlowRejOutPkts, lapbXidIndex=lapbXidIndex, lapbProtocolCcittV1984=lapbProtocolCcittV1984, lapbFlowStateChanges=lapbFlowStateChanges, lapbFlowChangeReason=lapbFlowChangeReason, lapbAdmnTransmitKWindowSize=lapbAdmnTransmitKWindowSize, lapbOperN2RxmitCount=lapbOperN2RxmitCount, lapbAdmnT1AckTimer=lapbAdmnT1AckTimer, lapbAdmnActionInitiate=lapbAdmnActionInitiate, lapbAdmnReceiveKWindowSize=lapbAdmnReceiveKWindowSize, lapbAdmnIndex=lapbAdmnIndex, lapbOperTable=lapbOperTable, lapbAdmnT2AckDelayTimer=lapbAdmnT2AckDelayTimer, lapbOperT2AckDelayTimer=lapbOperT2AckDelayTimer, lapbOperPortId=lapbOperPortId, lapbXidAdRIdentifier=lapbXidAdRIdentifier, lapbXidPortNumber=lapbXidPortNumber, lapbOperTransmitN1FrameSize=lapbOperTransmitN1FrameSize, lapb=lapb, lapbAdmnTransmitN1FrameSize=lapbAdmnTransmitN1FrameSize, lapbOperTransmitKWindowSize=lapbOperTransmitKWindowSize, lapbAdmnN2RxmitCount=lapbAdmnN2RxmitCount, lapbOperT1AckTimer=lapbOperT1AckTimer, lapbProtocolIso7776v1986=lapbProtocolIso7776v1986, lapbOperEntry=lapbOperEntry, lapbOperReceiveN1FrameSize=lapbOperReceiveN1FrameSize, lapbFlowIfIndex=lapbFlowIfIndex, lapbFlowRejInPkts=lapbFlowRejInPkts, lapbXidAdRAddress=lapbXidAdRAddress, lapbOperControlField=lapbOperControlField, lapbAdmnTable=lapbAdmnTable, lapbFlowTable=lapbFlowTable, lapbXidGroupAddress=lapbXidGroupAddress, lapbOperReceiveKWindowSize=lapbOperReceiveKWindowSize, lapbProtocolVersion=lapbProtocolVersion, lapbAdmnEntry=lapbAdmnEntry, lapbXidEntry=lapbXidEntry, lapbOperT3DisconnectTimer=lapbOperT3DisconnectTimer, lapbProtocolCcittV1980=lapbProtocolCcittV1980, lapbAdmnControlField=lapbAdmnControlField, lapbXidUserDataSubfield=lapbXidUserDataSubfield, lapbFlowEntry=lapbFlowEntry, lapbOperT4IdleTimer=lapbOperT4IdleTimer, lapbFlowXidReceived=lapbFlowXidReceived, lapbAdmnT3DisconnectTimer=lapbAdmnT3DisconnectTimer, lapbOperIndex=lapbOperIndex, lapbFlowBusyDefers=lapbFlowBusyDefers, lapbAdmnReceiveN1FrameSize=lapbAdmnReceiveN1FrameSize, lapbFlowFrmrReceived=lapbFlowFrmrReceived, IfIndexType=IfIndexType, lapbOperStationType=lapbOperStationType, lapbAdmnActionRecvDM=lapbAdmnActionRecvDM)
