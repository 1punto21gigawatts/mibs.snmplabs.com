#
# PySNMP MIB module WWP-VOICE-GATEWAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-VOICE-GATEWAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, iso, ObjectIdentity, MibIdentifier, IpAddress, Counter32, Bits, Gauge32, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "iso", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "Bits", "Gauge32", "Unsigned32", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpVoiceGatewayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 43))
wwpVoiceGatewayMIB.setRevisions(('2002-11-18 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpVoiceGatewayMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpVoiceGatewayMIB.setLastUpdated('200211181700Z')
if mibBuilder.loadTexts: wwpVoiceGatewayMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpVoiceGatewayMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpVoiceGatewayMIB.setDescription('This MIB module degines the managed objects for WWP voice gateway.')
wwpVoiceGatewayMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1))
wwpVoiceGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1))
wwpVoiceGatewayMGCP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1))
wwpVoiceGatewayCountry = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 2))
wwpVoiceGatewayCodec = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 3))
wwpVoiceGatewayAudio = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 4))
wwpVoiceGatewayStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5))
wwpVoiceReset = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 6))
wwpVoiceSec = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 7))
wwpVoiceGatewayConfigCallAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 8))
wwpVoiceGatewayConfigPots = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 9))
wwpVoiceGatewayConfigFax = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 10))
wwpVoiceGatewayConfigEndPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 11))
wwpVoiceGatewayConfigNotifEntityCache = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 12))
wwpVoiceGatewayConfigJitterBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 13))
wwpVoiceGatewayConfigJitterBufferMinPeriod = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 14))
wwpVoiceGatewayConfigJitterBufferMaxPeriod = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 15))
wwpVoiceGatewayConfigJitterBufferTargetPeriod = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 16))
wwpVoiceGatewayConfigCodecOverride = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 17))
wwpVoiceGatewayConfigTestServerConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 18))
wwpVoiceGatewayConfigLastServerResponseTime = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 19))
wwpVoiceGatewaySIP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20))
wwpVoiceGatewayConfigProtocolType = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 21))
wwpVoiceGatewayConfigProtocolEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 22))
wwpVoiceGatewayMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 2))
wwpVoiceGatewayMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 2, 0))
wwpVoiceGatewayMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 3))
wwpVoiceGatewayMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 3, 1))
wwpVoiceGatewayMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 3, 2))
wwpVoiceGatewayEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 1), )
if mibBuilder.loadTexts: wwpVoiceGatewayEndPointTable.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayEndPointTable.setDescription('A table of the voice gateway endpoints.')
wwpVoiceGatewayEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 1, 1), ).setIndexNames((0, "WWP-VOICE-GATEWAY-MIB", "wwpVoiceGatewayEndPointId"))
if mibBuilder.loadTexts: wwpVoiceGatewayEndPointEntry.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayEndPointEntry.setDescription('An entry of the voice gateway endpoint.')
wwpVoiceGatewayEndPointId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayEndPointId.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayEndPointId.setDescription('Index for the the endpoint entry.')
wwpVoiceGatewayEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayEndpoint.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayEndpoint.setDescription("The endpoint for the voice Gateway. This object should be set to a zero length string if the Management Station wish to use the Endpoint's IP Address as the Endpoint Domain Name. Endpoint identifiers have two parts: The domain name of the gateway that is managing the endpoint. A local name within the gateway. The local name is hierarchical, for example, the local name of circuit number 13 in a multiplexed trunk that is connected to the physical interface named XYZ would be named as XYZ/13.")
wwpVoiceGatewayCallAgentAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayCallAgentAddr.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayCallAgentAddr.setDescription('This object is used to configure either the domain name or the IP address of the Call Agent in standard dot notation. The complete address of a default call agent is composed of IP address/Domain Name and UDP port. wwpVoiceGatewayCallAgentAddr specifies address of the Call Agent to which RSIP(RestartInProgress) message is sent whenever system starts up or line goes up. Call agent address may be an IP address or fully qualified domain name (FQDN). This object should be set to zero length string if the Management Stations wish to attempt to obtain the CA address from a DNS server (highest priority MGCP CA is chosen).')
wwpVoiceGatewayCallAgentUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(2427)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayCallAgentUDPPort.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayCallAgentUDPPort.setDescription('This object is used to configure the UDP port of the Call Agent. The UDP port is used together with wwpVoiceGatewayCallAgentAddr to specify the destination address of the call agent to which RSIP message is sent when system starts up or line goes up.')
wwpVoiceGatewayCallAgentProtocol = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ncs1", 1), ("rfc2705", 2), ("mgcp1Ncs1NoPackages", 3))).clone('rfc2705')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayCallAgentProtocol.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayCallAgentProtocol.setDescription("Setting this object to 'rfc2705' will enable support of RFC 2705 for this CallAgent (Only 'L' Event Package). Setting this object to 'ncs1.0' will enable support of PacketCable NCS 1.0 for the CallAgent. Setting this object to 'mgcp1Ncs1NoPackages' will enable support of Mgcp 1.0 Ncs 1.0 no event package for the CallAgent.")
wwpVoiceGatewaySupportMessagePiggybacking = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySupportMessagePiggybacking.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySupportMessagePiggybacking.setDescription("Setting this object to 'false' will disable message Piggybacking for this Voice Gateway.")
wwpVoiceGatewayRsipKeepAliveEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayRsipKeepAliveEnable.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayRsipKeepAliveEnable.setDescription("Setting this object to 'enable' will configure the device to send periodic RSIP x-keepalive messages.")
wwpVoiceGatewayRsipKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayRsipKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayRsipKeepAliveInterval.setDescription('Configures the interval at which RSIP x-keepalive messages are transmitted')
wwpVoiceGatewayCountryCodes = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("usa", 1), ("dubai", 2), ("holland", 3), ("newZealand", 4), ("uk", 5), ("sweden", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayCountryCodes.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayCountryCodes.setDescription('This object specifies the country for different tone and ring settings.')
wwpVoiceGatewayComplexCodec = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("g711", 2), ("g723", 3), ("g726", 4), ("g729", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayComplexCodec.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayComplexCodec.setDescription("Setting this object to 'g711(0)' will only enable G711U and G711A Codec. If this object is set to 'g729(3)', then G729A and G729AB Codec will be used.")
wwpVoiceGatewaySilenceSuppression = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySilenceSuppression.setDescription("Setting this object to 'false' will disable the silence suppression for the complex codes specified by wwpVoiceGatewayComplexCodec.")
wwpVoiceGatewayEchoCancellation = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayEchoCancellation.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayEchoCancellation.setDescription("Setting this object to 'false' will disable the echo cancellation for the complex codes specified by wwpVoiceGatewayComplexCodec.")
wwpVoiceGatewayPacketizationMinPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 3, 4), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayPacketizationMinPeriod.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayPacketizationMinPeriod.setDescription('Min packet time for the complex codes specified by wwpVoiceGatewayComplexCodec. FOR G723 the packet time is fixed to be 30ms.')
wwpVoiceGatewayPacketizationMaxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 3, 5), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayPacketizationMaxPeriod.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayPacketizationMaxPeriod.setDescription('Max packet time for the complex codes specified by wwpVoiceGatewayComplexCodec. FOR G723 the packet time is fixed to be 30ms.')
wwpVoiceGatewayPayloadType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(94, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayPayloadType.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayPayloadType.setDescription('The Payload Format for the telephone events.')
wwpVoiceGatewaySendEventsViaRFC2833 = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySendEventsViaRFC2833.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySendEventsViaRFC2833.setDescription("Setting this object to 'true' will cause the voice gateway to send Telephone Events via RFC2833 signalling using wwpVoiceGatewayPayloadType.")
wwpVoiceGatewayDropVoicePktsDuringEvents = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayDropVoicePktsDuringEvents.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayDropVoicePktsDuringEvents.setDescription("Setting this object to 'true' will cause the voice gateway to drop voice packets during RFC2833 Telephone Event packets.")
wwpVoiceGatewaySquelchInbandDtmfAudio = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySquelchInbandDtmfAudio.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySquelchInbandDtmfAudio.setDescription("Setting this object to 'true' will cause the voice gateway to Squelch the Inband DTMF Audio.")
wwpVoiceGatewayPktsTx = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayPktsTx.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayPktsTx.setDescription('The total number of RTP data packets transmitted by the voice gateway since starting transmission on this connection.')
wwpVoiceGatewayOctetsTx = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayOctetsTx.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayOctetsTx.setDescription('The total number of payload octets (i.e., not including header or padding) transmitted in RTP data packets by the voice gateway since starting transmission on this connection. ')
wwpVoiceGatewayPktsRx = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayPktsRx.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayPktsRx.setDescription('The total number of RTP data packets received by the voice gateway since starting reception on this connection.')
wwpVoiceGatewayOctetsRx = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayOctetsRx.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayOctetsRx.setDescription('The total number of payload octets (i.e., not including header or padding) transmitted in RTP data packets by the voice gateway since starting transmission on this connection.')
wwpVoiceGatewayPktsLost = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayPktsLost.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayPktsLost.setDescription('The total number of RTP data packets that have been lost since the beginning of reception. This number is defined to be the number of packets expected less the number of packets actually received, where the number of packets received includes any which are late or duplicates.')
wwpVoiceGatewayIntervalJitter = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 6), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayIntervalJitter.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayIntervalJitter.setDescription('An estimate of the statistical variance of the RTP data packet interarrival time measured in milliseconds and expressed as an unsigned integer. The interarrival jitter J is defined to be the mean deviation (smoothed absolute value) of the difference D in packet spacing at the receiver compared to the sender for a pair of packets.')
wwpVoiceGatewayLatency = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayLatency.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayLatency.setDescription('An estimate of the network latency, expressed in milliseconds. This is the average value of the difference between the NTP timestamp indicated by the senders of the RTCP messages and the NTP timestamp of the receivers, measured when this messages are received.')
wwpVoiceGatewayResetStatCounters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayResetStatCounters.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayResetStatCounters.setDescription("To reset voice statistic counters , this object should be set to 'reset'. A read on this object should return none(0).")
wwpVoiceGatewayNumResets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayNumResets.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayNumResets.setDescription('This object defines the number of times that the voice gateway has been restarted.')
wwpVoiceGatewayReset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("reset", 1), ("resetDefault", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayReset.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayReset.setDescription('Writing one of the specified values to this field causes the specified type of reboot to occur. none is the value returned when this leaf is queried. writing this value to the leaf will have no effect. reset causes the voice gateway to restart using its current configuration. resetDefault will reset the voice gateway to factory defaults.')
wwpVoiceAccess = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceAccess.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceAccess.setDescription("Setting this object to 'deny' will disable access to VMI from SMI when connected via Telnet or console.")
wwpMgmtAccess = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpMgmtAccess.setStatus('current')
if mibBuilder.loadTexts: wwpMgmtAccess.setDescription("Setting this object to 'deny' will disable access to SMI from VMI when connected via Telnet or console.")
wwpVoiceCallAgentOtaModes = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ifOtaRecv", 1), ("sendOta", 2))).clone('sendOta')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceCallAgentOtaModes.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceCallAgentOtaModes.setDescription("Setting this object to 'ifOtaRecv' will configure the device to send OTA if and only if OTA is received from call Agent. Setting this object to 'sendOta' will configure the device to always send OTA sdp parameters.")
wwpVoiceCallAgentEgressEvent = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sendIngressEgressNotif", 1), ("sendIngressNotif", 2))).clone('sendIngressEgressNotif')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceCallAgentEgressEvent.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceCallAgentEgressEvent.setDescription("Setting this object to 'sendIngressEgressNotif' will configure the device to send ingress and egress fax and modem tone notification. Setting this object to 'sendIngressNotif' will configure the device to send only ingress fax and modem tone notification.")
wwpVoiceCallAgentPotsLine = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable1PotLine", 1), ("enable2PotLine", 2))).clone('enable2PotLine')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceCallAgentPotsLine.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceCallAgentPotsLine.setDescription("Setting this object to 'enable1PotLine' will configure the device to enable Line 1 only. Setting this object to 'enable2PotLine' will configure the device to enable 2 pots lines. Device 'may' require reboot to enable pot line changes.")
wwpVoiceAutonomousFaxState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceAutonomousFaxState.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceAutonomousFaxState.setDescription("Setting this object to 'enable' will configure the device to enable autonomous fax behavior. Setting this object to 'disable' will configure the device to disable autonomous fax behavior.")
wwpVoiceEndPointName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ip", 2), ("mac", 3), ("hostName", 4), ("fqdn", 5))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceEndPointName.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceEndPointName.setDescription("Setting this object will control how a voip endpoint name will be determined. This object cannot be set to 'unknown'.")
wwpVoiceNotifEntCache = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceNotifEntCache.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceNotifEntCache.setDescription('Timeout in minutes for cached DNS lookups for MGCP RQNT Notified Entity field')
wwpVoiceJitterOptionState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceJitterOptionState.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceJitterOptionState.setDescription("Setting this object to 'enable' will configure the jitter buffer to change to an adaptive jitter buffer size. Setting this object to 'disable' will configure the jitter buffer to use a fixed jitter buffer size.")
wwpVoiceJitterBufferMinPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 14, 1), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceJitterBufferMinPeriod.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceJitterBufferMinPeriod.setDescription('Minimum Holding time. Setting this value will limit the jitter buffer from adapting below this value. The smallest period is fixed at 20ms.')
wwpVoiceJitterBufferMaxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 15, 1), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceJitterBufferMaxPeriod.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceJitterBufferMaxPeriod.setDescription('Maximum Holding time. Setting this value will limit the jitter buffer from adapting above this value. The largest period is fixed at 300ms.')
wwpVoiceJitterBufferTargetPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 16, 1), Integer32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceJitterBufferTargetPeriod.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceJitterBufferTargetPeriod.setDescription('Target Holding time. Setting this value sets the initial jitter buffer size.')
wwpVoiceGatewayCodecOverride = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g711PCMU", 1), ("g711PCMA", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayCodecOverride.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayCodecOverride.setDescription('Selecting data codec override forces the default data codec to the specified value, overriding the standard default data codec which is tied to country code. 1 = force specification of G711 PCMU as default codec 2 = force specification of G711 PCMA as default codec ')
wwpVoiceGatewayTestServerConnection = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayTestServerConnection.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayTestServerConnection.setDescription('Writing one of the specified values to this field causes mesages to be sent to voice server to test connectivity')
wwpVoiceGatewayLastServerResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 19, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewayLastServerResponseTime.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayLastServerResponseTime.setDescription('Last server response timestamp. Used as part of testing voice server connectivity')
wwpVoiceGatewaySipSessionTimeoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipSessionTimeoutPeriod.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipSessionTimeoutPeriod.setDescription('Configures session expiration time in seconds. Set value to 0 to disable')
wwpVoiceGatewaySipRegisterTimeoutPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(3600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipRegisterTimeoutPeriod.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipRegisterTimeoutPeriod.setDescription(' Configures registration expiration time in seconds. Used only when registrar is used. Set value to 0 to disable.')
wwpVoiceGatewaySipForceQuotesState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipForceQuotesState.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipForceQuotesState.setDescription('Configuration to force display names to be embraced by double quotes. ')
wwpVoiceGatewaySipPhoneLineTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4), )
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineTable.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineTable.setDescription('SIP Pots Line table This table confures users for each POTs line')
wwpVoiceGatewaySipPhoneLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4, 1), ).setIndexNames((0, "WWP-VOICE-GATEWAY-MIB", "wwpVoiceGatewaySipLineId"))
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineEntry.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineEntry.setDescription('table of sip line configuration')
wwpVoiceGatewaySipLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewaySipLineId.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipLineId.setDescription('Pots port Id')
wwpVoiceGatewaySipPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneNumber.setDescription('Phone Number associated with this line.')
wwpVoiceGatewaySipUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpVoiceGatewaySipUserName.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipUserName.setDescription('User Name associated with this line.')
wwpVoiceGatewaySipUserDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpVoiceGatewaySipUserDisplayName.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipUserDisplayName.setDescription('User Display Name associated with this line.')
wwpVoiceGatewaySipUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpVoiceGatewaySipUserPassword.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipUserPassword.setDescription('User Password associated with this line.')
wwpVoiceGatewaySipDialPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipDialPlan.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipDialPlan.setDescription('Configuration for dial plan expression string. Note: subset of unix regular expressions supported.')
wwpVoiceGatewaySipPhoneLineTimerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 5), )
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineTimerTable.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineTimerTable.setDescription('SIP Pots Line table This table configures users for each POTs line')
wwpVoiceGatewaySipPhoneLineTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 5, 1), ).setIndexNames((0, "WWP-VOICE-GATEWAY-MIB", "wwpVoiceGatewaySipTimerLineId"))
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineTimerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipPhoneLineTimerEntry.setDescription('Table of sip phone line configuration')
wwpVoiceGatewaySipTimerLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpVoiceGatewaySipTimerLineId.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipTimerLineId.setDescription('Pots port Id')
wwpVoiceGatewaySipDialTimerLong = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipDialTimerLong.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipDialTimerLong.setDescription('Long Timeout for SIP dialing')
wwpVoiceGatewaySIPServers = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6))
wwpVoiceGatewaySIPProxyServers = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 1))
wwpVoiceGatewaySIPRegistrarServers = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 2))
wwpVoiceGatewaySIPLogServers = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 3))
wwpVoiceGatewaySipProxyAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipProxyAddr.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipProxyAddr.setDescription('The complete address of a default Proxy is composed of IP address/Domain Name and UDP port. wwpVoiceGatewayRegistrarAddr specifies address of the Proxy server to which SIP messages are sent. Proxy address may be an IP address or fully qualified domain name (FQDN).')
wwpVoiceGatewaySipProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(5060)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipProxyPort.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipProxyPort.setDescription('This object is used to configure the UDP port of the SIP Proxy Server. The UDP port is used together with wwpVoiceGatewaySipProxyAddr to specify the destination address of the Proxy to which SIP messages are sent.')
wwpVoiceGatewaySipRegistrarAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipRegistrarAddr.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipRegistrarAddr.setDescription(' The complete address of a default Registrar is composed of IP address/Domain Name and UDP port. wwpVoiceGatewayRegistrarAddr specifies address of the Regsitrar to which SIP Registration messages are sent whenever system starts or line goes up. Registrar address may be an IP address or fully qualified domain name (FQDN).')
wwpVoiceGatewaySipRegistrarPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(5060)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipRegistrarPort.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipRegistrarPort.setDescription(' This object is used to configure the UDP port of the SIP Registrar. The UDP port is used together with wwpVoiceGatewaySipRegistrarAddr to specify the destination addressto which SIP Registration messages are sent when system starts or line goes up.')
wwpVoiceGatewaySipSyslogAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipSyslogAddr.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipSyslogAddr.setDescription(' The complete address of a default SIP SysLog server is composed of IP address/Domain Name and UDP port. wwpVoiceGatewaySipSyslogAddr specifies address of the SIP SysLog server to which SIP Log messages are sent. SysLog server address may be an IP address or fully qualified domain name (FQDN).')
wwpVoiceGatewaySipSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipSyslogPort.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipSyslogPort.setDescription('This object is used to configure the UDP port of the SIP Log Servert. The UDP port is used together with wwpVoiceGatewaySipSyslogAddr to specify the destination address to which SIP Log mesaages are sent when system starts or line goes up.')
wwpVoiceGatewaySipSyslogLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 6, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySipSyslogLogLevel.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySipSyslogLogLevel.setDescription('This object is used to configure the log level or verbosity of the SIP messages')
wwpVoiceGatewaySIPPreferredCodec = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g711", 1), ("g729", 2))).clone('g711')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySIPPreferredCodec.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySIPPreferredCodec.setDescription('Configuration to set preferred codec. ')
wwpVoiceGatewaySIPDtmfEventHandling = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("audio", 1), ("info", 2), ("rfc2833", 3))).clone('audio')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewaySIPDtmfEventHandling.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewaySIPDtmfEventHandling.setDescription('Configuration for device to send DTMF digits via SIP INFO message or in RTP RFC2833 event message in addition to the audio tone in RTP stream. The default is always an audio tone sent in the RTP stream.')
wwpVoiceGatewaySIPCallFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 9))
wwpVoiceGatewayHookFlashEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 20, 9, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayHookFlashEnable.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayHookFlashEnable.setDescription("Setting this object to 'true' will configure the device to process hook flash events.. Setting this object to 'false' will configure the device to ignore hookflash events.")
wwpVoiceGatewayProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mgcp", 1), ("sip", 2))).clone('mgcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayProtocolType.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayProtocolType.setDescription("Configuration to select VoIP protocol. Setting this value to 'mgcp' will allow the configuration the MGCP funtionality. Setting this value to 'sip' will allow the configuration the SIP funtionality")
wwpVoiceGatewayProtocolEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 43, 1, 1, 22, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpVoiceGatewayProtocolEnable.setStatus('current')
if mibBuilder.loadTexts: wwpVoiceGatewayProtocolEnable.setDescription("Configuration to enable VoIP protocol. Setting this value to 'enable' will cause VoIP stack to start at bootup")
mibBuilder.exportSymbols("WWP-VOICE-GATEWAY-MIB", wwpVoiceGatewaySIPCallFeatures=wwpVoiceGatewaySIPCallFeatures, wwpMgmtAccess=wwpMgmtAccess, wwpVoiceGatewayLatency=wwpVoiceGatewayLatency, wwpVoiceGatewayConfigJitterBufferMaxPeriod=wwpVoiceGatewayConfigJitterBufferMaxPeriod, wwpVoiceGatewayConfigCodecOverride=wwpVoiceGatewayConfigCodecOverride, wwpVoiceGatewayProtocolEnable=wwpVoiceGatewayProtocolEnable, wwpVoiceGatewayConfigProtocolEnable=wwpVoiceGatewayConfigProtocolEnable, wwpVoiceGatewaySipSyslogAddr=wwpVoiceGatewaySipSyslogAddr, wwpVoiceGatewayMIBNotificationPrefix=wwpVoiceGatewayMIBNotificationPrefix, wwpVoiceGatewayPktsRx=wwpVoiceGatewayPktsRx, wwpVoiceJitterBufferMaxPeriod=wwpVoiceJitterBufferMaxPeriod, wwpVoiceGatewayMIB=wwpVoiceGatewayMIB, wwpVoiceGatewaySipLineId=wwpVoiceGatewaySipLineId, wwpVoiceGatewayCountry=wwpVoiceGatewayCountry, wwpVoiceGatewayNumResets=wwpVoiceGatewayNumResets, wwpVoiceGatewaySIPProxyServers=wwpVoiceGatewaySIPProxyServers, wwpVoiceGatewayEchoCancellation=wwpVoiceGatewayEchoCancellation, wwpVoiceEndPointName=wwpVoiceEndPointName, wwpVoiceGatewaySipPhoneLineEntry=wwpVoiceGatewaySipPhoneLineEntry, wwpVoiceJitterOptionState=wwpVoiceJitterOptionState, wwpVoiceGatewaySipSessionTimeoutPeriod=wwpVoiceGatewaySipSessionTimeoutPeriod, wwpVoiceGatewayRsipKeepAliveEnable=wwpVoiceGatewayRsipKeepAliveEnable, wwpVoiceGatewayIntervalJitter=wwpVoiceGatewayIntervalJitter, wwpVoiceGatewaySipUserPassword=wwpVoiceGatewaySipUserPassword, wwpVoiceGatewaySipPhoneLineTimerEntry=wwpVoiceGatewaySipPhoneLineTimerEntry, wwpVoiceGatewaySIPRegistrarServers=wwpVoiceGatewaySIPRegistrarServers, wwpVoiceGatewayConfigTestServerConnection=wwpVoiceGatewayConfigTestServerConnection, wwpVoiceGatewaySipTimerLineId=wwpVoiceGatewaySipTimerLineId, PYSNMP_MODULE_ID=wwpVoiceGatewayMIB, wwpVoiceGatewaySipRegistrarAddr=wwpVoiceGatewaySipRegistrarAddr, wwpVoiceGatewayMIBGroups=wwpVoiceGatewayMIBGroups, wwpVoiceCallAgentPotsLine=wwpVoiceCallAgentPotsLine, wwpVoiceGatewayOctetsRx=wwpVoiceGatewayOctetsRx, wwpVoiceGatewaySupportMessagePiggybacking=wwpVoiceGatewaySupportMessagePiggybacking, wwpVoiceNotifEntCache=wwpVoiceNotifEntCache, wwpVoiceGatewaySipForceQuotesState=wwpVoiceGatewaySipForceQuotesState, wwpVoiceGatewaySquelchInbandDtmfAudio=wwpVoiceGatewaySquelchInbandDtmfAudio, wwpVoiceGatewayConfigCallAgent=wwpVoiceGatewayConfigCallAgent, wwpVoiceGatewayOctetsTx=wwpVoiceGatewayOctetsTx, wwpVoiceGatewayEndPointTable=wwpVoiceGatewayEndPointTable, wwpVoiceGatewayPayloadType=wwpVoiceGatewayPayloadType, wwpVoiceGatewayTestServerConnection=wwpVoiceGatewayTestServerConnection, wwpVoiceGatewayHookFlashEnable=wwpVoiceGatewayHookFlashEnable, wwpVoiceGatewayCodecOverride=wwpVoiceGatewayCodecOverride, wwpVoiceGatewaySipProxyAddr=wwpVoiceGatewaySipProxyAddr, wwpVoiceGatewayCallAgentProtocol=wwpVoiceGatewayCallAgentProtocol, wwpVoiceGatewayConfigEndPoint=wwpVoiceGatewayConfigEndPoint, wwpVoiceGatewayConfigNotifEntityCache=wwpVoiceGatewayConfigNotifEntityCache, wwpVoiceGatewaySipPhoneLineTimerTable=wwpVoiceGatewaySipPhoneLineTimerTable, wwpVoiceGatewayMIBObjects=wwpVoiceGatewayMIBObjects, wwpVoiceGatewayStats=wwpVoiceGatewayStats, wwpVoiceGatewaySipSyslogLogLevel=wwpVoiceGatewaySipSyslogLogLevel, wwpVoiceGatewaySIPLogServers=wwpVoiceGatewaySIPLogServers, wwpVoiceGatewaySipRegisterTimeoutPeriod=wwpVoiceGatewaySipRegisterTimeoutPeriod, wwpVoiceGatewaySipSyslogPort=wwpVoiceGatewaySipSyslogPort, wwpVoiceGatewayCodec=wwpVoiceGatewayCodec, wwpVoiceGatewayMGCP=wwpVoiceGatewayMGCP, wwpVoiceJitterBufferMinPeriod=wwpVoiceJitterBufferMinPeriod, wwpVoiceGatewayResetStatCounters=wwpVoiceGatewayResetStatCounters, wwpVoiceGatewaySIPDtmfEventHandling=wwpVoiceGatewaySIPDtmfEventHandling, wwpVoiceGatewayComplexCodec=wwpVoiceGatewayComplexCodec, wwpVoiceGatewayPktsLost=wwpVoiceGatewayPktsLost, wwpVoiceGatewayConfigJitterBuffer=wwpVoiceGatewayConfigJitterBuffer, wwpVoiceSec=wwpVoiceSec, wwpVoiceGatewaySipUserName=wwpVoiceGatewaySipUserName, wwpVoiceGatewayConfigFax=wwpVoiceGatewayConfigFax, wwpVoiceGatewayPacketizationMinPeriod=wwpVoiceGatewayPacketizationMinPeriod, wwpVoiceGatewaySipPhoneNumber=wwpVoiceGatewaySipPhoneNumber, wwpVoiceCallAgentOtaModes=wwpVoiceCallAgentOtaModes, wwpVoiceGatewayConfigLastServerResponseTime=wwpVoiceGatewayConfigLastServerResponseTime, wwpVoiceGatewayPacketizationMaxPeriod=wwpVoiceGatewayPacketizationMaxPeriod, wwpVoiceGatewaySIPPreferredCodec=wwpVoiceGatewaySIPPreferredCodec, wwpVoiceGatewaySipPhoneLineTable=wwpVoiceGatewaySipPhoneLineTable, wwpVoiceGatewayProtocolType=wwpVoiceGatewayProtocolType, wwpVoiceGatewayCountryCodes=wwpVoiceGatewayCountryCodes, wwpVoiceGatewayEndPointEntry=wwpVoiceGatewayEndPointEntry, wwpVoiceGatewayLastServerResponseTime=wwpVoiceGatewayLastServerResponseTime, wwpVoiceGatewaySipRegistrarPort=wwpVoiceGatewaySipRegistrarPort, wwpVoiceGatewayCallAgentAddr=wwpVoiceGatewayCallAgentAddr, wwpVoiceGatewayPktsTx=wwpVoiceGatewayPktsTx, wwpVoiceGatewayRsipKeepAliveInterval=wwpVoiceGatewayRsipKeepAliveInterval, wwpVoiceJitterBufferTargetPeriod=wwpVoiceJitterBufferTargetPeriod, wwpVoiceGatewayConfigJitterBufferTargetPeriod=wwpVoiceGatewayConfigJitterBufferTargetPeriod, wwpVoiceReset=wwpVoiceReset, wwpVoiceGatewayEndPointId=wwpVoiceGatewayEndPointId, wwpVoiceGatewayDropVoicePktsDuringEvents=wwpVoiceGatewayDropVoicePktsDuringEvents, wwpVoiceGatewaySipUserDisplayName=wwpVoiceGatewaySipUserDisplayName, wwpVoiceGatewaySipProxyPort=wwpVoiceGatewaySipProxyPort, wwpVoiceGatewayMIBCompliances=wwpVoiceGatewayMIBCompliances, wwpVoiceGatewayEndpoint=wwpVoiceGatewayEndpoint, wwpVoiceGatewayMIBConformance=wwpVoiceGatewayMIBConformance, wwpVoiceGatewayMIBNotifications=wwpVoiceGatewayMIBNotifications, wwpVoiceGatewaySilenceSuppression=wwpVoiceGatewaySilenceSuppression, wwpVoiceGatewaySendEventsViaRFC2833=wwpVoiceGatewaySendEventsViaRFC2833, wwpVoiceGatewaySIP=wwpVoiceGatewaySIP, wwpVoiceGatewaySipDialTimerLong=wwpVoiceGatewaySipDialTimerLong, wwpVoiceGatewaySipDialPlan=wwpVoiceGatewaySipDialPlan, wwpVoiceCallAgentEgressEvent=wwpVoiceCallAgentEgressEvent, wwpVoiceGatewayConfigProtocolType=wwpVoiceGatewayConfigProtocolType, wwpVoiceGatewayAudio=wwpVoiceGatewayAudio, wwpVoiceAccess=wwpVoiceAccess, wwpVoiceGatewaySIPServers=wwpVoiceGatewaySIPServers, wwpVoiceGatewayCallAgentUDPPort=wwpVoiceGatewayCallAgentUDPPort, wwpVoiceGateway=wwpVoiceGateway, wwpVoiceGatewayConfigJitterBufferMinPeriod=wwpVoiceGatewayConfigJitterBufferMinPeriod, wwpVoiceGatewayReset=wwpVoiceGatewayReset, wwpVoiceAutonomousFaxState=wwpVoiceAutonomousFaxState, wwpVoiceGatewayConfigPots=wwpVoiceGatewayConfigPots)
