#
# PySNMP MIB module CADANT-CMTS-DOWNCHANNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-DOWNCHANNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
cadSpectrum, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadSpectrum")
CardId, = mibBuilder.importSymbols("CADANT-TC", "CardId")
TenthdBmV, = mibBuilder.importSymbols("DOCS-IF-MIB", "TenthdBmV")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Counter64, MibIdentifier, Counter32, ObjectIdentity, Gauge32, IpAddress, NotificationType, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Counter64", "MibIdentifier", "Counter32", "ObjectIdentity", "Gauge32", "IpAddress", "NotificationType", "Unsigned32", "iso")
DisplayString, TimeInterval, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "TextualConvention", "RowStatus", "TruthValue")
cadDownchannelMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2))
cadDownchannelMib.setRevisions(('2015-10-27 00:00', '2015-10-07 00:00', '2015-09-30 00:00', '2015-09-08 00:00', '2015-08-19 00:00', '2015-08-12 00:00', '2015-06-23 00:00', '2015-05-01 00:00', '2015-04-27 00:00', '2015-03-04 00:00', '2015-02-18 00:00', '2015-02-17 00:00', '2015-02-13 00:00', '2015-02-06 00:00', '2015-01-16 00:00', '2014-11-26 00:00', '2014-11-17 00:00', '2014-05-20 00:00', '2014-04-03 00:00', '2014-01-16 00:00', '2013-10-13 00:00', '2013-03-15 00:00', '2013-02-26 00:00', '2013-01-14 00:00', '2012-10-17 00:00', '2012-10-15 00:00', '2011-09-27 00:00', '2011-08-30 00:00', '2010-06-10 00:00', '2010-05-03 00:00', '2010-04-01 00:00', '2009-12-16 00:00', '2008-04-03 00:00', '2007-10-09 00:00', '2007-09-28 00:00', '2007-02-07 00:00', '2007-01-22 00:00', '2006-11-01 00:00', '2006-08-30 00:00', '2006-08-28 00:00', '2006-02-24 00:00', '2005-06-21 00:00', '2004-12-03 00:00', '2004-03-04 00:00', '2003-07-03 00:00', '2002-12-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadDownchannelMib.setRevisionsDescriptions(('Add cadDsOfdmProfStat30SecCwUtil and cadDsOfdmProfStat30SecCwEff.', 'Change MAX-ACCESS of cadIfDownChannelAnnex to read-write.', 'Rename cadDsOfdmOcdDpdProfAInterval to cadDsOfdmDpdProfAInterval', 'Update CerOfdmModType and CerOfdmModBitsType', 'Re-type the OfdmProfileId from (1..16|256) to (1..3|256)', 'change default value of cadIfDownChannelPower and cadIfDsOfdmChlRfPortBasePower to 380', 'Add configured active subcarriers for licensing.', 'Change OFDM packet cable related MIB object range to (0..100).', 'Add cadDownChannelLsredMinThresh, cadDownChannelLsredMaxThresh, cadDownChannelLsredMaxProb and cadDownChannelVoiceShaping for Per Flow Downstream Latency Support.', 'Add cadDsOfdmProfStatTable', 'Add cadIfDsOfdmPowerCurrLevel, cadIfDsOfdmPowerMinLevel, and cadIfDsOfdmPowerMaxLevel to CadIfDsOfdmPowerEntry', 'change default value of cadIfDsOfdmChlRfPortBasePower to 390', 'Add cadDsOfdmProfExceptionTable and cadIfDsOfdmPowerTable', 'Reorganize cadIfDsOfdmChlEntry and cadIfDsOfdmChlDataEntry', 'Add cadDsOfdmOcdDpdPlcInterval, cadDsOfdmOcdDpdProfAInterval cadIfDsOfdmChlEntry, cadIfDsOfdmChlDataEntry, and cadDsOfdmProfileEntry', 'Remove cadIfCmtsDsTokenBucket as well as CadDsTokenBucketMode.', 'Change default value of cadIfDownChannelPower to 390 tenth dbmV.', 'Allow video channels to use a known channelId.', 'Add cadIfDownSpectralInversion to cadIfDownstreamChannelTable.', 'Revert cadIfDownChannelPower default value to 410', 'Change cadIfDownChannelPower range to (250..600), default value from 410 to 420', 'Add cadDownChannelOorRecoveryEnable', 'Change cadDownChannelAgcEnable default value to on.', 'Add cadDownChannelAgcEnable', 'Change cadIfDownChannelPower default value from 450 to 410', 'Change cadIfDownChannelPower range from (370..600) to (330..600)', 'Change default value of cadIfDownChannelPower from 490 to 450, and range (370..600)', 'Remove cadIfDownChannelAutoGainControlEnable. Change range of cadIfDownChannelPowerFineAdj.', 'Change default value of cadIfDownChannelPower from 500 to 490, and range (410..605)', 'Added non RFC 2670 interleave modes for annex B.', 'Added cadIfDownChannelAnnex back to support 24D/32D CAM.', 'Change default value of cadIfDownChannelModulation from qam64(3) to qam256(4).', 'Add cadDownChannelMaxFrequency and cadDownChannelMinFrequency.', 'Remove cadIfCmtsCapabilities, cadIfCmtsSyncInterval, cadIfCmtsUcdInterval, cadIfCmtsInsertionInterval, cadIfCmtsMaxServiceIds, cadIfCmtsInvitedRangingAttempts, cadIfCmtsInsertInterval, cadIfCmtsRangingInterval, cadIfCmtsRangeOpportunityCycle, cadIfCmtsCPEAgingInterval, cadIfCmtsSFAgingInterval, cadIfCmtsCardNumber, cadIfCmtsConfigured, cadIfCmtsTftpEnforce, cadIfCmtsDynamicSecret.', 'change cadIfDownChannelPower range from 43.5 to 60.5 dBmV.', 'Remove cadIfCmtsTftpEnforce and cadIfCmtsDynamicSecret.', 'Remove cadIfDownChannelAnnex', 'Change cadIfDownChannelIfIndex as the index of cadIfDownstreamChannelTable .', 'Add cadIfDownChannelPrimaryCapable to cadIfDownstreamChannelTable.', 'Add cadIfDownChannelIfIndex to cadIfDownstreamChannelTable.', 'Modify the range of cadIfDownChannelPowerFineAdj.', 'Included Traffic Shaping for 2D12U feature.', 'Included support for TFTP Enforce feature.', 'Populate read-write objects with defaults via DEFVAL.', 'Change definition of downstream channel to include slot.', 'Add PacketCable CAC Reserved and Allowed Values for Normal and Emergency Calls.',))
if mibBuilder.loadTexts: cadDownchannelMib.setLastUpdated('201510270000Z')
if mibBuilder.loadTexts: cadDownchannelMib.setOrganization('ARRIS Group, Inc.')
if mibBuilder.loadTexts: cadDownchannelMib.setContactInfo('ARRIS Technical Support Postal: ARRIS Phone: +1 630 281 3000 E-Mail: support@arris.com')
if mibBuilder.loadTexts: cadDownchannelMib.setDescription('ARRIS CMTS Downstream Channel Configuration and Constants')
class OfdmProfileId(TextualConvention, Integer32):
    description = 'The legal downstream profile IDs, plus one.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 3), ValueRangeConstraint(256, 256), )
class CerOfdmModType(TextualConvention, Integer32):
    description = 'A type definition the downstream OFDM bit-loading type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("qam0", 0), ("qpsk", 2), ("qam16", 4), ("qam64", 6), ("qam128", 7), ("qam256", 8), ("qam512", 9), ("qam1024", 10), ("qam2048", 11), ("qam4096", 12), ("qam8192", 13), ("qam16384", 14))

class CerOfdmModBitsType(TextualConvention, Bits):
    description = 'A BITS type definition the downstream OFDM/OFDMA bit-loading type.'
    status = 'current'
    namedValues = NamedValues(("qam32768", 0), ("qam16384", 1), ("qam8192", 2), ("qam4096", 3), ("qam2048", 4), ("qam1024", 5), ("qam512", 6), ("qam256", 7), ("qam128", 8), ("qam64", 9), ("qam32", 10), ("qam16", 11), ("qam8", 12), ("qpsk", 13), ("bpsk", 14), ("zeroBitload", 15))

cadIfDownstreamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1), )
if mibBuilder.loadTexts: cadIfDownstreamChannelTable.setReference('DOCSIS Radio Frequency Interface Specification, Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: cadIfDownstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: cadIfDownstreamChannelTable.setDescription('This table describes the attributes of downstream channels (frequency bands).')
cadIfDownstreamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1), ).setIndexNames((0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadIfDownChannelIfIndex"))
if mibBuilder.loadTexts: cadIfDownstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfDownstreamChannelEntry.setDescription('An entry provides a list of attributes for a single Downstream channel. An entry in this table exists for each ifEntry with an ifType of docsCableDownstream(128).')
cadIfDownChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDownChannelId.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelId.setDescription('The Cable Modem Termination System (CMTS) identification of the downstream channel within this particular MAC interface. If the interface is down, the object returns the most current value. If the downstream channel ID is unknown on a DOCSIS channel, this object returns a value of 0. A video downstream channel will have a value of -1.')
cadIfDownChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelFrequency.setReference('DOCSIS Radio Frequency Interface Specification, Section 4.3.3.')
if mibBuilder.loadTexts: cadIfDownChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelFrequency.setDescription('The center of the downstream frequency associated with this channel. This object will return the current tuner frequency. If this CMTS interface provides IF output only, this object will return 0 and will be treated as read-only. See the associated compliance object for a description of valid frequencies that may be written to this object.')
cadIfDownChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000000)).clone(6000000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelWidth.setReference('DOCSIS Radio Frequency Interface Specification, Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: cadIfDownChannelWidth.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelWidth.setDescription('The bandwidth of this downstream channel. Most implementations are expected to support a channel width of 6 MHz (North America) and/or 8 MHz (Europe). See the associated compliance object for a description of the valid channel widths for this object.')
cadIfDownChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("qam64", 3), ("qam256", 4))).clone('qam256')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelModulation.setReference('DOCSIS Radio Frequency Interface Specification, Section 3.6.2.')
if mibBuilder.loadTexts: cadIfDownChannelModulation.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelModulation.setDescription('The modulation type associated with this downstream channel. If the interface is down, this object either returns the configured value (CMTS), the most current value (CM), or the value of unknown(1). See the associated conformance object for write conditions and limitations. See the reference for specifics on the modulation profiles implied by qam64 and qam256.')
cadIfDownChannelInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("taps8Increment16", 3), ("taps16Increment8", 4), ("taps32Increment4", 5), ("taps64Increment2", 6), ("taps128Increment1", 7), ("taps12increment17", 8), ("taps128increment2", 9), ("taps128increment3", 10), ("taps128increment4", 11), ("taps128increment5", 12), ("taps128increment6", 13), ("taps128increment7", 14), ("taps128increment8", 15))).clone('taps32Increment4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelInterleave.setReference('DOCSIS Radio Frequency Interface Specification, Section 4.3.2.')
if mibBuilder.loadTexts: cadIfDownChannelInterleave.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelInterleave.setDescription('The Forward Error Correction (FEC) interleaving used for this downstream channel. Values are defined as follows: taps8Increment16(3): protection 5.9/4.1 usec, latency .22/.15 msec taps16Increment8(4): protection 12/8.2 usec, latency .48/.33 msec taps32Increment4(5): protection 24/16 usec, latency .98/.68 msec taps64Increment2(6): protection 47/33 usec, latency 2/1.4 msec taps128Increment1(7): protection 95/66 usec, latency 4/2.8 msec taps12increment17(8): protection 18/14 usec, latency 0.43/0.32 msec If the interface is down, this object either returns the configured value (CMTS), the most current value (CM), or the value of unknown(1). The value of other(2) is returned if the interleave is known but not defined in the above list. See the associated conformance object for write conditions and limitations. See the reference for the FEC configuration described by the setting of this object. non RFC 2670 interleave modes are only available for annex B.')
cadIfDownChannelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 6), TenthdBmV().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(250, 600), )).clone(380)).setUnits('dBmV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPower.setReference('DOCSIS Radio Frequency Interface Specification, Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: cadIfDownChannelPower.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPower.setDescription('The CMTS operational transmit power. If this CMTS interface does not support output power control then this object will return 0 and be treated as read-only. If the interface is down, this object either returns the configured value or the value of 0. See the reference for recommended and required power levels.')
cadIfDownChannelPowerFineAdj = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 0))).setUnits('Steps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPowerFineAdj.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPowerFineAdj.setDescription('At the CMTS, the fine power adjustments steps to increase or decrease the output power in incremental steps.')
cadIfCmtsCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 19), CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCardNumber.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCardNumber.setDescription('Card Number associated with this Channel.')
cadIfDownChannelCACL1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelCACL1Threshold.setReference('C4 Cable Modem Termination System (CMTS): Software Architecture Document')
if mibBuilder.loadTexts: cadIfDownChannelCACL1Threshold.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelCACL1Threshold.setDescription("Percentage of available bandwidth on the channel that can be reserved for admitted/active service flows before the channel goes into Level 1 Overload. When a channel goes into Level 1 Overload, a warning message will be logged. Service flow activation/admission will not be denied in Level 1 Overload. If the percentage is set to 0, the default value will be used and reading this object must return the the default L1 threshold. If a set operation tries to change the value of an existing instance of this object to any value that is higher than cadIfDownChannelCACL2Threshold or higher than cadIfDownChannelCACL3Threshold on the same row, then an 'inconsistentValue' error must be returned.")
cadIfDownChannelCACL2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelCACL2Threshold.setReference('C4 Cable Modem Termination System (CMTS): Software Architecture Document')
if mibBuilder.loadTexts: cadIfDownChannelCACL2Threshold.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelCACL2Threshold.setDescription("Percentage of available bandwidth on the channel that can be reserved for admitted/active service flows before the channel goes into Level 2 Overload. When a channel goes into Level 2 Overload, a warning message will be logged. Service flow activation/admission will not be denied in Level 2 Overload. A channel in Level 2 Overload is a good candidate for overload control or load balancing actions. If the percentage is set to 0, the default value will be used and reading this object must return the the default L2 threshold. If a set operation tries to change the value of an existing instance of this object to any value that is higher than cadIfDownChannelCACL3Threshold or lower than cadIfDownChannelCACL1Threshold on the same row, then an 'inconsistentValue' error must be returned.")
cadIfDownChannelCACL3Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelCACL3Threshold.setReference('C4 Cable Modem Termination System (CMTS): Software Architecture Document')
if mibBuilder.loadTexts: cadIfDownChannelCACL3Threshold.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelCACL3Threshold.setDescription("Percentage of available bandwidth on the channel that can be reserved for admitted/active service flows. A Registration Request, DSA Request or DSC Request will be denied due to temporary resource limitations if it would result in an active or admitted service flow whose mininum reserved bandwidth would cause this threshold to be exceeded on the downstream channel. If the percentage is set to 0, the default value will be used and reading this object must return the the default L3 threshold. If a set operation tries to change the value of an existing instance of this object to any value that is lower than cadIfDownChannelCACL1Threshold or lower than cadIfDownChannelCACL2Threshold on the same row, then an 'inconsistentValue' error must be returned.")
cadIfDownChannelMaxRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1600)).clone(1600)).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelMaxRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelMaxRoundTripDelay.setDescription('Maximum round-trip propagation delay for cable plant in Microseconds. Should be configured for the furthest CM in all cable groups containing this DownChannel. Default of 1600 Microseconds is approxiamately 100 miles between the CMTS and the furthest CM.')
cadIfDownChannelAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5))).clone('annexB')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelAnnex.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelAnnex.setDescription('The value of this object indicates the conformance of the implementation to important regional cable standards. annexA : Annex A from ITU-J83 is used. annexB : Annex B from ITU-J83 is used. annexC : Annex C from ITU-J83 is used.')
cadIfDownChannelPCNormAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPCNormAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDownChannelPCNormAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPCNormAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources non-exclusively allocated to sessions of this type. The default is set from the globals in CadPCMibBase.')
cadIfDownChannelPCNormResUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPCNormResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDownChannelPCNormResUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPCNormResUsage.setDescription('Minimum percentage of downstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources exclusively allocated to sessions of this type. If the value of this object is non-zero, then a portion of the downstream bandwidth will be set aside for normal telephony use only - reducing the bandwidth that is available for normal data. The default is set from the globals in CadPCMibBase.')
cadIfDownChannelPCEmerAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPCEmerAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDownChannelPCEmerAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPCEmerAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by emergency telephony services. The default is set from the globals in CadPCMibBase.')
cadIfDownChannelPCEmerResUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPCEmerResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDownChannelPCEmerResUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPCEmerResUsage.setDescription('Minimum percentage of downstream resources that may be used by emergency telephony services. If the value of this object is non-zero, then a portion of the downstream bandwidth will be set aside for normal telephony use only - reducing the bandwidth that is available for normal data. The default is set from the globals in CadPCMIbBase.')
cadIfDownChannelPCTotalAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPCTotalAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDownChannelPCTotalAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPCTotalAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by both normal and emergency telephony services. The default is set from the globals in CadPCMibBase.')
cadIfDownChannelPCPreemptionAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPCPreemptionAllowed.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDownChannelPCPreemptionAllowed.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPCPreemptionAllowed.setDescription('Indicates whether the system will preempt another session for an emergency call. The default is set from the globals in CadPCMibBase.')
cadIfDownChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 37), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDownChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelIfIndex.setDescription('the ifIndex of this downstream channel.')
cadIfDownChannelPrimaryCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 38), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownChannelPrimaryCapable.setStatus('current')
if mibBuilder.loadTexts: cadIfDownChannelPrimaryCapable.setDescription("When a row's cadIfDownChannelPrimaryCapable column is set to true(1) then DOCSIS SYNC message generation is enabled on the downstream channel. Otherwise, DOCSIS SYNC message generation is disabled.")
cadIfDownSpectralInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 1, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDownSpectralInversion.setStatus('current')
if mibBuilder.loadTexts: cadIfDownSpectralInversion.setDescription("When a row's cadIfDownSpectralInversion column is set to true(1), then spectral inversion is enabled. Otherwise, spectral inversion is disabled. Note that spectral inversion is a video PHY parameter not used with DOCSIS channels; it is only used for channels of type VOD and video-replica.")
cadDownChannelParams = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2))
cadDownChannelMaxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(858000000, 858000000), ValueRangeConstraint(867000000, 867000000), ValueRangeConstraint(999000000, 999000000), )).clone(867000000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelMaxFrequency.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelMaxFrequency.setDescription('This object is used to configure the C4 CMTS to accept maximum downstream frequency limit that conform with the EuroDOCSIS specifications (starndard range 112 MHz to 858 MHz), (extended 85 MHz to 999MHz) or to the DOCSIS specifications (standard 91 to 867 MHz), (extended range 57 MHz to 999 MHz). Changes to downstream frequency and width are verified against this object to ensure the C4 CMTS does not exceed the downstream spectrum limits imposed by this object. Attempting to decrease the downstream frequency spectrum implied by this object will fail if at least a single downstream is configured outside of the range for the new value. It is recommended this object be set during initial system setup.')
cadDownChannelMinFrequency = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(57000000, 57000000), ValueRangeConstraint(85000000, 85000000), ValueRangeConstraint(91000000, 91000000), ValueRangeConstraint(112000000, 112000000), )).clone(91000000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelMinFrequency.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelMinFrequency.setDescription('This object is used to configure the C4 CMTS to accept minimum downstream frequency limit that conform with the EuroDOCSIS specifications (starndard range 112 MHz to 858 MHz), (extended 85 MHz to 999MHz) or to the DOCSIS specifications (standard 91 to 867 MHz), (extended range 57 MHz to 999 MHz). Changes to downstream frequency and width are verified against this object to ensure the C4 CMTS does not exceed the downstream spectrum limits imposed by this object. Attempting to increase the minimum downstream frequency limit implied by this object will fail if at least a single downstream is configured outside of the range for the new value. It is recommended this object be set during initial system setup.')
cadDownChannelAgcEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelAgcEnable.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelAgcEnable.setDescription('Enable Automatic Gain Control on DCAMs.')
cadDownChannelOorRecoveryEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelOorRecoveryEnable.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelOorRecoveryEnable.setDescription('True to enable toggling the Sequence Change Count for a DSID in response to a CM-STATUS sequence number Out-Of-Range message.')
cadDsOfdmOcdDpdPlcInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250)).clone(200)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDsOfdmOcdDpdPlcInterval.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmOcdDpdPlcInterval.setDescription('How often to send the OCD and DPD messages on a channel over the PLC.')
cadDsOfdmDpdProfAInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 600)).clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDsOfdmDpdProfAInterval.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmDpdProfAInterval.setDescription('How often to send the DPD messages on a channel using profile A.')
cadDownChannelLsredMinThresh = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelLsredMinThresh.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelLsredMinThresh.setDescription('This parameter defines the start of the downstream latency region where packets are randomly dropped. This value must be less than or equal to cadDownChannelLsredMaxThresh.')
cadDownChannelLsredMaxThresh = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500)).clone(2500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelLsredMaxThresh.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelLsredMaxThresh.setDescription('This parameter defines the end of the downstream latency region where packets are randomly dropped. This value must be greater than or equal to cadDownChannelLsredMinThresh.')
cadDownChannelLsredMaxProb = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(10000)).setUnits('0.01%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelLsredMaxProb.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelLsredMaxProb.setDescription('This parameter defines the drop probability of a packet when its downstream latency is equal to cadDownChannelLsredMaxThresh. The probability of dropping a packet varies linearly from 0% at a latency of cadDownChannelLsredMinThresh and the value of this parameter at cadDownChannelLsredMaxThresh.')
cadDownChannelVoiceShaping = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 2, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDownChannelVoiceShaping.setStatus('current')
if mibBuilder.loadTexts: cadDownChannelVoiceShaping.setDescription('This parameter defines whether downstream voice packets should be shaped or not. When this this parameter is set to false, voice packets that do not conform to the policing parameters are dropped instead of being delayed.')
cadIfDsOfdmPowerTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3), )
if mibBuilder.loadTexts: cadIfDsOfdmPowerTable.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerTable.setDescription('This status table contains the power parameters for a DS OFDM channel.')
cadIfDsOfdmPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3, 1), ).setIndexNames((0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadIfDsOfdmPowerIfIndex"), (0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadIfDsOfdmPowerFrequency"))
if mibBuilder.loadTexts: cadIfDsOfdmPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerEntry.setDescription('An entry shows the power setting and measured power for one of the frequencies within an OFDM channel.')
cadIfDsOfdmPowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadIfDsOfdmPowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerIfIndex.setDescription('The ifIndex of this downstream OFDM channel.')
cadIfDsOfdmPowerFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 192))).setUnits('MHz')
if mibBuilder.loadTexts: cadIfDsOfdmPowerFrequency.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmPowerFrequency.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerFrequency.setDescription('A relative frequency within the OFDM channel for power control/status, in 6 MHz increments(i.e., legal values are 3, 9, 15, etc).')
cadIfDsOfdmPowerFineAdjustment = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3, 1, 3), TenthdBmV().subtype(subtypeSpec=ValueRangeConstraint(-80, 0))).setUnits('dBmVtenths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmPowerFineAdjustment.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerFineAdjustment.setDescription('The configured power for this OFDM channel frequency. This consists of the base RF port power per channel plus any configured tilt adjustment.')
cadIfDsOfdmPowerCurrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3, 1, 4), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmPowerCurrLevel.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerCurrLevel.setDescription(' The latest downstream power level reported by the port for this frequency. ')
cadIfDsOfdmPowerMinLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3, 1, 5), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmPowerMinLevel.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerMinLevel.setDescription(' The minimum downstream power level read on the port for this frequency.')
cadIfDsOfdmPowerMaxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 3, 1, 6), TenthdBmV()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmPowerMaxLevel.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmPowerMaxLevel.setDescription(' The minimum downstream power level reported by the port for this frequency.')
cadIfDsOfdmChlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5), )
if mibBuilder.loadTexts: cadIfDsOfdmChlTable.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlTable.setDescription('This table describes the attributes of downstream OFDM channels.')
cadIfDsOfdmChlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1), ).setIndexNames((0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadIfDsOfdmChlIfIndex"))
if mibBuilder.loadTexts: cadIfDsOfdmChlEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlEntry.setDescription('An entry provides a list of attributes for a single OFDM Downstream channel. An entry in this table exists for each ifEntry with an ifType of docsOfdmDownstream (277).')
cadIfDsOfdmChlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadIfDsOfdmChlIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlIfIndex.setDescription('The ifIndex of this OFDM downstream channel.')
cadIfDsOfdmChlLowFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(108000000, 1770000000), ))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlLowFreq.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmChlLowFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlLowFreq.setDescription('The lowest subcarrier center frequency of the low guard band just below the encompassed spectrum. While this is the center frequency of a subcarrier, it is the low edge frequency of the OFDM channel. The center frequency of subcarrier zero is 6.4 MHz less than this value. Zero means not configured. Must be configured to go in-service.')
cadIfDsOfdmChlHighFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(132000000, 1794000000), ))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlHighFreq.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmChlHighFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlHighFreq.setDescription('The highest subcarrier center frequency of the high guard band just above the encompassed spectrum. While this is the center frequency of a subcarrier, it is the high edge frequency of the OFDM channel. Zero means not configured. 24 MHz <= (HighFreqEdge - LowFreqEdge) <= 192 MHz. Must be configured to go in-service.')
cadIfDsOfdmChlPlcBlkLowSubcCentFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(108000000, 1788000000), ))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlPlcBlkLowSubcCentFreq.setReference('DOCSIS Physical Layer Specification, Physical Layer Link Channel')
if mibBuilder.loadTexts: cadIfDsOfdmChlPlcBlkLowSubcCentFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPlcBlkLowSubcCentFreq.setDescription('The center frequency of the lowest frequency subcarrier of the 6 MHz encompassed spectrum containing the PLC. Must be an integral number of Megahertz. Zero means not configured. Must be configured to go in-service.')
cadIfDsOfdmChlCyclicPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(192, 192), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(768, 768), ValueRangeConstraint(1024, 1024), )).clone(1024)).setUnits('samples').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlCyclicPrefix.setReference('DOCSIS Physical Layer Specification, Table 7-34.')
if mibBuilder.loadTexts: cadIfDsOfdmChlCyclicPrefix.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlCyclicPrefix.setDescription('The cyclic-prefix, converted into samples using the sample rate of 204.8 Million samples/second.')
cadIfDsOfdmChlRolloffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(192, 192), ValueRangeConstraint(256, 256), )).clone(256)).setUnits('samples').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlRolloffPeriod.setReference('DOCSIS Physical Layer Specification, Table 7-35.')
if mibBuilder.loadTexts: cadIfDsOfdmChlRolloffPeriod.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlRolloffPeriod.setDescription('The roll-off period used in windowing, converted into samples using the sample rate of 204.8 Million samples/second.')
cadIfDsOfdmChlTimeIntlvrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setUnits('symbols').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlTimeIntlvrDepth.setReference('DOCSIS Physical Layer Specification, Section 7.5.6.1')
if mibBuilder.loadTexts: cadIfDsOfdmChlTimeIntlvrDepth.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlTimeIntlvrDepth.setDescription('The number of symbols in the time domain for interleaving. The range is 1..32 for 50 KHz subcarrier spacing, and 1..16 for 25 KHz spacing. A value of one means no time interleaving.')
cadIfDsOfdmChlSubcSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25000, 25000), ValueRangeConstraint(50000, 50000), )).clone(50000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlSubcSpacing.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmChlSubcSpacing.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlSubcSpacing.setDescription('The subcarrier frequency width for this OFDM channel.')
cadIfDsOfdmChlContPilotScaleFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48, 120)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlContPilotScaleFactor.setReference('DOCSIS Physical Layer Specification, Section 7.5.15.2.2')
if mibBuilder.loadTexts: cadIfDsOfdmChlContPilotScaleFactor.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlContPilotScaleFactor.setDescription('The scale factor M used to calculate the total number of continuous pilots defined using the PLC. The number of continuous pilots also depends on the encompassed bandwidth.')
cadIfDsOfdmChlMaxRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1600)).clone(800)).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlMaxRoundTripDelay.setReference('DOCSIS Physical Layer Specification,Section 1.2.1')
if mibBuilder.loadTexts: cadIfDsOfdmChlMaxRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlMaxRoundTripDelay.setDescription('Maximum round-trip propagation delay for cable plant in Microseconds. Should be configured for the furthest CM in all cable groups containing this DownChannel. Default of 800 Microseconds is approxiamately 50 miles between the CMTS and the furthest CM.')
cadIfDsOfdmChlPCNormAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCNormAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCNormAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPCNormAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources non-exclusively allocated to sessions of this type. The default is set from the globals in CadPCMibBase.')
cadIfDsOfdmChlPCNormResUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCNormResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCNormResUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPCNormResUsage.setDescription('Minimum percentage of downstream resources that may be used by non-emergency telephony services. This is also the maximum amount of resources exclusively allocated to sessions of this type. If the value of this object is non-zero, then a portion of the downstream bandwidth will be set aside for normal telephony use only - reducing the bandwidth that is available for normal data. The default is set from the globals in CadPCMibBase.')
cadIfDsOfdmChlPCEmerAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCEmerAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCEmerAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPCEmerAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by emergency telephony services. The default is set from the globals in CadPCMibBase.')
cadIfDsOfdmChlPCEmerResUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCEmerResUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCEmerResUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPCEmerResUsage.setDescription('Minimum percentage of downstream resources that may be used by emergency telephony services. If the value of this object is non-zero, then a portion of the downstream bandwidth will be set aside for normal telephony use only - reducing the bandwidth that is available for normal data. The default is set from the globals in CadPCMIbBase.')
cadIfDsOfdmChlPCTotalAllowedUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCTotalAllowedUsage.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCTotalAllowedUsage.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPCTotalAllowedUsage.setDescription('Maximum percentage of downstream resources that may be used by both normal and emergency telephony services. The default is set from the globals in CadPCMibBase.')
cadIfDsOfdmChlPCPreemptionAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCPreemptionAllowed.setReference("'Cadant CMTS Requirements for PacketCable' requirement 3.3.3.0.2")
if mibBuilder.loadTexts: cadIfDsOfdmChlPCPreemptionAllowed.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPCPreemptionAllowed.setDescription('Indicates whether the system will preempt another session for an emergency call. The default is set from the globals in CadPCMibBase.')
cadIfDsOfdmChlRfPortBasePower = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 17), TenthdBmV().subtype(subtypeSpec=ValueRangeConstraint(250, 600)).clone(380)).setUnits('dBmV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfDsOfdmChlRfPortBasePower.setReference('DOCSIS Radio Frequency Interface Specification, Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: cadIfDsOfdmChlRfPortBasePower.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlRfPortBasePower.setDescription('The CCAP operational transmit power. See the reference for recommended and required power levels for the equivalent total number of 6 MHz channels on the RF port. The default is the DRFI maximum for 48 6 MHz SC channels plus one 96 MHz OFDM channel equaling 16 equivalent channels, for a total of 64 equivalent 6 Mhz channels.')
cadIfDsOfdmChlSubcZeroCentFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 18), Integer32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmChlSubcZeroCentFreq.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmChlSubcZeroCentFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlSubcZeroCentFreq.setDescription('The center frequency of subcarrier 0. This is 102.4 MHz less than (cadIfDsOfdmChlLowFreq + cadIfDsOfdmChlHighFreq)/2 if cadIfDsOfdmChlLowFreq is divisible by 250 KHz. Otherwise, it is 102.525 MHz less than (cadIfDsOfdmChlLowFreq + cadIfDsOfdmChlHighFreq)/2.')
cadIfDsOfdmChlLowActSubcCentFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 19), Integer32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmChlLowActSubcCentFreq.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmChlLowActSubcCentFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlLowActSubcCentFreq.setDescription('The low center frequency of the lowest active subcarrier in the OFDM channel. The low edge of the encompassed spectrum is half a subcarrier less than this value.')
cadIfDsOfdmChlHighActSubcCentFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 20), Integer32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmChlHighActSubcCentFreq.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmChlHighActSubcCentFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlHighActSubcCentFreq.setDescription('The high center frequency of the highest active subcarrier in the the OFDM channel. The high edge of the encompassed spectrum is half a subcarrier more than this value.')
cadIfDsOfdmChlPlcLowSubcCentFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 21), Integer32()).setUnits('hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmChlPlcLowSubcCentFreq.setReference('DOCSIS Physical Layer Specification, Physical Layer Link Channel, section 7.5.13.1')
if mibBuilder.loadTexts: cadIfDsOfdmChlPlcLowSubcCentFreq.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlPlcLowSubcCentFreq.setDescription('The center frequency of the lowest frequency subcarrier of the PLC itself. By definition, this is 2.8 MHz higher than cadIfDsOfdmChlPlcBlkLowSubcCentFreq (i.e., the PLC block is 6 MHz, and the 400 KHz PLC is centered in that block).')
cadIfDsOfdmChlNumActSubc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmChlNumActSubc.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadIfDsOfdmChlNumActSubc.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlNumActSubc.setDescription('The configured number of subcarriers based on the high and low center frequencies of the active subcarriers in the the OFDM channel.')
cadIfDsOfdmChlDataTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 6), )
if mibBuilder.loadTexts: cadIfDsOfdmChlDataTable.setReference('DOCSIS Radio Frequency Interface Specification, Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: cadIfDsOfdmChlDataTable.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlDataTable.setDescription('This table describes the read-only attributes of downstream OFDM channels (frequency bands).')
cadIfDsOfdmChlDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 6, 1), )
cadIfDsOfdmChlEntry.registerAugmentions(("CADANT-CMTS-DOWNCHANNEL-MIB", "cadIfDsOfdmChlDataEntry"))
cadIfDsOfdmChlDataEntry.setIndexNames(*cadIfDsOfdmChlEntry.getIndexNames())
if mibBuilder.loadTexts: cadIfDsOfdmChlDataEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlDataEntry.setDescription('An entry provides a list of read-only attributes for a single OFDM downstream channel. An entry in this table exists for each ifEntry with an ifType of docsOfdmDownstream (277).')
cadIfDsOfdmChlDataNumActSubcarriers = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(200, 7600), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmChlDataNumActSubcarriers.setReference('DOCSIS Physical Layer Specification, Physical Layer Link Channel')
if mibBuilder.loadTexts: cadIfDsOfdmChlDataNumActSubcarriers.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlDataNumActSubcarriers.setDescription('The number of non-excluded subcarriers in the OFDM channel. 7600 is the maximum allowed for a 190 MHz of active Spectrum. 350 would be the worst case for 22 MHz of Active spectrum with 50 KHz subcarriers, with 20 percent exclusions.')
cadIfDsOfdmChlDataNumContPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 128), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfDsOfdmChlDataNumContPilots.setStatus('current')
if mibBuilder.loadTexts: cadIfDsOfdmChlDataNumContPilots.setDescription('The total number of continuous pilots. The total number of of continuous pilots is the number defined by the PLC plus the 8 pre-defined ones positioned around the PLC.')
cadDsOfdmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 8), )
if mibBuilder.loadTexts: cadDsOfdmProfileTable.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfileTable.setDescription('This table defines the profiles assigned to an OFDM channel.')
cadDsOfdmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 8, 1), ).setIndexNames((0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadDsOfdmProfileIfIndex"), (0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadDsOfdmProfileId"))
if mibBuilder.loadTexts: cadDsOfdmProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfileEntry.setDescription('An entry defines one profile on one channel.')
cadDsOfdmProfileIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadDsOfdmProfileIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfileIfIndex.setDescription('The ifIndex of the channel using this profile.')
cadDsOfdmProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 8, 1, 2), OfdmProfileId())
if mibBuilder.loadTexts: cadDsOfdmProfileId.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfileId.setDescription('The ID of a profile plus one.')
cadDsOfdmProfileDefBitload = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 8, 1, 3), CerOfdmModType().clone('qam1024')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsOfdmProfileDefBitload.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfileDefBitload.setDescription('The default bit-loading (modulation) for this profile. If cadDsOfdmProfileId is 256, only qpsk, qam16, and qam64 are legal. Otherwise, all but qpsk and qam0 are legal.')
cadDsOfdmProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsOfdmProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfileRowStatus.setDescription('The RowStatus for controlling entries in this table.')
cadDsOfdmProfStatTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9), )
if mibBuilder.loadTexts: cadDsOfdmProfStatTable.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatTable.setDescription('This table provides counts and the average bits per Hertz per OFDM channel per profile.')
cadDsOfdmProfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1), ).setIndexNames((0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadDsOfdmProfStatIfIndex"), (0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadDsOfdmProfStatProfId"))
if mibBuilder.loadTexts: cadDsOfdmProfStatEntry.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatEntry.setDescription('An entry provides the values for one profile on one channel.')
cadDsOfdmProfStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadDsOfdmProfStatIfIndex.setReference('DOCSIS 3.1 CCAP OSSI Specification, Section Downstream OFDM Status Objects')
if mibBuilder.loadTexts: cadDsOfdmProfStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatIfIndex.setDescription('The ifIndex of this OFDM downstream channel.')
cadDsOfdmProfStatProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 2), OfdmProfileId())
if mibBuilder.loadTexts: cadDsOfdmProfStatProfId.setReference('DOCSIS 3.1 CCAP OSSI Specification, Section Downstream OFDM Status Objects')
if mibBuilder.loadTexts: cadDsOfdmProfStatProfId.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatProfId.setDescription('The profile number plus one of this profile on this channel.')
cadDsOfdmProfStatAvgBitsPerSubc = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 3), Unsigned32()).setUnits('HundredthBit').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDsOfdmProfStatAvgBitsPerSubc.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatAvgBitsPerSubc.setDescription('The average number of bits per subcarrier times 100 across all active subcarriers on the channel, rounded to nearest hundredth. Continuous pilots and subcarriers in the PLC are not included in this calculation, even though they are active. NCP subcarriers are counted as if they could carry data, because it is too difficult to factor them out, given their variability.')
cadDsOfdmProfStatReqMods = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 4), CerOfdmModBitsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDsOfdmProfStatReqMods.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatReqMods.setDescription('The modulations used by this profile and any exceptions to this profile.')
cadDsOfdmProfStatEtherFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDsOfdmProfStatEtherFrameBytes.setReference('DOCSIS 3.1 CCAP OSSI Specification, Section Downstream OFDM Status Objects')
if mibBuilder.loadTexts: cadDsOfdmProfStatEtherFrameBytes.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatEtherFrameBytes.setDescription('The count of Layer 2 Ethernet frame bytes that have been sent on this channel using this specific profile.')
cadDsOfdmProfStatTotalCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDsOfdmProfStatTotalCodewords.setReference('DOCSIS 3.1 CCAP OSSI Specification, Section Downstream OFDM Status Objects')
if mibBuilder.loadTexts: cadDsOfdmProfStatTotalCodewords.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStatTotalCodewords.setDescription('The number of codewords sent on this channel using this specific profile.')
cadDsOfdmProfStat30SecCwUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDsOfdmProfStat30SecCwUtil.setReference('DOCSIS 3.1 CCAP OSSI Specification, Section Downstream OFDM Status Objects')
if mibBuilder.loadTexts: cadDsOfdmProfStat30SecCwUtil.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStat30SecCwUtil.setDescription('The codeword utilization percentage of this profile on this channel. The utilization is measured over the last 30 seconds.')
cadDsOfdmProfStat30SecCwEff = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDsOfdmProfStat30SecCwEff.setReference('DOCSIS 3.1 CCAP OSSI Specification, Section Downstream OFDM Status Objects')
if mibBuilder.loadTexts: cadDsOfdmProfStat30SecCwEff.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfStat30SecCwEff.setDescription('The Efficiency percentage of this profile on this channel over the last 30 seconds (i.e,. the average number of data bits per codeword used by this profile, divided by the size of a codeword).')
cadDsOfdmProfExceptionTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11), )
if mibBuilder.loadTexts: cadDsOfdmProfExceptionTable.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionTable.setDescription('This table defines exceptions to profiles on an OFDM channel.')
cadDsOfdmProfExceptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1), ).setIndexNames((0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadDsOfdmProfExceptionIfIndex"), (0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadDsOfdmProfExceptionProfId"), (0, "CADANT-CMTS-DOWNCHANNEL-MIB", "cadDsOfdmProfExceptionLowFreq"))
if mibBuilder.loadTexts: cadDsOfdmProfExceptionEntry.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionEntry.setDescription('An entry defines one profile exception.')
cadDsOfdmProfExceptionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadDsOfdmProfExceptionIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionIfIndex.setDescription('The ifIndex of the channel using this profile.')
cadDsOfdmProfExceptionProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 2), OfdmProfileId())
if mibBuilder.loadTexts: cadDsOfdmProfExceptionProfId.setReference('DOCSIS OSSI Specification,Section DsOfdmProfExceptionCfg')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionProfId.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionProfId.setDescription('The Id of a profile plus one.')
cadDsOfdmProfExceptionLowFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(108000000, 1770000000))).setUnits('hertz')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionLowFreq.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionLowFreq.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionLowFreq.setDescription('The low edge frequency of a frequency range being assigned a different bit-loading type from the default for the profile.')
cadDsOfdmProfExceptionHighFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(108000000, 1770000000), ))).setUnits('hertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsOfdmProfExceptionHighFreq.setReference('DOCSIS Physical Layer Specification, Table 7-36.')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionHighFreq.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionHighFreq.setDescription('The high edge frequency of a frequency range being assigned a different bit-loading type from the default for the profile.')
cadDsOfdmProfExceptionSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsOfdmProfExceptionSkip.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionSkip.setDescription('True if using different bit-loading for odd and even numbered subcarriers in this frequency range. False if all subcarriers in the range use the single bit-loading type given by cadDsOfdmProfExceptionMainBitload.')
cadDsOfdmProfExceptionMainBitload = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 6), CerOfdmModType().clone('qam1024')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsOfdmProfExceptionMainBitload.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionMainBitload.setDescription('The main bit-loading (modulation) for this frequency range. If skip is true, this is the bit-loading for only the even numbered subcarriers. If false, it is for all subcarriers.')
cadDsOfdmProfExceptionOddBitload = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 7), CerOfdmModType().clone('qam0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsOfdmProfExceptionOddBitload.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionOddBitload.setDescription('The bit-loading (modulation) for the odd numbered subcarriers when skip is true. Ignored if skip is false.')
cadDsOfdmProfExceptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 2, 11, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsOfdmProfExceptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadDsOfdmProfExceptionRowStatus.setDescription('The RowStatus for controlling entries in this table.')
mibBuilder.exportSymbols("CADANT-CMTS-DOWNCHANNEL-MIB", cadDownChannelAgcEnable=cadDownChannelAgcEnable, cadIfDownChannelPCEmerResUsage=cadIfDownChannelPCEmerResUsage, cadDsOfdmProfileIfIndex=cadDsOfdmProfileIfIndex, cadIfDsOfdmChlLowFreq=cadIfDsOfdmChlLowFreq, cadDsOfdmProfileEntry=cadDsOfdmProfileEntry, cadDsOfdmProfExceptionHighFreq=cadDsOfdmProfExceptionHighFreq, cadIfDownstreamChannelEntry=cadIfDownstreamChannelEntry, cadDsOfdmDpdProfAInterval=cadDsOfdmDpdProfAInterval, cadDsOfdmProfStatTable=cadDsOfdmProfStatTable, cadIfDownChannelCACL3Threshold=cadIfDownChannelCACL3Threshold, cadIfDownChannelFrequency=cadIfDownChannelFrequency, cadIfDsOfdmChlPlcLowSubcCentFreq=cadIfDsOfdmChlPlcLowSubcCentFreq, cadIfDsOfdmChlMaxRoundTripDelay=cadIfDsOfdmChlMaxRoundTripDelay, cadIfDownChannelCACL1Threshold=cadIfDownChannelCACL1Threshold, cadIfDownChannelInterleave=cadIfDownChannelInterleave, cadDsOfdmProfExceptionOddBitload=cadDsOfdmProfExceptionOddBitload, cadDsOfdmProfileRowStatus=cadDsOfdmProfileRowStatus, cadIfDownChannelPrimaryCapable=cadIfDownChannelPrimaryCapable, cadDownChannelOorRecoveryEnable=cadDownChannelOorRecoveryEnable, cadIfDsOfdmChlCyclicPrefix=cadIfDsOfdmChlCyclicPrefix, cadDownChannelLsredMaxThresh=cadDownChannelLsredMaxThresh, cadIfDsOfdmPowerTable=cadIfDsOfdmPowerTable, cadDownChannelParams=cadDownChannelParams, cadIfDsOfdmPowerMaxLevel=cadIfDsOfdmPowerMaxLevel, cadIfDsOfdmChlHighActSubcCentFreq=cadIfDsOfdmChlHighActSubcCentFreq, cadIfDsOfdmChlPCEmerResUsage=cadIfDsOfdmChlPCEmerResUsage, cadIfDownChannelMaxRoundTripDelay=cadIfDownChannelMaxRoundTripDelay, cadIfDsOfdmChlPCNormResUsage=cadIfDsOfdmChlPCNormResUsage, cadIfDownChannelCACL2Threshold=cadIfDownChannelCACL2Threshold, cadIfDsOfdmChlNumActSubc=cadIfDsOfdmChlNumActSubc, cadDsOfdmProfStatProfId=cadDsOfdmProfStatProfId, OfdmProfileId=OfdmProfileId, cadIfDownChannelAnnex=cadIfDownChannelAnnex, CerOfdmModBitsType=CerOfdmModBitsType, cadDsOfdmProfStatAvgBitsPerSubc=cadDsOfdmProfStatAvgBitsPerSubc, cadIfDsOfdmChlDataEntry=cadIfDsOfdmChlDataEntry, cadIfDsOfdmChlTimeIntlvrDepth=cadIfDsOfdmChlTimeIntlvrDepth, cadDownChannelLsredMinThresh=cadDownChannelLsredMinThresh, cadIfCmtsCardNumber=cadIfCmtsCardNumber, cadIfDownChannelIfIndex=cadIfDownChannelIfIndex, cadDsOfdmProfExceptionProfId=cadDsOfdmProfExceptionProfId, cadIfDownChannelPower=cadIfDownChannelPower, cadIfDsOfdmPowerMinLevel=cadIfDsOfdmPowerMinLevel, cadIfDownChannelPCNormAllowedUsage=cadIfDownChannelPCNormAllowedUsage, cadDsOfdmProfStatIfIndex=cadDsOfdmProfStatIfIndex, cadIfDsOfdmChlPCPreemptionAllowed=cadIfDsOfdmChlPCPreemptionAllowed, cadDsOfdmProfStatEtherFrameBytes=cadDsOfdmProfStatEtherFrameBytes, cadIfDsOfdmChlPCNormAllowedUsage=cadIfDsOfdmChlPCNormAllowedUsage, cadIfDownChannelPowerFineAdj=cadIfDownChannelPowerFineAdj, cadDsOfdmProfStat30SecCwEff=cadDsOfdmProfStat30SecCwEff, cadIfDownChannelModulation=cadIfDownChannelModulation, cadDsOfdmProfExceptionEntry=cadDsOfdmProfExceptionEntry, cadIfDsOfdmChlRolloffPeriod=cadIfDsOfdmChlRolloffPeriod, cadIfDsOfdmChlDataTable=cadIfDsOfdmChlDataTable, cadDsOfdmProfExceptionIfIndex=cadDsOfdmProfExceptionIfIndex, cadIfDsOfdmChlSubcZeroCentFreq=cadIfDsOfdmChlSubcZeroCentFreq, cadDownChannelMaxFrequency=cadDownChannelMaxFrequency, cadIfDsOfdmPowerFineAdjustment=cadIfDsOfdmPowerFineAdjustment, cadIfDsOfdmChlPCTotalAllowedUsage=cadIfDsOfdmChlPCTotalAllowedUsage, cadIfDsOfdmChlIfIndex=cadIfDsOfdmChlIfIndex, PYSNMP_MODULE_ID=cadDownchannelMib, cadIfDsOfdmChlEntry=cadIfDsOfdmChlEntry, cadDsOfdmProfExceptionSkip=cadDsOfdmProfExceptionSkip, cadIfDsOfdmPowerIfIndex=cadIfDsOfdmPowerIfIndex, cadDownChannelMinFrequency=cadDownChannelMinFrequency, cadIfDsOfdmChlPlcBlkLowSubcCentFreq=cadIfDsOfdmChlPlcBlkLowSubcCentFreq, cadDsOfdmProfExceptionRowStatus=cadDsOfdmProfExceptionRowStatus, cadIfDownChannelPCPreemptionAllowed=cadIfDownChannelPCPreemptionAllowed, cadDsOfdmProfStat30SecCwUtil=cadDsOfdmProfStat30SecCwUtil, cadIfDownstreamChannelTable=cadIfDownstreamChannelTable, cadIfDownChannelId=cadIfDownChannelId, cadIfDownChannelPCTotalAllowedUsage=cadIfDownChannelPCTotalAllowedUsage, cadIfDownChannelWidth=cadIfDownChannelWidth, cadIfDownSpectralInversion=cadIfDownSpectralInversion, cadIfDsOfdmChlDataNumActSubcarriers=cadIfDsOfdmChlDataNumActSubcarriers, cadIfDsOfdmChlHighFreq=cadIfDsOfdmChlHighFreq, cadDsOfdmProfStatEntry=cadDsOfdmProfStatEntry, cadIfDsOfdmChlDataNumContPilots=cadIfDsOfdmChlDataNumContPilots, cadDsOfdmProfExceptionLowFreq=cadDsOfdmProfExceptionLowFreq, cadIfDownChannelPCNormResUsage=cadIfDownChannelPCNormResUsage, cadIfDsOfdmChlContPilotScaleFactor=cadIfDsOfdmChlContPilotScaleFactor, cadIfDsOfdmPowerEntry=cadIfDsOfdmPowerEntry, cadDsOfdmProfExceptionMainBitload=cadDsOfdmProfExceptionMainBitload, cadDsOfdmProfileId=cadDsOfdmProfileId, cadDsOfdmProfStatTotalCodewords=cadDsOfdmProfStatTotalCodewords, cadIfDsOfdmChlLowActSubcCentFreq=cadIfDsOfdmChlLowActSubcCentFreq, cadDsOfdmOcdDpdPlcInterval=cadDsOfdmOcdDpdPlcInterval, cadIfDsOfdmPowerCurrLevel=cadIfDsOfdmPowerCurrLevel, cadDownChannelVoiceShaping=cadDownChannelVoiceShaping, cadIfDsOfdmChlTable=cadIfDsOfdmChlTable, cadIfDsOfdmChlPCEmerAllowedUsage=cadIfDsOfdmChlPCEmerAllowedUsage, cadIfDsOfdmPowerFrequency=cadIfDsOfdmPowerFrequency, cadDsOfdmProfStatReqMods=cadDsOfdmProfStatReqMods, cadIfDsOfdmChlSubcSpacing=cadIfDsOfdmChlSubcSpacing, cadDsOfdmProfExceptionTable=cadDsOfdmProfExceptionTable, cadDownchannelMib=cadDownchannelMib, cadDsOfdmProfileDefBitload=cadDsOfdmProfileDefBitload, cadDownChannelLsredMaxProb=cadDownChannelLsredMaxProb, cadIfDownChannelPCEmerAllowedUsage=cadIfDownChannelPCEmerAllowedUsage, cadIfDsOfdmChlRfPortBasePower=cadIfDsOfdmChlRfPortBasePower, cadDsOfdmProfileTable=cadDsOfdmProfileTable, CerOfdmModType=CerOfdmModType)
