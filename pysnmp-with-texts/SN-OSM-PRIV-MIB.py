#
# PySNMP MIB module SN-OSM-PRIV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SN-OSM-PRIV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:07:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, Bits, Unsigned32, ModuleIdentity, Counter32, TimeTicks, iso, internet, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, ObjectIdentity, IpAddress, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Bits", "Unsigned32", "ModuleIdentity", "Counter32", "TimeTicks", "iso", "internet", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "ObjectIdentity", "IpAddress", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ad = MibIdentifier((1, 3, 6, 1, 4, 1, 4196))
adProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1))
simaticNet = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1))
iHub = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 1))
iSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2))
snOsmItp62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 1))
snOsmItp53 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 2))
snOsmItpLd62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 3))
snEsmItp80 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 4))
snOsmTp62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 5))
snEsmTp80 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 6))
snOsmBC08 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 7))
snOsmTpLd62 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 8))
snOsmTp22 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 9))
snEsmTp40 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 10))
snOsmTp62_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 11)).setLabel("snOsmTp62-Advanced")
snEsmItp80_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 12)).setLabel("snEsmItp80-Advanced")
snEsmTp80_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 13)).setLabel("snEsmTp80-Advanced")
snOsmItpLd62_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 14)).setLabel("snOsmItpLd62-Advanced")
snOsmItp62_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 15)).setLabel("snOsmItp62-Advanced")
snOsmItp53_Advanced = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 16)).setLabel("snOsmItp53-Advanced")
snOsmTp53 = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 17))
iSwitchMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

snCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1))
snProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2))
snDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5))
snNvLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6))
snTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7))
snGen = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8))
snTcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10))
snOsm = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1))
snDownloadParams = MibIdentifier((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1))
snDownloadParamsTftpServerHostName = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadParamsTftpServerHostName.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadParamsTftpServerHostName.setDescription('IP address of the TFTP server (x.y.z.w).')
snDownloadParamsFile = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadParamsFile.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadParamsFile.setDescription('Full path name of file to be loaded from the TFTP server host. Note that the file name must have the appropriate syntax for the TFTP server host. E.g., if the TFTP server host is a UNIX machine, the full file name might be /tftp/name.lad, or if the TFTP server host is a Windows machine, the full file name might be C:\\tftp\\name.lad.')
snDownloadParamsControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("start-load", 2), ("cancel-load", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snDownloadParamsControl.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadParamsControl.setDescription('Setting this object to start-load(2) causes the system to start a downloading process. Setting this object to cancel-load(3) causes the system to abort a downloading process. If ParamsProtocol is <tftp-server> the object is not writable. Reading the object, meaning-less(127) is returned.')
snDownloadParamsStatus = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("load-in-progress", 2), ("load-inactive", 3), ("load-interrupted", 4))).clone('load-inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDownloadParamsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadParamsStatus.setDescription('The status of the TFTP client.')
snDownloadNextBlockId = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDownloadNextBlockId.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadNextBlockId.setDescription("The number of the next block ID expected by the TFTP session. Block ID's are numbers starting with 1. ")
snDownloadParamsError = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDownloadParamsError.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadParamsError.setDescription('The error status of the TFTP client.')
snDownloadAutoLoad = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadAutoLoad.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadAutoLoad.setDescription('The value enabled(1) will automatically start TFTP when the Operative Program is invalid. The value disabled(2) will inhibit TFTP.')
snDownloadEventLogTableFile = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadEventLogTableFile.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadEventLogTableFile.setDescription('Full path name of file to be saved to the TFTP server host. Note that the file name must have the appropriate syntax for the TFTP server host. E.g., if the TFTP server host is a UNIX machine, the full file name might be /tftp/name.txt, or if the TFTP server host is a Windows machine, the full file name might be C:\\tftp\\name.txt.')
snDownloadEventLogTableControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start-load", 2), ("start-save", 3), ("cancel", 4), ("continue-process", 5), ("abort-process", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snDownloadEventLogTableControl.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadEventLogTableControl.setDescription('Setting this object to start-save(3) causes the system to start a uploading process. Setting this object to cancel-(4) causes the system to abort a uploading process. If ParamsProtocol is <tftp-server> the object is not writable. Reading the object, meaning-less(127) is returned.')
snDownloadConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDownloadConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadConfigFile.setDescription('Full path name of file to be saved or loaded from the TFTP server host. Note that the file name must have the appropriate syntax for the TFTP server host. E.g., if the TFTP server host is a UNIX machine, the full file name might be /tftp/name.txt, or if the TFTP server host is a Windows machine, the full file name might be C:\\tftp\\name.txt.')
snDownloadConfigControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start-load", 2), ("start-save", 3), ("cancel", 4), ("continue-process", 5), ("abort-process", 6)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snDownloadConfigControl.setStatus('mandatory')
if mibBuilder.loadTexts: snDownloadConfigControl.setDescription('Setting this object to start-load(2) causes the system to start a downloading process. Setting this object to start-save(3) causes the system to start a uploading process. Setting this object to cancel-(4) causes the system to abort the process. If ParamsProtocol is <tftp-server> the object is not writable. Reading the object, meaning-less(127) is returned.')
snNvLogMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 400)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNvLogMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogMaxEntries.setDescription('Maximum number of events that can be kept in Non-Volatile Memory.')
snNvLogCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogCurrentEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogCurrentEntries.setDescription('Number of events that are currently kept in Non-Volatile Memory.')
snNvLogNewEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNvLogNewEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogNewEntries.setDescription('Counter for events that are logged in Non-Volatile Memory. This counter starts at 0 after each system start. User can reset this counter at any time by writing 0 to this object.')
snNvLogClear = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snNvLogClear.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogClear.setDescription('Setting this object to clear(1) value, clears the events that are kept in Non-Volatile Memory.')
snNvLogTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5), )
if mibBuilder.loadTexts: snNvLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogTable.setDescription('The table contains the last events that occurred in the system.')
snNvLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snNvLogPowerUpCount"), (0, "SN-OSM-PRIV-MIB", "snNvLogTime"), (0, "SN-OSM-PRIV-MIB", "snNvLogSequenceNumber"))
if mibBuilder.loadTexts: snNvLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogEntry.setDescription('The description of an event that occurred in the system, and was stored in Non-Volatile memory.')
snNvLogPowerUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogPowerUpCount.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogPowerUpCount.setDescription('The number of times the system was powered up.')
snNvLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogTime.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogTime.setDescription('The sysUpTime of the system when the event occurred.')
snNvLogSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogSequenceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogSequenceNumber.setDescription('The sequence number of the log entry.')
snNvLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snNvLogDescr.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogDescr.setDescription('ASCII description of the event.')
snNvLogPositionDescr = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snNvLogPositionDescr.setStatus('mandatory')
if mibBuilder.loadTexts: snNvLogPositionDescr.setDescription('Read - find the oid of the entry with spezial number in log table. Write - set the entry number in log table for the read request.')
snmpV2 = MibIdentifier((1, 3, 6, 1, 6))
snmpModules = MibIdentifier((1, 3, 6, 1, 6, 3))
snmpMIB = MibIdentifier((1, 3, 6, 1, 6, 3, 1))
snmpMIBObjects = MibIdentifier((1, 3, 6, 1, 6, 3, 1, 1))
snmpTraps = MibIdentifier((1, 3, 6, 1, 6, 3, 1, 1, 5))
class IANAifType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))
    namedValues = NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54))

snSwitchTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 1, 2))).clone(namedValues=NamedValues(("not-supported", 10), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTrapsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchTrapsEnable.setDescription('Determines whether this device will transmit traps to SNMP management stations. This if this object is set to disable, no traps will be sent. Setting this object to enabled is a necessary, but not a sufficient condition for transmission of traps.')
snTrapTimeLastGenerated = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrapTimeLastGenerated.setStatus('mandatory')
if mibBuilder.loadTexts: snTrapTimeLastGenerated.setDescription('The value of sysUpTime at the time the last trap was generated.')
snTrapMaxManagers = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 6), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrapMaxManagers.setStatus('mandatory')
if mibBuilder.loadTexts: snTrapMaxManagers.setDescription('The maximum number of managers that can be registered for receiving traps.')
snTrapTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7), )
if mibBuilder.loadTexts: snTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: snTrapTable.setDescription('This table contains information about the managers to which traps should be directed. Setting the snTrapState to inactive(3) removes the corresponding entry from the table.')
snTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snTrapIndex"))
if mibBuilder.loadTexts: snTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snTrapEntry.setDescription('This object contains runtime information about an individual trap destination.')
snTrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrapAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snTrapAddress.setDescription('The IP address of the network management entity to which traps should be sent.')
snTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: snTrapState.setDescription('The state of this entry in the trap address table. Setting this object to inactive(3) removes the corresponding entry from the table.')
snTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 7, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snTrapIndex.setReference('snTrapIndex')
if mibBuilder.loadTexts: snTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snTrapIndex.setDescription('The Index of Trap Table.')
snUserDescription = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('Not Defined Yet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snUserDescription.setStatus('mandatory')
if mibBuilder.loadTexts: snUserDescription.setDescription('Extended description of the station including user specific information. This value is used for the email From-field.')
snHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snHwVersion.setDescription('The hardware version of the system.')
snBootStrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snBootStrapVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snBootStrapVersion.setDescription('The firmware version of the boot software installed in the system.')
snSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snSwVersion.setDescription('The firmware version of the system.')
snInfoOrderNr = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInfoOrderNr.setStatus('mandatory')
if mibBuilder.loadTexts: snInfoOrderNr.setDescription('The order number of this product.')
snSerialPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 9))).clone(namedValues=NamedValues(("other", 1), ("o9600bps", 5), ("o19200bps", 6), ("o38400bps", 7), ("o115200bps", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSerialPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: snSerialPortSpeed.setDescription('The serial port speed in bits per second.')
snSwitchTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 1, 2))).clone(namedValues=NamedValues(("not-supported", 10), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTelnetEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchTelnetEnable.setDescription('Enable/Disable TELNET access.')
snSwitchTelnetTimeOutEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTelnetTimeOutEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchTelnetTimeOutEnable.setDescription('Enables or disables the time out for a TELNET session.')
snSwitchTelnetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchTelnetTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchTelnetTimeOut.setDescription('Time out for the TELNET session. The time could be set in steps of 10 seconds. Minimum value is 60 seconds, maximum value is 600 seconds.')
snSwitchSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 1, 2))).clone(namedValues=NamedValues(("not-supported", 10), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSNMPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchSNMPEnable.setDescription('Determines whether this device may be accessed by SNMP management stations.')
snSysReset = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cold-reset", 1), ("warm-reset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snSysReset.setStatus('mandatory')
if mibBuilder.loadTexts: snSysReset.setDescription('Resets the system. cold-reset(1) is identical to Power-On-Reset or Watchdog-Reset. warm-reset(2) is identical to restart command.')
snResetPowerUpCount = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snResetPowerUpCount.setStatus('mandatory')
if mibBuilder.loadTexts: snResetPowerUpCount.setDescription('The number of times the sytem was powered up.')
snSetFactoryDefs = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-factory-defaults", 1), ("set-factory-defaults-complete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSetFactoryDefs.setStatus('mandatory')
if mibBuilder.loadTexts: snSetFactoryDefs.setDescription('Restore factory defaults.')
snResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-counters", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: snResetCounters.setDescription('Reset all statistic counters.')
snEraseDataStoreFlash = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase-datastore", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snEraseDataStoreFlash.setStatus('mandatory')
if mibBuilder.loadTexts: snEraseDataStoreFlash.setDescription('Erase all configuration data and log table entries. In opposite to reset to factory defaults nothing is saved.')
snSetMemoryDefs = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-memory-defaults", 1), ("set-memory-defaults-complete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSetMemoryDefs.setStatus('mandatory')
if mibBuilder.loadTexts: snSetMemoryDefs.setDescription('Restore memory defaults and restart.')
snEmailSMTPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailSMTPIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snEmailSMTPIpAddress.setDescription('IP address or host name of SMTP server.')
snEmailSMTPPort = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailSMTPPort.setStatus('mandatory')
if mibBuilder.loadTexts: snEmailSMTPPort.setDescription('Number of TCP port to which the SMTP server will listen.')
snEmailEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snEmailEnable.setDescription('E-mail functionality for sending a message when an event occurred.')
snEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 8, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('user@host.domain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snEmailAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snEmailAddress.setDescription('E-mail address to which messages will be sent.')
snIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAddress.setDescription('IP address of the agent. Changes become valid after restart.')
snIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: snIpSubnetMask.setDescription('IP subnet mask of the agent. Changes become valid after restart.')
snIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: snIpDefaultGateway.setDescription('IP address of the default gateway. Changes become valid after restart.')
snBootP = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snBootP.setStatus('mandatory')
if mibBuilder.loadTexts: snBootP.setDescription('Enable/Disable BOOTP. Changes become valid after restart.')
snMacAddressBase = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 1, 10, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMacAddressBase.setStatus('mandatory')
if mibBuilder.loadTexts: snMacAddressBase.setDescription('MAC address of the switch.')
snOsmFaultState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFault", 1), ("fault", 2))).clone('noFault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmFaultState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmFaultState.setDescription('Indicates OSM/ESM fault state (state of fault LED/signaling contact).')
snOsmSignalledFaults = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmSignalledFaults.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmSignalledFaults.setDescription('Number of signalled faults.')
snOsmFaultValue = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmFaultValue.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmFaultValue.setDescription('Fault value: 0 = no fault, bit 0 = power, bit 1 = linkdown, bit 2 = internal error, bit 3 = standby, bit 4 = rm, bit 5 = dip switch rm, bit 6 = dip switch standby, bit 7 = ncm, bit 8 = partition port 1, ... bit 15 = partition port 8, bit 16 = observer error, bit 17 = non-recoverable ring error, bit 18 = reset to factory defaults')
snOsmDigitalInputChange = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone('00000000')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInputChange.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInputChange.setDescription('Digital Input change')
snOsmDigitalInputState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInputState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInputState.setDescription('Digital Input state')
snOsmRmMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rmOff", 1), ("rmOn", 2))).clone('rmOff')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmRmMode.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmRmMode.setDescription('RM mode.')
snOsmRmState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rmPassive", 1), ("rmActive", 2))).clone('rmPassive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmRmState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmRmState.setDescription('RM State.')
snOsmRmStateChanges = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmRmStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmRmStateChanges.setDescription('Number of changes to RM active state.')
snOsmRmObserverMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("restart", 3), ("not-supported", 10))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmRmObserverMode.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmRmObserverMode.setDescription('Reserved for further use.')
snOsmStandbyMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("standbyOff", 1), ("standbyOn", 2), ("not-supported", 10))).clone('standbyOff')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyMode.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmStandbyMode.setDescription('Standby Mode.')
snOsmStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("standbyPassive", 1), ("standbyActive", 2), ("not-supported", 10))).clone('standbyPassive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmStandbyState.setDescription('Standby State.')
snOsmStandbyCableState = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("not-supported", 10))).clone('connected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyCableState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmStandbyCableState.setDescription('Standby cable state.')
snOsmStandbyStateChanges = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmStandbyStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmStandbyStateChanges.setDescription('Number of changes to standby active state.')
snOsmPort7TestMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPort7TestMac.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPort7TestMac.setDescription('MAC (source) address of test telegrams sent on port 7.')
snOsmPort8TestMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 32), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPort8TestMac.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPort8TestMac.setDescription('MAC (source) address of test telegrams sent on port 8.')
snOsmMulticastTestMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 33), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastTestMac.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmMulticastTestMac.setDescription('MAC multicast address used for redundancy functions.')
snOsmMulticastLinkMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 34), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastLinkMac.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmMulticastLinkMac.setDescription('MAC multicast address used for redundancy functions.')
snOsmUnicastLinkMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 35), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmUnicastLinkMac.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmUnicastLinkMac.setDescription('MAC unicast address used for redundancy functions.')
snOsmMulticastSyncMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 36), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastSyncMac.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmMulticastSyncMac.setDescription('MAC multicast address of time synchronisation packets.')
snOsmMulticastFlowControlMac = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 37), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmMulticastFlowControlMac.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmMulticastFlowControlMac.setDescription('MAC multicast address of flow control packets.')
snOsmTestMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmTestMaxDelay.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmTestMaxDelay.setDescription('Measured maximum delay of RM test telegrams.')
snOsmPowerSupply1State = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPowerSupply1State.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPowerSupply1State.setDescription('State of power supply line 1.')
snOsmPowerSupply2State = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPowerSupply2State.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPowerSupply2State.setDescription('State of power supply line 2.')
snOsmPowerSupply1Mask = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('notChecked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPowerSupply1Mask.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPowerSupply1Mask.setDescription('Mask of power supply line 1.')
snOsmPowerSupply2Mask = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('notChecked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPowerSupply2Mask.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPowerSupply2Mask.setDescription('Mask of power supply line 2.')
snOsmChangedPowerLine = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nochange", 0), ("line1", 1), ("line2", 2))).clone('nochange')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmChangedPowerLine.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmChangedPowerLine.setDescription('The power line where the last Power-Up or -Down occurred. User can reset to initial value 0 at any time.')
snOsmResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snOsmResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmResetCounters.setDescription('Reset all counters of OSM protocol software.')
snOsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61), )
if mibBuilder.loadTexts: snOsmPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortTable.setDescription('Table containing per-port objects in the form of private extensions of interface objects.')
snOsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snOsmPortIndex"))
if mibBuilder.loadTexts: snOsmPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortEntry.setDescription('Interface entry containing objects at the subnetwork layer and below for a particular interface.')
snOsmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 1), Integer32())
if mibBuilder.loadTexts: snOsmPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortIndex.setDescription("Unique number for each interface. The number is in the range 1 to ifNumber. The number for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
snOsmPortFaultMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('notChecked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortFaultMaskState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortFaultMaskState.setDescription('Mask for checking link state of the port. If a link of a unmasked (checked) port is down then a fault will be generated.')
snOsmPortStandbyMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortStandbyMaskState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortStandbyMaskState.setDescription('Mask for standby ports.')
snOsmPortLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2))).clone('unlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortLockState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortLockState.setDescription('Lock state of the port.')
snOsmPortPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPartition", 1), ("partition", 2))).clone('noPartition')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmPortPartitionState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortPartitionState.setDescription('Partition state of the port.')
snOsmPortBackPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 61, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmPortBackPressure.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmPortBackPressure.setDescription('Back pressure mode for the half-duplex port.')
snOsmRmActiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,11))
if mibBuilder.loadTexts: snOsmRmActiveState.setDescription('Redundancy manager entered active state.')
snOsmRmPassiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,12))
if mibBuilder.loadTexts: snOsmRmPassiveState.setDescription('Redundancy manager entered passive state.')
snOsmStandbyActiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,21))
if mibBuilder.loadTexts: snOsmStandbyActiveState.setDescription('Device entered standby active state.')
snOsmStandbyPassiveState = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,22))
if mibBuilder.loadTexts: snOsmStandbyPassiveState.setDescription('Device entered standby passive state.')
snOsmPowerLineDown = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,31)).setObjects(("SN-OSM-PRIV-MIB", "snOsmChangedPowerLine"))
if mibBuilder.loadTexts: snOsmPowerLineDown.setDescription('Power down on line <L1/L2>.')
snOsmPowerLineUp = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,32)).setObjects(("SN-OSM-PRIV-MIB", "snOsmChangedPowerLine"))
if mibBuilder.loadTexts: snOsmPowerLineUp.setDescription('Power up on line <L1/L2>.')
snOsmFault = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,41)).setObjects(("SN-OSM-PRIV-MIB", "snOsmFaultValue"))
if mibBuilder.loadTexts: snOsmFault.setDescription('Device entered fault state.')
snOsmDigitalInput = NotificationType((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1) + (0,51)).setObjects(("SN-OSM-PRIV-MIB", "snOsmDigitalInputChange"), ("SN-OSM-PRIV-MIB", "snOsmDigitalInputState"))
if mibBuilder.loadTexts: snOsmDigitalInput.setDescription('Digital Input state changed.')
snOsmEventTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62), )
if mibBuilder.loadTexts: snOsmEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventTable.setDescription('Event configuration table.')
snOsmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snOsmEventIndex"))
if mibBuilder.loadTexts: snOsmEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventEntry.setDescription('Events table rows entries.')
snOsmEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eMail", 1), ("trap", 2), ("logTabel", 3))).clone('eMail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventIndex.setDescription('Index of columns : E-Mail = 1, Traps = 2, LogTable = 3.')
snOsmEventColdWarmStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventColdWarmStart.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventColdWarmStart.setDescription('Enables/Disables cold/warm start notification.')
snOsmEventLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventLinkChange.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventLinkChange.setDescription('Enables/Disables link change notification.')
snOsmEventAuthenticationFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventAuthenticationFailure.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventAuthenticationFailure.setDescription('Enables/Disables authentication failure notification.')
snOsmEventRmonAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventRmonAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventRmonAlarm.setDescription('Enables/Disables RMon alarm notification.')
snOsmEventPowerChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventPowerChange.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventPowerChange.setDescription('Enables/Disables power change notification.')
snOsmEventRmStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventRmStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventRmStateChange.setDescription('Enables/Disables RM state change notification.')
snOsmEventStandbyStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventStandbyStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventStandbyStateChange.setDescription('Enables/Disables standby state change notification.')
snOsmEventFault = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 62, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmEventFault.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmEventFault.setDescription('Enables/Disables fault notification.')
snOsmDigitalInEventTable = MibTable((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63), )
if mibBuilder.loadTexts: snOsmDigitalInEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInEventTable.setDescription('Digital-In event configuration table.')
snOsmDigitalInEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1), ).setIndexNames((0, "SN-OSM-PRIV-MIB", "snOsmDigitalInIndex"))
if mibBuilder.loadTexts: snOsmDigitalInEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInEventEntry.setDescription('Digital-In events table rows entries.')
snOsmDigitalInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInIndex.setDescription('Index of Digital-In.')
snOsmDigitalInName = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Digital XX')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInName.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInName.setDescription('Name of Digital-In.')
snOsmDigitalInMailEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2), ("notSupported", 3))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInMailEvent.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInMailEvent.setDescription('Enables/Disables Digital-In E-Mail notification.')
snOsmDigitalInTrapEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2), ("notSupported", 3))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInTrapEvent.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInTrapEvent.setDescription('Enables/Disables Digital-In Trap notification.')
snOsmDigitalInLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("checked", 1), ("notChecked", 2), ("notSupported", 3))).clone('checked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snOsmDigitalInLogEvent.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInLogEvent.setDescription('Enables/Disables Digital-In LogTable notification.')
snOsmDigitalInState = MibTableColumn((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 63, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snOsmDigitalInState.setStatus('mandatory')
if mibBuilder.loadTexts: snOsmDigitalInState.setDescription('State of the Digital-In.')
snConfigId = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("osmItp62", 0), ("osmItp53", 1), ("osmTp62", 2), ("esmItp80", 3), ("esmTp80", 4), ("osmItpLd62", 5), ("osmTpLd62", 6), ("osmBC08", 7), ("osmTp22", 8), ("esmTp40", 9), ("osmTp62-Advanced", 10), ("esmItp80-Advanced", 11), ("esmTp80-Advanced", 12), ("osmItpLd62-Advanced", 13), ("osmItp62-Advanced", 14), ("osmItp53-Advanced", 15), ("osmTp53", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snConfigId.setStatus('mandatory')
if mibBuilder.loadTexts: snConfigId.setDescription('OSM/ESM hardware type.')
snSwitchFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchFlowControl.setDescription('Enable/Disable flow control functionality.')
snSwitchSnifferSrc = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 102), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSnifferSrc.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchSnifferSrc.setDescription('Source port for traffic mirroring.')
snSwitchSnifferDest = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 103), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSnifferDest.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchSnifferDest.setDescription('Destination port for traffic mirroring.')
snSwitchSnifferEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchSnifferEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchSnifferEnable.setDescription('Enable/Disable mirroring functionality.')
snSwitchAgingEnable = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchAgingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchAgingEnable.setDescription('Enable/Disable auto-aging functionality of the learning table.')
snSwitchRmonMode = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-supported", 10))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchRmonMode.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchRmonMode.setDescription('Enable/Disable RMon functionality (statistics, history, alarm, events).')
snSwitchFdbImagePollTime = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSwitchFdbImagePollTime.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchFdbImagePollTime.setDescription('Polling time for update of learning table image.')
snSwitchLearningTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwitchLearningTableEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchLearningTableEntries.setDescription('Number of entries in learning table image.')
snSwitchTimeToNextDataStore = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSwitchTimeToNextDataStore.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchTimeToNextDataStore.setDescription('Time in seconds, when the next saving of configuration data and log entries takes place.')
snSwitchFlushDataStore = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 2, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("flush", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snSwitchFlushDataStore.setStatus('mandatory')
if mibBuilder.loadTexts: snSwitchFlushDataStore.setDescription('Force direct saving of configuration data and log entries.')
snLastObject = MibScalar((1, 3, 6, 1, 4, 1, 4196, 1, 1, 2, 100, 999), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("last-object", 1))).clone('last-object')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLastObject.setStatus('mandatory')
if mibBuilder.loadTexts: snLastObject.setDescription('This object is defined as a dummy object. The object is used to indicate that no other objects can appear after it in this private MIB. The only purpose of this object is for MIB browsers that need a valid object at the end of a private MIB.')
mibBuilder.exportSymbols("SN-OSM-PRIV-MIB", snDownloadEventLogTableControl=snDownloadEventLogTableControl, snIpDefaultGateway=snIpDefaultGateway, snOsmItp53_Advanced=snOsmItp53_Advanced, snNvLogTime=snNvLogTime, snDownloadParamsStatus=snDownloadParamsStatus, snOsmRmStateChanges=snOsmRmStateChanges, snOsmItpLd62_Advanced=snOsmItpLd62_Advanced, snOsmPort7TestMac=snOsmPort7TestMac, snDownloadParams=snDownloadParams, snSwitchSnifferDest=snSwitchSnifferDest, snOsmBC08=snOsmBC08, snTrapState=snTrapState, snOsmItp62=snOsmItp62, snmpV2=snmpV2, snDownload=snDownload, snMacAddressBase=snMacAddressBase, snOsmStandbyCableState=snOsmStandbyCableState, snOsmFaultState=snOsmFaultState, snSwVersion=snSwVersion, iSwitchMib=iSwitchMib, iSwitch=iSwitch, snConfigId=snConfigId, snTrapEntry=snTrapEntry, snOsmFault=snOsmFault, snSwitchFlowControl=snSwitchFlowControl, snNvLogSequenceNumber=snNvLogSequenceNumber, snOsmChangedPowerLine=snOsmChangedPowerLine, snOsmPowerLineDown=snOsmPowerLineDown, snNvLogMaxEntries=snNvLogMaxEntries, snOsmStandbyState=snOsmStandbyState, snNvLogTable=snNvLogTable, snOsmEventAuthenticationFailure=snOsmEventAuthenticationFailure, snSetFactoryDefs=snSetFactoryDefs, snEmailSMTPPort=snEmailSMTPPort, snOsmPowerSupply2State=snOsmPowerSupply2State, adProductMibs=adProductMibs, snOsmRmMode=snOsmRmMode, snSwitchRmonMode=snSwitchRmonMode, snOsmTp62=snOsmTp62, snEsmTp80_Advanced=snEsmTp80_Advanced, snOsmRmObserverMode=snOsmRmObserverMode, snSwitchTelnetTimeOut=snSwitchTelnetTimeOut, snOsmPort8TestMac=snOsmPort8TestMac, snOsmDigitalInEventTable=snOsmDigitalInEventTable, snDownloadAutoLoad=snDownloadAutoLoad, snGen=snGen, snOsmStandbyStateChanges=snOsmStandbyStateChanges, snOsmEventIndex=snOsmEventIndex, snOsmPowerLineUp=snOsmPowerLineUp, snSwitchSnifferSrc=snSwitchSnifferSrc, snTrapTimeLastGenerated=snTrapTimeLastGenerated, snSwitchFdbImagePollTime=snSwitchFdbImagePollTime, snNvLogPositionDescr=snNvLogPositionDescr, snOsmEventPowerChange=snOsmEventPowerChange, snEmailEnable=snEmailEnable, snNvLogClear=snNvLogClear, snOsmMulticastLinkMac=snOsmMulticastLinkMac, snOsmItp62_Advanced=snOsmItp62_Advanced, snTcpip=snTcpip, snDownloadEventLogTableFile=snDownloadEventLogTableFile, snOsmEventFault=snOsmEventFault, snOsmDigitalInTrapEvent=snOsmDigitalInTrapEvent, snOsmRmActiveState=snOsmRmActiveState, snOsmItp53=snOsmItp53, snEmailAddress=snEmailAddress, snOsmStandbyMode=snOsmStandbyMode, snOsmPowerSupply1Mask=snOsmPowerSupply1Mask, snmpModules=snmpModules, snDownloadParamsTftpServerHostName=snDownloadParamsTftpServerHostName, snSetMemoryDefs=snSetMemoryDefs, snOsmPortFaultMaskState=snOsmPortFaultMaskState, snOsmPortEntry=snOsmPortEntry, snDownloadParamsFile=snDownloadParamsFile, snSwitchFlushDataStore=snSwitchFlushDataStore, snOsmPortTable=snOsmPortTable, snOsmPortLockState=snOsmPortLockState, snOsmTp53=snOsmTp53, snDownloadNextBlockId=snDownloadNextBlockId, snSwitchTelnetEnable=snSwitchTelnetEnable, snOsmDigitalInName=snOsmDigitalInName, snOsmMulticastTestMac=snOsmMulticastTestMac, snOsmEventColdWarmStart=snOsmEventColdWarmStart, snOsmPowerSupply1State=snOsmPowerSupply1State, snOsmResetCounters=snOsmResetCounters, simaticNet=simaticNet, snBootStrapVersion=snBootStrapVersion, snSysReset=snSysReset, snEsmTp80=snEsmTp80, snEmailSMTPIpAddress=snEmailSMTPIpAddress, snOsm=snOsm, snOsmPowerSupply2Mask=snOsmPowerSupply2Mask, snOsmDigitalInput=snOsmDigitalInput, snNvLogEntry=snNvLogEntry, snmpMIBObjects=snmpMIBObjects, snSwitchTrapsEnable=snSwitchTrapsEnable, snSwitchLearningTableEntries=snSwitchLearningTableEntries, snSwitchTimeToNextDataStore=snSwitchTimeToNextDataStore, snOsmEventTable=snOsmEventTable, snOsmEventEntry=snOsmEventEntry, IANAifType=IANAifType, snEsmItp80=snEsmItp80, snEsmItp80_Advanced=snEsmItp80_Advanced, iHub=iHub, snOsmSignalledFaults=snOsmSignalledFaults, snCommon=snCommon, snOsmPortStandbyMaskState=snOsmPortStandbyMaskState, snNvLog=snNvLog, snOsmMulticastFlowControlMac=snOsmMulticastFlowControlMac, snDownloadParamsControl=snDownloadParamsControl, snBootP=snBootP, snNvLogPowerUpCount=snNvLogPowerUpCount, snSwitchTelnetTimeOutEnable=snSwitchTelnetTimeOutEnable, snResetPowerUpCount=snResetPowerUpCount, snTrapIndex=snTrapIndex, snOsmTp62_Advanced=snOsmTp62_Advanced, snOsmTestMaxDelay=snOsmTestMaxDelay, snOsmDigitalInMailEvent=snOsmDigitalInMailEvent, snSwitchAgingEnable=snSwitchAgingEnable, snEsmTp40=snEsmTp40, snDownloadConfigControl=snDownloadConfigControl, snSerialPortSpeed=snSerialPortSpeed, snIpAddress=snIpAddress, snOsmTpLd62=snOsmTpLd62, snEraseDataStoreFlash=snEraseDataStoreFlash, snTrapMaxManagers=snTrapMaxManagers, snOsmStandbyActiveState=snOsmStandbyActiveState, snOsmDigitalInEventEntry=snOsmDigitalInEventEntry, snInfoOrderNr=snInfoOrderNr, snOsmStandbyPassiveState=snOsmStandbyPassiveState, snOsmEventRmonAlarm=snOsmEventRmonAlarm, MacAddress=MacAddress, snUserDescription=snUserDescription, snOsmDigitalInIndex=snOsmDigitalInIndex, snOsmDigitalInState=snOsmDigitalInState, snDownloadParamsError=snDownloadParamsError, snNvLogCurrentEntries=snNvLogCurrentEntries, snOsmEventStandbyStateChange=snOsmEventStandbyStateChange, snOsmPortBackPressure=snOsmPortBackPressure, snTrapTable=snTrapTable, snHwVersion=snHwVersion, snOsmDigitalInLogEvent=snOsmDigitalInLogEvent, snOsmRmPassiveState=snOsmRmPassiveState, snTrapInfo=snTrapInfo, snOsmDigitalInputState=snOsmDigitalInputState, snOsmFaultValue=snOsmFaultValue, snIpSubnetMask=snIpSubnetMask, snProductSpecific=snProductSpecific, snOsmTp22=snOsmTp22, snOsmItpLd62=snOsmItpLd62, snNvLogDescr=snNvLogDescr, snmpMIB=snmpMIB, snmpTraps=snmpTraps, snOsmDigitalInputChange=snOsmDigitalInputChange, snOsmMulticastSyncMac=snOsmMulticastSyncMac, snOsmRmState=snOsmRmState, snOsmPortIndex=snOsmPortIndex, snSwitchSnifferEnable=snSwitchSnifferEnable, snNvLogNewEntries=snNvLogNewEntries, ad=ad, snLastObject=snLastObject, snSwitchSNMPEnable=snSwitchSNMPEnable, snOsmUnicastLinkMac=snOsmUnicastLinkMac, snResetCounters=snResetCounters, snOsmPortPartitionState=snOsmPortPartitionState, snOsmEventRmStateChange=snOsmEventRmStateChange, snTrapAddress=snTrapAddress, snOsmEventLinkChange=snOsmEventLinkChange, snDownloadConfigFile=snDownloadConfigFile)
