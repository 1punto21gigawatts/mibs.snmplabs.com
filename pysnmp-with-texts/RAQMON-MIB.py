#
# PySNMP MIB module RAQMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAQMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
rmon, = mibBuilder.importSymbols("RMON-MIB", "rmon")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Counter64, Gauge32, iso, Integer32, Counter32, ModuleIdentity, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Counter64", "Gauge32", "iso", "Integer32", "Counter32", "ModuleIdentity", "Unsigned32", "ObjectIdentity")
RowPointer, DisplayString, RowStatus, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "DisplayString", "RowStatus", "TruthValue", "DateAndTime", "TextualConvention")
raqmonMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 16, 31))
raqmonMIB.setRevisions(('2006-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raqmonMIB.setRevisionsDescriptions(('Initial version, published as RFC 4711.',))
if mibBuilder.loadTexts: raqmonMIB.setLastUpdated('200610100000Z')
if mibBuilder.loadTexts: raqmonMIB.setOrganization('IETF RMON MIB Working Group')
if mibBuilder.loadTexts: raqmonMIB.setContactInfo('WG Charter: http://www.ietf.org/html.charters/rmonmib-charter.html Mailing lists: General Discussion: rmonmib@ietf.org To Subscribe: rmonmib-requests@ietf.org In Body: subscribe your_email_address Chair: Andy Bierman Email: ietf@andybierman.com Editor: Dan Romascanu Avaya Email: dromasca@avaya.com')
if mibBuilder.loadTexts: raqmonMIB.setDescription('Real-Time Application QoS Monitoring MIB. Copyright (c) The Internet Society (2006). This version of this MIB module is part of RFC 4711; See the RFC itself for full legal notices.')
raqmonNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 0))
raqmonSessionAlarm = NotificationType((1, 3, 6, 1, 2, 1, 16, 31, 0, 1)).setObjects(("RAQMON-MIB", "raqmonParticipantAddr"), ("RAQMON-MIB", "raqmonParticipantName"), ("RAQMON-MIB", "raqmonParticipantPeerAddrType"), ("RAQMON-MIB", "raqmonParticipantPeerAddr"), ("RAQMON-MIB", "raqmonQoSEnd2EndNetDelay"), ("RAQMON-MIB", "raqmonQoSInterArrivalJitter"), ("RAQMON-MIB", "raqmonQosLostPackets"), ("RAQMON-MIB", "raqmonQosRcvdPackets"))
if mibBuilder.loadTexts: raqmonSessionAlarm.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionAlarm.setDescription('A notification generated by an entry in the raqmonSessionExceptionTable.')
raqmonMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 1))
raqmonSession = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 1, 1))
raqmonParticipantTable = MibTable((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1), )
if mibBuilder.loadTexts: raqmonParticipantTable.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantTable.setDescription('This table contains information about participants in both active and closed (terminated) sessions.')
raqmonParticipantEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1), ).setIndexNames((0, "RAQMON-MIB", "raqmonParticipantStartDate"), (0, "RAQMON-MIB", "raqmonParticipantIndex"))
if mibBuilder.loadTexts: raqmonParticipantEntry.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantEntry.setDescription('Each row contains information for a single session (application) run by one participant. Indexation by the start time of the session aims to ease sorting by management applications. Agents MUST NOT report identical start times for any two sessions on the same host. Rows are removed for inactive sessions when implementation-specific age or space limits are reached.')
raqmonParticipantStartDate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 1), DateAndTime())
if mibBuilder.loadTexts: raqmonParticipantStartDate.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantStartDate.setDescription('The date and time of this entry. It will be the date and time of the first report received.')
raqmonParticipantIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: raqmonParticipantIndex.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantIndex.setDescription('The index of the conceptual row, which is for SNMP purposes only and has no relation to any protocol value. There is no requirement that these rows be created or maintained sequentially. The index will be unique for a particular date and time.')
raqmonParticipantReportCaps = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("raqmonPartRepDsrcName", 0), ("raqmonPartRepRecvName", 1), ("raqmonPartRepDsrcPort", 2), ("raqmonPartRepRecvPort", 3), ("raqmonPartRepSetupTime", 4), ("raqmonPartRepSetupDelay", 5), ("raqmonPartRepSessionDuration", 6), ("raqmonPartRepSetupStatus", 7), ("raqmonPartRepRTEnd2EndNetDelay", 8), ("raqmonPartRepOWEnd2EndNetDelay", 9), ("raqmonPartApplicationDelay", 10), ("raqmonPartRepIAJitter", 11), ("raqmonPartRepIPDV", 12), ("raqmonPartRepRcvdPackets", 13), ("raqmonPartRepRcvdOctets", 14), ("raqmonPartRepSentPackets", 15), ("raqmonPartRepSentOctets", 16), ("raqmonPartRepCumPacketsLoss", 17), ("raqmonPartRepFractionPacketsLoss", 18), ("raqmonPartRepCumDiscards", 19), ("raqmonPartRepFractionDiscards", 20), ("raqmonPartRepSrcPayloadType", 21), ("raqmonPartRepDestPayloadType", 22), ("raqmonPartRepSrcLayer2Priority", 23), ("raqmonPartRepSrcTosDscp", 24), ("raqmonPartRepDestLayer2Priority", 25), ("raqmonPartRepDestTosDscp", 26), ("raqmonPartRepCPU", 27), ("raqmonPartRepMemory", 28), ("raqmonPartRepAppName", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantReportCaps.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantReportCaps.setDescription('The Report capabilities of the participant, as perceived by the Collector. If the participant can report the Data Source Name as defined in [RFC4710], Section 5.3, then the raqmonPartRepDsrcName bit will be set. If the participant can report the Receiver Name as defined in [RFC4710], Section 5.4, then the raqmonPartRepRecvName bit will be set. If the participant can report the Data Source Port as defined in [RFC4710], Section 5.5, then the raqmonPartRepDsrcPort bit will be set. If the participant can report the Receiver Port as defined in [RFC4710], Section 5.6, then the raqmonPartRepRecvPort bit will be set. If the participant can report the Session Setup Time as defined in [RFC4710], Section 5.7, then the raqmonPartRepSetupTime bit will be set. If the participant can report the Session Setup Delay as defined in [RFC4710], Section 5.8, then the raqmonPartRepSetupDelay bit will be set. If the participant can report the Session Duration as defined in [RFC4710], Section 5.9, then the raqmonPartRepSessionDuration bit will be set. If the participant can report the Setup Status as defined in [RFC4710], Section 5.10, then the raqmonPartRepSetupStatus bit will be set. If the participant can report the Round-Trip End-to-end Network Delay as defined in [RFC4710], Section 5.11, then the raqmonPartRepRTEnd2EndNetDelay bit will be set. If the participant can report the One-way End-to-end Network Delay as defined in [RFC4710], Section 5.12, then the raqmonPartRepOWEnd2EndNetDelay bit will be set. If the participant can report the Application Delay as defined in [RFC4710], Section 5.13, then the raqmonPartApplicationDelay bit will be set. If the participant can report the Inter-Arrival Jitter as defined in [RFC4710], Section 5.14, then the raqmonPartRepIAJitter bit will be set. If the participant can report the IP Packet Delay Variation as defined in [RFC4710], Section 5.15, then the raqmonPartRepIPDV bit will be set. If the participant can report the number of application packets received as defined in [RFC4710], Section 5.16, then the raqmonPartRepRcvdPackets bit will be set. If the participant can report the number of application octets received as defined in [RFC4710], Section 5.17, then the raqmonPartRepRcvdOctets bit will be set. If the participant can report the number of application packets sent as defined in [RFC4710], Section 5.18, then the raqmonPartRepSentPackets bit will be set. If the participant can report the number of application octets sent as defined in [RFC4710], Section 5.19, then the raqmonPartRepSentOctets bit will be set. If the participant can report the number of cumulative packets lost as defined in [RFC4710], Section 5.20, then the raqmonPartRepCumPacketsLoss bit will be set. If the participant can report the fraction of packet loss as defined in [RFC4710], Section 5.21, then the raqmonPartRepFractionPacketsLoss bit will be set. If the participant can report the number of cumulative discards as defined in [RFC4710], Section 5.22, then the raqmonPartRepCumDiscards bit will be set. If the participant can report the fraction of discards as defined in [RFC4710], Section 5.23, then the raqmonPartRepFractionDiscards bit will be set. If the participant can report the Source Payload Type as defined in [RFC4710], Section 5.24, then the raqmonPartRepSrcPayloadType bit will be set. If the participant can report the Destination Payload Type as defined in [RFC4710], Section 5.25, then the raqmonPartRepDestPayloadType bit will be set. If the participant can report the Source Layer 2 Priority as defined in [RFC4710], Section 5.26, then the raqmonPartRepSrcLayer2Priority bit will be set. If the participant can report the Source DSCP/ToS value as defined in [RFC4710], Section 5.27, then the raqmonPartRepSrcToSDscp bit will be set. If the participant can report the Destination Layer 2 Priority as defined in [RFC4710], Section 5.28, then the raqmonPartRepDestLayer2Priority bit will be set. If the participant can report the Destination DSCP/ToS Value as defined in [RFC4710], Section 5.29, then the raqmonPartRepDestToSDscp bit will be set. If the participant can report the CPU utilization as defined in [RFC4710], Section 5.30, then the raqmonPartRepCPU bit will be set. If the participant can report the memory utilization as defined in [RFC4710], Section 5.31, then the raqmonPartRepMemory bit will be set. If the participant can report the Application Name as defined in [RFC4710], Section 5.32, then the raqmonPartRepAppName bit will be set. The capability of reporting of a specific metric does not mandate that the metric must be reported permanently by the data source to the respective collector. Some data sources MAY be configured not to send a metric, or some metrics may not be relevant to the specific application.')
raqmonParticipantAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantAddrType.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAddrType.setDescription('The type of the Internet address of the participant for this session.')
raqmonParticipantAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantAddr.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAddr.setDescription('The Internet Address of the participant for this session. Formatting of this object is determined by the value of raqmonParticipantAddrType.')
raqmonParticipantSendPort = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantSendPort.setReference('Section 5.5 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantSendPort.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantSendPort.setDescription('Port from which session data is sent. If the value was not reported to the collector, this object will have the value 0.')
raqmonParticipantRecvPort = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantRecvPort.setReference('Section 5.6 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantRecvPort.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantRecvPort.setDescription('Port on which session data is received. If the value was not reported to the collector, this object will have the value 0.')
raqmonParticipantSetupDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantSetupDelay.setReference('Section 5.8 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantSetupDelay.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantSetupDelay.setDescription('Session setup time. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantName = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantName.setReference('Section 5.3 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantName.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantName.setDescription('The data source name for the participant.')
raqmonParticipantAppName = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantAppName.setReference('Section 5.32 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantAppName.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAppName.setDescription("A string giving the name and possibly the version of the application generating the stream, e.g., 'videotool 1.2.' This information may be useful for debugging purposes and is similar to the Mailer or Mail-System-Version SMTP headers. The tool value is expected to remain constant for the duration of the session.")
raqmonParticipantQosCount = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 11), Gauge32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantQosCount.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantQosCount.setDescription('The current number of entries in the raqmonQosTable for this participant and session.')
raqmonParticipantEndDate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantEndDate.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantEndDate.setDescription('The date and time of the most recent report received.')
raqmonParticipantDestPayloadType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 127), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantDestPayloadType.setReference('RFC 3551 and Section 5.25 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantDestPayloadType.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantDestPayloadType.setDescription('Destination Payload Type. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantSrcPayloadType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 127), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantSrcPayloadType.setReference('RFC 3551 and Section 5.24 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantSrcPayloadType.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantSrcPayloadType.setDescription('Source Payload Type. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantActive = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantActive.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantActive.setDescription("Value 'true' indicates that the session for this participant is active (open). Value 'false' indicates that the session is closed (terminated).")
raqmonParticipantPeer = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 16), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantPeer.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantPeer.setDescription('The pointer to the corresponding entry in this table for the other peer participant. If there is no such entry in the participant table of the collector represented by this SNMP agent, then the value will be { 0 0 }. ')
raqmonParticipantPeerAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantPeerAddrType.setDescription('The type of the Internet address of the peer participant for this session.')
raqmonParticipantPeerAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantPeerAddr.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantPeerAddr.setDescription('The Internet Address of the peer participant for this session. Formatting of this object is determined by the value of raqmonParticipantPeerAddrType.')
raqmonParticipantSrcL2Priority = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantSrcL2Priority.setReference('Section 5.26 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantSrcL2Priority.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantSrcL2Priority.setDescription('Source Layer 2 Priority. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantDestL2Priority = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantDestL2Priority.setReference('Section 5.28 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantDestL2Priority.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantDestL2Priority.setDescription('Destination Layer 2 Priority. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantSrcDSCP = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantSrcDSCP.setReference('Section 5.27 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantSrcDSCP.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantSrcDSCP.setDescription('Source Layer 3 DSCP value. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantDestDSCP = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantDestDSCP.setReference('Section 5.29 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantDestDSCP.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantDestDSCP.setDescription('Destination Layer 3 DSCP value.')
raqmonParticipantCpuMean = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantCpuMean.setReference('Section 5.30 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantCpuMean.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantCpuMean.setDescription('Mean CPU utilization. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantCpuMin = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantCpuMin.setReference('Section 5.30 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantCpuMin.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantCpuMin.setDescription('Minimum CPU utilization. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantCpuMax = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantCpuMax.setReference('Section 5.30 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantCpuMax.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantCpuMax.setDescription('Maximum CPU utilization. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantMemoryMean = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantMemoryMean.setReference('Section 5.31 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantMemoryMean.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantMemoryMean.setDescription('Mean memory utilization. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantMemoryMin = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantMemoryMin.setReference('Section 5.31 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantMemoryMin.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantMemoryMin.setDescription('Minimum memory utilization. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantMemoryMax = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantMemoryMax.setReference('Section 5.31 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantMemoryMax.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantMemoryMax.setDescription('Maximum memory utilization. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantNetRTTMean = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantNetRTTMean.setReference('Section 5.11 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantNetRTTMean.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantNetRTTMean.setDescription('Mean round-trip end-to-end network delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantNetRTTMin = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantNetRTTMin.setReference('Section 5.11 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantNetRTTMin.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantNetRTTMin.setDescription('Minimum round-trip end-to-end network delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantNetRTTMax = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantNetRTTMax.setReference('Section 5.11 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantNetRTTMax.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantNetRTTMax.setDescription('Maximum round-trip end-to-end network delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantIAJitterMean = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantIAJitterMean.setReference('Section 5.14 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantIAJitterMean.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantIAJitterMean.setDescription('Mean inter-arrival jitter over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantIAJitterMin = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantIAJitterMin.setReference('Section 5.14 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantIAJitterMin.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantIAJitterMin.setDescription('Minimum inter-arrival jitter over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantIAJitterMax = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantIAJitterMax.setReference('Section 5.14 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantIAJitterMax.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantIAJitterMax.setDescription('Maximum inter-arrival jitter over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantIPDVMean = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantIPDVMean.setReference('Section 5.15 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantIPDVMean.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantIPDVMean.setDescription('Mean IP packet delay variation over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantIPDVMin = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantIPDVMin.setReference('Section 5.15 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantIPDVMin.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantIPDVMin.setDescription('Minimum IP packet delay variation over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantIPDVMax = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantIPDVMax.setReference('Section 5.15 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantIPDVMax.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantIPDVMax.setDescription('Maximum IP packet delay variation over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantNetOwdMean = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantNetOwdMean.setReference('Section 5.12 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantNetOwdMean.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantNetOwdMean.setDescription('Mean Network one-way delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantNetOwdMin = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantNetOwdMin.setReference('Section 5.12 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantNetOwdMin.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantNetOwdMin.setDescription('Minimum Network one-way delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantNetOwdMax = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantNetOwdMax.setReference('Section 5.1 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantNetOwdMax.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantNetOwdMax.setDescription('Maximum Network one-way delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantAppDelayMean = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantAppDelayMean.setReference('Section 5.13 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantAppDelayMean.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAppDelayMean.setDescription('Mean application delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantAppDelayMin = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantAppDelayMin.setReference('Section 5.13 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantAppDelayMin.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAppDelayMin.setDescription('Minimum application delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantAppDelayMax = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantAppDelayMax.setReference('Section 5.13 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantAppDelayMax.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAppDelayMax.setDescription('Maximum application delay over the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantPacketsRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantPacketsRcvd.setReference('Section 5.16 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantPacketsRcvd.setDescription('Count of packets received for the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantPacketsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantPacketsSent.setReference('Section 5.17 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantPacketsSent.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantPacketsSent.setDescription('Count of packets sent for the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantOctetsRcvd = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantOctetsRcvd.setReference('Section 5.18 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantOctetsRcvd.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantOctetsRcvd.setDescription('Count of octets received for the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantOctetsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantOctetsSent.setReference('Section 5.19 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantOctetsSent.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantOctetsSent.setDescription('Count of octets sent for the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantLostPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantLostPackets.setReference('Section 5.20 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantLostPackets.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantLostPackets.setDescription('Count of packets lost by this receiver for the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantLostPacketsFrct = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantLostPacketsFrct.setReference('Section 5.21 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantLostPacketsFrct.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantLostPacketsFrct.setDescription('Fraction of lost packets out of total packets received. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantDiscards.setReference('Section 5.22 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantDiscards.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantDiscards.setDescription('Count of packets discarded by this receiver for the entire session. If the value was not reported to the collector, this object will have the value -1.')
raqmonParticipantDiscardsFrct = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), ))).setUnits('percents').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantDiscardsFrct.setReference('Section 5.23 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonParticipantDiscardsFrct.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantDiscardsFrct.setDescription('Fraction of discarded packets out of total packets received. If the value was not reported to the collector, this object will have the value -1.')
raqmonQosTable = MibTable((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2), )
if mibBuilder.loadTexts: raqmonQosTable.setStatus('current')
if mibBuilder.loadTexts: raqmonQosTable.setDescription('Table of historical information about quality-of-service data during sessions.')
raqmonQosEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1), ).setIndexNames((0, "RAQMON-MIB", "raqmonParticipantStartDate"), (0, "RAQMON-MIB", "raqmonParticipantIndex"), (0, "RAQMON-MIB", "raqmonQosTime"))
if mibBuilder.loadTexts: raqmonQosEntry.setStatus('current')
if mibBuilder.loadTexts: raqmonQosEntry.setDescription('Each entry contains information from a single RAQMON packet, related to a single session (application) run by one participant. Indexation by the start time of the session aims to ease sorting by management applications. Agents MUST NOT report identical start times for any two sessions on the same host. Rows are removed for inactive sessions when implementation-specific time or space limits are reached.')
raqmonQosTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds')
if mibBuilder.loadTexts: raqmonQosTime.setStatus('current')
if mibBuilder.loadTexts: raqmonQosTime.setDescription('Time of this entry measured from the start of the corresponding participant session.')
raqmonQoSEnd2EndNetDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQoSEnd2EndNetDelay.setReference('Section 5.11 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQoSEnd2EndNetDelay.setStatus('current')
if mibBuilder.loadTexts: raqmonQoSEnd2EndNetDelay.setDescription('The round-trip time. Will contain the previous value if there was no report for this time, or -1 if the value has never been reported.')
raqmonQoSInterArrivalJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQoSInterArrivalJitter.setReference('Section 5.14 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQoSInterArrivalJitter.setStatus('current')
if mibBuilder.loadTexts: raqmonQoSInterArrivalJitter.setDescription('An estimate of delay variation as observed by this receiver. Will contain the previous value if there was no report for this time, or -1 if the value has never been reported.')
raqmonQosRcvdPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQosRcvdPackets.setReference('Section 5.16 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQosRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: raqmonQosRcvdPackets.setDescription('Count of packets received by this receiver since the previous entry. Will contain the previous value if there was no report for this time, or -1 if the value has never been reported.')
raqmonQosRcvdOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQosRcvdOctets.setReference('Section 5.18 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQosRcvdOctets.setStatus('current')
if mibBuilder.loadTexts: raqmonQosRcvdOctets.setDescription('Count of octets received by this receiver since the previous report. Will contain the previous value if there was no report for this time, or -1 if the value has never been reported.')
raqmonQosSentPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQosSentPackets.setReference('Section 5.17 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQosSentPackets.setStatus('current')
if mibBuilder.loadTexts: raqmonQosSentPackets.setDescription('Count of packets sent since the previous report. Will contain the previous value if there was no report for this time, or -1 if the value has never been reported.')
raqmonQosSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQosSentOctets.setReference('Section 5.19 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQosSentOctets.setStatus('current')
if mibBuilder.loadTexts: raqmonQosSentOctets.setDescription('Count of octets sent since the previous report. Will contain the previous value if there was no report for this time, or -1 if the value has never been reported.')
raqmonQosLostPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQosLostPackets.setReference('Section 5.20 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQosLostPackets.setStatus('current')
if mibBuilder.loadTexts: raqmonQosLostPackets.setDescription('A count of packets lost as observed by this receiver since the previous report. Will contain the previous value if there was no report for this time, or -1 if the value has never been reported.')
raqmonQosSessionStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonQosSessionStatus.setReference('Section 5.10 of the [RFC4710]')
if mibBuilder.loadTexts: raqmonQosSessionStatus.setStatus('current')
if mibBuilder.loadTexts: raqmonQosSessionStatus.setDescription('The session status. Will contain the previous value if there was no report for this time or the zero-length string if no value was ever reported.')
raqmonParticipantAddrTable = MibTable((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 3), )
if mibBuilder.loadTexts: raqmonParticipantAddrTable.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAddrTable.setDescription('Maps raqmonParticipantAddr to the index of the raqmonParticipantTable. This table allows management applications to find entries sorted by raqmonParticipantAddr rather than raqmonParticipantStartDate.')
raqmonParticipantAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 3, 1), ).setIndexNames((0, "RAQMON-MIB", "raqmonParticipantAddrType"), (0, "RAQMON-MIB", "raqmonParticipantAddr"), (0, "RAQMON-MIB", "raqmonParticipantStartDate"), (0, "RAQMON-MIB", "raqmonParticipantIndex"))
if mibBuilder.loadTexts: raqmonParticipantAddrEntry.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAddrEntry.setDescription('Each entry corresponds to exactly one entry in the raqmonParticipantEntry: the entry containing the index pair raqmonParticipantStartDate, raqmonParticipantIndex. Note that there is no concern about the indexation of this table exceeding the limits defined by RFC 2578, Section 3.5. According to [RFC4710], Section 5.1, only IPv4 and IPv6 addresses can be reported as participant addresses.')
raqmonParticipantAddrEndDate = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 1, 3, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonParticipantAddrEndDate.setStatus('current')
if mibBuilder.loadTexts: raqmonParticipantAddrEndDate.setDescription('The value of raqmonParticipantEndDate for the corresponding raqmonParticipantEntry.')
raqmonException = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 1, 2))
raqmonSessionExceptionTable = MibTable((1, 3, 6, 1, 2, 1, 16, 31, 1, 2, 2), )
if mibBuilder.loadTexts: raqmonSessionExceptionTable.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionExceptionTable.setDescription('This table defines thresholds for the management station to get notifications about sessions that encountered poor quality of service. The information in this table MUST be persistent across agent reboots.')
raqmonSessionExceptionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 31, 1, 2, 2, 1), ).setIndexNames((0, "RAQMON-MIB", "raqmonSessionExceptionIndex"))
if mibBuilder.loadTexts: raqmonSessionExceptionEntry.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionExceptionEntry.setDescription('A conceptual row in the raqmonSessionExceptionTable.')
raqmonSessionExceptionIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: raqmonSessionExceptionIndex.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionExceptionIndex.setDescription('An index that uniquely identifies an entry in the raqmonSessionExceptionTable. Management applications can determine unused indices by performing GetNext or GetBulk operations on the Table.')
raqmonSessionExceptionIAJitterThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 2, 2, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: raqmonSessionExceptionIAJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionExceptionIAJitterThreshold.setDescription('Threshold for jitter. The value during a session must be greater than or equal to this value for an exception to be created.')
raqmonSessionExceptionNetRTTThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 2, 2, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: raqmonSessionExceptionNetRTTThreshold.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionExceptionNetRTTThreshold.setDescription('Threshold for round-trip time. The value during a session must be greater than or equal to this value for an exception to be created.')
raqmonSessionExceptionLostPacketsThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('tenth of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: raqmonSessionExceptionLostPacketsThreshold.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionExceptionLostPacketsThreshold.setDescription('Threshold for lost packets in units of tenths of a percent. The value during a session must be greater than or equal to this value for an exception to be created.')
raqmonSessionExceptionRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 31, 1, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: raqmonSessionExceptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: raqmonSessionExceptionRowStatus.setDescription("This object has a value of 'active' when exceptions are being monitored by the system. A newly-created conceptual row must have all the read-create objects initialized before becoming 'active'. A conceptual row that is in the 'notReady' or 'notInService' state MAY be removed after 5 minutes. No writeable objects can be changed while the row is active.")
raqmonConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 1, 3))
raqmonConfigPort = MibScalar((1, 3, 6, 1, 2, 1, 16, 31, 1, 3, 1), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raqmonConfigPort.setStatus('current')
if mibBuilder.loadTexts: raqmonConfigPort.setDescription('The UDP port to listen on for RAQMON reports, running on transport protocols other than SNMP. If the RAQMON PDU transport protocol is SNMP, a write operation on this object has no effect, as the standard port 162 is always used. The value of this object MUST be persistent across agent reboots.')
raqmonConfigPduTransport = MibScalar((1, 3, 6, 1, 2, 1, 16, 31, 1, 3, 2), Bits().clone(namedValues=NamedValues(("other", 0), ("tcp", 1), ("snmp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonConfigPduTransport.setStatus('current')
if mibBuilder.loadTexts: raqmonConfigPduTransport.setDescription('The PDU transport(s) used by this collector. If other(0) is set, the collector supports a transport other than SNMP or TCP. If tcp(1) is set, the collector supports TCP as a transport protocol. If snmp(2) is set, the collector supports SNMP as a transport protocol.')
raqmonConfigRaqmonPdus = MibScalar((1, 3, 6, 1, 2, 1, 16, 31, 1, 3, 3), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: raqmonConfigRaqmonPdus.setStatus('current')
if mibBuilder.loadTexts: raqmonConfigRaqmonPdus.setDescription('Count of RAQMON PDUs received by the Collector.')
raqmonConfigRDSTimeout = MibScalar((1, 3, 6, 1, 2, 1, 16, 31, 1, 3, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: raqmonConfigRDSTimeout.setStatus('current')
if mibBuilder.loadTexts: raqmonConfigRDSTimeout.setDescription('The number of seconds since the reception of the last RAQMON PDU from a RDS after which a session between the respective RDS and the collector will be considered terminated. The value of this object MUST be persistent across agent reboots.')
raqmonConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 2))
raqmonCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 2, 1))
raqmonGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 31, 2, 2))
raqmonCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 31, 2, 1, 1)).setObjects(("RAQMON-MIB", "raqmonCollectorGroup"), ("RAQMON-MIB", "raqmonCollectorNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raqmonCompliance = raqmonCompliance.setStatus('current')
if mibBuilder.loadTexts: raqmonCompliance.setDescription('Describes the requirements for conformance to the RAQMON MIB.')
raqmonCollectorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 31, 2, 2, 1)).setObjects(("RAQMON-MIB", "raqmonParticipantReportCaps"), ("RAQMON-MIB", "raqmonParticipantAddrType"), ("RAQMON-MIB", "raqmonParticipantAddr"), ("RAQMON-MIB", "raqmonParticipantSendPort"), ("RAQMON-MIB", "raqmonParticipantRecvPort"), ("RAQMON-MIB", "raqmonParticipantSetupDelay"), ("RAQMON-MIB", "raqmonParticipantName"), ("RAQMON-MIB", "raqmonParticipantAppName"), ("RAQMON-MIB", "raqmonParticipantQosCount"), ("RAQMON-MIB", "raqmonParticipantEndDate"), ("RAQMON-MIB", "raqmonParticipantDestPayloadType"), ("RAQMON-MIB", "raqmonParticipantSrcPayloadType"), ("RAQMON-MIB", "raqmonParticipantActive"), ("RAQMON-MIB", "raqmonParticipantPeer"), ("RAQMON-MIB", "raqmonParticipantPeerAddrType"), ("RAQMON-MIB", "raqmonParticipantPeerAddr"), ("RAQMON-MIB", "raqmonParticipantSrcL2Priority"), ("RAQMON-MIB", "raqmonParticipantDestL2Priority"), ("RAQMON-MIB", "raqmonParticipantSrcDSCP"), ("RAQMON-MIB", "raqmonParticipantDestDSCP"), ("RAQMON-MIB", "raqmonParticipantCpuMean"), ("RAQMON-MIB", "raqmonParticipantCpuMin"), ("RAQMON-MIB", "raqmonParticipantCpuMax"), ("RAQMON-MIB", "raqmonParticipantMemoryMean"), ("RAQMON-MIB", "raqmonParticipantMemoryMin"), ("RAQMON-MIB", "raqmonParticipantMemoryMax"), ("RAQMON-MIB", "raqmonParticipantNetRTTMean"), ("RAQMON-MIB", "raqmonParticipantNetRTTMin"), ("RAQMON-MIB", "raqmonParticipantNetRTTMax"), ("RAQMON-MIB", "raqmonParticipantIAJitterMean"), ("RAQMON-MIB", "raqmonParticipantIAJitterMin"), ("RAQMON-MIB", "raqmonParticipantIAJitterMax"), ("RAQMON-MIB", "raqmonParticipantIPDVMean"), ("RAQMON-MIB", "raqmonParticipantIPDVMin"), ("RAQMON-MIB", "raqmonParticipantIPDVMax"), ("RAQMON-MIB", "raqmonParticipantNetOwdMean"), ("RAQMON-MIB", "raqmonParticipantNetOwdMin"), ("RAQMON-MIB", "raqmonParticipantNetOwdMax"), ("RAQMON-MIB", "raqmonParticipantAppDelayMean"), ("RAQMON-MIB", "raqmonParticipantAppDelayMin"), ("RAQMON-MIB", "raqmonParticipantAppDelayMax"), ("RAQMON-MIB", "raqmonParticipantPacketsRcvd"), ("RAQMON-MIB", "raqmonParticipantPacketsSent"), ("RAQMON-MIB", "raqmonParticipantOctetsRcvd"), ("RAQMON-MIB", "raqmonParticipantOctetsSent"), ("RAQMON-MIB", "raqmonParticipantLostPackets"), ("RAQMON-MIB", "raqmonParticipantLostPacketsFrct"), ("RAQMON-MIB", "raqmonParticipantDiscards"), ("RAQMON-MIB", "raqmonParticipantDiscardsFrct"), ("RAQMON-MIB", "raqmonQoSEnd2EndNetDelay"), ("RAQMON-MIB", "raqmonQoSInterArrivalJitter"), ("RAQMON-MIB", "raqmonQosRcvdPackets"), ("RAQMON-MIB", "raqmonQosRcvdOctets"), ("RAQMON-MIB", "raqmonQosSentPackets"), ("RAQMON-MIB", "raqmonQosSentOctets"), ("RAQMON-MIB", "raqmonQosLostPackets"), ("RAQMON-MIB", "raqmonQosSessionStatus"), ("RAQMON-MIB", "raqmonParticipantAddrEndDate"), ("RAQMON-MIB", "raqmonConfigPort"), ("RAQMON-MIB", "raqmonSessionExceptionIAJitterThreshold"), ("RAQMON-MIB", "raqmonSessionExceptionNetRTTThreshold"), ("RAQMON-MIB", "raqmonSessionExceptionLostPacketsThreshold"), ("RAQMON-MIB", "raqmonSessionExceptionRowStatus"), ("RAQMON-MIB", "raqmonConfigPduTransport"), ("RAQMON-MIB", "raqmonConfigRaqmonPdus"), ("RAQMON-MIB", "raqmonConfigRDSTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raqmonCollectorGroup = raqmonCollectorGroup.setStatus('current')
if mibBuilder.loadTexts: raqmonCollectorGroup.setDescription('Objects used in RAQMON by a collector.')
raqmonCollectorNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 16, 31, 2, 2, 2)).setObjects(("RAQMON-MIB", "raqmonSessionAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raqmonCollectorNotificationsGroup = raqmonCollectorNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: raqmonCollectorNotificationsGroup.setDescription('Notifications emitted by a RAQMON collector.')
mibBuilder.exportSymbols("RAQMON-MIB", raqmonParticipantPacketsRcvd=raqmonParticipantPacketsRcvd, raqmonCompliance=raqmonCompliance, raqmonParticipantSetupDelay=raqmonParticipantSetupDelay, raqmonParticipantPacketsSent=raqmonParticipantPacketsSent, raqmonSessionExceptionTable=raqmonSessionExceptionTable, raqmonParticipantDestPayloadType=raqmonParticipantDestPayloadType, raqmonMIBObjects=raqmonMIBObjects, raqmonParticipantReportCaps=raqmonParticipantReportCaps, raqmonQoSEnd2EndNetDelay=raqmonQoSEnd2EndNetDelay, raqmonParticipantPeer=raqmonParticipantPeer, raqmonConformance=raqmonConformance, raqmonParticipantAppDelayMean=raqmonParticipantAppDelayMean, raqmonParticipantCpuMax=raqmonParticipantCpuMax, raqmonParticipantNetRTTMax=raqmonParticipantNetRTTMax, raqmonSessionExceptionIAJitterThreshold=raqmonSessionExceptionIAJitterThreshold, raqmonQosRcvdOctets=raqmonQosRcvdOctets, raqmonParticipantSrcL2Priority=raqmonParticipantSrcL2Priority, raqmonParticipantEndDate=raqmonParticipantEndDate, raqmonQosSentPackets=raqmonQosSentPackets, raqmonParticipantDestDSCP=raqmonParticipantDestDSCP, raqmonSessionExceptionRowStatus=raqmonSessionExceptionRowStatus, raqmonParticipantAppName=raqmonParticipantAppName, raqmonParticipantIAJitterMax=raqmonParticipantIAJitterMax, raqmonQosEntry=raqmonQosEntry, raqmonConfigRDSTimeout=raqmonConfigRDSTimeout, raqmonParticipantActive=raqmonParticipantActive, raqmonParticipantPeerAddrType=raqmonParticipantPeerAddrType, raqmonCompliances=raqmonCompliances, raqmonSessionExceptionEntry=raqmonSessionExceptionEntry, raqmonQosRcvdPackets=raqmonQosRcvdPackets, raqmonParticipantLostPacketsFrct=raqmonParticipantLostPacketsFrct, raqmonQosSessionStatus=raqmonQosSessionStatus, raqmonParticipantOctetsRcvd=raqmonParticipantOctetsRcvd, raqmonCollectorGroup=raqmonCollectorGroup, PYSNMP_MODULE_ID=raqmonMIB, raqmonParticipantIPDVMax=raqmonParticipantIPDVMax, raqmonParticipantTable=raqmonParticipantTable, raqmonParticipantDestL2Priority=raqmonParticipantDestL2Priority, raqmonCollectorNotificationsGroup=raqmonCollectorNotificationsGroup, raqmonParticipantMemoryMin=raqmonParticipantMemoryMin, raqmonParticipantLostPackets=raqmonParticipantLostPackets, raqmonParticipantDiscardsFrct=raqmonParticipantDiscardsFrct, raqmonParticipantAddrEndDate=raqmonParticipantAddrEndDate, raqmonParticipantSrcPayloadType=raqmonParticipantSrcPayloadType, raqmonSession=raqmonSession, raqmonQosLostPackets=raqmonQosLostPackets, raqmonParticipantNetOwdMin=raqmonParticipantNetOwdMin, raqmonQosTable=raqmonQosTable, raqmonParticipantIPDVMin=raqmonParticipantIPDVMin, raqmonParticipantCpuMin=raqmonParticipantCpuMin, raqmonParticipantNetRTTMin=raqmonParticipantNetRTTMin, raqmonParticipantQosCount=raqmonParticipantQosCount, raqmonConfigPduTransport=raqmonConfigPduTransport, raqmonParticipantSendPort=raqmonParticipantSendPort, raqmonParticipantAppDelayMin=raqmonParticipantAppDelayMin, raqmonConfig=raqmonConfig, raqmonGroups=raqmonGroups, raqmonSessionExceptionIndex=raqmonSessionExceptionIndex, raqmonConfigRaqmonPdus=raqmonConfigRaqmonPdus, raqmonConfigPort=raqmonConfigPort, raqmonParticipantSrcDSCP=raqmonParticipantSrcDSCP, raqmonMIB=raqmonMIB, raqmonQosTime=raqmonQosTime, raqmonParticipantIndex=raqmonParticipantIndex, raqmonParticipantRecvPort=raqmonParticipantRecvPort, raqmonSessionAlarm=raqmonSessionAlarm, raqmonParticipantStartDate=raqmonParticipantStartDate, raqmonSessionExceptionLostPacketsThreshold=raqmonSessionExceptionLostPacketsThreshold, raqmonParticipantAppDelayMax=raqmonParticipantAppDelayMax, raqmonParticipantDiscards=raqmonParticipantDiscards, raqmonParticipantAddrType=raqmonParticipantAddrType, raqmonParticipantCpuMean=raqmonParticipantCpuMean, raqmonParticipantIAJitterMin=raqmonParticipantIAJitterMin, raqmonParticipantOctetsSent=raqmonParticipantOctetsSent, raqmonNotifications=raqmonNotifications, raqmonParticipantNetRTTMean=raqmonParticipantNetRTTMean, raqmonParticipantMemoryMax=raqmonParticipantMemoryMax, raqmonParticipantAddr=raqmonParticipantAddr, raqmonQosSentOctets=raqmonQosSentOctets, raqmonParticipantMemoryMean=raqmonParticipantMemoryMean, raqmonParticipantPeerAddr=raqmonParticipantPeerAddr, raqmonParticipantName=raqmonParticipantName, raqmonSessionExceptionNetRTTThreshold=raqmonSessionExceptionNetRTTThreshold, raqmonParticipantAddrEntry=raqmonParticipantAddrEntry, raqmonParticipantIAJitterMean=raqmonParticipantIAJitterMean, raqmonParticipantEntry=raqmonParticipantEntry, raqmonParticipantAddrTable=raqmonParticipantAddrTable, raqmonQoSInterArrivalJitter=raqmonQoSInterArrivalJitter, raqmonParticipantIPDVMean=raqmonParticipantIPDVMean, raqmonParticipantNetOwdMean=raqmonParticipantNetOwdMean, raqmonParticipantNetOwdMax=raqmonParticipantNetOwdMax, raqmonException=raqmonException)
