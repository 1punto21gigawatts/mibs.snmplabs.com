#
# PySNMP MIB module NCRBSC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NCRBSC-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, MibIdentifier, ObjectIdentity, Gauge32, Integer32, Bits, Counter64, enterprises, Unsigned32, TimeTicks, iso, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Gauge32", "Integer32", "Bits", "Counter64", "enterprises", "Unsigned32", "TimeTicks", "iso", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTNCRBSCDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
class DisplayString(OctetString):
    pass

cdx6500PPCTNCRBisyncTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17), )
if mibBuilder.loadTexts: cdx6500PPCTNCRBisyncTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTNCRBisyncTable.setDescription('A table of NCRBSC Port configuration entries.')
cdx6500PPCTNCRBisyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1), ).setIndexNames((0, "NCRBSC-OPT-MIB", "cdx6500NCRBSCCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTNCRBisyncEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTNCRBisyncEntry.setDescription('A NCRBSC Configuration Table entry. Each entry contains the configuration parameters for a single NCRBSC port. ')
cdx6500NCRBSCCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortNumber.setDescription('The NCRBSC port number described by this entry.')
cdx6500NCRBSCCfgPADType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tpad", 0), ("hpad", 1), ("newvalTpad", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPADType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPADType.setDescription("Indicates whether the port is functioning as a Terminal PAD (TPAD) or a Host PAD (HPAD). newvalTpad : same functionality as 'tpad', new enumeration added for RFC1155 compatibility.")
cdx6500NCRBSCCfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgClockSource.setDescription("int - internal clock source. ext - external clock source. newvalInt - same functionality as 'int', new enumeration added for RFC1155 compatibility.")
cdx6500NCRBSCCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 19200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking.')
cdx6500NCRBSCCfgContention = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("hdx", 0), ("fdx", 1), ("newvalHdx", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgContention.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgContention.setDescription("Indicates whether Half Duplex (hdx) or Full Duplex (fdx) modem signals are being generated. Full Duplex indicates communication is occuring in both directions simultaneously between devices. Half Duplex indicates transmission is occuring in both directions, but only in one direction at a time. newvalHdx - same functionality as 'hdx', new enumeration added for RFC1155 compatibility.")
cdx6500NCRBSCCfgNumDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgNumDevices.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgNumDevices.setDescription('Specifies the number of physical devices on this line.')
cdx6500NCRBSCCfgServTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgServTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgServTimer.setDescription('The Service Timer specifies the interval of time in seconds between periodic servicing. Such servicing includes intervals between the time the PAD will attempt to poll devices that previously failed to respond and intervals between failures in attempts to establish a connection from a device configured for Autocall.')
cdx6500NCRBSCCfgErrThreshCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgErrThreshCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgErrThreshCount.setDescription('Indicates number of consecutive errors that can occur before a device is considered down.')
cdx6500NCRBSCCfgRetranTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgRetranTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgRetranTimeout.setDescription('Specifies the amount of time in TENTHS OF A SECOND before a retransmission of the previously sent protocol sequence is attempted. The effective range is 0.1 - 25.5 seconds. The MINIMUM acceptable values are dependent on the speed configured as follows (speed - responsetimeout): 1200 - 12, 2400 - 6, 4800 - 3,9600 - 2, 19200 - 2')
cdx6500NCRBSCCfgInterBuffTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgInterBuffTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgInterBuffTimeout.setDescription('Specifies the maximum amount of time in seconds the PAD will wait for the end of a multi-packet message from the network. If this time limit is exceeded, the PAD will abort the entire message and request retransmission.')
cdx6500NCRBSCCfgPortSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortSubAddr.setDescription('0 - 3 Decimal digits Calls addressed to this node and with this subaddress will be routed to this port.')
cdx6500NCRBSCCfgPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortOptions.setDescription('Select options on this NCRBSC port as follows: NONE - no option specified ORG - Controllers on this port will originate the calls ACK - DSP End-to-End Acknowledgements are to be used Any combination of above specified by summing (e.g. ORG+ACK).')
cdx6500NCRBSCCfgRestrictConnDest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgRestrictConnDest.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgRestrictConnDest.setDescription('1 - 32 Decimal digits or a single blank All calls originating from this port will be routed to the destination specified in this parameter, irrespective of route selection table entries. For example, to route calls to port 1, use P1. To route calls to port 2, station 4, use P2S4. Blank this field to disable this function.')
cdx6500NCRBSCCfgBillRec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgBillRec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgBillRec.setDescription("This controls whether billing (accounting) records will be created for calls on this Device. newvalOff : same functionality as 'off', new enumeration added for RFC1155 compatibility.")
cdx6500NCRBSCCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500NCRBSCCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PBCTNCRBSCDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1), )
if mibBuilder.loadTexts: cdx6500PBCTNCRBSCDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PBCTNCRBSCDeviceTable.setDescription('A table of NCRBSC device configuration entries.')
cdx6500PBCTNCRBSCDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1), ).setIndexNames((0, "NCRBSC-OPT-MIB", "cdx6500ncrbscDevPortNumber"), (0, "NCRBSC-OPT-MIB", "cdx6500ncrbscDevEntry"))
if mibBuilder.loadTexts: cdx6500PBCTNCRBSCDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PBCTNCRBSCDeviceEntry.setDescription('A NCRBSC Configuration Table entry. Each entry contains the configuration parameters for a single NCRBSC device.')
cdx6500ncrbscDevPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDevPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscDevPortNumber.setDescription('The NCRBSC port accessing this device')
cdx6500ncrbscDevEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscDevEntry.setDescription('The unique number for this specific port.')
cdx6500ncrbscBSCControlUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscBSCControlUnitAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscBSCControlUnitAddr.setDescription('0-2 Hex digits, This is the Poll address of the Control Unit that supports this device. It consists of two hexadecimal digits. Valid ranges depend on device Character Set as follows: EBCDIC: 40,C1,C2,C3,C4,C5,C6,C7,C8,C9,4A,4B,4C,4D,4E,4F, 50,D1,D2,D3,D4,D5,D6,D7,D8,D9,5A,5B,5C,5D,5E,5F ASCII : 20,41,42,43,44,45,46,47,48,49,5B,2E,3C,28,2B,21, 26,4A,4B,4C,4D,4E,4F,50,51,52,5D,24,2A,29,3B,5E')
cdx6500ncrbscDestControlUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDestControlUnitAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscDestControlUnitAddr.setDescription('0-3 Hex digits, Specifies control unit address on remote PAD. Used with Connection Request Mode = 2 or 3')
cdx6500ncrbscAutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscAutocallMnemonic.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscAutocallMnemonic.setDescription('0-2 Hex digits, This mnemonic name is used if this device is configured for AUTO or FAST calling.')
cdx6500ncrbscDeviceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("newvalNo", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDeviceEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscDeviceEnabled.setDescription("This parameter is used to enable or disable the operation of this controller device. yes - Enable device. no - Disable device. newvalNo - same functionality as 'no', new enumeration added for RFC1155 compatibility.")
cdx6500PPSTNCRBisyncTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17), )
if mibBuilder.loadTexts: cdx6500PPSTNCRBisyncTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTNCRBisyncTable.setDescription('A table of NCRBSC port statistics entries.')
cdx6500ncrbscPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1), ).setIndexNames((0, "NCRBSC-OPT-MIB", "cdx6500ncrbscStatPortNumber"))
if mibBuilder.loadTexts: cdx6500ncrbscPortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscPortStatEntry.setDescription('A NCRBSC Port Statistic Table entry. Each entry contains the statistics for a single NCRBSC port.')
cdx6500ncrbscStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscStatPortNumber.setDescription('The NCRBSC port number described by this entry.')
cdx6500ncrbscPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscPortStatus.setDescription("Port Status indicates whether or not the port is switched on and is ready for operation. This value may be one of : up - Port is up and running. down - port is down. disabled - port has been disabled. enabled - port has been enabled, but is not yet Up busyOut - port has been set to be disabled as soon as last active session is disestablished. No new sessions will be established. newvalDisabled - same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500ncrbscPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscPortState.setDescription('Port State indicates what the port is actually in the process of doing. This value may be one of : INACTIVE - H/TPAD port inactive entered during boot. WTPOLSERVE - TPAD is waiting for response to a poll. WTSELRESP - TPAD is waiting for the response to a select. WTDATARESP - H/TPAD is waiting for data to be acknowledged. DATA - H/TPAD is in the process of sending/receiving data. SEL/POL - TPAD is about to select or poll a controller. This is the most common state for a TPAD. SELECT - TPAD is about to select a device. POLL - TPAD is about to poll a device. WTENQRESP - H/TPAD is waiting for a NAK response to an ENQ sent. IDLE - HPAD is waiting for the host to send commands. This is the most common state of the HPAD. WTEOT - HPAD is waiting for an expected EOT from the host. FLUSHINGDATA - HPAD encountered an error in the message received from the host. As a result, the data is being flushed. WTLCM - HPAD received a read/modify and is waiting for the response from the TPAD.')
cdx6500ncrbscPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscPortSpeed.setDescription('This is the speed of the port if clock is internal. If clock is external, this is the detected clock speed. If Port Speed is 0, clock is external, but clocking is not being received from attatched device.')
cdx6500ncrbscPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortUtilIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscPortUtilIn.setDescription('Percentage of port input bandwidth in use.')
cdx6500ncrbscPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortUtilOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscPortUtilOut.setDescription('Percentage of Port output bandwidth in use.')
cdx6500ncrbscInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscInMsgs.setDescription('Number of message received since last node, port, or statistics reset.')
cdx6500ncrbscOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscOutMsgs.setDescription('Number of message sent since last node, port, or statistics reset.')
cdx6500ncrbscInChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscInChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscInChars.setDescription('Number of characters received since last node, port, or statistics reset.')
cdx6500ncrbscOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscOutChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscOutChars.setDescription('Number of characters sent since last node, port, or statistics reset.')
cdx6500ncrbscCharRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscCharRateIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscCharRateIn.setDescription('Number of characters received per second.')
cdx6500ncrbscCharRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscCharRateOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscCharRateOut.setDescription('Number of characters sent per second.')
cdx6500ncrbscCrcBccErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscCrcBccErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscCrcBccErrs.setDescription('Number of CRC errors since last node, port, or statistics reset.')
cdx6500ncrbscRviRx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscRviRx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscRviRx.setDescription('Accumulator, received RVI.')
cdx6500ncrbscRviTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscRviTx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscRviTx.setDescription('Accumulator, transmitted RVI.')
cdx6500ncrbscWackRx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscWackRx.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscWackRx.setDescription('Accumulator, recevied WACK.')
cdx6500ncrbscNconvRxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNconvRxMax.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscNconvRxMax.setDescription('Maximum number of conversation messages received from device within a poll or select.')
cdx6500ncrbscNconvTxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNconvTxMax.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscNconvTxMax.setDescription('Maximum number of conversation messages sent to device within a poll or select.')
cdx6500ncrbscNgroupRxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNgroupRxMax.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscNgroupRxMax.setDescription('Maximum number of grouping messages received from device within a poll or select.')
cdx6500ncrbscNgroupTxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNgroupTxMax.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscNgroupTxMax.setDescription('Maximum number of grouping messages sent to device within a poll or select.')
cdx6500ncrbscLongRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscLongRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscLongRespTime.setDescription('Longest response time')
cdx6500ncrbscAverageRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscAverageRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscAverageRespTime.setDescription('Average response time ')
cdx6500ncrbscRviForce = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscRviForce.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ncrbscRviForce.setDescription("Number of RVI's sent to device from the polling algorithm.")
mibBuilder.exportSymbols("NCRBSC-OPT-MIB", cdx6500ncrbscRviTx=cdx6500ncrbscRviTx, cdx6500ncrbscInMsgs=cdx6500ncrbscInMsgs, cdx6500ncrbscPortUtilOut=cdx6500ncrbscPortUtilOut, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500ncrbscNconvTxMax=cdx6500ncrbscNconvTxMax, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500NCRBSCCfgPortOptions=cdx6500NCRBSCCfgPortOptions, cdx6500NCRBSCCfgRestrictConnDest=cdx6500NCRBSCCfgRestrictConnDest, cdx6500ncrbscDeviceEnabled=cdx6500ncrbscDeviceEnabled, cdx6500PCTNCRBSCDeviceGroup=cdx6500PCTNCRBSCDeviceGroup, cdx6500PPCTNCRBisyncEntry=cdx6500PPCTNCRBisyncEntry, cdx6500PPCTNCRBisyncTable=cdx6500PPCTNCRBisyncTable, cdx6500NCRBSCCfgErrThreshCount=cdx6500NCRBSCCfgErrThreshCount, codex=codex, cdx6500ncrbscBSCControlUnitAddr=cdx6500ncrbscBSCControlUnitAddr, cdx6500ncrbscAverageRespTime=cdx6500ncrbscAverageRespTime, cdx6500NCRBSCCfgContention=cdx6500NCRBSCCfgContention, cdx6500ncrbscPortStatus=cdx6500ncrbscPortStatus, cdx6500NCRBSCCfgPADType=cdx6500NCRBSCCfgPADType, cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption=cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption, cdx6500ncrbscCrcBccErrs=cdx6500ncrbscCrcBccErrs, cdx6500ncrbscAutocallMnemonic=cdx6500ncrbscAutocallMnemonic, cdx6500NCRBSCCfgBillRec=cdx6500NCRBSCCfgBillRec, cdx6500NCRBSCCfgNumDevices=cdx6500NCRBSCCfgNumDevices, cdx6500ncrbscWackRx=cdx6500ncrbscWackRx, cdx6500NCRBSCCfgServTimer=cdx6500NCRBSCCfgServTimer, cdx6500ncrbscLongRespTime=cdx6500ncrbscLongRespTime, cdx6500ncrbscPortState=cdx6500ncrbscPortState, cdx6500ncrbscOutChars=cdx6500ncrbscOutChars, cdx6500Configuration=cdx6500Configuration, cdx6500ncrbscRviRx=cdx6500ncrbscRviRx, cdx6500ncrbscPortUtilIn=cdx6500ncrbscPortUtilIn, cdx6500NCRBSCCfgClockSpeed=cdx6500NCRBSCCfgClockSpeed, cdx6500PBCTNCRBSCDeviceTable=cdx6500PBCTNCRBSCDeviceTable, cdx6500ncrbscPortSpeed=cdx6500ncrbscPortSpeed, cdx6500Statistics=cdx6500Statistics, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500ncrbscPortStatEntry=cdx6500ncrbscPortStatEntry, cdx6500NCRBSCCfgPortNumber=cdx6500NCRBSCCfgPortNumber, cdx6500ncrbscDestControlUnitAddr=cdx6500ncrbscDestControlUnitAddr, cdx6500ncrbscCharRateOut=cdx6500ncrbscCharRateOut, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500ncrbscRviForce=cdx6500ncrbscRviForce, cdx6500ncrbscDevEntry=cdx6500ncrbscDevEntry, cdx6500ncrbscInChars=cdx6500ncrbscInChars, cdx6500NCRBSCCfgClockSource=cdx6500NCRBSCCfgClockSource, cdx6500NCRBSCCfgElectricalInterfaceType=cdx6500NCRBSCCfgElectricalInterfaceType, cdx6500PBCTNCRBSCDeviceEntry=cdx6500PBCTNCRBSCDeviceEntry, cdx6500ncrbscOutMsgs=cdx6500ncrbscOutMsgs, cdx6500NCRBSCCfgV24ElectricalInterfaceOption=cdx6500NCRBSCCfgV24ElectricalInterfaceOption, cdx6500ncrbscNgroupTxMax=cdx6500ncrbscNgroupTxMax, cdx6500NCRBSCCfgRetranTimeout=cdx6500NCRBSCCfgRetranTimeout, cdxProductSpecific=cdxProductSpecific, cdx6500NCRBSCCfgInterBuffTimeout=cdx6500NCRBSCCfgInterBuffTimeout, cdx6500ncrbscCharRateIn=cdx6500ncrbscCharRateIn, cdx6500ncrbscDevPortNumber=cdx6500ncrbscDevPortNumber, DisplayString=DisplayString, cdx6500NCRBSCCfgPortSubAddr=cdx6500NCRBSCCfgPortSubAddr, cdx6500PPSTNCRBisyncTable=cdx6500PPSTNCRBisyncTable, cdx6500ncrbscNconvRxMax=cdx6500ncrbscNconvRxMax, cdx6500=cdx6500, cdx6500ncrbscStatPortNumber=cdx6500ncrbscStatPortNumber, cdx6500ncrbscNgroupRxMax=cdx6500ncrbscNgroupRxMax)
