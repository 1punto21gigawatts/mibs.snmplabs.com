#
# PySNMP MIB module NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifCounterDiscontinuityGroup, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifCounterDiscontinuityGroup", "ifIndex")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Bits, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, mib_2, IpAddress, NotificationType, Gauge32, MibIdentifier, Unsigned32, Counter32, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "mib-2", "IpAddress", "NotificationType", "Gauge32", "MibIdentifier", "Unsigned32", "Counter32", "Integer32", "TimeTicks")
StorageType, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "TextualConvention", "DisplayString")
natMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 123))
natMIB.setRevisions(('2015-10-02 00:00', '2005-03-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: natMIB.setRevisionsDescriptions(('Deprecation of all objects, published as RFC 7658. See NATV2-MIB in RFC 7659 for recommended replacement.', 'Initial version, published as RFC 4008.',))
if mibBuilder.loadTexts: natMIB.setLastUpdated('201510020000Z')
if mibBuilder.loadTexts: natMIB.setOrganization('IETF Behavior Engineering for Hindrance Avoidance (BEHAVE) Working Group')
if mibBuilder.loadTexts: natMIB.setContactInfo('Working Group Email: behave@ietf.org Simon Perreault Jive Communications Quebec, QC Canada Email: sperreault@jive.com Tina Tsou Huawei Technologies Bantian, Longgang District Shenzhen 518129 China Email: tina.tsou.zouting@huawei.com Senthil Sivakumar Cisco Systems 7100-8 Kit Creek Road Research Triangle Park, North Carolina 27709 United States Phone: +1 919 392 5158 Email: ssenthil@cisco.com Tom Taylor PT Taylor Consulting Ottawa Canada Email: tom.taylor.stds@gmail.com')
if mibBuilder.loadTexts: natMIB.setDescription("This MIB module defines the generic managed objects for NAT. Copyright (c) 2015 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info). This version of this MIB module is part of RFC 7658; see the RFC itself for full legal notices.")
natMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 123, 1))
class NatProtocolType(TextualConvention, Integer32):
    reference = 'RFC 7658, RFC 7659'
    description = 'A list of protocols that support the network address translation. Inclusion of the values is not intended to imply that those protocols need to be supported. Any change in this TEXTUAL-CONVENTION should also be reflected in the definition of NatProtocolMap, which is a BITS representation of this. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("other", 2), ("icmp", 3), ("udp", 4), ("tcp", 5))

class NatProtocolMap(TextualConvention, Bits):
    reference = 'RFC 7658, RFC 7659'
    description = 'A bitmap of protocol identifiers that support the network address translation. Any change in this TEXTUAL-CONVENTION should also be reflected in the definition of NatProtocolType. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    namedValues = NamedValues(("other", 0), ("icmp", 1), ("udp", 2), ("tcp", 3))

class NatAddrMapId(TextualConvention, Unsigned32):
    reference = 'RFC 7658, RFC 7659'
    description = 'A unique ID that is assigned to each address map by a NAT-enabled device. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class NatBindIdOrZero(TextualConvention, Unsigned32):
    reference = 'RFC 7658, RFC 7659'
    description = 'A unique ID that is assigned to each bind by a NAT-enabled device. The bind ID will be zero in the case of a Symmetric NAT. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class NatBindId(TextualConvention, Unsigned32):
    reference = 'RFC 7658, RFC 7659'
    description = 'A unique ID that is assigned to each bind by a NAT-enabled device. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class NatSessionId(TextualConvention, Unsigned32):
    reference = 'RFC 7658, RFC 7659'
    description = 'A unique ID that is assigned to each session by a NAT-enabled device. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class NatBindMode(TextualConvention, Integer32):
    reference = 'RFC 7658, RFC 7659'
    description = 'An indication of whether the bind is an address bind or an address port bind. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("addressBind", 1), ("addressPortBind", 2))

class NatAssociationType(TextualConvention, Integer32):
    reference = 'RFC 7658, RFC 7659'
    description = 'An indication of whether the association is static or dynamic. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dynamic", 2))

class NatTranslationEntity(TextualConvention, Bits):
    reference = 'RFC 7658, RFC 7659'
    description = 'An indication of a) the direction of a session for which an address map entry, address bind, or port bind is applicable, and b) the entity (source or destination) within the session that is subject to translation. Deprecated in favor of NATV2-MIB.'
    status = 'deprecated'
    namedValues = NamedValues(("inboundSrcEndPoint", 0), ("outboundDstEndPoint", 1), ("inboundDstEndPoint", 2), ("outboundSrcEndPoint", 3))

natDefTimeouts = MibIdentifier((1, 3, 6, 1, 2, 1, 123, 1, 1))
natNotifCtrl = MibIdentifier((1, 3, 6, 1, 2, 1, 123, 1, 2))
natBindDefIdleTimeout = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: natBindDefIdleTimeout.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natBindDefIdleTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: natBindDefIdleTimeout.setDescription('The default Bind (Address Bind or Port Bind) idle timeout parameter. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a reinitialization of the management system. Deprecated in favor of NATV2-MIB.')
natUdpDefIdleTimeout = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: natUdpDefIdleTimeout.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natUdpDefIdleTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: natUdpDefIdleTimeout.setDescription('The default UDP idle timeout parameter. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a reinitialization of the management system. Deprecated in favor of NATV2-MIB.')
natIcmpDefIdleTimeout = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: natIcmpDefIdleTimeout.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natIcmpDefIdleTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: natIcmpDefIdleTimeout.setDescription('The default ICMP idle timeout parameter. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a reinitialization of the management system. Deprecated in favor of NATV2-MIB.')
natOtherDefIdleTimeout = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: natOtherDefIdleTimeout.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natOtherDefIdleTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: natOtherDefIdleTimeout.setDescription('The default idle timeout parameter for protocols represented by the value other (2) in NatProtocolType. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a reinitialization of the management system. Deprecated in favor of NATV2-MIB.')
natTcpDefIdleTimeout = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(86400)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: natTcpDefIdleTimeout.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natTcpDefIdleTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: natTcpDefIdleTimeout.setDescription('The default time interval that a NAT session for an established TCP connection is allowed to remain valid without any activity on the TCP connection. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a reinitialization of the management system. Deprecated in favor of NATV2-MIB.')
natTcpDefNegTimeout = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: natTcpDefNegTimeout.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natTcpDefNegTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: natTcpDefNegTimeout.setDescription('The default time interval that a NAT session for a TCP connection that is not in the established state is allowed to remain valid without any activity on the TCP connection. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a reinitialization of the management system. Deprecated in favor of NATV2-MIB.')
natNotifThrottlingInterval = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 3600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: natNotifThrottlingInterval.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natNotifThrottlingInterval.setStatus('deprecated')
if mibBuilder.loadTexts: natNotifThrottlingInterval.setDescription("This object controls the generation of the natPacketDiscard notification. If this object has a value of zero, then no natPacketDiscard notifications will be transmitted by the agent. If this object has a non-zero value, then the agent must not generate more than one natPacketDiscard 'notification-event' in the indicated period, where a 'notification-event' is the generation of a single notification PDU type to a list of notification destinations. If additional NAT packets are discarded within the throttling period, then notification-events for these changes must be suppressed by the agent until the current throttling period expires. If natNotifThrottlingInterval notification generation is enabled, the suggested default throttling period is 60 seconds, but generation of the natPacketDiscard notification should be disabled by default. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a reinitialization of the management system. The actual transmission of notifications is controlled via the MIB modules in RFC 3413. Deprecated in favor of NATV2-MIB.")
natInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 123, 1, 3), )
if mibBuilder.loadTexts: natInterfaceTable.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natInterfaceTable.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceTable.setDescription('This table specifies the attributes for interfaces on a device supporting NAT function. Deprecated in favor of NATV2-MIB.')
natInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 123, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: natInterfaceEntry.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natInterfaceEntry.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceEntry.setDescription('Each entry in the natInterfaceTable holds a set of parameters for an interface, instantiated by ifIndex. Therefore, the interface index must have been assigned, according to the applicable procedures, before it can be meaningfully used. Generally, this means that the interface must exist. When natStorageType is of type nonVolatile, however, this may reflect the configuration for an interface whose ifIndex has been assigned but for which the supporting implementation is not currently present. Deprecated in favor of NATV2-MIB.')
natInterfaceRealm = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("public", 2))).clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natInterfaceRealm.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natInterfaceRealm.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceRealm.setDescription('This object identifies whether this interface is connected to the private or the public realm. Deprecated in favor of NATV2-MIB.')
natInterfaceServiceType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("basicNat", 0), ("napt", 1), ("bidirectionalNat", 2), ("twiceNat", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natInterfaceServiceType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natInterfaceServiceType.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceServiceType.setDescription('An indication of the direction in which new sessions are permitted and the extent of translation done within the IP and transport headers. Deprecated in favor of NATV2-MIB.')
natInterfaceInTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natInterfaceInTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natInterfaceInTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceInTranslates.setDescription('Number of packets received on this interface that were translated. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natInterfaceOutTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natInterfaceOutTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natInterfaceOutTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceOutTranslates.setDescription('Number of translated packets that were sent out this interface. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natInterfaceDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natInterfaceDiscards.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natInterfaceDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceDiscards.setDescription('Number of packets that had to be rejected/dropped due to a lack of resources for this interface. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 3, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natInterfaceStorageType.setReference('RFC 7658, RFC 7659, and Section 2 of RFC 2579 (Textual Conventions for Conventions for SMIv2).')
if mibBuilder.loadTexts: natInterfaceStorageType.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row. Deprecated in favor of NATV2-MIB.")
natInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natInterfaceRowStatus.setReference('RFC 7658, RFC 7659, and Section 2 of RFC 2579 (Textual Conventions for Conventions for SMIv2).')
if mibBuilder.loadTexts: natInterfaceRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: natInterfaceRowStatus.setDescription("The status of this conceptual row. Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the natInterfaceRowStatus column is 'notReady'. In particular, a newly created row cannot be made active until the corresponding instance of natInterfaceServiceType has been set. None of the objects in this row may be modified while the value of this object is active(1). Deprecated in favor of NATV2-MIB.")
natAddrMapTable = MibTable((1, 3, 6, 1, 2, 1, 123, 1, 4), )
if mibBuilder.loadTexts: natAddrMapTable.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapTable.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapTable.setDescription('This table lists address map parameters for NAT. Deprecated in favor of NATV2-MIB.')
natAddrMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 123, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NAT-MIB", "natAddrMapIndex"))
if mibBuilder.loadTexts: natAddrMapEntry.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapEntry.setDescription('This entry represents an address map to be used for NAT and contributes to the dynamic and/or static address mapping tables of the NAT device. Deprecated in favor of NATV2-MIB.')
natAddrMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 1), NatAddrMapId())
if mibBuilder.loadTexts: natAddrMapIndex.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapIndex.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapIndex.setDescription('Along with ifIndex, this object uniquely identifies an entry in the natAddrMapTable. Address map entries are applied in the order specified by natAddrMapIndex. Deprecated in favor of NATV2-MIB.')
natAddrMapName = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapName.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapName.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapName.setDescription('Name identifying all map entries in the table associated with the same interface. All map entries with the same ifIndex MUST have the same map name. Deprecated in favor of NATV2-MIB.')
natAddrMapEntryType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 3), NatAssociationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapEntryType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapEntryType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapEntryType.setDescription('This parameter can be used to set up static or dynamic address maps. Deprecated in favor of NATV2-MIB.')
natAddrMapTranslationEntity = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 4), NatTranslationEntity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapTranslationEntity.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapTranslationEntity.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapTranslationEntity.setDescription('The endpoint entity (source or destination) in inbound or outbound sessions (i.e., first packets) that may be translated by an address map entry. Session direction (inbound or outbound) is derived from the direction of the first packet of a session traversing a NAT interface. NAT address (and Transport-ID) maps may be defined to effect inbound or outbound sessions. Traditionally, address maps for Basic NAT and NAPT are configured on a public interface for outbound sessions, effecting translation of source endpoint. The value of this object must be set to outboundSrcEndPoint for those interfaces. Alternately, if address maps for Basic NAT and NAPT were to be configured on a private interface, the desired value for this object for the map entries would be inboundSrcEndPoint (i.e., effecting translation of source endpoint for inbound sessions). If twiceNAT were to be configured on a private interface, the desired value for this object for the map entries would be a bitmask of inboundSrcEndPoint and inboundDstEndPoint. Deprecated in favor of NATV2-MIB.')
natAddrMapLocalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapLocalAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapLocalAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapLocalAddrType.setDescription('This object specifies the address type used for natAddrMapLocalAddrFrom and natAddrMapLocalAddrTo. Deprecated in favor of NATV2-MIB.')
natAddrMapLocalAddrFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapLocalAddrFrom.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapLocalAddrFrom.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapLocalAddrFrom.setDescription('This object specifies the first IP address of the range of IP addresses mapped by this translation entry. The value of this object must be less than or equal to the value of the natAddrMapLocalAddrTo object. The type of this address is determined by the value of the natAddrMapLocalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrMapLocalAddrTo = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapLocalAddrTo.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapLocalAddrTo.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapLocalAddrTo.setDescription('This object specifies the last IP address of the range of IP addresses mapped by this translation entry. If only a single address is being mapped, the value of this object is equal to the value of natAddrMapLocalAddrFrom. For a static NAT, the number of addresses in the range defined by natAddrMapLocalAddrFrom and natAddrMapLocalAddrTo must be equal to the number of addresses in the range defined by natAddrMapGlobalAddrFrom and natAddrMapGlobalAddrTo. The value of this object must be greater than or equal to the value of the natAddrMapLocalAddrFrom object. The type of this address is determined by the value of the natAddrMapLocalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrMapLocalPortFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 8), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapLocalPortFrom.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapLocalPortFrom.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapLocalPortFrom.setDescription('If this conceptual row describes a Basic NAT address mapping, then the value of this object must be zero. If this conceptual row describes NAPT, then the value of this object specifies the first port number in the range of ports being mapped. The value of this object must be less than or equal to the value of the natAddrMapLocalPortTo object. If the translation specifies a single port, then the value of this object is equal to the value of natAddrMapLocalPortTo. Deprecated in favor of NATV2-MIB.')
natAddrMapLocalPortTo = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapLocalPortTo.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapLocalPortTo.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapLocalPortTo.setDescription('If this conceptual row describes a Basic NAT address mapping, then the value of this object must be zero. If this conceptual row describes NAPT, then the value of this object specifies the last port number in the range of ports being mapped. The value of this object must be greater than or equal to the value of the natAddrMapLocalPortFrom object. If the translation specifies a single port, then the value of this object is equal to the value of natAddrMapLocalPortFrom. Deprecated in favor of NATV2-MIB.')
natAddrMapGlobalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 10), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapGlobalAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapGlobalAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapGlobalAddrType.setDescription('This object specifies the address type used for natAddrMapGlobalAddrFrom and natAddrMapGlobalAddrTo. Deprecated in favor of NATV2-MIB.')
natAddrMapGlobalAddrFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapGlobalAddrFrom.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapGlobalAddrFrom.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapGlobalAddrFrom.setDescription('This object specifies the first IP address of the range of IP addresses being mapped to. The value of this object must be less than or equal to the value of the natAddrMapGlobalAddrTo object. The type of this address is determined by the value of the natAddrMapGlobalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrMapGlobalAddrTo = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapGlobalAddrTo.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapGlobalAddrTo.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapGlobalAddrTo.setDescription('This object specifies the last IP address of the range of IP addresses being mapped to. If only a single address is being mapped to, the value of this object is equal to the value of natAddrMapGlobalAddrFrom. For a static NAT, the number of addresses in the range defined by natAddrMapGlobalAddrFrom and natAddrMapGlobalAddrTo must be equal to the number of addresses in the range defined by natAddrMapLocalAddrFrom and natAddrMapLocalAddrTo. The value of this object must be greater than or equal to the value of the natAddrMapGlobalAddrFrom object. The type of this address is determined by the value of the natAddrMapGlobalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrMapGlobalPortFrom = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 13), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapGlobalPortFrom.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapGlobalPortFrom.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapGlobalPortFrom.setDescription('If this conceptual row describes a Basic NAT address mapping, then the value of this object must be zero. If this conceptual row describes NAPT, then the value of this object specifies the first port number in the range of ports being mapped to. The value of this object must be less than or equal to the value of the natAddrMapGlobalPortTo object. If the translation specifies a single port, then the value of this object is equal to the value natAddrMapGlobalPortTo. Deprecated in favor of NATV2-MIB.')
natAddrMapGlobalPortTo = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 14), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapGlobalPortTo.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapGlobalPortTo.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapGlobalPortTo.setDescription('If this conceptual row describes a Basic NAT address mapping, then the value of this object must be zero. If this conceptual row describes NAPT, then the value of this object specifies the last port number in the range of ports being mapped to. The value of this object must be greater than or equal to the value of the natAddrMapGlobalPortFrom object. If the translation specifies a single port, then the value of this object is equal to the value of natAddrMapGlobalPortFrom. Deprecated in favor of NATV2-MIB.')
natAddrMapProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 15), NatProtocolMap()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapProtocol.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapProtocol.setDescription('This object specifies a bitmap of protocol identifiers. Deprecated in favor of NATV2-MIB.')
natAddrMapInTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrMapInTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapInTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapInTranslates.setDescription('The number of inbound packets pertaining to this address map entry that were translated. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natAddrMapOutTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrMapOutTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapOutTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapOutTranslates.setDescription('The number of outbound packets pertaining to this address map entry that were translated. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natAddrMapDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrMapDiscards.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapDiscards.setDescription('The number of packets pertaining to this address map entry that were dropped due to lack of addresses in the address pool identified by this address map. The value of this object must always be zero in case of a static address map. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natAddrMapAddrUsed = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrMapAddrUsed.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrMapAddrUsed.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapAddrUsed.setDescription('The number of addresses pertaining to this address map that are currently being used from the NAT pool. The value of this object must always be zero in the case of a static address map. Deprecated in favor of NATV2-MIB.')
natAddrMapStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 20), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapStorageType.setReference('RFC 7658, RFC 7659, and Section 2 of RFC 2579 (Textual Conventions for Conventions for SMIv2).')
if mibBuilder.loadTexts: natAddrMapStorageType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row. Deprecated in favor of NATV2-MIB.")
natAddrMapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 4, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natAddrMapRowStatus.setReference('RFC 7658, RFC 7659, and Section 2 of RFC 2579 (Textual Conventions for Conventions for SMIv2).')
if mibBuilder.loadTexts: natAddrMapRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrMapRowStatus.setDescription("The status of this conceptual row. Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the natAddrMapRowStatus column is 'notReady'. None of the objects in this row may be modified while the value of this object is active(1). Deprecated in favor of NATV2-MIB.")
natAddrBindNumberOfEntries = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindNumberOfEntries.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindNumberOfEntries.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindNumberOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the natAddrBindTable. Deprecated in favor of NATV2-MIB.')
natAddrBindTable = MibTable((1, 3, 6, 1, 2, 1, 123, 1, 6), )
if mibBuilder.loadTexts: natAddrBindTable.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindTable.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindTable.setDescription('This table holds information about the currently active NAT BINDs. Deprecated in favor of NATV2-MIB.')
natAddrBindEntry = MibTableRow((1, 3, 6, 1, 2, 1, 123, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NAT-MIB", "natAddrBindLocalAddrType"), (0, "NAT-MIB", "natAddrBindLocalAddr"))
if mibBuilder.loadTexts: natAddrBindEntry.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindEntry.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindEntry.setDescription('Each entry in this table holds information about an active address BIND. These entries are lost upon agent restart. This row has indexing that may create variables with more than 128 subidentifiers. Implementers of this table must be careful not to create entries that would result in OIDs that exceed the 128 subidentifier limit. Otherwise, the information cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. Deprecated in favor of NATV2-MIB.')
natAddrBindLocalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: natAddrBindLocalAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindLocalAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindLocalAddrType.setDescription('This object specifies the address type used for natAddrBindLocalAddr. Deprecated in favor of NATV2-MIB.')
natAddrBindLocalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: natAddrBindLocalAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindLocalAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindLocalAddr.setDescription('This object represents the private-realm-specific network-layer address, which maps to the public-realm address represented by natAddrBindGlobalAddr. The type of this address is determined by the value of the natAddrBindLocalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrBindGlobalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindGlobalAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindGlobalAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindGlobalAddrType.setDescription('This object specifies the address type used for natAddrBindGlobalAddr. Deprecated in favor of NATV2-MIB.')
natAddrBindGlobalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindGlobalAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindGlobalAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindGlobalAddr.setDescription('This object represents the public-realm network-layer address that maps to the private-realm network-layer address represented by natAddrBindLocalAddr. The type of this address is determined by the value of the natAddrBindGlobalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrBindId = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 5), NatBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindId.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindId.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindId.setDescription('This object represents a bind ID that is dynamically assigned to each bind by a NAT-enabled device. Each bind is represented by a bind ID that is unique across both the natAddrBindTable and the natAddrPortBindTable. Deprecated in favor of NATV2-MIB.')
natAddrBindTranslationEntity = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 6), NatTranslationEntity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindTranslationEntity.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindTranslationEntity.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindTranslationEntity.setDescription('This object represents the direction of sessions for which this bind is applicable and the endpoint entity (source or destination) within the sessions that is subject to translation using the BIND. Orientation of the bind can be a superset of translationEntity of the address map entry that forms the basis for this bind. For example, if the translationEntity of an address map entry is outboundSrcEndPoint, the translationEntity of a bind derived from this map entry may either be outboundSrcEndPoint or it may be bidirectional (a bitmask of outboundSrcEndPoint and inboundDstEndPoint). Deprecated in favor of NATV2-MIB.')
natAddrBindType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 7), NatAssociationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindType.setDescription('This object indicates whether the bind is static or dynamic. Deprecated in favor of NATV2-MIB.')
natAddrBindMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 8), NatAddrMapId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindMapIndex.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindMapIndex.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindMapIndex.setDescription('This object is a pointer to the natAddrMapTable entry (and the parameters of that entry) that was used in creating this BIND. This object, in conjunction with the ifIndex (which identifies a unique addrMapName) points to a unique entry in the natAddrMapTable. Deprecated in favor of NATV2-MIB.')
natAddrBindSessions = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindSessions.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindSessions.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindSessions.setDescription('Number of sessions currently using this BIND. Deprecated in favor of NATV2-MIB.')
natAddrBindMaxIdleTime = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindMaxIdleTime.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindMaxIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindMaxIdleTime.setDescription('This object indicates the maximum time for which this bind can be idle with no sessions attached to it. The value of this object is of relevance only for dynamic NAT. Deprecated in favor of NATV2-MIB.')
natAddrBindCurrentIdleTime = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindCurrentIdleTime.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindCurrentIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindCurrentIdleTime.setDescription('At any given instance, this object indicates the time that this bind has been idle without any sessions attached to it. The value of this object is of relevance only for dynamic NAT. Deprecated in favor of NATV2-MIB.')
natAddrBindInTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindInTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindInTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindInTranslates.setDescription('The number of inbound packets that were successfully translated by using this bind entry. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natAddrBindOutTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrBindOutTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrBindOutTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrBindOutTranslates.setDescription('The number of outbound packets that were successfully translated using this bind entry. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natAddrPortBindNumberOfEntries = MibScalar((1, 3, 6, 1, 2, 1, 123, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindNumberOfEntries.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindNumberOfEntries.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindNumberOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the natAddrPortBindTable. Deprecated in favor of NATV2-MIB.')
natAddrPortBindTable = MibTable((1, 3, 6, 1, 2, 1, 123, 1, 8), )
if mibBuilder.loadTexts: natAddrPortBindTable.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindTable.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindTable.setDescription('This table holds information about the currently active NAPT BINDs. Deprecated in favor of NATV2-MIB.')
natAddrPortBindEntry = MibTableRow((1, 3, 6, 1, 2, 1, 123, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NAT-MIB", "natAddrPortBindLocalAddrType"), (0, "NAT-MIB", "natAddrPortBindLocalAddr"), (0, "NAT-MIB", "natAddrPortBindLocalPort"), (0, "NAT-MIB", "natAddrPortBindProtocol"))
if mibBuilder.loadTexts: natAddrPortBindEntry.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindEntry.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindEntry.setDescription('Each entry in the this table holds information about a NAPT bind that is currently active. These entries are lost upon agent restart. This row has indexing that may create variables with more than 128 subidentifiers. Implementers of this table must be careful not to create entries that would result in OIDs that exceed the 128 subidentifier limit. Otherwise, the information cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. Deprecated in favor of NATV2-MIB.')
natAddrPortBindLocalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: natAddrPortBindLocalAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindLocalAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindLocalAddrType.setDescription('This object specifies the address type used for natAddrPortBindLocalAddr. Deprecated in favor of NATV2-MIB.')
natAddrPortBindLocalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: natAddrPortBindLocalAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindLocalAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindLocalAddr.setDescription('This object represents the private-realm-specific network-layer address that, in conjunction with natAddrPortBindLocalPort, maps to the public-realm network-layer address and transport ID represented by natAddrPortBindGlobalAddr and natAddrPortBindGlobalPort, respectively. The type of this address is determined by the value of the natAddrPortBindLocalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrPortBindLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: natAddrPortBindLocalPort.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindLocalPort.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindLocalPort.setDescription('For a protocol value TCP or UDP, this object represents the private-realm-specific port number. On the other hand, for ICMP a bind is created only for query/response- type ICMP messages such as ICMP echo, Timestamp, and Information request messages, and this object represents the private-realm-specific identifier in the ICMP message, as defined in RFC 792 for ICMPv4 and in RFC 4443 for ICMPv6. This object, together with natAddrPortBindProtocol, natAddrPortBindLocalAddrType, and natAddrPortBindLocalAddr, constitutes a session endpoint in the private realm. A bind entry binds a private- realm-specific endpoint to a public-realm-specific endpoint, as represented by the tuple of (natAddrPortBindGlobalPort, natAddrPortBindProtocol, natAddrPortBindGlobalAddrType, and natAddrPortBindGlobalAddr). Deprecated in favor of NATV2-MIB.')
natAddrPortBindProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 4), NatProtocolType())
if mibBuilder.loadTexts: natAddrPortBindProtocol.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindProtocol.setDescription('This object specifies a protocol identifier. If the value of this object is none(1), then this bind entry applies to all IP traffic. Any other value of this object specifies the class of IP traffic to which this BIND applies. Deprecated in favor of NATV2-MIB.')
natAddrPortBindGlobalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindGlobalAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindGlobalAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindGlobalAddrType.setDescription('This object specifies the address type used for natAddrPortBindGlobalAddr. Deprecated in favor of NATV2-MIB.')
natAddrPortBindGlobalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindGlobalAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindGlobalAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindGlobalAddr.setDescription('This object represents the public-realm-specific network- layer address that, in conjunction with natAddrPortBindGlobalPort, maps to the private-realm network-layer address and transport ID represented by natAddrPortBindLocalAddr and natAddrPortBindLocalPort, respectively. The type of this address is determined by the value of the natAddrPortBindGlobalAddrType object. Deprecated in favor of NATV2-MIB.')
natAddrPortBindGlobalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindGlobalPort.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindGlobalPort.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindGlobalPort.setDescription('For a protocol value TCP or UDP, this object represents the public-realm-specific port number. On the other hand, for ICMP a bind is created only for query/response- type ICMP messages such as ICMP echo, Timestamp, and Information request messages, and this object represents the public-realm-specific identifier in the ICMP message, as defined in RFC 792 for ICMPv4 and in RFC 4443 for ICMPv6. This object, together with natAddrPortBindProtocol, natAddrPortBindGlobalAddrType, and natAddrPortBindGlobalAddr, constitutes a session endpoint in the public realm. A bind entry binds a public-realm-specific endpoint to a private-realm- specific endpoint, as represented by the tuple of (natAddrPortBindLocalPort, natAddrPortBindProtocol, natAddrPortBindLocalAddrType, and natAddrPortBindLocalAddr). Deprecated in favor of NATV2-MIB.')
natAddrPortBindId = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 8), NatBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindId.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindId.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindId.setDescription('This object represents a bind ID that is dynamically assigned to each bind by a NAT-enabled device. Each bind is represented by a unique bind ID across both the natAddrBindTable and the natAddrPortBindTable. Deprecated in favor of NATV2-MIB.')
natAddrPortBindTranslationEntity = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 9), NatTranslationEntity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindTranslationEntity.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindTranslationEntity.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindTranslationEntity.setDescription('This object represents the direction of sessions for which this bind is applicable and the entity (source or destination) within the sessions that is subject to translation with the BIND. Orientation of the bind can be a superset of the translationEntity of the address map entry that forms the basis for this bind. For example, if the translationEntity of an address map entry is outboundSrcEndPoint, the translationEntity of a bind derived from this map entry may either be outboundSrcEndPoint or may be bidirectional (a bitmask of outboundSrcEndPoint and inboundDstEndPoint). Deprecated in favor of NATV2-MIB.')
natAddrPortBindType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 10), NatAssociationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindType.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindType.setDescription('This object indicates whether the bind is static or dynamic. Deprecated in favor of NATV2-MIB.')
natAddrPortBindMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 11), NatAddrMapId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindMapIndex.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindMapIndex.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindMapIndex.setDescription('This object is a pointer to the natAddrMapTable entry (and the parameters of that entry) used in creating this BIND. This object, in conjunction with the ifIndex (which identifies a unique addrMapName), points to a unique entry in the natAddrMapTable. Deprecated in favor of NATV2-MIB.')
natAddrPortBindSessions = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindSessions.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindSessions.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindSessions.setDescription('Number of sessions currently using this BIND. Deprecated in favor of NATV2-MIB.')
natAddrPortBindMaxIdleTime = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindMaxIdleTime.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindMaxIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindMaxIdleTime.setDescription('This object indicates the maximum time for which this bind can be idle without any sessions attached to it. The value of this object is of relevance only for dynamic NAT. Deprecated in favor of NATV2-MIB.')
natAddrPortBindCurrentIdleTime = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindCurrentIdleTime.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindCurrentIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindCurrentIdleTime.setDescription('At any given instance, this object indicates the time that this bind has been idle without any sessions attached to it. The value of this object is of relevance only for dynamic NAT. Deprecated in favor of NATV2-MIB.')
natAddrPortBindInTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindInTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindInTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindInTranslates.setDescription('The number of inbound packets that were translated as per this bind entry. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natAddrPortBindOutTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 8, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natAddrPortBindOutTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natAddrPortBindOutTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natAddrPortBindOutTranslates.setDescription('The number of outbound packets that were translated as per this bind entry. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natSessionTable = MibTable((1, 3, 6, 1, 2, 1, 123, 1, 9), )
if mibBuilder.loadTexts: natSessionTable.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionTable.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionTable.setDescription('The (conceptual) table containing one entry for each NAT session currently active on this NAT device. Deprecated in favor of NATV2-MIB.')
natSessionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 123, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NAT-MIB", "natSessionIndex"))
if mibBuilder.loadTexts: natSessionEntry.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionEntry.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionEntry.setDescription('An entry (conceptual row) containing information about an active NAT session on this NAT device. These entries are lost upon agent restart. Deprecated in favor of NATV2-MIB.')
natSessionIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 1), NatSessionId())
if mibBuilder.loadTexts: natSessionIndex.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionIndex.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionIndex.setDescription('The session ID for this NAT session. Deprecated in favor of NATV2-MIB.')
natSessionPrivateSrcEPBindId = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 2), NatBindIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateSrcEPBindId.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateSrcEPBindId.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateSrcEPBindId.setDescription('The bind ID associated between private and public source endpoints. In the case of Symmetric-NAT, this should be set to zero. Deprecated in favor of NATV2-MIB.')
natSessionPrivateSrcEPBindMode = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 3), NatBindMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateSrcEPBindMode.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateSrcEPBindMode.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateSrcEPBindMode.setDescription('This object indicates whether the bind indicated by the object natSessionPrivateSrcEPBindId is an address bind or an address port bind. Deprecated in favor of NATV2-MIB.')
natSessionPrivateDstEPBindId = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 4), NatBindIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateDstEPBindId.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateDstEPBindId.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateDstEPBindId.setDescription('The bind ID associated between private and public destination endpoints. Deprecated in favor of NATV2-MIB.')
natSessionPrivateDstEPBindMode = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 5), NatBindMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateDstEPBindMode.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateDstEPBindMode.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateDstEPBindMode.setDescription('This object indicates whether the bind indicated by the object natSessionPrivateDstEPBindId is an address bind or an address port bind. Deprecated in favor of NATV2-MIB.')
natSessionDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionDirection.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionDirection.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionDirection.setDescription("The direction of this session with respect to the local network. 'inbound' indicates that this session was initiated from the public network into the private network. 'outbound' indicates that this session was initiated from the private network into the public network. Deprecated in favor of NATV2-MIB.")
natSessionUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionUpTime.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionUpTime.setDescription('The uptime of this session in hundredths of a second. Deprecated in favor of NATV2-MIB.')
natSessionAddrMapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 8), NatAddrMapId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionAddrMapIndex.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionAddrMapIndex.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionAddrMapIndex.setDescription('This object is a pointer to the natAddrMapTable entry (and the parameters of that entry) used in creating this session. This object, in conjunction with the ifIndex (which identifies a unique addrMapName), points to a unique entry in the natAddrMapTable. Deprecated in favor of NATV2-MIB.')
natSessionProtocolType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 9), NatProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionProtocolType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionProtocolType.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionProtocolType.setDescription('The protocol type of this session. Deprecated in favor of NATV2-MIB.')
natSessionPrivateAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateAddrType.setDescription('This object specifies the address type used for natSessionPrivateSrcAddr and natSessionPrivateDstAddr. Deprecated in favor of NATV2-MIB.')
natSessionPrivateSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateSrcAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateSrcAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateSrcAddr.setDescription('The source IP address of the session endpoint that lies in the private network. The value of this object must be zero only when the natSessionPrivateSrcEPBindId object has a zero value. When the value of this object is zero, the NAT session lookup will match any IP address to this field. The type of this address is determined by the value of the natSessionPrivateAddrType object. Deprecated in favor of NATV2-MIB.')
natSessionPrivateSrcPort = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateSrcPort.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateSrcPort.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateSrcPort.setDescription('For a protocol value of TCP or UDP, this object represents the source port in the first packet of a session while in a private realm. On the other hand, when the protocol is ICMP, a NAT session is created only for query/response-type ICMP messages such as ICMP echo, Timestamp, and Information request messages, and this object represents the private-realm specific identifier in the ICMP message, as defined in RFC 792 for ICMPv4 and in RFC 4443 for ICMPv6. The value of this object must be zero when the natSessionPrivateSrcEPBindId object has zero value and value of natSessionPrivateSrcEPBindMode is addressPortBind(2). In such a case, the NAT session lookup will match any port number to this field. The value of this object must be zero when the object is not a representative field (SrcPort, DstPort, or ICMP identifier) of the session tuple in either the public realm or the private realm. Deprecated in favor of NATV2-MIB.')
natSessionPrivateDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateDstAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateDstAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateDstAddr.setDescription('The destination IP address of the session endpoint that lies in the private network. The value of this object must be zero when the natSessionPrivateDstEPBindId object has a zero value. In such a scenario, the NAT session lookup will match any IP address to this field. The type of this address is determined by the value of the natSessionPrivateAddrType object. Deprecated in favor of NATV2-MIB.')
natSessionPrivateDstPort = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPrivateDstPort.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPrivateDstPort.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPrivateDstPort.setDescription('When the value of protocol is TCP or UDP, this object represents the destination port in the first packet of session while in private-realm. On the other hand, when the protocol is ICMP, this object is not relevant and should be set to zero. The value of this object must be zero when the natSessionPrivateDstEPBindId object has a zero value and natSessionPrivateDstEPBindMode is set to addressPortBind(2). In such a case, the NAT session lookup will match any port number to this field. The value of this object must be zero when the object is not a representative field (SrcPort, DstPort, or ICMP identifier) of the session tuple in either the public realm or the private realm. Deprecated in favor of NATV2-MIB.')
natSessionPublicAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPublicAddrType.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPublicAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPublicAddrType.setDescription('This object specifies the address type used for natSessionPublicSrcAddr and natSessionPublicDstAddr. Deprecated in favor of NATV2-MIB.')
natSessionPublicSrcAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPublicSrcAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPublicSrcAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPublicSrcAddr.setDescription('The source IP address of the session endpoint that lies in the public network. The value of this object must be zero when the natSessionPrivateSrcEPBindId object has a zero value. In such a scenario, the NAT session lookup will match any IP address to this field. The type of this address is determined by the value of the natSessionPublicAddrType object. Deprecated in favor of NATV2-MIB.')
natSessionPublicSrcPort = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 17), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPublicSrcPort.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPublicSrcPort.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPublicSrcPort.setDescription('When the protocol value is TCP or UDP, this object represents the source port in the first packet of session while in public-realm. On the other hand, when protocol is ICMP, a NAT session is created only for query/response-type ICMP messages such as ICMP echo, Timestamp, and Information request messages, and this object represents the public-realm-specific identifier in the ICMP message, as defined in RFC 792 for ICMPv4 and in RFC 4443 for ICMPv6. The value of this object must be zero when the natSessionPrivateSrcEPBindId object has a zero value and natSessionPrivateSrcEPBindMode is set to addressPortBind(2). In such a scenario, the NAT session lookup will match any port number to this field. The value of this object must be zero when the object is not a representative field (SrcPort, DstPort, or ICMP identifier) of the session tuple in either the public realm or the private realm. Deprecated in favor of NATV2-MIB.')
natSessionPublicDstAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPublicDstAddr.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPublicDstAddr.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPublicDstAddr.setDescription('The destination IP address of the session endpoint that lies in the public network. The value of this object must be non-zero when the natSessionPrivateDstEPBindId object has a non-zero value. If the value of this object and the corresponding natSessionPrivateDstEPBindId object value are zero, then the NAT session lookup will match any IP address to this field. The type of this address is determined by the value of the natSessionPublicAddrType object. Deprecated in favor of NATV2-MIB.')
natSessionPublicDstPort = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 19), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionPublicDstPort.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionPublicDstPort.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionPublicDstPort.setDescription('When the protocol value is TCP or UDP, this object represents the destination port in the first packet of session while in the public realm. On the other hand, when the protocol is ICMP, this object is not relevant for translation and should be zero. The value of this object must be zero when the natSessionPrivateDstEPBindId object has a zero value and natSessionPrivateDstEPBindMode is addressPortBind(2). In such a scenario, the NAT session lookup will match any port number to this field. The value of this object must be zero when the object is not a representative field (SrcPort, DstPort, or ICMP identifier) of the session tuple in either the public realm or the private realm. Deprecated in favor of NATV2-MIB.')
natSessionMaxIdleTime = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionMaxIdleTime.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionMaxIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionMaxIdleTime.setDescription('The max time for which this session can be idle without detecting a packet. Deprecated in favor of NATV2-MIB.')
natSessionCurrentIdleTime = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionCurrentIdleTime.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionCurrentIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionCurrentIdleTime.setDescription('The time since a packet belonging to this session was last detected. Deprecated in favor of NATV2-MIB.')
natSessionInTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionInTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionInTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionInTranslates.setDescription('The number of inbound packets that were translated for this session. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natSessionOutTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 9, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionOutTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natSessionOutTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natSessionOutTranslates.setDescription('The number of outbound packets that were translated for this session. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natProtocolTable = MibTable((1, 3, 6, 1, 2, 1, 123, 1, 10), )
if mibBuilder.loadTexts: natProtocolTable.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natProtocolTable.setStatus('deprecated')
if mibBuilder.loadTexts: natProtocolTable.setDescription('The (conceptual) table containing per-protocol NAT statistics. Deprecated in favor of NATV2-MIB.')
natProtocolEntry = MibTableRow((1, 3, 6, 1, 2, 1, 123, 1, 10, 1), ).setIndexNames((0, "NAT-MIB", "natProtocol"))
if mibBuilder.loadTexts: natProtocolEntry.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natProtocolEntry.setStatus('deprecated')
if mibBuilder.loadTexts: natProtocolEntry.setDescription('An entry (conceptual row) containing NAT statistics pertaining to a particular protocol. Deprecated in favor of NATV2-MIB.')
natProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 10, 1, 1), NatProtocolType())
if mibBuilder.loadTexts: natProtocol.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: natProtocol.setDescription('This object represents the protocol pertaining to which parameters are reported. Deprecated in favor of NATV2-MIB.')
natProtocolInTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natProtocolInTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natProtocolInTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natProtocolInTranslates.setDescription('The number of inbound packets pertaining to the protocol identified by natProtocol that underwent NAT. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natProtocolOutTranslates = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natProtocolOutTranslates.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natProtocolOutTranslates.setStatus('deprecated')
if mibBuilder.loadTexts: natProtocolOutTranslates.setDescription('The number of outbound packets pertaining to the protocol identified by natProtocol that underwent NAT. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natProtocolDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 123, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natProtocolDiscards.setReference('RFC 7658, RFC 7659')
if mibBuilder.loadTexts: natProtocolDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: natProtocolDiscards.setDescription('The number of packets pertaining to the protocol identified by natProtocol that had to be rejected/dropped due to lack of resources. These rejections could be due to session timeout, resource unavailability, lack of address space, etc. Discontinuities in the value of this counter can occur at reinitialization of the management system and at other times, as indicated by the value of ifCounterDiscontinuityTime on the relevant interface. Deprecated in favor of NATV2-MIB.')
natMIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 123, 0))
natPacketDiscard = NotificationType((1, 3, 6, 1, 2, 1, 123, 0, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: natPacketDiscard.setStatus('deprecated')
if mibBuilder.loadTexts: natPacketDiscard.setDescription("This notification is generated when IP packets are discarded by the NAT function; e.g., due to lack of mapping space when NAT is out of addresses or ports. Note that the generation of natPacketDiscard notifications is throttled by the agent, as specified by the 'natNotifThrottlingInterval' object. Deprecated in favor of NATV2-MIB.")
if mibBuilder.loadTexts: natPacketDiscard.setReference('RFC 7658, RFC 7659')
natMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 123, 2))
natMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 123, 2, 1))
natMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 123, 2, 2))
natConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 123, 2, 1, 1)).setObjects(("NAT-MIB", "natInterfaceRealm"), ("NAT-MIB", "natInterfaceServiceType"), ("NAT-MIB", "natInterfaceStorageType"), ("NAT-MIB", "natInterfaceRowStatus"), ("NAT-MIB", "natAddrMapName"), ("NAT-MIB", "natAddrMapEntryType"), ("NAT-MIB", "natAddrMapTranslationEntity"), ("NAT-MIB", "natAddrMapLocalAddrType"), ("NAT-MIB", "natAddrMapLocalAddrFrom"), ("NAT-MIB", "natAddrMapLocalAddrTo"), ("NAT-MIB", "natAddrMapLocalPortFrom"), ("NAT-MIB", "natAddrMapLocalPortTo"), ("NAT-MIB", "natAddrMapGlobalAddrType"), ("NAT-MIB", "natAddrMapGlobalAddrFrom"), ("NAT-MIB", "natAddrMapGlobalAddrTo"), ("NAT-MIB", "natAddrMapGlobalPortFrom"), ("NAT-MIB", "natAddrMapGlobalPortTo"), ("NAT-MIB", "natAddrMapProtocol"), ("NAT-MIB", "natAddrMapStorageType"), ("NAT-MIB", "natAddrMapRowStatus"), ("NAT-MIB", "natBindDefIdleTimeout"), ("NAT-MIB", "natUdpDefIdleTimeout"), ("NAT-MIB", "natIcmpDefIdleTimeout"), ("NAT-MIB", "natOtherDefIdleTimeout"), ("NAT-MIB", "natTcpDefIdleTimeout"), ("NAT-MIB", "natTcpDefNegTimeout"), ("NAT-MIB", "natNotifThrottlingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natConfigGroup = natConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: natConfigGroup.setDescription('A collection of configuration-related information required to support management of devices supporting NAT. Deprecated in favor of NATV2-MIB.')
if mibBuilder.loadTexts: natConfigGroup.setReference('RFC 7658, RFC 7659')
natTranslationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 123, 2, 1, 2)).setObjects(("NAT-MIB", "natAddrBindNumberOfEntries"), ("NAT-MIB", "natAddrBindGlobalAddrType"), ("NAT-MIB", "natAddrBindGlobalAddr"), ("NAT-MIB", "natAddrBindId"), ("NAT-MIB", "natAddrBindTranslationEntity"), ("NAT-MIB", "natAddrBindType"), ("NAT-MIB", "natAddrBindMapIndex"), ("NAT-MIB", "natAddrBindSessions"), ("NAT-MIB", "natAddrBindMaxIdleTime"), ("NAT-MIB", "natAddrBindCurrentIdleTime"), ("NAT-MIB", "natAddrBindInTranslates"), ("NAT-MIB", "natAddrBindOutTranslates"), ("NAT-MIB", "natAddrPortBindNumberOfEntries"), ("NAT-MIB", "natAddrPortBindGlobalAddrType"), ("NAT-MIB", "natAddrPortBindGlobalAddr"), ("NAT-MIB", "natAddrPortBindGlobalPort"), ("NAT-MIB", "natAddrPortBindId"), ("NAT-MIB", "natAddrPortBindTranslationEntity"), ("NAT-MIB", "natAddrPortBindType"), ("NAT-MIB", "natAddrPortBindMapIndex"), ("NAT-MIB", "natAddrPortBindSessions"), ("NAT-MIB", "natAddrPortBindMaxIdleTime"), ("NAT-MIB", "natAddrPortBindCurrentIdleTime"), ("NAT-MIB", "natAddrPortBindInTranslates"), ("NAT-MIB", "natAddrPortBindOutTranslates"), ("NAT-MIB", "natSessionPrivateSrcEPBindId"), ("NAT-MIB", "natSessionPrivateSrcEPBindMode"), ("NAT-MIB", "natSessionPrivateDstEPBindId"), ("NAT-MIB", "natSessionPrivateDstEPBindMode"), ("NAT-MIB", "natSessionDirection"), ("NAT-MIB", "natSessionUpTime"), ("NAT-MIB", "natSessionAddrMapIndex"), ("NAT-MIB", "natSessionProtocolType"), ("NAT-MIB", "natSessionPrivateAddrType"), ("NAT-MIB", "natSessionPrivateSrcAddr"), ("NAT-MIB", "natSessionPrivateSrcPort"), ("NAT-MIB", "natSessionPrivateDstAddr"), ("NAT-MIB", "natSessionPrivateDstPort"), ("NAT-MIB", "natSessionPublicAddrType"), ("NAT-MIB", "natSessionPublicSrcAddr"), ("NAT-MIB", "natSessionPublicSrcPort"), ("NAT-MIB", "natSessionPublicDstAddr"), ("NAT-MIB", "natSessionPublicDstPort"), ("NAT-MIB", "natSessionMaxIdleTime"), ("NAT-MIB", "natSessionCurrentIdleTime"), ("NAT-MIB", "natSessionInTranslates"), ("NAT-MIB", "natSessionOutTranslates"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natTranslationGroup = natTranslationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: natTranslationGroup.setDescription('A collection of BIND-related objects required to support management of devices supporting NAT. Deprecated in favor of NATV2-MIB.')
if mibBuilder.loadTexts: natTranslationGroup.setReference('RFC 7658, RFC 7659')
natStatsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 123, 2, 1, 3)).setObjects(("NAT-MIB", "natInterfaceInTranslates"), ("NAT-MIB", "natInterfaceOutTranslates"), ("NAT-MIB", "natInterfaceDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natStatsInterfaceGroup = natStatsInterfaceGroup.setStatus('deprecated')
if mibBuilder.loadTexts: natStatsInterfaceGroup.setDescription('A collection of NAT statistics associated with the interface on which NAT is configured, to aid troubleshooting/monitoring of the NAT operation. Deprecated in favor of NATV2-MIB.')
if mibBuilder.loadTexts: natStatsInterfaceGroup.setReference('RFC 7658, RFC 7659')
natStatsProtocolGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 123, 2, 1, 4)).setObjects(("NAT-MIB", "natProtocolInTranslates"), ("NAT-MIB", "natProtocolOutTranslates"), ("NAT-MIB", "natProtocolDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natStatsProtocolGroup = natStatsProtocolGroup.setStatus('deprecated')
if mibBuilder.loadTexts: natStatsProtocolGroup.setDescription('A collection of protocol-specific NAT statistics, to aid troubleshooting/monitoring of NAT operation. Deprecated in favor of NATV2-MIB.')
if mibBuilder.loadTexts: natStatsProtocolGroup.setReference('RFC 7658, RFC 7659')
natStatsAddrMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 123, 2, 1, 5)).setObjects(("NAT-MIB", "natAddrMapInTranslates"), ("NAT-MIB", "natAddrMapOutTranslates"), ("NAT-MIB", "natAddrMapDiscards"), ("NAT-MIB", "natAddrMapAddrUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natStatsAddrMapGroup = natStatsAddrMapGroup.setStatus('deprecated')
if mibBuilder.loadTexts: natStatsAddrMapGroup.setDescription('A collection of address-map-specific NAT statistics, to aid troubleshooting/monitoring of NAT operation. Deprecated in favor of NATV2-MIB.')
if mibBuilder.loadTexts: natStatsAddrMapGroup.setReference('RFC 7658, RFC 7659')
natMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 123, 2, 1, 6)).setObjects(("NAT-MIB", "natPacketDiscard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natMIBNotificationGroup = natMIBNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: natMIBNotificationGroup.setDescription('A collection of notifications generated by devices supporting this MIB. Deprecated in favor of NATV2-MIB.')
natMIBNotificationGroup.setReference('RFC 7658, RFC 7659')
natMIBFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 123, 2, 2, 1)).setObjects(("IF-MIB", "ifCounterDiscontinuityGroup"), ("NAT-MIB", "natConfigGroup"), ("NAT-MIB", "natTranslationGroup"), ("NAT-MIB", "natStatsInterfaceGroup"), ("NAT-MIB", "natStatsProtocolGroup"), ("NAT-MIB", "natStatsAddrMapGroup"), ("NAT-MIB", "natMIBNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natMIBFullCompliance = natMIBFullCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: natMIBFullCompliance.setDescription('When this MIB is implemented with support for read-create, then such an implementation can claim full compliance. Such devices can then be both monitored and configured with this MIB. The following index objects cannot be added as OBJECT clauses but nevertheless have the compliance requirements: Deprecated in favor of NATV2-MIB.')
if mibBuilder.loadTexts: natMIBFullCompliance.setReference('RFC 7658, RFC 7659')
natMIBReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 123, 2, 2, 2)).setObjects(("IF-MIB", "ifCounterDiscontinuityGroup"), ("NAT-MIB", "natConfigGroup"), ("NAT-MIB", "natTranslationGroup"), ("NAT-MIB", "natStatsInterfaceGroup"), ("NAT-MIB", "natStatsProtocolGroup"), ("NAT-MIB", "natStatsAddrMapGroup"), ("NAT-MIB", "natMIBNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    natMIBReadOnlyCompliance = natMIBReadOnlyCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: natMIBReadOnlyCompliance.setDescription('When this MIB is implemented without support for read-create (i.e., in read-only mode), then such an implementation can claim read-only compliance. Such a device can then be monitored but cannot be configured with this MIB. The following index objects cannot be added as OBJECT clauses but nevertheless have the compliance requirements: Deprecated in favor of NATV2-MIB.')
if mibBuilder.loadTexts: natMIBReadOnlyCompliance.setReference('RFC 7658, RFC 7659')
mibBuilder.exportSymbols("NAT-MIB", natSessionDirection=natSessionDirection, natAddrMapGlobalAddrFrom=natAddrMapGlobalAddrFrom, natInterfaceRowStatus=natInterfaceRowStatus, natAddrPortBindGlobalAddr=natAddrPortBindGlobalAddr, natAddrMapAddrUsed=natAddrMapAddrUsed, natAddrPortBindMaxIdleTime=natAddrPortBindMaxIdleTime, natTcpDefNegTimeout=natTcpDefNegTimeout, natProtocolEntry=natProtocolEntry, natMIBCompliances=natMIBCompliances, natSessionPrivateSrcAddr=natSessionPrivateSrcAddr, natAddrMapGlobalAddrTo=natAddrMapGlobalAddrTo, natSessionPrivateDstEPBindId=natSessionPrivateDstEPBindId, natAddrBindOutTranslates=natAddrBindOutTranslates, natAddrMapRowStatus=natAddrMapRowStatus, natStatsInterfaceGroup=natStatsInterfaceGroup, natSessionProtocolType=natSessionProtocolType, natAddrBindGlobalAddr=natAddrBindGlobalAddr, natSessionOutTranslates=natSessionOutTranslates, natMIBReadOnlyCompliance=natMIBReadOnlyCompliance, natInterfaceInTranslates=natInterfaceInTranslates, natAddrMapGlobalAddrType=natAddrMapGlobalAddrType, natAddrMapStorageType=natAddrMapStorageType, natSessionTable=natSessionTable, natInterfaceEntry=natInterfaceEntry, natAddrBindGlobalAddrType=natAddrBindGlobalAddrType, natAddrBindLocalAddr=natAddrBindLocalAddr, natSessionPrivateAddrType=natSessionPrivateAddrType, natAddrPortBindNumberOfEntries=natAddrPortBindNumberOfEntries, natAddrMapGlobalPortTo=natAddrMapGlobalPortTo, natAddrMapTable=natAddrMapTable, natNotifThrottlingInterval=natNotifThrottlingInterval, natAddrPortBindEntry=natAddrPortBindEntry, NatProtocolType=NatProtocolType, natUdpDefIdleTimeout=natUdpDefIdleTimeout, NatTranslationEntity=NatTranslationEntity, natAddrBindTable=natAddrBindTable, NatBindIdOrZero=NatBindIdOrZero, NatAssociationType=NatAssociationType, natAddrPortBindTranslationEntity=natAddrPortBindTranslationEntity, natProtocol=natProtocol, natSessionUpTime=natSessionUpTime, natOtherDefIdleTimeout=natOtherDefIdleTimeout, natSessionCurrentIdleTime=natSessionCurrentIdleTime, natAddrPortBindInTranslates=natAddrPortBindInTranslates, natSessionPublicDstAddr=natSessionPublicDstAddr, natSessionPublicAddrType=natSessionPublicAddrType, natMIBObjects=natMIBObjects, natDefTimeouts=natDefTimeouts, natAddrMapLocalAddrTo=natAddrMapLocalAddrTo, NatBindMode=NatBindMode, natMIBNotifications=natMIBNotifications, natInterfaceTable=natInterfaceTable, natSessionPrivateDstPort=natSessionPrivateDstPort, natSessionIndex=natSessionIndex, natAddrPortBindLocalAddrType=natAddrPortBindLocalAddrType, natAddrMapProtocol=natAddrMapProtocol, natAddrPortBindLocalAddr=natAddrPortBindLocalAddr, natStatsProtocolGroup=natStatsProtocolGroup, natSessionPrivateSrcEPBindId=natSessionPrivateSrcEPBindId, natAddrMapLocalAddrType=natAddrMapLocalAddrType, natConfigGroup=natConfigGroup, natProtocolTable=natProtocolTable, NatBindId=NatBindId, natStatsAddrMapGroup=natStatsAddrMapGroup, natTcpDefIdleTimeout=natTcpDefIdleTimeout, NatAddrMapId=NatAddrMapId, natAddrPortBindType=natAddrPortBindType, natAddrMapInTranslates=natAddrMapInTranslates, natAddrMapDiscards=natAddrMapDiscards, natSessionAddrMapIndex=natSessionAddrMapIndex, natAddrBindInTranslates=natAddrBindInTranslates, natAddrMapEntryType=natAddrMapEntryType, natSessionPrivateSrcPort=natSessionPrivateSrcPort, PYSNMP_MODULE_ID=natMIB, natAddrPortBindSessions=natAddrPortBindSessions, natAddrBindMapIndex=natAddrBindMapIndex, natSessionPublicDstPort=natSessionPublicDstPort, natAddrPortBindLocalPort=natAddrPortBindLocalPort, natProtocolOutTranslates=natProtocolOutTranslates, NatSessionId=NatSessionId, natSessionPrivateDstAddr=natSessionPrivateDstAddr, natAddrMapOutTranslates=natAddrMapOutTranslates, natAddrPortBindCurrentIdleTime=natAddrPortBindCurrentIdleTime, natInterfaceServiceType=natInterfaceServiceType, natAddrPortBindMapIndex=natAddrPortBindMapIndex, natMIBConformance=natMIBConformance, natMIBNotificationGroup=natMIBNotificationGroup, natAddrPortBindProtocol=natAddrPortBindProtocol, NatProtocolMap=NatProtocolMap, natAddrMapLocalPortTo=natAddrMapLocalPortTo, natInterfaceRealm=natInterfaceRealm, natProtocolDiscards=natProtocolDiscards, natAddrMapGlobalPortFrom=natAddrMapGlobalPortFrom, natAddrBindEntry=natAddrBindEntry, natAddrMapEntry=natAddrMapEntry, natSessionPublicSrcPort=natSessionPublicSrcPort, natNotifCtrl=natNotifCtrl, natAddrPortBindGlobalAddrType=natAddrPortBindGlobalAddrType, natSessionInTranslates=natSessionInTranslates, natMIB=natMIB, natPacketDiscard=natPacketDiscard, natIcmpDefIdleTimeout=natIcmpDefIdleTimeout, natBindDefIdleTimeout=natBindDefIdleTimeout, natAddrBindLocalAddrType=natAddrBindLocalAddrType, natInterfaceOutTranslates=natInterfaceOutTranslates, natAddrBindNumberOfEntries=natAddrBindNumberOfEntries, natMIBGroups=natMIBGroups, natAddrMapLocalPortFrom=natAddrMapLocalPortFrom, natAddrBindTranslationEntity=natAddrBindTranslationEntity, natAddrPortBindOutTranslates=natAddrPortBindOutTranslates, natAddrMapIndex=natAddrMapIndex, natAddrBindSessions=natAddrBindSessions, natAddrBindCurrentIdleTime=natAddrBindCurrentIdleTime, natAddrMapName=natAddrMapName, natAddrMapLocalAddrFrom=natAddrMapLocalAddrFrom, natAddrBindType=natAddrBindType, natInterfaceStorageType=natInterfaceStorageType, natSessionEntry=natSessionEntry, natAddrMapTranslationEntity=natAddrMapTranslationEntity, natMIBFullCompliance=natMIBFullCompliance, natAddrBindId=natAddrBindId, natAddrPortBindId=natAddrPortBindId, natSessionPrivateSrcEPBindMode=natSessionPrivateSrcEPBindMode, natInterfaceDiscards=natInterfaceDiscards, natProtocolInTranslates=natProtocolInTranslates, natAddrPortBindGlobalPort=natAddrPortBindGlobalPort, natSessionPublicSrcAddr=natSessionPublicSrcAddr, natAddrBindMaxIdleTime=natAddrBindMaxIdleTime, natSessionPrivateDstEPBindMode=natSessionPrivateDstEPBindMode, natSessionMaxIdleTime=natSessionMaxIdleTime, natAddrPortBindTable=natAddrPortBindTable, natTranslationGroup=natTranslationGroup)
