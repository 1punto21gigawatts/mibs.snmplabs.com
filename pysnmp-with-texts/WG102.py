#
# PySNMP MIB module WG102 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WG102
# Produced by pysmi-0.3.4 at Wed May  1 15:36:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, enterprises, MibIdentifier, IpAddress, ModuleIdentity, Counter32, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, Counter64, ObjectIdentity, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "enterprises", "MibIdentifier", "IpAddress", "ModuleIdentity", "Counter32", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "Counter64", "ObjectIdentity", "iso", "NotificationType")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
wg102 = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 4, 3))
if mibBuilder.loadTexts: wg102.setLastUpdated('200611151600Z')
if mibBuilder.loadTexts: wg102.setOrganization('NETGEAR Inc.')
if mibBuilder.loadTexts: wg102.setContactInfo('4500 Great America Parkway Santa Clara, California 95054 Phone: (408) 907-8000 Fax: (408) 907-8097 Web Site: http://www.netgear.com')
if mibBuilder.loadTexts: wg102.setDescription('The MIB module for 802.11b/g ProSafe Wireless Access Point entities. iso(1).org(3).dod(6).internet(1).private(4). enterprises(1).netgear(4526).wireless(4).wg102(3)')
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
sysSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1))
sysMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMacAddress.setStatus('current')
if mibBuilder.loadTexts: sysMacAddress.setDescription('This field indicates the system MAC Address.')
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
if mibBuilder.loadTexts: sysVersion.setDescription('This field indicates the system firmware version.')
sysAPName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAPName.setStatus('current')
if mibBuilder.loadTexts: sysAPName.setDescription('This field indicates the name of AP. The name is also the NETBIOS name of the AP.')
sysAdminName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminName.setStatus('current')
if mibBuilder.loadTexts: sysAdminName.setDescription('This field indicates the administrator name, which is used to sign in web GUI, SSH, CLI, and FTP server of the AP.')
sysAdminPasswd = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAdminPasswd.setStatus('current')
if mibBuilder.loadTexts: sysAdminPasswd.setDescription('This field indicates the administrator password, which is used to sign in web GUI, SSH, CLI, and FTP server of the AP.')
sysCountryRegion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(410, 36, 124, 208, 40, 246, 250, 276, 372, 380, 392, 484, 528, 554, 578, 630, 340, 724, 752, 756, 826, 840))).clone(namedValues=NamedValues(("asia", 410), ("australia", 36), ("canada", 124), ("denmark", 208), ("europe", 40), ("finland", 246), ("france", 250), ("germany", 276), ("ireland", 372), ("italy", 380), ("japan", 392), ("mexico", 484), ("netherlands", 528), ("newZealand", 554), ("norway", 578), ("puertoRico", 630), ("southAmerica", 340), ("spain", 724), ("sweden", 752), ("switzerland", 756), ("unitedKingdom", 826), ("unitedStates", 840)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCountryRegion.setStatus('current')
if mibBuilder.loadTexts: sysCountryRegion.setDescription('This field indicates the country/region of the AP.')
timeSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 8))
timeCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeCurrentTime.setStatus('current')
if mibBuilder.loadTexts: timeCurrentTime.setDescription('This field indicates the current system time in a format: YYYY/MM/DD hh:mm:ss.')
timeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("gmt00UkGreenWichCasablancaMonrovia", 0), ("gmtwest12EniwetokKwajalein", 1), ("gmtwest11MidwayIslandSamoa", 2), ("gmtwest10Hawaii", 3), ("gmtwest9dot5MarqesasIs", 4), ("gmtwest09Alaska", 5), ("gmtwest8dot5PitciarnIs", 6), ("gmtwest08PacificTimeUsCanada", 7), ("gmtwest07MountainTimeUsArizona", 8), ("gmtwest06CentralTimeUsMexicoCityTequciqalpa", 9), ("gmtwest05EasternTimeUsBogotaLimaQuitoIndianaEast", 10), ("gmtwest04CaracasLaPaz", 11), ("gmtwest3dot5Newfoundland", 12), ("gmtwest03BrasiliaBeunosAiresGeorgetown", 13), ("gmtwest02MidAtlantic", 14), ("gmtwest01AzoresCapeVerdeIs", 15), ("gmteast01Europe", 16), ("gmteast02EgyptFinlandRomaniaTurkeyGreeceIsraelJordan", 17), ("gmteast03IraqSyriaRussia", 18), ("gmteast3dot5Iran", 19), ("gmteast04ArmeniaAzerbaijan", 20), ("gmteast4dot5Afghanistan", 21), ("gmteast05RussiaPakistan", 22), ("gmteast5dot5India", 23), ("gmteast06BangladeshRussia", 24), ("gmteast6dot5Burma", 25), ("gmteast07RussiaThailandCombodiaLaos", 26), ("gmteast08RussiaChinaMongoliaIndonesiaPhilippinesTaiwanWA", 27), ("gmteast09RussiaJapanKorea", 28), ("gmteast9dot5AdelaideDarwin", 29), ("gmteast10EasternStandardAustRussiaGaumPapuaNewGuinea", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeTimeZone.setStatus('current')
if mibBuilder.loadTexts: timeTimeZone.setDescription('This field indicates the timezone of the system. 0 UK,GreenWich,Casablanca,Monrovia (GMT), -12 Eniwetok,Kwajalein (GMT-12:00), -11 Midway I., Samoa (GMT-11:00), -10 Hawaii (GMT-10:00), -9.5 Marqesas Is. (GMT-09:30), -9 Alaska (GMT-09:00), -8.5 Pitciarn Is. (GMT-08:30), -8 Pacific Time ..US and Canada (GMT-08:00), -7 MountainTime(USA),Arizona (GMT-07:00), -6 CentralTime(USA),Mexico City,Tequciqalpa (GMT-06:00), -5 EasternTime(USA),Bogota,Lima,Quito,Indiana East (GMT-05:00), -4 Caracas,La Paz (GMT-04:00), -3.5 Newfoundland (GMT-03:30), -3 Brasilia,Beunos Aires,Georgetown (GMT-03:00), -2 Mid-Atlantic (GMT-02:00), -1 Azores,Cape Verde Is. (GMT-01:00), 1 Europe (GMT+01:00), 2 Egypt,Finland,Romania,Turkey,Greece,Israel,Jordan(GMT+02:00), 3 Iraq, Syria,Russia (GMT+03:00), 3.5 Iran (GMT+03:30), 4 Armenia, Azerbaijan (GMT+04:00), 4.5 Afghanistan (GMT+04:30), 5 Russia,Pakistan (GMT+05:00), 5.5 India (GMT+05:30), 6 Bangladesh,Russia (GMT+06:00), 6.5 Burma (GMT+06:30), 7 Russia,Thailand, Combodia, Laos (GMT+07:00), 8 Russia,China,Mongolia,Indonesia,Philippines,Taiwan,WA (GMT+08:00), 9 Russia,Japan,Korea (GMT+09:00), 9.5 Adelaide,Darwin (GMT+09:30), 10 Eastern Standard(Aust),Russia,Gaum,Papua New Guinea (GMT+10:00)')
timeDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 8, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDaylightSaving.setStatus('current')
if mibBuilder.loadTexts: timeDaylightSaving.setDescription('This field indicates whether the Daylight Saving time is used.')
timeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeNtpServer.setStatus('current')
if mibBuilder.loadTexts: timeNtpServer.setDescription('This field indicates the hostname or IP address for the NTP server. If you want to use a custom NTP server, you can specify it for the Access Point. Otherwise, you can just leave it blank.')
ipSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 9))
ipDhcpClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpClientEnable.setStatus('current')
if mibBuilder.loadTexts: ipDhcpClientEnable.setDescription('This field indicates whether DHCP client is enabled.')
ipIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIPAddress.setStatus('current')
if mibBuilder.loadTexts: ipIPAddress.setDescription('This field indicates the IP address of the AP. ')
ipNetmask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetmask.setStatus('current')
if mibBuilder.loadTexts: ipNetmask.setDescription('This field indicates the netmask addressof the AP.')
ipGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGateway.setStatus('current')
if mibBuilder.loadTexts: ipGateway.setDescription('This field indicates the default gateway address of the AP.')
ipDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsServer.setStatus('current')
if mibBuilder.loadTexts: ipDnsServer.setDescription('This field indicates the IP address of the DNS server. *** Note: The value can only be set to an IP address in dot format.')
wlanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2))
wlanSettingTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1), )
if mibBuilder.loadTexts: wlanSettingTable.setStatus('current')
if mibBuilder.loadTexts: wlanSettingTable.setDescription('wlanSettingsallow for multiple instances on an agent.')
wlanSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1), ).setIndexNames((0, "WG102", "radioIndex"))
if mibBuilder.loadTexts: wlanSettingEntry.setStatus('current')
if mibBuilder.loadTexts: wlanSettingEntry.setDescription('An entry in the wlanSettingTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
radioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11bg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIndex.setStatus('current')
if mibBuilder.loadTexts: radioIndex.setDescription("This attribute shall indicate the radio's band.")
radioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioEnable.setStatus('current')
if mibBuilder.loadTexts: radioEnable.setDescription('This attribute shall indicate whether the radio is enabled.')
wirelessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMode.setStatus('current')
if mibBuilder.loadTexts: wirelessMode.setDescription('This attribute shall indicate the desired wireless operating mode. Options are: auto - Both 802.11g and 802.11b wireless stations can be used. dot11a - Only 802.11a wireless stations can be used. dot11b - All 802.11b wireless stations can be used. 802.11g wireless stations can still be used if they can operate in 802.11b mode. dot11g - Only 802.11g wireless stations can be used.')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 165))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channel.setStatus('current')
if mibBuilder.loadTexts: channel.setDescription('This attribute shall indicate the channel number to be used. And the zero indicates that auto channel selection is enabled.')
txRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("best", 0), ("rate1Mbps", 1), ("rate2Mbps", 2), ("rate5dot5Mbps", 3), ("rate6Mbps", 4), ("rate9Mbps", 5), ("rate11Mbps", 6), ("rate12Mbps", 7), ("rate18Mbps", 8), ("rate24Mbps", 9), ("rate36Mbps", 10), ("rate48Mbps", 11), ("rate54Mbps", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txRate.setStatus('current')
if mibBuilder.loadTexts: txRate.setDescription('This attribute shall indicate the transmite rate. When the operatemode is: auto(0) - can set to 0:best, 1:1Mb/s, 2:2Mb/s, 5.5:5.5Mb/s, 11:11 Mb/s, 6:6Mb/s, 9:9Mb/s, 12:12Mb/s, 18:18Mb/s, 24:24Mb/s, 36:36Mb/s, 48:48Mb/s, and 54:54Mb/s. dot11a(1) - can set to 0:best, 6:6Mb/s, 9:9Mb/s, 12:12Mb/s, 18:18Mb/s, 24:24Mb/s, 36:36Mb/s, 48:48Mb/s, 54:54Mb/s. dot11b(2) - can set to 0:best, 1:1Mb/s, 2:2Mb/s, 5.5:5.5Mb/s, and 11:11 Mb/s. dot11g(3) - can set to 0:best, 6:6Mb/s, 9:9Mb/s, 12:12Mb/s, 18:18Mb/s, 24:24Mb/s, 36:36Mb/s, 48:48Mb/s, 54:54Mb/s.')
txPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: txPower.setStatus('current')
if mibBuilder.loadTexts: txPower.setDescription('This attribute shall indicate the transmitting power.')
beaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setUnits('1024 microsecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: beaconInterval.setStatus('current')
if mibBuilder.loadTexts: beaconInterval.setDescription('This attribute shall indicate the beacon interval.')
dtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtimInterval.setStatus('current')
if mibBuilder.loadTexts: dtimInterval.setDescription('This attribute shall indicate the DTIM period.')
rtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsThreshold.setStatus('current')
if mibBuilder.loadTexts: rtsThreshold.setDescription('This attribute shall indicate the RTS threshold.')
fragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fragmentationThreshold.setStatus('current')
if mibBuilder.loadTexts: fragmentationThreshold.setDescription('This attribute shall indicate the fragmentation threshold.')
dot11bPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11bPreamble.setStatus('current')
if mibBuilder.loadTexts: dot11bPreamble.setDescription('This attribute shall indicate the preamble setting. This setting is only applicable to 802.11b mode.')
superMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superMode.setStatus('current')
if mibBuilder.loadTexts: superMode.setDescription('This attribute shall indicate whether super mode (super-A for 11a radio, Super-G for 11g radio) is enabled.')
wmm = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wmm.setStatus('current')
if mibBuilder.loadTexts: wmm.setDescription('This attribute shall indicate whether wmm is enabled.')
wmmNoAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wmmNoAck.setStatus('current')
if mibBuilder.loadTexts: wmmNoAck.setDescription('This attribute shall indicate whether wmm with no ack is enabled.')
acEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEnabled.setStatus('current')
if mibBuilder.loadTexts: acEnabled.setDescription('This field indicates whether enable AutoCell.')
acEnhancedRFSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("disable", 0), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEnhancedRFSecurity.setStatus('current')
if mibBuilder.loadTexts: acEnhancedRFSecurity.setDescription('This field indicates whether enable Enhanced RF Security.')
acRogueDevDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acRogueDevDetection.setStatus('current')
if mibBuilder.loadTexts: acRogueDevDetection.setDescription('This field indicates whether enable Rogue Device Detection.')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("local", 2), ("server", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('current')
if mibBuilder.loadTexts: accessControlMode.setDescription('The field indicates whether the access control list is enabled and the source of the database of the access control list.')
wlanSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2), )
if mibBuilder.loadTexts: wlanSecurityTable.setStatus('current')
if mibBuilder.loadTexts: wlanSecurityTable.setDescription('Security attributes in tablular form to allow for multiple instances on an agent.')
wlanSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1), ).setIndexNames((0, "WG102", "radioIndex"), (0, "WG102", "securityProfileNo"))
if mibBuilder.loadTexts: wlanSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: wlanSecurityEntry.setDescription('An entry in the securityTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
securityProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityProfileNo.setStatus('current')
if mibBuilder.loadTexts: securityProfileNo.setDescription('The field indicates the security profile NO.')
securityProfileEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfileEnabled.setStatus('current')
if mibBuilder.loadTexts: securityProfileEnabled.setDescription('This attribute shall indicate whether the security profile is enabled.')
securityProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfileName.setStatus('current')
if mibBuilder.loadTexts: securityProfileName.setDescription('This attribute shall indicate SSID.')
ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssid.setStatus('current')
if mibBuilder.loadTexts: ssid.setDescription('This attribute shall indicate SSID.')
ssidBroadcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidBroadcastEnable.setStatus('current')
if mibBuilder.loadTexts: ssidBroadcastEnable.setDescription('This attribute shall indicate whether wireless network Name (SSID) will be broadcasted.')
authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("openSystem", 0), ("sharedKey", 1), ("legacy8021x", 2), ("wpaPSK", 3), ("wpaRadius", 4), ("wpa2-psk", 5), ("wpawpa2-psk", 6), ("wpa2-802dot1x", 7), ("wpawpa2-802dot1x", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authentication.setStatus('current')
if mibBuilder.loadTexts: authentication.setDescription('The field indicates how to authenticate the station.')
encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("wep64", 1), ("wep128", 2), ("wep152", 3), ("tkip", 4), ("aes-tkip", 5), ("aes", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: encryption.setStatus('current')
if mibBuilder.loadTexts: encryption.setDescription('The field indicates how to encryption the data and the type of WEP key.')
wepKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey1.setStatus('current')
if mibBuilder.loadTexts: wepKey1.setDescription('The field shall indicate the WEP key. wep key type length valid chars ============ ====== =========== none 0 wep64 10 0-9,a-f,A-F wep128 26 0-9,a-f,A-F wep152 32 0-9,a-f,A-F')
wepKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey2.setStatus('current')
if mibBuilder.loadTexts: wepKey2.setDescription('The field shall indicate the WEP key. wep key type length valid chars ============ ====== =========== none 0 wep64 10 0-9,a-f,A-F wep128 26 0-9,a-f,A-F wep152 32 0-9,a-f,A-F')
wepKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey3.setStatus('current')
if mibBuilder.loadTexts: wepKey3.setDescription('The field shall indicate the WEP key. wep key type length valid chars ============ ====== =========== none 0 wep64 10 0-9,a-f,A-F wep128 26 0-9,a-f,A-F wep152 32 0-9,a-f,A-F')
wepKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKey4.setStatus('current')
if mibBuilder.loadTexts: wepKey4.setDescription('The field shall indicate the WEP key. wep key type length valid chars ============ ====== =========== none 0 wep64 10 0-9,a-f,A-F wep128 26 0-9,a-f,A-F wep152 32 0-9,a-f,A-F')
wepKeyDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyDefault.setStatus('current')
if mibBuilder.loadTexts: wepKeyDefault.setDescription('The field shall indicate the WEP key number to encrypt TX data.')
wpaPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaPSK.setStatus('current')
if mibBuilder.loadTexts: wpaPSK.setDescription('This attribute shall indicate WPA Pre-Shared Key.')
wlanSeparatorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSeparatorEnable.setStatus('current')
if mibBuilder.loadTexts: wlanSeparatorEnable.setDescription('This attribute shall indicate whether block the communications between two wireless clients.')
wlanMaxUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMaxUser.setStatus('current')
if mibBuilder.loadTexts: wlanMaxUser.setDescription('This attribute shall indicates the max wireless clients that allowed to associated.When the value is set 0,and the wireless clients are not limited')
wlanAccessControlLocalTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 3), )
if mibBuilder.loadTexts: wlanAccessControlLocalTable.setStatus('current')
if mibBuilder.loadTexts: wlanAccessControlLocalTable.setDescription('ACL attributes in tablular form to allow for multiple instances on an agent.')
wlanAccessControlLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 3, 1), ).setIndexNames((0, "WG102", "radioIndex"), (0, "WG102", "aclIndex"))
if mibBuilder.loadTexts: wlanAccessControlLocalEntry.setStatus('current')
if mibBuilder.loadTexts: wlanAccessControlLocalEntry.setDescription('An entry in the wlanAccessControlListTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet-standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 256), ValueRangeConstraint(9999, 9999), )))
if mibBuilder.loadTexts: aclIndex.setStatus('current')
if mibBuilder.loadTexts: aclIndex.setDescription('This field should indicate an index to the access control local database entry. When write this field aclIndex=9999, shall append new MAC address into the local database ')
aclMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclMAC.setStatus('current')
if mibBuilder.loadTexts: aclMAC.setDescription('This field should indicate an MAC address entry in the access control local database. When write this field aclMAC=000000000000, shall remove current MAC address from local database. Otherwise, shall update the MAC address.')
wlanWdsTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4), )
if mibBuilder.loadTexts: wlanWdsTable.setStatus('current')
if mibBuilder.loadTexts: wlanWdsTable.setDescription('WDS attributes in tablular form to allow for multiple instances on an agent.')
wlanWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1), ).setIndexNames((0, "WG102", "radioIndex"))
if mibBuilder.loadTexts: wlanWdsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanWdsEntry.setDescription('An entry in the wlanWdsTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
operationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ap", 0), ("ptp", 2), ("ptpAP", 3), ("pxp", 4), ("pxpAP", 5), ("repeater", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operationMode.setStatus('current')
if mibBuilder.loadTexts: operationMode.setDescription('This attribute shall indicate the operation mode.')
localMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localMacAddress.setStatus('current')
if mibBuilder.loadTexts: localMacAddress.setDescription('This attribute shall indicate the local MAC Address.')
ptpRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptpRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: ptpRemoteMacAddress.setDescription('This attribute shall indicate the stationID.')
pxpRemoteMacAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress1.setStatus('current')
if mibBuilder.loadTexts: pxpRemoteMacAddress1.setDescription('This attribute shall indicate the stationID.')
pxpRemoteMacAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress2.setStatus('current')
if mibBuilder.loadTexts: pxpRemoteMacAddress2.setDescription('This attribute shall indicate the stationID.')
pxpRemoteMacAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress3.setStatus('current')
if mibBuilder.loadTexts: pxpRemoteMacAddress3.setDescription('This attribute shall indicate the stationID.')
pxpRemoteMacAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pxpRemoteMacAddress4.setStatus('current')
if mibBuilder.loadTexts: pxpRemoteMacAddress4.setDescription('This attribute shall indicate the stationID.')
repeaterParentMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterParentMacAddress.setStatus('current')
if mibBuilder.loadTexts: repeaterParentMacAddress.setDescription('This attribute shall indicate the stationID.')
repeaterChildMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterChildMacAddress.setStatus('current')
if mibBuilder.loadTexts: repeaterChildMacAddress.setDescription('This attribute shall indicate the stationID.')
wlanClientsTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 5), )
if mibBuilder.loadTexts: wlanClientsTable.setStatus('current')
if mibBuilder.loadTexts: wlanClientsTable.setDescription('wireless clients attributes in tablular form to allow for multiple instances on an agent.')
wlanClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 5, 1), ).setIndexNames((0, "WG102", "radioIndex"), (0, "WG102", "clientIndex"))
if mibBuilder.loadTexts: wlanClientsEntry.setStatus('current')
if mibBuilder.loadTexts: wlanClientsEntry.setDescription('An entry in the wlanClientsTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
clientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIndex.setStatus('current')
if mibBuilder.loadTexts: clientIndex.setDescription('This attribute shall indicate sequence number (ID) of the associated station.')
clientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientMacAddress.setStatus('current')
if mibBuilder.loadTexts: clientMacAddress.setDescription('This attribute shall indicate MAC address of the associated stationID.')
clientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIP.setStatus('current')
if mibBuilder.loadTexts: clientIP.setDescription('This attribute shall indicate the IP address of the associated stationID.')
clientSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientSSID.setStatus('current')
if mibBuilder.loadTexts: clientSSID.setDescription('This attribute shall indicate the SSID that the wireless client associates to.')
clientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("blocked", 0), ("authenticating", 1), ("authenticated", 2), ("associating", 3), ("associated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientStatus.setStatus('current')
if mibBuilder.loadTexts: clientStatus.setDescription('This attribute shall indicate the status of the associated stationID.')
wlanUnknownApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6), )
if mibBuilder.loadTexts: wlanUnknownApTable.setStatus('current')
if mibBuilder.loadTexts: wlanUnknownApTable.setDescription('wireless Unknown AP attributes in tablular form to allow for multiple instances on an agent.')
wlanUnknownApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6, 1), ).setIndexNames((0, "WG102", "radioIndex"), (0, "WG102", "unknowApIndex"))
if mibBuilder.loadTexts: wlanUnknownApEntry.setStatus('current')
if mibBuilder.loadTexts: wlanUnknownApEntry.setDescription('An entry in the wlanUnknownApTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
unknowApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowApIndex.setStatus('current')
if mibBuilder.loadTexts: unknowApIndex.setDescription('This attribute shall indicate sequence number (ID) of the detected unknow AP.')
unknowApAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknowApAuthorize.setStatus('current')
if mibBuilder.loadTexts: unknowApAuthorize.setDescription('This attribute is used to authorize the AP to the authorized AP List.')
unknowApSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowApSSID.setStatus('current')
if mibBuilder.loadTexts: unknowApSSID.setDescription('This attribute shall indicate the SSID of the AP.')
unknowApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowApMacAddress.setStatus('current')
if mibBuilder.loadTexts: unknowApMacAddress.setDescription('This attribute shall indicate MAC address of the AP.')
unknowApChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowApChannel.setStatus('current')
if mibBuilder.loadTexts: unknowApChannel.setDescription('This attribute shall indicate the channel number of the AP.')
unknowApAutoCellEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowApAutoCellEnabled.setStatus('current')
if mibBuilder.loadTexts: unknowApAutoCellEnabled.setDescription('This attribute shall indicate whether the AutoCell is enabled on the AP or not.')
wlanAuthorizedApTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7), )
if mibBuilder.loadTexts: wlanAuthorizedApTable.setStatus('current')
if mibBuilder.loadTexts: wlanAuthorizedApTable.setDescription('wireless Authorized AP attributes in tablular form to allow for multiple instances on an agent.')
wlanAuthorizedApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7, 1), ).setIndexNames((0, "WG102", "radioIndex"), (0, "WG102", "unknowApIndex"))
if mibBuilder.loadTexts: wlanAuthorizedApEntry.setStatus('current')
if mibBuilder.loadTexts: wlanAuthorizedApEntry.setDescription('An entry in the wlanAuthorizedApTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
authorizedApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedApIndex.setStatus('current')
if mibBuilder.loadTexts: authorizedApIndex.setDescription('This attribute shall indicate sequence number (ID) of the detected authorized AP.')
authorizedApDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authorizedApDelete.setStatus('current')
if mibBuilder.loadTexts: authorizedApDelete.setDescription('This attribute is used to delete the AP from authorized AP List.')
authorizedApSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedApSSID.setStatus('current')
if mibBuilder.loadTexts: authorizedApSSID.setDescription('This attribute shall indicate the SSID of the AP.')
authorizedApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedApMacAddress.setStatus('current')
if mibBuilder.loadTexts: authorizedApMacAddress.setDescription('This attribute shall indicate MAC address of the AP.')
authorizedApChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedApChannel.setStatus('current')
if mibBuilder.loadTexts: authorizedApChannel.setDescription('This attribute shall indicate the channel number of the AP.')
authorizedApAutoCellEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedApAutoCellEnabled.setStatus('current')
if mibBuilder.loadTexts: authorizedApAutoCellEnabled.setDescription('This attribute shall indicate whether the AutoCell is enabled on the AP or not.')
wlanUnknownStationTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 8), )
if mibBuilder.loadTexts: wlanUnknownStationTable.setStatus('current')
if mibBuilder.loadTexts: wlanUnknownStationTable.setDescription('wireless Unknown Station attributes in tablular form to allow for multiple instances on an agent.')
wlanUnknownStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 8, 1), ).setIndexNames((0, "WG102", "radioIndex"), (0, "WG102", "unknowStationIndex"))
if mibBuilder.loadTexts: wlanUnknownStationEntry.setStatus('current')
if mibBuilder.loadTexts: wlanUnknownStationEntry.setDescription('An entry in the wlanUnknownStationTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
unknowStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowStationIndex.setStatus('current')
if mibBuilder.loadTexts: unknowStationIndex.setDescription('This attribute shall indicate sequence number (ID) of the detected unknow Station.')
unknowStationAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 8, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknowStationAuthorize.setStatus('current')
if mibBuilder.loadTexts: unknowStationAuthorize.setDescription('This attribute is used to authorize the Station to the authorized Station List.')
unknowStationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowStationMacAddress.setStatus('current')
if mibBuilder.loadTexts: unknowStationMacAddress.setDescription('This attribute shall indicate MAC address of the Station.')
unknowStationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowStationChannel.setStatus('current')
if mibBuilder.loadTexts: unknowStationChannel.setDescription('This attribute shall indicate the channel number of the Station.')
unknowStationAutoCellEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknowStationAutoCellEnabled.setStatus('current')
if mibBuilder.loadTexts: unknowStationAutoCellEnabled.setDescription('This attribute shall indicate whether the AutoCell is enabled on the Station or not.')
wlanAuthorizedStationTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 9), )
if mibBuilder.loadTexts: wlanAuthorizedStationTable.setStatus('current')
if mibBuilder.loadTexts: wlanAuthorizedStationTable.setDescription('wireless Authorized Station attributes in tablular form to allow for multiple instances on an agent.')
wlanAuthorizedStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 9, 1), ).setIndexNames((0, "WG102", "radioIndex"), (0, "WG102", "unknowStationIndex"))
if mibBuilder.loadTexts: wlanAuthorizedStationEntry.setStatus('current')
if mibBuilder.loadTexts: wlanAuthorizedStationEntry.setDescription('An entry in the wlanAuthorizedStationTable. It is possible for there to be multiple AP interfaces on one agent, each with its unique MAC address. The relationship between an AP interface and an interface in the context of the Internet- standard MIB is one-to-one. As such, the value of an radioIndex object instance can be directly used to identify corresponding instances of the objects defined herein. ')
authorizedStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedStationIndex.setStatus('current')
if mibBuilder.loadTexts: authorizedStationIndex.setDescription('This attribute shall indicate sequence number (ID) of the detected authorized Station.')
authorizedStationDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 9, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authorizedStationDelete.setStatus('current')
if mibBuilder.loadTexts: authorizedStationDelete.setDescription('This attribute is used to delete the Station from authorized Station List.')
authorizedStationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedStationMacAddress.setStatus('current')
if mibBuilder.loadTexts: authorizedStationMacAddress.setDescription('This attribute shall indicate MAC address of the Station.')
authorizedStationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedStationChannel.setStatus('current')
if mibBuilder.loadTexts: authorizedStationChannel.setDescription('This attribute shall indicate the channel number of the Station.')
authorizedStationAutoCellEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 2, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authorizedStationAutoCellEnabled.setStatus('current')
if mibBuilder.loadTexts: authorizedStationAutoCellEnabled.setDescription('This attribute shall indicate whether the AutoCell is enabled on the Station or not.')
vlanSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 3))
vlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanEnable.setStatus('current')
if mibBuilder.loadTexts: vlanEnable.setDescription('This attribute shall indicate whether vlan(802.1Q) is enabled.')
managementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementVlanId.setStatus('current')
if mibBuilder.loadTexts: managementVlanId.setDescription('This attribute shall indicate the management VLAN ID.')
securityProfileVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 3, 3), )
if mibBuilder.loadTexts: securityProfileVlanTable.setStatus('current')
if mibBuilder.loadTexts: securityProfileVlanTable.setDescription('Description.')
securityProfileVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 3, 3, 1), ).setIndexNames((0, "WG102", "wlanSecurityProfileNo"))
if mibBuilder.loadTexts: securityProfileVlanEntry.setStatus('current')
if mibBuilder.loadTexts: securityProfileVlanEntry.setDescription('Description.')
profileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileNo.setStatus('current')
if mibBuilder.loadTexts: profileNo.setDescription('the field indicates the security profile NO.')
profileVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileVlan.setStatus('current')
if mibBuilder.loadTexts: profileVlan.setDescription("the field indicates the security profile's VLAN.")
sysStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4))
ethernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 1))
ethInPackets = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInPackets.setStatus('current')
if mibBuilder.loadTexts: ethInPackets.setDescription('the field indicates the sum of received packets.')
ethOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutPackets.setStatus('current')
if mibBuilder.loadTexts: ethOutPackets.setDescription('the field indicates the sum of transmitted packets.')
ethInBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethInBytes.setStatus('current')
if mibBuilder.loadTexts: ethInBytes.setDescription('the field indicates the sum of received bytes.')
ethOutBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethOutBytes.setStatus('current')
if mibBuilder.loadTexts: ethOutBytes.setDescription('the field indicates the sum of transmitted bytes.')
wirelessStatTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2), )
if mibBuilder.loadTexts: wirelessStatTable.setStatus('current')
if mibBuilder.loadTexts: wirelessStatTable.setDescription('Description.')
wirelessStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1), ).setIndexNames((0, "WG102", "radioIndex"))
if mibBuilder.loadTexts: wirelessStatEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessStatEntry.setDescription('Description.')
wlanSecurityProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanSecurityProfileNo.setStatus('current')
if mibBuilder.loadTexts: wlanSecurityProfileNo.setDescription('the field indicates the security profile NO.')
wlanInPacketsUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsUnicast.setStatus('current')
if mibBuilder.loadTexts: wlanInPacketsUnicast.setDescription('the field indicates the sum of received unicast packets.')
wlanOutPacketsUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsUnicast.setStatus('current')
if mibBuilder.loadTexts: wlanOutPacketsUnicast.setDescription('the field indicates the sum of transmitted unicast packets.')
wlanInPacketsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsBroadcast.setStatus('current')
if mibBuilder.loadTexts: wlanInPacketsBroadcast.setDescription('the field indicates the sum of received broadcast packets.')
wlanOutPacketsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsBroadcast.setStatus('current')
if mibBuilder.loadTexts: wlanOutPacketsBroadcast.setDescription('the field indicates the sum of transmitted broadcast packets.')
wlanInPacketsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsMulticast.setStatus('current')
if mibBuilder.loadTexts: wlanInPacketsMulticast.setDescription('the field indicates the sum of received multicast packets.')
wlanOutPacketsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsMulticast.setStatus('current')
if mibBuilder.loadTexts: wlanOutPacketsMulticast.setDescription('the field indicates the sum of transmitted multicast packets.')
wlanInPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInPacketsTotal.setStatus('current')
if mibBuilder.loadTexts: wlanInPacketsTotal.setDescription('the field indicates the sum of received packets.')
wlanOutPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutPacketsTotal.setStatus('current')
if mibBuilder.loadTexts: wlanOutPacketsTotal.setDescription('the field indicates the sum of transmitted packets.')
wlanInBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanInBytesTotal.setStatus('current')
if mibBuilder.loadTexts: wlanInBytesTotal.setDescription('the field indicates the sum of received bytes.')
wlanOutBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanOutBytesTotal.setStatus('current')
if mibBuilder.loadTexts: wlanOutBytesTotal.setDescription('the field indicates the sum of transmitted bytes.')
ethWrongPackets = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethWrongPackets.setStatus('current')
if mibBuilder.loadTexts: ethWrongPackets.setDescription('the field indicates the sum of wrong Ethernet packets.')
wrongWLANSTAPackets = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wrongWLANSTAPackets.setStatus('current')
if mibBuilder.loadTexts: wrongWLANSTAPackets.setDescription('the field indicates the sum of wrong wireless station packets.')
wlanStationCount = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanStationCount.setStatus('current')
if mibBuilder.loadTexts: wlanStationCount.setDescription('the field indicates the number of stations.')
wirelessLinkStatTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6), )
if mibBuilder.loadTexts: wirelessLinkStatTable.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatTable.setDescription('The table is for wireless clients association request, successful associated, granted access and aggregative clients disconnection with date & time section and read flag information.')
wirelessLinkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1), ).setIndexNames((0, "WG102", "wirelessLinkStatIndex"))
if mibBuilder.loadTexts: wirelessLinkStatEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatEntry.setDescription('Providing entries for wirelessLinkStatTable')
wirelessLinkStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatIndex.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatIndex.setDescription('This field indicates the index of this statistic records.')
wirelessLinkStatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatDate.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatDate.setDescription('This field indicates the date of this statistic record in the format: YYYY/MM/DD.')
wirelessLinkStatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatTime.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatTime.setDescription('This field indicates the time slice of this statistic record. Total 24 time slice are defined in one day, such as time scale 0 is from 12am to 1am, time scale 1 is from 1am to 2 am, and so forth')
wirelessLinkStatRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatRequest.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatRequest.setDescription('This field indicates the statistic of Association Request to the AP.')
wirelessLinkStatResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatResponse.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatResponse.setDescription('This field indicates the statistic of Association Response sent by the AP.')
wirelessLinkStatGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatGrant.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatGrant.setDescription('This field indicates the statistic of Successful Association with the AP.')
wirelessLinkStatDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatDisconnect.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatDisconnect.setDescription('This field indicates the statistic how many AP detects clients disconnection due to timeout.')
wirelessLinkStatDisconnectAll = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatDisconnectAll.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatDisconnectAll.setDescription('This field indicates the statistic that the AP detects all wireless clients (>1) disconnecting within 1 second')
wirelessLinkStatFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessLinkStatFlag.setStatus('current')
if mibBuilder.loadTexts: wirelessLinkStatFlag.setDescription('This field indicates if the network management system has already read this record. When network management system read the record successfully, it should set it to 1. If this field is set to be 1, the record will be deleted if the time slice is over.')
wlanAuthenticatedStationCount = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanAuthenticatedStationCount.setStatus('current')
if mibBuilder.loadTexts: wlanAuthenticatedStationCount.setDescription('The field indicates the number of stations that 802.1x authenticated.')
sysTotalMemory = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTotalMemory.setStatus('current')
if mibBuilder.loadTexts: sysTotalMemory.setDescription('The field indicates the total memory size of the system.')
sysFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFreeMemory.setStatus('current')
if mibBuilder.loadTexts: sysFreeMemory.setDescription('The field indicates the current free memory size of the system.')
sysRuntime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 4, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRuntime.setStatus('current')
if mibBuilder.loadTexts: sysRuntime.setDescription('The field indicates the time (in hundredths of a second) since the system was last re-initialized.')
radiusSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5))
radiusAuthPrimaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 1))
radiusAuthPrimaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthPrimaryServerIP.setStatus('current')
if mibBuilder.loadTexts: radiusAuthPrimaryServerIP.setDescription('This field shall indicate the primary authentication RADIUS server IP address.')
radiusAuthPrimaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthPrimaryServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusAuthPrimaryServerPort.setDescription('This field shall indicate the primary authentication RADIUS server port number. Default: 1812.')
radiusAuthPrimaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthPrimaryServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusAuthPrimaryServerSecret.setDescription('This field shall indicate the primary authentication RADIUS server shared secret string.')
radiusAuthSecondaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 2))
radiusAuthSecondaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthSecondaryServerIP.setStatus('current')
if mibBuilder.loadTexts: radiusAuthSecondaryServerIP.setDescription('This field shall indicate the secondary authentication RADIUS server IP address.')
radiusAuthSecondaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthSecondaryServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusAuthSecondaryServerPort.setDescription('This field shall indicate the secondary authentication RADIUS server port number. Default: 1812.')
radiusAuthSecondaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthSecondaryServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusAuthSecondaryServerSecret.setDescription('This field shall indicate the secondary authentication RADIUS server shared secret string.')
authenticationSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 3))
reauthTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reauthTime.setStatus('current')
if mibBuilder.loadTexts: reauthTime.setDescription('This attribute shall indicate 802.1x reauth time.')
wpaGroupKeyUpdateCondition = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("seconds", 1), ("disconnect", 2), ("secondsAndDisconnect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaGroupKeyUpdateCondition.setStatus('current')
if mibBuilder.loadTexts: wpaGroupKeyUpdateCondition.setDescription('This attribute shall indicate WPA group key update condition.')
wpaGroupKeyUpdateIntervalSecond = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaGroupKeyUpdateIntervalSecond.setStatus('current')
if mibBuilder.loadTexts: wpaGroupKeyUpdateIntervalSecond.setDescription('This fields indicates the wpa keyupdate sec interval.')
radiusAccountPrimaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 4))
radiusAccountPrimaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountPrimaryServerIP.setStatus('current')
if mibBuilder.loadTexts: radiusAccountPrimaryServerIP.setDescription('This field shall indicate the primary account RADIUS server IP address.')
radiusAccountPrimaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountPrimaryServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusAccountPrimaryServerPort.setDescription('This field shall indicate the primary account RADIUS server port number. Default: 1813.')
radiusAccountPrimaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountPrimaryServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusAccountPrimaryServerSecret.setDescription('This field shall indicate the primary account RADIUS server shared secret string.')
radiusAccountSecondaryServer = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 5))
radiusAccountSecondaryServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountSecondaryServerIP.setStatus('current')
if mibBuilder.loadTexts: radiusAccountSecondaryServerIP.setDescription('This field shall indicate the secondary account RADIUS server IP address.')
radiusAccountSecondaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountSecondaryServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusAccountSecondaryServerPort.setDescription('This field shall indicate the secondary account RADIUS server port number. Default: 1813.')
radiusAccountSecondaryServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 5, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountSecondaryServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusAccountSecondaryServerSecret.setDescription('This field shall indicate the secondary account RADIUS server shared secret string.')
hotspotSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 6))
httpRedirectEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectEnable.setStatus('current')
if mibBuilder.loadTexts: httpRedirectEnable.setDescription('This attribute shall indicate whether the HTTP redirect is enabled.')
httpRedirectUrl = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectUrl.setStatus('current')
if mibBuilder.loadTexts: httpRedirectUrl.setDescription('This attribute shall indicate http redirect URL.')
syslogSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 7))
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
if mibBuilder.loadTexts: syslogEnable.setDescription('This attribute shall indicate whether the syslog is enabled.')
syslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIP.setStatus('current')
if mibBuilder.loadTexts: syslogServerIP.setDescription('This attributes shall indicates the IP address of the syslog server. ***The value can only be set to an IP address in dot format.')
syslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogServerPort.setDescription('This attributes shall indicates the Port of the Syslog server.')
remoteMgmtSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8))
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
if mibBuilder.loadTexts: snmpEnable.setDescription('This attribute shall indicate whether the SNMP agent is enabled.')
snmpManageIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManageIP.setStatus('current')
if mibBuilder.loadTexts: snmpManageIP.setDescription('The field indicates the SNMP manage IP address. ***The value can only be set to an IP address in dot format.')
snmpTrapServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapServerIP.setStatus('current')
if mibBuilder.loadTexts: snmpTrapServerIP.setDescription('The field indicates the SNMP trap server IP address. ***The value can only be set to an IP address in dot format.')
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadCommunity.setDescription('The field indicates the SNMP read only community name. ***The value can only be set to 1 to 32 readable string.')
snmpWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpWriteCommunity.setDescription('The field indicates the SNMP read write community name. ***The value can only be set to 1 to 32 readable string.')
snmpTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapPort.setStatus('current')
if mibBuilder.loadTexts: snmpTrapPort.setDescription('This field shall indicate the port for trap. Default: 162.')
mgmtWebAccessCtrl = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebAccessCtrl.setStatus('current')
if mibBuilder.loadTexts: mgmtWebAccessCtrl.setDescription('This attribute shall allow you to turn the WEB access control on or off. ')
mgmtWebIPSubnet1 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet1.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet1.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
mgmtWebIPSubnet2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet2.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet2.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
mgmtWebIPSubnet3 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet3.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet3.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
mgmtWebIPSubnet4 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet4.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet4.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
mgmtWebIPSubnet5 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet5.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet5.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
mgmtWebIPSubnet6 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet6.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet6.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
mgmtWebIPSubnet7 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet7.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet7.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
mgmtWebIPSubnet8 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 8, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtWebIPSubnet8.setStatus('current')
if mibBuilder.loadTexts: mgmtWebIPSubnet8.setDescription('The field indicates the IP Subnet: a base IP address and a subnet mask. ***Please follow this format: xxx.xxx.xxx.xxx/xxx.xxx.xxx.xxx ')
auxCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 9))
resetAP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 9, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAP.setStatus('current')
if mibBuilder.loadTexts: resetAP.setDescription('This a command field for conntrol AP action. Write any value to reset the AP.')
resetToFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 9, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetToFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: resetToFactoryDefault.setDescription('This a command field for conntrol AP action. Write any value to reset the Access Point to the original factory default settings.')
mibBuilder.exportSymbols("WG102", dot11bPreamble=dot11bPreamble, securityProfileVlanTable=securityProfileVlanTable, radiusAccountPrimaryServerSecret=radiusAccountPrimaryServerSecret, authorizedApAutoCellEnabled=authorizedApAutoCellEnabled, sysAdminPasswd=sysAdminPasswd, wlanSettingTable=wlanSettingTable, syslogServerPort=syslogServerPort, unknowStationIndex=unknowStationIndex, securityProfileNo=securityProfileNo, profileNo=profileNo, wpaGroupKeyUpdateCondition=wpaGroupKeyUpdateCondition, wlanSecurityTable=wlanSecurityTable, unknowStationMacAddress=unknowStationMacAddress, wirelessMode=wirelessMode, managementVlanId=managementVlanId, mgmtWebIPSubnet4=mgmtWebIPSubnet4, timeCurrentTime=timeCurrentTime, wirelessLinkStatTable=wirelessLinkStatTable, ethOutPackets=ethOutPackets, wirelessLinkStatRequest=wirelessLinkStatRequest, sysMacAddress=sysMacAddress, wlanWdsEntry=wlanWdsEntry, wepKey3=wepKey3, mgmtWebIPSubnet6=mgmtWebIPSubnet6, radiusAccountPrimaryServerIP=radiusAccountPrimaryServerIP, resetToFactoryDefault=resetToFactoryDefault, unknowStationChannel=unknowStationChannel, aclMAC=aclMAC, unknowApAuthorize=unknowApAuthorize, wirelessStatTable=wirelessStatTable, wlanSecurityProfileNo=wlanSecurityProfileNo, radiusSettings=radiusSettings, radiusAccountSecondaryServerPort=radiusAccountSecondaryServerPort, hotspotSettings=hotspotSettings, acEnabled=acEnabled, mgmtWebIPSubnet7=mgmtWebIPSubnet7, wlanInBytesTotal=wlanInBytesTotal, pxpRemoteMacAddress3=pxpRemoteMacAddress3, clientStatus=clientStatus, mgmtWebAccessCtrl=mgmtWebAccessCtrl, wirelessLinkStatDate=wirelessLinkStatDate, ethOutBytes=ethOutBytes, wlanInPacketsMulticast=wlanInPacketsMulticast, wlanSettingEntry=wlanSettingEntry, wlanAuthorizedApTable=wlanAuthorizedApTable, httpRedirectEnable=httpRedirectEnable, radioIndex=radioIndex, wlanSeparatorEnable=wlanSeparatorEnable, authenticationSettings=authenticationSettings, timeDaylightSaving=timeDaylightSaving, sysSettings=sysSettings, wlanInPacketsTotal=wlanInPacketsTotal, httpRedirectUrl=httpRedirectUrl, wirelessLinkStatGrant=wirelessLinkStatGrant, acRogueDevDetection=acRogueDevDetection, authentication=authentication, mgmtWebIPSubnet1=mgmtWebIPSubnet1, snmpReadCommunity=snmpReadCommunity, unknowApChannel=unknowApChannel, repeaterChildMacAddress=repeaterChildMacAddress, radioEnable=radioEnable, ipDnsServer=ipDnsServer, wlanAccessControlLocalEntry=wlanAccessControlLocalEntry, vlanSettings=vlanSettings, wlanOutPacketsMulticast=wlanOutPacketsMulticast, authorizedStationMacAddress=authorizedStationMacAddress, sysAPName=sysAPName, clientSSID=clientSSID, wlanUnknownStationEntry=wlanUnknownStationEntry, snmpWriteCommunity=snmpWriteCommunity, rtsThreshold=rtsThreshold, txPower=txPower, sysRuntime=sysRuntime, wlanWdsTable=wlanWdsTable, sysCountryRegion=sysCountryRegion, txRate=txRate, wepKey1=wepKey1, syslogEnable=syslogEnable, remoteMgmtSettings=remoteMgmtSettings, ipNetmask=ipNetmask, snmpTrapPort=snmpTrapPort, wlanClientsEntry=wlanClientsEntry, wlanSettings=wlanSettings, ssid=ssid, wlanInPacketsBroadcast=wlanInPacketsBroadcast, reauthTime=reauthTime, ethInPackets=ethInPackets, wlanOutBytesTotal=wlanOutBytesTotal, wirelessLinkStatEntry=wirelessLinkStatEntry, sysVersion=sysVersion, radiusAccountPrimaryServerPort=radiusAccountPrimaryServerPort, wpaGroupKeyUpdateIntervalSecond=wpaGroupKeyUpdateIntervalSecond, wrongWLANSTAPackets=wrongWLANSTAPackets, encryption=encryption, beaconInterval=beaconInterval, wmmNoAck=wmmNoAck, ssidBroadcastEnable=ssidBroadcastEnable, ipIPAddress=ipIPAddress, wepKey4=wepKey4, acEnhancedRFSecurity=acEnhancedRFSecurity, wlanUnknownStationTable=wlanUnknownStationTable, wlanOutPacketsUnicast=wlanOutPacketsUnicast, wlanUnknownApTable=wlanUnknownApTable, wirelessLinkStatDisconnect=wirelessLinkStatDisconnect, clientIndex=clientIndex, radiusAuthPrimaryServerIP=radiusAuthPrimaryServerIP, syslogServerIP=syslogServerIP, mgmtWebIPSubnet3=mgmtWebIPSubnet3, ipSettings=ipSettings, sysFreeMemory=sysFreeMemory, radiusAuthPrimaryServer=radiusAuthPrimaryServer, syslogSettings=syslogSettings, PYSNMP_MODULE_ID=wg102, radiusAccountPrimaryServer=radiusAccountPrimaryServer, pxpRemoteMacAddress1=pxpRemoteMacAddress1, unknowApAutoCellEnabled=unknowApAutoCellEnabled, timeTimeZone=timeTimeZone, profileVlan=profileVlan, ethInBytes=ethInBytes, wirelessLinkStatResponse=wirelessLinkStatResponse, authorizedStationChannel=authorizedStationChannel, wirelessStatEntry=wirelessStatEntry, wg102=wg102, radiusAuthPrimaryServerSecret=radiusAuthPrimaryServerSecret, clientIP=clientIP, wirelessLinkStatDisconnectAll=wirelessLinkStatDisconnectAll, aclIndex=aclIndex, clientMacAddress=clientMacAddress, unknowApMacAddress=unknowApMacAddress, wirelessLinkStatIndex=wirelessLinkStatIndex, unknowApIndex=unknowApIndex, snmpEnable=snmpEnable, unknowApSSID=unknowApSSID, fragmentationThreshold=fragmentationThreshold, localMacAddress=localMacAddress, ptpRemoteMacAddress=ptpRemoteMacAddress, wlanClientsTable=wlanClientsTable, wlanOutPacketsTotal=wlanOutPacketsTotal, channel=channel, authorizedApDelete=authorizedApDelete, wmm=wmm, wlanAuthenticatedStationCount=wlanAuthenticatedStationCount, radiusAccountSecondaryServer=radiusAccountSecondaryServer, timeSettings=timeSettings, superMode=superMode, radiusAuthPrimaryServerPort=radiusAuthPrimaryServerPort, wlanSecurityEntry=wlanSecurityEntry, authorizedApChannel=authorizedApChannel, wlanAuthorizedStationTable=wlanAuthorizedStationTable, ethWrongPackets=ethWrongPackets, securityProfileEnabled=securityProfileEnabled, wpaPSK=wpaPSK, radiusAuthSecondaryServer=radiusAuthSecondaryServer, timeNtpServer=timeNtpServer, snmpTrapServerIP=snmpTrapServerIP, accessControlMode=accessControlMode, authorizedStationAutoCellEnabled=authorizedStationAutoCellEnabled, radiusAuthSecondaryServerSecret=radiusAuthSecondaryServerSecret, wlanInPacketsUnicast=wlanInPacketsUnicast, ipGateway=ipGateway, wlanAccessControlLocalTable=wlanAccessControlLocalTable, sysTotalMemory=sysTotalMemory, mgmtWebIPSubnet2=mgmtWebIPSubnet2, authorizedStationIndex=authorizedStationIndex, authorizedApSSID=authorizedApSSID, wepKeyDefault=wepKeyDefault, authorizedApIndex=authorizedApIndex, radiusAccountSecondaryServerIP=radiusAccountSecondaryServerIP, radiusAccountSecondaryServerSecret=radiusAccountSecondaryServerSecret, snmpManageIP=snmpManageIP, netgear=netgear, authorizedStationDelete=authorizedStationDelete, ethernetStat=ethernetStat, pxpRemoteMacAddress2=pxpRemoteMacAddress2, wlanAuthorizedStationEntry=wlanAuthorizedStationEntry, mgmtWebIPSubnet8=mgmtWebIPSubnet8, repeaterParentMacAddress=repeaterParentMacAddress, wirelessLinkStatFlag=wirelessLinkStatFlag, wlanOutPacketsBroadcast=wlanOutPacketsBroadcast, radiusAuthSecondaryServerIP=radiusAuthSecondaryServerIP, wlanUnknownApEntry=wlanUnknownApEntry, auxCommand=auxCommand, dtimInterval=dtimInterval, wlanMaxUser=wlanMaxUser, unknowStationAutoCellEnabled=unknowStationAutoCellEnabled, sysStatistics=sysStatistics, wlanStationCount=wlanStationCount, ipDhcpClientEnable=ipDhcpClientEnable, wirelessLinkStatTime=wirelessLinkStatTime, mgmtWebIPSubnet5=mgmtWebIPSubnet5, securityProfileVlanEntry=securityProfileVlanEntry, authorizedApMacAddress=authorizedApMacAddress, pxpRemoteMacAddress4=pxpRemoteMacAddress4, resetAP=resetAP, vlanEnable=vlanEnable, sysAdminName=sysAdminName, wireless=wireless, securityProfileName=securityProfileName, unknowStationAuthorize=unknowStationAuthorize, wepKey2=wepKey2, operationMode=operationMode, wlanAuthorizedApEntry=wlanAuthorizedApEntry, radiusAuthSecondaryServerPort=radiusAuthSecondaryServerPort)
