#
# PySNMP MIB module IBMACCOUNTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMACCOUNTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Bits, iso, IpAddress, NotificationType, ObjectIdentity, ModuleIdentity, Counter64, Unsigned32, enterprises, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Bits", "iso", "IpAddress", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Counter64", "Unsigned32", "enterprises", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm6611 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2))
ibmappn = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13))
ibmappnSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7))
ibmappnSessIntermediate = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3))
ibmappnIsAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2))
ibmappnIsAcGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1))
ibmappnIsAcGlobeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notActive", 1), ("activeNotFull", 2), ("activeButFull", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcGlobeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeStatus.setDescription('This object indicates the current status for accounting type. 1. indicates collection is not active for any media type. 2. indicates collection is active for at least one media type; and that media is not full. 3. indicates collection is active for at least one media type; but all active medias are full.')
ibmappnIsAcGlobeByteThresh = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeByteThresh.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeByteThresh.setDescription('The byte threshold for recording accounting information for an active session. If the total of the byte counters (FmdBytes and NonFmdBtyes) is an even multiple of this non-zero value, statistics for this session will be recorded to all active buffers. A value of zero indicates that no byte threshold has been set.')
ibmappnIsAcGlobeCheckPt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeCheckPt.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeCheckPt.setDescription('By setting this value to yes, the agent will collect accounting information for all active sessions. This information will be recorded to all active buffers.')
ibmappnIsAcGlobeMgrUtcSecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcSecs.setDescription("The manager's Coordinated Universal Time (UTC) seconds. It contains an integer from 0 to 59. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcMins = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMins.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMins.setDescription("The manager's Coordinated Universal Time (UTC) minutes. It contains an integer from 0 to 59. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcHours = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcHours.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcHours.setDescription("The manager's Coordinated Universal Time (UTC) hours. It contains an integer from 0 to 23. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcMdays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMdays.setDescription("The manager's Coordinated Universal Time (UTC) day of the month. It contains an integer from 1 to 31; or 0 if the manager has not set this object. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcMonths = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMonths.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcMonths.setDescription("The manager's Coordinated Universal Time (UTC) months since January. It contains an integer from 0 to 11. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcYears = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcYears.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcYears.setDescription("The manager's number of years since 1900. For years up through 1999, this value is identical to the manager's Coordinated Universal Time (UTC) years. Beginning in the year 2000, however, this value will be greater than the UTC years value by 100 (or more). By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcWdays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcWdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcWdays.setDescription("The manager's Coordinated Universal Time (UTC) days since Sunday. It contains an integer from 0 to 6. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcYdays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcYdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcYdays.setDescription("The manager's Coordinated Universal Time (UTC) days since January 1. It contains an integer from 0 to 365. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrUtcIsdst = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcIsdst.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrUtcIsdst.setDescription("The manager's Coordinated Universal Time (UTC) daylight saving time flag. It is positive if daylight saving time is in effect. It is zero if daylight saving time is not in effect. It is negative if the manager does not support the function. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.")
ibmappnIsAcGlobeMgrName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcGlobeMgrName.setDescription('The name of the manager who set the manager UTC times or NULL if the manager name has not been set. It contains: a. the network id of the manager, b. a period (.) c. the cp name of the manager. By setting this value, the agent will create time record with its corresponding time and name. When setting this object, the manager should also set all other ibmappnIsAcGlobeMgr objects with the same SET operation.')
ibmappnIsAcBtypeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2), )
if mibBuilder.loadTexts: ibmappnIsAcBtypeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeTable.setDescription('Intermediate Session Accounting Buffer Type Table')
ibmappnIsAcBtypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1), ).setIndexNames((0, "IBMACCOUNTING-MIB", "ibmappnIsAcBtypeMedia"))
if mibBuilder.loadTexts: ibmappnIsAcBtypeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeEntry.setDescription('Entry of Intermediate Session Accounting Buffer Type Table.')
ibmappnIsAcBtypeMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memory", 1), ("dasd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeMedia.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeMedia.setDescription('The media for storing the intermediate session accounting records.')
ibmappnIsAcBtypeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeActive.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeActive.setDescription('Indicates whether or not the buffer media is active. 1. no: indicates the buffer media is not currently used for recording. 2. yes: indicates the buffer media is currently being used for recording.')
ibmappnIsAcBtypeDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeDirName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeDirName.setDescription('The name of the directory which will be used to allocate and write buffers of this type. For memory buffer types, this field will be NULL.')
ibmappnIsAcBtypePrdMaxBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypePrdMaxBufs.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypePrdMaxBufs.setDescription('The maximum number of buffer media supported by the product.')
ibmappnIsAcBtypeMaxBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeMaxBufs.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeMaxBufs.setDescription('The maximum number of buffer media that will be used for recording accounting information. This value must be in the range of zero to the Product Maximum.')
ibmappnIsAcBtypeCurBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeCurBufs.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeCurBufs.setDescription('The current number of buffer media. This is the sum of all full and in use buffers of this type.')
ibmappnIsAcBtypePrdRecPerBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypePrdRecPerBuf.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypePrdRecPerBuf.setDescription('The maximum number of records supported by the product.')
ibmappnIsAcBtypeRecPerBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeRecPerBuf.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeRecPerBuf.setDescription('The maximum number of records which will be recorded in an individual buffer. This value must be in the range of zero to the Product Maximum.')
ibmappnIsAcBtypeRecFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeRecFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeRecFormat.setDescription('This defines the recording format of records. (1) ascii: records are recorded in ascii (English text format) (2) binary: records are recorded in binary (machine readable format)')
ibmappnIsAcBtypeFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halt", 1), ("wrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullAction.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullAction.setDescription('This defines the behaviour used when all media buffers are full. (1) halt: stop creating new records (2) wrap: overwrite the existing records.')
ibmappnIsAcBtypeFullTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullTime.setDescription('The time when the full condition was encountered. This time is represented in hundredths of a second since the node was started, up to a value of 2**32-1 (4,294,967,295), after which it wraps.')
ibmappnIsAcBtypeFullReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notFull", 1), ("physicallyFull", 2), ("logicallyFull", 3), ("ioErrors", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullReason.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullReason.setDescription('The reason the buffer media is full. (1) The media is not full. (2) The maximum number of buffers have been reached, all buffers are full, and the full action is halt. (3) The maximum number of buffers is zero or the maximum number of records is less than 5 or a unique record number cannot be generated. (4) Unable to write to the media due to I/O errors.')
ibmappnIsAcBtypeFullWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullWraps.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullWraps.setDescription('The number of accounting records being overwritten due to buffer full situation.')
ibmappnIsAcBtypeFullLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullLosts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeFullLosts.setDescription('The number of new accounting records lost due to the buffer full situation.')
ibmappnIsAcBtypeErrorWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeErrorWraps.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeErrorWraps.setDescription('The number of accounting records lost to due to other reasons, (e.g. I/O error, software error) while in a wrap condition.')
ibmappnIsAcBtypeErrorLosts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeErrorLosts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeErrorLosts.setDescription('The number of accounting records lost to due to other reasons, (e.g. I/O error, software error) while not in a full condition.')
ibmappnIsAcBtypeCheckPts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeCheckPts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeCheckPts.setDescription('The number of times a buffer of this type has been recorded to for checkpointing active intermediate sessions.')
ibmappnIsAcBtypePurges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypePurges.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypePurges.setDescription('The number of times a buffer of this type has been purged.')
ibmappnIsAcBtypeDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeDeletes.setDescription('The number of times entries have been deleted from a buffer of this type.')
ibmappnIsAcBtypeResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBtypeResets.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeResets.setDescription('The number of times the Btype counters have been reset as a result of a SET.')
ibmappnIsAcBtypeClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBtypeClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBtypeClearStats.setDescription('By setting this object to yes, all statistics for this media type will be cleared (set to zero); and the Btype reset counter will be incremented. Objects affected by this include: - ibmappnIsAcBtypeFullTime - ibmappnIsAcBtypeFullReason - ibmappnIsAcBtypeFullWraps - ibmappnIsAcBtypeFullLosts - ibmappnIsAcBtypeErrorWraps - ibmappnIsAcBtypeErrorLosts - ibmappnIsAcBtypeCheckPts - ibmappnIsAcBtypePurges - ibmappnIsAcBtypeDeletes')
ibmappnIsAcBufTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3), )
if mibBuilder.loadTexts: ibmappnIsAcBufTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufTable.setDescription('Intermediate Session Accounting Buffer Table')
ibmappnIsAcBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1), ).setIndexNames((0, "IBMACCOUNTING-MIB", "ibmappnIsAcBufMedia"), (0, "IBMACCOUNTING-MIB", "ibmappnIsAcBufNumber"))
if mibBuilder.loadTexts: ibmappnIsAcBufEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufEntry.setDescription('Entry of Intermediate Session Accounting Buffer Table.')
ibmappnIsAcBufMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memory", 1), ("dasd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufMedia.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufMedia.setDescription('The media for storing the intermediate session accounting records.')
ibmappnIsAcBufNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufNumber.setDescription('Number of the buffer. Each time a new buffer is used for recording, an incremented number will be assigned. Thus, the order of in which the buffers were filled can be determined.')
ibmappnIsAcBufState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("complete", 1), ("active", 2), ("purge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBufState.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufState.setDescription("The current buffer state. 1. complete: indicates the buffer is full or recording is not active for this buffer. In either case, the buffer is ready to be retrieved. This value may be specified in a SET operation to change a buffer's state from active to complete. 2. active: indicates the buffer is current being used for recording. This value is not valid for use in a SET operation. 3. purge: indicates the buffer should be purged. This value may be specified in a SET operation to remove a buffer. Specification of this value is only valid for complete buffers. It is not valid for active buffers.")
ibmappnIsAcBufRecFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("binary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufRecFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufRecFormat.setDescription('This defines the recording format of records. (1) ascii: records are recorded in ascii (English text format) (2) binary: records are recorded in binary (machine readable format)')
ibmappnIsAcBufMaxRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufMaxRecords.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufMaxRecords.setDescription('The maximum number of records this buffer may contain. It is derived from the number of records per buffer set in the buffer type table.')
ibmappnIsAcBufOldestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcBufOldestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufOldestIndex.setDescription('The oldest accounting index contained in this buffer. By setting this object, all records with indexes less than this value will be deleted. Setting of this object will not be honored for all types of buffers.')
ibmappnIsAcBufNewestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufNewestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufNewestIndex.setDescription('The newest accounting index contained in this buffer.')
ibmappnIsAcBufName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcBufName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcBufName.setDescription('The name of the buffer.')
ibmappnIsAcTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4), )
if mibBuilder.loadTexts: ibmappnIsAcTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeTable.setDescription('Intermediate Session Accounting Time Table')
ibmappnIsAcTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1), ).setIndexNames((0, "IBMACCOUNTING-MIB", "ibmappnIsAcTimeIndex"))
if mibBuilder.loadTexts: ibmappnIsAcTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeEntry.setDescription('Entry of Intermediate Session Accounting Time Table.')
ibmappnIsAcTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeIndex.setDescription('Intermediate Session Time record index. This object starts with 0, and increase up to maximum value of 2**31-1 (2,147,483,647), after which it wraps.')
ibmappnIsAcTimeEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("startCollection", 1), ("endCollection", 2), ("createdMedia", 3), ("wrappedMedia", 4), ("timeChange", 5), ("managerSetTime", 6), ("recordFormatChanged", 7), ("timeReference", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeEntryType.setDescription('Indicates whether the entry was made as the result of: 1. a SET to start collecting accounting data, or 2. a SET to stop collecting accounting data, or 3. the creation of a new media to store accounting data, or 4. a media was full and wrapped (over writing records), or 5. the system time changed, or 6. a manager set the manager times and/or manager name, or 7. the record format for this media changed, or 8. time reference for the media')
ibmappnIsAcTimeForMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("memoryMedia", 1), ("dasdMedia", 2), ("allMedias", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeForMedia.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeForMedia.setDescription('This object qualifies the time entry type. It indicates the media type(s) to which the entry applies.')
ibmappnIsAcTimeRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeRecTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeRecTime.setDescription('The time when the intermediate session record was created. This time is represented in hundredths of a second since the node was started, up to a value of 2**32-1 (4,294,967,295), after which it wraps.')
ibmappnIsAcTimeAgtUtcSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcSecs.setDescription("The agent's Coordinated Universal Time (UTC) seconds. It contains an integer from 0 to 59.")
ibmappnIsAcTimeAgtUtcMins = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMins.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMins.setDescription("The agent's Coordinated Universal Time (UTC) minutes. It contains an integer from 0 to 59.")
ibmappnIsAcTimeAgtUtcHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcHours.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcHours.setDescription("The agent's Coordinated Universal Time (UTC) hours. It contains an integer from 0 to 23.")
ibmappnIsAcTimeAgtUtcMdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMdays.setDescription("The agent's Coordinated Universal Time (UTC) day of the month. It contains an integer from 1 to 31.")
ibmappnIsAcTimeAgtUtcMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMonths.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcMonths.setDescription("The agent's Coordinated Universal Time (UTC) months since January. It contains an integer from 0 to 11.")
ibmappnIsAcTimeAgtUtcYears = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcYears.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcYears.setDescription("The agent's number of years since 1900. For years up through 1999, this value is identical to the manager's Coordinated Universal Time (UTC) years. Beginning in the year 2000, however, this value will be greater than the UTC years value by 100 (or more).")
ibmappnIsAcTimeAgtUtcWdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcWdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcWdays.setDescription("The agent's Coordinated Universal Time (UTC) days since Sunday. It contains an integer from 0 to 6.")
ibmappnIsAcTimeAgtUtcYdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcYdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcYdays.setDescription("The agent's Coordinated Universal Time (UTC) days since January 1. It contains an integer from 0 to 365.")
ibmappnIsAcTimeAgtUtcIsdst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcIsdst.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtUtcIsdst.setDescription("The agent's Coordinated Universal Time (UTC) daylight saving time flag. It is positive if daylight saving time is in effect. It is zero if daylight saving time is not in effect. It is negative if the manager causing this entry to be created did not support the function.")
ibmappnIsAcTimeAgtName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeAgtName.setDescription('The name of the agent who set the agent UTC times. It contains: a. the network id of the agent, b. a period (.) c. the cp name of the agent.')
ibmappnIsAcTimeMgrUtcSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcSecs.setDescription("The manager's Coordinated Universal Time (UTC) seconds. It contains an integer from 0 to 59.")
ibmappnIsAcTimeMgrUtcMins = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMins.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMins.setDescription("The manager's Coordinated Universal Time (UTC) minutes. It contains an integer from 0 to 59.")
ibmappnIsAcTimeMgrUtcHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcHours.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcHours.setDescription("The manager's Coordinated Universal Time (UTC) hours. It contains an integer from 0 to 23.")
ibmappnIsAcTimeMgrUtcMdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMdays.setDescription("The manager's Coordinated Universal Time (UTC) day of the month. It contains an integer from 1 to 31; or 0 if the manager did not set the ibmappnIsAcGlobeMgrUtcMdays object.")
ibmappnIsAcTimeMgrUtcMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMonths.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcMonths.setDescription("The manager's Coordinated Universal Time (UTC) months since January. It contains an integer from 0 to 11.")
ibmappnIsAcTimeMgrUtcYears = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcYears.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcYears.setDescription("The manager's number of years since 1900. For years up through 1999, this value is identical to the manager's Coordinated Universal Time (UTC) years. Beginning in the year 2000, however, this value will be greater than the UTC years value by 100 (or more).")
ibmappnIsAcTimeMgrUtcWdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcWdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcWdays.setDescription("The manager's Coordinated Universal Time (UTC) days since Sunday. It contains an integer from 0 to 6.")
ibmappnIsAcTimeMgrUtcYdays = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcYdays.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcYdays.setDescription("The manager's Coordinated Universal Time (UTC) days since January 1. It contains an integer from 0 to 365.")
ibmappnIsAcTimeMgrUtcIsdst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcIsdst.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrUtcIsdst.setDescription("The manager's Coordinated Universal Time (UTC) daylight saving time flag. It is positive if daylight saving time is in effect. It is zero if daylight saving time is not in effect. It is negative if the manager does not support the function.")
ibmappnIsAcTimeMgrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrName.setDescription('The name of the manager who set the manager UTC times or NULL if the manager name has not been set. It contains: a. the network id of the manager, b. a period (.) c. the cp name of the manager.')
ibmappnIsAcTimeMgrTimeValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notvalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrTimeValid.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTimeMgrTimeValid.setDescription('This indicates rather or not the manager UTC times are valid. It is set by the manager if the manager determines the manager UTC times are valid.')
ibmappnIsAcDataTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5), )
if mibBuilder.loadTexts: ibmappnIsAcDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcDataTable.setDescription('Intermediate Session Accounting Data Table')
ibmappnIsAcDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1), ).setIndexNames((0, "IBMACCOUNTING-MIB", "ibmappnIsAcIndex"))
if mibBuilder.loadTexts: ibmappnIsAcDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcDataEntry.setDescription('Entry of Intermediate Session Accounting Data Table.')
ibmappnIsAcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcIndex.setDescription('Session accounting record index. Upon initial startup, it will begin with 0, and increase up to maximum value of 2**31-1 (2,147,483,647), and wraps. Upon subsequent startups, it will be initialized with the value of the oldest index for any media type, or with 0 if no indices are found.')
ibmappnIsAcEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startEntry", 1), ("endEntry", 2), ("thresholdEntry", 3), ("checkpointEntry", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcEntryType.setDescription("Indicates whether the entry was made as the result of: 1. a session starting or, 2. a session ending or, 3. a session threshold's being reached or 4. a session checkpoint request")
ibmappnIsAcRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcRecTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcRecTime.setDescription('The time when the record was created. This time is represented in hundredths of a second since the node was started, up to a value of 2**32-1 (4,294,967,295), after which it wraps.')
ibmappnIsAcFqLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcFqLuName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcFqLuName.setDescription('The network-qualified CP name or PU name of the node at which the session and pcid originated. For APPN and LEN nodes, this is either CP name of the APPN node at which the origin LU is located or the CP name of the NN serving the LEN node at which the origin LU is located. This field is from 3 to 17 characters in length, including a period (.) which separates the NetId from the NAU name.')
ibmappnIsAcPcid = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcPcid.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcPcid.setDescription('The procedure correlation identifier (pcid) of a session. It is an 8-octet value assigned by the primary LU.')
ibmappnIsAcPriLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcPriLuName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcPriLuName.setDescription('Primary LU Name of the session.')
ibmappnIsAcSecLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSecLuName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcSecLuName.setDescription('Secondary LU Name of the session.')
ibmappnIsAcModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcModeName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcModeName.setDescription('The mode name used for this session')
ibmappnIsAcCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcCosName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcCosName.setDescription('The class of service (cos) used for this session')
ibmappnIsAcTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcTransPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcTransPriority.setDescription('Transmission priority for this session. The values are: 1. Low 2. Medium 3. High 4. Network')
ibmappnIsAcSessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lu62", 1), ("lu0thru3", 2), ("lu62dlur", 3), ("lu0thru3dlur", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcSessType.setDescription('The type of intermediate session. Defined values are lu62 A session between LUs of type 6.2 (as indicated by the LU type in Bind) lu0thru3 A session between LUs of type 0, 1, 2, or 3 (as indicated by the LU type in Bind) lu62dlur A session between LUs of type 6.2 (as indicated by the LU type in Bind). One of the LUs is a dependent LU supported by the dependent LU requester (DLUR) function at this node. lu0thru3dlur A session between LUs of type 0, 1, 2, or 3 (as indicated by the LU type in Bind) One of the LUs is a dependent LU supported by the dependent LU requester (DLUR) function at this node.')
ibmappnIsAcSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessState.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcSessState.setDescription('Indicates the state of the session. 1. session is pending inactive or, 2. session is pending active or, 3. session is active or, 4. session is inactive ')
ibmappnIsAcSessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcSessStartTime.setDescription('The time when the session started. This time is represented in hundredths of a second since the node was started, up to a value of 2**32-1 (4,294,967,295), after which it wraps.')
ibmappnIsAcSessUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcSessUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcSessUpTime.setDescription('Length of time the session has been active in hundredths of a second.')
ibmappnIsAcCtrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcCtrUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcCtrUpTime.setDescription('Length of time the session counters have been active in hundredths of a second.')
ibmappnIsAcEndReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcEndReason.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcEndReason.setDescription('The SNA sense data reported when the session ended.')
ibmappnIsAcP2SFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SFmdPius.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcP2SFmdPius.setDescription("The number of FMD PIU's sent from the primary LU to the secondary LU.")
ibmappnIsAcS2PFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PFmdPius.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcS2PFmdPius.setDescription("The number of FMD PIU's sent from the secondary LU to the primary LU.")
ibmappnIsAcP2SNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SNonFmdPius.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcP2SNonFmdPius.setDescription("The number of non-FMD PIU's sent from the primary LU to the secondary LU.")
ibmappnIsAcS2PNonFmdPius = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PNonFmdPius.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcS2PNonFmdPius.setDescription("The number of non-FMD PIU's sent from the secondary LU to the primary LU.")
ibmappnIsAcP2SFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SFmdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcP2SFmdBytes.setDescription('The number of FMD bytes sent from the primary LU to the secondary LU.')
ibmappnIsAcS2PFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PFmdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcS2PFmdBytes.setDescription('The number of FMD bytes sent from the secondary LU to the primary LU.')
ibmappnIsAcP2SNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcP2SNonFmdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcP2SNonFmdBytes.setDescription('The number of non-FMD bytes sent from the primary LU to the secondary LU.')
ibmappnIsAcS2PNonFmdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcS2PNonFmdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcS2PNonFmdBytes.setDescription('The number of non-FMD bytes sent from the secondary LU to the primary LU.')
ibmappnIsAcRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 7, 3, 2, 5, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnIsAcRouteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ibmappnIsAcRouteInfo.setDescription("The route selection control vector (RSCV x'2B') used for this session. It is present for APPN nodes; for LEN nodes, a zero- length string is returned.")
mibBuilder.exportSymbols("IBMACCOUNTING-MIB", ibmappnIsAcBtypeActive=ibmappnIsAcBtypeActive, ibmappnIsAcTimeMgrUtcWdays=ibmappnIsAcTimeMgrUtcWdays, ibmappnIsAcPriLuName=ibmappnIsAcPriLuName, ibmappnIsAcTimeForMedia=ibmappnIsAcTimeForMedia, ibmappnIsAcBtypePurges=ibmappnIsAcBtypePurges, ibmappnIsAcBufNumber=ibmappnIsAcBufNumber, ibmappnIsAcFqLuName=ibmappnIsAcFqLuName, ibmappnIsAcTimeEntryType=ibmappnIsAcTimeEntryType, ibmappnIsAcEntryType=ibmappnIsAcEntryType, ibmappnIsAcTimeAgtName=ibmappnIsAcTimeAgtName, ibmappnIsAcTimeMgrUtcMdays=ibmappnIsAcTimeMgrUtcMdays, ibmappnIsAcTimeAgtUtcMins=ibmappnIsAcTimeAgtUtcMins, ibmappnIsAcTimeEntry=ibmappnIsAcTimeEntry, ibmappnIsAcP2SFmdPius=ibmappnIsAcP2SFmdPius, ibmappnIsAcGlobeMgrUtcMins=ibmappnIsAcGlobeMgrUtcMins, ibmappnIsAcTimeMgrUtcHours=ibmappnIsAcTimeMgrUtcHours, ibmappnIsAcSessUpTime=ibmappnIsAcSessUpTime, ibmProd=ibmProd, ibmappnIsAcGlobeMgrUtcHours=ibmappnIsAcGlobeMgrUtcHours, ibmappnIsAcS2PFmdPius=ibmappnIsAcS2PFmdPius, ibmappnIsAcBufName=ibmappnIsAcBufName, ibmappnIsAcBtypeFullReason=ibmappnIsAcBtypeFullReason, ibmappnIsAcTimeMgrUtcSecs=ibmappnIsAcTimeMgrUtcSecs, ibmappnIsAcBtypeFullAction=ibmappnIsAcBtypeFullAction, ibmappnIsAcS2PNonFmdPius=ibmappnIsAcS2PNonFmdPius, ibmappnIsAcTimeMgrUtcMonths=ibmappnIsAcTimeMgrUtcMonths, ibmappnIsAcTimeMgrUtcYdays=ibmappnIsAcTimeMgrUtcYdays, ibmappnIsAcBtypeMedia=ibmappnIsAcBtypeMedia, ibmappnIsAcBtypeErrorWraps=ibmappnIsAcBtypeErrorWraps, ibmappnIsAcBufState=ibmappnIsAcBufState, ibmappnIsAcBufOldestIndex=ibmappnIsAcBufOldestIndex, ibmappnIsAcBufRecFormat=ibmappnIsAcBufRecFormat, ibmappnIsAcSessState=ibmappnIsAcSessState, ibmappnIsAcBufMaxRecords=ibmappnIsAcBufMaxRecords, ibmappnIsAcGlobeStatus=ibmappnIsAcGlobeStatus, ibmappnIsAcSessType=ibmappnIsAcSessType, ibmappnIsAcBtypeDirName=ibmappnIsAcBtypeDirName, ibmappnIsAcRecTime=ibmappnIsAcRecTime, ibmappnIsAcGlobeMgrUtcMdays=ibmappnIsAcGlobeMgrUtcMdays, ibmappnIsAcRouteInfo=ibmappnIsAcRouteInfo, ibmappnIsAcGlobeMgrUtcIsdst=ibmappnIsAcGlobeMgrUtcIsdst, ibmappnIsAcDataTable=ibmappnIsAcDataTable, ibmappnIsAcBtypeRecFormat=ibmappnIsAcBtypeRecFormat, ibmappnIsAcTimeMgrUtcMins=ibmappnIsAcTimeMgrUtcMins, ibmappnIsAcTimeMgrUtcIsdst=ibmappnIsAcTimeMgrUtcIsdst, ibmappnIsAcTimeAgtUtcMonths=ibmappnIsAcTimeAgtUtcMonths, ibmappnIsAcTimeAgtUtcSecs=ibmappnIsAcTimeAgtUtcSecs, ibmappnIsAcBtypeMaxBufs=ibmappnIsAcBtypeMaxBufs, ibmappnIsAcBtypeDeletes=ibmappnIsAcBtypeDeletes, ibmappnIsAcBufTable=ibmappnIsAcBufTable, ibmappnIsAcEndReason=ibmappnIsAcEndReason, ibmappnIsAcTimeAgtUtcMdays=ibmappnIsAcTimeAgtUtcMdays, ibmappnIsAcIndex=ibmappnIsAcIndex, ibmappnSessIntermediate=ibmappnSessIntermediate, ibmappnIsAcBtypeEntry=ibmappnIsAcBtypeEntry, ibmappnIsAcGlobeMgrUtcYears=ibmappnIsAcGlobeMgrUtcYears, ibmappnIsAcBtypePrdRecPerBuf=ibmappnIsAcBtypePrdRecPerBuf, ibmappnIsAcTimeMgrUtcYears=ibmappnIsAcTimeMgrUtcYears, ibmappnIsAcGlobal=ibmappnIsAcGlobal, ibmappnIsAccounting=ibmappnIsAccounting, ibmappnIsAcDataEntry=ibmappnIsAcDataEntry, ibmappnIsAcGlobeMgrUtcYdays=ibmappnIsAcGlobeMgrUtcYdays, ibmappnIsAcTimeIndex=ibmappnIsAcTimeIndex, ibmappnIsAcTimeRecTime=ibmappnIsAcTimeRecTime, ibmappnIsAcBufMedia=ibmappnIsAcBufMedia, ibmappnIsAcTransPriority=ibmappnIsAcTransPriority, ibmappnIsAcP2SNonFmdBytes=ibmappnIsAcP2SNonFmdBytes, ibmappnIsAcBtypeClearStats=ibmappnIsAcBtypeClearStats, ibmappnIsAcBtypePrdMaxBufs=ibmappnIsAcBtypePrdMaxBufs, ibmappnIsAcGlobeMgrName=ibmappnIsAcGlobeMgrName, ibmappnIsAcBtypeCheckPts=ibmappnIsAcBtypeCheckPts, ibmappnIsAcBtypeErrorLosts=ibmappnIsAcBtypeErrorLosts, ibmappnIsAcBtypeRecPerBuf=ibmappnIsAcBtypeRecPerBuf, ibmappnIsAcTimeAgtUtcHours=ibmappnIsAcTimeAgtUtcHours, ibmappnIsAcBtypeCurBufs=ibmappnIsAcBtypeCurBufs, ibmappnIsAcS2PNonFmdBytes=ibmappnIsAcS2PNonFmdBytes, ibmappn=ibmappn, ibmappnIsAcTimeAgtUtcIsdst=ibmappnIsAcTimeAgtUtcIsdst, ibmappnIsAcTimeMgrName=ibmappnIsAcTimeMgrName, ibmappnIsAcP2SNonFmdPius=ibmappnIsAcP2SNonFmdPius, ibmappnIsAcS2PFmdBytes=ibmappnIsAcS2PFmdBytes, ibmappnIsAcPcid=ibmappnIsAcPcid, ibmappnIsAcBufEntry=ibmappnIsAcBufEntry, ibmappnIsAcBtypeFullLosts=ibmappnIsAcBtypeFullLosts, ibmappnSession=ibmappnSession, ibmappnIsAcBtypeResets=ibmappnIsAcBtypeResets, ibm6611=ibm6611, ibmappnIsAcSessStartTime=ibmappnIsAcSessStartTime, ibmappnIsAcSecLuName=ibmappnIsAcSecLuName, ibmappnIsAcTimeAgtUtcWdays=ibmappnIsAcTimeAgtUtcWdays, ibmappnIsAcModeName=ibmappnIsAcModeName, ibmappnIsAcGlobeMgrUtcWdays=ibmappnIsAcGlobeMgrUtcWdays, ibmappnIsAcTimeAgtUtcYdays=ibmappnIsAcTimeAgtUtcYdays, ibmappnIsAcBufNewestIndex=ibmappnIsAcBufNewestIndex, ibmappnIsAcCosName=ibmappnIsAcCosName, ibmappnIsAcGlobeByteThresh=ibmappnIsAcGlobeByteThresh, ibmappnIsAcTimeTable=ibmappnIsAcTimeTable, ibmappnIsAcP2SFmdBytes=ibmappnIsAcP2SFmdBytes, ibmappnIsAcGlobeMgrUtcMonths=ibmappnIsAcGlobeMgrUtcMonths, ibm=ibm, ibmappnIsAcGlobeMgrUtcSecs=ibmappnIsAcGlobeMgrUtcSecs, ibmappnIsAcBtypeFullWraps=ibmappnIsAcBtypeFullWraps, ibmappnIsAcBtypeFullTime=ibmappnIsAcBtypeFullTime, ibmappnIsAcTimeMgrTimeValid=ibmappnIsAcTimeMgrTimeValid, ibmappnIsAcCtrUpTime=ibmappnIsAcCtrUpTime, ibmappnIsAcBtypeTable=ibmappnIsAcBtypeTable, ibmappnIsAcGlobeCheckPt=ibmappnIsAcGlobeCheckPt, ibmappnIsAcTimeAgtUtcYears=ibmappnIsAcTimeAgtUtcYears)
