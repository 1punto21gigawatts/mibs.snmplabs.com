#
# PySNMP MIB module CENTILLION-DOT5-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-DOT5-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
EnableIndicator, extensions = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "EnableIndicator", "extensions")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, iso, Gauge32, ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, IpAddress, Counter64, Counter32, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "iso", "Gauge32", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "IpAddress", "Counter64", "Counter32", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class TrPortConnType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("trPortDTR", 1), ("tr4PortStation", 2), ("trPortRiRoPhantom", 3), ("trPortRiRoNoPhantom", 4), ("trPortHub", 16), ("trPortStation", 17), ("trPortBay-Ro", 18), ("trPortBay-Ri", 19), ("trPortOther-Ro", 20), ("trPortOther-Ri", 21), ("trPortFdtr-hub", 22), ("trPortFdtr-station", 23), ("trPortAutoStationHub", 24))

cnDot5Extensions = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 3))
cnDot5ExtnTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 3, 1), )
if mibBuilder.loadTexts: cnDot5ExtnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnDot5ExtnTable.setDescription('This table contains Token Ring interface parameters and state variables, one entry per 802.5 interface.')
cnDot5ExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 3, 1, 1), ).setIndexNames((0, "CENTILLION-DOT5-EXTENSIONS-MIB", "cnDot5ExtnIfIndex"))
if mibBuilder.loadTexts: cnDot5ExtnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnDot5ExtnEntry.setDescription('A list of Token Ring status and parameter values for an 802.5 interface.')
cnDot5ExtnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnDot5ExtnIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnDot5ExtnIfIndex.setDescription('The value of this object identifies the 802.5 interface for which this entry contains management information. The value of this object for a particular interface has the same value as the ifIndex object, defined in [4,6], for the same interface.')
cnDot5ExtnPortConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 3, 1, 1, 2), TrPortConnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnDot5ExtnPortConnType.setStatus('mandatory')
if mibBuilder.loadTexts: cnDot5ExtnPortConnType.setDescription('The type of connection used on this port. Setting a value to this object requires the port to be reset and re-opened before taking effect. Allowable connections for TR4 are: Station - (default for TR4) the port is configured as a standard ring station, Ring-In/Ring-Out - the port is connected to the Ring-In or Ring-Out port of a MAU with an appropriate cable. DTR - the port has a direct connection to a ring station. A different set of connection type for TR8 are : Hub, Station, Bay/SNPX RO, Bay/SNPX RI, Other RO, Other RI, FDTR Hub, FDTR Station')
cnDot5ExtnPortSpeedSense = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 3, 1, 1, 3), EnableIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnDot5ExtnPortSpeedSense.setStatus('mandatory')
if mibBuilder.loadTexts: cnDot5ExtnPortSpeedSense.setDescription('Indicates whether speed sensing is enabled (default), or disabled on the port. This is used in conjuection with the RingSpeed to either match or force to the configured speed.')
cnDot5ExtnAdminRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("autoDetect", 1), ("forceFourMegabit", 2), ("forceSixteenMegabit", 3), ("matchFourMegabit", 4), ("matchSixteenMegabit", 5), ("force32Megabit", 6), ("autoDetect16or32", 7), ("autoDetect4or16or32", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnDot5ExtnAdminRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cnDot5ExtnAdminRingSpeed.setDescription("The configured ring speed of the port. The speed will take effect on the next opening of the ring. The speeds of 'force' indicates that the port should enter the ring regardless of the current ring speed. The 'match' speeds indcate the the port should insert at the configured speed, only if the current ring speed matches the port speed. The operational ring speed may be obtained by the usual dot5RingSpeed object. The 'auto detect' indicates that the ring detect and insert at the current ring speed.")
cnS5TrExtnTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 3, 2), )
if mibBuilder.loadTexts: cnS5TrExtnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnS5TrExtnTable.setDescription('This table contains additional Token Ring interface parameters and state variables, one entry per 802.5 interface for 5000BH token ring cards.')
cnS5TrExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 3, 2, 1), ).setIndexNames((0, "CENTILLION-DOT5-EXTENSIONS-MIB", "cnS5TrExtnIfIndex"))
if mibBuilder.loadTexts: cnS5TrExtnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnS5TrExtnEntry.setDescription('A list of Token Ring additional status and parameter values for an 802.5 interface for 5000BH token ring cards.')
cnS5TrExtnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnS5TrExtnIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnS5TrExtnIfIndex.setDescription('The value of this object identifies the 802.5 interface for which this entry contains management information. The value of this object for a particular interface has the same value as the ifIndex object, defined in [4,6], for the same interface.')
cnS5TrExtnFrontPortConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnS5TrExtnFrontPortConnect.setStatus('mandatory')
if mibBuilder.loadTexts: cnS5TrExtnFrontPortConnect.setDescription('If enabled, front port insertion is allowed. This setting has no meaning other than in tr8PortHub mode.')
cnS5TrExtnOperBkplaneAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notCapable", 2), ("capableAndAttached", 3), ("capableAndDetached", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnS5TrExtnOperBkplaneAtt.setStatus('mandatory')
if mibBuilder.loadTexts: cnS5TrExtnOperBkplaneAtt.setDescription('This object returns the operating backplane attachment state of a token ring port. For the ports that do not have backplane attachment capability, notCapable(2) is returned.')
mibBuilder.exportSymbols("CENTILLION-DOT5-EXTENSIONS-MIB", cnS5TrExtnOperBkplaneAtt=cnS5TrExtnOperBkplaneAtt, cnDot5ExtnEntry=cnDot5ExtnEntry, cnDot5Extensions=cnDot5Extensions, TrPortConnType=TrPortConnType, cnDot5ExtnPortConnType=cnDot5ExtnPortConnType, cnS5TrExtnIfIndex=cnS5TrExtnIfIndex, cnS5TrExtnTable=cnS5TrExtnTable, cnDot5ExtnAdminRingSpeed=cnDot5ExtnAdminRingSpeed, cnDot5ExtnTable=cnDot5ExtnTable, cnS5TrExtnEntry=cnS5TrExtnEntry, cnDot5ExtnPortSpeedSense=cnDot5ExtnPortSpeedSense, cnDot5ExtnIfIndex=cnDot5ExtnIfIndex, cnS5TrExtnFrontPortConnect=cnS5TrExtnFrontPortConnect)
