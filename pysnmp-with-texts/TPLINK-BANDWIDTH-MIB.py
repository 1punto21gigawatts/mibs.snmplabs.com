#
# PySNMP MIB module TPLINK-BANDWIDTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-BANDWIDTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:24:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Bits, Gauge32, Unsigned32, ObjectIdentity, NotificationType, MibIdentifier, Counter32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Bits", "Gauge32", "Unsigned32", "ObjectIdentity", "NotificationType", "MibIdentifier", "Counter32", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplinkBandWidthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 23))
tplinkBandWidthMIB.setRevisions(('2012-12-13 09:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkBandWidthMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkBandWidthMIB.setLastUpdated('201212130930Z')
if mibBuilder.loadTexts: tplinkBandWidthMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkBandWidthMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkBandWidthMIB.setDescription('Private MIB for system time configuration.')
tplinkBandWidthMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1))
tplinkBandWidthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 23, 2))
tpRateLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 1))
tpStormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2))
tpRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 1, 1), )
if mibBuilder.loadTexts: tpRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: tpRateLimitTable.setDescription('A list of rate limit entries. Here you can configure the traffic rate on each port.')
tpRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: tpRateLimitEntry.setDescription('An entry contains of the information of rate limit.')
tpRateLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRateLimitPort.setStatus('current')
if mibBuilder.loadTexts: tpRateLimitPort.setDescription('The port number of the Switch.')
tpRateLimitIngressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpRateLimitIngressRate.setStatus('current')
if mibBuilder.loadTexts: tpRateLimitIngressRate.setDescription('Set the bandwidth for receiving packets on the port.')
tpRateLimitEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpRateLimitEgressRate.setStatus('current')
if mibBuilder.loadTexts: tpRateLimitEgressRate.setDescription('Set the bandwidth for sending packets on the port.')
tpRateLimitPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRateLimitPortLag.setStatus('current')
if mibBuilder.loadTexts: tpRateLimitPortLag.setDescription('The LAG number which the port belongs to.')
tpStormControlEnPPSTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 1), )
if mibBuilder.loadTexts: tpStormControlEnPPSTable.setStatus('current')
if mibBuilder.loadTexts: tpStormControlEnPPSTable.setDescription('A list of storm control entries. Here you can configure the port PPS mode with PPS enabled or disabled. Configure this table before the storm control mode and rate configuring.')
tpStormControlModeTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 2), )
if mibBuilder.loadTexts: tpStormControlModeTable.setStatus('current')
if mibBuilder.loadTexts: tpStormControlModeTable.setDescription('A list of storm control entries. Here you can configure the port storm control mode with kbps, ratio or pps. Configure this table before the storm control rate configuring.')
tpStormControlTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 3), )
if mibBuilder.loadTexts: tpStormControlTable.setStatus('current')
if mibBuilder.loadTexts: tpStormControlTable.setDescription('A list of storm control entries. Here you can configure the bandwidth for forwarding packets.')
tpStormControlEnPPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpStormControlEnPPSEntry.setStatus('current')
if mibBuilder.loadTexts: tpStormControlEnPPSEntry.setDescription('An entry contains of the information of storm control PPS mode.')
tpStormControlEnPPSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStormControlEnPPSPort.setStatus('current')
if mibBuilder.loadTexts: tpStormControlEnPPSPort.setDescription('The port number of the Switch.')
tpStormControlEnablePPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStormControlEnablePPS.setStatus('current')
if mibBuilder.loadTexts: tpStormControlEnablePPS.setDescription('The storm control rate mode configuration: Disable: kbps & ratio mode is avalible with this status. Enable: enable PPS mode, only pps mode is avalible.')
tpStormControlEnPPSPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStormControlEnPPSPortLag.setStatus('current')
if mibBuilder.loadTexts: tpStormControlEnPPSPortLag.setDescription('The LAG number which the port belongs to. ')
tpStormControlModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpStormControlModeEntry.setStatus('current')
if mibBuilder.loadTexts: tpStormControlModeEntry.setDescription('An entry contains of the information of storm control rate mode.')
tpStormControlModePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStormControlModePort.setStatus('current')
if mibBuilder.loadTexts: tpStormControlModePort.setDescription('The port number of the Switch.')
tpStormControlBroadCastRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("kbps", 0), ("ratio", 1), ("pps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStormControlBroadCastRateMode.setStatus('current')
if mibBuilder.loadTexts: tpStormControlBroadCastRateMode.setDescription("Broadcast rate mode configuration. Configure kbps & ratio with the 'tpStormControlEnablePPS' setting to disable. Configure pps with the 'tpStormControlEnablePPS' setting to enable.")
tpStormControlMultiCastRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("kbps", 0), ("ratio", 1), ("pps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStormControlMultiCastRateMode.setStatus('current')
if mibBuilder.loadTexts: tpStormControlMultiCastRateMode.setDescription("Multicast rate mode configuration. Configure kbps & ratio with the 'tpStormControlEnablePPS' setting to disable. Configure pps with the 'tpStormControlEnablePPS' setting to enable.")
tpStormControlULRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("kbps", 0), ("ratio", 1), ("pps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStormControlULRateMode.setStatus('current')
if mibBuilder.loadTexts: tpStormControlULRateMode.setDescription("UL-Frame rate mode configuration. Configure kbps & ratio with the 'tpStormControlEnablePPS' setting to disable. Configure pps with the 'tpStormControlEnablePPS' setting to enable.")
tpStormControlModePortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStormControlModePortLag.setStatus('current')
if mibBuilder.loadTexts: tpStormControlModePortLag.setDescription('The LAG number which the port belongs to. ')
tpStormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpStormControlEntry.setStatus('current')
if mibBuilder.loadTexts: tpStormControlEntry.setDescription('An entry contains of the information of storm control.')
tpStormControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStormControlPort.setStatus('current')
if mibBuilder.loadTexts: tpStormControlPort.setDescription('The port number of the Switch.')
tpStormControlBroadCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1488000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStormControlBroadCastRate.setStatus('current')
if mibBuilder.loadTexts: tpStormControlBroadCastRate.setDescription('Set the bandwidth for receiving broadcast packets on the port. The packet traffic exceeding the bandwidth will be discarded. kbps(0-1000000) ratio(0-100) pps(0-1488000) Set it 0 to disable the storm control function for the port.')
tpStormControlMultiCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1488000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStormControlMultiCastRate.setStatus('current')
if mibBuilder.loadTexts: tpStormControlMultiCastRate.setDescription('Set the bandwidth for receiving multicast packets on the port. The packet traffic exceeding the bandwidth will be discarded. kbps(0-1000000) ratio(0-100) pps(0-1488000) Set it 0 to disable the storm control function for the port.')
tpStormControlULRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1488000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpStormControlULRate.setStatus('current')
if mibBuilder.loadTexts: tpStormControlULRate.setDescription('Set the bandwidth for receiving UL-Frame on the port. The packet traffic exceeding the bandwidth will be discarded. kbps(0-1000000) ratio(0-100) pps(0-1488000) Set it 0 to disable the storm control function for the port. ')
tpStormControlPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 23, 1, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpStormControlPortLag.setStatus('current')
if mibBuilder.loadTexts: tpStormControlPortLag.setDescription('The LAG number which the port belongs to. ')
tpBroadcastRateExceed = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 23, 2, 1)).setObjects(("TPLINK-BANDWIDTH-MIB", "tpStormControlPort"), ("TPLINK-BANDWIDTH-MIB", "tpStormControlBroadCastRate"))
if mibBuilder.loadTexts: tpBroadcastRateExceed.setStatus('current')
if mibBuilder.loadTexts: tpBroadcastRateExceed.setDescription('An broadcastRateExceed notification is sent when the value of broadcast stormControl rate set of port is exceeded. Note that if you need this notification, the value of broadcast stormControl rate of port must be set. The transmission of stormControl notifications are throttled by the agent three sesonds every time.')
tpMulticastRateExceed = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 23, 2, 2)).setObjects(("TPLINK-BANDWIDTH-MIB", "tpStormControlPort"), ("TPLINK-BANDWIDTH-MIB", "tpStormControlMultiCastRate"))
if mibBuilder.loadTexts: tpMulticastRateExceed.setStatus('current')
if mibBuilder.loadTexts: tpMulticastRateExceed.setDescription('An stormControl notification is sent when the value of multicast stormControl rate set of port is exceeded. Note that if you need this notification, the value of multicast stormControl rate of port must be set. The transmission of stormControl notifications are throttled by the agent three sesonds every time.')
tpIngressRateExceed = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 23, 2, 3)).setObjects(("TPLINK-BANDWIDTH-MIB", "tpRateLimitPort"), ("TPLINK-BANDWIDTH-MIB", "tpRateLimitIngressRate"))
if mibBuilder.loadTexts: tpIngressRateExceed.setStatus('current')
if mibBuilder.loadTexts: tpIngressRateExceed.setDescription('An ingressRateExceed notification is sent when the value of ingress rate set of port is exceeded. Note that if you need this notification, the value of ingress rate of port must be set.The transmission of ingressRateExceed notifications are throttled by the agent three sesonds every time.')
tpEgressRateExceed = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 23, 2, 4)).setObjects(("TPLINK-BANDWIDTH-MIB", "tpRateLimitPort"), ("TPLINK-BANDWIDTH-MIB", "tpRateLimitEgressRate"))
if mibBuilder.loadTexts: tpEgressRateExceed.setStatus('current')
if mibBuilder.loadTexts: tpEgressRateExceed.setDescription('An egressRateExceed notification is sent when the value of egress rate set of port is exceeded. Note that if you need this notification, the value of egress rate of port must be set.The transmission of egressRateExceed notifications are throttled by the agent three sesonds every time.')
mibBuilder.exportSymbols("TPLINK-BANDWIDTH-MIB", tpRateLimitTable=tpRateLimitTable, tpStormControlModePort=tpStormControlModePort, tpStormControlBroadCastRate=tpStormControlBroadCastRate, tpStormControlULRateMode=tpStormControlULRateMode, tpIngressRateExceed=tpIngressRateExceed, tpStormControlBroadCastRateMode=tpStormControlBroadCastRateMode, tpRateLimitPortLag=tpRateLimitPortLag, PYSNMP_MODULE_ID=tplinkBandWidthMIB, tpStormControlModeEntry=tpStormControlModeEntry, tpStormControlULRate=tpStormControlULRate, tpRateLimit=tpRateLimit, tpMulticastRateExceed=tpMulticastRateExceed, tpStormControlEnPPSTable=tpStormControlEnPPSTable, tpStormControlPortLag=tpStormControlPortLag, tplinkBandWidthNotifications=tplinkBandWidthNotifications, tpStormControlModeTable=tpStormControlModeTable, tpEgressRateExceed=tpEgressRateExceed, tpStormControl=tpStormControl, tpRateLimitEgressRate=tpRateLimitEgressRate, tplinkBandWidthMIB=tplinkBandWidthMIB, tpStormControlModePortLag=tpStormControlModePortLag, tpStormControlEntry=tpStormControlEntry, tpStormControlPort=tpStormControlPort, tpRateLimitPort=tpRateLimitPort, tpStormControlEnablePPS=tpStormControlEnablePPS, tpStormControlMultiCastRateMode=tpStormControlMultiCastRateMode, tpBroadcastRateExceed=tpBroadcastRateExceed, tpStormControlEnPPSPortLag=tpStormControlEnPPSPortLag, tpStormControlEnPPSEntry=tpStormControlEnPPSEntry, tpRateLimitEntry=tpRateLimitEntry, tpStormControlEnPPSPort=tpStormControlEnPPSPort, tpRateLimitIngressRate=tpRateLimitIngressRate, tpStormControlMultiCastRate=tpStormControlMultiCastRate, tpStormControlTable=tpStormControlTable, tplinkBandWidthMIBObjects=tplinkBandWidthMIBObjects)
