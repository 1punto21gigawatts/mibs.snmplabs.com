#
# PySNMP MIB module AVAYA-SURV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVAYA-SURV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:32:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
avGatewayMibs, = mibBuilder.importSymbols("AVAYAGEN-MIB", "avGatewayMibs")
InetAddressIPv6, InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressType", "InetPortNumber", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Counter32, ModuleIdentity, Gauge32, MibIdentifier, TimeTicks, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, enterprises, IpAddress, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "ModuleIdentity", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "enterprises", "IpAddress", "ObjectIdentity", "Bits")
TimeInterval, DateAndTime, RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "DateAndTime", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
avSurvMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4))
if mibBuilder.loadTexts: avSurvMib.setLastUpdated('200810221615Z')
if mibBuilder.loadTexts: avSurvMib.setOrganization('Avaya')
if mibBuilder.loadTexts: avSurvMib.setContactInfo(' Avaya Customer Services Postal: Avaya, Inc. 211 Mt Airy Rd. Basking Ridge, NJ 07920 USA Tel: +1 908 953 6000 E-mail: executiveoffic@avaya.com WWW: http://www.avaya.com ')
if mibBuilder.loadTexts: avSurvMib.setDescription(" R4.1 Standard Local Survivability (SLS) MIB This module defines an interface to Survivability mode of operation.This allows a gateway to have a basic set of call features if it loses communication with a main call controller (CC). When the gateway is in survivabilty mode of operation, it will continue to register to H.248 controller IP addresses in the MGC list. If a re-registration to the H.248 controller can be made, the survivability mode will be disabled and any new calls will be managed by the MGC. Active calls between two local IP phones will be maintained because they are established as shuffled calls. Copyright notice: This AVAYA SNMP Management Information Base Specification (Specification)embodies AVAYA confidential and Proprietary intellectual property. AVAYA retains all Title and ownership in the Specification, including any revisions. It is AVAYA's intent to encourage the widespread use of this Specification in connection with the management of AVAYA products. AVAYA grants vendors, end-users, and other interested parties non-exclusive license to use this Specification in connection with the management of AVAYA products. This Specification is supplied 'as is', and AVAYA makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification. avSurvMib | + .0 avSurvNotification | + .1 avSurvConfig | + .2 avSurvStationTable | (index: avSurvStationIndex) | + .3 avSurvTrunkGroupTable | (index: avSurvTrunkGroupNum) | + .4 avSurvTrunkTable | (indexes: avSurvTrunkRefNumber, | avSurvTrunkIndex) | + .5 avSurvArsTable | (index: avSurvDialIndex) | + .6 avSurvFacTable | (index: avSurvFacIndex) | + .7 avSurvIpVoiceCodecSetTable | (indexes: avSurvIpVoiceCodecSetNum,) | avSurvIpVoiceCodecSetIndex) | + .8 avSurvIpCodecSetConfig | | + .9 avSurvSlotConfigTable | (index: avSurvSlotConfigIndex) | + .10 avSurvDs1Table | (index: avSurvDs1Index) | + .11 avSurvSigGroupTable | (index: avSurvSigGroupIndex) | + .12 avSurvBriTable | (index: avSurvBriIndex) | + .13 avSurvIncomingRoutingTable | (indexes: avSurvIncomingRoutingGroupRefNumber, | avSurvIncomingRoutingIndex) | + .14 avSurvNfasTable | (indexes: avSurvNfasSigGroupRefNumber, | avSurvNfasIndex) | + .15 Add G430 values for avSurvMaxIPReg and avSurvBriIndex. | Change avSurvBriIndex to be 1..64 instead of 1..24. ")
avSurvNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 0))
avSurvEnabled = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 0, 1)).setObjects(("AVAYA-SURV-MIB", "avSurvNotificationSeverity"))
if mibBuilder.loadTexts: avSurvEnabled.setStatus('current')
if mibBuilder.loadTexts: avSurvEnabled.setDescription('This trap indicates that survivability.o has been administratively enabled.')
avSurvDisabled = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 0, 2)).setObjects(("AVAYA-SURV-MIB", "avSurvNotificationSeverity"))
if mibBuilder.loadTexts: avSurvDisabled.setStatus('current')
if mibBuilder.loadTexts: avSurvDisabled.setDescription('This trap indicates that survivability.o has been administratively disabled.')
avSurvActive = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 0, 3)).setObjects(("AVAYA-SURV-MIB", "avSurvNotificationSeverity"))
if mibBuilder.loadTexts: avSurvActive.setStatus('current')
if mibBuilder.loadTexts: avSurvActive.setDescription('This trap indicates that survivability.o is now the call controller of record and is processing calls.')
avSurvInactive = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 0, 4)).setObjects(("AVAYA-SURV-MIB", "avSurvNotificationSeverity"))
if mibBuilder.loadTexts: avSurvInactive.setStatus('current')
if mibBuilder.loadTexts: avSurvInactive.setDescription('This trap indicates that survivability.o has stopped processing calls. A more powerful controller may have taken over, either an LSP or a primary call controller.')
avSurvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1))
avSurvAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSurvAdminState.setStatus('current')
if mibBuilder.loadTexts: avSurvAdminState.setDescription('Allows craft or PIM to enable the SLS call engine or read its current state')
avSurvStatus = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avSurvStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvStatus.setDescription('Current operational status of SLS call engine')
avSurvMaxIPReg = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSurvMaxIPReg.setStatus('current')
if mibBuilder.loadTexts: avSurvMaxIPReg.setDescription('Maximum IP phone registrations allowed. Gateway SLS firmware will restrict per model. G250 R3.0 = 10; G250 R3.1 and R4.0 = 12; G350 R4.0 = 72; IG550 [Juniper gateways(4350, 6350) R4.0 = 100; IG550 [Juniper gateways(2320, 2350) R4.1 = 100; G450 R4.1 =240 G430 = 150')
avSurvDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mmDdYy", 1), ("ddMmYy", 2), ("yyMmDd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSurvDateFormat.setStatus('current')
if mibBuilder.loadTexts: avSurvDateFormat.setDescription('Date Format. This is used for calendar/clock display on DCP & IP phones')
avSurvEndDLTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 5), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSurvEndDLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: avSurvEndDLTimeStamp.setDescription('Date/Timestamp of last download from PIM. This is written by PIM after it completes initialization of all configuration parameters')
avSurvNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avSurvNotificationSeverity.setStatus('current')
if mibBuilder.loadTexts: avSurvNotificationSeverity.setDescription('Severity of last sent trap')
avSurvConfigCommand = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSurvConfigCommand.setStatus('current')
if mibBuilder.loadTexts: avSurvConfigCommand.setDescription('Clear Running Configuration Command, write only')
avSurvGatewayNumber = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avSurvGatewayNumber.setStatus('current')
if mibBuilder.loadTexts: avSurvGatewayNumber.setDescription('Gateway Identification Number (see CM Media Gateway form)')
avSurvPimLockout = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avSurvPimLockout.setStatus('current')
if mibBuilder.loadTexts: avSurvPimLockout.setDescription('Allows Craft to prevent PIM updates from being downloaded during local diagnostic session')
avSurvAttendantAccessCode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvAttendantAccessCode.setStatus('current')
if mibBuilder.loadTexts: avSurvAttendantAccessCode.setDescription('Allows a station in the branch office to be able to directly dial an attendant position')
avSurvAttendantExtension = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvAttendantExtension.setStatus('current')
if mibBuilder.loadTexts: avSurvAttendantExtension.setDescription('Specifies the station which shall serve as the branch office attendant position. Used as destination to direct un-routable incoming trunk calls.')
avSurvStationTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2), )
if mibBuilder.loadTexts: avSurvStationTable.setStatus('current')
if mibBuilder.loadTexts: avSurvStationTable.setDescription('Station Table')
avSurvStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvStationIndex"))
if mibBuilder.loadTexts: avSurvStationEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvStationEntry.setDescription('Each entry contains index, extension number, type, interface bit map, COR, trunk-destination status, expansion-module, slot/port, switchhook-flash, IP address of registered station, and station name')
avSurvStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 340))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvStationIndex.setDescription('Station Table Index')
avSurvStationExt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationExt.setStatus('current')
if mibBuilder.loadTexts: avSurvStationExt.setDescription('Station Extension number')
avSurvStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))).clone(namedValues=NamedValues(("ip4601", 1), ("ip4602", 2), ("ip4602Sw", 3), ("ip4606", 4), ("ip4610Sw", 5), ("ip4612", 6), ("ip4620", 7), ("ip4620Sw", 8), ("ip4624", 9), ("analog2500", 10), ("ip4621", 11), ("ip4622", 12), ("ip4625", 13), ("dcp2402", 20), ("dcp2410", 21), ("dcp2420", 22), ("dcp6402", 30), ("dcp6402D", 31), ("dcp6408", 32), ("dcp6408plus", 33), ("dcp6408D", 34), ("dcp6408Dplus", 35), ("dcp6416Dplus", 36), ("dcp6424Dplus", 37), ("dcp8403B", 40), ("dcp8405B", 41), ("dcp8405Bplus", 42), ("dcp8405D", 43), ("dcp8405Dplus", 44), ("dcp8410B", 45), ("dcp8410D", 46), ("dcp8411B", 47), ("dcp8411D", 48), ("dcp8434D", 49)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationType.setStatus('current')
if mibBuilder.loadTexts: avSurvStationType.setDescription('Station model type')
avSurvStationInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvStationInterfaceIndex.setDescription('Interface Index bit map. Bit assignment as follows: bits 0-7 = port, bits 8-11 = slot, bits 12-23 = unused, bits 24-31 = module type. Note: This element has been deprecated in SLS R4.1. For legacy stations, use avSurvStationSlotPort to communicate slot-port info.')
avSurvStationCOR = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("emergency", 1), ("internal", 2), ("local", 3), ("toll", 4), ("unrestricted", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationCOR.setStatus('current')
if mibBuilder.loadTexts: avSurvStationCOR.setDescription('Station Class of Outgoing Restriction (COR) level')
avSurvStationTrunkDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationTrunkDest.setStatus('current')
if mibBuilder.loadTexts: avSurvStationTrunkDest.setDescription('Station trunk destination. Can be used to answer incomming trunk calls')
avSurvStationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvStationRowStatus.setDescription('Create/Delete a row entry')
avSurvStationExpansionModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationExpansionModule.setStatus('current')
if mibBuilder.loadTexts: avSurvStationExpansionModule.setDescription('Station set has an expansion module in place. This is only allowed for the digital phones (IP and DCP. IP phone models 4620, 4621, 4625 may use EU24 and EU24BL. DCP phone models 2420 may use EU24 and EU24BL. DCP phone models 6416 and 6424 may use modesl 801A and XM24.')
avSurvStationSlotPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationSlotPort.setStatus('current')
if mibBuilder.loadTexts: avSurvStationSlotPort.setDescription('CM slot/port in the Vyxx format')
avSurvStationSwitchHookFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationSwitchHookFlash.setStatus('current')
if mibBuilder.loadTexts: avSurvStationSwitchHookFlash.setDescription('Switchhook flash is allowed only for analog phones')
avSurvStationIpAddressRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avSurvStationIpAddressRegistered.setStatus('current')
if mibBuilder.loadTexts: avSurvStationIpAddressRegistered.setDescription('IP address of registered IP station. Note only for IP stations')
avSurvStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvStationName.setStatus('current')
if mibBuilder.loadTexts: avSurvStationName.setDescription("Station or user's Name")
avSurvTrunkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3), )
if mibBuilder.loadTexts: avSurvTrunkGroupTable.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupTable.setDescription('Trunk Group Table')
avSurvTrunkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvTrunkGroupNum"))
if mibBuilder.loadTexts: avSurvTrunkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupEntry.setDescription('Each entry contains index(ACM Trunk Group Number), trunk-type, Trunk Access Code, and dial-mode')
avSurvTrunkGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupNum.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupNum.setDescription('Trunk Group Number')
avSurvTrunkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("analogLoopStart", 1), ("analogDid", 2), ("analogGroundStart", 3), ("bri", 4), ("t1InBandSignaling", 5), ("t1IsdnSignaling", 6), ("e1InBandSignaling", 7), ("e1IsdnSignaling", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupType.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupType.setDescription('Trunk Group Type')
avSurvTrunkGroupTAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupTAC.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupTAC.setDescription('Trunk Group Trunk Access Code (TAC)')
avSurvTrunkGroupDial = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rotary", 1), ("dtmf", 2), ("mf", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupDial.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupDial.setDescription('Trunk Group Outward Dial. Note MF not supported in SLS')
avSurvTrunkGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupRowStatus.setDescription('Create/Delete a row entry')
avSurvTrunkGroupDidDigitTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 11, 12, 13, 14, 99))).clone(namedValues=NamedValues(("absorb1", 1), ("absorb2", 2), ("absorb3", 3), ("absorb4", 4), ("absorb5", 5), ("insert1", 11), ("insert2", 12), ("insert3", 13), ("insert4", 14), ("blank", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupDidDigitTreatment.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupDidDigitTreatment.setDescription('Trunk Group DID digit treatment option. This applies for analog DID trunks and non-ISDN digital tie trunks. Note: blank means take no action.')
avSurvTrunkGroupDidDigitsInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupDidDigitsInsert.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupDidDigitsInsert.setDescription('Digit string to be inserted for DID treatment This applies for analog DID trunks and non-ISDN digital tie trunks.')
avSurvTrunkGroupDidSupervision = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediate", 1), ("wink", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupDidSupervision.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupDidSupervision.setDescription('Type of incoming supervision used on DID trunk. This applies only for analog DID trunks.')
avSurvTrunkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupName.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupName.setDescription("Customer's name for trunk group")
avSurvTrunkGroupCodesetDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 7))).clone(namedValues=NamedValues(("codeset0", 0), ("codeset6", 6), ("codeset7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupCodesetDisplay.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupCodesetDisplay.setDescription("Which Q.931 codesets are allowed to send Display IE's to the user phones This applies only to ISDN BRI/PRI trunks.")
avSurvTrunkGroupCodesetNational = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("codeset6", 6), ("codeset7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupCodesetNational.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupCodesetNational.setDescription("Which codesets are allowed to send National supported IE's. This applies only to ISDN BRI/PRI trunks.")
avSurvTrunkGroupChannelPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exclusive", 1), ("preferred", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupChannelPreference.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupChannelPreference.setDescription('Used for encoding Channel-ID IE. This applies only to ISDN BRI/PRI trunks.')
avSurvTrunkGroupDigitHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("enblocEnbloc", 0), ("enblocOverlap", 1), ("overlapEnbloc", 2), ("overlapOverlap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupDigitHandling.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupDigitHandling.setDescription('Defines overlap receiving and transmitting rules. This applies only to ISDN BRI/PRI trunks.')
avSurvTrunkGroupJapanDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupJapanDisconnect.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupJapanDisconnect.setDescription('Send a Q.931 CONNECT msg right before sending DISCONNECT msg. This applies only to ISDN BRI/PRI trunks in Japan.')
avSurvTrunkGroupSendName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("restricted", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupSendName.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupSendName.setDescription("Specifies whether Calling, Connected, Called party's name is to be shared with network. This applies only to ISDN BRI/PRI trunks. Default is no.")
avSurvTrunkGroupSendCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("restricted", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupSendCallingNumber.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupSendCallingNumber.setDescription('Specifies how to fill the Calling-Party and Called-Party IE fields. This applies only to ISDN BRI/PRI trunks. Default is no.')
avSurvTrunkGroupNumberingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("public", 2), ("private", 3), ("unknownPrivate", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupNumberingFormat.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupNumberingFormat.setDescription('Specifies how to fill the Calling-Party and Called-Party IE fields. This applies only to ISDN BRI/PRI trunks. SLS only supports unknown(1) and public(2). Default is unknown.')
avSurvTrunkGroupIncomingDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupIncomingDestination.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupIncomingDestination.setDescription(' Analog DID and non-ISDN Digital:Sets a destination station for routing incoming trunk group calls')
avSurvTrunkGroupIncomingDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupIncomingDialTone.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupIncomingDialTone.setDescription('Analog DID and non-ISDN Digital:Determines whether SLS is to supply dial tone in response to far-end seizure')
avSurvTrunkGroupR2MFCSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("set1", 1), ("set2", 2), ("set3", 3), ("set4", 4), ("set5", 5), ("set6", 6), ("set7", 7), ("set8", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupR2MFCSignaling.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupR2MFCSignaling.setDescription('Determines MFC signaling set to be used. This only applies to R2MFC trunks. This feature not supported in SLS for R4.0')
avSurvTrunkGroupTrunkHunt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascend", 1), ("cyclical", 2), ("descend", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupTrunkHunt.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupTrunkHunt.setDescription('Determines the method in which the SLS call engine selects from the trunk group pool of available trunks. This only applies to digital trunks.')
avSurvTrunkGroupDs1Supervision = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("loopStart", 3), ("groundStart", 4), ("winkWink", 5), ("winkImmediate", 6), ("winkAuto", 7), ("immediateImmediate", 8), ("autoAuto", 9), ("autoWink", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupDs1Supervision.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupDs1Supervision.setDescription('Applies to non-ISDN DS1 trunks: Specifies the type of incomming/outgoing supervision that is used on these trunks.')
avSurvTrunkGroupCbc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupCbc.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupCbc.setDescription('Applies to ISDN DS1 trunks: Specifies whether the trunk is to operate in call-by-call basis. If yes, then send the NSF IE.')
avSurvTrunkGroupCbcServiceFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(225, 227, 197, 198, 231, 246))).clone(namedValues=NamedValues(("sdn", 225), ("megacom", 227), ("operator", 197), ("suboperator", 198), ("lds", 231), ("scocs", 246)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupCbcServiceFeature.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupCbcServiceFeature.setDescription('Applies to ISDN DS1 trunks: Specifies the type of service or feature specifed in the NSF IE for outbound trunk calls. Only valid if CBC=yes.')
avSurvTrunkGroupCbcParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupCbcParameter.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupCbcParameter.setDescription('Applies to ISDN DS1 trunks: Specifies the class of service being offered as part of Selective Class of Call Selection (scocs)service mode. Only valid if service mode is scocs.')
avSurvTrunkGroupBusyDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupBusyDisconnect.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupBusyDisconnect.setDescription('Applies to Analog Loop Start Trunks: Specifies whether the presence of busy tone signal will cause the trunk call to be disconnected. Default = no.')
avSurvTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4), )
if mibBuilder.loadTexts: avSurvTrunkTable.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkTable.setDescription('Trunk table')
avSurvTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvTrunkGroupRefNumber"), (0, "AVAYA-SURV-MIB", "avSurvTrunkIndex"))
if mibBuilder.loadTexts: avSurvTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkEntry.setDescription('Each entry contains dual index(group-reference-number and table index), interface bit map, slot-port, and sig-group reference-number')
avSurvTrunkGroupRefNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkGroupRefNumber.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkGroupRefNumber.setDescription('Trunk Pool Group Reference Number - Association of trunk pool with trunk group')
avSurvTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkIndex.setDescription('trunk table index')
avSurvTrunkInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkInterfaceIndex.setDescription('Interface Index bit map. Bit assignment as follows: bits 0-7 = port, bits 8-11 = slot, bits 12-23 = unused, bits 24-31 = module type Note: This element has been deprecated in SLS R4.1. For legacy trunks, use avSurvTrunkSlotPort to communicate slot-port info.')
avSurvTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkRowStatus.setDescription('Create/Delete a row entry')
avSurvTrunkSlotPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkSlotPort.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkSlotPort.setDescription('ACM slot/port in the Vyxx format')
avSurvTrunkSigGroupRefNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvTrunkSigGroupRefNumber.setStatus('current')
if mibBuilder.loadTexts: avSurvTrunkSigGroupRefNumber.setDescription('Signaling Group Number that is the manager of this ISDN trunk member')
avSurvArsTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5), )
if mibBuilder.loadTexts: avSurvArsTable.setStatus('current')
if mibBuilder.loadTexts: avSurvArsTable.setDescription('Automatic Route Selection (ARS) Table')
avSurvArsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvDialIndex"))
if mibBuilder.loadTexts: avSurvArsEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvArsEntry.setDescription('Each entry contains index, dial-string-pattern, dial-plan-type, max-length, group-reference-number, dial-action, delete-digits, insert-digits, and min-length')
avSurvDialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvDialIndex.setDescription('Call Pattern index')
avSurvDialString = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialString.setStatus('current')
if mibBuilder.loadTexts: avSurvDialString.setDescription('Dialed string entry that is used to match a pattern within the user-dialed number')
avSurvDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("emergency", 1), ("foreignNumberingPlanArea", 2), ("homeNumberingPlanArea", 3), ("international", 4), ("internationalOperator", 5), ("local", 6), ("national", 7), ("operator", 8), ("service", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialType.setStatus('current')
if mibBuilder.loadTexts: avSurvDialType.setDescription('Call Type')
avSurvDialMaximumLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialMaximumLength.setStatus('current')
if mibBuilder.loadTexts: avSurvDialMaximumLength.setDescription('Maximum length of the user-dialed number that the survivability call-engine collects to match to the dialed-string. By default, the minimum length is defined to be equal to the length of the dialed string')
avSurvDialGroupRefNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialGroupRefNumber.setStatus('current')
if mibBuilder.loadTexts: avSurvDialGroupRefNumber.setDescription('Call group reference number')
avSurvDialAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyCall", 1), ("allowCall", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialAction.setStatus('current')
if mibBuilder.loadTexts: avSurvDialAction.setDescription('Call dial action')
avSurvDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvDialRowStatus.setDescription('Create/Delete a row entry')
avSurvDialDeleteDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialDeleteDigits.setStatus('current')
if mibBuilder.loadTexts: avSurvDialDeleteDigits.setDescription('Specifies the number of dialed digits to be deleted from the beginning of the string')
avSurvDialInsertDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialInsertDigits.setStatus('current')
if mibBuilder.loadTexts: avSurvDialInsertDigits.setDescription("Specifies the digit string to be inserted. Includes ',' for pause.")
avSurvDialMinimumLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDialMinimumLength.setStatus('current')
if mibBuilder.loadTexts: avSurvDialMinimumLength.setDescription('Minimum length of the user-dialed number that the survivability call-engine collects to match to the dialed-string. By default, the minimum length is defined to be equal to the length of the avSurvDialString element')
avSurvFacTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 6), )
if mibBuilder.loadTexts: avSurvFacTable.setStatus('current')
if mibBuilder.loadTexts: avSurvFacTable.setDescription('Automatic Route Selection Facility Table')
avSurvFacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 6, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvFacIndex"))
if mibBuilder.loadTexts: avSurvFacEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvFacEntry.setDescription('Each entry contains index, an ARS Facility dialing code and the Type of FAC feature')
avSurvFacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvFacIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvFacIndex.setDescription('Fac Index')
avSurvFacId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvFacId.setStatus('current')
if mibBuilder.loadTexts: avSurvFacId.setDescription('ARS Facility dialing code')
avSurvFacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvFacRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvFacRowStatus.setDescription('Create/Delete a row entry')
avSurvFacType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ars1", 1), ("ars2", 2), ("hold", 3), ("contactOpen", 4), ("contactClose", 5), ("contactPulse", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvFacType.setStatus('current')
if mibBuilder.loadTexts: avSurvFacType.setDescription('Feature Access Code(FAC) dial codes Supported')
avSurvIpVoiceCodecSetTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7), )
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetTable.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetTable.setDescription('Ip Voice Codec Set Table')
avSurvIpVoiceCodecSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvIpVoiceCodecSetNum"), (0, "AVAYA-SURV-MIB", "avSurvIpVoiceCodecSetIndex"))
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetEntry.setDescription('Each entry contains dual index(cm-codec-set-num and table index), priority, codec-type, silence sup, number-of-frames')
avSurvIpVoiceCodecSetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetNum.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetNum.setDescription('Ip Codec Set Identification')
avSurvIpVoiceCodecSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetIndex.setDescription('Ip Codec Index')
avSurvIpVoiceCodecSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetPriority.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetPriority.setDescription('Priority of codec set type (determines preferential use)')
avSurvIpVoiceCodecSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g723", 3), ("g729", 4), ("g729a", 5), ("g729b", 6), ("g729ab", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetType.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetType.setDescription('Ip Codec Type')
avSurvIpVoiceCodecSetSilence = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetSilence.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetSilence.setDescription('IP Codec Silence Suppression')
avSurvIpVoiceCodecSetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetFrames.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetFrames.setDescription('IP Codec number of frames')
avSurvIpVoiceCodecSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 7, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvIpVoiceCodecSetRowStatus.setDescription('Create/Delete a row entry')
avSurvIpCodecSetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8))
avSurvIpCodecSetFaxMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("relay", 2), ("passthru", 3), ("t38", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetFaxMode.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetFaxMode.setDescription('Fax operational protocol mode')
avSurvIpCodecSetFaxRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetFaxRedundancy.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetFaxRedundancy.setDescription(' Redundant packets encoded during fax mode')
avSurvIpCodecSetModemMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("relay", 2), ("passthru", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetModemMode.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetModemMode.setDescription('Data modem protocol mode')
avSurvIpCodecSetModemRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetModemRedundancy.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetModemRedundancy.setDescription(' Redundant packets encoded for Modem mode')
avSurvIpCodecSetTtyMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("us", 2), ("uk", 3), ("passthru", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetTtyMode.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetTtyMode.setDescription('TTY protocol mode')
avSurvIpCodecSetTtyRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetTtyRedundancy.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetTtyRedundancy.setDescription('Redundant packets encoded for TTY mode')
avSurvIpCodecSetClearChanMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetClearChanMode.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetClearChanMode.setDescription('Clear channel protocol mode. Preference for G711 wrapping')
avSurvIpCodecSetClearChanRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetClearChanRedundancy.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetClearChanRedundancy.setDescription('Redundant packets encoded for clear channel mode')
avSurvIpCodecSetEncryptPriority1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aes", 1), ("aea", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetEncryptPriority1.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetEncryptPriority1.setDescription('Media Encryption type - 1st priority')
avSurvIpCodecSetEncryptPriority2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aes", 1), ("aea", 2), ("none", 3), ("unused", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetEncryptPriority2.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetEncryptPriority2.setDescription('Media Encryption type - 2nd priority ')
avSurvIpCodecSetEncryptPriority3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aes", 1), ("aea", 2), ("none", 3), ("unused", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIpCodecSetEncryptPriority3.setStatus('current')
if mibBuilder.loadTexts: avSurvIpCodecSetEncryptPriority3.setDescription('Media Encryption type - 3rd priority')
avSurvSlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 9), )
if mibBuilder.loadTexts: avSurvSlotConfigTable.setStatus('current')
if mibBuilder.loadTexts: avSurvSlotConfigTable.setDescription('Slot Configuration Table')
avSurvSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 9, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvSlotConfigIndex"))
if mibBuilder.loadTexts: avSurvSlotConfigEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvSlotConfigEntry.setDescription('Each entry contains an index, number id, board type, and row status')
avSurvSlotConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSlotConfigIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvSlotConfigIndex.setDescription('Slot Config Table Index')
avSurvSlotConfigNumberId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSlotConfigNumberId.setStatus('current')
if mibBuilder.loadTexts: avSurvSlotConfigNumberId.setDescription('This is the string identifier that CM uses to identify the slot of the media gateway. The first character is defined as a v followed by one decimal number, e.g. v1')
avSurvSlotConfigBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 5, 4, 3, 7, 22, 14, 2, 8, 9, 16, 17, 18, 19, 23, 29, 25, 24, 30, 31, 26))).clone(namedValues=NamedValues(("mm312", 32), ("mm710", 5), ("mm711", 4), ("mm712", 3), ("mm714", 7), ("mm716", 22), ("mm717", 14), ("mm720", 2), ("mm722", 8), ("anaImm1t2l", 9), ("anaImm4t2l", 16), ("briImm", 17), ("dcpImm", 18), ("ds1Imm", 19), ("tgm550", 23), ("tim508", 29), ("tim510", 25), ("tim514", 24), ("tim516", 30), ("tim518", 31), ("tim521", 26)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSlotConfigBoardType.setStatus('current')
if mibBuilder.loadTexts: avSurvSlotConfigBoardType.setDescription('Type of media module in the associated slot mm312 has 24 low-density DCP station ports mm710 has one DS1 interface mm711 has 8 port universal analog mm712 has 8 DCP station ports mm714 has 4 analog trunk ports and 4 analog station ports mm716 has 24 high-density analog station ports mm717 has 24 high-density DCP station ports mm720 has 8 bri trunk ports (16 channels) mm722 has 2 bri trunk ports (4 channels) anaImm1t2l is G250 Internal media module 1 Analog Trunk + 2 Analog Lines anaImm4t2l is G250 Internal media module 4 Analog Trunks + 2 Analog Lines briImm is G250 Internal media module 2 port BRI dcpImm is G250 Internal media module 12 port DCP ds1Imm is G250 Internal media module DS1 tgm550 is IG550 telephony gateway module with 2 Analog Trunks + 2 Analog Lines tim508 is IG550 telephony interface module 8 analog station ports tim510 is IG550 telephony interface module DS1 tim514 is IG550 telephony interface module 4 Analog Trunks + 2 Analog stations tim516 is IG550 telephony interface module 16 analog station ports tim518 is IG550 telephony interface module 8 analog stations and 8 analog trunks tim521 is IG550 telephony interface module 4 port BRI')
avSurvSlotConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSlotConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvSlotConfigRowStatus.setDescription('Create/Delete a row entry in this table')
avSurvDs1Table = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10), )
if mibBuilder.loadTexts: avSurvDs1Table.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1Table.setDescription('DS1 trunk instantiation Table')
avSurvDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvDs1Index"))
if mibBuilder.loadTexts: avSurvDs1Entry.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1Entry.setDescription('Each entry contains an index, name, bit-rate, signaling-mode, channel numbering, connect, interface, side, country-protocol, protocol-version, bearer-capability, interface-companding, long-timer, and slot-number-id. ')
avSurvDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1Index.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1Index.setDescription('DS1 Table Index')
avSurvDs1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1Name.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1Name.setDescription('Name of the service provider and/or site destination of DS1 facility')
avSurvDs1BitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate1544", 1), ("rate2048", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1BitRate.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1BitRate.setDescription('Maximum transmission rate for DS1 interface')
avSurvDs1SignalingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cas", 1), ("robbedBit", 2), ("isdnPri", 3), ("isdnExt", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1SignalingMode.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1SignalingMode.setDescription('Selects the signaling method deployed on the given DS1 facility')
avSurvDs1ChannelNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sequential", 1), ("timeSlot", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1ChannelNumbering.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1ChannelNumbering.setDescription('Channel numbering scheme; E1 interface for ETSI and QSIG requires sequential encoding from 1 to 30')
avSurvDs1Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("host", 1), ("network", 2), ("pbx", 3), ("lineSide", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1Connect.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1Connect.setDescription('Specifies what type of equipment is at the far end of the DS1 link')
avSurvDs1Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("user", 0), ("network", 1), ("peerMaster", 3), ("peerSlave", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1Interface.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1Interface.setDescription('Determines glare handling')
avSurvDs1Side = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("a", 0), ("b", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1Side.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1Side.setDescription('QSIG glare handling when interface field is peerSlave')
avSurvDs1CountryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 62, 63))).clone(namedValues=NamedValues(("country1", 1), ("country2", 2), ("country3", 3), ("country4", 4), ("country5", 5), ("country6", 6), ("country7", 7), ("country8", 8), ("country9", 9), ("country10", 10), ("country11", 11), ("country12", 12), ("country13", 13), ("country14", 14), ("country15", 15), ("country16", 16), ("country17", 17), ("country18", 18), ("country19", 19), ("country20", 20), ("country21", 21), ("country22", 22), ("country23", 23), ("country24", 24), ("country25", 25), ("etsi", 62), ("qsig", 63)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1CountryProtocol.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1CountryProtocol.setDescription('Specifies the Layer 3 signaling protocol used by the country-specific service provider. This applies to ISDN trunk.')
avSurvDs1ProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("a", 0), ("b", 1), ("c", 2), ("d", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1ProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1ProtocolVersion.setDescription('Used in countries whose public networks allow multiple Layer-3 signaling protocols for ISDN PRI service.')
avSurvDs1BearerCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("threeKhz", 0), ("speech", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1BearerCapability.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1BearerCapability.setDescription('Sets the information transfer capability in the Bearer Capability IE of SETUP message for ISDN PRI service.')
avSurvDs1InterfaceCompanding = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alaw", 1), ("ulaw", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1InterfaceCompanding.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1InterfaceCompanding.setDescription('Specifies the companding method used by the far-end switch')
avSurvDs1LongTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1LongTimer.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1LongTimer.setDescription('Specifies whether the duration of the T302 and T303 Q.931 timers should be extended to a longer duration. Used for Russia country code')
avSurvDs1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1RowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1RowStatus.setDescription('Create/Delete a row entry in this table')
avSurvDs1SlotNumberId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvDs1SlotNumberId.setStatus('current')
if mibBuilder.loadTexts: avSurvDs1SlotNumberId.setDescription('This is the string identifier that CM uses to identify the slot of the media gateway. The first character is defined as a v followed by one decimal number, e.g. v1')
avSurvSigGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 11), )
if mibBuilder.loadTexts: avSurvSigGroupTable.setStatus('current')
if mibBuilder.loadTexts: avSurvSigGroupTable.setDescription('Signaling Group, associated with an ISDN trunk group, Table')
avSurvSigGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 11, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvSigGroupIndex"))
if mibBuilder.loadTexts: avSurvSigGroupEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvSigGroupEntry.setDescription('Each entry contains an index, channel selection, associated signaling, primary D channel, and row status')
avSurvSigGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSigGroupIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvSigGroupIndex.setDescription('SigGroup Table Index')
avSurvSigGroupChannelSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSigGroupChannelSelection.setStatus('current')
if mibBuilder.loadTexts: avSurvSigGroupChannelSelection.setDescription('If there is more than one trunk group assigned to this signaling group, the channel selection number is the trunk group that can accept incoming calls')
avSurvSigGroupAssociatedSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSigGroupAssociatedSignaling.setStatus('current')
if mibBuilder.loadTexts: avSurvSigGroupAssociatedSignaling.setDescription('Specifies whether the D-channel is physically associated in the DS1 facility, yes = D-channel present')
avSurvSigGroupPrimaryDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSigGroupPrimaryDChannel.setStatus('current')
if mibBuilder.loadTexts: avSurvSigGroupPrimaryDChannel.setDescription('The identity for the D-channel 3 digit gw number + 2 character slot number + 2 digit port circuit number')
avSurvSigGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvSigGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvSigGroupRowStatus.setDescription('Create/Delete a row entry in this table')
avSurvBriTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12), )
if mibBuilder.loadTexts: avSurvBriTable.setStatus('current')
if mibBuilder.loadTexts: avSurvBriTable.setDescription('BRI trunk instantiation Table')
avSurvBriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvBriIndex"))
if mibBuilder.loadTexts: avSurvBriEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvBriEntry.setDescription('Each entry contains an index, name, interface, side, country-protocol, bearer-capability, interface-companding, tei-assignment, directory-numberA, directory-numberB, spidA, spidB, endpoint-initialization, layer1-stable, and slot-number-id. This table instantiation completely specifies a BRI circuit, consisting of channel B1 and channel B2')
avSurvBriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvBriIndex.setDescription('BRI Table Index Note: G250-BRI supports 2 ports (4-channels) G350/IG550 is allocated a max of 24 ports (48-channels) G430/G450 is allocated a max of 64 ports (128 channels). ')
avSurvBriName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriName.setStatus('current')
if mibBuilder.loadTexts: avSurvBriName.setDescription('Name of the service provider and/or site destination of BRI facility')
avSurvBriInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("user", 0), ("network", 1), ("peerMaster", 3), ("peerSlave", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriInterface.setStatus('current')
if mibBuilder.loadTexts: avSurvBriInterface.setDescription('Determines glare handling. Non-QSIG calls: a-network, b-user; QSIG calls: a-peerMaster, b-peerSlave')
avSurvBriSide = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("a", 0), ("b", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriSide.setStatus('current')
if mibBuilder.loadTexts: avSurvBriSide.setDescription('QSIG glare handling when interface field is peerSlave')
avSurvBriCountryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 62, 63))).clone(namedValues=NamedValues(("country1", 1), ("country2", 2), ("country3", 3), ("country4", 4), ("country5", 5), ("country6", 6), ("country7", 7), ("country8", 8), ("country9", 9), ("country10", 10), ("country11", 11), ("country12", 12), ("country13", 13), ("country14", 14), ("country15", 15), ("country16", 16), ("country17", 17), ("country18", 18), ("country19", 19), ("country20", 20), ("country21", 21), ("country22", 22), ("country23", 23), ("country24", 24), ("country25", 25), ("etsi", 62), ("qsig", 63)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriCountryProtocol.setStatus('current')
if mibBuilder.loadTexts: avSurvBriCountryProtocol.setDescription('Specifies the Layer 3 signaling protocol used by the country-specific service provider')
avSurvBriBearerCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("threeKhz", 0), ("speech", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriBearerCapability.setStatus('current')
if mibBuilder.loadTexts: avSurvBriBearerCapability.setDescription('Sets the information transfer capability in the Bearer Capability IE of SETUP message')
avSurvBriInterfaceCompanding = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alaw", 1), ("ulaw", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriInterfaceCompanding.setStatus('current')
if mibBuilder.loadTexts: avSurvBriInterfaceCompanding.setDescription('Specifies the companding method used )for all circuits on this media module) by the far-end switch')
avSurvBriTeiAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("zero", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriTeiAssignment.setStatus('current')
if mibBuilder.loadTexts: avSurvBriTeiAssignment.setDescription('LAPD address assignment for TEI field, auto is assigned by network provider')
avSurvBriDirectoryNumberA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriDirectoryNumberA.setStatus('current')
if mibBuilder.loadTexts: avSurvBriDirectoryNumberA.setDescription("Channel B1's directory number")
avSurvBriDirectoryNumberB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriDirectoryNumberB.setStatus('current')
if mibBuilder.loadTexts: avSurvBriDirectoryNumberB.setDescription("Channel B2's directory number")
avSurvBriSpidA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriSpidA.setStatus('current')
if mibBuilder.loadTexts: avSurvBriSpidA.setDescription('Service Provider Identifier required for Country Code 1 (USA) to be associated with channel B1')
avSurvBriSpidB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriSpidB.setStatus('current')
if mibBuilder.loadTexts: avSurvBriSpidB.setDescription('Service Provider Identifier required for Country Code 1 (USA) to be associated with channel B2')
avSurvBriEndpointInit = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriEndpointInit.setStatus('current')
if mibBuilder.loadTexts: avSurvBriEndpointInit.setDescription('Determines whether the far end supports endpoint initialization')
avSurvBriLayer1Stable = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriLayer1Stable.setStatus('current')
if mibBuilder.loadTexts: avSurvBriLayer1Stable.setDescription('Determines whether to expect the network to drop BRI layer 1 when no calls are active. yes = keep layer 1 stable')
avSurvBriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvBriRowStatus.setDescription('Create/Delete a row entry in this table')
avSurvBriSlotPortNumberId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 12, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvBriSlotPortNumberId.setStatus('current')
if mibBuilder.loadTexts: avSurvBriSlotPortNumberId.setDescription('This is the string identifier formed by the combination of the slot identifier that CM uses to identify the slot of the media gateway(first character is a v followed by one numeric character). The port consists of two numeric characters that identify the first B-channel of the physical BRI port circuit(for example the 1st port is always 01).')
avSurvIncomingRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13), )
if mibBuilder.loadTexts: avSurvIncomingRoutingTable.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingTable.setDescription('Incoming Routing Table')
avSurvIncomingRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvIncomingRoutingGroupRefNumber"), (0, "AVAYA-SURV-MIB", "avSurvIncomingRoutingIndex"))
if mibBuilder.loadTexts: avSurvIncomingRoutingEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingEntry.setDescription('Each entry contains a dual index(trunk-group-reference-number and table index), match-pattern, delete-digits, insert-digits specification and routing-mode. This table instantiation completely specifies an the digit handling for an incoming dial-string pattern. Note 1: If the trunk-group employs Overlap Receiving, there will only be one entry (this may only have a delete or an insert operand). Note 2: If the trunk-group employs Enbloc Receiving, there may be a maximum of 50 entries. Each entry will have a Match-pattern, Length, Delete, and Insert element.')
avSurvIncomingRoutingGroupRefNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingGroupRefNumber.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingGroupRefNumber.setDescription('Incoming trunk-group reference number')
avSurvIncomingRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingIndex.setDescription('Incoming Routing Table Index')
avSurvIncomingRoutingMatchPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingMatchPattern.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingMatchPattern.setDescription("Dial-string entry that is used to match a pattern on inbound trunk calls. Note that '0' is used to designate the blank or empty string value as a wild card match.")
avSurvIncomingRoutingLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 99))).clone(namedValues=NamedValues(("len0", 0), ("len1", 1), ("len2", 2), ("len3", 3), ("len4", 4), ("len5", 5), ("len6", 6), ("len7", 7), ("len8", 8), ("len9", 9), ("len10", 10), ("len11", 11), ("len12", 12), ("len13", 13), ("len14", 14), ("len15", 15), ("len16", 16), ("len17", 17), ("len18", 18), ("len19", 19), ("len20", 20), ("len21", 21), ("blank", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingLength.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingLength.setDescription('Maximum length of the user-dialed number that the SLS call-engine collects before beginning the pattern matching. Note that CM uses the blank as a wild card, subject to rule of the MatchPattern field being set to a wild card value as well.')
avSurvIncomingRoutingDeleteDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingDeleteDigits.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingDeleteDigits.setDescription("Specifies the number of dialed digits to be deleted from the beginning of the incoming trunk's received digit string")
avSurvIncomingRoutingInsertDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingInsertDigits.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingInsertDigits.setDescription('Specifies the digit string to be inserted (after the deletion process has been completed) to the incoming trunk digit string')
avSurvIncomingRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enbloc", 0), ("overlap", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingMode.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingMode.setDescription('Defines overlap receiving and transmitting rules. This applies only to ISDN BRI/PRI trunks.')
avSurvIncomingRoutingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 13, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvIncomingRoutingRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvIncomingRoutingRowStatus.setDescription('Create/Delete a row entry in this table')
avSurvNfasTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 14), )
if mibBuilder.loadTexts: avSurvNfasTable.setStatus('current')
if mibBuilder.loadTexts: avSurvNfasTable.setDescription('Signaling Group Nfas , associated with an ISDN trunk group, Table')
avSurvNfasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 14, 1), ).setIndexNames((0, "AVAYA-SURV-MIB", "avSurvNfasSigGroupRefNumber"), (0, "AVAYA-SURV-MIB", "avSurvNfasIndex"))
if mibBuilder.loadTexts: avSurvNfasEntry.setStatus('current')
if mibBuilder.loadTexts: avSurvNfasEntry.setDescription('Each entry contains a dual index(sig-group-reference-number and table index), interface string, interface id, and row status')
avSurvNfasSigGroupRefNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 650))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvNfasSigGroupRefNumber.setStatus('current')
if mibBuilder.loadTexts: avSurvNfasSigGroupRefNumber.setDescription('Entry pointing to the associated signaling group number in the signaling group table')
avSurvNfasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvNfasIndex.setStatus('current')
if mibBuilder.loadTexts: avSurvNfasIndex.setDescription('Nfas Table Index')
avSurvNfasInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvNfasInterface.setStatus('current')
if mibBuilder.loadTexts: avSurvNfasInterface.setDescription('The identity for the NFAS DS1 facility group: 3 digit gateway number + 2 character slot number')
avSurvNfasInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvNfasInterfaceId.setStatus('current')
if mibBuilder.loadTexts: avSurvNfasInterfaceId.setDescription('For an NFAS circuit, this specifies the identification number of the DS1 circuit that is associated with this NFAS group. Note that this ID number must be coordinated with the PSTN provider so that the signaling protocol will operate correctly with respect to physical facility circuit selection.')
avSurvNfasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 4, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avSurvNfasRowStatus.setStatus('current')
if mibBuilder.loadTexts: avSurvNfasRowStatus.setDescription('Create/Delete a row entry in this table')
mibBuilder.exportSymbols("AVAYA-SURV-MIB", avSurvBriIndex=avSurvBriIndex, avSurvTrunkGroupNumberingFormat=avSurvTrunkGroupNumberingFormat, avSurvIpVoiceCodecSetType=avSurvIpVoiceCodecSetType, avSurvIncomingRoutingRowStatus=avSurvIncomingRoutingRowStatus, avSurvTrunkRowStatus=avSurvTrunkRowStatus, avSurvIpVoiceCodecSetSilence=avSurvIpVoiceCodecSetSilence, avSurvEndDLTimeStamp=avSurvEndDLTimeStamp, avSurvStationIndex=avSurvStationIndex, avSurvDialMinimumLength=avSurvDialMinimumLength, avSurvTrunkGroupCbc=avSurvTrunkGroupCbc, avSurvSigGroupIndex=avSurvSigGroupIndex, avSurvDialMaximumLength=avSurvDialMaximumLength, avSurvNfasInterface=avSurvNfasInterface, avSurvArsTable=avSurvArsTable, avSurvSlotConfigEntry=avSurvSlotConfigEntry, avSurvDateFormat=avSurvDateFormat, avSurvTrunkGroupCodesetDisplay=avSurvTrunkGroupCodesetDisplay, avSurvTrunkInterfaceIndex=avSurvTrunkInterfaceIndex, avSurvStationRowStatus=avSurvStationRowStatus, avSurvSlotConfigIndex=avSurvSlotConfigIndex, avSurvBriInterfaceCompanding=avSurvBriInterfaceCompanding, avSurvTrunkGroupDial=avSurvTrunkGroupDial, avSurvDs1Side=avSurvDs1Side, avSurvSlotConfigTable=avSurvSlotConfigTable, avSurvBriSlotPortNumberId=avSurvBriSlotPortNumberId, avSurvSlotConfigRowStatus=avSurvSlotConfigRowStatus, avSurvIncomingRoutingTable=avSurvIncomingRoutingTable, avSurvDialInsertDigits=avSurvDialInsertDigits, avSurvTrunkGroupDs1Supervision=avSurvTrunkGroupDs1Supervision, avSurvAdminState=avSurvAdminState, avSurvFacEntry=avSurvFacEntry, avSurvTrunkGroupSendCallingNumber=avSurvTrunkGroupSendCallingNumber, avSurvTrunkGroupIncomingDestination=avSurvTrunkGroupIncomingDestination, avSurvNfasEntry=avSurvNfasEntry, avSurvBriName=avSurvBriName, avSurvStationIpAddressRegistered=avSurvStationIpAddressRegistered, avSurvDs1ChannelNumbering=avSurvDs1ChannelNumbering, avSurvDs1Entry=avSurvDs1Entry, avSurvTrunkGroupCodesetNational=avSurvTrunkGroupCodesetNational, avSurvAttendantExtension=avSurvAttendantExtension, avSurvAttendantAccessCode=avSurvAttendantAccessCode, avSurvStationInterfaceIndex=avSurvStationInterfaceIndex, avSurvStationExpansionModule=avSurvStationExpansionModule, avSurvTrunkGroupDigitHandling=avSurvTrunkGroupDigitHandling, avSurvIpCodecSetEncryptPriority2=avSurvIpCodecSetEncryptPriority2, avSurvSigGroupTable=avSurvSigGroupTable, avSurvDs1ProtocolVersion=avSurvDs1ProtocolVersion, avSurvBriDirectoryNumberB=avSurvBriDirectoryNumberB, avSurvBriBearerCapability=avSurvBriBearerCapability, avSurvSigGroupChannelSelection=avSurvSigGroupChannelSelection, avSurvIpVoiceCodecSetNum=avSurvIpVoiceCodecSetNum, avSurvStationSwitchHookFlash=avSurvStationSwitchHookFlash, avSurvDialString=avSurvDialString, avSurvIpCodecSetEncryptPriority1=avSurvIpCodecSetEncryptPriority1, avSurvIpVoiceCodecSetFrames=avSurvIpVoiceCodecSetFrames, avSurvPimLockout=avSurvPimLockout, avSurvSigGroupPrimaryDChannel=avSurvSigGroupPrimaryDChannel, avSurvFacTable=avSurvFacTable, avSurvBriSpidA=avSurvBriSpidA, avSurvTrunkGroupTable=avSurvTrunkGroupTable, avSurvDialType=avSurvDialType, avSurvBriDirectoryNumberA=avSurvBriDirectoryNumberA, avSurvTrunkGroupDidDigitsInsert=avSurvTrunkGroupDidDigitsInsert, avSurvDs1SlotNumberId=avSurvDs1SlotNumberId, avSurvIpCodecSetTtyMode=avSurvIpCodecSetTtyMode, avSurvTrunkSlotPort=avSurvTrunkSlotPort, avSurvDs1BearerCapability=avSurvDs1BearerCapability, avSurvTrunkGroupDidSupervision=avSurvTrunkGroupDidSupervision, avSurvIpVoiceCodecSetRowStatus=avSurvIpVoiceCodecSetRowStatus, avSurvTrunkGroupChannelPreference=avSurvTrunkGroupChannelPreference, avSurvBriRowStatus=avSurvBriRowStatus, avSurvTrunkGroupIncomingDialTone=avSurvTrunkGroupIncomingDialTone, avSurvBriSide=avSurvBriSide, avSurvIncomingRoutingEntry=avSurvIncomingRoutingEntry, avSurvActive=avSurvActive, avSurvDs1Table=avSurvDs1Table, avSurvIpCodecSetClearChanRedundancy=avSurvIpCodecSetClearChanRedundancy, avSurvIpCodecSetClearChanMode=avSurvIpCodecSetClearChanMode, avSurvBriSpidB=avSurvBriSpidB, avSurvTrunkGroupNum=avSurvTrunkGroupNum, avSurvDs1Name=avSurvDs1Name, avSurvDs1BitRate=avSurvDs1BitRate, avSurvIncomingRoutingLength=avSurvIncomingRoutingLength, avSurvNfasSigGroupRefNumber=avSurvNfasSigGroupRefNumber, avSurvBriTeiAssignment=avSurvBriTeiAssignment, avSurvIpCodecSetTtyRedundancy=avSurvIpCodecSetTtyRedundancy, avSurvTrunkGroupJapanDisconnect=avSurvTrunkGroupJapanDisconnect, avSurvIncomingRoutingGroupRefNumber=avSurvIncomingRoutingGroupRefNumber, avSurvDs1CountryProtocol=avSurvDs1CountryProtocol, avSurvBriCountryProtocol=avSurvBriCountryProtocol, avSurvStationTable=avSurvStationTable, avSurvBriTable=avSurvBriTable, avSurvFacRowStatus=avSurvFacRowStatus, avSurvIpCodecSetModemRedundancy=avSurvIpCodecSetModemRedundancy, avSurvNfasRowStatus=avSurvNfasRowStatus, avSurvTrunkGroupType=avSurvTrunkGroupType, avSurvDs1InterfaceCompanding=avSurvDs1InterfaceCompanding, avSurvBriLayer1Stable=avSurvBriLayer1Stable, avSurvIncomingRoutingIndex=avSurvIncomingRoutingIndex, avSurvTrunkGroupCbcParameter=avSurvTrunkGroupCbcParameter, avSurvTrunkGroupCbcServiceFeature=avSurvTrunkGroupCbcServiceFeature, avSurvIpCodecSetEncryptPriority3=avSurvIpCodecSetEncryptPriority3, avSurvConfigCommand=avSurvConfigCommand, avSurvStationType=avSurvStationType, avSurvTrunkGroupDidDigitTreatment=avSurvTrunkGroupDidDigitTreatment, avSurvIncomingRoutingMatchPattern=avSurvIncomingRoutingMatchPattern, avSurvConfig=avSurvConfig, avSurvIncomingRoutingInsertDigits=avSurvIncomingRoutingInsertDigits, avSurvFacType=avSurvFacType, avSurvStationEntry=avSurvStationEntry, avSurvTrunkGroupName=avSurvTrunkGroupName, avSurvIpVoiceCodecSetTable=avSurvIpVoiceCodecSetTable, avSurvIpCodecSetConfig=avSurvIpCodecSetConfig, avSurvDisabled=avSurvDisabled, avSurvTrunkSigGroupRefNumber=avSurvTrunkSigGroupRefNumber, avSurvStatus=avSurvStatus, avSurvSlotConfigBoardType=avSurvSlotConfigBoardType, avSurvNotificationSeverity=avSurvNotificationSeverity, avSurvDialRowStatus=avSurvDialRowStatus, avSurvDs1Connect=avSurvDs1Connect, avSurvDialAction=avSurvDialAction, avSurvBriEntry=avSurvBriEntry, avSurvDs1SignalingMode=avSurvDs1SignalingMode, PYSNMP_MODULE_ID=avSurvMib, avSurvNfasIndex=avSurvNfasIndex, avSurvTrunkGroupSendName=avSurvTrunkGroupSendName, avSurvSigGroupRowStatus=avSurvSigGroupRowStatus, avSurvMaxIPReg=avSurvMaxIPReg, avSurvFacIndex=avSurvFacIndex, avSurvInactive=avSurvInactive, avSurvIpCodecSetFaxRedundancy=avSurvIpCodecSetFaxRedundancy, avSurvTrunkEntry=avSurvTrunkEntry, avSurvDialGroupRefNumber=avSurvDialGroupRefNumber, avSurvDs1Interface=avSurvDs1Interface, avSurvIpVoiceCodecSetEntry=avSurvIpVoiceCodecSetEntry, avSurvIpCodecSetFaxMode=avSurvIpCodecSetFaxMode, avSurvBriEndpointInit=avSurvBriEndpointInit, avSurvStationTrunkDest=avSurvStationTrunkDest, avSurvGatewayNumber=avSurvGatewayNumber, avSurvStationCOR=avSurvStationCOR, avSurvTrunkTable=avSurvTrunkTable, avSurvSlotConfigNumberId=avSurvSlotConfigNumberId, avSurvIpVoiceCodecSetIndex=avSurvIpVoiceCodecSetIndex, avSurvIpCodecSetModemMode=avSurvIpCodecSetModemMode, avSurvStationSlotPort=avSurvStationSlotPort, avSurvArsEntry=avSurvArsEntry, avSurvDs1Index=avSurvDs1Index, avSurvBriInterface=avSurvBriInterface, avSurvIncomingRoutingMode=avSurvIncomingRoutingMode, avSurvTrunkGroupEntry=avSurvTrunkGroupEntry, avSurvEnabled=avSurvEnabled, avSurvTrunkGroupR2MFCSignaling=avSurvTrunkGroupR2MFCSignaling, avSurvTrunkGroupTrunkHunt=avSurvTrunkGroupTrunkHunt, avSurvFacId=avSurvFacId, avSurvSigGroupAssociatedSignaling=avSurvSigGroupAssociatedSignaling, avSurvDs1RowStatus=avSurvDs1RowStatus, avSurvIncomingRoutingDeleteDigits=avSurvIncomingRoutingDeleteDigits, avSurvNfasTable=avSurvNfasTable, avSurvTrunkGroupRowStatus=avSurvTrunkGroupRowStatus, avSurvTrunkGroupRefNumber=avSurvTrunkGroupRefNumber, avSurvSigGroupEntry=avSurvSigGroupEntry, avSurvNfasInterfaceId=avSurvNfasInterfaceId, avSurvMib=avSurvMib, avSurvDialIndex=avSurvDialIndex, avSurvDialDeleteDigits=avSurvDialDeleteDigits, avSurvDs1LongTimer=avSurvDs1LongTimer, avSurvIpVoiceCodecSetPriority=avSurvIpVoiceCodecSetPriority, avSurvTrunkGroupBusyDisconnect=avSurvTrunkGroupBusyDisconnect, avSurvNotification=avSurvNotification, avSurvTrunkIndex=avSurvTrunkIndex, avSurvStationExt=avSurvStationExt, avSurvTrunkGroupTAC=avSurvTrunkGroupTAC, avSurvStationName=avSurvStationName)
