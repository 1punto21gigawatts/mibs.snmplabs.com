#
# PySNMP MIB module LIEBERT-GP-PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIEBERT-GP-PDU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
lgpPdu, liebertPduModuleReg = mibBuilder.importSymbols("LIEBERT-GP-REGISTRATION-MIB", "lgpPdu", "liebertPduModuleReg")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Bits, Counter32, IpAddress, ModuleIdentity, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, TimeTicks, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Bits", "Counter32", "IpAddress", "ModuleIdentity", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "TimeTicks", "Unsigned32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
liebertGlobalProductsPduModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 1, 9, 1))
liebertGlobalProductsPduModule.setRevisions(('2008-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: liebertGlobalProductsPduModule.setRevisionsDescriptions(('Initial Version',))
if mibBuilder.loadTexts: liebertGlobalProductsPduModule.setLastUpdated('200807020000Z')
if mibBuilder.loadTexts: liebertGlobalProductsPduModule.setOrganization('Emerson Network Power/Liebert Corporation')
if mibBuilder.loadTexts: liebertGlobalProductsPduModule.setContactInfo('Contact: Technical Support Postal: Liebert Corporation 1050 Dearborn Drive P.O. Box 29186 Columbus OH, 43229 US Tel: +1 (800) 222-5877 E-mail: liebert.monitoring@emerson.com Web: www.liebert.com Author: Keith Sarbaugh')
if mibBuilder.loadTexts: liebertGlobalProductsPduModule.setDescription("The MIB module used to register Liebert POWER related SNMP OIDs. Copyright 2008-2008 Liebert Corporation. All rights reserved. Reproduction of this document is authorized on the condition that the forgoing copyright notice is included. This Specification is supplied 'AS IS' and Liebert Corporation makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
lgpPduCluster = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 10))
if mibBuilder.loadTexts: lgpPduCluster.setStatus('current')
if mibBuilder.loadTexts: lgpPduCluster.setDescription("This sub-tree contains information about PDU clusters. Clusters are groups of PDU's under a single monitoring or control domain.")
if mibBuilder.loadTexts: lgpPduCluster.setReference('The registrations for the objects in this sub-tree are defined below.')
lgpPduGrpSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 10, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduGrpSysStatus.setStatus('current')
if mibBuilder.loadTexts: lgpPduGrpSysStatus.setDescription("This value represents a bit-field of the various operational states of the PDUs that are part of the cluster of PDUs being monitored by this agent. This value is the bit-wise logical OR of all of the 'lgpPduEntrySysStatus' columns in the 'lgpPduTable' which represents the combined statuses of all PDUs for this agent. Note the bit-position is given parenthetically next to the operational state in the description below. The bit position is big-endian (least significant digit is the right-most digit). The state is present in the PDU when the bit is on (value = 1). The value is a logical OR of all of the following potential states of each PDU in the cluster. normalOperation(1) One or more PDUs in the cluster are operating normally with no active warnings or alarms. startUp(2) One or more PDUs are in the startup state (initializing). Control and monitoring operations may be inhibited or unavailable while the PDU is in this state. This state will clear automatically when the PDU(s) are fully initialized and ready to accept control and monitoring commands. unknownNoSupport(4) The state of one or more PDUs are not known at this time or there is no support for this piece of information from 1 or more PDUs in the cluster/group. normalWithWarning(8) One or more PDUs are operating normally with one or more active warnings. Appropriate personnel should investigate the warning(s) as soon as possible and take appropriate action. normalWithAlarm(16) One or more PDUs are operating normally with one or more active alarms. Appropriate personnel should investigate the alarm(s) as soon as possible and take appropriate action. abnormalOperation(32) One ore more PDUs are operating abnormally. There is a failure within the system that is unexpected under normal operating conditions. Appropriate personnel should investigate the cause as soon as possible. The normal functioning of the system is likely inhibited. unknownCommFailure(64) The state of one or more PDUs are not known due to a communications failure between the PDU hardware and the communications module. This state is usually indicative of a hardware problem. ")
lgpPduTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduTableCount.setStatus('current')
if mibBuilder.loadTexts: lgpPduTableCount.setDescription('Number of PDUs being monitored by this agent. This is the number of entries in the lgpPduTable.')
lgpPduTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20), )
if mibBuilder.loadTexts: lgpPduTable.setStatus('current')
if mibBuilder.loadTexts: lgpPduTable.setDescription('This table contains a list of PDU entries. The table contains zero, one, or many rows, depending upon the number of PDUs being monitored. The Network Management System (NMS) cannot create or delete rows in the table. The rows are created by the agent based upon the number of PDUs being managed. Each row in the table represents a PDU in the system.')
lgpPduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"))
if mibBuilder.loadTexts: lgpPduEntry.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntry.setDescription("This entry defines the columns to be populated in the 'lgpPduTable'. Each column represents an attribute of a PDU. This table is indexed by the PDU identifier that is unique within the agent. ")
lgpPduEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduEntryIndex.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntryIndex.setDescription("This is the index that indicates the row of the 'lgpPduTable'.")
lgpPduEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntryId.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntryId.setDescription('This is an internal index representing a unique identifier for each PDU represented by this agent. The value is assigned by the agent.')
lgpPduEntryUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntryUsrLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntryUsrLabel.setDescription('This is a user assigned label representing the PDU.')
lgpPduEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntrySysAssignLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntrySysAssignLabel.setDescription('System assigned identifier representing the PDU. The value is independent of any user assigned label or tag. The exact format of this label is system dependent and is subject to change, therefore, it should not be referenced for programmatic use.')
lgpPduEntryPositionRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 20), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntryPositionRelative.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntryPositionRelative.setDescription("This is a one-based value that indicates the PDU's relative position within a rack or other enclosing entity.")
lgpPduEntrySysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntrySysStatus.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntrySysStatus.setDescription('This value represents a bit-field of the various operational states of the PDU. The value is a logical OR of all of the following potential states of the PDU. Note the bit-position is given parenthetically next to the operational state in the description below. The bit position is assumed to be a big-endian format (least significant digit is the right-most digit). The state is present in the PDU when the bit is on (value = 1). normalOperation(1) The PDU is operating normally with no active warnings or alarms. startUp(2) The PDU is in the startup state (initializing). Control and monitoring operations maybe inhibited or unavailable while the PDU is in this state. This state will clear automatically when the PDU(s) are fully initialized and ready to accept control and monitoring commands. normalWithWarning(8) The PDU is operating normally with one or more active warnings. Appropriate personnel should investigate the warning(s) as soon as possible and take appropriate action. normalWithAlarm(16) The PDU is operating normally with one or more active alarms. Appropriate personnel should investigate the alarm(s) as soon as possible and take appropriate action. abnormalOperation(32) The PDU is operating abnormally. That is there is some failure within the system that is unexpected under normal operating conditions. Appropriate personnel should investigate the cause as soon as possible. The normal functioning of the system is likely inhibited. ')
lgpPduEntryUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntryUsrTag1.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntryUsrTag1.setDescription('This is a user assigned Tag for the PDU. This value may be useful for end-user grouping or asset tracking purposes. The value for this tag does not need to be unique for this unit or across other units.')
lgpPduEntryUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 40), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduEntryUsrTag2.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntryUsrTag2.setDescription('This is a user assigned Tag for the PDU. This value may be useful for end-user grouping or asset tracking purposes. The value for this tag does not need to be unique for this unit or across other units.')
lgpPduEntrySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntrySerialNumber.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntrySerialNumber.setDescription('System assigned serial number for this PDU. This number is assigned at time of manufacture, is globally unique with respect to all PDU units.')
lgpPduEntryRbCount = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 20, 1, 50), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduEntryRbCount.setStatus('current')
if mibBuilder.loadTexts: lgpPduEntryRbCount.setDescription('Number of receptacle branches (Rb) within this PDU.')
lgpPduPowerSource = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30))
if mibBuilder.loadTexts: lgpPduPowerSource.setStatus('current')
if mibBuilder.loadTexts: lgpPduPowerSource.setDescription('This sub-tree contains information about PDU power sources.')
if mibBuilder.loadTexts: lgpPduPowerSource.setReference('The registrations for the objects in this sub-tree are defined below.')
lgpPduPsTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsTableCount.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsTableCount.setDescription('Number of power sources in the lgpPduPsTable.')
lgpPduPsTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20), )
if mibBuilder.loadTexts: lgpPduPsTable.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsTable.setDescription("This table contains a list of the PDU's power source(s). The table contains zero, one, or more rows, depending upon the number of PDUs being monitored and the number of power sources installed for each PDU. The NMS cannot create or delete rows in the table. The rows are created by the agent based upon the capabilities of the PDUs being monitored. Each row in the table represents a PDU's Power Source.")
lgpPduPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduPsEntryIndex"))
if mibBuilder.loadTexts: lgpPduPsEntry.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntry.setDescription("This entry defines the attributes to be populated in the various columns of the 'lgpPduPsTable' (Power Source Table). This table is indexed by both the 'lgpPduEntryIndex' which is the sole index into the 'lgpPduTable' and the 'lgpPduPsEntryIndex' which is a unique identifier for the Power Source within a given PDU. Taken together these two indexes uniquely identify a Power Source within this agent. ")
lgpPduPsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 5), Unsigned32())
if mibBuilder.loadTexts: lgpPduPsEntryIndex.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryIndex.setDescription("This is a unique identifier for the Power Source within a given PDU. This is one of two indexes used to indicate the row of the 'lgpPduTable'.")
lgpPduPsEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryId.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryId.setDescription('This is a unique entry id representing a given PDU power source for the PDU.')
lgpPduPsEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntrySysAssignLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntrySysAssignLabel.setDescription('System assigned identifier for this power source. The value is independent of any user assigned label or tag. The exact format of this label is system dependent and is subject to change, therefore, it should not be referenced for programmatic use.')
lgpPduPsEntryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryModel.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryModel.setDescription('This is the model name (identifier) of the power supply.')
lgpPduPsEntryWiringType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-specified", 0), ("single-phase-3-wire-L1-N-PE", 1), ("two-phase-3-wire-L1-L2-PE", 2), ("three-phase-4-wire-L1-L2-L3-PE", 3), ("three-phase-5-wire-L1-L2-L3-N-PE", 4), ("two-phase-4-wire-L1-L2-N-PE", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryWiringType.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryWiringType.setDescription("The PDU's power supply physical wiring type. not-specified The type has not been specified/configured. The end_user must configure this object to specify the physical wiring type. single-phase-3-wire-L1-N-PE Single Phase input with 3 wires (Line 1, Neutral and Protective Earth). two-phase-3-wire-L1-L2-PE Two Phase input with 3 wires (Line 1, Line 2, and Protective Earth). three-phase-4-wire-L1-L2-L3-PE Three Phase input with 4 wires (Line 1, Line 2, Line 3, and Protective Earth). three-phase-5-wire-L1-L2-L3-N-PE Three Phase input with 5 wires (Line 1, Line 2, Line 3, Neutral and Protective Earth). two-phase-4-wire-L1-L2-N-PE Two Phase input with 4 wires (Line 1, Line 2, Neutral, and Protective Earth).")
lgpPduPsEntryEpInputRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 30), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryEpInputRated.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryEpInputRated.setDescription("Rated Input Line Voltage for the power source (i.e. this is the nominal line input voltage; it is NOT a measured voltage). The value is defined to be the rated line voltage (either line-to-neutral or line-to-line depending upon the power source's type).")
lgpPduPsEntryEcInputRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 35), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryEcInputRated.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryEcInputRated.setDescription('This is the rated input line current for the module (it is NOT the measured current).')
lgpPduPsEntryFreqRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 40), Unsigned32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryFreqRated.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryFreqRated.setDescription('Rated input line frequency for this power source (i.e. This is the expected line frequency; it is NOT a measured frequency; it is typically 50 Hz or 60 Hz).')
lgpPduPsEntryEnergyAccum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 50), Unsigned32()).setUnits('0.1 Kilowatt-Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryEnergyAccum.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryEnergyAccum.setDescription('Total accumulated energy, measured at the power source input, since the last energy reset. Writing a value of 0 (zero) to this causes the accumulated energy to be reset. Writing a non-zero value is invalid and shall result in a write error and the total energy value remains unchanged. If the energy has not been reset and has not wrapped, then this is the total energy since installation. This value persists across boot events.')
lgpPduPsEntrySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntrySerialNum.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntrySerialNum.setDescription('This is a unique serial number of the power supply. This number is assigned to the power supply at the time of manufacture.')
lgpPduPsEntryFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryFirmwareVersion.setDescription("This is the version of the firmware installed on the PDU's power supply.")
lgpPduPsEntryPwrTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 65), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryPwrTotal.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryPwrTotal.setDescription('Total input power for this power supply. This is the sum of the power for all phases')
lgpPduPsEntryEcNeutral = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 70), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutral.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutral.setDescription("The neutral current measured at the PDU's power source.")
lgpPduPsEntryEcNeutralThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 75), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutralThrshldOvrWarn.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutralThrshldOvrWarn.setDescription('The threshold at which an over current warning is activated. If the measured neutral current (lgpPduPsEntryEcNeutral) is above this percentage of the full scale rated value (lgpPduPsEntryEcInputRated), an over neutral current warning (lgpConditionSource1NeutralOverCurrent) is activated.')
lgpPduPsEntryEcNeutralThrshldOvrAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 20, 1, 80), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutralThrshldOvrAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsEntryEcNeutralThrshldOvrAlarm.setDescription('The threshold at which an over current alarm is activated. If the measured neutral current (lgpPduPsEntryEcNeutral) is above this percentage of the full scale rated value (lgpPduPsEntryEcInputRated), an over neutral current alarm (lgpConditionSource1NeutralOverCurrent) is activated.')
lgpPduPsLineTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40), )
if mibBuilder.loadTexts: lgpPduPsLineTable.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineTable.setDescription("This table contains a list of PDU's power source line/phase measurements. The table contains zero, one, or many rows, depending upon the number of PDU's Power Sources being monitored. The NMS cannot create or delete rows in the table. The rows are created by the agent based upon the capabilities of the managed PDU's power supply(s). Each row in the table represents a particular phase/line measurement of a power supply for a given PDU.")
lgpPduPsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduPsEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduPsLineEntryIndex"))
if mibBuilder.loadTexts: lgpPduPsLineEntry.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntry.setDescription("This entry defines the attributes to be populated in the various columns of the 'lgpPduPsLineTable'. The table is index by three indexes which taken together uniquely identify line/phase information for a given power source within a PDU. The 'lgpPduEntryIndex' is an index into the 'lgpPduTable'. This identifies the PDU that the power source is on. The 'lgpPduPsEntryIndex' is an index that together with the 'lgpPduEntryIndex' uniquely identifies the power source within the PDU that the row in this table represents. The final index 'lgpPduPsLineEntryIndex' identifies the particular line/phase that the measurement applies to within the identified power source.")
lgpPduPsLineEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 5), Unsigned32())
if mibBuilder.loadTexts: lgpPduPsLineEntryIndex.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryIndex.setDescription("This is the index that indicates the line/phase of the measurements in the given row of the 'lgpPduPsLineTable'.")
lgpPduPsLineEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryId.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryId.setDescription("Unique identifier (within a PDU) for the PDU's power source. The object may not be available in non-modular systems.")
lgpPduPsLineEntryLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryLine.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryLine.setDescription('The line number (phase) that the measurement represents for all measurements in a given row of the table. Note that this always matches the lgpPduPsLineEntryIndex of the same row in the table. The line/phases are as follows: Line# Description ----- --------------------------------------------------- 1 Line 1-N (A) for Line-to-Neutral measurements 2 Line 2-N (B) for Line-to-Neutral measurements 3 Line 3-N (C) for Line-to-Neutral measurements 1 Line 1-2 (A-B) for Line-to-Line measurements 2 Line 2-3 (B-C) for Line-to-Line measurements 3 Line 3-1 (C-A) for Line-to-Line measurements ')
lgpPduPsLineEntryEpLNTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 19), Unsigned32()).setUnits('0.1 Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLNTenths.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLNTenths.setDescription('Alternating Current RMS Line to Neutral Electrical Potential measurement. The line/phase being measured is indicated by the corresponding lgpPduPsLineEntryLine value of this row in the table.')
lgpPduPsLineEntryEpLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 20), Unsigned32()).setUnits('Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLN.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLN.setDescription('Alternating Current RMS Line to Neutral Electrical Potential measurement. The line/phase being measured is indicated by the corresponding lgpPduPsLineEntryLine value of this row in the table.')
lgpPduPsLineEntryEc = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 21), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEc.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEc.setDescription('Total input line-to-neutral electrical current. The line/phase being measured is indicated by the corresponding lgpPduPsLineEntryLine value of this row in the table.')
lgpPduPsLineEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 22), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcHundredths.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEcHundredths.setDescription('Total input line-to-neutral electrical current. The line/phase being measured is indicated by the corresponding lgpPduPsLineEntryLine value of this row in the table.')
lgpPduPsLineEntryEcThrshldUndrAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 35), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldUndrAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldUndrAlarm.setDescription('The threshold at which an under current alarm is activated. If the measured current (lgpPduPsLineEntryEc) is equal to or below this percentage of the full scale rated value (lgpPduPsEntryEcInputRated), an under current alarm is activated.')
lgpPduPsLineEntryEcThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 36), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldOvrWarn.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldOvrWarn.setDescription('The threshold at which an over current warning is activated. If the measured current (lgpPduPsLineEntryEc) is equal to or over this percentage of the full scale rated value (lgpPduPsEntryEcInputRated), an over current warning is activated.')
lgpPduPsLineEntryEcThrshldOvrAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 37), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldOvrAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEcThrshldOvrAlarm.setDescription('The threshold at which an over current alarm is activated. If the measured current (lgpPduPsLineEntryEc) is equal to or over this percentage of the full scale rated value (lgpPduPsEntryEcInputRated), an over current alarm is activated.')
lgpPduPsLineEntryEcAvailBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 38), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcAvailBeforeAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEcAvailBeforeAlarm.setDescription('The amount that the current/amperage may increase from its present value before an over current alarm occurs.')
lgpPduPsLineEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 39), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcUsedBeforeAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEcUsedBeforeAlarm.setDescription('The percent of current utilization relative to the over current alarm threshold.')
lgpPduPsLineEntryEpLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 60), Unsigned32()).setUnits('Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLL.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLL.setDescription('Line to Line Electrical Potential. The line/phase being measured is indicated by the corresponding lgpPduPsLineEntryLine value of this row in the table.')
lgpPduPsLineEntryEpLLTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 61), Unsigned32()).setUnits('0.1 Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLLTenths.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEpLLTenths.setDescription('Line to Line Electrical Potential. The line/phase being measured is indicated by the corresponding lgpPduPsLineEntryLine value of this row in the table.')
lgpPduPsLineEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 30, 40, 1, 62), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduPsLineEntryEcAvailBeforeAlarmHundredths.setStatus('current')
if mibBuilder.loadTexts: lgpPduPsLineEntryEcAvailBeforeAlarmHundredths.setDescription('The amount that the current/amperage may increase from its present value before an over current alarm occurs.')
lgpPduReceptacleBranch = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40))
if mibBuilder.loadTexts: lgpPduReceptacleBranch.setStatus('current')
if mibBuilder.loadTexts: lgpPduReceptacleBranch.setDescription('This sub-tree contains information about PDU receptacle branches.')
if mibBuilder.loadTexts: lgpPduReceptacleBranch.setReference('The registrations for the objects in this sub-tree are defined below.')
lgpPduRbTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbTableCount.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbTableCount.setDescription('Number of receptacle branches in the lgpPduRbTable.')
lgpPduRbTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20), )
if mibBuilder.loadTexts: lgpPduRbTable.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbTable.setDescription('This table contains a list of PDU Receptacle branches. The table contains zero, one, or many rows, depending upon the number of PDUs being managed and how many receptacle branches each PDU has installed. The NMS cannot create or delete rows in the table. The rows are created by the agent based upon the capabilities of the PDUs being managed. Each row in the table represents a receptacle branch for a given PDU. The PDU that a branch is installed on is indicated by the column lgpPduEntryIndex. The branch within the lgpPduEntryIndex PDU is indicated by the column lgpPduRbEntryIndex.')
lgpPduRbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbEntryIndex"))
if mibBuilder.loadTexts: lgpPduRbEntry.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntry.setDescription("This entry defines the attributes to be populated in the various columns of the 'lgpPduRbTable'. The table is indexed by both the 'lgpPduEntryIndex' and 'lgpPduRbEntryIndex'. The lgpPduEntryIndex specifies the PDU, defined in the lgpPduTable that the branch is on. The lgpPduRbEntryIndex uniquely identifies the branch within that PDU. Taken together the two indexes uniquely identify a branch being monitored by this agent. ")
lgpPduRbEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduRbEntryIndex.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryIndex.setDescription("This is the index that indicates the row of the 'lgpPduRbTable'")
lgpPduRbEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryId.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryId.setDescription('A unique id representing the receptacle branch within the collection of branches being monitored by this agent. The uniqueness of this id is within the PDUs being managed by a single agent.')
lgpPduRbEntryUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryUsrLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryUsrLabel.setDescription('A user assigned label representing the receptacle branch.')
lgpPduRbEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntrySysAssignLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntrySysAssignLabel.setDescription('System assigned identifier for this receptacle branch. The value is independent of any user assigned label or tag. The exact format of this label is system dependent and is subject to change, therefore, it should not be referenced for programmatic use.')
lgpPduRbEntryPositionRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 25), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryPositionRelative.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryPositionRelative.setDescription('This is a one-based value that indicates the relative position of the branch within the PDU.')
lgpPduRbEntrySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntrySerialNum.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntrySerialNum.setDescription('A globally unique serial number for this branch. This number is assigned to the branch at the time of manufacture and can not be modified. NOTE: Generally only PDUs with replaceable receptacle branches will have serial numbers.')
lgpPduRbEntryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryModel.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryModel.setDescription('This is the model designation for this receptacle branch.')
lgpPduRbEntryFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryFirmwareVersion.setDescription('This is the firmware version number of the control software running on the receptacle branch. Only PDUs with replaceable receptacle branches will typically support this object.')
lgpPduRbEntryUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 41), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryUsrTag1.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryUsrTag1.setDescription('This is a user assigned Tag for the receptacle branch. This value may be useful for end-user grouping or asset tracking purposes. The value for this tag does not need to be unique for this unit or across other units.')
lgpPduRbEntryUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 42), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryUsrTag2.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryUsrTag2.setDescription('This is a user assigned Tag for the receptacle branch. This value may be useful for end-user grouping or asset tracking purposes. The value for this tag does not need to be unique for this unit or across other units.')
lgpPduRbEntryReceptacleType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("not-specified", 0), ("nema-5-20R-20-Amp", 1), ("iec-C13-sheet-F-10-Amp", 2), ("iec-C19-sheet-J-16-Amp", 3), ("iec-C13-sheet-F-10-Amp-and-iec-C19-sheet-J-16-Amp", 4), ("nema-5-20R-20-Amp-and-iec-C13-sheet-F-10-Amp", 5), ("nema-5-20R-20-Amp-and-iec-C19-sheet-J-16-Amp", 6), ("cee-7-type-E-schuko", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryReceptacleType.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryReceptacleType.setDescription('This enumeration represents the type of receptacles installed on this receptacle branch. All receptacles on this branch are of this type/style. not-specified If this value is returned, either the receptacle type has not been specified/configured or the agent monitoring this PDU does not have a SNMP enumeration defined to the type. ')
lgpPduRbEntryCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-specified", 0), ("no-optional-capabilities", 1), ("measurement-only", 2), ("measurement-and-control", 3), ("control-only", 4), ("current-measurement-only", 5), ("current-measurement-and-control", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryCapabilities.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryCapabilities.setDescription('Receptacle branch capabilities describes what an individual branch is capable of. no-optional-capabilities The branch is unable to report measurements and lacks control capabilities. measurement-only The branch is capable of reporting multiple measurements. measurement-and-control The branch is capable of reporting multiple measurements and controlling the state. control-only The branch is capable of controlling the state. current-measurement-only The branch is capable of reporting the current/amperage only. current-measurement-and-control The branch is capable of reporting the current/amperage and has the ability to control the state.')
lgpPduRbEntryLineSource = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("not-specified", 0), ("line-1-neutral", 1), ("line-2-neutral", 2), ("line-3-neutral", 3), ("line-1-line-2", 4), ("line-2-line-3", 5), ("line-3-line-1", 6), ("line-1-line-2-and-line-1-neutral", 7), ("line-2-line-3-and-line-2-neutral", 8), ("line-3-line-1-and-line-3-neutral", 9), ("unknown-line-neutral", 10), ("unknown-line-line", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryLineSource.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryLineSource.setDescription('This represents the line source that is supplying power to this receptacle branch. not-specified The line source supplying power to the load for this receptacle branch has not been specified/configured. line-1-N The load for this receptacle branch is supplied by a line-to-neutral configuration. (line 1 to neutral). line-2-N The load for this receptacle branch is supplied by a line-to-neutral configuration. (line 2 to neutral). line-3-N The load for this receptacle branch is supplied by a line-to-neutral configuration. (line 3 to neutral). line-1-line-2 The load for this receptacle branch is supplied by a line-to-line configuration (line 1 to line 2). line-2-line-3 The load for this receptacle branch is supplied by a line-to-line configuration (line 2 to line 3). line-3-line-1 The load for this receptacle branch is supplied by a line-to-line configuration (line 3 to line 1). line-1-line-2-and-line-1-neutral The load for this mixed receptacle branch is supplied by a line-to-line and line-to-neutral configuration (line 1 to line 2 and line 1 to neutral). line-2-line-3-and-line-2-neutral The load for this mixed receptacle branch is supplied by a line-to-line and line-to-neutral configuration (line 2 to line 3 and line 2 to neutral). line-3-line-1-and-line-3-neutral The load for this mixed receptacle branch is supplied by a line-to-line and line-to-neutral configuration (line 3 to line 1 and line 3 to neutral). unknown-line-neutral The load for this branch is supplied by a line-to-neutral configuration. The system is unable to determine which lines are supporting the load. unknown-line-line The load for this branch is supplied by a line-to-line configuration. The system is unable to determine which lines are supporting the load. ')
lgpPduRbEntryRcpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 60), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryRcpCount.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryRcpCount.setDescription('The number of receptacles on this receptacle branch.')
lgpPduRbEntryEpRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 70), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEpRated.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEpRated.setDescription('Rated Line Voltage for the receptacle branch and its associated receptacles (i.e. This is the nominal line voltage that is available to the connected load; it is NOT a measured voltage.)')
lgpPduRbEntryEcRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 75), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcRated.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEcRated.setDescription('This is the rated input line current for the module (it is NOT the measured current).')
lgpPduRbEntryFreqRated = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 80), Unsigned32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryFreqRated.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryFreqRated.setDescription('This is the rated electrical frequency for the receptacle branch and its associated receptacles')
lgpPduRbEntryEnergyAccum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 85), Unsigned32()).setUnits('0.1 Kilowatt-Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEnergyAccum.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEnergyAccum.setDescription('Total accumulated energy, measured at the receptacle branch input, since the last energy reset. Writing a value of 0 (zero) to this causes the accumulated energy to be reset. Writing a non-zero value is invalid and shall result in a write error and the total energy value remains unchanged. If the energy has not been reset and has not wrapped, then this is the total energy since installation. This value persists across boot events. NOTE: Resetting this value does not reset the values for the individual receptacles.')
lgpPduRbEntryEpLNTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 100), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEpLNTenths.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEpLNTenths.setDescription('The line-to-neutral measurement of the Electrical Potential measured in Volts RMS (Root Mean Squared).')
lgpPduRbEntryPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 115), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryPwr.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryPwr.setDescription('The line-to-neutral measurement of the Real Power (Wattage)')
lgpPduRbEntryAp = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 120), Unsigned32()).setUnits('VoltAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryAp.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryAp.setDescription('The line-to-neutral measurement of the Apparent Power (VA)')
lgpPduRbEntryPf = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 125), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryPf.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryPf.setDescription("The line-to-neutral measurement of the Power Factor of the receptacle branches' input.")
lgpPduRbEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 130), Unsigned32()).setUnits('0.01 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcHundredths.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEcHundredths.setDescription('The line-to-neutral measurement of the Electrical Current measured in Amperes RMS (Root Mean Squared).')
lgpPduRbEntryEcThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 135), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldUndrAlm.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldUndrAlm.setDescription('The threshold at which an under current alarm is activated. If the measured current (lgpPduRbEntryEc) is equal to or below this percentage of the full scale rated value (lgpPduRbEntryEcRated), an under current alarm is activated')
lgpPduRbEntryEcThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 140), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldOvrWarn.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldOvrWarn.setDescription('The threshold at which an over current warning is activated. If the measured current (lgpPduRbEntryEc) is equal to or over this percentage of the full scale rated value (lgpPduRbEntryEcRated), an over current warning is activated')
lgpPduRbEntryEcThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 145), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldOvrAlm.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEcThrshldOvrAlm.setDescription('The threshold at which an over current alarm is activated. If the measured current (lgpPduRbEntryEcLN) is equal to or over this percentage of the full scale rated value (lgpPduRbEntryEcRated), an over current alarm is activated')
lgpPduRbEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 150), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcAvailBeforeAlarmHundredths.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEcAvailBeforeAlarmHundredths.setDescription('The amount that the current/amperage may increase from its present value before an over current alarm occurs.')
lgpPduRbEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 160), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEcUsedBeforeAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEcUsedBeforeAlarm.setDescription('The percent of current utilization relative to the over current alarm threshold.')
lgpPduRbEntryEpLLTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 20, 1, 170), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbEntryEpLLTenths.setStatus('current')
if mibBuilder.loadTexts: lgpPduRbEntryEpLLTenths.setDescription('The line-to-line measurement of the Electrical Potential measured in Volts RMS (Root Mean Squared).')
lgpPduRbLineTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40), )
if mibBuilder.loadTexts: lgpPduRbLineTable.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineTable.setDescription('This table contains a list of PDU receptacle branch line/phase measurements. The table contains zero, one, or many rows, depending upon the number of PDUs and the number of receptacle branches on each PDU that are being monitored. The NMS cannot create or delete rows in the table. The rows are created by the agent based upon the capabilities of the PDU(s) being monitored. Each row in the table represents a particular phase/line measurement of a PDU Receptacle Branch. Rows in the table are uniquely identified by three indexes representing respectively the PDU (lgpPduEntryIndex), the receptacle branch (lgpPduRbEntryIndex) and the line/phase being measured (lgpPduRbLineEntryIndex). ')
lgpPduRbLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbLineEntryIndex"))
if mibBuilder.loadTexts: lgpPduRbLineEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntry.setDescription("This entry defines the attributes to be populated in the various columns of the 'lgpPduRbLineTable'. The table is indexed by three indexes. The 'lgpPduEntryIndex' references a PDU in the 'lgpPduTable' to which this receptacle branch line/phase measurement belongs. The 'lgpPduRbEntryIndex' together with the 'lgpPduEntryIndex' references the receptacle branch in the 'lgpPduRbTable'. The 'lgpPduRbLineEntryIndex' represents the line/phase of the measurements in the row of this table. Together these three indexes uniquely identify a phase/line measurement on a receptacle branch within a PDU being monitored by this agent. ")
lgpPduRbLineEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduRbLineEntryIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryIndex.setDescription("This is the index that indicates the row of the 'lgpPduRbLineTable'")
lgpPduRbLineEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryId.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryId.setDescription('Runtime assigned branch identifier.')
lgpPduRbLineEntryLine = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryLine.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryLine.setDescription('The line number or phase that the measurement for this receptacle branch represents for each measurement in this row of the table. The phases are as follows: Line# Description ----- --------------------------------------------------- 1 Line 1-N (A) for Line-to-Neutral measurements 2 Line 2-N (B) for Line-to-Neutral measurements 3 Line 3-N (C) for Line-to-Neutral measurements 1 Line 1-2 (A-B) for Line-to-Line measurements 2 Line 2-3 (B-C) for Line-to-Line measurements 3 Line 3-1 (C-A) for Line-to-Line measurements ')
lgpPduRbLineEntryEpLNTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 19), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLNTenths.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLNTenths.setDescription('The line-to-neutral measurement of the Electrical Potential measured in Volts RMS (Root Mean Squared).')
lgpPduRbLineEntryEpLN = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 20), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLN.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLN.setDescription('The line-to-neutral measurement of the Electrical Potential measured in Volts RMS (Root Mean Squared).')
lgpPduRbLineEntryEc = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 21), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEc.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEc.setDescription('The line-to-neutral measurement of the Electrical Current measured in Amperes RMS (Root Mean Squared).')
lgpPduRbLineEntryPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 22), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryPwr.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryPwr.setDescription('The line-to-neutral measurement of the Real Power (Wattage)')
lgpPduRbLineEntryAp = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 23), Unsigned32()).setUnits('VoltAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryAp.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryAp.setDescription('The line-to-neutral measurement of the Apparent Power (VA)')
lgpPduRbLineEntryPf = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 24), Integer32()).setUnits('0.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryPf.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryPf.setDescription("The line-to-neutral measurement of the Power Factor of the receptacle branches' input.")
lgpPduRbLineEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 25), Unsigned32()).setUnits('0.01 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcHundredths.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEcHundredths.setDescription('The line-to-neutral measurement of the Electrical Current measured in Amperes RMS (Root Mean Squared).')
lgpPduRbLineEntryEcThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 35), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldUndrAlm.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldUndrAlm.setDescription('The threshold at which an under current alarm is activated. If the measured current (lgpPduRbLineEntryEc) is equal to or below this percentage of the full scale rated value (lgpPduRbEntryEcRated), an under current alarm is activated')
lgpPduRbLineEntryEcThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 36), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldOvrWarn.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldOvrWarn.setDescription('The threshold at which an over current warning is activated. If the measured current (lgpPduRbLineEntryEc) is equal to or over this percentage of the full scale rated value (lgpPduRbEntryEcRated), an over current warning is activated')
lgpPduRbLineEntryEcThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 37), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldOvrAlm.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEcThrshldOvrAlm.setDescription('The threshold at which an over current alarm is activated. If the measured current (lgpPduRbLineEntryEcLN) is equal to or over this percentage of the full scale rated value (lgpPduRbEntryEcRated), an over current alarm is activated')
lgpPduRbLineEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 39), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcAvailBeforeAlarmHundredths.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEcAvailBeforeAlarmHundredths.setDescription('The amount that the current/amperage may increase from its present value before an over current alarm occurs.')
lgpPduRbLineEntryEcAvailBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 40), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcAvailBeforeAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEcAvailBeforeAlarm.setDescription('The amount that the current/amperage may increase from its present value before an over current alarm occurs.')
lgpPduRbLineEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 41), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEcUsedBeforeAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEcUsedBeforeAlarm.setDescription('The percent of current utilization relative to the over current alarm threshold.')
lgpPduRbLineEntryEpLL = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 60), Unsigned32()).setUnits('VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLL.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLL.setDescription('The line-to-line measurement of the Electrical Potential measured in Volts RMS (Root Mean Squared).')
lgpPduRbLineEntryEpLLTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 40, 40, 1, 61), Unsigned32()).setUnits('0.1 VoltRMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLLTenths.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduRbLineEntryEpLLTenths.setDescription('The line-to-line measurement of the Electrical Potential measured in Volts RMS (Root Mean Squared).')
lgpPduReceptacle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50))
if mibBuilder.loadTexts: lgpPduReceptacle.setStatus('current')
if mibBuilder.loadTexts: lgpPduReceptacle.setDescription('This sub-tree contains information about PDU receptacles.')
if mibBuilder.loadTexts: lgpPduReceptacle.setReference('The registrations for the objects in this sub-tree are defined below.')
lgpPduRcpTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 19), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpTableCount.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpTableCount.setDescription('Number of receptacles in the lgpPduRcpTable.')
lgpPduRcpTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20), )
if mibBuilder.loadTexts: lgpPduRcpTable.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpTable.setDescription('This table contains a list of PDU receptacle entries. The table contains numerous rows representing an individual receptacle, depending upon the number and configuration of the PDU(s) being monitored by the agent. The NMS cannot create or delete rows in the table. The rows are created by the agent based upon the capabilities of the managed PDU(s). Each row in the table represents a receptacle in the system. ')
lgpPduRcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRbEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduRcpEntryIndex"))
if mibBuilder.loadTexts: lgpPduRcpEntry.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntry.setDescription("This entry defines the attributes to be populated in the various columns of the 'lgpPduRcpTable'. This table is indexed by three indexes. The 'lgpPduEntryIndex' references a PDU in the 'lgpPduTable' that a given row in this table represents. The 'lgpPduRbEntryIndex' together with the 'lgpPduEntryIndex' specifies a row in the 'lgpPduRbTable' that the receptacle belongs. The 'lgpPduRcpEntryIndex' identifies the particular receptacle within the branch. ")
lgpPduRcpEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduRcpEntryIndex.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryIndex.setDescription('This is the index that indicates the receptacle position on the receptacle branch. This along with the other two indexes on the lgpPduRcpTable uniquely identify the receptacle in this table.')
lgpPduRcpEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryId.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryId.setDescription('A runtime assigned receptacle identification number.')
lgpPduRcpEntryUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryUsrLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryUsrLabel.setDescription('User assigned label for this receptacle.')
lgpPduRcpEntryUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryUsrTag1.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryUsrTag1.setDescription('User assigned Tag to assist in identifying or grouping this receptacle within the end-users domain.')
lgpPduRcpEntryUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryUsrTag2.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryUsrTag2.setDescription('User assigned Tag to assist in identifying or grouping this receptacle within the end-users domain.')
lgpPduRcpEntrySysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntrySysAssignLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntrySysAssignLabel.setDescription('System assigned identifier representing the receptacle. The value is independent of any user assigned label or tag. The exact format of this label is system dependent and is subject to change, therefore, it should not be referenced for programmatic use.')
lgpPduRcpEntryPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPosition.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryPosition.setDescription('A number representing the position of the receptacle within the receptacle branch.')
lgpPduRcpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 7))).clone(namedValues=NamedValues(("not-specified", 0), ("nema-5-20R-20-Amp", 1), ("iec-C13-sheet-F-10-Amp", 2), ("iec-C19-sheet-J-16-Amp", 3), ("cee-7-type-E-schuko", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryType.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryType.setDescription('The type or form of receptacle. The enumerations are specified in well-known industry standard terms and abbreviations.')
lgpPduRcpEntryLineSource = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("not-specified", 0), ("line-1-N", 1), ("line-2-N", 2), ("line-3-N", 3), ("line-1-line-2", 4), ("line-2-line-3", 5), ("line-3-line-1", 6), ("unknown-line-neutral", 7), ("unknown-line-line", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryLineSource.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryLineSource.setDescription('This represents the line source that is supplying power to this receptacle. not-specified The line source supplying power to the load for this receptacle has not been specified/configured. line-1-N The load for this receptacle is supplied by a line-to-neutral configuration. (line 1 to neutral). line-2-N The load for this receptacle is supplied by a line-to-neutral configuration. (line 2 to neutral). line-3-N The load for this receptacle is supplied by a line-to-neutral configuration. (line 3 to neutral). line-1-line-2 The load for this receptacle is supplied by a line-to-line configuration (line 1 to line 2). line-2-line-3 The load for this receptacle is supplied by a line-to-line configuration (line 2 to line 3). line-3-line-1 The load for this receptacle is supplied by a line-to-line configuration (line 3 to line 1). unknown-line-neutral The load for this receptacle is supplied by a line-to-neutral configuration. The system is unable to determine which lines are supporting the load. unknown-line-line The load for this receptacle is supplied by a line-to-line configuration. The system is unable to determine which lines are supporting the load. ')
lgpPduRcpEntryCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-specified", 0), ("no-optional-capabilities", 1), ("measurement-only", 2), ("measurement-and-control", 3), ("control-only", 4), ("current-measurement-only", 5), ("current-measurement-and-control", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryCapabilities.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryCapabilities.setDescription('Receptacle capabilities describes what an individual receptacle is capable of. no-optional-capabilities The receptacle is unable to report measurements and lacks control capabilities. measurement-only The receptacle is capable of reporting multiple measurements. measurement-and-control The receptacle is capable of reporting multiple measurements and controlling the state. control-only The receptacle is capable of controlling the state. current-measurement-only The receptacle is capable of reporting the current/amperage only. current-measurement-and-control The receptacle is capable of reporting the current/amperage and has the ability to control the state.')
lgpPduRcpEntryEp = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 55), Unsigned32()).setUnits('Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEp.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEp.setDescription('Voltage being delivered to the load attached to the receptacle. Alternating Current RMS Electrical Potential measurement.')
lgpPduRcpEntryEpTenths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 56), Unsigned32()).setUnits('0.1 Volts-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEpTenths.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEpTenths.setDescription('Voltage being delivered to the load attached to the receptacle. Alternating Current RMS Electrical Potential measurement.')
lgpPduRcpEntryEc = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 60), Unsigned32()).setUnits('0.1 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEc.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEc.setDescription('Current (amperage) being delivered to the load attached to the receptacle. Electrical Current is measured in Amperes RMS (Root Mean Squared).')
lgpPduRcpEntryEcHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 61), Unsigned32()).setUnits('0.01 Amp-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcHundredths.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcHundredths.setDescription('Current (amperage) being delivered to the load attached to the receptacle. Electrical Current is measured in Amperes RMS (Root Mean Squared).')
lgpPduRcpEntryPwrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 65), Unsigned32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPwrOut.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryPwrOut.setDescription('Real Power (watts) being delivered to the load attached to the receptacle.')
lgpPduRcpEntryApOut = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 70), Unsigned32()).setUnits('Volt-Amp-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryApOut.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryApOut.setDescription('Apparent Power (volt-amps) being delivered to the load attached to the receptacle.')
lgpPduRcpEntryPf = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 75), Unsigned32()).setUnits('.01 Power Factor').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPf.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryPf.setDescription('Receptacle Power Factor, which is the ratio of real power to apparent power (i.e. ratio of watts to volts-amps).')
lgpPduRcpEntryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 80), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryFreq.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryFreq.setDescription('The measured line frequency being delivered to the load attached to the receptacle.')
lgpPduRcpEntryEnergyAccum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 85), Unsigned32()).setUnits('0.1 Kilowatt-Hour').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEnergyAccum.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEnergyAccum.setDescription('Total accumulated energy, measured at the module input, since the last energy reset. Writing a value of 0 (zero) to this causes the accumulated energy to be reset. Writing a non-zero value is invalid and shall result in a write error and the total energy value remains unchanged. If the energy has not been reset and has not wrapped, then this is the total energy since installation. This value persists across boot events.')
lgpPduRcpEntryPwrOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 90), Unsigned32()).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryPwrOnDelay.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryPwrOnDelay.setDescription('The amount of time to wait before power is applied to the receptacle after a power strip is turned on or rebooted. This can be used to stagger the powering of multiple receptacles in order to prevent a large initial current draw.')
lgpPduRcpEntryPwrState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("off-pending-on-delay", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryPwrState.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryPwrState.setDescription('unknown The current power state is unknown. off The current power state of the receptacle is OFF. on The current power state of the receptacle is ON. off-pending-on-delay The current power state of the receptacle is OFF. The power will be ON at the expiration of the ON delay of this receptacle.')
lgpPduRcpEntryControl = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("cycle-power", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryControl.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryControl.setDescription("This object represents the current and persistent (configured) power state of the receptacle. The receptacle can also be controlled by writing to this object. off The current and persisted (configured) power state of the receptacle is 'off'. When writing 'off' to this object the receptacle, if ON, will be turned OFF and its persistent (configured) power state will be set to 'off'. on The current and persisted (configured) power state of the receptacle is 'on'. When writing 'on' to this object the receptacle, if 'off', will be turned 'on' and its persistent (configured) power state will be set to 'on'. cycle-power The receptacle is currently in a power-cycle state. The power to the receptacle is being turned off momentarily and will then revert to being 'on'. When writing 'cycle-power' to this OBJECT if the receptacle is 'on' it will be momentarily turned 'off' and then revert to the 'on' state. The receptacle's persistent (configured) power state will be left unchanged ('on'). If the receptacle is OFF writing cycle-power has no affect on the receptacle. ")
lgpPduRcpEntryControlLock = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryControlLock.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryControlLock.setDescription("This object represents the locked state of the receptacle. unknown The lock state of the receptacle is not known at this time. locked If the receptacle is 'locked' then its current persisted (configured) state can not be changed. unlocked If the receptacle is 'unlocked', then a user with proper permissions may change the receptacles state.")
lgpPduRcpEntryEcThrshldUnderAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 150), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldUnderAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldUnderAlarm.setDescription('The threshold at which an under current alarm is activated. If the measured current (lgpPduRbLineEntryEcLL) is equal to or below this percentage of the full scale rated value (lgpPduRbEntryEcRated), an under current alarm is activated')
lgpPduRcpEntryEcThrshldOverWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 151), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldOverWarn.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldOverWarn.setDescription('The threshold at which an over current warning is activated. If the measured current (lgpPduRbLineEntryEcLL) is equal to or over this percentage of the full scale rated value (lgpPduRbEntryEcRated), an over current warning is activated')
lgpPduRcpEntryEcThrshldOverAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 152), Unsigned32()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldOverAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcThrshldOverAlarm.setDescription('The threshold at which an over current alarm is activated. If the measured current (lgpPduRbLineEntryEcLL) is equal to or over this percentage of the full scale rated value (lgpPduRbEntryEcRated), an over current alarm is activated')
lgpPduRcpEntryEcAvailBeforeAlarmHundredths = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 159), Unsigned32()).setUnits('0.01 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcAvailBeforeAlarmHundredths.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcAvailBeforeAlarmHundredths.setDescription('The amount that the current/amperage may increase from its present value before an over current alarm occurs.')
lgpPduRcpEntryEcAvailBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 160), Unsigned32()).setUnits('0.1 Amps-AC-RMS').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcAvailBeforeAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcAvailBeforeAlarm.setDescription('The amount that the current/amperage may increase from its present value before an over current alarm occurs.')
lgpPduRcpEntryEcUsedBeforeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 161), Unsigned32()).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcUsedBeforeAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcUsedBeforeAlarm.setDescription('The percent of current utilization relative to the over current alarm threshold.')
lgpPduRcpEntryEcCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 162), Unsigned32()).setUnits('0.01').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduRcpEntryEcCrestFactor.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryEcCrestFactor.setDescription('Receptacle current crest factor, which is the peak amplitude of the current waveform divided by the RMS value of the waveform.')
lgpPduRcpEntryBlinkLED = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 50, 20, 1, 200), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("blinkLED", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduRcpEntryBlinkLED.setStatus('current')
if mibBuilder.loadTexts: lgpPduRcpEntryBlinkLED.setDescription('Blink the receptacle LED. Writing blinkLED(2) will cause the LED to blink for a predefined duration of time. Reading this object will always return noAction(1).')
lgpPduAuxiliarySensors = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60))
if mibBuilder.loadTexts: lgpPduAuxiliarySensors.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxiliarySensors.setDescription('This sub-tree contains information about PDU Auxiliary Sensors.')
if mibBuilder.loadTexts: lgpPduAuxiliarySensors.setReference('The registrations for the objects in this sub-tree are defined below.')
lgpPduAuxSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 5), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorCount.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxSensorCount.setDescription('Number of auxiliary sensors in the lgpPduAuxSensorTable.')
lgpPduAuxSensorTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10), )
if mibBuilder.loadTexts: lgpPduAuxSensorTable.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTable.setDescription("This table contains a list of the PDU's Auxiliary Sensors. The table contains zero, one, or more rows, depending upon the number of PDUs being monitored and the number of auxiliary sensors installed for each PDU. The NMS cannot create or delete rows in the table. The rows are created by the agent based upon the capabilities of the PDUs being monitored. Each row in the table represents an auxiliary sensor in a PDU.")
lgpPduAuxSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduAuxSensorIndex"))
if mibBuilder.loadTexts: lgpPduAuxSensorEntry.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorEntry.setDescription("This entry defines the attributes to be populated in the various columns of the 'lgpPduAuxSensorTable'. This table is indexed by both the 'lgpPduEntryIndex' which is the sole index into the 'lgpPduTable' and the 'lgpPduAuxSensorIndex'which is a unique identifier for the auxiliary sensor attached to the given PDU. Taken together these two indexes uniquely identify an Auxiliary Sensor within this agent.")
lgpPduAuxSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduAuxSensorIndex.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorIndex.setDescription('This is the index indicating the nth element of the table.')
lgpPduAuxSensorMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-specified", 0), ("temperature", 1), ("humidity", 2), ("temperature-and-humidity", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorMeasType.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorMeasType.setDescription('not-specified The type of sensor is unknown. temperature The sensor in this row of the table measures temperature. humidity The sensor in this row of the table measures relative humidity. temperature-and-humidity The sensor in this row of the table measures both temperature and relative humidity.')
lgpPduAuxSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorId.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorId.setDescription('System assigned auxiliary sensor identification number. The value assigned is product specific.')
lgpPduAuxSensorSysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorSysAssignLabel.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorSysAssignLabel.setDescription('Label assigned to the auxiliary sensor at runtime by the system. The value is independent of any user assigned label or asset tag.')
lgpPduAuxSensorPositionRelative = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorPositionRelative.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorPositionRelative.setDescription("Auxiliary sensor relative position. This is a one-based value that indicates the sensor's position relative to the sensor string connector.")
lgpPduAuxSensorUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorUsrLabel.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorUsrLabel.setDescription('User assigned auxiliary sensor label.')
lgpPduAuxSensorUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorUsrTag1.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorUsrTag1.setDescription('User assigned Tag to assist in identifying or grouping this auxiliary sensor within the end-users domain.')
lgpPduAuxSensorUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorUsrTag2.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorUsrTag2.setDescription('User assigned Tag to assist in identifying or grouping this auxiliary sensor within the end-users domain.')
lgpPduAuxSensorTempSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorTempSerialNum.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempSerialNum.setDescription("The temperature sensor's globally unique serial number assigned at the time of manufacture.")
lgpPduAuxSensorHumSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorHumSerialNum.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorHumSerialNum.setDescription("The humidity sensor's globally unique serial number assigned at the time of manufacture.")
lgpPduAuxSensorTempMeasurementDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 50), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorTempMeasurementDegF.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempMeasurementDegF.setDescription('Temperature measured at the temperature sensor reported in degrees Fahrenheit.')
lgpPduAuxSensorTempThrshldUndrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 55), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrAlmDegF.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrAlmDegF.setDescription('Under temperature alarm threshold. An alarm is activated if the temperature is equal to or below this value.')
lgpPduAuxSensorTempThrshldOvrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 60), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrAlmDegF.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrAlmDegF.setDescription('Over temperature alarm threshold. An alarm is activated if the temperature is equal to or above this value.')
lgpPduAuxSensorTempThrshldUndrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 65), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrWarnDegF.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrWarnDegF.setDescription('Under temperature warning threshold. A warning is activated if the temperature is equal to or below this value.')
lgpPduAuxSensorTempThrshldOvrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 70), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrWarnDegF.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrWarnDegF.setDescription('Over temperature warning threshold. A warning is activated if the temperature is equal to or above this value.')
lgpPduAuxSensorTempMeasurementDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 75), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorTempMeasurementDegC.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempMeasurementDegC.setDescription('Temperature measured at the temperature sensor reported in degrees Celsius.')
lgpPduAuxSensorTempThrshldUndrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 80), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrAlmDegC.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrAlmDegC.setDescription('Under temperature alarm threshold. An alarm is activated if the temperature is equal to or below this value.')
lgpPduAuxSensorTempThrshldOvrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 85), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrAlmDegC.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrAlmDegC.setDescription('Over temperature alarm threshold. An alarm is activated if the temperature is equal to or above this value.')
lgpPduAuxSensorTempThrshldUndrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 90), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrWarnDegC.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldUndrWarnDegC.setDescription('Under temperature warning threshold. A warning is activated if the temperature is equal to or below this value.')
lgpPduAuxSensorTempThrshldOvrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 95), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrWarnDegC.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorTempThrshldOvrWarnDegC.setDescription('Over temperature warning threshold. A warning is activated if the temperature is equal to or above this value.')
lgpPduAuxSensorHumMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 100), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxSensorHumMeasurement.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorHumMeasurement.setDescription('Relative Humidity measured at the humidity sensor.')
lgpPduAuxSensorHumThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 105), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldUndrAlm.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldUndrAlm.setDescription('Under relative humidity alarm threshold. An alarm is activated if the relative humidity is equal to or below this value.')
lgpPduAuxSensorHumThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 110), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldOvrAlm.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldOvrAlm.setDescription('Over relative humidity alarm threshold. An alarm is activated if the relative humidity is equal to or above this value.')
lgpPduAuxSensorHumThrshldUndrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 115), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldUndrWarn.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldUndrWarn.setDescription('Under relative humidity warning threshold. A warning is activated if the relative humidity is equal to or below this value.')
lgpPduAuxSensorHumThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 10, 1, 120), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldOvrWarn.setStatus('deprecated')
if mibBuilder.loadTexts: lgpPduAuxSensorHumThrshldOvrWarn.setDescription('Over relative humidity warning threshold. A warning is activated if the relative humidity is equal to or above this value.')
lgpPduAuxMeasTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15), )
if mibBuilder.loadTexts: lgpPduAuxMeasTable.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTable.setDescription("This table contains a list of the PDU's Auxiliary Sensor Measurements. The table contains zero, one, or more rows, depending upon the number of PDUs being monitored, the number of auxiliary sensors installed for each PDU, and the number of measurements within each sensor. The NMS cannot create or delete rows in the table. The rows are created by the agent based upon the capabilities of the PDUs being monitored. Each row in the table represents an auxiliary sensor measurement in a PDU.")
lgpPduAuxMeasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1), ).setIndexNames((0, "LIEBERT-GP-PDU-MIB", "lgpPduEntryIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduAuxMeasSensorIndex"), (0, "LIEBERT-GP-PDU-MIB", "lgpPduAuxMeasSensorMeasurementIndex"))
if mibBuilder.loadTexts: lgpPduAuxMeasEntry.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasEntry.setDescription("This entry defines the attributes to be populated in the various columns of the 'lgpPduAuxMeasTable'. This table is indexed by 'lgpPduEntryIndex' which is the sole index into the 'lgpPduTable', 'lgpPduAuxSensorIndex' which is a unique identifier for the auxiliary sensor attached to the given PDU, and 'lgpPduAuxMeasSensorMeasurementIndex' which is the measurement's index identified on the sensor. Taken together these three indexes uniquely identify an Auxiliary Sensor Measurement within this agent.")
lgpPduAuxMeasSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lgpPduAuxMeasSensorIndex.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasSensorIndex.setDescription('This is the index indicating the sensor the measurement is accessed from.')
lgpPduAuxMeasSensorMeasurementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 5), Unsigned32())
if mibBuilder.loadTexts: lgpPduAuxMeasSensorMeasurementIndex.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasSensorMeasurementIndex.setDescription("This is the measurement's index identified on the sensor.")
lgpPduAuxMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("not-specified", 0), ("temperature", 1), ("humidity", 2), ("door-closure", 3), ("contact-closure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasType.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasType.setDescription('not-specified The type of measurement is unknown. temperature The measurement in this row of the table measures temperature. humidity The measurement in this row of the table measures relative humidity. door-closure The measurement in this row of the table measures the state of a door. contact-closure The measurement in this row of the table measures the state of a contact closure.')
lgpPduAuxMeasSensorSysAssignLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasSensorSysAssignLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasSensorSysAssignLabel.setDescription('Label assigned to the auxiliary sensor at runtime by the system. The value is independent of any user assigned label or asset tag.')
lgpPduAuxMeasUsrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasUsrLabel.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasUsrLabel.setDescription('User assigned auxiliary sensor measurement label.')
lgpPduAuxMeasUsrTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasUsrTag1.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasUsrTag1.setDescription('User assigned Tag to assist in identifying or grouping this auxiliary sensor measurement within the end-users domain.')
lgpPduAuxMeasUsrTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasUsrTag2.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasUsrTag2.setDescription('User assigned Tag to assist in identifying or grouping this auxiliary sensor measurement within the end-users domain.')
lgpPduAuxMeasSensorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasSensorSerialNum.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasSensorSerialNum.setDescription("The sensor's globally unique serial number assigned at the time of manufacture.")
lgpPduAuxMeasTempDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 40), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasTempDegF.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempDegF.setDescription('Temperature measured at the temperature sensor reported in degrees Fahrenheit.')
lgpPduAuxMeasTempThrshldUndrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 50), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrAlmDegF.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrAlmDegF.setDescription('Under temperature alarm threshold. An alarm is activated if the temperature is equal to or below this value.')
lgpPduAuxMeasTempThrshldOvrAlmDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 55), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrAlmDegF.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrAlmDegF.setDescription('Over temperature alarm threshold. An alarm is activated if the temperature is equal to or above this value.')
lgpPduAuxMeasTempThrshldUndrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 60), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrWarnDegF.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrWarnDegF.setDescription('Under temperature warning threshold. A warning is activated if the temperature is equal to or below this value.')
lgpPduAuxMeasTempThrshldOvrWarnDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 65), Integer32()).setUnits('0.1 degrees Fahrenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrWarnDegF.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrWarnDegF.setDescription('Over temperature warning threshold. A warning is activated if the temperature is equal to or above this value.')
lgpPduAuxMeasTempDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 70), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasTempDegC.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempDegC.setDescription('Temperature measured at the temperature sensor reported in degrees Celsius.')
lgpPduAuxMeasTempThrshldUndrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 75), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrAlmDegC.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrAlmDegC.setDescription('Under temperature alarm threshold. An alarm is activated if the temperature is equal to or below this value.')
lgpPduAuxMeasTempThrshldOvrAlmDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 80), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrAlmDegC.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrAlmDegC.setDescription('Over temperature alarm threshold. An alarm is activated if the temperature is equal to or above this value.')
lgpPduAuxMeasTempThrshldUndrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 85), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrWarnDegC.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldUndrWarnDegC.setDescription('Under temperature warning threshold. A warning is activated if the temperature is equal to or below this value.')
lgpPduAuxMeasTempThrshldOvrWarnDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 90), Integer32()).setUnits('0.1 degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrWarnDegC.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasTempThrshldOvrWarnDegC.setDescription('Over temperature warning threshold. A warning is activated if the temperature is equal to or above this value.')
lgpPduAuxMeasHum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 95), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasHum.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasHum.setDescription('Relative Humidity measured at the humidity sensor.')
lgpPduAuxMeasHumThrshldUndrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 100), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldUndrAlm.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldUndrAlm.setDescription('Under relative humidity alarm threshold. An alarm is activated if the relative humidity is equal to or below this value.')
lgpPduAuxMeasHumThrshldOvrAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 105), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldOvrAlm.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldOvrAlm.setDescription('Over relative humidity alarm threshold. An alarm is activated if the relative humidity is equal to or above this value.')
lgpPduAuxMeasHumThrshldUndrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 110), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldUndrWarn.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldUndrWarn.setDescription('Under relative humidity warning threshold. A warning is activated if the relative humidity is equal to or below this value.')
lgpPduAuxMeasHumThrshldOvrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 115), Unsigned32()).setUnits('0.1 percent Relative Humidity').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldOvrWarn.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasHumThrshldOvrWarn.setDescription('Over relative humidity warning threshold. A warning is activated if the relative humidity is equal to or above this value.')
lgpPduAuxMeasDrClosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-specified", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasDrClosureState.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasDrClosureState.setDescription('The state of a door sensor measurement. not-specified The door state is unknown. open The door is in the open state. closed The door is in the closed state.')
lgpPduAuxMeasDrClosureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("alarm-when-open", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasDrClosureConfig.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasDrClosureConfig.setDescription('Configure door state alarms. This object provides the ability to select when a door closure measurement should cause an alarm. disabled The door state will never result in alarm. alarm-when-open Activate an alarm when the door state becomes open.')
lgpPduAuxMeasCntctClosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-specified", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpPduAuxMeasCntctClosureState.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasCntctClosureState.setDescription('The state of a contact closure sensor measurement. not-specified The contact closure state is unknown. open The contact closure is in the open state. closed The contact closure is in the closed state.')
lgpPduAuxMeasCntctClosureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 8, 60, 15, 1, 135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("alarm-when-open", 1), ("alarm-when-closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpPduAuxMeasCntctClosureConfig.setStatus('current')
if mibBuilder.loadTexts: lgpPduAuxMeasCntctClosureConfig.setDescription('Configure contact closure state alarms. This object provides the ability to select when a contact closure measurement should activate an alarm. disabled The contact closure state will never result in alarm. alarm-when-open Activate an alarm when the contact closure state becomes open. alarm-when-closed Activate an alarm when the contact closure state becomes closed.')
mibBuilder.exportSymbols("LIEBERT-GP-PDU-MIB", lgpPduAuxSensorId=lgpPduAuxSensorId, lgpPduAuxMeasTable=lgpPduAuxMeasTable, lgpPduEntryUsrTag2=lgpPduEntryUsrTag2, lgpPduRcpEntryEpTenths=lgpPduRcpEntryEpTenths, lgpPduAuxMeasTempThrshldUndrAlmDegF=lgpPduAuxMeasTempThrshldUndrAlmDegF, lgpPduRcpEntryIndex=lgpPduRcpEntryIndex, lgpPduRbEntryPositionRelative=lgpPduRbEntryPositionRelative, lgpPduPsLineEntryEcUsedBeforeAlarm=lgpPduPsLineEntryEcUsedBeforeAlarm, lgpPduAuxiliarySensors=lgpPduAuxiliarySensors, lgpPduRbEntryEcUsedBeforeAlarm=lgpPduRbEntryEcUsedBeforeAlarm, lgpPduPsEntryEcNeutralThrshldOvrWarn=lgpPduPsEntryEcNeutralThrshldOvrWarn, lgpPduRbLineEntryAp=lgpPduRbLineEntryAp, lgpPduRbEntryUsrTag2=lgpPduRbEntryUsrTag2, lgpPduGrpSysStatus=lgpPduGrpSysStatus, lgpPduPsLineEntryEpLNTenths=lgpPduPsLineEntryEpLNTenths, lgpPduRbEntryUsrLabel=lgpPduRbEntryUsrLabel, lgpPduRcpEntryFreq=lgpPduRcpEntryFreq, lgpPduAuxSensorHumThrshldOvrWarn=lgpPduAuxSensorHumThrshldOvrWarn, lgpPduRbEntryEcThrshldUndrAlm=lgpPduRbEntryEcThrshldUndrAlm, lgpPduPsLineEntry=lgpPduPsLineEntry, lgpPduAuxMeasHum=lgpPduAuxMeasHum, lgpPduRbLineEntryEc=lgpPduRbLineEntryEc, lgpPduEntrySysAssignLabel=lgpPduEntrySysAssignLabel, lgpPduRbEntryEcHundredths=lgpPduRbEntryEcHundredths, lgpPduPsEntryFreqRated=lgpPduPsEntryFreqRated, lgpPduRbLineEntryEpLNTenths=lgpPduRbLineEntryEpLNTenths, lgpPduPsEntryId=lgpPduPsEntryId, lgpPduRbTable=lgpPduRbTable, lgpPduReceptacleBranch=lgpPduReceptacleBranch, lgpPduRbEntryPwr=lgpPduRbEntryPwr, lgpPduRbLineEntryEcUsedBeforeAlarm=lgpPduRbLineEntryEcUsedBeforeAlarm, lgpPduRcpEntryEcThrshldOverWarn=lgpPduRcpEntryEcThrshldOverWarn, lgpPduRbTableCount=lgpPduRbTableCount, lgpPduEntryUsrLabel=lgpPduEntryUsrLabel, lgpPduPsEntryEcNeutralThrshldOvrAlarm=lgpPduPsEntryEcNeutralThrshldOvrAlarm, lgpPduPsLineEntryEpLN=lgpPduPsLineEntryEpLN, lgpPduRbEntryEcThrshldOvrAlm=lgpPduRbEntryEcThrshldOvrAlm, lgpPduRbLineEntryEcHundredths=lgpPduRbLineEntryEcHundredths, lgpPduPsEntryIndex=lgpPduPsEntryIndex, lgpPduAuxMeasTempThrshldUndrAlmDegC=lgpPduAuxMeasTempThrshldUndrAlmDegC, lgpPduRbEntryRcpCount=lgpPduRbEntryRcpCount, lgpPduAuxSensorTempThrshldUndrAlmDegC=lgpPduAuxSensorTempThrshldUndrAlmDegC, lgpPduPsEntryEpInputRated=lgpPduPsEntryEpInputRated, lgpPduEntryUsrTag1=lgpPduEntryUsrTag1, lgpPduPsEntrySerialNum=lgpPduPsEntrySerialNum, lgpPduAuxMeasCntctClosureState=lgpPduAuxMeasCntctClosureState, lgpPduRcpEntryEc=lgpPduRcpEntryEc, lgpPduPsLineEntryEcAvailBeforeAlarm=lgpPduPsLineEntryEcAvailBeforeAlarm, lgpPduRbLineEntryLine=lgpPduRbLineEntryLine, lgpPduRbLineEntry=lgpPduRbLineEntry, lgpPduRcpEntryLineSource=lgpPduRcpEntryLineSource, lgpPduAuxSensorIndex=lgpPduAuxSensorIndex, lgpPduPsEntryWiringType=lgpPduPsEntryWiringType, lgpPduRbEntryPf=lgpPduRbEntryPf, lgpPduRcpEntryEcUsedBeforeAlarm=lgpPduRcpEntryEcUsedBeforeAlarm, lgpPduAuxMeasSensorIndex=lgpPduAuxMeasSensorIndex, lgpPduRcpEntry=lgpPduRcpEntry, lgpPduRbLineEntryPwr=lgpPduRbLineEntryPwr, lgpPduPsLineTable=lgpPduPsLineTable, lgpPduAuxSensorTempThrshldOvrAlmDegF=lgpPduAuxSensorTempThrshldOvrAlmDegF, lgpPduPsLineEntryIndex=lgpPduPsLineEntryIndex, lgpPduRcpEntryControl=lgpPduRcpEntryControl, lgpPduRbLineEntryEcThrshldUndrAlm=lgpPduRbLineEntryEcThrshldUndrAlm, lgpPduRbLineTable=lgpPduRbLineTable, lgpPduAuxMeasTempThrshldOvrAlmDegC=lgpPduAuxMeasTempThrshldOvrAlmDegC, lgpPduTableCount=lgpPduTableCount, lgpPduRbEntryEcAvailBeforeAlarmHundredths=lgpPduRbEntryEcAvailBeforeAlarmHundredths, lgpPduReceptacle=lgpPduReceptacle, lgpPduRbEntryAp=lgpPduRbEntryAp, liebertGlobalProductsPduModule=liebertGlobalProductsPduModule, lgpPduEntryPositionRelative=lgpPduEntryPositionRelative, PYSNMP_MODULE_ID=liebertGlobalProductsPduModule, lgpPduAuxSensorTempMeasurementDegF=lgpPduAuxSensorTempMeasurementDegF, lgpPduRbLineEntryPf=lgpPduRbLineEntryPf, lgpPduAuxSensorTempThrshldOvrWarnDegC=lgpPduAuxSensorTempThrshldOvrWarnDegC, lgpPduCluster=lgpPduCluster, lgpPduAuxMeasCntctClosureConfig=lgpPduAuxMeasCntctClosureConfig, lgpPduAuxMeasSensorMeasurementIndex=lgpPduAuxMeasSensorMeasurementIndex, lgpPduRcpEntrySysAssignLabel=lgpPduRcpEntrySysAssignLabel, lgpPduRbLineEntryEpLL=lgpPduRbLineEntryEpLL, lgpPduRcpEntryUsrTag1=lgpPduRcpEntryUsrTag1, lgpPduAuxSensorUsrLabel=lgpPduAuxSensorUsrLabel, lgpPduAuxMeasDrClosureConfig=lgpPduAuxMeasDrClosureConfig, lgpPduAuxSensorMeasType=lgpPduAuxSensorMeasType, lgpPduAuxSensorTempSerialNum=lgpPduAuxSensorTempSerialNum, lgpPduRcpEntryEcThrshldOverAlarm=lgpPduRcpEntryEcThrshldOverAlarm, lgpPduAuxMeasUsrTag1=lgpPduAuxMeasUsrTag1, lgpPduAuxSensorTempThrshldUndrWarnDegF=lgpPduAuxSensorTempThrshldUndrWarnDegF, lgpPduAuxSensorUsrTag1=lgpPduAuxSensorUsrTag1, lgpPduRbEntryEpLNTenths=lgpPduRbEntryEpLNTenths, lgpPduRcpEntryPf=lgpPduRcpEntryPf, lgpPduRcpEntryBlinkLED=lgpPduRcpEntryBlinkLED, lgpPduRbEntryReceptacleType=lgpPduRbEntryReceptacleType, lgpPduAuxMeasTempThrshldUndrWarnDegC=lgpPduAuxMeasTempThrshldUndrWarnDegC, lgpPduAuxSensorTempMeasurementDegC=lgpPduAuxSensorTempMeasurementDegC, lgpPduRcpEntryUsrLabel=lgpPduRcpEntryUsrLabel, lgpPduRbEntrySysAssignLabel=lgpPduRbEntrySysAssignLabel, lgpPduRbLineEntryEpLN=lgpPduRbLineEntryEpLN, lgpPduRcpEntryUsrTag2=lgpPduRcpEntryUsrTag2, lgpPduRcpEntryEcThrshldUnderAlarm=lgpPduRcpEntryEcThrshldUnderAlarm, lgpPduAuxMeasTempThrshldOvrWarnDegC=lgpPduAuxMeasTempThrshldOvrWarnDegC, lgpPduPsLineEntryLine=lgpPduPsLineEntryLine, lgpPduRbEntryEcThrshldOvrWarn=lgpPduRbEntryEcThrshldOvrWarn, lgpPduRcpEntryType=lgpPduRcpEntryType, lgpPduRbLineEntryEcThrshldOvrWarn=lgpPduRbLineEntryEcThrshldOvrWarn, lgpPduRbEntryFreqRated=lgpPduRbEntryFreqRated, lgpPduRcpEntryEp=lgpPduRcpEntryEp, lgpPduRcpTableCount=lgpPduRcpTableCount, lgpPduAuxMeasSensorSysAssignLabel=lgpPduAuxMeasSensorSysAssignLabel, lgpPduAuxMeasTempDegC=lgpPduAuxMeasTempDegC, lgpPduAuxSensorTempThrshldUndrWarnDegC=lgpPduAuxSensorTempThrshldUndrWarnDegC, lgpPduRbEntryCapabilities=lgpPduRbEntryCapabilities, lgpPduRcpEntryEcAvailBeforeAlarmHundredths=lgpPduRcpEntryEcAvailBeforeAlarmHundredths, lgpPduRbLineEntryId=lgpPduRbLineEntryId, lgpPduEntry=lgpPduEntry, lgpPduRbEntryId=lgpPduRbEntryId, lgpPduAuxSensorHumThrshldUndrWarn=lgpPduAuxSensorHumThrshldUndrWarn, lgpPduPsEntry=lgpPduPsEntry, lgpPduRbLineEntryEcAvailBeforeAlarmHundredths=lgpPduRbLineEntryEcAvailBeforeAlarmHundredths, lgpPduRbEntryEpRated=lgpPduRbEntryEpRated, lgpPduAuxSensorUsrTag2=lgpPduAuxSensorUsrTag2, lgpPduPsLineEntryEcAvailBeforeAlarmHundredths=lgpPduPsLineEntryEcAvailBeforeAlarmHundredths, lgpPduAuxMeasHumThrshldOvrWarn=lgpPduAuxMeasHumThrshldOvrWarn, lgpPduRbEntryFirmwareVersion=lgpPduRbEntryFirmwareVersion, lgpPduEntrySerialNumber=lgpPduEntrySerialNumber, lgpPduRcpTable=lgpPduRcpTable, lgpPduAuxMeasType=lgpPduAuxMeasType, lgpPduAuxSensorHumThrshldUndrAlm=lgpPduAuxSensorHumThrshldUndrAlm, lgpPduRbEntry=lgpPduRbEntry, lgpPduAuxMeasUsrTag2=lgpPduAuxMeasUsrTag2, lgpPduRbLineEntryEcAvailBeforeAlarm=lgpPduRbLineEntryEcAvailBeforeAlarm, lgpPduAuxMeasTempDegF=lgpPduAuxMeasTempDegF, lgpPduPsLineEntryId=lgpPduPsLineEntryId, lgpPduAuxSensorHumMeasurement=lgpPduAuxSensorHumMeasurement, lgpPduPsTableCount=lgpPduPsTableCount, lgpPduRbEntrySerialNum=lgpPduRbEntrySerialNum, lgpPduAuxMeasHumThrshldUndrWarn=lgpPduAuxMeasHumThrshldUndrWarn, lgpPduAuxSensorEntry=lgpPduAuxSensorEntry, lgpPduRcpEntryPwrOut=lgpPduRcpEntryPwrOut, lgpPduRbEntryModel=lgpPduRbEntryModel, lgpPduRcpEntryEnergyAccum=lgpPduRcpEntryEnergyAccum, lgpPduPsEntryPwrTotal=lgpPduPsEntryPwrTotal, lgpPduAuxSensorSysAssignLabel=lgpPduAuxSensorSysAssignLabel, lgpPduRcpEntryPosition=lgpPduRcpEntryPosition, lgpPduPsLineEntryEcThrshldOvrAlarm=lgpPduPsLineEntryEcThrshldOvrAlarm, lgpPduAuxSensorTempThrshldOvrWarnDegF=lgpPduAuxSensorTempThrshldOvrWarnDegF, lgpPduAuxMeasUsrLabel=lgpPduAuxMeasUsrLabel, lgpPduRcpEntryCapabilities=lgpPduRcpEntryCapabilities, lgpPduRcpEntryId=lgpPduRcpEntryId, lgpPduAuxSensorCount=lgpPduAuxSensorCount, lgpPduEntrySysStatus=lgpPduEntrySysStatus, lgpPduPsLineEntryEcThrshldOvrWarn=lgpPduPsLineEntryEcThrshldOvrWarn, lgpPduRcpEntryEcCrestFactor=lgpPduRcpEntryEcCrestFactor, lgpPduAuxMeasHumThrshldUndrAlm=lgpPduAuxMeasHumThrshldUndrAlm, lgpPduPsLineEntryEcHundredths=lgpPduPsLineEntryEcHundredths, lgpPduRbEntryIndex=lgpPduRbEntryIndex, lgpPduAuxMeasDrClosureState=lgpPduAuxMeasDrClosureState, lgpPduRcpEntryEcAvailBeforeAlarm=lgpPduRcpEntryEcAvailBeforeAlarm, lgpPduPsTable=lgpPduPsTable, lgpPduPsEntryEnergyAccum=lgpPduPsEntryEnergyAccum, lgpPduTable=lgpPduTable, lgpPduAuxMeasHumThrshldOvrAlm=lgpPduAuxMeasHumThrshldOvrAlm, lgpPduAuxMeasTempThrshldOvrAlmDegF=lgpPduAuxMeasTempThrshldOvrAlmDegF, lgpPduEntryId=lgpPduEntryId, lgpPduAuxMeasEntry=lgpPduAuxMeasEntry, lgpPduPsEntryModel=lgpPduPsEntryModel, lgpPduRcpEntryEcHundredths=lgpPduRcpEntryEcHundredths, lgpPduAuxSensorPositionRelative=lgpPduAuxSensorPositionRelative, lgpPduRbEntryEpLLTenths=lgpPduRbEntryEpLLTenths, lgpPduRbLineEntryEcThrshldOvrAlm=lgpPduRbLineEntryEcThrshldOvrAlm, lgpPduPsLineEntryEpLL=lgpPduPsLineEntryEpLL, lgpPduRcpEntryPwrOnDelay=lgpPduRcpEntryPwrOnDelay, lgpPduEntryIndex=lgpPduEntryIndex, lgpPduRbEntryLineSource=lgpPduRbEntryLineSource, lgpPduRbLineEntryEpLLTenths=lgpPduRbLineEntryEpLLTenths, lgpPduPsEntrySysAssignLabel=lgpPduPsEntrySysAssignLabel, lgpPduAuxSensorTable=lgpPduAuxSensorTable, lgpPduAuxSensorHumThrshldOvrAlm=lgpPduAuxSensorHumThrshldOvrAlm, lgpPduAuxMeasTempThrshldUndrWarnDegF=lgpPduAuxMeasTempThrshldUndrWarnDegF, lgpPduAuxSensorTempThrshldUndrAlmDegF=lgpPduAuxSensorTempThrshldUndrAlmDegF, lgpPduRbLineEntryIndex=lgpPduRbLineEntryIndex, lgpPduAuxSensorTempThrshldOvrAlmDegC=lgpPduAuxSensorTempThrshldOvrAlmDegC, lgpPduRbEntryEnergyAccum=lgpPduRbEntryEnergyAccum, lgpPduRbEntryUsrTag1=lgpPduRbEntryUsrTag1, lgpPduRcpEntryApOut=lgpPduRcpEntryApOut, lgpPduPowerSource=lgpPduPowerSource, lgpPduAuxMeasTempThrshldOvrWarnDegF=lgpPduAuxMeasTempThrshldOvrWarnDegF, lgpPduPsLineEntryEpLLTenths=lgpPduPsLineEntryEpLLTenths, lgpPduPsEntryFirmwareVersion=lgpPduPsEntryFirmwareVersion, lgpPduPsEntryEcInputRated=lgpPduPsEntryEcInputRated, lgpPduPsEntryEcNeutral=lgpPduPsEntryEcNeutral, lgpPduPsLineEntryEc=lgpPduPsLineEntryEc, lgpPduRbEntryEcRated=lgpPduRbEntryEcRated, lgpPduAuxSensorHumSerialNum=lgpPduAuxSensorHumSerialNum, lgpPduPsLineEntryEcThrshldUndrAlarm=lgpPduPsLineEntryEcThrshldUndrAlarm, lgpPduRcpEntryControlLock=lgpPduRcpEntryControlLock, lgpPduAuxMeasSensorSerialNum=lgpPduAuxMeasSensorSerialNum, lgpPduRcpEntryPwrState=lgpPduRcpEntryPwrState, lgpPduEntryRbCount=lgpPduEntryRbCount)
