#
# PySNMP MIB module NBS-SIGCOND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-SIGCOND-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
nbs, = mibBuilder.importSymbols("NBS-CMMC-MIB", "nbs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Integer32, MibIdentifier, Gauge32, NotificationType, Unsigned32, iso, Counter64, Counter32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Integer32", "MibIdentifier", "Gauge32", "NotificationType", "Unsigned32", "iso", "Counter64", "Counter32", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nbsSigCondMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 227))
if mibBuilder.loadTexts: nbsSigCondMib.setLastUpdated('201111300000Z')
if mibBuilder.loadTexts: nbsSigCondMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsSigCondMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsSigCondMib.setDescription('Signal Conditioning mib')
class InterfaceIndex(Integer32):
    pass

nbsSigCondVoaPortGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 1))
if mibBuilder.loadTexts: nbsSigCondVoaPortGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortGrp.setDescription('Variable Optical Attenuation at the port level.')
nbsSigCondVoaFlowGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 2))
if mibBuilder.loadTexts: nbsSigCondVoaFlowGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowGrp.setDescription('Variable Optical Attenuation at the port.frequency.direction level.')
nbsSigCondRamanGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 3))
if mibBuilder.loadTexts: nbsSigCondRamanGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanGrp.setDescription('Raman amplifier information for the port.')
nbsSigCondPortGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 100))
if mibBuilder.loadTexts: nbsSigCondPortGrp.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortGrp.setDescription('Power readings from the port.')
nbsSigCondTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 200))
if mibBuilder.loadTexts: nbsSigCondTraps.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondTraps.setDescription('SNMP Traps or Notifications')
nbsSigCondTrap0 = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 227, 200, 0))
if mibBuilder.loadTexts: nbsSigCondTrap0.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondTrap0.setDescription('SNMP Traps or Notifications')
nbsSigCondVoaPortTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaPortTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTableSize.setDescription('The number of ports supporting variable optical attenuation at the port level.')
nbsSigCondVoaPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 1, 2), )
if mibBuilder.loadTexts: nbsSigCondVoaPortTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTable.setDescription('List of ports supporting variable optical attenuation at the port level.')
nbsSigCondVoaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondVoaPortIfIndex"))
if mibBuilder.loadTexts: nbsSigCondVoaPortEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortEntry.setDescription('')
nbsSigCondVoaPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondVoaPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortIfIndex.setDescription('The Mib2 ifIndex of the attenuable port.')
nbsSigCondVoaPortRxAttenuAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuAdmin.setDescription('Persistent and immediately updated. User-requested attenuation to be applied to received signal, expressed in millidecibels (mdB). Not supported value: -200000')
nbsSigCondVoaPortRxAttenuOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortRxAttenuOper.setDescription('Attenuation actually being applied to received signal, in millidecibels (mdB). Not supported value: -200000')
nbsSigCondVoaPortTxAttenuAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuAdmin.setDescription('Persistent and immediately updated. User-requested attenuation to be applied before transmitting signal, expressed in millidecibels (mdB). Not supported value: -200000')
nbsSigCondVoaPortTxAttenuOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaPortTxAttenuOper.setDescription('Attenuation actually being applied before transmitting signal, in millidecibels (mdB). Not supported value: -200000')
nbsSigCondVoaFlowTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaFlowTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowTableSize.setDescription('The number of attenuable flows in this system.')
nbsSigCondVoaFlowTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 2, 2), )
if mibBuilder.loadTexts: nbsSigCondVoaFlowTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowTable.setDescription('Table of attenuable flows.')
nbsSigCondVoaFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondVoaFlowIfIndex"), (0, "NBS-SIGCOND-MIB", "nbsSigCondVoaFlowWavelength"), (0, "NBS-SIGCOND-MIB", "nbsSigCondVoaFlowDirection"))
if mibBuilder.loadTexts: nbsSigCondVoaFlowEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowEntry.setDescription('Reports status of monitored frequencies.')
nbsSigCondVoaFlowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondVoaFlowIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowIfIndex.setDescription('The Mib2 ifIndex of the optical spectrum analyzer port')
nbsSigCondVoaFlowWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: nbsSigCondVoaFlowWavelength.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowWavelength.setDescription('The nominal wavelength, in picometers, of this channel.')
nbsSigCondVoaFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2))))
if mibBuilder.loadTexts: nbsSigCondVoaFlowDirection.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowDirection.setDescription('Third index of table. The value rx(1) indicates the received signal, and tx(2) indicates the transmitted signal.')
nbsSigCondVoaFlowAttenuAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondVoaFlowAttenuAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowAttenuAdmin.setDescription('Persistent and immediately updated. User-requested attenuation to be applied to signal, expressed in millidecibels (mdB).')
nbsSigCondVoaFlowAttenuOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondVoaFlowAttenuOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondVoaFlowAttenuOper.setDescription('Attenuation actually being applied to signal, in millidecibels (mdB).')
nbsSigCondRamanTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRamanTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanTableSize.setDescription('The number of raman ports in this system.')
nbsSigCondRamanTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 3, 2), )
if mibBuilder.loadTexts: nbsSigCondRamanTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanTable.setDescription('Table of Raman readings.')
nbsSigCondRamanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondRamanIfIndex"))
if mibBuilder.loadTexts: nbsSigCondRamanEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanEntry.setDescription('Raman readings on an individual port.')
nbsSigCondRamanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondRamanIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanIfIndex.setDescription('The Mib2 ifIndex of the Raman port')
nbsSigCondRamanPumpPwrAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrAdmin.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrAdmin.setDescription('Persistent and immediately updated. User-requested pump power, in microwatts (uW). User interfaces should show this in millWatts (mW). Not supported value: -1')
nbsSigCondRamanPumpPwrOper = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrOper.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondRamanPumpPwrOper.setDescription('Agent reported pump power, in microwatts (uW). User interfaces should show this in millWatts (mW). Not supported value: -1')
nbsSigCondPortTableSize = MibScalar((1, 3, 6, 1, 4, 1, 629, 227, 100, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortTableSize.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortTableSize.setDescription('The number of entries in nbsSigCondPortTable.')
nbsSigCondPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 227, 100, 2), )
if mibBuilder.loadTexts: nbsSigCondPortTable.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortTable.setDescription('Table of VOA and VGA ports.')
nbsSigCondPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 227, 100, 2, 1), ).setIndexNames((0, "NBS-SIGCOND-MIB", "nbsSigCondPortIfIndex"))
if mibBuilder.loadTexts: nbsSigCondPortEntry.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortEntry.setDescription('')
nbsSigCondPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 100, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: nbsSigCondPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortIfIndex.setDescription('The Mib2 ifIndex of the Port port')
nbsSigCondPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 100, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortRxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortRxPower.setDescription('Measured receiver power, in millidecibels (mdBm). User interfaces should show this in decibels (dBm). Not supported value: -100000')
nbsSigCondPortTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 100, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortTxPower.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortTxPower.setDescription('Measured transmitter power, in millidecibels (mdBm). User interfaces should show this in decibels (dBm). Not supported value: -100000')
nbsSigCondPortReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 227, 100, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSigCondPortReflection.setStatus('current')
if mibBuilder.loadTexts: nbsSigCondPortReflection.setDescription('Measured back reflection power, in millidecibels (mdBm). User interfaces should show this in decibels (dBm). Not supported value: -100000')
mibBuilder.exportSymbols("NBS-SIGCOND-MIB", nbsSigCondVoaPortRxAttenuAdmin=nbsSigCondVoaPortRxAttenuAdmin, nbsSigCondVoaPortGrp=nbsSigCondVoaPortGrp, nbsSigCondTraps=nbsSigCondTraps, nbsSigCondVoaPortTable=nbsSigCondVoaPortTable, nbsSigCondPortIfIndex=nbsSigCondPortIfIndex, nbsSigCondRamanPumpPwrAdmin=nbsSigCondRamanPumpPwrAdmin, nbsSigCondPortTableSize=nbsSigCondPortTableSize, nbsSigCondRamanGrp=nbsSigCondRamanGrp, nbsSigCondVoaPortEntry=nbsSigCondVoaPortEntry, nbsSigCondVoaFlowTable=nbsSigCondVoaFlowTable, nbsSigCondVoaFlowEntry=nbsSigCondVoaFlowEntry, nbsSigCondVoaFlowWavelength=nbsSigCondVoaFlowWavelength, nbsSigCondVoaFlowTableSize=nbsSigCondVoaFlowTableSize, nbsSigCondVoaPortRxAttenuOper=nbsSigCondVoaPortRxAttenuOper, nbsSigCondVoaFlowDirection=nbsSigCondVoaFlowDirection, nbsSigCondRamanTableSize=nbsSigCondRamanTableSize, nbsSigCondPortTxPower=nbsSigCondPortTxPower, nbsSigCondPortRxPower=nbsSigCondPortRxPower, nbsSigCondVoaPortTxAttenuOper=nbsSigCondVoaPortTxAttenuOper, nbsSigCondTrap0=nbsSigCondTrap0, InterfaceIndex=InterfaceIndex, nbsSigCondVoaFlowGrp=nbsSigCondVoaFlowGrp, nbsSigCondVoaFlowIfIndex=nbsSigCondVoaFlowIfIndex, PYSNMP_MODULE_ID=nbsSigCondMib, nbsSigCondVoaFlowAttenuOper=nbsSigCondVoaFlowAttenuOper, nbsSigCondVoaPortIfIndex=nbsSigCondVoaPortIfIndex, nbsSigCondPortReflection=nbsSigCondPortReflection, nbsSigCondRamanPumpPwrOper=nbsSigCondRamanPumpPwrOper, nbsSigCondVoaPortTableSize=nbsSigCondVoaPortTableSize, nbsSigCondPortTable=nbsSigCondPortTable, nbsSigCondRamanEntry=nbsSigCondRamanEntry, nbsSigCondMib=nbsSigCondMib, nbsSigCondVoaFlowAttenuAdmin=nbsSigCondVoaFlowAttenuAdmin, nbsSigCondPortGrp=nbsSigCondPortGrp, nbsSigCondPortEntry=nbsSigCondPortEntry, nbsSigCondRamanTable=nbsSigCondRamanTable, nbsSigCondVoaPortTxAttenuAdmin=nbsSigCondVoaPortTxAttenuAdmin, nbsSigCondRamanIfIndex=nbsSigCondRamanIfIndex)
