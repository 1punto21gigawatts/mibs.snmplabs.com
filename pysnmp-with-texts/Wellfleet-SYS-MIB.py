#
# PySNMP MIB module Wellfleet-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Bits, MibIdentifier, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, TimeTicks, IpAddress, Unsigned32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Bits", "MibIdentifier", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "TimeTicks", "IpAddress", "Unsigned32", "ObjectIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfSystem, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSystem")
wfSys = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 1))
wfSysDescr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysDescr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysDescr.setDescription("A textual description of the entity including full name and version of the system's hardware type, OS, and networking SW ")
wfSysObjectID = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysObjectID.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysObjectID.setDescription('Provides an unambiguous means for determining the MIB type (old product vs. harpoon MIB).')
wfSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysUpTime.setDescription('Time in seconds/100 since the last cold start')
wfSysContact = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSysContact.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysContact.setDescription('Contact person for this node and where/how to contact them')
wfSysName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSysName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysName.setDescription("Node's fully qualified domain name or administratively assigned name")
wfSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysLocation.setDescription('Physical Location of this Node')
wfSysServices = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 7), Integer32().clone(78)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysServices.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysServices.setDescription('A sum of numbers indicating the set of services the entity offers. For each layer L, add 2**(L - 1). Example: 78 = Layers 2,3,4, and 7.')
wfSysGmtOffset = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysGmtOffset.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysGmtOffset.setDescription('The positive or negative offset from Greenwich Mean Time (GMT). This effectively describes the time zone.')
wfSysMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysMibVersion.setDescription('The version of the private management information base currently being used by the system software. Format is: xV.RR')
wfSysMibRevision = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSysMibRevision.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysMibRevision.setDescription('The revision level of the private management information base currently being used by the system software.')
wfSysAgentType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 29, 30))).clone(namedValues=NamedValues(("other", 1), ("anrptragenttype", 29), ("anhubagenttype", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysAgentType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysAgentType.setDescription("The network management agent's module type")
wfSysMibCounterEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSysMibCounterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysMibCounterEnable.setDescription('Mib II counter Switch')
wfSysMaxUpTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSysMaxUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysMaxUpTime.setDescription('Time in seconds/100 since the last cold start. Max across slots')
wfSysBccHelpFileName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 14), DisplayString().clone('bcc.help')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSysBccHelpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysBccHelpFileName.setDescription('Location of the BCC help file.')
wfSysConsoleSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 1, 15), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSysConsoleSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfSysConsoleSlotMask.setDescription('Slot mask defining which slots Console Interface is eligible to run on. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. If set to 0, then the Console Interface remains on the first booted slot. Default is all slots on a BCN. Affects only multislot routers with single physical console port.')
mibBuilder.exportSymbols("Wellfleet-SYS-MIB", wfSysDescr=wfSysDescr, wfSysName=wfSysName, wfSysUpTime=wfSysUpTime, wfSysMibRevision=wfSysMibRevision, wfSysMibCounterEnable=wfSysMibCounterEnable, wfSysMaxUpTime=wfSysMaxUpTime, wfSysMibVersion=wfSysMibVersion, wfSys=wfSys, wfSysConsoleSlotMask=wfSysConsoleSlotMask, wfSysBccHelpFileName=wfSysBccHelpFileName, wfSysLocation=wfSysLocation, wfSysAgentType=wfSysAgentType, wfSysContact=wfSysContact, wfSysObjectID=wfSysObjectID, wfSysServices=wfSysServices, wfSysGmtOffset=wfSysGmtOffset)
