#
# PySNMP MIB module XYLAN-ASCONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-ASCONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:44:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, Integer32, iso, NotificationType, MibIdentifier, Counter32, ModuleIdentity, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "Integer32", "iso", "NotificationType", "MibIdentifier", "Counter32", "ModuleIdentity", "Counter64", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanAscCArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanAscCArch")
class AscSnapshotAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("excludeFromSnapshot", 1), ("includeInSnapshot", 2))

ascfgControl = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 21, 1))
ascfgInputFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgInputFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgInputFileName.setDescription('The name of the configuration file to be read by the device. The file specified should be present on the device.')
ascfgAction = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noneAvail", 1), ("checkSyntax", 2), ("checkSyntaxAndApply", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgAction.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgAction.setDescription('Determines whether or not configuration values in ascfgInputFile will be applied to current device configuration. A value of checkSyntax causes ascfgInputFile to be checked for syntax, with no changes to the device configuration. A value of checkSyntaxAndApply also causes ascfgInputFile to be checked for syntax. In addition, all commands free of syntax errors are applied to device configuration. Setting this object causes ascfgInputFile to be processed in the manner specified.')
ascfgErrorFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgErrorFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgErrorFileName.setDescription('The name of the file which contains the error messages is automatically generated by the device.')
ascfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgStatus.setDescription('Status of current (if in progress) or most recent application of ASCII configuration data to the device.')
ascfgErrors = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgErrors.setDescription('Number of errors found in most recent application of ASCII configuration file to the device. This object is meaningful only in cases where ascfgStatus has a value of completeErrors.')
ascfgTimerFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgTimerFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgTimerFileName.setDescription('The name of the configuration file to be read later by the device. The file specified should be present on the device.')
ascfgTimerFileTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgTimerFileTime.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgTimerFileTime.setDescription("The (local)time when the configuration file will read by the device. The following formats are valid: YY/MM/DD hh:mm MM/DD hh:mm - uses current year if after current date and time, next year otherwise. hh:mm - uses today's date if later than current time, tommorow's date otherwise. where YY - year (0-38,99) MM - month (1-12) DD - day (1-31) hh - hour (0-23) mm - minute (0-59)")
ascfgTimerFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("pending", 2), ("inprogress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgTimerFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgTimerFileStatus.setDescription('The current status of the ASCII configuration timer.')
ascfgTimerClear = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgTimerClear.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgTimerClear.setDescription('A set of this object causes the ASCII configuration timer to be cleared.')
ascfgSnapshotFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotFileName.setDescription('The name of the configuration snapshot file to be produced by the device. The file specified should not be present on the device.')
ascfgSnapshotInitiate = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotInitiate.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotInitiate.setDescription('A set of this object causes a configuration snapshot to be generated by the device, provided that object ascfgSnapshotFileName has been set.')
ascfgSnapshotIpSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 12), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotIpSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotIpSelect.setDescription('The value of this object determines whether or not IP configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotIpxSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 13), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotIpxSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotIpxSelect.setDescription('The value of this object determines whether or not IPX configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotSystemSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 14), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotSystemSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotSystemSelect.setDescription('The value of this object determines whether or not system configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotSnmpSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 15), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotSnmpSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotSnmpSelect.setDescription('The value of this object determines whether or not SNMP configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotAtmSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 16), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotAtmSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotAtmSelect.setDescription('The value of this object determines whether or not ATM configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotVlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 18), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotVlanSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotVlanSelect.setDescription('The value of this object determines whether or not group/VLAN configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotInterfaceSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 19), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotInterfaceSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotInterfaceSelect.setDescription('The value of this object determines whether or not interface configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotBrdgSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 20), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotBrdgSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotBrdgSelect.setDescription('The value of this object determines whether or not bridging configuration data is included in the snapshot to be generated by the device. Default is excludeFromSnapshot.')
ascfgSnapshotAllSelect = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 21), AscSnapshotAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSnapshotAllSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotAllSelect.setDescription('The value of this object determines whether or not all configuration data is included in the snapshot to be generated by the device. Setting this object is equivalent to setting all the individual snapshot select objects to the same value. Default is excludeFromSnapshot.')
ascfgSnapshotSelectSummary = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgSnapshotSelectSummary.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSnapshotSelectSummary.setDescription('This object is a bit mask which represents the current state of the snapshot select objects. Each selection object is represented by a single bit. The mapping between selection objects and mask bits is as follows: IP 0x001 IPX 0x002 SYSTEM 0x004 SNMP 0x008 ATM 0x010 VLAN 0x040 INTERFACE 0x080 BRIDGING 0x100 ALL 0xffffffff.')
ascfgCommandStr = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgCommandStr.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgCommandStr.setDescription('This object is to be interpreted as a text-based configuration command and executed.')
ascfgCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("success", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ascfgCommandStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgCommandStatus.setDescription('This object contains the completion status of ascfgCommandStr as a text-based configuration command.')
ascfgSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgSaveConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgSaveConfiguration.setDescription('This object triggers the process of saving the configuration info to the cache. It is applicable when the device is in the cache-only mode.')
ascfgConfigurationFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgConfigurationFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgConfigurationFileName.setDescription('The name of the ASCII configuration file to be used by the device to boot. * If a NULL string is passed, that signifies the switch will be booted up using the conventional mpm.cnf file in the flash; ** If a non-NULL string is passed in, and the file is present on the device, then the switch/device will booted up in the cache-only mode, *and* the specified will be used to boot up the device.')
ascfgCacheOnly = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 21, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascfgCacheOnly.setStatus('mandatory')
if mibBuilder.loadTexts: ascfgCacheOnly.setDescription('This object is the flag for the device to toggle its configuration mode. When it is set to TRUE, all the subsequent configuration info is stored in the cache only; when is set to FALSE, the device will sync up the cache and the flash, and subsequent config info is stored in both.')
mibBuilder.exportSymbols("XYLAN-ASCONFIG-MIB", ascfgSnapshotInitiate=ascfgSnapshotInitiate, ascfgSnapshotAtmSelect=ascfgSnapshotAtmSelect, ascfgErrorFileName=ascfgErrorFileName, ascfgSnapshotSnmpSelect=ascfgSnapshotSnmpSelect, ascfgCommandStatus=ascfgCommandStatus, ascfgControl=ascfgControl, ascfgSnapshotIpxSelect=ascfgSnapshotIpxSelect, ascfgSnapshotIpSelect=ascfgSnapshotIpSelect, ascfgSnapshotInterfaceSelect=ascfgSnapshotInterfaceSelect, ascfgErrors=ascfgErrors, ascfgSnapshotAllSelect=ascfgSnapshotAllSelect, ascfgSnapshotFileName=ascfgSnapshotFileName, ascfgConfigurationFileName=ascfgConfigurationFileName, ascfgSnapshotSelectSummary=ascfgSnapshotSelectSummary, ascfgCommandStr=ascfgCommandStr, ascfgSnapshotBrdgSelect=ascfgSnapshotBrdgSelect, ascfgTimerClear=ascfgTimerClear, ascfgTimerFileName=ascfgTimerFileName, AscSnapshotAction=AscSnapshotAction, ascfgTimerFileStatus=ascfgTimerFileStatus, ascfgSnapshotSystemSelect=ascfgSnapshotSystemSelect, ascfgSnapshotVlanSelect=ascfgSnapshotVlanSelect, ascfgStatus=ascfgStatus, ascfgTimerFileTime=ascfgTimerFileTime, ascfgInputFileName=ascfgInputFileName, ascfgAction=ascfgAction, ascfgSaveConfiguration=ascfgSaveConfiguration, ascfgCacheOnly=ascfgCacheOnly)
