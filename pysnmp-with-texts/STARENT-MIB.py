#
# PySNMP MIB module STARENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STARENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
radiusAccServerIndex, radiusAccServerAddress = mibBuilder.importSymbols("RADIUS-ACC-CLIENT-MIB", "radiusAccServerIndex", "radiusAccServerAddress")
radiusAuthServerIndex, radiusAuthServerAddress = mibBuilder.importSymbols("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex", "radiusAuthServerAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, ObjectIdentity, NotificationType, IpAddress, TimeTicks, Counter64, Counter32, Integer32, iso, Bits, enterprises, Unsigned32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "NotificationType", "IpAddress", "TimeTicks", "Counter64", "Counter32", "Integer32", "iso", "Bits", "enterprises", "Unsigned32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DateAndTime, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "TruthValue", "DisplayString")
starentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 8164))
starentMIB.setRevisions(('2018-09-02 00:00', '2018-09-01 00:00', '2018-06-27 00:00', '2018-05-29 00:00', '2018-04-19 00:00', '2018-04-16 00:00', '2018-04-04 00:00', '2018-03-26 00:00', '2018-03-25 00:00', '2017-12-12 00:00', '2017-09-20 00:00', '2017-09-13 00:00', '2017-09-12 00:00', '2017-08-16 00:00', '2017-06-22 00:00', '2017-07-21 00:00', '2017-05-11 00:00', '2017-04-26 00:00', '2017-04-15 00:00', '2017-02-15 00:00', '2016-01-15 00:00', '2017-02-27 00:00', '2017-02-15 00:00', '2016-12-22 00:00', '2016-12-20 00:00', '2016-09-16 00:00', '2016-08-23 00:00', '2016-07-27 00:00', '2016-07-04 00:00', '2016-06-23 00:00', '2016-06-22 00:00', '2016-05-12 00:00', '2016-04-18 00:00', '2016-04-12 00:00', '2016-04-12 00:00', '2016-04-11 00:00', '2015-09-14 00:00', '2015-09-11 00:00', '2014-11-04 00:00', '2014-10-30 00:00', '2014-10-08 00:00', '2014-08-04 00:00', '2014-07-23 00:00', '2014-07-16 00:00', '2014-06-11 00:00', '2014-05-08 00:00', '2014-04-25 00:00', '2013-02-20 00:00', '2013-02-20 00:00', '2013-12-06 00:00', '2013-12-05 00:00', '2013-11-22 00:00', '2013-10-04 00:00', '2013-09-27 00:00', '2013-09-25 00:00', '2013-07-23 00:00', '2013-07-15 00:00', '2013-07-10 00:00', '2013-06-26 00:00', '2013-06-11 00:00', '2013-06-04 00:00', '2013-05-24 00:00', '2013-05-22 00:00', '2013-05-07 00:00', '2013-04-25 00:01', '2013-04-25 00:00', '2013-04-18 00:00', '2013-04-16 00:00', '2013-04-09 00:00', '2013-04-05 00:00', '2013-04-04 00:00', '2013-03-26 00:00', '2013-03-18 00:00', '2013-03-11 00:00', '2013-03-06 00:00', '2013-02-28 00:00', '2013-02-26 00:00', '2012-12-04 00:00', '2012-09-25 00:00', '2012-07-23 00:00', '2012-07-13 00:00', '2012-07-09 00:00', '2012-05-15 00:00', '2012-04-13 00:00', '2012-04-05 00:00', '2011-10-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: starentMIB.setRevisionsDescriptions((' Added Traps 1399 to 1400 for UIDH URL Host Database starUidhURLHostDatabaseUpgradeFailureStatus, starUidhURLHostDatabaseUpgradeSuccessStatus, ', ' Added Traps 1401 to 1402 for critical events for Smart Licensing starSmartLicenseFeatureOOC, starSmartLicenseFeatureOOCClear, ', 'Added trap no 1398 for IFTask Boot Config Application on card<card-num>-cpu<cpu-num>.', 'Added trap no 1394,1395,1396,1397 for Chassis Throughput.', 'Added trap no 1392 for Sx Peer Node Associated.', 'Added trap no 1388, 1389, 1390, 1391 for Control plane monitor packet loss on DI platform starThreshControlPlaneMonitor5MinsLoss, starThreshClearControlPlaneMonitor5MinsLoss, starThreshControlPlaneMonitor60MinsLoss, starThreshClearControlPlaneMonitor60MinsLoss ', 'Added trap no 1384, 1385, 1386, 1387 for Data plane monitor packet loss on DI platform starThreshDataPlaneMonitor5MinsLoss, starThreshClearDataPlaneMonitor5MinsLoss, starThreshDataPlaneMonitor60MinsLoss, starThreshClearDataPlaneMonitor60MinsLoss ', 'Added Trap datatype starSxFailureCause 192', 'Added trap no 1382, 1383 for Sx Path failure. Added Trap datatype starSxInterfaceType 187 Added Trap datatype starSxSelfAddr 188 Added Trap datatype starSxPeerAddr 189 Added Trap datatype starSxPeerNewRecTimeStamp 190 Added Trap datatype starSxPeerOldRecTimeStamp 191', 'Added trap no 1378 ,1379, 1380.1381 for ADC license , Added Trap datatype starP2PPluginVersion 185 Added Trap datatype starADCLicenseExpiryDate 186', 'Added trap no 1376, which informs about change in nic bonding of a port It is informational trap Added Trap datatype starMacaddress 184', 'Added IKEv2 error traps for Control packet flooding. ', 'Added IFTask Health Failure traps. starIFTaskHealthFailure ', 'Added IPSEC UDP error traps for Peer based Source-IP. ', 'Added IPSEC UDP error traps for System level. ', 'Added trap 1363 and 1364 for total-volume and total-volume clear Added objects starRuleBaseName, starRuleDefName starGroupOfRuledef ', 'Added trap no 1362, which informs about change in Logging Level of a facility (which is inferior to default Logging Level i.e., error) by an user LogLevelChanged ', 'Added trap no 1361, which informs about Logging Event IDs been disabled by an user DisabledEventIDs ', ' Added Traps 1349 to 1356 for critical events for Smart Licensing starSmartLicenseServiceOOC, starSmartLicenseServiceOOCClear, starSmartLicenseEvalMode, starSmartLicenseEvalModeClear, starSmartLicenseEvalModeExpire, starSmartLicenseEvalModeExpireClear, starSmartLicenseCSSMConntectionFail, starSmartLicenseCSSMConnectionFailClear ', 'Hat heartbeat loss on the card w.r.t peer cards for DI platform starThreshHatHb5MinsLoss, starThreshClearHatHb5MinsLoss, starThreshHatHb60MinsLoss, starThreshClearHatHb60MinsLoss ', ' Added additional argument starSlotSerialNumber to applicable threshold port traps', 'Maximum Concurrent CLI Sessions enforcement on StarOS starGlobalCLISessionsLimit, starUserCLISessionsLimit ', 'Hat heartbeat loss on the card w.r.t peer cards for DI platform starThreshHatHb5MinsLoss, starThreshClearHatHb5MinsLoss, starThreshHatHb60MinsLoss, starThreshClearHatHb60MinsLoss ', 'Added trap nos. 1534, 1535 and 1536 with the following variables starDiameterVpnName, starDiameterRlfContext, starDiameterPeerName, starDiameterEndpointName, starDiameterRlfECode starDiameterRlfTps, starDiameterRlfDelayTolerance, starDiameterRlfQueuePercent, starDiameterDiamproxyInstance ', ' DOS Attack & Decryption Fail Traps added.', 'Log Source (LS) log volume threshold is added.', 'Added Management Card switchover due to HD Raid unrecoverable failure trap', ' Added additional argument starSlotSerialNumber to all related traps', 'Mark the unsupported traps to obsolete', 'Corrected the names of the traps in StarOS and Starent.my file', 'Added SI and DI keywords in Traps', 'Added DDF Reload Trap', ' Removed starThreshDiscRsn, and added correct object to starThreshSNXDisconnectReason and starThreshClearSNXDisconnectReason', ' Streamlined all the numbers from 21.x to 17.x', ' Corrected Traps and MIB oid numbers ', ' Corrected few trap numbers and errors in mib file', ' Added trap no. 1312 with the following variables starStatFilesizeLimit, starStatFilesizeMeasured Added trap no. 1313 with the following variables starStatFilesizeLimit, starStatFilesizeMeasured ', ' Removed trap number 1191(starSEAGWServiceStart) and 1192(starSEAGWServiceStop) definition added', ' Removed trap number 1533 and 1534 and replaced with 1290 and 1291 supporting code', ' Added trap number 1288 and 1289 supporting code', ' Added trap no. 1282 with the following variables starGTPCRLFSessMgrInst, starGTPCRLFVPNName, starGTPCRLFVPNId, starGTPCRLFContextName, starGTPCRLFCurrAppTPS Added trap no. 1283 with the following variables starGTPCRLFSessMgrInst, starGTPCRLFVPNName, starGTPCRLFVPNId, starGTPCRLFContextName, starGTPCRLFCurrAppDelayTol Added trap no. 1284 with the following variables starGTPCRLFSessMgrInst, starGTPCRLFVPNName, starGTPCRLFVPNId, starGTPCRLFContextName, Added trap no. 1285 with the following variables starGTPCRLFSessMgrInst, starGTPCRLFVPNName, starGTPCRLFVPNId, starGTPCRLFContextName, ', ' Added starNpudriverECCError trap supporting code', ' removing the extra 1533 and 1534 traps', ' Added starNpudriverECCError trap(reserving the trap id) at 1281', ' Added Severity in starChassisCrashListFull Traps', ' Added starBFDSessUp, starBFDSessDown and starSRPSwitchoverOccured Traps', ' Added MME Related threshold traps from 440 to 445', ' Removing SGSN substring from trap number 1219 and 1220', ' Extended starChassisType to support KVM QvPC-SI chassis', ' Corrected IPv6 from IPv4 to trap number 1200', 'Fixed following issues 1. Revision not in reverse chronological order 2. not-accessible starent Index objects are modified to MAX-ACCESS accessible-for-notify for those sent in trap', 'Added two MIBs (starMRMEServiceStart, starMRMEServiceStop) for MRME service starMRMEServiceStart- starentTraps 1264 starMRMEServiceStop- starentTraps 1265 Added two MIBs (starThreshPerServiceSAMOGSessions, starThreshClearPerServiceSAMOGSessions) for per service samog-service starThreshPerServiceSAMOGSessions- starentTraps 519 starThreshClearPerServiceSAMOGSessions - starentTraps 520', 'Changed following notification names starThreshAAAAcctArchiveQueue-1, starThreshClearAAAAcctArchiveQueue-1, starThreshAAAAcctArchiveQueue-2, starThreshClearAAAAcctArchiveQueue-2, starThreshAAAAcctArchiveQueue-3, starThreshClearAAAAcctArchiveQueue-3 to starThreshAAAAcctArchiveQueue1, starThreshClearAAAAcctArchiveQueue1, starThreshAAAAcctArchiveQueue2, starThreshClearAAAAcctArchiveQueue2, starThreshAAAAcctArchiveQueue3, starThreshClearAAAAcctArchiveQueue3. Added , in starLIRcvryErrType object. Changed StarUDPPortNum object to starUDPPortNum object in following notifications: starECSreaddressServerDown, starECSreaddressServerUp. Added definition for starMMEInitialDisallowReason object. Added new number for QvPC-SI platform in starChassisType object.', ' Added missing object starFractE1TribTimeslots to starSDHFractE1LMIUp notification , changed MAX-ACCESS to accessible-for-notify from not-accessible for the following objects starFractE1TribSlot, starFractE1TribPort, starFractE1TribPath, starFractE1TribTug2, starFractE1TribTu12 and moved starFractE1TribBundNum object to obsolete state.', 'Change starSlotPort to storSlotNum in ApsChannelMismatch trap 1150', 'Replaced underscore sign with hyphen from starServiceType enum ', 'Modified SEVERITY from ERROR to MAJOR for following traps: starPortDown, starSRPConnDown, starLAGGroupDown. Changed starPortSlot, starPortNum, starContextName and starSRPIpAddress objects access to accessible-for-notify.', 'Changed the name of trap starThreshNAPTPortChunks to starThreshNATPortChunks and starThreshClearNAPTPortChunks to starThreshClearNATPortChunks', 'Changed the APS related traps according to the implementation present in trap_api.c following traps are modified: starApsCommandSuccess, starApsCommandFailure, starApsSwitchSuccess, starApsSwitchFailure, starApsModeMismatch, starApsChannelMismatch, starApsByteMismatch, starApsFeProtLineFailure, starApsLossOfRedundancy, starApsLossOfRedundancyClear.', 'Changed object type from starContextName to starCLIContext for the following traps: starLocalUserAdded, starLocalUserRemoved, starOsShellAccessed, starTestModeEntered, starLicenseFeaturesModified, starHiddenAccessEnabled, starHiddenAccessDisabled.', ' Added the missing objects and modified the summary field for starTechSuppPasswdChanged trap', 'Corrected starChassisCrashListFull description section', 'changed starEGTPInterfaceType Enum in trap number 1112', 'changed starEGTPInterfaceType Enum changed STATE and SEVERITY fields for All APS, related notifications.', 'Deprecated following traps starCardSPCSwitchoverStart, starCardSPCSwitchoverComplete, starCardSPCSwitchoverFailed starCardPACMigrateStart, starCardPACMigrateComplete, starCardPACMigrateFailed, Added following traps for above trap as respective replacement starCardSwitchoverStart, starCardSwitchoverComplete, starCardSwitchoverFailed, starCardMigrateStart, starCardMigrateComplete, starCardMigrateFailed', 'Added two MIBs (starSAMOGServiceStart, starSAMOGServiceStop) for SAMOG service. starSAMOGServiceStart- starentTraps 1251 starSAMOGServiceStop- starentTraps 1252', 'Changed SUMMARY clause for starLongDurTimerExpiry notification. Changed MAX-ACCESS to accessible-for-notify for following objects: starSubMSID, starSubName, starSubTimerDuration, starSubLongDurTimeoutAction, starSubSetupTime, starSubHomeAddr, starSubHomeAddrv6.', 'changed STATE and SEVERITY fields for starSDHPathHopUp, starSDHE1TribUp and starSDHFractE1LMIDown notifications.', 'Added trap no. 1251 with the following variables starPMIPVpnName, starPMIPServName, starPMIPSelfAddrType, starPMIPSelfAddr, starPMIPPeerAddrType, starPMIPPeerAddr, starPMIPPeerOldRstCnt, starPMIPPeerNewRstCnt, starPMIPPeerSessCnt, starPMIPFailureReason Added trap no. 1252 with the following variables starPMIPVpnName, starPMIPServName, starPMIPSelfAddrType, starPMIPSelfAddr, starPMIPPeerAddrType, starPMIPPeerAddr', ' Added the following flags in APS related traps', 'changed SEVERITY level from INFORMATIONAL to WARNING for starSGSNRMMemWarn notification.', 'Added trap no. 1177, with the following variables starSlotNum, starCardType, starPortSlot', 'Modified starPCFUnreachable description section Updated correct object name starEISServerVPNName in starEISServerAlive starEISServerDead traps. Added starPCFReachable trap support', 'Changed starFanNum range in SYNTAX and MAX-ACCESS. Added starFanLocation ASR5500 fan location details. Changed SUMMARY clause for following traps starFanFailed, starFanRemoved, starFanInserted,', 'Changed SYNTAX clause from Integer32 to Gauge32 for following objects: starCPUUser, starCPUSystem, starCPUIdle, starCPUIO, starCPUIRQ, starCPUMemUsed, starCPUMemCached Changed SYNTAX clause from Integer32 to Gauge32 and also changed range for following objects: starCPULoad1Min, starCPULoad5Min, starCPULoad15Min, starCPUNumProcesses.', 'Added context name to the OBJECTS and updated ARGUMENTS field for the following traps: starLocalUserAdded, starLocalUserRemoved, starOsShellAccessed, starTestModeEntered, starLicenseFeaturesModified, starHiddenAccessEnabled, starHiddenAccessDisabled', 'Changed starThreshMeasuredPct SYNTAX from Integer32 to Gauge32. Changed starPortNum object range. Changed SUMMARY clause in starM3UAPCUnavailable and starM3UAPCAvailable traps. Changed objects from starThreshInt and starThreshMeasuredInt to starThreshPct and starThreshMeasuredPct and also changed SUMMARY and ARGUMENTS clauses in following traps: starThreshIPPoolAvail, starThreshClearIPPoolAvail, starThreshIPPoolHold, starThreshClearIPPoolHold, starThreshIPPoolUsed, starThreshClearIPPoolUsed, starThreshIPPoolRelease, starThreshClearIPPoolRelease, starThreshIPPoolFree, starThreshClearIPPoolFree, starThreshNATPortChunks, starThreshClearNATPortChunks, starThreshPortHighActivity, starThreshClearPortHighActivity, starThreshTpoDnsFailure, starThreshClearTpoDnsFailure, starThreshDnsLookupFailure, starThreshClearDnsLookupFailure, starThreshBGPRoutes, starThreshClearBGPRoutes. Changed SUMMARY and ARGUMENTS clauses in following traps: starThreshCPUUtilization, starThreshClearCPUUtilization, starThreshCPUUtilization10Sec, starThreshClearCPUUtilization10Sec, starThreshCPUMemUsage, starThreshClearCPUMemUsage, starThreshCPUOrbsWarn, starThreshClearCPUOrbsWarn, starThreshCPUOrbsCritical, starThreshClearCPUOrbsCritical, starThreshCPUCryptoCoresUtilization, starThreshClearCPUCryptoCoresUtilization, starThreshLicense, starThreshClearLicense, starThreshPortRxUtil, starThreshClearPortRxUtil, starThreshPortTxUtil, starThreshClearPortTxUtil, starThreshAAAAuthFailRate, starThreshClearAAAAuthFailRate, starThreshAAAAcctFailRate, starThreshClearAAAAcctFailRate, starThreshAAARetryRate, starThreshClearAAARetryRate, starThreshAAAMgrQueue, starThreshClearAAAMgrQueue, starThreshAAAAcctArchiveQueue-1, starThreshClearAAAAcctArchiveQueue-1, starThreshAAAAcctArchiveQueue-2, starThreshClearAAAAcctArchiveQueue-2, starThreshAAAAcctArchiveQueue-3, starThreshClearAAAAcctArchiveQueue-3, starThreshRPSetupFailRate, starThreshClearRPSetupFailRate, starThreshPPPSetupFailRate, starThreshClearPPPSetupFailRate, starThreshStorageUtilization, starThreshClearStorageUtilization, starThreshIPSECIKEFailRate, starThreshClearIPSECIKEFailRate, starThreshEPDGIKEV2SetupFailureRate, starThreshClearEPDGIKEV2SetupFailureRate, starThreshNPUUtilization, starThreshClearNPUUtilization, starThreshDiameterRetryRate, starThreshClearDiameterRetryRate, starThreshSystemCapacity, starThreshClearSystemCapacity, starThreshEDRFileSpace, starThreshClearEDRFileSpace, starThreshCDRFileSpace, starThreshClearCDRFileSpace, starThreshCardTemperatureNearPowerOffLimit, starThreshClearCardTemperaturePowerOffLimit.', 'Changed SYNTAX clause for starPortNum and starRedundantPortNum objects', 'Changed starSlotMappingTable table DESCRIPTION.', 'Removed starSGSNAllocated and starSGSNUsed obeects and added starThreshInt and starThreshMeasuredInt objects for starSGSNRMCPUWarn, starSGSNRMCPUWarnClear, starSGSNRMMemWarn, starSGSNRMMemWarnClear, starRMCPUOver, starRMCPUOverClear, starSGSNRMMemOver and starSGSNRMMemOverClear.', 'Changed object from starServiceVpnID to starServiceVpnName and arguments macro in starSessionRejectNoResource Notification. Added commas(,) in ARGUMENTS field of starServiceLossLCClear Trap definition. Added additional object starCPUSlot and starCPUNumber in starThreshCPUOrbsWarn, starThreshClearCPUOrbsWarn, starThreshCPUOrbsCritical and starThreshClearCPUOrbsCritical traps.', 'starSAEGWSessThreshold and starSAEGWSessThresholdClear Notification objects have been added. Fixed starServiceLossLCClear ARGUMENTS field information.', 'ASR5500 slot types are added in StarentSlotType', 'The Notifications starThreshPortSpecRxUtil,starThreshClearPortSpecRxUtil, starThreshPortSpecTxUtil,starThreshClearPortSpecTxUtil has been moved to deprecated state.', 'The object starPowerFilterUnitFailed has been moved to deprecated state', 'The latest version of this MIB module',))
if mibBuilder.loadTexts: starentMIB.setLastUpdated('201806270000Z')
if mibBuilder.loadTexts: starentMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: starentMIB.setContactInfo(' Email: support@starentnetworks.com Web: www.cisco.com Cisco Systems, Inc. 30 International Place Tewksbury, MA 01876 (978) 851-1100')
if mibBuilder.loadTexts: starentMIB.setDescription("Cisco Systems ASR 5xxx series of multimedia core platforms (ASR 5000, ASR 5500) Designed exclusively for mobile and fixed mobile converged applications, Cisco's ASR 5xxx series products provide a high-performance, highly intelligent platform ideally suited for development in mobile operator networks to fulfill key multimedia core networking functions. The platform features 2G/3G/4G and WiFi multi-service access indepedent capabilities coupled with a carrier class high-availability design. Harnessing subscriber awareness with an abundant supply of distributed processing resources, the ASR 5xxx series offers a variety of high touch Inline Services to enable service providers to monetize the value of the network while enriching the overall subscriber experience.")
class StarentSlotType(TextualConvention, Integer32):
    description = 'Describes the type of a slot. Each slot in the chassis is build to contain specific type(s) of cards. Only a card of one of the appropriate types can be put into a specific slot.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("pactac", 2), ("spc", 3), ("lc", 4), ("rcc", 5), ("spio", 6))

class StarentCardType(TextualConvention, Integer32):
    description = 'Describes the type of a card. Each type represents a physically different card which would have a unique part number.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))
    namedValues = NamedValues(("none", 1), ("unknown", 2), ("spc", 3), ("pac", 4), ("spio", 5), ("rcc", 6), ("lceth", 7), ("lcgeth", 8), ("lcds3", 9), ("tac", 10), ("lcoc3", 11), ("lcoc12", 12), ("smc", 13), ("psc", 14), ("lcqgeth", 15), ("lctgeth", 16), ("vmc", 17), ("vpc", 18), ("vlceth1p", 19), ("lcgeth2", 20), ("lceth2", 21), ("psc2", 22), ("psc3", 23), ("pscA", 24), ("ppc", 25), ("lcchan3p2", 26), ("lcchan3p4", 27), ("fanctrl6", 28), ("vioc", 29), ("gpdsp", 30), ("xme", 31), ("vop", 32), ("edc", 33), ("mio", 34), ("mio10g10p", 35), ("mio10g20p", 36), ("mio40g2p", 37), ("mio40g4p", 38), ("mio40g12p", 39), ("miodc", 40), ("fsc", 41), ("dpc", 42), ("mdpc", 43), ("dpcdc", 44), ("ssc", 45), ("voc", 46), ("cfc", 47), ("sfc1p", 48), ("sfc2p", 49), ("sfc3p", 50), ("sfc4p", 51), ("dpc2", 52), ("mio2", 53))

class StarentVersionNum(TextualConvention, OctetString):
    description = ' '
    status = 'current'
    displayHint = '256a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class StarRelayState(TextualConvention, Integer32):
    description = 'The state of a Central Office (CO) relay.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("on", 2), ("unknown", 3))

class StarLongDurTimeoutAction(TextualConvention, Integer32):
    description = 'The action taken by the system upon detection of a long-duration session'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("detection", 1), ("disconnection", 2), ("notapplicable", 3), ("dormantdisconnection", 4), ("dormantdetection", 5))

class StarShortName(TextualConvention, OctetString):
    description = 'A short identification string. Follows the same conventions as the DisplayString TEXTUAL-CONVENTION.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class StarShortID(TextualConvention, OctetString):
    description = 'An abbreviated form for identifying a service, composed of the first 8 characters of the context name, and the first 8 characters of a service name, seperated by (:)'
    status = 'current'
    displayHint = '17a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 17)

class StarMediumID(TextualConvention, OctetString):
    description = 'An abbreviated form for identifying a context-specific object, composed of the first 8 characters of the context name, and the first 16 characters of the object name, seperated by (:)'
    status = 'current'
    displayHint = '25a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 25)

class StarENBID(TextualConvention, OctetString):
    description = 'An eNodeB identifier in the form aaa:bbb:cccccccc'
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

class StarQOSTPAction(TextualConvention, Integer32):
    description = 'Traffic Policing Action'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("notapplicable", 1), ("transmit", 2), ("drop", 3), ("loweripprecedence", 4))

class StarOSPFNeighborState(TextualConvention, Integer32):
    description = 'OSPF Neighbore State'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exstart", 5), ("exchange", 6), ("loading", 7), ("full", 8))

starentMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1))
starentChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 1))
starChassisCriticalCO = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 1), StarRelayState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisCriticalCO.setStatus('current')
if mibBuilder.loadTexts: starChassisCriticalCO.setDescription('The current state of the Critical Central Office (CO) relay')
starChassisMajorCO = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 2), StarRelayState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisMajorCO.setStatus('current')
if mibBuilder.loadTexts: starChassisMajorCO.setDescription('The current state of the Major Central Office (CO) relay')
starChassisMinorCO = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 3), StarRelayState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisMinorCO.setStatus('current')
if mibBuilder.loadTexts: starChassisMinorCO.setDescription('The current state of the Minor Central Office (CO) relay')
starChassisAction = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noaction", 1), ("aco", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starChassisAction.setStatus('current')
if mibBuilder.loadTexts: starChassisAction.setDescription('Trigger to perform certain system-wide operations. noaction(1) performs no operation. It is the normal value received when this attribute is read. aco(2) triggers the Alarm Cut-Off, which shuts off all of the Central Office (CO) audible/visual relays. reset(3) triggers a system-wide restart. It will completely disrupt service on the device.')
starTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTimeTicks.setStatus('current')
if mibBuilder.loadTexts: starTimeTicks.setDescription('Time ticks since the Epoch')
starChassisAudibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 7), StarRelayState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisAudibleAlarm.setStatus('current')
if mibBuilder.loadTexts: starChassisAudibleAlarm.setDescription('The current state of the chassis Audible Alarm')
starChassisUTCTime = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisUTCTime.setStatus('current')
if mibBuilder.loadTexts: starChassisUTCTime.setDescription('The current time on the chassis, in UTC format')
starChassisLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisLocalTime.setStatus('current')
if mibBuilder.loadTexts: starChassisLocalTime.setDescription('The current time on the chassis, converted to the local timezone')
starChassisType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 0), ("st16", 1), ("st40", 2), ("xt2", 3), ("st20", 4), ("asr5000", 5), ("asr5500", 6), ("ssi", 7), ("ssi-kvm-guest", 8), ("ssi-kvm-vsm-guest", 9), ("qvpc-di", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisType.setStatus('current')
if mibBuilder.loadTexts: starChassisType.setDescription('The type of physical chassis')
starChassisDescription = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisDescription.setStatus('current')
if mibBuilder.loadTexts: starChassisDescription.setDescription('A brief description of the chassis')
starChassisSWRevision = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisSWRevision.setStatus('current')
if mibBuilder.loadTexts: starChassisSWRevision.setDescription('The software revision running on the chassis')
starChassisPeakCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('percentage times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisPeakCpuUsage.setStatus('current')
if mibBuilder.loadTexts: starChassisPeakCpuUsage.setDescription('Percentage of the system level peak cpu usage.starChassisPeakCpuUsage is the percentage value times 100; for example,2.3% would be represented as 230')
starChassisPeakMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2097152))).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starChassisPeakMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: starChassisPeakMemoryUsage.setDescription('The system level peak memory usage, in kilobytes, rounded down (i.e. 1023 bytes = 0 kilobytes)')
starentSlots = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 2))
starSlotTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1), )
if mibBuilder.loadTexts: starSlotTable.setStatus('current')
if mibBuilder.loadTexts: starSlotTable.setDescription('A table containing information on all of the slots')
starSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starSlotEntry.setStatus('current')
if mibBuilder.loadTexts: starSlotEntry.setDescription('Information about a particular slot')
starSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSlotNum.setStatus('current')
if mibBuilder.loadTexts: starSlotNum.setDescription('The slot number')
starSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 2), StarentSlotType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotType.setStatus('current')
if mibBuilder.loadTexts: starSlotType.setDescription('The type of the slot.')
starCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 3), StarentCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardType.setStatus('current')
if mibBuilder.loadTexts: starCardType.setDescription('The type of the card which is plugged into a slot')
starCardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("offline", 3), ("booting", 4), ("ready", 5), ("standby", 6), ("active", 7), ("migratefrom", 8), ("migrateto", 9), ("starting", 10), ("initializing", 11), ("secondary", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardOperState.setStatus('current')
if mibBuilder.loadTexts: starCardOperState.setDescription('The current operational state of the card')
starCardAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardAdminState.setStatus('current')
if mibBuilder.loadTexts: starCardAdminState.setDescription('The administrative state of the card')
starCardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 6), StarentVersionNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardRevision.setStatus('current')
if mibBuilder.loadTexts: starCardRevision.setDescription('The revision number of the card that is physically present in this slot')
starCardLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardLastStateChange.setStatus('current')
if mibBuilder.loadTexts: starCardLastStateChange.setDescription('The time when the last state change occurred for this row. A manager could poll this variable to determine if information has changed.')
starCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("notapplicable", 2), ("standby", 3), ("active", 4), ("activepac", 5), ("activetac", 6), ("activepsc", 7), ("activevpc", 8), ("activedpc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardMode.setStatus('current')
if mibBuilder.loadTexts: starCardMode.setDescription('The desired mode of the card. This field is applicable only to slots which can contain PAC/PSC and TAC cards. The active(4) value is obsolete and has been replaces with activepac(5) and activetac(6)')
starCardPacStandbyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardPacStandbyPriority.setStatus('current')
if mibBuilder.loadTexts: starCardPacStandbyPriority.setDescription(' ')
starCardHaltIssued = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notapplicable", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardHaltIssued.setStatus('current')
if mibBuilder.loadTexts: starCardHaltIssued.setDescription('Only applicable to SPC cards')
starCardLock = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("locked", 2), ("unlocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardLock.setStatus('current')
if mibBuilder.loadTexts: starCardLock.setDescription('Identifies if the card lock is currently engaged. A value of locked(2) means that the lock is engaged, and thus the card could not be removed from the chassis. A value of unlocked(3) means that the lock is not engaged, and an operator could remove the card from the chassis. A value of unknown(1) should represent that there is no card physically in the slot.')
starCardRebootPending = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardRebootPending.setStatus('current')
if mibBuilder.loadTexts: starCardRebootPending.setDescription('Identifies if a reboot operation is currently pending for this card.')
starCardUsable = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardUsable.setStatus('current')
if mibBuilder.loadTexts: starCardUsable.setDescription('Identifies if the card is currently usable.')
starCardSinglePOF = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notapplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardSinglePOF.setStatus('current')
if mibBuilder.loadTexts: starCardSinglePOF.setDescription('Identifies if this card represents a single point of failure (POF). A value of no(1) indicates that this card is supported by a redundant card which can take over in the event of a failure. A value of yes(2) indicates that this card does not have a redundant partner, and that a failure of this card could result in service interruption.')
starCardAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("unconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardAttachment.setStatus('current')
if mibBuilder.loadTexts: starCardAttachment.setDescription('Identifies if the card is currently attached to another card (a PAC/PSC attached to a line card, or visa versa, for example')
starCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 16), Gauge32()).setUnits('degrees Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCardTemperature.setStatus('current')
if mibBuilder.loadTexts: starCardTemperature.setDescription('The temperature, in degrees Celcius, as measured on the card. A value of 0 indicates that the temperature cannot be read, or that the card is not present. The maximum measurable temperature is 70 C')
starSlotVoltage1dot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 20), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage1dot5.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage1dot5.setDescription('The current voltage, in millivolts, of the nominal 1.5V power supply. The working range for this card is the range defined by variables starSlotVoltage1dot5LowThresh and starSlotVoltage1dot5HighThresh. A value of 0 indicates that this voltage level is not present on this card, or that the card is not present. This attribute is obsolete.')
starSlotVoltage1dot5LowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 21), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage1dot5LowThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage1dot5LowThresh.setDescription('The voltage level, in millivolts, which is the lowest allowable value for the nominal 1.5V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage1dot5HighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 22), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage1dot5HighThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage1dot5HighThresh.setDescription('The voltage level, in millivolts, which is the highest allowable value for the nominal 1.5V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage1dot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 23), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage1dot8.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage1dot8.setDescription('The current voltage, in millivolts, of the nominal 1.8V power supply. The working range for this card is the range defined by variables starSlotVoltage1dot8LowThresh and starSlotVoltage1dot8HighThresh. A value of 0 indicates that this voltage level is not present on this card, or that the card is not present. This attribute is obsolete.')
starSlotVoltage1dot8LowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 24), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage1dot8LowThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage1dot8LowThresh.setDescription('The voltage level, in millivolts, which is the lowest allowable value for the nominal 1.8V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage1dot8HighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 25), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage1dot8HighThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage1dot8HighThresh.setDescription('The voltage level, in millivolts, which is the highest allowable value for the nominal 1.8V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage2dot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 26), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage2dot5.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage2dot5.setDescription('The current voltage, in millivolts, of the nominal 2.5V power supply. The working range for this card is the range defined by variables starSlotVoltage2dot5LowThresh and starSlotVoltage2dot5HighThresh. A value of 0 indicates that the voltage cannot be read, or that the card is not present. This attribute is obsolete.')
starSlotVoltage2dot5LowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 27), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage2dot5LowThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage2dot5LowThresh.setDescription('The voltage level, in millivolts, which is the lowest allowable value for the nominal 2.5V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage2dot5HighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 28), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage2dot5HighThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage2dot5HighThresh.setDescription('The voltage level, in millivolts, which is the highest allowable value for the nominal 2.5V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage3dot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 29), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage3dot3.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage3dot3.setDescription('The current voltage, in millivolts, of the nominal 3.3V power supply. The working range for this card is the range defined by variables starSlotVoltage3dot3LowThresh and starSlotVoltage3dot3HighThresh. A value of 0 indicates that the voltage cannot be read, or that the card is not present. This attribute is obsolete.')
starSlotVoltage3dot3LowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 30), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage3dot3LowThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage3dot3LowThresh.setDescription('The voltage level, in millivolts, which is the lowest allowable value for the nominal 3.3V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage3dot3HighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 31), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage3dot3HighThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage3dot3HighThresh.setDescription('The voltage level, in millivolts, which is the highest allowable value for the nominal 3.3V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage5dot0 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 32), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage5dot0.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage5dot0.setDescription('The current voltage, in millivolts, of the nominal 5.0V power supply. The working range for this card is the range defined by variables starSlotVoltage5dot0LowThresh and starSlotVoltage5dot0HighThresh. A value of 0 indicates that the voltage cannot be read, or that the card is not present. This attribute is obsolete.')
starSlotVoltage5dot0LowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 33), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage5dot0LowThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage5dot0LowThresh.setDescription('The voltage level, in millivolts, which is the lowest allowable value for the nominal 5.0V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotVoltage5dot0HighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 34), Gauge32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltage5dot0HighThresh.setStatus('obsolete')
if mibBuilder.loadTexts: starSlotVoltage5dot0HighThresh.setDescription('The voltage level, in millivolts, which is the highest allowable value for the nominal 5.0V power supply. A value of 0 indicates that there is no card present. This attribute is obsolete.')
starSlotNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotNumPorts.setStatus('current')
if mibBuilder.loadTexts: starSlotNumPorts.setDescription('Number of data ports on this card. This value will be 0 for cards that do not contain ports, such as SPC/SMC/PAC/PSC/TAC cards, or for slots which do not contain a card. This attribute is obsolete.')
starSlotAction = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSlotAction.setStatus('current')
if mibBuilder.loadTexts: starSlotAction.setDescription('Trigger to perform certain slot operations. noaction(1) performs no operation. It is the normal value received when this attribute is read. reset(2) causes the slot to be reset')
starSlotVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("outofrange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotVoltageState.setStatus('current')
if mibBuilder.loadTexts: starSlotVoltageState.setDescription('The state of the voltage supplies on the card. A value of unknown(0) means that the state cannot be identified; normal(1) represents a properly functioning card; outofrange(2) indicates that one or more voltage sources are not within their specified operating range.')
starSlotNumCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotNumCPU.setStatus('current')
if mibBuilder.loadTexts: starSlotNumCPU.setDescription('The number of general-purpose CPUs on this card')
starSlotPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotPartNumber.setStatus('current')
if mibBuilder.loadTexts: starSlotPartNumber.setDescription('The part number of this card')
starSlotPartRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotPartRevision.setStatus('current')
if mibBuilder.loadTexts: starSlotPartRevision.setDescription('The revision number of this card')
starSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotSerialNumber.setStatus('current')
if mibBuilder.loadTexts: starSlotSerialNumber.setDescription('The serial number of this card')
starSlotCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotCLEICode.setStatus('current')
if mibBuilder.loadTexts: starSlotCLEICode.setDescription('The CLEI code of this card')
starSlotCiscoModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotCiscoModelName.setStatus('current')
if mibBuilder.loadTexts: starSlotCiscoModelName.setDescription('Cisco-defined Product Identifier (PID). The PID is an alphanumeric identifier used to identify specific Cisco product hardware, and may be up to 18 characters in length. starSlotCiscoModelName will be blank (zero characters) if no PID is available.')
starSlotCiscoHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotCiscoHardwareRev.setStatus('current')
if mibBuilder.loadTexts: starSlotCiscoHardwareRev.setDescription("Cisco-defined Version Identifier (VID). The VID is used to track the version of the Customer-Orderable Cisco Product Identifier (PID) [starSlotCiscoModelName]. The data convention for VID is 'V' followed by a two digit number. VID numbering typically begins at 'V01' but can be initiated at a higher value. starSlotCiscoHardwareRev will be blank (zero characters) if no VID is available.")
starSlotCiscoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotCiscoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: starSlotCiscoSerialNumber.setDescription('Cisco-defined Serial Number (SN). The SN is an 11 character identifier used in conjunction with the Cisco Product Identifier (PID) [starSlotCiscoModelName] to identify a unique product or Field Replaceable Unit (FRU) of a product. starSlotCiscoSerialNumber will be blank (zero characters) if no VID is available.')
starDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDeviceNum.setStatus('current')
if mibBuilder.loadTexts: starDeviceNum.setDescription('The device number')
starSerdesNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSerdesNum.setStatus('current')
if mibBuilder.loadTexts: starSerdesNum.setDescription('The serdes lane index number')
starentSlotMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 3))
starSlotMappingTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 3, 1), )
if mibBuilder.loadTexts: starSlotMappingTable.setStatus('current')
if mibBuilder.loadTexts: starSlotMappingTable.setDescription('A table identifying all of the slot mappings. This table is applicable only to starChassisType ASR5000 platform.')
starSlotMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 3, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSlotMappingNum"))
if mibBuilder.loadTexts: starSlotMappingEntry.setStatus('current')
if mibBuilder.loadTexts: starSlotMappingEntry.setDescription('Information about a particular slot mapping')
starSlotMappingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 48)))
if mibBuilder.loadTexts: starSlotMappingNum.setStatus('current')
if mibBuilder.loadTexts: starSlotMappingNum.setDescription('The slot number. This always represents a slot in the back of the chassis.')
starSlotMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("direct", 3), ("rcc", 4), ("cross", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotMappingType.setStatus('current')
if mibBuilder.loadTexts: starSlotMappingType.setDescription('The type of the slot mapping. The value none(1) represents that there is no mapping, which typically represents that there is no card present in this slot.')
starSlotMappingRCCNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotMappingRCCNum.setStatus('current')
if mibBuilder.loadTexts: starSlotMappingRCCNum.setDescription('Identifies which RCC card is responsible for this mapping. This value is only valid if the value of starSlotMappingType is rcc(3).')
starSlotMappingToSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSlotMappingToSlot.setStatus('current')
if mibBuilder.loadTexts: starSlotMappingToSlot.setDescription('The slot number this slot is mapped to. This always represents a slot in the front of the chassis')
starentFans = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 4))
starFanTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 4, 1), )
if mibBuilder.loadTexts: starFanTable.setStatus('current')
if mibBuilder.loadTexts: starFanTable.setDescription('A table containing information on all of the fan controllers')
starFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 4, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starFanNum"))
if mibBuilder.loadTexts: starFanEntry.setStatus('current')
if mibBuilder.loadTexts: starFanEntry.setDescription('Information about a particular fan controller')
starFanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFanNum.setStatus('current')
if mibBuilder.loadTexts: starFanNum.setDescription('The fan controller number')
starFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("upper", 1), ("lower", 2), ("lowerFront", 3), ("lowerRear", 4), ("upperFront", 5), ("upperRear", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFanLocation.setStatus('current')
if mibBuilder.loadTexts: starFanLocation.setDescription('The physical location of the fan controller')
starFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFanStatus.setStatus('current')
if mibBuilder.loadTexts: starFanStatus.setDescription('A bitmask representing the status of the fan tray. 0x01 All Fans Good 0x02 Multiple Fans Bad 0x04 Single Fan Bad 0x08 HB Error 0x10 COM A Error 0x20 COM B Error 0x40 COMM Error 0x80 Not Present 0x100 Present 0x200 Filter Clogged 0x400 Unknown A normal, properly functioning fan tray would show 0x101 (257 decimal), meaning it is present (0x100) and all fans are working (0x1)')
starFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("speed50", 2), ("speed55", 3), ("speed60", 4), ("speed65", 5), ("speed70", 6), ("speed75", 7), ("speed80", 8), ("speed85", 9), ("speed90", 10), ("speed95", 11), ("speed100", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFanSpeed.setStatus('current')
if mibBuilder.loadTexts: starFanSpeed.setDescription('The speed of the fans controlled by this fan controller. The values represent the percentage that the speed is running relative to the maximum possible speed, speed100(12)')
starentLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 5))
starLogTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 5, 1), )
if mibBuilder.loadTexts: starLogTable.setStatus('current')
if mibBuilder.loadTexts: starLogTable.setDescription('A table containing information about all of the system logs')
starLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 5, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starLogName"))
if mibBuilder.loadTexts: starLogEntry.setStatus('current')
if mibBuilder.loadTexts: starLogEntry.setDescription('Information about a particular system log')
starLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 5, 1, 1, 1), StarShortName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLogName.setStatus('current')
if mibBuilder.loadTexts: starLogName.setDescription('The name of the system log')
starLogCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 5, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLogCurSize.setStatus('current')
if mibBuilder.loadTexts: starLogCurSize.setDescription('The size, in bytes, of this log')
starLogMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: starLogMaxSize.setDescription('The maximum size, in bytes, of this log')
starLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starLogText.setStatus('current')
if mibBuilder.loadTexts: starLogText.setDescription('For use in LogMsg trap')
starentAlertMan = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 8))
starentFeedback = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 8, 1))
starMaxAlertsPerTime = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMaxAlertsPerTime.setStatus('current')
if mibBuilder.loadTexts: starMaxAlertsPerTime.setDescription('The maximum number of SNMP Traps which will be sent within the time period specified by starWindowTime')
starWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 8, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: starWindowTime.setStatus('current')
if mibBuilder.loadTexts: starWindowTime.setDescription('The amount of time within which no more than starMaxAlertsPerTime SNMP Traps will be sent.')
starAlertSendingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAlertSendingEnabled.setStatus('current')
if mibBuilder.loadTexts: starAlertSendingEnabled.setDescription('Shows if SNMP traps are currently enabled or disabled. Traps are disabled when more than starMaxAlertsPerTime traps are sent within the starWindowTime time period. A value of true(1) indicates that traps will still be sent. A value of false(2) indicates that traps are no longer being generated')
starentPolledLog = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 8, 2))
starentPower = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 9))
starPowerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 9, 1), )
if mibBuilder.loadTexts: starPowerTable.setStatus('current')
if mibBuilder.loadTexts: starPowerTable.setDescription('A table containing information about all power filters')
starPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 9, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starPowerNumber"))
if mibBuilder.loadTexts: starPowerEntry.setStatus('current')
if mibBuilder.loadTexts: starPowerEntry.setDescription('Information about a particular power filter')
starPowerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerA", 1), ("powerB", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPowerNumber.setStatus('current')
if mibBuilder.loadTexts: starPowerNumber.setDescription('The identifying number for this power filter.')
starPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("failed", 2), ("notpresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPowerState.setStatus('current')
if mibBuilder.loadTexts: starPowerState.setDescription('The state of the power filter. The value active(1) means that the power filter is present and operational. The value failed(2) means that the power filter is present, but not operational. The value not-present(3) means that the power filter is not physically present in the system.')
starentCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 10))
starCPUTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1), )
if mibBuilder.loadTexts: starCPUTable.setStatus('current')
if mibBuilder.loadTexts: starCPUTable.setDescription('A table containing information about all CPUs')
starCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starCPUSlot"), (0, "STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUEntry.setStatus('current')
if mibBuilder.loadTexts: starCPUEntry.setDescription('Information about a particular CPU')
starCPUSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCPUSlot.setStatus('current')
if mibBuilder.loadTexts: starCPUSlot.setDescription('The slot number of the card holding this CPU')
starCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCPUNumber.setStatus('current')
if mibBuilder.loadTexts: starCPUNumber.setDescription('The CPU number within this card. Numbers begin at 0.')
starCPUUser = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('percentage times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUUser.setStatus('current')
if mibBuilder.loadTexts: starCPUUser.setDescription('Percentage of the CPU spent running user processes. starCPUUser is the percentage value times 100; for example, 2.3% would be represented as 230.')
starCPUSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('percentage times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUSystem.setStatus('current')
if mibBuilder.loadTexts: starCPUSystem.setDescription('Percentage of the CPU spent running system processes. starCPUSystem is the percentage value times 100; for example, 2.3% would be represented as 230.')
starCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('percentage times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUIdle.setStatus('current')
if mibBuilder.loadTexts: starCPUIdle.setDescription('Percentage of the CPU spent idle. starCPUIdle is the percentage value times 100; for example, 2.3% would be represented as 230.')
starCPUIO = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('percentage times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUIO.setStatus('current')
if mibBuilder.loadTexts: starCPUIO.setDescription('Percentage of the CPU spent running io processes. starCPUIo is the percentage value times 100; for example, 2.3% would be represented as 230.')
starCPUIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('percentage times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUIRQ.setStatus('current')
if mibBuilder.loadTexts: starCPUIRQ.setDescription('Percentage of the CPU spent running irq processes. starCPUIrq is the percentage value times 100; for example, 2.3% would be represented as 230.')
starCPULoad1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('processes times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPULoad1Min.setStatus('current')
if mibBuilder.loadTexts: starCPULoad1Min.setDescription('The average CPU load over the last minute. The CPU load is defined to be the number of processes who are ready to run. starCPULoad1Min is the average number of processes times 100; for example, 2.45 would be represented as 245.')
starCPULoad5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('processes times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPULoad5Min.setStatus('current')
if mibBuilder.loadTexts: starCPULoad5Min.setDescription('The average CPU load over the last 5 minutes. The CPU load is defined to be the number of processes who are ready to run. starCPULoad5Min is the average number of processes times 100; for example, 2.45 would be represented as 245.')
starCPULoad15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setUnits('processes times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPULoad15Min.setStatus('current')
if mibBuilder.loadTexts: starCPULoad15Min.setDescription('The average CPU load over the last 15 minutes. The CPU load is defined to be the number of processes who are ready to run. starCPULoad15Min is the average number of processes times 100; for example, 2.45 would be represented as 245.')
starCPUMemTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUMemTotal.setStatus('current')
if mibBuilder.loadTexts: starCPUMemTotal.setDescription('The total amount of memory dedicated to this CPU, in kilobytes')
starCPUMemUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUMemUsed.setStatus('current')
if mibBuilder.loadTexts: starCPUMemUsed.setDescription('The total amount of memory consumed by this CPU, in kilobytes')
starCPUNumProcesses = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setUnits('processes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUNumProcesses.setStatus('current')
if mibBuilder.loadTexts: starCPUNumProcesses.setDescription('The total number of processes which exist on this CPU')
starCPUMemCached = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUMemCached.setStatus('current')
if mibBuilder.loadTexts: starCPUMemCached.setDescription('The total amount of memory consumed by the (reusable) memory cache on this CPU, in kilobytes')
starCPUCoreNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCPUCoreNumber.setStatus('current')
if mibBuilder.loadTexts: starCPUCoreNumber.setDescription('The CPU core number within this card.')
starentSessInP = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 12))
starSessInProgCalls = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgCalls.setStatus('current')
if mibBuilder.loadTexts: starSessInProgCalls.setDescription('The number of sessions current in progress')
starSessInProgActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgActiveCalls.setStatus('current')
if mibBuilder.loadTexts: starSessInProgActiveCalls.setDescription('The number of sessions with active calls')
starSessInProgDormantCalls = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgDormantCalls.setStatus('current')
if mibBuilder.loadTexts: starSessInProgDormantCalls.setDescription('The number of sessions assocated with dormant calls')
starSessInProgArrived = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgArrived.setStatus('current')
if mibBuilder.loadTexts: starSessInProgArrived.setDescription('The number of sessions in the arrived state')
starSessInProgLCPNeg = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgLCPNeg.setStatus('current')
if mibBuilder.loadTexts: starSessInProgLCPNeg.setDescription('The number of sessions in the link control protocol negotiation state')
starSessInProgLCPUp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgLCPUp.setStatus('current')
if mibBuilder.loadTexts: starSessInProgLCPUp.setDescription('The number of sessions in the link control protocol up state')
starSessInProgAuthenticating = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgAuthenticating.setStatus('current')
if mibBuilder.loadTexts: starSessInProgAuthenticating.setDescription('The number of sessions in the authenticating state')
starSessInProgAuthenticated = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgAuthenticated.setStatus('current')
if mibBuilder.loadTexts: starSessInProgAuthenticated.setDescription('The number of sessions in the authenticated state')
starSessInProgIPCPUp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgIPCPUp.setStatus('current')
if mibBuilder.loadTexts: starSessInProgIPCPUp.setDescription('The number of sessions in the IP control protocol up state')
starSessInProgSIPConn = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgSIPConn.setStatus('current')
if mibBuilder.loadTexts: starSessInProgSIPConn.setDescription('The number of sessions in the Simple IP connected state')
starSessInProgMIPConn = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgMIPConn.setStatus('current')
if mibBuilder.loadTexts: starSessInProgMIPConn.setDescription('The number of sessions in the Mobile IP connected state')
starSessInProgDisc = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 12, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessInProgDisc.setStatus('current')
if mibBuilder.loadTexts: starSessInProgDisc.setDescription('The number of sessions in the disconnecting state')
starentNPUMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 11))
starNPUMgrTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 11, 1), )
if mibBuilder.loadTexts: starNPUMgrTable.setStatus('current')
if mibBuilder.loadTexts: starNPUMgrTable.setDescription('A table containing information about all NPU Managers')
starNPUMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 11, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starNPUMgrNumber"))
if mibBuilder.loadTexts: starNPUMgrEntry.setStatus('current')
if mibBuilder.loadTexts: starNPUMgrEntry.setDescription('Information about a particular NPU Manager')
starNPUMgrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starNPUMgrNumber.setStatus('current')
if mibBuilder.loadTexts: starNPUMgrNumber.setDescription('The identity of this NPU')
starentSessMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 13))
starSessMgrCount = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessMgrCount.setStatus('current')
if mibBuilder.loadTexts: starSessMgrCount.setDescription('The total number of session manager instances')
starSessTtlArrived = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlArrived.setStatus('current')
if mibBuilder.loadTexts: starSessTtlArrived.setDescription('The total number of requested sessions')
starSessTtlRejected = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlRejected.setStatus('current')
if mibBuilder.loadTexts: starSessTtlRejected.setDescription('The total number of rejected sessions')
starSessTtlConnected = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlConnected.setStatus('current')
if mibBuilder.loadTexts: starSessTtlConnected.setDescription('The total number of sessions which were connected')
starSessTtlAuthSucc = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlAuthSucc.setStatus('current')
if mibBuilder.loadTexts: starSessTtlAuthSucc.setDescription('The total number of sessions where authentication was successful')
starSessTtlAuthFail = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlAuthFail.setStatus('current')
if mibBuilder.loadTexts: starSessTtlAuthFail.setDescription('The total number of sessions which failed authentication')
starSessTtlLCPUp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlLCPUp.setStatus('current')
if mibBuilder.loadTexts: starSessTtlLCPUp.setDescription('The total number of sessions in the link control protocol up state')
starSessTtlIPCPUp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlIPCPUp.setStatus('current')
if mibBuilder.loadTexts: starSessTtlIPCPUp.setDescription('The total number of IP control protocol up state')
starSessTtlSrcViol = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlSrcViol.setStatus('current')
if mibBuilder.loadTexts: starSessTtlSrcViol.setDescription('The total number of sessions which had an invalid source')
starSessTtlKeepFail = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlKeepFail.setStatus('current')
if mibBuilder.loadTexts: starSessTtlKeepFail.setDescription('The total number of sessions which had a keep alive failure')
starSessTtlOctForwarded = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 11), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlOctForwarded.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlOctForwarded.setDescription('The total number of octets forwarded (data + control)')
starSessTtlRPRegAccept = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlRPRegAccept.setStatus('current')
if mibBuilder.loadTexts: starSessTtlRPRegAccept.setDescription('The total number of Initial RRQ Accepted')
starSessTtlRPRegAcceptInterPDSN = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlRPRegAcceptInterPDSN.setStatus('current')
if mibBuilder.loadTexts: starSessTtlRPRegAcceptInterPDSN.setDescription('The total number of Inter PDSN Handoff RRQ Accepted')
starSessCurrPPPSessions = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessCurrPPPSessions.setStatus('current')
if mibBuilder.loadTexts: starSessCurrPPPSessions.setDescription('The current number of PPP sessions')
starSessTtlTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 15), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlTxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlTxBytes.setDescription('The total number of bytes transmitted from mobiles')
starSessTtlRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 16), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlRxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlRxBytes.setDescription('The total number of bytes received by mobiles')
starSessTtlSIPTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 17), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlSIPTxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlSIPTxBytes.setDescription('The total number of bytes transmitted from mobiles using SIP')
starSessTtlSIPRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 18), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlSIPRxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlSIPRxBytes.setDescription('The total number of bytes received by mobiles using SIP')
starSessTtlMIPTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 19), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlMIPTxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlMIPTxBytes.setDescription('The total number of bytes transmitted from mobiles using MIP')
starSessTtlMIPRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 20), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlMIPRxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlMIPRxBytes.setDescription('The total number of bytes received by mobiles using MIP')
starSessTtlOctForwardedGB = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 21), Counter32()).setUnits('Gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlOctForwardedGB.setStatus('deprecated')
if mibBuilder.loadTexts: starSessTtlOctForwardedGB.setDescription('The total number of octets forwarded (data + control)')
starSessTtlOctForwardedRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 22), Counter64()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlOctForwardedRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlOctForwardedRev1.setDescription('The total number of octets forwarded (data + control). This object deprecates the old starSessTtlOctForwarded object.')
starSessTtlTxBytesRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 23), Counter64()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlTxBytesRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlTxBytesRev1.setDescription('The total number of bytes transmitted from mobiles. This object deprecates the old starSessTtlTxBytes object.')
starSessTtlRxBytesRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 24), Counter64()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlRxBytesRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlRxBytesRev1.setDescription('The total number of bytes received by mobiles. This object deprecates the old starSessTtlRxBytes object.')
starSessTtlSIPTxBytesRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 25), Counter64()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlSIPTxBytesRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlSIPTxBytesRev1.setDescription('The total number of bytes transmitted from mobiles using SIP. This object deprecates the old starSessTtlSIPTxBytes object.')
starSessTtlSIPRxBytesRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 26), Counter64()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlSIPRxBytesRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlSIPRxBytesRev1.setDescription('The total number of bytes received by mobiles using SIP. This object deprecates the old starSessTtlSIPRxBytes object.')
starSessTtlMIPTxBytesRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 27), Counter64()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlMIPTxBytesRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlMIPTxBytesRev1.setDescription('The total number of bytes transmitted from mobiles using MIP. This object deprecates the old starSessTtlMIPTxBytes object.')
starSessTtlMIPRxBytesRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 28), Counter64()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlMIPRxBytesRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlMIPRxBytesRev1.setDescription('The total number of bytes received by mobiles using MIP. This object deprecates the old starSessTtlMIPRxBytes object.')
starSessTtlOctForwardedGBRev1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 13, 29), Counter64()).setUnits('Gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessTtlOctForwardedGBRev1.setStatus('current')
if mibBuilder.loadTexts: starSessTtlOctForwardedGBRev1.setDescription('The total number of octets forwarded (data + control). This object deprecates the old starSessTtlOctForwardedGB object.')
starentAAAMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 14))
starAAAMgrCount = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAAMgrCount.setStatus('current')
if mibBuilder.loadTexts: starAAAMgrCount.setDescription('The total number of AAA manager instances')
starAAATtlRequests = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAATtlRequests.setStatus('current')
if mibBuilder.loadTexts: starAAATtlRequests.setDescription('The total number of AAA requests')
starAAATtlAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAATtlAuthRequests.setStatus('current')
if mibBuilder.loadTexts: starAAATtlAuthRequests.setDescription('The total number of AAA authentication requests')
starAAATtlAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAATtlAcctRequests.setStatus('current')
if mibBuilder.loadTexts: starAAATtlAcctRequests.setDescription('The total number of AAA accounting requests')
starAAACurRequests = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAACurRequests.setStatus('current')
if mibBuilder.loadTexts: starAAACurRequests.setDescription('The current number of AAA requests')
starAAACurAuthRequests = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAACurAuthRequests.setStatus('current')
if mibBuilder.loadTexts: starAAACurAuthRequests.setDescription('The current number of AAA authentication requests')
starAAACurAcctRequests = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAACurAcctRequests.setStatus('current')
if mibBuilder.loadTexts: starAAACurAcctRequests.setDescription('The current number of AAA accounting requests')
starAAATtlAcctSess = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAATtlAcctSess.setStatus('current')
if mibBuilder.loadTexts: starAAATtlAcctSess.setDescription('The total number of AAA accounting sessions')
starAAACurAcctSess = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAACurAcctSess.setStatus('current')
if mibBuilder.loadTexts: starAAACurAcctSess.setDescription('The current number of AAA accounting sessions')
starAAATtlAuthSuccess = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAATtlAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: starAAATtlAuthSuccess.setDescription('The total number of AAA authentication successes')
starAAATtlAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 14, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starAAATtlAuthFailure.setStatus('current')
if mibBuilder.loadTexts: starAAATtlAuthFailure.setDescription('The total number of AAA authentication failures')
starentA11Mgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 15))
starA11MgrCount = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 15, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starA11MgrCount.setStatus('current')
if mibBuilder.loadTexts: starA11MgrCount.setDescription('The total number of A11 manager instances')
starA11TtlArrived = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 15, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starA11TtlArrived.setStatus('current')
if mibBuilder.loadTexts: starA11TtlArrived.setDescription('The total number of A11 session requests')
starA11TtlRejected = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 15, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starA11TtlRejected.setStatus('current')
if mibBuilder.loadTexts: starA11TtlRejected.setDescription('The total number of rejected A11 sessions')
starA11TtlDemultiplexed = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 15, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starA11TtlDemultiplexed.setStatus('current')
if mibBuilder.loadTexts: starA11TtlDemultiplexed.setDescription('The total number of demultiplexed A11 sessions')
starA11TtlDereg = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 15, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starA11TtlDereg.setStatus('current')
if mibBuilder.loadTexts: starA11TtlDereg.setDescription('The total number of A11 deregistrations')
starA11CurActive = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 15, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starA11CurActive.setStatus('current')
if mibBuilder.loadTexts: starA11CurActive.setDescription('The current number of active A11 sessions')
starentHAMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 16))
starHAMgrCount = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 16, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starHAMgrCount.setStatus('current')
if mibBuilder.loadTexts: starHAMgrCount.setDescription('The total number of home agent manager instances')
starHATtlArrived = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starHATtlArrived.setStatus('current')
if mibBuilder.loadTexts: starHATtlArrived.setDescription('The total number of home agent session requests')
starHATtlRejected = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 16, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starHATtlRejected.setStatus('current')
if mibBuilder.loadTexts: starHATtlRejected.setDescription('The total number of rejected home agent sessions')
starHATtlDemultiplexed = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 16, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starHATtlDemultiplexed.setStatus('current')
if mibBuilder.loadTexts: starHATtlDemultiplexed.setDescription('The total number of demultiplexed home agent sessions')
starHATtlDereg = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 16, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starHATtlDereg.setStatus('current')
if mibBuilder.loadTexts: starHATtlDereg.setDescription('The total number of home agent deregistrations')
starHACurActive = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 16, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starHACurActive.setStatus('current')
if mibBuilder.loadTexts: starHACurActive.setDescription('The total number of active home agent sessions')
starentFAMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 17))
starFAMgrCount = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 17, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFAMgrCount.setStatus('current')
if mibBuilder.loadTexts: starFAMgrCount.setDescription('The total number of foreign agent manager instances')
starFATtlArrived = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 17, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFATtlArrived.setStatus('current')
if mibBuilder.loadTexts: starFATtlArrived.setDescription('The total number of foreign agent session requests')
starFATtlRejected = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 17, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFATtlRejected.setStatus('current')
if mibBuilder.loadTexts: starFATtlRejected.setDescription('The total number of rejected foreign agent sessions')
starFATtlDemultiplexed = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 17, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFATtlDemultiplexed.setStatus('current')
if mibBuilder.loadTexts: starFATtlDemultiplexed.setDescription('The total number of demultiplexed foreign agent sessions')
starFATtlDereg = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 17, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFATtlDereg.setStatus('current')
if mibBuilder.loadTexts: starFATtlDereg.setDescription('The total number of foreign agent deregistrations')
starFACurActive = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 17, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFACurActive.setStatus('current')
if mibBuilder.loadTexts: starFACurActive.setDescription('The current number of active foreign agent sessions')
starentService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 18))
starServiceTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1), )
if mibBuilder.loadTexts: starServiceTable.setStatus('current')
if mibBuilder.loadTexts: starServiceTable.setDescription(' ')
starServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starServiceVpnID"), (0, "STARENT-MIB", "starServiceSvcID"))
if mibBuilder.loadTexts: starServiceEntry.setStatus('current')
if mibBuilder.loadTexts: starServiceEntry.setDescription('Information on a particular Service Manager')
starServiceVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starServiceVpnID.setStatus('current')
if mibBuilder.loadTexts: starServiceVpnID.setDescription('The internal identification of the VPN (context)')
starServiceSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 2), Gauge32())
if mibBuilder.loadTexts: starServiceSvcID.setStatus('current')
if mibBuilder.loadTexts: starServiceSvcID.setDescription('The internal identification of this service; unique within a specific context')
starServiceVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starServiceVpnName.setDescription('The name of this VPN (context)')
starServiceServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starServiceServName.setStatus('current')
if mibBuilder.loadTexts: starServiceServName.setDescription('The name of this service')
starServiceSubLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starServiceSubLimit.setStatus('current')
if mibBuilder.loadTexts: starServiceSubLimit.setDescription('The configured subscriber limit')
starServiceSubCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starServiceSubCurrent.setStatus('current')
if mibBuilder.loadTexts: starServiceSubCurrent.setDescription('The current number of subscribers limit')
starServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("unknown", 1), ("pdsn", 2), ("ggsn", 3), ("ha", 4), ("fa", 5), ("l2tpserver", 6), ("lac", 7), ("lns", 8), ("closedrp", 9), ("ecs", 10), ("cscf", 11), ("ipsg", 12), ("evdoreva", 13), ("asngw", 14), ("pdif", 15), ("asnpc", 16), ("mipv6ha", 17), ("phsgw", 18), ("phspc", 19), ("sgw", 20), ("pgw", 21), ("mag", 22), ("gprs", 23), ("hsgw", 24), ("sgsn", 25), ("mme", 26), ("pdg", 27), ("standalonefa", 28), ("imsue", 29), ("fng", 30), ("pccpolicy", 31), ("pccquota", 32), ("pccaf", 33), ("hnbgw", 34), ("non-anchor-phs-gateway", 35), ("combination-3g-4g-gateway", 36), ("epdg", 37), ("pcp", 38), ("henbgw-access", 39), ("henbgw-network", 40), ("wsg", 41), ("samog", 42), ("saegw", 43), ("ppp-lback", 44), ("dhcp", 45), ("imsa", 46), ("diameter", 47), ("dhcpv6", 48), ("lma", 49), ("crdt-ctl", 50), ("mme-hss", 51), ("sgs", 52), ("cbs", 53), ("egtp-ingress", 54), ("egtp-egress", 55), ("egtp", 56), ("gtpu", 57), ("sgtpc", 58), ("egtp-sv", 59), ("megad", 60), ("pcc", 61), ("ipne", 62), ("mseg", 63), ("bng", 64), ("gs", 65), ("map", 66), ("iups", 67), ("sgtp", 68), ("lcs", 69), ("mme-embms", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starServiceType.setStatus('current')
if mibBuilder.loadTexts: starServiceType.setDescription('The type of service')
starServiceFAIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starServiceFAIpAddr.setStatus('current')
if mibBuilder.loadTexts: starServiceFAIpAddr.setDescription('The IP address for an FA service. Where unknown or not applicable this will contain all zeroes.')
starServiceHAIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 18, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starServiceHAIpAddr.setStatus('current')
if mibBuilder.loadTexts: starServiceHAIpAddr.setDescription('The IP address for an HA service. Where unknown or not applicable this will contain all zeroes.')
starentCLIMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 19))
starCLITable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1), )
if mibBuilder.loadTexts: starCLITable.setStatus('current')
if mibBuilder.loadTexts: starCLITable.setDescription('A table containing information on all interactive CLI sessions')
starCLIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starCLIID"))
if mibBuilder.loadTexts: starCLIEntry.setStatus('current')
if mibBuilder.loadTexts: starCLIEntry.setDescription('Information on a particular CLI Session')
starCLIID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starCLIID.setStatus('current')
if mibBuilder.loadTexts: starCLIID.setDescription('The internal identifier of this CLI session.')
starCLIUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIUsername.setStatus('current')
if mibBuilder.loadTexts: starCLIUsername.setDescription("The name of the user logged into this CLI session, or 'unknown' if not none")
starCLITtyname = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLITtyname.setStatus('current')
if mibBuilder.loadTexts: starCLITtyname.setDescription('The name of the TTY device for this CLI session')
starCLIPrivs = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIPrivs.setStatus('current')
if mibBuilder.loadTexts: starCLIPrivs.setDescription('The user presentable form of the privilege level of this CLI session')
starCLIType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("commandline", 1), ("ftp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIType.setStatus('current')
if mibBuilder.loadTexts: starCLIType.setDescription('The type of CLI; commandline(1) represents the normal interactive command line; ftp(2) represents an incoming FTP session')
starCLIRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIRemoteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: starCLIRemoteIpAddrType.setDescription('The type of remote IP address used to access this CLI session.')
starCLIRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: starCLIRemoteIpAddr.setDescription('The remote IP address used to access this CLI session. Where unknown or not applicable (such as access through a serial port) this will be 0')
starCLIContext = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIContext.setStatus('current')
if mibBuilder.loadTexts: starCLIContext.setDescription('The context (VPN) currently being managed/viewed by the CLI session.')
starCLIDatabaseUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIDatabaseUsername.setStatus('current')
if mibBuilder.loadTexts: starCLIDatabaseUsername.setDescription('The username of the user record in the database which was acted upon by the CLI session')
starCLIActiveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIActiveCount.setStatus('current')
if mibBuilder.loadTexts: starCLIActiveCount.setDescription('Active CLI Sessions Value')
starCLIMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIMaxCount.setStatus('current')
if mibBuilder.loadTexts: starCLIMaxCount.setDescription('Maximum CLI Sessions Limit')
starCLIEventIDStart = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIEventIDStart.setStatus('current')
if mibBuilder.loadTexts: starCLIEventIDStart.setDescription('EventID Range From Value')
starCLIEventIDEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLIEventIDEnd.setStatus('current')
if mibBuilder.loadTexts: starCLIEventIDEnd.setDescription('EventID Range To Value')
starCLILogLevelChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 19, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCLILogLevelChanged.setStatus('current')
if mibBuilder.loadTexts: starCLILogLevelChanged.setDescription('Description about change in logging level of a facility by an user')
starentTaskMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 20))
starTaskTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 20, 1), )
if mibBuilder.loadTexts: starTaskTable.setStatus('current')
if mibBuilder.loadTexts: starTaskTable.setDescription('A table containing information about all active tasks')
starTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 20, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starTaskFacility"), (0, "STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starTaskEntry.setStatus('current')
if mibBuilder.loadTexts: starTaskEntry.setDescription('Information on a particular Task')
starTaskFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 20, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: starTaskFacility.setStatus('current')
if mibBuilder.loadTexts: starTaskFacility.setDescription('The internal facility identifier')
starTaskInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 20, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starTaskInstance.setStatus('current')
if mibBuilder.loadTexts: starTaskInstance.setDescription('The internal instance identifier which uniquely idenfies this task without a given facility')
starTaskFacilityName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTaskFacilityName.setStatus('current')
if mibBuilder.loadTexts: starTaskFacilityName.setDescription('The name of the facility for this task')
starTaskCard = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 20, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTaskCard.setStatus('current')
if mibBuilder.loadTexts: starTaskCard.setDescription('The slot number of the card where this task is running')
starTaskCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 20, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starTaskCPU.setStatus('current')
if mibBuilder.loadTexts: starTaskCPU.setDescription('The CPU number where this task is running')
starentPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 21))
starPPPStatTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1), )
if mibBuilder.loadTexts: starPPPStatTable.setStatus('current')
if mibBuilder.loadTexts: starPPPStatTable.setDescription('A table containing PPP Stats')
starPPPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starPPPStatSvcID"))
if mibBuilder.loadTexts: starPPPStatEntry.setStatus('current')
if mibBuilder.loadTexts: starPPPStatEntry.setDescription('The statistics for an individual entry for a PPP context and service')
starPPPStatVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starPPPStatVpnID.setStatus('current')
if mibBuilder.loadTexts: starPPPStatVpnID.setDescription('The internal identification of the PPP VPN (context)')
starPPPStatSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 2), StarShortID())
if mibBuilder.loadTexts: starPPPStatSvcID.setStatus('current')
if mibBuilder.loadTexts: starPPPStatSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:)')
starPPPStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatVpnName.setStatus('current')
if mibBuilder.loadTexts: starPPPStatVpnName.setDescription('The name of the PPP VPN (context)')
starPPPStatServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatServName.setStatus('current')
if mibBuilder.loadTexts: starPPPStatServName.setDescription('The name of the PPP service')
starPPPStatInit = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatInit.setStatus('current')
if mibBuilder.loadTexts: starPPPStatInit.setDescription('The number of initialized PPP sessions for the associated VPN service')
starPPPStatReneg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatReneg.setStatus('current')
if mibBuilder.loadTexts: starPPPStatReneg.setDescription('The number of PPP session renegotiations for the associated VPN service')
starPPPStatSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatSuccess.setStatus('current')
if mibBuilder.loadTexts: starPPPStatSuccess.setDescription('The number of PPP session negotiation successes for the associated VPN service ')
starPPPStatFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatFailed.setStatus('current')
if mibBuilder.loadTexts: starPPPStatFailed.setDescription('The number of PPP session negotiation failures for the associated VPN service')
starPPPStatReleased = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatReleased.setStatus('current')
if mibBuilder.loadTexts: starPPPStatReleased.setDescription('The number of PPP sessions released for the associated VPN service')
starPPPStatReleasedLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatReleasedLocal.setStatus('current')
if mibBuilder.loadTexts: starPPPStatReleasedLocal.setDescription('The number of PPP sessions where the release was initiated locally for the associated VPN service')
starPPPStatReleasedRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatReleasedRemote.setStatus('current')
if mibBuilder.loadTexts: starPPPStatReleasedRemote.setDescription('The number of PPP sessions where the release was initiated remotely for the associated VPN service')
starPPPStatLcpFailMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLcpFailMaxRetry.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLcpFailMaxRetry.setDescription('The number of PPP sessions which failed to bring up the link control protocol due to excessive retries for the associated VPN service')
starPPPStatLcpFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLcpFailOption.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLcpFailOption.setDescription('The number of PPP sessions which failed to bring up the link control protocol due to an invalid option being received for the associated VPN service')
starPPPStatIpcpFailMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatIpcpFailMaxRetry.setStatus('current')
if mibBuilder.loadTexts: starPPPStatIpcpFailMaxRetry.setDescription('The number of PPP sessions which failed to start the IP control protocol due to excessive retries for the associated VPN service')
starPPPStatIpcpFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatIpcpFailOption.setStatus('current')
if mibBuilder.loadTexts: starPPPStatIpcpFailOption.setDescription('The number of PPP sessions which failed to start the IP control protocol due to an invalid option being received for the associated VPN service')
starPPPStatCcpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatCcpFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatCcpFail.setDescription('The number of PPP sessions which failed to initialize the CCP')
starPPPStatAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatAuthFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatAuthFail.setDescription('The number of PPP sessions which failed authentication for the associated VPN')
starPPPStatLcpEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLcpEntered.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLcpEntered.setDescription('The number of PPP sessions which successfully initialized the link control protocol')
starPPPStatAuthEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatAuthEntered.setStatus('current')
if mibBuilder.loadTexts: starPPPStatAuthEntered.setDescription('The number of PPP sessions which were successfully authenticated')
starPPPStatIpcpEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatIpcpEntered.setStatus('current')
if mibBuilder.loadTexts: starPPPStatIpcpEntered.setDescription('The number of PPP sessions which successfully initialized the IP control protocol')
starPPPStatRenegPdsn = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRenegPdsn.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRenegPdsn.setDescription('The number of PPP sessions which renegotiated the PDSN service access')
starPPPStatRenegMobil = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRenegMobil.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRenegMobil.setDescription('The number of PPP sessions which renegotiated the Mobile IP service access')
starPPPStatRenegAddrMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRenegAddrMismatch.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRenegAddrMismatch.setDescription('The number of PPP sessions which had an IP address mismatch during renegotiation')
starPPPStatRenegOther = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRenegOther.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRenegOther.setDescription('The number of PPP sessions which failed renegotiation for reasons other than IP address mismatch')
starPPPStatChapAuthAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatChapAuthAttempt.setStatus('current')
if mibBuilder.loadTexts: starPPPStatChapAuthAttempt.setDescription('The number of PPP CHAP authentication attempts for the associated VPN service')
starPPPStatPapAuthAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatPapAuthAttempt.setStatus('current')
if mibBuilder.loadTexts: starPPPStatPapAuthAttempt.setDescription('The number of PPP PAP authentication attempts for the associated VPN service')
starPPPStatMSChapAuthAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatMSChapAuthAttempt.setStatus('current')
if mibBuilder.loadTexts: starPPPStatMSChapAuthAttempt.setDescription('The number of PPP MSCHAP authentication attempts for the associated VPN service')
starPPPStatChapAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatChapAuthFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatChapAuthFail.setDescription('The number of PPP CHAP authentication attempt failures for the associated VPN service')
starPPPStatPapAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatPapAuthFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatPapAuthFail.setDescription('The number of PPP PAP authentication failures for the associated VPN service')
starPPPStatMSChapAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatMSChapAuthFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatMSChapAuthFail.setDescription('The number of PPP MSCHAP authentication failures for the associated VPN service')
starPPPStatStacComp = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatStacComp.setStatus('current')
if mibBuilder.loadTexts: starPPPStatStacComp.setDescription('The number of PPP sessions which had STAC compression enabled for the associated VPN service')
starPPPStatMppcComp = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatMppcComp.setStatus('current')
if mibBuilder.loadTexts: starPPPStatMppcComp.setDescription('The number of PPP sessions which had MPPC compression enabled for the associated VPN service')
starPPPStatDeflComp = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDeflComp.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDeflComp.setDescription('The number of PPP sessions which had DEFLATE compression enabled for the associated VPN service')
starPPPStatFscErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatFscErrs.setStatus('current')
if mibBuilder.loadTexts: starPPPStatFscErrs.setDescription('The number of PPP forward sequence control errors in messaging')
starPPPStatUnknProto = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatUnknProto.setStatus('current')
if mibBuilder.loadTexts: starPPPStatUnknProto.setDescription('The number of PPP sessions which failed due to an unknown protocol received for the associated VPN service')
starPPPStatBadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatBadAddr.setStatus('current')
if mibBuilder.loadTexts: starPPPStatBadAddr.setDescription('The number of PPP sessions which failed due to a bad address being received for the associated VPN service')
starPPPStatBadCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatBadCtrl.setStatus('current')
if mibBuilder.loadTexts: starPPPStatBadCtrl.setDescription('The number of PPP sessions in which a bad control sequence was received')
starPPPStatVjComp = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatVjComp.setStatus('current')
if mibBuilder.loadTexts: starPPPStatVjComp.setDescription('The number of PPP sessions which had VJ header compression enabled for the associated VPN service')
starPPPStatDiscLcpRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscLcpRemote.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscLcpRemote.setDescription('The number of PPP sessions which were disconnected via the link control protocol from the remote end for the associated VPN service')
starPPPStatDiscRpRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscRpRemote.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscRpRemote.setDescription('The number of PPP sessions which were disconnected by the remote via the R-P interface for the associated VPN service')
starPPPStatDiscAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscAdmin.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscAdmin.setDescription('The number of PPP sessions which were disconnected by a local administrator for the associated VPN service')
starPPPStatDiscIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscIdleTimeout.setDescription('The number of PPP sessions disconnected due to session idle timer expiration for the associated VPN service')
starPPPStatDiscAbsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscAbsTimeout.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscAbsTimeout.setDescription('The number of PPP sessions disconnected due to the session absolute timer expiration for the associated VPN service')
starPPPStatDiscPPPKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscPPPKeepalive.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscPPPKeepalive.setDescription('The number of PPP sessions disconnected due to PPP keep alive failure for the associated VPN service')
starPPPStatDiscNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscNoResource.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscNoResource.setDescription('The number of PPP sessions disconnected due to local resource shortage for the associated VPN service')
starPPPStatDiscMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscMisc.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscMisc.setDescription('The number of PPP sessions disconnected due to any cause which does not match any other existing disconnect statistics for the associated VPN service')
starPPPStatFailedReneg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatFailedReneg.setStatus('current')
if mibBuilder.loadTexts: starPPPStatFailedReneg.setDescription('The number of failed PPP renegotiations the associated VPN service')
starPPPStatLcpFailUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLcpFailUnknown.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLcpFailUnknown.setDescription('The number of failed PPP LCP that are due to unknown reasons for the associated VPN service')
starPPPStatIpcpFailUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatIpcpFailUnknown.setStatus('current')
if mibBuilder.loadTexts: starPPPStatIpcpFailUnknown.setDescription('The number of failed PPP IPCP that are due to unknown reasons for the associated VPN service')
starPPPStatAuthAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatAuthAbort.setStatus('current')
if mibBuilder.loadTexts: starPPPStatAuthAbort.setDescription('The number of aborted PPP authentications for the associated VPN service')
starPPPStatLowerLayerDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLowerLayerDisc.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLowerLayerDisc.setDescription('The number of Failed PPP session due to RP disconnect for the associated VPN service')
starPPPStatLcpSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLcpSuccess.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLcpSuccess.setDescription('The number of successful PPP LCPs for the associated VPN service')
starPPPStatAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: starPPPStatAuthSuccess.setDescription('The number of successful PPP authentications for the associated VPN service')
starPPPStatRenegLowerLayerHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRenegLowerLayerHandoff.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRenegLowerLayerHandoff.setDescription('The number of PPP renigotiations for RP handoff for the associated VPN service')
starPPPStatRenegParamUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRenegParamUpdate.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRenegParamUpdate.setDescription('The number of PPP renigotiations for parameter update for the associated VPN service')
starPPPStatChapAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatChapAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: starPPPStatChapAuthSuccess.setDescription('The number of successful PPP CHAP authentications for the associated VPN service')
starPPPStatPapAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatPapAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: starPPPStatPapAuthSuccess.setDescription('The number of successful PPP PAP authentications for the associated VPN service')
starPPPStatMSChapAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatMSChapAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: starPPPStatMSChapAuthSuccess.setDescription('The number of successful PPP MSCHAP authentications for the associated VPN service')
starPPPStatChapAuthAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatChapAuthAbort.setStatus('current')
if mibBuilder.loadTexts: starPPPStatChapAuthAbort.setDescription('The number of aboted PPP CHAP authentications for the associated VPN service')
starPPPStatPapAuthAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatPapAuthAbort.setStatus('current')
if mibBuilder.loadTexts: starPPPStatPapAuthAbort.setDescription('The number of aboted PPP PAP authentications for the associated VPN service')
starPPPStatMSChapAuthAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatMSChapAuthAbort.setStatus('current')
if mibBuilder.loadTexts: starPPPStatMSChapAuthAbort.setDescription('The number of aboted PPP MSCHAP authentications for the associated VPN service')
starPPPStatSessSkipAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatSessSkipAuth.setStatus('current')
if mibBuilder.loadTexts: starPPPStatSessSkipAuth.setDescription('The number of PPP sessions that skipped authentications for the associated VPN service')
starPPPStatNegComp = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatNegComp.setStatus('current')
if mibBuilder.loadTexts: starPPPStatNegComp.setDescription('The number of PPP sessions that negotiated compressions for the associated VPN service')
starPPPStatCCPNegFailComp = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatCCPNegFailComp.setStatus('current')
if mibBuilder.loadTexts: starPPPStatCCPNegFailComp.setDescription('The number of PPP sessions that failed compression negotiation for the associated VPN service')
starPPPStatDiscLocalLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscLocalLowerLayer.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscLocalLowerLayer.setDescription('The number of disconnected PPP sessions due to local RP disconnect for the associated VPN service')
starPPPStatDiscAddFlowFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscAddFlowFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscAddFlowFail.setDescription('The number of disconnected PPP sessions due to failure in adding new flow for the associated VPN service')
starPPPStatDiscMaxRetriesLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscMaxRetriesLCP.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscMaxRetriesLCP.setDescription('The number of disconnected PPP sessions due to max retries for LCP for the associated VPN service')
starPPPStatDiscMaxRetriesIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscMaxRetriesIPCP.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscMaxRetriesIPCP.setDescription('The number of disconnected PPP sessions due to max retries for IPCP for the associated VPN service')
starPPPStatDiscMaxSetupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscMaxSetupTimer.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscMaxSetupTimer.setDescription('The number of disconnected PPP sessions due to max setup time out for the associated VPN service')
starPPPStatDiscInvalidDestVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscInvalidDestVpn.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscInvalidDestVpn.setDescription('The number of disconnected PPP sessions due to invalid destination VPN for the associated VPN service')
starPPPStatDiscOptNegFailLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscOptNegFailLCP.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscOptNegFailLCP.setDescription('The number of disconnected PPP sessions due to invalid destination VPN for the associated VPN service')
starPPPStatDiscOptNegFailIPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscOptNegFailIPCP.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscOptNegFailIPCP.setDescription('The number of disconnected PPP sessions due to failed IPCP option negotiation for the associated VPN service')
starPPPStatDiscNoRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscNoRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscNoRemoteIpAddr.setDescription('The number of disconnected PPP sessions due to no remote ip address for the associated VPN service')
starPPPStatDiscCallTypeDetectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscCallTypeDetectFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscCallTypeDetectFail.setDescription('The number of disconnected PPP sessions due to failure detecting call type for the associated VPN service')
starPPPStatDiscRemoteDiscUpLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscRemoteDiscUpLayer.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscRemoteDiscUpLayer.setDescription('The number of disconnected PPP sessions due to failure detecting call type for the associated VPN service')
starPPPStatDiscLongDuraTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscLongDuraTimeout.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscLongDuraTimeout.setDescription('The number of disconnected PPP sessions due to long duration time out for the associated VPN service')
starPPPStatDiscAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatDiscAuthFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatDiscAuthFail.setDescription('The number of disconnected PPP sessions due to failed authentication for the associated VPN service')
starPPPStatLCPEchoTotalReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLCPEchoTotalReq.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLCPEchoTotalReq.setDescription('The total number of PPP LCP echo requests for the associated VPN service')
starPPPStatLCPEchoReqResent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLCPEchoReqResent.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLCPEchoReqResent.setDescription('The total number of PPP LCP echo requests resent for the associated VPN service')
starPPPStatLCPEchoRepRecved = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLCPEchoRepRecved.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLCPEchoRepRecved.setDescription('The total number of PPP LCP echo replys received for the associated VPN service')
starPPPStatLCPEchoReqTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatLCPEchoReqTimeout.setStatus('current')
if mibBuilder.loadTexts: starPPPStatLCPEchoReqTimeout.setDescription('The total number of PPP LCP echo requests time out for the associated VPN service')
starPPPStatRecvErrBadCtrlField = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRecvErrBadCtrlField.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRecvErrBadCtrlField.setDescription('The total number of received PPP error due to bad control fields for the associated VPN service')
starPPPStatRecvErrBadPacketLen = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRecvErrBadPacketLen.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRecvErrBadPacketLen.setDescription('The total number of received PPP error due to bad packet length for the associated VPN service')
starPPPStatRemoteTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatRemoteTerm.setStatus('current')
if mibBuilder.loadTexts: starPPPStatRemoteTerm.setDescription('The total number of PPP remote terminations for the associated VPN service')
starPPPStatMiscFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 21, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPPPStatMiscFail.setStatus('current')
if mibBuilder.loadTexts: starPPPStatMiscFail.setDescription('The number of misc PPP failures for the associated VPN service')
starentMIPHA = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 22))
starMIPHAStatTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1), )
if mibBuilder.loadTexts: starMIPHAStatTable.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatTable.setDescription('A table containing MIP HA Stats')
starMIPHAStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starMIPHAStatSvcID"))
if mibBuilder.loadTexts: starMIPHAStatEntry.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatEntry.setDescription('The Mobile IP home agent statistics for a specific VPN (context) and service')
starMIPHAStatVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatVpnID.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatVpnID.setDescription('The internal identification of the home agent Mobile IP VPN (context)')
starMIPHAStatSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 2), StarShortID())
if mibBuilder.loadTexts: starMIPHAStatSvcID.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:)')
starMIPHAStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatVpnName.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatVpnName.setDescription('The name of the VPN (context)')
starMIPHAStatServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatServName.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatServName.setDescription('The Mobile IP home agent service name')
starMIPHAStatDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatDisconnects.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatDisconnects.setDescription('The number of session disconnects for the associated Mobile IP home agent VPN service')
starMIPHAStatExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatExpiry.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatExpiry.setDescription('The number of session expirations for the associated Mobile IP home agent VPN service')
starMIPHAStatDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatDereg.setDescription('The number of session deregistrations for the associated Mobile IP home agent VPN service')
starMIPHAStatAdminDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatAdminDrop.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatAdminDrop.setDescription('The number of session disconnects due to administrator actions for the associated Mobile IP home agent VPN')
starMIPHAStatRegRecvTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegRecvTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegRecvTotal.setDescription('The number of session registrations received for the associated Mobile IP home agent VPN service')
starMIPHAStatRegRecvInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegRecvInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegRecvInitial.setDescription('The number of initial session registrations received for the associated Mobile IP home agent VPN service')
starMIPHAStatRegRecvRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegRecvRenew.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegRecvRenew.setDescription('The number of session registration renewals received for the associated Mobile IP home agent VPN service')
starMIPHAStatRegRecvDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegRecvDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegRecvDereg.setDescription('The number of session deregistrations received for the associated Mobile IP home agent VPN service')
starMIPHAStatRegAcceptTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegAcceptTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegAcceptTotal.setDescription('The number of session registrations accepted for the associated Mobile IP home agent VPN service')
starMIPHAStatRegAcceptReg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegAcceptReg.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegAcceptReg.setDescription('The number of session registrations accepted for the associated Mobile IP home agent VPN service')
starMIPHAStatRegAcceptRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegAcceptRenew.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegAcceptRenew.setDescription('The number of session registration renewals accepted for the associated Mobile IP home agent VPN service')
starMIPHAStatRegAcceptDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegAcceptDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegAcceptDereg.setDescription('The number of session deregistrations accepted for the associated Mobile IP home agent VPN service')
starMIPHAStatRegDeniedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegDeniedTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegDeniedTotal.setDescription('The number of session registrations denied for the associated Mobile IP home agent VPN service')
starMIPHAStatRegDeniedInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegDeniedInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegDeniedInitial.setDescription('The number of session initial registrations denied for the associated Mobile IP home agent VPN service')
starMIPHAStatRegDeniedRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegDeniedRenew.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegDeniedRenew.setDescription('The number of session registration renewals denied for the associated Mobile IP home agent VPN service')
starMIPHAStatRegDeniedDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegDeniedDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegDeniedDereg.setDescription('The number of session deregistrations denied for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyTotal.setDescription('The total number of session registration replies for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyAcceptReg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyAcceptReg.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyAcceptReg.setDescription('The number of session registration replies accepted indicating registration for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyAcceptDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyAcceptDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyAcceptDereg.setDescription('The number of session registration replies accepted indicated deregistration for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyDenied.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyDenied.setDescription('The number of session registration replies which were denied for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyBadReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyBadReq.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyBadReq.setDescription('The number of session registration replies indicating a bad request for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyMismatchID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyMismatchID.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyMismatchID.setDescription('The number of session registration replies indicating an ID mismatch for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyAdminProhib.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyAdminProhib.setDescription('The number of session registration replies indicating administrator prohibition for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyUnspecErr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyUnspecErr.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyUnspecErr.setDescription('The number of session registration replies with an unspecified error for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyNoResource.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyNoResource.setDescription('The number of session registration replies indicating no resources for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyMnAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyMnAuthFail.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyMnAuthFail.setDescription('The number of session registration replies indication mobile number authentication failure for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyFAAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyFAAuthFail.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyFAAuthFail.setDescription('The number of session registration replies indicating a foreign agent authentication failure for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplySimulBind = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplySimulBind.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplySimulBind.setDescription('The number of session registration replies indicating a simultaneous bind condition for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyUnknownHA = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyUnknownHA.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyUnknownHA.setDescription('The number of session registration replies indicating unknown home agent for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyRevTunUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyRevTunUnav.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyRevTunUnav.setDescription('The number of session registration replies indicating no reverse tunnel available for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyRevTunMand = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyRevTunMand.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyRevTunMand.setDescription('The number of session registration replies indicating reverse tunneling is mandatory for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplyEncapUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplyEncapUnav.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplyEncapUnav.setDescription('The number of session registration replies indicating IP encapsulation was not available for the associated Mobile IP home agent VPN service')
starMIPHAStatRegReplySendError = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegReplySendError.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegReplySendError.setDescription('The number of session registration replies indicating a send error occurred for the associated Mobile IP home agent VPN service')
starMIPHAStatFARevocations = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatFARevocations.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatFARevocations.setDescription('The number of FA revocations for the associated Mobile IP home agent VPN service')
starMIPHAStatRegAcceptHO = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegAcceptHO.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegAcceptHO.setDescription('The number of hand over session registrations accepted for the associated Mobile IP home agent VPN service')
starMIPHAStatRegDeniedHO = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegDeniedHO.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegDeniedHO.setDescription('The number of hand over session registrations denied for the associated Mobile IP home agent VPN service')
starMIPHAStatRegDiscardTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 22, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPHAStatRegDiscardTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPHAStatRegDiscardTotal.setDescription('The number of session registrations discarded for the associated Mobile IP home agent VPN service')
starentMIPFA = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 23))
starMIPFAStatTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1), )
if mibBuilder.loadTexts: starMIPFAStatTable.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatTable.setDescription('A table containing MIP FA Stats')
starMIPFAStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starMIPFAStatSvcID"))
if mibBuilder.loadTexts: starMIPFAStatEntry.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatEntry.setDescription('The statistics for a specific foreign agent Mobile IP VPN (context) service')
starMIPFAStatVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatVpnID.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatVpnID.setDescription('Internal identication of the foreign agent Mobile IP VPN (context)')
starMIPFAStatSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 2), StarShortID())
if mibBuilder.loadTexts: starMIPFAStatSvcID.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:)')
starMIPFAStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatVpnName.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatVpnName.setDescription('The foreign agent mobile IP VPN (context) name')
starMIPFAStatServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatServName.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatServName.setDescription('The Mobile IP foreign agent service name')
starMIPFAStatAdvertSend = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatAdvertSend.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatAdvertSend.setDescription('The number of advertisements sent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatDiscExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatDiscExpiry.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatDiscExpiry.setDescription('The number of session disconnects due to expiration for the associated Mobile IP foreign agent VPN service')
starMIPFAStatDiscDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatDiscDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatDiscDereg.setDescription('The number of session disconnects due to deregistration for the associated Mobile IP foreign agent VPN service')
starMIPFAStatDiscAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatDiscAdmin.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatDiscAdmin.setDescription('The number of dession disconnects due to administrator action for the associated Mobile IP foreign agent VPN service')
starMIPFAStatAuthAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatAuthAttempt.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatAuthAttempt.setDescription('The number of session authentication attempts for the associated Mobile IP foreign agent VPN service')
starMIPFAStatAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatAuthSuccess.setDescription('The number of session authentication successes for the associated Mobile IP foreign agent VPN service')
starMIPFAStatAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatAuthFailure.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatAuthFailure.setDescription('The number of session authentication failures for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRecvTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRecvTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRecvTotal.setDescription('The total number of session registrations received for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRecvInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRecvInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRecvInitial.setDescription('The number of initial session registrations received for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRecvRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRecvRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRecvRenewal.setDescription('The number of session registration renewals for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRecvDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRecvDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRecvDereg.setDescription('The number of session deregistrations for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAcceptTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAcceptTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAcceptTotal.setDescription('The total number of session registrations accepted for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAcceptInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAcceptInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAcceptInitial.setDescription('The number of initial session registrations accepted for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAcceptRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAcceptRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAcceptRenewal.setDescription('The number of session registration renewals accepted for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAcceptDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAcceptDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAcceptDereg.setDescription('The number of session deregistrations accepted for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenTotal.setDescription('The total number of session registrations denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenInitial.setDescription('The number of initial session registrations denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenRenewal.setDescription('The number of session registration renewals denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenDereg.setDescription('The number of session deregistrations denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDiscardTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDiscardTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDiscardTotal.setDescription('The total number of session registrations discarded for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDiscardInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDiscardInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDiscardInitial.setDescription('The total number of session registrations discarded for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDiscardRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDiscardRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDiscardRenewal.setDescription('The number of session registration renewals discarded for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDiscardDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDiscardDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDiscardDereg.setDescription('The number of dession reregistrations discarded for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRelayedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRelayedTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRelayedTotal.setDescription('The total number of session registrations relayed for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRelayedInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRelayedInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRelayedInitial.setDescription('The number of initial session registrations relayed for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRelayedRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRelayedRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRelayedRenewal.setDescription('The number of dession registration renewals relayed for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRelayedDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRelayedDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRelayedDereg.setDescription('The number of session deregistrations relayed for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAuthFailTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailTotal.setDescription('The total number of session registration authentication failures for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAuthFailInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailInitial.setDescription('The number of initial session registration failures for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAuthFailRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailRenewal.setDescription('The number of session registration renewal failures for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegAuthFailDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegAuthFailDereg.setDescription('The number of session deregistration authentication failures for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNTotal.setDescription('The total number of PDSN session registrations denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNInitial.setDescription('The number of initial PDSN session registrations denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNRenewal.setDescription('The number of PDSN session registration renewals denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNDereg.setDescription('The number of PDSN session deregistrations denied for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHATotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHATotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHATotal.setDescription('The total number of session deregistrations denied by the home agent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHAInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHAInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHAInitial.setDescription('The number of initial session registrations denied by the home agent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHARenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHARenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHARenewal.setDescription('The number of session registration renewals denied by the home agent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHADereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHADereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHADereg.setDescription('The number of session deregistrations denied by the home agent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNUnspec = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNUnspec.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNUnspec.setDescription('The number of PDSN session registrations denied for an unspecified reason for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNTimeout.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNTimeout.setDescription('The number of PDSN session registrations denied due to timer expiration for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNAdmin.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNAdmin.setDescription('The number of PDSN session registrations denied due to administrator prohibition for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNResources = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNResources.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNResources.setDescription('The number of PDSN session registrations denied due to no resources for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNMnAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMnAuth.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMnAuth.setDescription('The number of PDSN session registrations denied due to mobile number authentication for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNHAAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAAuth.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAAuth.setDescription('The number of PDSN session registrations denied by the home agent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNTooLong.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNTooLong.setDescription('The number of PDSN session registrations denied due to a life too long indication for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNBadReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNBadReq.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNBadReq.setDescription('The number of PDSN session registrations denied due to a bad request indication for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNEncapUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNEncapUnav.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNEncapUnav.setDescription('The number of PDSN session registrations denied due to no IP encapsulation available for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNRevTunUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNRevTunUnav.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNRevTunUnav.setDescription('The number of PDSN session registrations denied due to no reverse tunnel available for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNRevTunMand = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNRevTunMand.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNRevTunMand.setDescription('The number of PDSN session registration denied due to reverse tunneling being mandatory for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHAFAAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHAFAAuth.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHAFAAuth.setDescription('The number of PDSN registrations denied by the home agent due to authentication failure for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHABadReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHABadReq.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHABadReq.setDescription('The number of session registration denied by the home agent due to the request being invalid for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHAMismatchID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHAMismatchID.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHAMismatchID.setDescription('The number of session registrations denied by the home agent due to an ID mismatch for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHASimulBind = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHASimulBind.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHASimulBind.setDescription('The number of session registrations denied by the home agent due to a simultaneous bind attempt for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHAUnknownHA = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHAUnknownHA.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHAUnknownHA.setDescription('The number of session registrations denied by the home agent for an unknown reason for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenHARevRunUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenHARevRunUnavail.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenHARevRunUnavail.setDescription('The number of session registrations denied by the home agent due to no reverse tunnel being available for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvTotal.setDescription('The total number of session registration replies received for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvTotalRly = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvTotalRly.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvTotalRly.setDescription('The total number of session registration replies relayed for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvErrors.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvErrors.setDescription('The total number of session registration replies received indicating errors for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvInitial.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvInitial.setDescription('The number of initial session registration replies received for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvInitialRly = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvInitialRly.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvInitialRly.setDescription('The number of initial session registration replies relayed for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvRenewal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvRenewal.setDescription('The number of session registration renewal replies received for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvRenewalRly = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvRenewalRly.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvRenewalRly.setDescription('The number of session registration renewal replies received for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvDereg.setDescription('The number of session registration replies received indicating deregistration for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplRcvDeregRly = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvDeregRly.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplRcvDeregRly.setDescription('The number of session registration replies relayed indicating deregistration for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentTotal.setDescription('The total number of session registration replies sent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentAcceptReg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentAcceptReg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentAcceptReg.setDescription('The number of session registration replies which were sent and accepted for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentAcceptDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentAcceptDereg.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentAcceptDereg.setDescription('The number of session registration replies which were sent and accepted indication deregistration for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentBadReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentBadReq.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentBadReq.setDescription('The number of session registration replies which were sent indicating the request was invalid for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentTooLong.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentTooLong.setDescription('The number of session registration replies which were sent indicating life too long for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentMnAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMnAuthFail.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMnAuthFail.setDescription('The number of session registration replies which were sent indicating mobile number authentication failure for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentHAAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAAuthFail.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAAuthFail.setDescription('The number of session registration replies which were sent indicating home agent authentication failure for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentAdminProhib.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentAdminProhib.setDescription('The number of session registration replies which were sent indicating prohibited by the administration for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentNoResources = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentNoResources.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentNoResources.setDescription('The number of session registration replies which were sent indicating no resources available for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentRevTunUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentRevTunUnav.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentRevTunUnav.setDescription('The number of session registration replies which were sent indicating no reverse tunnel available for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentRevTunMand = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentRevTunMand.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentRevTunMand.setDescription('The number of session registration replies which were sent indicating reverse tunneling was mandatory for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentSendErrors.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentSendErrors.setDescription('The number of session registration replies which were sent indicating there were errors in transmission for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNBadReply = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNBadReply.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNBadReply.setDescription('The number of session registrations denied by PDSN due to bad relply from HA for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNMissNAI = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissNAI.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissNAI.setDescription('The number of session registrations denied by PDSN due to missing NAI for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNMissHomeAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissHomeAgent.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissHomeAgent.setDescription('The number of session registrations denied by PDSN due to missing home agent for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNMissHomeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissHomeAddr.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissHomeAddr.setDescription('The number of session registrations denied by PDSN due to missing home address for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNUnknChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNUnknChallenge.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNUnknChallenge.setDescription('The number of session registrations denied by PDSN due to unknown challenge for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNMissChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissChallenge.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMissChallenge.setDescription('The number of session registrations denied by PDSN due to missing challenge for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNStaleChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNStaleChallenge.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNStaleChallenge.setDescription('The number of session registrations denied by PDSN due to stale challenge for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNMNTooDistant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMNTooDistant.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNMNTooDistant.setDescription('The number of session registrations denied by PDSN due to MN too distant for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNStyleUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNStyleUnavail.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNStyleUnavail.setDescription('The number of session registration denied by PDSN due to style not available for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNHANetUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHANetUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHANetUnreach.setDescription('The number of session registrations denied by PDSN due to HA network unreachable for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNHAHostUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAHostUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAHostUnreach.setDescription('The number of session registrations denied by PDSN due to HA host unreachable for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNHAPortUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAPortUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAPortUnreach.setDescription('The number of session registrations denied by PDSN due to HA port unreachable for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNHAUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNHAUnreach.setDescription('The number of session registrations denied by PDSN due to HA unreachable for misc reasons for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegDenPDSNInvCOA = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNInvCOA.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegDenPDSNInvCOA.setDescription('The number of session registrations denied by PDSN due to invalid COA for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegReqSentInitTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegReqSentInitTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegReqSentInitTotal.setDescription('The number of initial session registrations for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegReqSentInitResend = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegReqSentInitResend.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegReqSentInitResend.setDescription('The number of initial session registrations retried for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegReqSentRenewTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegReqSentRenewTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegReqSentRenewTotal.setDescription('The number of renewal session registrations for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegReqSentRenewResend = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegReqSentRenewResend.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegReqSentRenewResend.setDescription('The number of renewal session registrations retried for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegReqSentDeregTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegReqSentDeregTotal.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegReqSentDeregTotal.setDescription('The number of session deregistrations for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegReqSentDeregResend = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegReqSentDeregResend.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegReqSentDeregResend.setDescription('The number of session deregistrations retried for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentMNTooDistant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMNTooDistant.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMNTooDistant.setDescription('The number of session registration reply that indicate MN too distant for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentInvCOA = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentInvCOA.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentInvCOA.setDescription('The number of session registration reply that indicate invalid COA for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentHANetUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHANetUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHANetUnreach.setDescription('The number of session registration reply that indicate HA network unreachable for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentHAHostUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAHostUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAHostUnreach.setDescription('The number of session registration reply that indicate HA host unreachable for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentHAPortUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAPortUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAPortUnreach.setDescription('The number of session registration reply that indicate HA port unreachable for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentHAUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAUnreach.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentHAUnreach.setDescription('The number of session registration reply that indicate HA unreachable due to misc reasons for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentRegTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentRegTimeout.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentRegTimeout.setDescription('The number of session registration reply that indicate registration time out for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentMissNAI = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissNAI.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissNAI.setDescription('The number of session registration reply that indicate NAI missing for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentMissHomeAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissHomeAgent.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissHomeAgent.setDescription('The number of session registration reply that indicate HA missing for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentMissHomeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissHomeAddr.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissHomeAddr.setDescription('The number of session registration reply that indicate home address missing for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentUnknChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentUnknChallenge.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentUnknChallenge.setDescription('The number of session registration reply that indicate unknown challenge for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentMissChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissChallenge.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentMissChallenge.setDescription('The number of session registration reply that indicate challenge missing for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentStaleChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentStaleChallenge.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentStaleChallenge.setDescription('The number of session registration reply that indicate stale challenge for the associated Mobile IP foreign agent VPN service')
starMIPFAStatRegRplSentBadReply = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 23, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMIPFAStatRegRplSentBadReply.setStatus('current')
if mibBuilder.loadTexts: starMIPFAStatRegRplSentBadReply.setDescription('The number of session registration reply that indicate bad reply for the associated Mobile IP foreign agent VPN service')
starentRP = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 24))
starRPStatTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1), )
if mibBuilder.loadTexts: starRPStatTable.setStatus('current')
if mibBuilder.loadTexts: starRPStatTable.setDescription('A table containing MIP FA Stats')
starRPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starRPStatSvcID"))
if mibBuilder.loadTexts: starRPStatEntry.setStatus('current')
if mibBuilder.loadTexts: starRPStatEntry.setDescription('The statistics for a specific R-P VPN (context) service')
starRPStatVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPStatVpnID.setStatus('current')
if mibBuilder.loadTexts: starRPStatVpnID.setDescription('The internal identification of the R-P VPN (context)')
starRPStatSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 2), StarShortID())
if mibBuilder.loadTexts: starRPStatSvcID.setStatus('current')
if mibBuilder.loadTexts: starRPStatSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:)')
starRPStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPStatVpnName.setStatus('current')
if mibBuilder.loadTexts: starRPStatVpnName.setDescription('The R-P VPN (context) name')
starRPStatServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPStatServName.setStatus('current')
if mibBuilder.loadTexts: starRPStatServName.setDescription('The R-P service name')
starRPRegRecvTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegRecvTotal.setStatus('current')
if mibBuilder.loadTexts: starRPRegRecvTotal.setDescription('The total number of session registrations received for the associated R-P VPN service')
starRPRegAcceptTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptTotal.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptTotal.setDescription('The total number of session registrations accepted for the associated R-P VPN service')
starRPRegDeniedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDeniedTotal.setStatus('current')
if mibBuilder.loadTexts: starRPRegDeniedTotal.setDescription('The total number of session registrations denied for the associated R-P VPN service')
starRPRegDiscardTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDiscardTotal.setStatus('current')
if mibBuilder.loadTexts: starRPRegDiscardTotal.setDescription('The total number of session registrations discarded for the associated R-P VPN service')
starRPRegAcceptInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptInitial.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptInitial.setDescription('The total number of initial session registrations accepted for the associated R-P VPN service')
starRPRegAcceptIntraPDSN = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptIntraPDSN.setStatus('obsolete')
if mibBuilder.loadTexts: starRPRegAcceptIntraPDSN.setDescription('The number of Intra-PDSN session registrations accepted for the associated R-P VPN service')
starRPRegAcceptInterPDSN = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptInterPDSN.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptInterPDSN.setDescription('The number of Inter-PDSN session registrations accepted for the associated R-P VPN service')
starRPRegDeniedInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDeniedInitial.setStatus('current')
if mibBuilder.loadTexts: starRPRegDeniedInitial.setDescription('The number of initial session registrations denied for the associated R-P VPN service')
starRPRegAcceptRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptRenew.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptRenew.setDescription('The number of session registration renewals accepted for the associated R-P VPN service')
starRPRegDeniedRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDeniedRenew.setStatus('current')
if mibBuilder.loadTexts: starRPRegDeniedRenew.setDescription('The number of session registration renewals denied for the associated R-P VPN service')
starRPRegAcceptDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptDereg.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptDereg.setDescription('The number of session deregistrations accepted for the associated R-P VPN service')
starRPRegDeniedDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDeniedDereg.setStatus('current')
if mibBuilder.loadTexts: starRPRegDeniedDereg.setDescription('The number of session deregistrations denied for the associated R-P VPN service')
starRPRegSendError = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegSendError.setStatus('current')
if mibBuilder.loadTexts: starRPRegSendError.setDescription('The number of session registrations with errors in transmission for the associated R-P VPN service')
starRPRegHashError = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegHashError.setStatus('current')
if mibBuilder.loadTexts: starRPRegHashError.setDescription('The number of session registrations with hash errors for the associated R-P VPN service')
starRPRegDecodeError = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDecodeError.setStatus('current')
if mibBuilder.loadTexts: starRPRegDecodeError.setDescription('The number of sessions registrations with decode errors for the associated R-P VPN service')
starRPRegUnhandled = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUnhandled.setStatus('current')
if mibBuilder.loadTexts: starRPRegUnhandled.setDescription('The number of session registrations unable to by proceeded for the associated R-P VPN service')
starRPRegAirlinkSeqError = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAirlinkSeqError.setStatus('current')
if mibBuilder.loadTexts: starRPRegAirlinkSeqError.setDescription('The number of session registrations with air link sequence errors for the associated R-P VPN service')
starRPRegDenyUnspec = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyUnspec.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyUnspec.setDescription('The number of session registrations denied for an unspecified reason for the associated R-P VPN service')
starRPRegDenyAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyAdminProhib.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyAdminProhib.setDescription('The number of session registrations denied due to administrator prohibition for the associated R-P VPN service')
starRPRegDenyNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyNoResource.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyNoResource.setDescription('The number of session registrations denied due to no resources available for the associated R-P VPN service')
starRPRegDenyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyAuth.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyAuth.setDescription('The number of session registrations denied due to authentication failure for the associated R-P VPN service')
starRPRegDenyMismatchID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyMismatchID.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyMismatchID.setDescription('The number of session registrations denied due to an ID mismatch for the associated R-P VPN service')
starRPRegDenyBadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyBadRequest.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyBadRequest.setDescription('The number of session registrations denied due to the request being invalid for the associated R-P VPN service')
starRPRegDenyUnknownPDSN = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyUnknownPDSN.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyUnknownPDSN.setDescription('The number of session registrations denied due to the packet data service not being recognized for the associated R-P VPN service')
starRPRegDenyRevTunUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyRevTunUnav.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyRevTunUnav.setDescription('The number of session registrations denied due to no reverse tunnel being available for the associated R-P VPN service')
starRPRegDenyRevTunReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyRevTunReq.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyRevTunReq.setDescription('The number of session registrations denied due to reverse tunneling being mandatory for the associated R-P VPN service')
starRPRegDenyUnrecogVend = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegDenyUnrecogVend.setStatus('current')
if mibBuilder.loadTexts: starRPRegDenyUnrecogVend.setDescription('The number of session registrations denied due to the vendor not being recognized for the associated R-P VPN service')
starRPRegUpdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdTotal.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdTotal.setDescription('The total number of session registration updates for the associated R-P VPN service')
starRPRegUpdAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdAccept.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdAccept.setDescription('The number of session registration updates which were accepted for the associated R-P VPN service')
starRPRegUpdDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdDenied.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdDenied.setDescription('The number of session registration updates which were denied for the associated R-P VPN service')
starRPRegUpdUnack = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdUnack.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdUnack.setDescription('The number of session registration updates which were not acknowledged for the associated R-P VPN service')
starRPRegUpdTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdTrans.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdTrans.setDescription('The number of session registration updates sent for the associated R-P VPN service')
starRPRegUpdRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdRetrans.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdRetrans.setDescription('The number of session registration updates resent for the associated R-P VPN service')
starRPRegUpdReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdReceived.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdReceived.setDescription('The number of session registration updates received for the associated R-P VPN service')
starRPRegUpdDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdDiscard.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdDiscard.setDescription('The number of session registration updates discarded for the associated R-P VPN service')
starRPRegUpdSendError = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdSendError.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdSendError.setDescription('The number of session registration updates with errors in transmission for the associated R-P VPN service')
starRPRegUpdUplyrInit = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdUplyrInit.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdUplyrInit.setDescription('The number of session registration updates with up-link reinitializations')
starRPRegUpdOther = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdOther.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdOther.setDescription("The number of session registration updates with a reason of 'other' for the associated R-P VPN service")
starRPRegUpdHandoff = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdHandoff.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdHandoff.setDescription('The number of session registration updates due to a mobile hand-off for the associated R-P VPN service')
starRPRegUpdDenyUnspec = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdDenyUnspec.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdDenyUnspec.setDescription('The number of session registration updates denied for an unspecified reason for the associated R-P VPN service')
starRPRegUpdDenyAdminProhib = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdDenyAdminProhib.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdDenyAdminProhib.setDescription('The number of session registration updates denied due to administration prohibition for the associated R-P VPN service')
starRPRegUpdDenyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdDenyAuth.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdDenyAuth.setDescription('The number of session registration updates denied due to authentication failure for the associated R-P VPN service')
starRPRegUpdDenyMismatchID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdDenyMismatchID.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdDenyMismatchID.setDescription('The number of session registration updates denied due to an ID mismatch for the associated R-P VPN service')
starRPRegUpdDenyBadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegUpdDenyBadRequest.setStatus('current')
if mibBuilder.loadTexts: starRPRegUpdDenyBadRequest.setDescription('The number of session registration updates denied due to the request being invalid for the associated R-P VPN service')
starRPSecViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPSecViolations.setStatus('current')
if mibBuilder.loadTexts: starRPSecViolations.setDescription('The total number of session security violations for the associated R-P VPN service')
starRPSecBadAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPSecBadAuth.setStatus('current')
if mibBuilder.loadTexts: starRPSecBadAuth.setDescription('The total number of session security authentication violations for the associated R-P VPN service')
starRPSecBadID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPSecBadID.setStatus('current')
if mibBuilder.loadTexts: starRPSecBadID.setDescription('The total number of session security ID violations for the associated R-P VPN service')
starRPSecBadSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPSecBadSpi.setStatus('current')
if mibBuilder.loadTexts: starRPSecBadSpi.setDescription('The total number of session security SPI violations for the associated R-P VPN service')
starRPSecMissingMnHAAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPSecMissingMnHAAuth.setStatus('current')
if mibBuilder.loadTexts: starRPSecMissingMnHAAuth.setDescription('The total number of session security missing mobile number home agent authentication violation for the associated R-P VPN service')
starRPSecMissingRegUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPSecMissingRegUpdate.setStatus('current')
if mibBuilder.loadTexts: starRPSecMissingRegUpdate.setDescription('The total number of session missing registration update violations for the associated R-P VPN service')
starRPRegRecvInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegRecvInitial.setStatus('current')
if mibBuilder.loadTexts: starRPRegRecvInitial.setDescription('The total number of initial session registration for the associated R-P VPN service')
starRPRegAcceptActvStartIntraPDSN = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptActvStartIntraPDSN.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptActvStartIntraPDSN.setDescription('The number of accepted registration request during intraPDSN handoff which contains active start for the associated R-P VPN service')
starRPRegAcceptActvStopIntraPDSN = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptActvStopIntraPDSN.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptActvStopIntraPDSN.setDescription('The number of accepted registration request during intraPDSN handoff which contains active stop for the associated R-P VPN service')
starRPRegRecvRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegRecvRenew.setStatus('current')
if mibBuilder.loadTexts: starRPRegRecvRenew.setDescription('The number of received renew registration request for the associated R-P VPN service')
starRPRegActvStartRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegActvStartRenew.setStatus('current')
if mibBuilder.loadTexts: starRPRegActvStartRenew.setDescription('The number of received renew registration request that contains active start for the associated R-P VPN service')
starRPRegActvStopRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegActvStopRenew.setStatus('current')
if mibBuilder.loadTexts: starRPRegActvStopRenew.setDescription('The number of received renew registration request that contains active stop for the associated R-P VPN service')
starRPRegRecvDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegRecvDereg.setStatus('current')
if mibBuilder.loadTexts: starRPRegRecvDereg.setDescription('The number of received deregistration request for the associated R-P VPN service')
starRPRegAcceptActvStopDereg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPRegAcceptActvStopDereg.setStatus('current')
if mibBuilder.loadTexts: starRPRegAcceptActvStopDereg.setDescription('The number of accepted deregistration request that contains active stop for the associated R-P VPN service')
starRPDiscSessAbsent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscSessAbsent.setStatus('current')
if mibBuilder.loadTexts: starRPDiscSessAbsent.setDescription('The number of registration request discarded due to no session for the associated R-P VPN service')
starRPDiscNoMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscNoMemory.setStatus('current')
if mibBuilder.loadTexts: starRPDiscNoMemory.setDescription('The number of registration request discarded due to no memory for the associated R-P VPN service')
starRPDiscMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscMalformed.setStatus('current')
if mibBuilder.loadTexts: starRPDiscMalformed.setDescription('The number of registration request discarded because malformed for the associated R-P VPN service')
starRPDiscAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscAuthFail.setStatus('current')
if mibBuilder.loadTexts: starRPDiscAuthFail.setDescription('The number of registration request discarded because authentication failed for the associated R-P VPN service')
starRPDiscInternalBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscInternalBounce.setStatus('current')
if mibBuilder.loadTexts: starRPDiscInternalBounce.setDescription('The number of registration request discarded because internal bounce for the associated R-P VPN service')
starRPDiscInpuQueueExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscInpuQueueExceeded.setStatus('current')
if mibBuilder.loadTexts: starRPDiscInpuQueueExceeded.setDescription('The number of registration request discarded because internal queue exceeded for the associated R-P VPN service')
starRPDiscMismatchedId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscMismatchedId.setStatus('current')
if mibBuilder.loadTexts: starRPDiscMismatchedId.setDescription('The number of registration request discarded because mismatched ID for the associated R-P VPN service')
starRPDiscInvPacketLen = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscInvPacketLen.setStatus('current')
if mibBuilder.loadTexts: starRPDiscInvPacketLen.setDescription('The number of registration request discarded because invalid packet length for the associated R-P VPN service')
starRPDiscMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDiscMisc.setStatus('current')
if mibBuilder.loadTexts: starRPDiscMisc.setDescription('The number of registration request discarded due to misc reasons for the associated R-P VPN service')
starRP1xTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 72), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRP1xTxBytes.setStatus('current')
if mibBuilder.loadTexts: starRP1xTxBytes.setDescription('The number of 1x bytes transmitted, in megabytes')
starRP1xRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 73), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRP1xRxBytes.setStatus('current')
if mibBuilder.loadTexts: starRP1xRxBytes.setDescription('The number of 1x bytes received, in megabytes')
starRP1xTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 74), Counter32()).setUnits('Thousands').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRP1xTxPackets.setStatus('current')
if mibBuilder.loadTexts: starRP1xTxPackets.setDescription('The number of 1x packets transmitted, in thousands')
starRP1xRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 75), Counter32()).setUnits('Thousands').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRP1xRxPackets.setStatus('current')
if mibBuilder.loadTexts: starRP1xRxPackets.setDescription('The number of 1x packets received, in thousands')
starRPDoTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 76), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDoTxBytes.setStatus('current')
if mibBuilder.loadTexts: starRPDoTxBytes.setDescription('The number of Do bytes transmitted, in megabytes')
starRPDoRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 77), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDoRxBytes.setStatus('current')
if mibBuilder.loadTexts: starRPDoRxBytes.setDescription('The number of Do bytes received, in megabytes')
starRPDoTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 78), Counter32()).setUnits('Thousands').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDoTxPackets.setStatus('current')
if mibBuilder.loadTexts: starRPDoTxPackets.setDescription('The number of Do packets transmitted, in thousands')
starRPDoRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 24, 1, 1, 79), Counter32()).setUnits('Thousands').setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPDoRxPackets.setStatus('current')
if mibBuilder.loadTexts: starRPDoRxPackets.setDescription('The number of Do packets received, in thousands')
starentSubscriber = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 26))
starSubTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1), )
if mibBuilder.loadTexts: starSubTable.setStatus('current')
if mibBuilder.loadTexts: starSubTable.setDescription('A table containing subscriber information')
starSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSubMSID"), (0, "STARENT-MIB", "starSubName"))
if mibBuilder.loadTexts: starSubEntry.setStatus('current')
if mibBuilder.loadTexts: starSubEntry.setDescription('Information for a specific Subscriber')
starSubContext = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubContext.setStatus('current')
if mibBuilder.loadTexts: starSubContext.setDescription('The context the subscriber is in')
starSubMSID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubMSID.setStatus('current')
if mibBuilder.loadTexts: starSubMSID.setDescription('The MSID of the subscriber')
starSubName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubName.setStatus('current')
if mibBuilder.loadTexts: starSubName.setDescription('The name of the subscriber')
starSubTimerDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubTimerDuration.setStatus('current')
if mibBuilder.loadTexts: starSubTimerDuration.setDescription('The length of the long-duration timer in seconds')
starSubLongDurTimeoutAction = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 5), StarLongDurTimeoutAction()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubLongDurTimeoutAction.setStatus('current')
if mibBuilder.loadTexts: starSubLongDurTimeoutAction.setDescription('The action taken by the system upon detection of a long-duration session')
starSubSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 6), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubSetupTime.setStatus('current')
if mibBuilder.loadTexts: starSubSetupTime.setDescription('The time when the call was setup')
starSubHomeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubHomeAddr.setStatus('current')
if mibBuilder.loadTexts: starSubHomeAddr.setDescription('The ipv4 home address.')
starSubHomeAddrv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 26, 1, 1, 8), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSubHomeAddrv6.setStatus('current')
if mibBuilder.loadTexts: starSubHomeAddrv6.setDescription('The ipv6 home address.')
starentEISServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 27))
starEISServerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 27, 1), )
if mibBuilder.loadTexts: starEISServerTable.setStatus('current')
if mibBuilder.loadTexts: starEISServerTable.setDescription('A table containing EIS Server information')
starEISServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 27, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starEISServerVPNID"), (0, "STARENT-MIB", "starEISServerAddr"))
if mibBuilder.loadTexts: starEISServerEntry.setStatus('current')
if mibBuilder.loadTexts: starEISServerEntry.setDescription('Information for a specific EIS Server')
starEISServerVPNID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 27, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starEISServerVPNID.setStatus('current')
if mibBuilder.loadTexts: starEISServerVPNID.setDescription('The VPN ID for the EIS Server')
starEISServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 27, 1, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEISServerAddr.setStatus('current')
if mibBuilder.loadTexts: starEISServerAddr.setDescription('The IP Address for the EIS Server')
starEISServerVPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 27, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEISServerVPNName.setStatus('current')
if mibBuilder.loadTexts: starEISServerVPNName.setDescription('The VPN Name for this EIS Server')
starentThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 28))
starThreshMeasuredPct = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshMeasuredPct.setStatus('current')
if mibBuilder.loadTexts: starThreshMeasuredPct.setDescription('The measured value of a thresholded parameter')
starThreshPct = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshPct.setStatus('current')
if mibBuilder.loadTexts: starThreshPct.setDescription('The configured value of a thresholded parameter')
starThreshMeasuredInt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 3), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshMeasuredInt.setStatus('current')
if mibBuilder.loadTexts: starThreshMeasuredInt.setDescription('The measured value of a thresholded parameter')
starThreshInt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshInt.setStatus('current')
if mibBuilder.loadTexts: starThreshInt.setDescription('The configured value of a thresholded parameter')
starThreshMeasuredMB = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 5), Gauge32()).setUnits('Megabytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshMeasuredMB.setStatus('current')
if mibBuilder.loadTexts: starThreshMeasuredMB.setDescription('The measured value of a thresholded parameter')
starThreshMB = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 6), Unsigned32()).setUnits('Megabytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshMB.setStatus('current')
if mibBuilder.loadTexts: starThreshMB.setDescription('The configured value of a thresholded parameter')
starThreshMeasuredGB = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 7), Gauge32()).setUnits('Gigabytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshMeasuredGB.setStatus('current')
if mibBuilder.loadTexts: starThreshMeasuredGB.setDescription('The measured value of a thresholded parameter')
starThreshGB = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 8), Unsigned32()).setUnits('Gigabytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshGB.setStatus('current')
if mibBuilder.loadTexts: starThreshGB.setDescription('The configured value of a thresholded parameter')
starThreshPeriodInt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setUnits('Seconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshPeriodInt.setStatus('current')
if mibBuilder.loadTexts: starThreshPeriodInt.setDescription('The configured value of a thresholded parameter')
starThreshDeviceNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 28, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starThreshDeviceNum.setStatus('current')
if mibBuilder.loadTexts: starThreshDeviceNum.setDescription('The configured value of a thresholded parameter')
starentPort = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 29))
starPortTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1), )
if mibBuilder.loadTexts: starPortTable.setStatus('current')
if mibBuilder.loadTexts: starPortTable.setDescription('A table containing Port information')
starPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starPortSlot"), (0, "STARENT-MIB", "starPortNum"))
if mibBuilder.loadTexts: starPortEntry.setStatus('current')
if mibBuilder.loadTexts: starPortEntry.setDescription('Information for a specific Port')
starPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPortSlot.setStatus('current')
if mibBuilder.loadTexts: starPortSlot.setDescription('The Slot number for this port')
starPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 29))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPortNum.setStatus('current')
if mibBuilder.loadTexts: starPortNum.setDescription('The Port number within this slot')
starPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("ethernet10100", 1), ("ethernet1000dualmedia", 2), ("ethernet1000", 3), ("ds3", 4), ("oc3atm", 5), ("oc12atm", 6), ("ds3e", 7), ("rs232", 8), ("bitst1e1", 9), ("virtualethernet", 10), ("ether10g", 11), ("ether100g", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortType.setStatus('current')
if mibBuilder.loadTexts: starPortType.setDescription(' ')
starPortTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortTypeDescr.setStatus('current')
if mibBuilder.loadTexts: starPortTypeDescr.setDescription('A texual representing of the starPortType attribute')
starPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortAdminState.setStatus('current')
if mibBuilder.loadTexts: starPortAdminState.setDescription('The administrative start of the port')
starPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2), ("notapplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortOperState.setStatus('current')
if mibBuilder.loadTexts: starPortOperState.setDescription(' ')
starPortOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortOperMode.setStatus('current')
if mibBuilder.loadTexts: starPortOperMode.setDescription(' ')
starPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortLinkState.setStatus('current')
if mibBuilder.loadTexts: starPortLinkState.setDescription(' ')
starRedundantPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRedundantPortSlot.setStatus('current')
if mibBuilder.loadTexts: starRedundantPortSlot.setDescription('The Slot number for the port the current port is redundant with, or 0 if unknown')
starRedundantPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRedundantPortNum.setStatus('current')
if mibBuilder.loadTexts: starRedundantPortNum.setDescription('The Port number for the port the current port is redundant with, or 0 if unknown')
starPortRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 11), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRxBytes.setStatus('current')
if mibBuilder.loadTexts: starPortRxBytes.setDescription('The number of bytes successfully received, in megabytes. For ports of type rs232(8) or bitst1e1(9) this value will always be zero.')
starPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 12), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortTxBytes.setStatus('current')
if mibBuilder.loadTexts: starPortTxBytes.setDescription('The number of bytes successfully transmitted, in megabytes. For ports of type rs232(8) or bitst1e1(9) this value will always be zero.')
starPortRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 13), Counter32()).setUnits('Thousands').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRxFrames.setStatus('current')
if mibBuilder.loadTexts: starPortRxFrames.setDescription('The number of frames successfully received, in thousands. For ports of type rs232(8) or bitst1e1(9) this value will always be zero. For ports of type oc3atm(5) and oc12atm(6) this is the count of cells received')
starPortTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 14), Counter32()).setUnits('Thousands').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortTxFrames.setStatus('current')
if mibBuilder.loadTexts: starPortTxFrames.setDescription('The number of frames successfully transmitted, in thousands. For ports of type rs232(8) or bitst1e1(9) this value will always be zero. For ports of type oc3atm(5) and oc12atm(6) this is the count of cells received')
starPortRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRxDiscards.setStatus('current')
if mibBuilder.loadTexts: starPortRxDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. ')
starPortTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortTxDiscards.setStatus('current')
if mibBuilder.loadTexts: starPortTxDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
starPortRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortRxErrors.setStatus('current')
if mibBuilder.loadTexts: starPortRxErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
starPortTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 29, 1, 1, 18), Counter32()).setUnits('Thousands').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPortTxErrors.setStatus('current')
if mibBuilder.loadTexts: starPortTxErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
starentIPPool = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 30))
starIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1), )
if mibBuilder.loadTexts: starIPPoolTable.setStatus('current')
if mibBuilder.loadTexts: starIPPoolTable.setDescription('A table containing IP Pool information')
starIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starIPPoolID"))
if mibBuilder.loadTexts: starIPPoolEntry.setStatus('current')
if mibBuilder.loadTexts: starIPPoolEntry.setDescription('Information for a specific IP Pool')
starIPPoolVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolVpnID.setStatus('current')
if mibBuilder.loadTexts: starIPPoolVpnID.setDescription('The context ID for this pool')
starIPPoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 2), StarMediumID())
if mibBuilder.loadTexts: starIPPoolID.setStatus('current')
if mibBuilder.loadTexts: starIPPoolID.setDescription('The service identification is made up from first 8 chars of context name and the pool name (max 32 chars ) separated by (:)')
starIPPoolContext = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolContext.setStatus('current')
if mibBuilder.loadTexts: starIPPoolContext.setDescription('The context name string for this pool')
starIPPoolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroup.setDescription('The name of the group to which the IP pool belongs')
starIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolName.setStatus('current')
if mibBuilder.loadTexts: starIPPoolName.setDescription('The name of the IP pool')
starIPPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("private", 1), ("public", 2), ("static", 3), ("resource", 4), ("nat", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolType.setStatus('current')
if mibBuilder.loadTexts: starIPPoolType.setDescription('The type of the pool')
starIPPoolState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("pendingdelete", 2), ("alarm", 3), ("resize", 4), ("inactive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolState.setStatus('current')
if mibBuilder.loadTexts: starIPPoolState.setDescription('The state of the pool')
starIPPoolStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolStartAddr.setStatus('current')
if mibBuilder.loadTexts: starIPPoolStartAddr.setDescription('The start IP address of the pool')
starIPPoolMaskorEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolMaskorEndAddr.setStatus('current')
if mibBuilder.loadTexts: starIPPoolMaskorEndAddr.setDescription('The mask or end IP address of the pool')
starIPPoolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolPriority.setStatus('current')
if mibBuilder.loadTexts: starIPPoolPriority.setDescription('The priority of the pool')
starIPPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolUsed.setStatus('current')
if mibBuilder.loadTexts: starIPPoolUsed.setDescription('The number of IP addresses in USED state in the pool')
starIPPoolHold = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolHold.setStatus('current')
if mibBuilder.loadTexts: starIPPoolHold.setDescription('The number of IP addresses in HOLD state in the pool')
starIPPoolRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolRelease.setStatus('current')
if mibBuilder.loadTexts: starIPPoolRelease.setDescription('The number of IP addresses in RELEASE state in the pool')
starIPPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 30, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolFree.setStatus('current')
if mibBuilder.loadTexts: starIPPoolFree.setDescription('The number of IP addresses in FREE state in the pool')
starentIPPoolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 64))
starIPPoolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1), )
if mibBuilder.loadTexts: starIPPoolGroupTable.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupTable.setDescription('A table containing IP Pool Group information')
starIPPoolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starIPPoolGroupID"))
if mibBuilder.loadTexts: starIPPoolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupEntry.setDescription('Information for a specific IP Pool Group')
starIPPoolGroupVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starIPPoolGroupVpnID.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupVpnID.setDescription('The context ID for this pool group')
starIPPoolGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 2), StarMediumID())
if mibBuilder.loadTexts: starIPPoolGroupID.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupID.setDescription('The service identification is made up from first 8 chars of context name and first 16 chars of pool group name separated by (:)')
starIPPoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupName.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupName.setDescription('The name of the IP pool group')
starIPPoolGroupVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupVpnName.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupVpnName.setDescription('The context name string for this pool group')
starIPPoolGroupUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupUsed.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupUsed.setDescription('The number of IP addresses in USED state in the pool group')
starIPPoolGroupHold = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupHold.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupHold.setDescription('The number of IP addresses in HOLD state in the pool group')
starIPPoolGroupRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupRelease.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupRelease.setDescription('The number of IP addresses in RELEASE state in the pool group')
starIPPoolGroupFree = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupFree.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupFree.setDescription('The number of IP addresses in FREE state in the pool group')
starIPPoolGroupPctUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('percentage times 100').setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupPctUsed.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupPctUsed.setDescription('The percentage of IP addresses in USED state in the pool group is the percentage value times 100; for example,2.3% would be represented as 230')
starIPPoolGroupAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 64, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPPoolGroupAvail.setStatus('current')
if mibBuilder.loadTexts: starIPPoolGroupAvail.setDescription('The number of IP addresses in AVAILABLE state in the pool group')
starentTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 31))
starCongestionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reject", 1), ("redirect", 2), ("drop", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: starCongestionPolicy.setDescription('The policy invoked for congestion events')
starCongestionResourceType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("systemcpu", 1), ("servicecpu", 2), ("averagememory", 3), ("queuesize", 4), ("queuedelay", 5), ("license", 6), ("portutil", 7), ("rxportutil", 8), ("txportutil", 9), ("rxperportutil", 10), ("txperportutil", 11), ("servicecapacity", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCongestionResourceType.setStatus('current')
if mibBuilder.loadTexts: starCongestionResourceType.setDescription('The resource type for a congestion event')
starPTACConfig = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPTACConfig.setStatus('current')
if mibBuilder.loadTexts: starPTACConfig.setDescription('The number of PACs/PSCs//TACs configured in the system')
starPTACActive = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPTACActive.setStatus('current')
if mibBuilder.loadTexts: starPTACActive.setDescription('The number of PACs/PSCs/TACs active in the system')
starContextName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starContextName.setStatus('current')
if mibBuilder.loadTexts: starContextName.setDescription('The name of a context configured on the IMG')
starInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starInterfaceName.setStatus('current')
if mibBuilder.loadTexts: starInterfaceName.setDescription('The name of an interface')
starPCFAddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPCFAddress.setStatus('current')
if mibBuilder.loadTexts: starPCFAddress.setDescription('The IP address of a PCF')
starPeerAddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPeerAddress.setStatus('current')
if mibBuilder.loadTexts: starPeerAddress.setDescription('Peer Address')
starLicensedSessions = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLicensedSessions.setStatus('current')
if mibBuilder.loadTexts: starLicensedSessions.setDescription('The number of sessions enabled by the software license')
starCurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 10), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: starCurrentSessions.setDescription('The number of current sessions in use against a software license')
starL3Address = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL3Address.setStatus('current')
if mibBuilder.loadTexts: starL3Address.setDescription('L3 Address')
starUDPPortNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starUDPPortNum.setStatus('current')
if mibBuilder.loadTexts: starUDPPortNum.setDescription('UDP Port Number')
starSRPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 13), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSRPIpAddress.setStatus('current')
if mibBuilder.loadTexts: starSRPIpAddress.setDescription('SRP IP Address')
starBGPPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBGPPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: starBGPPeerIpAddress.setDescription('BGP Peer IP Address')
starContFiltCFFilename = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starContFiltCFFilename.setStatus('current')
if mibBuilder.loadTexts: starContFiltCFFilename.setDescription('File name for the OPTCMDB')
starContFiltCFErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknownerror", 1), ("notavailable", 2), ("loadfailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starContFiltCFErrorCode.setStatus('current')
if mibBuilder.loadTexts: starContFiltCFErrorCode.setDescription('Error code')
starFecthedFromAAAMgr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFecthedFromAAAMgr.setStatus('current')
if mibBuilder.loadTexts: starFecthedFromAAAMgr.setDescription('The number calls fetched from aaa mgr')
starPriorToAudit = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 18), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPriorToAudit.setStatus('current')
if mibBuilder.loadTexts: starPriorToAudit.setDescription('The number calls prior to audit')
starPassedAudits = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPassedAudits.setStatus('current')
if mibBuilder.loadTexts: starPassedAudits.setDescription('The number of calls passed audit')
starCallsRecovered = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 20), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCallsRecovered.setStatus('current')
if mibBuilder.loadTexts: starCallsRecovered.setDescription('The number of calls recovered')
starAllCallLines = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 21), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starAllCallLines.setStatus('current')
if mibBuilder.loadTexts: starAllCallLines.setDescription('The number of a11 call lines')
starElapsedMs = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 22), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starElapsedMs.setStatus('current')
if mibBuilder.loadTexts: starElapsedMs.setDescription('The audit time elapsed in ms')
starCDRFilename = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCDRFilename.setStatus('current')
if mibBuilder.loadTexts: starCDRFilename.setDescription('The name of a CDR (EDR/UDR) file')
starDiameterVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 24), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterVpnName.setStatus('current')
if mibBuilder.loadTexts: starDiameterVpnName.setDescription('Diameter VPN (Context) Name')
starDiameterPeerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 25), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starDiameterPeerAddr.setDescription('Diameter Peer Address')
starDiameterEndpointName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 26), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterEndpointName.setStatus('current')
if mibBuilder.loadTexts: starDiameterEndpointName.setDescription('Diameter Endpoint Name')
starDiameterPeerAddrIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 34), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterPeerAddrIpv6.setStatus('current')
if mibBuilder.loadTexts: starDiameterPeerAddrIpv6.setDescription('Diameter Peer Address')
starInterfaceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 27), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starInterfaceIPAddress.setStatus('current')
if mibBuilder.loadTexts: starInterfaceIPAddress.setDescription('Interface IP Address')
starOSPFNeighborRouterID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 28), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starOSPFNeighborRouterID.setStatus('current')
if mibBuilder.loadTexts: starOSPFNeighborRouterID.setDescription('Interface IP Address')
starOSPFFromState = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 29), StarOSPFNeighborState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starOSPFFromState.setStatus('current')
if mibBuilder.loadTexts: starOSPFFromState.setDescription('FROM state for OSPF Neighbor')
starOSPFToState = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 30), StarOSPFNeighborState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starOSPFToState.setStatus('current')
if mibBuilder.loadTexts: starOSPFToState.setDescription('TO state for OSPF Neighbor')
starBLFilename = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 31), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBLFilename.setStatus('current')
if mibBuilder.loadTexts: starBLFilename.setDescription('File name for the OPTBLDB')
starBLErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknownerror", 1), ("notavailable", 2), ("loadfailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBLErrorCode.setStatus('current')
if mibBuilder.loadTexts: starBLErrorCode.setDescription('Error code')
starDiameterECode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notcomplete", 1), ("hostnamemismatch", 2), ("hostrealmmismatch", 3), ("securitymismatch", 4), ("tlssertificateerror", 5), ("tlshandshakeerror", 6), ("authappidmismatch", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterECode.setStatus('current')
if mibBuilder.loadTexts: starDiameterECode.setDescription('Diameter Cause Code')
starContFiltCFUpgradeFilename = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 35), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starContFiltCFUpgradeFilename.setStatus('current')
if mibBuilder.loadTexts: starContFiltCFUpgradeFilename.setDescription('File name for the Full or Incremental OPTCMDB')
starContFiltCFUpgradeErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknownerror", 1), ("upgradefullfailure", 2), ("upgradeincrfailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starContFiltCFUpgradeErrorCode.setStatus('current')
if mibBuilder.loadTexts: starContFiltCFUpgradeErrorCode.setDescription('Error code')
starBLUpgradeFilename = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 37), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBLUpgradeFilename.setStatus('current')
if mibBuilder.loadTexts: starBLUpgradeFilename.setDescription('File name for the Full OPTBLDB')
starBLUpgradeErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknownerror", 1), ("upgradefullfailure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBLUpgradeErrorCode.setStatus('current')
if mibBuilder.loadTexts: starBLUpgradeErrorCode.setDescription('Error code')
starDynPkgFilename = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 39), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDynPkgFilename.setStatus('current')
if mibBuilder.loadTexts: starDynPkgFilename.setDescription('File name for the DynPkg')
starDynCFErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknownerror", 1), ("notavailable", 2), ("loadfailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDynCFErrorCode.setStatus('current')
if mibBuilder.loadTexts: starDynCFErrorCode.setDescription('Error code')
starDynPkgUpgradeFilename = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 41), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDynPkgUpgradeFilename.setStatus('current')
if mibBuilder.loadTexts: starDynPkgUpgradeFilename.setDescription('File name for the Full DynPkg')
starDynCFUpgradeErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknownerror", 1), ("upgradefullfailure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDynCFUpgradeErrorCode.setStatus('current')
if mibBuilder.loadTexts: starDynCFUpgradeErrorCode.setDescription('Error code')
starCscfSessCongestionResourceType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpu", 1), ("memory", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCscfSessCongestionResourceType.setStatus('current')
if mibBuilder.loadTexts: starCscfSessCongestionResourceType.setDescription('Cscf Session resource type for a congestion event')
starSmgrId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSmgrId.setStatus('current')
if mibBuilder.loadTexts: starSmgrId.setDescription('Session Manager Instance ID')
starEGTPVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 45), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPVpnName.setStatus('current')
if mibBuilder.loadTexts: starEGTPVpnName.setDescription('The name of this VPN (context)')
starEGTPServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 46), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPServName.setStatus('current')
if mibBuilder.loadTexts: starEGTPServName.setDescription('The name of this service')
starEGTPInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("sgwingress", 1), ("sgwegress", 2), ("pgwingress", 3), ("sgsn", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPInterfaceType.setStatus('current')
if mibBuilder.loadTexts: starEGTPInterfaceType.setDescription('Egtp interface type')
starEGTPSelfPort = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 48), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPSelfPort.setStatus('current')
if mibBuilder.loadTexts: starEGTPSelfPort.setDescription('The Port number of the EGTP')
starEGTPSelfAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 49), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPSelfAddr.setStatus('current')
if mibBuilder.loadTexts: starEGTPSelfAddr.setDescription('The IP Address of the EGTP')
starEGTPPeerPort = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 50), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPPeerPort.setStatus('current')
if mibBuilder.loadTexts: starEGTPPeerPort.setDescription('The Port number of the PeerNode')
starEGTPPeerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 51), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starEGTPPeerAddr.setDescription('The IP Address of the PeerNode')
starEGTPPeerOldRstCnt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 52), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPPeerOldRstCnt.setStatus('current')
if mibBuilder.loadTexts: starEGTPPeerOldRstCnt.setDescription('EGTP peer old restart counter')
starEGTPPeerNewRstCnt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 53), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPPeerNewRstCnt.setStatus('current')
if mibBuilder.loadTexts: starEGTPPeerNewRstCnt.setDescription('EGTP peer new restart counter')
starEGTPPeerSessCnt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 54), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPPeerSessCnt.setStatus('current')
if mibBuilder.loadTexts: starEGTPPeerSessCnt.setDescription('EGTP peer session count')
starEGTPFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("restartcounterchange", 1), ("noresponsefrompeer", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starEGTPFailureReason.setStatus('current')
if mibBuilder.loadTexts: starEGTPFailureReason.setDescription('Egtp path failure reason')
starGSSCDRLossConfigured = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 56), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSCDRLossConfigured.setStatus('current')
if mibBuilder.loadTexts: starGSSCDRLossConfigured.setDescription('The configured value of threshold CDR Loss at GSS')
starGSSCDRLossMeasured = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 57), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSCDRLossMeasured.setStatus('current')
if mibBuilder.loadTexts: starGSSCDRLossMeasured.setDescription('The Measured value of CDR Loss at GSS')
starLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 58), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLicenseKey.setStatus('current')
if mibBuilder.loadTexts: starLicenseKey.setDescription('The license key')
starLicenseExpiryDate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 59), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLicenseExpiryDate.setStatus('current')
if mibBuilder.loadTexts: starLicenseExpiryDate.setDescription('The license expiration date/time')
starLicenseDaysRemaining = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 60), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLicenseDaysRemaining.setStatus('current')
if mibBuilder.loadTexts: starLicenseDaysRemaining.setDescription('The number of days remaining before the license expires')
starLicenseDaysAfterExpiry = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 61), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLicenseDaysAfterExpiry.setStatus('current')
if mibBuilder.loadTexts: starLicenseDaysAfterExpiry.setDescription('The number of days after the license has expired')
starNPUSlot = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starNPUSlot.setStatus('current')
if mibBuilder.loadTexts: starNPUSlot.setDescription('The NPU slot number')
starSPRServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 63), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSPRServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: starSPRServerIpAddr.setDescription('The IP Address of the SSC Server')
starMVGEndpointName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 66), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMVGEndpointName.setStatus('current')
if mibBuilder.loadTexts: starMVGEndpointName.setDescription('MVG Endpoint Name')
starMVGCauseCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("servernotreachable", 1), ("servicereachable", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMVGCauseCode.setStatus('current')
if mibBuilder.loadTexts: starMVGCauseCode.setDescription('MVG Cause Code')
starMVGProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protocolhttp", 1), ("protocoltcp", 2), ("protocolicmp", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMVGProtocolType.setStatus('current')
if mibBuilder.loadTexts: starMVGProtocolType.setDescription('MVG Protocol Types')
starPCCNtfyIntfPeerName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 73), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPCCNtfyIntfPeerName.setStatus('current')
if mibBuilder.loadTexts: starPCCNtfyIntfPeerName.setDescription(' IPCF Event Notification Interface Peer Name ')
starECSTotalDNSLearntIPThresholdInstance = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starECSTotalDNSLearntIPThresholdInstance.setStatus('current')
if mibBuilder.loadTexts: starECSTotalDNSLearntIPThresholdInstance.setDescription(' ACSMgr Instance Id')
starECSTotalDNSLearntIPThresholdconfigured = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starECSTotalDNSLearntIPThresholdconfigured.setStatus('current')
if mibBuilder.loadTexts: starECSTotalDNSLearntIPThresholdconfigured.setDescription(' Configured Threshold value in Percentage')
starECSTotalDNSLearntIPThresholdmeasured = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starECSTotalDNSLearntIPThresholdmeasured.setStatus('current')
if mibBuilder.loadTexts: starECSTotalDNSLearntIPThresholdmeasured.setDescription(' Measured value in Percentage')
starPeerAddressIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 77), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPeerAddressIpv6.setStatus('current')
if mibBuilder.loadTexts: starPeerAddressIpv6.setDescription('Peer Ipv6 Address')
starLAGPartner = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 78), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLAGPartner.setStatus('current')
if mibBuilder.loadTexts: starLAGPartner.setDescription('The name of this service')
starSGSServiceVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 79), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSGSServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starSGSServiceVpnName.setDescription('SGS service context name')
starSGSServiceServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 80), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSGSServiceServName.setStatus('current')
if mibBuilder.loadTexts: starSGSServiceServName.setDescription('SGS service name')
starVLRName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 81), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starVLRName.setStatus('current')
if mibBuilder.loadTexts: starVLRName.setDescription('VLR name')
starVLRIpAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 82), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starVLRIpAddr1.setStatus('current')
if mibBuilder.loadTexts: starVLRIpAddr1.setDescription('VLR IP Address1')
starVLRIpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 83), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starVLRIpAddr2.setStatus('current')
if mibBuilder.loadTexts: starVLRIpAddr2.setDescription('VLR IP Address2')
starVLRPortNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starVLRPortNum.setStatus('current')
if mibBuilder.loadTexts: starVLRPortNum.setDescription('VLR Port Number')
starCongestionType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCongestionType.setStatus('current')
if mibBuilder.loadTexts: starCongestionType.setDescription('The type congestion threshold hit')
starCongestionActionProfileName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 86), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCongestionActionProfileName.setStatus('current')
if mibBuilder.loadTexts: starCongestionActionProfileName.setDescription('The name of a action profile asscociated with the threshold type')
starSessMgrFlowInstId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessMgrFlowInstId.setStatus('current')
if mibBuilder.loadTexts: starSessMgrFlowInstId.setDescription('Session Manager instance ID')
starSessMgrFlowPDNNo = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessMgrFlowPDNNo.setStatus('current')
if mibBuilder.loadTexts: starSessMgrFlowPDNNo.setDescription('Tota PDNs Available')
starSessMgrFlowMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessMgrFlowMemUsage.setStatus('current')
if mibBuilder.loadTexts: starSessMgrFlowMemUsage.setDescription('Totat Memory Usage of this instance')
starSessMgrFlowCounter = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessMgrFlowCounter.setStatus('current')
if mibBuilder.loadTexts: starSessMgrFlowCounter.setDescription('Session Manager Active Flows')
starSessMgrTotalFlowCount = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessMgrTotalFlowCount.setStatus('current')
if mibBuilder.loadTexts: starSessMgrTotalFlowCount.setDescription('Session Manager Active Flows')
starHENBGWServiceVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 92), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starHENBGWServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServiceVpnName.setDescription('HENBGW Service VPN Name')
starHENBGWServiceServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 93), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starHENBGWServiceServName.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServiceServName.setDescription('HENBGW Service Name')
starHENBGWServiceLogicalENBId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 94), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starHENBGWServiceLogicalENBId.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServiceLogicalENBId.setDescription('HENBGW Service Logical Enodb ID')
starHENBGWServiceMMEServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 95), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starHENBGWServiceMMEServName.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServiceMMEServName.setDescription('HENBGW Service MME Name')
starHENBGWServiceSelfAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 96), IpAddress())
if mibBuilder.loadTexts: starHENBGWServiceSelfAddr.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServiceSelfAddr.setDescription('HENBGW Service Self IP Address')
starHENBGWServicePeerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 97), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starHENBGWServicePeerAddr.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServicePeerAddr.setDescription('HENBGW Service Peer IP Address')
starHENBGWServiceSelfPort = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 98), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: starHENBGWServiceSelfPort.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServiceSelfPort.setDescription('HENBGW Service Self Port Number')
starHENBGWServicePeerPort = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starHENBGWServicePeerPort.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServicePeerPort.setDescription('HENBGW Service Peer Port Number')
starNPUSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starNPUSlotNumber.setStatus('current')
if mibBuilder.loadTexts: starNPUSlotNumber.setDescription('NPU Slot Number')
starNPUCPUNumber = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starNPUCPUNumber.setStatus('current')
if mibBuilder.loadTexts: starNPUCPUNumber.setDescription('NPU CPU Number')
starNPUNPUNumber = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starNPUNPUNumber.setStatus('current')
if mibBuilder.loadTexts: starNPUNPUNumber.setDescription("NPU's NPU Number")
starChassisCrashList = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 103), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starChassisCrashList.setStatus('current')
if mibBuilder.loadTexts: starChassisCrashList.setDescription('Chassis Crash List Full')
starLIRcvryErrType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("syncerror", 0), ("readerror", 1), ("writeerror", 2), ("integrityerror", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLIRcvryErrType.setStatus('current')
if mibBuilder.loadTexts: starLIRcvryErrType.setDescription('LI Recovery Error Types')
starLIRcvryErrString = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 105), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLIRcvryErrString.setStatus('current')
if mibBuilder.loadTexts: starLIRcvryErrString.setDescription('LI Recovery Error String')
starPMIPVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 106), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPVpnName.setStatus('current')
if mibBuilder.loadTexts: starPMIPVpnName.setDescription('The name of this VPN (context)')
starPMIPServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 107), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPServName.setStatus('current')
if mibBuilder.loadTexts: starPMIPServName.setDescription('The name of this service')
starPMIPSelfAddrType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 108), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPSelfAddrType.setStatus('current')
if mibBuilder.loadTexts: starPMIPSelfAddrType.setDescription('The IP Address of the PMIP')
starPMIPSelfAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 109), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPSelfAddr.setStatus('current')
if mibBuilder.loadTexts: starPMIPSelfAddr.setDescription('The IP Address of the PMIP')
starPMIPPeerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 110), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: starPMIPPeerAddrType.setDescription('The IP Address of the PMIP')
starPMIPPeerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 111), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starPMIPPeerAddr.setDescription('The IP Address of the PMIP')
starPMIPPeerOldRstCnt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 112), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPPeerOldRstCnt.setStatus('current')
if mibBuilder.loadTexts: starPMIPPeerOldRstCnt.setDescription('PMIP peer old restart counter')
starPMIPPeerNewRstCnt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 113), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPPeerNewRstCnt.setStatus('current')
if mibBuilder.loadTexts: starPMIPPeerNewRstCnt.setDescription('PMIP peer new restart counter')
starPMIPPeerSessCnt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 114), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPPeerSessCnt.setStatus('current')
if mibBuilder.loadTexts: starPMIPPeerSessCnt.setDescription('PMIP peer session count')
starPMIPFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("heartbeatrsprestartchange", 1), ("noresponsefrompeer", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPMIPFailureReason.setStatus('current')
if mibBuilder.loadTexts: starPMIPFailureReason.setDescription('PMIP path failure reason')
starMMEInitialDisallowReason = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 116), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMEInitialDisallowReason.setStatus('current')
if mibBuilder.loadTexts: starMMEInitialDisallowReason.setDescription('MME initial connection disallow reason.')
starSLSServiceVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 117), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSLSServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starSLSServiceVpnName.setDescription('SLS service context name')
starSLSServiceServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 118), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSLSServiceServName.setStatus('current')
if mibBuilder.loadTexts: starSLSServiceServName.setDescription('SLS service name')
starESMLCId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 119), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starESMLCId.setStatus('current')
if mibBuilder.loadTexts: starESMLCId.setDescription('ESMLC Id')
starESMLCIpAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 120), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starESMLCIpAddr1.setStatus('current')
if mibBuilder.loadTexts: starESMLCIpAddr1.setDescription('ESMLC IP Address1')
starESMLCIpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 121), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starESMLCIpAddr2.setStatus('current')
if mibBuilder.loadTexts: starESMLCIpAddr2.setDescription('ESMLC IP Address2')
starESMLCPortNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 122), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starESMLCPortNum.setStatus('current')
if mibBuilder.loadTexts: starESMLCPortNum.setDescription('ESMLC Port Number')
starSBCServiceVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 123), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSBCServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starSBCServiceVpnName.setDescription('SBc service context name')
starSBCServiceServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 124), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSBCServiceServName.setStatus('current')
if mibBuilder.loadTexts: starSBCServiceServName.setDescription('SBc service name')
starPeerId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 125), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPeerId.setStatus('current')
if mibBuilder.loadTexts: starPeerId.setDescription('Peer Id')
starPeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 126), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: starPeerIpAddr.setDescription('Peer IP Address')
starPeerPortNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 127), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPeerPortNum.setStatus('current')
if mibBuilder.loadTexts: starPeerPortNum.setDescription('Peer Port Number')
starBfdSrcAddressType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 128), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBfdSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: starBfdSrcAddressType.setDescription('This object specifies IP address type of the source IP address of this BFD session. Only values unknown(0), ipv4(1), ipv6(2), or ipv6z(4) have to be supported. The value of unknown(0) is allowed only when the session is singleHop(1) and the source IP address of this BFD session is derived from the outgoing interface, or when the BFD session is not associated with a specific interface.')
starBfdSrcAddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 129), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBfdSrcAddress.setStatus('current')
if mibBuilder.loadTexts: starBfdSrcAddress.setDescription('This object specifies the source IP address of this BFD session.')
starBfdDstAddressType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 130), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBfdDstAddressType.setStatus('current')
if mibBuilder.loadTexts: starBfdDstAddressType.setDescription('This object specifies IP address type of the neighboring IP address which is being monitored with this BFD session. Only values unknown(0), ipv4(1), ipv6(2), or ipv6z(4) have to be supported. The value of unknown(0) is allowed only when the session is singleHop(1) and the outgoing interface is of type point-to-point, or when the BFD session is not associated with a specific interface.')
starBfdDstAddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 131), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBfdDstAddress.setStatus('current')
if mibBuilder.loadTexts: starBfdDstAddress.setDescription('This object specifies the neighboring IP address which is being monitored with this BFD session.')
starBfdLocalDisc = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 132), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBfdLocalDisc.setStatus('current')
if mibBuilder.loadTexts: starBfdLocalDisc.setDescription('This object specifies the local discriminator for this BFD session, used to uniquely identify it')
starBfdRemDisc = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 133), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBfdRemDisc.setStatus('current')
if mibBuilder.loadTexts: starBfdRemDisc.setDescription('This object specifies the session discriminator chosen by the remote system for this BFD session. The value may be zero(0) if the remote discriminator is not yet known or if the session is in the down or adminDown(1) state.')
starBfdSessDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 134), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noDiagnostic", 0), ("controlDetectionTimeExpired", 1), ("echoFunctionFailed", 2), ("neighborSignaledSessionDown", 3), ("forwardingPlaneReset", 4), ("pathDown", 5), ("concatenatedPathDown", 6), ("administrativelyDown", 7), ("reverseConcatenatedPathDown", 8), ("misConnectivityDefect", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBfdSessDiagCode.setStatus('current')
if mibBuilder.loadTexts: starBfdSessDiagCode.setDescription("A diagnostic code specifying the local system's reason for the last transition of the session from up(4) to some other state.")
starSRPSwitchReason = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 135), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notDefined", 0), ("aaaFailure", 1), ("bgpFailure", 2), ("bfdFailure", 3), ("diameterFailure", 4), ("hsrpSwitchover", 5), ("chassisChassisBfdFailure", 6), ("dualActive", 7), ("dualStandby", 8), ("deadTimerExpiry", 9), ("forceStateChange", 10), ("manualSwitchOver", 11), ("egqcFailure", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSRPSwitchReason.setStatus('current')
if mibBuilder.loadTexts: starSRPSwitchReason.setDescription("A Switchover code specifying the SRP's Switchover reason. The following reasons would appear when chassis transitioning from Active to Standby State: notDefined(0), aaaFailure(1), bgpFailure(2), bfdFailure(3), diameterFailure(4), hsrpSwitchover(5), dualActive(7) manualSwitchOver(11), egqcFailure(12), The following reasons would appear when chassis transitioning from Standby to Pending Active State: notDefined(0), chassisChassisBfdFailure(6), deadTimerExpiry(9) ")
starHENBGWServiceTLRI = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 136), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starHENBGWServiceTLRI.setStatus('current')
if mibBuilder.loadTexts: starHENBGWServiceTLRI.setDescription('HENBGW Service Overload Traffic load reduction indication percentage.')
starCBSServiceVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 139), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCBSServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starCBSServiceVpnName.setDescription('CBS service context name')
starIuBcSelfPortNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIuBcSelfPortNum.setStatus('current')
if mibBuilder.loadTexts: starIuBcSelfPortNum.setDescription('IuBc Self Port Number')
starIuBcSelfIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 141), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIuBcSelfIpAddr.setStatus('current')
if mibBuilder.loadTexts: starIuBcSelfIpAddr.setDescription('IuBc Self IP Address')
starIuBcPeerPortNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 142), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIuBcPeerPortNum.setStatus('current')
if mibBuilder.loadTexts: starIuBcPeerPortNum.setDescription('Peer Port Number')
starIuBcPeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 143), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIuBcPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: starIuBcPeerIpAddr.setDescription('IuBc Peer IP Address')
starIuBcTcpConnCauseStr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 144), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIuBcTcpConnCauseStr.setStatus('current')
if mibBuilder.loadTexts: starIuBcTcpConnCauseStr.setDescription('IuBc Tcp Conn Cause Str')
starPhyPortId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 145), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starPhyPortId.setStatus('current')
if mibBuilder.loadTexts: starPhyPortId.setDescription('Physical Port Id as IfIndex')
starGTPCRLFSessMgrInst = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 146), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGTPCRLFSessMgrInst.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFSessMgrInst.setDescription('Session Manager Instance')
starGTPCRLFVPNName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 147), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGTPCRLFVPNName.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFVPNName.setDescription('The context name of VPN is ')
starGTPCRLFVPNId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 148), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGTPCRLFVPNId.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFVPNId.setDescription('The context Id of VPN is ')
starGTPCRLFContextName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 149), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGTPCRLFContextName.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFContextName.setDescription('The name of Context is ')
starGTPCRLFCurrAppTPS = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 150), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGTPCRLFCurrAppTPS.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFCurrAppTPS.setDescription('The current applied TPS value is ')
starGTPCRLFCurrAppDelayTol = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 151), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGTPCRLFCurrAppDelayTol.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFCurrAppDelayTol.setDescription('The current applied delay Tolerance value is ')
starBGPPeerIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 152), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starBGPPeerIpv6Address.setStatus('current')
if mibBuilder.loadTexts: starBGPPeerIpv6Address.setDescription('Diameter Peer Address in IPv6')
starMMEEMBMSServiceVpnName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 153), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMEEMBMSServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starMMEEMBMSServiceVpnName.setDescription('MME-EMBMS service context name')
starMMEEMBMSServiceServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 154), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMEEMBMSServiceServName.setStatus('current')
if mibBuilder.loadTexts: starMMEEMBMSServiceServName.setDescription('MME-EMBMS service name')
starMMEEMBMSPeerId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 155), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMEEMBMSPeerId.setStatus('current')
if mibBuilder.loadTexts: starMMEEMBMSPeerId.setDescription('Peer Id')
starMMEEMBMSPeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 156), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMEEMBMSPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: starMMEEMBMSPeerIpAddr.setDescription('Peer IP Address')
starMMEEMBMSPeerPortNum = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 157), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMEEMBMSPeerPortNum.setStatus('current')
if mibBuilder.loadTexts: starMMEEMBMSPeerPortNum.setDescription('Peer Port Number')
starImsimgrInstId = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 158), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starImsimgrInstId.setStatus('current')
if mibBuilder.loadTexts: starImsimgrInstId.setDescription('IMSI Manager Instance')
starLAGGroup = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 159), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 29))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLAGGroup.setStatus('current')
if mibBuilder.loadTexts: starLAGGroup.setDescription('The group number of the LAG group')
starLAGMinlink = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 160), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 29))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starLAGMinlink.setStatus('current')
if mibBuilder.loadTexts: starLAGMinlink.setDescription('The Minlink configured for this lag_group')
starVRFName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 161), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starVRFName.setStatus('current')
if mibBuilder.loadTexts: starVRFName.setDescription('VRF Name')
starStatFilesizeLimit = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 162), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 29))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starStatFilesizeLimit.setStatus('current')
if mibBuilder.loadTexts: starStatFilesizeLimit.setDescription('The Stat File Size in integer')
starStatFilesizeMeasured = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 163), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 29))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starStatFilesizeMeasured.setStatus('current')
if mibBuilder.loadTexts: starStatFilesizeMeasured.setDescription('The Stat file Size measured')
starTetheringDatabasePreDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 164), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starTetheringDatabasePreDBVersion.setStatus('current')
if mibBuilder.loadTexts: starTetheringDatabasePreDBVersion.setDescription('Tethering Database Pre-DB Version')
starTetheringDatabaseUpgradeDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 165), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starTetheringDatabaseUpgradeDBVersion.setStatus('current')
if mibBuilder.loadTexts: starTetheringDatabaseUpgradeDBVersion.setDescription('Tethering Database Upgrade DB Version')
starTetheringDatabaseUpgradeComment = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 166), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starTetheringDatabaseUpgradeComment.setStatus('current')
if mibBuilder.loadTexts: starTetheringDatabaseUpgradeComment.setDescription('Tethering Database Upgrade Comment String')
starDiscReasons = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 167), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiscReasons.setStatus('current')
if mibBuilder.loadTexts: starDiscReasons.setDescription('Disconnect Reasons')
starDdfDev = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 31, 168), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ddf0", 0), ("ddf1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starDdfDev.setStatus('current')
if mibBuilder.loadTexts: starDdfDev.setDescription('Identifies DDF Engine number that was reloaded')
starHdRaidMgmtCardSwitchoverCause = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 169), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("stuck", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starHdRaidMgmtCardSwitchoverCause.setStatus('current')
if mibBuilder.loadTexts: starHdRaidMgmtCardSwitchoverCause.setDescription('Management Card Switchover due to HD Raid irrecoverable error cause')
starDiameterPeerName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 170), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterPeerName.setStatus('current')
if mibBuilder.loadTexts: starDiameterPeerName.setDescription('Diameter Peer Name')
starDiameterRlfContext = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 171), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterRlfContext.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfContext.setDescription('RLF Context Name')
starDiameterRlfECode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 172), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("thresholdgood", 0), ("thresholdover", 1), ("overlimiterror", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterRlfECode.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfECode.setDescription('Diameter Rlf Status Code')
starDiameterRlfTps = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 173), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterRlfTps.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfTps.setDescription('Diameter RLF Configured TPS')
starDiameterRlfDelayTolerance = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 174), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterRlfDelayTolerance.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfDelayTolerance.setDescription('Diameter RLF Configured Delay Tolerance')
starDiameterRlfQueuePercent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 175), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterRlfQueuePercent.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfQueuePercent.setDescription('Diameter RLF Current Queue Percentage')
starDiameterDiamproxyInstance = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 176), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 144))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starDiameterDiamproxyInstance.setStatus('current')
if mibBuilder.loadTexts: starDiameterDiamproxyInstance.setDescription('Diameter Proxy Instance Number')
starSmartLicenseServiceUsage = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 177), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSmartLicenseServiceUsage.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseServiceUsage.setDescription('Smart License Service usage count')
starSmartLicenseServiceName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 178), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSmartLicenseServiceName.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseServiceName.setDescription('Smart License Service name')
starSmartLicenseEvalModeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 179), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSmartLicenseEvalModeRemaining.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseEvalModeRemaining.setDescription('Renaming number of days the device can be used in Evaluation Mode')
starRuleBaseName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 180), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starRuleBaseName.setStatus('current')
if mibBuilder.loadTexts: starRuleBaseName.setDescription('Rulebase Name')
starRuleDefName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 181), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starRuleDefName.setStatus('current')
if mibBuilder.loadTexts: starRuleDefName.setDescription('Ruledef/GroupOfRuledef Name')
starGroupOfRuledef = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 182), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("Ruledef", 0), ("GroupOfRuledef", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGroupOfRuledef.setStatus('current')
if mibBuilder.loadTexts: starGroupOfRuledef.setDescription('GroupOfRuledef flag')
starIKEv2DDoSUDPFailClearStr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 183), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIKEv2DDoSUDPFailClearStr.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDoSUDPFailClearStr.setDescription('CLear string for IKEv2 DDoS UDP Fail clear alarm')
starMacaddress = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 184), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMacaddress.setStatus('current')
if mibBuilder.loadTexts: starMacaddress.setDescription('Mac Address for NicBondChange trap')
starP2PPluginVersion = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 185), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starP2PPluginVersion.setStatus('current')
if mibBuilder.loadTexts: starP2PPluginVersion.setDescription('P2P Plugin Version for ADC license')
starADCLicenseExpiryDate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 186), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starADCLicenseExpiryDate.setStatus('current')
if mibBuilder.loadTexts: starADCLicenseExpiryDate.setDescription('The license expiration date/time')
starSxInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 187), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("sxa", 1), ("sxb", 2), ("sxab", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSxInterfaceType.setStatus('current')
if mibBuilder.loadTexts: starSxInterfaceType.setDescription('Sx interface type')
starSxSelfAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 188), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSxSelfAddr.setStatus('current')
if mibBuilder.loadTexts: starSxSelfAddr.setDescription('The IP Address of the Sx Service')
starSxPeerAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 189), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSxPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starSxPeerAddr.setDescription('The IP Address of the Sx Peer Node')
starSxPeerNewRecTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 190), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSxPeerNewRecTimeStamp.setStatus('current')
if mibBuilder.loadTexts: starSxPeerNewRecTimeStamp.setDescription('The New Recovery timestamp of the Peer')
starSxPeerOldRecTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 191), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSxPeerOldRecTimeStamp.setStatus('current')
if mibBuilder.loadTexts: starSxPeerOldRecTimeStamp.setDescription('The Old Recovery timestamp of the Peer')
starSxFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 192), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("no-response-from-peer", 1), ("recovery-timestamp-change-in-heartbeat-req-msg", 2), ("recovery-timestamp-change-in-heartbeat-rsp-msg", 3), ("recovery-timestamp-change-in-control-msg", 4), ("heartbeat-rsp-received", 5), ("heartbeat-req-received", 6), ("sx-association-established", 7), ("bfd-failure", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSxFailureCause.setStatus('current')
if mibBuilder.loadTexts: starSxFailureCause.setDescription('Sx Path failure cause')
starChassisThroughputLimit = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 193), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starChassisThroughputLimit.setStatus('current')
if mibBuilder.loadTexts: starChassisThroughputLimit.setDescription('The committed chassis throughput')
starChassisThroughputMeasured = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 194), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starChassisThroughputMeasured.setStatus('current')
if mibBuilder.loadTexts: starChassisThroughputMeasured.setDescription('The served chassis throughput')
starSmartLicenseFeatureUsage = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 195), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSmartLicenseFeatureUsage.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseFeatureUsage.setDescription('Smart License Feature usage count')
starSmartLicenseFeatureName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 196), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSmartLicenseFeatureName.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseFeatureName.setDescription('Smart License Feature name')
starCommonDatabasePreDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 197), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCommonDatabasePreDBVersion.setStatus('current')
if mibBuilder.loadTexts: starCommonDatabasePreDBVersion.setDescription('Common Database Pre-DB Version')
starCommonDatabaseUpgradeDBVersion = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 198), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCommonDatabaseUpgradeDBVersion.setStatus('current')
if mibBuilder.loadTexts: starCommonDatabaseUpgradeDBVersion.setDescription('Common Database Upgrade DB Version')
starCommonDatabaseUpgradeComment = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 199), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCommonDatabaseUpgradeComment.setStatus('current')
if mibBuilder.loadTexts: starCommonDatabaseUpgradeComment.setDescription('Common Database Upgrade Comment String')
starSxCPUPGroupName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 31, 200), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSxCPUPGroupName.setStatus('current')
if mibBuilder.loadTexts: starSxCPUPGroupName.setDescription('The name of the CP or UP group')
starentL2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 33))
starL2TPTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1), )
if mibBuilder.loadTexts: starL2TPTable.setStatus('current')
if mibBuilder.loadTexts: starL2TPTable.setDescription('A table containing L2TP related information')
starL2TPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starL2TPLocalTunnelID"), (0, "STARENT-MIB", "starL2TPPeerTunnelID"))
if mibBuilder.loadTexts: starL2TPEntry.setStatus('current')
if mibBuilder.loadTexts: starL2TPEntry.setDescription('The statistics for a L2TP entry')
starL2TPLocalTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL2TPLocalTunnelID.setStatus('current')
if mibBuilder.loadTexts: starL2TPLocalTunnelID.setDescription('The internal identification of the L2TP local tunnel ID')
starL2TPPeerTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL2TPPeerTunnelID.setStatus('current')
if mibBuilder.loadTexts: starL2TPPeerTunnelID.setDescription('The internal identification of the L2TP peer tunnel ID')
starL2TPContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL2TPContextName.setStatus('current')
if mibBuilder.loadTexts: starL2TPContextName.setDescription('The name of the context')
starL2TPServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL2TPServiceName.setStatus('current')
if mibBuilder.loadTexts: starL2TPServiceName.setDescription('The name of the service')
starL2TPServiceTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL2TPServiceTypeName.setStatus('current')
if mibBuilder.loadTexts: starL2TPServiceTypeName.setDescription('The name of the service type')
starL2TPLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1, 6), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL2TPLocalAddress.setStatus('current')
if mibBuilder.loadTexts: starL2TPLocalAddress.setDescription('The local address of the service')
starL2TPPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 33, 1, 1, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starL2TPPeerAddress.setStatus('current')
if mibBuilder.loadTexts: starL2TPPeerAddress.setDescription('The peer address of the service')
starentGGSNService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 32))
starGGSNSerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1), )
if mibBuilder.loadTexts: starGGSNSerTable.setStatus('current')
if mibBuilder.loadTexts: starGGSNSerTable.setDescription('A table containing GGSN related information')
starGGSNSerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starGGSNSerVpnID"), (0, "STARENT-MIB", "starGGSNSerSvcID"))
if mibBuilder.loadTexts: starGGSNSerEntry.setStatus('current')
if mibBuilder.loadTexts: starGGSNSerEntry.setDescription('The statistics for a specific GGSN service')
starGGSNSerVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starGGSNSerVpnID.setStatus('current')
if mibBuilder.loadTexts: starGGSNSerVpnID.setDescription('The internal identification of the VPN (context)')
starGGSNSerSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 2), Gauge32())
if mibBuilder.loadTexts: starGGSNSerSvcID.setStatus('current')
if mibBuilder.loadTexts: starGGSNSerSvcID.setDescription('The internal identification of this service; unique within a specific context')
starSessGGSNVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessGGSNVpnName.setStatus('current')
if mibBuilder.loadTexts: starSessGGSNVpnName.setDescription('The name of this VPN (context)')
starSessGGSNServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessGGSNServName.setStatus('current')
if mibBuilder.loadTexts: starSessGGSNServName.setDescription('The name of this service')
starSessGGSNPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 5), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessGGSNPeerPort.setStatus('current')
if mibBuilder.loadTexts: starSessGGSNPeerPort.setDescription('The Peer Port for which PATH Failure has occured')
starSessGGSNPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessGGSNPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starSessGGSNPeerAddr.setDescription('The Peer Address for which PATH Failure has occured')
starSessGGSNImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessGGSNImsi.setStatus('current')
if mibBuilder.loadTexts: starSessGGSNImsi.setDescription('The IMSI of the subscriber')
starSessGGSNSubsName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessGGSNSubsName.setStatus('current')
if mibBuilder.loadTexts: starSessGGSNSubsName.setDescription('The name of the subscriber')
starSessGGSNAPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessGGSNAPNName.setStatus('current')
if mibBuilder.loadTexts: starSessGGSNAPNName.setDescription('The name of the APN')
starSessGTPPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 32, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSessGTPPGroupName.setStatus('current')
if mibBuilder.loadTexts: starSessGTPPGroupName.setDescription('The name of the GTPP Group')
starSessSub1 = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 34))
starSessSub1Context = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSessSub1Context.setStatus('current')
if mibBuilder.loadTexts: starSessSub1Context.setDescription('The name of the context for this subscriber. If a SET is received, triggers a lookup for a subscriber that matches the specified search criteria and fills in the various objects in this row.')
starSessSub1NAI = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSessSub1NAI.setStatus('current')
if mibBuilder.loadTexts: starSessSub1NAI.setDescription('The NAI for this subscriber If a SET is received, triggers a lookup for a subscriber that matches the specified search criteria and fills in the various objects in this row.')
starSessSub1MSID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSessSub1MSID.setStatus('current')
if mibBuilder.loadTexts: starSessSub1MSID.setDescription('The MSID for this subscriber If a SET is received, triggers a lookup for a subscriber that matches the specified search criteria and fills in the various objects in this row.')
starSessSub1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: starSessSub1IpAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IpAddr.setDescription('The remote IP address for this subscriber If a SET is received, triggers a lookup for a subscriber that matches the specified search criteria and fills in the various objects in this row.')
starSessSub1LastResult = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("error", 1), ("nomatch", 2), ("onematch", 3), ("multimatch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1LastResult.setStatus('current')
if mibBuilder.loadTexts: starSessSub1LastResult.setDescription("The result of the last search. A value of unknown(0) means that the query wasn't created properly, or that no query has been performed; error(1) indicates an internal error performing the query, this is an abnormal condition that shouldn't normally be seen; nomatch(2) means that the query did not find a matching subscriber; onematch(3) means that the query found exactly one subscriber; multimatch(4) means that more than one subscriber matched; the information for one (random) subscriber was fetched")
starSessSub1ServiceName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ServiceName.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ServiceName.setDescription('The service name of the subscriber.')
starSessSub1HAIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1HAIpAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1HAIpAddr.setDescription('The HA IP address for FA MIP connections')
starSessSub1PeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1PeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1PeerIpAddr.setDescription('The remote IP address of the peer. The type of peer depends on the session type. Session Type Peer ------------ --------- PDSN PCF GGSN SGSN HA Mobile IP/HA IPSEC FA LAC LNS LNS LAC')
starSessSub1InPackets = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1InPackets.setStatus('current')
if mibBuilder.loadTexts: starSessSub1InPackets.setDescription('The number of incoming packets for the subscriber')
starSessSub1InPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1InPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: starSessSub1InPacketsDropped.setDescription('The number of incoming packets dropped for the subscriber')
starSessSub1InBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 11), Counter32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1InBytes.setStatus('current')
if mibBuilder.loadTexts: starSessSub1InBytes.setDescription('The count of incoming bytes for the subscriber, in kilobytes, rounded down (i.e. 1023 bytes = 0 kilobytes')
starSessSub1OutPackets = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1OutPackets.setStatus('current')
if mibBuilder.loadTexts: starSessSub1OutPackets.setDescription('The number of outgoing packets for the subscriber')
starSessSub1OutPacketsDropped = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1OutPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: starSessSub1OutPacketsDropped.setDescription('The number of out going packets dropped for the subscriber')
starSessSub1OutBytes = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 14), Counter32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1OutBytes.setStatus('current')
if mibBuilder.loadTexts: starSessSub1OutBytes.setDescription('The count of outgoing bytes for the subscriber, in kilobytes, rounded down (i.e. 1023 bytes = 0 kilobytes')
starSessSub1Activity = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 15), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1Activity.setStatus('current')
if mibBuilder.loadTexts: starSessSub1Activity.setDescription('TBD')
starSessSub1State = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("connecting", 1), ("connected", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1State.setStatus('current')
if mibBuilder.loadTexts: starSessSub1State.setDescription('The state of the subscriber')
starSessSub1CallID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1CallID.setStatus('current')
if mibBuilder.loadTexts: starSessSub1CallID.setDescription('The internal call ID of the subscriber')
starSessSub1ConnectTime = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ConnectTime.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ConnectTime.setDescription('The connect time for the subscriber, in UTC. The UNIX epoch (Jan 1, 1970) is used if no value is available')
starSessSub1CallDuration = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 19), Counter32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1CallDuration.setStatus('current')
if mibBuilder.loadTexts: starSessSub1CallDuration.setDescription('The duration of the call, in seconds')
starSessSub1TimeIdle = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 20), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1TimeIdle.setStatus('current')
if mibBuilder.loadTexts: starSessSub1TimeIdle.setDescription('The idle time of the call, in seconds')
starSessSub1AccessType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 0), ("pdsnsimpleip", 1), ("pdsnmobileip", 2), ("hamobileip", 3), ("ggsnpdptypeipv4", 4), ("ggsnpdptypeppp", 5), ("ggsnpdptypeipv6", 6), ("lnsl2tp", 7), ("haipsec", 8), ("ipsg", 9), ("pdsnsipmip", 10), ("mipproxyfa", 11), ("imsa", 12), ("bcmcs", 13), ("ggsnmip", 14), ("ipprobe", 15), ("ansgw", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AccessType.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AccessType.setDescription('The access type for the subscriber')
starSessSub1AccessTech = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("unknown", 0), ("cdma1xrtt", 1), ("cdmaevdo", 2), ("cdmaother", 3), ("wcdmautran", 4), ("gprsgeran", 5), ("gprsother", 6), ("wirelesslan", 7), ("ipsg", 8), ("wimax", 9), ("sip", 10), ("other", 11), ("cdmaevdoreva", 12), ("pdif", 13), ("phs", 14), ("ehrpd", 15), ("eutran", 16), ("gan", 17), ("hspa", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AccessTech.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AccessTech.setDescription('The access technology for the subscriber')
starSessSub1LinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("active", 1), ("dormant", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1LinkStatus.setStatus('current')
if mibBuilder.loadTexts: starSessSub1LinkStatus.setDescription('The link status for the subscriber')
starSessSub1NetworkType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("ip", 1), ("mobileip", 2), ("l2tp", 3), ("proxymobileip", 4), ("ipinip", 5), ("gre", 6), ("ipv6inipv4", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1NetworkType.setStatus('current')
if mibBuilder.loadTexts: starSessSub1NetworkType.setDescription('The network type for the subscriber')
starSessSub1CarrierID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1CarrierID.setStatus('current')
if mibBuilder.loadTexts: starSessSub1CarrierID.setDescription('Carrier ID')
starSessSub1ESN = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ESN.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ESN.setDescription('Electronic Serial Number')
starSessSub1GMTTimezoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 27), Integer32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1GMTTimezoneOffset.setStatus('current')
if mibBuilder.loadTexts: starSessSub1GMTTimezoneOffset.setDescription('Timezone offset from GMT, in seconds. This is a signed value')
starSessSub1SessMgr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1SessMgr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1SessMgr.setDescription('The instance number of the session manager for this subscriber.')
starSessSub1RemoteIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 29), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1RemoteIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1RemoteIPAddr.setDescription('Remote IP Address')
starSessSub1Card = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1Card.setStatus('current')
if mibBuilder.loadTexts: starSessSub1Card.setDescription('The card holding the session manager for this session. Use in combination with starSessSub1CPU')
starSessSub1CPU = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1CPU.setStatus('current')
if mibBuilder.loadTexts: starSessSub1CPU.setDescription('The CPU holding the session manager for this session. Use in combination with starSessSub1Card')
starSessSub1TimeIdleLeft = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 32), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1TimeIdleLeft.setStatus('current')
if mibBuilder.loadTexts: starSessSub1TimeIdleLeft.setDescription('The remaining idle time of the call, in seconds. A value of 0xffffffff is used if the call does not have an idle timeout')
starSessSub1TimeLeft = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 33), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1TimeLeft.setStatus('current')
if mibBuilder.loadTexts: starSessSub1TimeLeft.setDescription('The remaining session time of the call, in seconds. A value of 0xffffffff is used if the call does not have a session timeout')
starSessSub1TimeLongDurLeft = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 34), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1TimeLongDurLeft.setStatus('current')
if mibBuilder.loadTexts: starSessSub1TimeLongDurLeft.setDescription('The remaining long duration time of the call, in seconds. A value of 0xffffffff is used if the call does not have a long duration timer')
starSessSub1LongDurAction = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 35), StarLongDurTimeoutAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1LongDurAction.setStatus('current')
if mibBuilder.loadTexts: starSessSub1LongDurAction.setDescription('The action to take when the long duration timer is reached')
starSessSub1AlwaysOn = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AlwaysOn.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AlwaysOn.setDescription(' ')
starSessSub1IPPoolName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPPoolName.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPPoolName.setDescription(' ')
starSessSub1VLANID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1VLANID.setStatus('current')
if mibBuilder.loadTexts: starSessSub1VLANID.setDescription('0 is returned if this is not applicable')
starSessSub1LNSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1LNSIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1LNSIPAddr.setDescription('Only valid if starSessSub1NetworkType is l2tp(3), otherwise 0.0.0.0')
starSessSub1ProxyMIP = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ProxyMIP.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ProxyMIP.setDescription(' ')
starSessSub1GGSNMIP = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1GGSNMIP.setStatus('current')
if mibBuilder.loadTexts: starSessSub1GGSNMIP.setDescription(' ')
starSessSub1HomeAgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 42), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1HomeAgentIpAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1HomeAgentIpAddr.setDescription('The IP address of the Home Agent. This value is applicable only if one of the following is true: 1. The value of starSessSub1AccessType is pdsnmobileip(2) 2. The value of starSessSub1ProxyMIP is enabled(1) 3. The value of starSessSub1GGSNMIP is enabled(1) If not applicable, a value of 0.0.0.0 will be returned')
starSessSub1LocalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1LocalIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1LocalIPAddr.setDescription('The Local IP address of the Home Agent. This value is applicable only if one of the following is true: 1. The value of starSessSub1AccessType is pdsnsimpleip(1) 2. The value of starSessSub1AccessType is ggsnpdptypeppp(5) 3. The value of starSessSub1AccessType is lnsl2tp(7) If not applicable, a value of 0.0.0.0 will be returned')
starSessSub1FAServiceName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 44), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1FAServiceName.setStatus('current')
if mibBuilder.loadTexts: starSessSub1FAServiceName.setDescription('The FA service name for the subscriber. This value is applicable only if one of the following is true: 1. The value of starSessSub1AccessType is pdsnmobileip(2) 2. The value of starSessSub1ProxyMIP is enabled(1) 3. The value of starSessSub1GGSNMIP is enabled(1) ')
starSessSub1FAVPNName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1FAVPNName.setStatus('current')
if mibBuilder.loadTexts: starSessSub1FAVPNName.setDescription('The FA VPN (Context) name. This value is applicable only if one of the following is true: 1. The value of starSessSub1AccessType is pdsnmobileip(2) 2. The value of starSessSub1ProxyMIP is enabled(1) 3. The value of starSessSub1GGSNMIP is enabled(1) ')
starSessSub1SourceVPN = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1SourceVPN.setStatus('current')
if mibBuilder.loadTexts: starSessSub1SourceVPN.setDescription('The Source VPN (Context) name.')
starSessSub1DestVPN = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DestVPN.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DestVPN.setDescription('The Destination VPN (Context) name.')
starSessSub1AAAVPN = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAAVPN.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAAVPN.setDescription(' ')
starSessSub1AAADomain = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAADomain.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAADomain.setDescription(' ')
starSessSub1AAAStart = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAAStart.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAAStart.setDescription(' ')
starSessSub1AAAStop = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAAStop.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAAStop.setDescription(' ')
starSessSub1AAAInterim = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAAInterim.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAAInterim.setDescription(' ')
starSessSub1AcctSessionID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AcctSessionID.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AcctSessionID.setDescription(' ')
starSessSub1AAARadiusGroup = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 54), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAARadiusGroup.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAARadiusGroup.setDescription(' ')
starSessSub1AAARadiusAuthServerIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 55), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAARadiusAuthServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAARadiusAuthServerIPAddr.setDescription(' ')
starSessSub1AAARadiusAcctServerIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 56), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AAARadiusAcctServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AAARadiusAcctServerIPAddr.setDescription(' ')
starSessSub1NASIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 57), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1NASIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1NASIPAddr.setDescription('NAS IP Address (D2)')
starSessSub1NexthopIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 58), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1NexthopIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1NexthopIPAddr.setDescription(' ')
starSessSub1ActiveInACL = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 59), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ActiveInACL.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ActiveInACL.setDescription(' ')
starSessSub1ActiveOutACL = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ActiveOutACL.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ActiveOutACL.setDescription(' ')
starSessSub1ECSRulebase = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ECSRulebase.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ECSRulebase.setDescription(' ')
starSessSub1InPlcyGrp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1InPlcyGrp.setStatus('current')
if mibBuilder.loadTexts: starSessSub1InPlcyGrp.setDescription(' ')
starSessSub1OutPlcyGrp = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1OutPlcyGrp.setStatus('current')
if mibBuilder.loadTexts: starSessSub1OutPlcyGrp.setDescription(' ')
starSessSub1DownTrafPolState = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownTrafPolState.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownTrafPolState.setDescription('Downlink traffic policing state')
starSessSub1DownCommDataRate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 65), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownCommDataRate.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownCommDataRate.setDescription('Downlink committed data rate, in bps. This value is only valid if starSessSub1DownTrafPolState is enabled(1)')
starSessSub1DownPeakDataRate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 66), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownPeakDataRate.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownPeakDataRate.setDescription('Downlink peak data rate, in bps. This value will be 0 if the value of starSessSub1DownTrafPolState is anything other than enabled(1)')
starSessSub1DownBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 67), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownBurstSize.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownBurstSize.setDescription('Downlink burst size, in bytes. This value will be 0 if the value of starSessSub1DownTrafPolState is anything other than enabled(1)')
starSessSub1DownExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 68), StarQOSTPAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownExceedAction.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownExceedAction.setDescription('Downlink Exceed Action. This value will be notapplicable(1) if the value of starSessSub1DownTrafPolState is anything other than enabled(1)')
starSessSub1DownViolateAction = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 69), StarQOSTPAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownViolateAction.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownViolateAction.setDescription('Downlink Violate Action. This value will be notapplicable(1) if the value of starSessSub1DownTrafPolState is anything other than enabled(1)')
starSessSub1DownExceed = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 70), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownExceed.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownExceed.setDescription('Downlink packets exceeded bandwidth parameters')
starSessSub1DownViolate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 71), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DownViolate.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DownViolate.setDescription('Downlink packets violated bandwidth parameters')
starSessSub1UpTrafPolState = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpTrafPolState.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpTrafPolState.setDescription('Uplink traffic policing state')
starSessSub1UpCommDataRate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 73), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpCommDataRate.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpCommDataRate.setDescription('Uplink committed data rate, in bps. This value is only valid if starSessSub1UpTrafPolState is enabled(1)')
starSessSub1UpPeakDataRate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 74), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpPeakDataRate.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpPeakDataRate.setDescription('Uplink peak data rate, in bps. This value will be 0 if the value of starSessSub1UpTrafPolState is anything other than enabled(1)')
starSessSub1UpBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 75), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpBurstSize.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpBurstSize.setDescription('Uplink burst size, in bytes. This value will be 0 if the value of starSessSub1UpTrafPolState is anything other than enabled(1)')
starSessSub1UpExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 76), StarQOSTPAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpExceedAction.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpExceedAction.setDescription('Uplink Exceed Action. This value will be notapplicable(1) if the value of starSessSub1UpTrafPolState is anything other than enabled(1)')
starSessSub1UpViolateAction = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 77), StarQOSTPAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpViolateAction.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpViolateAction.setDescription('Uplink Violate Action. This value will be notapplicable(1) if the value of starSessSub1UpTrafPolState is anything other than enabled(1)')
starSessSub1UpExceed = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 78), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpExceed.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpExceed.setDescription('Uplink packets exceeded bandwidth parameters')
starSessSub1UpViolate = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 79), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1UpViolate.setStatus('current')
if mibBuilder.loadTexts: starSessSub1UpViolate.setDescription('Uplink packets violated bandwidth parameters')
starSessSub1L3TunnelingState = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1L3TunnelingState.setStatus('current')
if mibBuilder.loadTexts: starSessSub1L3TunnelingState.setDescription('Identifies if L3 tunneling is enabled. This value should be enabled(1) if starSessSub1NetworkType is ipinip(5) or gre(6)')
starSessSub1L3TunLocalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 81), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1L3TunLocalIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1L3TunLocalIPAddr.setDescription('L3 tunnel local address. This value is valid only if starSessSub1L3TunnelState is enabled(1), other it will be 0.0.0.0')
starSessSub1L3TunRemoteIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 82), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1L3TunRemoteIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1L3TunRemoteIPAddr.setDescription('L3 tunnel remote address. This value is valid only if starSessSub1L3TunnelState is enabled(1), other it will be 0.0.0.0')
starSessSub1AddrViaDHCP = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AddrViaDHCP.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AddrViaDHCP.setDescription(' ')
starSessSub1DHCPServName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 84), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DHCPServName.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DHCPServName.setDescription('DHCP service name. This value is only valid if starSessSub1DHCPAddrViaDHCP is enabled(1)')
starSessSub1DHCPServIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 85), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DHCPServIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DHCPServIPAddr.setDescription('DHCP service IP address. This value is only valid if starSessSub1DHCPAddrViaDHCP is enabled(1), otherwise it will be 0.0.0.0')
starSessSub1AccessLinkIPFrag = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unkwnown", 0), ("normal", 1), ("dfignore", 2), ("dffragandicmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AccessLinkIPFrag.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AccessLinkIPFrag.setDescription(' ')
starSessSub1IgnoreDFBit = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabed", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IgnoreDFBit.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IgnoreDFBit.setDescription('Ignore DF-bit data-tunnel')
starSessSub1MIPGratARPMode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unkwnown", 0), ("notapplicable", 1), ("aggressive", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1MIPGratARPMode.setStatus('current')
if mibBuilder.loadTexts: starSessSub1MIPGratARPMode.setDescription('This field is only applicable if starSessSub1AccessType is hamobileip(3) or haipsec(8)')
starSessSub1ExtInlSrvrProc = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrProc.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrProc.setDescription('The state of external inline server processing')
starSessSub1ExtInlSrvrIngrIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 90), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrIngrIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrIngrIPAddr.setDescription('The external inline server ingress IP address. This value is only valid if starSessSub1ExtInlSrvrProc is enabled(1)')
starSessSub1ExtInlSrvrIngrVLANTag = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 91), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrIngrVLANTag.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrIngrVLANTag.setDescription('The external inline server ingress VLAN tag. This value is only valid if starSessSub1ExtInlSrvrProc is enabled(1)')
starSessSub1ExtInlSrvrEgrIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 92), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrEgrIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrEgrIPAddr.setDescription('The external inline server egress IP address. This value is only valid if starSessSub1ExtInlSrvrProc is enabled(1)')
starSessSub1ExtInlSrvrEgrVLANTag = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrEgrVLANTag.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrEgrVLANTag.setDescription('The external inline server egress VLAN tag. This value is only valid if starSessSub1ExtInlSrvrProc is enabled(1)')
starSessSub1ExtInlSrvrVPNName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 94), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrVPNName.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrVPNName.setDescription('The external inline server context (VPN). This value is only valid if starSessSub1ExtInlSrvrProc is enabled(1)')
starSessSub1RadAcctMode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("flowbasedaux", 1), ("flowbasedall", 2), ("flowbasednone", 3), ("sessionbased", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1RadAcctMode.setStatus('current')
if mibBuilder.loadTexts: starSessSub1RadAcctMode.setDescription('Radius Accounting Mode')
starSessSub1InBytesDropped = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 96), Counter32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1InBytesDropped.setStatus('current')
if mibBuilder.loadTexts: starSessSub1InBytesDropped.setDescription('The count of incoming bytes dropped for the subscriber, in kilobytes, rounded down (i.e. 1023 bytes = 0 kilobytes')
starSessSub1OutBytesDropped = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 97), Counter32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1OutBytesDropped.setStatus('current')
if mibBuilder.loadTexts: starSessSub1OutBytesDropped.setDescription('The count of outgoing bytes dropped for the subscriber, in kilobytes, rounded down (i.e. 1023 bytes = 0 kilobytes')
starSessSub1PeakBPSTx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 98), Gauge32()).setUnits('Bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1PeakBPSTx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1PeakBPSTx.setDescription('Peak rate from user, in bytes per second')
starSessSub1PeakBPSRx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 99), Gauge32()).setUnits('Bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1PeakBPSRx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1PeakBPSRx.setDescription('Peak rate to user, in bytes per second')
starSessSub1AveBPSTx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 100), Gauge32()).setUnits('Bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AveBPSTx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AveBPSTx.setDescription('Average rate from user, in bytes per second')
starSessSub1AveBPSRx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 101), Gauge32()).setUnits('Bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AveBPSRx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AveBPSRx.setDescription('Average rate to user, in bytes per second')
starSessSub1SustBPSTx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 102), Gauge32()).setUnits('Bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1SustBPSTx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1SustBPSTx.setDescription('Sustained rate from user, in bytes per second')
starSessSub1SustBPSRx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 103), Gauge32()).setUnits('Bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1SustBPSRx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1SustBPSRx.setDescription('Sustained rate to user, in bytes per second')
starSessSub1PeakPPSTx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 104), Gauge32()).setUnits('Packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1PeakPPSTx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1PeakPPSTx.setDescription('Peak rate from user, in packets per second')
starSessSub1PeakPPSRx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 105), Gauge32()).setUnits('Packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1PeakPPSRx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1PeakPPSRx.setDescription('Peak rate to user, in packets per second')
starSessSub1AvePPSTx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 106), Gauge32()).setUnits('Packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AvePPSTx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AvePPSTx.setDescription('Average rate from user, in packets per second')
starSessSub1AvePPSRx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 107), Gauge32()).setUnits('Packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AvePPSRx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AvePPSRx.setDescription('Average rate to user, in packets per second')
starSessSub1SustPPSTx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 108), Gauge32()).setUnits('Packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1SustPPSTx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1SustPPSTx.setDescription('Sustained rate from user, in packets per second')
starSessSub1SustPPSRx = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 109), Gauge32()).setUnits('Packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1SustPPSRx.setStatus('current')
if mibBuilder.loadTexts: starSessSub1SustPPSRx.setDescription('Sustained rate to user, in packets per second')
starSessSub1ActivePct = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ActivePct.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ActivePct.setDescription('Link online/active percentage')
starSessSub1IPv4BadHdr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4BadHdr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4BadHdr.setDescription('IPv4 Bad Headers')
starSessSub1IPv4TtlExceeded = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4TtlExceeded.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4TtlExceeded.setDescription('IPv4 Total Exceeded')
starSessSub1IPv4FragSent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4FragSent.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4FragSent.setDescription('IPv4 Fragments sent')
starSessSub1IPv4FragFail = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4FragFail.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4FragFail.setDescription('IPv4 Could Not Fragment errors')
starSessSub1IPv4InACLDrop = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4InACLDrop.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4InACLDrop.setDescription('IPv4 Input ACL Drops')
starSessSub1IPv4OutACLDrop = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4OutACLDrop.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4OutACLDrop.setDescription('IPv5 Output ACL Drops')
starSessSub1IPv4InCSSDownDrop = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4InCSSDownDrop.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4InCSSDownDrop.setDescription('IPv4 Input CSS Down Drops')
starSessSub1IPv4OutCSSDownDrop = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4OutCSSDownDrop.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4OutCSSDownDrop.setDescription('IPv4 Output CSS Down Drops')
starSessSub1IPv4OutXOFFDropPkt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 119), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4OutXOFFDropPkt.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4OutXOFFDropPkt.setDescription('IPv4 Output XOFF Packets Drop')
starSessSub1IPv4OutXOFFDropByte = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4OutXOFFDropByte.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4OutXOFFDropByte.setDescription('IPv4 Output XOFF Bytes Drop')
starSessSub1IPv4SrcViol = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4SrcViol.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4SrcViol.setDescription('IPv4 Source Violations')
starSessSub1IPv4ProxyDNSRedir = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4ProxyDNSRedir.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4ProxyDNSRedir.setDescription('IPv4 Proxy-DNS Redirect')
starSessSub1IPv4SrcProxyDNSPThru = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4SrcProxyDNSPThru.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4SrcProxyDNSPThru.setDescription('IPv4 Proxy-DNS Pass-Thru')
starSessSub1IPv4ProxyDNSDrop = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4ProxyDNSDrop.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4ProxyDNSDrop.setDescription('IPv4 Proxy-DNS Drop')
starSessSub1IPv4SrcViolNoAcct = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4SrcViolNoAcct.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4SrcViolNoAcct.setDescription('IPv4 Source Violations No Account')
starSessSub1IPv4SrcViolIgnored = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4SrcViolIgnored.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4SrcViolIgnored.setDescription('IPv4 Source Violations Ignored')
starSessSub1ExtInlSrvrTxPkt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 127), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrTxPkt.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrTxPkt.setDescription('Packets transmitted to inline server. This value is valid only if the value of starSessSub1ExtInlSrvrProc is enabled(1)')
starSessSub1ExtInlSrvrRxPkt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 128), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrRxPkt.setStatus('current')
if mibBuilder.loadTexts: starSessSub1ExtInlSrvrRxPkt.setDescription('Packets received from inline server. This value is valid only if the value of starSessSub1ExtInlSrvrProc is enabled(1)')
starSessSub1IPv4ICMPDropPkt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 129), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4ICMPDropPkt.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4ICMPDropPkt.setDescription('IPv4 ICMP Packets dropped')
starSessSub1TunnelType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("pptp", 2), ("l2tp", 3), ("ah", 4), ("ipinip", 5), ("esp", 6), ("gre", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1TunnelType.setStatus('current')
if mibBuilder.loadTexts: starSessSub1TunnelType.setDescription('Tunnel Type')
starSessSub1IPSECTunDownDropPkt = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 131), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPSECTunDownDropPkt.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPSECTunDownDropPkt.setDescription('Pool IPSEC tunnel down packets dropped. This value is only valid if the value of starSessSub1TunnelType is esp(6)')
starSessSub1IPSECFlowID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 132), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPSECFlowID.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPSECFlowID.setDescription('IP Pool IPSEC flow id. This value is only valid if the value of starSessSub1TunnelType is esp(6)')
starSessSub1DormancyTotal = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 133), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1DormancyTotal.setStatus('current')
if mibBuilder.loadTexts: starSessSub1DormancyTotal.setDescription('Dormancy total. This value is not valid if the value of starSessSub1AccessType is ggsnpdptypeipv4(4) or ggsnpdptypeppp(5)')
starSessSub1HandoffTotal = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 134), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1HandoffTotal.setStatus('current')
if mibBuilder.loadTexts: starSessSub1HandoffTotal.setDescription('Handoff total. This value is not valid if the value of starSessSub1AccessType is ggsnpdptypeipv4(4) or ggsnpdptypeppp(5)')
starSessSub1AccessFlows = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 135), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1AccessFlows.setStatus('current')
if mibBuilder.loadTexts: starSessSub1AccessFlows.setDescription('Access flows')
starSessSub1TFT = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 136), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1TFT.setStatus('current')
if mibBuilder.loadTexts: starSessSub1TFT.setDescription('Number of TFTs')
starSessSub1NASPort = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1NASPort.setStatus('current')
if mibBuilder.loadTexts: starSessSub1NASPort.setDescription('NAS port')
starSessSub1CorrID = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 139), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1CorrID.setStatus('current')
if mibBuilder.loadTexts: starSessSub1CorrID.setDescription('ThreeGPP2-correlation-id (C2)')
starSessSub1L2TPPeerIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 140), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1L2TPPeerIPAddr.setStatus('current')
if mibBuilder.loadTexts: starSessSub1L2TPPeerIPAddr.setDescription('L2TP Peer address. This value is only valid if the value of starSessSub1NetworkType is l2tp(3)')
starSessSub1IPv4EarlyPDURecv = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 34, 141), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSub1IPv4EarlyPDURecv.setStatus('current')
if mibBuilder.loadTexts: starSessSub1IPv4EarlyPDURecv.setDescription('IPv4 early PDU received')
starentNwReachServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 35))
starNwReachTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 35, 1), )
if mibBuilder.loadTexts: starNwReachTable.setStatus('current')
if mibBuilder.loadTexts: starNwReachTable.setDescription('A table containing Network Reacheable Server information')
starNwReachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 35, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starNwReachName"))
if mibBuilder.loadTexts: starNwReachEntry.setStatus('current')
if mibBuilder.loadTexts: starNwReachEntry.setDescription('Information for a specific Ntw Reachable Server')
starNwReachName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 35, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starNwReachName.setStatus('current')
if mibBuilder.loadTexts: starNwReachName.setDescription('The Name for this Network Reacheable Server')
starNwReachSrvrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 35, 1, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starNwReachSrvrAddr.setStatus('current')
if mibBuilder.loadTexts: starNwReachSrvrAddr.setDescription('The IP Address for the Network Reacheable Server')
starentIPSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 36))
starIPSECContextName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECContextName.setStatus('current')
if mibBuilder.loadTexts: starIPSECContextName.setDescription('The name of a context')
starIPSECGroupName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECGroupName.setStatus('current')
if mibBuilder.loadTexts: starIPSECGroupName.setDescription('The name of a crypto group')
starIPSECTunLocalIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECTunLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: starIPSECTunLocalIpAddr.setDescription('The local IP Address for an IPSEC tunnel')
starIPSECTunRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECTunRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: starIPSECTunRemoteIpAddr.setDescription('The remote IP Address for an IPSEC tunnel')
starIPSECPolicyName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECPolicyName.setStatus('current')
if mibBuilder.loadTexts: starIPSECPolicyName.setDescription('An IPSEC policy name')
starIPSECDynPolicyType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("manual", 1), ("isakmp", 2), ("subscribertemplate", 3), ("subscribertunnel", 4), ("test", 5), ("dynamic", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECDynPolicyType.setStatus('current')
if mibBuilder.loadTexts: starIPSECDynPolicyType.setDescription('An IPSEC dynamic policy type. Note that the value test(5) is used only for internal testing')
starIPSECDynPolicyPayloadType = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("control", 1), ("data", 2), ("ipip", 3), ("gre", 4), ("test", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECDynPolicyPayloadType.setStatus('current')
if mibBuilder.loadTexts: starIPSECDynPolicyPayloadType.setDescription('An IPSEC dynamic policy payload type')
starIPSECLocalGateway = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECLocalGateway.setStatus('current')
if mibBuilder.loadTexts: starIPSECLocalGateway.setDescription(' ')
starIPSECRemoteGateway = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 36, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPSECRemoteGateway.setStatus('current')
if mibBuilder.loadTexts: starIPSECRemoteGateway.setDescription(' ')
starentSIPRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 37))
starSIPRouteTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1), )
if mibBuilder.loadTexts: starSIPRouteTable.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteTable.setDescription('A table containing SIPRoute related information')
starSIPRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSIPRouteVpnID"))
if mibBuilder.loadTexts: starSIPRouteEntry.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteEntry.setDescription('The statistics for a specific SIPRoute service')
starSIPRouteVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starSIPRouteVpnID.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteVpnID.setDescription('The internal identification of the VPN (context)')
starSIPRouteVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteVpnName.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteVpnName.setDescription('The name of this VPN (context)')
starSIPRouteVmgName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteVmgName.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteVmgName.setDescription('The name of this VMG (context)')
starSIPRouteAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteAsName.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteAsName.setDescription('The name of this AS (context)')
starSIPRouteDestPartyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteDestPartyNum.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteDestPartyNum.setDescription('The dest. party number')
starSIPRouteReqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 37, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteReqNum.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteReqNum.setDescription('The request number')
starentRPServiceOption = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 38))
starRPServiceOptionTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 38, 1), )
if mibBuilder.loadTexts: starRPServiceOptionTable.setStatus('current')
if mibBuilder.loadTexts: starRPServiceOptionTable.setDescription(' ')
starRPServiceOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 38, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starRPServiceOptionNum"))
if mibBuilder.loadTexts: starRPServiceOptionEntry.setStatus('current')
if mibBuilder.loadTexts: starRPServiceOptionEntry.setDescription(' ')
starRPServiceOptionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 38, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: starRPServiceOptionNum.setStatus('current')
if mibBuilder.loadTexts: starRPServiceOptionNum.setDescription(' ')
starRPServiceOptionCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 38, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starRPServiceOptionCalls.setStatus('current')
if mibBuilder.loadTexts: starRPServiceOptionCalls.setDescription(' ')
starentPCFStats = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 39))
starPCFStatTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1), )
if mibBuilder.loadTexts: starPCFStatTable.setStatus('current')
if mibBuilder.loadTexts: starPCFStatTable.setDescription('A table of per-PCF statistics')
starPCFStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starPCFStatVpnID"), (0, "STARENT-MIB", "starPCFStatIpAddr"))
if mibBuilder.loadTexts: starPCFStatEntry.setStatus('current')
if mibBuilder.loadTexts: starPCFStatEntry.setDescription('The statistics for a specific PCF')
starPCFStatVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starPCFStatVpnID.setStatus('current')
if mibBuilder.loadTexts: starPCFStatVpnID.setDescription(' ')
starPCFStatIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: starPCFStatIpAddr.setStatus('current')
if mibBuilder.loadTexts: starPCFStatIpAddr.setDescription(' ')
starPCFStatVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatVpnName.setStatus('current')
if mibBuilder.loadTexts: starPCFStatVpnName.setDescription(' ')
starPCFStatRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 4), Counter32()).setUnits('Millions').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatRxPkts.setStatus('current')
if mibBuilder.loadTexts: starPCFStatRxPkts.setDescription(' ')
starPCFStatTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 5), Counter32()).setUnits('Millions').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatTxPkts.setStatus('current')
if mibBuilder.loadTexts: starPCFStatTxPkts.setDescription(' ')
starPCFStatRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 6), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatRxBytes.setStatus('current')
if mibBuilder.loadTexts: starPCFStatRxBytes.setDescription(' ')
starPCFStatTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 7), Counter32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatTxBytes.setStatus('current')
if mibBuilder.loadTexts: starPCFStatTxBytes.setDescription(' ')
starPCFStatTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatTotalSessions.setStatus('current')
if mibBuilder.loadTexts: starPCFStatTotalSessions.setDescription(' ')
starPCFStatCurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentSessions.setDescription(' ')
starPCFStatCurrentActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentActiveSessions.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentActiveSessions.setDescription(' ')
starPCFStatCurrentDormantSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentDormantSessions.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentDormantSessions.setDescription(' ')
starPCFStatCurrentSIPConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentSIPConnected.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentSIPConnected.setDescription(' ')
starPCFStatCurrentMIPConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentMIPConnected.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentMIPConnected.setDescription(' ')
starPCFStatCurrentPMIPConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentPMIPConnected.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentPMIPConnected.setDescription(' ')
starPCFStatCurrentL2TPLACConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentL2TPLACConnected.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentL2TPLACConnected.setDescription(' ')
starPCFStatCurrentOtherConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFStatCurrentOtherConnected.setStatus('current')
if mibBuilder.loadTexts: starPCFStatCurrentOtherConnected.setDescription(' ')
starPCFTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2), )
if mibBuilder.loadTexts: starPCFTable.setStatus('current')
if mibBuilder.loadTexts: starPCFTable.setDescription('A table of per service PCF statistics')
starPCFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1), ).setIndexNames((0, "STARENT-MIB", "starPCFSvcID"), (0, "STARENT-MIB", "starPCFIpAddr"))
if mibBuilder.loadTexts: starPCFEntry.setStatus('current')
if mibBuilder.loadTexts: starPCFEntry.setDescription('The statistics for a specific PCF per service')
starPCFSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 1), StarShortID())
if mibBuilder.loadTexts: starPCFSvcID.setStatus('current')
if mibBuilder.loadTexts: starPCFSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:), with the lengh of this structure at the beginning')
starPCFIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: starPCFIpAddr.setStatus('current')
if mibBuilder.loadTexts: starPCFIpAddr.setDescription('The PCF IP address')
starPCFVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFVpnID.setStatus('current')
if mibBuilder.loadTexts: starPCFVpnID.setDescription('The internal identification of the VPN (context)')
starPCFVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFVpnName.setStatus('current')
if mibBuilder.loadTexts: starPCFVpnName.setDescription('The VPN (context) name')
starPCFServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFServName.setStatus('current')
if mibBuilder.loadTexts: starPCFServName.setDescription('The name of this service')
starPCFRrqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRrqRcvd.setStatus('current')
if mibBuilder.loadTexts: starPCFRrqRcvd.setDescription('Number of rrq received')
starPCFRrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFRrqAccepted.setDescription('Number of rrq accepted')
starPCFRrqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRrqDenied.setStatus('current')
if mibBuilder.loadTexts: starPCFRrqDenied.setDescription('Number of rrq denied')
starPCFRrqDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRrqDiscarded.setStatus('current')
if mibBuilder.loadTexts: starPCFRrqDiscarded.setDescription('Number of rrq discarded')
starPCFInitialRrqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFInitialRrqRcvd.setStatus('current')
if mibBuilder.loadTexts: starPCFInitialRrqRcvd.setDescription('Initial rrq received')
starPCFInitialRrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFInitialRrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFInitialRrqAccepted.setDescription('Initial rrq accepted')
starPCFIntraPDSNActiveHORrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFIntraPDSNActiveHORrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFIntraPDSNActiveHORrqAccepted.setDescription('Intra PDSN active handoff rrq accepted')
starPCFIntraPDSNDormantHORrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFIntraPDSNDormantHORrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFIntraPDSNDormantHORrqAccepted.setDescription('Intra PDSN dormant handoff rrq accepted')
starPCFInterPDSNHORrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFInterPDSNHORrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFInterPDSNHORrqAccepted.setDescription('Inter PDSN handoff rrq accpted')
starPCFInitialRrqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFInitialRrqDenied.setStatus('current')
if mibBuilder.loadTexts: starPCFInitialRrqDenied.setDescription('Intial rrq denied')
starPCFInitialRrqDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFInitialRrqDiscarded.setStatus('current')
if mibBuilder.loadTexts: starPCFInitialRrqDiscarded.setDescription('Intial rrq discarded')
starPCFRenewRrqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRenewRrqRcvd.setStatus('current')
if mibBuilder.loadTexts: starPCFRenewRrqRcvd.setDescription('Renew rrq received')
starPCFRenewRrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRenewRrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFRenewRrqAccepted.setDescription('Renew rrq accepted')
starPCFRenewActiveRrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRenewActiveRrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFRenewActiveRrqAccepted.setDescription('Renew active rrq accepted')
starPCFRenewDormantRrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRenewDormantRrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFRenewDormantRrqAccepted.setDescription('Renew dormant rrq accepted')
starPCFRenewRrqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRenewRrqDenied.setStatus('current')
if mibBuilder.loadTexts: starPCFRenewRrqDenied.setDescription('Renew rrq denied')
starPCFRenewRrqDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRenewRrqDiscarded.setStatus('current')
if mibBuilder.loadTexts: starPCFRenewRrqDiscarded.setDescription('Renew rrq discarded')
starPCFDeregRrqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeregRrqRcvd.setStatus('current')
if mibBuilder.loadTexts: starPCFDeregRrqRcvd.setDescription('Deregistration rrq received')
starPCFDeregRrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeregRrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFDeregRrqAccepted.setDescription('Deregistration rrq accepted')
starPCFDeregDormantRrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeregDormantRrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFDeregDormantRrqAccepted.setDescription('Deregistration dormant rrq accepted')
starPCFDeregRrqDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeregRrqDenied.setStatus('current')
if mibBuilder.loadTexts: starPCFDeregRrqDenied.setDescription('Deregistration rrq denied')
starPCFDeregRrqDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeregRrqDiscarded.setStatus('current')
if mibBuilder.loadTexts: starPCFDeregRrqDiscarded.setDescription('Deregistration rrq discarded')
starPCFIntraPDSNActiveAnidHORrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFIntraPDSNActiveAnidHORrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFIntraPDSNActiveAnidHORrqAccepted.setDescription('Intra PDSN active anid handoff rrq accepted')
starPCFIntraPDSNDormantAnidHORrqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFIntraPDSNDormantAnidHORrqAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFIntraPDSNDormantAnidHORrqAccepted.setDescription('Intra PDSN dormant anidhandoff rrq accepted')
starPCFDeniedUnSpeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedUnSpeReason.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedUnSpeReason.setDescription('Denied unspecified reason')
starPCFDeniedAdmProh = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedAdmProh.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedAdmProh.setDescription('Denied admin prohibited')
starPCFDeniedInsufResource = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedInsufResource.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedInsufResource.setDescription('Denied insufficient resources')
starPCFDeniedMobNodeAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedMobNodeAuthFail.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedMobNodeAuthFail.setDescription('Denied mobile node authentication failure')
starPCFDeniedIdentMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedIdentMismatch.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedIdentMismatch.setDescription('Denied identification mismatch')
starPCFDeniedPoorFormedReq = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedPoorFormedReq.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedPoorFormedReq.setDescription('Denied poor formed request')
starPCFDeniedUnknownPDSNAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedUnknownPDSNAddr.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedUnknownPDSNAddr.setDescription('Denied unknown PDSN address')
starPCFDeniedRevTunnelUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedRevTunnelUnavail.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedRevTunnelUnavail.setDescription('Denied rev tunnel unavilable')
starPCFDeniedRevTunnelRequire = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedRevTunnelRequire.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedRevTunnelRequire.setDescription('Denied rev tunnel required')
starPCFDeniedUnrecogVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedUnrecogVendorId.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedUnrecogVendorId.setDescription('Denied unrecognized vendor id')
starPCFDeniedSessionClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedSessionClosed.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedSessionClosed.setDescription('Denied session closed')
starPCFDeniedBsnSessionInfoUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDeniedBsnSessionInfoUnavail.setStatus('current')
if mibBuilder.loadTexts: starPCFDeniedBsnSessionInfoUnavail.setDescription('Denied bsn session information unavilable')
starPCFRegUpdTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRegUpdTransmitted.setStatus('current')
if mibBuilder.loadTexts: starPCFRegUpdTransmitted.setDescription('Registration updates transmitted')
starPCFRegUpdAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRegUpdAccepted.setStatus('current')
if mibBuilder.loadTexts: starPCFRegUpdAccepted.setDescription('Registration updates accepted')
starPCFRegUpdateRpLifetimeExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRegUpdateRpLifetimeExpiry.setStatus('current')
if mibBuilder.loadTexts: starPCFRegUpdateRpLifetimeExpiry.setDescription('Registration update rp life time expiry')
starPCFRegUpdateUpperLayerIntiated = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRegUpdateUpperLayerIntiated.setStatus('current')
if mibBuilder.loadTexts: starPCFRegUpdateUpperLayerIntiated.setDescription('Registration update upper layer intiated')
starPCFRegUpdateOtherReason = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRegUpdateOtherReason.setStatus('current')
if mibBuilder.loadTexts: starPCFRegUpdateOtherReason.setDescription('Registration update other reason')
starPCFRegUpdateHORelease = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRegUpdateHORelease.setStatus('current')
if mibBuilder.loadTexts: starPCFRegUpdateHORelease.setDescription('Registration update handoff release')
starPCFRegUpdateSessmgrDied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRegUpdateSessmgrDied.setStatus('current')
if mibBuilder.loadTexts: starPCFRegUpdateSessmgrDied.setDescription('Registration update sessmgr denied ')
starPCFAuxA10ConnectionsSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFAuxA10ConnectionsSetup.setStatus('current')
if mibBuilder.loadTexts: starPCFAuxA10ConnectionsSetup.setDescription('Aux a10 connections setup')
starPCFSessionsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFSessionsDenied.setStatus('current')
if mibBuilder.loadTexts: starPCFSessionsDenied.setDescription('Number of sessions denied')
starPCFSessionsInit = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFSessionsInit.setStatus('current')
if mibBuilder.loadTexts: starPCFSessionsInit.setDescription('Number of sessions initiated')
starPCFSessionsReneg = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFSessionsReneg.setStatus('current')
if mibBuilder.loadTexts: starPCFSessionsReneg.setDescription('Number of PCF sessions renegotiated')
starPCFDiscLcpRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscLcpRemote.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscLcpRemote.setDescription('Disconnect reason lcp remote')
starPCFDiscRpRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscRpRemote.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscRpRemote.setDescription('Disconnect reason rp remote')
starPCFDiscRpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscRpLocal.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscRpLocal.setDescription('Disconnect reason rp local')
starPCFDiscMaxIpcpRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscMaxIpcpRetr.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscMaxIpcpRetr.setDescription('Disconnect reason ppp maximum ipcp retries')
starPCFDiscMaxIpv6cpRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscMaxIpv6cpRetr.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscMaxIpv6cpRetr.setDescription('Disconnect reason max ipv6cp retries')
starPCFDiscMaxLcpRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscMaxLcpRetr.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscMaxLcpRetr.setDescription('Disconnect reason max lcp retries')
starPCFDiscAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscAuthFail.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscAuthFail.setDescription('Disconnect reason authentication failure')
starPCFDiscSessSetupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscSessSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscSessSetupTimeout.setDescription('Disconnect reason session setup timeout')
starPCFDiscFlowAddFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscFlowAddFail.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscFlowAddFail.setDescription('Disconnect reason flow add failure')
starPCFDiscInvDestContext = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscInvDestContext.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscInvDestContext.setDescription('Disconnect reason invalid destination context')
starPCFDiscLcpOptFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscLcpOptFail.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscLcpOptFail.setDescription('Disconnect reason lcp option failure')
starPCFDiscIpcpOptFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscIpcpOptFail.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscIpcpOptFail.setDescription('Disconnect reason lcp option failure')
starPCFDiscIpv6cpOptFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscIpv6cpOptFail.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscIpv6cpOptFail.setDescription('Disconnect reason ipv6cp option failure')
starPCFDiscNoRemIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscNoRemIpAddr.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscNoRemIpAddr.setDescription('Disconnect reason no ip remote ip address')
starPCFDiscDetectionFail = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscDetectionFail.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscDetectionFail.setDescription('Disconnect reason detection failure')
starPCFDiscMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFDiscMisc.setStatus('current')
if mibBuilder.loadTexts: starPCFDiscMisc.setDescription('Disconnect reason misallaneous')
starPCFCurrentSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: starPCFCurrentSessions.setDescription('Current sessions')
starPCFSessionsSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFSessionsSetup.setStatus('current')
if mibBuilder.loadTexts: starPCFSessionsSetup.setDescription('Session setup')
starPCFSessionsRelsese = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFSessionsRelsese.setStatus('current')
if mibBuilder.loadTexts: starPCFSessionsRelsese.setDescription('Sessions release')
starPCFCurrentRevaSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFCurrentRevaSessions.setStatus('current')
if mibBuilder.loadTexts: starPCFCurrentRevaSessions.setDescription('Current reva sessions')
starPCFRevaSessionsSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRevaSessionsSetup.setStatus('current')
if mibBuilder.loadTexts: starPCFRevaSessionsSetup.setDescription('Reva session setup')
starPCFRevaSessionsRelsese = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 39, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPCFRevaSessionsRelsese.setStatus('current')
if mibBuilder.loadTexts: starPCFRevaSessionsRelsese.setDescription('Reva session release')
starentSIPRouteServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 40))
starSIPRouteServerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 40, 1), )
if mibBuilder.loadTexts: starSIPRouteServerTable.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerTable.setDescription('A table containing SIPRouteServer related information')
starSIPRouteServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 40, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSIPRouteServerVpnID"))
if mibBuilder.loadTexts: starSIPRouteServerEntry.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerEntry.setDescription('The statistics for a specific SIPRouteServer')
starSIPRouteServerVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 40, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starSIPRouteServerVpnID.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerVpnID.setDescription('The internal identification of the VPN (context)')
starSIPRouteServerVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 40, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteServerVpnName.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerVpnName.setDescription('The name of this VPN (context)')
starSIPRouteServerVmgName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 40, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteServerVmgName.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerVmgName.setDescription('The name of this VMG (context)')
starSIPRouteServerAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 40, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteServerAsName.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerAsName.setDescription('The name of this AS (context)')
starSIPRouteServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 40, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSIPRouteServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerIpAddr.setDescription('The Sip Route Server IP Address')
starentVIMService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 41))
starVIMServiceTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 41, 1), )
if mibBuilder.loadTexts: starVIMServiceTable.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceTable.setDescription("A table containing VIM's Service related information")
starVIMServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 41, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starVIMServiceVpnID"), (0, "STARENT-MIB", "starVIMServiceInstanceId"))
if mibBuilder.loadTexts: starVIMServiceEntry.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceEntry.setDescription("The statistics for a specific VIM's Service")
starVIMServiceVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 41, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starVIMServiceVpnID.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceVpnID.setDescription('The internal identification of the VPN (context)')
starVIMServiceVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 41, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVIMServiceVpnName.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceVpnName.setDescription('The name of this VPN (context)')
starVIMServiceInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 41, 1, 1, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starVIMServiceInstanceId.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceInstanceId.setDescription('The VIM Instance ID')
starVIMServiceFMDMaxCallRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 41, 1, 1, 4), Unsigned32()).setUnits('Calls per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: starVIMServiceFMDMaxCallRate.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceFMDMaxCallRate.setDescription('Configured FMD max call rate')
starVIMServiceFMDContinuousLoadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 41, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starVIMServiceFMDContinuousLoadCount.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceFMDContinuousLoadCount.setDescription('Configured FMD continuous load count')
starentGSS = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 42))
starGSSClusterName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterName.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterName.setDescription('The name of the Storage Server Cluster')
starGSSClusterNodeName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterNodeName.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterNodeName.setDescription('The name of a node within a Storage Server Cluster')
starGSSClusterRgName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterRgName.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterRgName.setDescription('Resource Group')
starGSSClusterRsName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterRsName.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterRsName.setDescription('Resource Name')
starGSSClusterNodeState = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterNodeState.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterNodeState.setDescription(' ')
starGSSClusterPrevOnlineNode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterPrevOnlineNode.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterPrevOnlineNode.setDescription(' ')
starGSSClusterFromNode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterFromNode.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterFromNode.setDescription(' ')
starGSSClusterToNode = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSClusterToNode.setStatus('current')
if mibBuilder.loadTexts: starGSSClusterToNode.setDescription(' ')
starGSSDiskPath = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSDiskPath.setStatus('current')
if mibBuilder.loadTexts: starGSSDiskPath.setDescription(' ')
starGSSTransportPath = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSTransportPath.setStatus('current')
if mibBuilder.loadTexts: starGSSTransportPath.setDescription(' ')
starGSSIPMPGroupName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSIPMPGroupName.setStatus('current')
if mibBuilder.loadTexts: starGSSIPMPGroupName.setDescription(' ')
starGSSInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 42, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGSSInterfaceName.setStatus('current')
if mibBuilder.loadTexts: starGSSInterfaceName.setDescription(' ')
starentPDIFSys = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 43))
starPDIFSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 43, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("noservice", 1), ("active", 2), ("temporary", 3), ("outofservice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSysStatus.setStatus('current')
if mibBuilder.loadTexts: starPDIFSysStatus.setDescription('The overall status of the chassis as a PDIF service. A value of noservice(1) means that the chassis is not configured/licensed for PDIF; active(2) indicates that at least one PDIF service is available for processing sessions; temporary(3) indicates that PDIF is running in a temporary capacity, such as running in standby mode during an online upgrade; outofservice(4) indicates that no PDIF service is currently active, but one or more PDIF services are configured')
starPDIFSysNumService = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 43, 2), Unsigned32()).setUnits('Services').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSysNumService.setStatus('current')
if mibBuilder.loadTexts: starPDIFSysNumService.setDescription('The number of PDIF services configured')
starPDIFSysSessCurrent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 43, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSysSessCurrent.setStatus('current')
if mibBuilder.loadTexts: starPDIFSysSessCurrent.setDescription('The number of current PDIF sessions for this chassis')
starPDIFSysSessCurrActive = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 43, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSysSessCurrActive.setStatus('current')
if mibBuilder.loadTexts: starPDIFSysSessCurrActive.setDescription('The number of currently active PDIF sessions for this chassis')
starPDIFSysSessCurrDormant = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 43, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSysSessCurrDormant.setStatus('current')
if mibBuilder.loadTexts: starPDIFSysSessCurrDormant.setDescription('The number of currently dormant PDIF sessions for this chassis')
starPDIFSysSessTtlSetup = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 43, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSysSessTtlSetup.setStatus('current')
if mibBuilder.loadTexts: starPDIFSysSessTtlSetup.setDescription('The cumulative total number of PDIF sessions that has been setup')
starPDIFSysChildSACurrent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 43, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSysChildSACurrent.setStatus('current')
if mibBuilder.loadTexts: starPDIFSysChildSACurrent.setDescription('The number of current PDIF child SAs for this chassis')
starentPDIFService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 44))
starPDIFTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1), )
if mibBuilder.loadTexts: starPDIFTable.setStatus('current')
if mibBuilder.loadTexts: starPDIFTable.setDescription('A table of per-service PDIF information')
starPDIFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starPDIFSvcID"))
if mibBuilder.loadTexts: starPDIFEntry.setStatus('current')
if mibBuilder.loadTexts: starPDIFEntry.setDescription('The information for a PDIF service')
starPDIFSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 1), StarShortID())
if mibBuilder.loadTexts: starPDIFSvcID.setStatus('current')
if mibBuilder.loadTexts: starPDIFSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:)')
starPDIFVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFVpnID.setStatus('current')
if mibBuilder.loadTexts: starPDIFVpnID.setDescription('The internal identification of the VPN (context). Note that this identifier can change due to configuration changes and/or the restart of the PDIF device; in general starPDIFVpnName should be used to identify the VPN (context)')
starPDIFVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFVpnName.setStatus('current')
if mibBuilder.loadTexts: starPDIFVpnName.setDescription('The VPN (context) name')
starPDIFServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFServName.setStatus('current')
if mibBuilder.loadTexts: starPDIFServName.setDescription('The name of this service')
starPDIFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("inservice", 1), ("outofservice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFStatus.setStatus('current')
if mibBuilder.loadTexts: starPDIFStatus.setDescription('The state of this PDIF service. The value unknown(0) indicates that the system is unable to determine the status; inservice(1) indicates that the service is available for processing sessions; outofservice(2) indicates that the service is configured, but unavailable, either due to operator action or due to a fault.')
starPDIFSessCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessCurrent.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessCurrent.setDescription('The number of current sessions for this PDIF service.')
starPDIFSessRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessRemain.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessRemain.setDescription('A count of the remaining capacity for this PDIF service, in terms of sessions. If a session limit is configured for this PDIF service, starPDIFSessRemain will identify the difference between this limit and starPDIFSessCurrent. If no individual limit has been configured for this service, starPDIFSessRemain will identify the remaining capacity for the entire chassis. Note that in this latter case, the value for starPDIFSessRemain cannot be summed across multiple services.')
starPDIFSessCurrentActive = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessCurrentActive.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessCurrentActive.setDescription('The number of currently active sessions for this PDIF service')
starPDIFSessCurrentDormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessCurrentDormant.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessCurrentDormant.setDescription('The number of currently dormant sessions for this PDIF service. Note that this value will always be 0, as the current system does not identify PDIF sessions as dormant.')
starPDIFSessCurrentIpv6Active = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessCurrentIpv6Active.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessCurrentIpv6Active.setDescription('The number of currently active IPv6 sessions for this PDIF service. Note that this value will always be 0, as the current system does not support IPv6 sessions.')
starPDIFSessCurrentIpv6Dormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessCurrentIpv6Dormant.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessCurrentIpv6Dormant.setDescription('The number of currently dormant IPv6 sessions for this PDIF service. Note that this value will always be 0, as the current system does not support IPv6 sessions.')
starPDIFSessCurrentIpv4Active = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessCurrentIpv4Active.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessCurrentIpv4Active.setDescription("The number of currently active IPv4 sessions for this PDIF service. Note that all PDIF sessions are currently identified as 'active', and the value for starPDIFSessCurrentIpv4Dormant will always be zero.")
starPDIFSessCurrentIpv4Dormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFSessCurrentIpv4Dormant.setStatus('current')
if mibBuilder.loadTexts: starPDIFSessCurrentIpv4Dormant.setDescription("The number of currently dormant IPv4 sessions for this PDIF service. Note that all PDIF sessions are currently identified as 'active', so the value for starPDIFSessCurrentIPv4Dormant will always be zero.")
starPDIFBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFBindIpAddress.setStatus('current')
if mibBuilder.loadTexts: starPDIFBindIpAddress.setDescription('The bind IP address for this PDIF service')
starPDIFBindIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFBindIpPort.setStatus('current')
if mibBuilder.loadTexts: starPDIFBindIpPort.setDescription('The bind IP port for this PDIF service')
starPDIFBindSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFBindSlot.setStatus('current')
if mibBuilder.loadTexts: starPDIFBindSlot.setDescription('The physical slot number for the physical port which holds the interface bound to the starPDIFBindIpAddress address.')
starPDIFBindPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 44, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDIFBindPort.setStatus('current')
if mibBuilder.loadTexts: starPDIFBindPort.setDescription('The physical port number for the physical port which holds the interface bound to the starPDIFBindIpAddress address.')
starentPDGSys = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 62))
starPDGSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 62, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("noservice", 1), ("active", 2), ("temporary", 3), ("outofservice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSysStatus.setStatus('current')
if mibBuilder.loadTexts: starPDGSysStatus.setDescription('The overall status of the chassis as a PDG service. A value of noservice(1) means that the chassis is not configured/licensed for PDG; active(2) indicates that at least one PDG service is available for processing sessions; temporary(3) indicates that PDG is running in a temporary capacity, such as running in standby mode during an online upgrade; outofservice(4) indicates that no PDG service is currently active, but one or more PDG services are configured')
starPDGSysNumService = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 62, 2), Unsigned32()).setUnits('Services').setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSysNumService.setStatus('current')
if mibBuilder.loadTexts: starPDGSysNumService.setDescription('The number of PDG services configured')
starPDGSysSessCurrent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 62, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSysSessCurrent.setStatus('current')
if mibBuilder.loadTexts: starPDGSysSessCurrent.setDescription('The number of current PDG sessions for this chassis')
starPDGSysSessCurrActive = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 62, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSysSessCurrActive.setStatus('current')
if mibBuilder.loadTexts: starPDGSysSessCurrActive.setDescription('The number of currently active PDG sessions for this chassis')
starPDGSysSessCurrDormant = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 62, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSysSessCurrDormant.setStatus('current')
if mibBuilder.loadTexts: starPDGSysSessCurrDormant.setDescription('The number of currently dormant PDG sessions for this chassis')
starPDGSysSessTtlSetup = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 62, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSysSessTtlSetup.setStatus('current')
if mibBuilder.loadTexts: starPDGSysSessTtlSetup.setDescription('The cumulative total number of PDG sessions that has been setup')
starPDGSysChildSACurrent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 62, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSysChildSACurrent.setStatus('current')
if mibBuilder.loadTexts: starPDGSysChildSACurrent.setDescription('The number of current PDG child SAs for this chassis')
starentPDGService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 63))
starPDGTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1), )
if mibBuilder.loadTexts: starPDGTable.setStatus('current')
if mibBuilder.loadTexts: starPDGTable.setDescription('A table of per-service PDG information')
starPDGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starPDGSvcID"))
if mibBuilder.loadTexts: starPDGEntry.setStatus('current')
if mibBuilder.loadTexts: starPDGEntry.setDescription('The information for a PDG service')
starPDGSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 1), StarShortID())
if mibBuilder.loadTexts: starPDGSvcID.setStatus('current')
if mibBuilder.loadTexts: starPDGSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:)')
starPDGVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGVpnID.setStatus('current')
if mibBuilder.loadTexts: starPDGVpnID.setDescription('The internal identification of the VPN (context). Note that this identifier can change due to configuration changes and/or the restart of the PDG device; in general starPDGVpnName should be used to identify the VPN (context)')
starPDGVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGVpnName.setStatus('current')
if mibBuilder.loadTexts: starPDGVpnName.setDescription('The VPN (context) name')
starPDGServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGServName.setStatus('current')
if mibBuilder.loadTexts: starPDGServName.setDescription('The name of this service')
starPDGStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("inservice", 1), ("outofservice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGStatus.setStatus('current')
if mibBuilder.loadTexts: starPDGStatus.setDescription('The state of this PDG service. The value unknown(0) indicates that the system is unable to determine the status; inservice(1) indicates that the service is available for processing sessions; outofservice(2) indicates that the service is configured, but unavailable, either due to operator action or due to a fault.')
starPDGSessCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessCurrent.setStatus('current')
if mibBuilder.loadTexts: starPDGSessCurrent.setDescription('The number of current sessions for this PDG service.')
starPDGSessRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessRemain.setStatus('current')
if mibBuilder.loadTexts: starPDGSessRemain.setDescription('A count of the remaining capacity for this PDG service, in terms of sessions. If a session limit is configured for this PDG service, starPDGSessRemain will identify the difference between this limit and starPDGSessCurrent. If no individual limit has been configured for this service, starPDGSessRemain will identify the remaining capacity for the entire chassis. Note that in this latter case, the value for starPDGSessRemain cannot be summed across multiple services.')
starPDGSessCurrentActive = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessCurrentActive.setStatus('current')
if mibBuilder.loadTexts: starPDGSessCurrentActive.setDescription('The number of currently active sessions for this PDG service')
starPDGSessCurrentDormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessCurrentDormant.setStatus('current')
if mibBuilder.loadTexts: starPDGSessCurrentDormant.setDescription('The number of currently dormant sessions for this PDG service')
starPDGSessCurrentIpv6Active = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessCurrentIpv6Active.setStatus('current')
if mibBuilder.loadTexts: starPDGSessCurrentIpv6Active.setDescription('The number of currently active IPv6 sessions for this PDG service. Note that this value will always be 0, as the current system does not support IPv6 sessions.')
starPDGSessCurrentIpv6Dormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessCurrentIpv6Dormant.setStatus('current')
if mibBuilder.loadTexts: starPDGSessCurrentIpv6Dormant.setDescription('The number of currently dormant IPv6 sessions for this PDG service. Note that this value will always be 0, as the current system does not support IPv6 sessions.')
starPDGSessCurrentIpv4Active = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessCurrentIpv4Active.setStatus('current')
if mibBuilder.loadTexts: starPDGSessCurrentIpv4Active.setDescription("The number of currently active IPv4 sessions for this PDG service. Note that all PDG sessions are currently identified as 'active', and the value for starPDGSessCurrentIPv4Dormant will always be zero.")
starPDGSessCurrentIpv4Dormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGSessCurrentIpv4Dormant.setStatus('current')
if mibBuilder.loadTexts: starPDGSessCurrentIpv4Dormant.setDescription("The number of currently dormant IPv4 sessions for this PDG service. Note that all PDG sessions are currently identified as 'active', so the value for starPDGSessCurrentIPv4Dormant will always be zero.")
starPDGBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGBindIpAddress.setStatus('current')
if mibBuilder.loadTexts: starPDGBindIpAddress.setDescription('The bind IP address for this PDG service')
starPDGBindIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGBindIpPort.setStatus('current')
if mibBuilder.loadTexts: starPDGBindIpPort.setDescription('The bind IP port for this PDG service')
starPDGBindSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGBindSlot.setStatus('current')
if mibBuilder.loadTexts: starPDGBindSlot.setDescription('The physical slot number for the physical port which holds the interface bound to the starPDGBindIpAddress address.')
starPDGBindPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 63, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starPDGBindPort.setStatus('current')
if mibBuilder.loadTexts: starPDGBindPort.setDescription('The physical port number for the physical port which holds the interface bound to the starPDGBindIpAddress address.')
starentHNBGWService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 65))
starHNBGWServTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1), )
if mibBuilder.loadTexts: starHNBGWServTable.setStatus('current')
if mibBuilder.loadTexts: starHNBGWServTable.setDescription('A table containing HNBGW related information')
starHNBGWServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starHNBGWServVpnID"), (0, "STARENT-MIB", "starHNBGWServSvcID"))
if mibBuilder.loadTexts: starHNBGWServEntry.setStatus('current')
if mibBuilder.loadTexts: starHNBGWServEntry.setDescription('The statistics for a specific HNBGW service')
starHNBGWServVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starHNBGWServVpnID.setStatus('current')
if mibBuilder.loadTexts: starHNBGWServVpnID.setDescription('The internal identification of the VPN (context)')
starHNBGWServSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 2), Gauge32())
if mibBuilder.loadTexts: starHNBGWServSvcID.setStatus('current')
if mibBuilder.loadTexts: starHNBGWServSvcID.setDescription('The internal identification of this service; unique within a specific context')
starSessHNBGWVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessHNBGWVpnName.setStatus('current')
if mibBuilder.loadTexts: starSessHNBGWVpnName.setDescription('The name of this VPN (context)')
starSessHNBGWServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessHNBGWServName.setStatus('current')
if mibBuilder.loadTexts: starSessHNBGWServName.setDescription('The name of this Service')
starSessHNBGWCsNwName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessHNBGWCsNwName.setStatus('current')
if mibBuilder.loadTexts: starSessHNBGWCsNwName.setDescription('The name of the CS NW')
starSessHNBGWPsNwName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessHNBGWPsNwName.setStatus('current')
if mibBuilder.loadTexts: starSessHNBGWPsNwName.setDescription('The name of the PS NW')
starSessHNBGWSgsnPtCd = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessHNBGWSgsnPtCd.setStatus('current')
if mibBuilder.loadTexts: starSessHNBGWSgsnPtCd.setDescription('SGSN Point Code')
starSessHNBGWMscPtCd = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 65, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessHNBGWMscPtCd.setStatus('current')
if mibBuilder.loadTexts: starSessHNBGWMscPtCd.setDescription('MSC Point Code')
starentALCAPService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 66))
starALCAPServTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1), )
if mibBuilder.loadTexts: starALCAPServTable.setStatus('current')
if mibBuilder.loadTexts: starALCAPServTable.setDescription('A table containing ALCAP relate information')
starALCAPServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starALCAPSerVpnID"), (0, "STARENT-MIB", "starALCAPSerSvcID"))
if mibBuilder.loadTexts: starALCAPServEntry.setStatus('current')
if mibBuilder.loadTexts: starALCAPServEntry.setDescription('The statistics for a specific ALCAP service')
starALCAPSerVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starALCAPSerVpnID.setStatus('current')
if mibBuilder.loadTexts: starALCAPSerVpnID.setDescription('The internal identification of the VPN (context)')
starALCAPSerSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1, 1, 2), Gauge32())
if mibBuilder.loadTexts: starALCAPSerSvcID.setStatus('current')
if mibBuilder.loadTexts: starALCAPSerSvcID.setDescription('The internal identification of this service; unique within a specific context')
starSessALCAPVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessALCAPVpnName.setStatus('current')
if mibBuilder.loadTexts: starSessALCAPVpnName.setDescription('The name of this VPN (context)')
starSessALCAPServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessALCAPServName.setStatus('current')
if mibBuilder.loadTexts: starSessALCAPServName.setDescription('The name of this Service')
starSessALCAPAAL2NodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessALCAPAAL2NodeName.setStatus('current')
if mibBuilder.loadTexts: starSessALCAPAAL2NodeName.setDescription('The name of the AAL2 Node')
starSessALCAPPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 66, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessALCAPPathId.setStatus('current')
if mibBuilder.loadTexts: starSessALCAPPathId.setDescription('The path id of AAL2 path')
starentFNGSys = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 60))
starFNGSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 60, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("noservice", 1), ("active", 2), ("temporary", 3), ("outofservice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSysStatus.setStatus('current')
if mibBuilder.loadTexts: starFNGSysStatus.setDescription('The overall status of the chassis as a FNG service. A value of noservice(1) means that the chassis is not configured/licensed for FNG; active(2) indicates that at least one FNG service is available for processing sessions; temporary(3) indicates that FNG is running in a temporary capacity, such as running in standby mode during an online upgrade; outofservice(4) indicates that no FNG service is currently active, but one or more FNG services are configured')
starFNGSysNumService = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 60, 2), Unsigned32()).setUnits('Services').setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSysNumService.setStatus('current')
if mibBuilder.loadTexts: starFNGSysNumService.setDescription('The number of FNG services configured')
starFNGSysSessCurrent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 60, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSysSessCurrent.setStatus('current')
if mibBuilder.loadTexts: starFNGSysSessCurrent.setDescription('The number of current FNG sessions for this chassis')
starFNGSysSessCurrActive = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 60, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSysSessCurrActive.setStatus('current')
if mibBuilder.loadTexts: starFNGSysSessCurrActive.setDescription('The number of currently active FNG sessions for this chassis')
starFNGSysSessCurrDormant = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 60, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSysSessCurrDormant.setStatus('current')
if mibBuilder.loadTexts: starFNGSysSessCurrDormant.setDescription('The number of currently dormant FNG sessions for this chassis')
starFNGSysSessTtlSetup = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 60, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSysSessTtlSetup.setStatus('current')
if mibBuilder.loadTexts: starFNGSysSessTtlSetup.setDescription('The cumulative total number of FNG sessions that has been setup')
starFNGSysChildSACurrent = MibScalar((1, 3, 6, 1, 4, 1, 8164, 1, 60, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSysChildSACurrent.setStatus('current')
if mibBuilder.loadTexts: starFNGSysChildSACurrent.setDescription('The number of current FNG child SAs for this chassis')
starentFNGService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 61))
starFNGTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1), )
if mibBuilder.loadTexts: starFNGTable.setStatus('current')
if mibBuilder.loadTexts: starFNGTable.setDescription('A table of per-service FNG information')
starFNGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starFNGSvcID"))
if mibBuilder.loadTexts: starFNGEntry.setStatus('current')
if mibBuilder.loadTexts: starFNGEntry.setDescription('The information for a FNG service')
starFNGSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 1), StarShortID())
if mibBuilder.loadTexts: starFNGSvcID.setStatus('current')
if mibBuilder.loadTexts: starFNGSvcID.setDescription('The service identification is made up from first 8 chars of context name and first 8 chars of service name separated by (:)')
starFNGVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGVpnID.setStatus('current')
if mibBuilder.loadTexts: starFNGVpnID.setDescription('The internal identification of the VPN (context). Note that this identifier can change due to configuration changes and/or the restart of the FNG device; in general starFNGVpnName should be used to identify the VPN (context)')
starFNGVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGVpnName.setStatus('current')
if mibBuilder.loadTexts: starFNGVpnName.setDescription('The VPN (context) name')
starFNGServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGServName.setStatus('current')
if mibBuilder.loadTexts: starFNGServName.setDescription('The name of this service')
starFNGStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("inservice", 1), ("outofservice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGStatus.setStatus('current')
if mibBuilder.loadTexts: starFNGStatus.setDescription('The state of this FNG service. The value unknown(0) indicates that the system is unable to determine the status; inservice(1) indicates that the service is available for processing sessions; outofservice(2) indicates that the service is configured, but unavailable, either due to operator action or due to a fault.')
starFNGSessCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessCurrent.setStatus('current')
if mibBuilder.loadTexts: starFNGSessCurrent.setDescription('The number of current sessions for this FNG service.')
starFNGSessRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessRemain.setStatus('current')
if mibBuilder.loadTexts: starFNGSessRemain.setDescription('A count of the remaining capacity for this FNG service, in terms of sessions. If a session limit is configured for this FNG service, starFNGSessRemain will identify the difference between this limit and starFNGSessCurrent. If no individual limit has been configured for this service, starFNGSessRemain will identify the remaining capacity for the entire chassis. Note that in this latter case, the value for starFNGSessRemain cannot be summed across multiple services.')
starFNGSessCurrentActive = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessCurrentActive.setStatus('current')
if mibBuilder.loadTexts: starFNGSessCurrentActive.setDescription('The number of currently active sessions for this FNG service')
starFNGSessCurrentDormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessCurrentDormant.setStatus('current')
if mibBuilder.loadTexts: starFNGSessCurrentDormant.setDescription('The number of currently dormant sessions for this FNG service')
starFNGSessCurrentIpv6Active = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessCurrentIpv6Active.setStatus('current')
if mibBuilder.loadTexts: starFNGSessCurrentIpv6Active.setDescription('The number of currently active IPv6 sessions for this FNG service. Note that this value will always be 0, as the current system does not support IPv6 sessions.')
starFNGSessCurrentIpv6Dormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessCurrentIpv6Dormant.setStatus('current')
if mibBuilder.loadTexts: starFNGSessCurrentIpv6Dormant.setDescription('The number of currently dormant IPv6 sessions for this FNG service. Note that this value will always be 0, as the current system does not support IPv6 sessions.')
starFNGSessCurrentIpv4Active = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessCurrentIpv4Active.setStatus('current')
if mibBuilder.loadTexts: starFNGSessCurrentIpv4Active.setDescription("The number of currently active IPv4 sessions for this FNG service. Note that all FNG sessions are currently identified as 'active', and the value for starFNGSessCurrentIPv4Dormant will always be zero.")
starFNGSessCurrentIpv4Dormant = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGSessCurrentIpv4Dormant.setStatus('current')
if mibBuilder.loadTexts: starFNGSessCurrentIpv4Dormant.setDescription("The number of currently dormant IPv4 sessions for this FNG service. Note that all FNG sessions are currently identified as 'active', so the value for starFNGSessCurrentIPv4Dormant will always be zero.")
starFNGBindIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGBindIpAddress.setStatus('current')
if mibBuilder.loadTexts: starFNGBindIpAddress.setDescription('The bind IP address for this FNG service')
starFNGBindIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGBindIpPort.setStatus('current')
if mibBuilder.loadTexts: starFNGBindIpPort.setDescription('The bind IP port for this FNG service')
starFNGBindSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGBindSlot.setStatus('current')
if mibBuilder.loadTexts: starFNGBindSlot.setDescription('The physical slot number for the physical port which holds the interface bound to the starFNGBindIpAddress address.')
starFNGBindPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 61, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFNGBindPort.setStatus('current')
if mibBuilder.loadTexts: starFNGBindPort.setDescription('The physical port number for the physical port which holds the interface bound to the starFNGBindIpAddress address.')
starentSGSNService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 45))
starSGSNSerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1), )
if mibBuilder.loadTexts: starSGSNSerTable.setStatus('current')
if mibBuilder.loadTexts: starSGSNSerTable.setDescription('A table containing SGSN related information')
starSGSNSerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSGSNSerVpnID"), (0, "STARENT-MIB", "starSGSNSerSvcID"))
if mibBuilder.loadTexts: starSGSNSerEntry.setStatus('current')
if mibBuilder.loadTexts: starSGSNSerEntry.setDescription('The statistics for a specific SGSN service')
starSGSNSerVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starSGSNSerVpnID.setStatus('current')
if mibBuilder.loadTexts: starSGSNSerVpnID.setDescription('The internal identification of the VPN (context)')
starSGSNSerSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 2), Gauge32())
if mibBuilder.loadTexts: starSGSNSerSvcID.setStatus('current')
if mibBuilder.loadTexts: starSGSNSerSvcID.setDescription('The internal identification of this service; unique within a specific context')
starSessSGSNVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSGSNVpnName.setStatus('current')
if mibBuilder.loadTexts: starSessSGSNVpnName.setDescription('The name of this VPN (context)')
starSessSGSNServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSGSNServName.setStatus('current')
if mibBuilder.loadTexts: starSessSGSNServName.setDescription('The name of this service')
starSessSGSNMcc = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSGSNMcc.setStatus('current')
if mibBuilder.loadTexts: starSessSGSNMcc.setDescription('Mobile Country Code')
starSessSGSNMnc = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSGSNMnc.setStatus('current')
if mibBuilder.loadTexts: starSessSGSNMnc.setDescription('Mobile Network Code')
starSessSGSNRncId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSGSNRncId.setStatus('current')
if mibBuilder.loadTexts: starSessSGSNRncId.setDescription('The Id of the RNC ')
starSessSGSNHlrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 45, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSessSGSNHlrNum.setStatus('current')
if mibBuilder.loadTexts: starSessSGSNHlrNum.setDescription('The Id of the HLR ')
starentSS7Rd = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 46))
starSS7RdTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1), )
if mibBuilder.loadTexts: starSS7RdTable.setStatus('current')
if mibBuilder.loadTexts: starSS7RdTable.setDescription('A table containing SS7Rd related information')
starSS7RdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSS7rdId"))
if mibBuilder.loadTexts: starSS7RdEntry.setStatus('current')
if mibBuilder.loadTexts: starSS7RdEntry.setDescription('The statistics for a specific ss7rd ')
starSS7rdId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSS7rdId.setStatus('current')
if mibBuilder.loadTexts: starSS7rdId.setDescription('SS7 Routing Domain identification')
starSS7Pc = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7Pc.setStatus('current')
if mibBuilder.loadTexts: starSS7Pc.setDescription('Point Code')
starSS7M3UAPsId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7M3UAPsId.setStatus('current')
if mibBuilder.loadTexts: starSS7M3UAPsId.setDescription('Peer Server identification')
starSS7M3UAPspId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7M3UAPspId.setStatus('current')
if mibBuilder.loadTexts: starSS7M3UAPspId.setDescription('Peer Server process identification')
starSS7MTP3LinkSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7MTP3LinkSetId.setStatus('current')
if mibBuilder.loadTexts: starSS7MTP3LinkSetId.setDescription('MTP3 LinkSet Identifier')
starSS7MTP3LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7MTP3LinkId.setStatus('current')
if mibBuilder.loadTexts: starSS7MTP3LinkId.setDescription('MTP3 Link Identifier')
starSS7SCTPSelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7SCTPSelfAddr.setStatus('current')
if mibBuilder.loadTexts: starSS7SCTPSelfAddr.setDescription('The self end point IP Address')
starSS7SCTPPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7SCTPPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starSS7SCTPPeerAddr.setDescription('The IP Address of the PeerNode')
starSS7SCTPSelfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7SCTPSelfPort.setStatus('current')
if mibBuilder.loadTexts: starSS7SCTPSelfPort.setDescription('The self end point sctp port')
starSS7SCTPPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7SCTPPeerPort.setStatus('current')
if mibBuilder.loadTexts: starSS7SCTPPeerPort.setDescription('The peer end point sctp port')
starSS7CongLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7CongLevel.setStatus('current')
if mibBuilder.loadTexts: starSS7CongLevel.setDescription('Congestion Level Value')
starSS7LocalCong = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7LocalCong.setStatus('current')
if mibBuilder.loadTexts: starSS7LocalCong.setDescription('Local Congestion Value')
starSS7CauseString = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 46, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSS7CauseString.setStatus('current')
if mibBuilder.loadTexts: starSS7CauseString.setDescription('Cause string for failure')
starentSccpNw = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 47))
starSccpNwTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 47, 1), )
if mibBuilder.loadTexts: starSccpNwTable.setStatus('current')
if mibBuilder.loadTexts: starSccpNwTable.setDescription('A table containing Sccp Network related information')
starSccpNwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 47, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSccpNwId"))
if mibBuilder.loadTexts: starSccpNwEntry.setStatus('current')
if mibBuilder.loadTexts: starSccpNwEntry.setDescription('The statistics for a specific Sccp Network')
starSccpNwId = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 47, 1, 1, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSccpNwId.setStatus('current')
if mibBuilder.loadTexts: starSccpNwId.setDescription('SCCP Network Id')
starSccpSsn = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 47, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSccpSsn.setStatus('current')
if mibBuilder.loadTexts: starSccpSsn.setDescription('Sub System Number')
starentSGTPService = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 48))
starSGTPSerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1), )
if mibBuilder.loadTexts: starSGTPSerTable.setStatus('current')
if mibBuilder.loadTexts: starSGTPSerTable.setDescription('A table containing SGTP Service related information')
starSGTPSerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSGTPSerVpnID"), (0, "STARENT-MIB", "starSGTPSerSvcID"))
if mibBuilder.loadTexts: starSGTPSerEntry.setStatus('current')
if mibBuilder.loadTexts: starSGTPSerEntry.setDescription('The statistics for a specific SGTP service')
starSGTPSerVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starSGTPSerVpnID.setStatus('current')
if mibBuilder.loadTexts: starSGTPSerVpnID.setDescription('The internal identification of the VPN (context)')
starSGTPSerSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 2), Gauge32())
if mibBuilder.loadTexts: starSGTPSerSvcID.setStatus('current')
if mibBuilder.loadTexts: starSGTPSerSvcID.setDescription('The internal identification of this service; unique within a specific context')
starSGTPVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSGTPVpnName.setStatus('current')
if mibBuilder.loadTexts: starSGTPVpnName.setDescription('The name of this VPN (context)')
starSGTPServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSGTPServName.setStatus('current')
if mibBuilder.loadTexts: starSGTPServName.setDescription('The name of this service')
starSGTPSelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSGTPSelfAddr.setStatus('current')
if mibBuilder.loadTexts: starSGTPSelfAddr.setDescription('The IP Address of the SGSN')
starSGTPPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSGTPPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starSGTPPeerAddr.setDescription('The IP Address of the PeerNode')
starSGTPSelfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSGTPSelfPort.setStatus('current')
if mibBuilder.loadTexts: starSGTPSelfPort.setDescription('The self end point sgtp port')
starSGTPPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 48, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSGTPPeerPort.setStatus('current')
if mibBuilder.loadTexts: starSGTPPeerPort.setDescription('The peer end point sgtp port')
starentIPMSServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 49))
starIPMSServerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 49, 1), )
if mibBuilder.loadTexts: starIPMSServerTable.setStatus('current')
if mibBuilder.loadTexts: starIPMSServerTable.setDescription('A table containing information on IPMS Servers')
starIPMSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 49, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starIPMSServerVpnID"), (0, "STARENT-MIB", "starIPMSServerAddr"))
if mibBuilder.loadTexts: starIPMSServerEntry.setStatus('current')
if mibBuilder.loadTexts: starIPMSServerEntry.setDescription('Information about a particular IPMS Server')
starIPMSServerVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 49, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starIPMSServerVpnID.setStatus('current')
if mibBuilder.loadTexts: starIPMSServerVpnID.setDescription('The internal identification of the VPN (context)')
starIPMSServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 49, 1, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starIPMSServerAddr.setStatus('current')
if mibBuilder.loadTexts: starIPMSServerAddr.setDescription('The IP address of the IPMS server within this VPN (context)')
starIPMSServerVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 49, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starIPMSServerVpnName.setStatus('current')
if mibBuilder.loadTexts: starIPMSServerVpnName.setDescription('The name of this VPN (context)')
starentCert = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 50))
starCertTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 50, 1), )
if mibBuilder.loadTexts: starCertTable.setStatus('current')
if mibBuilder.loadTexts: starCertTable.setDescription('A table containing information on X.509 Certificates')
starCertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 50, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starCertSerialNumber"))
if mibBuilder.loadTexts: starCertEntry.setStatus('current')
if mibBuilder.loadTexts: starCertEntry.setDescription('Information about a particular X.509 Certificate')
starCertSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 50, 1, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starCertSerialNumber.setStatus('current')
if mibBuilder.loadTexts: starCertSerialNumber.setDescription('The serial number for the certificate')
starCertExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 50, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCertExpiryTime.setStatus('current')
if mibBuilder.loadTexts: starCertExpiryTime.setDescription('The Certificate expiration date/time')
starCertIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 50, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCertIssuer.setStatus('current')
if mibBuilder.loadTexts: starCertIssuer.setDescription('The Certificate issuer')
starentFile = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 51))
starFileTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 51, 1), )
if mibBuilder.loadTexts: starFileTable.setStatus('current')
if mibBuilder.loadTexts: starFileTable.setDescription('A table of files stored on a mass storage device')
starFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 51, 1, 1), ).setIndexNames((1, "STARENT-MIB", "starFileName"))
if mibBuilder.loadTexts: starFileEntry.setStatus('current')
if mibBuilder.loadTexts: starFileEntry.setDescription('Information about a particular file on a mass storage device')
starFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 51, 1, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFileName.setStatus('current')
if mibBuilder.loadTexts: starFileName.setDescription('The name (full path) of the file')
starFileApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 51, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("systemfile", 1), ("cdrmod", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFileApplication.setStatus('current')
if mibBuilder.loadTexts: starFileApplication.setDescription('The application that owns this file')
starentFTPServ = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 52))
starFTPServTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 52, 1), )
if mibBuilder.loadTexts: starFTPServTable.setStatus('current')
if mibBuilder.loadTexts: starFTPServTable.setDescription('A table of FTP servers configured')
starFTPServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 52, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starFTPServVpnID"), (0, "STARENT-MIB", "starFTPServIpAddr"))
if mibBuilder.loadTexts: starFTPServEntry.setStatus('current')
if mibBuilder.loadTexts: starFTPServEntry.setDescription('Information about a particular FTP Server')
starFTPServVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 52, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: starFTPServVpnID.setStatus('current')
if mibBuilder.loadTexts: starFTPServVpnID.setDescription('The internal identification of the VPN (context) used to reach this FTP server')
starFTPServIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 52, 1, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFTPServIpAddr.setStatus('current')
if mibBuilder.loadTexts: starFTPServIpAddr.setDescription('The IP address of the FTP server')
starFTPServVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 52, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFTPServVpnName.setStatus('current')
if mibBuilder.loadTexts: starFTPServVpnName.setDescription('The name of the VPN (context)')
starentCSCFPeerServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 53))
starCSCFPeerServerTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1), )
if mibBuilder.loadTexts: starCSCFPeerServerTable.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerTable.setDescription('A table containing PeerServer related information')
starCSCFPeerServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starCSCFPeerServerVpnID"), (0, "STARENT-MIB", "starCSCFPeerServerSvcID"))
if mibBuilder.loadTexts: starCSCFPeerServerEntry.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerEntry.setDescription('The statistics for a specific CSCF service')
starCSCFPeerServerVpnID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: starCSCFPeerServerVpnID.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerVpnID.setDescription('The internal identification of the VPN (context)')
starCSCFPeerServerSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1, 2), Gauge32())
if mibBuilder.loadTexts: starCSCFPeerServerSvcID.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerSvcID.setDescription('The internal identification of this CSCF service; unique within a specific context')
starCSCFPeerServerVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCSCFPeerServerVpnName.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerVpnName.setDescription('The name of this VPN (context)')
starCSCFPeerServerSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCSCFPeerServerSvcName.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerSvcName.setDescription('The name of this CSCF-service')
starCSCFPeerServerListName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCSCFPeerServerListName.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerListName.setDescription('The name of the cscf-peer-server')
starCSCFPeerServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCSCFPeerServerName.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerName.setDescription('The name of the cscf-peer-server')
starCSCFPeerServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 53, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starCSCFPeerServerState.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerState.setDescription('The state of the cscf-peer-server')
starentSDH = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 54))
starSDHTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 54, 1), )
if mibBuilder.loadTexts: starSDHTable.setStatus('current')
if mibBuilder.loadTexts: starSDHTable.setDescription('A table ...')
starSDHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 54, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSDHSlot"), (0, "STARENT-MIB", "starSDHPort"))
if mibBuilder.loadTexts: starSDHEntry.setStatus('current')
if mibBuilder.loadTexts: starSDHEntry.setDescription('Information about a specific ...')
starSDHSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 54, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSDHSlot.setStatus('current')
if mibBuilder.loadTexts: starSDHSlot.setDescription('The slot number for this port')
starSDHPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 54, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSDHPort.setStatus('current')
if mibBuilder.loadTexts: starSDHPort.setDescription('The port number within this slot')
starSDHOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 54, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSDHOperState.setStatus('current')
if mibBuilder.loadTexts: starSDHOperState.setDescription('A bitmask indicating the state of SDH layer SCT. 0x0000 Good 0x0001 lais 0x0002 linesd 0x0004 linesf 0x0010 lof 0x0020 los 0x0040 msrdi')
starentSDHPath = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 55))
starSDHPathTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 55, 1), )
if mibBuilder.loadTexts: starSDHPathTable.setStatus('current')
if mibBuilder.loadTexts: starSDHPathTable.setDescription('A table ...')
starSDHPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 55, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starSDHPathSlot"), (0, "STARENT-MIB", "starSDHPathPort"), (0, "STARENT-MIB", "starSDHPathNum"))
if mibBuilder.loadTexts: starSDHPathEntry.setStatus('current')
if mibBuilder.loadTexts: starSDHPathEntry.setDescription('Information about a specific ...')
starSDHPathSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 55, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSDHPathSlot.setStatus('current')
if mibBuilder.loadTexts: starSDHPathSlot.setDescription('The slot number for this port')
starSDHPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 55, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSDHPathPort.setStatus('current')
if mibBuilder.loadTexts: starSDHPathPort.setDescription('The port number within this slot')
starSDHPathNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 55, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starSDHPathNum.setStatus('current')
if mibBuilder.loadTexts: starSDHPathNum.setDescription('The path number')
starSDHPathOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 55, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starSDHPathOperState.setStatus('current')
if mibBuilder.loadTexts: starSDHPathOperState.setDescription('A bitmask indicating the state of SDH Path HOP. 0x0000 Good 0x0001 hopathsd 0x0002 hopathsf 0x0020 ppdi 0x0040 prdi 0x0080 perdi 0x0100 perdival 0x0200 perdivaloff')
starentE1Trib = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 56))
starE1TribTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1), )
if mibBuilder.loadTexts: starE1TribTable.setStatus('current')
if mibBuilder.loadTexts: starE1TribTable.setDescription('A table ...')
starE1TribEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starE1TribSlot"), (0, "STARENT-MIB", "starE1TribPort"), (0, "STARENT-MIB", "starE1TribPath"), (0, "STARENT-MIB", "starE1TribTug2"), (0, "STARENT-MIB", "starE1TribTu12"))
if mibBuilder.loadTexts: starE1TribEntry.setStatus('current')
if mibBuilder.loadTexts: starE1TribEntry.setDescription('Information about a specific ...')
starE1TribSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starE1TribSlot.setStatus('current')
if mibBuilder.loadTexts: starE1TribSlot.setDescription('The slot number for this port')
starE1TribPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starE1TribPort.setStatus('current')
if mibBuilder.loadTexts: starE1TribPort.setDescription('The port number within this slot')
starE1TribPath = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starE1TribPath.setStatus('current')
if mibBuilder.loadTexts: starE1TribPath.setDescription(' ')
starE1TribTug2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starE1TribTug2.setStatus('current')
if mibBuilder.loadTexts: starE1TribTug2.setDescription(' ')
starE1TribTu12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starE1TribTu12.setStatus('current')
if mibBuilder.loadTexts: starE1TribTu12.setDescription(' ')
starE1TribOperStateLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starE1TribOperStateLOP.setStatus('current')
if mibBuilder.loadTexts: starE1TribOperStateLOP.setDescription('A bitmask indicating the state of SDH layer LOP. 0x0000 Good 0x0001 lopathsd 0x0002 lopathsf 0x0100 erdi 0x0200 rdi 0x0400 lop 0x0800 ais 0x1000 lom')
starE1TribOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 56, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starE1TribOperState.setStatus('current')
if mibBuilder.loadTexts: starE1TribOperState.setDescription('A bitmask 0x0000 Good 0x0001 inf 0x0002 insmf 0x0004 incmf 0x0008 ooof 0x0010 raiccrc 0x0020 cfebe 0x0040 rai 0x0080 rmai 0x0100 aisd 0x0200 red 0x0400 ais 0x0800 ts16aisd')
starentFractE1Trib = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 58))
starFractE1TribTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1), )
if mibBuilder.loadTexts: starFractE1TribTable.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribTable.setDescription('A table ...')
starFractE1TribEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starFractE1TribSlot"), (0, "STARENT-MIB", "starFractE1TribPort"), (0, "STARENT-MIB", "starFractE1TribPath"), (0, "STARENT-MIB", "starFractE1TribTug2"), (0, "STARENT-MIB", "starFractE1TribTu12"), (0, "STARENT-MIB", "starFractE1TribBundNum"))
if mibBuilder.loadTexts: starFractE1TribEntry.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribEntry.setDescription('Information about a specific ...')
starFractE1TribSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 48))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFractE1TribSlot.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribSlot.setDescription('The slot number for this port')
starFractE1TribPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFractE1TribPort.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribPort.setDescription('The port number within this slot')
starFractE1TribPath = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFractE1TribPath.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribPath.setDescription(' ')
starFractE1TribTug2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFractE1TribTug2.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribTug2.setDescription(' ')
starFractE1TribTu12 = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starFractE1TribTu12.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribTu12.setDescription(' ')
starFractE1TribBundNum = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: starFractE1TribBundNum.setStatus('obsolete')
if mibBuilder.loadTexts: starFractE1TribBundNum.setDescription(' ')
starFractE1TribTimeslots = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 58, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starFractE1TribTimeslots.setStatus('current')
if mibBuilder.loadTexts: starFractE1TribTimeslots.setDescription(' ')
starentGPRSLink = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 57))
starGPRSLinkTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 57, 1), )
if mibBuilder.loadTexts: starGPRSLinkTable.setStatus('current')
if mibBuilder.loadTexts: starGPRSLinkTable.setDescription('A table containing GPRSService Link related information')
starGPRSLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 57, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starGPRSNsei"))
if mibBuilder.loadTexts: starGPRSLinkEntry.setStatus('current')
if mibBuilder.loadTexts: starGPRSLinkEntry.setDescription('The link statistics for a specific GPRS service')
starGPRSNsei = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 57, 1, 1, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starGPRSNsei.setStatus('current')
if mibBuilder.loadTexts: starGPRSNsei.setDescription('Network Service Entity Indentifier')
starGPRSNsvci = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 57, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGPRSNsvci.setStatus('current')
if mibBuilder.loadTexts: starGPRSNsvci.setDescription('Network Service Virtual Circuit Identifier')
starGPRSBvci = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 57, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starGPRSBvci.setStatus('current')
if mibBuilder.loadTexts: starGPRSBvci.setDescription('Base Station System GPRS(General Packet Radio Service) Protocl Virtual Circuit Identifier')
starentStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 59))
starStorageTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 59, 1), )
if mibBuilder.loadTexts: starStorageTable.setStatus('current')
if mibBuilder.loadTexts: starStorageTable.setDescription('A table of mass storage devices')
starStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 59, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starStorageSlot"), (1, "STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starStorageEntry.setStatus('current')
if mibBuilder.loadTexts: starStorageEntry.setDescription('Information about a particular file on a mass storage device')
starStorageSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 59, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starStorageSlot.setStatus('current')
if mibBuilder.loadTexts: starStorageSlot.setDescription('The slot number of the card holding this storage device')
starStorageName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 59, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starStorageName.setStatus('current')
if mibBuilder.loadTexts: starStorageName.setDescription('The name of the storage device')
starStorageDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 59, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("independent", 1), ("raid", 2), ("raidmember", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: starStorageDeviceType.setStatus('current')
if mibBuilder.loadTexts: starStorageDeviceType.setDescription('The storage device type. A value of independent(1) means that the device can be accessed as a standalone device, and is not part of a raid array. A value of raid(2) means that this device is a raid array. A value of raidmember(3) means the device is part of a raid array, and thus cannot be read/written to outside of the raid array')
starentMMES1Assoc = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 67))
starMMES1AssocTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 67, 1), )
if mibBuilder.loadTexts: starMMES1AssocTable.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocTable.setDescription('A table of MME S1 Associations')
starMMES1AssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 67, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starMMES1AssocSvcID"), (0, "STARENT-MIB", "starMMES1AssocENBID"))
if mibBuilder.loadTexts: starMMES1AssocEntry.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocEntry.setDescription('Information about a particular MME S1 Association')
starMMES1AssocSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 67, 1, 1, 1), StarMediumID())
if mibBuilder.loadTexts: starMMES1AssocSvcID.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocSvcID.setDescription('The service identification is made up from the first 8 characters of the VPN name and the first 16 characters of the service name seperated by (:)')
starMMES1AssocENBID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 67, 1, 1, 2), StarENBID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMES1AssocENBID.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocENBID.setDescription('The identification of the eNodeB')
starMMES1AssocVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 67, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1AssocVpnName.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocVpnName.setDescription('The name of this VPN (context)')
starMMES1AssocServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 67, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1AssocServName.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocServName.setDescription('The name of this MME Service')
starentMMES1Path = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 1, 70))
starMMES1PathTable = MibTable((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1), )
if mibBuilder.loadTexts: starMMES1PathTable.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathTable.setDescription('A table of MME S1 Path')
starMMES1PathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1), ).setIndexNames((0, "STARENT-MIB", "starMMES1PathSvcID"), (0, "STARENT-MIB", "starMMES1PathENBID"))
if mibBuilder.loadTexts: starMMES1PathEntry.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathEntry.setDescription('Information about a particular MME S1 Pathiation')
starMMES1PathSvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 1), StarMediumID())
if mibBuilder.loadTexts: starMMES1PathSvcID.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathSvcID.setDescription('The service identification is made up from the first 8 characters of the VPN name and the first 16 characters of the service name seperated by (:)')
starMMES1PathENBID = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 2), StarENBID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: starMMES1PathENBID.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathENBID.setDescription('The identification of the eNodeB')
starMMES1PathVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1PathVpnName.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathVpnName.setDescription('The name of this VPN (context)')
starMMES1PathServName = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1PathServName.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathServName.setDescription('The name of this MME Service')
starMMES1PathSelfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1PathSelfAddr.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathSelfAddr.setDescription('Interface IP Address')
starMMES1PathSelfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1PathSelfPort.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathSelfPort.setDescription('Self port number')
starMMES1PathPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1PathPeerAddr.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathPeerAddr.setDescription('Interface IP Address')
starMMES1PathPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8164, 1, 70, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: starMMES1PathPeerPort.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathPeerPort.setDescription('Peer port number')
starentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 2))
starCardTempOverheat = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardTemperature"))
if mibBuilder.loadTexts: starCardTempOverheat.setStatus('current')
if mibBuilder.loadTexts: starCardTempOverheat.setDescription('The card has reached a temperature beyond its safe operating range. Probable Cause: External temperature is too high; One or more fan failures; blockages the prevent fan air inflow/outflow. Action to be Taken: Inspect chassis for any item that may be blocking chassis air flow. Verify adjacent equipment is not obstructing air flow. Verify that the fans are running via the CLI/EMS. Check air filters. Check chassis maintenance schedule to see if chassis needs routine air filter replacement. Verify room temperature is within acceptable operating conditions. Clear Condition: This condition is cleared when the card reaches its operating temperature range or is removed from the system. Condition Clear Alarm: This condition is cleared by a starCardTempOK notification. This is not applicable to QVPC-SI and QVPC-DI')
starCardTempOK = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 2)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardTemperature"))
if mibBuilder.loadTexts: starCardTempOK.setStatus('current')
if mibBuilder.loadTexts: starCardTempOK.setDescription('The temperature of the card is now within its safe operating range. This notification is only generated if the card has previosly generated a starCardTempOverheat notification. Action to be Taken: No action required. The cause for the card overheat condition should be investigated.This is not applicable to QVPC-SI and QVPC-DI.')
starCardReset = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 3)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardReset.setStatus('obsolete')
if mibBuilder.loadTexts: starCardReset.setDescription('A reset operation has been invoked on the card. This trap is obsolete. This is not applicable to QVPC-SI.')
starCardRebootRequest = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 4)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardRebootRequest.setStatus('current')
if mibBuilder.loadTexts: starCardRebootRequest.setDescription('A Reboot operation has been invoked on this card by an administrator. If successful, a subsequent CardDown trap is typically generated. Action to be Taken: No action required. If the reboot was not scheduled the admin logs can be examined to determine who invoked the reboot operation. This is not applicable to QVPC-SI.')
starCardUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 5)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardUp.setStatus('current')
if mibBuilder.loadTexts: starCardUp.setDescription('The card is up (operational). This is not applicable to QVPC-SI.')
starCardVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 6)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardVoltageFailure.setStatus('current')
if mibBuilder.loadTexts: starCardVoltageFailure.setDescription('A voltage regulation failure has been detected this card. Probable Cause: Problem with incoming power; failure of power filters; hardware issue with card. Note that this is an extremely abnormal condition. Action To Be Taken: Verify that the power supplied to the chassis is operating correctly; use the CLI/EMS to check the state of the chassis power filters; replace the card Clear Condition: This is not a recoverable error except via restarting the card, so the condition is only cleared via a starCardUp or starCardActive notification. This is not applicable to QVPC-SI and QVPC-DI.')
starCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 7)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardRemoved.setStatus('current')
if mibBuilder.loadTexts: starCardRemoved.setDescription('A card has been removed from the chassis. Probable Cause: An operator has physically unlocked and removed a card from the chassis Action to be Taken: No action is required. If the card removal was unplanned, the admin logs can identify the time when the card was initially unlocked. This is not applicable to QVPC-SI.')
starCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 8)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardInserted.setStatus('current')
if mibBuilder.loadTexts: starCardInserted.setDescription('A card has been inserted into the chassis.This is not applicable to QVPC-SI.')
starCardBootFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 9)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardBootFailed.setStatus('current')
if mibBuilder.loadTexts: starCardBootFailed.setDescription('A card has failed to startup properly. The card is not operational Probable Cause: The system logs should contain additional information about the cause of the boot failure. This is not applicable to QVPC-SI.')
starCardFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 10)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardFailed.setStatus('obsolete')
if mibBuilder.loadTexts: starCardFailed.setDescription('The card has failed and is no longer operational. This trap is obsolete and has been replaced with more specific traps to identify specific failures.This is not applicable to QVPC-SI.')
starCardSWFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 11)).setObjects(("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardSWFailed.setStatus('obsolete')
if mibBuilder.loadTexts: starCardSWFailed.setDescription('A unrecoverable software error has occured on the card. This trap is obsolete and has been replaced with more specific traps to identify specific failures.This is not applicable to QVPC-SI.')
starCardRCCFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 12)).setObjects(("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardRCCFailed.setStatus('obsolete')
if mibBuilder.loadTexts: starCardRCCFailed.setDescription('The RCC has failed. Probable Cause: A hardware failure on the RCC card. This trap is obsolete. This is not applicable to QVPC-SI and QVPC-DI.')
starCardMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 13)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardMismatch.setStatus('current')
if mibBuilder.loadTexts: starCardMismatch.setDescription('The card does not match its configuration, or the card does not match the slot it was inserted into, or the card is of an unsupported type. Probable Cause: A card was inserted into a slot which was configured for a different type of card. For example, a Gigabit Ethernet card was inserted into a slot configured for a Fast Ethernet card. A starCardUp or starCardActive notification would indicate that this condition has been cleared.This is not applicable to QVPC-SI.')
starCardFailureLEDOn = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 14)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardFailureLEDOn.setStatus('obsolete')
if mibBuilder.loadTexts: starCardFailureLEDOn.setDescription('The failure LED is illuminated on the card. This trap is obsolete and has been replaced with more specific traps for specific failures. This is not applicable to QVPC-SI and QVPC-DI.')
starCardFailureLEDOff = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 15)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardFailureLEDOff.setStatus('obsolete')
if mibBuilder.loadTexts: starCardFailureLEDOff.setDescription('The failure LED is no longer illuminated on the card. This notification is only generated if the card has previously generated a starCardFailureLEDOn notification. This trap is obsolete and has been replaced with more specific traps for specific failures.This is not applicable to QVPC-SI and QVPC-DI.')
starCardPACMigrateStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 16)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardPACMigrateStart.setStatus('deprecated')
if mibBuilder.loadTexts: starCardPACMigrateStart.setDescription('A PAC/PSC Migration operation has begun. The first varbind identifies the PAC/PSC being migrated away from; the second varbind identifies the PAC/PSC being migrated to. Probable Cause: This is typically caused by an operator action; it can also represent the system recovering from a software or hardware fault. A starCardPACMigrateComplete is generated when the migration is completed')
starCardPACMigrateComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 17)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardPACMigrateComplete.setStatus('deprecated')
if mibBuilder.loadTexts: starCardPACMigrateComplete.setDescription('A PAC/PSC Migration operation has successfully completed. The first varbind identifies the PAC/PSC that was migrated away from; the second varbind identifies the PAC/PSC that was migrated to.')
starCardPACMigrateFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 18)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardPACMigrateFailed.setStatus('deprecated')
if mibBuilder.loadTexts: starCardPACMigrateFailed.setDescription('A PAC/PSC Migration operation has failed. The first varbind identifies the PAC/PSC that was attemped to be migrated away from; the second varbind identifies the PAC/PSC that was attempted to be migrated to. Probable Cause: The PAC/PSC being migrated to was removed or reset before the migration completed; the migration operation was terminated by an operator; or a software or hardware failure on either PAC/PSC involved in the migration operation. The PAC/PSC in question will be reset; a starCardUp notification will be generated when the card is operational again.')
starCardSPCSwitchoverStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 19)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardSPCSwitchoverStart.setStatus('deprecated')
if mibBuilder.loadTexts: starCardSPCSwitchoverStart.setDescription('An SPC switchover operation has begun. The first varbind identifies the SPC being switched away from; the second varbind identifies the SPC being switched to. Note that since an SPC switchover can cause a momentary loss of communication through the management (SPIO) interface, it is possible that this trap will not be successfully delivered. Probable Cause: This is typically caused by an operator action; it can also represent the system recovering from a software or hardware fault. Action to be Taken: If the SPC switchover was unplanned, the admin logs should be examined for the cause of the switchover. If the cause was a software failure, the system crash logs should be examined. Clear Condition: Verify the SPC switchover completes successfully. Clear Condition Alarm: A starCardSPCSwitchoverComplete is generated when the switchover operation has completed.')
starCardSPCSwitchoverComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 20)).setObjects(("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardSPCSwitchoverComplete.setStatus('deprecated')
if mibBuilder.loadTexts: starCardSPCSwitchoverComplete.setDescription('An SPC Switchover has completed successfully. The starSlotNum varbind identifies the new primary SPC Action to be Taken: If the SPC switchover was unplanned, the admin logs should be examined for the cause of the switchover. If the cause was a software failure, the system crash logs should be examined.')
starCardSPCSwitchoverFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 21)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardSPCSwitchoverFailed.setStatus('deprecated')
if mibBuilder.loadTexts: starCardSPCSwitchoverFailed.setDescription('An SPC switchover operation has failed. The first varbind identifies the SPC that was attempted to be switched away from; the second varbind identifies the SPC that was attempted to be switched to. Probable Cause: The SPC being migrated to was removed or reset before the migration completed; the migration operation was terminated by an operator; or a software or hardware failure on either SPC. Action to be Taken: Verify that both SPCs have the card locks in the locked position; examine the admin logs for the cause of the failure. If the cause was a software failure, the system crash logs should be examined. Clear Condition: The SPC in question will be reset; a starCardUp notification will be generated when the card is operational again.')
starFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 22)).setObjects(("STARENT-MIB", "starFanNum"), ("STARENT-MIB", "starFanStatus"))
if mibBuilder.loadTexts: starFanFailed.setStatus('current')
if mibBuilder.loadTexts: starFanFailed.setDescription('One of more fans have failed on the indicated fan controller. Probable Cause: A hardware failure on the fan tray. The fan tray should be replaced. Action to be Taken: Verify there is no physical obstruction to the fans; Replace the fan tray. Clear Condition: Verify the fans are running Condition Clear Alarm: A starFanInserted notification will be generated when the fan tray is replaced. This is not applicable to QVPC-SI and QVPC-DI.')
starFanRemoved = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 23)).setObjects(("STARENT-MIB", "starFanNum"))
if mibBuilder.loadTexts: starFanRemoved.setStatus('current')
if mibBuilder.loadTexts: starFanRemoved.setDescription('A fan tray has been removed Action to be Taken: Replace the fan tray Clear Condition: Verify both fan trays are present and operational. Condition Clear Alarm: A starFanInserted notification will be generated when the fan tray is replaced. This is not applicable to QVPC-SI and QVPC-DI.')
starFanInserted = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 24)).setObjects(("STARENT-MIB", "starFanNum"))
if mibBuilder.loadTexts: starFanInserted.setStatus('current')
if mibBuilder.loadTexts: starFanInserted.setDescription('A fan tray has been inserted This is not applicable to QVPC-SI and QVPC-DI.')
starLogThreshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 25)).setObjects(("STARENT-MIB", "starLogName"), ("STARENT-MIB", "starLogCurSize"), ("STARENT-MIB", "starLogMaxSize"))
if mibBuilder.loadTexts: starLogThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: starLogThreshold.setDescription('A system log has reached its maximum size. This trap is obsolete.')
starCPUBusy = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 26)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUBusy.setStatus('current')
if mibBuilder.loadTexts: starCPUBusy.setDescription('The CPU is experiencing very high usage. Probable Cause: For SPC/SMC CPUs this typically represents an abnormal amount of management (CLI, SNMP, CORBA) requests. For PAC/PSC cards this indicates that the system is reaching its capacity. Action to be Taken: For SPC/SMC cards, this may be a transient condition because of a burst of management activity. Monitor the CPU usage and if it is persistently high, examine the CPU table to determine which management activity is causing the excessive usage. For PAC/PSC cards, this indicates the system is nearing its overall capacity. Monitor CPU usage and if it is persistently high, the system may need additional PACs/PSCs to keep up with the system load. Clear Condition: Verify that CPU usage returned to a normal load. This can represent a transient condition; the trap will be periodically repeated if the condition persists.')
starCPUMemoryLow = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 27)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUMemoryLow.setStatus('current')
if mibBuilder.loadTexts: starCPUMemoryLow.setDescription('The CPU is experiencing a low memory condition. Probable Cause: For SPC CPUs this typically represents an abnormal number of management sessions, in particular CLI sessions. For PAC/PCS cards this indicates that the system is reaching its capacity. Action to be Taken: For SPC cards, this may be a transient condition because of a burst of management activity. Monitor memory usage and if it is persistently high, examine the CPU table to determine which management activity is causing the excessive usage. Verify that large numbers of CLI sessions are not being generated and, if needed, terminate extra sessions. For PAC/PCS cards, this indicated the system is nearing its overall capacity. Monitor memory usage and if it is persistently high, the system may need additional PACs/PCSs or additional PAC/PCS memory to keep up with the system load. Clear Condition: Verify that memory usage returned to a normal load. This can represent a transient condition; the trap will be periodically repeated if the condition persists.')
starCPUMemoryFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 28)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUMemoryFailed.setStatus('current')
if mibBuilder.loadTexts: starCPUMemoryFailed.setDescription('The memory on this CPU has failed. Probable Cause: This indicates a hardware problem. Action to be Taken: Replace the failing card. The card will be reset; a starCardUp will be generated if the card is restored to an operational state.')
starCPUFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 29)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUFailed.setStatus('current')
if mibBuilder.loadTexts: starCPUFailed.setDescription('The CPU has failed. Probable Cause: This indicates a hardware problem. Action to be Taken: Replace the failing card. The card will be reset; a starCardUp will be generated if the card is restored to an operational state.')
starCPUWatchDogExpired = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 30)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUWatchDogExpired.setStatus('current')
if mibBuilder.loadTexts: starCPUWatchDogExpired.setDescription('The watch dog timer has failed on this CPU. Probable Cause; This could indicate an extremely busy CPU, a software problem, or a hardware issue. Action to be Taken: Check the admin logs for an indication of the problem. Check the system crash logs for an indication of software problems. If the problem persists, replace the card. Clear Condition: Verify that an SPC/SMC switchover or PAC/PSC migration completes successfully to recover from the failure condition. Condition Clear Alarm: A starCardUp will be generated if the card is restored to an operational state.')
starNPUARPPoolExhausted = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 31)).setObjects(("STARENT-MIB", "starNPUMgrNumber"))
if mibBuilder.loadTexts: starNPUARPPoolExhausted.setStatus('current')
if mibBuilder.loadTexts: starNPUARPPoolExhausted.setDescription("The ARP pool on this NPU manager is exhausted. When this occurs, the ARP entry isn't added and traffic to the local device is fowarded through a slower path. Action To Be Taken: Reduce the total number of directly connected devices or clear ARP entries.")
starPowerFilterUnitFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 32)).setObjects(("STARENT-MIB", "starPowerNumber"))
if mibBuilder.loadTexts: starPowerFilterUnitFailed.setStatus('deprecated')
if mibBuilder.loadTexts: starPowerFilterUnitFailed.setDescription('A Power Filter Unit (PFU) failed. Probable Cause: The external power source has failed or has been disconnected, or a hardware failure on the PFU. Action to be Taken: Verify that the input power to the power filter is operational and repair if needed. Verify that the connections to the power filter are intact and that the power filter is properly inserted into the chassis. Replace the power filter if required. Clear Condition: Verify that both power filters are operating. Condition Clear Alarm: A starPowerFilterAvail will be generated when the power filter is replaced.')
starPowerFilterUnitUnavail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 33)).setObjects(("STARENT-MIB", "starPowerNumber"))
if mibBuilder.loadTexts: starPowerFilterUnitUnavail.setStatus('current')
if mibBuilder.loadTexts: starPowerFilterUnitUnavail.setDescription("A Power Filter Unit (PFU) is unavailable. Probable Cause: The power filter has been removed from the chassis, or no power is being provided to the PFU. Action to be Taken: If the power filter removal wasn't planned, Verify that the input power to the power filter is operational and repair if needed. Verify that the connections to the power filter are intact and that the power filter is properly inserted into the chassis. Replace the power filter if required. Clear Condition: Verify that both power filters are operating. Condition Clear Alarm: A starPowerFilterUnitAvail will be generated when the power filter is replaced. This is not applicable to QVPC-SI and QVPC-DI.")
starPowerFilterUnitAvail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 34)).setObjects(("STARENT-MIB", "starPowerNumber"))
if mibBuilder.loadTexts: starPowerFilterUnitAvail.setStatus('current')
if mibBuilder.loadTexts: starPowerFilterUnitAvail.setDescription('A Power Filter Unit (PFU) is available. This typically means that a PFU has been inserted into the chassis or has has its power source restored. Action to be Taken: No action required This is not applicable to QVPC-SI and QVPC-DI.')
starAlertsDisabled = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 37)).setObjects(("STARENT-MIB", "starMaxAlertsPerTime"), ("STARENT-MIB", "starWindowTime"))
if mibBuilder.loadTexts: starAlertsDisabled.setStatus('current')
if mibBuilder.loadTexts: starAlertsDisabled.setDescription('The sending of SNMP Traps has been disabled because too many alerts were generated within the defined window type Probable Cause: Either a large number of SNMP notifications are being generated, or the configured threshold which limits the number of notifications is set too aggressively. Actions to be Taken: Examine the admin logs and the SNMP trap logs to determine the source of the large number of traps and take appropriate actions; verify that the configured limit for the rate at which traps will be sent is appropriate for your environment. Clear Condition Alarm: When the rate of SNMP notifications goes down a starAlertsEnabled notification is generated')
starAlertsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 38))
if mibBuilder.loadTexts: starAlertsEnabled.setStatus('current')
if mibBuilder.loadTexts: starAlertsEnabled.setDescription('The sending of SNMP Traps has been reenabled')
starAAAAuthServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 39)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"))
if mibBuilder.loadTexts: starAAAAuthServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starAAAAuthServerUnreachable.setDescription("The Authentication, Authorization and Accouting (AAA) server cannot be reached. Probable Cause: The AAA server is down, or there is a network issue preventing communication with the AAA server. Actions to be Taken: Restore the AAA server to an operational status; Verify that the AAA server is reachable by performing a 'ping' operation from the CLI in the appropriate context. Check the admin logs for notification of communication problems. Clear Condition: Verify that communication to the AAA authentication server has been restored. Condition Clear Alarm: When this condition clears a starAAAAuthServerReachable notification will be generated.")
starAAAAuthServerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 40)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"))
if mibBuilder.loadTexts: starAAAAuthServerReachable.setStatus('current')
if mibBuilder.loadTexts: starAAAAuthServerReachable.setDescription('The Authentication, Authorization and Accouting (AAA) server is now reachable. This can be the result of a system startup, the configuration of a new server, or a previously unreachable server becoming reachable. Action to be Taken: No Action Required.')
starAAAAuthServerMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 41)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"))
if mibBuilder.loadTexts: starAAAAuthServerMisconfigured.setStatus('current')
if mibBuilder.loadTexts: starAAAAuthServerMisconfigured.setDescription('The Authentication, Authorization and Accounting (AAA) server has been misconfigured. This server is not usable until this condition is repaired. Action to be Taken: Examine the system configuration and correct the misconfiguration. See the user documentation for details on AAA configuration. Clear Condition: Verify that communication to the AAA authentication server has been restored. Condition Clear Alarm: When this condition clears a starAAAAuthServerReachable notification will be generated.')
starAAAAccServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 42)).setObjects(("RADIUS-ACC-CLIENT-MIB", "radiusAccServerIndex"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"))
if mibBuilder.loadTexts: starAAAAccServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starAAAAccServerUnreachable.setDescription("The Authentication, Authorization and Accouting (AAA) server cannot be reached. Probable Cause: The AAA server is down, or there is a network issue preventing communication with the AAA server. Actions to be Taken: Restore the AAA server to an operational status; Verify that the AAA server is reachable by performing a 'ping' operation from the CLI in the appropriate context. Check the admin logs for notification of communication problems. Clear Condition: Verify that communication to the AAA accounting server has been restored. Condition Clear Alarm: When this condition clears a starAAAAccServerReachable notification will be generated.")
starAAAAccServerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 43)).setObjects(("RADIUS-ACC-CLIENT-MIB", "radiusAccServerIndex"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"))
if mibBuilder.loadTexts: starAAAAccServerReachable.setStatus('current')
if mibBuilder.loadTexts: starAAAAccServerReachable.setDescription("The Authentication, Authorization and Accouting (AAA) server is now reachable. This can be the result of a system startup, the configuration of a new server, or a previously unreachable server becoming reachable. Note that since Accounting servers are not responding to 'hello'-type messages, it is not always possible to accurately determine when an accounting server is reachable. A server may be declared 'reachable' when the ST16 is ready to start using the server, but before any acknowledgement is actually received from the server. Once accounting information actually is sent to the server a starAAAAccServerUnreachable will be generated if the server does not properly respond. Action to be Taken: No Action Required.")
starAAAAccServerMisconfigured = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 44)).setObjects(("RADIUS-ACC-CLIENT-MIB", "radiusAccServerIndex"), ("RADIUS-ACC-CLIENT-MIB", "radiusAccServerAddress"))
if mibBuilder.loadTexts: starAAAAccServerMisconfigured.setStatus('current')
if mibBuilder.loadTexts: starAAAAccServerMisconfigured.setDescription('The Authentication, Authorization and Accounting (AAA) server has been misconfigured. This server is not usable until this condition is repaired. Action to be Taken: Examine the system configuration and correct the misconfiguration. See the user documentation for details on AAA configuration. Clear Condition: Verify that communication to the AAA authentication server has been restored. Condition Clear Alarm: When this condition clears a starAAAAccServerReachable notification will be generated.')
starLogMsg = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 45)).setObjects(("STARENT-MIB", "starLogText"))
if mibBuilder.loadTexts: starLogMsg.setStatus('current')
if mibBuilder.loadTexts: starLogMsg.setDescription('A log message. This trap is used only for debugging.This is not applicable to QVPC-SI and QVPC-DI.')
starPDSNServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 46)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPDSNServiceStart.setStatus('current')
if mibBuilder.loadTexts: starPDSNServiceStart.setDescription('A PDSN Service has started Action to be Taken: No action required')
starPDSNServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 47)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPDSNServiceStop.setStatus('current')
if mibBuilder.loadTexts: starPDSNServiceStop.setDescription('A PDSN Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the PDSN service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PDSN service is operational. Condition Clear Alarm: A starPDSNServiceStart notification will be generated when the service is restarted')
starHAServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 48)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHAServiceStart.setStatus('current')
if mibBuilder.loadTexts: starHAServiceStart.setDescription('An HA Service has started Action to be Taken: No action required')
starHAServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 49)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHAServiceStop.setStatus('current')
if mibBuilder.loadTexts: starHAServiceStop.setDescription('An HA Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the PDSN service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PDSN service is operational. Condition Clear Alarm: A starHAServiceStart notification will be generated when the service is restarted')
starFAServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 50)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starFAServiceStart.setStatus('current')
if mibBuilder.loadTexts: starFAServiceStart.setDescription('An FA Service has started Action to be Taken: No action required')
starFAServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 51)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starFAServiceStop.setStatus('current')
if mibBuilder.loadTexts: starFAServiceStop.setDescription('An FA Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the FA service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the FA service is operational. Condition Clear Alarm: A starFAServiceStart notification will be generated when the service is restarted')
starCLISessionStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 52)).setObjects(("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLIPrivs"), ("STARENT-MIB", "starCLITtyname"))
if mibBuilder.loadTexts: starCLISessionStart.setStatus('current')
if mibBuilder.loadTexts: starCLISessionStart.setDescription('An interactive CLI session has started A starCLISessionEnd notification will be sent when the CLI session is terminated.')
starCLISessionEnd = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 53)).setObjects(("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLIPrivs"), ("STARENT-MIB", "starCLITtyname"))
if mibBuilder.loadTexts: starCLISessionEnd.setStatus('current')
if mibBuilder.loadTexts: starCLISessionEnd.setDescription('An interactive CLI session has ended. The CLI session may have been terminated by the CLI user; the session may have expired due to an idle timeout, or a session timeout; or the session may have been terminated by operator intervention.')
starCritTaskFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 54)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"))
if mibBuilder.loadTexts: starCritTaskFailed.setStatus('current')
if mibBuilder.loadTexts: starCritTaskFailed.setDescription('A critical task has failed and the appropriate recovery steps begun. The card containing the failed task will be restarted; migration/recovery operations will proceed. Probable Cause: Software error Actions to be Taken: Examine the admin logs for an indication of the source of the failure. Clear Condition: Verify that an SPC switchover or PAC/PSC migration completes to recover from this condition. Condition Clear Alarm: A starCardUp will be generated when the card has successfully restarted.')
starCardActive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 55)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardActive.setStatus('current')
if mibBuilder.loadTexts: starCardActive.setDescription('The card is now active.This is not applicable to QVPC-SI.')
starLACServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 56)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starLACServiceStart.setStatus('current')
if mibBuilder.loadTexts: starLACServiceStart.setDescription('A LAC Service has started Action to be Taken: No action required')
starLACServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 57)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starLACServiceStop.setStatus('current')
if mibBuilder.loadTexts: starLACServiceStop.setDescription('A LAC Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the LAC service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the LAC service is operational. Condition Clear Alarm: A starLACServiceStart notification will be generated when the service is restarted')
starLNSServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 58)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starLNSServiceStart.setStatus('current')
if mibBuilder.loadTexts: starLNSServiceStart.setDescription('A LNS Service has started Action to be Taken: No Action Required')
starLNSServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 59)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starLNSServiceStop.setStatus('current')
if mibBuilder.loadTexts: starLNSServiceStop.setDescription('A LNS Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the LNS service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the LNS service is operational. Condition Clear Alarm: A starLNSServiceStart notification will be generated when the service is restarted')
starCardDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 60)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardDown.setStatus('current')
if mibBuilder.loadTexts: starCardDown.setDescription('The card is now down. Probable Cause: The card was shut down by an operator; the card was removed by an operator; or a hardware or software fault caused the card to shut down. In the latter case an additional notification is generated with the specific failure. Action to be Taken: If the card shutdown was not planned, verify that the card is present in the system and its card lock is in the locked position. Check the admin logs for the cause of the card shutdown. Clear Condition: Verify that an SPC switchover/card migration completes to recover from the card shutdown. Condition Clear Alarm: A starCardUp notification is generated when the card is restarted. This is not applicable to QVPC-SI.')
starGGSNServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 63)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGGSNServiceStart.setStatus('current')
if mibBuilder.loadTexts: starGGSNServiceStart.setDescription('A GGSN Service has started Action to be Taken: No action required')
starGGSNServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 64)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGGSNServiceStop.setStatus('current')
if mibBuilder.loadTexts: starGGSNServiceStop.setDescription('A GGSN Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the GGSN service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the GGSN service is operational. Condition Clear Alarm: A starGGSNServiceStart notification will be generated when the service is restarted')
starLicenseExceeded = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 65)).setObjects(("STARENT-MIB", "starLicensedSessions"), ("STARENT-MIB", "starCurrentSessions"), ("STARENT-MIB", "starServiceType"))
if mibBuilder.loadTexts: starLicenseExceeded.setStatus('current')
if mibBuilder.loadTexts: starLicenseExceeded.setDescription('The licenses session limit has been exceeded; note that a small number of sessions are permitted beyond the licensed limit. Probable Cause: The usage of the system has exceeded the capacity of the license installed; The license installed does not match the identification of the system; No license is installed Action to be Taken: Verify that the proper license is installed on the system; verify that the SPCs present in the system match those identified in the software license. If required, install an additional higher-capacity license. Clear Condition: This condition is cleared when usage goes under the licensed limit. Condition Clear Alarm: This condition is cleared by a starLicenseUnderLimit notification.')
starSubscriberLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 66)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starServiceSubLimit"), ("STARENT-MIB", "starServiceSubCurrent"), ("STARENT-MIB", "starServiceType"))
if mibBuilder.loadTexts: starSubscriberLimit.setStatus('current')
if mibBuilder.loadTexts: starSubscriberLimit.setDescription('The specified service has reached its configured limit for number of subscribers Action to be Taken: Verify that the configured subscriber limit is correct. Configure additional services, or configure the existing service to permit a larger number of subscribers')
starSessionRejectNoResource = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 67)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceType"))
if mibBuilder.loadTexts: starSessionRejectNoResource.setStatus('current')
if mibBuilder.loadTexts: starSessionRejectNoResource.setDescription('A session setup was rejected because of a lack of available resources Probable Cause: The system has reached its maximum capacity based on the number of available PACs/PSCs/CPUs/memory. Actions to be Taken: Examine the system CPU table to determine if there is abnormal system usage or if the system is reaching its capacity. If this condition persists, additional PACs/PSCs or PAC/PSC memory may be required. Note that there is a configuration threshold which can be setup to monitor the number of NORESOURCE rejects.')
starLongDurTimerExpiry = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 68)).setObjects(("STARENT-MIB", "starSubContext"), ("STARENT-MIB", "starSubMSID"), ("STARENT-MIB", "starSubName"), ("STARENT-MIB", "starSubTimerDuration"), ("STARENT-MIB", "starSubLongDurTimeoutAction"), ("STARENT-MIB", "starSubSetupTime"), ("STARENT-MIB", "starSubHomeAddr"), ("STARENT-MIB", "starSubHomeAddrv6"))
if mibBuilder.loadTexts: starLongDurTimerExpiry.setStatus('current')
if mibBuilder.loadTexts: starLongDurTimerExpiry.setDescription('The long duration timer has expired for the identified subscriber. Note that either starSubHomeAddr or starSubHomeAddrv6 is typically filled in, as appropriate. The other attribute will be all zero octets. Action to be Taken: No action is typically required. If an abnormal number of expiries occur, verify that the configuration expiry time is correct')
starClosedRPServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 69)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starClosedRPServiceStart.setStatus('current')
if mibBuilder.loadTexts: starClosedRPServiceStart.setDescription('Closed RP Service has started Action to be Taken: No action required')
starClosedRPServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 70)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starClosedRPServiceStop.setStatus('current')
if mibBuilder.loadTexts: starClosedRPServiceStop.setDescription('Closed RP Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the Closed RP service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the Closed RP service is operational. Condition Clear Alarm: A starClosedRPServiceStart notification will be generated when the service is restarted')
starGtpcPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 71)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNServName"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starGtpcPathFailure.setStatus('current')
if mibBuilder.loadTexts: starGtpcPathFailure.setDescription('GTP Control Path Failure.')
starGtpuPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 72)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNServName"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starGtpuPathFailure.setStatus('current')
if mibBuilder.loadTexts: starGtpuPathFailure.setDescription('GTP Data Path Failure.')
starManagerFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 73)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"))
if mibBuilder.loadTexts: starManagerFailure.setStatus('current')
if mibBuilder.loadTexts: starManagerFailure.setDescription('Software manager Failure. Probable Cause: A software failure. The failing manager will be restarted. Action to be Taken: Examine the admin and crash logs for more information about the failure')
starEISServerAlive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 74)).setObjects(("STARENT-MIB", "starEISServerVPNName"), ("STARENT-MIB", "starEISServerAddr"))
if mibBuilder.loadTexts: starEISServerAlive.setStatus('current')
if mibBuilder.loadTexts: starEISServerAlive.setDescription('EIS Server alive')
starEISServerDead = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 75)).setObjects(("STARENT-MIB", "starEISServerVPNName"), ("STARENT-MIB", "starEISServerAddr"))
if mibBuilder.loadTexts: starEISServerDead.setStatus('current')
if mibBuilder.loadTexts: starEISServerDead.setDescription('EIS Server down. Probable Cause: The remote EIS server is down or there is a network error making it unreachable. Condition Clear Alarm: A starEISServerAlive notification will be generated when this condition is cleared')
starCgfAlive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 76)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerPort"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starCgfAlive.setStatus('current')
if mibBuilder.loadTexts: starCgfAlive.setDescription('GTPP CGF Server Alive.')
starCgfDead = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 77)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerPort"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starCgfDead.setStatus('current')
if mibBuilder.loadTexts: starCgfDead.setDescription('GTPP CGF Server Dead. Probable Cause: The remote CGF server is down or there is a network error making it unreachable. Action to be Taken: Verify that the CGF server is functioning properly; verify network connectivity to the CGF server. Clear Condition: This condition is cleared when the CGF server becomes reachable. Condition Clear Alarm: A starCgfServerAlive notification will be generated when this condition is cleared')
starStorageServerAlive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 78)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starStorageServerAlive.setStatus('current')
if mibBuilder.loadTexts: starStorageServerAlive.setDescription('GTPP Storage Server is Alive.')
starStorageServerDead = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 79)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starStorageServerDead.setStatus('current')
if mibBuilder.loadTexts: starStorageServerDead.setDescription('GTPP Storage Server is Dead. Probable Cause: The remote Storage server is down or there is a network error making it unreachable. Action to be Taken: Verify that the Storage server is functioning properly; verify network connectivity to the Storage server. Clear Condition: This condition is cleared when the Storage server becomes reachable. Condition Clear Alarm: A starStorageServerAlive notification will be generated when this condition is cleared')
starGgsnInitiatedUpdtFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 80)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNServName"), ("STARENT-MIB", "starSessGGSNSubsName"), ("STARENT-MIB", "starSessGGSNAPNName"), ("STARENT-MIB", "starSessGGSNImsi"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starGgsnInitiatedUpdtFailed.setStatus('current')
if mibBuilder.loadTexts: starGgsnInitiatedUpdtFailed.setDescription('GGSN Initiated Update PDP Context Response Failed. Probable Cause: This can happen if there is an inter-SGSN handoff and the new SGSN is not listed in GGSN service and its PLMN policy is set to reject unknown SGSNs. Action to be Taken: List the SGSN address in the GGSN service. Condition Clear Alarm: NA')
starCongestion = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 81)).setObjects(("STARENT-MIB", "starServiceType"), ("STARENT-MIB", "starCongestionPolicy"), ("STARENT-MIB", "starCongestionResourceType"))
if mibBuilder.loadTexts: starCongestion.setStatus('current')
if mibBuilder.loadTexts: starCongestion.setDescription('A congestion condition has occurred. Probable Cause: This is the result of an operator-configured congestion threshold being reached. This can be due to high usage of the resource being monitored which indicates that the IMG is reaching its peak capacity, or could be caused by the incorrect configuration of the congestion thresholds. Actions to be Taken: Verify that the congestion thresholds are correct; if the congested state is seem repeatedly, or for sustained periods of time, additional system capacity may need to be brought online. This system is cleared when the use of the specific resource falls below the configured limit. Condition Clear Alarm: A starCongestionClear notification is sent when there are no congestion conditions for a service type')
starCongestionClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 82)).setObjects(("STARENT-MIB", "starServiceType"))
if mibBuilder.loadTexts: starCongestionClear.setStatus('current')
if mibBuilder.loadTexts: starCongestionClear.setDescription('A congestion condition has cleared')
starServiceLossPTACs = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 83)).setObjects(("STARENT-MIB", "starCardMode"), ("STARENT-MIB", "starPTACConfig"), ("STARENT-MIB", "starPTACActive"))
if mibBuilder.loadTexts: starServiceLossPTACs.setStatus('current')
if mibBuilder.loadTexts: starServiceLossPTACs.setDescription('A service loss condition has occurred due to PAC/PSC/TAC failure or removal. Probable cause: Multiple PAC/PSC/TAC cards are no longer available, due to failure, removal, or operator action -- or configuration changes have been made which eliminated the availability of redundant cards. Action to be Taken: Bring additional PAC/PSC/TAC cards online to match the number of configured cards, or update the configuration to require fewer active PAC/PSC/TAC cards. Clear Condition: This condition is cleared when the number of active PAC/PSC/TAC cards reaches or exceeds the configured number.')
starServiceLossLC = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 84)).setObjects(("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starServiceLossLC.setStatus('current')
if mibBuilder.loadTexts: starServiceLossLC.setDescription('A service loss condition has occurred due to LC failure or removal. Probable cause: The upper and lower Line Cards (LCs) are both no longer available, due to failure, removal, or operator action. Action to be Taken: Fix or replace the line cards. Clear Condition: This condition is cleared when one of the two card becomes active.')
starServiceLossSPIO = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 85))
if mibBuilder.loadTexts: starServiceLossSPIO.setStatus('current')
if mibBuilder.loadTexts: starServiceLossSPIO.setDescription('A service loss condition has occurred due to SPIO failure or removal. NOTE: Since the SPIO contains the ports used for SNMP access, this notification cannot normally be delivered as an SNMP trap. The notification will be logged and stored in the historical trap list, and if the system is configured to send INFORM PDUs the notification might be delivered at a later time. Probable cause: Both SPIOs are no longer available, due to failure, removal, or operator action. Action to be Taken: Bring at least one SPIO online. Clear Condition: This condition is cleared when a SPIO is made active')
starIPSPAllAddrsFree = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 86)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starInterfaceName"))
if mibBuilder.loadTexts: starIPSPAllAddrsFree.setStatus('obsolete')
if mibBuilder.loadTexts: starIPSPAllAddrsFree.setDescription('All IP addresses are now free on the IP Pool Sharing Protocol (IPSP) primary HA. Probable Cause: IP Pool Sharing Protocol (IPSP) is running between two HAs (a primary and a secondary). The primary HA has now released the last address that was in use. This presumably is done in preparation for taking the primary HA out of server. User Action: Perform the desired maintenance on the primary HA that required taking the device out of service.')
starPCFUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 87)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starPCFAddress"))
if mibBuilder.loadTexts: starPCFUnreachable.setStatus('current')
if mibBuilder.loadTexts: starPCFUnreachable.setDescription('A PCF that the IMG communicates which is no longer reachable. Probable Cause: The PCF has failed or is otherwise unavailable, or a network connectivity problem makes it unreachable. Action to be Taken: If the PCF outage was unplanned, restart/reset the PCF; verify network connectivity Clear Condition: The condition is cleared when the PCF address becomes reachable, or if the configuration is changes to not use this server. Condition Clear Alarm: A starPCFReachable notification is generated when the pcf address becomes reachable.')
starDhcpAlive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 88)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerPort"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starDhcpAlive.setStatus('current')
if mibBuilder.loadTexts: starDhcpAlive.setDescription('DHCP Server Alive.')
starDhcpDead = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 89)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerPort"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starDhcpDead.setStatus('current')
if mibBuilder.loadTexts: starDhcpDead.setDescription('DHCP Server Dead. Probable Cause: The remote DHCP server is down or there is a network error making it unreachable. Action to be Taken: Verify that the DHCP server is functioning properly; verify network connectivity to the DHCP server. Clear Condition: The condition is cleared when the DHCP server becomes reachable, or if the configuration is changes to not use this server. Condition Clear Alarm: A starDhcpAlive notification is generated when the server becomes reachable.')
starNTPPeerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 90)).setObjects(("STARENT-MIB", "starPeerAddress"))
if mibBuilder.loadTexts: starNTPPeerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starNTPPeerUnreachable.setDescription('NTP Peer Unreachable. Probable Cause: The NTP server is down or unavailable, or there is a network connectivity issue that prevents access to the NTP server. Action to be Taken: Verify that the NTP server is running properly; verify that the connection to the NTP server is functioning. Clear Condition: This condition is cleared when the NTP server becomes reachable. Condition Clear Alarm: This condition is cleared by a starNTPPeerReachable notification.')
starNTPSyncLost = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 91))
if mibBuilder.loadTexts: starNTPSyncLost.setStatus('current')
if mibBuilder.loadTexts: starNTPSyncLost.setDescription('NTP Synchronization Lost. Probable Cause: All configured NTP server are no longer available, or some/all NTP servers have been unconfigured by an operator. Action to be Taken: Verify that the NTP server(s) are running properly and that the network connections to the NTP servers are available. Check the configured of the NTP servers for correctness. If needed, configure additional NTP servers. Clear Condition: This condition is cleared when any (one) NTP server becomes reachable. Condition Clear Alarm: This condition is cleared by a starNTPSyncEstablished notification.')
starL2TPTunnelDownPeerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 92)).setObjects(("STARENT-MIB", "starL2TPLocalTunnelID"), ("STARENT-MIB", "starL2TPPeerTunnelID"), ("STARENT-MIB", "starL2TPContextName"), ("STARENT-MIB", "starL2TPServiceName"), ("STARENT-MIB", "starL2TPServiceTypeName"), ("STARENT-MIB", "starL2TPLocalAddress"), ("STARENT-MIB", "starL2TPPeerAddress"))
if mibBuilder.loadTexts: starL2TPTunnelDownPeerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starL2TPTunnelDownPeerUnreachable.setDescription('L2TP tunnel down due to peer unreachable. Probable Cause: Misconfiguration of the peer router address or inability to route to the peer. Action to be Taken: Verify the peer address is correct; verify that the peer is operational; verify network connectivity to the peer.')
starCardStandby = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 93)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardStandby.setStatus('current')
if mibBuilder.loadTexts: starCardStandby.setDescription('The card is now standby.This is not applicable to QVPC-SI.')
starLicenseUnderLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 94)).setObjects(("STARENT-MIB", "starLicensedSessions"), ("STARENT-MIB", "starCurrentSessions"), ("STARENT-MIB", "starServiceType"))
if mibBuilder.loadTexts: starLicenseUnderLimit.setStatus('current')
if mibBuilder.loadTexts: starLicenseUnderLimit.setDescription('Usage is now under the licensed session limit.')
starIPSECPriTunDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 95)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECGroupName"), ("STARENT-MIB", "starIPSECTunLocalIpAddr"), ("STARENT-MIB", "starIPSECTunRemoteIpAddr"))
if mibBuilder.loadTexts: starIPSECPriTunDown.setStatus('current')
if mibBuilder.loadTexts: starIPSECPriTunDown.setDescription('IPSEC Primary Tunnel Down')
starIPSECPriTunUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 96)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECGroupName"), ("STARENT-MIB", "starIPSECTunLocalIpAddr"), ("STARENT-MIB", "starIPSECTunRemoteIpAddr"))
if mibBuilder.loadTexts: starIPSECPriTunUp.setStatus('current')
if mibBuilder.loadTexts: starIPSECPriTunUp.setDescription('IPSEC Primary Tunnel Up')
starIPSECSecTunDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 97)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECGroupName"), ("STARENT-MIB", "starIPSECTunLocalIpAddr"), ("STARENT-MIB", "starIPSECTunRemoteIpAddr"))
if mibBuilder.loadTexts: starIPSECSecTunDown.setStatus('current')
if mibBuilder.loadTexts: starIPSECSecTunDown.setDescription('IPSEC Secondary Tunnel Down')
starIPSECSecTunUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 98)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECGroupName"), ("STARENT-MIB", "starIPSECTunLocalIpAddr"), ("STARENT-MIB", "starIPSECTunRemoteIpAddr"))
if mibBuilder.loadTexts: starIPSECSecTunUp.setStatus('current')
if mibBuilder.loadTexts: starIPSECSecTunUp.setDescription('IPSEC Secondary Tunnel Up')
starIPSECTunSwitchFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 99)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECGroupName"))
if mibBuilder.loadTexts: starIPSECTunSwitchFail.setStatus('current')
if mibBuilder.loadTexts: starIPSECTunSwitchFail.setDescription('IPSEC Tunnel Switchover failed or unable to be attempted')
starIPSECTunSwitchComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 100)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECGroupName"), ("STARENT-MIB", "starIPSECTunLocalIpAddr"), ("STARENT-MIB", "starIPSECTunRemoteIpAddr"))
if mibBuilder.loadTexts: starIPSECTunSwitchComplete.setStatus('current')
if mibBuilder.loadTexts: starIPSECTunSwitchComplete.setDescription('IPSEC Tunnel Switchover complete')
starNwReachServerAlive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 101)).setObjects(("STARENT-MIB", "starNwReachName"), ("STARENT-MIB", "starNwReachSrvrAddr"))
if mibBuilder.loadTexts: starNwReachServerAlive.setStatus('current')
if mibBuilder.loadTexts: starNwReachServerAlive.setDescription('Nw Reacheable Server alive')
starNwReachServerDead = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 102)).setObjects(("STARENT-MIB", "starNwReachName"), ("STARENT-MIB", "starNwReachSrvrAddr"))
if mibBuilder.loadTexts: starNwReachServerDead.setStatus('current')
if mibBuilder.loadTexts: starNwReachServerDead.setDescription('Nw Reacheable Server Dead. Probable Cause: The remote server is down or there is a network error making it unreachable. A starNwReachServerAlive notification will be generated when this condition is cleared')
starStorageServerUnackedGcdrVolPurge = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 103)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starStorageServerUnackedGcdrVolPurge.setStatus('current')
if mibBuilder.loadTexts: starStorageServerUnackedGcdrVolPurge.setDescription('GTPP storage server has performed unacked GCDRs volume purge. Probable Cause: GTPP storage server has purged unacked GCDRs after hitting the max allowed configured limit on unacked GCDR in the backup database. Action to be Taken: Check for the unacked file generated for these GCDRs. Clear Condition: There is no clear condition for this notification. Condition Clear Alarm: There is no clear alarm for this notification.')
starStorageServerUnackedGcdrFileGen = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 104)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"))
if mibBuilder.loadTexts: starStorageServerUnackedGcdrFileGen.setStatus('current')
if mibBuilder.loadTexts: starStorageServerUnackedGcdrFileGen.setDescription('GTPP storage server has exported the unacked GCDRs to file from backup db. Probable Cause: GTPP storage server has generated and saved all the unacked GCDRs to file. Action to be Taken: Operator needs to ftp the generated file. Clear Condition: There is no clear condition for this notification. Condition Clear Alarm: There is no clear alarm for this notification.')
starNTPPeerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 105)).setObjects(("STARENT-MIB", "starPeerAddress"))
if mibBuilder.loadTexts: starNTPPeerReachable.setStatus('current')
if mibBuilder.loadTexts: starNTPPeerReachable.setDescription('NTP Peer Reachable. Probable Cause: The NTP server is reachable. This could indicate a newly configured NTP server (including an initial configuration on system startup) or could indicate a previously unreachable server has become reachable. Action to be Taken: No action required.')
starNTPSyncEstablished = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 106))
if mibBuilder.loadTexts: starNTPSyncEstablished.setStatus('current')
if mibBuilder.loadTexts: starNTPSyncEstablished.setDescription('NTP Synchronization Established. Probable Cause: An NTP server is available when previously no server was available. This could indicuate a newly configured NTP server (including an initial configuration on system startup) or could indicate that one or more previously unreachable server(s) has become reachable. Action to be Taken: No action required.')
starSIPServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 107)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSIPServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSIPServiceStart.setDescription('A SIP service has started Action to be Taken: No action required')
starSIPServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 108)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSIPServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSIPServiceStop.setDescription('A SIP service has stopped Action to be Taken: No action required')
starVIMServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 109)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starVIMServiceStart.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceStart.setDescription('A VIM service has started Action to be taken: No action required')
starVIMServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 110)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starVIMServiceStop.setStatus('current')
if mibBuilder.loadTexts: starVIMServiceStop.setDescription('A VIM service has stopped. This is because of application out-of-service or if vim is down or no app. server Action to be taken: No action required')
starCHATCONFServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 111)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starCHATCONFServiceStart.setStatus('current')
if mibBuilder.loadTexts: starCHATCONFServiceStart.setDescription('A CHAT/CONF service has started Action to be taken: No action required')
starCHATCONFServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 112)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starCHATCONFServiceStop.setStatus('current')
if mibBuilder.loadTexts: starCHATCONFServiceStop.setDescription('A CHAT/CONF service has stopped. This is because of application out-of-service or if chatconf is down or no app. server Action to be taken: No action required')
starSIPRouteNomatch = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 113)).setObjects(("STARENT-MIB", "starSIPRouteVpnName"), ("STARENT-MIB", "starSIPRouteVmgName"), ("STARENT-MIB", "starSIPRouteAsName"), ("STARENT-MIB", "starSIPRouteDestPartyNum"), ("STARENT-MIB", "starSIPRouteReqNum"))
if mibBuilder.loadTexts: starSIPRouteNomatch.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteNomatch.setDescription('SIP session has failed since there is no match in the routing table with matching prefix Action to be taken: Operator has to configure with matching prefix if required')
starL3AddrUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 114)).setObjects(("STARENT-MIB", "starL3Address"), ("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"))
if mibBuilder.loadTexts: starL3AddrUnreachable.setStatus('current')
if mibBuilder.loadTexts: starL3AddrUnreachable.setDescription('A L3 Address is unreachable through the specific slot and port. Action to be taken: No action required')
starSWUpgradeStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 115))
if mibBuilder.loadTexts: starSWUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: starSWUpgradeStart.setDescription('An operator has begun to upgrade the software on the chassis.')
starSWUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 116))
if mibBuilder.loadTexts: starSWUpgradeComplete.setStatus('current')
if mibBuilder.loadTexts: starSWUpgradeComplete.setDescription('An operator-initiated software upgrade has been completed.')
starSWUpgradeAborted = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 117))
if mibBuilder.loadTexts: starSWUpgradeAborted.setStatus('current')
if mibBuilder.loadTexts: starSWUpgradeAborted.setDescription('An operator-initiated software upgrade has been aborted.')
starBGPPeerSessionUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 118)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starBGPPeerIpAddress"))
if mibBuilder.loadTexts: starBGPPeerSessionUp.setStatus('current')
if mibBuilder.loadTexts: starBGPPeerSessionUp.setDescription('The BGP peer session to the specified IP address is operational. This may indicate the initial configuration of a new peer, the initial connectivity after a system restart, or the restoration of connectivity after a starBGNPeerSessionDown event. Action to be Taken: No action required.')
starBGPPeerSessionDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 119)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starBGPPeerIpAddress"))
if mibBuilder.loadTexts: starBGPPeerSessionDown.setStatus('current')
if mibBuilder.loadTexts: starBGPPeerSessionDown.setDescription('The BGP peer session to the specified IP address is no longer operational. Probable Cause: The BGP peer is not-operational; the network between the ST16 and the BGP peer is experiencing an outage; LC failure(s) on the ST16. Action to be Taken: Verify the BGP peer is operational; verify network connectivity to the BGP peer. Clear Condition Alarm: A starBGPPeerSessionUp is generated when connectivity is reestablished')
starSRPActive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 120)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPActive.setStatus('current')
if mibBuilder.loadTexts: starSRPActive.setDescription('The SRP Chassis Status is now Active. Action to be Taken: No action is required.')
starSRPStandby = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 121)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPStandby.setStatus('current')
if mibBuilder.loadTexts: starSRPStandby.setDescription('The SRP Chassis Status is now Standby. Action to be Taken: No action is required.')
starBGPPeerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 122)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"), ("STARENT-MIB", "starUDPPortNum"), ("STARENT-MIB", "starBGPPeerIpAddress"))
if mibBuilder.loadTexts: starBGPPeerReachable.setStatus('obsolete')
if mibBuilder.loadTexts: starBGPPeerReachable.setDescription("The monitored BGP peer is now Reachable. This notification can represent the initial detection of the peer's state, or the reconnection to a peer after a starBGPPeerDown notification. This attribute is obsolete. Action to be Taken: No action is required.")
starBGPPeerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 123)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"), ("STARENT-MIB", "starUDPPortNum"), ("STARENT-MIB", "starBGPPeerIpAddress"))
if mibBuilder.loadTexts: starBGPPeerUnreachable.setStatus('obsolete')
if mibBuilder.loadTexts: starBGPPeerUnreachable.setDescription('The monitored BGP peer is now Unreachable. Action to be Taken: Verify that the BGP Peer is running and is properly configured. Verify the network link to the BGP Peer. This attribute is obsolete. Clear Condition: This condition is cleared when communication with the BGP peer is reestablished. Condition Clear Alarm: This condition is cleared by a starBGPPeerReachable notification.')
starSRPAAAReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 124)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"), ("STARENT-MIB", "starUDPPortNum"))
if mibBuilder.loadTexts: starSRPAAAReachable.setStatus('current')
if mibBuilder.loadTexts: starSRPAAAReachable.setDescription('The SRP AAA monitor has found a reachable AAA server. This notification can represent the initial detection of an AAA server, or the restoration of reachability after a starSRPAAAUnreachable notification. This notification is only generated if there was previously no reachable AAA server. Action to be Taken: No action required.')
starSRPAAAUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 125)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"), ("STARENT-MIB", "starUDPPortNum"))
if mibBuilder.loadTexts: starSRPAAAUnreachable.setStatus('current')
if mibBuilder.loadTexts: starSRPAAAUnreachable.setDescription('The SRP AAA monitor has determined that all AAA servers are unreachable. Action to be Taken: Verify the state of the configured AAA Server(s) and restart them if required. Verify the network link to the AAA Server(s). Configure additional AAA Servers if required. Clear Condition: This condition is cleared when communication with any single AAA service is (re)established. Condition Clear Alarm: This condition is cleared by a starSRPAAAReachable notification.')
starSRPSwitchoverInitiated = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 126)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPSwitchoverInitiated.setStatus('current')
if mibBuilder.loadTexts: starSRPSwitchoverInitiated.setDescription('An SRP (ICSR) Switchover operation has been initiated by an operator. Action to be Taken: Verify that the switchover was a planned operator action.')
starSRPCheckpointFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 127)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPCheckpointFailure.setStatus('current')
if mibBuilder.loadTexts: starSRPCheckpointFailure.setDescription('The system has detected that a checkpoint messaged failed to be sent successfully to the standby HA. If the active HA were to fail, this information will be lost. Action to be Taken: Verify the communication path to the Standby HA.')
starSRPConfigOutOfSync = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 128)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPConfigOutOfSync.setStatus('current')
if mibBuilder.loadTexts: starSRPConfigOutOfSync.setDescription('The system has detected that the standby HA has a different configuration than the active HA. In the event of a failure of the active HA, it is possible that the standby HA is not configured properly to be able to take over. Action to be Taken: Update the configuration of the standby HA to match the active HA. Clear Condition: This condition is cleared when the active HA confirms that the standby HA has an identify configuration. Condition Clear Alarm: This condition is cleared by a starSRPConfigInSync notification.')
starSRPConfigInSync = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 129)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPConfigInSync.setStatus('current')
if mibBuilder.loadTexts: starSRPConfigInSync.setDescription('The system has detected that the standby HA has a matching configuration as the active HA. This notification is generated only after a starSRPConfigOutOfSync notification. Action to be Taken: No action required.')
starGESwitchFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 130)).setObjects(("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starGESwitchFailure.setStatus('current')
if mibBuilder.loadTexts: starGESwitchFailure.setDescription('A failure of an internal Gigabit Ethernet switch has been detected. If it is possible to determine the slot containing the failed switch it is identified in starSlotNum, otherwise starSlotNum is 0. Action to be Taken: If this condition persists, the identified card needs to be replaced. This is not applicable to QVPC-SI and QVPC-DI.')
starSIPRouteServerAvailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 131)).setObjects(("STARENT-MIB", "starSIPRouteServerVpnName"), ("STARENT-MIB", "starSIPRouteServerVmgName"), ("STARENT-MIB", "starSIPRouteServerAsName"), ("STARENT-MIB", "starSIPRouteServerIpAddr"))
if mibBuilder.loadTexts: starSIPRouteServerAvailable.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerAvailable.setDescription('SIP route server is available Action to be taken: None')
starSIPRouteServerUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 132)).setObjects(("STARENT-MIB", "starSIPRouteServerVpnName"), ("STARENT-MIB", "starSIPRouteServerVmgName"), ("STARENT-MIB", "starSIPRouteServerAsName"), ("STARENT-MIB", "starSIPRouteServerIpAddr"))
if mibBuilder.loadTexts: starSIPRouteServerUnavailable.setStatus('current')
if mibBuilder.loadTexts: starSIPRouteServerUnavailable.setDescription('SIP session has failed since the server is unavailable Action to be taken: Operator has to check the reasons for the unavailability of the server and act accordingly')
starFMDMaxCallRateReached = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 133)).setObjects(("STARENT-MIB", "starVIMServiceVpnName"), ("STARENT-MIB", "starVIMServiceInstanceId"), ("STARENT-MIB", "starVIMServiceFMDMaxCallRate"), ("STARENT-MIB", "starVIMServiceFMDContinuousLoadCount"))
if mibBuilder.loadTexts: starFMDMaxCallRateReached.setStatus('current')
if mibBuilder.loadTexts: starFMDMaxCallRateReached.setDescription('FMD max call rate reached Action to be taken: Increase the value of fmd-max-call-rate or set no fmd-max-call-rate Condition Clear Alarm: This condition is cleared by a starFMDCallRateUnderControl notification')
starFMDCallRateUnderControl = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 134)).setObjects(("STARENT-MIB", "starVIMServiceVpnName"), ("STARENT-MIB", "starVIMServiceInstanceId"), ("STARENT-MIB", "starVIMServiceFMDMaxCallRate"), ("STARENT-MIB", "starVIMServiceFMDContinuousLoadCount"))
if mibBuilder.loadTexts: starFMDCallRateUnderControl.setStatus('current')
if mibBuilder.loadTexts: starFMDCallRateUnderControl.setDescription('FMD call rate under control Action to be taken: None')
starStorageServerCPUBusy = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 135)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerCPUBusy.setStatus('current')
if mibBuilder.loadTexts: starStorageServerCPUBusy.setDescription("GTPP Storage Server is experiencing high CPU usage. The usage has exceeded an operator-configure value. Note that this is an external server, not part of the ST16. Probable Cause: The amount of information being sent to the Storage Server is approaching the server's capacity; the Storage Server has other tasks running on it which are taking CPU time; a problem with the Storage Server is causing the CPU to be abnormally busy; Condition Clear Alarm: This condition is cleared by a starStorageServerCPUNormal notification")
starStorageServerCPUNormal = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 136)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerCPUNormal.setStatus('current')
if mibBuilder.loadTexts: starStorageServerCPUNormal.setDescription('GTPP Storage Server CPU usage has returned to a normal range. Note that this is an external server, not part of the ST16.')
starStorageServerDiskSpaceLow = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 137)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshGB"), ("STARENT-MIB", "starThreshMeasuredGB"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerDiskSpaceLow.setStatus('current')
if mibBuilder.loadTexts: starStorageServerDiskSpaceLow.setDescription("GTPP Storage Server is experiencing low available disk space. The available disk space has gone below an operator-configure value. Note that this is an external server, not part of the ST16. Probable Cause: The amount of information being sent to the Storage Server is approaching the server's capacity; the Storage Server has other information consuming disk space; a problem with the Storage Server is causing less disk space to be available then normal. Condition Clear Alarm: If the GTPP Storage Server is configured to run in an 'alarm' model, this condition is cleared by a starStorageServerDiskSpaceOK notification. Otherwise the starStorageServerDiskSpaceLow notification will be generated periodically until the condition is cleared.")
starStorageServerDiskSpaceOK = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 138)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerDiskSpaceOK.setStatus('current')
if mibBuilder.loadTexts: starStorageServerDiskSpaceOK.setDescription('GTPP Storage Server available disk space to a normal range. Note that this is an external server, not part of the ST16.')
starCardSPOFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 139)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardSPOFAlarm.setStatus('current')
if mibBuilder.loadTexts: starCardSPOFAlarm.setDescription('The identified card is a Single Point of Failure (SPOF). There is no redundant card available to take over in the event of a failure. Probable Cause: This can be caused by an improper configuration, or by the failure or removal of other cards in the system. Action to be Taken: Install or configure additional redundant cards. Clear Condition: A starCardSPOFClear notification will be generated is a redundant card becomes available. Notifications like starCardDown could also obsolete this notification')
starCardSPOFClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 140)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starCardSPOFClear.setStatus('current')
if mibBuilder.loadTexts: starCardSPOFClear.setDescription('The identified card is no longer a Single Point of Failure (SPOF)')
starStorageServerOldGcdrPending = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 141)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerOldGcdrPending.setStatus('current')
if mibBuilder.loadTexts: starStorageServerOldGcdrPending.setDescription("GTPP Storage Server reports that GCDR files have been unprocessed for too long. Note that this is an external server, not part of the ST16. Probable Cause: No action has been taken long for the GCDR files generated by Storage Server. Condition Clear Alarm: If the GTPP Storage Server is configured to run in an 'alarm' model, this condition is cleared by a starStorageServerOldGcdrCleared notification. Otherwise the starStorageServerOldGCDRPending notification will be generated periodically")
starStorageServerOldGcdrCleared = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 142)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerOldGcdrCleared.setStatus('current')
if mibBuilder.loadTexts: starStorageServerOldGcdrCleared.setDescription('GCDR files on the Storage Server have been processed on the Storage Server. The threshold condition is now clear. Note that this is an external server, not part of the ST16.')
starLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 143)).setObjects(("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"), ("STARENT-MIB", "starCLIType"))
if mibBuilder.loadTexts: starLoginFailure.setStatus('current')
if mibBuilder.loadTexts: starLoginFailure.setDescription('A login failure occurred attempting to establish a CLI or FTP session.')
starIPSGServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 144)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starIPSGServiceStart.setStatus('current')
if mibBuilder.loadTexts: starIPSGServiceStart.setDescription('A IP Services Gateway (IPSG) Service has started Action to be Taken: No action required')
starIPSGServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 145)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starIPSGServiceStop.setStatus('current')
if mibBuilder.loadTexts: starIPSGServiceStop.setDescription('A IP Services Gateway (IPSG) Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the IPSG service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the IPSG service is operational. Condition Clear Alarm: A starIPSGServiceStart notification will be generated when the service is restarted')
starHAUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 146)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starServiceFAIpAddr"), ("STARENT-MIB", "starServiceHAIpAddr"))
if mibBuilder.loadTexts: starHAUnreachable.setStatus('current')
if mibBuilder.loadTexts: starHAUnreachable.setDescription('A monitored HA is unreachable from the identified FA Service. Condition Clear Alarm: A starHAReachable notification will be generated when the HA becomes reachable')
starHAReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 147)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starServiceFAIpAddr"), ("STARENT-MIB", "starServiceHAIpAddr"))
if mibBuilder.loadTexts: starHAReachable.setStatus('current')
if mibBuilder.loadTexts: starHAReachable.setDescription("A monitored HA is now reachable. A starHAReachable notification is only generated for monitored HA's which previously were marked unreachable.")
starASNGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 148)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starASNGWServiceStart.setStatus('obsolete')
if mibBuilder.loadTexts: starASNGWServiceStart.setDescription('A WiMAX ASN Gateway (ASNGW) Service has started Action to be Taken: No action required')
starASNGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 149)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starASNGWServiceStop.setStatus('obsolete')
if mibBuilder.loadTexts: starASNGWServiceStop.setDescription('A WiMAX ASN Gateway (ASNGW) Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the ASNGW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the ASNGW service is operational. Condition Clear Alarm: A starASNGWServiceStart notification will be generated when the service is restarted')
starTaskFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 150)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"))
if mibBuilder.loadTexts: starTaskFailed.setStatus('current')
if mibBuilder.loadTexts: starTaskFailed.setDescription('A non-critical task has failed and the appropriate recovery steps begun. The failing task will be restarted. Probable Cause: Software error Actions to be Taken: Examine the admin logs for an indication of the source of the failure. Clear Condition: Verify that the task has been restarted. Condition Clear Alarm: A starTaskRestart notification will be generated when task has successfully restarted.')
starTaskRestart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 151)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"))
if mibBuilder.loadTexts: starTaskRestart.setStatus('current')
if mibBuilder.loadTexts: starTaskRestart.setDescription('A non-critical task has restarted after an earlier failure. Actions to be Taken: None')
starCSCFServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 152)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starCSCFServiceStart.setStatus('current')
if mibBuilder.loadTexts: starCSCFServiceStart.setDescription('An CSCF Service has started Action to be Taken: No action required')
starCSCFServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 153)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starCSCFServiceStop.setStatus('current')
if mibBuilder.loadTexts: starCSCFServiceStop.setDescription('An CSCF Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the CSCF service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the CSCF service is operational. Condition Clear Alarm: A starCSCFServiceStart notification will be generated when the service is restarted')
starDhcpServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 154)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starDhcpServiceStarted.setStatus('current')
if mibBuilder.loadTexts: starDhcpServiceStarted.setDescription('A DHCP Service has started Action to be Taken: No action required')
starDhcpServiceStopped = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 155)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starDhcpServiceStopped.setStatus('current')
if mibBuilder.loadTexts: starDhcpServiceStopped.setDescription('A DHCP Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the DHCP service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the DHCP service is operational. Condition Clear Alarm: A starDHCPServiceStart notification will be generated when the service is restarted')
starContFiltDBError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 156)).setObjects(("STARENT-MIB", "starContFiltCFFilename"), ("STARENT-MIB", "starContFiltCFErrorCode"))
if mibBuilder.loadTexts: starContFiltDBError.setStatus('current')
if mibBuilder.loadTexts: starContFiltDBError.setDescription('The Content Filtering OPTCMDB file error displayed with an error code. Action to be Taken: If no OPTCMDB file is there in the specified directory then Place a OPTCMDB-FULL file in the directory and give an upgrade command or place an OPTCMDB file and load the SRDBs by killing them all. Condition Clear Alarm: This condition is cleared by a starContFiltDBErrorClear notification')
starContFiltDBErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 157)).setObjects(("STARENT-MIB", "starContFiltCFFilename"), ("STARENT-MIB", "starContFiltCFErrorCode"))
if mibBuilder.loadTexts: starContFiltDBErrorClear.setStatus('current')
if mibBuilder.loadTexts: starContFiltDBErrorClear.setDescription('The Content Filtering OPTCMDB file error removed. Action to be Taken: No action required')
starBLDBError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 158)).setObjects(("STARENT-MIB", "starBLFilename"), ("STARENT-MIB", "starBLErrorCode"))
if mibBuilder.loadTexts: starBLDBError.setStatus('current')
if mibBuilder.loadTexts: starBLDBError.setDescription('The Blacklisting OPTBLDB file error displayed with an error code. Action to be Taken: If no or invalid OPTBLDB file is there in the specified directory then Place a OPTBLDB_FULL file in the directory and give an upgrade command. Condition Clear Alarm: This condition is cleared by a starBLDBErrorClear notification')
starBLDBErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 159)).setObjects(("STARENT-MIB", "starBLFilename"), ("STARENT-MIB", "starBLErrorCode"))
if mibBuilder.loadTexts: starBLDBErrorClear.setStatus('current')
if mibBuilder.loadTexts: starBLDBErrorClear.setDescription('The Blacklisting OPTBLDB file error removed. Action to be Taken: No action required')
starContFiltDBUpgradeError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 160)).setObjects(("STARENT-MIB", "starContFiltCFUpgradeFilename"), ("STARENT-MIB", "starContFiltCFUpgradeErrorCode"))
if mibBuilder.loadTexts: starContFiltDBUpgradeError.setStatus('current')
if mibBuilder.loadTexts: starContFiltDBUpgradeError.setDescription('The Content Filtering OPTCMDB file error displayed with an error code. Action to be Taken: Place a valid OPTCMDB-FULL file or OPTCMDB_INCR file in the directory and give an upgrade command. Condition Clear Alarm: This condition is cleared by a starContFiltDBUpgradeErrorClear notification')
starContFiltDBUpgradeErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 161)).setObjects(("STARENT-MIB", "starContFiltCFUpgradeFilename"), ("STARENT-MIB", "starContFiltCFUpgradeErrorCode"))
if mibBuilder.loadTexts: starContFiltDBUpgradeErrorClear.setStatus('current')
if mibBuilder.loadTexts: starContFiltDBUpgradeErrorClear.setDescription('The Content Filtering OPTCMDB file error removed. Action to be Taken: No action required')
starBLDBUpgradeError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 162)).setObjects(("STARENT-MIB", "starBLUpgradeFilename"), ("STARENT-MIB", "starBLUpgradeErrorCode"))
if mibBuilder.loadTexts: starBLDBUpgradeError.setStatus('current')
if mibBuilder.loadTexts: starBLDBUpgradeError.setDescription('The Blacklisting OPTBLDB file error displayed with an error code. Action to be Taken: Place a valid OPTBLDB-FULL file file in the directory and give an upgrade command. Condition Clear Alarm: This condition is cleared by a starBLDBUpgradeErrorClear notification')
starBLDBUpgradeErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 163)).setObjects(("STARENT-MIB", "starBLUpgradeFilename"), ("STARENT-MIB", "starBLUpgradeErrorCode"))
if mibBuilder.loadTexts: starBLDBUpgradeErrorClear.setStatus('current')
if mibBuilder.loadTexts: starBLDBUpgradeErrorClear.setDescription('The Blacklisting OPTBLDB file error removed. Action to be Taken: No action required')
starIPSECDynTunUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 164)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECPolicyName"), ("STARENT-MIB", "starIPSECDynPolicyType"), ("STARENT-MIB", "starIPSECDynPolicyPayloadType"), ("STARENT-MIB", "starIPSECLocalGateway"), ("STARENT-MIB", "starIPSECRemoteGateway"))
if mibBuilder.loadTexts: starIPSECDynTunUp.setStatus('current')
if mibBuilder.loadTexts: starIPSECDynTunUp.setDescription('IPSEC Dynamic Tunnel Up. Action to be Taken: No action required')
starIPSECDynTunDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 165)).setObjects(("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECPolicyName"), ("STARENT-MIB", "starIPSECDynPolicyType"), ("STARENT-MIB", "starIPSECDynPolicyPayloadType"), ("STARENT-MIB", "starIPSECLocalGateway"), ("STARENT-MIB", "starIPSECRemoteGateway"))
if mibBuilder.loadTexts: starIPSECDynTunDown.setStatus('current')
if mibBuilder.loadTexts: starIPSECDynTunDown.setDescription('IPSEC Dynamic Tunnel Down. Condition Clear Alarm: a starIPSECDynTunUp notification will be sent when the tunnel is operational again. Note however that a tunnel may go down due to administrative action, or the tunnel may not longer be required, thus a starIPSECDynTunUp may not follow.')
starHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 166))
if mibBuilder.loadTexts: starHeartbeat.setStatus('current')
if mibBuilder.loadTexts: starHeartbeat.setDescription('Periodic SNMP heartbeat. A starHeartbeat notification can be generated periodically if the system is configured to do so. These notifications serve only to validate that there is communication to external entities which sink SNMP notifications')
starOverloadSystem = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 167)).setObjects(("STARENT-MIB", "starCongestionResourceType"))
if mibBuilder.loadTexts: starOverloadSystem.setStatus('current')
if mibBuilder.loadTexts: starOverloadSystem.setDescription("A system-wide congestion overload condition has occurred. Probable Cause: This is the result of an operator-configured congestion overload value reached. This notification indicated a chassis-wide overload condition, typically overall system usage reaching some fraction of capacity. Once this limit is reached, the configured behavior is taken. This will cause certain older and/or dormant calls to be dropped in favor of newer calls. Note that this is similar to, but different than, the starCongestion notification. Typically the 'overload' condition will be configured to trigger at an earlier point. Actions to be Taken: Verify that the congestion overload thresholds are correct; if the congested state is seem repeatedly, or for sustained periods of time, additional system capacity may need to be brought online. This system is cleared when the use of the specific resource falls below the configured limit. Condition Clear Alarm: A starOverloadSystemClear notification is sent when the system overload condition is clear")
starOverloadSystemClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 168))
if mibBuilder.loadTexts: starOverloadSystemClear.setStatus('current')
if mibBuilder.loadTexts: starOverloadSystemClear.setDescription('A system-wide congestion overload condition has cleared')
starOverloadService = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 169)).setObjects(("STARENT-MIB", "starCongestionResourceType"), ("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starOverloadService.setStatus('current')
if mibBuilder.loadTexts: starOverloadService.setDescription("A service-specific congestion overload condition has occurred. Probable Cause: This is the result of an operator-configured congestion overload value reached. This notification indicated a service-specific overload condition, typically the use of the service reaching some fraction of capacity. Once this limit is reached, the configured behavior is taken. This will cause certain older and/or dormant calls to be dropped in favor of newer calls. Note that this is similar to, but different than, the starCongestion notification. Typically the 'overload' condition will be configured to trigger at an earlier point. Since this is a service-specific notification, it is possible to receive multipe notifications for different services. Each Actions to be Taken: Verify that the congestion overload thresholds are correct; if the congested state is seem repeatedly, or for sustained periods of time, additional system capacity may need to be brought online. This system is cleared when the use of the specific resource falls below the configured limit. Condition Clear Alarm: A starOverloadServiceClear notification is sent when the service-specific overload condition is clear.")
starOverloadServiceClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 170)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starOverloadServiceClear.setStatus('current')
if mibBuilder.loadTexts: starOverloadServiceClear.setDescription('A service-specific congestion overload condition has cleared')
starStorageServerClusterStateChange = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 171)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterRgName"), ("STARENT-MIB", "starGSSClusterRsName"), ("STARENT-MIB", "starGSSClusterNodeState"), ("STARENT-MIB", "starGSSClusterPrevOnlineNode"))
if mibBuilder.loadTexts: starStorageServerClusterStateChange.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusterStateChange.setDescription('GTPP Storage Server cluster state has been changed. GTPP Storage Server may have gone offline from all the nodes or switchover has been occured. Note that this is an external server, not part of the ST16. Probable Cause: GTPP Storage Server cluster hardware/software component failure or maintenance of GTPP Storage Server is in progress')
starStorageServerClusSwitchOver = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 172)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterRgName"), ("STARENT-MIB", "starGSSClusterFromNode"), ("STARENT-MIB", "starGSSClusterToNode"))
if mibBuilder.loadTexts: starStorageServerClusSwitchOver.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusSwitchOver.setDescription('GTPP Storage Server switchover from current online node to next available node in cluster. Note that this is an external server, not part of the ST16. Probable Cause: GTPP Storage Server cluster Hardware/Software component failure or maintenance of GTPP Storage Server is in progress')
starStorageServerClusPathFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 173)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSDiskPath"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerClusPathFail.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusPathFail.setDescription('GTPP Storage Server cluster disk path failure has been occured. Note that this is an external server, not part of the ST16. Probable Cause: Fibre cable may have been damaged, fibre cable may have been pulled out or disk fault may have been occured. Condition Clear Alarm: This condition is cleared by a starStorageServerClusPathOK notification')
starStorageServerClusPathOK = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 174)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSDiskPath"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerClusPathOK.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusPathOK.setDescription('GTPP Storage Server cluster disk path failure has been restored to ok state. Note that this is an external server, not part of the ST16')
starStorageServerClusInterCFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 175)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSTransportPath"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerClusInterCFail.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusInterCFail.setDescription('GTPP Storage Server cluster transport path (Interconnect) failure has been occured. Note that this is an external server, not part of the ST16. Probable Cause: Interconnect interface may have been failed, Interconnect interface cable may have been pulled out. Condition Clear Alarm: This condition is cleared by a starStorageServerClusInterCOK notification')
starStorageServerClusInterCOK = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 176)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSTransportPath"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerClusInterCOK.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusInterCOK.setDescription('GTPP Storage Server cluster transport path (Interconnect) failure has been restored to an operational state. Note that this is an external server, not part of the ST16')
starStorageServerClusIntfFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 177)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSIPMPGroupName"), ("STARENT-MIB", "starGSSInterfaceName"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerClusIntfFail.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusIntfFail.setDescription('GTPP Storage Server cluster GE Interface failure has been occured. Note that this is an external server, not part of the ST16. Probable Cause: Interface may have been failed, interface cable may have been pulled out. Condition Clear Alarm: This condition is cleared by a starStorageServerClusIntfOK notification')
starStorageServerClusIntfOK = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 178)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSIPMPGroupName"), ("STARENT-MIB", "starGSSInterfaceName"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerClusIntfOK.setStatus('current')
if mibBuilder.loadTexts: starStorageServerClusIntfOK.setDescription('GTPP Storage Server cluster GE Interface failure failure has been restored to ok state. Note that this is an external server, not part of the ST16')
starStorageServerMemLow = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 179)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshMB"), ("STARENT-MIB", "starThreshMeasuredMB"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerMemLow.setStatus('current')
if mibBuilder.loadTexts: starStorageServerMemLow.setDescription("GTPP Storage Server is experiencing a low memory condition. Note that this is an external server, not part of the ST16. Probable Cause: The amount of free memory used by Storage Server is approaching the server's capacity; Condition Clear Alarm: This condition is cleared by a starStorageServerMemNormal notification")
starStorageServerMemNormal = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 180)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starThreshMB"), ("STARENT-MIB", "starThreshMeasuredMB"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerMemNormal.setStatus('current')
if mibBuilder.loadTexts: starStorageServerMemNormal.setDescription('GTPP Storage Server Memory usage has returned to a normal range. Note that this is an external server, not part of the ST16.')
starPDIFServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 181)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPDIFServiceStart.setStatus('current')
if mibBuilder.loadTexts: starPDIFServiceStart.setDescription('A PDIF Service has started Action to be Taken: No action required')
starPDIFServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 182)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPDIFServiceStop.setStatus('current')
if mibBuilder.loadTexts: starPDIFServiceStop.setDescription('A PDIF Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs) to support the running configuration. Action to be Taken: If the PDIF service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PDIF service is operational. Condition Clear Alarm: A starPDIFServiceStart notification will be generated when the service is restarted')
starSessMgrRecoveryComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 183)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starFecthedFromAAAMgr"), ("STARENT-MIB", "starPriorToAudit"), ("STARENT-MIB", "starPassedAudits"), ("STARENT-MIB", "starCallsRecovered"), ("STARENT-MIB", "starAllCallLines"), ("STARENT-MIB", "starElapsedMs"))
if mibBuilder.loadTexts: starSessMgrRecoveryComplete.setStatus('current')
if mibBuilder.loadTexts: starSessMgrRecoveryComplete.setDescription('A Sess Mgr Recovery Complete Probable Cause: This is typically caused by session manager task fails and successfully completed recovery. Action to be Taken: None')
starDiameterPeerDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 184)).setObjects(("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterPeerAddr"), ("STARENT-MIB", "starDiameterEndpointName"))
if mibBuilder.loadTexts: starDiameterPeerDown.setStatus('current')
if mibBuilder.loadTexts: starDiameterPeerDown.setDescription('A diameter peer is down. Problem Cause: The diameter peer has failed, or a network connectivity prevents reaching the peer. Condition Clear Alarm: A starDiameterPeerUp notification will be generated when the peer is up')
starDiameterPeerUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 185)).setObjects(("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterPeerAddr"), ("STARENT-MIB", "starDiameterEndpointName"))
if mibBuilder.loadTexts: starDiameterPeerUp.setStatus('current')
if mibBuilder.loadTexts: starDiameterPeerUp.setDescription('A diameter peer is up. This notification is only generated for peers which have previously been declared down.')
starDiameterServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 186)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starDiameterPeerAddr"), ("STARENT-MIB", "starDiameterEndpointName"))
if mibBuilder.loadTexts: starDiameterServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starDiameterServerUnreachable.setDescription('A diameter server is down. Problem Cause: The diameter server has failed, or a network connectivity prevents reaching the server. Condition Clear Alarm: A starDiameterServerReachable notification will be generated when the server is reachable')
starDiameterServerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 187)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starDiameterPeerAddr"), ("STARENT-MIB", "starDiameterEndpointName"))
if mibBuilder.loadTexts: starDiameterServerReachable.setStatus('current')
if mibBuilder.loadTexts: starDiameterServerReachable.setDescription('A diameter server is up. This notification is only generated for servers which have previously been declared unreachable.')
starCDRFileRemoved = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 188)).setObjects(("STARENT-MIB", "starCDRFilename"))
if mibBuilder.loadTexts: starCDRFileRemoved.setStatus('current')
if mibBuilder.loadTexts: starCDRFileRemoved.setDescription('A Charging Data Record (CDR) file has been deleted from the system due to a lack of available storage space. When required, the system deletes old files to make space for new files. This notification is only generated when specifically enabled on the system. Probable Cause: CDR files are not being moved off the system, or these files are not being deleted after they have been transferred.')
starCSCFPeerServerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 189)).setObjects(("STARENT-MIB", "starCSCFPeerServerVpnName"), ("STARENT-MIB", "starCSCFPeerServerSvcName"), ("STARENT-MIB", "starCSCFPeerServerListName"))
if mibBuilder.loadTexts: starCSCFPeerServerReachable.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerReachable.setDescription('A peer server is reachable')
starCSCFPeerServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 190)).setObjects(("STARENT-MIB", "starCSCFPeerServerVpnName"), ("STARENT-MIB", "starCSCFPeerServerSvcName"), ("STARENT-MIB", "starCSCFPeerServerListName"))
if mibBuilder.loadTexts: starCSCFPeerServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerUnreachable.setDescription('A peer server is unreachable')
starDHCPV6ServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 191)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starDHCPV6ServiceStart.setStatus('current')
if mibBuilder.loadTexts: starDHCPV6ServiceStart.setDescription('A SGSN Service has started Action to be Taken: No action required')
starCLIConfigMode = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 192)).setObjects(("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLIContext"))
if mibBuilder.loadTexts: starCLIConfigMode.setStatus('current')
if mibBuilder.loadTexts: starCLIConfigMode.setDescription("An interactive CLI session has enter 'configuration' mode for the specified context. This CLI user can thus potentially start issuing configuration commands which will impact the overall system configuration. Note that this notification is not enabled by default; it is only generated if the system is specifically configured to enable it.")
starDHCPV6ServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 193)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starDHCPV6ServiceStop.setStatus('current')
if mibBuilder.loadTexts: starDHCPV6ServiceStop.setDescription('A DHCPV6 Service has stopped. Clear Condition: Verify that the DHCPV6 service is operational. Condition Clear Alarm: A starDHCPV6ServiceStart notification will be generated when the service is restarted')
starSGSNServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 194)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGSNServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSGSNServiceStart.setDescription('A SGSN Service has started Action to be Taken: No action required')
starSGSNServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 195)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGSNServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSGSNServiceStop.setDescription('A SGSN Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the SGSN service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the SGSN service is operational. Condition Clear Alarm: A starSGSNServiceStart notification will be generated when the service is restarted')
starM3UAPCUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 196)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7CauseString"))
if mibBuilder.loadTexts: starM3UAPCUnavailable.setStatus('current')
if mibBuilder.loadTexts: starM3UAPCUnavailable.setDescription('M3UA Route to the Point code becomes unavailable. Possibe reason: 1. Received destination unavailable (DUNA) message or 2. SCTP association is down or 3. Remote peer server is down Condition Clear Alarm: A starM3UAPCAvailable notification will be generated when the reemore peer identified by the point code becomes reachable')
starM3UAPCAvailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 197)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7CauseString"))
if mibBuilder.loadTexts: starM3UAPCAvailable.setStatus('current')
if mibBuilder.loadTexts: starM3UAPCAvailable.setDescription('M3UA Route to the Point code becomes available. Possible reason: 1. Received destination available (DAVA) message. 2. SCTP association is up 3. Remote peer server is up starM3UAPCAvailable is generated only when a previous starM3UAPCUnavailable is generated. ')
starThreshCPUUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 200)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshCPUUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshCPUUtilization.setDescription("The overall CPU utilization for the identified processor has exceeded for configured threshold value for the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCPUUtilization notification will be generated when the measured value falls below the threshold.")
starThreshClearCPUUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 201)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearCPUUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPUUtilization.setDescription('The threshold condition is now clear.')
starThreshCPUMemory = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 202)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCPUMemory.setStatus('current')
if mibBuilder.loadTexts: starThreshCPUMemory.setDescription("The amount of available memory for the identified processor has fallen below the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCPUMemory notification will be generated when the measured value falls below the threshold.")
starThreshClearCPUMemory = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 203)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCPUMemory.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPUMemory.setDescription('The threshold condition is now clear.')
starThreshLicense = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 204)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starServiceType"))
if mibBuilder.loadTexts: starThreshLicense.setStatus('current')
if mibBuilder.loadTexts: starThreshLicense.setDescription("The percentage available, licensed subscribers has fallen below the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearLicense notification will be generated when the measured value falls below the threshold.")
starThreshClearLicense = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 205)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starServiceType"))
if mibBuilder.loadTexts: starThreshClearLicense.setStatus('current')
if mibBuilder.loadTexts: starThreshClearLicense.setDescription('The threshold condition is now clear.')
starThreshSubscriberTotal = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 206)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshSubscriberTotal.setStatus('current')
if mibBuilder.loadTexts: starThreshSubscriberTotal.setDescription("The total number of subscribers is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearSubscriberTotal notification will be generated when the measured value falls below the threshold.")
starThreshClearSubscriberTotal = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 207)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearSubscriberTotal.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSubscriberTotal.setDescription('The threshold condition is now clear.')
starThreshSubscriberActive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 208)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshSubscriberActive.setStatus('current')
if mibBuilder.loadTexts: starThreshSubscriberActive.setDescription("The total number of active subscribers is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearSubscriberActive notification will be generated when the measured value falls below the threshold.")
starThreshClearSubscriberActive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 209)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearSubscriberActive.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSubscriberActive.setDescription('The threshold condition is now clear.')
starThreshPortRxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 210)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starThreshPortRxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshPortRxUtil.setDescription("The Rx utilization of the port has exceeded the configured threshold value during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPortRxUtil notification will be generated when the measured value falls below the threshold.")
starThreshClearPortRxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 211)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starThreshClearPortRxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPortRxUtil.setDescription('The threshold condition is now clear.')
starThreshPortTxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 212)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starThreshPortTxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshPortTxUtil.setDescription("The Tx utilization of the port has exceeded the configured threshold value during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPortTxUtil notification will be generated when the measured value falls below the threshold.")
starThreshClearPortTxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 213)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starThreshClearPortTxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPortTxUtil.setDescription('The threshold condition is now clear.')
starThreshPortHighActivity = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 214)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starThreshPortHighActivity.setStatus('current')
if mibBuilder.loadTexts: starThreshPortHighActivity.setDescription("High activity on the port has exceeded the configured threshold value during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPortHighActivity notification will be generated when the measured value falls below the threshold.")
starThreshClearPortHighActivity = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 215)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starThreshClearPortHighActivity.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPortHighActivity.setDescription('The threshold condition is now clear.')
starThreshAAAAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 216)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshAAAAuthFail.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAuthFail.setDescription("The number of AAA authentication failures has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAAuthFail notification will be generated when the measured value falls below the threshold.")
starThreshClearAAAAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 217)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearAAAAuthFail.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAuthFail.setDescription('The threshold condition is now clear.')
starThreshAAAAuthFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 218)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshAAAAuthFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAuthFailRate.setDescription("The percentage of AAA authentication requests which failed has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAAuthFailRate notification will be generated when the measured value falls below the threshold.")
starThreshClearAAAAuthFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 219)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearAAAAuthFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAuthFailRate.setDescription('The threshold condition is now clear.')
starThreshAAAAcctFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 220)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshAAAAcctFail.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAcctFail.setDescription("The number of AAA accounting failures has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAAcctFail notification will be generated when the measured value falls below the threshold.")
starThreshClearAAAAcctFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 221)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearAAAAcctFail.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAcctFail.setDescription('The threshold condition is now clear.')
starThreshAAAAcctFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 222)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshAAAAcctFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAcctFailRate.setDescription("The percentage of AAA accounting requests which failed has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAAcctFailRate notification will be generated when the measured value falls below the threshold.")
starThreshClearAAAAcctFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 223)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearAAAAcctFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAcctFailRate.setDescription('The threshold condition is now clear.')
starThreshAAARetryRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 224)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshAAARetryRate.setStatus('current')
if mibBuilder.loadTexts: starThreshAAARetryRate.setDescription("The percentage of AAA requests which has to be retried has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAARetryRate notification will be generated when the measured value falls below the threshold.")
starThreshClearAAARetryRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 225)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearAAARetryRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAARetryRate.setDescription('The threshold condition is now clear.')
starThreshCallSetup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 226)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCallSetup.setStatus('current')
if mibBuilder.loadTexts: starThreshCallSetup.setDescription("The number of call setup operations has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCallSetup notification will be generated when the measured value falls below the threshold.")
starThreshClearCallSetup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 227)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCallSetup.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCallSetup.setDescription('The threshold condition is now clear.')
starThreshCallSetupFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 228)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCallSetupFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshCallSetupFailure.setDescription("The number of call setup operations which failed has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCallSetupFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearCallSetupFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 229)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCallSetupFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCallSetupFailure.setDescription('The threshold condition is now clear.')
starThreshCallRejectNoResource = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 230)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCallRejectNoResource.setStatus('current')
if mibBuilder.loadTexts: starThreshCallRejectNoResource.setDescription("The number of call setup operations which were rejected due to a no resource condition has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCallRejectNoResource notification will be generated when the measured value falls below the threshold.")
starThreshClearCallRejectNoResource = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 231)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCallRejectNoResource.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCallRejectNoResource.setDescription('The threshold condition is now clear.')
starThreshPacketsFilteredDropped = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 232)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPacketsFilteredDropped.setStatus('current')
if mibBuilder.loadTexts: starThreshPacketsFilteredDropped.setDescription("The number of user data packets filtered has exceeded the configured threshold for the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPacketsFilteredDropped notification will be generated when the measured value falls below the threshold.")
starThreshClearPacketsFilteredDropped = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 233)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPacketsFilteredDropped.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPacketsFilteredDropped.setDescription('The threshold condition is now clear.')
starThreshPacketsForwarded = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 234)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPacketsForwarded.setStatus('current')
if mibBuilder.loadTexts: starThreshPacketsForwarded.setDescription("The number of user data packets forwarded has exceeded the configured threshold for the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPacketsForwarded notification will be generated when the measured value falls below the threshold.")
starThreshClearPacketsForwarded = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 235)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPacketsForwarded.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPacketsForwarded.setDescription('The threshold condition is now clear.')
starThreshSessCPUThroughput = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 236)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshMB"), ("STARENT-MIB", "starThreshMeasuredMB"))
if mibBuilder.loadTexts: starThreshSessCPUThroughput.setStatus('current')
if mibBuilder.loadTexts: starThreshSessCPUThroughput.setDescription("The total session throughout for the specified processor has exceeded the configured threshold for the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearSessCPUThroughput notification will be generated when the measured value falls below the threshold.")
starThreshClearSessCPUThroughput = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 237)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshMB"), ("STARENT-MIB", "starThreshMeasuredMB"))
if mibBuilder.loadTexts: starThreshClearSessCPUThroughput.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSessCPUThroughput.setDescription('The threshold condition is now clear.')
starThreshIPPoolAvail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 238)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolGroup"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshIPPoolAvail.setStatus('current')
if mibBuilder.loadTexts: starThreshIPPoolAvail.setDescription("The available IP pool addresses in a context has fallen below the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearIPPoolAvail notification will be generated when the measured value falls below the threshold.")
starThreshClearIPPoolAvail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 239)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolGroup"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearIPPoolAvail.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPPoolAvail.setDescription('The threshold condition is now clear.')
starThreshCPUUtilization10Sec = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 240)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshCPUUtilization10Sec.setStatus('current')
if mibBuilder.loadTexts: starThreshCPUUtilization10Sec.setDescription('The CPU utilization of 10 second measurement for the identified processor has exceeded for configured threshold value for the current monitoring period.')
starThreshClearCPUUtilization10Sec = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 241)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearCPUUtilization10Sec.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPUUtilization10Sec.setDescription('The threshold condition is now clear.')
starThreshCPULoad = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 242)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCPULoad.setStatus('current')
if mibBuilder.loadTexts: starThreshCPULoad.setDescription('The CPU load for the identified processor has exceeded for configured threshold value for the current monitoring period.')
starThreshClearCPULoad = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 243)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCPULoad.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPULoad.setDescription('The threshold condition is now clear.')
starThreshCPUMemUsage = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 244)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshCPUMemUsage.setStatus('current')
if mibBuilder.loadTexts: starThreshCPUMemUsage.setDescription('The CPU mem usage for the identified processor has exceeded for configured threshold value for the current monitoring period.')
starThreshClearCPUMemUsage = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 245)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearCPUMemUsage.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPUMemUsage.setDescription('The threshold condition is now clear.')
starThreshPDSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 246)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPDSNSessions.setDescription('The total number of PDSN sessions is above the configured threshold value.')
starThreshClearPDSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 247)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDSNSessions.setDescription('The threshold condition is now clear.')
starThreshGGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 248)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshGGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshGGSNSessions.setDescription('The total number of GGSN sessions is above the configured threshold value.')
starThreshClearGGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 249)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearGGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearGGSNSessions.setDescription('The threshold condition is now clear.')
starThreshHASessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 250)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHASessions.setStatus('current')
if mibBuilder.loadTexts: starThreshHASessions.setDescription('The total number of HA sessions is above the configured threshold value.')
starThreshClearHASessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 251)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHASessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHASessions.setDescription('The threshold condition is now clear.')
starThreshLNSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 252)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshLNSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshLNSSessions.setDescription('The total number of L2TP LNS sessions is above the configured threshold value.')
starThreshClearLNSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 253)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearLNSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearLNSSessions.setDescription('The threshold condition is now clear.')
starThreshPerServicePDSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 254)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServicePDSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServicePDSNSessions.setDescription('The total number of PDSN sessions in a service is above the configured threshold value.')
starThreshClearPerServicePDSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 255)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServicePDSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServicePDSNSessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceGGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 256)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceGGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceGGSNSessions.setDescription('The total number of GGSN sessions in a service is above the configured threshold value.')
starThreshClearPerServiceGGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 257)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceGGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceGGSNSessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceHASessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 258)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceHASessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceHASessions.setDescription('The total number of HA sessions in a service is above the configured threshold value.')
starThreshClearPerServiceHASessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 259)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceHASessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceHASessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceLNSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 260)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceLNSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceLNSSessions.setDescription('The total number of L2TP LNS sessions in a service is above the configured threshold value.')
starThreshClearPerServiceLNSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 261)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceLNSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceLNSSessions.setDescription('The threshold condition is now clear.')
starThreshIPPoolHold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 262)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshIPPoolHold.setStatus('current')
if mibBuilder.loadTexts: starThreshIPPoolHold.setDescription('The percentage IP pool addresses in HOLD state in a context has gone above the configured threshold')
starThreshClearIPPoolHold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 263)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearIPPoolHold.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPPoolHold.setDescription('The threshold condition is now clear.')
starThreshIPPoolUsed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 264)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshIPPoolUsed.setStatus('current')
if mibBuilder.loadTexts: starThreshIPPoolUsed.setDescription('The percentage IP pool addresses in USED state in a context has gone above the configured threshold')
starThreshClearIPPoolUsed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 265)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearIPPoolUsed.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPPoolUsed.setDescription('The threshold condition is now clear.')
starThreshIPPoolRelease = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 266)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshIPPoolRelease.setStatus('current')
if mibBuilder.loadTexts: starThreshIPPoolRelease.setDescription('The percentage IP pool addresses in RELEASE state in a context has gone above the configured threshold')
starThreshClearIPPoolRelease = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 267)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearIPPoolRelease.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPPoolRelease.setDescription('The threshold condition is now clear.')
starThreshIPPoolFree = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 268)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshIPPoolFree.setStatus('current')
if mibBuilder.loadTexts: starThreshIPPoolFree.setDescription('The percentage IP pool addresses in HOLD state in a context has gone below the configured threshold')
starThreshClearIPPoolFree = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 269)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearIPPoolFree.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPPoolFree.setDescription('The threshold condition is now clear.')
starThreshAAAAcctArchive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 270)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshAAAAcctArchive.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAcctArchive.setDescription('The AAA accounting archive size has gone above the configured threshold')
starThreshClearAAAAcctArchive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 271)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearAAAAcctArchive.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAcctArchive.setDescription('The threshold condition is now clear.')
starThreshPortSpecRxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 272)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshPortSpecRxUtil.setStatus('deprecated')
if mibBuilder.loadTexts: starThreshPortSpecRxUtil.setDescription("The Rx utilization of the port has exceeded the configured threshold value during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPortSpecRxUtil notification will be generated when the measured value falls below the threshold.")
starThreshClearPortSpecRxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 273)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearPortSpecRxUtil.setStatus('deprecated')
if mibBuilder.loadTexts: starThreshClearPortSpecRxUtil.setDescription('The threshold condition is now clear.')
starThreshPortSpecTxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 274)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshPortSpecTxUtil.setStatus('deprecated')
if mibBuilder.loadTexts: starThreshPortSpecTxUtil.setDescription("The Tx utilization of the port has exceeded the configured threshold value during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPortSpecTxUtil notification will be generated when the measured value falls below the threshold.")
starThreshClearPortSpecTxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 275)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearPortSpecTxUtil.setStatus('deprecated')
if mibBuilder.loadTexts: starThreshClearPortSpecTxUtil.setDescription('The threshold condition is now clear.')
starThreshHACallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 276)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHACallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshHACallSetupRate.setDescription("The per-context HA call setup rate (calls per second) has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHACallSetupRate notification will be generated when the measured value falls below the threshold.")
starThreshClearHACallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 277)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHACallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHACallSetupRate.setDescription('The threshold condition is now clear.')
starThreshHASvcCallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 278)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHASvcCallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshHASvcCallSetupRate.setDescription("The per-service HA Call setup rate (calls per second) has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHASvcCallSetupRate notification will be generated when the measured value falls below the threshold.")
starThreshClearHASvcCallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 279)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHASvcCallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHASvcCallSetupRate.setDescription('The threshold condition is now clear.')
starThreshHASvcRegReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 280)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHASvcRegReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshHASvcRegReplyError.setDescription("The per-service HA Reg Reply Error count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHASvcRegReplyError notification will be generated when the measured value falls below the threshold.")
starThreshClearHASvcRegReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 281)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHASvcRegReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHASvcRegReplyError.setDescription('The threshold condition is now clear.')
starThreshHASvcReregReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 282)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHASvcReregReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshHASvcReregReplyError.setDescription("The per-service HA Rereg Reply Error count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHASvcReregReplyError notification will be generated when the measured value falls below the threshold.")
starThreshClearHASvcReregReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 283)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHASvcReregReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHASvcReregReplyError.setDescription('The threshold condition is now clear.')
starThreshHASvcDeregReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 284)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHASvcDeregReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshHASvcDeregReplyError.setDescription("The per-service HA Dereg Reply Error count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHASvcDeregReplyError notification will be generated when the measured value falls below the threshold.")
starThreshClearHASvcDeregReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 285)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHASvcDeregReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHASvcDeregReplyError.setDescription('The threshold condition is now clear.')
starThreshFASvcRegReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 286)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshFASvcRegReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshFASvcRegReplyError.setDescription("The Per-Service FA Reg Reply Error count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearFASvcRegReplyError notification will be generated when the measured value falls below the threshold.")
starThreshClearFASvcRegReplyError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 287)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearFASvcRegReplyError.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFASvcRegReplyError.setDescription('The threshold condition is now clear.')
starThreshPDSNCallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 288)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDSNCallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshPDSNCallSetupRate.setDescription("The Per-Context PDSN Call Setup Rate (calls per second) has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDSNCallSetupRate notification will be generated when the measured value falls below the threshold.")
starThreshClearPDSNCallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 289)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDSNCallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDSNCallSetupRate.setDescription('The threshold condition is now clear.')
starThreshPDSNSvcCallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 290)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDSNSvcCallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshPDSNSvcCallSetupRate.setDescription("The Per-Service PDSN Call Setup Rate (calls per second) has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDSNSvcCallSetupRate notification will be generated when the measured value falls below the threshold.")
starThreshClearPDSNSvcCallSetupRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 291)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDSNSvcCallSetupRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDSNSvcCallSetupRate.setDescription('The threshold condition is now clear.')
starThreshPDSNSvcA11RRPFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 292)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDSNSvcA11RRPFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshPDSNSvcA11RRPFailure.setDescription("The Per-Service PDSN A11 RRP Failure count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDSNSvcA11RRPFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearPDSNSvcA11RRPFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 293)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11RRPFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11RRPFailure.setDescription('The threshold condition is now clear.')
starThreshPDSNSvcA11RRQMsgDiscard = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 294)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDSNSvcA11RRQMsgDiscard.setStatus('current')
if mibBuilder.loadTexts: starThreshPDSNSvcA11RRQMsgDiscard.setDescription("The Per-Service PDSN A11 RRQ Msg Discard count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDSNSvcA11RRQMsgDiscard notification will be generated when the measured value falls below the threshold.")
starThreshClearPDSNSvcA11RRQMsgDiscard = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 295)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11RRQMsgDiscard.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11RRQMsgDiscard.setDescription('The threshold condition is now clear.')
starThreshPDSNSvcA11RACMsgDiscard = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 296)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDSNSvcA11RACMsgDiscard.setStatus('current')
if mibBuilder.loadTexts: starThreshPDSNSvcA11RACMsgDiscard.setDescription("The Per-Service PDSN A11 RAC Msg Discard count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDSNSvcA11RACMsgDiscard notification will be generated when the measured value falls below the threshold.")
starThreshClearPDSNSvcA11RACMsgDiscard = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 297)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11RACMsgDiscard.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11RACMsgDiscard.setDescription('The threshold condition is now clear.')
starThreshPDSNSvcA11PPPSendDiscard = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 298)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDSNSvcA11PPPSendDiscard.setStatus('current')
if mibBuilder.loadTexts: starThreshPDSNSvcA11PPPSendDiscard.setDescription("The Per-Service PDSN A11 PPP Send Discard count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDSNSvcA11PPPSendDiscard notification will be generated when the measured value falls below the threshold.")
starThreshClearPDSNSvcA11PPPSendDiscard = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 299)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11PPPSendDiscard.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDSNSvcA11PPPSendDiscard.setDescription('The threshold condition is now clear.')
starThreshAAAMgrQueue = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 300)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshAAAMgrQueue.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAMgrQueue.setDescription("The Per-AAA Manager internal request queue usage has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAMgrQueue will be generated when the measured value falls below the threshold.")
starThreshClearAAAMgrQueue = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 301)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearAAAMgrQueue.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAMgrQueue.setDescription('The threshold condition is now clear.')
starThreshAAAAcctArchiveQueue1 = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 505)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshAAAAcctArchiveQueue1.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAcctArchiveQueue1.setDescription("The Per-Sessmgr Archive queue usage is above the configured threshold percentage Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAAcctArchiveQueue-1 notification will be generated when the measured value falls below the threshold.")
starThreshClearAAAAcctArchiveQueue1 = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 506)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearAAAAcctArchiveQueue1.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAcctArchiveQueue1.setDescription('The threshold condition is now clear.')
starThreshAAAAcctArchiveQueue2 = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 507)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshAAAAcctArchiveQueue2.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAcctArchiveQueue2.setDescription("The Sessmgr Archive queue usage is above the configured threshold percentage Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAAcctArchiveQueue-2 notification will be generated when the measured value falls below the threshold.")
starThreshClearAAAAcctArchiveQueue2 = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 508)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearAAAAcctArchiveQueue2.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAcctArchiveQueue2.setDescription('The threshold condition is now clear.')
starThreshAAAAcctArchiveQueue3 = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 509)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshAAAAcctArchiveQueue3.setStatus('current')
if mibBuilder.loadTexts: starThreshAAAAcctArchiveQueue3.setDescription("The Sessmgr Archive queue usage is above the configured threshold percentage Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearAAAAcctArchiveQueue-3 notification will be generated when the measured value falls below the threshold.")
starThreshClearAAAAcctArchiveQueue3 = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 510)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearAAAAcctArchiveQueue3.setStatus('current')
if mibBuilder.loadTexts: starThreshClearAAAAcctArchiveQueue3.setDescription('The threshold condition is now clear.')
starThreshDnsLookupSrvFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 511)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshDnsLookupSrvFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshDnsLookupSrvFailure.setDescription("The Total number of DNS SRV lookup failures is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearSrvLookupSrvFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearDnsLookupSrvFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 512)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearDnsLookupSrvFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDnsLookupSrvFailure.setDescription('The threshold condition is now clear.')
starThreshCPUOrbsWarn = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 302)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshCPUOrbsWarn.setStatus('current')
if mibBuilder.loadTexts: starThreshCPUOrbsWarn.setDescription('The ORBs task has exceeding the CPU usage configured as a warning')
starThreshClearCPUOrbsWarn = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 303)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearCPUOrbsWarn.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPUOrbsWarn.setDescription('The threshold condition is now clear')
starThreshCPUOrbsCritical = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 304)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshCPUOrbsCritical.setStatus('current')
if mibBuilder.loadTexts: starThreshCPUOrbsCritical.setDescription('The ORBs task has exceeded the CPU usage configured as a critical error')
starThreshClearCPUOrbsCritical = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 305)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearCPUOrbsCritical.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPUOrbsCritical.setDescription('The threshold condition is now clear')
starThreshRPSetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 306)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshRPSetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshRPSetupFailRate.setDescription('The RP call setup failure rate has exceeded the configured threshold')
starThreshClearRPSetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 307)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearRPSetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearRPSetupFailRate.setDescription('The threshold condition is now clear')
starThreshPPPSetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 308)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshPPPSetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshPPPSetupFailRate.setDescription('The PPP call setup failure rate has exceeded the configured threshold')
starThreshClearPPPSetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 309)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearPPPSetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPPPSetupFailRate.setDescription('The threshold condition is now clear')
starThreshStorageUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 310)).setObjects(("STARENT-MIB", "starStorageSlot"), ("STARENT-MIB", "starStorageName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshStorageUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshStorageUtilization.setDescription('The utilization of a mass storage device has exeeded the configured threshold')
starThreshClearStorageUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 311)).setObjects(("STARENT-MIB", "starStorageSlot"), ("STARENT-MIB", "starStorageName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearStorageUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshClearStorageUtilization.setDescription('The threshold condition is now clear')
starThreshDCCAProtocolErrors = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 312)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshDCCAProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: starThreshDCCAProtocolErrors.setDescription('The number of DCCA Protocol Errors has exceeded the configured threshold')
starThreshClearDCCAProtocolErrors = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 313)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearDCCAProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDCCAProtocolErrors.setDescription('The threshold condition is now clear')
starThreshDCCABadAnswers = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 314)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshDCCABadAnswers.setStatus('current')
if mibBuilder.loadTexts: starThreshDCCABadAnswers.setDescription('The number of DCCA BadAnswers has exceeded the configured threshold')
starThreshClearDCCABadAnswers = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 315)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearDCCABadAnswers.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDCCABadAnswers.setDescription('The threshold condition is now clear')
starThreshDCCAUnknownRatingGroup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 316)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshDCCAUnknownRatingGroup.setStatus('current')
if mibBuilder.loadTexts: starThreshDCCAUnknownRatingGroup.setDescription('The number of DCCA UnknownRatingGroup has exceeded the configured threshold')
starThreshClearDCCAUnknownRatingGroup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 317)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearDCCAUnknownRatingGroup.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDCCAUnknownRatingGroup.setDescription('The threshold condition is now clear')
starThreshDCCARatingFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 318)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshDCCARatingFailed.setStatus('current')
if mibBuilder.loadTexts: starThreshDCCARatingFailed.setDescription('The number of DCCA RatingFailed has exceeded the configured threshold')
starThreshClearDCCARatingFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 319)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearDCCARatingFailed.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDCCARatingFailed.setDescription('The threshold condition is now clear')
starThreshIPSECIKERequests = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 320)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshIPSECIKERequests.setStatus('current')
if mibBuilder.loadTexts: starThreshIPSECIKERequests.setDescription("The number of IPSEC IKE requests seen for this HA service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearIPSECIKERequests notification will be generated when the measured value falls below the threshold.")
starThreshClearIPSECIKERequests = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 321)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearIPSECIKERequests.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPSECIKERequests.setDescription('The threshold condition is now clear')
starThreshIPSECIKEFailures = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 322)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshIPSECIKEFailures.setStatus('current')
if mibBuilder.loadTexts: starThreshIPSECIKEFailures.setDescription("The number of IPSEC IKE failures seen for this HA service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearIPSECIKEFailures notification will be generated when the measured value falls below the threshold.")
starThreshClearIPSECIKEFailures = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 323)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearIPSECIKEFailures.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPSECIKEFailures.setDescription('The threshold condition is now clear')
starThreshIPSECIKEFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 324)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshIPSECIKEFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshIPSECIKEFailRate.setDescription("The rate of IPSEC IKE failures (as a percentage of total requests) seen for this HA service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearIPSECIKEFailRate notification will be generated when the measured value falls below the threshold.")
starThreshClearIPSECIKEFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 325)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearIPSECIKEFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPSECIKEFailRate.setDescription('The threshold condition is now clear')
starThreshIPSECTunSetup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 326)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshIPSECTunSetup.setStatus('current')
if mibBuilder.loadTexts: starThreshIPSECTunSetup.setDescription("The number of IPSEC tunnels setup over the last measurement period for this HA service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearIPSECTunSetup notification will be generated when the measured value falls below the threshold.")
starThreshClearIPSECTunSetup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 327)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearIPSECTunSetup.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPSECTunSetup.setDescription('The threshold condition is now clear')
starThreshIPSECTunEstabl = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 328)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshIPSECTunEstabl.setStatus('current')
if mibBuilder.loadTexts: starThreshIPSECTunEstabl.setDescription("The current number of IPSEC tunnels established for this HA service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearIPSECTunEstabl notification will be generated when the measured value falls below the threshold.")
starThreshClearIPSECTunEstabl = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 329)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearIPSECTunEstabl.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPSECTunEstabl.setDescription('The threshold condition is now clear')
starThreshIPSECCallReqRej = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 330)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshIPSECCallReqRej.setStatus('current')
if mibBuilder.loadTexts: starThreshIPSECCallReqRej.setDescription("The number of IPSEC Rejected Call Requests has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. Reject Call Requests indicate that an IPSEC Manager has reached its maximum allowable number of IPSEC tunnels. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearIPSECTunnelsTotal notification will be generated when the measured value falls below the threshold.")
starThreshClearIPSECCallReqRej = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 331)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearIPSECCallReqRej.setStatus('current')
if mibBuilder.loadTexts: starThreshClearIPSECCallReqRej.setDescription('The threshold condition is now clear')
starThreshCSCFSvcRouteFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 332)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcRouteFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcRouteFailure.setDescription("The Per-Service CSCF Route failure count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcRouteFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcRouteFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 333)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcRouteFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcRouteFailure.setDescription('The threshold condition is now clear.')
starThreshContFiltRating = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 334)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshContFiltRating.setStatus('current')
if mibBuilder.loadTexts: starThreshContFiltRating.setDescription("The number of Content Filtering Rating operations performed has gone above the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearContFiltRating notification will be generated when the measured value falls below the threshold.")
starThreshClearContFiltRating = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 335)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearContFiltRating.setStatus('current')
if mibBuilder.loadTexts: starThreshClearContFiltRating.setDescription('The threshold condition is now clear.')
starThreshContFiltBlock = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 336)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshContFiltBlock.setStatus('current')
if mibBuilder.loadTexts: starThreshContFiltBlock.setDescription("The number of Content Filtering Block operations performed has gone above the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearContFiltBlock notification will be generated when the measured value falls below the threshold.")
starThreshClearContFiltBlock = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 337)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearContFiltBlock.setStatus('current')
if mibBuilder.loadTexts: starThreshClearContFiltBlock.setDescription('The threshold condition is now clear.')
starThreshCDRFileSpace = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 338)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshCDRFileSpace.setStatus('current')
if mibBuilder.loadTexts: starThreshCDRFileSpace.setDescription("The CDR file space usage is above the configured threshold percentage Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCDRFileSpaceOverLimit notification will be generated when the measured value falls below the threshold.")
starThreshClearCDRFileSpace = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 339)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearCDRFileSpace.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCDRFileSpace.setDescription('The threshold condition is now clear.')
starThreshEDRFileSpace = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 340)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshEDRFileSpace.setStatus('current')
if mibBuilder.loadTexts: starThreshEDRFileSpace.setDescription("The EDR file space usage is above the configured threshold percentage Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearEDRFileSpaceOverLimit notification will be generated when the measured value falls below the threshold.")
starThreshClearEDRFileSpace = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 341)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearEDRFileSpace.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEDRFileSpace.setDescription('The threshold condition is now clear.')
starThreshPDIFCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 342)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDIFCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshPDIFCurrSess.setDescription("The chassis-wide count of current PDIF sessions has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDIFCurrSess notification will be generated when the measured value falls below the threshold.")
starThreshClearPDIFCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 343)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDIFCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDIFCurrSess.setDescription('The threshold condition is now clear.')
starThreshPDIFCurrActSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 344)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDIFCurrActSess.setStatus('current')
if mibBuilder.loadTexts: starThreshPDIFCurrActSess.setDescription("The chassis-wide count of current PDIF active sessions has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDIFCurrActiveSess notification will be generated when the measured value falls below the threshold.")
starThreshClearPDIFCurrActSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 345)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDIFCurrActSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDIFCurrActSess.setDescription('The threshold condition is now clear.')
starThreshCDRFlowControl = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 346)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCDRFlowControl.setStatus('current')
if mibBuilder.loadTexts: starThreshCDRFlowControl.setDescription('The number of Charging Data Record (CDR) records which have been discarded at an ACSMGR due to flow control has gone above the configured threshold. Probable Cause: This is a user configurable threshold. This threshold potentially indicates an overload condition due which prevents processes CDR messages at the same rate as the incoming packets.')
starThreshClearCDRFlowControl = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 347)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCDRFlowControl.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCDRFlowControl.setDescription('The threshold condition is now clear.')
starThreshASNGWSessTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 348)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWSessTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWSessTimeout.setDescription("The ASNGW session timeout has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshASNGWSessTimeout notification will be generated when the measured value falls below the threshold.")
starThreshClearASNGWSessTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 349)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWSessTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWSessTimeout.setDescription('The threshold condition is now clear.')
starThreshASNGWSessSetupTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 350)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWSessSetupTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWSessSetupTimeout.setDescription("The ASNGW session setup timeout has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshASNGWSessSetupTimeout notification will be generated when the measured value falls below the threshold.")
starThreshClearASNGWSessSetupTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 351)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWSessSetupTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWSessSetupTimeout.setDescription('The threshold condition is now clear.')
starThreshASNGWAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 352)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWAuthFail.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWAuthFail.setDescription("The number of ASNGW authentication failures has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshASNGWAuthFail notification will be generated when the measured value falls below the threshold.")
starThreshClearASNGWAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 353)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWAuthFail.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWAuthFail.setDescription('The threshold condition is now clear.')
starThreshASNGWR6InvNai = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 354)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWR6InvNai.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWR6InvNai.setDescription("The number of ASNGW R6 Invalid Nai has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshASNGWR6InvNai notification will be generated when the measured value falls below the threshold. This trap is obsolete.")
starThreshClearASNGWR6InvNai = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 355)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWR6InvNai.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWR6InvNai.setDescription('The threshold condition is now clear. This trap is obsolete.')
starThreshASNGWMaxEAPRetry = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 356)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWMaxEAPRetry.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWMaxEAPRetry.setDescription("The number of ASNGW Maximum EAP Retry has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshASNGWMaxEAPRetry notification will be generated when the measured value falls below the threshold.")
starThreshClearASNGWMaxEAPRetry = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 357)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWMaxEAPRetry.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWMaxEAPRetry.setDescription('The threshold condition is now clear.')
starThreshASNGWNWEntryDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 358)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWNWEntryDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWNWEntryDenial.setDescription("The number of ASNGW Network Entry Denial has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshASNGWNWEntryDenial notification will be generated when the measured value falls below the threshold.")
starThreshClearASNGWNWEntryDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 359)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWNWEntryDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWNWEntryDenial.setDescription('The threshold condition is now clear.')
starThreshASNGWHandoffDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 360)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWHandoffDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWHandoffDenial.setDescription("The number of ASNGW Handoff Denial has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshASNGWHandoffDenial notification will be generated when the measured value falls below the threshold.")
starThreshClearASNGWHandoffDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 361)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWHandoffDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWHandoffDenial.setDescription('The threshold condition is now clear.')
starThreshSGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 362)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshSGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshSGSNSessions.setDescription('The total number of SGSN sessions is above the configured threshold value.')
starThreshClearSGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 363)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearSGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSGSNSessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceSGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 364)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceSGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceSGSNSessions.setDescription('The total number of SGSN sessions in a service is above the configured threshold value.')
starThreshClearPerServiceSGSNSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 365)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceSGSNSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceSGSNSessions.setDescription('The threshold condition is now clear.')
starThreshSGSNPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 366)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshSGSNPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshSGSNPdpSessions.setDescription('The total number of SGSN PDP sessions is above the configured threshold value.')
starThreshClearSGSNPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 367)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearSGSNPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSGSNPdpSessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceSGSNPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 368)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceSGSNPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceSGSNPdpSessions.setDescription('The total number of SGSN PDP sessions in a service is above the configured threshold value.')
starThreshClearPerServiceSGSNPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 369)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceSGSNPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceSGSNPdpSessions.setDescription('The threshold condition is now clear.')
starThreshFWDosAttack = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 370)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshFWDosAttack.setStatus('current')
if mibBuilder.loadTexts: starThreshFWDosAttack.setDescription("The cumulative number of FW Dos-Attacks has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearFWDosAttack notification will be generated when the measured value falls below the threshold.")
starThreshClearFWDosAttack = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 371)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearFWDosAttack.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFWDosAttack.setDescription('The threshold condition is now clear.')
starThreshFWDropPacket = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 372)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshFWDropPacket.setStatus('current')
if mibBuilder.loadTexts: starThreshFWDropPacket.setDescription("The cumulative number of FW Dropped Packets has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearFWDropPacket notification will be generated when the measured value falls below the threshold.")
starThreshClearFWDropPacket = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 373)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearFWDropPacket.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFWDropPacket.setDescription('The threshold condition is now clear.')
starThreshFWDenyRule = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 374)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshFWDenyRule.setStatus('current')
if mibBuilder.loadTexts: starThreshFWDenyRule.setDescription("The cumulative number of FW Deny-Rules has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearFWDenyRule notification will be generated when the measured value falls below the threshold.")
starThreshClearFWDenyRule = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 375)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearFWDenyRule.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFWDenyRule.setDescription('The threshold condition is now clear.')
starThreshFWNoRule = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 376)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshFWNoRule.setStatus('current')
if mibBuilder.loadTexts: starThreshFWNoRule.setDescription("The cumulative number of FW No Rules has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearFWNoRule notification will be generated when the measured value falls below the threshold.")
starThreshClearFWNoRule = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 377)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearFWNoRule.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFWNoRule.setDescription('The threshold condition is now clear.')
starThreshPHSGWSessTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 378)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWSessTimeout.setStatus('current')
if mibBuilder.loadTexts: starThreshPHSGWSessTimeout.setDescription("The PHSGW session timeout has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWSessTimeout notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWSessTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 379)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWSessTimeout.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPHSGWSessTimeout.setDescription('The threshold condition is now clear.')
starThreshPHSGWSessSetupTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 380)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWSessSetupTimeout.setStatus('current')
if mibBuilder.loadTexts: starThreshPHSGWSessSetupTimeout.setDescription("The PHSGW session setup timeout has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWSessSetupTimeout notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWSessSetupTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 381)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWSessSetupTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSGWSessSetupTimeout.setDescription('The threshold condition is now clear.')
starThreshPHSGWAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 382)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWAuthFail.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPHSGWAuthFail.setDescription("The number of PHSGW authentication failures has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWAuthFail notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 383)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWAuthFail.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSGWAuthFail.setDescription('The threshold condition is now clear.')
starThreshPHSGWMaxEAPRetry = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 384)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWMaxEAPRetry.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPHSGWMaxEAPRetry.setDescription("The number of PHSGW Maximum EAP Retry has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWMaxEAPRetry notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWMaxEAPRetry = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 385)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWMaxEAPRetry.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSGWMaxEAPRetry.setDescription('The threshold condition is now clear.')
starThreshPHSGWNWEntryDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 386)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWNWEntryDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPHSGWNWEntryDenial.setDescription("The number of PHSGW Network Entry Denial has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWNWEntryDenial notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWNWEntryDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 387)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWNWEntryDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSGWNWEntryDenial.setDescription('The threshold condition is now clear.')
starThreshPHSGWHandoffDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 388)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWHandoffDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPHSGWHandoffDenial.setDescription("The number of PHSGW Handoff Denial has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWHandoffDenial notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWHandoffDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 389)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWHandoffDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSGWHandoffDenial.setDescription('The threshold condition is now clear.')
starThreshASNGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 390)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshASNGWSessions.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshASNGWSessions.setDescription('The total number of ASNGW sessions is above the configured threshold value.')
starThreshClearASNGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 391)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearASNGWSessions.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearASNGWSessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceASNGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 392)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceASNGWSessions.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPerServiceASNGWSessions.setDescription('The total number of ASNGW sessions in a service is above the configured threshold value.')
starThreshClearPerServiceASNGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 393)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceASNGWSessions.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPerServiceASNGWSessions.setDescription('The threshold condition is now clear.')
starThreshPHSPCSessSetupTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 394)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSPCSessSetupTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPHSPCSessSetupTimeout.setDescription("The PHSPC session setup timeout has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSPCSessSetupTimeout notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSPCSessSetupTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 395)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSPCSessSetupTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSPCSessSetupTimeout.setDescription('The threshold condition is now clear.')
starThreshPHSPCSleepModeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 396)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSPCSleepModeTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPHSPCSleepModeTimeout.setDescription("The PHSPC idle mode timeout has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSPCSleepModeTimeout notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSPCSleepModeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 397)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSPCSleepModeTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSPCSleepModeTimeout.setDescription('The threshold condition is now clear.')
starThreshPHSPCSmEntryDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 398)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSPCSmEntryDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshPHSPCSmEntryDenial.setDescription("The number of PHSPC sm entry denial has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSPCSmEntryDenial notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSPCSmEntryDenial = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 399)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSPCSmEntryDenial.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSPCSmEntryDenial.setDescription('The threshold condition is now clear.')
starThreshSGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 408)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshSGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshSGWSessions.setDescription("The total number of SGW sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearSGWSessions notification will be generated when the measured value falls below the threshold.")
starThreshClearSGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 409)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearSGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSGWSessions.setDescription('The threshold condition is now clear.')
starThreshPGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 410)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPGWSessions.setDescription("The total number of PGW sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearSGWSessions notification will be generated when the measured value falls below the threshold.")
starThreshClearPGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 411)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPGWSessions.setDescription('The threshold condition is now clear.')
starThreshLMASessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 412)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshLMASessions.setStatus('current')
if mibBuilder.loadTexts: starThreshLMASessions.setDescription("The total number of LMA sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearLMASessions notification will be generated when the measured value falls below the threshold.")
starThreshClearLMASessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 413)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearLMASessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearLMASessions.setDescription('The threshold condition is now clear.')
starThreshMAGSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 414)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshMAGSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshMAGSessions.setDescription("The total number of MAG sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearMAGSessions notification will be generated when the measured value falls below the threshold.")
starThreshClearMAGSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 415)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearMAGSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearMAGSessions.setDescription('The threshold condition is now clear.')
starThreshFNGCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 416)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshFNGCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshFNGCurrSess.setDescription("The chassis-wide count of current FNG sessions has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearFNGCurrSess notification will be generated when the measured value falls below the threshold.")
starThreshClearFNGCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 417)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearFNGCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFNGCurrSess.setDescription('The threshold condition is now clear.')
starThreshFNGCurrActSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 418)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshFNGCurrActSess.setStatus('current')
if mibBuilder.loadTexts: starThreshFNGCurrActSess.setDescription("The chassis-wide count of current FNG active sessions has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearFNGCurrActiveSess notification will be generated when the measured value falls below the threshold.")
starThreshClearFNGCurrActSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 419)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearFNGCurrActSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFNGCurrActSess.setDescription('The threshold condition is now clear.')
starThreshPHSGWEAPOLAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 420)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWEAPOLAuthFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshPHSGWEAPOLAuthFailure.setDescription("The number of PHSGW EAPOL Auth Failure has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWEAPOLAuthFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWEAPOLAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 421)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWEAPOLAuthFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPHSGWEAPOLAuthFailure.setDescription('The threshold condition is now clear.')
starThreshPHSGWMaxEAPOLRetry = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 422)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPHSGWMaxEAPOLRetry.setStatus('current')
if mibBuilder.loadTexts: starThreshPHSGWMaxEAPOLRetry.setDescription("The number of PHSGW max EAPOL retry has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshPHSGWMaxEAPOLRetry notification will be generated when the measured value falls below the threshold.")
starThreshClearPHSGWMaxEAPOLRetry = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 423)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPHSGWMaxEAPOLRetry.setStatus('obsolete')
if mibBuilder.loadTexts: starThreshClearPHSGWMaxEAPOLRetry.setDescription('The threshold condition is now clear.')
starThreshHSGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 424)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHSGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshHSGWSessions.setDescription("The total number of HSGW sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHSGWSessions notification will be generated when the measured value falls below the threshold.")
starThreshClearHSGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 425)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHSGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHSGWSessions.setDescription('The threshold condition is now clear.')
starThreshPDGCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 426)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDGCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshPDGCurrSess.setDescription("The chassis-wide count of current PDG sessions has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDGCurrSess notification will be generated when the measured value falls below the threshold.")
starThreshClearPDGCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 427)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDGCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDGCurrSess.setDescription('The threshold condition is now clear.')
starThreshPDGCurrActSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 428)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPDGCurrActSess.setStatus('current')
if mibBuilder.loadTexts: starThreshPDGCurrActSess.setDescription("The chassis-wide count of current PDG active sessions has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearPDGCurrActiveSess notification will be generated when the measured value falls below the threshold.")
starThreshClearPDGCurrActSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 429)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPDGCurrActSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPDGCurrActSess.setDescription('The threshold condition is now clear.')
starThreshNATPortChunks = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 430)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshNATPortChunks.setStatus('current')
if mibBuilder.loadTexts: starThreshNATPortChunks.setDescription("The NAT port chunks utilization of NAT pool is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearNATPortChunks notification will be generated when the measured value exceeds the threshold.")
starThreshClearNATPortChunks = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 431)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearNATPortChunks.setStatus('current')
if mibBuilder.loadTexts: starThreshClearNATPortChunks.setDescription('The threshold condition is now clear.')
starThreshGPRSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 432)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshGPRSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshGPRSSessions.setDescription('The total number of GPRS sessions is above the configured threshold value.')
starThreshClearGPRSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 433)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearGPRSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearGPRSSessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceGPRSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 434)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceGPRSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceGPRSSessions.setDescription('The total number of GPRS sessions in a service is above the configured threshold value.')
starThreshClearPerServiceGPRSSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 435)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceGPRSSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceGPRSSessions.setDescription('The threshold condition is now clear.')
starThreshGPRSPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 436)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshGPRSPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshGPRSPdpSessions.setDescription('The total number of GPRS PDP sessions is above the configured threshold value.')
starThreshClearGPRSPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 437)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearGPRSPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearGPRSPdpSessions.setDescription('The threshold condition is now clear.')
starThreshPerServiceGPRSPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 438)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceGPRSPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceGPRSPdpSessions.setDescription('The total number of GPRS PDP sessions in a service is above the configured threshold value.')
starThreshClearPerServiceGPRSPdpSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 439)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceGPRSPdpSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceGPRSPdpSessions.setDescription('The threshold condition is now clear.')
starThreshMMESessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 440)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshMMESessions.setStatus('current')
if mibBuilder.loadTexts: starThreshMMESessions.setDescription("The total number of subscribers is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearMMESessions notification will be generated when the measured value falls below the threshold.")
starThreshClearMMESessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 441)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearMMESessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearMMESessions.setDescription('The threshold condition is now clear.')
starThreshMMEAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 442)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshMMEAuthFail.setStatus('current')
if mibBuilder.loadTexts: starThreshMMEAuthFail.setDescription("The total number of subscribers is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearMMEAuthFail notification will be generated when the measured value falls below the threshold.")
starThreshClearMMEAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 443)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearMMEAuthFail.setStatus('current')
if mibBuilder.loadTexts: starThreshClearMMEAuthFail.setDescription('The threshold condition is now clear.')
starThreshMMEAttachFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 444)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshMMEAttachFail.setStatus('current')
if mibBuilder.loadTexts: starThreshMMEAttachFail.setDescription("The total number of subscribers is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearMMEAttachFail notification will be generated when the measured value falls below the threshold.")
starThreshClearMMEAttachFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 445)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearMMEAttachFail.setStatus('current')
if mibBuilder.loadTexts: starThreshClearMMEAttachFail.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcRegRcvdRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 446)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcRegRcvdRate.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcRegRcvdRate.setDescription("The Per-Service CSCF Registration Per Interval count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcRegRcvdRate notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcRegRcvdRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 447)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcRegRcvdRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcRegRcvdRate.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcTotalActiveReg = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 448)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcTotalActiveReg.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcTotalActiveReg.setDescription("The Per-Service CSCF Total Active Registrations count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcTotalActiveReg notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcTotalActiveReg = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 449)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcTotalActiveReg.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcTotalActiveReg.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcInviteRcvdRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 450)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcInviteRcvdRate.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcInviteRcvdRate.setDescription("The Per-Service CSCF Calls Per Interval count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcInviteRcvdRate notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcInviteRcvdRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 451)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcInviteRcvdRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcInviteRcvdRate.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcTotalActiveCalls = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 452)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcTotalActiveCalls.setDescription("The Per-Service CSCF Total Active Calls count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcTotalActiveCalls notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcTotalActiveCalls = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 453)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcTotalActiveCalls.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcTotalActiveCalls.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcTotalCallFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 454)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcTotalCallFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcTotalCallFailure.setDescription("The Per-Service CSCF Total Call Failure count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcTotalCallFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcTotalCallFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 455)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcTotalCallFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcTotalCallFailure.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcErrorNoResource = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 456)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcErrorNoResource.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcErrorNoResource.setDescription("The Per-Service CSCF No resource failure count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcErrorNoResource notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcErrorNoResource = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 457)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorNoResource.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorNoResource.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcErrorTcp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 458)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcErrorTcp.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcErrorTcp.setDescription("The Per-Service CSCF Tcp failure count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcErrorTcp notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcErrorTcp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 459)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorTcp.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorTcp.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcErrorPresence = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 460)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcErrorPresence.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcErrorPresence.setDescription("The Per-Service CSCF Presence failure count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcErrorPresence notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcErrorPresence = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 461)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorPresence.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorPresence.setDescription('The threshold condition is now clear.')
starThreshCSCFSvcErrorRegAuth = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 462)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCSCFSvcErrorRegAuth.setStatus('current')
if mibBuilder.loadTexts: starThreshCSCFSvcErrorRegAuth.setDescription("The Per-Service CSCF Reg-Auth failure count has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCSCFSvcErrorRegAuth notification will be generated when the measured value falls below the threshold.")
starThreshClearCSCFSvcErrorRegAuth = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 463)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorRegAuth.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCSCFSvcErrorRegAuth.setDescription('The threshold condition is now clear.')
starThreshBGPRoutes = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 464)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshBGPRoutes.setStatus('current')
if mibBuilder.loadTexts: starThreshBGPRoutes.setDescription("The Total number of BGP routes is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearBGPRoutes notification will be generated when the measured value falls below the threshold.")
starThreshClearBGPRoutes = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 465)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearBGPRoutes.setStatus('current')
if mibBuilder.loadTexts: starThreshClearBGPRoutes.setDescription('The threshold condition is now clear.')
starThreshPCCPolicySessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 466)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPCCPolicySessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPCCPolicySessions.setDescription('The total number of PCC-Policy sessions is above the configured threshold value.')
starThreshClearPCCPolicySessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 467)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPCCPolicySessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPCCPolicySessions.setDescription('The threshold condition is now clear.')
starThreshPerServicePCCPolicySessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 468)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServicePCCPolicySessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServicePCCPolicySessions.setDescription('The total number of PCC-Policy sessions in a service is above the configured threshold value.')
starThreshClearPerServicePCCPolicySessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 469)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServicePCCPolicySessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServicePCCPolicySessions.setDescription('The threshold condition is now clear.')
starThreshPCCQuotaSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 470)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPCCQuotaSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPCCQuotaSessions.setDescription('The total number of PCC-Quota sessions is above the configured threshold value.')
starThreshClearPCCQuotaSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 471)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPCCQuotaSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPCCQuotaSessions.setDescription('The threshold condition is now clear.')
starThreshPerServicePCCQuotaSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 472)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServicePCCQuotaSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServicePCCQuotaSessions.setDescription('The total number of PCC-Quota sessions in a service is above the configured threshold value.')
starThreshClearPerServicePCCQuotaSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 473)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServicePCCQuotaSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServicePCCQuotaSessions.setDescription('The threshold condition is now clear.')
starThreshPCCAFSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 474)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPCCAFSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPCCAFSessions.setDescription('The total number of PCC-AF sessions is above the configured threshold value.')
starThreshClearPCCAFSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 475)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPCCAFSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPCCAFSessions.setDescription('The threshold condition is now clear.')
starThreshPerServicePCCAFSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 476)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServicePCCAFSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServicePCCAFSessions.setDescription('The total number of PCC-AF sessions in a service is above the configured threshold value.')
starThreshClearPerServicePCCAFSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 477)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServicePCCAFSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServicePCCAFSessions.setDescription('The threshold condition is now clear.')
starThreshNPUUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 478)).setObjects(("STARENT-MIB", "starNPUSlot"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshNPUUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshNPUUtilization.setDescription("The overall NPU utilization for the identified processor has exceeded for configured threshold value for the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearNPUUtilization notification will be generated when the measured value falls below the threshold.This is not applicable to QVPC-SI and QVPC-DI.")
starThreshClearNPUUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 479)).setObjects(("STARENT-MIB", "starNPUSlot"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearNPUUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshClearNPUUtilization.setDescription('The threshold condition is now clear.This is not applicable to QVPC-SI and QVPC-DI.')
starThreshDnsLookupFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 480)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshDnsLookupFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshDnsLookupFailure.setDescription("The Total number of DNS lookup failures is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearDnsLookupFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearDnsLookupFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 481)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearDnsLookupFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDnsLookupFailure.setDescription('The threshold condition is now clear.')
starThreshDiameterRetryRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 482)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshDiameterRetryRate.setStatus('current')
if mibBuilder.loadTexts: starThreshDiameterRetryRate.setDescription("The percentage of Diameter requests which has to be retried has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearDiameterRetryRate notification will be generated when the measured value falls below the threshold.")
starThreshClearDiameterRetryRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 483)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearDiameterRetryRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDiameterRetryRate.setDescription('The threshold condition is now clear.')
starThreshHNBGWHnbSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 484)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHNBGWHnbSess.setStatus('current')
if mibBuilder.loadTexts: starThreshHNBGWHnbSess.setDescription('The chassis-wide count of current HNBGW HNB sessions has gone above the configured threshold')
starThreshClearHNBGWHnbSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 485)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHNBGWHnbSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHNBGWHnbSess.setDescription('The threshold condition is now clear.')
starThreshHNBGWUeSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 486)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHNBGWUeSess.setStatus('current')
if mibBuilder.loadTexts: starThreshHNBGWUeSess.setDescription('The chassis-wide count of current HNBGW UE sessions has gone above the configured threshold ')
starThreshClearHNBGWUeSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 487)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHNBGWUeSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHNBGWUeSess.setDescription('The threshold condition is now clear.')
starThreshHNBGWIuSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 488)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHNBGWIuSess.setStatus('current')
if mibBuilder.loadTexts: starThreshHNBGWIuSess.setDescription('The chassis-wide count of current HNBGW IU sessions has gone above the configured threshold')
starThreshClearHNBGWIuSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 489)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHNBGWIuSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHNBGWIuSess.setDescription('The threshold condition is now clear.')
starThreshPerServicePDGSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 491)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServicePDGSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServicePDGSessions.setDescription('The total number of PDG sessions in a service is above the configured threshold value.')
starThreshClearPerServicePDGSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 492)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServicePDGSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServicePDGSessions.setDescription('The threshold condition is now clear.')
starThreshSystemCapacity = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 493)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshSystemCapacity.setStatus('current')
if mibBuilder.loadTexts: starThreshSystemCapacity.setDescription('The System resource capacity has exceeded the configured threshold')
starThreshClearSystemCapacity = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 494)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearSystemCapacity.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSystemCapacity.setDescription(' The threshold condition is now clear for system capacity.')
starThreshTpoRtoTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 495)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshTpoRtoTimeout.setStatus('current')
if mibBuilder.loadTexts: starThreshTpoRtoTimeout.setDescription("The total number of TPO RTO timeouts is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearTpoRtoTimeout notification will be generated when the measured value falls below the threshold.")
starThreshClearTpoRtoTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 496)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearTpoRtoTimeout.setStatus('current')
if mibBuilder.loadTexts: starThreshClearTpoRtoTimeout.setDescription('The threshold condition is now clear.')
starThreshTpoDnsFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 497)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshTpoDnsFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshTpoDnsFailure.setDescription("The total number of TPO DNS query failure is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearTpoDnsFailure notification will be generated when the measured value falls below the threshold. ")
starThreshClearTpoDnsFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 498)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearTpoDnsFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearTpoDnsFailure.setDescription('The threshold condition is now clear.')
starThreshTpoLowCompressionGain = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 499)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshTpoLowCompressionGain.setStatus('current')
if mibBuilder.loadTexts: starThreshTpoLowCompressionGain.setDescription("The total number of TPO low compression gain is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearTpoLowCompressionGain notification will be generated when the measured value falls below the threshold.")
starThreshClearTpoLowCompressionGain = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 500)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearTpoLowCompressionGain.setStatus('current')
if mibBuilder.loadTexts: starThreshClearTpoLowCompressionGain.setDescription('The threshold condition is now clear.')
starThreshEPDGCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 501)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshEPDGCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshEPDGCurrSess.setDescription("The chassis-wide count of current EPDG sessions has gone above the configured threshold Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearEPDGCurrSess notification will be generated when the measured value falls below the threshold.")
starThreshClearEPDGCurrSess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 502)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearEPDGCurrSess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEPDGCurrSess.setDescription('The threshold condition is now clear.')
starThreshCardTemperatureNearPowerOffLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 503)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshCardTemperatureNearPowerOffLimit.setStatus('current')
if mibBuilder.loadTexts: starThreshCardTemperatureNearPowerOffLimit.setDescription("On the certain card, the distance between the poweroff/reset point and current temperature on card is smaller than the setted threshold, during the current monitoring period. Probable Cause: This is a user configurable threshold. Possible reason to cause this alarm: 1) External temperature is too high; 2) One or more fan failures; 3) Blockages the prevent fan air inflow/outflow. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCardTemperaturePowerOffLimit notification will be generated when the measured temperature falls, making the distance between the poweroff/reset point and current temperature larger than the setted threshold.")
starThreshClearCardTemperaturePowerOffLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 504)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearCardTemperaturePowerOffLimit.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCardTemperaturePowerOffLimit.setDescription('On the certain card, the distance between the poweroff/reset point and current temperature on card is larger than the setted clear point.')
starThreshHENBGWHenbSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 513)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHENBGWHenbSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshHENBGWHenbSessions.setDescription("The total number of HENBGW Henb sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHENBGWHenbSessions notification will be generated when the measure value falls below the threshold.")
starThreshClearHENBGWHenbSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 514)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHENBGWHenbSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHENBGWHenbSessions.setDescription('The threshold condition is now clear.')
starThreshHENBGWUeSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 515)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHENBGWUeSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshHENBGWUeSessions.setDescription("The total number of HENBGW UE sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHENBGWUeSessions notification will be generated when the measure value falls below the threshold.")
starThreshClearHENBGWUeSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 516)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHENBGWUeSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHENBGWUeSessions.setDescription('The threshold condition is now clear.')
starThreshHENBGWPagingMessages = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 517)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshHENBGWPagingMessages.setStatus('current')
if mibBuilder.loadTexts: starThreshHENBGWPagingMessages.setDescription("The total number of HENBGW Paging Messages received is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearHENBGWPagingMessages notification will be generated when the measured value falls below the threshold.")
starThreshClearHENBGWPagingMessages = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 518)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearHENBGWPagingMessages.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHENBGWPagingMessages.setDescription('The threshold condition is now clear.')
starThreshPerServiceSAMOGSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 519)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshPerServiceSAMOGSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshPerServiceSAMOGSessions.setDescription('The total number of SAMOG sessions in a service is above the configured threshold value.')
starThreshClearPerServiceSAMOGSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 520)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearPerServiceSAMOGSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearPerServiceSAMOGSessions.setDescription('The threshold condition is now clear.')
starThreshNATPktDrop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 521)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshNATPktDrop.setStatus('current')
if mibBuilder.loadTexts: starThreshNATPktDrop.setDescription("The NAT packet drops from a NAT pool is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshNATPktDrop notification will be generated when the measured value exceeds the threshold.")
starThreshClearNATPktDrop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 522)).setObjects(("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearNATPktDrop.setStatus('current')
if mibBuilder.loadTexts: starThreshClearNATPktDrop.setDescription('The threshold condition is now clear.')
starThreshFabricEGQDiscards = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 523)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshDeviceNum"), ("STARENT-MIB", "starThreshMeasuredInt"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshPeriodInt"))
if mibBuilder.loadTexts: starThreshFabricEGQDiscards.setStatus('current')
if mibBuilder.loadTexts: starThreshFabricEGQDiscards.setDescription('The number of EGQDiscards observed during configured threshold and interval exceeded. Probable Cause: Possible FAP or FE issue. Collect more data by running .show fabric health. command.')
starThreshClearFabricEGQDiscards = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 524)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshDeviceNum"), ("STARENT-MIB", "starThreshMeasuredInt"), ("STARENT-MIB", "starThreshInt"))
if mibBuilder.loadTexts: starThreshClearFabricEGQDiscards.setStatus('current')
if mibBuilder.loadTexts: starThreshClearFabricEGQDiscards.setDescription('The threshold condition is now clear.')
starGILANServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 525)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGILANServiceStart.setStatus('current')
if mibBuilder.loadTexts: starGILANServiceStart.setDescription('A GILAN Service has started Action to be Taken: No action required')
starGILANServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 526)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGILANServiceStop.setStatus('current')
if mibBuilder.loadTexts: starGILANServiceStop.setDescription('A GILAN Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the GILAN service shutdown was not planned, examine the admin logs for an indication of the failure. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the GILAN service is operational. Condition Clear Alarm: A starGILANServiceStart notification will be generated when the service is restarted')
starThreshEPDGIKEV2SetupAttempts = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 527)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupAttempts.setStatus('current')
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupAttempts.setDescription("The number of IKEv2 Setup attepmts requests seen for this ePDG service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshEPDGIKEV2SetupAttempts notification will be generated when the measured value falls below the threshold.")
starThreshClearEPDGIKEV2SetupAttempts = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 528)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupAttempts.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupAttempts.setDescription('The threshold condition is now clear')
starThreshEPDGIKEV2AuthFailures = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 529)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshEPDGIKEV2AuthFailures.setStatus('current')
if mibBuilder.loadTexts: starThreshEPDGIKEV2AuthFailures.setDescription("The number of IKEv2 Authentication Failures seen for this ePDG service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshEPDGIKEV2AuthFailures notification will be generated when the measured value falls below the threshold.")
starThreshClearEPDGIKEV2AuthFailures = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 530)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2AuthFailures.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2AuthFailures.setDescription('The threshold condition is now clear')
starThreshEPDGIKEV2SetupSuccess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 531)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupSuccess.setStatus('current')
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupSuccess.setDescription("The number of IKEv2 Setup Success seen for this ePDG service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshEPDGIKEV2SetupSuccess notification will be generated when the measured value falls below the threshold.")
starThreshClearEPDGIKEV2SetupSuccess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 532)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupSuccess.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupSuccess.setDescription('The threshold condition is now clear')
starThreshEPDGIKEV2SetupFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 533)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupFailure.setDescription("The number of IKEv2 Setup Failure seen for this ePDG service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshEPDGIKEV2SetupFailure notification will be generated when the measured value falls below the threshold.")
starThreshClearEPDGIKEV2SetupFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 534)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupFailure.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupFailure.setDescription('The threshold condition is now clear')
starThreshEPDGIKEV2SetupFailureRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 535)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupFailureRate.setStatus('current')
if mibBuilder.loadTexts: starThreshEPDGIKEV2SetupFailureRate.setDescription("The rate of IKEv2 Setup failures (as a percentage of total requests) seen for this ePDG service has exceeded the configured threshold. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshEPDGIKEV2SetupFailureRate notification will be generated when the measured value falls below the threshold.")
starThreshClearEPDGIKEV2SetupFailureRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 536)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupFailureRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEPDGIKEV2SetupFailureRate.setDescription('The threshold condition is now clear')
starThreshLagRxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 537)).setObjects(("STARENT-MIB", "starLAGGroup"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshLagRxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshLagRxUtil.setDescription("The Rx utilization of port on a lag group has exceeded the configured threshold value during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearLagRxUtil notification will be generated when the measured value falls below the threshold.")
starThreshClearLagRxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 538)).setObjects(("STARENT-MIB", "starLAGGroup"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearLagRxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshClearLagRxUtil.setDescription('The threshold condition is now clear.')
starThreshLagTxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 539)).setObjects(("STARENT-MIB", "starLAGGroup"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshLagTxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshLagTxUtil.setDescription("The Tx utilization of port on a lag group has exceeded the configured threshold value during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearLagTxUtil notification will be generated when the measured value falls below the threshold.")
starThreshClearLagTxUtil = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 540)).setObjects(("STARENT-MIB", "starLAGGroup"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearLagTxUtil.setStatus('current')
if mibBuilder.loadTexts: starThreshClearLagTxUtil.setDescription('The threshold condition is now clear.')
starThreshCPUCryptoCoresUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 541)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starCPUCoreNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshCPUCryptoCoresUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshCPUCryptoCoresUtilization.setDescription("The CPU Crypto Core utilization has exceeded for configured threshold value for the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearCPUCryptoCoresUtilization notification will be generated when the measured value falls below the threshold.")
starThreshClearCPUCryptoCoresUtilization = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 542)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"), ("STARENT-MIB", "starCPUCoreNumber"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearCPUCryptoCoresUtilization.setStatus('current')
if mibBuilder.loadTexts: starThreshClearCPUCryptoCoresUtilization.setDescription('The threshold condition is now clear.')
starOSPFNeighborDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1001)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starInterfaceName"), ("STARENT-MIB", "starInterfaceIPAddress"), ("STARENT-MIB", "starOSPFNeighborRouterID"), ("STARENT-MIB", "starOSPFFromState"), ("STARENT-MIB", "starOSPFToState"))
if mibBuilder.loadTexts: starOSPFNeighborDown.setStatus('current')
if mibBuilder.loadTexts: starOSPFNeighborDown.setDescription('An OSPF neighbor is down. Condition Clear Alarm: A starOSPFNeighborFull notification will be generated when the neighbor is restored.')
starOSPFNeighborFull = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1002)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starInterfaceName"), ("STARENT-MIB", "starInterfaceIPAddress"), ("STARENT-MIB", "starOSPFNeighborRouterID"))
if mibBuilder.loadTexts: starOSPFNeighborFull.setStatus('current')
if mibBuilder.loadTexts: starOSPFNeighborFull.setDescription('An OSPF neighbor is full. A starOSPFNeighborFull notification is only sent for neighbors which had previous been declared down via a starOSPFNeighborDown notification.')
starM3UAPSDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1004)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"))
if mibBuilder.loadTexts: starM3UAPSDown.setStatus('current')
if mibBuilder.loadTexts: starM3UAPSDown.setDescription('The M3UA Peer Server is unavailable. Possibe reason: All related Peer Server Processes(PSPs) are in the ASP-DOWN state for this Peer Server. Condition Clear Alarm: A starM3UAPSActive notification will be generated when the Peer Server becomes reachable as at least one PSP is in ASP-ACTIVE state')
starM3UAPSActive = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1005)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"))
if mibBuilder.loadTexts: starM3UAPSActive.setStatus('current')
if mibBuilder.loadTexts: starM3UAPSActive.setDescription('Peer Server is available and application traffic is active.This state implies that at least one PSP is in the ASP-ACTIVE state. starM3UAPSActive is only generated for Application Services which were previously declared down via a starM3UAPSDown notification')
starM3UAPSPDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1006)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"), ("STARENT-MIB", "starSS7CauseString"))
if mibBuilder.loadTexts: starM3UAPSPDown.setStatus('current')
if mibBuilder.loadTexts: starM3UAPSPDown.setDescription('An ASP Down message received from the remote M3UA peer indicates the adaptation layer at the remote M3UA peer is NOT ready to receive DATA, SSNM, RKM or ASPTM messages Possibe reason: 1. SCTP association is down or 2. Remote peer server process is down Condition Clear Alarm: A starM3UAPSPUp notification will be generated when the reemote ASP becomes available')
starM3UAPSPUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1007)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"), ("STARENT-MIB", "starSS7CauseString"))
if mibBuilder.loadTexts: starM3UAPSPUp.setStatus('current')
if mibBuilder.loadTexts: starM3UAPSPUp.setDescription('An ASP Up message received from the remote M3UA peer indicates that that the adaptation layer at the remote peer is ready to receive any ASPSM/ASPTM messages for all Routing Keys that the ASP is configured to serve starM3UAPSPUp is generated only when previous starM3UAPSPDown was generated')
starSCCPSspRcvd = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1008)).setObjects(("STARENT-MIB", "starSccpNwId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSccpSsn"))
if mibBuilder.loadTexts: starSCCPSspRcvd.setStatus('current')
if mibBuilder.loadTexts: starSCCPSspRcvd.setDescription('Subsystem prohibitted received from a peer. The receiving node needs to update the translation tables so that traffic could be re routed to a backup system if available Condition Clear: A starSCCPSspClear notification will be generated when this condition is cleared.')
starSCCPSspClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1009)).setObjects(("STARENT-MIB", "starSccpNwId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSccpSsn"))
if mibBuilder.loadTexts: starSCCPSspClear.setStatus('current')
if mibBuilder.loadTexts: starSCCPSspClear.setDescription('Susbsystem available received from a peer. This indicates a previously prohibited node is now available. Receiving node needs to update its translation tables A starSCCPSspClear notification is only generated for peers which had previously generated a starSCCPSspRcvd noficiation')
starSGSNRNCReset = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1010)).setObjects(("STARENT-MIB", "starSessSGSNVpnName"), ("STARENT-MIB", "starSessSGSNServName"), ("STARENT-MIB", "starSessSGSNMcc"), ("STARENT-MIB", "starSessSGSNMnc"), ("STARENT-MIB", "starSessSGSNRncId"))
if mibBuilder.loadTexts: starSGSNRNCReset.setStatus('current')
if mibBuilder.loadTexts: starSGSNRNCReset.setDescription('SGSN has received an Radio Network Controller(RNC) reset event.SGSN will clean up all the Iu connections with the RNC. This event is not generated when we get RNC Reset the firt time system boots up. This trap is generated only on subsequent reset events')
starSGSNHLRReset = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1011)).setObjects(("STARENT-MIB", "starSessSGSNVpnName"), ("STARENT-MIB", "starSessSGSNServName"), ("STARENT-MIB", "starSessSGSNHlrNum"))
if mibBuilder.loadTexts: starSGSNHLRReset.setStatus('current')
if mibBuilder.loadTexts: starSGSNHLRReset.setDescription('Home Location register(HLR) reset event received. SGSN will mark all the subscribers served by this HLR so that the subscription record can be fetched again on subsequent user activity')
starSGSNGtpcPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1012)).setObjects(("STARENT-MIB", "starSGTPVpnName"), ("STARENT-MIB", "starSGTPServName"), ("STARENT-MIB", "starSGTPPeerAddr"), ("STARENT-MIB", "starSGTPPeerPort"), ("STARENT-MIB", "starSGTPSelfAddr"), ("STARENT-MIB", "starSGTPSelfPort"))
if mibBuilder.loadTexts: starSGSNGtpcPathFailure.setStatus('current')
if mibBuilder.loadTexts: starSGSNGtpcPathFailure.setDescription('No response received from peer GPRS Serving Node(GSN) as several messages have timed out. The control path towards the peer GSN is down. Check that the peer GGSN or SGSN is UP Possibe reason: Remote GSN is down Condition Clear Alarm: A starSGSNGtpcPathFailureClear notification will be generated when the control path towards the peer GSN is available')
starSGSNGtpcPathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1013)).setObjects(("STARENT-MIB", "starSGTPVpnName"), ("STARENT-MIB", "starSGTPServName"), ("STARENT-MIB", "starSGTPPeerAddr"), ("STARENT-MIB", "starSGTPPeerPort"), ("STARENT-MIB", "starSGTPSelfAddr"), ("STARENT-MIB", "starSGTPSelfPort"))
if mibBuilder.loadTexts: starSGSNGtpcPathFailureClear.setStatus('current')
if mibBuilder.loadTexts: starSGSNGtpcPathFailureClear.setDescription('The path to the peer GSN which was down is now available A starSGSNGtpcPathFailureClear notification is only generated for GSNs which had previously generated a starSGSNGtpcPathFailure notification')
starSGSNGtpuPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1014)).setObjects(("STARENT-MIB", "starSGTPVpnName"), ("STARENT-MIB", "starSGTPServName"), ("STARENT-MIB", "starSGTPPeerAddr"), ("STARENT-MIB", "starSGTPPeerPort"), ("STARENT-MIB", "starSGTPSelfAddr"), ("STARENT-MIB", "starSGTPSelfPort"))
if mibBuilder.loadTexts: starSGSNGtpuPathFailure.setStatus('current')
if mibBuilder.loadTexts: starSGSNGtpuPathFailure.setDescription('No response received for ECHO request sent from SGSN. Data path failure detected towards peer GPRS Serving Node(GSN) or Radio Network Controller(RNC). Check if the peer RNC or GSN is up Possibe reason: Remote GSN is down Condition Clear Alarm: A starSGSNGtpuPathFailureClear notification will be generated when the data path to the remote GSN becomes available')
starSGSNGtpuPathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1015)).setObjects(("STARENT-MIB", "starSGTPVpnName"), ("STARENT-MIB", "starSGTPServName"), ("STARENT-MIB", "starSGTPPeerAddr"), ("STARENT-MIB", "starSGTPPeerPort"), ("STARENT-MIB", "starSGTPSelfAddr"), ("STARENT-MIB", "starSGTPSelfPort"))
if mibBuilder.loadTexts: starSGSNGtpuPathFailureClear.setStatus('current')
if mibBuilder.loadTexts: starSGSNGtpuPathFailureClear.setDescription('The data path toward peer GSN or RNC is now available A starSGSNGtpuPathFailureClear notification is only sent for peers which had previously generated a starSGSNGtpuPathFailure notification.')
starMTP3LinkOutOfService = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1016)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7MTP3LinkSetId"), ("STARENT-MIB", "starSS7MTP3LinkId"))
if mibBuilder.loadTexts: starMTP3LinkOutOfService.setStatus('current')
if mibBuilder.loadTexts: starMTP3LinkOutOfService.setDescription('Message Transfer Part(MTP3) link out of service. Possibe reason: 1. Physical link is down or 2. Layer 2 (SSCOP/MTP2) is down 3. Operator action - link deactivated. Condition Clear Alarm: A starMTP3LinkInService notification will be generated when the link comes back in service')
starMTP3LinkInService = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1017)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7MTP3LinkSetId"), ("STARENT-MIB", "starSS7MTP3LinkId"))
if mibBuilder.loadTexts: starMTP3LinkInService.setStatus('current')
if mibBuilder.loadTexts: starMTP3LinkInService.setDescription('Message Transfer Part(MTP3) link is in service.')
starMTP3LinkSetUnAvailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1018)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7MTP3LinkSetId"))
if mibBuilder.loadTexts: starMTP3LinkSetUnAvailable.setStatus('current')
if mibBuilder.loadTexts: starMTP3LinkSetUnAvailable.setDescription('Message Transfer Part(MTP3) linkset Unavailable Possibe reason: 1. All the links in the linkset is down. 2. Operator action - linkset deactivated. Condition Clear Alarm: A starMTP3LinkSetAvailable notification will be generated when the previously down linkset is available')
starMTP3LinkSetAvailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1019)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7MTP3LinkSetId"))
if mibBuilder.loadTexts: starMTP3LinkSetAvailable.setStatus('current')
if mibBuilder.loadTexts: starMTP3LinkSetAvailable.setDescription('Message Transfer Part(MTP3) linkset Available. A starMTP3LinkSetAvailable notification is only generated for linksets which previously generated a starMTP3LinkSetUnavailable notification')
starSCTPAssociationFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1020)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"))
if mibBuilder.loadTexts: starSCTPAssociationFail.setStatus('current')
if mibBuilder.loadTexts: starSCTPAssociationFail.setDescription('M3UA Stream Control Transmission Protocol(SCTP) association establishment failure. Possibe reason: The peer is down. or network reachability to the remote server is down or the end point configuration is not correct at our end. Condition Clear Alarm: A starSCTPAssociationEstablished notification will be generated when the previously failed association is successfully established again')
starSCTPAssociationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1021)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"))
if mibBuilder.loadTexts: starSCTPAssociationEstablished.setStatus('current')
if mibBuilder.loadTexts: starSCTPAssociationEstablished.setDescription('M3UA Stream Control Transmission Protocol (SCTP) association establishment ok. Previoulsy there was a failure to establish the same association A starM3UASCTPAssociationEstabalish notification is only generated for peers which previously generated a starM3UASCRPAssociationFail notification')
starSCTPPathDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1022)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"), ("STARENT-MIB", "starSS7SCTPSelfAddr"), ("STARENT-MIB", "starSS7SCTPSelfPort"), ("STARENT-MIB", "starSS7SCTPPeerAddr"), ("STARENT-MIB", "starSS7SCTPPeerPort"), ("STARENT-MIB", "starSS7CauseString"))
if mibBuilder.loadTexts: starSCTPPathDown.setStatus('current')
if mibBuilder.loadTexts: starSCTPPathDown.setDescription('Stream Control Transmission Protoco(SCTP) path down. Possible reason: The peer is down. or network reachability to the remote server is down or the end point configuration is not correct at our end. Condition Clear Alarm: A starSCTPPathUp notification will be generated when the previously down path becomes usable')
starSCTPPathUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1023)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"), ("STARENT-MIB", "starSS7SCTPSelfAddr"), ("STARENT-MIB", "starSS7SCTPSelfPort"), ("STARENT-MIB", "starSS7SCTPPeerAddr"), ("STARENT-MIB", "starSS7SCTPPeerPort"), ("STARENT-MIB", "starSS7CauseString"))
if mibBuilder.loadTexts: starSCTPPathUp.setStatus('current')
if mibBuilder.loadTexts: starSCTPPathUp.setDescription('Stream Control Transmission Protocol(SCTP) path up. A starSCTPPathUp notification is only generated for peers which had previously generated a starSCTPPathDown notification')
starPortDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1024)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starPortType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starPortDown.setStatus('current')
if mibBuilder.loadTexts: starPortDown.setDescription('Port status is Down. This notification is only generated for physical port. Action to be Taken: No action required. The cause for the port down should be investigated.')
starPortUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1025)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starPortType"), ("STARENT-MIB", "starSlotSerialNumber"))
if mibBuilder.loadTexts: starPortUp.setStatus('current')
if mibBuilder.loadTexts: starPortUp.setDescription("Port status is up. This notification is only generated for physical port and a 'starPortDown' notification was previously generated. Action to be Taken: No action required")
starBSReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1026)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starPeerAddress"))
if mibBuilder.loadTexts: starBSReachable.setStatus('current')
if mibBuilder.loadTexts: starBSReachable.setDescription('The Base Station is reachable now. This can be result of Base Station Startup, etc. Action to be Taken: No Action Required')
starBSUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1027)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starPeerAddress"))
if mibBuilder.loadTexts: starBSUnreachable.setStatus('current')
if mibBuilder.loadTexts: starBSUnreachable.setDescription('A Base Station that the IMG communicates with is no longer reachable. Probable Cause: The Base Station has failed or is otherwise unavailable, or a network connectivity problem makes it unreachable. Action to be Taken: If the Base Station outage was unplanned, restart/reset the Base Station; verify network connectivity. Condition Clear Alarm: This condition is cleared by a starBSReachable notification.')
starSystemStartup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1028)).setObjects(("STARENT-MIB", "starChassisType"), ("STARENT-MIB", "starChassisDescription"), ("STARENT-MIB", "starChassisSWRevision"))
if mibBuilder.loadTexts: starSystemStartup.setStatus('current')
if mibBuilder.loadTexts: starSystemStartup.setDescription('The system has completed a reboot/startup')
starMTP3PCUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1029)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7MTP3LinkSetId"))
if mibBuilder.loadTexts: starMTP3PCUnavailable.setStatus('current')
if mibBuilder.loadTexts: starMTP3PCUnavailable.setDescription('Message Transfer Part(MTP3) Route to the Point code becomes unavailable. Possibe reason: 1. Associated linkset (all links within this linkset) becomes unavailable, hence route to the point code also becomes unvailable throught this linkset. 2. Remote peer is down Condition Clear Alarm: A starMTP3PCAvailable notification will be generated when the reemore peer identified by the point code becomes reachable')
starMTP3PCAvailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1030)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7MTP3LinkSetId"))
if mibBuilder.loadTexts: starMTP3PCAvailable.setStatus('current')
if mibBuilder.loadTexts: starMTP3PCAvailable.setDescription('Message Transfer Part(MTP3) Route to the Point code becomes available. Possible reason: 1. Associated linkset (one of the links in the linkset) becomes available. 2. Remote peer is up starMTP3PCAvailable is generated only when a previous starMTP3PCUnavailable is generated. ')
starSS7PCUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1031)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"))
if mibBuilder.loadTexts: starSS7PCUnavailable.setStatus('current')
if mibBuilder.loadTexts: starSS7PCUnavailable.setDescription('SS7 Point code is unavailable, all the routes to this point code is unavailable. Possibe reason: 1. All the routes (both M3UA and MTP3) to this point code becomes unavailable. Condition Clear Alarm: A starSS7PCAvailable notification will be generated when the reemore peer identified by the point code becomes reachable')
starSS7PCAvailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1032)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"))
if mibBuilder.loadTexts: starSS7PCAvailable.setStatus('current')
if mibBuilder.loadTexts: starSS7PCAvailable.setDescription('SS7 Point code is available, one of the routes to this point code is available. Possible reason: 1. One of the routes (either M3UA or MTP3) to this point code becomes available. starSS7PCAvailable is generated only when a previous starSS7PCUnavailable is generated. ')
starASNPCServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1033)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starASNPCServiceStart.setStatus('obsolete')
if mibBuilder.loadTexts: starASNPCServiceStart.setDescription('A WiMAX ASN Paging Controller (ASNPC) Service has started Action to be Taken: No action required')
starASNPCServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1034)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starASNPCServiceStop.setStatus('obsolete')
if mibBuilder.loadTexts: starASNPCServiceStop.setDescription('A WiMAX ASN Paging Controller (ASNPC) Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the ASNPC service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the ASNPC service is operational. Condition Clear Alarm: A starASNPCServiceStart notification will be generated when the service is restarted')
starDiameterCapabilitiesExchangeFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1035)).setObjects(("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterPeerAddr"), ("STARENT-MIB", "starDiameterEndpointName"), ("STARENT-MIB", "starDiameterECode"))
if mibBuilder.loadTexts: starDiameterCapabilitiesExchangeFailure.setStatus('current')
if mibBuilder.loadTexts: starDiameterCapabilitiesExchangeFailure.setDescription('Capability negotiations has failed and connections are down. Problem Cause: Due to an error in Capability Exchange Answer received from the peer the connections have been torn down. ')
starDiameterCapabilitiesExchangeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1036)).setObjects(("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterPeerAddr"), ("STARENT-MIB", "starDiameterEndpointName"))
if mibBuilder.loadTexts: starDiameterCapabilitiesExchangeSuccess.setStatus('current')
if mibBuilder.loadTexts: starDiameterCapabilitiesExchangeSuccess.setDescription('A diameter server is up. This notification is only generated for servers which have previously been declared unreachable.')
starSRPConnDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1037)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPConnDown.setStatus('current')
if mibBuilder.loadTexts: starSRPConnDown.setDescription('The connection to the standby SRP system is down. While this connection is down, the active system is operating without a standby and would be unable to perform an SRP switchover. Action to be Taken: Verify that the standby system is operational; verify the network between systems is operational. Clear Condition: This condition is cleared when the active system is reconnected to the standby SRP system. Condition Clear Alarm: A starSRPConnUp notification is generated when this condition is clear')
starSRPConnUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1038)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"))
if mibBuilder.loadTexts: starSRPConnUp.setStatus('current')
if mibBuilder.loadTexts: starSRPConnUp.setDescription('The connection to the standby SRP system is now up. This notification is only generated if a starSRPConnDown had previously been generated.')
starDiameterIpv6PeerDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1039)).setObjects(("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterPeerAddrIpv6"), ("STARENT-MIB", "starDiameterEndpointName"))
if mibBuilder.loadTexts: starDiameterIpv6PeerDown.setStatus('current')
if mibBuilder.loadTexts: starDiameterIpv6PeerDown.setDescription('A diameter peer is down. This diameter peer is reached using an IPv6 address. For IPv4-connected diameter peers, a starDiameterPeerDown notification would be generated. Problem Cause: The diameter peer has failed, or a network connectivity prevents reaching the peer. Condition Clear Alarm: A starDiameterPeerUp notification will be generated when the peer is up')
starDiameterIpv6PeerUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1040)).setObjects(("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterPeerAddrIpv6"), ("STARENT-MIB", "starDiameterEndpointName"))
if mibBuilder.loadTexts: starDiameterIpv6PeerUp.setStatus('current')
if mibBuilder.loadTexts: starDiameterIpv6PeerUp.setDescription('A diameter peer is up. This diameter peer is reached using an IPv6 address. This notification is only generated for peers which have previously been declared down. For IPv4-connected diameter peers, a starDiameterPeerUp notification would be generated.')
starIPMSServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1041)).setObjects(("STARENT-MIB", "starIPMSServerVpnName"), ("STARENT-MIB", "starIPMSServerAddr"))
if mibBuilder.loadTexts: starIPMSServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starIPMSServerUnreachable.setDescription('An IPMS server is unreachable. Probable Cause: The IPMS server has failed, or a network connectivity issue prevents reaching the server. Condition Clear Alarm: A starIPMSServerReachable notification will be generated when the server becomes reachable.')
starIPMSServerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1042)).setObjects(("STARENT-MIB", "starIPMSServerVpnName"), ("STARENT-MIB", "starIPMSServerAddr"))
if mibBuilder.loadTexts: starIPMSServerReachable.setStatus('current')
if mibBuilder.loadTexts: starIPMSServerReachable.setDescription('An IPMS server is reachable. A starIPMSServerReachable notification is only generated for servers which had previously been declared unreachable.')
starCertShortLifetime = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1043)).setObjects(("STARENT-MIB", "starCertSerialNumber"), ("STARENT-MIB", "starCertIssuer"), ("STARENT-MIB", "starCertExpiryTime"))
if mibBuilder.loadTexts: starCertShortLifetime.setStatus('current')
if mibBuilder.loadTexts: starCertShortLifetime.setDescription('A certificate is approaching its expiration. The certificate is still valid, but should be updated with a new certificate. Action to be Taken: A new certificate should be created and configured on the system.')
starCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1044)).setObjects(("STARENT-MIB", "starCertSerialNumber"), ("STARENT-MIB", "starCertIssuer"), ("STARENT-MIB", "starCertExpiryTime"))
if mibBuilder.loadTexts: starCertExpired.setStatus('current')
if mibBuilder.loadTexts: starCertExpired.setDescription('A certificate has expired. The certificate is no longer valid. Action to be Taken: A new certificate should be created and configured on the system. Condition Clear Alarm: A starCertValid notification is sent when a new, valid, certificate is configured.')
starCertValid = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1045)).setObjects(("STARENT-MIB", "starCertSerialNumber"), ("STARENT-MIB", "starCertIssuer"), ("STARENT-MIB", "starCertExpiryTime"))
if mibBuilder.loadTexts: starCertValid.setStatus('current')
if mibBuilder.loadTexts: starCertValid.setDescription('A valid certificate has been configured. This notification is only generated if a starCertExpired had been previously generated.')
starFTPPushFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1046)).setObjects(("STARENT-MIB", "starFTPServVpnName"), ("STARENT-MIB", "starFTPServIpAddr"), ("STARENT-MIB", "starFileName"), ("STARENT-MIB", "starFileApplication"))
if mibBuilder.loadTexts: starFTPPushFail.setStatus('current')
if mibBuilder.loadTexts: starFTPPushFail.setDescription('An FTP push operation has failed for the specified file to the specified server.')
starFTPServSwitch = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1047)).setObjects(("STARENT-MIB", "starFTPServVpnName"), ("STARENT-MIB", "starFTPServIpAddr"), ("STARENT-MIB", "starFTPServIpAddr"), ("STARENT-MIB", "starFileApplication"))
if mibBuilder.loadTexts: starFTPServSwitch.setStatus('current')
if mibBuilder.loadTexts: starFTPServSwitch.setDescription('An FTP server switchover has been performed; that is, the system has determined that an external FTP server is unreachable, and is not using an alternate FTP server')
starSDHSectionDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1048)).setObjects(("STARENT-MIB", "starSDHSlot"), ("STARENT-MIB", "starSDHPort"), ("STARENT-MIB", "starSDHOperState"))
if mibBuilder.loadTexts: starSDHSectionDown.setStatus('current')
if mibBuilder.loadTexts: starSDHSectionDown.setDescription('The SDH interface on this port is down. The starSDHOperState identifies the specific issue. Probable Cause: Action to be Taken: Condition Clear Alarm: This condition is cleared by a starSDHSectionUp notification,')
starSDHSectionUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1049)).setObjects(("STARENT-MIB", "starSDHSlot"), ("STARENT-MIB", "starSDHPort"))
if mibBuilder.loadTexts: starSDHSectionUp.setStatus('current')
if mibBuilder.loadTexts: starSDHSectionUp.setDescription('The SDH interface on this port is now up. A starSDHSectionUp notification is only generated if a starSDHSectionDown was previously generated for this port.')
starSDHPathHopDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1050)).setObjects(("STARENT-MIB", "starSDHPathSlot"), ("STARENT-MIB", "starSDHPathPort"), ("STARENT-MIB", "starSDHPathNum"), ("STARENT-MIB", "starSDHPathOperState"))
if mibBuilder.loadTexts: starSDHPathHopDown.setStatus('current')
if mibBuilder.loadTexts: starSDHPathHopDown.setDescription('The identified SDH Path is down. The value of starSDHPathOperState identifies the specific failure bits.')
starSDHPathHopUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1051)).setObjects(("STARENT-MIB", "starSDHPathSlot"), ("STARENT-MIB", "starSDHPathPort"), ("STARENT-MIB", "starSDHPathNum"))
if mibBuilder.loadTexts: starSDHPathHopUp.setStatus('current')
if mibBuilder.loadTexts: starSDHPathHopUp.setDescription('The identified SDH Path is up.')
starSDHLopDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1052)).setObjects(("STARENT-MIB", "starE1TribSlot"), ("STARENT-MIB", "starE1TribPort"), ("STARENT-MIB", "starE1TribPath"), ("STARENT-MIB", "starE1TribTug2"), ("STARENT-MIB", "starE1TribTu12"), ("STARENT-MIB", "starE1TribOperStateLOP"))
if mibBuilder.loadTexts: starSDHLopDown.setStatus('current')
if mibBuilder.loadTexts: starSDHLopDown.setDescription('The identified E1 Tributary on this port is down. The value of starE1TribOperStateLOP identifies the specific failure bits. Probable Cause: Action to be Taken: Condition Clear Alarm: This condition is cleared by a starSDHLopDown notification,')
starSDHLopUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1053)).setObjects(("STARENT-MIB", "starE1TribSlot"), ("STARENT-MIB", "starE1TribPort"), ("STARENT-MIB", "starE1TribPath"), ("STARENT-MIB", "starE1TribTug2"), ("STARENT-MIB", "starE1TribTu12"))
if mibBuilder.loadTexts: starSDHLopUp.setStatus('current')
if mibBuilder.loadTexts: starSDHLopUp.setDescription('The identified E1 Tributary on this port is now up. A starE1TributaryUp notification is only generated if a starSDHLopDown was previously generated for this E1 tributary.')
starIMSUEServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1054)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starIMSUEServiceStart.setStatus('current')
if mibBuilder.loadTexts: starIMSUEServiceStart.setDescription('A IMSUE Service has started Action to be Taken: No action required')
starIMSUEServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1055)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starIMSUEServiceStop.setStatus('current')
if mibBuilder.loadTexts: starIMSUEServiceStop.setDescription('A IMSUE Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the IMSUE service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the IMSUE service is operational. Condition Clear Alarm: A starIMSUEServiceStart notification will be generated when the service is restarted')
starSS7PCCongested = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1056)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7CongLevel"), ("STARENT-MIB", "starSS7LocalCong"))
if mibBuilder.loadTexts: starSS7PCCongested.setStatus('current')
if mibBuilder.loadTexts: starSS7PCCongested.setDescription('SS7 Point code is congested, all the routes to this point-code is congested. Possible reason: 1. All the routes (both M3UA and MTP3) to this Point Code have become congested. Condition Clear Alarm: A starSS7PCCongestionCleared notification will be generated when the congestion gets cleared for any one of the routes ')
starSS7PCCongestionCleared = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1057)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7CongLevel"), ("STARENT-MIB", "starSS7LocalCong"))
if mibBuilder.loadTexts: starSS7PCCongestionCleared.setStatus('current')
if mibBuilder.loadTexts: starSS7PCCongestionCleared.setDescription('SS7 Point code Congestion gets cleared, one of the routes to this point-code is cleared from congestion. Possible reason: 1. One of the routes (either M3UA or MTP3) to this Point Code has resumed from congestion. starSS7PCCongestionCleared is generated only when a previous starSS7PCCongested is generated. ')
starPHSGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1058)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPHSGWServiceStart.setStatus('obsolete')
if mibBuilder.loadTexts: starPHSGWServiceStart.setDescription('A PHS-GW Service has started Action to be Taken: No action required')
starPHSGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1059)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPHSGWServiceStop.setStatus('obsolete')
if mibBuilder.loadTexts: starPHSGWServiceStop.setDescription('A PHS-GW Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the PHS-GW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PHS-GW service is operational. Condition Clear Alarm: A starPHSGWServiceStart notification will be generated when the service is restarted')
starGPRSServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1060)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGPRSServiceStart.setStatus('current')
if mibBuilder.loadTexts: starGPRSServiceStart.setDescription('A GPRS Service has started Action to be Taken: No action required')
starGPRSServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1061)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGPRSServiceStop.setStatus('current')
if mibBuilder.loadTexts: starGPRSServiceStop.setDescription('A GPRS Service has stopped. Probable Cause: In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration.This can also happen due to some misconfiguration of the service parameters. Action to be Taken: If the GPRS service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the GPRS service is operational. Condition Clear Alarm: A starGPRSServiceStart notification will be generated when the service is restarted')
starGPRSNseDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1062)).setObjects(("STARENT-MIB", "starGPRSNsei"))
if mibBuilder.loadTexts: starGPRSNseDown.setStatus('current')
if mibBuilder.loadTexts: starGPRSNseDown.setDescription('Network Service Entity (NSE) is down. Possible reason: The Last NSVC(Network Service virtual circuit in the NSE is down. Condition Clear Alarm: A starGPRSNseUp will be generated when at least one NSVC in the NSE comes up')
starGPRSNseUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1063)).setObjects(("STARENT-MIB", "starGPRSNsei"))
if mibBuilder.loadTexts: starGPRSNseUp.setStatus('current')
if mibBuilder.loadTexts: starGPRSNseUp.setDescription('Network Service Entity (NSE) is up. Possible reason: The First NSVC(Network Service virtual circuit in the NSE is up. starGPRSNseUp is generated only when a previous starGPRSNseDown has been generated')
starGPRSNsvcDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1064)).setObjects(("STARENT-MIB", "starGPRSNsei"), ("STARENT-MIB", "starGPRSNsvci"))
if mibBuilder.loadTexts: starGPRSNsvcDown.setStatus('current')
if mibBuilder.loadTexts: starGPRSNsvcDown.setDescription('Network Service Entity Virtual Circuit (NSVC) is down. Possible reasons: 1) NS_ALIVE heartbeat messages sent from the Serving GPRS support Node (SGSN) were not acknowledged by the Base Station Subsystem(BSS) for a configured number of maximum retries. This trap is generated only when an NSVC goes down due to reasons other than physical port failure. A separate trap is generated for a physical port failure event. Condition Clear Alarm: A starGPRSNsvcUp will be generated when the NSVC comes up')
starGPRSNsvcUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1065)).setObjects(("STARENT-MIB", "starGPRSNsei"), ("STARENT-MIB", "starGPRSNsvci"))
if mibBuilder.loadTexts: starGPRSNsvcUp.setStatus('current')
if mibBuilder.loadTexts: starGPRSNsvcUp.setDescription('An Network Service Entity Virtual Circuit (NSVC) comes up An starGPRSNsvcUp trap is generated only when a previous starGPRSNsvcDown was generated')
starGPRSBvcDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1066)).setObjects(("STARENT-MIB", "starGPRSNsei"), ("STARENT-MIB", "starGPRSBvci"))
if mibBuilder.loadTexts: starGPRSBvcDown.setStatus('current')
if mibBuilder.loadTexts: starGPRSBvcDown.setDescription('Base Station Subsystem (BSS) GPRS (General Packet Radio Service) Protocol (BSSGP) Virtual Circuit (BVC) is Down. Possible reason: 1) ALL Network Service Entity Virtual Circuit (NSVC) associated with this BVC are down Condition Clear Alarm: A starGPRSBvcUp will be generated when the BVC is available')
starGPRSBvcUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1067)).setObjects(("STARENT-MIB", "starGPRSNsei"), ("STARENT-MIB", "starGPRSBvci"))
if mibBuilder.loadTexts: starGPRSBvcUp.setStatus('current')
if mibBuilder.loadTexts: starGPRSBvcUp.setDescription('Base Station Subsystem (BSS) GPRS ((General Packet Radio Service) Protocol (BSSGP) Virtual Circuit (BVC) is Up Possible reasons: 1) Atleast one NSVC associated with the BVC becomes available. starGPRSBvcUp is generated only when a previous starGPRSBvcDown has been generated. ')
starSDHE1TribDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1068)).setObjects(("STARENT-MIB", "starE1TribSlot"), ("STARENT-MIB", "starE1TribPort"), ("STARENT-MIB", "starE1TribPath"), ("STARENT-MIB", "starE1TribTug2"), ("STARENT-MIB", "starE1TribTu12"), ("STARENT-MIB", "starE1TribOperState"))
if mibBuilder.loadTexts: starSDHE1TribDown.setStatus('current')
if mibBuilder.loadTexts: starSDHE1TribDown.setDescription('The identified E1 Tributary on this port is down. Probable Cause: Action to be Taken: Condition Clear Alarm: This condition is cleared by a starSDHTugUp notification,')
starSDHE1TribUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1069)).setObjects(("STARENT-MIB", "starE1TribSlot"), ("STARENT-MIB", "starE1TribPort"), ("STARENT-MIB", "starE1TribPath"), ("STARENT-MIB", "starE1TribTug2"), ("STARENT-MIB", "starE1TribTu12"))
if mibBuilder.loadTexts: starSDHE1TribUp.setStatus('current')
if mibBuilder.loadTexts: starSDHE1TribUp.setDescription('The identified E1 Tributary on this port is up.')
starSDHFractE1LMIDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1070)).setObjects(("STARENT-MIB", "starFractE1TribSlot"), ("STARENT-MIB", "starFractE1TribPort"), ("STARENT-MIB", "starFractE1TribPath"), ("STARENT-MIB", "starFractE1TribTug2"), ("STARENT-MIB", "starFractE1TribTu12"), ("STARENT-MIB", "starFractE1TribTimeslots"))
if mibBuilder.loadTexts: starSDHFractE1LMIDown.setStatus('current')
if mibBuilder.loadTexts: starSDHFractE1LMIDown.setDescription('The identified fractional E1 Tributary on this port is down.')
starSDHFractE1LMIUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1071)).setObjects(("STARENT-MIB", "starFractE1TribSlot"), ("STARENT-MIB", "starFractE1TribPort"), ("STARENT-MIB", "starFractE1TribPath"), ("STARENT-MIB", "starFractE1TribTug2"), ("STARENT-MIB", "starFractE1TribTu12"), ("STARENT-MIB", "starFractE1TribTimeslots"))
if mibBuilder.loadTexts: starSDHFractE1LMIUp.setStatus('current')
if mibBuilder.loadTexts: starSDHFractE1LMIUp.setDescription('The identified fractional E1 Tributary on this port is up.')
starPHSPCServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1072)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPHSPCServiceStart.setStatus('obsolete')
if mibBuilder.loadTexts: starPHSPCServiceStart.setDescription('A PHS-PC Service has started Action to be Taken: No action required')
starPHSPCServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1073)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPHSPCServiceStop.setStatus('obsolete')
if mibBuilder.loadTexts: starPHSPCServiceStop.setDescription('A PHS-PC Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the PHS-PC service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PHS-PC service is operational. Condition Clear Alarm: A starPHSPCServiceStart notification will be generated when the service is restarted')
starM3UAPSPCongested = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1074)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7CongLevel"))
if mibBuilder.loadTexts: starM3UAPSPCongested.setStatus('current')
if mibBuilder.loadTexts: starM3UAPSPCongested.setDescription('Peer Server Process (PSP) link is congested, when the congestion queue size rises above the threshold limit. Possible reason: 1. No Stream Control Transmission Protocol (SCTP) Acknowledgement from peer end due to packet loss 2. Acknowledgement with zero window size Condition Clear Alarm: A starM3UAPSPCongestionCleared notification will be generated when the congestion queue size goes below the threshold limit ')
starM3UAPSPCongestionCleared = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1075)).setObjects(("STARENT-MIB", "starSS7rdId"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7CongLevel"))
if mibBuilder.loadTexts: starM3UAPSPCongestionCleared.setStatus('current')
if mibBuilder.loadTexts: starM3UAPSPCongestionCleared.setDescription('Peer Server Process (PSP) link Congestion gets cleared, when the congestion queue size goes below the threshold limit. starM3UAPSPCongestionCleared is generated only when a previous starM3UAPSPCongested is generated. ')
starStorageFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1076)).setObjects(("STARENT-MIB", "starStorageSlot"), ("STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starStorageFailed.setStatus('current')
if mibBuilder.loadTexts: starStorageFailed.setDescription('The specified storage device has failed. This storage device is now out of service and cannot be used to store additional data. This notification is currently only generated for failures on the hard drive attached to the SMC card. Probable Cause: A hardware failure on the device; a hardware failure on the card to which the device is attached. Action to be Taken: Replace the card Condition Clear Alarm: A starCardRemoved notification will be generated when the card is removed from the chassis.')
starRaidFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1077)).setObjects(("STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starRaidFailed.setStatus('current')
if mibBuilder.loadTexts: starRaidFailed.setDescription('The specified raid array has failed. The raid array can no longer be used to store data. Probable Cause: Hardware failure(s) on the devices within the raid array; Hardware failure(s) on the card(s) to which the devices are attached; the removal of the cards containing devices in the array; operator action which disabled the raid array. Condition Clear Alarm: a starRaidStarted notification will be generated when the raid array is online.')
starRaidStarted = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1078)).setObjects(("STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starRaidStarted.setStatus('current')
if mibBuilder.loadTexts: starRaidStarted.setDescription('The specific raid array has resumed operation. This notification is only generated if a starRaidFailed notification was previously generated for this array.')
starRaidDegraded = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1079)).setObjects(("STARENT-MIB", "starStorageName"), ("STARENT-MIB", "starStorageSlot"), ("STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starRaidDegraded.setStatus('current')
if mibBuilder.loadTexts: starRaidDegraded.setDescription('The specified raid array is running in a degraded state. This typically means one of the member devices has failed or become unavailable. The raid array continues to function and can read/store data, but may not be operating in a redundant manner. Probable Cause: Hardware failure(s) on the devices within the raid array; Hardware failure(s) on the card(s) to which the devices are attached; the removal of the cards containing devices in the array; operator action which disabled the raid array. The first variable binding, starStorageName is indicating the raid array name; The second variable binding, starStorageSlot is the disk card number, in which the fail happens; The third varbind, which is also the second starStorageName, is the name of the disk that the fail happens. Condition Clear Alarm: a starRaidRecovered notification will be generated when the raid array is fully recovered.')
starRaidRecovered = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1080)).setObjects(("STARENT-MIB", "starStorageName"), ("STARENT-MIB", "starStorageSlot"), ("STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starRaidRecovered.setStatus('current')
if mibBuilder.loadTexts: starRaidRecovered.setDescription('The specific raid array has been recovered and is running in its normal, redundant state. This notification is only generated if a starRaidDegraded notification was previously generated for this array. As to the variable bindings, please refer to the trap starRaidDegraded. ')
starPGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1081)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPGWServiceStart.setStatus('current')
if mibBuilder.loadTexts: starPGWServiceStart.setDescription('A Packet Data Network Gateway (PGW) Service has started. Action to be Taken: No action required')
starPGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1082)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPGWServiceStop.setStatus('current')
if mibBuilder.loadTexts: starPGWServiceStop.setDescription('A Packet Data Network Gateway (PGN) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the PGW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PGW service is operational. Condition Clear Alarm: A starPGWServiceStart notification will be generated when the service is restarted')
starSGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1083)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGWServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSGWServiceStart.setDescription('A Serving Gateway (SGW) Service has started. Action to be Taken: No action required')
starSGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1084)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGWServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSGWServiceStop.setDescription('A Serving Gateway (SGW) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the SGW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the SGW service is operational. Condition Clear Alarm: A starSGWServiceStart notification will be generated when the service is restarted')
starEGTPServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1085)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starEGTPServiceStart.setStatus('current')
if mibBuilder.loadTexts: starEGTPServiceStart.setDescription('An Evolved GPRS Tunneling Protocol (EGTP) Service has started. Action to be Taken: No action required')
starEGTPServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1086)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starEGTPServiceStop.setStatus('current')
if mibBuilder.loadTexts: starEGTPServiceStop.setDescription('An Evolved GPRS Tunneling Protocol (EGTP) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the EGTP service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the EGTP service is operational. Condition Clear Alarm: A starEGTPServiceStart notification will be generated when the service is restarted')
starLMAServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1087)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starLMAServiceStart.setStatus('current')
if mibBuilder.loadTexts: starLMAServiceStart.setDescription('A Local Mobility Anchor (LMA) Service has started. Action to be Taken: No action required')
starLMAServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1088)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starLMAServiceStop.setStatus('current')
if mibBuilder.loadTexts: starLMAServiceStop.setDescription('A Local Mobility Anchor (LMA) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the LMA service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the LMA service is operational. Condition Clear Alarm: A starLMAServiceStart notification will be generated when the service is restarted')
starMAGServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1089)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMAGServiceStart.setStatus('current')
if mibBuilder.loadTexts: starMAGServiceStart.setDescription('A Mobile Access Gateway (MAG) Service has started. Action to be Taken: No action required')
starMAGServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1090)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMAGServiceStop.setStatus('current')
if mibBuilder.loadTexts: starMAGServiceStop.setDescription('A MAG Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the MAG service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the MAG service is operational. Condition Clear Alarm: A starMAGServiceStart notification will be generated when the service is restarted')
starMMEServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1091)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMMEServiceStart.setStatus('current')
if mibBuilder.loadTexts: starMMEServiceStart.setDescription('A Mobility Management Entity (MME) Service has started. Action to be Taken: No action required')
starMMEServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1092)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMMEServiceStop.setStatus('current')
if mibBuilder.loadTexts: starMMEServiceStop.setDescription('A Mobility Management Entity (MME) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the MME service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the MME service is operational. Condition Clear Alarm: A starMMEServiceStart notification will be generated when the service is restarted')
starHSGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1093)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHSGWServiceStart.setStatus('current')
if mibBuilder.loadTexts: starHSGWServiceStart.setDescription('A HRPD Serving Gateway (HSGW) Service has started. Action to be Taken: No action required')
starHSGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1094)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHSGWServiceStop.setStatus('current')
if mibBuilder.loadTexts: starHSGWServiceStop.setDescription('A HRPD Serving Gateway (HSGW) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the HSGW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the HSGW service is operational. Condition Clear Alarm: A starHSGWServiceStart notification will be generated when the service is restarted')
starCPUBusyClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1095)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUBusyClear.setStatus('current')
if mibBuilder.loadTexts: starCPUBusyClear.setDescription('The CPU is no longer busy.')
starCPUMemoryLowClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1096)).setObjects(("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starCPUMemoryLowClear.setStatus('current')
if mibBuilder.loadTexts: starCPUMemoryLowClear.setDescription('The CPU is no longer experiencing a low memory condition.')
starFNGServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1097)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starFNGServiceStart.setStatus('current')
if mibBuilder.loadTexts: starFNGServiceStart.setDescription('A FNG Service has started Action to be Taken: No action required')
starFNGServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1098)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starFNGServiceStop.setStatus('current')
if mibBuilder.loadTexts: starFNGServiceStop.setDescription('A FNG Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs) to support the running configuration. Action to be Taken: If the FNG service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the FNG service is operational. Condition Clear Alarm: A starFNGServiceStart notification will be generated when the service is restarted')
starManagerRestart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1099)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"))
if mibBuilder.loadTexts: starManagerRestart.setStatus('current')
if mibBuilder.loadTexts: starManagerRestart.setDescription('The identified manager task has been restarted.')
starConfigurationUpdate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1100))
if mibBuilder.loadTexts: starConfigurationUpdate.setStatus('current')
if mibBuilder.loadTexts: starConfigurationUpdate.setDescription('The configuration of the chassis has been changed. This notification is generated based on a periodic polling of the chassis, it is not real-time generated based on individual changes. The configuration change could have been made via CLI sessions, CORBA management operations, or other methods. This notification is not generated by default; it is only generated if the configuration polling mechanism is specifically enabled.')
starPDGServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1101)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPDGServiceStart.setStatus('current')
if mibBuilder.loadTexts: starPDGServiceStart.setDescription('A PDG Service has started Action to be Taken: No action required')
starPDGServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1102)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPDGServiceStop.setStatus('current')
if mibBuilder.loadTexts: starPDGServiceStop.setDescription('A PDG Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs) to support the running configuration. Action to be Taken: If the PDG service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PDG service is operational. Condition Clear Alarm: A starPDGServiceStart notification will be generated when the service is restarted')
starDynPkgLoadError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1103)).setObjects(("STARENT-MIB", "starDynPkgFilename"), ("STARENT-MIB", "starDynCFErrorCode"))
if mibBuilder.loadTexts: starDynPkgLoadError.setStatus('current')
if mibBuilder.loadTexts: starDynPkgLoadError.setDescription('The Dynamic rater package error displayed with an error code. Action to be Taken: If no or invalid rater.pkg file is there in the specified directory then Place a rater_f.pkg file in the directory and give an upgrade command or place a valid Rater.pkg file and load the SRDBs by killing them all. Condition Clear Alarm: This condition is cleared by a starDynPkgLoadErrorClear notification')
starDynPkgLoadErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1104)).setObjects(("STARENT-MIB", "starDynPkgFilename"), ("STARENT-MIB", "starDynCFErrorCode"))
if mibBuilder.loadTexts: starDynPkgLoadErrorClear.setStatus('current')
if mibBuilder.loadTexts: starDynPkgLoadErrorClear.setDescription('The Dynamic rater package error removed. Action to be Taken: No action required')
starDynPkgUpgradeError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1105)).setObjects(("STARENT-MIB", "starDynPkgUpgradeFilename"), ("STARENT-MIB", "starDynCFUpgradeErrorCode"))
if mibBuilder.loadTexts: starDynPkgUpgradeError.setStatus('current')
if mibBuilder.loadTexts: starDynPkgUpgradeError.setDescription('The Dynamic rater package error displayed with an error code. Action to be Taken: Place a valid rater_f.pkg file in the directory and give an upgrade command. Condition Clear Alarm: This condition is cleared by a starDynPkgUpgradeErrorClear notification')
starDynPkgUpgradeErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1106)).setObjects(("STARENT-MIB", "starDynPkgUpgradeFilename"), ("STARENT-MIB", "starDynCFUpgradeErrorCode"))
if mibBuilder.loadTexts: starDynPkgUpgradeErrorClear.setStatus('current')
if mibBuilder.loadTexts: starDynPkgUpgradeErrorClear.setDescription('The Dynamic Rater package error removed. Action to be Taken: No action required')
starCSCFPeerServerUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1107)).setObjects(("STARENT-MIB", "starCSCFPeerServerVpnName"), ("STARENT-MIB", "starCSCFPeerServerSvcName"), ("STARENT-MIB", "starCSCFPeerServerName"))
if mibBuilder.loadTexts: starCSCFPeerServerUnavailable.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerUnavailable.setDescription('Peer server is unavailable')
starCSCFPeerServerOutofService = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1108)).setObjects(("STARENT-MIB", "starCSCFPeerServerVpnName"), ("STARENT-MIB", "starCSCFPeerServerSvcName"), ("STARENT-MIB", "starCSCFPeerServerName"))
if mibBuilder.loadTexts: starCSCFPeerServerOutofService.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerOutofService.setDescription('Peer server is out-of-service')
starCSCFPeerServerInService = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1109)).setObjects(("STARENT-MIB", "starCSCFPeerServerVpnName"), ("STARENT-MIB", "starCSCFPeerServerSvcName"), ("STARENT-MIB", "starCSCFPeerServerName"))
if mibBuilder.loadTexts: starCSCFPeerServerInService.setStatus('current')
if mibBuilder.loadTexts: starCSCFPeerServerInService.setDescription('Peer server unavailable and/or out of service condition cleared')
starServiceLossPTACsClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1110)).setObjects(("STARENT-MIB", "starCardMode"))
if mibBuilder.loadTexts: starServiceLossPTACsClear.setStatus('current')
if mibBuilder.loadTexts: starServiceLossPTACsClear.setDescription('Service Loss condition is no longer valid for PAC/PSC/TACs.')
starServiceLossLCClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1111)).setObjects(("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starServiceLossLCClear.setStatus('current')
if mibBuilder.loadTexts: starServiceLossLCClear.setDescription('Service Loss condition is no longer valid for LC.')
starEgtpcPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1112)).setObjects(("STARENT-MIB", "starEGTPVpnName"), ("STARENT-MIB", "starEGTPServName"), ("STARENT-MIB", "starEGTPInterfaceType"), ("STARENT-MIB", "starEGTPSelfAddr"), ("STARENT-MIB", "starEGTPPeerAddr"), ("STARENT-MIB", "starEGTPPeerOldRstCnt"), ("STARENT-MIB", "starEGTPPeerNewRstCnt"), ("STARENT-MIB", "starEGTPPeerSessCnt"), ("STARENT-MIB", "starEGTPFailureReason"))
if mibBuilder.loadTexts: starEgtpcPathFailure.setStatus('current')
if mibBuilder.loadTexts: starEgtpcPathFailure.setDescription('EGTP Control Path Failure. No response received for GTPV2 request sent from MME or SGW or PGW. Possibe reason: Remote peer MME or SGW or PGW is down Condition Clear Alarm: A StarEgtpcPathFailureClear notification will be generated when the control path to the remote peer MME or SGW or PGW becomes available')
starEgtpcPathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1113)).setObjects(("STARENT-MIB", "starEGTPVpnName"), ("STARENT-MIB", "starEGTPServName"), ("STARENT-MIB", "starEGTPInterfaceType"), ("STARENT-MIB", "starEGTPSelfAddr"), ("STARENT-MIB", "starEGTPPeerAddr"), ("STARENT-MIB", "starEGTPPeerOldRstCnt"), ("STARENT-MIB", "starEGTPPeerSessCnt"))
if mibBuilder.loadTexts: starEgtpcPathFailureClear.setStatus('current')
if mibBuilder.loadTexts: starEgtpcPathFailureClear.setDescription('EGTP Control Path Failure condition is no longer valid.')
starCscfSessResourceCongestion = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1114)).setObjects(("STARENT-MIB", "starSmgrId"), ("STARENT-MIB", "starCongestionPolicy"), ("STARENT-MIB", "starCscfSessCongestionResourceType"))
if mibBuilder.loadTexts: starCscfSessResourceCongestion.setStatus('current')
if mibBuilder.loadTexts: starCscfSessResourceCongestion.setDescription('A congestion condition has occurred at Session Manager for Cscf Service. Probable Cause: This is the result of an operator-configured congestion threshold being reached for Cscf Service at Session Manager. This can be due to high usage of the resource being monitored which indicates that the IMG is reaching its peak capacity, or could be caused by the incorrect configuration of the congestion thresholds. Actions to be Taken: Verify that the congestion thresholds are correct; if the congested state is seem repeatedly, or for sustained periods of time, additional system capacity may need to be brought online. This system is cleared when the use of the specific resource falls below the configured limit. Condition Clear Alarm: A starCscfSessResourceCongestionClear notification is sent when there are no congestion conditions for cscf service in that Session Manager Instance')
starCscfSessResourceCongestionClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1115)).setObjects(("STARENT-MIB", "starSmgrId"))
if mibBuilder.loadTexts: starCscfSessResourceCongestionClear.setStatus('current')
if mibBuilder.loadTexts: starCscfSessResourceCongestionClear.setDescription('A congestion condition has cleared at Session Manager for Cscf service')
starOSPFv3NeighborDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1116)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starInterfaceName"), ("STARENT-MIB", "starInterfaceIPAddress"), ("STARENT-MIB", "starOSPFNeighborRouterID"), ("STARENT-MIB", "starOSPFFromState"), ("STARENT-MIB", "starOSPFToState"))
if mibBuilder.loadTexts: starOSPFv3NeighborDown.setStatus('current')
if mibBuilder.loadTexts: starOSPFv3NeighborDown.setDescription('An OSPFv3 neighbor is down. Condition Clear Alarm: A starOSPFv3NeighborFull notification will be generated when the neighbor is restored.')
starOSPFv3NeighborFull = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1117)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starInterfaceName"), ("STARENT-MIB", "starInterfaceIPAddress"), ("STARENT-MIB", "starOSPFNeighborRouterID"))
if mibBuilder.loadTexts: starOSPFv3NeighborFull.setStatus('current')
if mibBuilder.loadTexts: starOSPFv3NeighborFull.setDescription('An OSPFv3 neighbor is full. A starOSPFv3NeighborFull notification is only sent for neighbors which had previous been declared down via a starOSPFv3NeighborDown notification.')
starServiceLossSPIOClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1118))
if mibBuilder.loadTexts: starServiceLossSPIOClear.setStatus('current')
if mibBuilder.loadTexts: starServiceLossSPIOClear.setDescription('Service Loss condition is no longer valid for SPIO.')
starEgtpuPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1119)).setObjects(("STARENT-MIB", "starEGTPVpnName"), ("STARENT-MIB", "starEGTPServName"), ("STARENT-MIB", "starEGTPSelfAddr"), ("STARENT-MIB", "starEGTPPeerAddr"), ("STARENT-MIB", "starEGTPSelfPort"), ("STARENT-MIB", "starEGTPPeerPort"), ("STARENT-MIB", "starEGTPPeerSessCnt"))
if mibBuilder.loadTexts: starEgtpuPathFailure.setStatus('current')
if mibBuilder.loadTexts: starEgtpuPathFailure.setDescription('No response received for GTP-U ECHO requests. Data path failure detected towards peer EPC Node. Check if the peer RNC or GSN is up Possible reason: Remote EPC node is down Condition Clear Alarm: A starEgtpuPathFailureClear notification will be generated when the data path towards the peer node is available')
starEgtpuPathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1120)).setObjects(("STARENT-MIB", "starEGTPVpnName"), ("STARENT-MIB", "starEGTPServName"), ("STARENT-MIB", "starEGTPSelfAddr"), ("STARENT-MIB", "starEGTPPeerAddr"), ("STARENT-MIB", "starEGTPSelfPort"), ("STARENT-MIB", "starEGTPPeerPort"))
if mibBuilder.loadTexts: starEgtpuPathFailureClear.setStatus('current')
if mibBuilder.loadTexts: starEgtpuPathFailureClear.setDescription('The data path to the peer EPC node which was down is now available A starEgtpuPathFailureClear notification is only generated for nodes which had previously generated a starEgtpuPathFailure notification')
starStorageServerCDRLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1121)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starGSSCDRLossConfigured"), ("STARENT-MIB", "starGSSCDRLossMeasured"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"))
if mibBuilder.loadTexts: starStorageServerCDRLoss.setStatus('current')
if mibBuilder.loadTexts: starStorageServerCDRLoss.setDescription('GTPP Storage Server is experiencing CDR Loss greater than the configured threshold value at the GSS. Note that this is an external server, not part of the ST16.')
starHNBGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1122)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHNBGWServiceStart.setStatus('current')
if mibBuilder.loadTexts: starHNBGWServiceStart.setDescription('A Home Node B Gateway (HNB GW) Service has started. Action to be Taken: No action required')
starHNBGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1123)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHNBGWServiceStop.setStatus('current')
if mibBuilder.loadTexts: starHNBGWServiceStop.setDescription('A Home Node B Gateway (PGN) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the HNB GW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the HNB GW service is operational. Condition Clear Alarm: A starHNBGWServiceStart notification will be generated when the service is restarted')
starSystemReboot = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1124)).setObjects(("STARENT-MIB", "starChassisType"), ("STARENT-MIB", "starChassisDescription"), ("STARENT-MIB", "starChassisSWRevision"))
if mibBuilder.loadTexts: starSystemReboot.setStatus('current')
if mibBuilder.loadTexts: starSystemReboot.setDescription('The system has rebooted by the operator. If successful, a subsequent starSystemStartup trap is typically generated. Action to be Taken: No action required. If the reboot was not scheduled the admin logs can be examined to determine who invoked the reboot operation.')
starLicenseAboutToExpire = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1125)).setObjects(("STARENT-MIB", "starLicenseKey"), ("STARENT-MIB", "starLicenseExpiryDate"), ("STARENT-MIB", "starLicenseDaysRemaining"))
if mibBuilder.loadTexts: starLicenseAboutToExpire.setStatus('current')
if mibBuilder.loadTexts: starLicenseAboutToExpire.setDescription('A license is about to expire. Action to be Taken: A new license should be created and configured on the system before the grace period is over.')
starLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1126)).setObjects(("STARENT-MIB", "starLicenseKey"), ("STARENT-MIB", "starLicenseExpiryDate"), ("STARENT-MIB", "starLicenseDaysAfterExpiry"))
if mibBuilder.loadTexts: starLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: starLicenseExpired.setDescription('A license is in the grace period and should be updated with a new license. Action to be Taken: A new license should be created and configured on the system.')
starPCCPolicyServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1127)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPCCPolicyServiceStart.setStatus('current')
if mibBuilder.loadTexts: starPCCPolicyServiceStart.setDescription('A PCC-Policy Service has started Action to be Taken: No action required')
starPCCPolicyServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1128)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPCCPolicyServiceStop.setStatus('current')
if mibBuilder.loadTexts: starPCCPolicyServiceStop.setDescription('A PCC-Policy Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the PCC-Policy service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PCC-Policy service is operational. Condition Clear Alarm: A starPCCPolicyServiceStart notification will be generated when the service is restarted')
starPCCQuotaServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1129)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPCCQuotaServiceStart.setStatus('current')
if mibBuilder.loadTexts: starPCCQuotaServiceStart.setDescription('A PCC-Quota Service has started Action to be Taken: No action required')
starPCCQuotaServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1130)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPCCQuotaServiceStop.setStatus('current')
if mibBuilder.loadTexts: starPCCQuotaServiceStop.setDescription('A PCC-Quota Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the PCC-Quota service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PCC-Quota service is operational. Condition Clear Alarm: A starPCCQuotaServiceStart notification will be generated when the service is restarted')
starPCCAFServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1131)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPCCAFServiceStart.setStatus('current')
if mibBuilder.loadTexts: starPCCAFServiceStart.setDescription('A PCC-AF Service has started Action to be Taken: No action required')
starPCCAFServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1132)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starPCCAFServiceStop.setStatus('current')
if mibBuilder.loadTexts: starPCCAFServiceStop.setDescription('A PCC-AF Service has stopped. Probable Cause: This is typically caused by operator invention. In rare cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the PCC-AF service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the PCC-AF service is operational. Condition Clear Alarm: A starPCCAFServiceStart notification will be generated when the service is restarted')
starSPRServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1133)).setObjects(("STARENT-MIB", "starSPRServerIpAddr"))
if mibBuilder.loadTexts: starSPRServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starSPRServerUnreachable.setDescription("The Subscriber Profile Repository (SPR) server cannot be reached. Probable Cause: The SPR server is down, or there is a network issue preventing communication with the SPR server. Actions to be Taken: Restore the SPR server to an operational status; Verify that the SPR server is reachable by performing a 'ping' operation from the CLI in the appropriate context. Check the admin logs for notification of communication problems. Clear Condition: Verify that communication to the SPR authentication server has been restored. Condition Clear Alarm: When this condition clears a starSPRServerReachable notification will be generated.")
starSPRServerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1134)).setObjects(("STARENT-MIB", "starSPRServerIpAddr"))
if mibBuilder.loadTexts: starSPRServerReachable.setStatus('current')
if mibBuilder.loadTexts: starSPRServerReachable.setDescription('The Subscriber Profile Repository (SPR) server is now reachable. This can be the result of a system startup, the configuration of a new server, or a previously unreachable server becoming reachable. Action to be Taken: No Action Required.')
starGSServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1135)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGSServiceStart.setStatus('current')
if mibBuilder.loadTexts: starGSServiceStart.setDescription('A GS Service has started Action to be Taken: No action required')
starGSServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1136)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starGSServiceStop.setStatus('current')
if mibBuilder.loadTexts: starGSServiceStop.setDescription('A GS Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the GS service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the GS service is operational. Condition Clear Alarm: A starGSServiceStart notification will be generated when the service is restarted')
starMAPServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1137)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMAPServiceStart.setStatus('current')
if mibBuilder.loadTexts: starMAPServiceStart.setDescription('A MAP Service has started Action to be Taken: No action required')
starMAPServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1138)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMAPServiceStop.setStatus('current')
if mibBuilder.loadTexts: starMAPServiceStop.setDescription('A MAP Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the MAP service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the MAP service is operational. Condition Clear Alarm: A starMAPServiceStart notification will be generated when the service is restarted')
starIUPSServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1139)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starIUPSServiceStart.setStatus('current')
if mibBuilder.loadTexts: starIUPSServiceStart.setDescription('An IUPS Service has started Action to be Taken: No action required')
starIUPSServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1140)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starIUPSServiceStop.setStatus('current')
if mibBuilder.loadTexts: starIUPSServiceStop.setDescription('An IUPS Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the IUPS service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the IUPS service is operational. Condition Clear Alarm: A starIUPSServiceStart notification will be generated when the service is restarted')
starSGTPServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1141)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGTPServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSGTPServiceStart.setDescription('A SGTP Service has started Action to be Taken: No action required')
starSGTPServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1142)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGTPServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSGTPServiceStop.setDescription('A SGTP Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the SGTP service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the SGTP service is operational. Condition Clear Alarm: A starSGTPServiceStart notification will be generated when the service is restarted')
starEPDGServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1143)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starEPDGServiceStart.setStatus('current')
if mibBuilder.loadTexts: starEPDGServiceStart.setDescription('A EPDG Service has started Action to be Taken: No action required')
starEPDGServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1144)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starEPDGServiceStop.setStatus('current')
if mibBuilder.loadTexts: starEPDGServiceStop.setDescription('A EPDG Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the EPDG service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the EPDG service is operational. Condition Clear Alarm: A starEPDGServiceStart notification will be generated when the service is restarted')
starApsCommandSuccess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1145)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starPortType"))
if mibBuilder.loadTexts: starApsCommandSuccess.setStatus('current')
if mibBuilder.loadTexts: starApsCommandSuccess.setDescription('APS Command Success Status.')
starApsCommandFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1146)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starPortType"))
if mibBuilder.loadTexts: starApsCommandFailure.setStatus('current')
if mibBuilder.loadTexts: starApsCommandFailure.setDescription('APS Command Failure Status.')
starApsSwitchSuccess = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1147)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starPortType"))
if mibBuilder.loadTexts: starApsSwitchSuccess.setStatus('current')
if mibBuilder.loadTexts: starApsSwitchSuccess.setDescription('APS Switch Success Status.')
starApsSwitchFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1148)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starPortType"))
if mibBuilder.loadTexts: starApsSwitchFailure.setStatus('current')
if mibBuilder.loadTexts: starApsSwitchFailure.setDescription('APS Switch Failure Status.')
starApsModeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1149)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starPortNum"))
if mibBuilder.loadTexts: starApsModeMismatch.setStatus('current')
if mibBuilder.loadTexts: starApsModeMismatch.setDescription('APS Mode Mismatch Status.')
starApsChannelMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1150)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starApsChannelMismatch.setStatus('current')
if mibBuilder.loadTexts: starApsChannelMismatch.setDescription('APS Channel Mismatch Status.')
starApsByteMismatch = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1151)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starApsByteMismatch.setStatus('current')
if mibBuilder.loadTexts: starApsByteMismatch.setDescription('APS Byte Mismatch Status.')
starApsFeProtLineFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1152)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starApsFeProtLineFailure.setStatus('current')
if mibBuilder.loadTexts: starApsFeProtLineFailure.setDescription('APS FE Protocol Line Failure Status.')
starApsLossOfRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1153)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starApsLossOfRedundancy.setStatus('current')
if mibBuilder.loadTexts: starApsLossOfRedundancy.setDescription('APS Loss of Redundancy Status.')
starApsLossOfRedundancyClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1154)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starApsLossOfRedundancyClear.setStatus('current')
if mibBuilder.loadTexts: starApsLossOfRedundancyClear.setDescription('APS Loss of Redundancy Clear Status.')
starHNBGWSGSNRanapReset = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1155)).setObjects(("STARENT-MIB", "starSessHNBGWVpnName"), ("STARENT-MIB", "starSessHNBGWServName"), ("STARENT-MIB", "starSessHNBGWPsNwName"), ("STARENT-MIB", "starSessHNBGWSgsnPtCd"))
if mibBuilder.loadTexts: starHNBGWSGSNRanapReset.setStatus('current')
if mibBuilder.loadTexts: starHNBGWSGSNRanapReset.setDescription('RANAP Reset Received from SGSN')
starHNBGWMSCRanapReset = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1156)).setObjects(("STARENT-MIB", "starSessHNBGWVpnName"), ("STARENT-MIB", "starSessHNBGWServName"), ("STARENT-MIB", "starSessHNBGWCsNwName"), ("STARENT-MIB", "starSessHNBGWMscPtCd"))
if mibBuilder.loadTexts: starHNBGWMSCRanapReset.setStatus('current')
if mibBuilder.loadTexts: starHNBGWMSCRanapReset.setDescription('RANAP Reset Received from MSC')
starALCAPNodeReset = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1157)).setObjects(("STARENT-MIB", "starSessALCAPVpnName"), ("STARENT-MIB", "starSessALCAPServName"), ("STARENT-MIB", "starSessALCAPAAL2NodeName"))
if mibBuilder.loadTexts: starALCAPNodeReset.setStatus('current')
if mibBuilder.loadTexts: starALCAPNodeReset.setDescription('ALCAP Node Reset Received from MGW')
starALCAPPathReset = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1158)).setObjects(("STARENT-MIB", "starSessALCAPVpnName"), ("STARENT-MIB", "starSessALCAPServName"), ("STARENT-MIB", "starSessALCAPAAL2NodeName"), ("STARENT-MIB", "starSessALCAPPathId"))
if mibBuilder.loadTexts: starALCAPPathReset.setStatus('current')
if mibBuilder.loadTexts: starALCAPPathReset.setDescription('ALCAP Path Reset Received from MGW')
starALCAPPathBlock = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1159)).setObjects(("STARENT-MIB", "starSessALCAPVpnName"), ("STARENT-MIB", "starSessALCAPServName"), ("STARENT-MIB", "starSessALCAPPathId"))
if mibBuilder.loadTexts: starALCAPPathBlock.setStatus('current')
if mibBuilder.loadTexts: starALCAPPathBlock.setDescription('ALCAP Block Received from MGW')
starALCAPPathUnBlock = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1160)).setObjects(("STARENT-MIB", "starSessALCAPVpnName"), ("STARENT-MIB", "starSessALCAPServName"), ("STARENT-MIB", "starSessALCAPPathId"))
if mibBuilder.loadTexts: starALCAPPathUnBlock.setStatus('current')
if mibBuilder.loadTexts: starALCAPPathUnBlock.setDescription('ALCAP Un Block Received from MGW')
starSGSServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1161)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGSServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSGSServiceStart.setDescription('A SGS Service has started Action to be Taken: No action required')
starSGSServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1162)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSGSServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSGSServiceStop.setDescription('A SGS Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the SGS service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the SGS service is operational. Condition Clear Alarm: A starSGSServiceStart notification will be generated when the service is restarted')
starSgsnGnMsgDelay = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1163)).setObjects(("STARENT-MIB", "starSGTPVpnName"), ("STARENT-MIB", "starSGTPServName"), ("STARENT-MIB", "starSGTPPeerAddr"))
if mibBuilder.loadTexts: starSgsnGnMsgDelay.setStatus('current')
if mibBuilder.loadTexts: starSgsnGnMsgDelay.setDescription('Messaging Dealy seen towards GGSN as many messages sent to that GGSN did not receive response within a certain time')
starSgsnGnMsgDelayClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1164)).setObjects(("STARENT-MIB", "starSGTPVpnName"), ("STARENT-MIB", "starSGTPServName"), ("STARENT-MIB", "starSGTPPeerAddr"))
if mibBuilder.loadTexts: starSgsnGnMsgDelayClear.setStatus('current')
if mibBuilder.loadTexts: starSgsnGnMsgDelayClear.setDescription('The delay seen towards GGSN is no longer seen as message responses are received in time as expected')
starBNGServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1165)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starBNGServiceStart.setStatus('current')
if mibBuilder.loadTexts: starBNGServiceStart.setDescription('A BNG Service has started Action to be Taken: No action required')
starBNGServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1166)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starBNGServiceStop.setStatus('current')
if mibBuilder.loadTexts: starBNGServiceStop.setDescription('A BNG Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the BNG service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the BNG service is operational. Condition Clear Alarm: A starBNGServiceStart notification will be generated when the service is restarted')
starMMES1AssocFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1167)).setObjects(("STARENT-MIB", "starMMES1AssocVpnName"), ("STARENT-MIB", "starMMES1AssocServName"), ("STARENT-MIB", "starMMES1AssocENBID"))
if mibBuilder.loadTexts: starMMES1AssocFail.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocFail.setDescription('An S1 Association between an MME service and an eNodeB has failed. Action to be Taken: If the shutdown of the eNodeB was not planned, determine the health/status of the eNodeB. If available, verify the health of the network between the two elements. Clear Condition: The condition is cleared with the S1 Association is reestablished. Condition Clear Alarm: A starMMES1AssocEstab notification will be generated when the S1 association is re-established')
starMMES1AssocSetup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1168)).setObjects(("STARENT-MIB", "starMMES1AssocVpnName"), ("STARENT-MIB", "starMMES1AssocServName"), ("STARENT-MIB", "starMMES1AssocENBID"))
if mibBuilder.loadTexts: starMMES1AssocSetup.setStatus('current')
if mibBuilder.loadTexts: starMMES1AssocSetup.setDescription('An S1 Association between an MME service and an eNodeB has been established. Normally a starMMES1AssocSetup notification would be generated only for an associated which had previously failed, but optionally this notification can be generated for any association setup.')
starMVGPeerDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1169)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starPeerAddress"), ("STARENT-MIB", "starMVGEndpointName"), ("STARENT-MIB", "starMVGCauseCode"), ("STARENT-MIB", "starMVGProtocolType"))
if mibBuilder.loadTexts: starMVGPeerDown.setStatus('current')
if mibBuilder.loadTexts: starMVGPeerDown.setDescription('A MVG peer is down. Problem Cause: The MVG peer has failed, or a network connectivity prevents reaching the peer. Condition Clear Alarm: A starMVGPeerUp notification will be generated when the peer is up')
starMVGPeerUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1170)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starPeerAddress"), ("STARENT-MIB", "starMVGEndpointName"), ("STARENT-MIB", "starMVGCauseCode"), ("STARENT-MIB", "starMVGProtocolType"))
if mibBuilder.loadTexts: starMVGPeerUp.setStatus('current')
if mibBuilder.loadTexts: starMVGPeerUp.setDescription('A MVG peer is up. This notification is only generated for peers which have previously been declared down.')
starPCCNtfyIntfPeerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1173)).setObjects(("STARENT-MIB", "starPCCNtfyIntfPeerName"))
if mibBuilder.loadTexts: starPCCNtfyIntfPeerUnreachable.setStatus('current')
if mibBuilder.loadTexts: starPCCNtfyIntfPeerUnreachable.setDescription('The IPCF Event Notification Interface peer cannot be reached. ? Probable Cause: The Event Notification server on SPR is down Or the IP-address/port configuration does not match with the server Actions to be Taken: Check the Event notification server on SPR and ensure it is running. Ensure that IP-address port combination on IPCF match the server side configurations. Clear Condition: Verify that the Event notification interface status on boxer is up. Condition Clear Alarm: When this condition clears a starNtfyIntfPeerReachable notification will be generated.')
starPCCNtfyIntfPeerReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1174)).setObjects(("STARENT-MIB", "starPCCNtfyIntfPeerName"))
if mibBuilder.loadTexts: starPCCNtfyIntfPeerReachable.setStatus('current')
if mibBuilder.loadTexts: starPCCNtfyIntfPeerReachable.setDescription(' The Notification Interface peer can be reached.? Action to be Taken: No Action Required.')
starIPSecNodePeerDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1175)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starPeerAddress"))
if mibBuilder.loadTexts: starIPSecNodePeerDown.setStatus('current')
if mibBuilder.loadTexts: starIPSecNodePeerDown.setDescription('A Node Service peer has stopped responding. Problem Cause: The IPSec Node peer has failed, or a network connectivity prevents reaching the peer. Condition Clear Alarm: A starIPSecNodePeerUp notification will be generated when the peer is up')
starIPSecNodePeerUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1176)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starPeerAddress"))
if mibBuilder.loadTexts: starIPSecNodePeerUp.setStatus('current')
if mibBuilder.loadTexts: starIPSecNodePeerUp.setDescription('A Node Service peer is back online Action to be Taken: No action required')
starApsRemoteResponseFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1177)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starPortSlot"))
if mibBuilder.loadTexts: starApsRemoteResponseFail.setStatus('current')
if mibBuilder.loadTexts: starApsRemoteResponseFail.setDescription('APS Remote Response Fail.')
starCdrPurged = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1178)).setObjects(("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNAPNName"), ("STARENT-MIB", "starSessGTPPGroupName"))
if mibBuilder.loadTexts: starCdrPurged.setStatus('current')
if mibBuilder.loadTexts: starCdrPurged.setDescription('CDRs purged')
starLocalUserAdded = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1180)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"), ("STARENT-MIB", "starCLIDatabaseUsername"), ("STARENT-MIB", "starCLIPrivs"))
if mibBuilder.loadTexts: starLocalUserAdded.setStatus('current')
if mibBuilder.loadTexts: starLocalUserAdded.setDescription('A local user was added to the system. Probable Cause: A command was issued which resulted in a new user being added to the local user database. If this was not a planned action then further investigation is advised.')
starLocalUserRemoved = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1181)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"), ("STARENT-MIB", "starCLIDatabaseUsername"))
if mibBuilder.loadTexts: starLocalUserRemoved.setStatus('current')
if mibBuilder.loadTexts: starLocalUserRemoved.setDescription('A local user was removed from the system. Probable Cause: A command was issued which resulted in an existing user being removed from the local user database. If this was not a planned action then further investigation is advised.')
starLocalUserPrivilegeChanged = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1182)).setObjects(("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"), ("STARENT-MIB", "starCLIDatabaseUsername"), ("STARENT-MIB", "starCLIPrivs"))
if mibBuilder.loadTexts: starLocalUserPrivilegeChanged.setStatus('current')
if mibBuilder.loadTexts: starLocalUserPrivilegeChanged.setDescription("A local user's privileges were modified. Probable Cause: A command was issued which resulted in an existing user's privileges being modified. If this was not a planned action then further investigation is advised.")
starOsShellAccessed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1183)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: starOsShellAccessed.setStatus('current')
if mibBuilder.loadTexts: starOsShellAccessed.setDescription("A user has accessed the OS shell. Probable Cause: A command was issued which resulted in a user's access to the operating system shell. If this activity was not anticipated, then further investigation should be performed.")
starTestModeEntered = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1184)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: starTestModeEntered.setStatus('current')
if mibBuilder.loadTexts: starTestModeEntered.setDescription('A user has entered the StarOS Test Mode. Probable Cause: A command was issued which resulted in a user entering the CLI test command mode. The test command mode is only intended for maintenance and diagnostic activity and could result in major service disruptions. If this action was not intentional, the user should exit from test mode.')
starLicenseFeaturesModified = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1185)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: starLicenseFeaturesModified.setStatus('current')
if mibBuilder.loadTexts: starLicenseFeaturesModified.setDescription('A user has manually modified the StarOS license feature set through the CLI. Probable Cause: A command was issued which resulted in a user modifying the set of license features available to the user. This capability was only intended for maintenance and diagnostic activity and could result in major service disruptions. If this action was not intentional, the user should restore the original license feature set.')
starHiddenAccessEnabled = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1186)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: starHiddenAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: starHiddenAccessEnabled.setDescription('An administrator has explicitly enabled the use of hidden test commands. Probable Cause: A command was configured which resulted in users having access to the specific test commands which may have been previously unavailable. If this action was not intentional, the user should disable access to the hidden test commands.')
starHiddenAccessDisabled = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1187)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: starHiddenAccessDisabled.setStatus('current')
if mibBuilder.loadTexts: starHiddenAccessDisabled.setDescription('An administrator has explicitly disabled the use of hidden test commands. Probable Cause: A command was configured which resulted in users no longer having access to specific test commands which may have been previously available. If this action was not intentional, the user should re-enable access to the hidden test commands.')
starLawfulInterceptChanged = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1188)).setObjects(("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLIUsername"))
if mibBuilder.loadTexts: starLawfulInterceptChanged.setStatus('current')
if mibBuilder.loadTexts: starLawfulInterceptChanged.setDescription('Original Lawful Intercept configured by Admin: %s is changed by Admin: %s')
starMMES1PathFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1189)).setObjects(("STARENT-MIB", "starMMES1PathVpnName"), ("STARENT-MIB", "starMMES1PathServName"), ("STARENT-MIB", "starMMES1PathENBID"), ("STARENT-MIB", "starMMES1PathSelfAddr"), ("STARENT-MIB", "starMMES1PathSelfPort"), ("STARENT-MIB", "starMMES1PathPeerAddr"), ("STARENT-MIB", "starMMES1PathPeerPort"))
if mibBuilder.loadTexts: starMMES1PathFail.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathFail.setDescription('An S1 Path between an MME service and an eNodeB has failed. Action to be Taken: If the shutdown of the eNodeB was not planned, determine the health/status of the eNodeB. If available, verify the health of the network between the two elements. Clear Condition: The condition is cleared with the S1 Path is reestablished. Condition Clear Alarm: A starMMES1PathEstab notification will be generated when the S1 path is re-established')
starMMES1PathSetup = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1190)).setObjects(("STARENT-MIB", "starMMES1PathVpnName"), ("STARENT-MIB", "starMMES1PathServName"), ("STARENT-MIB", "starMMES1PathENBID"), ("STARENT-MIB", "starMMES1PathSelfAddr"), ("STARENT-MIB", "starMMES1PathSelfPort"), ("STARENT-MIB", "starMMES1PathPeerAddr"), ("STARENT-MIB", "starMMES1PathPeerPort"))
if mibBuilder.loadTexts: starMMES1PathSetup.setStatus('current')
if mibBuilder.loadTexts: starMMES1PathSetup.setDescription('An S1 Path between an MME service and an eNodeB has been established. Normally a starMMES1PathSetup notification would be generated only for a path which had previously failed, but optionally this notification can be generated for any path setup.')
starSAEGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1191)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSAEGWServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSAEGWServiceStart.setDescription('A SAEGW Service has started Action to be Taken: No action required')
starSAEGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1192)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSAEGWServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSAEGWServiceStop.setDescription('A SEAGW Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the SAEGW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the SEAGW service is operational. Condition Clear Alarm: A starSAEGWServiceStart notification will be generated when the service is restarted')
starHenbgwAccessServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1193)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHenbgwAccessServiceStart.setStatus('current')
if mibBuilder.loadTexts: starHenbgwAccessServiceStart.setDescription('A HENBGW Access Service has started Action to be Taken: No action required')
starHenbgwAccessServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1194)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHenbgwAccessServiceStop.setStatus('current')
if mibBuilder.loadTexts: starHenbgwAccessServiceStop.setDescription('A HENBGW Access Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the HENBGW Access service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the HENBGW Access service is operational. Condition Clear Alarm: A starHenbgwAccessServiceStart notification will be generated when the service is restarted')
starHenbgwNetworkServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1195)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHenbgwNetworkServiceStart.setStatus('current')
if mibBuilder.loadTexts: starHenbgwNetworkServiceStart.setDescription('A HENBGW Network Service has started Action to be Taken: No action required')
starHenbgwNetworkServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1196)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starHenbgwNetworkServiceStop.setStatus('current')
if mibBuilder.loadTexts: starHenbgwNetworkServiceStop.setDescription('A HENBGW Network Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the HENBGW Network service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the HENBGW Network service is operational. Condition Clear Alarm: A starHenbgwNetworkServiceStart notification will be generated when the service is restarted')
starAAAArchiveStarted = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1197)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starAAAArchiveStarted.setStatus('current')
if mibBuilder.loadTexts: starAAAArchiveStarted.setDescription('Archive started')
starECSTotalDNSLearntIPv4Threshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1198)).setObjects(("STARENT-MIB", "starECSTotalDNSLearntIPThresholdInstance"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdconfigured"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdmeasured"))
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv4Threshold.setStatus('current')
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv4Threshold.setDescription(' DNS Learnt IPv4 entries exceed the threshold limit (high water mark) configured. For IPv4 Max IP entries = 512,00 Alarm Cleared when the IPv4 entries go below the Lower Water Mark configured')
starECSTotalDNSLearntIPv4ThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1199)).setObjects(("STARENT-MIB", "starECSTotalDNSLearntIPThresholdInstance"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdconfigured"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdmeasured"))
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv4ThresholdClear.setStatus('current')
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv4ThresholdClear.setDescription('DNS Learnt IPv4 entries reach below the threshold limit (lower water mark) configured.')
starECSTotalDNSLearntIPv6Threshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1200)).setObjects(("STARENT-MIB", "starECSTotalDNSLearntIPThresholdInstance"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdconfigured"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdmeasured"))
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv6Threshold.setStatus('current')
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv6Threshold.setDescription('DNS Learnt IPv6 entries exceed the threshold limit (high water mark) configured. For IPv6 Max IP entries = 256,00 Alarm Cleared when the IPv6 entries go below the Lower Water Mark configured')
starECSTotalDNSLearntIPv6ThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1201)).setObjects(("STARENT-MIB", "starECSTotalDNSLearntIPThresholdInstance"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdconfigured"), ("STARENT-MIB", "starECSTotalDNSLearntIPThresholdmeasured"))
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv6ThresholdClear.setStatus('current')
if mibBuilder.loadTexts: starECSTotalDNSLearntIPv6ThresholdClear.setDescription('DNS Learnt IPv6 entries reach below the threshold limit (lower water mark) configured.')
starIPSecNodeIpv6PeerDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1202)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starPeerAddressIpv6"))
if mibBuilder.loadTexts: starIPSecNodeIpv6PeerDown.setStatus('current')
if mibBuilder.loadTexts: starIPSecNodeIpv6PeerDown.setDescription('A Node Service peer has stopped responding. This peer is reached using an IPv6 address. For IPv4-connected peers, a starIPSecNodePeerDown notification would be generated. Problem Cause: The IPSec Node peer has failed, or a network connectivity prevents reaching the peer. Condition Clear Alarm: A starIPSecNodeIpv6PeerUp notification will be generated when the peer is up')
starIPSecNodeIpv6PeerUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1203)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starPeerAddressIpv6"))
if mibBuilder.loadTexts: starIPSecNodeIpv6PeerUp.setStatus('current')
if mibBuilder.loadTexts: starIPSecNodeIpv6PeerUp.setDescription('A Node Service peer is back online. This peer is reached using an IPv6 address. For IPv4-connected peers, a starIPSecNodePeerUp notification would be generated. Action to be Taken: No action required')
starLAGGroupDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1204)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starLAGPartner"))
if mibBuilder.loadTexts: starLAGGroupDown.setStatus('current')
if mibBuilder.loadTexts: starLAGGroupDown.setDescription("LAG group status is Down. This notification is only generated for master physical port and a previous 'starLAGGroupUp' notification was previously generated. Action to be Taken: No action required. The cause for the LAG down should be investigated.")
starLAGGroupUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1205)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starLAGPartner"))
if mibBuilder.loadTexts: starLAGGroupUp.setStatus('current')
if mibBuilder.loadTexts: starLAGGroupUp.setDescription('LAG group status is up. This notification is only generated for master physical port. Action to be Taken: No action required')
starVLRAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1206)).setObjects(("STARENT-MIB", "starSGSServiceVpnName"), ("STARENT-MIB", "starSGSServiceServName"), ("STARENT-MIB", "starVLRName"), ("STARENT-MIB", "starVLRIpAddr1"), ("STARENT-MIB", "starVLRIpAddr2"), ("STARENT-MIB", "starVLRPortNum"))
if mibBuilder.loadTexts: starVLRAssocDown.setStatus('current')
if mibBuilder.loadTexts: starVLRAssocDown.setDescription('A VLR Association is down. Problem Cause: The VLR Association has failed, or a network connectivity prevents reaching the VLR. Condition Clear Alarm: A starVLRAssocUp notification will be generated when the VLR association is up')
starVLRAssocUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1207)).setObjects(("STARENT-MIB", "starSGSServiceVpnName"), ("STARENT-MIB", "starSGSServiceServName"), ("STARENT-MIB", "starVLRName"), ("STARENT-MIB", "starVLRIpAddr1"), ("STARENT-MIB", "starVLRIpAddr2"), ("STARENT-MIB", "starVLRPortNum"))
if mibBuilder.loadTexts: starVLRAssocUp.setStatus('current')
if mibBuilder.loadTexts: starVLRAssocUp.setDescription('A VLR Association is up. This notification is only generated for Association which have previously been declared down.')
starVLRAllAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1208)).setObjects(("STARENT-MIB", "starSGSServiceVpnName"), ("STARENT-MIB", "starSGSServiceServName"))
if mibBuilder.loadTexts: starVLRAllAssocDown.setStatus('current')
if mibBuilder.loadTexts: starVLRAllAssocDown.setDescription('All the VLR Associations are down. Problem Cause: All the VLR Associations has failed, or network connectivity prevents reaching the VLRs. Condition Clear Alarm: A starVLRAllAssocUp notification will be generated when all the VLR associations are up')
starVLRAllAssocDownClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1209)).setObjects(("STARENT-MIB", "starSGSServiceVpnName"), ("STARENT-MIB", "starSGSServiceServName"))
if mibBuilder.loadTexts: starVLRAllAssocDownClear.setStatus('current')
if mibBuilder.loadTexts: starVLRAllAssocDownClear.setDescription('VLR at least one association is up. This notification is only generated for all the Association which have previously been declared down.')
starEnhancedCongestion = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1210)).setObjects(("STARENT-MIB", "starServiceType"), ("STARENT-MIB", "starCongestionPolicy"), ("STARENT-MIB", "starCongestionResourceType"), ("STARENT-MIB", "starCongestionType"), ("STARENT-MIB", "starCongestionActionProfileName"))
if mibBuilder.loadTexts: starEnhancedCongestion.setStatus('current')
if mibBuilder.loadTexts: starEnhancedCongestion.setDescription('A congestion condition has occurred. Probable Cause: This is the result of an operator-configured congestion threshold being reached. This can be due to high usage of the resource being monitored which indicates that the IMG is reaching its peak capacity, or could be caused by the incorrect configuration of the congestion thresholds. Actions to be Taken: Verify that the congestion thresholds are correct; if the congested state is seem repeatedly, or for sustained periods of time, additional system capacity may need to be brought online. This system is cleared when the use of the specific resource falls below the configured limit. Condition Clear Alarm: A starCongestionClear notification is sent when there are no congestion conditions for a service type')
starEnhancedCongestionClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1211)).setObjects(("STARENT-MIB", "starServiceType"), ("STARENT-MIB", "starCongestionType"))
if mibBuilder.loadTexts: starEnhancedCongestionClear.setStatus('current')
if mibBuilder.loadTexts: starEnhancedCongestionClear.setDescription('A congestion condition has cleared.')
starSGSNRNCNoResetAck = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1212)).setObjects(("STARENT-MIB", "starSessSGSNVpnName"), ("STARENT-MIB", "starSessSGSNServName"), ("STARENT-MIB", "starSessSGSNMcc"), ("STARENT-MIB", "starSessSGSNMnc"), ("STARENT-MIB", "starSessSGSNRncId"))
if mibBuilder.loadTexts: starSGSNRNCNoResetAck.setStatus('current')
if mibBuilder.loadTexts: starSGSNRNCNoResetAck.setDescription('SGSN has not received an Radio Network Controller(RNC) reset-ack event. This event is generated on expiry of all retransmission for RNC Reset and non-receipt of Reset-Ack.')
starThreshSAEGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1213)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshSAEGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshSAEGWSessions.setDescription("The total number of SAEGW sessions is above the configured threshold value. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model,a starThreshClearSAEGWSessions notification will be generated when the measured value falls below the threshold")
starThreshClearSAEGWSessions = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1214)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearSAEGWSessions.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSAEGWSessions.setDescription('The threshold condition is now clear.')
starSGSNRMCPUWarn = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1215)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starSGSNRMCPUWarn.setStatus('current')
if mibBuilder.loadTexts: starSGSNRMCPUWarn.setDescription('The CPU usage is goin in Warning level. This event is generated when current CPU usage reaches 90% of allocated limit. Condition Clear Alarm: A starSGSNRMCPUWarnClear notification is sent when there CPU usage reaches 50% of allocated limit after warning')
starSGSNRMCPUWarnClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1216)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starSGSNRMCPUWarnClear.setStatus('current')
if mibBuilder.loadTexts: starSGSNRMCPUWarnClear.setDescription('The CPU usage is coming back to normal once warned. This event is generated when current CPU usage reaches 50% of allocated limit after warning.')
starSGSNRMMemWarn = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1217)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starSGSNRMMemWarn.setStatus('current')
if mibBuilder.loadTexts: starSGSNRMMemWarn.setDescription('The Memory usage for the proclet is going in Warning level. This event is generated when current Memory usage exceeds allocated limit. Condition Clear Alarm: A starSGSNRMMemWarnClear notification is sent when current Memory usage reaches below 95% of allocated limit once warned.')
starSGSNRMMemWarnClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1218)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starSGSNRMMemWarnClear.setStatus('current')
if mibBuilder.loadTexts: starSGSNRMMemWarnClear.setDescription('The Memory usage for the proclet is coming back to normal once warned. This event is generated when current Memory usage reaches below 95% of allocated limit once warned.')
starRMCPUOver = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1219)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starRMCPUOver.setStatus('current')
if mibBuilder.loadTexts: starRMCPUOver.setDescription('The CPU usage is goin in Overlaod level. This event is generated when current CPU usage reaches 50% more of allocated limit. Condition Clear Alarm: A starRMCPUOverClear notification is sent when urrent CPU usage reaches 50% of allocated limit after over')
starRMCPUOverClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1220)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starRMCPUOverClear.setStatus('current')
if mibBuilder.loadTexts: starRMCPUOverClear.setDescription('The CPU usage is going back to normal level. This event is generated when current CPU usage reaches 50% of allocated limit after over.')
starSGSNRMMemOver = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1221)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starSGSNRMMemOver.setStatus('current')
if mibBuilder.loadTexts: starSGSNRMMemOver.setDescription('The Memory usage of the task is going in Overload level. This event is generated when current Memory usage reached twice allocated limit.')
starSGSNRMMemOverClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1222)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starSGSNRMMemOverClear.setStatus('current')
if mibBuilder.loadTexts: starSGSNRMMemOverClear.setDescription('The Memory usage for a proclet reached normal after overload. This event is generated when current Memory usage reaches 95% of allocated limit once overloaded.')
starSessMgrFlowCount = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1223)).setObjects(("STARENT-MIB", "starSessMgrFlowInstId"), ("STARENT-MIB", "starSessMgrFlowPDNNo"), ("STARENT-MIB", "starSessMgrFlowMemUsage"), ("STARENT-MIB", "starSessMgrFlowCounter"), ("STARENT-MIB", "starSessMgrTotalFlowCount"))
if mibBuilder.loadTexts: starSessMgrFlowCount.setStatus('current')
if mibBuilder.loadTexts: starSessMgrFlowCount.setDescription('Session Manager Flows counting, This event is genereted when number of flows in a session manager instance goes beyond configured threshold,it will also print number of PDN, Memeory usage and sess manager instance number.')
starSessMgrFlowCountClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1224)).setObjects(("STARENT-MIB", "starSessMgrFlowInstId"), ("STARENT-MIB", "starSessMgrFlowPDNNo"), ("STARENT-MIB", "starSessMgrFlowMemUsage"), ("STARENT-MIB", "starSessMgrFlowCounter"), ("STARENT-MIB", "starSessMgrTotalFlowCount"))
if mibBuilder.loadTexts: starSessMgrFlowCountClear.setStatus('current')
if mibBuilder.loadTexts: starSessMgrFlowCountClear.setDescription('Clear Session Manager Flows Counting Trap, This event is genereted when number of flows in a session manager instance goes below configured threshold,it will also print number of PDN, Memeory usage and sess manager instance number.')
starStorageFound = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1225)).setObjects(("STARENT-MIB", "starStorageSlot"), ("STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starStorageFound.setStatus('current')
if mibBuilder.loadTexts: starStorageFound.setDescription("The specified storage device is found and mounted successfully on the card. This notification only generated to the storage device for which 'starStorageNotFound' notification was generated")
starStorageNotFound = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1226)).setObjects(("STARENT-MIB", "starStorageSlot"), ("STARENT-MIB", "starStorageName"))
if mibBuilder.loadTexts: starStorageNotFound.setStatus('current')
if mibBuilder.loadTexts: starStorageNotFound.setDescription('The specified storage device not found on the card. This notification is currently only generated for failures to access the specified storage device on the card. Probable Cause: The storage device is not accessible on the card. Action to be Taken: Verify the storage device on the card is attached correctly. Condition Clear Alarm: A starStorageFound notification will be generated when the storage device is mounted on the card.')
starHENBGWMMESCTPAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1227)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"), ("STARENT-MIB", "starHENBGWServiceLogicalENBId"), ("STARENT-MIB", "starHENBGWServiceMMEServName"), ("STARENT-MIB", "starHENBGWServicePeerAddr"), ("STARENT-MIB", "starHENBGWServicePeerPort"))
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocDown.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocDown.setDescription('A HENBGW MME SCTP Association is down. Problem Cause: The HENBGW MME SCTP Association has failed, or a network connectivity prevents reaching the MME. Condition Clear Alarm: A starHENBGWMMESCTPAssocUp notification will be generated when the HENBGW MME SCTP association is up.')
starHENBGWMMESCTPAssocUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1228)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"), ("STARENT-MIB", "starHENBGWServiceLogicalENBId"), ("STARENT-MIB", "starHENBGWServiceMMEServName"), ("STARENT-MIB", "starHENBGWServicePeerAddr"), ("STARENT-MIB", "starHENBGWServicePeerPort"))
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocUp.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocUp.setDescription('A HENBGW MME SCTP Association is up. This notification is only generated for Association which have previously been declared down, optionally this notification can be generated for any association up.')
starHENBGWMMESCTPAllAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1229)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"))
if mibBuilder.loadTexts: starHENBGWMMESCTPAllAssocDown.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMESCTPAllAssocDown.setDescription('All the HENBGW MME SCTP Associations are down. Problem Cause: All the HENBGW MME SCTP Associations has failed, or network connectivity prevents reaching the MMEs. Condition Clear Alarm: A starHENBGWMMESCTPAllAssocDownClear notification will be generated when at least one HENBGW MME SCTP association is up.')
starHENBGWMMESCTPAllAssocDownClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1230)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"))
if mibBuilder.loadTexts: starHENBGWMMESCTPAllAssocDownClear.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMESCTPAllAssocDownClear.setDescription('HENBGW MME SCTP at least one association is up. This notification is only generated for all the Association which have previously been declared down.')
starNPDBConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1231)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starNwReachSrvrAddr"))
if mibBuilder.loadTexts: starNPDBConnectionDown.setStatus('current')
if mibBuilder.loadTexts: starNPDBConnectionDown.setDescription(' A NPDB connection is down. Probable Cause: This is typically caused when NPDB server resets the socket. Action to be Taken: Check if the NDPB Server is running. Clear Condition: Verify that PING PONG messages are exchanged with the NPDB Server. Condition Clear Alarm: A startNPDBConnectionUp notification will be generated when the service is restarted')
starNPDBConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1232)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starNwReachSrvrAddr"))
if mibBuilder.loadTexts: starNPDBConnectionUp.setStatus('current')
if mibBuilder.loadTexts: starNPDBConnectionUp.setDescription(' A NPDB connection is up. Action to be Taken: No action required')
starNPUMissedARPFrames = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1233)).setObjects(("STARENT-MIB", "starNPUSlotNumber"), ("STARENT-MIB", "starNPUCPUNumber"), ("STARENT-MIB", "starNPUNPUNumber"))
if mibBuilder.loadTexts: starNPUMissedARPFrames.setStatus('current')
if mibBuilder.loadTexts: starNPUMissedARPFrames.setDescription('This trap will be raised when NPU misses the ARP and packets route to kernel. This will print the slot number CPU number and NPU number')
starNPUMissedARPFramesClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1234)).setObjects(("STARENT-MIB", "starNPUSlotNumber"), ("STARENT-MIB", "starNPUCPUNumber"), ("STARENT-MIB", "starNPUNPUNumber"))
if mibBuilder.loadTexts: starNPUMissedARPFramesClear.setStatus('current')
if mibBuilder.loadTexts: starNPUMissedARPFramesClear.setDescription('This clear trap will be raised when NPU misses the ARP and packets route to kernel recovers. This will print the slot number CPU number and NPU number')
starChassisCrashListFull = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1235)).setObjects(("STARENT-MIB", "starChassisCrashList"))
if mibBuilder.loadTexts: starChassisCrashListFull.setStatus('current')
if mibBuilder.loadTexts: starChassisCrashListFull.setDescription('Chassis crash list is reached full. This notification is generated when no more space is left to store the crash list and reached to disk limit.')
starSessMgrCSCFServiceRecoveryComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1236)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starCPUSlot"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starSessMgrCSCFServiceRecoveryComplete.setStatus('current')
if mibBuilder.loadTexts: starSessMgrCSCFServiceRecoveryComplete.setDescription('Indicates that the CSCF Service had completed recovery. This trap is generated when all the calls are recovered and the listen socket becomes active to accept packets')
starECSreaddressServerDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1237)).setObjects(("STARENT-MIB", "starPeerAddress"), ("STARENT-MIB", "starUDPPortNum"))
if mibBuilder.loadTexts: starECSreaddressServerDown.setStatus('current')
if mibBuilder.loadTexts: starECSreaddressServerDown.setDescription('Server from readdress server list is detected down This notification is generated when there are consecutive failures for server.')
starECSreaddressServerUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1238)).setObjects(("STARENT-MIB", "starPeerAddress"), ("STARENT-MIB", "starUDPPortNum"))
if mibBuilder.loadTexts: starECSreaddressServerUp.setStatus('current')
if mibBuilder.loadTexts: starECSreaddressServerUp.setDescription('Server from readdress server list is detected up This notification is generated when after deadtime server is detected up.')
starCdrHDDStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1239)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starSessGTPPGroupName"))
if mibBuilder.loadTexts: starCdrHDDStart.setStatus('current')
if mibBuilder.loadTexts: starCdrHDDStart.setDescription('CDRs are being written to the HDD')
starCdrStreamingStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1240)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starSessGTPPGroupName"))
if mibBuilder.loadTexts: starCdrStreamingStart.setStatus('current')
if mibBuilder.loadTexts: starCdrStreamingStart.setDescription('CDR streaming is started')
starCdrStreamingComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1241)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starSessGTPPGroupName"))
if mibBuilder.loadTexts: starCdrStreamingComplete.setStatus('current')
if mibBuilder.loadTexts: starCdrStreamingComplete.setDescription('CDR streaming is Completed')
starVLRDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1242)).setObjects(("STARENT-MIB", "starSGSServiceVpnName"), ("STARENT-MIB", "starSGSServiceServName"), ("STARENT-MIB", "starVLRName"))
if mibBuilder.loadTexts: starVLRDown.setStatus('current')
if mibBuilder.loadTexts: starVLRDown.setDescription('A VLR is down. Problem Cause: The VLR has failed, or a network connectivity prevents reaching the VLR. Condition Clear Alarm: A starVLRUp notification will be generated when the VLR is up')
starVLRUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1243)).setObjects(("STARENT-MIB", "starSGSServiceVpnName"), ("STARENT-MIB", "starSGSServiceServName"), ("STARENT-MIB", "starVLRName"))
if mibBuilder.loadTexts: starVLRUp.setStatus('current')
if mibBuilder.loadTexts: starVLRUp.setDescription('A VLR is up. This notification is only generated for VLRs which have previously been declared down.')
starPCFReachable = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1244)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starPCFAddress"))
if mibBuilder.loadTexts: starPCFReachable.setStatus('current')
if mibBuilder.loadTexts: starPCFReachable.setDescription('A PCF that the IMG communication is reachable.')
starLIRcvryError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1245)).setObjects(("STARENT-MIB", "starLIRcvryErrType"), ("STARENT-MIB", "starLIRcvryErrString"))
if mibBuilder.loadTexts: starLIRcvryError.setStatus('current')
if mibBuilder.loadTexts: starLIRcvryError.setDescription('This trap will be raised when Lawful Intercepts cannot be saved or recovered to/from backup. This will print the type of error and error string')
starLIRcvryComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1246))
if mibBuilder.loadTexts: starLIRcvryComplete.setStatus('current')
if mibBuilder.loadTexts: starLIRcvryComplete.setDescription('This trap will be raised when Lawful Intercepts are successfully recovered')
starCGWServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1247)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starCGWServiceStart.setStatus('current')
if mibBuilder.loadTexts: starCGWServiceStart.setDescription('A Serving Gateway (CGW) Service has started. Action to be Taken: No action required')
starCGWServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1248)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starCGWServiceStop.setStatus('current')
if mibBuilder.loadTexts: starCGWServiceStop.setDescription('A Serving Gateway (CGW) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the CGW service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the CGW service is operational. Condition Clear Alarm: A starCGWServiceStart notification will be generated when the service is restarted')
starMMENewConnectionsDisallowed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1249)).setObjects(("STARENT-MIB", "starMMEInitialDisallowReason"), ("STARENT-MIB", "starImsimgrInstId"))
if mibBuilder.loadTexts: starMMENewConnectionsDisallowed.setStatus('current')
if mibBuilder.loadTexts: starMMENewConnectionsDisallowed.setDescription('The demultiplexer on the MME chassis has reached a condition where new connections are being dropped/rejected on MME services due to the specified reason.Please note that this is the initial trigger for this condition. More reasons/triggers may be activated later i.e. after the trap has been sent. These are not indicated via a new trap. Action to be Taken: If this is not intentional (i.e not driven by policy/configuration), cross-check IMSImgr counters using the reason provided. Clear Condition: The condition is cleared when new connections at the MME are re-allowed. Condition Clear Alarm: A starMMENewConnectionsAllowed notification will be generated when the condition is cleared.')
starMMENewConnectionsAllowed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1250))
if mibBuilder.loadTexts: starMMENewConnectionsAllowed.setStatus('current')
if mibBuilder.loadTexts: starMMENewConnectionsAllowed.setDescription('The MME chassis is now accepting new connections again. All conditions causing MME to disallow new connections have cleared.')
starSAMOGServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1251)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSAMOGServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSAMOGServiceStart.setDescription('A SAMOG Service has started Action to be Taken: No action required')
starSAMOGServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1252)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSAMOGServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSAMOGServiceStop.setDescription('A SAMOG Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the SAMOG service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the SAMOG service is operational. Condition Clear Alarm: A starSAMOGServiceStart notification will be generated when the service is restarted')
starCardSwitchoverStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1253)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardSwitchoverStart.setStatus('current')
if mibBuilder.loadTexts: starCardSwitchoverStart.setDescription('A management card (SPC/MMIO) switchover operation has begun. The first varbind identifies from which management card switchover started. The second varbind identifies to which management card switchover is planned to switch. Switchover can cause a momentary loss of communication through the management interface (SPIO incase of ASR5000) , it is possible that this trap will not be successfully delivered. Probable Cause: This is typically caused by an operator action; it can also represent the system recovering from a software or hardware fault. Action to be Taken: If the management card switchover was unplanned, the admin logs should be examined for the cause of the switchover. If the cause was a software failure, the system crash logs should be examined. Clear Condition: Verify the management card switchover completed successfully. Clear Condition Alarm: A starCardSPCSwitchoverComplete is generated when the switchover operation has completed.This is not applicable to QVPC-SI.')
starCardSwitchoverComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1254)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardSwitchoverComplete.setStatus('current')
if mibBuilder.loadTexts: starCardSwitchoverComplete.setDescription('A management card (SPC/MMIO) Switchover has completed successfully. The first varbind identifies from which management card switchover started. The second varbind identifies to which management card switchover is completed. Action to be Taken: If the management card switchover was unplanned, the admin logs should be examined for the cause of the switchover. If the cause was a software failure, the system crash logs should be examined.This is not applicable to QVPC-SI.')
starCardSwitchoverFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1255)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardSwitchoverFailed.setStatus('current')
if mibBuilder.loadTexts: starCardSwitchoverFailed.setDescription('A management card (SPC/MMIO) switchover operation has failed. The first varbind identifies from which management card switchover started. The second varbind identifies to which management card switchover is failed. Probable Cause: The management card being switched to was removed or reset before the switchover completed; the switchover operation was terminated by an operator; or a software or hardware failure on another management card. Action to be Taken: Verify that both management cards have the card locks in the locked position; examine the admin logs for the cause of the failure. If the cause was a software failure, the system crash logs should be examined. Clear Condition: The management card in question will be reset; a starCardUp notification will be generated when the card is operational again.This is not applicable to QVPC-SI.')
starCardMigrateStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1256)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardMigrateStart.setStatus('current')
if mibBuilder.loadTexts: starCardMigrateStart.setDescription('A data processing card (PAC/PSC/DPC) Migration operation has begun. The first varbind identifies from which data processing card migration has started. The second varbind identifies to which data processing card migration is planned to migrate. Probable Cause: This is typically caused by an operator action; it can also represent the system recovering from a software or hardware fault. A starCardMigrateComplete is generated when the migration is completed. This is not applicable to QVPC-SI.')
starCardMigrateComplete = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1257)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardMigrateComplete.setStatus('current')
if mibBuilder.loadTexts: starCardMigrateComplete.setDescription('A data processing card (PAC/PSC/DPC) Migration operation has successfully completed. The first varbind identifies from which data processing card migration has started. The second varbind identifies to which data processing card migration has completed.This is not applicable to QVPC-SI.')
starCardMigrateFailed = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1258)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starCardMigrateFailed.setStatus('current')
if mibBuilder.loadTexts: starCardMigrateFailed.setDescription('A data processing card (PAC/PSC/DPC) Migration operation has failed. The first varbind identifies from which data processing card migration has started. The second varbind identifies to which data processing card migration has failed to migrate. Probable Cause: The data processing card being migrated to was removed or reset before the migration completed; the migration operation was terminated by an operator; or a software or hardware failure on another data processing card involved in the migration operation. The data processing card in question will be reset; a starCardUp notification will be generated when the card is operational again.This is not applicable to QVPC-SI.')
starTechSuppPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1259)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: starTechSuppPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: starTechSuppPasswdChanged.setDescription('A user has changed the StarOS tech-support password. Probable Cause: A command was issued which resulted in a user changing the tech-support password value. The tech-support password is used to gain access to the CLI test-commands. These CLI test commands are only intended for maintenance and diagnostic activity and could result in major service disruptions. If this action was unintended, the user should notify the Cisco TAC group to reset the tech-support password.')
starPMIPPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1260)).setObjects(("STARENT-MIB", "starPMIPVpnName"), ("STARENT-MIB", "starPMIPServName"), ("STARENT-MIB", "starPMIPSelfAddrType"), ("STARENT-MIB", "starPMIPSelfAddr"), ("STARENT-MIB", "starPMIPPeerAddrType"), ("STARENT-MIB", "starPMIPPeerAddr"), ("STARENT-MIB", "starPMIPPeerOldRstCnt"), ("STARENT-MIB", "starPMIPPeerNewRstCnt"), ("STARENT-MIB", "starPMIPPeerSessCnt"), ("STARENT-MIB", "starPMIPFailureReason"))
if mibBuilder.loadTexts: starPMIPPathFailure.setStatus('current')
if mibBuilder.loadTexts: starPMIPPathFailure.setDescription('PMIP Path Failure. Possibe reason: This trap will be triggered by MAGMGR/HAMGR when path failure or node restart is detected.')
starPMIPPathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1261)).setObjects(("STARENT-MIB", "starPMIPVpnName"), ("STARENT-MIB", "starPMIPServName"), ("STARENT-MIB", "starPMIPSelfAddrType"), ("STARENT-MIB", "starPMIPSelfAddr"), ("STARENT-MIB", "starPMIPPeerAddrType"), ("STARENT-MIB", "starPMIPPeerAddr"))
if mibBuilder.loadTexts: starPMIPPathFailureClear.setStatus('current')
if mibBuilder.loadTexts: starPMIPPathFailureClear.setDescription('PMIP Control Path Failure condition is no longer valid.')
starHENBGWMMESCTPAssocDestAddrDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1262)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"), ("STARENT-MIB", "starHENBGWServiceLogicalENBId"), ("STARENT-MIB", "starHENBGWServiceMMEServName"), ("STARENT-MIB", "starHENBGWServicePeerAddr"), ("STARENT-MIB", "starHENBGWServicePeerPort"))
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocDestAddrDown.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocDestAddrDown.setDescription('A HENBGW MME SCTP Association Destination Address is down. Problem Cause: One of destination MME SCTP address is not reachable or removed. Condition Clear Alarm: A starHENBGWMMESCTPAssocDestAddrUp notification will be generated when the HENBGW MME SCTP association destination address is reachable again')
starHENBGWMMESCTPAssocDestAddrUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1263)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"), ("STARENT-MIB", "starHENBGWServiceLogicalENBId"), ("STARENT-MIB", "starHENBGWServiceMMEServName"), ("STARENT-MIB", "starHENBGWServicePeerAddr"), ("STARENT-MIB", "starHENBGWServicePeerPort"))
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocDestAddrUp.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMESCTPAssocDestAddrUp.setDescription('A HENBGW MME SCTP Association Destination Address is up. This notification is only generated for Association Destination Address which have previously been declared down.')
starMRMEServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1264)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMRMEServiceStart.setStatus('current')
if mibBuilder.loadTexts: starMRMEServiceStart.setDescription('A Multi Radio Management (MRME) Service has started. Action to be Taken: No action required')
starMRMEServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1265)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMRMEServiceStop.setStatus('current')
if mibBuilder.loadTexts: starMRMEServiceStop.setDescription('A Multi Radio Management (MRME) Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the MRME service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check \\ the crash logs for an indication of a software failure. Clear Condition: Verify that the MRME service is operational. Condition Clear Alarm: A starMRMEServiceStart notification will be \\ generated when the service is restarted')
starSLSServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1266)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSLSServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSLSServiceStart.setDescription('An SLS Service has started Action to be Taken: No action required')
starSLSServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1267)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSLSServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSLSServiceStop.setDescription('An SLS Service has stopped. Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the SLS service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the SLS service is operational. Condition Clear Alarm: A starSLSServiceStart notification will be generated when the service is restarted')
starESMLCAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1268)).setObjects(("STARENT-MIB", "starSLSServiceVpnName"), ("STARENT-MIB", "starSLSServiceServName"), ("STARENT-MIB", "starESMLCId"), ("STARENT-MIB", "starESMLCIpAddr1"), ("STARENT-MIB", "starESMLCIpAddr2"), ("STARENT-MIB", "starESMLCPortNum"))
if mibBuilder.loadTexts: starESMLCAssocDown.setStatus('current')
if mibBuilder.loadTexts: starESMLCAssocDown.setDescription('An ESMLC Association is down. Problem Cause: The ESMLC Association has failed, or a network connectivity prevents reaching the ESMLC. Condition Clear Alarm: A starESMLCAssocUp notification will be generated when the ESMLC association is up')
starESMLCAssocUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1269)).setObjects(("STARENT-MIB", "starSLSServiceVpnName"), ("STARENT-MIB", "starSLSServiceServName"), ("STARENT-MIB", "starESMLCId"), ("STARENT-MIB", "starESMLCIpAddr1"), ("STARENT-MIB", "starESMLCIpAddr2"), ("STARENT-MIB", "starESMLCPortNum"))
if mibBuilder.loadTexts: starESMLCAssocUp.setStatus('current')
if mibBuilder.loadTexts: starESMLCAssocUp.setDescription('An ESMLC Association is up. This notification is only generated for Association which have previously been declared down.')
starESMLCAllAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1270)).setObjects(("STARENT-MIB", "starSLSServiceVpnName"), ("STARENT-MIB", "starSLSServiceServName"))
if mibBuilder.loadTexts: starESMLCAllAssocDown.setStatus('current')
if mibBuilder.loadTexts: starESMLCAllAssocDown.setDescription('All the ESMLC Associations are down. Problem Cause: All the ESMLC Associations has failed, or network connectivity prevents reaching the ESMLCs. Condition Clear Alarm: An starESMLCAllAssocUp notification will be generated when all the ESMLC associations are up')
starESMLCAllAssocDownClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1271)).setObjects(("STARENT-MIB", "starSLSServiceVpnName"), ("STARENT-MIB", "starSLSServiceServName"))
if mibBuilder.loadTexts: starESMLCAllAssocDownClear.setStatus('current')
if mibBuilder.loadTexts: starESMLCAllAssocDownClear.setDescription('At least one ESMLC associations is up. This notification is only generated for all the Association which have previously been declared down.')
starSBCServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1272)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSBCServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSBCServiceStart.setDescription('An SBc Service has started Action to be Taken: No action required')
starSBCServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1273)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSBCServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSBCServiceStop.setDescription('An SBc Service has stopped. Probable Cause: This is typically caused by operator intervention, when a critical parameter associated with sbc-service is changed/removed. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the SBc service shutdown was not planned, examine the admin logs for any indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check for any sbc-service related configuration errors by running show configuration errors section sbc-service. Note that sbc-service should be associated to an mme-service to be operationally up. In case the associated mme-service is down, sbc-service is also stopped. Also check the crash logs for any indication of a software failure.')
starCBCAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1274)).setObjects(("STARENT-MIB", "starSBCServiceVpnName"), ("STARENT-MIB", "starSBCServiceServName"), ("STARENT-MIB", "starPeerId"), ("STARENT-MIB", "starPeerIpAddr"), ("STARENT-MIB", "starPeerPortNum"))
if mibBuilder.loadTexts: starCBCAssocDown.setStatus('current')
if mibBuilder.loadTexts: starCBCAssocDown.setDescription('A CBC Association is down. Problem Cause: SCTP connection between MME and CBC has been brought down - could be for any of the following reasons - i) network connectivity between MME and CBC is broken. ii) CBC has gracefully terminated the SCTP association with MME. iii) MME has gracefully terminated the SCTP association with CBC, typically due to operation intervention that would have effected sbc-service. Action to be taken - In case the SCTP association between MME and CBC is abnormally closed, check for network connectivity between MME and CBC. Condition Clear Alarm: In case the association termination was abnormal, A starPeerAssocUp notification will be generated when the CBC association is up')
starCBCAssocUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1275)).setObjects(("STARENT-MIB", "starSBCServiceVpnName"), ("STARENT-MIB", "starSBCServiceServName"), ("STARENT-MIB", "starPeerId"), ("STARENT-MIB", "starPeerIpAddr"), ("STARENT-MIB", "starPeerPortNum"))
if mibBuilder.loadTexts: starCBCAssocUp.setStatus('current')
if mibBuilder.loadTexts: starCBCAssocUp.setDescription('A CBC Association is up.')
starCBCBufSizeExceeded = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1403)).setObjects(("STARENT-MIB", "starSBCServiceVpnName"), ("STARENT-MIB", "starSBCServiceServName"), ("STARENT-MIB", "starPeerId"), ("STARENT-MIB", "starPeerIpAddr"), ("STARENT-MIB", "starPeerPortNum"))
if mibBuilder.loadTexts: starCBCBufSizeExceeded.setStatus('current')
if mibBuilder.loadTexts: starCBCBufSizeExceeded.setDescription('A received CBC message exceeded our buffer size limit')
starBFDSessUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1276)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starBfdSrcAddressType"), ("STARENT-MIB", "starBfdSrcAddress"), ("STARENT-MIB", "starBfdDstAddressType"), ("STARENT-MIB", "starBfdDstAddress"), ("STARENT-MIB", "starBfdLocalDisc"), ("STARENT-MIB", "starBfdRemDisc"), ("STARENT-MIB", "starPhyPortId"))
if mibBuilder.loadTexts: starBFDSessUp.setStatus('current')
if mibBuilder.loadTexts: starBFDSessUp.setDescription('The BFD Session to the specified IP address is operational. This may indicate the initial configuration of a new neighbor, the initial connectivity after a system restart, or the restoration of connectivity after a starBFDSessDown event. Action to be Taken: No action required.')
starBFDSessDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1277)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starBfdSrcAddressType"), ("STARENT-MIB", "starBfdSrcAddress"), ("STARENT-MIB", "starBfdDstAddressType"), ("STARENT-MIB", "starBfdDstAddress"), ("STARENT-MIB", "starBfdLocalDisc"), ("STARENT-MIB", "starBfdRemDisc"), ("STARENT-MIB", "starBfdSessDiagCode"), ("STARENT-MIB", "starPhyPortId"))
if mibBuilder.loadTexts: starBFDSessDown.setStatus('current')
if mibBuilder.loadTexts: starBFDSessDown.setDescription('The BFD Session to the specified IP address is no longer operational. Probable Cause: The BFD Session is not-operational; the network between the ASR5x00 and the BFD Neighbor is experiencing an outage; Look into the Diagnostic Code for further details. Action to be Taken: Verify the BFD Session is operational; verify network connectivity to the BFD Neighbor. Clear Condition Alarm: A starBFDSessUp is generated when connectivity is reestablished')
starSRPSwitchoverOccured = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1278)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starSRPIpAddress"), ("STARENT-MIB", "starSRPSwitchReason"))
if mibBuilder.loadTexts: starSRPSwitchoverOccured.setStatus('current')
if mibBuilder.loadTexts: starSRPSwitchoverOccured.setDescription('An SRP (ICSR) Switchover Occurred. Chassis has transitioned from Active to Standby State or Chassis has transitioned from Standby to PendingActive State. Action to be Taken: Verify Active and Standby Chassis States of ICSR pair.')
starHENBGWMMEOverloadStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1279)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"), ("STARENT-MIB", "starHENBGWServiceLogicalENBId"), ("STARENT-MIB", "starHENBGWServiceMMEServName"), ("STARENT-MIB", "starHENBGWServicePeerAddr"), ("STARENT-MIB", "starHENBGWServicePeerPort"), ("STARENT-MIB", "starHENBGWServiceTLRI"))
if mibBuilder.loadTexts: starHENBGWMMEOverloadStart.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMEOverloadStart.setDescription('A HENBGW MME Overload Start message received. Condition Clear Alarm: A starHENBGWMMEOverloadStop notification will be generated when the HENBGW MME overload stop message received.')
starHENBGWMMEOverloadStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1280)).setObjects(("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"), ("STARENT-MIB", "starHENBGWServiceLogicalENBId"), ("STARENT-MIB", "starHENBGWServiceMMEServName"), ("STARENT-MIB", "starHENBGWServicePeerAddr"), ("STARENT-MIB", "starHENBGWServicePeerPort"))
if mibBuilder.loadTexts: starHENBGWMMEOverloadStop.setStatus('current')
if mibBuilder.loadTexts: starHENBGWMMEOverloadStop.setDescription('A HENBGW MME Overload Stop message received. This notification is only generated for the MME which have previously been generated overload start message, optionally this notification can be generated for any overload stop message received from MME.')
starNpudriverECCError = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1281)).setObjects(("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starNpudriverECCError.setStatus('current')
if mibBuilder.loadTexts: starNpudriverECCError.setDescription(' A double bit ECC error occured. Action to be taken - RMA this card.')
starGTPCRLFOverThreshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1282)).setObjects(("STARENT-MIB", "starGTPCRLFSessMgrInst"), ("STARENT-MIB", "starGTPCRLFVPNName"), ("STARENT-MIB", "starGTPCRLFVPNId"), ("STARENT-MIB", "starGTPCRLFContextName"), ("STARENT-MIB", "starGTPCRLFCurrAppTPS"))
if mibBuilder.loadTexts: starGTPCRLFOverThreshold.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFOverThreshold.setDescription(' GTP RLF Status update - GTP RLF Over Threshold. ')
starGTPCRLFOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1283)).setObjects(("STARENT-MIB", "starGTPCRLFSessMgrInst"), ("STARENT-MIB", "starGTPCRLFVPNName"), ("STARENT-MIB", "starGTPCRLFVPNId"), ("STARENT-MIB", "starGTPCRLFContextName"), ("STARENT-MIB", "starGTPCRLFCurrAppDelayTol"))
if mibBuilder.loadTexts: starGTPCRLFOverLimit.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFOverLimit.setDescription(' GTP RLF Status update - GTP RLF Over Limit.')
starGTPCRLFOverThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1284)).setObjects(("STARENT-MIB", "starGTPCRLFSessMgrInst"), ("STARENT-MIB", "starGTPCRLFVPNName"), ("STARENT-MIB", "starGTPCRLFVPNId"), ("STARENT-MIB", "starGTPCRLFContextName"))
if mibBuilder.loadTexts: starGTPCRLFOverThresholdClear.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFOverThresholdClear.setDescription(' GTP RLF Status update - GTP RLF Over Threshold Cleared.')
starGTPCRLFOverLimitClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1285)).setObjects(("STARENT-MIB", "starGTPCRLFSessMgrInst"), ("STARENT-MIB", "starGTPCRLFVPNName"), ("STARENT-MIB", "starGTPCRLFVPNId"), ("STARENT-MIB", "starGTPCRLFContextName"))
if mibBuilder.loadTexts: starGTPCRLFOverLimitClear.setStatus('current')
if mibBuilder.loadTexts: starGTPCRLFOverLimitClear.setDescription(' GTP RLF Status update - GTP RLF Over Limit Cleared.')
starS102ServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1286)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starS102ServiceStart.setStatus('current')
if mibBuilder.loadTexts: starS102ServiceStart.setDescription('An S102 Service has started Action to be Taken: No action required')
starS102ServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1287)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starS102ServiceStop.setStatus('current')
if mibBuilder.loadTexts: starS102ServiceStop.setDescription('An S102 Service has stopped Probable Cause: This is typically caused by operator invention. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the S102 service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the S102 service is operational. Condition Clear Alarm: A starS102ServiceStart notification will be generated when the service is restarted')
starBGPPeerSessionIPv6Up = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1288)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starBGPPeerIpv6Address"))
if mibBuilder.loadTexts: starBGPPeerSessionIPv6Up.setStatus('current')
if mibBuilder.loadTexts: starBGPPeerSessionIPv6Up.setDescription('The BGP peer session to the specified IP v6 address is operational. This may indicate the initial configuration of a new peer, the initial connectivity after a system restart, or the restoration of connectivity after a starBGNPeerSessionDown event. Action to be Taken: No action required.')
starBGPPeerSessionIPv6Down = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1289)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starBGPPeerIpv6Address"))
if mibBuilder.loadTexts: starBGPPeerSessionIPv6Down.setStatus('current')
if mibBuilder.loadTexts: starBGPPeerSessionIPv6Down.setDescription('The BGP peer session to the specified IP v6 address is no longer operational. Probable Cause: The BGP peer is not-operational; the network between the ST16 and the BGP peer is experiencing an outage; LC failure(s) on the ST16. Action to be Taken: Verify the BGP peer is operational; verify network connectivity to the BGP peer. Clear Condition Alarm: A starBGPPeerSessionUp is generated when connectivity is reestablished')
starMMEEMBMSServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1290)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMMEEMBMSServiceStart.setStatus('current')
if mibBuilder.loadTexts: starMMEEMBMSServiceStart.setDescription('An MME-EMBM Service has started Action to be Taken: No action required')
starMMEEMBMSServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1291)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starMMEEMBMSServiceStop.setStatus('current')
if mibBuilder.loadTexts: starMMEEMBMSServiceStop.setDescription('An MME-EMBMS Service has stopped. Probable Cause: This is typically caused by operator intervention, when a critical parameter associated with mme-embms-service is changed/removed. In unusual cases it can be caused by the loss of resources (PACs/PSCs) to support the running configuration. Action to be Taken: If the MME-EMBMS service shutdown was not planned, examine the admin logs for any indication of the failure. Verify that all configured PACs/PSCs are present and running in the system. Check for any mme-embms-service related configuration errors by running show configuration errors section mme-embms-service. Also check the crash logs for any indication of a software failure.')
starMCEAssocDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1292)).setObjects(("STARENT-MIB", "starMMEEMBMSServiceVpnName"), ("STARENT-MIB", "starMMEEMBMSServiceServName"), ("STARENT-MIB", "starMMEEMBMSPeerId"), ("STARENT-MIB", "starMMEEMBMSPeerIpAddr"), ("STARENT-MIB", "starMMEEMBMSPeerPortNum"))
if mibBuilder.loadTexts: starMCEAssocDown.setStatus('current')
if mibBuilder.loadTexts: starMCEAssocDown.setDescription('An MCE Association is down. Problem Cause: SCTP connection between MME and MCE has been brought down - could be for any of the following reasons - i) network connectivity between MME and MCE is broken. ii) MCE has gracefully terminated the SCTP association with MME. iii) MME has gracefully terminated the SCTP association with MCE, typically due to operation intervention that would have effected mme-embms-service. Action to be taken - In case the SCTP association between MME and MCE is abnormally closed, check for network connectivity between MME and MCE. Condition Clear Alarm: In case the association termination was abnormal, A starPeerAssocUp notification will be generated when the MCE association is up')
starMCEAssocUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1293)).setObjects(("STARENT-MIB", "starMMEEMBMSServiceVpnName"), ("STARENT-MIB", "starMMEEMBMSServiceServName"), ("STARENT-MIB", "starMMEEMBMSPeerId"), ("STARENT-MIB", "starMMEEMBMSPeerIpAddr"), ("STARENT-MIB", "starMMEEMBMSPeerPortNum"))
if mibBuilder.loadTexts: starMCEAssocUp.setStatus('current')
if mibBuilder.loadTexts: starMCEAssocUp.setDescription('A MCE Association is up.')
starIuBcTcpConnDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1294)).setObjects(("STARENT-MIB", "starCBSServiceVpnName"), ("STARENT-MIB", "starIuBcSelfIpAddr"), ("STARENT-MIB", "starIuBcSelfPortNum"), ("STARENT-MIB", "starIuBcPeerIpAddr"), ("STARENT-MIB", "starIuBcPeerPortNum"), ("STARENT-MIB", "starIuBcTcpConnCauseStr"))
if mibBuilder.loadTexts: starIuBcTcpConnDown.setStatus('current')
if mibBuilder.loadTexts: starIuBcTcpConnDown.setDescription('A TCP connection at IuBc interface is down. Problem Cause: TCP connection between HNBGW and CBC server has been brought down - could be for any of the following reasons - i) network connectivity between HNBGW and CBC server is broken. ii) CBC Server has gracefully terminated the TCP connection with HNBGW. iii) HNBGW has gracefully terminated the TCP connection with CBC server, typically due to operation intervention that would have effected cbs-service. Action to be taken - In case the TCP connection between HNBGW and CBC server is abnormally closed, check for network connectivity between HNBGW and CBC server. Condition Clear Alarm: In case the connection termination was abnormal, A IuBcTCPConnUp notification will be generated when the TCP connection is up')
starIuBcTcpConnUp = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1295)).setObjects(("STARENT-MIB", "starCBSServiceVpnName"), ("STARENT-MIB", "starIuBcSelfIpAddr"), ("STARENT-MIB", "starIuBcSelfPortNum"), ("STARENT-MIB", "starIuBcPeerIpAddr"), ("STARENT-MIB", "starIuBcPeerPortNum"), ("STARENT-MIB", "starIuBcTcpConnCauseStr"))
if mibBuilder.loadTexts: starIuBcTcpConnUp.setStatus('current')
if mibBuilder.loadTexts: starIuBcTcpConnUp.setDescription('A TCP Connection is up.')
starSessCapReached = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1298)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"))
if mibBuilder.loadTexts: starSessCapReached.setStatus('current')
if mibBuilder.loadTexts: starSessCapReached.setDescription('Session manager will start rejecting new calls as the capacity reached.')
starSerdesLanePermDown = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1303)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starDeviceNum"), ("STARENT-MIB", "starSerdesNum"))
if mibBuilder.loadTexts: starSerdesLanePermDown.setStatus('current')
if mibBuilder.loadTexts: starSerdesLanePermDown.setDescription('A serdes lanes is a high speed serial link between a FAP(chip on an MIO/DPC/DPC2/MIO2) and an FE(chip on an FSC card). When a serdes lane has errors, we calibrate it to get optimized Rx parameters. If we attempt to calibrate a lane more than 5 times, it is taken offline. By taking it offline we no longer use it so we are eliminating potential traffic loss..')
starLAGGroupDownDueToMinlink = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1299)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"), ("STARENT-MIB", "starLAGGroup"), ("STARENT-MIB", "starLAGMinlink"))
if mibBuilder.loadTexts: starLAGGroupDownDueToMinlink.setStatus('current')
if mibBuilder.loadTexts: starLAGGroupDownDueToMinlink.setDescription("LAG group status is Down due to links in LAG group falls below minlink . This notification is only generated for master physical port and a previous 'starLAGGroupUp' notification was previously generated. Action to be Taken: No action required. The cause for the LAG down should be investigated.")
starNicBondChange = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1376)).setObjects(("STARENT-MIB", "starPortSlot"), ("STARENT-MIB", "starPortNum"))
if mibBuilder.loadTexts: starNicBondChange.setStatus('current')
if mibBuilder.loadTexts: starNicBondChange.setDescription('Nic Bond change will happen whenever there is change in the leaf node connected to our ports in QvPC-DI. This notification is generated to inform that there is a change in the vNIC (mac-address). Action to be Taken: No action required. The cause for the leaf node down should be investigated.')
starThreshAllFramedRoutes = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1304)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshAllFramedRoutes.setStatus('current')
if mibBuilder.loadTexts: starThreshAllFramedRoutes.setDescription('All framed routes crosses user defined threshold.')
starThreshAllFramedRoutesClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1305)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshAllFramedRoutesClear.setStatus('current')
if mibBuilder.loadTexts: starThreshAllFramedRoutesClear.setDescription('All framed routes crosses user defined threshold cleared.')
starThreshAllTotalRoutes = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1306)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshAllTotalRoutes.setStatus('current')
if mibBuilder.loadTexts: starThreshAllTotalRoutes.setDescription('All total routes crosses user defined threshold.')
starThreshAllTotalRoutesClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1307)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshAllTotalRoutesClear.setStatus('current')
if mibBuilder.loadTexts: starThreshAllTotalRoutesClear.setDescription('All total routes crosses user defined threshold cleared.')
starThreshVRFFramedRoutes = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1308)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshVRFFramedRoutes.setStatus('current')
if mibBuilder.loadTexts: starThreshVRFFramedRoutes.setDescription('Total number of VRF framed routes crosses user defined threshold.')
starThreshVRFFramedRoutesClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1309)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshVRFFramedRoutesClear.setStatus('current')
if mibBuilder.loadTexts: starThreshVRFFramedRoutesClear.setDescription('Total number of VRF framed routes crosses user defined threshold cleared.')
starThreshVRFTotalRoutes = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1310)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshVRFTotalRoutes.setStatus('current')
if mibBuilder.loadTexts: starThreshVRFTotalRoutes.setDescription('Total number of VRF total routes crosses user defined threshold.')
starThreshVRFTotalRoutesClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1311)).setObjects(("STARENT-MIB", "starContextName"), ("STARENT-MIB", "starVRFName"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshVRFTotalRoutesClear.setStatus('current')
if mibBuilder.loadTexts: starThreshVRFTotalRoutesClear.setDescription('Total number of VRF total routes crosses user defined threshold cleared.')
starStatFilesizeExceeded = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1312)).setObjects(("STARENT-MIB", "starStatFilesizeLimit"), ("STARENT-MIB", "starStatFilesizeMeasured"))
if mibBuilder.loadTexts: starStatFilesizeExceeded.setStatus('current')
if mibBuilder.loadTexts: starStatFilesizeExceeded.setDescription('Actual Bulkstat filesize crosses 80% user defined Bulkstat filesize.')
starStatFilesizeClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1313)).setObjects(("STARENT-MIB", "starStatFilesizeLimit"), ("STARENT-MIB", "starStatFilesizeMeasured"))
if mibBuilder.loadTexts: starStatFilesizeClear.setStatus('current')
if mibBuilder.loadTexts: starStatFilesizeClear.setDescription('Actual Bulkstat filesize crosses 80% user defined Bulkstat filesize condition cleared.')
starThreshLMASetupBindingUpdateDenyRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1314)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshLMASetupBindingUpdateDenyRate.setStatus('current')
if mibBuilder.loadTexts: starThreshLMASetupBindingUpdateDenyRate.setDescription("The percentage of LMA setup binding update deny rate which failed has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearLMASetupBindingUpdateDenyRate notification will be generated when the measured value falls below the threshold.")
starThreshClearLMASetupBindingUpdateDenyRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1315)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearLMASetupBindingUpdateDenyRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearLMASetupBindingUpdateDenyRate.setDescription('The threshold condition is now clear.')
starThreshMAGSetupBindingUpdateDenyRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1316)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshMAGSetupBindingUpdateDenyRate.setStatus('current')
if mibBuilder.loadTexts: starThreshMAGSetupBindingUpdateDenyRate.setDescription("The percentage of MAG setup binding update deny rate which failed has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearMAGSetupBindingUpdateDenyRate notification will be generated when the measured value falls below the threshold.")
starThreshClearMAGSetupBindingUpdateDenyRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1317)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearMAGSetupBindingUpdateDenyRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearMAGSetupBindingUpdateDenyRate.setDescription('The threshold condition is now clear.')
starThreshEGTPCS2BSetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1318)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshEGTPCS2BSetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshEGTPCS2BSetupFailRate.setDescription("The percentage of EGTPC S2B setup fail rate which failed has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearEGTPC S2B SetupFailRate notification will be generated when the measured value falls below the threshold.")
starThreshClearEGTPCS2BSetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1319)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearEGTPCS2BSetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEGTPCS2BSetupFailRate.setDescription('The threshold condition is now clear.')
starThreshSNXDisconnectReason = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1320)).setObjects(("STARENT-MIB", "starDiscReasons"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshSNXDisconnectReason.setStatus('current')
if mibBuilder.loadTexts: starThreshSNXDisconnectReason.setDescription('The threshold when exceeded the configured values for a given disconnect-reason, trap will be raised.')
starThreshClearSNXDisconnectReason = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1321)).setObjects(("STARENT-MIB", "starDiscReasons"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearSNXDisconnectReason.setStatus('current')
if mibBuilder.loadTexts: starThreshClearSNXDisconnectReason.setDescription('The threshold condition is now clear.')
starTetheringTACDatabaseUpgradeFailureStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1322)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringTACDatabaseUpgradeFailureStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringTACDatabaseUpgradeFailureStatus.setDescription('Tethering TAC Database Upgrade Failure Status. Condition Clear Alarm: This condition is cleared by starTetheringTACDatabaseUpgradeSuccessStatus notification.')
starTetheringTACDatabaseUpgradeSuccessStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1323)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringTACDatabaseUpgradeSuccessStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringTACDatabaseUpgradeSuccessStatus.setDescription('Tethering TAC Database Upgrade Failure Success. Action to be taken: No action required ')
starTetheringOSDatabaseUpgradeFailureStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1324)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringOSDatabaseUpgradeFailureStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringOSDatabaseUpgradeFailureStatus.setDescription('Tethering OS Database Upgrade Failure Status. Condition Clear Alarm: This condition is cleared by starTetheringOSDatabaseUpgradeSuccessStatus notification.')
starTetheringOSDatabaseUpgradeSuccessStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1325)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringOSDatabaseUpgradeSuccessStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringOSDatabaseUpgradeSuccessStatus.setDescription('Tethering OS Database Upgrade Failure Success. Action to be taken: No action required ')
starTetheringV6OSDatabaseUpgradeFailureStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1326)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringV6OSDatabaseUpgradeFailureStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringV6OSDatabaseUpgradeFailureStatus.setDescription('Tethering V6OS Database Upgrade Failure Status. Condition Clear Alarm: This condition is cleared by starTetheringV6OSDatabaseUpgradeSuccessStatus notification.')
starTetheringV6OSDatabaseUpgradeSuccessStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1327)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringV6OSDatabaseUpgradeSuccessStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringV6OSDatabaseUpgradeSuccessStatus.setDescription('Tethering V6OS Database Upgrade Failure Success. Action to be taken: No action required ')
starTetheringUADatabaseUpgradeFailureStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1328)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringUADatabaseUpgradeFailureStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringUADatabaseUpgradeFailureStatus.setDescription('Tethering V6OS Database Upgrade Failure Status. Condition Clear Alarm: This condition is cleared by starTetheringUADatabaseUpgradeSuccessStatus notification.')
starTetheringUADatabaseUpgradeSuccessStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1329)).setObjects(("STARENT-MIB", "starTetheringDatabasePreDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starTetheringDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starTetheringUADatabaseUpgradeSuccessStatus.setStatus('current')
if mibBuilder.loadTexts: starTetheringUADatabaseUpgradeSuccessStatus.setDescription('Tethering UA Database Upgrade Failure Success. Action to be taken: No action required ')
starThreshEGTPCS5SetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1330)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshEGTPCS5SetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshEGTPCS5SetupFailRate.setDescription("The percentage of EGTPC S5 setup fail rate which failed has exceeded the configured threshold during the current monitoring period. Probable Cause: This is a user configurable threshold. If the thresholding subsystem is configured to run in an 'alarm' model, a starThreshClearEGTPCS5SetupFailRate notification will be generated when the measured value falls below the threshold.")
starThreshClearEGTPCS5SetupFailRate = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1331)).setObjects(("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearEGTPCS5SetupFailRate.setStatus('current')
if mibBuilder.loadTexts: starThreshClearEGTPCS5SetupFailRate.setDescription('The threshold condition is now clear.')
starDdfReload = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1332)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starDdfDev"))
if mibBuilder.loadTexts: starDdfReload.setStatus('current')
if mibBuilder.loadTexts: starDdfReload.setDescription(' DDF MCDMA Engine Reloaded due to CRC Error. This is not applicable to QVPC-SI and QVPC-DI.')
starHdRaidMgmtCardSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1333)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starHdRaidMgmtCardSwitchoverCause"))
if mibBuilder.loadTexts: starHdRaidMgmtCardSwitchover.setStatus('current')
if mibBuilder.loadTexts: starHdRaidMgmtCardSwitchover.setDescription(' Management Card Switchover due to unrecoverable HDRaid error.')
starThreshLSLogsVolume = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1334)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshLSLogsVolume.setStatus('current')
if mibBuilder.loadTexts: starThreshLSLogsVolume.setDescription('When any facility and instance generate event-logs more than the configured amount of threshold for a configured amount of time, will trigger a trap.')
starThreshClearLSLogsVolume = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1335)).setObjects(("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshClearLSLogsVolume.setStatus('current')
if mibBuilder.loadTexts: starThreshClearLSLogsVolume.setDescription('When any facility and instance generate event-logs less than the clear threshold, will trigger clear trap.')
starIKEv2DOSAttack = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1336)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DOSAttack.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DOSAttack.setDescription('Alarm will be triggered when a ipsecmgr facility is under DDOS attack.')
starIKEv2ClearDOSAttack = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1337)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2ClearDOSAttack.setStatus('current')
if mibBuilder.loadTexts: starIKEv2ClearDOSAttack.setDescription('Alarm will be triggered when a ipsecmgr facility is out of DDOS attack.')
starIKEv2DecryptionFailThreshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1338)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starSessSub1NAI"), ("STARENT-MIB", "starSessSub1IpAddr"))
if mibBuilder.loadTexts: starIKEv2DecryptionFailThreshold.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DecryptionFailThreshold.setDescription('Alarm will be triggered when decryption fail count for subsequent IKEV2 messages from a UE increases configured value .')
starIKEv2ClearDecryptionFailThreshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1339)).setObjects(("STARENT-MIB", "starTaskInstance"), ("STARENT-MIB", "starSessSub1NAI"), ("STARENT-MIB", "starSessSub1IpAddr"))
if mibBuilder.loadTexts: starIKEv2ClearDecryptionFailThreshold.setStatus('current')
if mibBuilder.loadTexts: starIKEv2ClearDecryptionFailThreshold.setDescription('Alarm will be triggered when UE sends a valid IKEv2 packet , for which the decryption passes')
starDiameterRlfThresholdOver = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1340)).setObjects(("STARENT-MIB", "starDiameterDiamproxyInstance"), ("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterRlfContext"), ("STARENT-MIB", "starDiameterPeerName"), ("STARENT-MIB", "starDiameterEndpointName"), ("STARENT-MIB", "starDiameterRlfECode"), ("STARENT-MIB", "starDiameterRlfTps"), ("STARENT-MIB", "starDiameterRlfDelayTolerance"), ("STARENT-MIB", "starDiameterRlfQueuePercent"))
if mibBuilder.loadTexts: starDiameterRlfThresholdOver.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfThresholdOver.setDescription('Diameter RLF hit upper threshold')
starDiameterRlfOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1341)).setObjects(("STARENT-MIB", "starDiameterDiamproxyInstance"), ("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterRlfContext"), ("STARENT-MIB", "starDiameterPeerName"), ("STARENT-MIB", "starDiameterEndpointName"), ("STARENT-MIB", "starDiameterRlfECode"), ("STARENT-MIB", "starDiameterRlfTps"), ("STARENT-MIB", "starDiameterRlfDelayTolerance"), ("STARENT-MIB", "starDiameterRlfQueuePercent"))
if mibBuilder.loadTexts: starDiameterRlfOverLimit.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfOverLimit.setDescription('Diameter RLF queue full')
starDiameterRlfThresholdGood = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1342)).setObjects(("STARENT-MIB", "starDiameterDiamproxyInstance"), ("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterRlfContext"), ("STARENT-MIB", "starDiameterPeerName"), ("STARENT-MIB", "starDiameterEndpointName"), ("STARENT-MIB", "starDiameterRlfECode"), ("STARENT-MIB", "starDiameterRlfTps"), ("STARENT-MIB", "starDiameterRlfDelayTolerance"), ("STARENT-MIB", "starDiameterRlfQueuePercent"))
if mibBuilder.loadTexts: starDiameterRlfThresholdGood.setStatus('current')
if mibBuilder.loadTexts: starDiameterRlfThresholdGood.setDescription('Diameter RLF under stable condition')
starThreshHatHb5MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1343)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshHatHb5MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshHatHb5MinsLoss.setDescription('Heartbeat loss for past 5 mins on each card with respect to each peer card.')
starThreshClearHatHb5MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1344)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearHatHb5MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHatHb5MinsLoss.setDescription('Clear heartbeat loss for past 5 mins interval on each card with respect to each peer card.')
starThreshHatHb60MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1345)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshHatHb60MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshHatHb60MinsLoss.setDescription('Heartbeat loss for past 60 mins on each card with respect to each peer card.')
starThreshClearHatHb60MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1346)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearHatHb60MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshClearHatHb60MinsLoss.setDescription('Clear heartbeat loss for past 60 mins interval on each card with respect to each peer card.')
starGlobalCLISessionsLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1347)).setObjects(("STARENT-MIB", "starCLIActiveCount"), ("STARENT-MIB", "starCLIMaxCount"))
if mibBuilder.loadTexts: starGlobalCLISessionsLimit.setStatus('current')
if mibBuilder.loadTexts: starGlobalCLISessionsLimit.setDescription('Glocal Concurrent CLI Sessions limit has been hit. Total number of Active CLI Sessions have exceeded configured Maximum Limit. If possible, please cleanup idle sessions.')
starUserCLISessionsLimit = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1348)).setObjects(("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"), ("STARENT-MIB", "starCLIDatabaseUsername"), ("STARENT-MIB", "starCLIPrivs"), ("STARENT-MIB", "starCLIActiveCount"), ("STARENT-MIB", "starCLIMaxCount"))
if mibBuilder.loadTexts: starUserCLISessionsLimit.setStatus('current')
if mibBuilder.loadTexts: starUserCLISessionsLimit.setDescription('Concurrent CLI Sessions limit has been hit for this user. Total number of Active CLI Sessions have exceeded configured Maximum Limit for this use. If possible, please cleanup idle sessions.')
starSmartLicenseServiceOOC = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1349)).setObjects(("STARENT-MIB", "starSmartLicenseServiceName"), ("STARENT-MIB", "starSmartLicenseServiceUsage"))
if mibBuilder.loadTexts: starSmartLicenseServiceOOC.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseServiceOOC.setDescription('Smart Licence Service Usage is Out-Of-Compliance, new calls are not allowed for this license. Action to be Taken: Please make sure surplus licenses are available to avoid service distruption')
starSmartLicenseServiceOOCClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1350)).setObjects(("STARENT-MIB", "starSmartLicenseServiceName"), ("STARENT-MIB", "starSmartLicenseServiceUsage"))
if mibBuilder.loadTexts: starSmartLicenseServiceOOCClear.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseServiceOOCClear.setDescription('Smart Licence Service Usage is In-Compliance, new calls are allowed for this license.')
starSmartLicenseEvalMode = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1351)).setObjects(("STARENT-MIB", "starSmartLicenseEvalModeRemaining"))
if mibBuilder.loadTexts: starSmartLicenseEvalMode.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseEvalMode.setDescription('Smart Licensing device is in evaluation period, device being used without registering. Action to be Taken: Please register the device with idtoken.')
starSmartLicenseEvalModeClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1352)).setObjects(("STARENT-MIB", "starSmartLicenseEvalModeRemaining"))
if mibBuilder.loadTexts: starSmartLicenseEvalModeClear.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseEvalModeClear.setDescription('Smart Licensing device is now registered and authorized successfully.')
starSmartLicenseEvalModeExpire = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1353))
if mibBuilder.loadTexts: starSmartLicenseEvalModeExpire.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseEvalModeExpire.setDescription('Smart Licensing device in evaluation period has expired. Action to be Taken: Smart Licensing device works only with valid license, no more evaluation period allowed.')
starSmartLicenseEvalModeExpireClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1354))
if mibBuilder.loadTexts: starSmartLicenseEvalModeExpireClear.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseEvalModeExpireClear.setDescription('Smart Licensing device evaluation period is reseted. Device can be used for 90 days in evaluation period.')
starSmartLicenseCSSMConntectionFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1355))
if mibBuilder.loadTexts: starSmartLicenseCSSMConntectionFail.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseCSSMConntectionFail.setDescription('Smart License device unable to connect CSSM License Server. Action to be Taken: Make sure to connect the device to the CSSM License Server to avoid service distruption.')
starSmartLicenseCSSMConnectionFailClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1356))
if mibBuilder.loadTexts: starSmartLicenseCSSMConnectionFailClear.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseCSSMConnectionFailClear.setDescription('Smart License device is now able to connect the CSSM License Server.')
starSxServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1357)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSxServiceStart.setStatus('current')
if mibBuilder.loadTexts: starSxServiceStart.setDescription('A Packet Data Network Gateway Sx-Service has started. Action to be Taken: No action required')
starSxServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1358)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starSxServiceStop.setStatus('current')
if mibBuilder.loadTexts: starSxServiceStop.setDescription('A Packet Data Network Gateway Sx-Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the Sx-service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the Sx service is operational. Condition Clear Alarm: A starSxServiceStart notification will be generated when the service is restarted')
starUplaneServiceStart = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1359)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starUplaneServiceStart.setStatus('current')
if mibBuilder.loadTexts: starUplaneServiceStart.setDescription('A User Plane (uplane) Service has started. Action to be Taken: No action required')
starUplaneServiceStop = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1360)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"))
if mibBuilder.loadTexts: starUplaneServiceStop.setStatus('current')
if mibBuilder.loadTexts: starUplaneServiceStop.setDescription('A User Plane (uplane) Service has stopped. Probable Cause: This is typically caused by operator intervention. In rare cases it can be caused by the loss of resources (PSCs) to support the running configuration. Action to be Taken: If the User-Plane service shutdown was not planned, examine the admin logs for an indication of the failure. Verify that all configured PSCs are present and running in the system. Check the crash logs for an indication of a software failure. Clear Condition: Verify that the User-Plane service is operational. Condition Clear Alarm: A starUplaneServiceStart notification will be generated when the service is restarted')
DisabledEventIDs = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1361)).setObjects(("STARENT-MIB", "starCLIEventIDStart"), ("STARENT-MIB", "starCLIEventIDEnd"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIPrivs"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: DisabledEventIDs.setStatus('current')
if mibBuilder.loadTexts: DisabledEventIDs.setDescription('Informs about the Logging Event ID Range that has been disabled by an user.')
LogLevelChanged = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1362)).setObjects(("STARENT-MIB", "starCLILogLevelChanged"), ("STARENT-MIB", "starCLIUsername"), ("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starCLIPrivs"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"))
if mibBuilder.loadTexts: LogLevelChanged.setStatus('current')
if mibBuilder.loadTexts: LogLevelChanged.setDescription('Informs about the change in logging level of a facility by an user.')
starThreshTotalVolume = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1363)).setObjects(("STARENT-MIB", "starRuleBaseName"), ("STARENT-MIB", "starRuleDefName"), ("STARENT-MIB", "starGroupOfRuledef"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshTotalVolume.setStatus('current')
if mibBuilder.loadTexts: starThreshTotalVolume.setDescription('Total Volume for Specified RuleBase and RuleDef')
starThreshTotalVolumeClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1364)).setObjects(("STARENT-MIB", "starRuleBaseName"), ("STARENT-MIB", "starRuleDefName"), ("STARENT-MIB", "starGroupOfRuledef"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starThreshTotalVolumeClear.setStatus('current')
if mibBuilder.loadTexts: starThreshTotalVolumeClear.setDescription('Total Volume for Specified RuleBase and RuleDef')
starIKEv2DDOSAttackUDPFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1365)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DDOSAttackUDPFail.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDOSAttackUDPFail.setDescription('Alarm will be triggered when a ipsecdemux encounters high UDP errors rate.')
starIKEv2DDOSAttackClearUDPFail = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1366)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DDOSAttackClearUDPFail.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDOSAttackClearUDPFail.setDescription('Alarm will be triggered when udp error rate falls below threshold or config is disabled.')
starIKEv2DDOSAttackUDPFailPeer = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1367)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DDOSAttackUDPFailPeer.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDOSAttackUDPFailPeer.setDescription('Alarm will be triggered when a IKEv2 UDP failure rate crosses configured upper threshold for Source-IP')
starIKEv2ClearDDOSAttackUDPFailPeer = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1368)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2ClearDDOSAttackUDPFailPeer.setStatus('current')
if mibBuilder.loadTexts: starIKEv2ClearDDOSAttackUDPFailPeer.setDescription('Alarm will be triggered when IKEv2 UDP failure rate comes down below configured lower threshold for Source-IP or config is disabled.')
starIKEv2DDOSAttackINITFlood = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1369)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DDOSAttackINITFlood.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDOSAttackINITFlood.setDescription('Alarm will be triggered when a ipsecdemux encounters Flood of INIT requests.')
starIKEv2DDOSAttackClearINITFlood = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1370)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DDOSAttackClearINITFlood.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDOSAttackClearINITFlood.setDescription('Alarm will be triggered when rate of INIT requests falls below threshold or config is disabled.')
starIKEv2DDOSAttackINITPeerFlood = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1371)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DDOSAttackINITPeerFlood.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDOSAttackINITPeerFlood.setDescription('Alarm will be triggered when a ipsecdemux encounters Flood of INIT requests.')
starIKEv2DDOSAttackClearINITPeerFlood = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1372)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2DDOSAttackClearINITPeerFlood.setStatus('current')
if mibBuilder.loadTexts: starIKEv2DDOSAttackClearINITPeerFlood.setDescription('Alarm will be triggered when rate of INIT requests falls below threshold or config is disabled.')
starIFTaskHealthFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1373)).setObjects(("STARENT-MIB", "starSlotNum"))
if mibBuilder.loadTexts: starIFTaskHealthFailure.setStatus('current')
if mibBuilder.loadTexts: starIFTaskHealthFailure.setDescription('A failure of an IFTASK worker thread health has been detected. This may lead to internal control plane network slow down. Action to be Taken: If this condition persists, the identified card needs to be rebooted. This is applicable to QvPC DI and SI platforms.')
starIKEv2ReqRateThreshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1374)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2ReqRateThreshold.setStatus('current')
if mibBuilder.loadTexts: starIKEv2ReqRateThreshold.setDescription('Alarm will be triggered when IKEv2 Request messages crosses the configured threshold.')
starIKEv2ClearReqRateThreshold = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1375)).setObjects(("STARENT-MIB", "starTaskInstance"))
if mibBuilder.loadTexts: starIKEv2ClearReqRateThreshold.setStatus('current')
if mibBuilder.loadTexts: starIKEv2ClearReqRateThreshold.setDescription('Alarm will be triggered when either IKESA session is deleted or IKEv2 Request messages per interval reaches lower than configured threshold.')
starChassisStartupTimeout = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1377))
if mibBuilder.loadTexts: starChassisStartupTimeout.setStatus('current')
if mibBuilder.loadTexts: starChassisStartupTimeout.setDescription('Not all cards did not comeup within chassis timeout, chassis will proceed with whatever cards are present and start applying the startup configuration')
starNeedADCLicense = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1378)).setObjects(("STARENT-MIB", "starP2PPluginVersion"), ("STARENT-MIB", "starADCLicenseExpiryDate"))
if mibBuilder.loadTexts: starNeedADCLicense.setStatus('current')
if mibBuilder.loadTexts: starNeedADCLicense.setDescription('ADC license required. Action to be taken: Please purchase and configure ADC license')
starNeedADCLicenseClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1379)).setObjects(("STARENT-MIB", "starP2PPluginVersion"))
if mibBuilder.loadTexts: starNeedADCLicenseClear.setStatus('current')
if mibBuilder.loadTexts: starNeedADCLicenseClear.setDescription('ADC license present.')
starADCLicenseAboutToExpire = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1380)).setObjects(("STARENT-MIB", "starADCLicenseExpiryDate"))
if mibBuilder.loadTexts: starADCLicenseAboutToExpire.setStatus('current')
if mibBuilder.loadTexts: starADCLicenseAboutToExpire.setDescription('ADC license is about to expire. Action to be Taken: A new ADC license should be created and configured on the system before the grace period is over.')
starADCLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1381)).setObjects(("STARENT-MIB", "starLicenseExpiryDate"))
if mibBuilder.loadTexts: starADCLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: starADCLicenseExpired.setDescription('ADC license has expired. Action to be Taken: A new license should be created and configured on the system.')
starSxPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1382)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starSxSelfAddr"), ("STARENT-MIB", "starSxPeerAddr"), ("STARENT-MIB", "starSxPeerOldRecTimeStamp"), ("STARENT-MIB", "starSxPeerNewRecTimeStamp"), ("STARENT-MIB", "starSxFailureCause"))
if mibBuilder.loadTexts: starSxPathFailure.setStatus('current')
if mibBuilder.loadTexts: starSxPathFailure.setDescription('Sx Path Failure. No response received for Sx request sent to Sx Peer. Possibe reason: Remote Sx peer is down Condition Clear Alarm: A StarSxPathFailureClear notification will be generated when the path to the remote Sx peer becomes available')
starSxPathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1383)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starSxSelfAddr"), ("STARENT-MIB", "starSxPeerAddr"), ("STARENT-MIB", "starSxPeerNewRecTimeStamp"), ("STARENT-MIB", "starSxFailureCause"))
if mibBuilder.loadTexts: starSxPathFailureClear.setStatus('current')
if mibBuilder.loadTexts: starSxPathFailureClear.setDescription('Sx Path Failure condition is no longer valid.')
starThreshDataPlaneMonitor5MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1384)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshDataPlaneMonitor5MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshDataPlaneMonitor5MinsLoss.setDescription('5 minute data plane monitor packet loss between peer cards.')
starThreshClearDataPlaneMonitor5MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1385)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearDataPlaneMonitor5MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDataPlaneMonitor5MinsLoss.setDescription('Clear 5 minute data plane monitor packet loss between peer cards.')
starThreshDataPlaneMonitor60MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1386)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshDataPlaneMonitor60MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshDataPlaneMonitor60MinsLoss.setDescription('60 minute data plane monitor packet loss between peer cards.')
starThreshClearDataPlaneMonitor60MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1387)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearDataPlaneMonitor60MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshClearDataPlaneMonitor60MinsLoss.setDescription('Clear 60 minute data plane monitor packet loss between peer cards.')
starThreshControlPlaneMonitor5MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1388)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshControlPlaneMonitor5MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshControlPlaneMonitor5MinsLoss.setDescription('5 minute control plane monitor packet loss between peer cards.')
starThreshClearControlPlaneMonitor5MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1389)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearControlPlaneMonitor5MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshClearControlPlaneMonitor5MinsLoss.setDescription('Clear 5 minute control plane monitor packet loss between peer cards.')
starThreshControlPlaneMonitor60MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1390)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshControlPlaneMonitor60MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshControlPlaneMonitor60MinsLoss.setDescription('60 minute control plane monitor packet loss between peer cards.')
starThreshClearControlPlaneMonitor60MinsLoss = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1391)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredPct"))
if mibBuilder.loadTexts: starThreshClearControlPlaneMonitor60MinsLoss.setStatus('current')
if mibBuilder.loadTexts: starThreshClearControlPlaneMonitor60MinsLoss.setDescription('Clear 60 minute control plane monitor packet loss between peer cards.')
starSxPeerAssociated = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1392)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starSxInterfaceType"), ("STARENT-MIB", "starSxSelfAddr"), ("STARENT-MIB", "starSxPeerAddr"), ("STARENT-MIB", "starSxInterfaceType"), ("STARENT-MIB", "starSxCPUPGroupName"))
if mibBuilder.loadTexts: starSxPeerAssociated.setStatus('current')
if mibBuilder.loadTexts: starSxPeerAssociated.setDescription('Sx Peer Association sucessful with <Sx-Interface-Type Self-IP Peer-IP and Sx-Interface-Type>.')
starSxPeerAssociationRelease = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1393)).setObjects(("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starSxInterfaceType"), ("STARENT-MIB", "starSxSelfAddr"), ("STARENT-MIB", "starSxPeerAddr"), ("STARENT-MIB", "starSxInterfaceType"), ("STARENT-MIB", "starSxCPUPGroupName"))
if mibBuilder.loadTexts: starSxPeerAssociationRelease.setStatus('current')
if mibBuilder.loadTexts: starSxPeerAssociationRelease.setDescription('Sx Peer Association released sucessfully with <Sx-Interface-Type Sx-Self-IP Sx-Peer-IP and Sx-Interface-Type>.')
starChassisThroughputOver = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1394)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starChassisThroughputOver.setStatus('current')
if mibBuilder.loadTexts: starChassisThroughputOver.setDescription('Chassis Throughput exceeds over-limit.')
starChassisThroughputOverClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1395)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starChassisThroughputOverClear.setStatus('current')
if mibBuilder.loadTexts: starChassisThroughputOverClear.setDescription('Chassis Throughput Over trap cleared.')
starChassisThroughputWarn = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1396)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starChassisThroughputWarn.setStatus('current')
if mibBuilder.loadTexts: starChassisThroughputWarn.setDescription('Chassis Throughput Exceeds Warn Threshold.')
starChassisThroughputWarnClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1397)).setObjects(("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredInt"))
if mibBuilder.loadTexts: starChassisThroughputWarnClear.setStatus('current')
if mibBuilder.loadTexts: starChassisThroughputWarnClear.setDescription('Chassis Throughput Warn Trap cleared.')
starIFTaskBootConfigApplied = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1398)).setObjects(("STARENT-MIB", "starSlotNum"), ("STARENT-MIB", "starCPUNumber"))
if mibBuilder.loadTexts: starIFTaskBootConfigApplied.setStatus('current')
if mibBuilder.loadTexts: starIFTaskBootConfigApplied.setDescription('IFTask Boot Configuration has been applied on identified card-cpu.')
starUidhURLHostDatabaseUpgradeFailureStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1399)).setObjects(("STARENT-MIB", "starCommonDatabasePreDBVersion"), ("STARENT-MIB", "starCommonDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starCommonDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starUidhURLHostDatabaseUpgradeFailureStatus.setStatus('current')
if mibBuilder.loadTexts: starUidhURLHostDatabaseUpgradeFailureStatus.setDescription('UIDH URL-HOST Database Upgrade Failure Status. Condition Clear Alarm: This condition is cleared by starUidhURLHostDatabaseUpgradeSuccessStatus notification.')
starUidhURLHostDatabaseUpgradeSuccessStatus = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1400)).setObjects(("STARENT-MIB", "starCommonDatabasePreDBVersion"), ("STARENT-MIB", "starCommonDatabaseUpgradeDBVersion"), ("STARENT-MIB", "starCommonDatabaseUpgradeComment"))
if mibBuilder.loadTexts: starUidhURLHostDatabaseUpgradeSuccessStatus.setStatus('current')
if mibBuilder.loadTexts: starUidhURLHostDatabaseUpgradeSuccessStatus.setDescription('UIDH URL-HOST Database Upgrade Success. Action to be taken: No action required ')
starSmartLicenseFeatureOOC = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1401)).setObjects(("STARENT-MIB", "starSmartLicenseFeatureName"), ("STARENT-MIB", "starSmartLicenseFeatureUsage"))
if mibBuilder.loadTexts: starSmartLicenseFeatureOOC.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseFeatureOOC.setDescription('Smart Licence Feature Usage is Out-Of-Compliance, new calls are not allowed for services which uses this feature license. Action to be Taken: Please make sure surplus licenses are available to avoid service distruption')
starSmartLicenseFeatureOOCClear = NotificationType((1, 3, 6, 1, 4, 1, 8164, 2, 1402)).setObjects(("STARENT-MIB", "starSmartLicenseFeatureName"), ("STARENT-MIB", "starSmartLicenseFeatureUsage"))
if mibBuilder.loadTexts: starSmartLicenseFeatureOOCClear.setStatus('current')
if mibBuilder.loadTexts: starSmartLicenseFeatureOOCClear.setDescription('Smart Licence Feature Usage is In-Compliance, new calls are allowed for services which uses this feature license.')
starentMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 3))
starentMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 3, 1))
starentMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8164, 3, 2))
starentMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 8164, 3, 2, 2)).setObjects(("STARENT-MIB", "starChassisGroup"), ("STARENT-MIB", "starAlertGroup"), ("STARENT-MIB", "starAlertTrapGroup"), ("STARENT-MIB", "starTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    starentMIBCompliance2 = starentMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: starentMIBCompliance2.setDescription('The compliance statement for ...')
starChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8164, 3, 1, 1))
for _starChassisGroup_obj in [[("STARENT-MIB", "starChassisCriticalCO"), ("STARENT-MIB", "starChassisMajorCO"), ("STARENT-MIB", "starChassisMinorCO"), ("STARENT-MIB", "starChassisAudibleAlarm"), ("STARENT-MIB", "starChassisUTCTime"), ("STARENT-MIB", "starChassisLocalTime"), ("STARENT-MIB", "starChassisType"), ("STARENT-MIB", "starChassisAction"), ("STARENT-MIB", "starTimeTicks"), ("STARENT-MIB", "starChassisDescription"), ("STARENT-MIB", "starChassisSWRevision"), ("STARENT-MIB", "starChassisPeakCpuUsage"), ("STARENT-MIB", "starChassisPeakMemoryUsage"), ("STARENT-MIB", "starSlotType"), ("STARENT-MIB", "starCardType"), ("STARENT-MIB", "starCardOperState"), ("STARENT-MIB", "starCardAdminState"), ("STARENT-MIB", "starCardRevision"), ("STARENT-MIB", "starCardLastStateChange"), ("STARENT-MIB", "starCardMode"), ("STARENT-MIB", "starCardPacStandbyPriority"), ("STARENT-MIB", "starCardLock"), ("STARENT-MIB", "starCardHaltIssued"), ("STARENT-MIB", "starCardRebootPending"), ("STARENT-MIB", "starCardUsable"), ("STARENT-MIB", "starCardSinglePOF"), ("STARENT-MIB", "starCardAttachment"), ("STARENT-MIB", "starCardTemperature"), ("STARENT-MIB", "starSlotNumPorts"), ("STARENT-MIB", "starSlotAction"), ("STARENT-MIB", "starSlotVoltageState"), ("STARENT-MIB", "starSlotNumCPU"), ("STARENT-MIB", "starSlotPartNumber"), ("STARENT-MIB", "starSlotPartRevision"), ("STARENT-MIB", "starSlotSerialNumber"), ("STARENT-MIB", "starSlotCLEICode"), ("STARENT-MIB", "starSlotCiscoModelName"), ("STARENT-MIB", "starSlotCiscoHardwareRev"), ("STARENT-MIB", "starSlotCiscoSerialNumber"), ("STARENT-MIB", "starDeviceNum"), ("STARENT-MIB", "starSerdesNum"), ("STARENT-MIB", "starSlotMappingType"), ("STARENT-MIB", "starSlotMappingRCCNum"), ("STARENT-MIB", "starSlotMappingToSlot"), ("STARENT-MIB", "starNPUSlot"), ("STARENT-MIB", "starFanNum"), ("STARENT-MIB", "starFanLocation"), ("STARENT-MIB", "starFanStatus"), ("STARENT-MIB", "starFanSpeed"), ("STARENT-MIB", "starLogCurSize"), ("STARENT-MIB", "starLogMaxSize"), ("STARENT-MIB", "starLogText"), ("STARENT-MIB", "starPowerState"), ("STARENT-MIB", "starCPUUser"), ("STARENT-MIB", "starCPUSystem"), ("STARENT-MIB", "starCPUIdle"), ("STARENT-MIB", "starCPUIO"), ("STARENT-MIB", "starCPUIRQ"), ("STARENT-MIB", "starCPULoad1Min"), ("STARENT-MIB", "starCPULoad5Min"), ("STARENT-MIB", "starCPULoad15Min"), ("STARENT-MIB", "starCPUMemTotal"), ("STARENT-MIB", "starCPUMemUsed"), ("STARENT-MIB", "starCPUNumProcesses"), ("STARENT-MIB", "starCPUMemCached"), ("STARENT-MIB", "starSessInProgCalls"), ("STARENT-MIB", "starSessInProgActiveCalls"), ("STARENT-MIB", "starSessInProgDormantCalls"), ("STARENT-MIB", "starSessInProgArrived"), ("STARENT-MIB", "starSessInProgLCPNeg"), ("STARENT-MIB", "starSessInProgLCPUp"), ("STARENT-MIB", "starSessInProgAuthenticating"), ("STARENT-MIB", "starSessInProgAuthenticated"), ("STARENT-MIB", "starSessInProgIPCPUp"), ("STARENT-MIB", "starSessInProgSIPConn"), ("STARENT-MIB", "starSessInProgMIPConn"), ("STARENT-MIB", "starSessInProgDisc"), ("STARENT-MIB", "starSessMgrCount"), ("STARENT-MIB", "starSessTtlArrived"), ("STARENT-MIB", "starSessTtlRejected"), ("STARENT-MIB", "starSessTtlConnected"), ("STARENT-MIB", "starSessTtlAuthSucc"), ("STARENT-MIB", "starSessTtlAuthFail"), ("STARENT-MIB", "starSessTtlLCPUp"), ("STARENT-MIB", "starSessTtlIPCPUp"), ("STARENT-MIB", "starSessTtlSrcViol"), ("STARENT-MIB", "starSessTtlKeepFail"), ("STARENT-MIB", "starSessTtlOctForwarded"), ("STARENT-MIB", "starSessTtlRPRegAccept"), ("STARENT-MIB", "starSessTtlRPRegAcceptInterPDSN"), ("STARENT-MIB", "starSessCurrPPPSessions"), ("STARENT-MIB", "starSessTtlTxBytes"), ("STARENT-MIB", "starSessTtlRxBytes"), ("STARENT-MIB", "starSessTtlSIPTxBytes"), ("STARENT-MIB", "starSessTtlSIPRxBytes"), ("STARENT-MIB", "starSessTtlMIPTxBytes"), ("STARENT-MIB", "starSessTtlMIPRxBytes"), ("STARENT-MIB", "starSessTtlOctForwardedGB"), ("STARENT-MIB", "starSessTtlOctForwardedRev1"), ("STARENT-MIB", "starSessTtlTxBytesRev1"), ("STARENT-MIB", "starSessTtlRxBytesRev1"), ("STARENT-MIB", "starSessTtlSIPTxBytesRev1"), ("STARENT-MIB", "starSessTtlSIPRxBytesRev1"), ("STARENT-MIB", "starSessTtlMIPTxBytesRev1"), ("STARENT-MIB", "starSessTtlMIPRxBytesRev1"), ("STARENT-MIB", "starSessTtlOctForwardedGBRev1"), ("STARENT-MIB", "starAAAMgrCount"), ("STARENT-MIB", "starAAATtlRequests"), ("STARENT-MIB", "starAAATtlAuthRequests"), ("STARENT-MIB", "starAAATtlAcctRequests"), ("STARENT-MIB", "starAAACurRequests"), ("STARENT-MIB", "starAAACurAuthRequests"), ("STARENT-MIB", "starAAACurAcctRequests"), ("STARENT-MIB", "starAAATtlAcctSess"), ("STARENT-MIB", "starAAACurAcctSess"), ("STARENT-MIB", "starAAATtlAuthSuccess"), ("STARENT-MIB", "starAAATtlAuthFailure"), ("STARENT-MIB", "starA11MgrCount"), ("STARENT-MIB", "starA11TtlArrived"), ("STARENT-MIB", "starA11TtlRejected"), ("STARENT-MIB", "starA11TtlDemultiplexed"), ("STARENT-MIB", "starA11TtlDereg"), ("STARENT-MIB", "starA11CurActive"), ("STARENT-MIB", "starHAMgrCount"), ("STARENT-MIB", "starHATtlArrived"), ("STARENT-MIB", "starHATtlRejected"), ("STARENT-MIB", "starHATtlDemultiplexed"), ("STARENT-MIB", "starHATtlDereg"), ("STARENT-MIB", "starHACurActive"), ("STARENT-MIB", "starFAMgrCount"), ("STARENT-MIB", "starFATtlArrived"), ("STARENT-MIB", "starFATtlRejected"), ("STARENT-MIB", "starFATtlDemultiplexed"), ("STARENT-MIB", "starFATtlDereg"), ("STARENT-MIB", "starFACurActive"), ("STARENT-MIB", "starServiceVpnName"), ("STARENT-MIB", "starServiceServName"), ("STARENT-MIB", "starServiceSubLimit"), ("STARENT-MIB", "starServiceSubCurrent"), ("STARENT-MIB", "starServiceType"), ("STARENT-MIB", "starServiceFAIpAddr"), ("STARENT-MIB", "starServiceHAIpAddr"), ("STARENT-MIB", "starSmartLicenseServiceName"), ("STARENT-MIB", "starSmartLicenseServiceUsage"), ("STARENT-MIB", "starSmartLicenseFeatureName"), ("STARENT-MIB", "starSmartLicenseFeatureUsage"), ("STARENT-MIB", "starSmartLicenseEvalModeRemaining"), ("STARENT-MIB", "starP2PPluginVersion"), ("STARENT-MIB", "starADCLicenseExpiryDate"), ("STARENT-MIB", "starSxInterfaceType"), ("STARENT-MIB", "starSxSelfAddr"), ("STARENT-MIB", "starSxPeerAddr"), ("STARENT-MIB", "starSxPeerNewRecTimeStamp"), ("STARENT-MIB", "starSxPeerOldRecTimeStamp"), ("STARENT-MIB", "starSxFailureCause"), ("STARENT-MIB", "starSxCPUPGroupName"), ("STARENT-MIB", "starCLITtyname"), ("STARENT-MIB", "starCLIPrivs"), ("STARENT-MIB", "starCLIType"), ("STARENT-MIB", "starCLIRemoteIpAddrType"), ("STARENT-MIB", "starCLIRemoteIpAddr"), ("STARENT-MIB", "starCLIContext"), ("STARENT-MIB", "starTaskFacilityName"), ("STARENT-MIB", "starTaskCard"), ("STARENT-MIB", "starTaskCPU"), ("STARENT-MIB", "starPPPStatVpnName"), ("STARENT-MIB", "starPPPStatServName"), ("STARENT-MIB", "starPPPStatInit"), ("STARENT-MIB", "starPPPStatReneg"), ("STARENT-MIB", "starPPPStatSuccess"), ("STARENT-MIB", "starPPPStatFailed"), ("STARENT-MIB", "starPPPStatReleased"), ("STARENT-MIB", "starPPPStatReleasedLocal"), ("STARENT-MIB", "starPPPStatReleasedRemote"), ("STARENT-MIB", "starPPPStatLcpFailMaxRetry"), ("STARENT-MIB", "starPPPStatLcpFailOption"), ("STARENT-MIB", "starPPPStatIpcpFailMaxRetry"), ("STARENT-MIB", "starPPPStatIpcpFailOption"), ("STARENT-MIB", "starPPPStatCcpFail"), ("STARENT-MIB", "starPPPStatAuthFail"), ("STARENT-MIB", "starPPPStatLcpEntered"), ("STARENT-MIB", "starPPPStatAuthEntered"), ("STARENT-MIB", "starPPPStatIpcpEntered"), ("STARENT-MIB", "starPPPStatRenegPdsn"), ("STARENT-MIB", "starPPPStatRenegMobil"), ("STARENT-MIB", "starPPPStatRenegAddrMismatch"), ("STARENT-MIB", "starPPPStatRenegOther"), ("STARENT-MIB", "starPPPStatChapAuthAttempt"), ("STARENT-MIB", "starPPPStatPapAuthAttempt"), ("STARENT-MIB", "starPPPStatMSChapAuthAttempt"), ("STARENT-MIB", "starPPPStatChapAuthFail"), ("STARENT-MIB", "starPPPStatPapAuthFail"), ("STARENT-MIB", "starPPPStatMSChapAuthFail"), ("STARENT-MIB", "starPPPStatStacComp"), ("STARENT-MIB", "starPPPStatMppcComp"), ("STARENT-MIB", "starPPPStatDeflComp"), ("STARENT-MIB", "starPPPStatFscErrs"), ("STARENT-MIB", "starPPPStatUnknProto"), ("STARENT-MIB", "starPPPStatBadAddr"), ("STARENT-MIB", "starPPPStatBadCtrl"), ("STARENT-MIB", "starPPPStatVjComp"), ("STARENT-MIB", "starPPPStatDiscLcpRemote"), ("STARENT-MIB", "starPPPStatDiscRpRemote"), ("STARENT-MIB", "starPPPStatDiscAdmin"), ("STARENT-MIB", "starPPPStatDiscIdleTimeout"), ("STARENT-MIB", "starPPPStatDiscAbsTimeout"), ("STARENT-MIB", "starPPPStatDiscPPPKeepalive"), ("STARENT-MIB", "starPPPStatDiscNoResource"), ("STARENT-MIB", "starPPPStatDiscMisc"), ("STARENT-MIB", "starPPPStatFailedReneg"), ("STARENT-MIB", "starPPPStatLcpFailUnknown"), ("STARENT-MIB", "starPPPStatIpcpFailUnknown"), ("STARENT-MIB", "starPPPStatAuthAbort"), ("STARENT-MIB", "starPPPStatLowerLayerDisc"), ("STARENT-MIB", "starPPPStatLcpSuccess"), ("STARENT-MIB", "starPPPStatAuthSuccess"), ("STARENT-MIB", "starPPPStatRenegLowerLayerHandoff"), ("STARENT-MIB", "starPPPStatRenegParamUpdate"), ("STARENT-MIB", "starPPPStatChapAuthSuccess"), ("STARENT-MIB", "starPPPStatPapAuthSuccess"), ("STARENT-MIB", "starPPPStatMSChapAuthSuccess"), ("STARENT-MIB", "starPPPStatChapAuthAbort"), ("STARENT-MIB", "starPPPStatPapAuthAbort"), ("STARENT-MIB", "starPPPStatMSChapAuthAbort"), ("STARENT-MIB", "starPPPStatSessSkipAuth"), ("STARENT-MIB", "starPPPStatNegComp"), ("STARENT-MIB", "starPPPStatCCPNegFailComp"), ("STARENT-MIB", "starPPPStatDiscLocalLowerLayer"), ("STARENT-MIB", "starPPPStatDiscAddFlowFail"), ("STARENT-MIB", "starPPPStatDiscMaxRetriesLCP"), ("STARENT-MIB", "starPPPStatDiscMaxRetriesIPCP"), ("STARENT-MIB", "starPPPStatDiscMaxSetupTimer"), ("STARENT-MIB", "starPPPStatDiscInvalidDestVpn"), ("STARENT-MIB", "starPPPStatDiscOptNegFailLCP"), ("STARENT-MIB", "starPPPStatDiscOptNegFailIPCP"), ("STARENT-MIB", "starPPPStatDiscNoRemoteIpAddr"), ("STARENT-MIB", "starPPPStatDiscCallTypeDetectFail"), ("STARENT-MIB", "starPPPStatDiscRemoteDiscUpLayer"), ("STARENT-MIB", "starPPPStatDiscLongDuraTimeout"), ("STARENT-MIB", "starPPPStatDiscAuthFail"), ("STARENT-MIB", "starPPPStatLCPEchoTotalReq"), ("STARENT-MIB", "starPPPStatLCPEchoReqResent"), ("STARENT-MIB", "starPPPStatLCPEchoRepRecved"), ("STARENT-MIB", "starPPPStatLCPEchoReqTimeout"), ("STARENT-MIB", "starPPPStatRecvErrBadCtrlField"), ("STARENT-MIB", "starPPPStatRecvErrBadPacketLen"), ("STARENT-MIB", "starPPPStatRemoteTerm"), ("STARENT-MIB", "starPPPStatMiscFail"), ("STARENT-MIB", "starMIPHAStatVpnID"), ("STARENT-MIB", "starMIPHAStatVpnName"), ("STARENT-MIB", "starMIPHAStatServName"), ("STARENT-MIB", "starMIPHAStatDisconnects"), ("STARENT-MIB", "starMIPHAStatExpiry"), ("STARENT-MIB", "starMIPHAStatDereg"), ("STARENT-MIB", "starMIPHAStatAdminDrop")], [("STARENT-MIB", "starMIPHAStatRegRecvTotal"), ("STARENT-MIB", "starMIPHAStatRegRecvInitial"), ("STARENT-MIB", "starMIPHAStatRegRecvRenew"), ("STARENT-MIB", "starMIPHAStatRegRecvDereg"), ("STARENT-MIB", "starMIPHAStatRegAcceptTotal"), ("STARENT-MIB", "starMIPHAStatRegAcceptReg"), ("STARENT-MIB", "starMIPHAStatRegAcceptRenew"), ("STARENT-MIB", "starMIPHAStatRegAcceptDereg"), ("STARENT-MIB", "starMIPHAStatRegDeniedTotal"), ("STARENT-MIB", "starMIPHAStatRegDeniedInitial"), ("STARENT-MIB", "starMIPHAStatRegDeniedRenew"), ("STARENT-MIB", "starMIPHAStatRegDeniedDereg"), ("STARENT-MIB", "starMIPHAStatRegReplyTotal"), ("STARENT-MIB", "starMIPHAStatRegReplyAcceptReg"), ("STARENT-MIB", "starMIPHAStatRegReplyAcceptDereg"), ("STARENT-MIB", "starMIPHAStatRegReplyDenied"), ("STARENT-MIB", "starMIPHAStatRegReplyBadReq"), ("STARENT-MIB", "starMIPHAStatRegReplyMismatchID"), ("STARENT-MIB", "starMIPHAStatRegReplyAdminProhib"), ("STARENT-MIB", "starMIPHAStatRegReplyUnspecErr"), ("STARENT-MIB", "starMIPHAStatRegReplyNoResource"), ("STARENT-MIB", "starMIPHAStatRegReplyMnAuthFail"), ("STARENT-MIB", "starMIPHAStatRegReplyFAAuthFail"), ("STARENT-MIB", "starMIPHAStatRegReplySimulBind"), ("STARENT-MIB", "starMIPHAStatRegReplyUnknownHA"), ("STARENT-MIB", "starMIPHAStatRegReplyRevTunUnav"), ("STARENT-MIB", "starMIPHAStatRegReplyRevTunMand"), ("STARENT-MIB", "starMIPHAStatRegReplyEncapUnav"), ("STARENT-MIB", "starMIPHAStatRegReplySendError"), ("STARENT-MIB", "starMIPHAStatFARevocations"), ("STARENT-MIB", "starMIPHAStatRegAcceptHO"), ("STARENT-MIB", "starMIPHAStatRegDeniedHO"), ("STARENT-MIB", "starMIPHAStatRegDiscardTotal"), ("STARENT-MIB", "starMIPFAStatVpnID"), ("STARENT-MIB", "starMIPFAStatVpnName"), ("STARENT-MIB", "starMIPFAStatServName"), ("STARENT-MIB", "starMIPFAStatAdvertSend"), ("STARENT-MIB", "starMIPFAStatDiscExpiry"), ("STARENT-MIB", "starMIPFAStatDiscDereg"), ("STARENT-MIB", "starMIPFAStatDiscAdmin"), ("STARENT-MIB", "starMIPFAStatAuthAttempt"), ("STARENT-MIB", "starMIPFAStatAuthSuccess"), ("STARENT-MIB", "starMIPFAStatAuthFailure"), ("STARENT-MIB", "starMIPFAStatRegRecvTotal"), ("STARENT-MIB", "starMIPFAStatRegRecvInitial"), ("STARENT-MIB", "starMIPFAStatRegRecvRenewal"), ("STARENT-MIB", "starMIPFAStatRegRecvDereg"), ("STARENT-MIB", "starMIPFAStatRegAcceptTotal"), ("STARENT-MIB", "starMIPFAStatRegAcceptInitial"), ("STARENT-MIB", "starMIPFAStatRegAcceptRenewal"), ("STARENT-MIB", "starMIPFAStatRegAcceptDereg"), ("STARENT-MIB", "starMIPFAStatRegDenTotal"), ("STARENT-MIB", "starMIPFAStatRegDenInitial"), ("STARENT-MIB", "starMIPFAStatRegDenRenewal"), ("STARENT-MIB", "starMIPFAStatRegDenDereg"), ("STARENT-MIB", "starMIPFAStatRegDiscardTotal"), ("STARENT-MIB", "starMIPFAStatRegDiscardInitial"), ("STARENT-MIB", "starMIPFAStatRegDiscardRenewal"), ("STARENT-MIB", "starMIPFAStatRegDiscardDereg"), ("STARENT-MIB", "starMIPFAStatRegRelayedTotal"), ("STARENT-MIB", "starMIPFAStatRegRelayedInitial"), ("STARENT-MIB", "starMIPFAStatRegRelayedRenewal"), ("STARENT-MIB", "starMIPFAStatRegRelayedDereg"), ("STARENT-MIB", "starMIPFAStatRegAuthFailTotal"), ("STARENT-MIB", "starMIPFAStatRegAuthFailInitial"), ("STARENT-MIB", "starMIPFAStatRegAuthFailRenewal"), ("STARENT-MIB", "starMIPFAStatRegAuthFailDereg"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNTotal"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNInitial"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNRenewal"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNDereg"), ("STARENT-MIB", "starMIPFAStatRegDenHATotal"), ("STARENT-MIB", "starMIPFAStatRegDenHAInitial"), ("STARENT-MIB", "starMIPFAStatRegDenHARenewal"), ("STARENT-MIB", "starMIPFAStatRegDenHADereg"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNUnspec"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNTimeout"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNAdmin"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNResources"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNMnAuth"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNHAAuth"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNTooLong"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNBadReq"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNEncapUnav"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNRevTunUnav"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNRevTunMand"), ("STARENT-MIB", "starMIPFAStatRegDenHAFAAuth"), ("STARENT-MIB", "starMIPFAStatRegDenHABadReq"), ("STARENT-MIB", "starMIPFAStatRegDenHAMismatchID"), ("STARENT-MIB", "starMIPFAStatRegDenHASimulBind"), ("STARENT-MIB", "starMIPFAStatRegDenHAUnknownHA"), ("STARENT-MIB", "starMIPFAStatRegDenHARevRunUnavail"), ("STARENT-MIB", "starMIPFAStatRegRplRcvTotal"), ("STARENT-MIB", "starMIPFAStatRegRplRcvTotalRly"), ("STARENT-MIB", "starMIPFAStatRegRplRcvErrors"), ("STARENT-MIB", "starMIPFAStatRegRplRcvInitial"), ("STARENT-MIB", "starMIPFAStatRegRplRcvInitialRly"), ("STARENT-MIB", "starMIPFAStatRegRplRcvRenewal"), ("STARENT-MIB", "starMIPFAStatRegRplRcvRenewalRly"), ("STARENT-MIB", "starMIPFAStatRegRplRcvDereg"), ("STARENT-MIB", "starMIPFAStatRegRplRcvDeregRly"), ("STARENT-MIB", "starMIPFAStatRegRplSentTotal"), ("STARENT-MIB", "starMIPFAStatRegRplSentAcceptReg"), ("STARENT-MIB", "starMIPFAStatRegRplSentAcceptDereg"), ("STARENT-MIB", "starMIPFAStatRegRplSentBadReq"), ("STARENT-MIB", "starMIPFAStatRegRplSentTooLong"), ("STARENT-MIB", "starMIPFAStatRegRplSentMnAuthFail"), ("STARENT-MIB", "starMIPFAStatRegRplSentHAAuthFail"), ("STARENT-MIB", "starMIPFAStatRegRplSentAdminProhib"), ("STARENT-MIB", "starMIPFAStatRegRplSentNoResources"), ("STARENT-MIB", "starMIPFAStatRegRplSentRevTunUnav"), ("STARENT-MIB", "starMIPFAStatRegRplSentRevTunMand"), ("STARENT-MIB", "starMIPFAStatRegRplSentSendErrors"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNBadReply"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNMissNAI"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNMissHomeAgent"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNMissHomeAddr"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNUnknChallenge"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNMissChallenge"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNStaleChallenge"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNMNTooDistant"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNStyleUnavail"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNHANetUnreach"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNHAHostUnreach"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNHAPortUnreach"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNHAUnreach"), ("STARENT-MIB", "starMIPFAStatRegDenPDSNInvCOA"), ("STARENT-MIB", "starMIPFAStatRegReqSentInitTotal"), ("STARENT-MIB", "starMIPFAStatRegReqSentInitResend"), ("STARENT-MIB", "starMIPFAStatRegReqSentRenewTotal"), ("STARENT-MIB", "starMIPFAStatRegReqSentRenewResend"), ("STARENT-MIB", "starMIPFAStatRegReqSentDeregTotal"), ("STARENT-MIB", "starMIPFAStatRegReqSentDeregResend"), ("STARENT-MIB", "starMIPFAStatRegRplSentMNTooDistant"), ("STARENT-MIB", "starMIPFAStatRegRplSentInvCOA"), ("STARENT-MIB", "starMIPFAStatRegRplSentHANetUnreach"), ("STARENT-MIB", "starMIPFAStatRegRplSentHAHostUnreach"), ("STARENT-MIB", "starMIPFAStatRegRplSentHAPortUnreach"), ("STARENT-MIB", "starMIPFAStatRegRplSentHAUnreach"), ("STARENT-MIB", "starMIPFAStatRegRplSentRegTimeout"), ("STARENT-MIB", "starMIPFAStatRegRplSentMissNAI"), ("STARENT-MIB", "starMIPFAStatRegRplSentMissHomeAgent"), ("STARENT-MIB", "starMIPFAStatRegRplSentMissHomeAddr"), ("STARENT-MIB", "starMIPFAStatRegRplSentUnknChallenge"), ("STARENT-MIB", "starMIPFAStatRegRplSentMissChallenge"), ("STARENT-MIB", "starMIPFAStatRegRplSentStaleChallenge"), ("STARENT-MIB", "starMIPFAStatRegRplSentBadReply"), ("STARENT-MIB", "starRPStatVpnID"), ("STARENT-MIB", "starRPStatVpnName"), ("STARENT-MIB", "starRPStatServName"), ("STARENT-MIB", "starRPRegRecvTotal"), ("STARENT-MIB", "starRPRegAcceptTotal"), ("STARENT-MIB", "starRPRegDeniedTotal"), ("STARENT-MIB", "starRPRegDiscardTotal"), ("STARENT-MIB", "starRPRegAcceptInitial"), ("STARENT-MIB", "starRPRegAcceptInterPDSN"), ("STARENT-MIB", "starRPRegDeniedInitial"), ("STARENT-MIB", "starRPRegAcceptRenew"), ("STARENT-MIB", "starRPRegDeniedRenew"), ("STARENT-MIB", "starRPRegAcceptDereg"), ("STARENT-MIB", "starRPRegDeniedDereg"), ("STARENT-MIB", "starRPRegSendError"), ("STARENT-MIB", "starRPRegHashError"), ("STARENT-MIB", "starRPRegDecodeError"), ("STARENT-MIB", "starRPRegUnhandled"), ("STARENT-MIB", "starRPRegAirlinkSeqError"), ("STARENT-MIB", "starRPRegDenyUnspec"), ("STARENT-MIB", "starRPRegDenyAdminProhib"), ("STARENT-MIB", "starRPRegDenyNoResource"), ("STARENT-MIB", "starRPRegDenyAuth"), ("STARENT-MIB", "starRPRegDenyMismatchID"), ("STARENT-MIB", "starRPRegDenyBadRequest"), ("STARENT-MIB", "starRPRegDenyUnknownPDSN"), ("STARENT-MIB", "starRPRegDenyRevTunUnav"), ("STARENT-MIB", "starRPRegDenyRevTunReq"), ("STARENT-MIB", "starRPRegDenyUnrecogVend"), ("STARENT-MIB", "starRPRegUpdTotal"), ("STARENT-MIB", "starRPRegUpdAccept"), ("STARENT-MIB", "starRPRegUpdDenied"), ("STARENT-MIB", "starRPRegUpdUnack"), ("STARENT-MIB", "starRPRegUpdTrans"), ("STARENT-MIB", "starRPRegUpdRetrans"), ("STARENT-MIB", "starRPRegUpdReceived"), ("STARENT-MIB", "starRPRegUpdDiscard"), ("STARENT-MIB", "starRPRegUpdSendError"), ("STARENT-MIB", "starRPRegUpdUplyrInit"), ("STARENT-MIB", "starRPRegUpdOther"), ("STARENT-MIB", "starRPRegUpdHandoff"), ("STARENT-MIB", "starRPRegUpdDenyUnspec"), ("STARENT-MIB", "starRPRegUpdDenyAdminProhib"), ("STARENT-MIB", "starRPRegUpdDenyAuth"), ("STARENT-MIB", "starRPRegUpdDenyMismatchID"), ("STARENT-MIB", "starRPRegUpdDenyBadRequest"), ("STARENT-MIB", "starRPSecViolations"), ("STARENT-MIB", "starRPSecBadAuth"), ("STARENT-MIB", "starRPSecBadID"), ("STARENT-MIB", "starRPSecBadSpi"), ("STARENT-MIB", "starRPSecMissingMnHAAuth"), ("STARENT-MIB", "starRPSecMissingRegUpdate"), ("STARENT-MIB", "starRPRegRecvInitial"), ("STARENT-MIB", "starRPRegAcceptActvStartIntraPDSN"), ("STARENT-MIB", "starRPRegAcceptActvStopIntraPDSN"), ("STARENT-MIB", "starRPRegRecvRenew"), ("STARENT-MIB", "starRPRegActvStartRenew"), ("STARENT-MIB", "starRPRegActvStopRenew"), ("STARENT-MIB", "starRPRegRecvDereg"), ("STARENT-MIB", "starRPRegAcceptActvStopDereg"), ("STARENT-MIB", "starRPDiscSessAbsent"), ("STARENT-MIB", "starRPDiscNoMemory"), ("STARENT-MIB", "starRPDiscMalformed"), ("STARENT-MIB", "starRPDiscAuthFail"), ("STARENT-MIB", "starRPDiscInternalBounce"), ("STARENT-MIB", "starRPDiscInpuQueueExceeded"), ("STARENT-MIB", "starRPDiscMismatchedId"), ("STARENT-MIB", "starRPDiscInvPacketLen"), ("STARENT-MIB", "starRPDiscMisc"), ("STARENT-MIB", "starRP1xTxBytes"), ("STARENT-MIB", "starRP1xRxBytes"), ("STARENT-MIB", "starRP1xTxPackets"), ("STARENT-MIB", "starRP1xRxPackets"), ("STARENT-MIB", "starRPDoTxBytes"), ("STARENT-MIB", "starRPDoRxBytes"), ("STARENT-MIB", "starRPDoTxPackets"), ("STARENT-MIB", "starRPDoRxPackets"), ("STARENT-MIB", "starSubContext"), ("STARENT-MIB", "starSubTimerDuration"), ("STARENT-MIB", "starSubLongDurTimeoutAction"), ("STARENT-MIB", "starSubSetupTime"), ("STARENT-MIB", "starSubHomeAddr"), ("STARENT-MIB", "starSubHomeAddrv6"), ("STARENT-MIB", "starEISServerVPNName"), ("STARENT-MIB", "starThreshMeasuredPct"), ("STARENT-MIB", "starThreshPct"), ("STARENT-MIB", "starThreshMeasuredInt"), ("STARENT-MIB", "starThreshInt"), ("STARENT-MIB", "starThreshMeasuredMB"), ("STARENT-MIB", "starThreshMB"), ("STARENT-MIB", "starThreshMeasuredGB"), ("STARENT-MIB", "starThreshGB"), ("STARENT-MIB", "starPortType"), ("STARENT-MIB", "starPortTypeDescr"), ("STARENT-MIB", "starPortAdminState"), ("STARENT-MIB", "starPortOperState"), ("STARENT-MIB", "starPortOperMode"), ("STARENT-MIB", "starPortLinkState"), ("STARENT-MIB", "starRedundantPortSlot"), ("STARENT-MIB", "starRedundantPortNum"), ("STARENT-MIB", "starPortRxBytes"), ("STARENT-MIB", "starPortTxBytes"), ("STARENT-MIB", "starPortRxFrames"), ("STARENT-MIB", "starPortTxFrames"), ("STARENT-MIB", "starPortRxDiscards"), ("STARENT-MIB", "starPortTxDiscards"), ("STARENT-MIB", "starPortRxErrors"), ("STARENT-MIB", "starPortTxErrors")], [("STARENT-MIB", "starIPPoolVpnID"), ("STARENT-MIB", "starIPPoolContext"), ("STARENT-MIB", "starIPPoolGroup"), ("STARENT-MIB", "starIPPoolName"), ("STARENT-MIB", "starIPPoolType"), ("STARENT-MIB", "starIPPoolState"), ("STARENT-MIB", "starIPPoolStartAddr"), ("STARENT-MIB", "starIPPoolMaskorEndAddr"), ("STARENT-MIB", "starIPPoolPriority"), ("STARENT-MIB", "starIPPoolUsed"), ("STARENT-MIB", "starIPPoolHold"), ("STARENT-MIB", "starIPPoolRelease"), ("STARENT-MIB", "starIPPoolFree"), ("STARENT-MIB", "starIPPoolGroupName"), ("STARENT-MIB", "starIPPoolGroupVpnName"), ("STARENT-MIB", "starIPPoolGroupUsed"), ("STARENT-MIB", "starIPPoolGroupHold"), ("STARENT-MIB", "starIPPoolGroupRelease"), ("STARENT-MIB", "starIPPoolGroupFree"), ("STARENT-MIB", "starIPPoolGroupPctUsed"), ("STARENT-MIB", "starIPPoolGroupAvail"), ("STARENT-MIB", "starLicensedSessions"), ("STARENT-MIB", "starCurrentSessions"), ("STARENT-MIB", "starDiameterVpnName"), ("STARENT-MIB", "starDiameterPeerAddr"), ("STARENT-MIB", "starDiameterEndpointName"), ("STARENT-MIB", "starDiameterPeerName"), ("STARENT-MIB", "starDiameterRlfContext"), ("STARENT-MIB", "starDiameterPeerAddrIpv6"), ("STARENT-MIB", "starInterfaceIPAddress"), ("STARENT-MIB", "starOSPFNeighborRouterID"), ("STARENT-MIB", "starOSPFFromState"), ("STARENT-MIB", "starOSPFToState"), ("STARENT-MIB", "starDiameterECode"), ("STARENT-MIB", "starDiameterRlfECode"), ("STARENT-MIB", "starDiameterRlfTps"), ("STARENT-MIB", "starDiameterRlfDelayTolerance"), ("STARENT-MIB", "starDiameterRlfQueuePercent"), ("STARENT-MIB", "starDiameterDiamproxyInstance"), ("STARENT-MIB", "starGSSCDRLossConfigured"), ("STARENT-MIB", "starGSSCDRLossMeasured"), ("STARENT-MIB", "starSessGGSNVpnName"), ("STARENT-MIB", "starSessGGSNServName"), ("STARENT-MIB", "starSessGGSNPeerPort"), ("STARENT-MIB", "starSessGGSNPeerAddr"), ("STARENT-MIB", "starSessGGSNImsi"), ("STARENT-MIB", "starSessGGSNSubsName"), ("STARENT-MIB", "starSessGGSNAPNName"), ("STARENT-MIB", "starSessGTPPGroupName"), ("STARENT-MIB", "starL2TPContextName"), ("STARENT-MIB", "starL2TPServiceName"), ("STARENT-MIB", "starL2TPServiceTypeName"), ("STARENT-MIB", "starL2TPLocalAddress"), ("STARENT-MIB", "starL2TPPeerAddress"), ("STARENT-MIB", "starSessSub1Context"), ("STARENT-MIB", "starSessSub1NAI"), ("STARENT-MIB", "starSessSub1MSID"), ("STARENT-MIB", "starSessSub1IpAddr"), ("STARENT-MIB", "starSessSub1LastResult"), ("STARENT-MIB", "starSessSub1ServiceName"), ("STARENT-MIB", "starSessSub1HAIpAddr"), ("STARENT-MIB", "starSessSub1PeerIpAddr"), ("STARENT-MIB", "starSessSub1InPackets"), ("STARENT-MIB", "starSessSub1InPacketsDropped"), ("STARENT-MIB", "starSessSub1InBytes"), ("STARENT-MIB", "starSessSub1OutPackets"), ("STARENT-MIB", "starSessSub1OutPacketsDropped"), ("STARENT-MIB", "starSessSub1OutBytes"), ("STARENT-MIB", "starSessSub1Activity"), ("STARENT-MIB", "starSessSub1State"), ("STARENT-MIB", "starSessSub1CallID"), ("STARENT-MIB", "starSessSub1ConnectTime"), ("STARENT-MIB", "starSessSub1CallDuration"), ("STARENT-MIB", "starSessSub1TimeIdle"), ("STARENT-MIB", "starSessSub1AccessType"), ("STARENT-MIB", "starSessSub1AccessTech"), ("STARENT-MIB", "starSessSub1LinkStatus"), ("STARENT-MIB", "starSessSub1NetworkType"), ("STARENT-MIB", "starSessSub1CarrierID"), ("STARENT-MIB", "starSessSub1ESN"), ("STARENT-MIB", "starSessSub1GMTTimezoneOffset"), ("STARENT-MIB", "starSessSub1SessMgr"), ("STARENT-MIB", "starSessSub1RemoteIPAddr"), ("STARENT-MIB", "starSessSub1Card"), ("STARENT-MIB", "starSessSub1CPU"), ("STARENT-MIB", "starSessSub1TimeIdleLeft"), ("STARENT-MIB", "starSessSub1TimeLeft"), ("STARENT-MIB", "starSessSub1TimeLongDurLeft"), ("STARENT-MIB", "starSessSub1LongDurAction"), ("STARENT-MIB", "starSessSub1AlwaysOn"), ("STARENT-MIB", "starSessSub1IPPoolName"), ("STARENT-MIB", "starSessSub1VLANID"), ("STARENT-MIB", "starSessSub1LNSIPAddr"), ("STARENT-MIB", "starSessSub1ProxyMIP"), ("STARENT-MIB", "starSessSub1GGSNMIP"), ("STARENT-MIB", "starSessSub1HomeAgentIpAddr"), ("STARENT-MIB", "starSessSub1LocalIPAddr"), ("STARENT-MIB", "starSessSub1FAServiceName"), ("STARENT-MIB", "starSessSub1FAVPNName"), ("STARENT-MIB", "starSessSub1SourceVPN"), ("STARENT-MIB", "starSessSub1DestVPN"), ("STARENT-MIB", "starSessSub1AAAVPN"), ("STARENT-MIB", "starSessSub1AAADomain"), ("STARENT-MIB", "starSessSub1AAAStart"), ("STARENT-MIB", "starSessSub1AAAStop"), ("STARENT-MIB", "starSessSub1AAAInterim"), ("STARENT-MIB", "starSessSub1AcctSessionID"), ("STARENT-MIB", "starSessSub1AAARadiusGroup"), ("STARENT-MIB", "starSessSub1AAARadiusAuthServerIPAddr"), ("STARENT-MIB", "starSessSub1AAARadiusAcctServerIPAddr"), ("STARENT-MIB", "starSessSub1NASIPAddr"), ("STARENT-MIB", "starSessSub1NexthopIPAddr"), ("STARENT-MIB", "starSessSub1ActiveInACL"), ("STARENT-MIB", "starSessSub1ActiveOutACL"), ("STARENT-MIB", "starSessSub1ECSRulebase"), ("STARENT-MIB", "starSessSub1InPlcyGrp"), ("STARENT-MIB", "starSessSub1OutPlcyGrp"), ("STARENT-MIB", "starSessSub1DownTrafPolState"), ("STARENT-MIB", "starSessSub1DownCommDataRate"), ("STARENT-MIB", "starSessSub1DownPeakDataRate"), ("STARENT-MIB", "starSessSub1DownBurstSize"), ("STARENT-MIB", "starSessSub1DownExceedAction"), ("STARENT-MIB", "starSessSub1DownViolateAction"), ("STARENT-MIB", "starSessSub1DownExceed"), ("STARENT-MIB", "starSessSub1DownViolate"), ("STARENT-MIB", "starSessSub1UpTrafPolState"), ("STARENT-MIB", "starSessSub1UpCommDataRate"), ("STARENT-MIB", "starSessSub1UpPeakDataRate"), ("STARENT-MIB", "starSessSub1UpBurstSize"), ("STARENT-MIB", "starSessSub1UpExceedAction"), ("STARENT-MIB", "starSessSub1UpViolateAction"), ("STARENT-MIB", "starSessSub1UpExceed"), ("STARENT-MIB", "starSessSub1UpViolate"), ("STARENT-MIB", "starSessSub1L3TunnelingState"), ("STARENT-MIB", "starSessSub1L3TunLocalIPAddr"), ("STARENT-MIB", "starSessSub1L3TunRemoteIPAddr"), ("STARENT-MIB", "starSessSub1AddrViaDHCP"), ("STARENT-MIB", "starSessSub1DHCPServName"), ("STARENT-MIB", "starSessSub1DHCPServIPAddr"), ("STARENT-MIB", "starSessSub1AccessLinkIPFrag"), ("STARENT-MIB", "starSessSub1IgnoreDFBit"), ("STARENT-MIB", "starSessSub1MIPGratARPMode"), ("STARENT-MIB", "starSessSub1ExtInlSrvrProc"), ("STARENT-MIB", "starSessSub1ExtInlSrvrIngrIPAddr"), ("STARENT-MIB", "starSessSub1ExtInlSrvrIngrVLANTag"), ("STARENT-MIB", "starSessSub1ExtInlSrvrEgrIPAddr"), ("STARENT-MIB", "starSessSub1ExtInlSrvrEgrVLANTag"), ("STARENT-MIB", "starSessSub1ExtInlSrvrVPNName"), ("STARENT-MIB", "starSessSub1RadAcctMode"), ("STARENT-MIB", "starSessSub1InBytesDropped"), ("STARENT-MIB", "starSessSub1OutBytesDropped"), ("STARENT-MIB", "starSessSub1PeakBPSTx"), ("STARENT-MIB", "starSessSub1PeakBPSRx"), ("STARENT-MIB", "starSessSub1AveBPSTx"), ("STARENT-MIB", "starSessSub1AveBPSRx"), ("STARENT-MIB", "starSessSub1SustBPSTx"), ("STARENT-MIB", "starSessSub1SustBPSRx"), ("STARENT-MIB", "starSessSub1PeakPPSTx"), ("STARENT-MIB", "starSessSub1PeakPPSRx"), ("STARENT-MIB", "starSessSub1AvePPSTx"), ("STARENT-MIB", "starSessSub1AvePPSRx"), ("STARENT-MIB", "starSessSub1SustPPSTx"), ("STARENT-MIB", "starSessSub1SustPPSRx"), ("STARENT-MIB", "starSessSub1ActivePct"), ("STARENT-MIB", "starSessSub1IPv4BadHdr"), ("STARENT-MIB", "starSessSub1IPv4TtlExceeded"), ("STARENT-MIB", "starSessSub1IPv4FragSent"), ("STARENT-MIB", "starSessSub1IPv4FragFail"), ("STARENT-MIB", "starSessSub1IPv4InACLDrop"), ("STARENT-MIB", "starSessSub1IPv4OutACLDrop"), ("STARENT-MIB", "starSessSub1IPv4InCSSDownDrop"), ("STARENT-MIB", "starSessSub1IPv4OutCSSDownDrop"), ("STARENT-MIB", "starSessSub1IPv4OutXOFFDropPkt"), ("STARENT-MIB", "starSessSub1IPv4OutXOFFDropByte"), ("STARENT-MIB", "starSessSub1IPv4SrcViol"), ("STARENT-MIB", "starSessSub1IPv4ProxyDNSRedir"), ("STARENT-MIB", "starSessSub1IPv4SrcProxyDNSPThru"), ("STARENT-MIB", "starSessSub1IPv4ProxyDNSDrop"), ("STARENT-MIB", "starSessSub1IPv4SrcViolNoAcct"), ("STARENT-MIB", "starSessSub1IPv4SrcViolIgnored"), ("STARENT-MIB", "starSessSub1ExtInlSrvrTxPkt"), ("STARENT-MIB", "starSessSub1ExtInlSrvrRxPkt"), ("STARENT-MIB", "starSessSub1IPv4ICMPDropPkt"), ("STARENT-MIB", "starSessSub1TunnelType"), ("STARENT-MIB", "starSessSub1IPSECTunDownDropPkt"), ("STARENT-MIB", "starSessSub1IPSECFlowID"), ("STARENT-MIB", "starSessSub1DormancyTotal"), ("STARENT-MIB", "starSessSub1HandoffTotal"), ("STARENT-MIB", "starSessSub1AccessFlows"), ("STARENT-MIB", "starSessSub1TFT"), ("STARENT-MIB", "starSessSub1NASPort"), ("STARENT-MIB", "starSessSub1AcctSessionID"), ("STARENT-MIB", "starSessSub1CorrID"), ("STARENT-MIB", "starSessSub1L2TPPeerIPAddr"), ("STARENT-MIB", "starSessSub1IPv4EarlyPDURecv"), ("STARENT-MIB", "starIPSECContextName"), ("STARENT-MIB", "starIPSECGroupName"), ("STARENT-MIB", "starIPSECTunLocalIpAddr"), ("STARENT-MIB", "starIPSECTunRemoteIpAddr"), ("STARENT-MIB", "starIPSECPolicyName"), ("STARENT-MIB", "starIPSECDynPolicyType"), ("STARENT-MIB", "starIPSECDynPolicyPayloadType"), ("STARENT-MIB", "starIPSECLocalGateway"), ("STARENT-MIB", "starIPSECRemoteGateway"), ("STARENT-MIB", "starSIPRouteVpnName"), ("STARENT-MIB", "starSIPRouteVmgName"), ("STARENT-MIB", "starSIPRouteAsName"), ("STARENT-MIB", "starSIPRouteDestPartyNum"), ("STARENT-MIB", "starSIPRouteReqNum"), ("STARENT-MIB", "starSIPRouteServerVpnName"), ("STARENT-MIB", "starSIPRouteServerVmgName"), ("STARENT-MIB", "starSIPRouteServerAsName"), ("STARENT-MIB", "starSIPRouteServerIpAddr"), ("STARENT-MIB", "starVIMServiceVpnName"), ("STARENT-MIB", "starVIMServiceFMDMaxCallRate"), ("STARENT-MIB", "starVIMServiceFMDContinuousLoadCount"), ("STARENT-MIB", "starGSSClusterName"), ("STARENT-MIB", "starGSSClusterNodeName"), ("STARENT-MIB", "starGSSClusterRgName"), ("STARENT-MIB", "starGSSClusterRsName"), ("STARENT-MIB", "starGSSClusterNodeState"), ("STARENT-MIB", "starGSSClusterPrevOnlineNode"), ("STARENT-MIB", "starGSSClusterFromNode"), ("STARENT-MIB", "starGSSClusterToNode"), ("STARENT-MIB", "starGSSDiskPath"), ("STARENT-MIB", "starGSSTransportPath"), ("STARENT-MIB", "starGSSIPMPGroupName"), ("STARENT-MIB", "starGSSInterfaceName"), ("STARENT-MIB", "starRPServiceOptionCalls"), ("STARENT-MIB", "starPCFStatVpnName"), ("STARENT-MIB", "starPCFStatRxPkts"), ("STARENT-MIB", "starPCFStatTxPkts"), ("STARENT-MIB", "starPCFStatRxBytes"), ("STARENT-MIB", "starPCFStatTxBytes"), ("STARENT-MIB", "starPCFStatTotalSessions"), ("STARENT-MIB", "starPCFStatCurrentSessions"), ("STARENT-MIB", "starPCFStatCurrentActiveSessions"), ("STARENT-MIB", "starPCFStatCurrentDormantSessions"), ("STARENT-MIB", "starPCFStatCurrentSIPConnected"), ("STARENT-MIB", "starPCFStatCurrentMIPConnected"), ("STARENT-MIB", "starPCFStatCurrentPMIPConnected"), ("STARENT-MIB", "starPCFStatCurrentL2TPLACConnected"), ("STARENT-MIB", "starPCFStatCurrentOtherConnected"), ("STARENT-MIB", "starPCFVpnID"), ("STARENT-MIB", "starPCFVpnName"), ("STARENT-MIB", "starPCFServName"), ("STARENT-MIB", "starPCFRrqRcvd"), ("STARENT-MIB", "starPCFRrqAccepted"), ("STARENT-MIB", "starPCFRrqDenied"), ("STARENT-MIB", "starPCFRrqDiscarded"), ("STARENT-MIB", "starPCFInitialRrqRcvd"), ("STARENT-MIB", "starPCFInitialRrqAccepted"), ("STARENT-MIB", "starPCFIntraPDSNActiveHORrqAccepted"), ("STARENT-MIB", "starPCFIntraPDSNDormantHORrqAccepted"), ("STARENT-MIB", "starPCFInterPDSNHORrqAccepted")], [("STARENT-MIB", "starPCFInitialRrqDenied"), ("STARENT-MIB", "starPCFInitialRrqDiscarded"), ("STARENT-MIB", "starPCFRenewRrqRcvd"), ("STARENT-MIB", "starPCFRenewRrqAccepted"), ("STARENT-MIB", "starPCFRenewActiveRrqAccepted"), ("STARENT-MIB", "starPCFRenewDormantRrqAccepted"), ("STARENT-MIB", "starPCFRenewRrqDenied"), ("STARENT-MIB", "starPCFRenewRrqDiscarded"), ("STARENT-MIB", "starPCFDeregRrqRcvd"), ("STARENT-MIB", "starPCFDeregRrqAccepted"), ("STARENT-MIB", "starPCFDeregDormantRrqAccepted"), ("STARENT-MIB", "starPCFDeregRrqDenied"), ("STARENT-MIB", "starPCFDeregRrqDiscarded"), ("STARENT-MIB", "starPCFIntraPDSNActiveAnidHORrqAccepted"), ("STARENT-MIB", "starPCFIntraPDSNDormantAnidHORrqAccepted"), ("STARENT-MIB", "starPCFDeniedUnSpeReason"), ("STARENT-MIB", "starPCFDeniedAdmProh"), ("STARENT-MIB", "starPCFDeniedInsufResource"), ("STARENT-MIB", "starPCFDeniedMobNodeAuthFail"), ("STARENT-MIB", "starPCFDeniedIdentMismatch"), ("STARENT-MIB", "starPCFDeniedPoorFormedReq"), ("STARENT-MIB", "starPCFDeniedUnknownPDSNAddr"), ("STARENT-MIB", "starPCFDeniedRevTunnelUnavail"), ("STARENT-MIB", "starPCFDeniedRevTunnelRequire"), ("STARENT-MIB", "starPCFDeniedUnrecogVendorId"), ("STARENT-MIB", "starPCFDeniedSessionClosed"), ("STARENT-MIB", "starPCFDeniedBsnSessionInfoUnavail"), ("STARENT-MIB", "starPCFRegUpdTransmitted"), ("STARENT-MIB", "starPCFRegUpdAccepted"), ("STARENT-MIB", "starPCFRegUpdateRpLifetimeExpiry"), ("STARENT-MIB", "starPCFRegUpdateUpperLayerIntiated"), ("STARENT-MIB", "starPCFRegUpdateOtherReason"), ("STARENT-MIB", "starPCFRegUpdateHORelease"), ("STARENT-MIB", "starPCFRegUpdateSessmgrDied"), ("STARENT-MIB", "starPCFAuxA10ConnectionsSetup"), ("STARENT-MIB", "starPCFSessionsDenied"), ("STARENT-MIB", "starPCFSessionsInit"), ("STARENT-MIB", "starPCFSessionsReneg"), ("STARENT-MIB", "starPCFDiscLcpRemote"), ("STARENT-MIB", "starPCFDiscRpRemote"), ("STARENT-MIB", "starPCFDiscRpLocal"), ("STARENT-MIB", "starPCFDiscMaxIpcpRetr"), ("STARENT-MIB", "starPCFDiscMaxIpv6cpRetr"), ("STARENT-MIB", "starPCFDiscMaxLcpRetr"), ("STARENT-MIB", "starPCFDiscAuthFail"), ("STARENT-MIB", "starPCFDiscSessSetupTimeout"), ("STARENT-MIB", "starPCFDiscFlowAddFail"), ("STARENT-MIB", "starPCFDiscInvDestContext"), ("STARENT-MIB", "starPCFDiscLcpOptFail"), ("STARENT-MIB", "starPCFDiscIpcpOptFail"), ("STARENT-MIB", "starPCFDiscIpv6cpOptFail"), ("STARENT-MIB", "starPCFDiscNoRemIpAddr"), ("STARENT-MIB", "starPCFDiscDetectionFail"), ("STARENT-MIB", "starPCFDiscMisc"), ("STARENT-MIB", "starPCFCurrentSessions"), ("STARENT-MIB", "starPCFSessionsSetup"), ("STARENT-MIB", "starPCFSessionsRelsese"), ("STARENT-MIB", "starPCFCurrentRevaSessions"), ("STARENT-MIB", "starPCFRevaSessionsSetup"), ("STARENT-MIB", "starPCFRevaSessionsRelsese"), ("STARENT-MIB", "starPDIFSysStatus"), ("STARENT-MIB", "starPDIFSysNumService"), ("STARENT-MIB", "starPDIFSysSessCurrent"), ("STARENT-MIB", "starPDIFSysSessCurrActive"), ("STARENT-MIB", "starPDIFSysSessCurrDormant"), ("STARENT-MIB", "starPDIFSysSessTtlSetup"), ("STARENT-MIB", "starPDIFSysChildSACurrent"), ("STARENT-MIB", "starPDIFVpnID"), ("STARENT-MIB", "starPDIFVpnName"), ("STARENT-MIB", "starPDIFServName"), ("STARENT-MIB", "starPDIFStatus"), ("STARENT-MIB", "starPDIFSessCurrent"), ("STARENT-MIB", "starPDIFSessRemain"), ("STARENT-MIB", "starPDIFSessCurrentActive"), ("STARENT-MIB", "starPDIFSessCurrentDormant"), ("STARENT-MIB", "starPDIFSessCurrentIpv6Active"), ("STARENT-MIB", "starPDIFSessCurrentIpv6Dormant"), ("STARENT-MIB", "starPDIFSessCurrentIpv4Active"), ("STARENT-MIB", "starPDIFSessCurrentIpv4Dormant"), ("STARENT-MIB", "starPDIFBindIpAddress"), ("STARENT-MIB", "starPDIFBindIpPort"), ("STARENT-MIB", "starPDIFBindSlot"), ("STARENT-MIB", "starPDIFBindPort"), ("STARENT-MIB", "starSessSGSNVpnName"), ("STARENT-MIB", "starSessSGSNServName"), ("STARENT-MIB", "starSessSGSNMcc"), ("STARENT-MIB", "starSessSGSNMnc"), ("STARENT-MIB", "starSessSGSNRncId"), ("STARENT-MIB", "starSessSGSNHlrNum"), ("STARENT-MIB", "starSS7Pc"), ("STARENT-MIB", "starSS7M3UAPsId"), ("STARENT-MIB", "starSS7M3UAPspId"), ("STARENT-MIB", "starSS7MTP3LinkSetId"), ("STARENT-MIB", "starSS7MTP3LinkId"), ("STARENT-MIB", "starSS7SCTPSelfAddr"), ("STARENT-MIB", "starSS7SCTPPeerAddr"), ("STARENT-MIB", "starSS7SCTPSelfPort"), ("STARENT-MIB", "starSS7SCTPPeerPort"), ("STARENT-MIB", "starSccpSsn"), ("STARENT-MIB", "starSGTPVpnName"), ("STARENT-MIB", "starSGTPServName"), ("STARENT-MIB", "starSGTPSelfAddr"), ("STARENT-MIB", "starSGTPPeerAddr"), ("STARENT-MIB", "starSGTPSelfPort"), ("STARENT-MIB", "starSGTPPeerPort"), ("STARENT-MIB", "starIPMSServerVpnName"), ("STARENT-MIB", "starCertExpiryTime"), ("STARENT-MIB", "starCertIssuer"), ("STARENT-MIB", "starFileApplication"), ("STARENT-MIB", "starFTPServVpnName"), ("STARENT-MIB", "starCSCFPeerServerVpnName"), ("STARENT-MIB", "starCSCFPeerServerSvcName"), ("STARENT-MIB", "starCSCFPeerServerListName"), ("STARENT-MIB", "starCSCFPeerServerName"), ("STARENT-MIB", "starCSCFPeerServerState"), ("STARENT-MIB", "starSDHOperState"), ("STARENT-MIB", "starSDHPathOperState"), ("STARENT-MIB", "starE1TribOperStateLOP"), ("STARENT-MIB", "starE1TribOperState"), ("STARENT-MIB", "starFractE1TribTimeslots"), ("STARENT-MIB", "starGPRSNsvci"), ("STARENT-MIB", "starGPRSBvci"), ("STARENT-MIB", "starStorageDeviceType"), ("STARENT-MIB", "starPDGSysStatus"), ("STARENT-MIB", "starPDGSysNumService"), ("STARENT-MIB", "starPDGSysSessCurrent"), ("STARENT-MIB", "starPDGSysSessCurrActive"), ("STARENT-MIB", "starPDGSysSessCurrDormant"), ("STARENT-MIB", "starPDGSysSessTtlSetup"), ("STARENT-MIB", "starPDGSysChildSACurrent"), ("STARENT-MIB", "starPDGVpnID"), ("STARENT-MIB", "starPDGVpnName"), ("STARENT-MIB", "starPDGServName"), ("STARENT-MIB", "starPDGStatus"), ("STARENT-MIB", "starPDGSessCurrent"), ("STARENT-MIB", "starPDGSessRemain"), ("STARENT-MIB", "starPDGSessCurrentActive"), ("STARENT-MIB", "starPDGSessCurrentDormant"), ("STARENT-MIB", "starPDGSessCurrentIpv6Active"), ("STARENT-MIB", "starPDGSessCurrentIpv6Dormant"), ("STARENT-MIB", "starPDGSessCurrentIpv4Active"), ("STARENT-MIB", "starPDGSessCurrentIpv4Dormant"), ("STARENT-MIB", "starPDGBindIpAddress"), ("STARENT-MIB", "starPDGBindIpPort"), ("STARENT-MIB", "starPDGBindSlot"), ("STARENT-MIB", "starPDGBindPort"), ("STARENT-MIB", "starPDGSysStatus"), ("STARENT-MIB", "starPDGSysNumService"), ("STARENT-MIB", "starPDGSysSessCurrent"), ("STARENT-MIB", "starPDGSysSessCurrActive"), ("STARENT-MIB", "starPDGSysSessCurrDormant"), ("STARENT-MIB", "starPDGSysSessTtlSetup"), ("STARENT-MIB", "starPDGSysChildSACurrent"), ("STARENT-MIB", "starPDGVpnID"), ("STARENT-MIB", "starPDGVpnName"), ("STARENT-MIB", "starPDGServName"), ("STARENT-MIB", "starPDGStatus"), ("STARENT-MIB", "starPDGSessCurrent"), ("STARENT-MIB", "starPDGSessRemain"), ("STARENT-MIB", "starPDGSessCurrentActive"), ("STARENT-MIB", "starPDGSessCurrentDormant"), ("STARENT-MIB", "starPDGSessCurrentIpv6Active"), ("STARENT-MIB", "starPDGSessCurrentIpv6Dormant"), ("STARENT-MIB", "starPDGSessCurrentIpv4Active"), ("STARENT-MIB", "starPDGSessCurrentIpv4Dormant"), ("STARENT-MIB", "starPDGBindIpAddress"), ("STARENT-MIB", "starPDGBindIpPort"), ("STARENT-MIB", "starPDGBindSlot"), ("STARENT-MIB", "starPDGBindPort"), ("STARENT-MIB", "starEGTPVpnName"), ("STARENT-MIB", "starEGTPServName"), ("STARENT-MIB", "starEGTPInterfaceType"), ("STARENT-MIB", "starEGTPSelfPort"), ("STARENT-MIB", "starEGTPSelfAddr"), ("STARENT-MIB", "starEGTPPeerPort"), ("STARENT-MIB", "starEGTPPeerAddr"), ("STARENT-MIB", "starEGTPPeerOldRstCnt"), ("STARENT-MIB", "starEGTPPeerNewRstCnt"), ("STARENT-MIB", "starEGTPPeerSessCnt"), ("STARENT-MIB", "starEGTPPeerOldRstCnt"), ("STARENT-MIB", "starEGTPFailureReason"), ("STARENT-MIB", "starLicenseKey"), ("STARENT-MIB", "starLicenseExpiryDate"), ("STARENT-MIB", "starLicenseDaysRemaining"), ("STARENT-MIB", "starLicenseDaysAfterExpiry"), ("STARENT-MIB", "starFNGSysStatus"), ("STARENT-MIB", "starFNGSysNumService"), ("STARENT-MIB", "starFNGSysSessCurrent"), ("STARENT-MIB", "starFNGSysSessCurrActive"), ("STARENT-MIB", "starFNGSysSessCurrDormant"), ("STARENT-MIB", "starFNGSysSessTtlSetup"), ("STARENT-MIB", "starFNGSysChildSACurrent"), ("STARENT-MIB", "starFNGVpnID"), ("STARENT-MIB", "starFNGVpnName"), ("STARENT-MIB", "starFNGServName"), ("STARENT-MIB", "starFNGStatus"), ("STARENT-MIB", "starFNGSessCurrent"), ("STARENT-MIB", "starFNGSessRemain"), ("STARENT-MIB", "starFNGSessCurrentActive"), ("STARENT-MIB", "starFNGSessCurrentDormant"), ("STARENT-MIB", "starFNGSessCurrentIpv6Active"), ("STARENT-MIB", "starFNGSessCurrentIpv6Dormant"), ("STARENT-MIB", "starFNGSessCurrentIpv4Active"), ("STARENT-MIB", "starFNGSessCurrentIpv4Dormant"), ("STARENT-MIB", "starFNGBindIpAddress"), ("STARENT-MIB", "starFNGBindIpPort"), ("STARENT-MIB", "starFNGBindSlot"), ("STARENT-MIB", "starFNGBindPort"), ("STARENT-MIB", "starMMES1AssocVpnName"), ("STARENT-MIB", "starMMES1AssocServName"), ("STARENT-MIB", "starMMES1PathVpnName"), ("STARENT-MIB", "starMMES1PathServName"), ("STARENT-MIB", "starMMES1PathSelfAddr"), ("STARENT-MIB", "starMMES1PathSelfPort"), ("STARENT-MIB", "starMMES1PathPeerAddr"), ("STARENT-MIB", "starMMES1PathPeerPort"), ("STARENT-MIB", "starSPRServerIpAddr"), ("STARENT-MIB", "starSessHNBGWVpnName"), ("STARENT-MIB", "starSessHNBGWServName"), ("STARENT-MIB", "starSessHNBGWCsNwName"), ("STARENT-MIB", "starSessHNBGWPsNwName"), ("STARENT-MIB", "starSessHNBGWSgsnPtCd"), ("STARENT-MIB", "starSessHNBGWMscPtCd"), ("STARENT-MIB", "starHENBGWServiceVpnName"), ("STARENT-MIB", "starHENBGWServiceServName"), ("STARENT-MIB", "starHENBGWServiceLogicalENBId"), ("STARENT-MIB", "starHENBGWServiceMMEServName"), ("STARENT-MIB", "starHENBGWServicePeerAddr"), ("STARENT-MIB", "starHENBGWServicePeerPort"), ("STARENT-MIB", "starHENBGWServiceTLRI"), ("STARENT-MIB", "starSessALCAPVpnName"), ("STARENT-MIB", "starSessALCAPServName"), ("STARENT-MIB", "starSessALCAPAAL2NodeName"), ("STARENT-MIB", "starSessALCAPPathId"), ("STARENT-MIB", "starMVGEndpointName"), ("STARENT-MIB", "starMVGCauseCode"), ("STARENT-MIB", "starMVGProtocolType"), ("STARENT-MIB", "starPCCNtfyIntfPeerName"), ("STARENT-MIB", "starPMIPVpnName"), ("STARENT-MIB", "starPMIPServName"), ("STARENT-MIB", "starPMIPSelfAddrType"), ("STARENT-MIB", "starPMIPSelfAddr"), ("STARENT-MIB", "starPMIPPeerAddrType"), ("STARENT-MIB", "starPMIPPeerAddr"), ("STARENT-MIB", "starPMIPPeerOldRstCnt"), ("STARENT-MIB", "starPMIPPeerNewRstCnt"), ("STARENT-MIB", "starPMIPPeerSessCnt"), ("STARENT-MIB", "starPMIPFailureReason"), ("STARENT-MIB", "starCBSServiceVpnName"), ("STARENT-MIB", "starIuBcSelfPortNum"), ("STARENT-MIB", "starIuBcSelfIpAddr"), ("STARENT-MIB", "starIuBcPeerPortNum"), ("STARENT-MIB", "starIuBcPeerIpAddr"), ("STARENT-MIB", "starIuBcTcpConnCauseStr"), ("STARENT-MIB", "starGTPCRLFSessMgrInst")], [("STARENT-MIB", "starGTPCRLFVPNName"), ("STARENT-MIB", "starGTPCRLFVPNId"), ("STARENT-MIB", "starGTPCRLFContextName"), ("STARENT-MIB", "starGTPCRLFCurrAppTPS"), ("STARENT-MIB", "starGTPCRLFCurrAppDelayTol")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        starChassisGroup = starChassisGroup.setObjects(*_starChassisGroup_obj)
    else:
        starChassisGroup = starChassisGroup.setObjects(*_starChassisGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    starChassisGroup = starChassisGroup.setStatus('current')
if mibBuilder.loadTexts: starChassisGroup.setDescription('A collection of objects providing information about a chassis')
starAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8164, 3, 1, 3)).setObjects(("STARENT-MIB", "starMaxAlertsPerTime"), ("STARENT-MIB", "starWindowTime"), ("STARENT-MIB", "starAlertSendingEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    starAlertGroup = starAlertGroup.setStatus('current')
if mibBuilder.loadTexts: starAlertGroup.setDescription('A collection of objects to control the rate at which traps can be generated')
starAlertTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 8164, 3, 1, 4)).setObjects(("STARENT-MIB", "starAlertsDisabled"), ("STARENT-MIB", "starAlertsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    starAlertTrapGroup = starAlertTrapGroup.setStatus('current')
if mibBuilder.loadTexts: starAlertTrapGroup.setDescription('A collection of traps related to trap thresholding')
starTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 8164, 3, 1, 5))
for _starTrapGroup_obj in [[("STARENT-MIB", "starCardTempOverheat"), ("STARENT-MIB", "starCardTempOK"), ("STARENT-MIB", "starCardRebootRequest"), ("STARENT-MIB", "starCardUp"), ("STARENT-MIB", "starCardVoltageFailure"), ("STARENT-MIB", "starCardRemoved"), ("STARENT-MIB", "starCardInserted"), ("STARENT-MIB", "starCardBootFailed"), ("STARENT-MIB", "starCardMismatch"), ("STARENT-MIB", "starCardPACMigrateStart"), ("STARENT-MIB", "starCardPACMigrateComplete"), ("STARENT-MIB", "starCardPACMigrateFailed"), ("STARENT-MIB", "starCardSPCSwitchoverStart"), ("STARENT-MIB", "starCardSPCSwitchoverComplete"), ("STARENT-MIB", "starCardSPCSwitchoverFailed"), ("STARENT-MIB", "starFanFailed"), ("STARENT-MIB", "starFanRemoved"), ("STARENT-MIB", "starFanInserted"), ("STARENT-MIB", "starCPUBusy"), ("STARENT-MIB", "starCPUMemoryLow"), ("STARENT-MIB", "starCPUMemoryFailed"), ("STARENT-MIB", "starCPUFailed"), ("STARENT-MIB", "starCPUWatchDogExpired"), ("STARENT-MIB", "starNPUARPPoolExhausted"), ("STARENT-MIB", "starPowerFilterUnitFailed"), ("STARENT-MIB", "starPowerFilterUnitUnavail"), ("STARENT-MIB", "starPowerFilterUnitAvail"), ("STARENT-MIB", "starAlertsDisabled"), ("STARENT-MIB", "starAlertsEnabled"), ("STARENT-MIB", "starAAAAuthServerUnreachable"), ("STARENT-MIB", "starAAAAuthServerReachable"), ("STARENT-MIB", "starAAAAuthServerMisconfigured"), ("STARENT-MIB", "starAAAAccServerUnreachable"), ("STARENT-MIB", "starAAAAccServerReachable"), ("STARENT-MIB", "starAAAAccServerMisconfigured"), ("STARENT-MIB", "starLogMsg"), ("STARENT-MIB", "starPDSNServiceStart"), ("STARENT-MIB", "starPDSNServiceStop"), ("STARENT-MIB", "starHAServiceStart"), ("STARENT-MIB", "starHAServiceStop"), ("STARENT-MIB", "starFAServiceStart"), ("STARENT-MIB", "starFAServiceStop"), ("STARENT-MIB", "starCLISessionStart"), ("STARENT-MIB", "starCLISessionEnd"), ("STARENT-MIB", "starCritTaskFailed"), ("STARENT-MIB", "starCardActive"), ("STARENT-MIB", "starLACServiceStart"), ("STARENT-MIB", "starLACServiceStop"), ("STARENT-MIB", "starLNSServiceStart"), ("STARENT-MIB", "starLNSServiceStop"), ("STARENT-MIB", "starCardDown"), ("STARENT-MIB", "starGGSNServiceStart"), ("STARENT-MIB", "starGGSNServiceStop"), ("STARENT-MIB", "starLicenseExceeded"), ("STARENT-MIB", "starSubscriberLimit"), ("STARENT-MIB", "starSessionRejectNoResource"), ("STARENT-MIB", "starSIPServiceStart"), ("STARENT-MIB", "starSIPServiceStop"), ("STARENT-MIB", "starVIMServiceStart"), ("STARENT-MIB", "starVIMServiceStop"), ("STARENT-MIB", "starCHATCONFServiceStart"), ("STARENT-MIB", "starCHATCONFServiceStop"), ("STARENT-MIB", "starSIPRouteNomatch"), ("STARENT-MIB", "starL3AddrUnreachable"), ("STARENT-MIB", "starSWUpgradeStart"), ("STARENT-MIB", "starSWUpgradeComplete"), ("STARENT-MIB", "starSWUpgradeAborted"), ("STARENT-MIB", "starBGPPeerSessionUp"), ("STARENT-MIB", "starBGPPeerSessionDown"), ("STARENT-MIB", "starSRPActive"), ("STARENT-MIB", "starSRPStandby"), ("STARENT-MIB", "starBGPPeerReachable"), ("STARENT-MIB", "starBGPPeerUnreachable"), ("STARENT-MIB", "starSRPAAAReachable"), ("STARENT-MIB", "starSRPAAAUnreachable"), ("STARENT-MIB", "starSRPSwitchoverInitiated"), ("STARENT-MIB", "starSRPCheckpointFailure"), ("STARENT-MIB", "starSRPConfigOutOfSync"), ("STARENT-MIB", "starSRPConfigInSync"), ("STARENT-MIB", "starGESwitchFailure"), ("STARENT-MIB", "starSIPRouteServerAvailable"), ("STARENT-MIB", "starSIPRouteServerUnavailable"), ("STARENT-MIB", "starFMDMaxCallRateReached"), ("STARENT-MIB", "starFMDCallRateUnderControl"), ("STARENT-MIB", "starStorageServerCPUBusy"), ("STARENT-MIB", "starStorageServerCPUNormal"), ("STARENT-MIB", "starStorageServerDiskSpaceLow"), ("STARENT-MIB", "starStorageServerDiskSpaceOK"), ("STARENT-MIB", "starCardSPOFAlarm"), ("STARENT-MIB", "starCardSPOFClear"), ("STARENT-MIB", "starStorageServerOldGcdrPending"), ("STARENT-MIB", "starStorageServerOldGcdrCleared"), ("STARENT-MIB", "starLoginFailure"), ("STARENT-MIB", "starIPSGServiceStart"), ("STARENT-MIB", "starIPSGServiceStop"), ("STARENT-MIB", "starHAUnreachable"), ("STARENT-MIB", "starHAReachable"), ("STARENT-MIB", "starASNGWServiceStart"), ("STARENT-MIB", "starASNGWServiceStop"), ("STARENT-MIB", "starTaskFailed"), ("STARENT-MIB", "starTaskRestart"), ("STARENT-MIB", "starCSCFServiceStart"), ("STARENT-MIB", "starCSCFServiceStop"), ("STARENT-MIB", "starPHSGWServiceStart"), ("STARENT-MIB", "starPHSGWServiceStop"), ("STARENT-MIB", "starPHSPCServiceStart"), ("STARENT-MIB", "starPHSPCServiceStop"), ("STARENT-MIB", "starIPSECDynTunUp"), ("STARENT-MIB", "starIPSECDynTunDown"), ("STARENT-MIB", "starHeartbeat"), ("STARENT-MIB", "starOverloadSystem"), ("STARENT-MIB", "starOverloadSystemClear"), ("STARENT-MIB", "starOverloadService"), ("STARENT-MIB", "starOverloadServiceClear"), ("STARENT-MIB", "starStorageServerClusterStateChange"), ("STARENT-MIB", "starStorageServerClusSwitchOver"), ("STARENT-MIB", "starStorageServerClusPathFail"), ("STARENT-MIB", "starStorageServerClusPathOK"), ("STARENT-MIB", "starStorageServerClusInterCFail"), ("STARENT-MIB", "starStorageServerClusInterCOK"), ("STARENT-MIB", "starStorageServerClusIntfFail"), ("STARENT-MIB", "starStorageServerClusIntfOK"), ("STARENT-MIB", "starStorageServerMemLow"), ("STARENT-MIB", "starStorageServerMemNormal"), ("STARENT-MIB", "starLongDurTimerExpiry"), ("STARENT-MIB", "starClosedRPServiceStart"), ("STARENT-MIB", "starClosedRPServiceStop"), ("STARENT-MIB", "starGtpcPathFailure"), ("STARENT-MIB", "starGtpuPathFailure"), ("STARENT-MIB", "starManagerFailure"), ("STARENT-MIB", "starEISServerAlive"), ("STARENT-MIB", "starEISServerDead"), ("STARENT-MIB", "starCgfAlive"), ("STARENT-MIB", "starCgfDead"), ("STARENT-MIB", "starCdrPurged"), ("STARENT-MIB", "starAAAArchiveStarted"), ("STARENT-MIB", "starIPSecNodeIpv6PeerDown"), ("STARENT-MIB", "starIPSecNodeIpv6PeerUp"), ("STARENT-MIB", "starVLRAssocDown"), ("STARENT-MIB", "starVLRAssocUp"), ("STARENT-MIB", "starVLRAllAssocDown"), ("STARENT-MIB", "starVLRAllAssocDownClear"), ("STARENT-MIB", "starVLRDown"), ("STARENT-MIB", "starVLRUp"), ("STARENT-MIB", "starStorageServerAlive"), ("STARENT-MIB", "starStorageServerDead"), ("STARENT-MIB", "starGgsnInitiatedUpdtFailed"), ("STARENT-MIB", "starCongestion"), ("STARENT-MIB", "starCongestionClear"), ("STARENT-MIB", "starCscfSessResourceCongestion"), ("STARENT-MIB", "starCscfSessResourceCongestionClear"), ("STARENT-MIB", "starServiceLossPTACs"), ("STARENT-MIB", "starServiceLossLC"), ("STARENT-MIB", "starServiceLossSPIO"), ("STARENT-MIB", "starIPSPAllAddrsFree"), ("STARENT-MIB", "starPCFUnreachable"), ("STARENT-MIB", "starPCFReachable"), ("STARENT-MIB", "starLIRcvryError"), ("STARENT-MIB", "starLIRcvryComplete"), ("STARENT-MIB", "starCGWServiceStart"), ("STARENT-MIB", "starCGWServiceStop"), ("STARENT-MIB", "starDhcpAlive"), ("STARENT-MIB", "starDhcpDead"), ("STARENT-MIB", "starDhcpServiceStarted"), ("STARENT-MIB", "starDhcpServiceStopped"), ("STARENT-MIB", "starNTPPeerUnreachable"), ("STARENT-MIB", "starNTPSyncLost"), ("STARENT-MIB", "starL2TPTunnelDownPeerUnreachable"), ("STARENT-MIB", "starCardStandby"), ("STARENT-MIB", "starLicenseUnderLimit"), ("STARENT-MIB", "starIPSECPriTunDown"), ("STARENT-MIB", "starIPSECPriTunUp"), ("STARENT-MIB", "starIPSECSecTunDown"), ("STARENT-MIB", "starIPSECSecTunUp"), ("STARENT-MIB", "starIPSECTunSwitchFail"), ("STARENT-MIB", "starIPSECTunSwitchComplete"), ("STARENT-MIB", "starNwReachServerAlive"), ("STARENT-MIB", "starNwReachServerDead"), ("STARENT-MIB", "starStorageServerUnackedGcdrVolPurge"), ("STARENT-MIB", "starStorageServerUnackedGcdrFileGen"), ("STARENT-MIB", "starNTPPeerReachable"), ("STARENT-MIB", "starNTPSyncEstablished"), ("STARENT-MIB", "starContFiltDBError"), ("STARENT-MIB", "starContFiltDBErrorClear"), ("STARENT-MIB", "starBLDBError"), ("STARENT-MIB", "starBLDBErrorClear"), ("STARENT-MIB", "starContFiltDBUpgradeError"), ("STARENT-MIB", "starContFiltDBUpgradeErrorClear"), ("STARENT-MIB", "starBLDBUpgradeError"), ("STARENT-MIB", "starBLDBUpgradeErrorClear"), ("STARENT-MIB", "starDynPkgLoadError"), ("STARENT-MIB", "starDynPkgLoadErrorClear"), ("STARENT-MIB", "starDynPkgUpgradeError"), ("STARENT-MIB", "starDynPkgUpgradeErrorClear"), ("STARENT-MIB", "starPDIFServiceStart"), ("STARENT-MIB", "starPDIFServiceStop"), ("STARENT-MIB", "starSessMgrRecoveryComplete"), ("STARENT-MIB", "starSessMgrFlowCount"), ("STARENT-MIB", "starSessMgrFlowCountClear"), ("STARENT-MIB", "starDiameterPeerDown"), ("STARENT-MIB", "starDiameterPeerUp"), ("STARENT-MIB", "starDiameterServerUnreachable"), ("STARENT-MIB", "starDiameterServerReachable"), ("STARENT-MIB", "starDiameterCapabilitiesExchangeSuccess"), ("STARENT-MIB", "starDiameterCapabilitiesExchangeFailure"), ("STARENT-MIB", "starDiameterRlfThresholdOver"), ("STARENT-MIB", "starDiameterRlfThresholdGood"), ("STARENT-MIB", "starDiameterRlfOverLimit"), ("STARENT-MIB", "starCDRFileRemoved"), ("STARENT-MIB", "starCSCFPeerServerReachable"), ("STARENT-MIB", "starCSCFPeerServerUnreachable"), ("STARENT-MIB", "starCSCFPeerServerUnavailable"), ("STARENT-MIB", "starCSCFPeerServerOutofService"), ("STARENT-MIB", "starCSCFPeerServerInService"), ("STARENT-MIB", "starCLIConfigMode"), ("STARENT-MIB", "starSGSNServiceStart"), ("STARENT-MIB", "starSGSNServiceStop"), ("STARENT-MIB", "starM3UAPCUnavailable"), ("STARENT-MIB", "starM3UAPCAvailable"), ("STARENT-MIB", "starECSTotalDNSLearntIPv4Threshold"), ("STARENT-MIB", "starECSTotalDNSLearntIPv4ThresholdClear"), ("STARENT-MIB", "starECSTotalDNSLearntIPv6Threshold"), ("STARENT-MIB", "starECSTotalDNSLearntIPv6ThresholdClear"), ("STARENT-MIB", "starM3UAPSDown"), ("STARENT-MIB", "starM3UAPSActive"), ("STARENT-MIB", "starM3UAPSPDown"), ("STARENT-MIB", "starM3UAPSPUp"), ("STARENT-MIB", "starSCCPSspRcvd"), ("STARENT-MIB", "starSCCPSspClear"), ("STARENT-MIB", "starSGSNRNCReset"), ("STARENT-MIB", "starSGSNHLRReset"), ("STARENT-MIB", "starSGSNGtpcPathFailure"), ("STARENT-MIB", "starSGSNGtpcPathFailureClear"), ("STARENT-MIB", "starSGSNGtpuPathFailure"), ("STARENT-MIB", "starSGSNGtpuPathFailureClear"), ("STARENT-MIB", "starMTP3LinkOutOfService"), ("STARENT-MIB", "starMTP3LinkInService"), ("STARENT-MIB", "starMTP3LinkSetUnAvailable"), ("STARENT-MIB", "starMTP3LinkSetAvailable"), ("STARENT-MIB", "starSCTPAssociationFail"), ("STARENT-MIB", "starSCTPAssociationEstablished"), ("STARENT-MIB", "starSCTPPathDown"), ("STARENT-MIB", "starSCTPPathUp"), ("STARENT-MIB", "starMTP3PCUnavailable"), ("STARENT-MIB", "starMTP3PCAvailable"), ("STARENT-MIB", "starSS7PCUnavailable"), ("STARENT-MIB", "starSS7PCAvailable"), ("STARENT-MIB", "starSS7PCCongested"), ("STARENT-MIB", "starSS7PCCongestionCleared"), ("STARENT-MIB", "starM3UAPSPCongested"), ("STARENT-MIB", "starM3UAPSPCongestionCleared"), ("STARENT-MIB", "starStorageFailed"), ("STARENT-MIB", "starRaidFailed"), ("STARENT-MIB", "starRaidStarted"), ("STARENT-MIB", "starRaidDegraded")], [("STARENT-MIB", "starRaidRecovered"), ("STARENT-MIB", "starHENBGWMMESCTPAssocDown"), ("STARENT-MIB", "starHENBGWMMESCTPAssocUp"), ("STARENT-MIB", "starHENBGWMMESCTPAllAssocDown"), ("STARENT-MIB", "starHENBGWMMESCTPAllAssocDownClear"), ("STARENT-MIB", "starECSreaddressServerDown"), ("STARENT-MIB", "starECSreaddressServerUp"), ("STARENT-MIB", "starStorageFound"), ("STARENT-MIB", "starStorageNotFound"), ("STARENT-MIB", "starThreshCPUUtilization"), ("STARENT-MIB", "starThreshClearCPUUtilization"), ("STARENT-MIB", "starThreshCPUMemory"), ("STARENT-MIB", "starThreshClearCPUMemory"), ("STARENT-MIB", "starThreshCPUCryptoCoresUtilization"), ("STARENT-MIB", "starThreshClearCPUCryptoCoresUtilization"), ("STARENT-MIB", "starThreshLicense"), ("STARENT-MIB", "starThreshClearLicense"), ("STARENT-MIB", "starThreshSubscriberTotal"), ("STARENT-MIB", "starThreshClearSubscriberTotal"), ("STARENT-MIB", "starThreshSubscriberActive"), ("STARENT-MIB", "starThreshClearSubscriberActive"), ("STARENT-MIB", "starThreshPortRxUtil"), ("STARENT-MIB", "starThreshClearPortRxUtil"), ("STARENT-MIB", "starThreshPortTxUtil"), ("STARENT-MIB", "starThreshClearPortTxUtil"), ("STARENT-MIB", "starThreshPortHighActivity"), ("STARENT-MIB", "starThreshClearPortHighActivity"), ("STARENT-MIB", "starThreshAAAAuthFail"), ("STARENT-MIB", "starThreshClearAAAAuthFail"), ("STARENT-MIB", "starThreshAAAAuthFailRate"), ("STARENT-MIB", "starThreshClearAAAAuthFailRate"), ("STARENT-MIB", "starThreshAAAAcctFail"), ("STARENT-MIB", "starThreshClearAAAAcctFail"), ("STARENT-MIB", "starThreshAAAAcctFailRate"), ("STARENT-MIB", "starThreshClearAAAAcctFailRate"), ("STARENT-MIB", "starThreshAAARetryRate"), ("STARENT-MIB", "starThreshClearAAARetryRate"), ("STARENT-MIB", "starThreshCallSetup"), ("STARENT-MIB", "starThreshClearCallSetup"), ("STARENT-MIB", "starThreshCallSetupFailure"), ("STARENT-MIB", "starThreshClearCallSetupFailure"), ("STARENT-MIB", "starThreshCallRejectNoResource"), ("STARENT-MIB", "starThreshClearCallRejectNoResource"), ("STARENT-MIB", "starThreshPacketsFilteredDropped"), ("STARENT-MIB", "starThreshClearPacketsFilteredDropped"), ("STARENT-MIB", "starThreshPacketsForwarded"), ("STARENT-MIB", "starThreshClearPacketsForwarded"), ("STARENT-MIB", "starThreshSessCPUThroughput"), ("STARENT-MIB", "starThreshClearSessCPUThroughput"), ("STARENT-MIB", "starThreshIPPoolAvail"), ("STARENT-MIB", "starThreshClearIPPoolAvail"), ("STARENT-MIB", "starThreshCPUUtilization10Sec"), ("STARENT-MIB", "starThreshClearCPUUtilization10Sec"), ("STARENT-MIB", "starThreshCPULoad"), ("STARENT-MIB", "starThreshClearCPULoad"), ("STARENT-MIB", "starThreshCPUMemUsage"), ("STARENT-MIB", "starThreshClearCPUMemUsage"), ("STARENT-MIB", "starThreshPDSNSessions"), ("STARENT-MIB", "starThreshClearPDSNSessions"), ("STARENT-MIB", "starThreshGGSNSessions"), ("STARENT-MIB", "starThreshClearGGSNSessions"), ("STARENT-MIB", "starThreshHASessions"), ("STARENT-MIB", "starThreshClearHASessions"), ("STARENT-MIB", "starThreshLNSSessions"), ("STARENT-MIB", "starThreshClearLNSSessions"), ("STARENT-MIB", "starThreshPerServicePDSNSessions"), ("STARENT-MIB", "starThreshClearPerServicePDSNSessions"), ("STARENT-MIB", "starThreshPerServicePDGSessions"), ("STARENT-MIB", "starThreshClearPerServicePDGSessions"), ("STARENT-MIB", "starThreshPerServiceGGSNSessions"), ("STARENT-MIB", "starThreshClearPerServiceGGSNSessions"), ("STARENT-MIB", "starThreshPerServiceHASessions"), ("STARENT-MIB", "starThreshClearPerServiceHASessions"), ("STARENT-MIB", "starThreshPerServiceLNSSessions"), ("STARENT-MIB", "starThreshClearPerServiceLNSSessions"), ("STARENT-MIB", "starThreshIPPoolHold"), ("STARENT-MIB", "starThreshClearIPPoolHold"), ("STARENT-MIB", "starThreshIPPoolUsed"), ("STARENT-MIB", "starThreshClearIPPoolUsed"), ("STARENT-MIB", "starThreshIPPoolRelease"), ("STARENT-MIB", "starThreshClearIPPoolRelease"), ("STARENT-MIB", "starThreshIPPoolFree"), ("STARENT-MIB", "starThreshClearIPPoolFree"), ("STARENT-MIB", "starThreshAAAAcctArchive"), ("STARENT-MIB", "starThreshClearAAAAcctArchive"), ("STARENT-MIB", "starThreshPortSpecRxUtil"), ("STARENT-MIB", "starThreshClearPortSpecRxUtil"), ("STARENT-MIB", "starThreshPortSpecTxUtil"), ("STARENT-MIB", "starThreshClearPortSpecTxUtil"), ("STARENT-MIB", "starThreshHACallSetupRate"), ("STARENT-MIB", "starThreshClearHACallSetupRate"), ("STARENT-MIB", "starThreshHASvcCallSetupRate"), ("STARENT-MIB", "starThreshClearHASvcCallSetupRate"), ("STARENT-MIB", "starThreshHASvcRegReplyError"), ("STARENT-MIB", "starThreshClearHASvcRegReplyError"), ("STARENT-MIB", "starThreshHASvcReregReplyError"), ("STARENT-MIB", "starThreshClearHASvcReregReplyError"), ("STARENT-MIB", "starThreshHASvcDeregReplyError"), ("STARENT-MIB", "starThreshClearHASvcDeregReplyError"), ("STARENT-MIB", "starThreshFASvcRegReplyError"), ("STARENT-MIB", "starThreshClearFASvcRegReplyError"), ("STARENT-MIB", "starThreshPDSNCallSetupRate"), ("STARENT-MIB", "starThreshClearPDSNCallSetupRate"), ("STARENT-MIB", "starThreshPDSNSvcCallSetupRate"), ("STARENT-MIB", "starThreshClearPDSNSvcCallSetupRate"), ("STARENT-MIB", "starThreshPDSNSvcA11RRPFailure"), ("STARENT-MIB", "starThreshClearPDSNSvcA11RRPFailure"), ("STARENT-MIB", "starThreshPDSNSvcA11RRQMsgDiscard"), ("STARENT-MIB", "starThreshClearPDSNSvcA11RRQMsgDiscard"), ("STARENT-MIB", "starThreshPDSNSvcA11RACMsgDiscard"), ("STARENT-MIB", "starThreshClearPDSNSvcA11RACMsgDiscard"), ("STARENT-MIB", "starThreshPDSNSvcA11PPPSendDiscard"), ("STARENT-MIB", "starThreshClearPDSNSvcA11PPPSendDiscard"), ("STARENT-MIB", "starThreshAAAMgrQueue"), ("STARENT-MIB", "starThreshClearAAAMgrQueue"), ("STARENT-MIB", "starThreshAAAAcctArchiveQueue1"), ("STARENT-MIB", "starThreshClearAAAAcctArchiveQueue1"), ("STARENT-MIB", "starThreshAAAAcctArchiveQueue2"), ("STARENT-MIB", "starThreshClearAAAAcctArchiveQueue2"), ("STARENT-MIB", "starThreshAAAAcctArchiveQueue3"), ("STARENT-MIB", "starThreshClearAAAAcctArchiveQueue3"), ("STARENT-MIB", "starThreshDnsLookupSrvFailure"), ("STARENT-MIB", "starThreshClearDnsLookupSrvFailure"), ("STARENT-MIB", "starThreshCPUOrbsWarn"), ("STARENT-MIB", "starThreshClearCPUOrbsWarn"), ("STARENT-MIB", "starThreshCPUOrbsCritical"), ("STARENT-MIB", "starThreshClearCPUOrbsCritical"), ("STARENT-MIB", "starThreshRPSetupFailRate"), ("STARENT-MIB", "starThreshClearRPSetupFailRate"), ("STARENT-MIB", "starThreshPPPSetupFailRate"), ("STARENT-MIB", "starThreshClearPPPSetupFailRate"), ("STARENT-MIB", "starThreshStorageUtilization"), ("STARENT-MIB", "starThreshClearStorageUtilization"), ("STARENT-MIB", "starThreshDCCAProtocolErrors"), ("STARENT-MIB", "starThreshClearDCCAProtocolErrors"), ("STARENT-MIB", "starThreshDCCABadAnswers"), ("STARENT-MIB", "starThreshClearDCCABadAnswers"), ("STARENT-MIB", "starThreshDCCAUnknownRatingGroup"), ("STARENT-MIB", "starThreshClearDCCAUnknownRatingGroup"), ("STARENT-MIB", "starThreshDCCARatingFailed"), ("STARENT-MIB", "starThreshClearDCCARatingFailed"), ("STARENT-MIB", "starThreshIPSECIKERequests"), ("STARENT-MIB", "starThreshClearIPSECIKERequests"), ("STARENT-MIB", "starThreshIPSECIKEFailures"), ("STARENT-MIB", "starThreshClearIPSECIKEFailures"), ("STARENT-MIB", "starThreshIPSECIKEFailRate"), ("STARENT-MIB", "starThreshClearIPSECIKEFailRate"), ("STARENT-MIB", "starThreshIPSECTunSetup"), ("STARENT-MIB", "starThreshClearIPSECTunSetup"), ("STARENT-MIB", "starThreshIPSECTunEstabl"), ("STARENT-MIB", "starThreshClearIPSECTunEstabl"), ("STARENT-MIB", "starThreshIPSECCallReqRej"), ("STARENT-MIB", "starThreshClearIPSECCallReqRej"), ("STARENT-MIB", "starThreshEPDGIKEV2SetupAttempts"), ("STARENT-MIB", "starThreshClearEPDGIKEV2SetupAttempts"), ("STARENT-MIB", "starThreshEPDGIKEV2AuthFailures"), ("STARENT-MIB", "starThreshClearEPDGIKEV2AuthFailures"), ("STARENT-MIB", "starThreshEPDGIKEV2SetupSuccess"), ("STARENT-MIB", "starThreshClearEPDGIKEV2SetupSuccess"), ("STARENT-MIB", "starThreshEPDGIKEV2SetupFailure"), ("STARENT-MIB", "starThreshClearEPDGIKEV2SetupFailure"), ("STARENT-MIB", "starThreshEPDGIKEV2SetupFailureRate"), ("STARENT-MIB", "starThreshClearEPDGIKEV2SetupFailureRate"), ("STARENT-MIB", "starThreshCSCFSvcRouteFailure"), ("STARENT-MIB", "starThreshClearCSCFSvcRouteFailure"), ("STARENT-MIB", "starThreshCSCFSvcRegRcvdRate"), ("STARENT-MIB", "starThreshClearCSCFSvcRegRcvdRate"), ("STARENT-MIB", "starThreshCSCFSvcTotalActiveReg"), ("STARENT-MIB", "starThreshClearCSCFSvcTotalActiveReg"), ("STARENT-MIB", "starThreshCSCFSvcInviteRcvdRate"), ("STARENT-MIB", "starThreshClearCSCFSvcInviteRcvdRate"), ("STARENT-MIB", "starThreshCSCFSvcTotalActiveCalls"), ("STARENT-MIB", "starThreshClearCSCFSvcTotalActiveCalls"), ("STARENT-MIB", "starThreshCSCFSvcTotalCallFailure"), ("STARENT-MIB", "starThreshClearCSCFSvcTotalCallFailure"), ("STARENT-MIB", "starThreshCSCFSvcErrorNoResource"), ("STARENT-MIB", "starThreshClearCSCFSvcErrorNoResource"), ("STARENT-MIB", "starThreshCSCFSvcErrorTcp"), ("STARENT-MIB", "starThreshClearCSCFSvcErrorTcp"), ("STARENT-MIB", "starThreshCSCFSvcErrorPresence"), ("STARENT-MIB", "starThreshClearCSCFSvcErrorPresence"), ("STARENT-MIB", "starThreshCSCFSvcErrorRegAuth"), ("STARENT-MIB", "starThreshClearCSCFSvcErrorRegAuth"), ("STARENT-MIB", "starThreshContFiltRating"), ("STARENT-MIB", "starThreshClearContFiltRating"), ("STARENT-MIB", "starThreshContFiltBlock"), ("STARENT-MIB", "starThreshClearContFiltBlock"), ("STARENT-MIB", "starThreshCDRFileSpace"), ("STARENT-MIB", "starThreshClearCDRFileSpace"), ("STARENT-MIB", "starThreshEDRFileSpace"), ("STARENT-MIB", "starThreshClearEDRFileSpace"), ("STARENT-MIB", "starThreshPDIFCurrSess"), ("STARENT-MIB", "starThreshClearPDIFCurrSess"), ("STARENT-MIB", "starThreshPDIFCurrActSess"), ("STARENT-MIB", "starThreshClearPDIFCurrActSess"), ("STARENT-MIB", "starThreshCDRFlowControl"), ("STARENT-MIB", "starThreshSGSNSessions"), ("STARENT-MIB", "starThreshClearSGSNSessions"), ("STARENT-MIB", "starThreshPerServiceSGSNSessions"), ("STARENT-MIB", "starThreshClearPerServiceSGSNSessions"), ("STARENT-MIB", "starThreshSGSNPdpSessions"), ("STARENT-MIB", "starThreshClearSGSNPdpSessions"), ("STARENT-MIB", "starThreshPerServiceSGSNPdpSessions"), ("STARENT-MIB", "starThreshClearPerServiceSGSNPdpSessions"), ("STARENT-MIB", "starThreshClearCDRFlowControl"), ("STARENT-MIB", "starThreshASNGWSessTimeout"), ("STARENT-MIB", "starThreshClearASNGWSessTimeout"), ("STARENT-MIB", "starThreshASNGWSessSetupTimeout"), ("STARENT-MIB", "starThreshClearASNGWSessSetupTimeout"), ("STARENT-MIB", "starThreshASNGWAuthFail"), ("STARENT-MIB", "starThreshClearASNGWAuthFail"), ("STARENT-MIB", "starThreshASNGWMaxEAPRetry"), ("STARENT-MIB", "starThreshClearASNGWMaxEAPRetry"), ("STARENT-MIB", "starThreshASNGWNWEntryDenial"), ("STARENT-MIB", "starThreshClearASNGWNWEntryDenial"), ("STARENT-MIB", "starThreshASNGWHandoffDenial"), ("STARENT-MIB", "starThreshClearASNGWHandoffDenial"), ("STARENT-MIB", "starThreshPHSGWSessTimeout"), ("STARENT-MIB", "starThreshClearPHSGWSessTimeout"), ("STARENT-MIB", "starThreshPHSGWSessSetupTimeout"), ("STARENT-MIB", "starThreshClearPHSGWSessSetupTimeout"), ("STARENT-MIB", "starThreshPHSGWAuthFail"), ("STARENT-MIB", "starThreshClearPHSGWAuthFail"), ("STARENT-MIB", "starThreshPHSGWMaxEAPRetry"), ("STARENT-MIB", "starThreshClearPHSGWMaxEAPRetry"), ("STARENT-MIB", "starThreshPHSGWNWEntryDenial"), ("STARENT-MIB", "starThreshClearPHSGWNWEntryDenial"), ("STARENT-MIB", "starThreshPHSGWHandoffDenial"), ("STARENT-MIB", "starThreshClearPHSGWHandoffDenial"), ("STARENT-MIB", "starThreshASNGWSessions"), ("STARENT-MIB", "starThreshClearASNGWSessions"), ("STARENT-MIB", "starThreshPerServiceASNGWSessions"), ("STARENT-MIB", "starThreshClearPerServiceASNGWSessions"), ("STARENT-MIB", "starThreshPHSPCSessSetupTimeout"), ("STARENT-MIB", "starThreshClearPHSPCSessSetupTimeout"), ("STARENT-MIB", "starThreshPHSPCSleepModeTimeout"), ("STARENT-MIB", "starThreshClearPHSPCSleepModeTimeout"), ("STARENT-MIB", "starThreshPHSPCSmEntryDenial"), ("STARENT-MIB", "starThreshClearPHSPCSmEntryDenial"), ("STARENT-MIB", "starThreshSGWSessions"), ("STARENT-MIB", "starThreshClearSGWSessions"), ("STARENT-MIB", "starThreshPGWSessions"), ("STARENT-MIB", "starThreshClearPGWSessions"), ("STARENT-MIB", "starThreshLMASessions"), ("STARENT-MIB", "starThreshClearLMASessions"), ("STARENT-MIB", "starThreshMAGSessions"), ("STARENT-MIB", "starThreshClearMAGSessions"), ("STARENT-MIB", "starThreshHSGWSessions"), ("STARENT-MIB", "starThreshClearHSGWSessions"), ("STARENT-MIB", "starThreshHENBGWHenbSessions"), ("STARENT-MIB", "starThreshClearHENBGWHenbSessions"), ("STARENT-MIB", "starThreshHENBGWUeSessions"), ("STARENT-MIB", "starThreshClearHENBGWUeSessions"), ("STARENT-MIB", "starThreshHENBGWPagingMessages"), ("STARENT-MIB", "starThreshClearHENBGWPagingMessages")], [("STARENT-MIB", "starThreshPHSGWEAPOLAuthFailure"), ("STARENT-MIB", "starThreshClearPHSGWEAPOLAuthFailure"), ("STARENT-MIB", "starThreshPHSGWMaxEAPOLRetry"), ("STARENT-MIB", "starThreshClearPHSGWMaxEAPOLRetry"), ("STARENT-MIB", "starThreshFWDosAttack"), ("STARENT-MIB", "starThreshClearFWDosAttack"), ("STARENT-MIB", "starThreshFWDropPacket"), ("STARENT-MIB", "starThreshClearFWDropPacket"), ("STARENT-MIB", "starThreshFWDenyRule"), ("STARENT-MIB", "starThreshClearFWDenyRule"), ("STARENT-MIB", "starThreshFWNoRule"), ("STARENT-MIB", "starThreshClearFWNoRule"), ("STARENT-MIB", "starSRPConnDown"), ("STARENT-MIB", "starSRPConnUp"), ("STARENT-MIB", "starThreshNATPortChunks"), ("STARENT-MIB", "starThreshClearNATPortChunks"), ("STARENT-MIB", "starThreshClearFWDosAttack"), ("STARENT-MIB", "starThreshFWDropPacket"), ("STARENT-MIB", "starThreshClearFWDropPacket"), ("STARENT-MIB", "starThreshGPRSSessions"), ("STARENT-MIB", "starThreshClearGPRSSessions"), ("STARENT-MIB", "starThreshPerServiceGPRSSessions"), ("STARENT-MIB", "starThreshClearPerServiceGPRSSessions"), ("STARENT-MIB", "starThreshGPRSPdpSessions"), ("STARENT-MIB", "starThreshClearGPRSPdpSessions"), ("STARENT-MIB", "starThreshPerServiceGPRSPdpSessions"), ("STARENT-MIB", "starThreshClearPerServiceGPRSPdpSessions"), ("STARENT-MIB", "starThreshFWDenyRule"), ("STARENT-MIB", "starThreshClearFWDenyRule"), ("STARENT-MIB", "starThreshFWNoRule"), ("STARENT-MIB", "starThreshClearFWNoRule"), ("STARENT-MIB", "starThreshBGPRoutes"), ("STARENT-MIB", "starThreshClearBGPRoutes"), ("STARENT-MIB", "starThreshNPUUtilization"), ("STARENT-MIB", "starThreshClearNPUUtilization"), ("STARENT-MIB", "starThreshEPDGCurrSess"), ("STARENT-MIB", "starThreshClearEPDGCurrSess"), ("STARENT-MIB", "starSRPConnDown"), ("STARENT-MIB", "starSRPConnUp"), ("STARENT-MIB", "starPortDown"), ("STARENT-MIB", "starPortUp"), ("STARENT-MIB", "starOSPFNeighborDown"), ("STARENT-MIB", "starOSPFNeighborFull"), ("STARENT-MIB", "starBSReachable"), ("STARENT-MIB", "starBSUnreachable"), ("STARENT-MIB", "starSystemStartup"), ("STARENT-MIB", "starASNPCServiceStart"), ("STARENT-MIB", "starASNPCServiceStop"), ("STARENT-MIB", "starDiameterIpv6PeerDown"), ("STARENT-MIB", "starDiameterIpv6PeerUp"), ("STARENT-MIB", "starIPMSServerUnreachable"), ("STARENT-MIB", "starIPMSServerReachable"), ("STARENT-MIB", "starCertShortLifetime"), ("STARENT-MIB", "starCertExpired"), ("STARENT-MIB", "starCertValid"), ("STARENT-MIB", "starFTPPushFail"), ("STARENT-MIB", "starFTPServSwitch"), ("STARENT-MIB", "starSDHSectionDown"), ("STARENT-MIB", "starSDHSectionUp"), ("STARENT-MIB", "starSDHPathHopDown"), ("STARENT-MIB", "starSDHPathHopUp"), ("STARENT-MIB", "starSDHLopDown"), ("STARENT-MIB", "starSDHLopUp"), ("STARENT-MIB", "starSDHE1TribDown"), ("STARENT-MIB", "starSDHE1TribUp"), ("STARENT-MIB", "starSDHFractE1LMIDown"), ("STARENT-MIB", "starSDHFractE1LMIUp"), ("STARENT-MIB", "starGPRSServiceStart"), ("STARENT-MIB", "starGPRSServiceStop"), ("STARENT-MIB", "starGPRSNseDown"), ("STARENT-MIB", "starGPRSNseUp"), ("STARENT-MIB", "starGPRSNsvcDown"), ("STARENT-MIB", "starGPRSNsvcUp"), ("STARENT-MIB", "starGPRSBvcDown"), ("STARENT-MIB", "starGPRSBvcUp"), ("STARENT-MIB", "starPDGServiceStart"), ("STARENT-MIB", "starPDGServiceStop"), ("STARENT-MIB", "starThreshPDGCurrSess"), ("STARENT-MIB", "starThreshClearPDGCurrSess"), ("STARENT-MIB", "starThreshPDGCurrActSess"), ("STARENT-MIB", "starThreshClearPDGCurrActSess"), ("STARENT-MIB", "starPGWServiceStart"), ("STARENT-MIB", "starPGWServiceStop"), ("STARENT-MIB", "starSGWServiceStart"), ("STARENT-MIB", "starSGWServiceStop"), ("STARENT-MIB", "starEGTPServiceStart"), ("STARENT-MIB", "starEGTPServiceStop"), ("STARENT-MIB", "starLMAServiceStart"), ("STARENT-MIB", "starLMAServiceStop"), ("STARENT-MIB", "starMAGServiceStart"), ("STARENT-MIB", "starMAGServiceStop"), ("STARENT-MIB", "starMMEServiceStart"), ("STARENT-MIB", "starMMEServiceStop"), ("STARENT-MIB", "starHSGWServiceStart"), ("STARENT-MIB", "starHSGWServiceStop"), ("STARENT-MIB", "starCPUBusyClear"), ("STARENT-MIB", "starCPUMemoryLowClear"), ("STARENT-MIB", "starManagerRestart"), ("STARENT-MIB", "starConfigurationUpdate"), ("STARENT-MIB", "starFNGServiceStart"), ("STARENT-MIB", "starFNGServiceStop"), ("STARENT-MIB", "starThreshFNGCurrSess"), ("STARENT-MIB", "starThreshClearFNGCurrSess"), ("STARENT-MIB", "starThreshFNGCurrActSess"), ("STARENT-MIB", "starThreshClearFNGCurrActSess"), ("STARENT-MIB", "starEgtpcPathFailure"), ("STARENT-MIB", "starEgtpcPathFailureClear"), ("STARENT-MIB", "starEgtpuPathFailure"), ("STARENT-MIB", "starEgtpuPathFailureClear"), ("STARENT-MIB", "starServiceLossSPIOClear"), ("STARENT-MIB", "starHNBGWServiceStart"), ("STARENT-MIB", "starHNBGWServiceStop"), ("STARENT-MIB", "starSystemReboot"), ("STARENT-MIB", "starServiceLossPTACsClear"), ("STARENT-MIB", "starServiceLossLCClear"), ("STARENT-MIB", "starOSPFv3NeighborDown"), ("STARENT-MIB", "starOSPFv3NeighborFull"), ("STARENT-MIB", "starLicenseAboutToExpire"), ("STARENT-MIB", "starLicenseExpired"), ("STARENT-MIB", "starStorageServerCDRLoss"), ("STARENT-MIB", "starPCCPolicyServiceStart"), ("STARENT-MIB", "starPCCPolicyServiceStop"), ("STARENT-MIB", "starPCCQuotaServiceStart"), ("STARENT-MIB", "starPCCQuotaServiceStop"), ("STARENT-MIB", "starPCCAFServiceStart"), ("STARENT-MIB", "starPCCAFServiceStop"), ("STARENT-MIB", "starThreshPCCPolicySessions"), ("STARENT-MIB", "starThreshClearPCCPolicySessions"), ("STARENT-MIB", "starThreshPerServicePCCPolicySessions"), ("STARENT-MIB", "starThreshClearPerServicePCCPolicySessions"), ("STARENT-MIB", "starThreshPCCQuotaSessions"), ("STARENT-MIB", "starThreshClearPCCQuotaSessions"), ("STARENT-MIB", "starThreshPerServicePCCQuotaSessions"), ("STARENT-MIB", "starThreshClearPerServicePCCQuotaSessions"), ("STARENT-MIB", "starThreshPCCAFSessions"), ("STARENT-MIB", "starThreshClearPCCAFSessions"), ("STARENT-MIB", "starThreshPerServicePCCAFSessions"), ("STARENT-MIB", "starThreshClearPerServicePCCAFSessions"), ("STARENT-MIB", "starSPRServerUnreachable"), ("STARENT-MIB", "starSPRServerReachable"), ("STARENT-MIB", "starGSServiceStart"), ("STARENT-MIB", "starGSServiceStop"), ("STARENT-MIB", "starMAPServiceStart"), ("STARENT-MIB", "starMAPServiceStop"), ("STARENT-MIB", "starIUPSServiceStart"), ("STARENT-MIB", "starIUPSServiceStop"), ("STARENT-MIB", "starSGTPServiceStart"), ("STARENT-MIB", "starSGTPServiceStop"), ("STARENT-MIB", "starEPDGServiceStart"), ("STARENT-MIB", "starEPDGServiceStop"), ("STARENT-MIB", "starSxServiceStart"), ("STARENT-MIB", "starSxServiceStop"), ("STARENT-MIB", "starUplaneServiceStart"), ("STARENT-MIB", "starUplaneServiceStop"), ("STARENT-MIB", "starApsCommandSuccess"), ("STARENT-MIB", "starApsCommandFailure"), ("STARENT-MIB", "starApsSwitchSuccess"), ("STARENT-MIB", "starApsSwitchFailure"), ("STARENT-MIB", "starApsModeMismatch"), ("STARENT-MIB", "starApsChannelMismatch"), ("STARENT-MIB", "starApsByteMismatch"), ("STARENT-MIB", "starApsFeProtLineFailure"), ("STARENT-MIB", "starApsLossOfRedundancy"), ("STARENT-MIB", "starApsLossOfRedundancyClear"), ("STARENT-MIB", "starSGSServiceStart"), ("STARENT-MIB", "starSGSServiceStop"), ("STARENT-MIB", "starSgsnGnMsgDelay"), ("STARENT-MIB", "starSgsnGnMsgDelayClear"), ("STARENT-MIB", "starBNGServiceStart"), ("STARENT-MIB", "starBNGServiceStop"), ("STARENT-MIB", "starHenbgwAccessServiceStart"), ("STARENT-MIB", "starHenbgwAccessServiceStop"), ("STARENT-MIB", "starHenbgwNetworkServiceStart"), ("STARENT-MIB", "starHenbgwNetworkServiceStop"), ("STARENT-MIB", "starThreshDnsLookupFailure"), ("STARENT-MIB", "starThreshClearDnsLookupFailure"), ("STARENT-MIB", "starThreshDiameterRetryRate"), ("STARENT-MIB", "starThreshClearDiameterRetryRate"), ("STARENT-MIB", "starMMES1AssocFail"), ("STARENT-MIB", "starMMES1AssocSetup"), ("STARENT-MIB", "starMMES1PathFail"), ("STARENT-MIB", "starMMES1PathSetup"), ("STARENT-MIB", "starHNBGWSGSNRanapReset"), ("STARENT-MIB", "starHNBGWMSCRanapReset"), ("STARENT-MIB", "starALCAPNodeReset"), ("STARENT-MIB", "starALCAPPathReset"), ("STARENT-MIB", "starALCAPPathBlock"), ("STARENT-MIB", "starALCAPPathUnBlock"), ("STARENT-MIB", "starThreshHNBGWHnbSess"), ("STARENT-MIB", "starThreshClearHNBGWHnbSess"), ("STARENT-MIB", "starThreshHNBGWUeSess"), ("STARENT-MIB", "starThreshClearHNBGWUeSess"), ("STARENT-MIB", "starThreshHNBGWIuSess"), ("STARENT-MIB", "starThreshClearHNBGWIuSess"), ("STARENT-MIB", "starMVGPeerDown"), ("STARENT-MIB", "starMVGPeerUp"), ("STARENT-MIB", "starThreshSystemCapacity"), ("STARENT-MIB", "starThreshClearSystemCapacity"), ("STARENT-MIB", "starThreshClearHNBGWIuSess"), ("STARENT-MIB", "starThreshTpoRtoTimeout"), ("STARENT-MIB", "starThreshClearTpoRtoTimeout"), ("STARENT-MIB", "starThreshTpoDnsFailure"), ("STARENT-MIB", "starThreshClearTpoDnsFailure"), ("STARENT-MIB", "starThreshTpoLowCompressionGain"), ("STARENT-MIB", "starThreshClearTpoLowCompressionGain"), ("STARENT-MIB", "starSGSNRNCNoResetAck"), ("STARENT-MIB", "starThreshSAEGWSessions"), ("STARENT-MIB", "starThreshClearSAEGWSessions"), ("STARENT-MIB", "starPCCNtfyIntfPeerUnreachable"), ("STARENT-MIB", "starPCCNtfyIntfPeerReachable"), ("STARENT-MIB", "starIPSecNodePeerDown"), ("STARENT-MIB", "starIPSecNodePeerUp"), ("STARENT-MIB", "starThreshCardTemperatureNearPowerOffLimit"), ("STARENT-MIB", "starThreshClearCardTemperaturePowerOffLimit"), ("STARENT-MIB", "starEnhancedCongestion"), ("STARENT-MIB", "starEnhancedCongestionClear"), ("STARENT-MIB", "starChassisCrashListFull"), ("STARENT-MIB", "starChassisStartupTimeout"), ("STARENT-MIB", "starSessMgrCSCFServiceRecoveryComplete"), ("STARENT-MIB", "starNPDBConnectionDown"), ("STARENT-MIB", "starNPDBConnectionUp"), ("STARENT-MIB", "starCdrHDDStart"), ("STARENT-MIB", "starCdrStreamingStart"), ("STARENT-MIB", "starCdrStreamingComplete"), ("STARENT-MIB", "starMMENewConnectionsDisallowed"), ("STARENT-MIB", "starMMENewConnectionsAllowed"), ("STARENT-MIB", "starSAMOGServiceStart"), ("STARENT-MIB", "starSAMOGServiceStop"), ("STARENT-MIB", "starCardSwitchoverStart"), ("STARENT-MIB", "starCardSwitchoverComplete"), ("STARENT-MIB", "starCardSwitchoverFailed"), ("STARENT-MIB", "starCardMigrateStart"), ("STARENT-MIB", "starCardMigrateComplete"), ("STARENT-MIB", "starCardMigrateFailed"), ("STARENT-MIB", "starPMIPPathFailure"), ("STARENT-MIB", "starPMIPPathFailureClear"), ("STARENT-MIB", "starHENBGWMMESCTPAssocDestAddrDown"), ("STARENT-MIB", "starHENBGWMMESCTPAssocDestAddrUp"), ("STARENT-MIB", "starMRMEServiceStart"), ("STARENT-MIB", "starMRMEServiceStop"), ("STARENT-MIB", "starThreshPerServiceSAMOGSessions"), ("STARENT-MIB", "starThreshClearPerServiceSAMOGSessions"), ("STARENT-MIB", "starSLSServiceStart"), ("STARENT-MIB", "starSLSServiceStop"), ("STARENT-MIB", "starESMLCAssocDown"), ("STARENT-MIB", "starESMLCAssocUp"), ("STARENT-MIB", "starESMLCAllAssocDown"), ("STARENT-MIB", "starESMLCAllAssocDownClear"), ("STARENT-MIB", "starSBCServiceStart"), ("STARENT-MIB", "starSBCServiceStop"), ("STARENT-MIB", "starCBCAssocDown"), ("STARENT-MIB", "starCBCAssocUp"), ("STARENT-MIB", "starCBCBufSizeExceeded"), ("STARENT-MIB", "starBFDSessUp"), ("STARENT-MIB", "starBFDSessDown")], [("STARENT-MIB", "starThreshFabricEGQDiscards"), ("STARENT-MIB", "starThreshNATPktDrop"), ("STARENT-MIB", "starThreshClearNATPktDrop"), ("STARENT-MIB", "starThreshClearFabricEGQDiscards"), ("STARENT-MIB", "starHENBGWMMEOverloadStart"), ("STARENT-MIB", "starHENBGWMMEOverloadStop"), ("STARENT-MIB", "starBGPPeerSessionIPv6Up"), ("STARENT-MIB", "starBGPPeerSessionIPv6Down"), ("STARENT-MIB", "starMMEEMBMSServiceStart"), ("STARENT-MIB", "starMMEEMBMSServiceStop"), ("STARENT-MIB", "starMCEAssocDown"), ("STARENT-MIB", "starMCEAssocUp"), ("STARENT-MIB", "starIuBcTcpConnDown"), ("STARENT-MIB", "starIuBcTcpConnUp"), ("STARENT-MIB", "starGILANServiceStart"), ("STARENT-MIB", "starGILANServiceStop"), ("STARENT-MIB", "starGTPCRLFOverThreshold"), ("STARENT-MIB", "starGTPCRLFOverLimit"), ("STARENT-MIB", "starGTPCRLFOverThresholdClear"), ("STARENT-MIB", "starGTPCRLFOverLimitClear"), ("STARENT-MIB", "starIFTaskHealthFailure"), ("STARENT-MIB", "starNeedADCLicense"), ("STARENT-MIB", "starNeedADCLicenseClear"), ("STARENT-MIB", "starADCLicenseAboutToExpire"), ("STARENT-MIB", "starADCLicenseExpired"), ("STARENT-MIB", "starSxPathFailure"), ("STARENT-MIB", "starSxPathFailureClear"), ("STARENT-MIB", "starChassisThroughputOver"), ("STARENT-MIB", "starChassisThroughputOverClear"), ("STARENT-MIB", "starChassisThroughputWarn"), ("STARENT-MIB", "starChassisThroughputWarnClear"), ("STARENT-MIB", "starIFTaskBootConfigApplied")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here! Upgrade your pysnmp version!
        starTrapGroup = starTrapGroup.setObjects(*_starTrapGroup_obj)
    else:
        starTrapGroup = starTrapGroup.setObjects(*_starTrapGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    starTrapGroup = starTrapGroup.setStatus('current')
if mibBuilder.loadTexts: starTrapGroup.setDescription('A collection of objects which represent required notifications.')
starTrapObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 8164, 3, 1, 6)).setObjects(("STARENT-MIB", "starCardReset"), ("STARENT-MIB", "starCardFailed"), ("STARENT-MIB", "starCardRCCFailed"), ("STARENT-MIB", "starCardSWFailed"), ("STARENT-MIB", "starCardFailureLEDOn"), ("STARENT-MIB", "starCardFailureLEDOff"), ("STARENT-MIB", "starLogThreshold"), ("STARENT-MIB", "starThreshASNGWR6InvNai"), ("STARENT-MIB", "starThreshClearASNGWR6InvNai"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    starTrapObsoleteGroup = starTrapObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: starTrapObsoleteGroup.setDescription('A collection of objects which represent obsolete notifications.')
starChassisObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8164, 3, 1, 7)).setObjects(("STARENT-MIB", "starRPRegAcceptIntraPDSN"), ("STARENT-MIB", "starSlotVoltage1dot5"), ("STARENT-MIB", "starSlotVoltage1dot5LowThresh"), ("STARENT-MIB", "starSlotVoltage1dot5HighThresh"), ("STARENT-MIB", "starSlotVoltage1dot8"), ("STARENT-MIB", "starSlotVoltage1dot8LowThresh"), ("STARENT-MIB", "starSlotVoltage1dot8HighThresh"), ("STARENT-MIB", "starSlotVoltage2dot5"), ("STARENT-MIB", "starSlotVoltage2dot5LowThresh"), ("STARENT-MIB", "starSlotVoltage2dot5HighThresh"), ("STARENT-MIB", "starSlotVoltage3dot3"), ("STARENT-MIB", "starSlotVoltage3dot3LowThresh"), ("STARENT-MIB", "starSlotVoltage3dot3HighThresh"), ("STARENT-MIB", "starSlotVoltage5dot0"), ("STARENT-MIB", "starSlotVoltage5dot0LowThresh"), ("STARENT-MIB", "starSlotVoltage5dot0HighThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    starChassisObsoleteGroup = starChassisObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: starChassisObsoleteGroup.setDescription('A collection of objects which are obsolete.')
mibBuilder.exportSymbols("STARENT-MIB", starMIPFAStatRegRplSentTotal=starMIPFAStatRegRplSentTotal, starTetheringTACDatabaseUpgradeSuccessStatus=starTetheringTACDatabaseUpgradeSuccessStatus, starMTP3LinkSetUnAvailable=starMTP3LinkSetUnAvailable, starSessSub1UpExceedAction=starSessSub1UpExceedAction, starThreshCPUMemUsage=starThreshCPUMemUsage, starPPPStatReleasedLocal=starPPPStatReleasedLocal, starPCFIntraPDSNDormantHORrqAccepted=starPCFIntraPDSNDormantHORrqAccepted, starFractE1TribTable=starFractE1TribTable, starL3Address=starL3Address, starVIMServiceStop=starVIMServiceStop, starentCLIMgr=starentCLIMgr, starThreshPDIFCurrSess=starThreshPDIFCurrSess, starHENBGWMMESCTPAllAssocDown=starHENBGWMMESCTPAllAssocDown, starEGTPSelfPort=starEGTPSelfPort, starPDIFServiceStop=starPDIFServiceStop, starRPRegUpdDenyMismatchID=starRPRegUpdDenyMismatchID, starMMEEMBMSPeerIpAddr=starMMEEMBMSPeerIpAddr, starMMEEMBMSServiceVpnName=starMMEEMBMSServiceVpnName, starEGTPPeerOldRstCnt=starEGTPPeerOldRstCnt, starentAAAMgr=starentAAAMgr, starThreshClearPortSpecRxUtil=starThreshClearPortSpecRxUtil, starThreshControlPlaneMonitor60MinsLoss=starThreshControlPlaneMonitor60MinsLoss, starPCFDiscLcpOptFail=starPCFDiscLcpOptFail, starBGPPeerSessionDown=starBGPPeerSessionDown, starThreshClearPDSNCallSetupRate=starThreshClearPDSNCallSetupRate, starThreshLMASessions=starThreshLMASessions, starPPPStatDiscAuthFail=starPPPStatDiscAuthFail, starApsSwitchFailure=starApsSwitchFailure, starApsCommandFailure=starApsCommandFailure, starThreshClearHASvcDeregReplyError=starThreshClearHASvcDeregReplyError, starBfdLocalDisc=starBfdLocalDisc, starThreshClearCSCFSvcErrorRegAuth=starThreshClearCSCFSvcErrorRegAuth, starThreshNPUUtilization=starThreshNPUUtilization, starMIPFAStatRegRplRcvTotal=starMIPFAStatRegRplRcvTotal, starPowerFilterUnitUnavail=starPowerFilterUnitUnavail, starStorageServerCPUBusy=starStorageServerCPUBusy, starCscfSessResourceCongestionClear=starCscfSessResourceCongestionClear, starPCFTable=starPCFTable, starSS7RdEntry=starSS7RdEntry, starVIMServiceVpnName=starVIMServiceVpnName, starNPUSlot=starNPUSlot, starHENBGWMMESCTPAssocDestAddrDown=starHENBGWMMESCTPAssocDestAddrDown, starSessSub1IPv4EarlyPDURecv=starSessSub1IPv4EarlyPDURecv, starSessSub1HAIpAddr=starSessSub1HAIpAddr, starRPStatTable=starRPStatTable, starChassisThroughputWarn=starChassisThroughputWarn, starRPStatSvcID=starRPStatSvcID, starCLILogLevelChanged=starCLILogLevelChanged, starGTPCRLFOverThresholdClear=starGTPCRLFOverThresholdClear, starChassisSWRevision=starChassisSWRevision, starThreshClearCPUMemory=starThreshClearCPUMemory, starPMIPPeerSessCnt=starPMIPPeerSessCnt, starFractE1TribTimeslots=starFractE1TribTimeslots, starCardSPCSwitchoverStart=starCardSPCSwitchoverStart, starMIPFAStatRegDenPDSNStaleChallenge=starMIPFAStatRegDenPDSNStaleChallenge, starCLITtyname=starCLITtyname, starPPPStatPapAuthAttempt=starPPPStatPapAuthAttempt, starPCFReachable=starPCFReachable, starSgsnGnMsgDelay=starSgsnGnMsgDelay, starThreshPeriodInt=starThreshPeriodInt, starThreshClearMMEAuthFail=starThreshClearMMEAuthFail, starMIPFAStatRegDenPDSNRevTunMand=starMIPFAStatRegDenPDSNRevTunMand, starSGSNRMMemOverClear=starSGSNRMMemOverClear, starMIPHAStatRegReplyMismatchID=starMIPHAStatRegReplyMismatchID, starStorageServerClusPathFail=starStorageServerClusPathFail, starPDGSysNumService=starPDGSysNumService, starServiceEntry=starServiceEntry, starMIPFAStatRegDenHABadReq=starMIPFAStatRegDenHABadReq, starPCFStatCurrentPMIPConnected=starPCFStatCurrentPMIPConnected, StarOSPFNeighborState=StarOSPFNeighborState, starSessSub1CallID=starSessSub1CallID, starApsChannelMismatch=starApsChannelMismatch, starMIPHAStatRegRecvInitial=starMIPHAStatRegRecvInitial, starThreshCSCFSvcRegRcvdRate=starThreshCSCFSvcRegRcvdRate, starPPPStatDiscMaxRetriesIPCP=starPPPStatDiscMaxRetriesIPCP, starMIPFAStatRegAcceptTotal=starMIPFAStatRegAcceptTotal, starPDIFBindIpAddress=starPDIFBindIpAddress, starHiddenAccessDisabled=starHiddenAccessDisabled, starL2TPEntry=starL2TPEntry, starCSCFPeerServerSvcID=starCSCFPeerServerSvcID, starStorageServerOldGcdrCleared=starStorageServerOldGcdrCleared, starSessSub1CarrierID=starSessSub1CarrierID, starSessTtlSIPRxBytes=starSessTtlSIPRxBytes, starSessSub1GGSNMIP=starSessSub1GGSNMIP, starCLIEventIDEnd=starCLIEventIDEnd, starThreshLSLogsVolume=starThreshLSLogsVolume, starIPMSServerTable=starIPMSServerTable, starThreshAAARetryRate=starThreshAAARetryRate, starPCFStatCurrentMIPConnected=starPCFStatCurrentMIPConnected, starPortTxBytes=starPortTxBytes, starAAAMgrCount=starAAAMgrCount, starThreshHACallSetupRate=starThreshHACallSetupRate, starentMMES1Path=starentMMES1Path, starSessSub1IPSECFlowID=starSessSub1IPSECFlowID, starHENBGWMMESCTPAssocUp=starHENBGWMMESCTPAssocUp, starThreshClearNATPktDrop=starThreshClearNATPktDrop, starPCFInitialRrqDiscarded=starPCFInitialRrqDiscarded, starPDGTable=starPDGTable, starSDHPathSlot=starSDHPathSlot, starCardSPOFAlarm=starCardSPOFAlarm, starThreshClearHatHb60MinsLoss=starThreshClearHatHb60MinsLoss, starCPUSystem=starCPUSystem, starHAMgrCount=starHAMgrCount, starSessSub1TimeIdleLeft=starSessSub1TimeIdleLeft, starSessSub1AvePPSRx=starSessSub1AvePPSRx, starRPSecBadSpi=starRPSecBadSpi, starSRPConnUp=starSRPConnUp, starSRPSwitchoverOccured=starSRPSwitchoverOccured, starThreshCallRejectNoResource=starThreshCallRejectNoResource, starSessSGSNServName=starSessSGSNServName, starPCFInitialRrqAccepted=starPCFInitialRrqAccepted, starL2TPLocalAddress=starL2TPLocalAddress, starThreshClearFNGCurrSess=starThreshClearFNGCurrSess, starNPUMgrNumber=starNPUMgrNumber, starGSSClusterPrevOnlineNode=starGSSClusterPrevOnlineNode, starThreshClearHENBGWHenbSessions=starThreshClearHENBGWHenbSessions, starSRPConnDown=starSRPConnDown, starThreshClearLicense=starThreshClearLicense, starDiameterRlfThresholdOver=starDiameterRlfThresholdOver, starMMENewConnectionsAllowed=starMMENewConnectionsAllowed, starThreshClearCSCFSvcTotalActiveCalls=starThreshClearCSCFSvcTotalActiveCalls, starPDIFSysSessTtlSetup=starPDIFSysSessTtlSetup, starSPRServerIpAddr=starSPRServerIpAddr, starThreshHSGWSessions=starThreshHSGWSessions, starThreshTpoDnsFailure=starThreshTpoDnsFailure, starCertShortLifetime=starCertShortLifetime, starMIPHAStatRegReplyEncapUnav=starMIPHAStatRegReplyEncapUnav, starGSServiceStop=starGSServiceStop, starSLSServiceStart=starSLSServiceStart, starSessSub1IPv4FragFail=starSessSub1IPv4FragFail, starThreshClearPerServiceHASessions=starThreshClearPerServiceHASessions, starSS7MTP3LinkId=starSS7MTP3LinkId, starSmartLicenseEvalModeExpire=starSmartLicenseEvalModeExpire, starFanRemoved=starFanRemoved, starGtpcPathFailure=starGtpcPathFailure, starSessMgrFlowCounter=starSessMgrFlowCounter, starSS7PCCongested=starSS7PCCongested, starAlertsEnabled=starAlertsEnabled, starMIPHAStatRegReplyRevTunUnav=starMIPHAStatRegReplyRevTunUnav, starFNGEntry=starFNGEntry, starMIPFAStatRegDenPDSNMissHomeAgent=starMIPFAStatRegDenPDSNMissHomeAgent, starMIPHAStatRegReplySimulBind=starMIPHAStatRegReplySimulBind, starDiscReasons=starDiscReasons, starThreshClearSystemCapacity=starThreshClearSystemCapacity, starSessGGSNSubsName=starSessGGSNSubsName, starDiameterIpv6PeerUp=starDiameterIpv6PeerUp, starVIMServiceVpnID=starVIMServiceVpnID, starRPDiscMismatchedId=starRPDiscMismatchedId, starMIPFAStatAuthAttempt=starMIPFAStatAuthAttempt, starGTPCRLFOverThreshold=starGTPCRLFOverThreshold, starSessSub1AAAStop=starSessSub1AAAStop, starCLIDatabaseUsername=starCLIDatabaseUsername, starThreshEGTPCS2BSetupFailRate=starThreshEGTPCS2BSetupFailRate, starL2TPServiceName=starL2TPServiceName, starRPRegAcceptActvStartIntraPDSN=starRPRegAcceptActvStartIntraPDSN, starSessSub1ExtInlSrvrIngrVLANTag=starSessSub1ExtInlSrvrIngrVLANTag, starContFiltDBUpgradeErrorClear=starContFiltDBUpgradeErrorClear, starPPPStatCCPNegFailComp=starPPPStatCCPNegFailComp, starEISServerAddr=starEISServerAddr, starIPPoolPriority=starIPPoolPriority, starSessSub1TimeLongDurLeft=starSessSub1TimeLongDurLeft, starRPRegAcceptActvStopDereg=starRPRegAcceptActvStopDereg, starBfdDstAddress=starBfdDstAddress, starPortTypeDescr=starPortTypeDescr, starRPStatEntry=starRPStatEntry, starentSDHPath=starentSDHPath, starSessSub1SustPPSTx=starSessSub1SustPPSTx, starFNGSysNumService=starFNGSysNumService, starSessTtlOctForwardedGBRev1=starSessTtlOctForwardedGBRev1, starThreshHNBGWUeSess=starThreshHNBGWUeSess, starSessSub1AlwaysOn=starSessSub1AlwaysOn, starThreshGPRSPdpSessions=starThreshGPRSPdpSessions, starThreshEPDGCurrSess=starThreshEPDGCurrSess, starStorageServerClusInterCFail=starStorageServerClusInterCFail, starThreshClearPDSNSessions=starThreshClearPDSNSessions, starThreshClearPGWSessions=starThreshClearPGWSessions, starApsRemoteResponseFail=starApsRemoteResponseFail, starPPPStatLCPEchoReqResent=starPPPStatLCPEchoReqResent, starThreshClearFASvcRegReplyError=starThreshClearFASvcRegReplyError, starCDRFileRemoved=starCDRFileRemoved, starThreshPacketsForwarded=starThreshPacketsForwarded, starThreshFWDosAttack=starThreshFWDosAttack, starRPRegDecodeError=starRPRegDecodeError, starMMEServiceStart=starMMEServiceStart, starThreshFabricEGQDiscards=starThreshFabricEGQDiscards, starVLRAssocUp=starVLRAssocUp, starPCFVpnID=starPCFVpnID, starNPDBConnectionDown=starNPDBConnectionDown, starFNGTable=starFNGTable, StarMediumID=StarMediumID, starECSreaddressServerUp=starECSreaddressServerUp, starPPPStatDiscLcpRemote=starPPPStatDiscLcpRemote, starThreshDeviceNum=starThreshDeviceNum, starSRPSwitchoverInitiated=starSRPSwitchoverInitiated, starSGSNRMCPUWarn=starSGSNRMCPUWarn, starMIPFAStatRegDenPDSNRevTunUnav=starMIPFAStatRegDenPDSNRevTunUnav, starDiameterPeerAddrIpv6=starDiameterPeerAddrIpv6, starCardBootFailed=starCardBootFailed, starSmartLicenseFeatureName=starSmartLicenseFeatureName, starMIPFAStatRegDenPDSNInitial=starMIPFAStatRegDenPDSNInitial, starSessTtlAuthFail=starSessTtlAuthFail, starGSSClusterFromNode=starGSSClusterFromNode, starPDGSessCurrentIpv6Active=starPDGSessCurrentIpv6Active, starSubscriberLimit=starSubscriberLimit, starThreshASNGWSessSetupTimeout=starThreshASNGWSessSetupTimeout, starSessSub1NASIPAddr=starSessSub1NASIPAddr, starSxServiceStart=starSxServiceStart, starSLSServiceStop=starSLSServiceStop, starSessSub1IPv4InCSSDownDrop=starSessSub1IPv4InCSSDownDrop, starCertIssuer=starCertIssuer, starMTP3LinkSetAvailable=starMTP3LinkSetAvailable, starIFTaskHealthFailure=starIFTaskHealthFailure, starentMIBCompliances=starentMIBCompliances, starMIPFAStatRegAuthFailTotal=starMIPFAStatRegAuthFailTotal, starThreshClearHASessions=starThreshClearHASessions, starDhcpDead=starDhcpDead, starChassisCrashList=starChassisCrashList, starIPPoolTable=starIPPoolTable, starSS7LocalCong=starSS7LocalCong, starM3UAPCAvailable=starM3UAPCAvailable, starSessSub1UpTrafPolState=starSessSub1UpTrafPolState, starentGGSNService=starentGGSNService, starPCFUnreachable=starPCFUnreachable, starPCFStatTotalSessions=starPCFStatTotalSessions, starFractE1TribBundNum=starFractE1TribBundNum, starFNGStatus=starFNGStatus, starVIMServiceTable=starVIMServiceTable, starMIPFAStatRegDenPDSNHAPortUnreach=starMIPFAStatRegDenPDSNHAPortUnreach, starThreshCPUUtilization10Sec=starThreshCPUUtilization10Sec, starPPPStatPapAuthFail=starPPPStatPapAuthFail, starEGTPInterfaceType=starEGTPInterfaceType, starSRPAAAUnreachable=starSRPAAAUnreachable, starThreshClearPCCAFSessions=starThreshClearPCCAFSessions, starCardTemperature=starCardTemperature, starPDIFBindIpPort=starPDIFBindIpPort, starRPServiceOptionCalls=starRPServiceOptionCalls, starASNGWServiceStop=starASNGWServiceStop, starThreshMAGSessions=starThreshMAGSessions, starSessSub1NASPort=starSessSub1NASPort, starServiceTable=starServiceTable, starRPStatVpnName=starRPStatVpnName, starBGPPeerIpAddress=starBGPPeerIpAddress, starLicenseAboutToExpire=starLicenseAboutToExpire, starCongestionPolicy=starCongestionPolicy, starSGSNSerEntry=starSGSNSerEntry, starMVGEndpointName=starMVGEndpointName, starIKEv2ClearReqRateThreshold=starIKEv2ClearReqRateThreshold, starSessSub1IPv4ProxyDNSDrop=starSessSub1IPv4ProxyDNSDrop, starThreshClearPDSNSvcCallSetupRate=starThreshClearPDSNSvcCallSetupRate, starRPRegDeniedTotal=starRPRegDeniedTotal, starLogCurSize=starLogCurSize, starIPSGServiceStop=starIPSGServiceStop, starPPPStatFailedReneg=starPPPStatFailedReneg, starFTPServEntry=starFTPServEntry)
mibBuilder.exportSymbols("STARENT-MIB", starHiddenAccessEnabled=starHiddenAccessEnabled, starCardMigrateComplete=starCardMigrateComplete, starPCFIntraPDSNActiveHORrqAccepted=starPCFIntraPDSNActiveHORrqAccepted, starPPPStatChapAuthSuccess=starPPPStatChapAuthSuccess, starMIPFAStatRegRplSentHAHostUnreach=starMIPFAStatRegRplSentHAHostUnreach, starThreshVRFFramedRoutes=starThreshVRFFramedRoutes, starSmartLicenseFeatureOOC=starSmartLicenseFeatureOOC, starSlotNumCPU=starSlotNumCPU, starSGSNGtpcPathFailureClear=starSGSNGtpcPathFailureClear, starCardOperState=starCardOperState, starPPPStatServName=starPPPStatServName, starCSCFPeerServerState=starCSCFPeerServerState, starPDIFServName=starPDIFServName, starThreshContFiltBlock=starThreshContFiltBlock, starPMIPSelfAddr=starPMIPSelfAddr, starPowerTable=starPowerTable, starBFDSessUp=starBFDSessUp, starPPPStatDiscIdleTimeout=starPPPStatDiscIdleTimeout, starSessSub1Card=starSessSub1Card, starGPRSServiceStop=starGPRSServiceStop, starThreshMeasuredPct=starThreshMeasuredPct, starPPPStatCcpFail=starPPPStatCcpFail, starCertValid=starCertValid, starSessALCAPAAL2NodeName=starSessALCAPAAL2NodeName, starSIPRouteServerTable=starSIPRouteServerTable, starIPPoolUsed=starIPPoolUsed, starSessSub1IPv4SrcProxyDNSPThru=starSessSub1IPv4SrcProxyDNSPThru, starS102ServiceStop=starS102ServiceStop, starPCFRevaSessionsSetup=starPCFRevaSessionsSetup, starEPDGServiceStart=starEPDGServiceStart, starThreshSubscriberActive=starThreshSubscriberActive, starManagerRestart=starManagerRestart, starPPPStatDiscOptNegFailIPCP=starPPPStatDiscOptNegFailIPCP, starMIPHAStatRegAcceptTotal=starMIPHAStatRegAcceptTotal, starThreshDnsLookupFailure=starThreshDnsLookupFailure, starSmgrId=starSmgrId, starMMES1AssocSetup=starMMES1AssocSetup, starThreshLNSSessions=starThreshLNSSessions, starFTPServVpnName=starFTPServVpnName, starMTP3PCAvailable=starMTP3PCAvailable, starSessSub1ActiveInACL=starSessSub1ActiveInACL, starIKEv2DDOSAttackUDPFailPeer=starIKEv2DDOSAttackUDPFailPeer, starThreshPerServiceGPRSSessions=starThreshPerServiceGPRSSessions, starFAServiceStop=starFAServiceStop, starPMIPPeerNewRstCnt=starPMIPPeerNewRstCnt, starPCFDeniedRevTunnelUnavail=starPCFDeniedRevTunnelUnavail, starIKEv2DOSAttack=starIKEv2DOSAttack, starA11TtlRejected=starA11TtlRejected, starOverloadSystemClear=starOverloadSystemClear, starSubEntry=starSubEntry, starTetheringDatabasePreDBVersion=starTetheringDatabasePreDBVersion, starDiameterPeerAddr=starDiameterPeerAddr, starCSCFPeerServerOutofService=starCSCFPeerServerOutofService, starMIPFAStatRegDenPDSNHAUnreach=starMIPFAStatRegDenPDSNHAUnreach, starThreshAAAAcctFailRate=starThreshAAAAcctFailRate, starThreshClearHASvcRegReplyError=starThreshClearHASvcRegReplyError, starFNGSvcID=starFNGSvcID, starMMES1PathEntry=starMMES1PathEntry, starRPRegDiscardTotal=starRPRegDiscardTotal, starFNGSessCurrent=starFNGSessCurrent, starSessSub1IPPoolName=starSessSub1IPPoolName, starHenbgwAccessServiceStop=starHenbgwAccessServiceStop, starThreshFWNoRule=starThreshFWNoRule, starPCFDeniedUnrecogVendorId=starPCFDeniedUnrecogVendorId, starMMES1PathSetup=starMMES1PathSetup, starThreshPHSPCSessSetupTimeout=starThreshPHSPCSessSetupTimeout, starSessTtlArrived=starSessTtlArrived, starEGTPServiceStart=starEGTPServiceStart, starIUPSServiceStop=starIUPSServiceStop, starSessSub1InPackets=starSessSub1InPackets, starRPRegDenyMismatchID=starRPRegDenyMismatchID, starThreshClearCSCFSvcErrorTcp=starThreshClearCSCFSvcErrorTcp, starInterfaceName=starInterfaceName, starIKEv2DDOSAttackClearUDPFail=starIKEv2DDOSAttackClearUDPFail, starSBCServiceVpnName=starSBCServiceVpnName, starSessGGSNPeerAddr=starSessGGSNPeerAddr, starGSSCDRLossConfigured=starGSSCDRLossConfigured, starRPRegUpdUplyrInit=starRPRegUpdUplyrInit, starECSTotalDNSLearntIPv6Threshold=starECSTotalDNSLearntIPv6Threshold, starServiceLossSPIO=starServiceLossSPIO, starMMES1AssocTable=starMMES1AssocTable, starRPRegUpdOther=starRPRegUpdOther, starSerdesNum=starSerdesNum, starThreshClearStorageUtilization=starThreshClearStorageUtilization, starServiceLossSPIOClear=starServiceLossSPIOClear, starThreshIPPoolFree=starThreshIPPoolFree, starFractE1TribTug2=starFractE1TribTug2, starMMES1PathSelfAddr=starMMES1PathSelfAddr, starSCCPSspClear=starSCCPSspClear, starPDSNServiceStop=starPDSNServiceStop, starCardStandby=starCardStandby, starSRPSwitchReason=starSRPSwitchReason, starSessSub1CPU=starSessSub1CPU, starSGTPPeerPort=starSGTPPeerPort, starSessSub1UpCommDataRate=starSessSub1UpCommDataRate, starSessSub1Context=starSessSub1Context, starStorageServerUnackedGcdrVolPurge=starStorageServerUnackedGcdrVolPurge, starRPRegDenyBadRequest=starRPRegDenyBadRequest, starPHSGWServiceStop=starPHSGWServiceStop, starThreshHENBGWUeSessions=starThreshHENBGWUeSessions, starMIPFAStatRegRplSentHAAuthFail=starMIPFAStatRegRplSentHAAuthFail, starGlobalCLISessionsLimit=starGlobalCLISessionsLimit, starThreshClearCallSetup=starThreshClearCallSetup, starMIPFAStatRegRplSentRegTimeout=starMIPFAStatRegRplSentRegTimeout, starHNBGWServTable=starHNBGWServTable, starentStorage=starentStorage, starThreshAllFramedRoutesClear=starThreshAllFramedRoutesClear, starSlotVoltage1dot8LowThresh=starSlotVoltage1dot8LowThresh, starIMSUEServiceStop=starIMSUEServiceStop, starThreshClearPerServicePCCPolicySessions=starThreshClearPerServicePCCPolicySessions, starSDHSectionUp=starSDHSectionUp, starPDGServiceStart=starPDGServiceStart, starSubContext=starSubContext, starPMIPPeerOldRstCnt=starPMIPPeerOldRstCnt, starentMMES1Assoc=starentMMES1Assoc, starThreshClearCallRejectNoResource=starThreshClearCallRejectNoResource, starStorageServerClusterStateChange=starStorageServerClusterStateChange, starCPUBusyClear=starCPUBusyClear, starStorageFailed=starStorageFailed, starMIPFAStatRegRplSentStaleChallenge=starMIPFAStatRegRplSentStaleChallenge, starSessInProgDormantCalls=starSessInProgDormantCalls, starTetheringDatabaseUpgradeDBVersion=starTetheringDatabaseUpgradeDBVersion, starPPPStatAuthFail=starPPPStatAuthFail, starDiameterCapabilitiesExchangeFailure=starDiameterCapabilitiesExchangeFailure, starThreshClearPerServiceSAMOGSessions=starThreshClearPerServiceSAMOGSessions, starRPDoTxPackets=starRPDoTxPackets, starSessSub1ActiveOutACL=starSessSub1ActiveOutACL, starPDIFSessCurrentDormant=starPDIFSessCurrentDormant, starMIPFAStatRegRplSentAdminProhib=starMIPFAStatRegRplSentAdminProhib, starSlotVoltage1dot5LowThresh=starSlotVoltage1dot5LowThresh, starentSIPRouteServer=starentSIPRouteServer, starMIPFAStatRegDiscardRenewal=starMIPFAStatRegDiscardRenewal, starIFTaskBootConfigApplied=starIFTaskBootConfigApplied, starCardFailureLEDOn=starCardFailureLEDOn, starSGSNSerTable=starSGSNSerTable, starPDIFSysSessCurrActive=starPDIFSysSessCurrActive, starThreshClearLSLogsVolume=starThreshClearLSLogsVolume, starThreshClearPerServiceLNSSessions=starThreshClearPerServiceLNSSessions, starMMEEMBMSServiceStart=starMMEEMBMSServiceStart, starSessSub1UpExceed=starSessSub1UpExceed, starA11TtlDemultiplexed=starA11TtlDemultiplexed, starRPRegActvStopRenew=starRPRegActvStopRenew, starRP1xTxPackets=starRP1xTxPackets, starALCAPServTable=starALCAPServTable, starContFiltCFErrorCode=starContFiltCFErrorCode, starCPUTable=starCPUTable, starThreshClearSubscriberActive=starThreshClearSubscriberActive, starFTPServIpAddr=starFTPServIpAddr, starSessTtlRPRegAccept=starSessTtlRPRegAccept, starSessMgrFlowPDNNo=starSessMgrFlowPDNNo, starClosedRPServiceStart=starClosedRPServiceStart, starA11TtlDereg=starA11TtlDereg, starGTPCRLFOverLimitClear=starGTPCRLFOverLimitClear, starPCFAuxA10ConnectionsSetup=starPCFAuxA10ConnectionsSetup, starAAATtlAcctSess=starAAATtlAcctSess, starGPRSBvcUp=starGPRSBvcUp, starentPort=starentPort, starCHATCONFServiceStart=starCHATCONFServiceStart, starIuBcTcpConnUp=starIuBcTcpConnUp, starThreshClearASNGWR6InvNai=starThreshClearASNGWR6InvNai, starPCCAFServiceStop=starPCCAFServiceStop, starBfdRemDisc=starBfdRemDisc, starSessSub1FAVPNName=starSessSub1FAVPNName, starLMAServiceStop=starLMAServiceStop, starThreshClearSAEGWSessions=starThreshClearSAEGWSessions, starThreshHatHb60MinsLoss=starThreshHatHb60MinsLoss, starPPPStatMppcComp=starPPPStatMppcComp, starMIPFAStatRegDiscardTotal=starMIPFAStatRegDiscardTotal, starESMLCId=starESMLCId, starCardPACMigrateFailed=starCardPACMigrateFailed, starThreshTpoRtoTimeout=starThreshTpoRtoTimeout, starPPPStatLcpFailUnknown=starPPPStatLcpFailUnknown, starentFNGSys=starentFNGSys, starPCCPolicyServiceStart=starPCCPolicyServiceStart, starVIMServiceInstanceId=starVIMServiceInstanceId, starFNGVpnID=starFNGVpnID, starPortTxErrors=starPortTxErrors, starSGSNRMCPUWarnClear=starSGSNRMCPUWarnClear, starEGTPVpnName=starEGTPVpnName, starThreshClearCSCFSvcErrorPresence=starThreshClearCSCFSvcErrorPresence, starThreshPortSpecTxUtil=starThreshPortSpecTxUtil, starSlotMappingEntry=starSlotMappingEntry, starVIMServiceFMDContinuousLoadCount=starVIMServiceFMDContinuousLoadCount, starIKEv2ClearDecryptionFailThreshold=starIKEv2ClearDecryptionFailThreshold, StarRelayState=StarRelayState, starBLUpgradeErrorCode=starBLUpgradeErrorCode, starMIPFAStatRegRplSentRevTunUnav=starMIPFAStatRegRplSentRevTunUnav, starPPPStatDiscCallTypeDetectFail=starPPPStatDiscCallTypeDetectFail, starSccpNwTable=starSccpNwTable, starThreshClearFWDenyRule=starThreshClearFWDenyRule, starMMES1AssocFail=starMMES1AssocFail, starSessTtlRxBytes=starSessTtlRxBytes, starNwReachTable=starNwReachTable, starentRPServiceOption=starentRPServiceOption, starPDGSessRemain=starPDGSessRemain, starPortTxFrames=starPortTxFrames, starPCFDiscDetectionFail=starPCFDiscDetectionFail, starThreshMMEAuthFail=starThreshMMEAuthFail, starLicenseDaysRemaining=starLicenseDaysRemaining, starThreshASNGWSessTimeout=starThreshASNGWSessTimeout, starLicensedSessions=starLicensedSessions, starSessTtlRejected=starSessTtlRejected, starCLIConfigMode=starCLIConfigMode, starAllCallLines=starAllCallLines, starThreshRPSetupFailRate=starThreshRPSetupFailRate, starSessionRejectNoResource=starSessionRejectNoResource, starStorageServerDiskSpaceOK=starStorageServerDiskSpaceOK, starFMDMaxCallRateReached=starFMDMaxCallRateReached, starEISServerVPNID=starEISServerVPNID, starCSCFPeerServerVpnName=starCSCFPeerServerVpnName, starPPPStatDiscRpRemote=starPPPStatDiscRpRemote, starCallsRecovered=starCallsRecovered, starMIPHAStatRegAcceptDereg=starMIPHAStatRegAcceptDereg, starFanSpeed=starFanSpeed, starMIPHAStatRegDeniedRenew=starMIPHAStatRegDeniedRenew, starRPRegAcceptRenew=starRPRegAcceptRenew, starIKEv2DecryptionFailThreshold=starIKEv2DecryptionFailThreshold, starSDHPort=starSDHPort, starMIPFAStatRegRplRcvInitialRly=starMIPFAStatRegRplRcvInitialRly, starPPPStatSessSkipAuth=starPPPStatSessSkipAuth, starentSGSNService=starentSGSNService, starE1TribOperStateLOP=starE1TribOperStateLOP, starCBCBufSizeExceeded=starCBCBufSizeExceeded, starMIPHAStatTable=starMIPHAStatTable, starCardRemoved=starCardRemoved, starMIPFAStatRegDenHADereg=starMIPFAStatRegDenHADereg, starContFiltDBUpgradeError=starContFiltDBUpgradeError, starCurrentSessions=starCurrentSessions, starTetheringOSDatabaseUpgradeSuccessStatus=starTetheringOSDatabaseUpgradeSuccessStatus, starStatFilesizeClear=starStatFilesizeClear, starECSTotalDNSLearntIPThresholdmeasured=starECSTotalDNSLearntIPThresholdmeasured, starSessSub1TimeLeft=starSessSub1TimeLeft, starRPRegDenyAuth=starRPRegDenyAuth, starPPPStatNegComp=starPPPStatNegComp, starL2TPTable=starL2TPTable, starTaskTable=starTaskTable, starSessSub1IPSECTunDownDropPkt=starSessSub1IPSECTunDownDropPkt, starMIPFAStatRegDenPDSNTooLong=starMIPFAStatRegDenPDSNTooLong, starL2TPLocalTunnelID=starL2TPLocalTunnelID, starGroupOfRuledef=starGroupOfRuledef, starThreshClearEPDGIKEV2SetupFailureRate=starThreshClearEPDGIKEV2SetupFailureRate, starSmartLicenseEvalModeClear=starSmartLicenseEvalModeClear, starPCFDiscMaxIpcpRetr=starPCFDiscMaxIpcpRetr, starChassisThroughputOverClear=starChassisThroughputOverClear, starThreshPerServiceHASessions=starThreshPerServiceHASessions, starRPRegUpdDenyAuth=starRPRegUpdDenyAuth, starLogName=starLogName, starMIPHAStatRegDeniedTotal=starMIPHAStatRegDeniedTotal, starSessSGSNMnc=starSessSGSNMnc, starStorageSlot=starStorageSlot, starSessTtlRxBytesRev1=starSessTtlRxBytesRev1, starentL2TP=starentL2TP, starSDHOperState=starSDHOperState, starIuBcTcpConnCauseStr=starIuBcTcpConnCauseStr)
mibBuilder.exportSymbols("STARENT-MIB", starSessTtlOctForwardedRev1=starSessTtlOctForwardedRev1, starCardSwitchoverStart=starCardSwitchoverStart, starThreshClearCPUOrbsCritical=starThreshClearCPUOrbsCritical, starThreshAllTotalRoutes=starThreshAllTotalRoutes, starSxCPUPGroupName=starSxCPUPGroupName, starFNGSysSessTtlSetup=starFNGSysSessTtlSetup, starSessALCAPServName=starSessALCAPServName, starSystemReboot=starSystemReboot, starMMES1AssocServName=starMMES1AssocServName, starRMCPUOverClear=starRMCPUOverClear, starPPPStatDiscMisc=starPPPStatDiscMisc, starPDIFSysSessCurrent=starPDIFSysSessCurrent, starSessSub1SustBPSRx=starSessSub1SustBPSRx, starSlotAction=starSlotAction, starSessSub1AccessLinkIPFrag=starSessSub1AccessLinkIPFrag, starRPRegAcceptActvStopIntraPDSN=starRPRegAcceptActvStopIntraPDSN, starThreshClearPerServiceGPRSSessions=starThreshClearPerServiceGPRSSessions, starPCFStatVpnID=starPCFStatVpnID, starGSSIPMPGroupName=starGSSIPMPGroupName, starentSGTPService=starentSGTPService, starThreshCPUUtilization=starThreshCPUUtilization, starSIPRouteServerEntry=starSIPRouteServerEntry, starCBSServiceVpnName=starCBSServiceVpnName, starRPRegUpdAccept=starRPRegUpdAccept, starPDIFServiceStart=starPDIFServiceStart, starOSPFv3NeighborDown=starOSPFv3NeighborDown, starThreshPerServiceGPRSPdpSessions=starThreshPerServiceGPRSPdpSessions, starIPSECPriTunUp=starIPSECPriTunUp, starentTrapData=starentTrapData, starFileTable=starFileTable, starCSCFServiceStart=starCSCFServiceStart, starMVGPeerDown=starMVGPeerDown, starTetheringOSDatabaseUpgradeFailureStatus=starTetheringOSDatabaseUpgradeFailureStatus, starThreshCDRFileSpace=starThreshCDRFileSpace, starPGWServiceStart=starPGWServiceStart, starHATtlRejected=starHATtlRejected, starThreshPortTxUtil=starThreshPortTxUtil, starIPSECDynPolicyType=starIPSECDynPolicyType, starFATtlRejected=starFATtlRejected, starCdrStreamingComplete=starCdrStreamingComplete, starFNGSessRemain=starFNGSessRemain, starSlotMappingRCCNum=starSlotMappingRCCNum, starSessSub1UpViolate=starSessSub1UpViolate, starThreshClearFabricEGQDiscards=starThreshClearFabricEGQDiscards, starPPPStatBadAddr=starPPPStatBadAddr, starThreshPerServiceGGSNSessions=starThreshPerServiceGGSNSessions, starSBCServiceStop=starSBCServiceStop, starIPSecNodeIpv6PeerUp=starIPSecNodeIpv6PeerUp, starentPDGSys=starentPDGSys, starPPPStatDiscMaxRetriesLCP=starPPPStatDiscMaxRetriesLCP, starSessTtlMIPTxBytes=starSessTtlMIPTxBytes, starRPRegUpdTrans=starRPRegUpdTrans, starBfdSrcAddressType=starBfdSrcAddressType, starPDGSysStatus=starPDGSysStatus, starSlotMappingType=starSlotMappingType, starStorageEntry=starStorageEntry, starUDPPortNum=starUDPPortNum, starentMIB=starentMIB, starSIPServiceStart=starSIPServiceStart, starIPSECRemoteGateway=starIPSECRemoteGateway, starPDIFEntry=starPDIFEntry, starTaskFailed=starTaskFailed, starSlotMappingTable=starSlotMappingTable, starGGSNServiceStop=starGGSNServiceStop, starMIPFAStatRegDenPDSNInvCOA=starMIPFAStatRegDenPDSNInvCOA, starALCAPSerSvcID=starALCAPSerSvcID, starOverloadSystem=starOverloadSystem, starLIRcvryError=starLIRcvryError, starSccpSsn=starSccpSsn, starCertExpired=starCertExpired, starPDGVpnName=starPDGVpnName, starPPPStatDiscMaxSetupTimer=starPPPStatDiscMaxSetupTimer, starChassisGroup=starChassisGroup, starSlotVoltage2dot5LowThresh=starSlotVoltage2dot5LowThresh, starChassisThroughputWarnClear=starChassisThroughputWarnClear, starMIPFAStatRegRplRcvDeregRly=starMIPFAStatRegRplRcvDeregRly, starSS7SCTPSelfPort=starSS7SCTPSelfPort, starUplaneServiceStart=starUplaneServiceStart, starStatFilesizeMeasured=starStatFilesizeMeasured, starThreshPHSPCSleepModeTimeout=starThreshPHSPCSleepModeTimeout, starLAGGroupUp=starLAGGroupUp, starPDIFSvcID=starPDIFSvcID, starCommonDatabasePreDBVersion=starCommonDatabasePreDBVersion, starThreshClearAAAAcctArchiveQueue2=starThreshClearAAAAcctArchiveQueue2, starCSCFPeerServerEntry=starCSCFPeerServerEntry, starCSCFServiceStop=starCSCFServiceStop, starHACurActive=starHACurActive, starBFDSessDown=starBFDSessDown, starThreshHASessions=starThreshHASessions, starPPPStatRenegOther=starPPPStatRenegOther, starCongestionType=starCongestionType, starIKEv2DDOSAttackClearINITFlood=starIKEv2DDOSAttackClearINITFlood, starSIPRouteServerAsName=starSIPRouteServerAsName, starIPPoolGroupTable=starIPPoolGroupTable, starLogThreshold=starLogThreshold, starPPPStatLcpFailOption=starPPPStatLcpFailOption, starThreshPerServiceSGSNSessions=starThreshPerServiceSGSNSessions, starGGSNSerEntry=starGGSNSerEntry, starSlotCLEICode=starSlotCLEICode, starServiceLossLC=starServiceLossLC, starMIPFAStatRegDiscardInitial=starMIPFAStatRegDiscardInitial, starSessSub1LNSIPAddr=starSessSub1LNSIPAddr, starElapsedMs=starElapsedMs, starPCFRenewRrqRcvd=starPCFRenewRrqRcvd, starSessSub1InPlcyGrp=starSessSub1InPlcyGrp, starVLRAssocDown=starVLRAssocDown, starRPServiceOptionEntry=starRPServiceOptionEntry, starentChassis=starentChassis, starSGSNRMMemOver=starSGSNRMMemOver, starRPRegAcceptTotal=starRPRegAcceptTotal, starMIPFAStatTable=starMIPFAStatTable, starSessSub1ExtInlSrvrProc=starSessSub1ExtInlSrvrProc, starCritTaskFailed=starCritTaskFailed, starFileName=starFileName, DisabledEventIDs=DisabledEventIDs, starMIPHAStatEntry=starMIPHAStatEntry, starSessSub1TimeIdle=starSessSub1TimeIdle, starDeviceNum=starDeviceNum, starRPRegUpdSendError=starRPRegUpdSendError, starBfdDstAddressType=starBfdDstAddressType, starDiameterPeerName=starDiameterPeerName, starStorageServerDiskSpaceLow=starStorageServerDiskSpaceLow, starBNGServiceStop=starBNGServiceStop, starStatFilesizeExceeded=starStatFilesizeExceeded, starCGWServiceStop=starCGWServiceStop, starSRPActive=starSRPActive, starMIPFAStatRegDenPDSNMnAuth=starMIPFAStatRegDenPDSNMnAuth, starentSubscriber=starentSubscriber, starE1TribTable=starE1TribTable, starentNPUMgr=starentNPUMgr, starSessSub1SourceVPN=starSessSub1SourceVPN, starRPRegAcceptInitial=starRPRegAcceptInitial, starMIPFAStatRegRplSentAcceptDereg=starMIPFAStatRegRplSentAcceptDereg, starSDHFractE1LMIDown=starSDHFractE1LMIDown, starPTACConfig=starPTACConfig, starPCFIpAddr=starPCFIpAddr, starPPPStatLCPEchoReqTimeout=starPPPStatLCPEchoReqTimeout, starSessALCAPPathId=starSessALCAPPathId, starIPPoolGroupName=starIPPoolGroupName, starMIPFAStatRegRplRcvInitial=starMIPFAStatRegRplRcvInitial, starCardPacStandbyPriority=starCardPacStandbyPriority, starThreshClearLNSSessions=starThreshClearLNSSessions, starentFNGService=starentFNGService, starLMAServiceStart=starLMAServiceStart, starThreshAAAAuthFail=starThreshAAAAuthFail, starLicenseDaysAfterExpiry=starLicenseDaysAfterExpiry, starCardTempOK=starCardTempOK, starVLRPortNum=starVLRPortNum, starSlotVoltageState=starSlotVoltageState, starStorageName=starStorageName, starMIPFAStatRegAuthFailInitial=starMIPFAStatRegAuthFailInitial, starSDHPathHopDown=starSDHPathHopDown, starThreshClearASNGWNWEntryDenial=starThreshClearASNGWNWEntryDenial, starThreshPHSGWSessTimeout=starThreshPHSGWSessTimeout, starPPPStatChapAuthFail=starPPPStatChapAuthFail, starOSPFNeighborRouterID=starOSPFNeighborRouterID, starCPUUser=starCPUUser, starSessTtlMIPRxBytesRev1=starSessTtlMIPRxBytesRev1, starMIPHAStatRegReplyUnknownHA=starMIPHAStatRegReplyUnknownHA, starCardType=starCardType, starVIMServiceEntry=starVIMServiceEntry, starPPPStatDiscAbsTimeout=starPPPStatDiscAbsTimeout, starThreshClearHACallSetupRate=starThreshClearHACallSetupRate, starPPPStatMSChapAuthAbort=starPPPStatMSChapAuthAbort, starBLErrorCode=starBLErrorCode, starFNGSessCurrentIpv4Active=starFNGSessCurrentIpv4Active, starMTP3LinkOutOfService=starMTP3LinkOutOfService, starMIPHAStatRegDeniedHO=starMIPHAStatRegDeniedHO, starPPPStatVjComp=starPPPStatVjComp, starIuBcPeerPortNum=starIuBcPeerPortNum, starServiceHAIpAddr=starServiceHAIpAddr, starCardHaltIssued=starCardHaltIssued, starPCCQuotaServiceStop=starPCCQuotaServiceStop, starSlotVoltage3dot3HighThresh=starSlotVoltage3dot3HighThresh, starPMIPServName=starPMIPServName, starSessSub1L3TunRemoteIPAddr=starSessSub1L3TunRemoteIPAddr, starIPSECDynPolicyPayloadType=starIPSECDynPolicyPayloadType, starThreshClearDCCABadAnswers=starThreshClearDCCABadAnswers, starCPULoad15Min=starCPULoad15Min, starL2TPTunnelDownPeerUnreachable=starL2TPTunnelDownPeerUnreachable, starPDGSessCurrentDormant=starPDGSessCurrentDormant, starPHSPCServiceStart=starPHSPCServiceStart, starRPRegUpdReceived=starRPRegUpdReceived, starThreshClearDataPlaneMonitor60MinsLoss=starThreshClearDataPlaneMonitor60MinsLoss, starIPSECDynTunDown=starIPSECDynTunDown, starPCFRegUpdateSessmgrDied=starPCFRegUpdateSessmgrDied, starThreshEPDGIKEV2AuthFailures=starThreshEPDGIKEV2AuthFailures, starStorageServerCPUNormal=starStorageServerCPUNormal, starTaskInstance=starTaskInstance, starLocalUserAdded=starLocalUserAdded, starentFile=starentFile, starStorageNotFound=starStorageNotFound, starGPRSNsvcDown=starGPRSNsvcDown, starStorageDeviceType=starStorageDeviceType, starThreshControlPlaneMonitor5MinsLoss=starThreshControlPlaneMonitor5MinsLoss, starIPSecNodePeerDown=starIPSecNodePeerDown, starPCFAddress=starPCFAddress, starCLIRemoteIpAddrType=starCLIRemoteIpAddrType, starThreshHatHb5MinsLoss=starThreshHatHb5MinsLoss, starContFiltCFUpgradeErrorCode=starContFiltCFUpgradeErrorCode, starentSS7Rd=starentSS7Rd, starBGPPeerSessionIPv6Up=starBGPPeerSessionIPv6Up, starMMES1PathTable=starMMES1PathTable, starFNGSessCurrentIpv4Dormant=starFNGSessCurrentIpv4Dormant, starThreshMeasuredGB=starThreshMeasuredGB, starMIPFAStatRegDenHAInitial=starMIPFAStatRegDenHAInitial, starSAEGWServiceStop=starSAEGWServiceStop, starMacaddress=starMacaddress, starThreshPHSGWNWEntryDenial=starThreshPHSGWNWEntryDenial, starSIPRouteDestPartyNum=starSIPRouteDestPartyNum, starLicenseFeaturesModified=starLicenseFeaturesModified, starDiameterRlfContext=starDiameterRlfContext, starCardUsable=starCardUsable, starHATtlDemultiplexed=starHATtlDemultiplexed, starSessTtlTxBytesRev1=starSessTtlTxBytesRev1, starThreshClearCSCFSvcTotalCallFailure=starThreshClearCSCFSvcTotalCallFailure, starThreshClearEPDGIKEV2SetupAttempts=starThreshClearEPDGIKEV2SetupAttempts, starCPUMemTotal=starCPUMemTotal, starNTPPeerReachable=starNTPPeerReachable, starPCFDeregDormantRrqAccepted=starPCFDeregDormantRrqAccepted, starentFAMgr=starentFAMgr, starMIPFAStatRegDenPDSNDereg=starMIPFAStatRegDenPDSNDereg, starSCTPPathDown=starSCTPPathDown, starCardPACMigrateStart=starCardPACMigrateStart, starCongestionClear=starCongestionClear, starPPPStatEntry=starPPPStatEntry, starMAGServiceStop=starMAGServiceStop, starSS7Pc=starSS7Pc, starSlotVoltage5dot0=starSlotVoltage5dot0, starPDGSysSessCurrent=starPDGSysSessCurrent, starentMIBObjects=starentMIBObjects, starThreshClearAAAAcctFailRate=starThreshClearAAAAcctFailRate, starSessMgrFlowCountClear=starSessMgrFlowCountClear, starCSCFPeerServerUnreachable=starCSCFPeerServerUnreachable, starThreshClearPPPSetupFailRate=starThreshClearPPPSetupFailRate, starPCFDeregRrqRcvd=starPCFDeregRrqRcvd, starMMES1AssocENBID=starMMES1AssocENBID, starPCCNtfyIntfPeerName=starPCCNtfyIntfPeerName, starLAGGroupDownDueToMinlink=starLAGGroupDownDueToMinlink, starPPPStatLcpEntered=starPPPStatLcpEntered, starPPPStatPapAuthSuccess=starPPPStatPapAuthSuccess, starMMEServiceStop=starMMEServiceStop, starHNBGWServEntry=starHNBGWServEntry, starSessSGSNVpnName=starSessSGSNVpnName, starThreshAAAAcctArchiveQueue2=starThreshAAAAcctArchiveQueue2, starRPRegHashError=starRPRegHashError, starOSPFToState=starOSPFToState, starCSCFPeerServerTable=starCSCFPeerServerTable, starPCFInitialRrqDenied=starPCFInitialRrqDenied, starSessSub1NexthopIPAddr=starSessSub1NexthopIPAddr, starThreshClearPDIFCurrActSess=starThreshClearPDIFCurrActSess, starSessSub1NetworkType=starSessSub1NetworkType, starFileApplication=starFileApplication, starSGSNSerVpnID=starSGSNSerVpnID)
mibBuilder.exportSymbols("STARENT-MIB", starSDHSectionDown=starSDHSectionDown, starGTPCRLFContextName=starGTPCRLFContextName, starSIPRouteServerVpnID=starSIPRouteServerVpnID, starHAServiceStop=starHAServiceStop, starSessSub1OutPackets=starSessSub1OutPackets, starPCFDeniedIdentMismatch=starPCFDeniedIdentMismatch, starSessCapReached=starSessCapReached, starPMIPSelfAddrType=starPMIPSelfAddrType, starChassisObsoleteGroup=starChassisObsoleteGroup, starMIPFAStatRegDenRenewal=starMIPFAStatRegDenRenewal, starCLIUsername=starCLIUsername, starTetheringUADatabaseUpgradeSuccessStatus=starTetheringUADatabaseUpgradeSuccessStatus, starStorageServerCDRLoss=starStorageServerCDRLoss, starMTP3PCUnavailable=starMTP3PCUnavailable, starSS7SCTPPeerAddr=starSS7SCTPPeerAddr, starPCFStatTable=starPCFStatTable, starStorageServerOldGcdrPending=starStorageServerOldGcdrPending, starPPPStatRenegParamUpdate=starPPPStatRenegParamUpdate, starMIPHAStatSvcID=starMIPHAStatSvcID, starThreshIPSECIKERequests=starThreshIPSECIKERequests, starDynPkgUpgradeError=starDynPkgUpgradeError, starMIPHAStatDereg=starMIPHAStatDereg, starPCFRrqDiscarded=starPCFRrqDiscarded, starThreshClearPHSPCSmEntryDenial=starThreshClearPHSPCSmEntryDenial, starGTPCRLFOverLimit=starGTPCRLFOverLimit, starESMLCAllAssocDownClear=starESMLCAllAssocDownClear, starMMES1PathServName=starMMES1PathServName, starStorageFound=starStorageFound, starSessTtlMIPRxBytes=starSessTtlMIPRxBytes, starSAMOGServiceStop=starSAMOGServiceStop, starMIPFAStatRegReqSentRenewResend=starMIPFAStatRegReqSentRenewResend, starPowerNumber=starPowerNumber, starHENBGWServiceLogicalENBId=starHENBGWServiceLogicalENBId, starStorageServerMemNormal=starStorageServerMemNormal, starIPPoolVpnID=starIPPoolVpnID, starFNGBindIpAddress=starFNGBindIpAddress, starMIPHAStatExpiry=starMIPHAStatExpiry, starThreshASNGWHandoffDenial=starThreshASNGWHandoffDenial, starHAServiceStart=starHAServiceStart, starSessSub1DownPeakDataRate=starSessSub1DownPeakDataRate, starSessGGSNImsi=starSessGGSNImsi, starMIPFAStatRegDenHAFAAuth=starMIPFAStatRegDenHAFAAuth, starBSUnreachable=starBSUnreachable, starMMEInitialDisallowReason=starMMEInitialDisallowReason, starThreshClearTpoDnsFailure=starThreshClearTpoDnsFailure, starSessSub1AAARadiusAcctServerIPAddr=starSessSub1AAARadiusAcctServerIPAddr, starPCFDiscRpLocal=starPCFDiscRpLocal, starFanNum=starFanNum, starCardSinglePOF=starCardSinglePOF, starFanInserted=starFanInserted, starApsByteMismatch=starApsByteMismatch, starSessTtlConnected=starSessTtlConnected, starCLIID=starCLIID, starSIPRouteAsName=starSIPRouteAsName, starPMIPPeerAddrType=starPMIPPeerAddrType, starOSPFv3NeighborFull=starOSPFv3NeighborFull, starSGSNRNCReset=starSGSNRNCReset, starSGSNRMMemWarnClear=starSGSNRMMemWarnClear, starThreshCSCFSvcTotalActiveCalls=starThreshCSCFSvcTotalActiveCalls, starMIPFAStatRegRplSentUnknChallenge=starMIPFAStatRegRplSentUnknChallenge, starHSGWServiceStop=starHSGWServiceStop, starThreshSGWSessions=starThreshSGWSessions, starAAAArchiveStarted=starAAAArchiveStarted, starThreshSNXDisconnectReason=starThreshSNXDisconnectReason, starDynCFErrorCode=starDynCFErrorCode, starPCFSessionsRelsese=starPCFSessionsRelsese, starDiameterRlfOverLimit=starDiameterRlfOverLimit, starNPUMissedARPFrames=starNPUMissedARPFrames, starSPRServerReachable=starSPRServerReachable, starChassisStartupTimeout=starChassisStartupTimeout, starPeerAddressIpv6=starPeerAddressIpv6, starPriorToAudit=starPriorToAudit, starCardMigrateStart=starCardMigrateStart, starEGTPServName=starEGTPServName, starVLRIpAddr1=starVLRIpAddr1, starThreshPCCPolicySessions=starThreshPCCPolicySessions, starThreshLMASetupBindingUpdateDenyRate=starThreshLMASetupBindingUpdateDenyRate, starPPPStatDiscOptNegFailLCP=starPPPStatDiscOptNegFailLCP, starThreshClearAAAAuthFail=starThreshClearAAAAuthFail, starSS7SCTPPeerPort=starSS7SCTPPeerPort, starSessSub1LocalIPAddr=starSessSub1LocalIPAddr, starPortLinkState=starPortLinkState, starSGTPServiceStart=starSGTPServiceStart, starAAATtlAcctRequests=starAAATtlAcctRequests, starLocalUserPrivilegeChanged=starLocalUserPrivilegeChanged, starPPPStatIpcpFailOption=starPPPStatIpcpFailOption, starSGSServiceStart=starSGSServiceStart, starCPUNumProcesses=starCPUNumProcesses, starSessSub1InBytesDropped=starSessSub1InBytesDropped, starRPRegAcceptInterPDSN=starRPRegAcceptInterPDSN, starLAGMinlink=starLAGMinlink, starPPPStatLcpSuccess=starPPPStatLcpSuccess, starALCAPPathBlock=starALCAPPathBlock, starSlotVoltage3dot3LowThresh=starSlotVoltage3dot3LowThresh, starNeedADCLicenseClear=starNeedADCLicenseClear, starentSccpNw=starentSccpNw, starLicenseExpiryDate=starLicenseExpiryDate, starThreshClearDataPlaneMonitor5MinsLoss=starThreshClearDataPlaneMonitor5MinsLoss, starThreshPHSGWEAPOLAuthFailure=starThreshPHSGWEAPOLAuthFailure, starPPPStatLcpFailMaxRetry=starPPPStatLcpFailMaxRetry, starStatFilesizeLimit=starStatFilesizeLimit, starPCCQuotaServiceStart=starPCCQuotaServiceStart, starSessSub1DownCommDataRate=starSessSub1DownCommDataRate, starThreshClearEGTPCS2BSetupFailRate=starThreshClearEGTPCS2BSetupFailRate, starPCFStatCurrentL2TPLACConnected=starPCFStatCurrentL2TPLACConnected, starCardMigrateFailed=starCardMigrateFailed, starPowerFilterUnitFailed=starPowerFilterUnitFailed, starMIPFAStatRegRplSentMNTooDistant=starMIPFAStatRegRplSentMNTooDistant, starGSServiceStart=starGSServiceStart, starThreshClearLMASetupBindingUpdateDenyRate=starThreshClearLMASetupBindingUpdateDenyRate, starDiameterEndpointName=starDiameterEndpointName, starSDHPathNum=starSDHPathNum, starEISServerVPNName=starEISServerVPNName, starSRPCheckpointFailure=starSRPCheckpointFailure, starThreshClearAAARetryRate=starThreshClearAAARetryRate, starSDHLopDown=starSDHLopDown, starThreshClearDCCARatingFailed=starThreshClearDCCARatingFailed, starThreshAAAAcctArchiveQueue3=starThreshAAAAcctArchiveQueue3, starMMENewConnectionsDisallowed=starMMENewConnectionsDisallowed, starSIPRouteReqNum=starSIPRouteReqNum, starMMES1AssocSvcID=starMMES1AssocSvcID, starOSPFFromState=starOSPFFromState, starThreshClearMMEAttachFail=starThreshClearMMEAttachFail, starentEISServer=starentEISServer, starFAServiceStart=starFAServiceStart, starThreshClearSGWSessions=starThreshClearSGWSessions, starSessSub1ActivePct=starSessSub1ActivePct, starCardPACMigrateComplete=starCardPACMigrateComplete, starThreshCSCFSvcErrorPresence=starThreshCSCFSvcErrorPresence, starSlotCiscoModelName=starSlotCiscoModelName, starSGWServiceStop=starSGWServiceStop, starVLRAllAssocDown=starVLRAllAssocDown, starMIPFAStatRegRplSentMissHomeAgent=starMIPFAStatRegRplSentMissHomeAgent, starIKEv2ReqRateThreshold=starIKEv2ReqRateThreshold, starIPPoolGroupRelease=starIPPoolGroupRelease, starGSSInterfaceName=starGSSInterfaceName, starCLIPrivs=starCLIPrivs, starMIPHAStatRegAcceptReg=starMIPHAStatRegAcceptReg, starSlotVoltage1dot5HighThresh=starSlotVoltage1dot5HighThresh, starThreshPerServicePDGSessions=starThreshPerServicePDGSessions, starRPRegUpdDenied=starRPRegUpdDenied, starCdrHDDStart=starCdrHDDStart, starIPPoolGroupAvail=starIPPoolGroupAvail, starCongestion=starCongestion, starThreshClearIPSECIKEFailRate=starThreshClearIPSECIKEFailRate, starDdfReload=starDdfReload, starMIPFAStatAdvertSend=starMIPFAStatAdvertSend, starEGTPPeerSessCnt=starEGTPPeerSessCnt, starBfdSessDiagCode=starBfdSessDiagCode, starMIPHAStatRegReplyRevTunMand=starMIPHAStatRegReplyRevTunMand, starRPStatServName=starRPStatServName, starMIPFAStatRegRelayedDereg=starMIPFAStatRegRelayedDereg, starOSPFNeighborDown=starOSPFNeighborDown, starSGSNGtpuPathFailure=starSGSNGtpuPathFailure, starCSCFPeerServerName=starCSCFPeerServerName, starIPSECSecTunDown=starIPSECSecTunDown, starPortSlot=starPortSlot, starServiceLossPTACsClear=starServiceLossPTACsClear, starSDHPathEntry=starSDHPathEntry, starLAGGroupDown=starLAGGroupDown, starHdRaidMgmtCardSwitchoverCause=starHdRaidMgmtCardSwitchoverCause, starSessSub1Activity=starSessSub1Activity, starGPRSLinkEntry=starGPRSLinkEntry, starSessSub1AAADomain=starSessSub1AAADomain, starMIPHAStatRegReplyAcceptReg=starMIPHAStatRegReplyAcceptReg, starThreshPDSNSvcA11PPPSendDiscard=starThreshPDSNSvcA11PPPSendDiscard, starThreshClearRPSetupFailRate=starThreshClearRPSetupFailRate, starSccpNwId=starSccpNwId, starMIPFAStatRegRplSentHAUnreach=starMIPFAStatRegRplSentHAUnreach, starSessTtlSIPTxBytes=starSessTtlSIPTxBytes, starSRPAAAReachable=starSRPAAAReachable, starAAACurRequests=starAAACurRequests, starALCAPNodeReset=starALCAPNodeReset, starHeartbeat=starHeartbeat, starCardLastStateChange=starCardLastStateChange, starHENBGWMMESCTPAllAssocDownClear=starHENBGWMMESCTPAllAssocDownClear, starMIPFAStatRegDenPDSNBadReq=starMIPFAStatRegDenPDSNBadReq, starSessInProgAuthenticating=starSessInProgAuthenticating, starSessSub1AccessTech=starSessSub1AccessTech, starSDHEntry=starSDHEntry, starCardMode=starCardMode, starMIPFAStatRegDenHASimulBind=starMIPFAStatRegDenHASimulBind, starMIPFAStatRegDenPDSNTotal=starMIPFAStatRegDenPDSNTotal, starThreshPDSNSvcA11RRPFailure=starThreshPDSNSvcA11RRPFailure, starBNGServiceStart=starBNGServiceStart, starSessSub1AcctSessionID=starSessSub1AcctSessionID, starPPPStatDeflComp=starPPPStatDeflComp, starRPStatVpnID=starRPStatVpnID, starPCFRegUpdAccepted=starPCFRegUpdAccepted, starESMLCAssocUp=starESMLCAssocUp, starIPSecNodePeerUp=starIPSecNodePeerUp, starentPCFStats=starentPCFStats, starPCFRenewRrqAccepted=starPCFRenewRrqAccepted, starIPMSServerEntry=starIPMSServerEntry, starRPRegDeniedInitial=starRPRegDeniedInitial, starRPDiscNoMemory=starRPDiscNoMemory, starMIPHAStatServName=starMIPHAStatServName, starSessSub1RadAcctMode=starSessSub1RadAcctMode, starMIPFAStatRegDenDereg=starMIPFAStatRegDenDereg, starFileEntry=starFileEntry, starCPUCoreNumber=starCPUCoreNumber, starentSlotMapping=starentSlotMapping, starMIPFAStatAuthFailure=starMIPFAStatAuthFailure, starIuBcPeerIpAddr=starIuBcPeerIpAddr, starApsLossOfRedundancy=starApsLossOfRedundancy, starSxPeerAddr=starSxPeerAddr, starentGPRSLink=starentGPRSLink, starStorageServerClusInterCOK=starStorageServerClusInterCOK, starSS7PCAvailable=starSS7PCAvailable, starNPUSlotNumber=starNPUSlotNumber, starIPPoolState=starIPPoolState, starCardActive=starCardActive, starPDIFBindSlot=starPDIFBindSlot, starPPPStatDiscLongDuraTimeout=starPPPStatDiscLongDuraTimeout, starSIPRouteVmgName=starSIPRouteVmgName, starUserCLISessionsLimit=starUserCLISessionsLimit, starPortRxErrors=starPortRxErrors, starCommonDatabaseUpgradeDBVersion=starCommonDatabaseUpgradeDBVersion, starESMLCAssocDown=starESMLCAssocDown, starSessInProgAuthenticated=starSessInProgAuthenticated, starCLIContext=starCLIContext, starThreshHNBGWHnbSess=starThreshHNBGWHnbSess, starThreshClearHENBGWUeSessions=starThreshClearHENBGWUeSessions, starA11CurActive=starA11CurActive, starPCFStatVpnName=starPCFStatVpnName, starThreshMAGSetupBindingUpdateDenyRate=starThreshMAGSetupBindingUpdateDenyRate, starIPMSServerVpnName=starIPMSServerVpnName, starPCFStatRxPkts=starPCFStatRxPkts, starSessSub1DownTrafPolState=starSessSub1DownTrafPolState, starSRPConfigInSync=starSRPConfigInSync, starThreshCallSetupFailure=starThreshCallSetupFailure, starThreshPHSGWAuthFail=starThreshPHSGWAuthFail, starPortType=starPortType, starPeerPortNum=starPeerPortNum, starCLIEntry=starCLIEntry, starSessSub1MIPGratARPMode=starSessSub1MIPGratARPMode, starGILANServiceStart=starGILANServiceStart, starMTP3LinkInService=starMTP3LinkInService, starCPULoad5Min=starCPULoad5Min, starPortEntry=starPortEntry, starRPDoRxPackets=starRPDoRxPackets, starDiameterDiamproxyInstance=starDiameterDiamproxyInstance, starThreshClearPortRxUtil=starThreshClearPortRxUtil, starEGTPSelfAddr=starEGTPSelfAddr, starE1TribPath=starE1TribPath, starThreshDCCABadAnswers=starThreshDCCABadAnswers, starHenbgwAccessServiceStart=starHenbgwAccessServiceStart, starPCFDeniedUnknownPDSNAddr=starPCFDeniedUnknownPDSNAddr, starL2TPServiceTypeName=starL2TPServiceTypeName, starThreshClearPHSGWSessSetupTimeout=starThreshClearPHSGWSessSetupTimeout, starThreshHENBGWPagingMessages=starThreshHENBGWPagingMessages, starDiameterECode=starDiameterECode, starSessSub1L2TPPeerIPAddr=starSessSub1L2TPPeerIPAddr, starPDGSessCurrentActive=starPDGSessCurrentActive)
mibBuilder.exportSymbols("STARENT-MIB", starMRMEServiceStart=starMRMEServiceStart, starDynPkgFilename=starDynPkgFilename, starPortAdminState=starPortAdminState, starPowerState=starPowerState, starCertExpiryTime=starCertExpiryTime, starMIPFAStatRegReqSentRenewTotal=starMIPFAStatRegReqSentRenewTotal, starPCFDiscFlowAddFail=starPCFDiscFlowAddFail, starSGSNGtpcPathFailure=starSGSNGtpcPathFailure, starThreshCSCFSvcInviteRcvdRate=starThreshCSCFSvcInviteRcvdRate, starSxPeerAssociationRelease=starSxPeerAssociationRelease, starFanEntry=starFanEntry, starPCFDiscIpcpOptFail=starPCFDiscIpcpOptFail, starSessHNBGWServName=starSessHNBGWServName, starThreshIPPoolAvail=starThreshIPPoolAvail, starSGSServiceStop=starSGSServiceStop, starSessGGSNAPNName=starSessGGSNAPNName, starCardTempOverheat=starCardTempOverheat, starThreshAAAAuthFailRate=starThreshAAAAuthFailRate, starE1TribTu12=starE1TribTu12, starA11TtlArrived=starA11TtlArrived, starThreshClearHNBGWHnbSess=starThreshClearHNBGWHnbSess, starCardLock=starCardLock, starSGSNGtpuPathFailureClear=starSGSNGtpuPathFailureClear, starSessSub1AAARadiusAuthServerIPAddr=starSessSub1AAARadiusAuthServerIPAddr, starThreshClearMMESessions=starThreshClearMMESessions, starPCFDiscInvDestContext=starPCFDiscInvDestContext, starSlotCiscoSerialNumber=starSlotCiscoSerialNumber, starentCPU=starentCPU, starMMES1PathVpnName=starMMES1PathVpnName, starSDHE1TribDown=starSDHE1TribDown, starThreshClearCSCFSvcTotalActiveReg=starThreshClearCSCFSvcTotalActiveReg, starRaidRecovered=starRaidRecovered, starPDIFTable=starPDIFTable, starNPUMgrTable=starNPUMgrTable, starApsCommandSuccess=starApsCommandSuccess, starThreshClearAAAAuthFailRate=starThreshClearAAAAuthFailRate, starALCAPServEntry=starALCAPServEntry, starApsSwitchSuccess=starApsSwitchSuccess, starSmartLicenseEvalModeRemaining=starSmartLicenseEvalModeRemaining, starPCFStatCurrentOtherConnected=starPCFStatCurrentOtherConnected, starThreshClearFWDropPacket=starThreshClearFWDropPacket, starSlotNum=starSlotNum, starentPPP=starentPPP, starP2PPluginVersion=starP2PPluginVersion, starChassisDescription=starChassisDescription, starContFiltCFFilename=starContFiltCFFilename, starMMES1PathFail=starMMES1PathFail, starDynPkgUpgradeErrorClear=starDynPkgUpgradeErrorClear, starPCFCurrentSessions=starPCFCurrentSessions, starFNGServName=starFNGServName, starThreshTotalVolumeClear=starThreshTotalVolumeClear, starSessSub1IPv4InACLDrop=starSessSub1IPv4InACLDrop, starentThresholds=starentThresholds, starThreshClearContFiltRating=starThreshClearContFiltRating, starThreshCDRFlowControl=starThreshCDRFlowControl, starMMES1PathENBID=starMMES1PathENBID, starSessALCAPVpnName=starSessALCAPVpnName, starSessInProgSIPConn=starSessInProgSIPConn, starPCFInitialRrqRcvd=starPCFInitialRrqRcvd, starThreshPerServicePDSNSessions=starThreshPerServicePDSNSessions, starMIPFAStatRegRplSentMissHomeAddr=starMIPFAStatRegRplSentMissHomeAddr, starSessSub1UpPeakDataRate=starSessSub1UpPeakDataRate, starPDGSysSessCurrActive=starPDGSysSessCurrActive, starRPRegDenyUnknownPDSN=starRPRegDenyUnknownPDSN, starHAUnreachable=starHAUnreachable, starPCCPolicyServiceStop=starPCCPolicyServiceStop, starRedundantPortSlot=starRedundantPortSlot, starMIPHAStatRegReplyNoResource=starMIPHAStatRegReplyNoResource, starSDHPathHopUp=starSDHPathHopUp, starThreshIPSECIKEFailRate=starThreshIPSECIKEFailRate, starAAATtlAuthFailure=starAAATtlAuthFailure, starSessSub1RemoteIPAddr=starSessSub1RemoteIPAddr, starAlertGroup=starAlertGroup, starMIPHAStatRegReplyAcceptDereg=starMIPHAStatRegReplyAcceptDereg, starSessGGSNPeerPort=starSessGGSNPeerPort, starMIPFAStatRegDenPDSNTimeout=starMIPFAStatRegDenPDSNTimeout, starM3UAPCUnavailable=starM3UAPCUnavailable, starServiceLossLCClear=starServiceLossLCClear, starRPRegUpdHandoff=starRPRegUpdHandoff, starThreshClearCDRFlowControl=starThreshClearCDRFlowControl, starMIPFAStatRegDenPDSNHAHostUnreach=starMIPFAStatRegDenPDSNHAHostUnreach, starSlotVoltage2dot5HighThresh=starSlotVoltage2dot5HighThresh, starE1TribEntry=starE1TribEntry, starThreshClearIPPoolHold=starThreshClearIPPoolHold, starentSDH=starentSDH, starSessSub1DHCPServName=starSessSub1DHCPServName, starPCFVpnName=starPCFVpnName, starSubName=starSubName, starMIPFAStatServName=starMIPFAStatServName, starMIPHAStatRegReplyBadReq=starMIPHAStatRegReplyBadReq, starPDGSysSessTtlSetup=starPDGSysSessTtlSetup, starSlotVoltage5dot0LowThresh=starSlotVoltage5dot0LowThresh, starThreshHASvcReregReplyError=starThreshHASvcReregReplyError, starThreshClearEPDGIKEV2AuthFailures=starThreshClearEPDGIKEV2AuthFailures, starPCFDiscNoRemIpAddr=starPCFDiscNoRemIpAddr, starContFiltDBErrorClear=starContFiltDBErrorClear, starSlotVoltage3dot3=starSlotVoltage3dot3, starMIPHAStatFARevocations=starMIPHAStatFARevocations, starCardAdminState=starCardAdminState, starDiameterRlfTps=starDiameterRlfTps, starSessSub1IPv4OutACLDrop=starSessSub1IPv4OutACLDrop, starThreshClearTpoRtoTimeout=starThreshClearTpoRtoTimeout, starMIPFAStatRegDenHAUnknownHA=starMIPFAStatRegDenHAUnknownHA, starentTaskMgr=starentTaskMgr, starNPUMgrEntry=starNPUMgrEntry, starIPPoolStartAddr=starIPPoolStartAddr, starRPRegUpdUnack=starRPRegUpdUnack, starSCCPSspRcvd=starSCCPSspRcvd, starRaidFailed=starRaidFailed, starDynPkgLoadError=starDynPkgLoadError, starPortOperState=starPortOperState, starThreshClearCPUMemUsage=starThreshClearCPUMemUsage, starHATtlArrived=starHATtlArrived, starMIPFAStatRegDenHAMismatchID=starMIPFAStatRegDenHAMismatchID, starSessTtlAuthSucc=starSessTtlAuthSucc, starVRFName=starVRFName, starThreshGGSNSessions=starThreshGGSNSessions, starThreshASNGWMaxEAPRetry=starThreshASNGWMaxEAPRetry, starRPDiscInvPacketLen=starRPDiscInvPacketLen, starThreshClearPDSNSvcA11PPPSendDiscard=starThreshClearPDSNSvcA11PPPSendDiscard, starSxFailureCause=starSxFailureCause, starThreshPerServicePCCQuotaSessions=starThreshPerServicePCCQuotaSessions, starHENBGWMMEOverloadStart=starHENBGWMMEOverloadStart, starThreshClearPerServiceSGSNSessions=starThreshClearPerServiceSGSNSessions, starFTPServTable=starFTPServTable, starDiameterVpnName=starDiameterVpnName, starSBCServiceStart=starSBCServiceStart, starSIPRouteServerVpnName=starSIPRouteServerVpnName, starThreshFNGCurrActSess=starThreshFNGCurrActSess, starThreshClearCSCFSvcInviteRcvdRate=starThreshClearCSCFSvcInviteRcvdRate, starMIPFAStatRegRplRcvRenewalRly=starMIPFAStatRegRplRcvRenewalRly, starCardSwitchoverFailed=starCardSwitchoverFailed, starThreshCPULoad=starThreshCPULoad, starMIPHAStatRegDeniedInitial=starMIPHAStatRegDeniedInitial, starPMIPFailureReason=starPMIPFailureReason, starStorageServerClusPathOK=starStorageServerClusPathOK, starThreshPHSPCSmEntryDenial=starThreshPHSPCSmEntryDenial, starPCFDeniedPoorFormedReq=starPCFDeniedPoorFormedReq, starThreshGPRSSessions=starThreshGPRSSessions, starThreshPHSGWMaxEAPRetry=starThreshPHSGWMaxEAPRetry, starAlertsDisabled=starAlertsDisabled, starPPPStatReleased=starPPPStatReleased, starLocalUserRemoved=starLocalUserRemoved, starSessSub1ExtInlSrvrTxPkt=starSessSub1ExtInlSrvrTxPkt, starThreshClearASNGWSessSetupTimeout=starThreshClearASNGWSessSetupTimeout, starCPUFailed=starCPUFailed, starPCFStatEntry=starPCFStatEntry, starSGTPServiceStop=starSGTPServiceStop, starThreshClearDiameterRetryRate=starThreshClearDiameterRetryRate, starSlotPartRevision=starSlotPartRevision, starMIPFAStatRegDenPDSNUnspec=starMIPFAStatRegDenPDSNUnspec, starCPUBusy=starCPUBusy, starMVGProtocolType=starMVGProtocolType, starLAGPartner=starLAGPartner, starMIPHAStatRegReplySendError=starMIPHAStatRegReplySendError, starThreshClearGPRSSessions=starThreshClearGPRSSessions, starEGTPPeerNewRstCnt=starEGTPPeerNewRstCnt, starLicenseExceeded=starLicenseExceeded, starThreshPortHighActivity=starThreshPortHighActivity, starMIPFAStatRegReqSentInitResend=starMIPFAStatRegReqSentInitResend, starVLRDown=starVLRDown, starMIPHAStatRegReplyDenied=starMIPHAStatRegReplyDenied, starThreshPGWSessions=starThreshPGWSessions, starPDIFSysChildSACurrent=starPDIFSysChildSACurrent, starSS7SCTPSelfAddr=starSS7SCTPSelfAddr, starPCFRrqDenied=starPCFRrqDenied, starEgtpuPathFailure=starEgtpuPathFailure, starGGSNSerVpnID=starGGSNSerVpnID, starIPPoolType=starIPPoolType, starPPPStatDiscInvalidDestVpn=starPPPStatDiscInvalidDestVpn, starSessSub1AccessType=starSessSub1AccessType, starMIPHAStatRegReplyUnspecErr=starMIPHAStatRegReplyUnspecErr, starPortOperMode=starPortOperMode, starPCFDeniedInsufResource=starPCFDeniedInsufResource, starThreshCPUOrbsWarn=starThreshCPUOrbsWarn, starRaidDegraded=starRaidDegraded, starSDHPathPort=starSDHPathPort, starNicBondChange=starNicBondChange, starRPRegActvStartRenew=starRPRegActvStartRenew, starPPPStatDiscNoResource=starPPPStatDiscNoResource, starThreshClearMAGSessions=starThreshClearMAGSessions, starMIPFAStatRegRplSentBadReply=starMIPFAStatRegRplSentBadReply, starSGTPSerEntry=starSGTPSerEntry, starNPDBConnectionUp=starNPDBConnectionUp, starNTPPeerUnreachable=starNTPPeerUnreachable, starBLDBError=starBLDBError, starIPSECTunSwitchFail=starIPSECTunSwitchFail, starGGSNSerSvcID=starGGSNSerSvcID, starThreshClearASNGWHandoffDenial=starThreshClearASNGWHandoffDenial, starDiameterPeerDown=starDiameterPeerDown, starThreshClearIPSECIKERequests=starThreshClearIPSECIKERequests, starIuBcSelfIpAddr=starIuBcSelfIpAddr, starRPRegDenyUnrecogVend=starRPRegDenyUnrecogVend, starGPRSNsei=starGPRSNsei, starThreshClearPHSGWNWEntryDenial=starThreshClearPHSGWNWEntryDenial, starHENBGWServiceSelfPort=starHENBGWServiceSelfPort, starDynCFUpgradeErrorCode=starDynCFUpgradeErrorCode, starSessSub1IPv4OutXOFFDropByte=starSessSub1IPv4OutXOFFDropByte, starCPUEntry=starCPUEntry, starFNGBindSlot=starFNGBindSlot, starPCFDeregRrqAccepted=starPCFDeregRrqAccepted, starChassisCrashListFull=starChassisCrashListFull, starMCEAssocUp=starMCEAssocUp, starThreshClearPDSNSvcA11RRQMsgDiscard=starThreshClearPDSNSvcA11RRQMsgDiscard, starRPRegDenyRevTunReq=starRPRegDenyRevTunReq, starThreshDataPlaneMonitor60MinsLoss=starThreshDataPlaneMonitor60MinsLoss, starPCFStatCurrentSIPConnected=starPCFStatCurrentSIPConnected, starGTPCRLFCurrAppDelayTol=starGTPCRLFCurrAppDelayTol, starSmartLicenseEvalMode=starSmartLicenseEvalMode, starThreshSAEGWSessions=starThreshSAEGWSessions, starMCEAssocDown=starMCEAssocDown, starThreshClearPerServiceGPRSPdpSessions=starThreshClearPerServiceGPRSPdpSessions, starThreshPortSpecRxUtil=starThreshPortSpecRxUtil, starSessSub1OutPlcyGrp=starSessSub1OutPlcyGrp, starThreshSessCPUThroughput=starThreshSessCPUThroughput, starThreshClearCSCFSvcErrorNoResource=starThreshClearCSCFSvcErrorNoResource, starThreshClearPerServicePDSNSessions=starThreshClearPerServicePDSNSessions, starSessSub1FAServiceName=starSessSub1FAServiceName, starentIPPool=starentIPPool, starThreshClearIPSECCallReqRej=starThreshClearIPSECCallReqRej, starLNSServiceStop=starLNSServiceStop, starThreshPerServicePCCPolicySessions=starThreshPerServicePCCPolicySessions, starFATtlDereg=starFATtlDereg, starRPRegSendError=starRPRegSendError, starSessSub1PeakBPSTx=starSessSub1PeakBPSTx, starThreshClearHNBGWUeSess=starThreshClearHNBGWUeSess, starMIPFAStatRegRelayedTotal=starMIPFAStatRegRelayedTotal, starPDIFVpnID=starPDIFVpnID, starThreshLicense=starThreshLicense, starIPPoolFree=starIPPoolFree, starGSSClusterName=starGSSClusterName, starentIPSEC=starentIPSEC, starMIPHAStatRegRecvTotal=starMIPHAStatRegRecvTotal, starThreshClearLMASessions=starThreshClearLMASessions, starRPSecBadID=starRPSecBadID, starMIPHAStatRegDeniedDereg=starMIPHAStatRegDeniedDereg, starPPPStatAuthAbort=starPPPStatAuthAbort, starSessTtlIPCPUp=starSessTtlIPCPUp, starSessSub1IpAddr=starSessSub1IpAddr, starThreshPacketsFilteredDropped=starThreshPacketsFilteredDropped, starRPRegDenyAdminProhib=starRPRegDenyAdminProhib, starIPSECTunSwitchComplete=starIPSECTunSwitchComplete, starMAPServiceStop=starMAPServiceStop, starFTPServSwitch=starFTPServSwitch, starSDHPathOperState=starSDHPathOperState, starIPPoolContext=starIPPoolContext, starSessMgrRecoveryComplete=starSessMgrRecoveryComplete, starCardUp=starCardUp, starSessSub1AddrViaDHCP=starSessSub1AddrViaDHCP, starThreshClearSNXDisconnectReason=starThreshClearSNXDisconnectReason, starThreshPDGCurrSess=starThreshPDGCurrSess, starSS7RdTable=starSS7RdTable, starRPRegRecvDereg=starRPRegRecvDereg, starSessGGSNServName=starSessGGSNServName)
mibBuilder.exportSymbols("STARENT-MIB", starAAATtlRequests=starAAATtlRequests, starGSSDiskPath=starGSSDiskPath, starentFans=starentFans, starIPSECLocalGateway=starIPSECLocalGateway, starSessMgrCSCFServiceRecoveryComplete=starSessMgrCSCFServiceRecoveryComplete, starCDRFilename=starCDRFilename, starAAAAuthServerMisconfigured=starAAAAuthServerMisconfigured, starPMIPPeerAddr=starPMIPPeerAddr, starSIPServiceStop=starSIPServiceStop, starEgtpcPathFailureClear=starEgtpcPathFailureClear, starPPPStatRenegPdsn=starPPPStatRenegPdsn, starMIPFAStatRegRecvDereg=starMIPFAStatRegRecvDereg, starMMEEMBMSServiceStop=starMMEEMBMSServiceStop, starMIPHAStatRegDiscardTotal=starMIPHAStatRegDiscardTotal, starCardFailed=starCardFailed, starNwReachServerDead=starNwReachServerDead, starThreshClearIPSECTunEstabl=starThreshClearIPSECTunEstabl, starSlotVoltage1dot8=starSlotVoltage1dot8, starCdrPurged=starCdrPurged, starSessTtlSIPRxBytesRev1=starSessTtlSIPRxBytesRev1, starSessSub1ExtInlSrvrEgrIPAddr=starSessSub1ExtInlSrvrEgrIPAddr, starSubSetupTime=starSubSetupTime, starSessSub1=starSessSub1, starAAAAuthServerReachable=starAAAAuthServerReachable, starSGSNHLRReset=starSGSNHLRReset, starMIPHAStatRegAcceptHO=starMIPHAStatRegAcceptHO, starChassisThroughputLimit=starChassisThroughputLimit, starSlotMappingNum=starSlotMappingNum, starWindowTime=starWindowTime, starThreshPDSNSvcCallSetupRate=starThreshPDSNSvcCallSetupRate, starThreshClearEPDGIKEV2SetupFailure=starThreshClearEPDGIKEV2SetupFailure, starPPPStatRenegAddrMismatch=starPPPStatRenegAddrMismatch, starMIPFAStatRegReqSentInitTotal=starMIPFAStatRegReqSentInitTotal, starCertEntry=starCertEntry, starRedundantPortNum=starRedundantPortNum, starPPPStatChapAuthAttempt=starPPPStatChapAuthAttempt, starThreshClearHASvcCallSetupRate=starThreshClearHASvcCallSetupRate, starMIPFAStatRegDenPDSNMissChallenge=starMIPFAStatRegDenPDSNMissChallenge, starPCCNtfyIntfPeerUnreachable=starPCCNtfyIntfPeerUnreachable, starThreshPct=starThreshPct, starPCFIntraPDSNActiveAnidHORrqAccepted=starPCFIntraPDSNActiveAnidHORrqAccepted, starSessHNBGWMscPtCd=starSessHNBGWMscPtCd, starPCFDiscSessSetupTimeout=starPCFDiscSessSetupTimeout, starGGSNServiceStart=starGGSNServiceStart, starSessSub1AAARadiusGroup=starSessSub1AAARadiusGroup, starThreshClearPerServiceGGSNSessions=starThreshClearPerServiceGGSNSessions, starServiceSubLimit=starServiceSubLimit, starSessTtlSIPTxBytesRev1=starSessTtlSIPTxBytesRev1, starPPPStatDiscNoRemoteIpAddr=starPPPStatDiscNoRemoteIpAddr, starentTraps=starentTraps, starEgtpcPathFailure=starEgtpcPathFailure, starThreshPerServicePCCAFSessions=starThreshPerServicePCCAFSessions, starPDIFSessCurrent=starPDIFSessCurrent, starSessSub1SustBPSTx=starSessSub1SustBPSTx, starCPUMemCached=starCPUMemCached, starMIPFAStatRegRplSentMissChallenge=starMIPFAStatRegRplSentMissChallenge, starNTPSyncEstablished=starNTPSyncEstablished, starSessMgrCount=starSessMgrCount, starSessSub1DownViolateAction=starSessSub1DownViolateAction, starMIPFAStatRegAuthFailDereg=starMIPFAStatRegAuthFailDereg, starMIPFAStatRegRplSentMnAuthFail=starMIPFAStatRegRplSentMnAuthFail, starHNBGWMSCRanapReset=starHNBGWMSCRanapReset, starThreshClearLagTxUtil=starThreshClearLagTxUtil, starThreshCardTemperatureNearPowerOffLimit=starThreshCardTemperatureNearPowerOffLimit, starMIPHAStatRegReplyAdminProhib=starMIPHAStatRegReplyAdminProhib, starThreshClearPerServiceSGSNPdpSessions=starThreshClearPerServiceSGSNPdpSessions, starPPPStatDiscAdmin=starPPPStatDiscAdmin, starChassisType=starChassisType, starPGWServiceStop=starPGWServiceStop, starRPRegDeniedRenew=starRPRegDeniedRenew, starSlotSerialNumber=starSlotSerialNumber, starPMIPPathFailure=starPMIPPathFailure, starMIPFAStatRegRplRcvTotalRly=starMIPFAStatRegRplRcvTotalRly, starContFiltCFUpgradeFilename=starContFiltCFUpgradeFilename, starBGPPeerSessionIPv6Down=starBGPPeerSessionIPv6Down, starPPPStatDiscRemoteDiscUpLayer=starPPPStatDiscRemoteDiscUpLayer, starSessTtlSrcViol=starSessTtlSrcViol, starentPDIFSys=starentPDIFSys, starMMES1PathSvcID=starMMES1PathSvcID, starThreshClearPHSGWEAPOLAuthFailure=starThreshClearPHSGWEAPOLAuthFailure, starServiceSubCurrent=starServiceSubCurrent, starIPSECPolicyName=starIPSECPolicyName, starThreshCSCFSvcErrorTcp=starThreshCSCFSvcErrorTcp, starRPRegDenyUnspec=starRPRegDenyUnspec, starSRPIpAddress=starSRPIpAddress, starSessSub1LinkStatus=starSessSub1LinkStatus, starIPMSServerAddr=starIPMSServerAddr, starThreshClearAAAMgrQueue=starThreshClearAAAMgrQueue, starSessSub1IPv4OutCSSDownDrop=starSessSub1IPv4OutCSSDownDrop, starRPSecMissingMnHAAuth=starRPSecMissingMnHAAuth, starRPRegDenyRevTunUnav=starRPRegDenyRevTunUnav, starPCFRegUpdateHORelease=starPCFRegUpdateHORelease, starServiceVpnName=starServiceVpnName, starCLIType=starCLIType, starMIPFAStatRegAcceptInitial=starMIPFAStatRegAcceptInitial, starPCFStatIpAddr=starPCFStatIpAddr, starPPPStatStacComp=starPPPStatStacComp, starMIPFAStatRegDenHARenewal=starMIPFAStatRegDenHARenewal, starAAACurAuthRequests=starAAACurAuthRequests, starTrapGroup=starTrapGroup, starAAACurAcctSess=starAAACurAcctSess, starSIPRouteServerAvailable=starSIPRouteServerAvailable, starMIPFAStatRegDenPDSNResources=starMIPFAStatRegDenPDSNResources, starSessTtlOctForwardedGB=starSessTtlOctForwardedGB, starDHCPV6ServiceStop=starDHCPV6ServiceStop, starFractE1TribPort=starFractE1TribPort, starEPDGServiceStop=starEPDGServiceStop, starThreshClearPortTxUtil=starThreshClearPortTxUtil, starSlotTable=starSlotTable, starAAAAuthServerUnreachable=starAAAAuthServerUnreachable, starHENBGWMMEOverloadStop=starHENBGWMMEOverloadStop, starPPPStatRecvErrBadPacketLen=starPPPStatRecvErrBadPacketLen, starSmartLicenseServiceOOC=starSmartLicenseServiceOOC, starPPPStatVpnID=starPPPStatVpnID, starGSSClusterNodeState=starGSSClusterNodeState, starSDHSlot=starSDHSlot, starPPPStatFscErrs=starPPPStatFscErrs, starE1TribSlot=starE1TribSlot, starSlotVoltage1dot8HighThresh=starSlotVoltage1dot8HighThresh, starSlotCiscoHardwareRev=starSlotCiscoHardwareRev, starContextName=starContextName, starMIPFAStatRegDenPDSNMissNAI=starMIPFAStatRegDenPDSNMissNAI, starSGSServiceVpnName=starSGSServiceVpnName, starRuleDefName=starRuleDefName, starPCFDeniedMobNodeAuthFail=starPCFDeniedMobNodeAuthFail, starPHSGWServiceStart=starPHSGWServiceStart, starPCFStatTxBytes=starPCFStatTxBytes, starSmartLicenseCSSMConntectionFail=starSmartLicenseCSSMConntectionFail, starSessSub1ESN=starSessSub1ESN, starSS7MTP3LinkSetId=starSS7MTP3LinkSetId, starCdrStreamingStart=starCdrStreamingStart, starThreshCSCFSvcTotalActiveReg=starThreshCSCFSvcTotalActiveReg, starThreshMeasuredMB=starThreshMeasuredMB, starThreshVRFTotalRoutesClear=starThreshVRFTotalRoutesClear, starThreshClearPerServicePDGSessions=starThreshClearPerServicePDGSessions, starRP1xRxPackets=starRP1xRxPackets, starSCTPPathUp=starSCTPPathUp, starChassisPeakMemoryUsage=starChassisPeakMemoryUsage, starThreshPHSGWSessSetupTimeout=starThreshPHSGWSessSetupTimeout, starMIPFAStatRegRplSentNoResources=starMIPFAStatRegRplSentNoResources, starThreshClearPerServiceASNGWSessions=starThreshClearPerServiceASNGWSessions, starSessSub1IPv4FragSent=starSessSub1IPv4FragSent, starMIPFAStatVpnID=starMIPFAStatVpnID, starHENBGWServiceSelfAddr=starHENBGWServiceSelfAddr, starThreshClearIPPoolAvail=starThreshClearIPPoolAvail, starSessHNBGWCsNwName=starSessHNBGWCsNwName, starThreshInt=starThreshInt, starAAACurAcctRequests=starAAACurAcctRequests, starCscfSessCongestionResourceType=starCscfSessCongestionResourceType, starSessSub1ExtInlSrvrIngrIPAddr=starSessSub1ExtInlSrvrIngrIPAddr, starSessSub1IPv4TtlExceeded=starSessSub1IPv4TtlExceeded, starSessSub1DownBurstSize=starSessSub1DownBurstSize, starIPMSServerReachable=starIPMSServerReachable, starPPPStatPapAuthAbort=starPPPStatPapAuthAbort, starThreshClearDnsLookupFailure=starThreshClearDnsLookupFailure, starThreshClearCPUCryptoCoresUtilization=starThreshClearCPUCryptoCoresUtilization, starPCFSessionsDenied=starPCFSessionsDenied, starIKEv2DDOSAttackINITFlood=starIKEv2DDOSAttackINITFlood, starDiameterRlfQueuePercent=starDiameterRlfQueuePercent, starStorageServerClusSwitchOver=starStorageServerClusSwitchOver, starSubMSID=starSubMSID, starCardFailureLEDOff=starCardFailureLEDOff, starPCFCurrentRevaSessions=starPCFCurrentRevaSessions, starCongestionResourceType=starCongestionResourceType, starECSTotalDNSLearntIPThresholdconfigured=starECSTotalDNSLearntIPThresholdconfigured, starLicenseKey=starLicenseKey, starOverloadServiceClear=starOverloadServiceClear, starSessSub1GMTTimezoneOffset=starSessSub1GMTTimezoneOffset, starSDHFractE1LMIUp=starSDHFractE1LMIUp, starCLIEventIDStart=starCLIEventIDStart, starThreshClearEGTPCS5SetupFailRate=starThreshClearEGTPCS5SetupFailRate, starMIPFAStatAuthSuccess=starMIPFAStatAuthSuccess, starSessSub1VLANID=starSessSub1VLANID, starRPRegAcceptIntraPDSN=starRPRegAcceptIntraPDSN, starIPPoolGroupID=starIPPoolGroupID, starRPDiscMisc=starRPDiscMisc, starTetheringTACDatabaseUpgradeFailureStatus=starTetheringTACDatabaseUpgradeFailureStatus, starSxPeerNewRecTimeStamp=starSxPeerNewRecTimeStamp, starSS7CongLevel=starSS7CongLevel, StarentCardType=StarentCardType, starEGTPPeerAddr=starEGTPPeerAddr, starThreshHASvcDeregReplyError=starThreshHASvcDeregReplyError, starASNPCServiceStart=starASNPCServiceStart, starM3UAPSPCongested=starM3UAPSPCongested, starCPUIO=starCPUIO, starHAReachable=starHAReachable, starIPSECSecTunUp=starIPSECSecTunUp, StarentVersionNum=StarentVersionNum, starThreshCSCFSvcErrorNoResource=starThreshCSCFSvcErrorNoResource, starSLSServiceVpnName=starSLSServiceVpnName, starPDGServName=starPDGServName, starPeerIpAddr=starPeerIpAddr, starPCFDeregRrqDenied=starPCFDeregRrqDenied, starMIPFAStatRegRplSentHANetUnreach=starMIPFAStatRegRplSentHANetUnreach, starHENBGWMMESCTPAssocDown=starHENBGWMMESCTPAssocDown, starSGSNRNCNoResetAck=starSGSNRNCNoResetAck, starMMEEMBMSPeerPortNum=starMMEEMBMSPeerPortNum, starThreshASNGWR6InvNai=starThreshASNGWR6InvNai, starOsShellAccessed=starOsShellAccessed, starMIPFAStatRegDiscardDereg=starMIPFAStatRegDiscardDereg, starThreshClearIPPoolUsed=starThreshClearIPPoolUsed, starGTPCRLFVPNName=starGTPCRLFVPNName, starPPPStatLCPEchoRepRecved=starPPPStatLCPEchoRepRecved, starMIPFAStatRegAuthFailRenewal=starMIPFAStatRegAuthFailRenewal, starPortTxDiscards=starPortTxDiscards, starThreshClearGGSNSessions=starThreshClearGGSNSessions, starSessSub1PeakPPSTx=starSessSub1PeakPPSTx, starSS7rdId=starSS7rdId, starUidhURLHostDatabaseUpgradeSuccessStatus=starUidhURLHostDatabaseUpgradeSuccessStatus, starPPPStatRemoteTerm=starPPPStatRemoteTerm, starIPPoolGroupVpnID=starIPPoolGroupVpnID, starThreshPerServiceLNSSessions=starThreshPerServiceLNSSessions, starRPRegUpdDenyBadRequest=starRPRegUpdDenyBadRequest, starMRMEServiceStop=starMRMEServiceStop, starThreshDataPlaneMonitor5MinsLoss=starThreshDataPlaneMonitor5MinsLoss, starentALCAPService=starentALCAPService, starCPULoad1Min=starCPULoad1Min, starSessSub1L3TunLocalIPAddr=starSessSub1L3TunLocalIPAddr, starSIPRouteVpnName=starSIPRouteVpnName, starFNGVpnName=starFNGVpnName, starThreshHENBGWHenbSessions=starThreshHENBGWHenbSessions, starPDGSessCurrentIpv4Active=starPDGSessCurrentIpv4Active, starMIPFAStatRegRplSentInvCOA=starMIPFAStatRegRplSentInvCOA, starLicenseUnderLimit=starLicenseUnderLimit, starPPPStatLowerLayerDisc=starPPPStatLowerLayerDisc, starRPRegUpdDenyUnspec=starRPRegUpdDenyUnspec, starSS7M3UAPsId=starSS7M3UAPsId, starCardReset=starCardReset, starThreshClearCSCFSvcRouteFailure=starThreshClearCSCFSvcRouteFailure, starCscfSessResourceCongestion=starCscfSessResourceCongestion, starDynPkgLoadErrorClear=starDynPkgLoadErrorClear, starHenbgwNetworkServiceStop=starHenbgwNetworkServiceStop, starVLRUp=starVLRUp, starMIPFAStatRegDenInitial=starMIPFAStatRegDenInitial, starThreshSystemCapacity=starThreshSystemCapacity, starPPPStatRenegMobil=starPPPStatRenegMobil, starPCFSvcID=starPCFSvcID, starThreshClearPHSGWMaxEAPOLRetry=starThreshClearPHSGWMaxEAPOLRetry, starSS7PCUnavailable=starSS7PCUnavailable, starPPPStatAuthEntered=starPPPStatAuthEntered, starSRPConfigOutOfSync=starSRPConfigOutOfSync, starCardInserted=starCardInserted, starHNBGWServSvcID=starHNBGWServSvcID, starGPRSBvcDown=starGPRSBvcDown, starCardRebootPending=starCardRebootPending, starChassisLocalTime=starChassisLocalTime, starSessSub1DownViolate=starSessSub1DownViolate, starThreshCPUOrbsCritical=starThreshCPUOrbsCritical, starSmartLicenseFeatureUsage=starSmartLicenseFeatureUsage, starThreshFASvcRegReplyError=starThreshFASvcRegReplyError, starThreshCPUCryptoCoresUtilization=starThreshCPUCryptoCoresUtilization, starGPRSNsvcUp=starGPRSNsvcUp, starFATtlDemultiplexed=starFATtlDemultiplexed, starHENBGWServicePeerPort=starHENBGWServicePeerPort)
mibBuilder.exportSymbols("STARENT-MIB", starIPSECDynTunUp=starIPSECDynTunUp, starIPMSServerUnreachable=starIPMSServerUnreachable, starPDGSessCurrentIpv6Dormant=starPDGSessCurrentIpv6Dormant, starThreshClearSGSNSessions=starThreshClearSGSNSessions, starIUPSServiceStart=starIUPSServiceStart, starSDHE1TribUp=starSDHE1TribUp, StarLongDurTimeoutAction=StarLongDurTimeoutAction, starGTPCRLFSessMgrInst=starGTPCRLFSessMgrInst, starThreshClearIPSECIKEFailures=starThreshClearIPSECIKEFailures, StarentSlotType=StarentSlotType, starSlotPartNumber=starSlotPartNumber, starHENBGWServicePeerAddr=starHENBGWServicePeerAddr, starMAGServiceStart=starMAGServiceStart, starThreshClearPacketsForwarded=starThreshClearPacketsForwarded, starIPPoolEntry=starIPPoolEntry, starThreshClearASNGWAuthFail=starThreshClearASNGWAuthFail, starIMSUEServiceStart=starIMSUEServiceStart, starHNBGWServiceStart=starHNBGWServiceStart, starSAEGWServiceStart=starSAEGWServiceStart, starSmartLicenseServiceUsage=starSmartLicenseServiceUsage, starSAMOGServiceStart=starSAMOGServiceStart, starCSCFPeerServerSvcName=starCSCFPeerServerSvcName, starPCFDiscMaxLcpRetr=starPCFDiscMaxLcpRetr, starFTPPushFail=starFTPPushFail, starMIPFAStatRegRelayedRenewal=starMIPFAStatRegRelayedRenewal, starSessSub1TFT=starSessSub1TFT, starDdfDev=starDdfDev, starThreshClearPacketsFilteredDropped=starThreshClearPacketsFilteredDropped, starPeerId=starPeerId, starCardRebootRequest=starCardRebootRequest, starChassisAction=starChassisAction, starSGTPSerSvcID=starSGTPSerSvcID, starThreshDCCARatingFailed=starThreshDCCARatingFailed, starDhcpServiceStarted=starDhcpServiceStarted, starThreshSGSNPdpSessions=starThreshSGSNPdpSessions, starM3UAPSPUp=starM3UAPSPUp, starCPUIdle=starCPUIdle, starentSessInP=starentSessInP, starLIRcvryErrType=starLIRcvryErrType, starEGTPFailureReason=starEGTPFailureReason, starLNSServiceStart=starLNSServiceStart, starChassisUTCTime=starChassisUTCTime, starSessTtlMIPTxBytesRev1=starSessTtlMIPTxBytesRev1, starSessSub1IPv4SrcViolNoAcct=starSessSub1IPv4SrcViolNoAcct, starSessSub1IPv4OutXOFFDropPkt=starSessSub1IPv4OutXOFFDropPkt, starThreshPDIFCurrActSess=starThreshPDIFCurrActSess, starSessTtlOctForwarded=starSessTtlOctForwarded, starCardSPOFClear=starCardSPOFClear, starMIPFAStatRegRplSentHAPortUnreach=starMIPFAStatRegRplSentHAPortUnreach, starCPUMemoryLowClear=starCPUMemoryLowClear, starThreshClearPDGCurrSess=starThreshClearPDGCurrSess, starCardRevision=starCardRevision, starInterfaceIPAddress=starInterfaceIPAddress, starMIPFAStatRegDenHATotal=starMIPFAStatRegDenHATotal, starThreshClearLagRxUtil=starThreshClearLagRxUtil, starSessSGSNRncId=starSessSGSNRncId, starPPPStatChapAuthAbort=starPPPStatChapAuthAbort, starCSCFPeerServerReachable=starCSCFPeerServerReachable, starPDIFSessCurrentIpv4Dormant=starPDIFSessCurrentIpv4Dormant, starCommonDatabaseUpgradeComment=starCommonDatabaseUpgradeComment, starThreshSubscriberTotal=starThreshSubscriberTotal, starNwReachServerAlive=starNwReachServerAlive, starentGSS=starentGSS, starFACurActive=starFACurActive, starUidhURLHostDatabaseUpgradeFailureStatus=starUidhURLHostDatabaseUpgradeFailureStatus, starEISServerAlive=starEISServerAlive, starSgsnGnMsgDelayClear=starSgsnGnMsgDelayClear, starIPPoolHold=starIPPoolHold, starPPPStatMSChapAuthSuccess=starPPPStatMSChapAuthSuccess, starBGPPeerReachable=starBGPPeerReachable, starNPUCPUNumber=starNPUCPUNumber, starThreshClearHNBGWIuSess=starThreshClearHNBGWIuSess, starSessSub1SessMgr=starSessSub1SessMgr, starPDSNServiceStart=starPDSNServiceStart, starMIPHAStatRegReplyFAAuthFail=starMIPHAStatRegReplyFAAuthFail, starThreshASNGWAuthFail=starThreshASNGWAuthFail, starServiceType=starServiceType, starLIRcvryComplete=starLIRcvryComplete, starPDIFSysStatus=starPDIFSysStatus, starThreshClearPortHighActivity=starThreshClearPortHighActivity, starPPPStatDiscLocalLowerLayer=starPPPStatDiscLocalLowerLayer, starCgfAlive=starCgfAlive, starM3UAPSPDown=starM3UAPSPDown, starRPSecBadAuth=starRPSecBadAuth, starServiceFAIpAddr=starServiceFAIpAddr, starLIRcvryErrString=starLIRcvryErrString, starADCLicenseAboutToExpire=starADCLicenseAboutToExpire, starSessSub1AveBPSTx=starSessSub1AveBPSTx, starIPPoolGroupEntry=starIPPoolGroupEntry, starPDIFSessRemain=starPDIFSessRemain, starSessSub1IPv4SrcViol=starSessSub1IPv4SrcViol, starSlotVoltage2dot5=starSlotVoltage2dot5, starPDIFVpnName=starPDIFVpnName, starRuleBaseName=starRuleBaseName, starSlotEntry=starSlotEntry, starRPSecViolations=starRPSecViolations, starSessSGSNMcc=starSessSGSNMcc, starPDIFBindPort=starPDIFBindPort, starPCFDiscIpv6cpOptFail=starPCFDiscIpv6cpOptFail, starIPSGServiceStart=starIPSGServiceStart, starThreshMMEAttachFail=starThreshMMEAttachFail, starTaskFacilityName=starTaskFacilityName, starLogMaxSize=starLogMaxSize, starIPPoolGroup=starIPPoolGroup, starPCFDeniedRevTunnelRequire=starPCFDeniedRevTunnelRequire, starGSSClusterNodeName=starGSSClusterNodeName, starSCTPAssociationEstablished=starSCTPAssociationEstablished, starPPPStatRenegLowerLayerHandoff=starPPPStatRenegLowerLayerHandoff, starMIPFAStatRegDenPDSNAdmin=starMIPFAStatRegDenPDSNAdmin, starL2TPPeerAddress=starL2TPPeerAddress, starPCFSessionsInit=starPCFSessionsInit, starMaxAlertsPerTime=starMaxAlertsPerTime, starSessSub1InPacketsDropped=starSessSub1InPacketsDropped, starMIPFAStatRegRecvRenewal=starMIPFAStatRegRecvRenewal, starRPRegDeniedDereg=starRPRegDeniedDereg, starPCFRevaSessionsRelsese=starPCFRevaSessionsRelsese, starApsFeProtLineFailure=starApsFeProtLineFailure, starThreshIPPoolUsed=starThreshIPPoolUsed, starentLogs=starentLogs, starSGTPPeerAddr=starSGTPPeerAddr, starPPPStatIpcpFailMaxRetry=starPPPStatIpcpFailMaxRetry, starThreshCPUMemory=starThreshCPUMemory, starSessTtlTxBytes=starSessTtlTxBytes, starSessHNBGWSgsnPtCd=starSessHNBGWSgsnPtCd, starMIPFAStatRegDenPDSNStyleUnavail=starMIPFAStatRegDenPDSNStyleUnavail, starSessSub1L3TunnelingState=starSessSub1L3TunnelingState, starSessSub1AccessFlows=starSessSub1AccessFlows, starBGPPeerIpv6Address=starBGPPeerIpv6Address, starFNGSysSessCurrActive=starFNGSysSessCurrActive, starSS7PCCongestionCleared=starSS7PCCongestionCleared, starentMIBGroups=starentMIBGroups, starPCFStatTxPkts=starPCFStatTxPkts, starPPPStatDiscAddFlowFail=starPPPStatDiscAddFlowFail, starL2TPContextName=starL2TPContextName, starPCFStatCurrentSessions=starPCFStatCurrentSessions, starMIPHAStatVpnID=starMIPHAStatVpnID, starMIPFAStatRegDenPDSNBadReply=starMIPFAStatRegDenPDSNBadReply, starSGTPSelfAddr=starSGTPSelfAddr, starThreshClearFWNoRule=starThreshClearFWNoRule, starMMEEMBMSPeerId=starMMEEMBMSPeerId, starGESwitchFailure=starGESwitchFailure, starFAMgrCount=starFAMgrCount, starRPRegDenyNoResource=starRPRegDenyNoResource, starPPPStatAuthSuccess=starPPPStatAuthSuccess, starSessInProgIPCPUp=starSessInProgIPCPUp, starStorageServerMemLow=starStorageServerMemLow, starMIPFAStatRegRplSentAcceptReg=starMIPFAStatRegRplSentAcceptReg, starTetheringV6OSDatabaseUpgradeFailureStatus=starTetheringV6OSDatabaseUpgradeFailureStatus, starPCFIntraPDSNDormantAnidHORrqAccepted=starPCFIntraPDSNDormantAnidHORrqAccepted, starCPUMemoryLow=starCPUMemoryLow, starThreshLagRxUtil=starThreshLagRxUtil, starDiameterPeerUp=starDiameterPeerUp, starTrapObsoleteGroup=starTrapObsoleteGroup, starSccpNwEntry=starSccpNwEntry, starentCert=starentCert, starPPPStatUnknProto=starPPPStatUnknProto, starMIPHAStatRegAcceptRenew=starMIPHAStatRegAcceptRenew, starentPower=starentPower, starCPUNumber=starCPUNumber, starMIPHAStatRegReplyTotal=starMIPHAStatRegReplyTotal, starContFiltDBError=starContFiltDBError, starThreshClearASNGWMaxEAPRetry=starThreshClearASNGWMaxEAPRetry, starPCFSessionsSetup=starPCFSessionsSetup, starCertTable=starCertTable, starTaskCard=starTaskCard, starMIPFAStatRegRplSentRevTunMand=starMIPFAStatRegRplSentRevTunMand, starPPPStatMiscFail=starPPPStatMiscFail, starSGTPSelfPort=starSGTPSelfPort, starE1TribTug2=starE1TribTug2, starentHAMgr=starentHAMgr, starIKEv2DDoSUDPFailClearStr=starIKEv2DDoSUDPFailClearStr, starAAAAccServerMisconfigured=starAAAAccServerMisconfigured, starMIPFAStatRegRplSentTooLong=starMIPFAStatRegRplSentTooLong, starThreshPDSNSvcA11RACMsgDiscard=starThreshPDSNSvcA11RACMsgDiscard, starTaskEntry=starTaskEntry, starCSCFPeerServerInService=starCSCFPeerServerInService, starSessMgrFlowInstId=starSessMgrFlowInstId, starPCFRrqRcvd=starPCFRrqRcvd, starFNGSessCurrentIpv6Dormant=starFNGSessCurrentIpv6Dormant, starHenbgwNetworkServiceStart=starHenbgwNetworkServiceStart, starMIPFAStatRegDenPDSNMNTooDistant=starMIPFAStatRegDenPDSNMNTooDistant, starFecthedFromAAAMgr=starFecthedFromAAAMgr, starentSessMgr=starentSessMgr, starPPPStatBadCtrl=starPPPStatBadCtrl, starentMIPHA=starentMIPHA, starThreshClearSubscriberTotal=starThreshClearSubscriberTotal, starThreshAAAMgrQueue=starThreshAAAMgrQueue, starSessSub1State=starSessSub1State, starMMES1PathPeerAddr=starMMES1PathPeerAddr, starMIPFAStatRegRplSentSendErrors=starMIPFAStatRegRplSentSendErrors, starMIPFAStatDiscDereg=starMIPFAStatDiscDereg, starRPDiscMalformed=starRPDiscMalformed, starMIPHAStatAdminDrop=starMIPHAStatAdminDrop, starIPPoolGroupHold=starIPPoolGroupHold, starConfigurationUpdate=starConfigurationUpdate, starThreshTotalVolume=starThreshTotalVolume, starFanLocation=starFanLocation, starSessInProgArrived=starSessInProgArrived, starSxPeerAssociated=starSxPeerAssociated, starThreshClearEPDGCurrSess=starThreshClearEPDGCurrSess, starThreshClearDnsLookupSrvFailure=starThreshClearDnsLookupSrvFailure, starRPRegUpdDenyAdminProhib=starRPRegUpdDenyAdminProhib, starFNGSysSessCurrDormant=starFNGSysSessCurrDormant, starSessTtlRPRegAcceptInterPDSN=starSessTtlRPRegAcceptInterPDSN, starThreshPerServiceSGSNPdpSessions=starThreshPerServiceSGSNPdpSessions, starPDGSysSessCurrDormant=starPDGSysSessCurrDormant, starTestModeEntered=starTestModeEntered, starentFTPServ=starentFTPServ, starSessSub1ECSRulebase=starSessSub1ECSRulebase, starFNGBindPort=starFNGBindPort, starThreshClearGPRSPdpSessions=starThreshClearGPRSPdpSessions, starSGTPSerTable=starSGTPSerTable, starGPRSNseUp=starGPRSNseUp, starNwReachName=starNwReachName, starM3UAPSActive=starM3UAPSActive, starHENBGWServiceTLRI=starHENBGWServiceTLRI, starMIPFAStatEntry=starMIPFAStatEntry, starThreshClearDCCAUnknownRatingGroup=starThreshClearDCCAUnknownRatingGroup, starPCFRenewActiveRrqAccepted=starPCFRenewActiveRrqAccepted, starSessSub1IPv4SrcViolIgnored=starSessSub1IPv4SrcViolIgnored, starMIPFAStatRegRplRcvErrors=starMIPFAStatRegRplRcvErrors, starSessSub1ExtInlSrvrVPNName=starSessSub1ExtInlSrvrVPNName, starThreshMeasuredInt=starThreshMeasuredInt, starThreshClearCPUUtilization=starThreshClearCPUUtilization, starSessMgrFlowMemUsage=starSessMgrFlowMemUsage, starPPPStatLCPEchoTotalReq=starPPPStatLCPEchoTotalReq, starIKEv2DDOSAttackUDPFail=starIKEv2DDOSAttackUDPFail, starPCFStatCurrentDormantSessions=starPCFStatCurrentDormantSessions, starESMLCIpAddr1=starESMLCIpAddr1, starSystemStartup=starSystemStartup, starSessSub1CallDuration=starSessSub1CallDuration, starECSTotalDNSLearntIPv6ThresholdClear=starECSTotalDNSLearntIPv6ThresholdClear, starStorageServerClusIntfFail=starStorageServerClusIntfFail, starSessInProgLCPNeg=starSessInProgLCPNeg, starPPPStatDiscPPPKeepalive=starPPPStatDiscPPPKeepalive, starPCFEntry=starPCFEntry, starEnhancedCongestion=starEnhancedCongestion, starMMEEMBMSServiceServName=starMMEEMBMSServiceServName, starEISServerEntry=starEISServerEntry, starCPUSlot=starCPUSlot, starMIPHAStatRegReplyMnAuthFail=starMIPHAStatRegReplyMnAuthFail, starSmartLicenseServiceName=starSmartLicenseServiceName, starMIPFAStatRegDenPDSNHAAuth=starMIPFAStatRegDenPDSNHAAuth, starThreshClearEPDGIKEV2SetupSuccess=starThreshClearEPDGIKEV2SetupSuccess, starThreshPPPSetupFailRate=starThreshPPPSetupFailRate, starentE1Trib=starentE1Trib, starSessInProgMIPConn=starSessInProgMIPConn, starRPRegUnhandled=starRPRegUnhandled, starMMES1AssocVpnName=starMMES1AssocVpnName, starThreshClearIPPoolRelease=starThreshClearIPPoolRelease, starentSIPRoute=starentSIPRoute, starFNGSessCurrentIpv6Active=starFNGSessCurrentIpv6Active, starSessSub1MSID=starSessSub1MSID, starServiceServName=starServiceServName)
mibBuilder.exportSymbols("STARENT-MIB", starThreshClearCPUUtilization10Sec=starThreshClearCPUUtilization10Sec, starThreshEDRFileSpace=starThreshEDRFileSpace, starMIPFAStatRegRplRcvDereg=starMIPFAStatRegRplRcvDereg, starPDGSessCurrentIpv4Dormant=starPDGSessCurrentIpv4Dormant, starSessTtlLCPUp=starSessTtlLCPUp, starSessCurrPPPSessions=starSessCurrPPPSessions, starThreshClearPDSNSvcA11RACMsgDiscard=starThreshClearPDSNSvcA11RACMsgDiscard, starRPDoRxBytes=starRPDoRxBytes, starLACServiceStop=starLACServiceStop, starBLDBUpgradeError=starBLDBUpgradeError, starSessSub1ExtInlSrvrRxPkt=starSessSub1ExtInlSrvrRxPkt, starAlertTrapGroup=starAlertTrapGroup, starTimeTicks=starTimeTicks, starPPPStatMSChapAuthAttempt=starPPPStatMSChapAuthAttempt, starLogEntry=starLogEntry, starIPPoolName=starIPPoolName, starSubHomeAddr=starSubHomeAddr, starGSSCDRLossMeasured=starGSSCDRLossMeasured, starAAAAccServerUnreachable=starAAAAccServerUnreachable, starThreshClearBGPRoutes=starThreshClearBGPRoutes, starIKEv2DDOSAttackClearINITPeerFlood=starIKEv2DDOSAttackClearINITPeerFlood, StarQOSTPAction=StarQOSTPAction, starThreshIPSECIKEFailures=starThreshIPSECIKEFailures, starSBCServiceServName=starSBCServiceServName, starNPUARPPoolExhausted=starNPUARPPoolExhausted, starRPDoTxBytes=starRPDoTxBytes, starPCFDeniedBsnSessionInfoUnavail=starPCFDeniedBsnSessionInfoUnavail, starThreshClearIPPoolFree=starThreshClearIPPoolFree, starFractE1TribTu12=starFractE1TribTu12, starSessSub1IgnoreDFBit=starSessSub1IgnoreDFBit, starPDIFSessCurrentIpv4Active=starPDIFSessCurrentIpv4Active, starDiameterRlfThresholdGood=starDiameterRlfThresholdGood, starSDHLopUp=starSDHLopUp, starLogMsg=starLogMsg, starPCFInterPDSNHORrqAccepted=starPCFInterPDSNHORrqAccepted, starThreshClearNATPortChunks=starThreshClearNATPortChunks, starentCSCFPeerServer=starentCSCFPeerServer, starADCLicenseExpiryDate=starADCLicenseExpiryDate, starPDGBindIpAddress=starPDGBindIpAddress, starE1TribOperState=starE1TribOperState, starPDIFSessCurrentIpv6Active=starPDIFSessCurrentIpv6Active, starThreshClearPerServicePCCAFSessions=starThreshClearPerServicePCCAFSessions, starThreshAAAAcctArchive=starThreshAAAAcctArchive, starGtpuPathFailure=starGtpuPathFailure, starFNGSessCurrentDormant=starFNGSessCurrentDormant, starEISServerTable=starEISServerTable, starStorageServerDead=starStorageServerDead, starClosedRPServiceStop=starClosedRPServiceStop, starSIPRouteServerVmgName=starSIPRouteServerVmgName, starSessInProgLCPUp=starSessInProgLCPUp, starPDIFSessCurrentActive=starPDIFSessCurrentActive, starThreshEGTPCS5SetupFailRate=starThreshEGTPCS5SetupFailRate, starThreshEPDGIKEV2SetupAttempts=starThreshEPDGIKEV2SetupAttempts, starSxPathFailure=starSxPathFailure, starThreshIPPoolHold=starThreshIPPoolHold, starMIPFAStatRegDenPDSNRenewal=starMIPFAStatRegDenPDSNRenewal, starLAGGroup=starLAGGroup, starThreshClearPHSGWSessTimeout=starThreshClearPHSGWSessTimeout, starThreshAllTotalRoutesClear=starThreshAllTotalRoutesClear, starSS7M3UAPspId=starSS7M3UAPspId, starTetheringV6OSDatabaseUpgradeSuccessStatus=starTetheringV6OSDatabaseUpgradeSuccessStatus, starSIPRouteServerIpAddr=starSIPRouteServerIpAddr, starThreshPDSNSessions=starThreshPDSNSessions, starRPRegRecvRenew=starRPRegRecvRenew, starGSSTransportPath=starGSSTransportPath, starCBCAssocDown=starCBCAssocDown, starSGTPServName=starSGTPServName, starSxSelfAddr=starSxSelfAddr, starThreshPortRxUtil=starThreshPortRxUtil, starFNGSysSessCurrent=starFNGSysSessCurrent, starSessSub1LastResult=starSessSub1LastResult, starSGSNServiceStop=starSGSNServiceStop, starSLSServiceServName=starSLSServiceServName, starThreshClearNPUUtilization=starThreshClearNPUUtilization, starDiameterRlfECode=starDiameterRlfECode, starDHCPV6ServiceStart=starDHCPV6ServiceStart, starCgfDead=starCgfDead, starALCAPSerVpnID=starALCAPSerVpnID, starThreshClearAAAAcctFail=starThreshClearAAAAcctFail, starPDIFSysSessCurrDormant=starPDIFSysSessCurrDormant, starIPPoolGroupPctUsed=starIPPoolGroupPctUsed, starPCFServName=starPCFServName, starThreshClearDCCAProtocolErrors=starThreshClearDCCAProtocolErrors, starCardAttachment=starCardAttachment, starIKEv2ClearDOSAttack=starIKEv2ClearDOSAttack, starThreshIPSECTunEstabl=starThreshIPSECTunEstabl, starSessSub1PeakPPSRx=starSessSub1PeakPPSRx, starAAAAccServerReachable=starAAAAccServerReachable, starThreshDnsLookupSrvFailure=starThreshDnsLookupSrvFailure, starPCFDeniedSessionClosed=starPCFDeniedSessionClosed, starMIPFAStatRegDenTotal=starMIPFAStatRegDenTotal, starSWUpgradeComplete=starSWUpgradeComplete, starCGWServiceStart=starCGWServiceStart, starRPRegAirlinkSeqError=starRPRegAirlinkSeqError, starApsModeMismatch=starApsModeMismatch, starPDGEntry=starPDGEntry, starGTPCRLFVPNId=starGTPCRLFVPNId, starSessSub1ServiceName=starSessSub1ServiceName, starSessSub1AAAInterim=starSessSub1AAAInterim, starGPRSServiceStart=starGPRSServiceStart, starGPRSNsvci=starGPRSNsvci, starMIPFAStatRegAcceptDereg=starMIPFAStatRegAcceptDereg, starThreshPCCAFSessions=starThreshPCCAFSessions, starRP1xTxBytes=starRP1xTxBytes, starBSReachable=starBSReachable, starFractE1TribEntry=starFractE1TribEntry, starThreshDCCAUnknownRatingGroup=starThreshDCCAUnknownRatingGroup, starThreshClearPHSGWMaxEAPRetry=starThreshClearPHSGWMaxEAPRetry, starThreshGB=starThreshGB, starThreshPHSGWHandoffDenial=starThreshPHSGWHandoffDenial, starThreshStorageUtilization=starThreshStorageUtilization, starSessSub1CorrID=starSessSub1CorrID, starThreshBGPRoutes=starThreshBGPRoutes, starSGWServiceStart=starSGWServiceStart, starThreshClearContFiltBlock=starThreshClearContFiltBlock, starSubTable=starSubTable, starSGSNRMMemWarn=starSGSNRMMemWarn, starSessSub1SustPPSRx=starSessSub1SustPPSRx, starentSlots=starentSlots, starMIPFAStatDiscExpiry=starMIPFAStatDiscExpiry, starSWUpgradeStart=starSWUpgradeStart, starTaskRestart=starTaskRestart, starVIMServiceStart=starVIMServiceStart, starentVIMService=starentVIMService, starThreshClearSGSNPdpSessions=starThreshClearSGSNPdpSessions, starMIPFAStatRegReqSentDeregResend=starMIPFAStatRegReqSentDeregResend, starAAATtlAuthSuccess=starAAATtlAuthSuccess, starCardSPCSwitchoverFailed=starCardSPCSwitchoverFailed, starCLIRemoteIpAddr=starCLIRemoteIpAddr, starSessSub1InBytes=starSessSub1InBytes, starMIPFAStatRegAcceptRenewal=starMIPFAStatRegAcceptRenewal, starThreshClearPHSPCSleepModeTimeout=starThreshClearPHSPCSleepModeTimeout, starIPSECTunLocalIpAddr=starIPSECTunLocalIpAddr, starThreshPHSGWMaxEAPOLRetry=starThreshPHSGWMaxEAPOLRetry, starApsLossOfRedundancyClear=starApsLossOfRedundancyClear, starRPRegRecvInitial=starRPRegRecvInitial, starSGSNServiceStart=starSGSNServiceStart, starIPSPAllAddrsFree=starIPSPAllAddrsFree, starSessSub1AvePPSTx=starSessSub1AvePPSTx, starMIPFAStatRegDenPDSNMissHomeAddr=starMIPFAStatRegDenPDSNMissHomeAddr, starSessSub1PeakBPSRx=starSessSub1PeakBPSRx, starChassisThroughputOver=starChassisThroughputOver, starPDGBindPort=starPDGBindPort, starThreshAAAAcctArchiveQueue1=starThreshAAAAcctArchiveQueue1, starThreshPerServiceASNGWSessions=starThreshPerServiceASNGWSessions, starTaskFacility=starTaskFacility, starSessSub1HandoffTotal=starSessSub1HandoffTotal, starThreshClearHENBGWPagingMessages=starThreshClearHENBGWPagingMessages, starRPServiceOptionNum=starRPServiceOptionNum, starMIPFAStatRegReqSentDeregTotal=starMIPFAStatRegReqSentDeregTotal, starHNBGWServVpnID=starHNBGWServVpnID, starMIPFAStatVpnName=starMIPFAStatVpnName, starPDIFSessCurrentIpv6Dormant=starPDIFSessCurrentIpv6Dormant, starThreshClearHatHb5MinsLoss=starThreshClearHatHb5MinsLoss, starSlotMappingToSlot=starSlotMappingToSlot, starSessInProgCalls=starSessInProgCalls, starThreshClearPHSPCSessSetupTimeout=starThreshClearPHSPCSessSetupTimeout, starSGSServiceServName=starSGSServiceServName, starRPSecMissingRegUpdate=starRPSecMissingRegUpdate, starSessSub1AAAVPN=starSessSub1AAAVPN, starSmartLicenseEvalModeExpireClear=starSmartLicenseEvalModeExpireClear, starSmartLicenseCSSMConnectionFailClear=starSmartLicenseCSSMConnectionFailClear, starEGTPServiceStop=starEGTPServiceStop, starIuBcTcpConnDown=starIuBcTcpConnDown, starSubLongDurTimeoutAction=starSubLongDurTimeoutAction, starHENBGWServiceMMEServName=starHENBGWServiceMMEServName, starASNGWServiceStart=starASNGWServiceStart, starIPPoolGroupVpnName=starIPPoolGroupVpnName, starThreshHASvcRegReplyError=starThreshHASvcRegReplyError, starUplaneServiceStop=starUplaneServiceStop, starThreshEPDGIKEV2SetupFailure=starThreshEPDGIKEV2SetupFailure, starThreshClearAAAAcctArchiveQueue3=starThreshClearAAAAcctArchiveQueue3, starSlotVoltage5dot0HighThresh=starSlotVoltage5dot0HighThresh, starThreshClearASNGWSessions=starThreshClearASNGWSessions, starFanFailed=starFanFailed, starPPPStatSuccess=starPPPStatSuccess, starCLISessionStart=starCLISessionStart, starIuBcSelfPortNum=starIuBcSelfPortNum, starESMLCIpAddr2=starESMLCIpAddr2, starIPPoolGroupUsed=starIPPoolGroupUsed, starPMIPPathFailureClear=starPMIPPathFailureClear, starSIPRouteNomatch=starSIPRouteNomatch, starLawfulInterceptChanged=starLawfulInterceptChanged, starCardSPCSwitchoverComplete=starCardSPCSwitchoverComplete, starMIPHAStatDisconnects=starMIPHAStatDisconnects, starCongestionActionProfileName=starCongestionActionProfileName, starPortTable=starPortTable, starPDIFStatus=starPDIFStatus, starSessSub1ExtInlSrvrEgrVLANTag=starSessSub1ExtInlSrvrEgrVLANTag, starS102ServiceStart=starS102ServiceStart, starRMCPUOver=starRMCPUOver, starentAlertMan=starentAlertMan, starManagerFailure=starManagerFailure, starNPUMissedARPFramesClear=starNPUMissedARPFramesClear, starSessSub1AAAStart=starSessSub1AAAStart, starThreshPDSNCallSetupRate=starThreshPDSNCallSetupRate, starSessSub1IPv4ICMPDropPkt=starSessSub1IPv4ICMPDropPkt, starThreshEPDGIKEV2SetupFailureRate=starThreshEPDGIKEV2SetupFailureRate, starPCFDiscLcpRemote=starPCFDiscLcpRemote, starDiameterRlfDelayTolerance=starDiameterRlfDelayTolerance, starA11MgrCount=starA11MgrCount, starThreshDiameterRetryRate=starThreshDiameterRetryRate, starPHSPCServiceStop=starPHSPCServiceStop, starHSGWServiceStart=starHSGWServiceStart, starPPPStatReleasedRemote=starPPPStatReleasedRemote, starSlotVoltage1dot5=starSlotVoltage1dot5, starThreshPDSNSvcA11RRQMsgDiscard=starThreshPDSNSvcA11RRQMsgDiscard, starSRPStandby=starSRPStandby, starSxServiceStop=starSxServiceStop, starPTACActive=starPTACActive, starThreshCSCFSvcRouteFailure=starThreshCSCFSvcRouteFailure, starStorageTable=starStorageTable, starPPPStatInit=starPPPStatInit, starTetheringDatabaseUpgradeComment=starTetheringDatabaseUpgradeComment, starALCAPPathReset=starALCAPPathReset, starStorageServerUnackedGcdrFileGen=starStorageServerUnackedGcdrFileGen, starBLDBUpgradeErrorClear=starBLDBUpgradeErrorClear, starNpudriverECCError=starNpudriverECCError, starSessHNBGWPsNwName=starSessHNBGWPsNwName, starMAPServiceStart=starMAPServiceStart, starThreshFWDropPacket=starThreshFWDropPacket, starFMDCallRateUnderControl=starFMDCallRateUnderControl, starDhcpAlive=starDhcpAlive, starImsimgrInstId=starImsimgrInstId, starThreshClearTpoLowCompressionGain=starThreshClearTpoLowCompressionGain, starThreshClearEDRFileSpace=starThreshClearEDRFileSpace, starFNGSysChildSACurrent=starFNGSysChildSACurrent, starThreshClearAAAAcctArchiveQueue1=starThreshClearAAAAcctArchiveQueue1, starHENBGWServiceServName=starHENBGWServiceServName, starVIMServiceFMDMaxCallRate=starVIMServiceFMDMaxCallRate, starSS7CauseString=starSS7CauseString, starCBCAssocUp=starCBCAssocUp, starPCFRenewRrqDiscarded=starPCFRenewRrqDiscarded, starMIPFAStatSvcID=starMIPFAStatSvcID, starBfdSrcAddress=starBfdSrcAddress, starCHATCONFServiceStop=starCHATCONFServiceStop, starPDGStatus=starPDGStatus, starThreshClearIPSECTunSetup=starThreshClearIPSECTunSetup, starServiceVpnID=starServiceVpnID, starNwReachSrvrAddr=starNwReachSrvrAddr, starGSSClusterToNode=starGSSClusterToNode, starPortRxDiscards=starPortRxDiscards, starMMES1PathSelfPort=starMMES1PathSelfPort, starCLIMaxCount=starCLIMaxCount, starRPRegUpdTotal=starRPRegUpdTotal, starSessSub1LongDurAction=starSessSub1LongDurAction, starentA11Mgr=starentA11Mgr, starPCFDeregRrqDiscarded=starPCFDeregRrqDiscarded, starentNwReachServer=starentNwReachServer, starADCLicenseExpired=starADCLicenseExpired, starThreshNATPktDrop=starThreshNATPktDrop, starFanTable=starFanTable, starCLIActiveCount=starCLIActiveCount, starPCFDeniedAdmProh=starPCFDeniedAdmProh)
mibBuilder.exportSymbols("STARENT-MIB", starASNPCServiceStop=starASNPCServiceStop, starMIPFAStatRegRplRcvRenewal=starMIPFAStatRegRplRcvRenewal, starEGTPPeerPort=starEGTPPeerPort, starThreshCallSetup=starThreshCallSetup, starSessSub1HomeAgentIpAddr=starSessSub1HomeAgentIpAddr, starSessSub1DownExceed=starSessSub1DownExceed, starFanStatus=starFanStatus, starMIPFAStatRegRelayedInitial=starMIPFAStatRegRelayedInitial, starSGTPVpnName=starSGTPVpnName, starentIPPoolGroup=starentIPPoolGroup, starSessGTPPGroupName=starSessGTPPGroupName, starPCFRegUpdateRpLifetimeExpiry=starPCFRegUpdateRpLifetimeExpiry, starentPDGService=starentPDGService, starentPDIFService=starentPDIFService, starPDGSessCurrent=starPDGSessCurrent, starThreshLagTxUtil=starThreshLagTxUtil, starIPSECPriTunDown=starIPSECPriTunDown, starPCFDiscMaxIpv6cpRetr=starPCFDiscMaxIpv6cpRetr, starSDHTable=starSDHTable, starSessSub1UpViolateAction=starSessSub1UpViolateAction, starThreshFNGCurrSess=starThreshFNGCurrSess, starThreshClearControlPlaneMonitor5MinsLoss=starThreshClearControlPlaneMonitor5MinsLoss, starThreshClearPDGCurrActSess=starThreshClearPDGCurrActSess, starTaskCPU=starTaskCPU, starCPUMemoryFailed=starCPUMemoryFailed, starDiameterServerReachable=starDiameterServerReachable, starIPPoolRelease=starIPPoolRelease, starPCCNtfyIntfPeerReachable=starPCCNtfyIntfPeerReachable, starSessSub1PeerIpAddr=starSessSub1PeerIpAddr, starPPPStatRecvErrBadCtrlField=starPPPStatRecvErrBadCtrlField, starPCFDiscRpRemote=starPCFDiscRpRemote, starChassisMinorCO=starChassisMinorCO, starIPSECTunRemoteIpAddr=starIPSECTunRemoteIpAddr, starDiameterCapabilitiesExchangeSuccess=starDiameterCapabilitiesExchangeSuccess, starFNGSysStatus=starFNGSysStatus, starIPPoolGroupFree=starIPPoolGroupFree, starSxInterfaceType=starSxInterfaceType, starESMLCPortNum=starESMLCPortNum, starSDHPathTable=starSDHPathTable, starHNBGWSGSNRanapReset=starHNBGWSGSNRanapReset, starFNGBindIpPort=starFNGBindIpPort, starThreshCSCFSvcErrorRegAuth=starThreshCSCFSvcErrorRegAuth, starSPRServerUnreachable=starSPRServerUnreachable, starAlertSendingEnabled=starAlertSendingEnabled, starThreshNATPortChunks=starThreshNATPortChunks, starPCFStatRxBytes=starPCFStatRxBytes, starGGSNSerTable=starGGSNSerTable, starSessSub1IPv4ProxyDNSRedir=starSessSub1IPv4ProxyDNSRedir, starCSCFPeerServerUnavailable=starCSCFPeerServerUnavailable, starMVGPeerUp=starMVGPeerUp, starTetheringUADatabaseUpgradeFailureStatus=starTetheringUADatabaseUpgradeFailureStatus, starSessGGSNVpnName=starSessGGSNVpnName, starSessSub1TunnelType=starSessSub1TunnelType, starIKEv2DDOSAttackINITPeerFlood=starIKEv2DDOSAttackINITPeerFlood, starPassedAudits=starPassedAudits, starPDGBindIpPort=starPDGBindIpPort, starMIPFAStatRegDenPDSNUnknChallenge=starMIPFAStatRegDenPDSNUnknChallenge, starPortRxBytes=starPortRxBytes, starGgsnInitiatedUpdtFailed=starGgsnInitiatedUpdtFailed, starVLRIpAddr2=starVLRIpAddr2, starCPUMemUsed=starCPUMemUsed, starIPMSServerVpnID=starIPMSServerVpnID, starPowerFilterUnitAvail=starPowerFilterUnitAvail, starThreshClearCallSetupFailure=starThreshClearCallSetupFailure, starThreshMMESessions=starThreshMMESessions, starentFractE1Trib=starentFractE1Trib, starIKEv2ClearDDOSAttackUDPFailPeer=starIKEv2ClearDDOSAttackUDPFailPeer, starPCFRegUpdateUpperLayerIntiated=starPCFRegUpdateUpperLayerIntiated, starGPRSBvci=starGPRSBvci, starThreshEPDGIKEV2SetupSuccess=starThreshEPDGIKEV2SetupSuccess, starThreshAAAAcctFail=starThreshAAAAcctFail, starStorageServerAlive=starStorageServerAlive, starThreshClearPerServicePCCQuotaSessions=starThreshClearPerServicePCCQuotaSessions, starIPSECGroupName=starIPSECGroupName, starPeerAddress=starPeerAddress, starMVGCauseCode=starMVGCauseCode, starSessSub1OutBytesDropped=starSessSub1OutBytesDropped, LogLevelChanged=LogLevelChanged, StarShortID=StarShortID, starThreshContFiltRating=starThreshContFiltRating, starPCCAFServiceStart=starPCCAFServiceStart, starThreshClearCDRFileSpace=starThreshClearCDRFileSpace, starStorageServerClusIntfOK=starStorageServerClusIntfOK, starThreshClearMAGSetupBindingUpdateDenyRate=starThreshClearMAGSetupBindingUpdateDenyRate, starMIPFAStatRegDenPDSNHANetUnreach=starMIPFAStatRegDenPDSNHANetUnreach, starCLITable=starCLITable, starPCFStatCurrentActiveSessions=starPCFStatCurrentActiveSessions, starPCFDiscAuthFail=starPCFDiscAuthFail, starPortRxFrames=starPortRxFrames, starentHNBGWService=starentHNBGWService, starRPDiscInternalBounce=starRPDiscInternalBounce, starThreshClearFNGCurrActSess=starThreshClearFNGCurrActSess, starThreshASNGWNWEntryDenial=starThreshASNGWNWEntryDenial, starSmartLicenseServiceOOCClear=starSmartLicenseServiceOOCClear, starThreshHASvcCallSetupRate=starThreshHASvcCallSetupRate, starentService=starentService, starPDGServiceStop=starPDGServiceStop, starChassisCriticalCO=starChassisCriticalCO, starPPPStatVpnName=starPPPStatVpnName, starESMLCAllAssocDown=starESMLCAllAssocDown, starThreshClearCardTemperaturePowerOffLimit=starThreshClearCardTemperaturePowerOffLimit, starHENBGWServiceVpnName=starHENBGWServiceVpnName, starCPUIRQ=starCPUIRQ, starEgtpuPathFailureClear=starEgtpuPathFailureClear, starHENBGWMMESCTPAssocDestAddrUp=starHENBGWMMESCTPAssocDestAddrUp, starPPPStatMSChapAuthFail=starPPPStatMSChapAuthFail, starRaidStarted=starRaidStarted, starDhcpServiceStopped=starDhcpServiceStopped, starThreshIPSECTunSetup=starThreshIPSECTunSetup, starPCFDeniedUnSpeReason=starPCFDeniedUnSpeReason, starThreshClearPDIFCurrSess=starThreshClearPDIFCurrSess, starSessSub1ConnectTime=starSessSub1ConnectTime, starDiameterIpv6PeerDown=starDiameterIpv6PeerDown, starSerdesLanePermDown=starSerdesLanePermDown, starHATtlDereg=starHATtlDereg, starBLUpgradeFilename=starBLUpgradeFilename, starThreshSGSNSessions=starThreshSGSNSessions, starThreshClearAAAAcctArchive=starThreshClearAAAAcctArchive, starECSTotalDNSLearntIPv4ThresholdClear=starECSTotalDNSLearntIPv4ThresholdClear, starThreshVRFFramedRoutesClear=starThreshVRFFramedRoutesClear, starSessSub1DestVPN=starSessSub1DestVPN, starCSCFPeerServerListName=starCSCFPeerServerListName, starThreshASNGWSessions=starThreshASNGWSessions, starentFeedback=starentFeedback, starBGPPeerUnreachable=starBGPPeerUnreachable, starRPDiscSessAbsent=starRPDiscSessAbsent, starPPPStatFailed=starPPPStatFailed, starNPUNPUNumber=starNPUNPUNumber, starECSTotalDNSLearntIPThresholdInstance=starECSTotalDNSLearntIPThresholdInstance, starPCFRenewRrqDenied=starPCFRenewRrqDenied, starPPPStatSvcID=starPPPStatSvcID, starSlotNumPorts=starSlotNumPorts, starMIPFAStatRegRecvInitial=starMIPFAStatRegRecvInitial, starPCFRrqAccepted=starPCFRrqAccepted, starLoginFailure=starLoginFailure, starLongDurTimerExpiry=starLongDurTimerExpiry, starChassisMajorCO=starChassisMajorCO, starPDGSysChildSACurrent=starPDGSysChildSACurrent, starSessSub1IPv4BadHdr=starSessSub1IPv4BadHdr, starThreshIPPoolRelease=starThreshIPPoolRelease, starSessTtlKeepFail=starSessTtlKeepFail, starMMES1AssocEntry=starMMES1AssocEntry, starRPDiscInpuQueueExceeded=starRPDiscInpuQueueExceeded, starL2TPPeerTunnelID=starL2TPPeerTunnelID, starPortDown=starPortDown, starPortUp=starPortUp, starGSSClusterRgName=starGSSClusterRgName, starNwReachEntry=starNwReachEntry, starBLFilename=starBLFilename, starPortNum=starPortNum, starRPRegRecvTotal=starRPRegRecvTotal, starDynPkgUpgradeFilename=starDynPkgUpgradeFilename, starThreshClearPDSNSvcA11RRPFailure=starThreshClearPDSNSvcA11RRPFailure, starGILANServiceStop=starGILANServiceStop, starPPPStatIpcpEntered=starPPPStatIpcpEntered, starSessSub1AveBPSRx=starSessSub1AveBPSRx, starFATtlArrived=starFATtlArrived, starPDGSvcID=starPDGSvcID, starSessSub1DownExceedAction=starSessSub1DownExceedAction, starCardDown=starCardDown, starECSreaddressServerDown=starECSreaddressServerDown, starThreshClearPCCPolicySessions=starThreshClearPCCPolicySessions, starThreshClearHASvcReregReplyError=starThreshClearHASvcReregReplyError, starPCFDiscMisc=starPCFDiscMisc, starIPPoolID=starIPPoolID, starSessSub1OutPacketsDropped=starSessSub1OutPacketsDropped, starFNGServiceStart=starFNGServiceStart, starFTPServVpnID=starFTPServVpnID, starRPDiscAuthFail=starRPDiscAuthFail, starThreshDCCAProtocolErrors=starThreshDCCAProtocolErrors, starEISServerDead=starEISServerDead, starSessSub1NAI=starSessSub1NAI, starThreshPerServiceSAMOGSessions=starThreshPerServiceSAMOGSessions, starThreshCSCFSvcTotalCallFailure=starThreshCSCFSvcTotalCallFailure, starM3UAPSPCongestionCleared=starM3UAPSPCongestionCleared, starentMIPFA=starentMIPFA, starLACServiceStart=starLACServiceStart, starSGSNSerSvcID=starSGSNSerSvcID, starentMIBConformance=starentMIBConformance, starVLRAllAssocDownClear=starVLRAllAssocDownClear, starSessSGSNHlrNum=starSessSGSNHlrNum, starSessSub1UpBurstSize=starSessSub1UpBurstSize, starSessInProgDisc=starSessInProgDisc, starPPPStatReneg=starPPPStatReneg, PYSNMP_MODULE_ID=starentMIB, starFractE1TribPath=starFractE1TribPath, starSessMgrTotalFlowCount=starSessMgrTotalFlowCount, starRPRegUpdRetrans=starRPRegUpdRetrans, starThreshClearHSGWSessions=starThreshClearHSGWSessions, starSessSub1DormancyTotal=starSessSub1DormancyTotal, starPCFSessionsReneg=starPCFSessionsReneg, starChassisThroughputMeasured=starChassisThroughputMeasured, starentIPMSServer=starentIPMSServer, starFractE1TribSlot=starFractE1TribSlot, starECSTotalDNSLearntIPv4Threshold=starECSTotalDNSLearntIPv4Threshold, starThreshClearCPUOrbsWarn=starThreshClearCPUOrbsWarn, starCPUWatchDogExpired=starCPUWatchDogExpired, starThreshFWDenyRule=starThreshFWDenyRule, starThreshClearFWDosAttack=starThreshClearFWDosAttack, starEnhancedCongestionClear=starEnhancedCongestionClear, starSessSub1ProxyMIP=starSessSub1ProxyMIP, starServiceLossPTACs=starServiceLossPTACs, starPowerEntry=starPowerEntry, starSxPeerOldRecTimeStamp=starSxPeerOldRecTimeStamp, starLogTable=starLogTable, starLogText=starLogText, starSIPRouteEntry=starSIPRouteEntry, StarShortName=StarShortName, starIPSecNodeIpv6PeerDown=starIPSecNodeIpv6PeerDown, starThreshClearPortSpecTxUtil=starThreshClearPortSpecTxUtil, starLicenseExpired=starLicenseExpired, starCardRCCFailed=starCardRCCFailed, starMIPHAStatRegRecvDereg=starMIPHAStatRegRecvDereg, starMIPHAStatRegRecvRenew=starMIPHAStatRegRecvRenew, starThreshVRFTotalRoutes=starThreshVRFTotalRoutes, starSIPRouteTable=starSIPRouteTable, starHNBGWServiceStop=starHNBGWServiceStop, starThreshMB=starThreshMB, starSIPRouteVpnID=starSIPRouteVpnID, starRPRegUpdDiscard=starRPRegUpdDiscard, starThreshTpoLowCompressionGain=starThreshTpoLowCompressionGain, starMIPHAStatVpnName=starMIPHAStatVpnName, starSCTPAssociationFail=starSCTPAssociationFail, starThreshClearCSCFSvcRegRcvdRate=starThreshClearCSCFSvcRegRcvdRate, starDiameterServerUnreachable=starDiameterServerUnreachable, starGPRSNseDown=starGPRSNseDown, starPDIFSysNumService=starPDIFSysNumService, starThreshClearPHSGWAuthFail=starThreshClearPHSGWAuthFail, starThreshHNBGWIuSess=starThreshHNBGWIuSess, starSessHNBGWVpnName=starSessHNBGWVpnName, starSIPRouteServerUnavailable=starSIPRouteServerUnavailable, starOSPFNeighborFull=starOSPFNeighborFull, starHdRaidMgmtCardSwitchover=starHdRaidMgmtCardSwitchover, starIPPoolMaskorEndAddr=starIPPoolMaskorEndAddr, starPDGBindSlot=starPDGBindSlot, starBGPPeerSessionUp=starBGPPeerSessionUp, starAAATtlAuthRequests=starAAATtlAuthRequests, starChassisPeakCpuUsage=starChassisPeakCpuUsage, starTechSuppPasswdChanged=starTechSuppPasswdChanged, starThreshClearSessCPUThroughput=starThreshClearSessCPUThroughput, starSessInProgActiveCalls=starSessInProgActiveCalls, starM3UAPSDown=starM3UAPSDown, starGSSClusterRsName=starGSSClusterRsName, starPCFRegUpdTransmitted=starPCFRegUpdTransmitted, starSmartLicenseFeatureOOCClear=starSmartLicenseFeatureOOCClear, starMIPFAStatRegDenHARevRunUnavail=starMIPFAStatRegDenHARevRunUnavail, starCSCFPeerServerVpnID=starCSCFPeerServerVpnID, starThreshPDGCurrActSess=starThreshPDGCurrActSess, starCLISessionEnd=starCLISessionEnd, starL3AddrUnreachable=starL3AddrUnreachable, starRP1xRxBytes=starRP1xRxBytes, starPCFRegUpdateOtherReason=starPCFRegUpdateOtherReason, starIPSECContextName=starIPSECContextName, starThreshClearCPULoad=starThreshClearCPULoad)
mibBuilder.exportSymbols("STARENT-MIB", starThreshClearControlPlaneMonitor60MinsLoss=starThreshClearControlPlaneMonitor60MinsLoss, starMIPFAStatRegDenPDSNEncapUnav=starMIPFAStatRegDenPDSNEncapUnav, starCardSwitchoverComplete=starCardSwitchoverComplete, starMIPFAStatDiscAdmin=starMIPFAStatDiscAdmin, starFNGSessCurrentActive=starFNGSessCurrentActive, starPhyPortId=starPhyPortId, starPDGVpnID=starPDGVpnID, starGPRSLinkTable=starGPRSLinkTable, starGTPCRLFCurrAppTPS=starGTPCRLFCurrAppTPS, starNTPSyncLost=starNTPSyncLost, starentMIBCompliance2=starentMIBCompliance2, starentPolledLog=starentPolledLog, starThreshAllFramedRoutes=starThreshAllFramedRoutes, starMIPFAStatRegRplSentBadReq=starMIPFAStatRegRplSentBadReq, starMIPFAStatRegRplSentMissNAI=starMIPFAStatRegRplSentMissNAI, starSessSub1DHCPServIPAddr=starSessSub1DHCPServIPAddr, starSlotType=starSlotType, starThreshPCCQuotaSessions=starThreshPCCQuotaSessions, starentRP=starentRP, starSubTimerDuration=starSubTimerDuration, starNeedADCLicense=starNeedADCLicense, starBLDBErrorClear=starBLDBErrorClear, starThreshIPSECCallReqRej=starThreshIPSECCallReqRej, starThreshClearPCCQuotaSessions=starThreshClearPCCQuotaSessions, starALCAPPathUnBlock=starALCAPPathUnBlock, starCardVoltageFailure=starCardVoltageFailure, starMMES1PathPeerPort=starMMES1PathPeerPort, starSubHomeAddrv6=starSubHomeAddrv6, starSGTPSerVpnID=starSGTPSerVpnID, starCertSerialNumber=starCertSerialNumber, starThreshClearASNGWSessTimeout=starThreshClearASNGWSessTimeout, starPMIPVpnName=starPMIPVpnName, starChassisAudibleAlarm=starChassisAudibleAlarm, starMIPFAStatRegRecvTotal=starMIPFAStatRegRecvTotal, starOverloadService=starOverloadService, starSessSub1OutBytes=starSessSub1OutBytes, starRPServiceOptionTable=starRPServiceOptionTable, starFNGServiceStop=starFNGServiceStop, starServiceSvcID=starServiceSvcID, starCardSWFailed=starCardSWFailed, starCardMismatch=starCardMismatch, starPPPStatIpcpFailUnknown=starPPPStatIpcpFailUnknown, starSxPathFailureClear=starSxPathFailureClear, starE1TribPort=starE1TribPort, starPCFRenewDormantRrqAccepted=starPCFRenewDormantRrqAccepted, starThreshClearPHSGWHandoffDenial=starThreshClearPHSGWHandoffDenial, starSWUpgradeAborted=starSWUpgradeAborted, starVLRName=starVLRName, StarENBID=StarENBID, starSessMgrFlowCount=starSessMgrFlowCount, starPPPStatTable=starPPPStatTable, starRPRegAcceptDereg=starRPRegAcceptDereg)
