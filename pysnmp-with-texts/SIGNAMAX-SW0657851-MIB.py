#
# PySNMP MIB module SIGNAMAX-SW0657851-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SIGNAMAX-SW0657851-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, iso, Unsigned32, ModuleIdentity, Integer32, TimeTicks, Bits, ObjectIdentity, Gauge32, enterprises, MibIdentifier, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "iso", "Unsigned32", "ModuleIdentity", "Integer32", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "enterprises", "MibIdentifier", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
signamax = ModuleIdentity((1, 3, 6, 1, 4, 1, 5205))
if mibBuilder.loadTexts: signamax.setLastUpdated('200812240000Z')
if mibBuilder.loadTexts: signamax.setOrganization('Signamax LLC')
if mibBuilder.loadTexts: signamax.setContactInfo('')
if mibBuilder.loadTexts: signamax.setDescription('The MIB module is for Signamax LLC.')
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2))
sw0657851ProductID = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34))
sw0657851Produces = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1))
sw0657851System = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1))
sw0657851CommonSys = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1))
sw0657851Reboot = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Reboot.setStatus('current')
if mibBuilder.loadTexts: sw0657851Reboot.setDescription('Reboot the system. Get this OID always return zero. 0 - do nothing 1 - Reboot without saving start 2 - Reboot with saving start')
sw0657851BiosVsersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851BiosVsersion.setStatus('current')
if mibBuilder.loadTexts: sw0657851BiosVsersion.setDescription('Get the BIOS version of the system.')
sw0657851FirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851FirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sw0657851FirmwareVersion.setDescription('Get the firmware version of the system.')
sw0657851HardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851HardwareVersion.setStatus('current')
if mibBuilder.loadTexts: sw0657851HardwareVersion.setDescription('Get the hardware version of the system.')
sw0657851MechanicalVersion = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MechanicalVersion.setStatus('current')
if mibBuilder.loadTexts: sw0657851MechanicalVersion.setDescription('Get the mechanical version of the system.')
sw0657851SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SerialNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851SerialNumber.setDescription('Get the Serial number of the system.')
sw0657851HostMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851HostMacAddress.setStatus('current')
if mibBuilder.loadTexts: sw0657851HostMacAddress.setDescription('Get the MAC address of the system.')
sw0657851DevicePort = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851DevicePort.setStatus('current')
if mibBuilder.loadTexts: sw0657851DevicePort.setDescription('Get the quantity of ports that this system owns now.')
sw0657851RamSize = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851RamSize.setStatus('current')
if mibBuilder.loadTexts: sw0657851RamSize.setDescription('Get the RAM size of the system.')
sw0657851FlashSize = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851FlashSize.setStatus('current')
if mibBuilder.loadTexts: sw0657851FlashSize.setDescription('Get the flash size of the system.')
sw0657851DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DeviceName.setStatus('current')
if mibBuilder.loadTexts: sw0657851DeviceName.setDescription('Get the flash size of the Device Name.')
sw0657851SystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SystemDescription.setStatus('current')
if mibBuilder.loadTexts: sw0657851SystemDescription.setDescription('Get the flash size of the System Description.')
sw0657851IP = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 2))
sw0657851DhcpSetting = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DhcpSetting.setStatus('current')
if mibBuilder.loadTexts: sw0657851DhcpSetting.setDescription('Get/Set DHCP status of the system. 0 - DHCP disable 1 - DHCP enable')
sw0657851IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IPAddress.setStatus('current')
if mibBuilder.loadTexts: sw0657851IPAddress.setDescription("Get/Set the IP address of the system. You can't set this OID if DHCP status is enabled.")
sw0657851NetMask = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851NetMask.setStatus('current')
if mibBuilder.loadTexts: sw0657851NetMask.setDescription("Get/Set the subnet mask of the system. You can't set this OID if DHCP status is enabled.")
sw0657851DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DefaultGateway.setStatus('current')
if mibBuilder.loadTexts: sw0657851DefaultGateway.setDescription("Get/Set the default gateway of the system. You can't set this OID if DHCP status is enabled.")
sw0657851DnsSetting = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DnsSetting.setStatus('current')
if mibBuilder.loadTexts: sw0657851DnsSetting.setDescription("Get/Set the source of DNS server. You can't set this OID if DHCP status is disabled. 0 - manual, the DNS server is from manual setting 1 - auto, the DNS server is assigned by DHCP server.")
sw0657851DnsServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DnsServer.setStatus('current')
if mibBuilder.loadTexts: sw0657851DnsServer.setDescription('Get/Set the DNS server of the system.')
sw0657851Time = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3))
sw0657851SystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SystemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851SystemCurrentTime.setDescription('Get the current time of the system.')
sw0657851ManualTimeSetting = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManualTimeSetting.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManualTimeSetting.setDescription("Get/Set the system time of the device. The input format is 'Year/Month/Day/Hour/Minute/Second'. ex: 2004/1/1/12/34/25 means 2004/1/1 - 12:24:25 . The value range: Year : 2000 - 2036, Mouth : 1 - 12, Day : 1 - 31, Hour : 0 - 23, Minute : 0 - 59, Sec : 0 - 59.")
sw0657851NTPServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851NTPServer.setStatus('current')
if mibBuilder.loadTexts: sw0657851NTPServer.setDescription('Get/Set the NTP Time Server. You can use the IP address or domain name.')
sw0657851NTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851NTPTimeZone.setStatus('current')
if mibBuilder.loadTexts: sw0657851NTPTimeZone.setDescription('Get/Set the NTP Time Zone. The value range is between -12 and 13 -12 - GMT -12:00, -11 - GMT -11:00, -10 - GMT -10:00, -9 - GMT -09:00, -8 - GMT -08:00, -7 - GMT -07:00, -6 - GMT -06:00, -5 - GMT -05:00, -4 - GMT -04:00, -3 - GMT -03:00, -2 - GMT -02:00, -1 - GMT -01:00, 0 - GMT +00:00, 1 - GMT +01:00, 2 - GMT +02:00, 3 - GMT +03:00, 4 - GMT +04:00, 5 - GMT +05:00, 6 - GMT +06:00, 7 - GMT +07:00, 8 - GMT +08:00, 9 - GMT +09:00, 10 - GMT +10:00, 11 - GMT +11:00, 12 - GMT +12:00, 13 - GMT +13:00. ')
sw0657851NTPTimeSync = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851NTPTimeSync.setStatus('current')
if mibBuilder.loadTexts: sw0657851NTPTimeSync.setDescription('Sync time from NTP Server. Get this OID always return zero. Set the Time Server and Time Zone before doing time sync. Notice that time server must be correct! The value range (0|1): 1 - sync. 0 - do nothing.')
sw0657851DaylightSavingTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DaylightSavingTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851DaylightSavingTime.setDescription('Get/Set the daylight saving time. The value range is between -5 and 5. (Unit: hour)')
sw0657851DaylightStartTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DaylightStartTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851DaylightStartTime.setDescription("Get/Set the Start time of Daylight Saving. The input format is 'MM/DD/HH', and daylight saving start month can't equal end month. example: month/day/hour 10/01/00 month: 01~12, day: 01~31, hour: 00~23 .")
sw0657851DaylightEndTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DaylightEndTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851DaylightEndTime.setDescription("Get/Set the End time of Daylight Saving. The input format is 'MM/DD/HH', and daylight saving start month can't equal end month. example: month/day/hour 04/01/00 month: 01~12, day: 01~31, hour: 00~23 .")
sw0657851Account = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4))
sw0657851AccountNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851AccountNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountNumber.setDescription('Get the current account number(s) of the system.')
sw0657851AccountTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 2), )
if mibBuilder.loadTexts: sw0657851AccountTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountTable.setDescription('This is a list of SW0657851AccountEntry. The numbers of entries are given by the value of sw0657851AccountNumber.')
sw0657851AccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851AccountIndex"))
if mibBuilder.loadTexts: sw0657851AccountEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountEntry.setDescription('This is the Entry(s) for account information.')
sw0657851AccountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851AccountIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountIndex.setDescription('This is the index of the account entry.')
sw0657851AccountAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851AccountAuthorization.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountAuthorization.setDescription('This is the authorization of the account entry.')
sw0657851AccountName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AccountName.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountName.setDescription('This is the username of the account entry.')
sw0657851AccountPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AccountPassword.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountPassword.setDescription("This is the password of the account entry. The return value is always '********'.")
sw0657851AccountAddName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AccountAddName.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountAddName.setDescription('This is the account name for adding operation.')
sw0657851AccountAddPassword = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AccountAddPassword.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountAddPassword.setDescription("This is the account password for adding operation. The return value is always '********'.")
sw0657851DoAccountAdd = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DoAccountAdd.setStatus('current')
if mibBuilder.loadTexts: sw0657851DoAccountAdd.setDescription('Add account name. OID sw0657851AccountAddName and sw0657851AccountAddPassword must be filled first. Get this OID always return zero. 1 - add account. 0 - do nothing.')
sw0657851AccountDel = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AccountDel.setStatus('current')
if mibBuilder.loadTexts: sw0657851AccountDel.setDescription("Delete account. The value is valid sw0657851AccountIndex(Can't delete administrator).")
sw0657851Snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2))
sw0657851GetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GetCommunity.setStatus('current')
if mibBuilder.loadTexts: sw0657851GetCommunity.setDescription('Get/Set the get-community of the SNMP.')
sw0657851SetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851SetCommunity.setStatus('current')
if mibBuilder.loadTexts: sw0657851SetCommunity.setDescription('Get/Set the set-community of the SNMP.')
sw0657851TrapHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851TrapHostNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrapHostNumber.setDescription('Get the number of trap hosts.')
sw0657851TrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 4), )
if mibBuilder.loadTexts: sw0657851TrapHostTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrapHostTable.setDescription('A list of trap host entry. The numbers of entries are given by the value of sw0657851TrapHostNumber.')
sw0657851TrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 4, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851TrapHostIndex"))
if mibBuilder.loadTexts: sw0657851TrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrapHostEntry.setDescription('This is the entry information for trap host.')
sw0657851TrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851TrapHostIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrapHostIndex.setDescription('The index of the trap host entry.')
sw0657851TrapHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TrapHostIP.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrapHostIP.setDescription('This is the IP of the trap host.')
sw0657851TrapHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TrapHostPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrapHostPort.setDescription('This is the receiving-port number of the trap host.')
sw0657851TrapHostCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 2, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TrapHostCommunity.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrapHostCommunity.setDescription('The community name for the trap PDU.')
sw0657851Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3))
sw0657851Event = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1))
sw0657851EventNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851EventNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851EventNumber.setDescription('Get the total number of alarm events.')
sw0657851EventTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1, 2), )
if mibBuilder.loadTexts: sw0657851EventTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851EventTable.setDescription('This is a list of alarm event entry. The numbers of entries are given by the value of sw0657851EventNumber.')
sw0657851EventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851EventIndex"))
if mibBuilder.loadTexts: sw0657851EventEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851EventEntry.setDescription('This is the entry information for alarm event.')
sw0657851EventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851EventIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851EventIndex.setDescription('This is the index of the alarm event entry.')
sw0657851EventName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851EventName.setStatus('current')
if mibBuilder.loadTexts: sw0657851EventName.setDescription('This is the alarm event name.')
sw0657851EventSendEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851EventSendEmail.setStatus('current')
if mibBuilder.loadTexts: sw0657851EventSendEmail.setDescription('Send email when alarm event is triggered.')
sw0657851EventSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851EventSendTrap.setStatus('current')
if mibBuilder.loadTexts: sw0657851EventSendTrap.setDescription('Send trap when alarm event is triggered.')
sw0657851Email = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2))
sw0657851EmailServer = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851EmailServer.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailServer.setDescription('This is the SMTP server for alarm event.')
sw0657851EmailUsername = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851EmailUsername.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailUsername.setDescription('This is the Username of SMTP server.')
sw0657851EmailPassword = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851EmailPassword.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailPassword.setDescription('This is the User Password of SMTP server.')
sw0657851EmailUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851EmailUserNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailUserNumber.setDescription('The number of the email users that you want to send the alarm notification.')
sw0657851EmailUserTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 5), )
if mibBuilder.loadTexts: sw0657851EmailUserTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailUserTable.setDescription('This is a list of email user entry. The numbers of entries are given by the value of sw0657851EmailUserNumber.')
sw0657851EmailUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 5, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851EmailUserIndex"))
if mibBuilder.loadTexts: sw0657851EmailUserEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailUserEntry.setDescription('This is the Entry information for email user entry.')
sw0657851EmailUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851EmailUserIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailUserIndex.setDescription('This is the index of the email user entry.')
sw0657851EmailUserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 3, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851EmailUserAddress.setStatus('current')
if mibBuilder.loadTexts: sw0657851EmailUserAddress.setDescription('This is the email address of the email user entry.')
sw0657851Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5))
sw0657851SaveRestore = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 1))
sw0657851SaveStart = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851SaveStart.setStatus('current')
if mibBuilder.loadTexts: sw0657851SaveStart.setDescription('Save current configuration into flash memory (Save as Start Configuration). Get this OID always return zero. 1 - save. 0 - do nothing. ')
sw0657851SaveUser = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851SaveUser.setStatus('current')
if mibBuilder.loadTexts: sw0657851SaveUser.setDescription('Save current configuration into flash memory (Save as User Configuration). Get this OID always return zero. 1 - save. 0 - do nothing. ')
sw0657851RestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851RestoreDefault.setStatus('current')
if mibBuilder.loadTexts: sw0657851RestoreDefault.setDescription('Restore factory default configuration. Get this OID always return zero. 2 - restore default included default ip address. 1 - restore default without changing current ip address. 0 - do nothing. ')
sw0657851RestoreUser = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851RestoreUser.setStatus('current')
if mibBuilder.loadTexts: sw0657851RestoreUser.setDescription('Restore user configuration. Get this OID always return zero. 1 - restore. 0 - do nothing. ')
sw0657851ConfigFile = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 2))
sw0657851ExportIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ExportIpAddress.setStatus('current')
if mibBuilder.loadTexts: sw0657851ExportIpAddress.setDescription('Get/Set the export tftp server.')
sw0657851DoExportConfig = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DoExportConfig.setStatus('current')
if mibBuilder.loadTexts: sw0657851DoExportConfig.setDescription('Do export-config. Get this OID always return zero. 1 - export current section. 2 - export user section.')
sw0657851ImportIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ImportIpAddress.setStatus('current')
if mibBuilder.loadTexts: sw0657851ImportIpAddress.setDescription('Get/Set the import tftp server.')
sw0657851ImportConfigName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ImportConfigName.setStatus('current')
if mibBuilder.loadTexts: sw0657851ImportConfigName.setDescription('Get/Set the import file path and name.')
sw0657851DoImportConfig = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DoImportConfig.setStatus('current')
if mibBuilder.loadTexts: sw0657851DoImportConfig.setDescription('Do import-config. Get this OID always return zero. 1 - import current section. 2 - import user section.')
sw0657851Log = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 7))
sw0657851ClearLog = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ClearLog.setStatus('current')
if mibBuilder.loadTexts: sw0657851ClearLog.setDescription('Clear system log. Get this OID always return zero. 1 - clear log. 0 - do nothing. ')
sw0657851LogNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851LogNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851LogNumber.setDescription('Get the number of current system log. ')
sw0657851LogTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 7, 5), )
if mibBuilder.loadTexts: sw0657851LogTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851LogTable.setDescription('This is a list of log entry. The numbers of entries are given by the value of sw0657851LogNumber.')
sw0657851LogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 7, 5, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851LogIndex"))
if mibBuilder.loadTexts: sw0657851LogEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851LogEntry.setDescription('This is the Entry information for system log.')
sw0657851LogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)))
if mibBuilder.loadTexts: sw0657851LogIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851LogIndex.setDescription('This is the index of the log entry.')
sw0657851LogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 7, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851LogEvent.setStatus('current')
if mibBuilder.loadTexts: sw0657851LogEvent.setDescription('This is the detail information of the log entry.')
sw0657851Firmware = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 8))
sw0657851FirmwareIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851FirmwareIpAddress.setStatus('current')
if mibBuilder.loadTexts: sw0657851FirmwareIpAddress.setDescription('Get/Set the firmware tftp server.')
sw0657851FirmwareFileName = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851FirmwareFileName.setStatus('current')
if mibBuilder.loadTexts: sw0657851FirmwareFileName.setDescription('Get/Set the path and filename for firmware upgrading.')
sw0657851DoFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851DoFirmwareUpgrade.setStatus('current')
if mibBuilder.loadTexts: sw0657851DoFirmwareUpgrade.setDescription('Do firmware upgrade. Get this OID always return zero. 1 - do firmware upgrade. 0 - do nothing.')
sw0657851Port = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9))
sw0657851PortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1))
sw0657851PortStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatusNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusNumber.setDescription('Get the number of port.')
sw0657851PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2), )
if mibBuilder.loadTexts: sw0657851PortStatusTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusTable.setDescription('This is a list of port status entry. The numbers of entries are given by the value of sw0657851PortStatusNumber.')
sw0657851PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851PortStatusIndex"))
if mibBuilder.loadTexts: sw0657851PortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusEntry.setDescription('This is the entry(s) for port status information.')
sw0657851PortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusIndex.setDescription('This is the index of the port status entry.')
sw0657851PortStatusMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatusMedia.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusMedia.setDescription('The port media type of the port status entry.')
sw0657851PortStatusLink = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatusLink.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusLink.setDescription('This is the port link of the port status entry.')
sw0657851PortStatusSpdDpx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatusSpdDpx.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusSpdDpx.setDescription('This is the speed/duplex of the port status entry.')
sw0657851PortStatusFlwCtrlRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatusFlwCtrlRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusFlwCtrlRx.setDescription('This is the Rx flow control of the port status entry.')
sw0657851PortStatusFlwCtrlTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatusFlwCtrlTx.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatusFlwCtrlTx.setDescription('This is the Tx flow control of the port status entry.')
sw0657851PortStatuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortStatuDescription.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortStatuDescription.setDescription('This is the description of port.')
sw0657851PortConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2))
sw0657851PortConfNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortConfNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfNumber.setDescription('Get the number of port configuration.')
sw0657851PortConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2), )
if mibBuilder.loadTexts: sw0657851PortConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfTable.setDescription('This is a list of port configuration entry. The numbers of entries are given by the value of sw0657851PortConfNumber.')
sw0657851PortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851PortConfIndex"))
if mibBuilder.loadTexts: sw0657851PortConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfEntry.setDescription('This is the Entry(s) for port configuration information.')
sw0657851PortConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851PortConfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfIndex.setDescription('This is the index of the port configuration entry.')
sw0657851PortConfPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortConfPortState.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfPortState.setDescription('This is the port state of the port configuration entry. 0 - disabled. 1 - enabled. ')
sw0657851PortConfSpdDpx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortConfSpdDpx.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfSpdDpx.setDescription('This is the speed/duplex of the port configuration entry. 0 - auto. 1 - 10M/Half. 2 - 10M/Full. 3 - 100M/Half. 4 - 100M/Full. 5 - 1G/Full. ')
sw0657851PortConfFlwCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortConfFlwCtrl.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfFlwCtrl.setDescription('This is the flow control of the port configuration entry. 0 - disabled. 1 - enabled. ')
sw0657851PortConfExcessiveCollisionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortConfExcessiveCollisionMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfExcessiveCollisionMode.setDescription(' 0 - Discard. 1 - Restart. ')
sw0657851PortConfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortConfDescription.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortConfDescription.setDescription('This is the description of port.')
sw0657851SFPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3))
sw0657851SFPInfoNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPInfoNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPInfoNumber.setDescription('Get the number of sfp info entry.')
sw0657851SFPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2), )
if mibBuilder.loadTexts: sw0657851SFPInfoTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPInfoTable.setDescription('A list of sfp info entry. The numbers of entries are given by the value of sw0657851SFPInfoNumber.')
sw0657851SFPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851SFPInfoIndex"))
if mibBuilder.loadTexts: sw0657851SFPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPInfoEntry.setDescription('Entry(s) for SFP information.')
sw0657851SFPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPInfoIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPInfoIndex.setDescription('The index of the sfp info entry.')
sw0657851SFPConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPConnectorType.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPConnectorType.setDescription('Get connector type of the sfp.')
sw0657851SFPFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPFiberType.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPFiberType.setDescription('Get fiber type of the sfp.')
sw0657851SFPWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPWavelength.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPWavelength.setDescription('Get tx central wavelength of the sfp.')
sw0657851SFPBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPBaudRate.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPBaudRate.setDescription('Get baud rate of the sfp.')
sw0657851SFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPVendorOUI.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPVendorOUI.setDescription('Get vendor OUI of the sfp.')
sw0657851SFPVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPVendorName.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPVendorName.setDescription('Get vendor name of the sfp.')
sw0657851SFPVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPVendorPN.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPVendorPN.setDescription('Get vendor part number of the sfp.')
sw0657851SFPVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPVendorRev.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPVendorRev.setDescription('Get vendor revision number of the sfp.')
sw0657851SFPVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPVendorSN.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPVendorSN.setDescription('Get vendor serial number of the sfp.')
sw0657851SFPDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPDateCode.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPDateCode.setDescription('Get data code of the sfp.')
sw0657851SFPTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPTemperature.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPTemperature.setDescription('Get current temperature of the sfp.')
sw0657851SFPVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPVcc.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPVcc.setDescription('Get current internal supply voltage of the sfp.')
sw0657851SFPTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPTxBias.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPTxBias.setDescription('Get current TX Bias of the sfp.')
sw0657851SFPTxPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPTxPWR.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPTxPWR.setDescription('Get current TX output power of the sfp.')
sw0657851SFPRxPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 9, 3, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851SFPRxPWR.setStatus('current')
if mibBuilder.loadTexts: sw0657851SFPRxPWR.setDescription('Get current Received Power of the sfp.')
sw0657851Mirror = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 10))
sw0657851MirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MirroringPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851MirroringPort.setDescription('Get/Set the mirroring port. The port range is from 1 to 24.')
sw0657851MirroredPortsTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 10, 2), )
if mibBuilder.loadTexts: sw0657851MirroredPortsTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MirroredPortsTable.setDescription('This is a list of port configuration entry. The numbers of entries are given by the value of sw0657851PortConfNumber.')
sw0657851MirroredPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 10, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851MirroredPortIndex"))
if mibBuilder.loadTexts: sw0657851MirroredPortsEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851MirroredPortsEntry.setDescription('This is the Entry(s) for port configuration information.')
sw0657851MirroredPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MirroredPortIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851MirroredPortIndex.setDescription('This is the index of the mirrored port.')
sw0657851MirroredPortSrouceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MirroredPortSrouceEnable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MirroredPortSrouceEnable.setDescription('0 - disabled. 1 - enabled.')
sw0657851MirroredPortDestinationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MirroredPortDestinationEnable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MirroredPortDestinationEnable.setDescription('0 - disabled. 1 - enabled.')
sw0657851MaxPktLen = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 11))
sw0657851MaxPktLenPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MaxPktLenPortNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851MaxPktLenPortNumber.setDescription('Get the number of Max. packet length.')
sw0657851MaxPktLenConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 11, 2), )
if mibBuilder.loadTexts: sw0657851MaxPktLenConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MaxPktLenConfTable.setDescription('This is a list of Max. packet length entry. The numbers of entries are given by the value of sw0657851MaxPktLenPortNumber.')
sw0657851MaxPktLenConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 11, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851MaxPktLenConfIndex"))
if mibBuilder.loadTexts: sw0657851MaxPktLenConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851MaxPktLenConfEntry.setDescription('Entry(s) for Max. packet length information.')
sw0657851MaxPktLenConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MaxPktLenConfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851MaxPktLenConfIndex.setDescription('This is the index of the Max. packet length entry.')
sw0657851MaxPktLenConfSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MaxPktLenConfSetting.setStatus('current')
if mibBuilder.loadTexts: sw0657851MaxPktLenConfSetting.setDescription('Get/Set the Max. packet length. The Max. packet length is 1518~9600. ')
sw0657851LoopDetectedConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 12))
sw0657851LoopDetectedNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851LoopDetectedNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851LoopDetectedNumber.setDescription('Get the number of loop detected entry.')
sw0657851LoopDetectedTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 12, 2), )
if mibBuilder.loadTexts: sw0657851LoopDetectedTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851LoopDetectedTable.setDescription('A list of loop detected entry. The numbers of entries are given by the value of sw0657851LoopDetectedNumber.')
sw0657851LoopDetectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 12, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851LoopDetectedfIndex"))
if mibBuilder.loadTexts: sw0657851LoopDetectedEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851LoopDetectedEntry.setDescription('Entry(s) for loop detected information.')
sw0657851LoopDetectedfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851LoopDetectedfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851LoopDetectedfIndex.setDescription('The index of the loop detected entry.')
sw0657851LoopDetectedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851LoopDetectedPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851LoopDetectedPort.setDescription('The state of the loop detected entry. 0 - disabled. 1 - enabled. ')
sw0657851LoopDetectedLockedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851LoopDetectedLockedPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851LoopDetectedLockedPort.setDescription('The current status of the loop detected port. Get: 0 - unlocked 1 - locked due to the loop condition Set: 0 - unlock the port 1 - do nothing')
sw0657851ManagementPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13))
sw0657851ManagementSecurityNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851ManagementSecurityNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityNumber.setDescription('This is the index of the management security entry.')
sw0657851ManagementSecurityEntryCreate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementSecurityEntryCreate.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityEntryCreate.setDescription('Create management security entry')
sw0657851ManagementSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3), )
if mibBuilder.loadTexts: sw0657851ManagementSecurityTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityTable.setDescription('This is a list of SW0657851ManagementSecurityEntry. The numbers of entries are given by ManagementSecurityNumber.')
sw0657851ManagementSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851ManagementSecurityIndex"))
if mibBuilder.loadTexts: sw0657851ManagementSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityEntry.setDescription('This is the Entry(s) for Management Security configuration information.')
sw0657851ManagementSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851ManagementSecurityIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityIndex.setDescription('This is the index of the management policy configuration entry.')
sw0657851ManagementSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementSecurityName.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityName.setDescription('This is the username of the management security entry.')
sw0657851ManagementSecurityIpRange = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementSecurityIpRange.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityIpRange.setDescription('This is the ip range of the management security entry.')
sw0657851ManagementSecurityIncomigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementSecurityIncomigPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityIncomigPort.setDescription('This is the incoming port of the management security entry.')
sw0657851ManagementSecurityAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementSecurityAccessType.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityAccessType.setDescription(' 0 - any. 1 - http. 2 - telnet 3 - snmp')
sw0657851ManagementSecurityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementSecurityAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityAction.setDescription(' 0 - deny. 1 - accept.')
sw0657851ManagementSecurityEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementSecurityEntryAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementSecurityEntryAction.setDescription(' 1 - active. 2 - notInService. 3 - delete.')
sw0657851VLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14))
sw0657851VlanConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 1))
sw0657851VlanMode = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanMode.setDescription('This is the VLAN Mode configuration, default is tag base. 0 - tag-base 1 - port-base')
sw0657851ManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851ManagementVlan.setStatus('current')
if mibBuilder.loadTexts: sw0657851ManagementVlan.setDescription('To specify a vlan id that can communicate with the device.')
sw0657851PortIsolation = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortIsolation.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortIsolation.setDescription('Selected port(s) only can communicate with unselected port(s). Selected port(s) will be isolated with each other.')
sw0657851TagBaseVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2))
sw0657851TagBaseVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanNumber.setDescription('The number of tagged-based VLAN.')
sw0657851TagBaseVlanGroupEntryCreate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanGroupEntryCreate.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanGroupEntryCreate.setDescription('To create a VLAN entry in the tagged-based VLAN table. 0 : none, 1~4094 : specify the vid of the created VLAN.')
sw0657851TagBaseVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3), )
if mibBuilder.loadTexts: sw0657851TagBaseVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanGroupTable.setDescription('A list of tagged-based VLAN group entry. The number of entries can be taked from sw0657851TagBaseVlanNumber.')
sw0657851TagBaseVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851TagBaseVlanVid"))
if mibBuilder.loadTexts: sw0657851TagBaseVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanGroupEntry.setDescription('This is the Entry(s) for Tag Base VLAN Group configuration information.')
sw0657851TagBaseVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: sw0657851TagBaseVlanVid.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanVid.setDescription('This is the index of the Tag Base VLAN Group configuration entry.')
sw0657851TagBaseVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanName.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanName.setDescription('This is the name of the VLAN.')
sw0657851TagBaseVlanIgmpProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanIgmpProxy.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanIgmpProxy.setDescription('To support IGMP proxy in this VLAN. 0 - Disable 1 - Enable')
sw0657851TagBaseVlanPrivateVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanPrivateVlan.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanPrivateVlan.setDescription('To apply the port isolation configuration. 0 - Disable 1 - Enable')
sw0657851TagBaseVlanGvrp = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanGvrp.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanGvrp.setDescription('This VLAN can be propagated by gvrp. 0 - Disable 1 - Enable')
sw0657851TagBaseVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanMemberPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanMemberPort.setDescription('The member port(s) of this VLAN.')
sw0657851TagBaseVlanEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TagBaseVlanEntryAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851TagBaseVlanEntryAction.setDescription('The row status of VLAN. 1 - active 2 - notInService 3 - delete')
sw0657851VlanPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3), )
if mibBuilder.loadTexts: sw0657851VlanPortConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfTable.setDescription('This is the port parameters for tagged-based VLAN.')
sw0657851VlanPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851VlanPortConfIndex"))
if mibBuilder.loadTexts: sw0657851VlanPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfEntry.setDescription('These are the tagged-based VLAN parameters for each ports.')
sw0657851VlanPortConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851VlanPortConfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfIndex.setDescription('This is the index of the Port Base VLAN Group configuration entry.')
sw0657851VlanPortConfVlanAware = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanPortConfVlanAware.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfVlanAware.setDescription(' 0 - Ignore incoming VLAN tag, using pvid as VLAN classification. 1 - Using VLAN tag information first.')
sw0657851VlanPortConfIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanPortConfIngressFiltering.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfIngressFiltering.setDescription("If the packet is tagged with VLAN information, the ingress port will first determine if the ingress port itself is a member of the tagged VLAN. 0 - Disable, don't care about the VLAN information of the packet. 1 - Enable.")
sw0657851VlanPortConfFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanPortConfFrameType.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfFrameType.setDescription('To determine what kind of packet the port should accept. 0 - All 1 - Only tagged packet')
sw0657851VlanPortConfPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanPortConfPvid.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfPvid.setDescription('Each physical port has a parameter called PVID. All untagged frames are assigned to the LAN specified in the PVID parameter. When a tagged frame is received by a port, the tag is respected. If the frame is untagged, the value contained in the PVID is considered as a tag. ')
sw0657851VlanPortConfRole = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanPortConfRole.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfRole.setDescription(" 0 - Access: won't send packet with tag. 1 - Trunk: always send packet with tag. 2 - Hybrid: always send packet with tag but one.")
sw0657851VlanPortConfUntagVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanPortConfUntagVid.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfUntagVid.setDescription("Won't send packet with tag in one specific vid. Only available in hybrid mode. ")
sw0657851VlanPortConfDoubleTag = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851VlanPortConfDoubleTag.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortConfDoubleTag.setDescription('This is the double tag configuration for ports. 0 -- Disable, 1 -- Service, 2 -- Customer ')
sw0657851PortBaseVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4))
sw0657851PortBaseVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortBaseVlanNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanNumber.setDescription('Total numbers for port based vlan.')
sw0657851PortBaseVlanGroupEntryCreate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupEntryCreate.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupEntryCreate.setDescription('Create a temp vlan in port-based vlan table. 0 : none, 1 : create a new port-based vlan.')
sw0657851PortBaseVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 3), )
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupTable.setDescription('A list of port base vlan group entry. The numbers of entries are given by the value of sw0657851PortBaseVlanNumber.')
sw0657851PortBaseVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851PortBaseVlanGroupIndex"))
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupEntry.setDescription('This is the Entry(s) for Port Base VLAN Group configuration information.')
sw0657851PortBaseVlanGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupIndex.setDescription('This is the index of the Port Base VLAN Group configuration entry.')
sw0657851PortBaseVlanGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupName.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupName.setDescription('The name of vlan.')
sw0657851PortBaseVlanGroupMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupMembers.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupMembers.setDescription('The member of vlan.')
sw0657851PortBaseVlanGroupEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 14, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupEntryAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851PortBaseVlanGroupEntryAction.setDescription('The row status of vlan. 1 - active 2 - notInService 3 - delete')
sw0657851MacTableInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15))
sw0657851MacTableConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 1))
sw0657851MacAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacAgeTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacAgeTime.setDescription('Set the Mac Table Aging Time (10~1000000 Secs). 0 : Disable.')
sw0657851MacTableLearningConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 1, 2), )
if mibBuilder.loadTexts: sw0657851MacTableLearningConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableLearningConfTable.setDescription('A list of Mac Learning entry.')
sw0657851MacTableLearningConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 1, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851MacTableLearningConfIndex"))
if mibBuilder.loadTexts: sw0657851MacTableLearningConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableLearningConfEntry.setDescription('This is the Entry(s) for Mac Learning table information.')
sw0657851MacTableLearningConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851MacTableLearningConfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableLearningConfIndex.setDescription('This is the index of the Learning MAC Table Group configuration entry.')
sw0657851MacTableLearningConfstate = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableLearningConfstate.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableLearningConfstate.setDescription(' 0 - Auto 1 - Disable 2 - Secure')
sw0657851MacTableStaticFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2))
sw0657851MacTableStaticFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterNumber.setDescription('Total numbers for static filter entry of Mac Table.')
sw0657851MacTableStaticFilterEntryCreate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterEntryCreate.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterEntryCreate.setDescription('Create a temp Filter entry in Mac Table. 0 : none, 1 : create a new entry')
sw0657851MacTableStaticFilterTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 3), )
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterTable.setDescription('A list of static filter entry. The numbers of entries are given by the value of sw0657851MacTableStaticFilterNumber.')
sw0657851MacTableStaticFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851MacTableStaticFilterIndex"))
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterEntry.setDescription('This is the Entry(s) for static filter information.')
sw0657851MacTableStaticFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterIndex.setDescription('This is the index of the Static Filter MAC Table Group configuration entry.')
sw0657851MacTableStaticFilterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterMac.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterMac.setDescription('The static filter mac in Mac Table')
sw0657851MacTableStaticFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterVid.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterVid.setDescription('The filter vid in Mac Table')
sw0657851MacTableStaticFilterAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterAlias.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterAlias.setDescription('The filter alias name in Mac Table')
sw0657851MacTableStaticFilterEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterEntryAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticFilterEntryAction.setDescription('The row status of filter entry. 1 - active 2 - notInService 3 - delete')
sw0657851MacTableStaticForward = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3))
sw0657851MacTableStaticForwardNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardNumber.setDescription('Total numbers for static forward entry of Mac Table.')
sw0657851MacTableStaticForwardEntryCreate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardEntryCreate.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardEntryCreate.setDescription('Create a temp forward entry in Mac Table. 0 : none, 1 : create a new entry')
sw0657851MacTableStaticForwardTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3), )
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardTable.setDescription('A list of static forward entry. The numbers of entries are given by the value of sw0657851MacTableStaticForwardNumber.')
sw0657851MacTableStaticForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851MacTableStaticForwardIndex"))
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardEntry.setDescription(' ')
sw0657851MacTableStaticForwardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardIndex.setDescription('This is the index of the Static Forward MAC Table Group configuration entry.')
sw0657851MacTableStaticForwardMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardMac.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardMac.setDescription('The static forwarding Mac in Mac Table')
sw0657851MacTableStaticForwardPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardPort.setDescription('To specify a destination port for a mac address in mac table.')
sw0657851MacTableStaticForwardVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardVid.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardVid.setDescription('To specify a VLAN ID for a mac address in mac table.')
sw0657851MacTableStaticForwardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardAlias.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardAlias.setDescription('To specify an alias for a mac address in mac table.')
sw0657851MacTableStaticForwardEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardEntryAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacTableStaticForwardEntryAction.setDescription('The row status of filter entry. 1 - active 2 - notInService 3 - delete')
sw0657851MacAlias = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4))
sw0657851MacAliasNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MacAliasNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacAliasNumber.setDescription('Mac Alias Total Nnumber(0~1024).')
sw0657851MacAliasEntryCreate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851MacAliasEntryCreate.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacAliasEntryCreate.setDescription('Create a temp Mac alias entry in Mac Table. 0 : none, 1 : create a new entry')
sw0657851MacAliasTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 3), )
if mibBuilder.loadTexts: sw0657851MacAliasTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacAliasTable.setDescription('A list of Mac Alias entry. The numbers of entries are given by the value of sw0657851MacAliasNumber.')
sw0657851MacAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851MacAliasIndex"))
if mibBuilder.loadTexts: sw0657851MacAliasEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacAliasEntry.setDescription('Entry(s) for Mac Alias.')
sw0657851MacAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: sw0657851MacAliasIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacAliasIndex.setDescription('The index of the static mac alias entry.')
sw0657851AliasMac = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AliasMac.setStatus('current')
if mibBuilder.loadTexts: sw0657851AliasMac.setDescription('The Mac of the static mac alias entry.')
sw0657851AliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AliasName.setStatus('current')
if mibBuilder.loadTexts: sw0657851AliasName.setDescription('The alias name of the static mac alias entry.')
sw0657851MacAliasEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 15, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851MacAliasEntryAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851MacAliasEntryAction.setDescription('The row status of mac alias entry. 1 - active 2 - notInService 3 - delete')
sw0657851GVRPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16))
sw0657851GvrpConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1))
sw0657851GvrpConfState = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpConfState.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfState.setDescription('The GVRP state 0 - Disable 1 - Enable ')
sw0657851GvrpConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2), )
if mibBuilder.loadTexts: sw0657851GvrpConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfTable.setDescription('A list of GVRP entry.')
sw0657851GvrpConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851GvrpConfIndex"))
if mibBuilder.loadTexts: sw0657851GvrpConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfEntry.setDescription('This is the Entry(s) for gvrp information.')
sw0657851GvrpConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851GvrpConfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfIndex.setDescription('This is the index of the gvrp entry.')
sw0657851GvrpConfJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpConfJoinTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfJoinTime.setDescription('This is the join-time of the gvrp entry.')
sw0657851GvrpConfLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpConfLeaveTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfLeaveTime.setDescription('This is the leave-time of the gvrp entry. default:60 centisecond')
sw0657851GvrpConfLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpConfLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfLeaveAllTime.setDescription(' default: 1000 unit time')
sw0657851GvrpConfDefaultAppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpConfDefaultAppMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfDefaultAppMode.setDescription(' [default: Normal] 0 - Normal 1 - Non-Participant')
sw0657851GvrpConfDefaultRegMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpConfDefaultRegMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfDefaultRegMode.setDescription(' [default: Normal] 0 - Normal 1 - Fixed 2 - Forbidden')
sw0657851GvrpConfRestrictedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpConfRestrictedMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpConfRestrictedMode.setDescription(' [default: Disable] 0 - Disable 1 - Enable')
sw0657851GvrpCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2))
sw0657851GvrpCounterTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1), )
if mibBuilder.loadTexts: sw0657851GvrpCounterTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterTable.setDescription('This is a list of SW0657851GvrpCounterEntry.')
sw0657851GvrpCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851GvrpCounterIndex"))
if mibBuilder.loadTexts: sw0657851GvrpCounterEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterEntry.setDescription('This is the Entry(s) for gvrp counter information.')
sw0657851GvrpCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851GvrpCounterIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterIndex.setDescription('This is the index of the gvrp counter entry.')
sw0657851GvrpCounterRxTotalGvrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterRxTotalGvrpPkts.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterRxTotalGvrpPkts.setDescription('Get the amount of all received gvrp packets of the gvrp counter entry.')
sw0657851GvrpCounterRxInvalidGvrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterRxInvalidGvrpPkts.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterRxInvalidGvrpPkts.setDescription('Get the amount of received invalid gvrp packets of the gvrp counter entry.')
sw0657851GvrpCounterRxLeaveAllMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterRxLeaveAllMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterRxLeaveAllMsg.setDescription('Get the amount of received leave-all-message of the gvrp counter entry.')
sw0657851GvrpCounterRxJoinEmptyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterRxJoinEmptyMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterRxJoinEmptyMsg.setDescription('Get the amount of received join-empty-message of the gvrp counter entry.')
sw0657851GvrpCounterRxJoinInMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterRxJoinInMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterRxJoinInMsg.setDescription('Get the amount of received join-in-message of the gvrp counter entry.')
sw0657851GvrpCounterRxLeaveEmptyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterRxLeaveEmptyMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterRxLeaveEmptyMsg.setDescription('Get the amount of received leave-empty-message of the gvrp counter entry.')
sw0657851GvrpCounterRxEmptyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterRxEmptyMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterRxEmptyMsg.setDescription('Get the amount of received empty-message of the gvrp counter entry.')
sw0657851GvrpCounterTxTotalGvrpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterTxTotalGvrpPkts.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterTxTotalGvrpPkts.setDescription('Get the amount of all transmitted gvrp packets of the gvrp counter entry.')
sw0657851GvrpCounterTxLeaveAllMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterTxLeaveAllMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterTxLeaveAllMsg.setDescription('Get the amount of transmitted leave-all-message of the gvrp counter entry.')
sw0657851GvrpCounterTxJoinEmptyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterTxJoinEmptyMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterTxJoinEmptyMsg.setDescription('Get the amount of transmitted join-empty-message of the gvrp counter entry.')
sw0657851GvrpCounterTxJoinInMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterTxJoinInMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterTxJoinInMsg.setDescription('Get the amount of transmitted join-in-message of the gvrp counter entry.')
sw0657851GvrpCounterTxLeaveEmptyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterTxLeaveEmptyMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterTxLeaveEmptyMsg.setDescription('Get the amount of transmitted leave-empty-message of the gvrp counter entry.')
sw0657851GvrpCounterTxEmptyMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpCounterTxEmptyMsg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpCounterTxEmptyMsg.setDescription('Get the amount of transmitted empty-message of the gvrp counter entry.')
sw0657851GvrpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3))
sw0657851GvrpGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpGroupNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupNumber.setDescription('Get the number of the gvrp group entry.')
sw0657851GvrpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 2), )
if mibBuilder.loadTexts: sw0657851GvrpGroupTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupTable.setDescription('This is a list of SW0657851GvrpGroupEntry.')
sw0657851GvrpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851GvrpGroupId"))
if mibBuilder.loadTexts: sw0657851GvrpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupEntry.setDescription('This is the Entry(s) for gvrp group information.')
sw0657851GvrpGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpGroupId.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupId.setDescription('This is the index of the gvrp group entry.')
sw0657851GvrpGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpGroupVid.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupVid.setDescription('This is the vlan id of the gvrp grout entry.')
sw0657851GvrpGroupMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpGroupMemberPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupMemberPort.setDescription('The member ports of the gvrp grout entry.')
sw0657851GvrpGroupAdministrativeCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 3), )
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlTable.setDescription('This is a list of SW0657851GvrpGroupAdministrativeCtrlEntry.')
sw0657851GvrpGroupAdministrativeCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851GvrpGroupAdministrativeCtrlVid"), (0, "SIGNAMAX-SW0657851-MIB", "sw0657851GvrpGroupAdministrativeCtrlPort"))
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlEntry.setDescription('This is the Entry(s) for gvrp group administrative information.')
sw0657851GvrpGroupAdministrativeCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlVid.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlVid.setDescription('This is the vlan id of the gvrp-group-admin entry.')
sw0657851GvrpGroupAdministrativeCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlPort.setDescription('This is the port number of the gvrp-group-admin entry.')
sw0657851GvrpGroupAdministrativeCtrlApp = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlApp.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlApp.setDescription('Set gvrp applicant. 0 - Normal 1 - Non-Participant')
sw0657851GvrpGroupAdministrativeCtrlReg = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 16, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlReg.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpGroupAdministrativeCtrlReg.setDescription('Set gvrp registrar. 0 - Normal 1 - Fixed 2 - Forbidden')
sw0657851QosInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17))
sw0657851QosPortConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1))
sw0657851QosNumOfClasses = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosNumOfClasses.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosNumOfClasses.setDescription('Effective class number, it can be set 1, 2, or 4. 1 means only one class available, all packets will be treat the same. 2 means two classes available, packets will be divided into high and low queue. 4 means for classes available, packets will be divided into low/normal/medium/high queue')
sw0657851QosPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2), )
if mibBuilder.loadTexts: sw0657851QosPortConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfTable.setDescription('QoS parameter for ports.')
sw0657851QosPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851QosPortConfIndex"))
if mibBuilder.loadTexts: sw0657851QosPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfEntry.setDescription('QoS parameter for ports.')
sw0657851QosPortConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851QosPortConfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfIndex.setDescription('This is the port number for QoS configuration.')
sw0657851QosPortConfDefaultClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfDefaultClasses.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfDefaultClasses.setDescription('This is the default class for packets mismatch the specified QCL setting. 0 - Low 1 - Normal 2 - Medium 3 - High')
sw0657851QosPortConfQCL = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfQCL.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfQCL.setDescription('This is where to specify the QoS Control List the port should apply.')
sw0657851QosPortConfUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfUserPriority.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfUserPriority.setDescription('This is the default ingress VLAN tag priority')
sw0657851QosPortConfQueuingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfQueuingMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfQueuingMode.setDescription(' 0 - Strict Priority 1 - Weighted Fair')
sw0657851QosPortConfQueueWeightedLow = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedLow.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedLow.setDescription('To specify how many quotas the low queue can be distributed. Only available when the queueing mode is Weighted Fair.')
sw0657851QosPortConfQueueWeightedNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedNormal.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedNormal.setDescription('To specify how many quotas the normal queue can be distributed. Only available when the queueing mode is Weighted Fair.')
sw0657851QosPortConfQueueWeightedMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedMedium.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedMedium.setDescription('To specify how many quotas the medium queue can be distributed. Only available when the queueing mode is Weighted Fair.')
sw0657851QosPortConfQueueWeightedHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedHigh.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosPortConfQueueWeightedHigh.setDescription('To specify how many quotas the high queue can be distributed. Only available when the queueing mode is Weighted Fair.')
sw0657851QosRateLimiters = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3))
sw0657851QosRateLimitersTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3, 1), )
if mibBuilder.loadTexts: sw0657851QosRateLimitersTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosRateLimitersTable.setDescription('This is the port bandwidth configuration.')
sw0657851QosRateLimitersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3, 1, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851QosRateLimitersIndex"))
if mibBuilder.loadTexts: sw0657851QosRateLimitersEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosRateLimitersEntry.setDescription('This is the port bandwidth configuration.')
sw0657851QosRateLimitersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851QosRateLimitersIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosRateLimitersIndex.setDescription('This is the port number for rate limit configuration')
sw0657851QosRateLimitersPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosRateLimitersPolicer.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosRateLimitersPolicer.setDescription('This is the ingress bandwidth function for specific port. 0 - Disable 1 - Enable')
sw0657851QosRateLimitersPolicerRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosRateLimitersPolicerRate.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosRateLimitersPolicerRate.setDescription('To set the ingress bandwidth for specific port. Available value is from 500k to 1000000k')
sw0657851QosRateLimitersShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosRateLimitersShaper.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosRateLimitersShaper.setDescription('This is the egress bandwidth function for specific port. 0 - Disable 1 - Enable')
sw0657851QosRateLimitersShaperRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosRateLimitersShaperRate.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosRateLimitersShaperRate.setDescription('To set the ingress bandwidth for specific port. Available value is from 500k to 1000000k')
sw0657851QosStormCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 4))
sw0657851QosStromCtrlFloodedUnicastStatus = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosStromCtrlFloodedUnicastStatus.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosStromCtrlFloodedUnicastStatus.setDescription('This is the flooded unicast suppression function for this device. 0 - Disable 1 - Enable')
sw0657851QosStromCtrlFloodedUnicastRate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosStromCtrlFloodedUnicastRate.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosStromCtrlFloodedUnicastRate.setDescription('To set the flooded unicast suppression for this device. 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1k | 2k | 4k | 8k | 16k | 32k |64k | 128k | 256k | 512k | 1024k(Rate:pps) ')
sw0657851QosStromCtrlMulticastStatus = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosStromCtrlMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosStromCtrlMulticastStatus.setDescription('This is the multicast suppression function for this device. 0 - Disable 1 - Enable')
sw0657851QosStromCtrlMulticastRate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosStromCtrlMulticastRate.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosStromCtrlMulticastRate.setDescription('To set the multicast suppression for this device. 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1k | 2k | 4k | 8k | 16k | 32k |64k | 128k | 256k | 512k | 1024k(Rate:pps) ')
sw0657851QosStromCtrlBroadcastStatus = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosStromCtrlBroadcastStatus.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosStromCtrlBroadcastStatus.setDescription('This is the broadcast suppression function for this device. 0 - Disable 1 - Enable')
sw0657851QosStromCtrlBroadcastRate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 17, 4, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851QosStromCtrlBroadcastRate.setStatus('current')
if mibBuilder.loadTexts: sw0657851QosStromCtrlBroadcastRate.setDescription('To set the broadcast suppression for this device. 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1k | 2k | 4k | 8k | 16k | 32k |64k | 128k | 256k | 512k | 1024k(Rate:pps) ')
sw0657851AclInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18))
sw0657851AclPortsConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1), )
if mibBuilder.loadTexts: sw0657851AclPortsConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfTable.setDescription('This is a list of port configuration entry. ')
sw0657851AclPortsConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851AclPortsConfIndex"))
if mibBuilder.loadTexts: sw0657851AclPortsConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfEntry.setDescription('This is the Entry(s) for ACL port information.')
sw0657851AclPortsConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851AclPortsConfIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfIndex.setDescription('This is the port number of the ACL port entry.')
sw0657851AclPortsConfPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AclPortsConfPolicyId.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfPolicyId.setDescription('This is the policy id of the ACL port entry.')
sw0657851AclPortsConfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AclPortsConfAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfAction.setDescription('Set the action of the ACL port entry. 0 - Deny 1 - Permit')
sw0657851AclPortsConfRateLimiterId = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AclPortsConfRateLimiterId.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfRateLimiterId.setDescription(' Set the rate limiter id of the ACL port entry. 0 - Disable')
sw0657851AclPortsConfPortCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AclPortsConfPortCopy.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfPortCopy.setDescription('Set the mirror port of the ACL port entry. 0 - Disable')
sw0657851AclPortsConfCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851AclPortsConfCounter.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclPortsConfCounter.setDescription('This is the port counter of the ACL port entry. 0 - Disable')
sw0657851AclRateLimiter = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 2))
sw0657851AclRateLimiterTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 2, 1), )
if mibBuilder.loadTexts: sw0657851AclRateLimiterTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclRateLimiterTable.setDescription('This is a list of SW0657851RateLimiterEntry.')
sw0657851AclRateLimiterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 2, 1, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851AclRateLimiterIndex"))
if mibBuilder.loadTexts: sw0657851AclRateLimiterEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclRateLimiterEntry.setDescription('This is the Entry(s) for rate limiter information.')
sw0657851AclRateLimiterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851AclRateLimiterIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclRateLimiterIndex.setDescription('This is the index of the rate limiter entry.')
sw0657851AclRateLimiterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 18, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851AclRateLimiterRate.setStatus('current')
if mibBuilder.loadTexts: sw0657851AclRateLimiterRate.setDescription(' (pps) 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1k | 2k | 4k | 8k | 16k | 32k |64k | 128k | 256k | 512k | 1024k')
sw0657851IpMacBind = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19))
sw0657851IpMacBindConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 1))
sw0657851IpMacBindstate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindstate.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindstate.setDescription(' Set ip mac binding state. 0 - Disable 1 - Enable')
sw0657851IpMacBindTrustPort = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindTrustPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindTrustPort.setDescription('Set trustport, Port range : 1,5-7, available from 1 to 24')
sw0657851IpMacBindSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2))
sw0657851IpMacBindSettingNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindSettingNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingNumber.setDescription('Get the amount of ip_mac_binding entry.')
sw0657851IpMacBindSettingEntryCreate = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindSettingEntryCreate.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingEntryCreate.setDescription('Create ip_mac_binding entry. 0: none 1-1024: creat with this index.')
sw0657851IpMacBindSettingTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3), )
if mibBuilder.loadTexts: sw0657851IpMacBindSettingTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingTable.setDescription('This is a list of SW0657851IpMacBindSettingEntry.')
sw0657851IpMacBindSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851IpMacBindSettingIndex"))
if mibBuilder.loadTexts: sw0657851IpMacBindSettingEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingEntry.setDescription('This is the entry of the ip_mac_binding information.')
sw0657851IpMacBindSettingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: sw0657851IpMacBindSettingIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingIndex.setDescription('This is the index of the ip_mac_binding entry.')
sw0657851IpMacBindSettingMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindSettingMAC.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingMAC.setDescription('This is the mac address of the ip_mac_binding entry.')
sw0657851IpMacBindSettingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindSettingIP.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingIP.setDescription('This is the ip address of the ip_mac_binding entry.')
sw0657851IpMacBindSettingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindSettingPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingPort.setDescription('This is the port number of the ip_mac_binding entry.')
sw0657851IpMacBindSettingVID = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindSettingVID.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingVID.setDescription('This is the vid of the ip_mac_binding entry.')
sw0657851IpMacBindSettingEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 19, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IpMacBindSettingEntryAction.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpMacBindSettingEntryAction.setDescription(' 1 - active 2 - notInService 3 - delete')
sw0657851Dot1X = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23))
sw0657851Dot1XServerConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 1))
sw0657851Dot1XServerConfAuthenticationServerIp = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAuthenticationServerIp.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAuthenticationServerIp.setDescription('Get/Set authentication server ip')
sw0657851Dot1XServerConfAuthenticationUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAuthenticationUdpPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAuthenticationUdpPort.setDescription('Get/Set IEEE 802.1X authentication UDP port number')
sw0657851Dot1XServerConfAuthenticationSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAuthenticationSecretKey.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAuthenticationSecretKey.setDescription('Get/Set IEEE 802.1X authentication secret key')
sw0657851Dot1XServerConfAccountingServerIp = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAccountingServerIp.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAccountingServerIp.setDescription('Get/Set IEEE 802.1X accounting service IP')
sw0657851Dot1XServerConfAccountingUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAccountingUdpPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAccountingUdpPort.setDescription('Get/Set IEEE 802.1X accounting UDP port number')
sw0657851Dot1XServerConfAccountingSecretKey = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAccountingSecretKey.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XServerConfAccountingSecretKey.setDescription('Get/Set IEEE 802.1X accounting secret key')
sw0657851Dot1XPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2), )
if mibBuilder.loadTexts: sw0657851Dot1XPortConfTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortConfTable.setDescription('A table that contains the configuration objects for the Authenticator PAE associated with each port.')
sw0657851Dot1XPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851Dot1XPort"))
if mibBuilder.loadTexts: sw0657851Dot1XPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortConfEntry.setDescription('The configuration information for an Authenticator PAE.')
sw0657851Dot1XPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPort.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPort.setDescription('The port index of 802.1X port configuration table.')
sw0657851Dot1XPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortMode.setDescription('Get/Set IEEE 802.1X port mode. 0 - Disable 1 - Normal 2 - Advanced 3 - Clientless')
sw0657851Dot1XPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortControl.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortControl.setDescription('The current value of the controlled Port control parameter of the Port. 0 : ForceUnauthorized, 1 : ForceAuthorized, 2 : Auto ')
sw0657851Dot1XPortreAuthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortreAuthMax.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortreAuthMax.setDescription('The value of the reAuthMax constant currently in use by the Authenticator PAE state machine.')
sw0657851Dot1XPorttxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPorttxPeriod.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPorttxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine.')
sw0657851Dot1XPortquietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortquietPeriod.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortquietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
sw0657851Dot1XPortreAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortreAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortreAuthEnabled.setDescription('The enable/disable control used by the Reauthentication Timer state machine. 0 - Disable 1 - Enable')
sw0657851Dot1XPortreAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortreAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortreAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
sw0657851Dot1XPortmaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortmaxReq.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortmaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine.')
sw0657851Dot1XPortsuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortsuppTimeout.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortsuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine.')
sw0657851Dot1XPortserverTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XPortserverTimeout.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XPortserverTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine.')
sw0657851Dot1XStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 3), )
if mibBuilder.loadTexts: sw0657851Dot1XStatusTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatusTable.setDescription('A table that contains the status objects for the Authenticator PAE associated with each port.')
sw0657851Dot1XStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 3, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851Dot1XStatusIndex"))
if mibBuilder.loadTexts: sw0657851Dot1XStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatusEntry.setDescription('The status information for an Authenticator PAE.')
sw0657851Dot1XStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851Dot1XStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatusIndex.setDescription('The port index of 802.1X status table.')
sw0657851Dot1XStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XStatusMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatusMode.setDescription('The current mode of the controlled port.')
sw0657851Dot1XStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XStatusStatus.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatusStatus.setDescription('The current status of the controlled port.')
sw0657851Dot1XStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4), )
if mibBuilder.loadTexts: sw0657851Dot1XStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatisticsTable.setDescription('A table that contains the statistics objects for the Authenticator PAE associated with each port.')
sw0657851Dot1XStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851Dot1XStatisticsIndex"))
if mibBuilder.loadTexts: sw0657851Dot1XStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatisticsEntry.setDescription('The statistics information for an Authenticator PAE.')
sw0657851Dot1XStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851Dot1XStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XStatisticsIndex.setDescription('The port index of the 802.1X statistics table.')
sw0657851Dot1XClearCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851Dot1XClearCounter.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XClearCounter.setDescription('Reset the 802.1X counter associated with this port. 0 - do nothing 1 - clear ')
sw0657851Dot1XAuthEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEntersConnecting.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEntersConnecting.setDescription('Counts the number of times that the state machine transitions to the CONNECTING state from any other state.')
sw0657851Dot1XauthEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XauthEapLogoffsWhileConnecting.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XauthEapLogoffsWhileConnecting.setDescription('Counts the number of times that the state machine transitions from CONNECTING to DISCONNECTED as a result of receiving an EAPOL-Logoff message.')
sw0657851Dot1XAuthEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEntersAuthenticating.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEntersAuthenticating.setDescription('Counts the number of times that the state machine transitions from CONNECTING to AUTHENTICATING, as a result of an EAP-Response/Identity message being received from the Supplicant.')
sw0657851Dot1XAuthAuthSuccessesWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthSuccessesWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthSuccessesWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to AUTHENTICATED, as a result of the Backend Authentication state machine indicating successful authentication of the Supplicant.')
sw0657851Dot1XAuthAuthTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthTimeoutsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthTimeoutsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of the Backend Authentication state machine indicating authentication timeout.')
sw0657851Dot1XAuthAuthFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthFailWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthFailWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to HELD, as a result of the Backend Authentication state machine indicating authentication failure.')
sw0657851Dot1XAuthAuthEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapStartsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapStartsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Start message being received from the Supplicant.')
sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Logoff message being received from the Supplicant.')
sw0657851Dot1XAuthAuthReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthReauthsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthReauthsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of a reauthentication request.')
sw0657851Dot1XAuthAuthEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapStartsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapStartsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of an EAPOL-Start message being received from the Supplicant.')
sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to DISCONNECTED, as a result of an EAPOL-Logoff message being received from the Supplicant.')
sw0657851Dot1XBackendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XBackendResponses.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XBackendResponses.setDescription('Counts the number of times that the state machine sends an initial Access-Request packet to the Authentication server (i.e., executes sendRespToServer on entry to the RESPONSE state). Indicates that the Authenticator attempted communication with the Authentication Server.')
sw0657851Dot1XBackendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XBackendAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XBackendAccessChallenges.setDescription('Counts the number of times that the state machine receives an initial Access-Challenge packet from the Authentication server (i.e., aReq becomes TRUE, causing exit from the RESPONSE state). Indicates that the Authentication Server has communication with the Authenticator.')
sw0657851Dot1XBackendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XBackendOtherRequestsToSupplicant.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XBackendOtherRequestsToSupplicant.setDescription('Counts the number of times that the state machine sends an EAP-Request packet (other than Indentity, Notification, Faluire or Success message) to the Supplicant (i.e., executes txReq on entry to the REQUEST state). Indicates that Authenticator chose an EAP-method.')
sw0657851Dot1XBackendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XBackendAuthSuccesses.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XBackendAuthSuccesses.setDescription('Counts the number of times that the state machine receives an EAP-Success message from the Authentication Server (i.e., aSuccess becomes TRUE, causing a transitions from RESPONSE to SUCCESS). Indicates that the Supplicant has successfully authenticated to the Authentication Server.')
sw0657851Dot1XBackendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XBackendAuthFails.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XBackendAuthFails.setDescription('Counts the number of times that the state machine receives an EAP-Failure message from the Authentication Server (i.e., aFail becomes TRUE, causing a transitions from RESPONSE to FAIL). Indicates that the Supplicant has not authenticated to the Authentication Server.')
sw0657851Dot1XAuthEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolFramesRx.setDescription('The number of valid EAPOL frames of any type that have been received by this Authenticator.')
sw0657851Dot1XAuthEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolFramesTx.setDescription('The number of valid EAPOL frames of any type that have been transmitted by this Authenticator.')
sw0657851Dot1XAuthEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolStartFramesRx.setDescription('The number of EAPOL Start frames that have been received by this Authenticator.')
sw0657851Dot1XAuthEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolLogoffFramesRx.setDescription('The number of EAPOL Logoff frames that have been received by this Authenticator.')
sw0657851Dot1XAuthEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolRespIdFramesRx.setDescription('The number of EAP Resp/Id frames that have been received by this Authenticator.')
sw0657851Dot1XAuthEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolRespFramesRx.setDescription('The number of valid EAP Response frames (other than Resp/Id frames) that have been received by this Authenticator.')
sw0657851Dot1XAuthEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolReqIdFramesTx.setDescription('The number of EAP Req/Id frames that have been transmitted by this Authenticator.')
sw0657851Dot1XAuthEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapolReqFramesTx.setDescription('The number of valid EAP Request frames (other than Req/Id frames) that have been transmitted by this Authenticator.')
sw0657851Dot1XAuthInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthInvalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthInvalidEapolFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the frame type is not recognized.')
sw0657851Dot1XAuthEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the Packet Body Length field is invalid.')
sw0657851Dot1XAuthLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthLastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthLastEapolFrameVersion.setDescription('The protocol version number carried in the most recently received EAPOL frames.')
sw0657851Dot1XAuthLastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 23, 4, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851Dot1XAuthLastEapolFrameSource.setStatus('current')
if mibBuilder.loadTexts: sw0657851Dot1XAuthLastEapolFrameSource.setDescription('The source MAC address carried in the most recently received EAPOL frames.')
sw0657851TrunkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24))
sw0657851TrunkPort = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1))
sw0657851TrunkPortTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1), )
if mibBuilder.loadTexts: sw0657851TrunkPortTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortTable.setDescription('This is a list of SW0657851TrunkPortEntry.')
sw0657851TrunkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851TrunkPortIndex"))
if mibBuilder.loadTexts: sw0657851TrunkPortEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortEntry.setDescription('Entry(s) for trunk table.')
sw0657851TrunkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851TrunkPortIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortIndex.setDescription('The port index of trunk table.')
sw0657851TrunkPortMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TrunkPortMethod.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortMethod.setDescription('The method of trunk port. 0 : None, 1 : LACP, 2 : Static. ')
sw0657851TrunkPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TrunkPortGroup.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortGroup.setDescription('The group(0~12) of trunk port.')
sw0657851TrunkPortActiveLacp = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TrunkPortActiveLacp.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortActiveLacp.setDescription('The active lacp mode of trunk port. 0 : Passive, 1 : Active. ')
sw0657851TrunkPortAggtr = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851TrunkPortAggtr.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortAggtr.setDescription('The Aggtr of trunk port.')
sw0657851TrunkPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851TrunkPortStatus.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortStatus.setDescription('The status of trunk port. 0 : None, 1 : Ready. ')
sw0657851TrunkPortCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851TrunkPortCurrentMode.setStatus('current')
if mibBuilder.loadTexts: sw0657851TrunkPortCurrentMode.setDescription('The current mode of trunk port entry. 0 : Active mode, 1 : Edit mode, 2 : Do edit. ')
sw0657851AggregatorView = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 2))
sw0657851AggregatorViewTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 2, 1), )
if mibBuilder.loadTexts: sw0657851AggregatorViewTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851AggregatorViewTable.setDescription('This is a list of SW0657851AggregatorViewEntry.')
sw0657851AggregatorViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 2, 1, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851AggregatorViewIndex"))
if mibBuilder.loadTexts: sw0657851AggregatorViewEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851AggregatorViewEntry.setDescription('Entry(s) for aggregator view table.')
sw0657851AggregatorViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: sw0657851AggregatorViewIndex.setStatus('current')
if mibBuilder.loadTexts: sw0657851AggregatorViewIndex.setDescription('The port index of aggregator view table.')
sw0657851AggregatorViewMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851AggregatorViewMethod.setStatus('current')
if mibBuilder.loadTexts: sw0657851AggregatorViewMethod.setDescription('The method of aggregator view table. 0 : None, 1 : LACP, 2 : Static. ')
sw0657851AggregatorViewMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851AggregatorViewMemberPorts.setStatus('current')
if mibBuilder.loadTexts: sw0657851AggregatorViewMemberPorts.setDescription('The member ports of aggregator view table.')
sw0657851AggregatorViewReadyPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851AggregatorViewReadyPorts.setStatus('current')
if mibBuilder.loadTexts: sw0657851AggregatorViewReadyPorts.setDescription('The ready ports of aggregator view table.')
sw0657851LacpSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851LacpSystemPriority.setStatus('current')
if mibBuilder.loadTexts: sw0657851LacpSystemPriority.setDescription('Set lacp system priority.')
sw0657851IGMPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25))
sw0657851IgmpProxyConfState = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfState.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfState.setDescription('Get/Set the IGMP Proxy state. 0 - disabled. 1 - enable. ')
sw0657851IgmpProxyConfUnregIPMCFlooding = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfUnregIPMCFlooding.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfUnregIPMCFlooding.setDescription('Get/Set unregistered IP multicast flooding state, 0 - disable, 1 - enable.')
sw0657851IgmpProxyConfGeneralQueuyInterval = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfGeneralQueuyInterval.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfGeneralQueuyInterval.setDescription('Get/Set IGMP general query interval(Unit: second).')
sw0657851IgmpProxyConfGeneralQueuyRepTimeout = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfGeneralQueuyRepTimeout.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfGeneralQueuyRepTimeout.setDescription('Get/Set IGMP general query response timeout(Unit: second).')
sw0657851IgmpProxyConfGeneralQueuyMaxRepTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfGeneralQueuyMaxRepTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfGeneralQueuyMaxRepTime.setDescription('Get/Set IGMP general query maximum response time(Unit: second).')
sw0657851IgmpProxyConfLastMemberQueuyCount = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfLastMemberQueuyCount.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfLastMemberQueuyCount.setDescription('Get/Set IGMP specific query robust count.')
sw0657851IgmpProxyConfLastMemberQueuyInterval = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfLastMemberQueuyInterval.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfLastMemberQueuyInterval.setDescription('Get/Set IGMP specific query interval(Unit: second).')
sw0657851IgmpProxyConfLastMemberQueuyMaxRepTime = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfLastMemberQueuyMaxRepTime.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfLastMemberQueuyMaxRepTime.setDescription('Get/Set IGMP specific query maximum response time(Unit: second).')
sw0657851IgmpProxyConfRouterPorts = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpProxyConfRouterPorts.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpProxyConfRouterPorts.setDescription(' Get/Set IGMP router port(s).')
sw0657851IgmpGroupMembershipNumber = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sw0657851IgmpGroupMembershipNumber.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpGroupMembershipNumber.setDescription('Get the amount of multicast group membership.')
sw0657851IgmpGroupMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 11), )
if mibBuilder.loadTexts: sw0657851IgmpGroupMembershipTable.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpGroupMembershipTable.setDescription('Get multicast group membership.')
sw0657851IgmpGroupMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 11, 1), ).setIndexNames((0, "SIGNAMAX-SW0657851-MIB", "sw0657851IgmpGroupNo"))
if mibBuilder.loadTexts: sw0657851IgmpGroupMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpGroupMembershipEntry.setDescription('Multicast group membership entry.')
sw0657851IgmpGroupNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: sw0657851IgmpGroupNo.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpGroupNo.setDescription('The port index of Igmp Group Membership table.')
sw0657851IgmpGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851IgmpGroupAddress.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpGroupAddress.setDescription('The group address of multicast group membership entry.')
sw0657851IgmpGroupVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851IgmpGroupVLANId.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpGroupVLANId.setDescription('The vlan id of multicast group membership entry.')
sw0657851IgmpGroupPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 25, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sw0657851IgmpGroupPortMembers.setStatus('current')
if mibBuilder.loadTexts: sw0657851IgmpGroupPortMembers.setDescription('The port member of multicast group membership entry.')
sw0657851TrapEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20))
sw0657851UserLogin = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 1)).setObjects(("SIGNAMAX-SW0657851-MIB", "username"))
if mibBuilder.loadTexts: sw0657851UserLogin.setStatus('current')
if mibBuilder.loadTexts: sw0657851UserLogin.setDescription('Send the trap when one user logins the system.')
sw0657851UserLogout = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 2)).setObjects(("SIGNAMAX-SW0657851-MIB", "username"))
if mibBuilder.loadTexts: sw0657851UserLogout.setStatus('current')
if mibBuilder.loadTexts: sw0657851UserLogout.setDescription('Send the trap when one user logouts the system.')
sw0657851ModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sw0657851ModuleInserted.setStatus('current')
if mibBuilder.loadTexts: sw0657851ModuleInserted.setDescription('Send the trap when a module is inserted to the system. The OID value means the port number.')
sw0657851ModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sw0657851ModuleRemoved.setStatus('current')
if mibBuilder.loadTexts: sw0657851ModuleRemoved.setDescription('Send the trap when a module is removed from the system. The OID value means the port number.')
sw0657851DualMediaSwapped = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sw0657851DualMediaSwapped.setStatus('current')
if mibBuilder.loadTexts: sw0657851DualMediaSwapped.setDescription('Send the trap when the dual media port changed. The OID value means the port number.')
sw0657851LoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 6)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sw0657851LoopDetected.setStatus('current')
if mibBuilder.loadTexts: sw0657851LoopDetected.setDescription('Send the trap when loop condition has been detected. The OID value means the port number.')
sw0657851StpStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 7))
if mibBuilder.loadTexts: sw0657851StpStateDisabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851StpStateDisabled.setDescription('Send the trap when the operational state of STP is from enabled to disabled. ')
sw0657851StpStateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 8))
if mibBuilder.loadTexts: sw0657851StpStateEnabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851StpStateEnabled.setDescription('Send the trap when the operational state of STP is from disabled to enabled. ')
sw0657851StpTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 9)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sw0657851StpTopologyChanged.setStatus('current')
if mibBuilder.loadTexts: sw0657851StpTopologyChanged.setDescription('Send the trap when RSTP determines a port should enter the FORWARDING state (a topology change occurs). The OID value is the ifIndex of the port that produces the topology change.')
sw0657851LacpStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 10)).setObjects(("IF-MIB", "ifIndex"), ("SIGNAMAX-SW0657851-MIB", "groupId"))
if mibBuilder.loadTexts: sw0657851LacpStateDisabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851LacpStateDisabled.setDescription('Send the trap when the operational state of LACP is from enabled to disabled. The OID value means the disabled Group ID.')
sw0657851LacpStateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 11)).setObjects(("IF-MIB", "ifIndex"), ("SIGNAMAX-SW0657851-MIB", "groupId"))
if mibBuilder.loadTexts: sw0657851LacpStateEnabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851LacpStateEnabled.setDescription('Send the trap when the operational state of LACP is from disabled to enabled. The OID value means the disabled Group ID.')
sw0657851LacpPortAdded = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 12)).setObjects(("IF-MIB", "ifIndex"), ("SIGNAMAX-SW0657851-MIB", "actorkey"), ("SIGNAMAX-SW0657851-MIB", "partnerkey"))
if mibBuilder.loadTexts: sw0657851LacpPortAdded.setStatus('current')
if mibBuilder.loadTexts: sw0657851LacpPortAdded.setDescription("Send the trap when the state of port is in 'trunk ready'.")
sw0657851LacpPortTrunkFailure = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 13)).setObjects(("IF-MIB", "ifIndex"), ("SIGNAMAX-SW0657851-MIB", "actorkey"), ("SIGNAMAX-SW0657851-MIB", "partnerkey"))
if mibBuilder.loadTexts: sw0657851LacpPortTrunkFailure.setStatus('current')
if mibBuilder.loadTexts: sw0657851LacpPortTrunkFailure.setDescription('Send the trap when one port is not able to be aggregated due to duplex-mode of the port.')
sw0657851GvrpStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 14))
if mibBuilder.loadTexts: sw0657851GvrpStateDisabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpStateDisabled.setDescription('Send the trap when the operational state of GVRP is from enabled to disabled.')
sw0657851GvrpStateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 15))
if mibBuilder.loadTexts: sw0657851GvrpStateEnabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851GvrpStateEnabled.setDescription('Send the trap when the operational state of LACP is from disabled to enabled. ')
sw0657851VlanStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 16))
if mibBuilder.loadTexts: sw0657851VlanStateDisabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanStateDisabled.setDescription('Send the trap when the operational state of vlan is from enabled to disabled. The OID value means the enabled Group ID. ')
sw0657851VlanPortBaseEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 17))
if mibBuilder.loadTexts: sw0657851VlanPortBaseEnabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanPortBaseEnabled.setDescription('Send the trap when the operational state of vlan is changed to port-based vlan.')
sw0657851VlanTagBaseEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 18))
if mibBuilder.loadTexts: sw0657851VlanTagBaseEnabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851VlanTagBaseEnabled.setDescription('Send the trap when the operational state of vlan is changed to tag-based vlan.')
sw0657851IpmbStateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 19))
if mibBuilder.loadTexts: sw0657851IpmbStateEnabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpmbStateEnabled.setDescription('Send trap when ip_mac_binding is enabled.')
sw0657851IpmbStateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 20))
if mibBuilder.loadTexts: sw0657851IpmbStateDisabled.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpmbStateDisabled.setDescription('Send trap when ip_mac_binding is disabled.')
sw0657851IpmbClientFailure = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 21)).setObjects(("SIGNAMAX-SW0657851-MIB", "ipmacIp"), ("SIGNAMAX-SW0657851-MIB", "ipmacMac"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sw0657851IpmbClientFailure.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpmbClientFailure.setDescription('Send trap when ip_mac_binding entry not exist.')
sw0657851IpmbServerFailure = NotificationType((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 20, 22)).setObjects(("SIGNAMAX-SW0657851-MIB", "ipmacClientIp"), ("SIGNAMAX-SW0657851-MIB", "ipmacClientMac"), ("IF-MIB", "ifIndex"), ("SIGNAMAX-SW0657851-MIB", "ipmacServerIp"))
if mibBuilder.loadTexts: sw0657851IpmbServerFailure.setStatus('current')
if mibBuilder.loadTexts: sw0657851IpmbServerFailure.setDescription('Send trap when ip_mac_binding entry not exist.')
sw0657851TrapVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22))
username = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: username.setStatus('current')
if mibBuilder.loadTexts: username.setDescription('System account name.')
groupId = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupId.setStatus('current')
if mibBuilder.loadTexts: groupId.setDescription('The Trunk group ID of LACP.')
actorkey = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actorkey.setStatus('current')
if mibBuilder.loadTexts: actorkey.setDescription('This is the actor key information for LACP.')
partnerkey = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerkey.setStatus('current')
if mibBuilder.loadTexts: partnerkey.setDescription('This is the partner key information for LACP.')
uplink = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplink.setStatus('current')
if mibBuilder.loadTexts: uplink.setDescription('Uplink port(s) in the metro-mode vlan.')
ipmacIp = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmacIp.setStatus('current')
if mibBuilder.loadTexts: ipmacIp.setDescription('IP address of the ip_mac_binding entry.')
ipmacMac = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmacMac.setStatus('current')
if mibBuilder.loadTexts: ipmacMac.setDescription('MAC address of the ip_mac_binding entry.')
ipmacClientIp = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmacClientIp.setStatus('current')
if mibBuilder.loadTexts: ipmacClientIp.setDescription('IP address of the ip_mac_binding entry.')
ipmacClientMac = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmacClientMac.setStatus('current')
if mibBuilder.loadTexts: ipmacClientMac.setDescription('MAC address of the ip_mac_binding entry.')
ipmacServerIp = MibScalar((1, 3, 6, 1, 4, 1, 5205, 2, 34, 1, 22, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmacServerIp.setStatus('current')
if mibBuilder.loadTexts: ipmacServerIp.setDescription('IP address of the ip_mac_binding entry.')
mibBuilder.exportSymbols("SIGNAMAX-SW0657851-MIB", sw0657851AccountPassword=sw0657851AccountPassword, sw0657851MacTableLearningConfEntry=sw0657851MacTableLearningConfEntry, sw0657851Dot1XStatusIndex=sw0657851Dot1XStatusIndex, sw0657851Dot1XAuthInvalidEapolFramesRx=sw0657851Dot1XAuthInvalidEapolFramesRx, sw0657851ManagementSecurityIncomigPort=sw0657851ManagementSecurityIncomigPort, sw0657851NTPServer=sw0657851NTPServer, sw0657851AclRateLimiterIndex=sw0657851AclRateLimiterIndex, sw0657851IP=sw0657851IP, sw0657851LoopDetectedConf=sw0657851LoopDetectedConf, sw0657851PortBaseVlanGroupTable=sw0657851PortBaseVlanGroupTable, sw0657851Dot1XAuthAuthEapStartsWhileAuthenticating=sw0657851Dot1XAuthAuthEapStartsWhileAuthenticating, sw0657851CommonSys=sw0657851CommonSys, sw0657851SFPConnectorType=sw0657851SFPConnectorType, sw0657851IgmpProxyConfGeneralQueuyRepTimeout=sw0657851IgmpProxyConfGeneralQueuyRepTimeout, signamax=signamax, sw0657851Dot1XAuthEapLengthErrorFramesRx=sw0657851Dot1XAuthEapLengthErrorFramesRx, sw0657851SFPVendorRev=sw0657851SFPVendorRev, sw0657851MaxPktLen=sw0657851MaxPktLen, sw0657851TagBaseVlanGroup=sw0657851TagBaseVlanGroup, sw0657851TrunkPortIndex=sw0657851TrunkPortIndex, sw0657851SaveRestore=sw0657851SaveRestore, sw0657851TagBaseVlanGroupEntryCreate=sw0657851TagBaseVlanGroupEntryCreate, sw0657851AccountName=sw0657851AccountName, sw0657851Mirror=sw0657851Mirror, sw0657851ManagementSecurityEntry=sw0657851ManagementSecurityEntry, sw0657851AccountDel=sw0657851AccountDel, sw0657851QosRateLimitersPolicerRate=sw0657851QosRateLimitersPolicerRate, sw0657851QosPortConfQueueWeightedMedium=sw0657851QosPortConfQueueWeightedMedium, sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticating=sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticating, sw0657851ManagementSecurityIpRange=sw0657851ManagementSecurityIpRange, sw0657851SFPInfo=sw0657851SFPInfo, uplink=uplink, sw0657851IpMacBindSettingEntryCreate=sw0657851IpMacBindSettingEntryCreate, sw0657851QosStromCtrlFloodedUnicastRate=sw0657851QosStromCtrlFloodedUnicastRate, sw0657851PortStatusLink=sw0657851PortStatusLink, sw0657851MacAliasEntry=sw0657851MacAliasEntry, sw0657851ManagementPolicy=sw0657851ManagementPolicy, sw0657851IgmpProxyConfLastMemberQueuyCount=sw0657851IgmpProxyConfLastMemberQueuyCount, sw0657851Dot1XAuthLastEapolFrameVersion=sw0657851Dot1XAuthLastEapolFrameVersion, sw0657851DoExportConfig=sw0657851DoExportConfig, sw0657851Dot1XAuthAuthEapStartsWhileAuthenticated=sw0657851Dot1XAuthAuthEapStartsWhileAuthenticated, sw0657851VLAN=sw0657851VLAN, sw0657851ManualTimeSetting=sw0657851ManualTimeSetting, sw0657851RestoreUser=sw0657851RestoreUser, sw0657851Port=sw0657851Port, sw0657851SystemDescription=sw0657851SystemDescription, sw0657851MacTableStaticFilterEntryAction=sw0657851MacTableStaticFilterEntryAction, sw0657851PortStatus=sw0657851PortStatus, sw0657851IpMacBindSettingPort=sw0657851IpMacBindSettingPort, sw0657851SFPInfoTable=sw0657851SFPInfoTable, sw0657851Dot1XServerConfAuthenticationServerIp=sw0657851Dot1XServerConfAuthenticationServerIp, sw0657851DoAccountAdd=sw0657851DoAccountAdd, sw0657851QosRateLimitersEntry=sw0657851QosRateLimitersEntry, sw0657851GvrpCounterTxLeaveAllMsg=sw0657851GvrpCounterTxLeaveAllMsg, sw0657851FirmwareFileName=sw0657851FirmwareFileName, sw0657851GvrpConfLeaveAllTime=sw0657851GvrpConfLeaveAllTime, groupId=groupId, sw0657851Account=sw0657851Account, sw0657851ManagementVlan=sw0657851ManagementVlan, sw0657851QosRateLimiters=sw0657851QosRateLimiters, sw0657851DefaultGateway=sw0657851DefaultGateway, ipmacClientMac=ipmacClientMac, sw0657851TrapHostIP=sw0657851TrapHostIP, sw0657851QosPortConfUserPriority=sw0657851QosPortConfUserPriority, sw0657851AggregatorViewIndex=sw0657851AggregatorViewIndex, sw0657851EmailUserAddress=sw0657851EmailUserAddress, sw0657851VlanPortConfRole=sw0657851VlanPortConfRole, sw0657851QosPortConf=sw0657851QosPortConf, sw0657851Dot1XAuthLastEapolFrameSource=sw0657851Dot1XAuthLastEapolFrameSource, sw0657851IpMacBindTrustPort=sw0657851IpMacBindTrustPort, sw0657851IgmpProxyConfGeneralQueuyMaxRepTime=sw0657851IgmpProxyConfGeneralQueuyMaxRepTime, sw0657851SFPTemperature=sw0657851SFPTemperature, sw0657851Dot1XPortquietPeriod=sw0657851Dot1XPortquietPeriod, sw0657851AclRateLimiter=sw0657851AclRateLimiter, sw0657851TrunkPort=sw0657851TrunkPort, ipmacMac=ipmacMac, sw0657851IgmpProxyConfUnregIPMCFlooding=sw0657851IgmpProxyConfUnregIPMCFlooding, sw0657851VlanPortConfFrameType=sw0657851VlanPortConfFrameType, sw0657851MacAliasIndex=sw0657851MacAliasIndex, sw0657851GvrpCounterRxLeaveEmptyMsg=sw0657851GvrpCounterRxLeaveEmptyMsg, sw0657851StpStateEnabled=sw0657851StpStateEnabled, sw0657851AccountEntry=sw0657851AccountEntry, sw0657851GvrpCounterTable=sw0657851GvrpCounterTable, sw0657851PortIsolation=sw0657851PortIsolation, sw0657851ModuleInserted=sw0657851ModuleInserted, sw0657851DhcpSetting=sw0657851DhcpSetting, sw0657851GvrpGroupTable=sw0657851GvrpGroupTable, sw0657851IPAddress=sw0657851IPAddress, sw0657851SystemCurrentTime=sw0657851SystemCurrentTime, sw0657851TagBaseVlanGroupEntry=sw0657851TagBaseVlanGroupEntry, sw0657851IpMacBindSettingEntry=sw0657851IpMacBindSettingEntry, sw0657851AclPortsConfPortCopy=sw0657851AclPortsConfPortCopy, sw0657851MacTableInfo=sw0657851MacTableInfo, sw0657851MaxPktLenConfSetting=sw0657851MaxPktLenConfSetting, sw0657851QosRateLimitersIndex=sw0657851QosRateLimitersIndex, sw0657851Dot1XBackendAccessChallenges=sw0657851Dot1XBackendAccessChallenges, sw0657851NTPTimeZone=sw0657851NTPTimeZone, sw0657851MirroringPort=sw0657851MirroringPort, sw0657851SFPFiberType=sw0657851SFPFiberType, sw0657851MacAgeTime=sw0657851MacAgeTime, sw0657851Dot1XStatusMode=sw0657851Dot1XStatusMode, sw0657851Dot1XAuthEapolReqIdFramesTx=sw0657851Dot1XAuthEapolReqIdFramesTx, sw0657851PortStatusSpdDpx=sw0657851PortStatusSpdDpx, sw0657851MacTableStaticForward=sw0657851MacTableStaticForward, sw0657851EventSendTrap=sw0657851EventSendTrap, sw0657851Dot1XAuthAuthReauthsWhileAuthenticated=sw0657851Dot1XAuthAuthReauthsWhileAuthenticated, sw0657851Dot1XPortControl=sw0657851Dot1XPortControl, sw0657851SerialNumber=sw0657851SerialNumber, sw0657851EmailUserIndex=sw0657851EmailUserIndex, sw0657851Dot1XPortmaxReq=sw0657851Dot1XPortmaxReq, sw0657851QosRateLimitersTable=sw0657851QosRateLimitersTable, sw0657851PortBaseVlanGroupMembers=sw0657851PortBaseVlanGroupMembers, sw0657851ClearLog=sw0657851ClearLog, sw0657851VlanPortConfUntagVid=sw0657851VlanPortConfUntagVid, sw0657851Dot1XAuthEapolReqFramesTx=sw0657851Dot1XAuthEapolReqFramesTx, sw0657851AccountAddName=sw0657851AccountAddName, sw0657851Dot1XBackendAuthFails=sw0657851Dot1XBackendAuthFails, sw0657851AggregatorViewEntry=sw0657851AggregatorViewEntry, sw0657851Dot1XStatisticsIndex=sw0657851Dot1XStatisticsIndex, sw0657851LacpPortAdded=sw0657851LacpPortAdded, sw0657851Dot1XAuthEapolLogoffFramesRx=sw0657851Dot1XAuthEapolLogoffFramesRx, sw0657851VlanPortConfIngressFiltering=sw0657851VlanPortConfIngressFiltering, sw0657851Dot1XPorttxPeriod=sw0657851Dot1XPorttxPeriod, sw0657851PortBaseVlanGroup=sw0657851PortBaseVlanGroup, sw0657851PortStatusNumber=sw0657851PortStatusNumber, sw0657851AliasMac=sw0657851AliasMac, sw0657851IpMacBind=sw0657851IpMacBind, sw0657851IpMacBindSettingIP=sw0657851IpMacBindSettingIP, sw0657851MirroredPortIndex=sw0657851MirroredPortIndex, sw0657851PortStatusFlwCtrlTx=sw0657851PortStatusFlwCtrlTx, sw0657851PortStatuDescription=sw0657851PortStatuDescription, sw0657851MacTableStaticForwardVid=sw0657851MacTableStaticForwardVid, sw0657851ManagementSecurityName=sw0657851ManagementSecurityName, sw0657851MacTableLearningConfTable=sw0657851MacTableLearningConfTable, sw0657851StpTopologyChanged=sw0657851StpTopologyChanged, sw0657851GvrpGroupAdministrativeCtrlReg=sw0657851GvrpGroupAdministrativeCtrlReg, sw0657851MacAliasEntryAction=sw0657851MacAliasEntryAction, sw0657851LogTable=sw0657851LogTable, sw0657851SFPVendorName=sw0657851SFPVendorName, sw0657851SFPWavelength=sw0657851SFPWavelength, sw0657851IgmpGroupNo=sw0657851IgmpGroupNo, sw0657851SFPTxPWR=sw0657851SFPTxPWR, sw0657851Dot1XServerConf=sw0657851Dot1XServerConf, sw0657851UserLogin=sw0657851UserLogin, sw0657851IpmbClientFailure=sw0657851IpmbClientFailure, sw0657851PortConf=sw0657851PortConf, sw0657851SFPVendorPN=sw0657851SFPVendorPN, sw0657851FirmwareVersion=sw0657851FirmwareVersion, sw0657851VlanMode=sw0657851VlanMode, sw0657851QosStromCtrlBroadcastRate=sw0657851QosStromCtrlBroadcastRate, sw0657851PortStatusFlwCtrlRx=sw0657851PortStatusFlwCtrlRx, sw0657851PortConfTable=sw0657851PortConfTable, sw0657851Configuration=sw0657851Configuration, sw0657851TrunkPortGroup=sw0657851TrunkPortGroup, sw0657851MacTableStaticForwardAlias=sw0657851MacTableStaticForwardAlias, sw0657851AliasName=sw0657851AliasName, sw0657851Time=sw0657851Time, sw0657851ManagementSecurityNumber=sw0657851ManagementSecurityNumber, sw0657851GvrpGroupAdministrativeCtrlPort=sw0657851GvrpGroupAdministrativeCtrlPort, sw0657851AclRateLimiterRate=sw0657851AclRateLimiterRate, sw0657851NetMask=sw0657851NetMask, sw0657851MacTableStaticForwardPort=sw0657851MacTableStaticForwardPort, sw0657851VlanConf=sw0657851VlanConf, sw0657851NTPTimeSync=sw0657851NTPTimeSync, sw0657851Dot1XPortserverTimeout=sw0657851Dot1XPortserverTimeout, sw0657851LoopDetectedPort=sw0657851LoopDetectedPort, sw0657851EmailUserEntry=sw0657851EmailUserEntry, sw0657851QosPortConfEntry=sw0657851QosPortConfEntry, sw0657851IpmbStateEnabled=sw0657851IpmbStateEnabled, sw0657851AggregatorView=sw0657851AggregatorView, sw0657851Dot1XPortConfTable=sw0657851Dot1XPortConfTable, sw0657851IgmpGroupAddress=sw0657851IgmpGroupAddress, username=username, sw0657851GvrpCounterTxLeaveEmptyMsg=sw0657851GvrpCounterTxLeaveEmptyMsg, sw0657851MacTableStaticFilterVid=sw0657851MacTableStaticFilterVid, sw0657851Snmp=sw0657851Snmp, sw0657851EmailUsername=sw0657851EmailUsername, sw0657851ImportIpAddress=sw0657851ImportIpAddress, sw0657851IpmbServerFailure=sw0657851IpmbServerFailure, sw0657851PortBaseVlanGroupName=sw0657851PortBaseVlanGroupName, sw0657851TagBaseVlanName=sw0657851TagBaseVlanName, sw0657851GvrpConfEntry=sw0657851GvrpConfEntry, sw0657851IgmpProxyConfGeneralQueuyInterval=sw0657851IgmpProxyConfGeneralQueuyInterval, sw0657851GvrpStateEnabled=sw0657851GvrpStateEnabled, sw0657851GvrpCounterEntry=sw0657851GvrpCounterEntry, sw0657851Dot1XStatusTable=sw0657851Dot1XStatusTable, sw0657851AccountAddPassword=sw0657851AccountAddPassword, sw0657851PortBaseVlanGroupEntry=sw0657851PortBaseVlanGroupEntry, sw0657851MacAliasNumber=sw0657851MacAliasNumber, sw0657851TrunkPortTable=sw0657851TrunkPortTable, sw0657851LoopDetectedEntry=sw0657851LoopDetectedEntry, sw0657851EventSendEmail=sw0657851EventSendEmail, sw0657851BiosVsersion=sw0657851BiosVsersion, sw0657851Dot1XBackendResponses=sw0657851Dot1XBackendResponses, sw0657851Dot1XStatisticsEntry=sw0657851Dot1XStatisticsEntry, sw0657851LacpSystemPriority=sw0657851LacpSystemPriority, sw0657851AccountIndex=sw0657851AccountIndex, sw0657851IpMacBindSettingMAC=sw0657851IpMacBindSettingMAC, sw0657851GvrpCounterIndex=sw0657851GvrpCounterIndex, sw0657851EventIndex=sw0657851EventIndex, sw0657851TrunkPortActiveLacp=sw0657851TrunkPortActiveLacp, sw0657851SaveUser=sw0657851SaveUser, sw0657851LogEvent=sw0657851LogEvent, sw0657851Dot1XPortMode=sw0657851Dot1XPortMode, sw0657851ProductID=sw0657851ProductID, sw0657851Dot1XAuthEntersAuthenticating=sw0657851Dot1XAuthEntersAuthenticating, sw0657851PortStatusIndex=sw0657851PortStatusIndex, sw0657851QosPortConfQCL=sw0657851QosPortConfQCL, sw0657851QosPortConfTable=sw0657851QosPortConfTable, sw0657851DaylightStartTime=sw0657851DaylightStartTime, sw0657851MacTableStaticFilterTable=sw0657851MacTableStaticFilterTable, sw0657851IgmpProxyConfState=sw0657851IgmpProxyConfState, sw0657851PortStatusMedia=sw0657851PortStatusMedia, sw0657851EmailServer=sw0657851EmailServer, sw0657851UserLogout=sw0657851UserLogout, sw0657851ExportIpAddress=sw0657851ExportIpAddress, sw0657851FirmwareIpAddress=sw0657851FirmwareIpAddress, sw0657851Dot1XPortreAuthEnabled=sw0657851Dot1XPortreAuthEnabled, sw0657851IgmpGroupVLANId=sw0657851IgmpGroupVLANId, sw0657851Dot1XBackendOtherRequestsToSupplicant=sw0657851Dot1XBackendOtherRequestsToSupplicant, sw0657851IgmpProxyConfRouterPorts=sw0657851IgmpProxyConfRouterPorts, sw0657851MechanicalVersion=sw0657851MechanicalVersion, sw0657851PortConfSpdDpx=sw0657851PortConfSpdDpx, sw0657851GvrpCounterRxEmptyMsg=sw0657851GvrpCounterRxEmptyMsg, sw0657851TagBaseVlanIgmpProxy=sw0657851TagBaseVlanIgmpProxy, sw0657851LogIndex=sw0657851LogIndex, sw0657851TrapHostCommunity=sw0657851TrapHostCommunity, sw0657851IpMacBindSetting=sw0657851IpMacBindSetting, sw0657851LogNumber=sw0657851LogNumber, sw0657851TagBaseVlanVid=sw0657851TagBaseVlanVid, sw0657851ManagementSecurityAccessType=sw0657851ManagementSecurityAccessType, sw0657851GvrpGroupAdministrativeCtrlTable=sw0657851GvrpGroupAdministrativeCtrlTable, sw0657851TrunkPortStatus=sw0657851TrunkPortStatus, sw0657851VlanPortConfTable=sw0657851VlanPortConfTable, sw0657851LogEntry=sw0657851LogEntry, sw0657851AclPortsConfIndex=sw0657851AclPortsConfIndex, sw0657851ManagementSecurityTable=sw0657851ManagementSecurityTable, sw0657851GvrpConfDefaultRegMode=sw0657851GvrpConfDefaultRegMode, sw0657851Dot1XServerConfAccountingSecretKey=sw0657851Dot1XServerConfAccountingSecretKey, sw0657851MacTableStaticForwardEntryCreate=sw0657851MacTableStaticForwardEntryCreate, sw0657851MacTableStaticForwardNumber=sw0657851MacTableStaticForwardNumber, sw0657851Dot1XServerConfAuthenticationUdpPort=sw0657851Dot1XServerConfAuthenticationUdpPort, sw0657851GvrpConfDefaultAppMode=sw0657851GvrpConfDefaultAppMode, sw0657851PortConfFlwCtrl=sw0657851PortConfFlwCtrl, sw0657851Dot1XPortsuppTimeout=sw0657851Dot1XPortsuppTimeout, sw0657851TrunkPortAggtr=sw0657851TrunkPortAggtr, sw0657851IgmpGroupMembershipEntry=sw0657851IgmpGroupMembershipEntry, sw0657851IGMPInfo=sw0657851IGMPInfo, sw0657851SFPInfoEntry=sw0657851SFPInfoEntry, sw0657851VlanPortConfIndex=sw0657851VlanPortConfIndex, sw0657851VlanPortConfPvid=sw0657851VlanPortConfPvid, sw0657851HostMacAddress=sw0657851HostMacAddress, sw0657851AggregatorViewMethod=sw0657851AggregatorViewMethod, sw0657851QosStormCtrl=sw0657851QosStormCtrl)
mibBuilder.exportSymbols("SIGNAMAX-SW0657851-MIB", ipmacClientIp=ipmacClientIp, sw0657851Dot1XauthEapLogoffsWhileConnecting=sw0657851Dot1XauthEapLogoffsWhileConnecting, sw0657851TagBaseVlanMemberPort=sw0657851TagBaseVlanMemberPort, sw0657851VlanTagBaseEnabled=sw0657851VlanTagBaseEnabled, sw0657851MacTableStaticForwardMac=sw0657851MacTableStaticForwardMac, sw0657851AccountNumber=sw0657851AccountNumber, sw0657851Dot1XServerConfAccountingServerIp=sw0657851Dot1XServerConfAccountingServerIp, sw0657851GvrpConfIndex=sw0657851GvrpConfIndex, sw0657851TrunkInfo=sw0657851TrunkInfo, sw0657851MacTableStaticForwardEntryAction=sw0657851MacTableStaticForwardEntryAction, sw0657851GvrpCounterTxJoinInMsg=sw0657851GvrpCounterTxJoinInMsg, sw0657851Firmware=sw0657851Firmware, sw0657851GvrpCounterRxJoinInMsg=sw0657851GvrpCounterRxJoinInMsg, sw0657851LoopDetectedNumber=sw0657851LoopDetectedNumber, sw0657851QosStromCtrlFloodedUnicastStatus=sw0657851QosStromCtrlFloodedUnicastStatus, sw0657851EmailPassword=sw0657851EmailPassword, sw0657851QosStromCtrlMulticastStatus=sw0657851QosStromCtrlMulticastStatus, sw0657851Dot1XBackendAuthSuccesses=sw0657851Dot1XBackendAuthSuccesses, sw0657851GetCommunity=sw0657851GetCommunity, sw0657851SFPRxPWR=sw0657851SFPRxPWR, sw0657851AclPortsConfTable=sw0657851AclPortsConfTable, sw0657851System=sw0657851System, sw0657851EmailUserNumber=sw0657851EmailUserNumber, sw0657851Dot1XAuthAuthTimeoutsWhileAuthenticating=sw0657851Dot1XAuthAuthTimeoutsWhileAuthenticating, sw0657851PortBaseVlanGroupEntryCreate=sw0657851PortBaseVlanGroupEntryCreate, sw0657851TrapHostPort=sw0657851TrapHostPort, sw0657851AccountTable=sw0657851AccountTable, sw0657851IpmbStateDisabled=sw0657851IpmbStateDisabled, sw0657851QosPortConfQueueWeightedLow=sw0657851QosPortConfQueueWeightedLow, sw0657851GvrpCounterRxTotalGvrpPkts=sw0657851GvrpCounterRxTotalGvrpPkts, sw0657851Dot1XPortreAuthPeriod=sw0657851Dot1XPortreAuthPeriod, sw0657851GvrpGroupAdministrativeCtrlApp=sw0657851GvrpGroupAdministrativeCtrlApp, sw0657851SFPInfoNumber=sw0657851SFPInfoNumber, sw0657851ModuleRemoved=sw0657851ModuleRemoved, sw0657851SFPVcc=sw0657851SFPVcc, sw0657851TagBaseVlanGroupTable=sw0657851TagBaseVlanGroupTable, sw0657851DevicePort=sw0657851DevicePort, sw0657851MaxPktLenPortNumber=sw0657851MaxPktLenPortNumber, sw0657851PortConfExcessiveCollisionMode=sw0657851PortConfExcessiveCollisionMode, sw0657851DnsSetting=sw0657851DnsSetting, sw0657851MacAliasEntryCreate=sw0657851MacAliasEntryCreate, sw0657851SaveStart=sw0657851SaveStart, sw0657851PortConfIndex=sw0657851PortConfIndex, sw0657851FlashSize=sw0657851FlashSize, sw0657851Event=sw0657851Event, sw0657851Dot1X=sw0657851Dot1X, sw0657851ManagementSecurityEntryAction=sw0657851ManagementSecurityEntryAction, sw0657851LoopDetected=sw0657851LoopDetected, sw0657851AclRateLimiterTable=sw0657851AclRateLimiterTable, sw0657851AggregatorViewMemberPorts=sw0657851AggregatorViewMemberPorts, sw0657851MacTableStaticFilterEntryCreate=sw0657851MacTableStaticFilterEntryCreate, sw0657851IgmpGroupPortMembers=sw0657851IgmpGroupPortMembers, sw0657851IpMacBindstate=sw0657851IpMacBindstate, sw0657851SFPTxBias=sw0657851SFPTxBias, sw0657851Dot1XAuthEapolFramesRx=sw0657851Dot1XAuthEapolFramesRx, sw0657851TagBaseVlanNumber=sw0657851TagBaseVlanNumber, sw0657851MirroredPortSrouceEnable=sw0657851MirroredPortSrouceEnable, sw0657851GvrpCounterRxInvalidGvrpPkts=sw0657851GvrpCounterRxInvalidGvrpPkts, sw0657851Dot1XAuthEapolRespIdFramesRx=sw0657851Dot1XAuthEapolRespIdFramesRx, sw0657851MirroredPortDestinationEnable=sw0657851MirroredPortDestinationEnable, sw0657851LacpStateDisabled=sw0657851LacpStateDisabled, sw0657851MacTableStaticFilterIndex=sw0657851MacTableStaticFilterIndex, sw0657851GvrpConfState=sw0657851GvrpConfState, sw0657851SFPVendorOUI=sw0657851SFPVendorOUI, sw0657851PortConfNumber=sw0657851PortConfNumber, sw0657851Dot1XAuthEntersConnecting=sw0657851Dot1XAuthEntersConnecting, sw0657851QosNumOfClasses=sw0657851QosNumOfClasses, sw0657851AclPortsConfCounter=sw0657851AclPortsConfCounter, sw0657851ManagementSecurityAction=sw0657851ManagementSecurityAction, sw0657851QosInfo=sw0657851QosInfo, sw0657851GvrpStateDisabled=sw0657851GvrpStateDisabled, sw0657851HardwareVersion=sw0657851HardwareVersion, sw0657851DaylightSavingTime=sw0657851DaylightSavingTime, sw0657851AclInfo=sw0657851AclInfo, sw0657851MacTableStaticFilterNumber=sw0657851MacTableStaticFilterNumber, sw0657851Dot1XAuthEapolStartFramesRx=sw0657851Dot1XAuthEapolStartFramesRx, sw0657851GVRPInfo=sw0657851GVRPInfo, sw0657851Dot1XPort=sw0657851Dot1XPort, sw0657851MacTableStaticForwardIndex=sw0657851MacTableStaticForwardIndex, sw0657851Dot1XStatusStatus=sw0657851Dot1XStatusStatus, sw0657851DaylightEndTime=sw0657851DaylightEndTime, sw0657851AccountAuthorization=sw0657851AccountAuthorization, sw0657851MaxPktLenConfEntry=sw0657851MaxPktLenConfEntry, ipmacIp=ipmacIp, sw0657851GvrpGroupAdministrativeCtrlEntry=sw0657851GvrpGroupAdministrativeCtrlEntry, sw0657851GvrpGroupMemberPort=sw0657851GvrpGroupMemberPort, sw0657851GvrpCounterRxJoinEmptyMsg=sw0657851GvrpCounterRxJoinEmptyMsg, sw0657851IpMacBindSettingEntryAction=sw0657851IpMacBindSettingEntryAction, sw0657851IgmpGroupMembershipNumber=sw0657851IgmpGroupMembershipNumber, sw0657851QosPortConfQueuingMode=sw0657851QosPortConfQueuingMode, sw0657851PortConfPortState=sw0657851PortConfPortState, sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticated=sw0657851Dot1XAuthAuthEapLogoffWhileAuthenticated, sw0657851GvrpCounterRxLeaveAllMsg=sw0657851GvrpCounterRxLeaveAllMsg, sw0657851IpMacBindSettingIndex=sw0657851IpMacBindSettingIndex, sw0657851IgmpGroupMembershipTable=sw0657851IgmpGroupMembershipTable, sw0657851MacTableStaticFilter=sw0657851MacTableStaticFilter, sw0657851SetCommunity=sw0657851SetCommunity, sw0657851DeviceName=sw0657851DeviceName, sw0657851RamSize=sw0657851RamSize, sw0657851QosPortConfQueueWeightedNormal=sw0657851QosPortConfQueueWeightedNormal, sw0657851AggregatorViewReadyPorts=sw0657851AggregatorViewReadyPorts, sw0657851AclRateLimiterEntry=sw0657851AclRateLimiterEntry, sw0657851PortBaseVlanGroupIndex=sw0657851PortBaseVlanGroupIndex, sw0657851SFPVendorSN=sw0657851SFPVendorSN, sw0657851AclPortsConfPolicyId=sw0657851AclPortsConfPolicyId, sw0657851VlanPortConfEntry=sw0657851VlanPortConfEntry, sw0657851TagBaseVlanPrivateVlan=sw0657851TagBaseVlanPrivateVlan, sw0657851VlanPortConfVlanAware=sw0657851VlanPortConfVlanAware, sw0657851GvrpCounterTxEmptyMsg=sw0657851GvrpCounterTxEmptyMsg, sw0657851MacTableStaticForwardEntry=sw0657851MacTableStaticForwardEntry, sw0657851EventName=sw0657851EventName, sw0657851RestoreDefault=sw0657851RestoreDefault, sw0657851Dot1XServerConfAccountingUdpPort=sw0657851Dot1XServerConfAccountingUdpPort, sw0657851GvrpConfRestrictedMode=sw0657851GvrpConfRestrictedMode, sw0657851TagBaseVlanEntryAction=sw0657851TagBaseVlanEntryAction, sw0657851VlanStateDisabled=sw0657851VlanStateDisabled, sw0657851PortBaseVlanNumber=sw0657851PortBaseVlanNumber, sw0657851IpMacBindSettingTable=sw0657851IpMacBindSettingTable, sw0657851SFPInfoIndex=sw0657851SFPInfoIndex, sw0657851GvrpGroupEntry=sw0657851GvrpGroupEntry, sw0657851Dot1XPortreAuthMax=sw0657851Dot1XPortreAuthMax, sw0657851PortStatusEntry=sw0657851PortStatusEntry, sw0657851Dot1XAuthAuthSuccessesWhileAuthenticating=sw0657851Dot1XAuthAuthSuccessesWhileAuthenticating, sw0657851QosPortConfQueueWeightedHigh=sw0657851QosPortConfQueueWeightedHigh, sw0657851EventTable=sw0657851EventTable, sw0657851MacTableLearningConfIndex=sw0657851MacTableLearningConfIndex, sw0657851TrapHostIndex=sw0657851TrapHostIndex, sw0657851Dot1XStatisticsTable=sw0657851Dot1XStatisticsTable, sw0657851DnsServer=sw0657851DnsServer, sw0657851ConfigFile=sw0657851ConfigFile, sw0657851Reboot=sw0657851Reboot, sw0657851SFPBaudRate=sw0657851SFPBaudRate, sw0657851EventNumber=sw0657851EventNumber, partnerkey=partnerkey, sw0657851LacpPortTrunkFailure=sw0657851LacpPortTrunkFailure, sw0657851DualMediaSwapped=sw0657851DualMediaSwapped, sw0657851QosStromCtrlBroadcastStatus=sw0657851QosStromCtrlBroadcastStatus, ipmacServerIp=ipmacServerIp, sw0657851MacTableStaticFilterAlias=sw0657851MacTableStaticFilterAlias, sw0657851GvrpGroupNumber=sw0657851GvrpGroupNumber, sw0657851GvrpGroupVid=sw0657851GvrpGroupVid, sw0657851TagBaseVlanGvrp=sw0657851TagBaseVlanGvrp, sw0657851TrapHostTable=sw0657851TrapHostTable, sw0657851AggregatorViewTable=sw0657851AggregatorViewTable, sw0657851PortBaseVlanGroupEntryAction=sw0657851PortBaseVlanGroupEntryAction, sw0657851MacTableStaticForwardTable=sw0657851MacTableStaticForwardTable, sw0657851MacTableLearningConfstate=sw0657851MacTableLearningConfstate, sw0657851VlanPortConfDoubleTag=sw0657851VlanPortConfDoubleTag, sw0657851TrunkPortMethod=sw0657851TrunkPortMethod, PYSNMP_MODULE_ID=signamax, sw0657851QosRateLimitersShaper=sw0657851QosRateLimitersShaper, sw0657851Dot1XServerConfAuthenticationSecretKey=sw0657851Dot1XServerConfAuthenticationSecretKey, sw0657851TrapEntry=sw0657851TrapEntry, sw0657851GvrpGroupAdministrativeCtrlVid=sw0657851GvrpGroupAdministrativeCtrlVid, sw0657851GvrpGroup=sw0657851GvrpGroup, sw0657851MacTableStaticFilterMac=sw0657851MacTableStaticFilterMac, sw0657851GvrpCounterTxJoinEmptyMsg=sw0657851GvrpCounterTxJoinEmptyMsg, sw0657851ManagementSecurityEntryCreate=sw0657851ManagementSecurityEntryCreate, sw0657851IgmpProxyConfLastMemberQueuyMaxRepTime=sw0657851IgmpProxyConfLastMemberQueuyMaxRepTime, sw0657851AclPortsConfEntry=sw0657851AclPortsConfEntry, sw0657851TrapVariable=sw0657851TrapVariable, sw0657851Dot1XAuthEapolFramesTx=sw0657851Dot1XAuthEapolFramesTx, sw0657851DoFirmwareUpgrade=sw0657851DoFirmwareUpgrade, sw0657851MacAlias=sw0657851MacAlias, sw0657851MirroredPortsEntry=sw0657851MirroredPortsEntry, sw0657851Dot1XAuthEapolRespFramesRx=sw0657851Dot1XAuthEapolRespFramesRx, sw0657851GvrpConf=sw0657851GvrpConf, sw0657851Email=sw0657851Email, sw0657851ImportConfigName=sw0657851ImportConfigName, sw0657851SFPDateCode=sw0657851SFPDateCode, sw0657851MirroredPortsTable=sw0657851MirroredPortsTable, switch=switch, sw0657851QosPortConfDefaultClasses=sw0657851QosPortConfDefaultClasses, sw0657851AclPortsConfAction=sw0657851AclPortsConfAction, sw0657851StpStateDisabled=sw0657851StpStateDisabled, sw0657851TrunkPortEntry=sw0657851TrunkPortEntry, sw0657851EventEntry=sw0657851EventEntry, sw0657851GvrpCounter=sw0657851GvrpCounter, sw0657851IpMacBindSettingVID=sw0657851IpMacBindSettingVID, sw0657851Dot1XStatusEntry=sw0657851Dot1XStatusEntry, sw0657851Dot1XAuthAuthFailWhileAuthenticating=sw0657851Dot1XAuthAuthFailWhileAuthenticating, sw0657851PortConfDescription=sw0657851PortConfDescription, sw0657851TrapHostEntry=sw0657851TrapHostEntry, sw0657851QosStromCtrlMulticastRate=sw0657851QosStromCtrlMulticastRate, sw0657851AclPortsConfRateLimiterId=sw0657851AclPortsConfRateLimiterId, sw0657851Alarm=sw0657851Alarm, sw0657851GvrpConfTable=sw0657851GvrpConfTable, sw0657851GvrpCounterTxTotalGvrpPkts=sw0657851GvrpCounterTxTotalGvrpPkts, sw0657851VlanPortBaseEnabled=sw0657851VlanPortBaseEnabled, sw0657851GvrpGroupId=sw0657851GvrpGroupId, sw0657851PortStatusTable=sw0657851PortStatusTable, sw0657851TrapHostNumber=sw0657851TrapHostNumber, sw0657851IpMacBindConf=sw0657851IpMacBindConf, sw0657851MacAliasTable=sw0657851MacAliasTable, sw0657851QosRateLimitersPolicer=sw0657851QosRateLimitersPolicer, sw0657851MacTableConf=sw0657851MacTableConf, sw0657851PortConfEntry=sw0657851PortConfEntry, sw0657851MacTableStaticFilterEntry=sw0657851MacTableStaticFilterEntry, sw0657851Produces=sw0657851Produces, sw0657851DoImportConfig=sw0657851DoImportConfig, sw0657851LoopDetectedfIndex=sw0657851LoopDetectedfIndex, sw0657851Log=sw0657851Log, sw0657851MaxPktLenConfTable=sw0657851MaxPktLenConfTable, sw0657851ManagementSecurityIndex=sw0657851ManagementSecurityIndex, actorkey=actorkey, sw0657851LoopDetectedLockedPort=sw0657851LoopDetectedLockedPort, sw0657851TrunkPortCurrentMode=sw0657851TrunkPortCurrentMode, sw0657851LoopDetectedTable=sw0657851LoopDetectedTable, sw0657851GvrpConfJoinTime=sw0657851GvrpConfJoinTime, sw0657851LacpStateEnabled=sw0657851LacpStateEnabled, sw0657851GvrpConfLeaveTime=sw0657851GvrpConfLeaveTime, sw0657851IpMacBindSettingNumber=sw0657851IpMacBindSettingNumber, sw0657851MaxPktLenConfIndex=sw0657851MaxPktLenConfIndex, sw0657851QosPortConfIndex=sw0657851QosPortConfIndex, sw0657851Dot1XClearCounter=sw0657851Dot1XClearCounter, sw0657851QosRateLimitersShaperRate=sw0657851QosRateLimitersShaperRate, sw0657851EmailUserTable=sw0657851EmailUserTable, sw0657851Dot1XPortConfEntry=sw0657851Dot1XPortConfEntry, sw0657851IgmpProxyConfLastMemberQueuyInterval=sw0657851IgmpProxyConfLastMemberQueuyInterval)
