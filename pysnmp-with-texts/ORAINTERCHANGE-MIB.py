#
# PySNMP MIB module ORAINTERCHANGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ORAINTERCHANGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
applIndex, = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, IpAddress, ObjectIdentity, NotificationType, Counter64, NotificationType, MibIdentifier, TimeTicks, enterprises, Bits, Integer32, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "IpAddress", "ObjectIdentity", "NotificationType", "Counter64", "NotificationType", "MibIdentifier", "TimeTicks", "enterprises", "Bits", "Integer32", "ModuleIdentity", "Gauge32")
TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString")
oracle = MibIdentifier((1, 3, 6, 1, 4, 1, 111))
oraInterchangeMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 111, 7))
oraInterchangeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 111, 7, 1))
oraInterchgTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 1), )
if mibBuilder.loadTexts: oraInterchgTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraInterchgTable.setDescription('The table of information about a Multiprotocol Interchange.')
oraInterchgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: oraInterchgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraInterchgEntry.setDescription('An entry in the table associated with a Multiprotocol Interchange.')
oraInterchgConfigDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraInterchgConfigDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: oraInterchgConfigDirectory.setDescription('The directory which contains the Multiprotocol Interchange configuration files. The default TNS_ADMIN directory is /$ORACLE_HOME/NETWORK/ADMIN.')
oraInterchgContactInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraInterchgContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: oraInterchgContactInfo.setDescription('Provides the information of the person to contact for the Multiprotocol Interchange issue, this information is read from the SNMP.ORA file.')
oraNavigatorTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 2), )
if mibBuilder.loadTexts: oraNavigatorTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorTable.setDescription('The table of information about the status of a Navigator.')
oraNavigatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: oraNavigatorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorEntry.setDescription('An entry in the table associated with a Navigator.')
oraNavigatorRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorRunningTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorRunningTime.setDescription('The elapsed time in secs since a Navigator was last started.')
oraNavigatorLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNavigatorLogging.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorLogging.setDescription('Indicates whether a Navigator should log the requests.')
oraNavigatorLoggingLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("errors", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNavigatorLoggingLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorLoggingLevel.setDescription('Indicates whether a Navigator should log all the requests or errors only.')
oraNavigatorLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorLogFile.setDescription('Indicates the name of the log file the Navigator created. Default log file name is /$ORACLE_HOME/network/log/navgatr.log, where $ORACLE_HOME is the path which the ORACLE_HOME points to.')
oraNavigatorTraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("user", 4), ("level5", 5), ("admin", 6), ("level7", 7), ("level8", 8), ("level9", 9), ("level10", 10), ("level11", 11), ("level12", 12), ("level13", 13), ("level14", 14), ("level15", 15), ("level16", 16), ("off", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNavigatorTraceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorTraceLevel.setDescription('Indicates the level at which a Navigator should be traced.')
oraNavigatorTraceFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorTraceFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorTraceFile.setDescription('Indicates the name of the trace file the Navigator created. On an Unix platform, the default trace file name is /$ORACLE_HOME/network/trace/nav_pid.trc, where pid is the process ID of the Navigator and $ORACLE_HOME is the path which the ORACLE_HOME points to.')
oraNavigatorStoppable = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNavigatorStoppable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorStoppable.setDescription('Indicates whether a Navigator can be stopped using the Multiprotocol Interchange Control Utility program.')
oraNavigatorAccumulatedSuccessfulRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorAccumulatedSuccessfulRequests.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorAccumulatedSuccessfulRequests.setDescription('The total number of successful requests received by a Navigator.')
oraNavigatorAccumulatedFailedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorAccumulatedFailedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorAccumulatedFailedRequests.setDescription('The total number of unsuccessful requests received by a Navigator.')
oraNavigatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorState.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorState.setDescription('Indicates the current state of a Navigator.')
oraNavigatorErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorErrors.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorErrors.setDescription('The error stack of a Navigator when it fails.')
oraNavigatorErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorErrorMessage.setDescription('The error message of a Navigator when it fails.')
oraNavigatorListenAddressTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 3), )
if mibBuilder.loadTexts: oraNavigatorListenAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorListenAddressTable.setDescription('The table of information about the addresses that a Navigator is listening on.')
oraNavigatorListenAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraNavigatorListenAddressIndex"))
if mibBuilder.loadTexts: oraNavigatorListenAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorListenAddressEntry.setDescription('An entry in the table associated with the addresses at which a Navigator is listening on.')
oraNavigatorListenAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorListenAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorListenAddressIndex.setDescription('A numeric index, unique among all the listen addresses at which a Navigator is listening on.')
oraNavigatorListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorListenAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorListenAddress.setDescription('The addresses at which a Navigator is listening on.')
oraNavigatorFailedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 4), )
if mibBuilder.loadTexts: oraNavigatorFailedAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorFailedAddressTable.setDescription('The table of information about the addresses that a Navigator fails to listen on.')
oraNavigatorFailedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 4, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraNavigatorFailedAddressIndex"))
if mibBuilder.loadTexts: oraNavigatorFailedAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorFailedAddressEntry.setDescription('An entry in the table associated with the addresses that a Navigator fails to listen on.')
oraNavigatorFailedAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorFailedAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorFailedAddressIndex.setDescription('A numeric index, unique among all the addresses which a Navigator fails to listen on.')
oraNavigatorFailedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorFailedAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorFailedAddress.setDescription('The address that a Navigator fails to listen on.')
oraNavigatorRouteAddressTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 5), )
if mibBuilder.loadTexts: oraNavigatorRouteAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorRouteAddressTable.setDescription('The table of information about the routable addresses that a Navigator has.')
oraNavigatorRouteAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 5, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraNavigatorRouteAddressIndex"))
if mibBuilder.loadTexts: oraNavigatorRouteAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorRouteAddressEntry.setDescription('An entry in the table associated with the routable addresses that a Navigator has.')
oraNavigatorRouteAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorRouteAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorRouteAddressIndex.setDescription('A numeric index, unique among all the routable addresses that a Navigator has.')
oraNavigatorRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNavigatorRouteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraNavigatorRouteAddress.setDescription('The routable address that a Navigator has.')
oraCmanagerTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 6), )
if mibBuilder.loadTexts: oraCmanagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerTable.setDescription('The table of information about the status of a Connection Manager.')
oraCmanagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: oraCmanagerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerEntry.setDescription('An entry in the table associated with a Connection Manager.')
oraCmanagerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerStartTime.setDescription('The time when a Connection Manager was started. The format is date-month-yr hr:min:sec.')
oraCmanagerRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerRunningTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerRunningTime.setDescription('The elapsed time in secs since a Connection Manager was last started.')
oraCmanagerLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraCmanagerLogging.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerLogging.setDescription('Indicates whether a Connection Manager should log the requests.')
oraCmanagerLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerLogFile.setDescription('Indicates the name of the log file the Connection Manager created. The default log file name is /$ORACLE_HOME/network/log/intlsnr.log, where $ORACLE_HOME is the path which the ORACLE_HOME points to.')
oraCmanagerTraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("user", 4), ("level5", 5), ("admin", 6), ("level7", 7), ("level8", 8), ("level9", 9), ("level10", 10), ("level11", 11), ("level12", 12), ("level13", 13), ("level14", 14), ("level15", 15), ("level16", 16), ("off", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraCmanagerTraceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerTraceLevel.setDescription('Indicates the level at which a Connection Manager should be traced.')
oraCmanagerTraceFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerTraceFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerTraceFile.setDescription('Indicates the name of the trace file the Connection Manager created. On an Unix platform, the default trace file name is /$ORACLE_HOME/network/trace/cmg_pid.trc, where pid is the process ID of the Connection Manager and $ORACLE_HOME is the path which ORACLE_HOME points to.')
oraCmanagerStoppable = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraCmanagerStoppable.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerStoppable.setDescription('Indicates whether a Connection Manager can be stopped by the Multiprotocol Interchange Control Utility program.')
oraCmanagerMaximumPumps = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraCmanagerMaximumPumps.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerMaximumPumps.setDescription('The maximum number of pumps that can be started by the Connection Manager.')
oraCmanagerMaximumConnectionsPerPump = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraCmanagerMaximumConnectionsPerPump.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerMaximumConnectionsPerPump.setDescription('The maximum number of connections per pump that can be started by the Connection Manager.')
oraCmanagerPumpStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("distribute", 1), ("group", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraCmanagerPumpStrategy.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerPumpStrategy.setDescription('Indicates a Pump allocation strategy.')
oraCmanagerActivePumps = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerActivePumps.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerActivePumps.setDescription('The total number of pumps that are currently active.')
oraCmanagerMaximumConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerMaximumConnections.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerMaximumConnections.setDescription('The maximum number of connections that are available.')
oraCmanagerCurrentConnectionsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerCurrentConnectionsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerCurrentConnectionsInUse.setDescription('The total number of connections that are currently used.')
oraCmanagerAccumulatedSuccessfulConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerAccumulatedSuccessfulConnections.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerAccumulatedSuccessfulConnections.setDescription('The total number of successful connections through the Multiprotocol Interchange.')
oraCmanagerAccumulatedFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerAccumulatedFailedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerAccumulatedFailedConnections.setDescription('The total number of unsuccessful connections through the Multiprotocol Interchange.')
oraCmanagerImmediateAverageBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerImmediateAverageBytes.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerImmediateAverageBytes.setDescription('The immediate average number of bytes sent per second.')
oraCmanagerMaximumConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerMaximumConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerMaximumConnectTime.setDescription('The maximum time in centi-seconds to establish a connection.')
oraCmanagerMinimumConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerMinimumConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerMinimumConnectTime.setDescription('The minimum time in centi-seconds to establish a connection.')
oraCmanagerAverageConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerAverageConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerAverageConnectTime.setDescription('The average time in centi-seconds to establish a connection.')
oraCmanagerMaximumConnectDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerMaximumConnectDuration.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerMaximumConnectDuration.setDescription('The maximum connection duration time in centi-seconds. This is the elapsed time between a connection is established and before the connection is terminated.')
oraCmanagerState = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerState.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerState.setDescription('Indicates the current state of a Connection Manager.')
oraCmanagerErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerErrors.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerErrors.setDescription('The error stack of a Connection Manager when it fails.')
oraCmanagerErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 6, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerErrorMessage.setDescription('The error message of a Connection Manager when it fails.')
oraCmanagerListenAddressTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 7), )
if mibBuilder.loadTexts: oraCmanagerListenAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerListenAddressTable.setDescription('The table of information about the addresses that a Connection Manager is listening on.')
oraCmanagerListenAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 7, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraCmanagerListenAddressIndex"))
if mibBuilder.loadTexts: oraCmanagerListenAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerListenAddressEntry.setDescription('An entry in the table associated with the addresses at which a Connection Manager is listening on.')
oraCmanagerListenAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerListenAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerListenAddressIndex.setDescription('A numeric index, unique among all the listen addresses at which a Connection Manager is listening on.')
oraCmanagerListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerListenAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerListenAddress.setDescription('The address at which a Connection Manager is listening on.')
oraCmanagerFailedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 8), )
if mibBuilder.loadTexts: oraCmanagerFailedAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerFailedAddressTable.setDescription('The table of information about the addresses that a Connection Manager fails to listen on.')
oraCmanagerFailedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 8, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraCmanagerFailedAddressIndex"))
if mibBuilder.loadTexts: oraCmanagerFailedAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerFailedAddressEntry.setDescription('An entry in the table associated with the addresses that a Connection Manager fails to listen on.')
oraCmanagerFailedAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerFailedAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerFailedAddressIndex.setDescription('A numeric index, unique among all the addresses which a Connection Manager fails to listen on.')
oraCmanagerFailedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraCmanagerFailedAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraCmanagerFailedAddress.setDescription('The address that a Connection Manager fails to listen on.')
oraPumpTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 9), )
if mibBuilder.loadTexts: oraPumpTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpTable.setDescription('The table of information about the status of a Pump.')
oraPumpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraPumpIndex"))
if mibBuilder.loadTexts: oraPumpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpEntry.setDescription('An entry in the table associated with a Pump.')
oraPumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpIndex.setDescription('A numeric index, unique among all the pumps.')
oraPumpActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpActiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpActiveTime.setDescription('The number of minutes a Pump remains active after the last connection disconnects.')
oraPumpTraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level3", 3), ("user", 4), ("level5", 5), ("admin", 6), ("level7", 7), ("level8", 8), ("level9", 9), ("level10", 10), ("level11", 11), ("level12", 12), ("level13", 13), ("level14", 14), ("level15", 15), ("level16", 16), ("off", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraPumpTraceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpTraceLevel.setDescription('Indicates the level at which a Pump should be traced.')
oraPumpTraceFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpTraceFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpTraceFile.setDescription('Indicates the name of the trace file the pump created. On an Unix platform, the default trace file name is /$ORACLE_HOME/network/trace/pmp_PID.trc, where pid is the process ID of the pump and $ORACLE_HOME is the path which the ORACLE_HOME points to.')
oraPumpActiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpActiveConnections.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpActiveConnections.setDescription('The number of connections that are currently active.')
oraPumpSuccessfulConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpSuccessfulConnections.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpSuccessfulConnections.setDescription('The total number of successful connections through the pump.')
oraPumpFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpFailedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpFailedConnections.setDescription('The total number of unsuccessful connections through the pump.')
oraPumpAccumulatedBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpAccumulatedBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpAccumulatedBytesSent.setDescription('The total number of bytes sent through the pump.')
oraPumpCurrentBytesPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpCurrentBytesPerSecond.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpCurrentBytesPerSecond.setDescription('The current number of bytes sent per second through the pump.')
oraPumpMaximumAverageBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpMaximumAverageBytes.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpMaximumAverageBytes.setDescription('The maximum average number of bytes sent through the pump.')
oraPumpImmediateAverageBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpImmediateAverageBytes.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpImmediateAverageBytes.setDescription('The immediate average number of bytes sent through the pump.')
oraPumpMaximumConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpMaximumConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpMaximumConnectTime.setDescription('The maximum time in centi-seconds to establish a connection.')
oraPumpMinimumConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpMinimumConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpMinimumConnectTime.setDescription('The minimum time in centi-seconds to establish a connection.')
oraPumpAverageConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpAverageConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpAverageConnectTime.setDescription('The average time in centi-seconds to establish a connection.')
oraPumpMaximumConnectDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpMaximumConnectDuration.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpMaximumConnectDuration.setDescription('The maximum connection duration time in centi-seconds. This is the elapsed time between a connection is established and before the connection is terminated.')
oraPumpMaximumBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraPumpMaximumBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpMaximumBuffers.setDescription('The maximum number of buffers available for use by connections in the pump.')
oraPumpBufferUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpBufferUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpBufferUtilization.setDescription('The pump buffer utilization in percentage.')
oraPumpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpErrors.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpErrors.setDescription('The error stack of a Pump when it fails.')
oraPumpErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 9, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpErrorMessage.setDescription('The error message of a Pump when it fails.')
oraPumpListenAddressTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 10), )
if mibBuilder.loadTexts: oraPumpListenAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpListenAddressTable.setDescription('The table of information about the addresses that a Pump is listening on.')
oraPumpListenAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 10, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraPumpIndex"), (0, "ORAINTERCHANGE-MIB", "oraPumpListenAddressIndex"))
if mibBuilder.loadTexts: oraPumpListenAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpListenAddressEntry.setDescription('An entry in the table associated with the addresses at which a Pump is listening on.')
oraPumpListenAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpListenAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpListenAddressIndex.setDescription('A numeric index, unique among all the listen addresses at which a pump is listening on.')
oraPumpListenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpListenAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpListenAddress.setDescription('The address at which a Pump is listening on.')
oraPumpFailedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 11), )
if mibBuilder.loadTexts: oraPumpFailedAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpFailedAddressTable.setDescription('The table of information about the addresses that a Pump fails to listen on.')
oraPumpFailedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 11, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraPumpIndex"), (0, "ORAINTERCHANGE-MIB", "oraPumpFailedAddressIndex"))
if mibBuilder.loadTexts: oraPumpFailedAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpFailedAddressEntry.setDescription('An entry in the table associated with the addresses that a Pump fails to listen on.')
oraPumpFailedAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpFailedAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpFailedAddressIndex.setDescription('A numeric index, unique among all the addresses which a pump fails to listen on.')
oraPumpFailedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraPumpFailedAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraPumpFailedAddress.setDescription('The address that a Pump fails to listen on.')
oraConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 111, 7, 1, 12), )
if mibBuilder.loadTexts: oraConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionTable.setDescription('The table of information about the status of a connection.')
oraConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 7, 1, 12, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "ORAINTERCHANGE-MIB", "oraPumpIndex"), (0, "ORAINTERCHANGE-MIB", "oraConnectionIndex"))
if mibBuilder.loadTexts: oraConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionEntry.setDescription('An entry in the table associated with a connection.')
oraConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraConnectionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionIndex.setDescription('A numeric index, unique among all the connections that a pump has.')
oraConnectionPumpID = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraConnectionPumpID.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionPumpID.setDescription('The Pump ID of a connection.')
oraConnectionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraConnectionIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionIdleTime.setDescription('The number of minutes a connection can remain idle before a Connection Manager will terminate it.')
oraConnectionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraConnectionDuration.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionDuration.setDescription('The elapsed time is centi-seconds after a connection was established and before a connection is terminated.')
oraConnectionSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraConnectionSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionSourceAddress.setDescription('The source address of a connect request.')
oraConnectionDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 7, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraConnectionDestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: oraConnectionDestinationAddress.setDescription('The destination address of a connect request.')
oraInterchgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 111, 7, 2))
oraNavigatorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 111, 7, 2) + (0,1)).setObjects(("ORAINTERCHANGE-MIB", "oraNavigatorState"))
if mibBuilder.loadTexts: oraNavigatorStateChange.setDescription('A navigatorStateChange trap signifies that a Navigator state has been changed.')
oraCmanagerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 111, 7, 2) + (0,2)).setObjects(("ORAINTERCHANGE-MIB", "oraCmanagerState"))
if mibBuilder.loadTexts: oraCmanagerStateChange.setDescription('A cmanagerStateChange trap signifies that a Connection Manager state has been changed.')
mibBuilder.exportSymbols("ORAINTERCHANGE-MIB", oraNavigatorListenAddressIndex=oraNavigatorListenAddressIndex, oraCmanagerListenAddressTable=oraCmanagerListenAddressTable, oraPumpFailedAddressTable=oraPumpFailedAddressTable, oraCmanagerEntry=oraCmanagerEntry, oraCmanagerMaximumConnections=oraCmanagerMaximumConnections, oraCmanagerMaximumConnectTime=oraCmanagerMaximumConnectTime, oraInterchgTable=oraInterchgTable, oraNavigatorRouteAddressIndex=oraNavigatorRouteAddressIndex, oraCmanagerErrors=oraCmanagerErrors, oraNavigatorErrors=oraNavigatorErrors, oracle=oracle, oraNavigatorStoppable=oraNavigatorStoppable, oraConnectionTable=oraConnectionTable, oraNavigatorAccumulatedSuccessfulRequests=oraNavigatorAccumulatedSuccessfulRequests, oraConnectionDuration=oraConnectionDuration, oraNavigatorRouteAddress=oraNavigatorRouteAddress, oraPumpCurrentBytesPerSecond=oraPumpCurrentBytesPerSecond, oraCmanagerAccumulatedFailedConnections=oraCmanagerAccumulatedFailedConnections, oraPumpListenAddress=oraPumpListenAddress, oraCmanagerLogging=oraCmanagerLogging, oraCmanagerFailedAddressIndex=oraCmanagerFailedAddressIndex, oraInterchgConfigDirectory=oraInterchgConfigDirectory, oraNavigatorFailedAddress=oraNavigatorFailedAddress, oraCmanagerRunningTime=oraCmanagerRunningTime, oraCmanagerErrorMessage=oraCmanagerErrorMessage, oraPumpAccumulatedBytesSent=oraPumpAccumulatedBytesSent, oraNavigatorState=oraNavigatorState, oraInterchgContactInfo=oraInterchgContactInfo, oraPumpTable=oraPumpTable, oraCmanagerListenAddressEntry=oraCmanagerListenAddressEntry, oraNavigatorListenAddress=oraNavigatorListenAddress, oraNavigatorTraceFile=oraNavigatorTraceFile, oraCmanagerTraceLevel=oraCmanagerTraceLevel, oraConnectionIdleTime=oraConnectionIdleTime, oraCmanagerPumpStrategy=oraCmanagerPumpStrategy, oraPumpEntry=oraPumpEntry, oraCmanagerFailedAddressEntry=oraCmanagerFailedAddressEntry, oraNavigatorAccumulatedFailedRequests=oraNavigatorAccumulatedFailedRequests, oraConnectionDestinationAddress=oraConnectionDestinationAddress, oraNavigatorLogging=oraNavigatorLogging, oraPumpBufferUtilization=oraPumpBufferUtilization, oraNavigatorListenAddressTable=oraNavigatorListenAddressTable, oraCmanagerTable=oraCmanagerTable, oraNavigatorEntry=oraNavigatorEntry, oraInterchangeObjects=oraInterchangeObjects, oraNavigatorFailedAddressEntry=oraNavigatorFailedAddressEntry, oraInterchgEntry=oraInterchgEntry, oraPumpMaximumConnectTime=oraPumpMaximumConnectTime, oraNavigatorRunningTime=oraNavigatorRunningTime, oraNavigatorRouteAddressEntry=oraNavigatorRouteAddressEntry, oraPumpFailedAddress=oraPumpFailedAddress, oraCmanagerMaximumPumps=oraCmanagerMaximumPumps, oraNavigatorLogFile=oraNavigatorLogFile, oraPumpMaximumBuffers=oraPumpMaximumBuffers, oraPumpListenAddressIndex=oraPumpListenAddressIndex, oraPumpFailedAddressEntry=oraPumpFailedAddressEntry, oraNavigatorFailedAddressTable=oraNavigatorFailedAddressTable, oraPumpMaximumAverageBytes=oraPumpMaximumAverageBytes, oraPumpImmediateAverageBytes=oraPumpImmediateAverageBytes, oraCmanagerState=oraCmanagerState, oraPumpListenAddressEntry=oraPumpListenAddressEntry, oraCmanagerCurrentConnectionsInUse=oraCmanagerCurrentConnectionsInUse, oraPumpErrors=oraPumpErrors, oraNavigatorLoggingLevel=oraNavigatorLoggingLevel, oraPumpActiveConnections=oraPumpActiveConnections, oraConnectionIndex=oraConnectionIndex, oraCmanagerLogFile=oraCmanagerLogFile, oraPumpAverageConnectTime=oraPumpAverageConnectTime, oraPumpListenAddressTable=oraPumpListenAddressTable, oraCmanagerMinimumConnectTime=oraCmanagerMinimumConnectTime, oraPumpFailedConnections=oraPumpFailedConnections, oraConnectionEntry=oraConnectionEntry, oraCmanagerMaximumConnectDuration=oraCmanagerMaximumConnectDuration, oraCmanagerFailedAddressTable=oraCmanagerFailedAddressTable, oraCmanagerAverageConnectTime=oraCmanagerAverageConnectTime, oraCmanagerListenAddress=oraCmanagerListenAddress, oraPumpTraceLevel=oraPumpTraceLevel, oraCmanagerStoppable=oraCmanagerStoppable, oraPumpTraceFile=oraPumpTraceFile, oraPumpActiveTime=oraPumpActiveTime, oraCmanagerImmediateAverageBytes=oraCmanagerImmediateAverageBytes, oraPumpIndex=oraPumpIndex, oraNavigatorTraceLevel=oraNavigatorTraceLevel, oraCmanagerMaximumConnectionsPerPump=oraCmanagerMaximumConnectionsPerPump, oraInterchangeMIB=oraInterchangeMIB, oraNavigatorTable=oraNavigatorTable, oraCmanagerFailedAddress=oraCmanagerFailedAddress, oraConnectionSourceAddress=oraConnectionSourceAddress, oraCmanagerActivePumps=oraCmanagerActivePumps, oraCmanagerListenAddressIndex=oraCmanagerListenAddressIndex, oraConnectionPumpID=oraConnectionPumpID, oraCmanagerTraceFile=oraCmanagerTraceFile, oraNavigatorRouteAddressTable=oraNavigatorRouteAddressTable, oraPumpMaximumConnectDuration=oraPumpMaximumConnectDuration, oraNavigatorListenAddressEntry=oraNavigatorListenAddressEntry, oraNavigatorStateChange=oraNavigatorStateChange, oraCmanagerStateChange=oraCmanagerStateChange, oraCmanagerStartTime=oraCmanagerStartTime, oraInterchgTraps=oraInterchgTraps, oraCmanagerAccumulatedSuccessfulConnections=oraCmanagerAccumulatedSuccessfulConnections, oraPumpFailedAddressIndex=oraPumpFailedAddressIndex, oraNavigatorFailedAddressIndex=oraNavigatorFailedAddressIndex, oraPumpSuccessfulConnections=oraPumpSuccessfulConnections, oraPumpErrorMessage=oraPumpErrorMessage, oraPumpMinimumConnectTime=oraPumpMinimumConnectTime, oraNavigatorErrorMessage=oraNavigatorErrorMessage)
