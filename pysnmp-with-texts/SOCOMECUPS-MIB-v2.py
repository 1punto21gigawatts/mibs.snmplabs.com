#
# PySNMP MIB module SOCOMECUPS-MIB-v2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SOCOMECUPS-MIB-v2
# Produced by pysmi-0.3.4 at Wed May  1 15:09:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, enterprises, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, ObjectIdentity, NotificationType, Counter64, Counter32, ModuleIdentity, Bits, MibIdentifier, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "enterprises", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "ObjectIdentity", "NotificationType", "Counter64", "Counter32", "ModuleIdentity", "Bits", "MibIdentifier", "iso", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
socomecSicon = MibIdentifier((1, 3, 6, 1, 4, 1, 4555))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1))
pduAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1))
iPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20))
ipduObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1))
ipduTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2))
ipduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 1))
ipduAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2))
ipduDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3))
ipduSlave = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4))
ipduEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5))
ipduIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: ipduIdentManufacturer.setDescription('The name of manufacturer.')
ipduIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: ipduIdentModel.setDescription('The Model designation of device.')
ipduIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ipduIdentAgentSoftwareVersion.setDescription('The firmware version of the device.')
ipduIdentName = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: ipduIdentName.setDescription('A description of this device.')
ipduAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1))
ipduAgentMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduAgentMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentMibVersion.setDescription('The Mib Version implemented on this device.')
ipduAgentTime = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 2))
ipduAgentTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTimeDate.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTimeDate.setDescription('The date in agent, format is (dd/mm/yyyy)')
ipduAgentTimeTime = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTimeTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTimeTime.setDescription('The time in agent, format is (hh:mm:ss)')
ipduAgentTimerFromNtp = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTimerFromNtp.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTimerFromNtp.setDescription('Enable or disable the agent to synchronize date/time with NTP server.')
ipduAgentNtpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNtpIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNtpIpAddress.setDescription('The ip address of NTP server.')
ipduAgentNtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("gMT-1200", 1), ("gMT-1100", 2), ("gMT-1000", 3), ("gMT-0900", 4), ("gMT-0800", 5), ("gMT-0700", 6), ("gMT-0600", 7), ("gMT-0500", 8), ("gMT-0400", 9), ("gMT-0330", 10), ("gMT-0300", 11), ("gMT-0200", 12), ("gMT-0100", 13), ("gMT-0000", 14), ("gMT0100", 15), ("gMT0200", 16), ("gMT0300", 17), ("gMT0330", 18), ("gMT0400", 19), ("gMT0500", 20), ("gMT0530", 21), ("gMT0600", 22), ("gMT0700", 23), ("gMT0800", 24), ("gMT0900", 25), ("gMT1000", 26), ("gMT1100", 27), ("gMT1200", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNtpTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNtpTimeZone.setDescription('Time Zone to use when synchronize with NTP server.')
ipduAgentDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentDayLightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentDayLightSaving.setDescription('Enable/disable the Day Light Saving when synchronize with NTP server.')
ipduAgentNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3))
ipduAgentNetworkIp = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 1))
ipduAgentNetworkIpAdress = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNetworkIpAdress.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNetworkIpAdress.setDescription('The ip address that NMS can identify the managed device.')
ipduAgentNetworkIpGateway = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNetworkIpGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNetworkIpGateway.setDescription('The default gateway that allow device managed through routers.')
ipduAgentNetworkIpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNetworkIpSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNetworkIpSubnet.setDescription('Internet address subnet mask')
ipduAgentNetworkDhcpControl = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNetworkDhcpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNetworkDhcpControl.setDescription('Enable/disable DHCP protocol')
ipduAgentNetworkPingControl = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNetworkPingControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNetworkPingControl.setDescription('Enable/disable to response to PING request.')
ipduAgentNetworkTftpControl = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentNetworkTftpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentNetworkTftpControl.setDescription('Enable/disable TFTP protocol')
ipduAgentNetworkTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 5))
ipduAgentTelnetControl = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTelnetControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTelnetControl.setDescription('Enable/disable Telnet protocol.')
ipduAgentTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTelnetPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTelnetPort.setDescription('The TCP port for telnet')
ipduAgentNetworkHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 6))
ipduAgentHttpControl = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentHttpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentHttpControl.setDescription('Enable/disable HTTP protocol.')
ipduAgentHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentHttpPort.setDescription('The TCP port for HTTP.')
ipduAgentNetworkSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 7))
ipduAgentSnmpControl = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentSnmpControl.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentSnmpControl.setDescription('Enable/disable SNMP protocol.')
ipduAgentSnmpPort = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentSnmpPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentSnmpPort.setDescription('The UDP port for SNMP.')
ipduAgentLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 4))
pduAgentDataLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 28800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduAgentDataLogInterval.setStatus('mandatory')
if mibBuilder.loadTexts: pduAgentDataLogInterval.setDescription('The interval of the updation of the data log. The value is in seconds')
ipduAgentControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 5))
ipduAgentControlDefault = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentControlDefault.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentControlDefault.setDescription('Reset all parameters of the agent to default value.')
ipduAgentControlRestart = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentControlRestart.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentControlRestart.setDescription('Restart the agent.')
ipduAgentTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 6))
ipduAgentTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTrapRetryCount.setDescription('The count of repeat traps send to NMS before trap acknowledgement received.')
ipduAgentTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTrapRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTrapRetryTime.setDescription('The time interval in seconds between retry traps sned to NMS.')
ipduAgentTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduAgentTrapAckSignature.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTrapAckSignature.setDescription('The signature of trap acknowledgement.')
ipduAgentTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7), )
if mibBuilder.loadTexts: ipduAgentTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTrapsReceiversTable.setDescription('A list of managers to send traps to. The number of entries is given by the value of agentConfigNumTrapReceivers')
ipduAgentTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "trapsIndex"))
if mibBuilder.loadTexts: ipduAgentTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: receiverCommunityString.setDescription('The community name to use in the trap when sent to the manager.')
receiverNmsType = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("iPDU-trap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverNmsType.setStatus('mandatory')
if mibBuilder.loadTexts: receiverNmsType.setDescription('The trap group that NMS desired.')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: receiverSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: receiverDescription.setDescription('Description of trap receivers')
ipduAgentAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 8), )
if mibBuilder.loadTexts: ipduAgentAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentAccessControlTable.setDescription('A list of managers which can access the device with private community string.')
ipduAgentAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 8, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "accessIndex"))
if mibBuilder.loadTexts: ipduAgentAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduAgentAccessControlEntry.setDescription('The managers.')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accessIndex.setDescription('The index to a access control entry.')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlAddr.setDescription('The IP address of the manager to access the device.')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permitted", 1), ("denied", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlMode.setDescription('Access type, only read/Write access type can change parameter of the device.')
ipduDeviceInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1))
ipduDeviceInletNumber = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduDeviceInletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceInletNumber.setDescription('The inlet number on this device.')
ipduDeviceInletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2), )
if mibBuilder.loadTexts: ipduDeviceInletConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceInletConfigTable.setDescription('A list of inlet on this device.')
ipduDeviceInletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "inletConfigIndex"))
if mibBuilder.loadTexts: ipduDeviceInletConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceInletConfigEntry.setDescription('The inlet number of device.')
inletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigIndex.setDescription('The index to a access inlet configuration table.')
inletConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigDesc.setDescription('A Description of inlet of device.')
inletConfigVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageHigh.setDescription('The Inlet high voltage threshold, in volts.')
inletConfigVoltageHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageHighAction.setDescription('Reaction of the device when inlet voltage higher than set point.')
inletConfigVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageLow.setDescription('The Inlet low voltage threshold, in volts.')
inletConfigVoltageLowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigVoltageLowAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigVoltageLowAction.setDescription('Reaction of the device when inlet voltage lower than set point.')
inletConfigCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigCurrentHigh.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigCurrentHigh.setDescription('The Inlet low voltage threshold, in 0.1 amps.')
inletConfigCurrentHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigCurrentHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigCurrentHighAction.setDescription('Reaction of the device when inlet current higher than set point.')
inletConfigFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigFrequencyHigh.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigFrequencyHigh.setDescription('The Inlet high frequency threshold, in hz.')
inletConfigfrequencyHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigfrequencyHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigfrequencyHighAction.setDescription('Reaction of the device when inlet frequency higher than set point.')
inletConfigFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigFrequencyLow.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigFrequencyLow.setDescription('The Inlet low frequency threshold, in hz.')
inletConfigfrequencyLowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletsOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletConfigfrequencyLowAction.setStatus('mandatory')
if mibBuilder.loadTexts: inletConfigfrequencyLowAction.setDescription('Reaction of the device when inlet frequency lower than set point.')
ipduDeviceInletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3), )
if mibBuilder.loadTexts: ipduDeviceInletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceInletStatusTable.setDescription('A list of inlet on this device.')
ipduDeviceInletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "inletStatusIndex"))
if mibBuilder.loadTexts: ipduDeviceInletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceInletStatusEntry.setDescription('The inlet number of device.')
inletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusIndex.setDescription('The index to a access inlet configuration table.')
inletStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusVoltage.setDescription('The Inlet Voltage in 0.1 volts')
inletStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusCurrent.setDescription('The Inlet Current in 0.001 Amp.')
inletStatusFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusFrequency.setDescription('The Inlet Frequency in 0.1 Hz')
inletStatusKwatt = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusKwatt.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusKwatt.setDescription('The Inlet Kwatt in 0.1 KW/H')
inletStatusWH = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletStatusWH.setStatus('mandatory')
if mibBuilder.loadTexts: inletStatusWH.setDescription('The Inlet Kwatt in 0.1 W/H')
inletWattReset = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("inlet1", 2), ("inlet2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletWattReset.setStatus('mandatory')
if mibBuilder.loadTexts: inletWattReset.setDescription('Reset inlet kw.')
ipduDeviceOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2))
ipduDeviceOutletNumber = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduDeviceOutletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletNumber.setDescription('The outlet number on this device.')
ipduDeviceOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2), )
if mibBuilder.loadTexts: ipduDeviceOutletConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletConfigTable.setDescription('A list of outlet on this device.')
ipduDeviceOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "inletConfigIndex"))
if mibBuilder.loadTexts: ipduDeviceOutletConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletConfigEntry.setDescription('The inlet number of device.')
outletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigIndex.setDescription('The index to a access inlet configuration table.')
outletConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigDesc.setDescription('A Description of outlet of device.')
outletConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigLocation.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigLocation.setDescription('Location of device connectted to this outlet.')
outletConfigOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigOnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigOnDelay.setDescription('The delay time before turn on tis outlet, in seconds.')
outletConfigOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigOffDelay.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigOffDelay.setDescription('The delay time before turn off tis outlet, in seconds.')
outletConfigCurrentHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigCurrentHigh.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigCurrentHigh.setDescription('The outlet high current threshold, in amp.')
outletConfigCurrentHighAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outletOff", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletConfigCurrentHighAction.setStatus('mandatory')
if mibBuilder.loadTexts: outletConfigCurrentHighAction.setDescription('Reaction of the device when outlet current higher than set point.')
ipduDeviceOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3), )
if mibBuilder.loadTexts: ipduDeviceOutletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletStatusTable.setDescription('A list of outlet on this device.')
ipduDeviceOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "outletStatusIndex"))
if mibBuilder.loadTexts: ipduDeviceOutletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletStatusEntry.setDescription('The outlet number of device.')
outletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusIndex.setDescription('The index to a access outlet configuration table.')
outletStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknow", 1), ("outletOff", 2), ("outletOn", 3), ("outletOffToOn", 4), ("outletOnToOff", 5), ("outletCycling", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusStatus.setDescription('Outlet state')
outletStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusCurrent.setDescription('The outlet Current in 0.001 Amp.')
outletStatusKwatt = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusKwatt.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusKwatt.setDescription('The outlet Kwatt in 0.001 KW/H.')
outletStatusWH = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusWH.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusWH.setDescription('The outlet Watt in 0.1 W/H.')
outletStatusStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusStateTime.setDescription('Time in seconds since the outlet changed to current state.')
outletStatusTimeToGo = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletStatusTimeToGo.setStatus('mandatory')
if mibBuilder.loadTexts: outletStatusTimeToGo.setDescription('Remain time the outlet state will be changed by agent, in seconds')
ipduDeviceOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 4), )
if mibBuilder.loadTexts: ipduDeviceOutletControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletControlTable.setDescription('A list of outlet on this device.')
ipduDeviceOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 4, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "outletControlIndex"))
if mibBuilder.loadTexts: ipduDeviceOutletControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletControlEntry.setDescription('The outlet number of device.')
outletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outletControlIndex.setDescription('The index to a access outlet configuration table.')
outletControlControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletControlControl.setStatus('mandatory')
if mibBuilder.loadTexts: outletControlControl.setDescription('Set to control the outlet perform action as requested.')
ipduDeviceOutletControlAll = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimers", 6), ("offByActionTimers", 7), ("cycleByActionTimers", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduDeviceOutletControlAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletControlAll.setDescription('Set to control all outlets perform action as requested.')
ipduDeviceOutletWattReset = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("outleta", 2), ("outletb", 3), ("outletc", 4), ("outletd", 5), ("outlete", 6), ("outletf", 7), ("outletg", 8), ("outleth", 9), ("outleti", 10), ("outletj", 11), ("outletk", 12), ("outletl", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduDeviceOutletWattReset.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceOutletWattReset.setDescription('Reset outlet kw.')
ipduDeviceCcOut = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3))
ipduDeviceCcOutNumber = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduDeviceCcOutNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceCcOutNumber.setDescription('The contact closure output number on this device.')
ipduDeviceCcOutConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 2), )
if mibBuilder.loadTexts: ipduDeviceCcOutConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceCcOutConfigTable.setDescription('A list of contact closure output on this device.')
ipduDeviceCcOutConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 2, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "ccOutConfigIndex"))
if mibBuilder.loadTexts: ipduDeviceCcOutConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceCcOutConfigEntry.setDescription('The CC number of device.')
ccOutConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigIndex.setDescription('The index to access contact closure output configuration table.')
ccOutConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigDesc.setDescription('A Description of a contact closure output of device.')
ccOutConfigEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigEventAction.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigEventAction.setDescription('Enable/disble the contact closure output to react to events.')
ccOutConfigCloseDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigCloseDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigCloseDelay.setDescription('The delay time in seconds when the contact closure output set to close.')
ccOutConfigOpenDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutConfigOpenDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutConfigOpenDelay.setDescription('The delay time in seconds when the contact closure output set to open.')
ipduDeviceCcOutStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 3), )
if mibBuilder.loadTexts: ipduDeviceCcOutStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceCcOutStatusTable.setDescription('A list of contact closure output on this device.')
ipduDeviceCcOutStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 3, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "ccOutStatusIndex"))
if mibBuilder.loadTexts: ipduDeviceCcOutStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceCcOutStatusEntry.setDescription('The CC number of device.')
ccOutStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutStatusIndex.setDescription('The index to access contact closure output configuration table.')
ccOutStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutStatusStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutStatusStatus.setDescription('State of a contact closure output of device.')
ccOutStatusTimeOnState = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutStatusTimeOnState.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutStatusTimeOnState.setDescription('Time in seconds since the contact closure output changed to current state.')
ipduDeviceCcOutControlTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 4), )
if mibBuilder.loadTexts: ipduDeviceCcOutControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceCcOutControlTable.setDescription('A list of contact closure output on this device.')
ipduDeviceCcOutControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 4, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "ccOutControlIndex"))
if mibBuilder.loadTexts: ipduDeviceCcOutControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceCcOutControlEntry.setDescription('The outlet number of device.')
ccOutControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccOutControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutControlIndex.setDescription('The index to a access contact closure output configuration table.')
ccOutControlControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("closeImmediately", 3), ("openImmediately", 4), ("cycleImmediately", 5), ("closeByCloseTimer", 6), ("openByOpenTimer", 7), ("cycleByActionTimer", 8), ("closeThenOpenByActionTimers", 9), ("openThenCloseByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccOutControlControl.setStatus('mandatory')
if mibBuilder.loadTexts: ccOutControlControl.setDescription('Set to control the contact closure output perform action as requested.')
ipduSlaveState = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 1))
ipduSlaveStateTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 1, 1), )
if mibBuilder.loadTexts: ipduSlaveStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveStateTable.setDescription('A list of outlet on this device.')
ipduSlaveStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 1, 1, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveStateIndex"))
if mibBuilder.loadTexts: ipduSlaveStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveStateEntry.setDescription('The outlet number of device.')
slaveStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveStateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveStateIndex.setDescription('The index to a access outlet configuration table.')
slaveStateControl01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveStateControl01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveStateControl01.setDescription('Set to control the outlet perform action as requested to slave outlet A')
ipduSlaveInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2))
ipduSlaveInletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1))
ipduDeviceSlaveInletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1), )
if mibBuilder.loadTexts: ipduDeviceSlaveInletStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceSlaveInletStatusTable.setDescription('A list of inlet on this device.')
ipduDeviceSlaveInletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "inletStatusIndex"))
if mibBuilder.loadTexts: ipduDeviceSlaveInletStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceSlaveInletStatusEntry.setDescription('The inlet number of device.')
inletSlaveStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusIndex.setDescription('The index to a access inlet configuration table.')
inletSlaveStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusVoltage.setDescription('The Inlet Voltage in 0.1 volts')
inletSlaveStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusCurrent.setDescription('The Inlet Current in 0.001 Amp.')
inletSlaveStatusFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusFrequency.setDescription('The Inlet Frequency in 0.1 Hz')
inletSlaveStatusKwatt = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusKwatt.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusKwatt.setDescription('The Inlet Kwatt in 0.001 KW/H')
inletSlaveStatusWH = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusWH.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusWH.setDescription('The Inlet Kwatt in 0.001 KW/H')
inletSlaveStatusVoltage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusVoltage2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusVoltage2.setDescription('The Inlet Voltage in 0.1 volts')
inletSlaveStatusCurrent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusCurrent2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusCurrent2.setDescription('The Inlet Current in 0.001 Amp.')
inletSlaveStatusFrequency2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusFrequency2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusFrequency2.setDescription('The Inlet Frequency in 0.1 Hz')
inletSlaveStatusKwatt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusKwatt2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusKwatt2.setDescription('The Inlet Kwatt in 0.001 KW/H')
inletSlaveStatusWH2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSlaveStatusWH2.setStatus('mandatory')
if mibBuilder.loadTexts: inletSlaveStatusWH2.setDescription('The Inlet Kwatt in 0.001 KW/H')
ipduSlaveInletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2))
ipduDeviceslaveInletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: ipduDeviceslaveInletConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceslaveInletConfigTable.setDescription('A list of inlet on this device.')
ipduDeviceslaveInletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveInletConfigIndex"))
if mibBuilder.loadTexts: ipduDeviceslaveInletConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduDeviceslaveInletConfigEntry.setDescription('The inlet number of device.')
slaveInletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveInletConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInletConfigIndex.setDescription('The index to a access inlet configuration table.')
slaveInletConfigVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInletConfigVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInletConfigVoltageHigh.setDescription('The Inlet high voltage threshold, in volts.')
slaveInletConfigVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInletConfigVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInletConfigVoltageLow.setDescription('The Inlet low voltage threshold, in volts.')
slaveInlet2ConfigVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageHigh.setDescription('The Inlet 2 high voltage threshold, in volts.')
slaveInlet2ConfigVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: slaveInlet2ConfigVoltageLow.setDescription('The Inlet low voltage threshold, in volts.')
ipduSlaveOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3))
ipduSlaveOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1))
ipduSlaveDeviceOutletNameTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletNameTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletNameIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletNameEntry.setDescription('The outlet number of device.')
slaveOutletNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletNameIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletName01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName01.setDescription('A Description of a outlet name of device.')
slaveOutletName02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName02.setDescription('A Description of a outlet name of device.')
slaveOutletName03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName03.setDescription('A Description of a outlet name of device.')
slaveOutletName04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName04.setDescription('A Description of a outlet name of device.')
slaveOutletName05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName05.setDescription('A Description of a outlet name of device.')
slaveOutletName06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName06.setDescription('A Description of a outlet name of device.')
slaveOutletName07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName07.setDescription('A Description of a outlet name of device.')
slaveOutletName08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName08.setDescription('A Description of a outlet name of device.')
slaveOutletName09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName09.setDescription('A Description of a outlet name of device.')
slaveOutletName10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName10.setDescription('A Description of a outlet name of device.')
slaveOutletName11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName11.setDescription('A Description of a outlet name of device.')
slaveOutletName12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletName12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletName12.setDescription('A Description of a outlet name of device.')
ipduSlaveDeviceOutletLocationTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletLocationTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletLocationTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletLocationIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletLocationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletLocationEntry.setDescription('The outlet number of device.')
slaveOutletLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletLocationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocationIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletLocation01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation01.setDescription('A Description of a outlet name of device.')
slaveOutletLocation02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation02.setDescription('A Description of a outlet name of device.')
slaveOutletLocation03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation03.setDescription('A Description of a outlet name of device.')
slaveOutletLocation04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation04.setDescription('A Description of a outlet name of device.')
slaveOutletLocation05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation05.setDescription('A Description of a outlet name of device.')
slaveOutletLocation06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation06.setDescription('A Description of a outlet name of device.')
slaveOutletLocation07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation07.setDescription('A Description of a outlet name of device.')
slaveOutletLocation08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation08.setDescription('A Description of a outlet name of device.')
slaveOutletLocation09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation09.setDescription('A Description of a outlet name of device.')
slaveOutletLocation10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation10.setDescription('A Description of a outlet name of device.')
slaveOutletLocation11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation11.setDescription('A Description of a outlet name of device.')
slaveOutletLocation12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletLocation12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletLocation12.setDescription('A Description of a outlet name of device.')
ipduSlaveDeviceOutletOnTimeTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOnTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOnTimeTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletOnTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletOnTimeIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOnTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOnTimeEntry.setDescription('The outlet number of device.')
slaveOutletOnTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletOnTimeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTimeIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletOnTime01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime01.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime02.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime03.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime04.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime05.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime06.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime07.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime08.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime09.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime10.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime11.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOnTime12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOnTime12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOnTime12.setDescription('The delay time before turn on tis outlet, in seconds.')
ipduSlaveDeviceOutletOffTimeTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOffTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOffTimeTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletOffTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletOffTimeIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOffTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletOffTimeEntry.setDescription('The outlet number of device.')
slaveOutletOffTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletOffTimeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTimeIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletOffTime01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime01.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime02.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime03.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime04.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime05.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime06.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime07.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime08.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime09.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime10.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime11.setDescription('The delay time before turn on tis outlet, in seconds.')
slaveOutletOffTime12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletOffTime12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletOffTime12.setDescription('The delay time before turn on tis outlet, in seconds.')
ipduSlaveDeviceOutletCurrThTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrThTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrThTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletCurrThEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletCurrThIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrThEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrThEntry.setDescription('The outlet number of device.')
slaveOutletCurrThIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrThIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrThIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletCurrTh01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh01.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh02.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh03.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh04.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh05.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh06.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh07.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh08.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh09.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh10.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh11.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
slaveOutletCurrTh12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 1, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletCurrTh12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrTh12.setDescription('The Outlet Current Threshold ,in 0.1 Amp.')
ipduSlaveOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2))
ipduSlaveDeviceOutletCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrentTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletCurrentIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletCurrentEntry.setDescription('The outlet number of device.')
slaveOutletCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrentIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletCurrent01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent01.setDescription('The outlet A Current in 0.001 Amp.')
slaveOutletCurrent02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent02.setDescription('The outlet B Current in 0.001 Amp.')
slaveOutletCurrent03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent03.setDescription('The outlet C Current in 0.001 Amp.')
slaveOutletCurrent04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent04.setDescription('The outlet D Current in 0.001 Amp.')
slaveOutletCurrent05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent05.setDescription('The outlet E Current in 0.001 Amp.')
slaveOutletCurrent06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent06.setDescription('The outlet F Current in 0.001 Amp.')
slaveOutletCurrent07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent07.setDescription('The outlet G Current in 0.001 Amp.')
slaveOutletCurrent08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent08.setDescription('The outlet H Current in 0.001 Amp.')
slaveOutletCurrent09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent09.setDescription('The outlet I Current in 0.001 Amp.')
slaveOutletCurrent10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent10.setDescription('The outlet J Current in 0.001 Amp.')
slaveOutletCurrent11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent11.setDescription('The outlet K Current in 0.001 Amp.')
slaveOutletCurrent12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletCurrent12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletCurrent12.setDescription('The outlet L Current in 0.001 Amp.')
ipduSlaveDeviceOutletWattTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletWattTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletWattTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletWattEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletWattIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletWattEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletWattEntry.setDescription('The outlet number of device.')
slaveOutletWattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWattIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletWatt01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt01.setDescription('The outlet A Watt in 0.1 W/H.')
slaveOutletWatt02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt02.setDescription('The outlet B Watt in 0.1 W/H.')
slaveOutletWatt03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt03.setDescription('The outlet C Watt in 0.1 W/H.')
slaveOutletWatt04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt04.setDescription('The outlet D Watt in 0.1 W/H.')
slaveOutletWatt05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt05.setDescription('The outlet E Watt in 0.1 W/H.')
slaveOutletWatt06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt06.setDescription('The outlet F Watt in 0.1 W/H.')
slaveOutletWatt07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt07.setDescription('The outlet G Watt in 0.1 W/H.')
slaveOutletWatt08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt08.setDescription('The outlet H Watt in 0.1 W/H.')
slaveOutletWatt09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt09.setDescription('The outlet I Watt in 0.1 W/H.')
slaveOutletWatt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt10.setDescription('The outlet J Watt in 0.1 W/H.')
slaveOutletWatt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt11.setDescription('The outlet K Watt in 0.1 W/H.')
slaveOutletWatt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletWatt12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletWatt12.setDescription('The outlet L Watt in 0.1 W/H.')
ipduSlaveDeviceOutletKwattTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletKwattTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletKwattTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletKwattEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletKwattIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletKwattEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletKwattEntry.setDescription('The outlet number of device.')
slaveOutletKwattIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwattIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwattIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletKwatt01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt01.setDescription('The outlet A Kwatt in 0.001 KW/H.')
slaveOutletKwatt02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt02.setDescription('The outlet B Kwatt in 0.001 KW/H.')
slaveOutletKwatt03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt03.setDescription('The outlet C Kwatt in 0.001 KW/H.')
slaveOutletKwatt04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt04.setDescription('The outlet D Kwatt in 0.001 KW/H.')
slaveOutletKwatt05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt05.setDescription('The outlet E Kwatt in 0.001 KW/H.')
slaveOutletKwatt06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt06.setDescription('The outlet F Kwatt in 0.001 KW/H.')
slaveOutletKwatt07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt07.setDescription('The outlet G Kwatt in 0.001 KW/H.')
slaveOutletKwatt08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt08.setDescription('The outlet H Kwatt in 0.001 KW/H.')
slaveOutletKwatt09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt09.setDescription('The outlet I Kwatt in 0.001 KW/H.')
slaveOutletKwatt10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt10.setDescription('The outlet J Kwatt in 0.001 KW/H.')
slaveOutletKwatt11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt11.setDescription('The outlet K Kwatt in 0.001 KW/H.')
slaveOutletKwatt12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletKwatt12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletKwatt12.setDescription('The outlet L Kwatt in 0.001 KW/H.')
ipduSlaveOutletAction = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3))
ipduSlaveDeviceOutletActionTable = MibTable((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1), )
if mibBuilder.loadTexts: ipduSlaveDeviceOutletActionTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletActionTable.setDescription('A list of outlet on this device.')
ipduSlaveDeviceOutletActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1), ).setIndexNames((0, "SOCOMECUPS-MIB-v2", "slaveOutletActionIndex"))
if mibBuilder.loadTexts: ipduSlaveDeviceOutletActionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipduSlaveDeviceOutletActionEntry.setDescription('The outlet number of device.')
slaveOutletActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaveOutletActionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletActionIndex.setDescription('The index to a access outlet configuration table.')
slaveOutletAction01 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction01.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction01.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction02 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction02.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction02.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction03 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction03.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction03.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction04 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction04.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction04.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction05 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction05.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction05.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction06 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction06.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction06.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction07 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction07.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction07.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction08 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction08.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction08.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction09 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction09.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction09.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction10 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction10.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction10.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction11 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction11.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction11.setDescription('Set to control the outlet perform action as requested.')
slaveOutletAction12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 4, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("cancelAction", 2), ("onImmediately", 3), ("offImmediately", 4), ("cycleImmediately", 5), ("onByActionTimer", 6), ("offByActionTimer", 7), ("cycleByActionTimer", 8), ("onThenOffByActionTimers", 9), ("offThenOnByActionTimers", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveOutletAction12.setStatus('mandatory')
if mibBuilder.loadTexts: slaveOutletAction12.setDescription('Set to control the outlet perform action as requested.')
ipduEnvEmd = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1))
ipduEnvEmdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 1))
ipduEnvEmdStatusEmdType = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("eMD-HT", 3), ("eMD-T", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduEnvEmdStatusEmdType.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdStatusEmdType.setDescription('EMD Type.')
ipduEnvEmdStatusTemperature = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduEnvEmdStatusTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdStatusTemperature.setDescription('EMD Temperature in 0.1 degree C.')
ipduEnvEmdStatusHumidity = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduEnvEmdStatusHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdStatusHumidity.setDescription('EMD Humidity in 0.1%.')
ipduEnvEmdStatusAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("alarm", 3), ("normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduEnvEmdStatusAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdStatusAlarm1.setDescription('EMD Alarm-1 state.')
ipduEnvEmdStatusAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("alarm", 3), ("normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipduEnvEmdStatusAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdStatusAlarm2.setDescription('EMD Alarm-2 state.')
ipduEnvEmdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2))
ipduEnvEmdConfigEmdPresence = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("autoDetect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigEmdPresence.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigEmdPresence.setDescription('Configure the EMD presence by auto-detect or not exist (disabled).')
ipduEnvEmdConfigEmdName = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigEmdName.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigEmdName.setDescription('The name of Emd.')
ipduEnvEmdConfigTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 3))
ipduEnvEmdConfigTempName = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigTempName.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigTempName.setDescription('The name of EMD Temperature sensor.')
ipduEnvEmdConfigTempHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigTempHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigTempHighSetPoint.setDescription('EMD Temperature set point high, alarm will active when temperature over this value, in degree C.')
ipduEnvEmdConfigTempHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigTempHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigTempHighStatus.setDescription('Enabled/disabled the high setpoint be applied or not')
ipduEnvEmdConfigTempLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigTempLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigTempLowSetPoint.setDescription('EMD Temperature set point high, alarm will active when temperature under this value, in degree C.')
ipduEnvEmdConfigTempLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigTempLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigTempLowStatus.setDescription('Enabled/disabled the low setpoint be applied or not')
ipduEnvEmdConfigTempOffset = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("t0p0", 1), ("t0p5", 2), ("t1p0", 3), ("t1p5", 4), ("t2p0", 5), ("t2p5", 6), ("t3p0", 7), ("t-0p5", 8), ("t-1p0", 9), ("t-1p5", 10), ("t-2p0", 11), ("t-2p5", 12), ("t-3p0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigTempOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigTempOffset.setDescription('Offset of temperature in degree C to adjust EMD temperature measurement.')
ipduEnvEmdConfigHumi = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 4))
ipduEnvEmdConfigHumiName = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiName.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiName.setDescription('The name of EMD Humidity.')
ipduEnvEmdConfigHumiHighSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiHighSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiHighSetPoint.setDescription('EMD humidity set point high, alarm will active when humidity over this value, in %.')
ipduEnvEmdConfigHumiHighStatus = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiHighStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiHighStatus.setDescription('Enabled/disabled the high setpoint be applied or not')
ipduEnvEmdConfigHumiLowSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiLowSetPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiLowSetPoint.setDescription('EMD humidity set point low, alarm will active when humidity under this value, in %.')
ipduEnvEmdConfigHumiLowStatus = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiLowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiLowStatus.setDescription('Enabled/disabled the high setpoint be applied or not')
ipduEnvEmdConfigHumiOffset = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("h0p0", 1), ("h1p0", 2), ("h2p0", 3), ("h3p0", 4), ("h4p0", 5), ("h5p0", 6), ("h6p0", 7), ("h-1p0", 8), ("h-2p0", 9), ("h-3p0", 10), ("h-4p0", 11), ("h-5p0", 12), ("h-6p0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigHumiOffset.setDescription('Emd Hum Offset;')
ipduEnvEmdConfigAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 5))
ipduEnvEmdConfigAlarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm1Name.setDescription('The name of EMD Alarm-1.')
ipduEnvEmdConfigAlarm1Type = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm1Type.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm1Type.setDescription('EMD Alarm-1 type')
ipduEnvEmdConfigAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 6))
ipduEnvEmdConfigAlarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm2Name.setDescription('The name of EMD Alarm-2.')
ipduEnvEmdConfigAlarm2Type = MibScalar((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 1, 5, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm2Type.setStatus('mandatory')
if mibBuilder.loadTexts: ipduEnvEmdConfigAlarm2Type.setDescription('EMD Alarm-2 type')
ipduInletVoltageTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,1)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletVoltageTooHigh.setDescription('CRITICAL: The input voltage over high threshold.')
ipduInletVoltageNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,2)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletVoltageNotTooHigh.setDescription('WARNING: The input voltage return from over high threshold.')
ipduInletVoltageTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,3)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletVoltageTooLow.setDescription('CRITICAL: The input voltage under low threshold.')
ipduInletVoltageNotTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,4)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletVoltageNotTooLow.setDescription('WARNING: The input voltage return from under low threshold.')
ipduInletCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,5)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusCurrent"), ("SOCOMECUPS-MIB-v2", "inletConfigCurrentHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletCurrentTooHigh.setDescription('CRITICAL: The input current over high threshold.')
ipduInletCurrentNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,6)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusCurrent"), ("SOCOMECUPS-MIB-v2", "inletConfigCurrentHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletCurrentNotTooHigh.setDescription('WARNING: The input current return from over high threshold.')
ipduInletFrequencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,7)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletFrequencyTooHigh.setDescription('CRITICAL: The input frequency over high threshold.')
ipduInletFrequencyNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,8)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletFrequencyNotTooHigh.setDescription('WARNING: The input frequency return from over high threshold.')
ipduInletFrequencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,9)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletFrequencyTooLow.setDescription('CRITICAL: The input frequency under low threshold.')
ipduInletFrequencyNotTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,10)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInletFrequencyNotTooLow.setDescription('WARNING: The input frequency return from under low threshold.')
ipduInlet2VoltageTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,11)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2VoltageTooHigh.setDescription('CRITICAL: The input2 voltage over high threshold.')
ipduInlet2VoltageNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,12)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2VoltageNotTooHigh.setDescription('WARNING: The input2 voltage return from over high threshold.')
ipduInlet2VoltageTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,13)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2VoltageTooLow.setDescription('CRITICAL: The input2 voltage under low threshold.')
ipduInlet2VoltageNotTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,14)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusVoltage"), ("SOCOMECUPS-MIB-v2", "inletConfigVoltageLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2VoltageNotTooLow.setDescription('WARNING: The input2 voltage return from under low threshold.')
ipduInlet2CurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,15)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusCurrent"), ("SOCOMECUPS-MIB-v2", "inletConfigCurrentHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2CurrentTooHigh.setDescription('CRITICAL: The input2 current over high threshold.')
ipduInlet2CurrentNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,16)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusCurrent"), ("SOCOMECUPS-MIB-v2", "inletConfigCurrentHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2CurrentNotTooHigh.setDescription('WARNING: The input2 current return from over high threshold.')
ipduInlet2FrequencyTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,17)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2FrequencyTooHigh.setDescription('CRITICAL: The input2 frequency over high threshold.')
ipduInlet2FrequencyNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,18)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyHigh"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2FrequencyNotTooHigh.setDescription('WARNING: The input2 frequency return from over high threshold.')
ipduInlet2FrequencyTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,19)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2FrequencyTooLow.setDescription('CRITICAL: The input2 frequency under low threshold.')
ipduInlet2FrequencyNotTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,20)).setObjects(("SOCOMECUPS-MIB-v2", "inletConfigIndex"), ("SOCOMECUPS-MIB-v2", "inletStatusFrequency"), ("SOCOMECUPS-MIB-v2", "inletConfigFrequencyLow"), ("SOCOMECUPS-MIB-v2", "inletConfigDesc"))
if mibBuilder.loadTexts: ipduInlet2FrequencyNotTooLow.setDescription('WARNING: The input2 frequency return from under low threshold.')
ipduOutletCurrentTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,21)).setObjects(("SOCOMECUPS-MIB-v2", "outletConfigIndex"), ("SOCOMECUPS-MIB-v2", "outletStatusCurrent"), ("SOCOMECUPS-MIB-v2", "outletConfigCurrentHigh"), ("SOCOMECUPS-MIB-v2", "outletConfigDesc"))
if mibBuilder.loadTexts: ipduOutletCurrentTooHigh.setDescription('CRITICAL: The output current of outlet over high threshold.')
ipduOutletCurrentNotTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,22)).setObjects(("SOCOMECUPS-MIB-v2", "outletConfigIndex"), ("SOCOMECUPS-MIB-v2", "outletStatusCurrent"), ("SOCOMECUPS-MIB-v2", "outletConfigCurrentHigh"), ("SOCOMECUPS-MIB-v2", "outletConfigDesc"))
if mibBuilder.loadTexts: ipduOutletCurrentNotTooHigh.setDescription('WARNING: The output current of outlet return from over high threshold.')
ipduOutletStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,23)).setObjects(("SOCOMECUPS-MIB-v2", "outletConfigIndex"), ("SOCOMECUPS-MIB-v2", "outletStatusStatus"), ("SOCOMECUPS-MIB-v2", "outletConfigDesc"))
if mibBuilder.loadTexts: ipduOutletStateChanged.setDescription('INFORMATION: The outlet state had changed from on to off, or from off to on.')
ipduEmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,24)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusTemperature"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempHighSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipduEmdTemperatureNotHigh.setDescription('INFORMATION: emd Temperature Not High.')
ipduEmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,25)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusTemperature"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempHighSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipduEmdTemperatureTooHigh.setDescription('WARNING: emd Temperature Too High.')
ipduEmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,26)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusTemperature"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempLowSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipduEmdTemperatureNotLow.setDescription('INFORMATION: emd Temperature Not Low.')
ipduEmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,27)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusTemperature"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempLowSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigTempName"))
if mibBuilder.loadTexts: ipduEmdTemperatureTooLow.setDescription('WARNING: emd Temperature Too Low.')
ipduEmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,28)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusHumidity"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiHighSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipduEmdHumidityNotHigh.setDescription('INFORMATION: emd Humidity Not High.')
ipduEmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,29)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusHumidity"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiHighSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipduEmdHumidityTooHigh.setDescription('WARNING: emd Humidity Too High.')
ipduEmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,30)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusHumidity"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiLowSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipduEmdHumidityNotLow.setDescription('INFORMATION: emd Humidity Not Low.')
ipduEmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,31)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdStatusHumidity"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiLowSetPoint"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigHumiName"))
if mibBuilder.loadTexts: ipduEmdHumidityTooLow.setDescription('WARNING: emd Humidity Too Low.')
ipduEmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,32)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm1Type"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm1Name"))
if mibBuilder.loadTexts: ipduEmdAlarm1Normal.setDescription('INFORMATION: emd Alarm1 Normal.')
ipduEmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,33)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm1Type"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm1Name"))
if mibBuilder.loadTexts: ipduEmdAlarm1Active.setDescription('WARNING: emd Alarm1 Active.')
ipduEmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,34)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm2Type"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm2Name"))
if mibBuilder.loadTexts: ipduEmdAlarm2Normal.setDescription('INFORMATION: emd Alarm2 Normal.')
ipduEmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,35)).setObjects(("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm2Type"), ("SOCOMECUPS-MIB-v2", "ipduEnvEmdConfigAlarm2Name"))
if mibBuilder.loadTexts: ipduEmdAlarm2Active.setDescription('WARNING: emd Alarm2 Active.')
ipduSlave01Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,36))
if mibBuilder.loadTexts: ipduSlave01Inlet01OverHigh.setDescription('CRITICAL: The Slave01 input01 voltage over high threshold.')
ipduSlave01Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,37))
if mibBuilder.loadTexts: ipduSlave01Inlet01NotOverHigh.setDescription('CRITICAL: The Slave01 input01 voltage Not over high threshold.')
ipduSlave01Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,38))
if mibBuilder.loadTexts: ipduSlave01Inlet02OverHigh.setDescription('CRITICAL: The Slave01 input02 voltage over high threshold.')
ipduSlave01Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,39))
if mibBuilder.loadTexts: ipduSlave01Inlet02NotOverHigh.setDescription('CRITICAL: The Slave01 input02 voltage Not over high threshold.')
ipduSlave01Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,40))
if mibBuilder.loadTexts: ipduSlave01Inlet01UnderLow.setDescription('CRITICAL: The Slave01 input01 voltage under low threshold.')
ipduSlave01Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,41))
if mibBuilder.loadTexts: ipduSlave01Inlet01NotUnderLow.setDescription('CRITICAL: The Slave01 input01 voltage Not under low threshold.')
ipduSlave01Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,42))
if mibBuilder.loadTexts: ipduSlave01Inlet02UnderLow.setDescription('CRITICAL: The Slave01 input02 voltage under low threshold.')
ipduSlave01Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,43))
if mibBuilder.loadTexts: ipduSlave01Inlet02NotUnderLow.setDescription('CRITICAL: The Slave01 input02 voltage Not under low threshold.')
ipduSlave01Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,44))
if mibBuilder.loadTexts: ipduSlave01Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave01 input01 current over high threshold.')
ipduSlave01Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,45))
if mibBuilder.loadTexts: ipduSlave01Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave01 input01 current not over high threshold.')
ipduSlave01Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,46))
if mibBuilder.loadTexts: ipduSlave01Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave01 input02 current over high threshold.')
ipduSlave01Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,47))
if mibBuilder.loadTexts: ipduSlave01Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave01 input02 current not over high threshold.')
ipduSlave01EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,48))
if mibBuilder.loadTexts: ipduSlave01EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave01 emd Temperature Not High.')
ipduSlave01EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,49))
if mibBuilder.loadTexts: ipduSlave01EmdTemperatureTooHigh.setDescription('WARNING: The Slave01 emd Temperature Too High.')
ipduSlave01EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,50))
if mibBuilder.loadTexts: ipduSlave01EmdTemperatureNotLow.setDescription('INFORMATION: The Slave01 emd Temperature Not Low.')
ipduSlave01EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,51))
if mibBuilder.loadTexts: ipduSlave01EmdTemperatureTooLow.setDescription('WARNING: The Slave01 emd Temperature Too Low.')
ipduSlave01EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,52))
if mibBuilder.loadTexts: ipduSlave01EmdHumidityNotHigh.setDescription('INFORMATION: The Slave01 emd Humidity Not High.')
ipduSlave01EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,53))
if mibBuilder.loadTexts: ipduSlave01EmdHumidityTooHigh.setDescription('WARNING: The Slave01 emd Humidity Too High.')
ipduSlave01EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,54))
if mibBuilder.loadTexts: ipduSlave01EmdHumidityNotLow.setDescription('INFORMATION: The Slave01 emd Humidity Not Low.')
ipduSlave01EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,55))
if mibBuilder.loadTexts: ipduSlave01EmdHumidityTooLow.setDescription('WARNING: The Slave01 emd Humidity Too Low.')
ipduSlave01EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,56))
if mibBuilder.loadTexts: ipduSlave01EmdAlarm1Normal.setDescription('INFORMATION: The Slave01 emd Alarm1 Normal.')
ipduSlave01EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,57))
if mibBuilder.loadTexts: ipduSlave01EmdAlarm1Active.setDescription('WARNING: The Slave01 emd Alarm1 Active.')
ipduSlave01EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,58))
if mibBuilder.loadTexts: ipduSlave01EmdAlarm2Normal.setDescription('INFORMATION: The Slave01 emd Alarm2 Normal.')
ipduSlave01EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,59))
if mibBuilder.loadTexts: ipduSlave01EmdAlarm2Active.setDescription('WARNING: The Slave01 emd Alarm2 Active.')
ipduSlave01OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,60))
if mibBuilder.loadTexts: ipduSlave01OutletCurrentOverTh.setDescription('WARNING: The Slave01 Outlet Current over threshold.')
ipduSlave02Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,61))
if mibBuilder.loadTexts: ipduSlave02Inlet01OverHigh.setDescription('CRITICAL: The Slave02 input01 voltage over high threshold.')
ipduSlave02Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,62))
if mibBuilder.loadTexts: ipduSlave02Inlet01NotOverHigh.setDescription('CRITICAL: The Slave02 input01 voltage Not over high threshold.')
ipduSlave02Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,63))
if mibBuilder.loadTexts: ipduSlave02Inlet02OverHigh.setDescription('CRITICAL: The Slave02 input02 voltage over high threshold.')
ipduSlave02Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,64))
if mibBuilder.loadTexts: ipduSlave02Inlet02NotOverHigh.setDescription('CRITICAL: The Slave02 input02 voltage Not over high threshold.')
ipduSlave02Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,65))
if mibBuilder.loadTexts: ipduSlave02Inlet01UnderLow.setDescription('CRITICAL: The Slave02 input01 voltage under low threshold.')
ipduSlave02Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,66))
if mibBuilder.loadTexts: ipduSlave02Inlet01NotUnderLow.setDescription('CRITICAL: The Slave02 input01 voltage Not under low threshold.')
ipduSlave02Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,67))
if mibBuilder.loadTexts: ipduSlave02Inlet02UnderLow.setDescription('CRITICAL: The Slave02 input02 voltage under low threshold.')
ipduSlave02Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,68))
if mibBuilder.loadTexts: ipduSlave02Inlet02NotUnderLow.setDescription('CRITICAL: The Slave02 input02 voltage Not under low threshold.')
ipduSlave02Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,69))
if mibBuilder.loadTexts: ipduSlave02Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave02 input01 current over high threshold.')
ipduSlave02Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,70))
if mibBuilder.loadTexts: ipduSlave02Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave02 input01 current not over high threshold.')
ipduSlave02Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,71))
if mibBuilder.loadTexts: ipduSlave02Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave02 input02 current over high threshold.')
ipduSlave02Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,72))
if mibBuilder.loadTexts: ipduSlave02Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave02 input02 current not over high threshold.')
ipduSlave02EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,73))
if mibBuilder.loadTexts: ipduSlave02EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave02 emd Temperature Not High.')
ipduSlave02EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,74))
if mibBuilder.loadTexts: ipduSlave02EmdTemperatureTooHigh.setDescription('WARNING: The Slave02 emd Temperature Too High.')
ipduSlave02EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,75))
if mibBuilder.loadTexts: ipduSlave02EmdTemperatureNotLow.setDescription('INFORMATION: The Slave02 emd Temperature Not Low.')
ipduSlave02EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,76))
if mibBuilder.loadTexts: ipduSlave02EmdTemperatureTooLow.setDescription('WARNING: The Slave02 emd Temperature Too Low.')
ipduSlave02EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,77))
if mibBuilder.loadTexts: ipduSlave02EmdHumidityNotHigh.setDescription('INFORMATION: The Slave02 emd Humidity Not High.')
ipduSlave02EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,78))
if mibBuilder.loadTexts: ipduSlave02EmdHumidityTooHigh.setDescription('WARNING: The Slave02 emd Humidity Too High.')
ipduSlave02EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,79))
if mibBuilder.loadTexts: ipduSlave02EmdHumidityNotLow.setDescription('INFORMATION: The Slave02 emd Humidity Not Low.')
ipduSlave02EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,80))
if mibBuilder.loadTexts: ipduSlave02EmdHumidityTooLow.setDescription('WARNING: The Slave02 emd Humidity Too Low.')
ipduSlave02EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,81))
if mibBuilder.loadTexts: ipduSlave02EmdAlarm1Normal.setDescription('INFORMATION: The Slave02 emd Alarm1 Normal.')
ipduSlave02EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,82))
if mibBuilder.loadTexts: ipduSlave02EmdAlarm1Active.setDescription('WARNING: The Slave02 emd Alarm1 Active.')
ipduSlave02EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,83))
if mibBuilder.loadTexts: ipduSlave02EmdAlarm2Normal.setDescription('INFORMATION: The Slave02 emd Alarm2 Normal.')
ipduSlave02EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,84))
if mibBuilder.loadTexts: ipduSlave02EmdAlarm2Active.setDescription('WARNING: The Slave02 emd Alarm2 Active.')
ipduSlave02OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,85))
if mibBuilder.loadTexts: ipduSlave02OutletCurrentOverTh.setDescription('WARNING: The Slave02 Outlet Current over threshold.')
ipduSlave03Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,86))
if mibBuilder.loadTexts: ipduSlave03Inlet01OverHigh.setDescription('CRITICAL: The Slave03 input01 voltage over high threshold.')
ipduSlave03Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,87))
if mibBuilder.loadTexts: ipduSlave03Inlet01NotOverHigh.setDescription('CRITICAL: The Slave03 input01 voltage Not over high threshold.')
ipduSlave03Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,88))
if mibBuilder.loadTexts: ipduSlave03Inlet02OverHigh.setDescription('CRITICAL: The Slave03 input02 voltage over high threshold.')
ipduSlave03Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,89))
if mibBuilder.loadTexts: ipduSlave03Inlet02NotOverHigh.setDescription('CRITICAL: The Slave03 input02 voltage Not over high threshold.')
ipduSlave03Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,90))
if mibBuilder.loadTexts: ipduSlave03Inlet01UnderLow.setDescription('CRITICAL: The Slave03 input01 voltage under low threshold.')
ipduSlave03Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,91))
if mibBuilder.loadTexts: ipduSlave03Inlet01NotUnderLow.setDescription('CRITICAL: The Slave03 input01 voltage Not under low threshold.')
ipduSlave03Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,92))
if mibBuilder.loadTexts: ipduSlave03Inlet02UnderLow.setDescription('CRITICAL: The Slave03 input02 voltage under low threshold.')
ipduSlave03Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,93))
if mibBuilder.loadTexts: ipduSlave03Inlet02NotUnderLow.setDescription('CRITICAL: The Slave03 input02 voltage Not under low threshold.')
ipduSlave03Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,94))
if mibBuilder.loadTexts: ipduSlave03Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave03 input01 current over high threshold.')
ipduSlave03Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,95))
if mibBuilder.loadTexts: ipduSlave03Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave03 input01 current not over high threshold.')
ipduSlave03Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,96))
if mibBuilder.loadTexts: ipduSlave03Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave03 input02 current over high threshold.')
ipduSlave03Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,97))
if mibBuilder.loadTexts: ipduSlave03Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave03 input02 current not over high threshold.')
ipduSlave03EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,98))
if mibBuilder.loadTexts: ipduSlave03EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave03 emd Temperature Not High.')
ipduSlave03EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,99))
if mibBuilder.loadTexts: ipduSlave03EmdTemperatureTooHigh.setDescription('WARNING: The Slave03 emd Temperature Too High.')
ipduSlave03EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,100))
if mibBuilder.loadTexts: ipduSlave03EmdTemperatureNotLow.setDescription('INFORMATION: The Slave03 emd Temperature Not Low.')
ipduSlave03EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,101))
if mibBuilder.loadTexts: ipduSlave03EmdTemperatureTooLow.setDescription('WARNING: The Slave03 emd Temperature Too Low.')
ipduSlave03EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,102))
if mibBuilder.loadTexts: ipduSlave03EmdHumidityNotHigh.setDescription('INFORMATION: The Slave03 emd Humidity Not High.')
ipduSlave03EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,103))
if mibBuilder.loadTexts: ipduSlave03EmdHumidityTooHigh.setDescription('WARNING: The Slave03 emd Humidity Too High.')
ipduSlave03EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,104))
if mibBuilder.loadTexts: ipduSlave03EmdHumidityNotLow.setDescription('INFORMATION: The Slave03 emd Humidity Not Low.')
ipduSlave03EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,105))
if mibBuilder.loadTexts: ipduSlave03EmdHumidityTooLow.setDescription('WARNING: The Slave03 emd Humidity Too Low.')
ipduSlave03EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,106))
if mibBuilder.loadTexts: ipduSlave03EmdAlarm1Normal.setDescription('INFORMATION: The Slave03 emd Alarm1 Normal.')
ipduSlave03EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,107))
if mibBuilder.loadTexts: ipduSlave03EmdAlarm1Active.setDescription('WARNING: The Slave03 emd Alarm1 Active.')
ipduSlave03EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,108))
if mibBuilder.loadTexts: ipduSlave03EmdAlarm2Normal.setDescription('INFORMATION: The Slave03 emd Alarm2 Normal.')
ipduSlave03EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,109))
if mibBuilder.loadTexts: ipduSlave03EmdAlarm2Active.setDescription('WARNING: The Slave03 emd Alarm2 Active.')
ipduSlave03OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,110))
if mibBuilder.loadTexts: ipduSlave03OutletCurrentOverTh.setDescription('WARNING: The Slave03 Outlet Current over threshold.')
ipduSlave04Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,111))
if mibBuilder.loadTexts: ipduSlave04Inlet01OverHigh.setDescription('CRITICAL: The Slave04 input01 voltage over high threshold.')
ipduSlave04Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,112))
if mibBuilder.loadTexts: ipduSlave04Inlet01NotOverHigh.setDescription('CRITICAL: The Slave04 input01 voltage Not over high threshold.')
ipduSlave04Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,113))
if mibBuilder.loadTexts: ipduSlave04Inlet02OverHigh.setDescription('CRITICAL: The Slave04 input02 voltage over high threshold.')
ipduSlave04Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,114))
if mibBuilder.loadTexts: ipduSlave04Inlet02NotOverHigh.setDescription('CRITICAL: The Slave04 input02 voltage Not over high threshold.')
ipduSlave04Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,115))
if mibBuilder.loadTexts: ipduSlave04Inlet01UnderLow.setDescription('CRITICAL: The Slave04 input01 voltage under low threshold.')
ipduSlave04Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,116))
if mibBuilder.loadTexts: ipduSlave04Inlet01NotUnderLow.setDescription('CRITICAL: The Slave04 input01 voltage Not under low threshold.')
ipduSlave04Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,117))
if mibBuilder.loadTexts: ipduSlave04Inlet02UnderLow.setDescription('CRITICAL: The Slave04 input02 voltage under low threshold.')
ipduSlave04Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,118))
if mibBuilder.loadTexts: ipduSlave04Inlet02NotUnderLow.setDescription('CRITICAL: The Slave04 input02 voltage Not under low threshold.')
ipduSlave04Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,119))
if mibBuilder.loadTexts: ipduSlave04Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave04 input01 current over high threshold.')
ipduSlave04Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,120))
if mibBuilder.loadTexts: ipduSlave04Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave04 input01 current not over high threshold.')
ipduSlave04Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,121))
if mibBuilder.loadTexts: ipduSlave04Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave04 input02 current over high threshold.')
ipduSlave04Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,122))
if mibBuilder.loadTexts: ipduSlave04Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave04 input02 current not over high threshold.')
ipduSlave04EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,123))
if mibBuilder.loadTexts: ipduSlave04EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave04 emd Temperature Not High.')
ipduSlave04EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,124))
if mibBuilder.loadTexts: ipduSlave04EmdTemperatureTooHigh.setDescription('WARNING: The Slave04 emd Temperature Too High.')
ipduSlave04EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,125))
if mibBuilder.loadTexts: ipduSlave04EmdTemperatureNotLow.setDescription('INFORMATION: The Slave04 emd Temperature Not Low.')
ipduSlave04EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,126))
if mibBuilder.loadTexts: ipduSlave04EmdTemperatureTooLow.setDescription('WARNING: The Slave04 emd Temperature Too Low.')
ipduSlave04EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,127))
if mibBuilder.loadTexts: ipduSlave04EmdHumidityNotHigh.setDescription('INFORMATION: The Slave04 emd Humidity Not High.')
ipduSlave04EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,128))
if mibBuilder.loadTexts: ipduSlave04EmdHumidityTooHigh.setDescription('WARNING: The Slave04 emd Humidity Too High.')
ipduSlave04EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,129))
if mibBuilder.loadTexts: ipduSlave04EmdHumidityNotLow.setDescription('INFORMATION: The Slave04 emd Humidity Not Low.')
ipduSlave04EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,130))
if mibBuilder.loadTexts: ipduSlave04EmdHumidityTooLow.setDescription('WARNING: The Slave04 emd Humidity Too Low.')
ipduSlave04EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,131))
if mibBuilder.loadTexts: ipduSlave04EmdAlarm1Normal.setDescription('INFORMATION: The Slave04 emd Alarm1 Normal.')
ipduSlave04EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,132))
if mibBuilder.loadTexts: ipduSlave04EmdAlarm1Active.setDescription('WARNING: The Slave04 emd Alarm1 Active.')
ipduSlave04EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,133))
if mibBuilder.loadTexts: ipduSlave04EmdAlarm2Normal.setDescription('INFORMATION: The Slave04 emd Alarm2 Normal.')
ipduSlave04EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,134))
if mibBuilder.loadTexts: ipduSlave04EmdAlarm2Active.setDescription('WARNING: The Slave04 emd Alarm2 Active.')
ipduSlave04OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,135))
if mibBuilder.loadTexts: ipduSlave04OutletCurrentOverTh.setDescription('WARNING: The Slave04 Outlet Current over threshold.')
ipduSlave05Inlet01OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,136))
if mibBuilder.loadTexts: ipduSlave05Inlet01OverHigh.setDescription('CRITICAL: The Slave05 input01 voltage over high threshold.')
ipduSlave05Inlet01NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,137))
if mibBuilder.loadTexts: ipduSlave05Inlet01NotOverHigh.setDescription('CRITICAL: The Slave05 input01 voltage Not over high threshold.')
ipduSlave05Inlet02OverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,138))
if mibBuilder.loadTexts: ipduSlave05Inlet02OverHigh.setDescription('CRITICAL: The Slave05 input02 voltage over high threshold.')
ipduSlave05Inlet02NotOverHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,139))
if mibBuilder.loadTexts: ipduSlave05Inlet02NotOverHigh.setDescription('CRITICAL: The Slave05 input02 voltage Not over high threshold.')
ipduSlave05Inlet01UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,140))
if mibBuilder.loadTexts: ipduSlave05Inlet01UnderLow.setDescription('CRITICAL: The Slave05 input01 voltage under low threshold.')
ipduSlave05Inlet01NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,141))
if mibBuilder.loadTexts: ipduSlave05Inlet01NotUnderLow.setDescription('CRITICAL: The Slave05 input01 voltage Not under low threshold.')
ipduSlave05Inlet02UnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,142))
if mibBuilder.loadTexts: ipduSlave05Inlet02UnderLow.setDescription('CRITICAL: The Slave05 input02 voltage under low threshold.')
ipduSlave05Inlet02NotUnderLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,143))
if mibBuilder.loadTexts: ipduSlave05Inlet02NotUnderLow.setDescription('CRITICAL: The Slave05 input02 voltage Not under low threshold.')
ipduSlave05Inlet01CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,144))
if mibBuilder.loadTexts: ipduSlave05Inlet01CurrentOverTh.setDescription('CRITICAL: The Slave05 input01 current over high threshold.')
ipduSlave05Inlet01NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,145))
if mibBuilder.loadTexts: ipduSlave05Inlet01NotCurrentOverTh.setDescription('CRITICAL: The Slave05 input01 current not over high threshold.')
ipduSlave05Inlet02CurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,146))
if mibBuilder.loadTexts: ipduSlave05Inlet02CurrentOverTh.setDescription('CRITICAL: The Slave05 input02 current over high threshold.')
ipduSlave05Inlet02NotCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,147))
if mibBuilder.loadTexts: ipduSlave05Inlet02NotCurrentOverTh.setDescription('CRITICAL: The Slave05 input02 current not over high threshold.')
ipduSlave05EmdTemperatureNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,148))
if mibBuilder.loadTexts: ipduSlave05EmdTemperatureNotHigh.setDescription('INFORMATION: The Slave05 emd Temperature Not High.')
ipduSlave05EmdTemperatureTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,149))
if mibBuilder.loadTexts: ipduSlave05EmdTemperatureTooHigh.setDescription('WARNING: The Slave05 emd Temperature Too High.')
ipduSlave05EmdTemperatureNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,150))
if mibBuilder.loadTexts: ipduSlave05EmdTemperatureNotLow.setDescription('INFORMATION: The Slave05 emd Temperature Not Low.')
ipduSlave05EmdTemperatureTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,151))
if mibBuilder.loadTexts: ipduSlave05EmdTemperatureTooLow.setDescription('WARNING: The Slave05 emd Temperature Too Low.')
ipduSlave05EmdHumidityNotHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,152))
if mibBuilder.loadTexts: ipduSlave05EmdHumidityNotHigh.setDescription('INFORMATION: The Slave05 emd Humidity Not High.')
ipduSlave05EmdHumidityTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,153))
if mibBuilder.loadTexts: ipduSlave05EmdHumidityTooHigh.setDescription('WARNING: The Slave05 emd Humidity Too High.')
ipduSlave05EmdHumidityNotLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,154))
if mibBuilder.loadTexts: ipduSlave05EmdHumidityNotLow.setDescription('INFORMATION: The Slave05 emd Humidity Not Low.')
ipduSlave05EmdHumidityTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,155))
if mibBuilder.loadTexts: ipduSlave05EmdHumidityTooLow.setDescription('WARNING: The Slave05 emd Humidity Too Low.')
ipduSlave05EmdAlarm1Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,156))
if mibBuilder.loadTexts: ipduSlave05EmdAlarm1Normal.setDescription('INFORMATION: The Slave05 emd Alarm1 Normal.')
ipduSlave05EmdAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,157))
if mibBuilder.loadTexts: ipduSlave05EmdAlarm1Active.setDescription('WARNING: The Slave05 emd Alarm1 Active.')
ipduSlave05EmdAlarm2Normal = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,158))
if mibBuilder.loadTexts: ipduSlave05EmdAlarm2Normal.setDescription('INFORMATION: The Slave05 emd Alarm2 Normal.')
ipduSlave05EmdAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,159))
if mibBuilder.loadTexts: ipduSlave05EmdAlarm2Active.setDescription('WARNING: The Slave05 emd Alarm2 Active.')
ipduSlave05OutletCurrentOverTh = NotificationType((1, 3, 6, 1, 4, 1, 4555, 1, 1, 20, 2) + (0,160))
if mibBuilder.loadTexts: ipduSlave05OutletCurrentOverTh.setDescription('WARNING: The Slave05 Outlet Current over threshold.')
mibBuilder.exportSymbols("SOCOMECUPS-MIB-v2", ipduSlave04Inlet02CurrentOverTh=ipduSlave04Inlet02CurrentOverTh, slaveOutletCurrent05=slaveOutletCurrent05, slaveOutletName03=slaveOutletName03, ipduDeviceCcOutControlTable=ipduDeviceCcOutControlTable, ipduAgentHttpControl=ipduAgentHttpControl, slaveOutletCurrent09=slaveOutletCurrent09, ipduAgentNtpTimeZone=ipduAgentNtpTimeZone, ipduDeviceInletStatusEntry=ipduDeviceInletStatusEntry, ipduIdentAgentSoftwareVersion=ipduIdentAgentSoftwareVersion, outletControlControl=outletControlControl, ipduEnvEmdConfigHumiHighSetPoint=ipduEnvEmdConfigHumiHighSetPoint, ipduInlet2VoltageTooLow=ipduInlet2VoltageTooLow, ipduEmdHumidityTooLow=ipduEmdHumidityTooLow, ipduDeviceOutletStatusEntry=ipduDeviceOutletStatusEntry, slaveOutletOnTime12=slaveOutletOnTime12, ipduEnvEmdStatusHumidity=ipduEnvEmdStatusHumidity, ipduSlave=ipduSlave, ipduSlave04Inlet01NotUnderLow=ipduSlave04Inlet01NotUnderLow, accessControlAddr=accessControlAddr, ipduSlave05EmdAlarm2Normal=ipduSlave05EmdAlarm2Normal, slaveInlet2ConfigVoltageLow=slaveInlet2ConfigVoltageLow, slaveOutletName09=slaveOutletName09, slaveOutletOffTime03=slaveOutletOffTime03, ipduSlave01EmdHumidityTooHigh=ipduSlave01EmdHumidityTooHigh, ipduDeviceOutletConfigEntry=ipduDeviceOutletConfigEntry, ipduEnvEmdConfigTempOffset=ipduEnvEmdConfigTempOffset, ipduAgentLog=ipduAgentLog, ipduSlave04EmdTemperatureTooLow=ipduSlave04EmdTemperatureTooLow, slaveOutletAction01=slaveOutletAction01, slaveOutletOffTime05=slaveOutletOffTime05, ipduEmdHumidityNotLow=ipduEmdHumidityNotLow, ipduEnvEmdStatusAlarm1=ipduEnvEmdStatusAlarm1, ipduSlave01Inlet02CurrentOverTh=ipduSlave01Inlet02CurrentOverTh, ipduSlave02Inlet01CurrentOverTh=ipduSlave02Inlet01CurrentOverTh, ipduSlave04Inlet02NotUnderLow=ipduSlave04Inlet02NotUnderLow, slaveOutletLocation09=slaveOutletLocation09, slaveOutletLocation11=slaveOutletLocation11, ipduSlave02Inlet02NotCurrentOverTh=ipduSlave02Inlet02NotCurrentOverTh, ipduSlaveStateTable=ipduSlaveStateTable, slaveOutletAction07=slaveOutletAction07, slaveOutletOnTime08=slaveOutletOnTime08, ipduSlave02Inlet02NotOverHigh=ipduSlave02Inlet02NotOverHigh, slaveOutletCurrent08=slaveOutletCurrent08, ipduEnvEmdConfigAlarm2Type=ipduEnvEmdConfigAlarm2Type, ipduSlave04OutletCurrentOverTh=ipduSlave04OutletCurrentOverTh, ipduOutletStateChanged=ipduOutletStateChanged, ipduAgentNetworkSnmp=ipduAgentNetworkSnmp, ipduSlave02EmdHumidityNotHigh=ipduSlave02EmdHumidityNotHigh, outletConfigCurrentHighAction=outletConfigCurrentHighAction, ipduSlave02EmdHumidityTooLow=ipduSlave02EmdHumidityTooLow, ipduSlave03EmdAlarm2Active=ipduSlave03EmdAlarm2Active, slaveOutletKwatt02=slaveOutletKwatt02, ipduSlave03EmdHumidityNotLow=ipduSlave03EmdHumidityNotLow, ipduEmdHumidityTooHigh=ipduEmdHumidityTooHigh, ipduSlave03EmdAlarm2Normal=ipduSlave03EmdAlarm2Normal, ipduSlave03Inlet01OverHigh=ipduSlave03Inlet01OverHigh, slaveOutletLocation12=slaveOutletLocation12, ipduEnvEmdConfigAlarm1Name=ipduEnvEmdConfigAlarm1Name, ipduAgent=ipduAgent, slaveOutletName07=slaveOutletName07, ipduSlave02EmdTemperatureNotHigh=ipduSlave02EmdTemperatureNotHigh, slaveOutletCurrTh05=slaveOutletCurrTh05, slaveOutletCurrTh11=slaveOutletCurrTh11, ipduAgentTime=ipduAgentTime, slaveOutletNameIndex=slaveOutletNameIndex, slaveOutletCurrent12=slaveOutletCurrent12, ipduAgentNetworkIpAdress=ipduAgentNetworkIpAdress, ipduAgentSnmpPort=ipduAgentSnmpPort, ipduSlave05Inlet02CurrentOverTh=ipduSlave05Inlet02CurrentOverTh, ipduDeviceslaveInletConfigEntry=ipduDeviceslaveInletConfigEntry, slaveOutletOnTime09=slaveOutletOnTime09, socomecSicon=socomecSicon, ipduInlet2FrequencyTooHigh=ipduInlet2FrequencyTooHigh, ipduDeviceslaveInletConfigTable=ipduDeviceslaveInletConfigTable, inletStatusIndex=inletStatusIndex, ipduIdentName=ipduIdentName, slaveOutletWatt01=slaveOutletWatt01, slaveOutletKwatt07=slaveOutletKwatt07, ipduSlave03Inlet02OverHigh=ipduSlave03Inlet02OverHigh, ipduAgentTimeTime=ipduAgentTimeTime, ipduDeviceInletConfigEntry=ipduDeviceInletConfigEntry, inletStatusCurrent=inletStatusCurrent, ipduSlave01Inlet01NotCurrentOverTh=ipduSlave01Inlet01NotCurrentOverTh, receiverNmsType=receiverNmsType, outletStatusStateTime=outletStatusStateTime, ipduSlave01EmdHumidityTooLow=ipduSlave01EmdHumidityTooLow, ipduSlave02EmdHumidityTooHigh=ipduSlave02EmdHumidityTooHigh, ipduDeviceCcOutNumber=ipduDeviceCcOutNumber, slaveOutletKwatt03=slaveOutletKwatt03, ipduEnvEmdConfigHumi=ipduEnvEmdConfigHumi, slaveOutletKwatt01=slaveOutletKwatt01, ipduSlave05Inlet01UnderLow=ipduSlave05Inlet01UnderLow, ipduSlave02Inlet01NotOverHigh=ipduSlave02Inlet01NotOverHigh, ipduInlet2VoltageNotTooHigh=ipduInlet2VoltageNotTooHigh, ipduSlave04EmdAlarm1Active=ipduSlave04EmdAlarm1Active, slaveOutletKwatt04=slaveOutletKwatt04, ipduEmdTemperatureNotHigh=ipduEmdTemperatureNotHigh, ipduSlaveOutletStatus=ipduSlaveOutletStatus, slaveOutletOnTime01=slaveOutletOnTime01, ccOutStatusIndex=ccOutStatusIndex, inletSlaveStatusWH=inletSlaveStatusWH, ipduSlaveDeviceOutletCurrentTable=ipduSlaveDeviceOutletCurrentTable, slaveOutletAction11=slaveOutletAction11, ipduSlave01Inlet01UnderLow=ipduSlave01Inlet01UnderLow, slaveOutletCurrent02=slaveOutletCurrent02, slaveOutletAction04=slaveOutletAction04, ipduAgentNetworkPingControl=ipduAgentNetworkPingControl, ipduSlave05EmdAlarm2Active=ipduSlave05EmdAlarm2Active, slaveOutletOnTime04=slaveOutletOnTime04, ipduSlave03EmdHumidityTooLow=ipduSlave03EmdHumidityTooLow, slaveOutletKwattIndex=slaveOutletKwattIndex, slaveOutletAction12=slaveOutletAction12, ipduSlaveDeviceOutletKwattEntry=ipduSlaveDeviceOutletKwattEntry, ipduEmdHumidityNotHigh=ipduEmdHumidityNotHigh, slaveOutletOffTime09=slaveOutletOffTime09, ipduSlave05Inlet01OverHigh=ipduSlave05Inlet01OverHigh, slaveOutletOnTime05=slaveOutletOnTime05, ipduInletVoltageTooLow=ipduInletVoltageTooLow, ipduTraps=ipduTraps, inletStatusFrequency=inletStatusFrequency, ipduSlave01Inlet02NotCurrentOverTh=ipduSlave01Inlet02NotCurrentOverTh, ipduSlave04Inlet02OverHigh=ipduSlave04Inlet02OverHigh, ipduSlaveDeviceOutletOffTimeEntry=ipduSlaveDeviceOutletOffTimeEntry, ipduAgentTelnetPort=ipduAgentTelnetPort, ipduIdent=ipduIdent, slaveOutletWatt10=slaveOutletWatt10, inletConfigfrequencyLowAction=inletConfigfrequencyLowAction, ipduSlaveOutletConfig=ipduSlaveOutletConfig, slaveOutletCurrThIndex=slaveOutletCurrThIndex, ipduDeviceCcOutConfigEntry=ipduDeviceCcOutConfigEntry, ipduSlave05Inlet02NotOverHigh=ipduSlave05Inlet02NotOverHigh, ipduEnvEmdConfigTempHighSetPoint=ipduEnvEmdConfigTempHighSetPoint, ipduSlave05Inlet02NotCurrentOverTh=ipduSlave05Inlet02NotCurrentOverTh, slaveOutletCurrent01=slaveOutletCurrent01, slaveOutletKwatt05=slaveOutletKwatt05, slaveOutletOffTime01=slaveOutletOffTime01, ipduEnvEmdConfigTempLowSetPoint=ipduEnvEmdConfigTempLowSetPoint, ipduAgentNtpIpAddress=ipduAgentNtpIpAddress, ipduSlaveDeviceOutletActionEntry=ipduSlaveDeviceOutletActionEntry, slaveOutletLocation08=slaveOutletLocation08, inletConfigVoltageHighAction=inletConfigVoltageHighAction, ipduDeviceCcOutStatusEntry=ipduDeviceCcOutStatusEntry, slaveOutletLocation02=slaveOutletLocation02, ipduInlet2FrequencyNotTooHigh=ipduInlet2FrequencyNotTooHigh, slaveOutletOffTime02=slaveOutletOffTime02, ipduInletFrequencyNotTooHigh=ipduInletFrequencyNotTooHigh, outletConfigCurrentHigh=outletConfigCurrentHigh, slaveOutletCurrent04=slaveOutletCurrent04, slaveStateControl01=slaveStateControl01, inletConfigFrequencyLow=inletConfigFrequencyLow, ipduOutletCurrentNotTooHigh=ipduOutletCurrentNotTooHigh, ipduSlave03EmdTemperatureNotHigh=ipduSlave03EmdTemperatureNotHigh, slaveOutletName04=slaveOutletName04, ipduInlet2VoltageNotTooLow=ipduInlet2VoltageNotTooLow, ipduSlave05EmdAlarm1Normal=ipduSlave05EmdAlarm1Normal, receiverCommunityString=receiverCommunityString, ipduEnvEmdStatusEmdType=ipduEnvEmdStatusEmdType, ipduEmdAlarm1Normal=ipduEmdAlarm1Normal, ccOutConfigEventAction=ccOutConfigEventAction, slaveOutletCurrTh02=slaveOutletCurrTh02, ipduEnvEmdStatus=ipduEnvEmdStatus, slaveOutletAction06=slaveOutletAction06, ccOutConfigDesc=ccOutConfigDesc, ipduDeviceCcOutConfigTable=ipduDeviceCcOutConfigTable, slaveOutletOffTime11=slaveOutletOffTime11, ipduDeviceSlaveInletStatusEntry=ipduDeviceSlaveInletStatusEntry, slaveOutletLocationIndex=slaveOutletLocationIndex, ipduInletCurrentNotTooHigh=ipduInletCurrentNotTooHigh, ipduEmdAlarm1Active=ipduEmdAlarm1Active, ipduSlave04Inlet01NotOverHigh=ipduSlave04Inlet01NotOverHigh, outletStatusKwatt=outletStatusKwatt, slaveOutletKwatt11=slaveOutletKwatt11, inletSlaveStatusKwatt=inletSlaveStatusKwatt, ipduSlave05EmdAlarm1Active=ipduSlave05EmdAlarm1Active, ipduSlave04EmdHumidityNotHigh=ipduSlave04EmdHumidityNotHigh, ipduAgentNetworkDhcpControl=ipduAgentNetworkDhcpControl, ipduSlaveDeviceOutletOnTimeEntry=ipduSlaveDeviceOutletOnTimeEntry, ipduAgentTelnetControl=ipduAgentTelnetControl, ipduDeviceOutletControlAll=ipduDeviceOutletControlAll, slaveOutletKwatt12=slaveOutletKwatt12, ipduSlave05Inlet02OverHigh=ipduSlave05Inlet02OverHigh, ipduSlave02Inlet02UnderLow=ipduSlave02Inlet02UnderLow, ipduEnv=ipduEnv, inletConfigVoltageLowAction=inletConfigVoltageLowAction, outletConfigDesc=outletConfigDesc, slaveOutletOnTime11=slaveOutletOnTime11, accessControlMode=accessControlMode, ipduSlaveDeviceOutletCurrThTable=ipduSlaveDeviceOutletCurrThTable, slaveOutletOnTime03=slaveOutletOnTime03, slaveOutletCurrTh08=slaveOutletCurrTh08, ipduSlaveStateEntry=ipduSlaveStateEntry, ipduSlave04Inlet01CurrentOverTh=ipduSlave04Inlet01CurrentOverTh, ipduSlave01EmdHumidityNotHigh=ipduSlave01EmdHumidityNotHigh, slaveOutletCurrent10=slaveOutletCurrent10, ipduDeviceInletConfigTable=ipduDeviceInletConfigTable, outletConfigLocation=outletConfigLocation, ipduAgentNetworkTelnet=ipduAgentNetworkTelnet, slaveOutletWatt02=slaveOutletWatt02, outletStatusStatus=outletStatusStatus, ipduSlave03EmdTemperatureNotLow=ipduSlave03EmdTemperatureNotLow, ipduSlave01EmdAlarm2Normal=ipduSlave01EmdAlarm2Normal, inletSlaveStatusVoltage=inletSlaveStatusVoltage, ipduAgentTimeDate=ipduAgentTimeDate, ipduInlet2CurrentTooHigh=ipduInlet2CurrentTooHigh, ipduSlave03EmdAlarm1Active=ipduSlave03EmdAlarm1Active, ipduAgentMibVersion=ipduAgentMibVersion, ipduDeviceOutlet=ipduDeviceOutlet, ipduSlave04EmdTemperatureTooHigh=ipduSlave04EmdTemperatureTooHigh, ipduEmdAlarm2Normal=ipduEmdAlarm2Normal, ipduEnvEmdConfigAlarm2=ipduEnvEmdConfigAlarm2, inletConfigVoltageLow=inletConfigVoltageLow, slaveOutletAction08=slaveOutletAction08, trapsIndex=trapsIndex, inletSlaveStatusIndex=inletSlaveStatusIndex, slaveOutletCurrent06=slaveOutletCurrent06, ipduSlave05EmdTemperatureTooLow=ipduSlave05EmdTemperatureTooLow, ipduDeviceCcOutStatusTable=ipduDeviceCcOutStatusTable, ipduSlave02OutletCurrentOverTh=ipduSlave02OutletCurrentOverTh, ipduAgentDayLightSaving=ipduAgentDayLightSaving, slaveOutletWatt11=slaveOutletWatt11, slaveOutletWatt06=slaveOutletWatt06, ipduSlave01Inlet02OverHigh=ipduSlave01Inlet02OverHigh, ipduDeviceCcOutControlEntry=ipduDeviceCcOutControlEntry, slaveOutletCurrTh01=slaveOutletCurrTh01, ipduSlave05Inlet01NotOverHigh=ipduSlave05Inlet01NotOverHigh, ipduEnvEmdConfigTemp=ipduEnvEmdConfigTemp, ipduAgentTrapsReceiversTable=ipduAgentTrapsReceiversTable, ipduSlaveDeviceOutletKwattTable=ipduSlaveDeviceOutletKwattTable, ipduEnvEmdConfigEmdName=ipduEnvEmdConfigEmdName, ipduDeviceInlet=ipduDeviceInlet, slaveOutletName02=slaveOutletName02, ipduEmdTemperatureTooHigh=ipduEmdTemperatureTooHigh, ipduSlave02EmdHumidityNotLow=ipduSlave02EmdHumidityNotLow, slaveOutletWatt12=slaveOutletWatt12, ipduEmdAlarm2Active=ipduEmdAlarm2Active, ipduDeviceInletNumber=ipduDeviceInletNumber, slaveOutletName11=slaveOutletName11, ipduSlave05EmdHumidityNotHigh=ipduSlave05EmdHumidityNotHigh, ipduSlave04EmdTemperatureNotHigh=ipduSlave04EmdTemperatureNotHigh, ipduInlet2FrequencyNotTooLow=ipduInlet2FrequencyNotTooLow, ipduSlave01Inlet01CurrentOverTh=ipduSlave01Inlet01CurrentOverTh, ipduAgentControl=ipduAgentControl, ipduAgentTrapAckSignature=ipduAgentTrapAckSignature, ipduDeviceOutletWattReset=ipduDeviceOutletWattReset, ipduEnvEmdStatusTemperature=ipduEnvEmdStatusTemperature, ccOutConfigOpenDelay=ccOutConfigOpenDelay, ipduSlave02Inlet01OverHigh=ipduSlave02Inlet01OverHigh, ipduIdentModel=ipduIdentModel, ipduSlave03Inlet01NotOverHigh=ipduSlave03Inlet01NotOverHigh, ipduSlave03Inlet02CurrentOverTh=ipduSlave03Inlet02CurrentOverTh, slaveOutletAction09=slaveOutletAction09, slaveOutletWatt07=slaveOutletWatt07, ipduSlave02EmdAlarm2Active=ipduSlave02EmdAlarm2Active, ipduSlave02EmdTemperatureTooLow=ipduSlave02EmdTemperatureTooLow)
mibBuilder.exportSymbols("SOCOMECUPS-MIB-v2", ipduSlave01Inlet02NotOverHigh=ipduSlave01Inlet02NotOverHigh, slaveOutletName12=slaveOutletName12, ipduSlave04Inlet01OverHigh=ipduSlave04Inlet01OverHigh, slaveOutletLocation07=slaveOutletLocation07, ipduSlave05EmdHumidityNotLow=ipduSlave05EmdHumidityNotLow, ipduSlave01OutletCurrentOverTh=ipduSlave01OutletCurrentOverTh, slaveOutletWatt03=slaveOutletWatt03, ipduEnvEmdConfigTempName=ipduEnvEmdConfigTempName, ipduSlave01Inlet02UnderLow=ipduSlave01Inlet02UnderLow, ipduSlave02EmdTemperatureNotLow=ipduSlave02EmdTemperatureNotLow, inletSlaveStatusFrequency2=inletSlaveStatusFrequency2, ipduSlave04EmdAlarm2Active=ipduSlave04EmdAlarm2Active, ipduEnvEmdConfigHumiHighStatus=ipduEnvEmdConfigHumiHighStatus, slaveOutletOffTime06=slaveOutletOffTime06, ipduSlave04Inlet02NotCurrentOverTh=ipduSlave04Inlet02NotCurrentOverTh, ccOutConfigCloseDelay=ccOutConfigCloseDelay, slaveOutletKwatt06=slaveOutletKwatt06, ipduOutletCurrentTooHigh=ipduOutletCurrentTooHigh, ccOutControlControl=ccOutControlControl, ipduSlave03EmdHumidityTooHigh=ipduSlave03EmdHumidityTooHigh, ipduObjects=ipduObjects, ipduInletCurrentTooHigh=ipduInletCurrentTooHigh, ipduInlet2CurrentNotTooHigh=ipduInlet2CurrentNotTooHigh, ipduSlave01EmdAlarm1Normal=ipduSlave01EmdAlarm1Normal, slaveOutletCurrTh12=slaveOutletCurrTh12, ipduDeviceOutletStatusTable=ipduDeviceOutletStatusTable, inletSlaveStatusKwatt2=inletSlaveStatusKwatt2, ipduSlave03EmdHumidityNotHigh=ipduSlave03EmdHumidityNotHigh, outletControlIndex=outletControlIndex, slaveOutletCurrent03=slaveOutletCurrent03, ipduSlave03Inlet01CurrentOverTh=ipduSlave03Inlet01CurrentOverTh, ipduSlave03Inlet02UnderLow=ipduSlave03Inlet02UnderLow, slaveOutletOnTime07=slaveOutletOnTime07, ipduSlave05EmdTemperatureNotLow=ipduSlave05EmdTemperatureNotLow, ccOutControlIndex=ccOutControlIndex, ipduInlet2FrequencyTooLow=ipduInlet2FrequencyTooLow, slaveOutletLocation06=slaveOutletLocation06, receiverSeverityLevel=receiverSeverityLevel, ipduInletFrequencyTooLow=ipduInletFrequencyTooLow, slaveOutletCurrTh04=slaveOutletCurrTh04, inletSlaveStatusFrequency=inletSlaveStatusFrequency, slaveOutletOffTime10=slaveOutletOffTime10, ipduAgentNetworkIpSubnet=ipduAgentNetworkIpSubnet, ipduInletFrequencyNotTooLow=ipduInletFrequencyNotTooLow, ipduSlave02EmdAlarm2Normal=ipduSlave02EmdAlarm2Normal, ipduAgentControlDefault=ipduAgentControlDefault, ipduAgentTrapRetryCount=ipduAgentTrapRetryCount, ipduSlaveInletStatus=ipduSlaveInletStatus, ipduSlaveInletConfig=ipduSlaveInletConfig, ipduDeviceOutletNumber=ipduDeviceOutletNumber, slaveOutletCurrTh03=slaveOutletCurrTh03, ipduEnvEmdConfigHumiLowSetPoint=ipduEnvEmdConfigHumiLowSetPoint, ipduSlaveDeviceOutletOffTimeTable=ipduSlaveDeviceOutletOffTimeTable, ipduEnvEmdConfigHumiName=ipduEnvEmdConfigHumiName, ipduEnvEmd=ipduEnvEmd, ipduSlave01EmdTemperatureNotHigh=ipduSlave01EmdTemperatureNotHigh, ipduEnvEmdConfigEmdPresence=ipduEnvEmdConfigEmdPresence, ipduInlet2VoltageTooHigh=ipduInlet2VoltageTooHigh, receiverDescription=receiverDescription, ipduEnvEmdStatusAlarm2=ipduEnvEmdStatusAlarm2, ipduSlave01EmdAlarm1Active=ipduSlave01EmdAlarm1Active, ipduEnvEmdConfig=ipduEnvEmdConfig, ipduSlave05Inlet02NotUnderLow=ipduSlave05Inlet02NotUnderLow, ipduSlave02EmdAlarm1Active=ipduSlave02EmdAlarm1Active, ipduSlave02Inlet01NotUnderLow=ipduSlave02Inlet01NotUnderLow, slaveOutletLocation04=slaveOutletLocation04, slaveOutletCurrTh07=slaveOutletCurrTh07, ipduSlave05OutletCurrentOverTh=ipduSlave05OutletCurrentOverTh, ccOutStatusTimeOnState=ccOutStatusTimeOnState, ipduSlave04EmdHumidityTooHigh=ipduSlave04EmdHumidityTooHigh, ipduSlaveDeviceOutletCurrThEntry=ipduSlaveDeviceOutletCurrThEntry, ipduSlaveDeviceOutletLocationTable=ipduSlaveDeviceOutletLocationTable, ipduDeviceCcOut=ipduDeviceCcOut, slaveOutletOnTime10=slaveOutletOnTime10, inletWattReset=inletWattReset, slaveOutletAction02=slaveOutletAction02, slaveOutletAction03=slaveOutletAction03, inletSlaveStatusVoltage2=inletSlaveStatusVoltage2, slaveOutletOnTime02=slaveOutletOnTime02, ipduSlave03Inlet02NotOverHigh=ipduSlave03Inlet02NotOverHigh, slaveOutletActionIndex=slaveOutletActionIndex, ipduDeviceOutletControlTable=ipduDeviceOutletControlTable, ipduSlave01EmdTemperatureTooLow=ipduSlave01EmdTemperatureTooLow, ipduSlave01Inlet01NotOverHigh=ipduSlave01Inlet01NotOverHigh, ipduSlave03Inlet01UnderLow=ipduSlave03Inlet01UnderLow, ipduSlave04EmdHumidityNotLow=ipduSlave04EmdHumidityNotLow, ipduSlave02Inlet01UnderLow=ipduSlave02Inlet01UnderLow, ipduSlave03Inlet02NotUnderLow=ipduSlave03Inlet02NotUnderLow, ipduSlave02Inlet02CurrentOverTh=ipduSlave02Inlet02CurrentOverTh, ipduAgentNetworkIpGateway=ipduAgentNetworkIpGateway, inletConfigFrequencyHigh=inletConfigFrequencyHigh, ipduAgentTimerFromNtp=ipduAgentTimerFromNtp, slaveOutletOnTimeIndex=slaveOutletOnTimeIndex, slaveOutletAction05=slaveOutletAction05, ipduSlaveDeviceOutletOnTimeTable=ipduSlaveDeviceOutletOnTimeTable, ipduSlave05Inlet02UnderLow=ipduSlave05Inlet02UnderLow, slaveOutletKwatt08=slaveOutletKwatt08, slaveOutletLocation03=slaveOutletLocation03, ipduSlave04Inlet01UnderLow=ipduSlave04Inlet01UnderLow, ipduSlave04Inlet02NotOverHigh=ipduSlave04Inlet02NotOverHigh, inletStatusKwatt=inletStatusKwatt, ipduSlaveDeviceOutletNameTable=ipduSlaveDeviceOutletNameTable, ipduSlave02Inlet01NotCurrentOverTh=ipduSlave02Inlet01NotCurrentOverTh, ipduAgentSnmpControl=ipduAgentSnmpControl, ipduSlaveState=ipduSlaveState, outletStatusIndex=outletStatusIndex, ipduAgentConfig=ipduAgentConfig, ipduAgentTrapRetryTime=ipduAgentTrapRetryTime, slaveOutletName06=slaveOutletName06, slaveOutletWatt08=slaveOutletWatt08, ipduSlave05Inlet01NotCurrentOverTh=ipduSlave05Inlet01NotCurrentOverTh, slaveOutletName10=slaveOutletName10, inletSlaveStatusWH2=inletSlaveStatusWH2, slaveOutletName08=slaveOutletName08, slaveOutletWatt04=slaveOutletWatt04, pduAgent=pduAgent, ipduSlave01EmdTemperatureTooHigh=ipduSlave01EmdTemperatureTooHigh, slaveInletConfigIndex=slaveInletConfigIndex, ipduSlaveInlet=ipduSlaveInlet, outletConfigOnDelay=outletConfigOnDelay, iPDU=iPDU, ipduDevice=ipduDevice, ipduSlave05EmdHumidityTooLow=ipduSlave05EmdHumidityTooLow, ipduDeviceOutletControlEntry=ipduDeviceOutletControlEntry, ipduAgentTrapsReceiversEntry=ipduAgentTrapsReceiversEntry, slaveOutletName01=slaveOutletName01, inletConfigIndex=inletConfigIndex, ipduSlaveDeviceOutletWattEntry=ipduSlaveDeviceOutletWattEntry, ipduSlave02Inlet02NotUnderLow=ipduSlave02Inlet02NotUnderLow, ipduEmdTemperatureNotLow=ipduEmdTemperatureNotLow, slaveOutletLocation01=slaveOutletLocation01, ipduSlave04EmdHumidityTooLow=ipduSlave04EmdHumidityTooLow, ipduEnvEmdConfigTempLowStatus=ipduEnvEmdConfigTempLowStatus, ipduSlave03Inlet01NotUnderLow=ipduSlave03Inlet01NotUnderLow, ipduSlave01Inlet01OverHigh=ipduSlave01Inlet01OverHigh, ipduSlave03EmdAlarm1Normal=ipduSlave03EmdAlarm1Normal, ipduSlave02EmdTemperatureTooHigh=ipduSlave02EmdTemperatureTooHigh, slaveOutletCurrTh06=slaveOutletCurrTh06, ipduSlave03EmdTemperatureTooLow=ipduSlave03EmdTemperatureTooLow, ipduSlave04Inlet02UnderLow=ipduSlave04Inlet02UnderLow, slaveOutletLocation10=slaveOutletLocation10, slaveOutletOffTimeIndex=slaveOutletOffTimeIndex, ipduEnvEmdConfigHumiLowStatus=ipduEnvEmdConfigHumiLowStatus, ipduSlave04EmdAlarm1Normal=ipduSlave04EmdAlarm1Normal, ipduSlave05Inlet01NotUnderLow=ipduSlave05Inlet01NotUnderLow, ipduEnvEmdConfigAlarm1Type=ipduEnvEmdConfigAlarm1Type, slaveOutletKwatt09=slaveOutletKwatt09, ipduSlave01EmdTemperatureNotLow=ipduSlave01EmdTemperatureNotLow, ipduDeviceSlaveInletStatusTable=ipduDeviceSlaveInletStatusTable, ipduAgentTrap=ipduAgentTrap, ipduDeviceInletStatusTable=ipduDeviceInletStatusTable, ipduSlaveDeviceOutletWattTable=ipduSlaveDeviceOutletWattTable, ipduSlaveDeviceOutletNameEntry=ipduSlaveDeviceOutletNameEntry, ipduAgentNetworkHttp=ipduAgentNetworkHttp, slaveOutletWatt09=slaveOutletWatt09, ipduSlave04Inlet01NotCurrentOverTh=ipduSlave04Inlet01NotCurrentOverTh, product=product, slaveOutletOffTime12=slaveOutletOffTime12, ipduSlaveDeviceOutletActionTable=ipduSlaveDeviceOutletActionTable, ipduSlave04EmdTemperatureNotLow=ipduSlave04EmdTemperatureNotLow, slaveOutletOffTime07=slaveOutletOffTime07, ipduAgentAccessControlEntry=ipduAgentAccessControlEntry, ipduEnvEmdConfigAlarm2Name=ipduEnvEmdConfigAlarm2Name, slaveOutletCurrentIndex=slaveOutletCurrentIndex, ipduAgentNetwork=ipduAgentNetwork, ipduSlaveDeviceOutletCurrentEntry=ipduSlaveDeviceOutletCurrentEntry, inletConfigfrequencyHighAction=inletConfigfrequencyHighAction, slaveOutletCurrTh10=slaveOutletCurrTh10, ipduEnvEmdConfigTempHighStatus=ipduEnvEmdConfigTempHighStatus, ccOutStatusStatus=ccOutStatusStatus, ipduIdentManufacturer=ipduIdentManufacturer, outletStatusWH=outletStatusWH, ccOutConfigIndex=ccOutConfigIndex, inletSlaveStatusCurrent2=inletSlaveStatusCurrent2, inletConfigCurrentHighAction=inletConfigCurrentHighAction, ipduSlave05EmdTemperatureNotHigh=ipduSlave05EmdTemperatureNotHigh, slaveOutletKwatt10=slaveOutletKwatt10, ipduSlave01EmdHumidityNotLow=ipduSlave01EmdHumidityNotLow, inletStatusVoltage=inletStatusVoltage, slaveOutletOffTime08=slaveOutletOffTime08, ipduInletFrequencyTooHigh=ipduInletFrequencyTooHigh, slaveStateIndex=slaveStateIndex, ipduSlave03EmdTemperatureTooHigh=ipduSlave03EmdTemperatureTooHigh, trapsReceiverAddr=trapsReceiverAddr, outletConfigIndex=outletConfigIndex, accessIndex=accessIndex, pduAgentDataLogInterval=pduAgentDataLogInterval, outletConfigOffDelay=outletConfigOffDelay, slaveOutletCurrent07=slaveOutletCurrent07, ipduEnvEmdConfigAlarm1=ipduEnvEmdConfigAlarm1, ipduSlave01EmdAlarm2Active=ipduSlave01EmdAlarm2Active, ipduEnvEmdConfigHumiOffset=ipduEnvEmdConfigHumiOffset, ipduSlave02Inlet02OverHigh=ipduSlave02Inlet02OverHigh, slaveOutletOnTime06=slaveOutletOnTime06, ipduSlave02EmdAlarm1Normal=ipduSlave02EmdAlarm1Normal, ipduInletVoltageNotTooHigh=ipduInletVoltageNotTooHigh, ipduInletVoltageNotTooLow=ipduInletVoltageNotTooLow, inletSlaveStatusCurrent=inletSlaveStatusCurrent, ipduAgentHttpPort=ipduAgentHttpPort, outletStatusCurrent=outletStatusCurrent, ipduSlave03Inlet02NotCurrentOverTh=ipduSlave03Inlet02NotCurrentOverTh, ipduSlaveDeviceOutletLocationEntry=ipduSlaveDeviceOutletLocationEntry, slaveInletConfigVoltageHigh=slaveInletConfigVoltageHigh, ipduInletVoltageTooHigh=ipduInletVoltageTooHigh, ipduSlave05EmdTemperatureTooHigh=ipduSlave05EmdTemperatureTooHigh, slaveOutletWatt05=slaveOutletWatt05, slaveOutletCurrTh09=slaveOutletCurrTh09, slaveInletConfigVoltageLow=slaveInletConfigVoltageLow, ipduSlave05EmdHumidityTooHigh=ipduSlave05EmdHumidityTooHigh, ipduSlave01Inlet02NotUnderLow=ipduSlave01Inlet02NotUnderLow, slaveOutletWattIndex=slaveOutletWattIndex, ipduAgentAccessControlTable=ipduAgentAccessControlTable, ipduEmdTemperatureTooLow=ipduEmdTemperatureTooLow, outletStatusTimeToGo=outletStatusTimeToGo, slaveInlet2ConfigVoltageHigh=slaveInlet2ConfigVoltageHigh, inletConfigVoltageHigh=inletConfigVoltageHigh, ipduSlave04EmdAlarm2Normal=ipduSlave04EmdAlarm2Normal, ipduSlaveOutlet=ipduSlaveOutlet, ipduAgentNetworkTftpControl=ipduAgentNetworkTftpControl, ipduDeviceOutletConfigTable=ipduDeviceOutletConfigTable, inletStatusWH=inletStatusWH, slaveOutletLocation05=slaveOutletLocation05, ipduSlave03Inlet01NotCurrentOverTh=ipduSlave03Inlet01NotCurrentOverTh, ipduSlave01Inlet01NotUnderLow=ipduSlave01Inlet01NotUnderLow, inletConfigCurrentHigh=inletConfigCurrentHigh, ipduSlave05Inlet01CurrentOverTh=ipduSlave05Inlet01CurrentOverTh, slaveOutletOffTime04=slaveOutletOffTime04, slaveOutletName05=slaveOutletName05, ipduSlave03OutletCurrentOverTh=ipduSlave03OutletCurrentOverTh, ipduSlaveOutletAction=ipduSlaveOutletAction, slaveOutletCurrent11=slaveOutletCurrent11, ipduAgentNetworkIp=ipduAgentNetworkIp, slaveOutletAction10=slaveOutletAction10, ipduAgentControlRestart=ipduAgentControlRestart, inletConfigDesc=inletConfigDesc)
