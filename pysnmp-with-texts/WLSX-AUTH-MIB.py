#
# PySNMP MIB module WLSX-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-AUTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaEncryptionMethods, ArubaHashAlgorithms, ArubaAuthenticationMethods, ArubaEnableValue, ArubaAuthServerType = mibBuilder.importSymbols("ARUBA-TC", "ArubaEncryptionMethods", "ArubaHashAlgorithms", "ArubaAuthenticationMethods", "ArubaEnableValue", "ArubaAuthServerType")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Counter64, Counter32, NotificationType, iso, ObjectIdentity, Bits, MibIdentifier, Gauge32, TimeTicks, ModuleIdentity, snmpModules, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Counter64", "Counter32", "NotificationType", "iso", "ObjectIdentity", "Bits", "MibIdentifier", "Gauge32", "TimeTicks", "ModuleIdentity", "snmpModules", "Integer32")
TextualConvention, PhysAddress, MacAddress, TimeInterval, TestAndIncr, TDomain, DisplayString, StorageType, TruthValue, RowStatus, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "MacAddress", "TimeInterval", "TestAndIncr", "TDomain", "DisplayString", "StorageType", "TruthValue", "RowStatus", "TAddress")
wlsxAuthMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8))
wlsxAuthMIB.setRevisions(('1906-11-27 20:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxAuthMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxAuthMIB.setLastUpdated('0611272030Z')
if mibBuilder.loadTexts: wlsxAuthMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxAuthMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxAuthMIB.setDescription('This MIB module defines MIB objects which provide information about the authentication servers known to an Aruba controller.')
wlsxAuthenticationServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1))
wlsxAuthenticationInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 2))
wlsxAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 3))
wlsxAuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1), )
if mibBuilder.loadTexts: wlsxAuthenticationServerTable.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthenticationServerTable.setDescription(' This Table lists all the authentication servers currently configured in the controller. Servers are identified by name. ')
wlsxAuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxAuthenticationServerEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxAuthenticationServerEntry.setDescription('Server entry')
authServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: authServerName.setStatus('current')
if mibBuilder.loadTexts: authServerName.setDescription(' The name of the authentication server. ')
authServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 2), ArubaAuthServerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerType.setStatus('current')
if mibBuilder.loadTexts: authServerType.setDescription(' The type of the authentication server. ')
authServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerAddress.setStatus('current')
if mibBuilder.loadTexts: authServerAddress.setDescription(' The IP address of the authentication server. ')
authServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerPort.setStatus('current')
if mibBuilder.loadTexts: authServerPort.setDescription(' The transport layer port of the authentication server. ')
authServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerRetryCount.setStatus('current')
if mibBuilder.loadTexts: authServerRetryCount.setDescription(' The configured retry count. ')
authServerTimeOutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authServerTimeOutValue.setStatus('current')
if mibBuilder.loadTexts: authServerTimeOutValue.setDescription(' The configured timeout value. ')
authServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 7), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerState.setStatus('current')
if mibBuilder.loadTexts: authServerState.setDescription(' The state of the authentication server. ')
authServerInservice = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerInservice.setStatus('current')
if mibBuilder.loadTexts: authServerInservice.setDescription(' An indication of whether or not the authentication server is in service. ')
authServerUsageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUsageCount.setStatus('current')
if mibBuilder.loadTexts: authServerUsageCount.setDescription(' The number of times this server was queried. ')
authServerSuccessfullAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerSuccessfullAuths.setStatus('current')
if mibBuilder.loadTexts: authServerSuccessfullAuths.setDescription(' The number of times this server responded with success. ')
authServerFailedAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerFailedAuths.setStatus('current')
if mibBuilder.loadTexts: authServerFailedAuths.setDescription(' The number of times this server responded with failure. ')
authServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: authServerTimeouts.setDescription(' The number of times this communication with this server timed out. ')
authServerAvgResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerAvgResponseTime.setStatus('current')
if mibBuilder.loadTexts: authServerAvgResponseTime.setDescription(' The average response time of the server in milliseconds. ')
authServerOutStandingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerOutStandingRequests.setStatus('current')
if mibBuilder.loadTexts: authServerOutStandingRequests.setDescription(' The number of requests currently outstanding to this server. ')
authServerUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authServerUptime.setStatus('current')
if mibBuilder.loadTexts: authServerUptime.setDescription(' The time since the server went into service with the controller. ')
wlsxPortalServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2), )
if mibBuilder.loadTexts: wlsxPortalServerTable.setStatus('current')
if mibBuilder.loadTexts: wlsxPortalServerTable.setDescription(' This table lists configured captive portal servers. ')
wlsxPortalServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "portalServerIndex"))
if mibBuilder.loadTexts: wlsxPortalServerEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxPortalServerEntry.setDescription('Portal Server Entry')
portalServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: portalServerIndex.setStatus('current')
if mibBuilder.loadTexts: portalServerIndex.setDescription(' ')
portalServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerHost.setStatus('current')
if mibBuilder.loadTexts: portalServerHost.setDescription(' The IP address of the portal server. ')
portalServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPort.setStatus('current')
if mibBuilder.loadTexts: portalServerPort.setDescription(' The transport layer port of the portal server. ')
portalServerPage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerPage.setStatus('current')
if mibBuilder.loadTexts: portalServerPage.setDescription(' The portal server URL ')
portalServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portalServerProtocol.setStatus('current')
if mibBuilder.loadTexts: portalServerProtocol.setDescription(' The portal server protocol (e.g. HTTP or HTTPS) ')
wlsxLdapServerStateTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5), )
if mibBuilder.loadTexts: wlsxLdapServerStateTable.setStatus('current')
if mibBuilder.loadTexts: wlsxLdapServerStateTable.setDescription(' ')
wlsxLdapServerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1), ).setIndexNames((0, "WLSX-AUTH-MIB", "authServerName"))
if mibBuilder.loadTexts: wlsxLdapServerStateEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxLdapServerStateEntry.setDescription('LDAP Server Entry')
ldapInitDone = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapInitDone.setStatus('current')
if mibBuilder.loadTexts: ldapInitDone.setDescription(' Indicates whether the controller is initialized with the server. ')
ldapAdminBound = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapAdminBound.setStatus('current')
if mibBuilder.loadTexts: ldapAdminBound.setDescription(' Indicates whether the controller is bound to the server. ')
ldapReBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 8, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldapReBindCount.setStatus('current')
if mibBuilder.loadTexts: ldapReBindCount.setDescription(' The number of times that the controller re-bound with the server. ')
mibBuilder.exportSymbols("WLSX-AUTH-MIB", portalServerPort=portalServerPort, wlsxLdapServerStateTable=wlsxLdapServerStateTable, wlsxAuthenticationInfoGroup=wlsxAuthenticationInfoGroup, ldapInitDone=ldapInitDone, ldapReBindCount=ldapReBindCount, portalServerHost=portalServerHost, authServerAddress=authServerAddress, authServerFailedAuths=authServerFailedAuths, wlsxPortalServerTable=wlsxPortalServerTable, portalServerIndex=portalServerIndex, wlsxAuthenticationServerTable=wlsxAuthenticationServerTable, wlsxAuthenticationServerEntry=wlsxAuthenticationServerEntry, authServerSuccessfullAuths=authServerSuccessfullAuths, authServerAvgResponseTime=authServerAvgResponseTime, authServerUptime=authServerUptime, portalServerPage=portalServerPage, authServerInservice=authServerInservice, portalServerProtocol=portalServerProtocol, PYSNMP_MODULE_ID=wlsxAuthMIB, authServerUsageCount=authServerUsageCount, authServerTimeouts=authServerTimeouts, wlsxLdapServerStateEntry=wlsxLdapServerStateEntry, authServerType=authServerType, wlsxAuthenticationServerGroup=wlsxAuthenticationServerGroup, authServerState=authServerState, wlsxPortalServerEntry=wlsxPortalServerEntry, wlsxAuthMIB=wlsxAuthMIB, authServerPort=authServerPort, authServerName=authServerName, ldapAdminBound=ldapAdminBound, authServerTimeOutValue=authServerTimeOutValue, authServerRetryCount=authServerRetryCount, wlsxAuthenticationGroup=wlsxAuthenticationGroup, authServerOutStandingRequests=authServerOutStandingRequests)
