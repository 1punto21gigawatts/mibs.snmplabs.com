#
# PySNMP MIB module IB-DHCPV6ONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IB-DHCPV6ONE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
IbString, ibDHCPOne, IbIpv6Addr = mibBuilder.importSymbols("IB-SMI-MIB", "IbString", "ibDHCPOne", "IbIpv6Addr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Gauge32, Counter32, Integer32, ModuleIdentity, Unsigned32, enterprises, TimeTicks, ObjectIdentity, MibIdentifier, NotificationType, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Gauge32", "Counter32", "Integer32", "ModuleIdentity", "Unsigned32", "enterprises", "TimeTicks", "ObjectIdentity", "MibIdentifier", "NotificationType", "Counter64", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibDhcpv6Module = ModuleIdentity((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2))
ibDhcpv6Module.setRevisions(('2010-12-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ibDhcpv6Module.setRevisionsDescriptions(('Added DHCPv6 module.',))
if mibBuilder.loadTexts: ibDhcpv6Module.setLastUpdated('201012290000Z')
if mibBuilder.loadTexts: ibDhcpv6Module.setOrganization('Infoblox')
if mibBuilder.loadTexts: ibDhcpv6Module.setContactInfo('See IB-SMI-MIB for information.')
if mibBuilder.loadTexts: ibDhcpv6Module.setDescription('This module defines the Infoblox DHCPv6 One MIB.')
ibDHCPv6SubnetTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: ibDHCPv6SubnetTable.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6SubnetTable.setDescription('A table of DHCPv6 Subnet statistics.')
ibDHCPv6SubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "IB-DHCPV6ONE-MIB", "ibDHCPv6SubnetNetworkAddress"))
if mibBuilder.loadTexts: ibDHCPv6SubnetEntry.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6SubnetEntry.setDescription('A conceptual row of the ibDHCPv6SubnetEntry containing info about a particular network using DHCPv6.')
ibDHCPv6SubnetNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 1, 1, 1), IbIpv6Addr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6SubnetNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6SubnetNetworkAddress.setDescription('DHCPv6 Subnet in Ipv6Address format. A subnetwork may have many ranges for lease.')
ibDHCPv6SubnetNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6SubnetNetworkMask.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6SubnetNetworkMask.setDescription('DHCPv6 Subnet CIDR.')
ibDHCPv6Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3))
ibDhcpv6TotalNoOfSolicits = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfSolicits.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfSolicits.setDescription('This variable indicates the number of solicit messages received')
ibDhcpv6TotalNoOfRequests = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfRequests.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfRequests.setDescription('This variable indicates the number of request messages received')
ibDhcpv6TotalNoOfReleases = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfReleases.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfReleases.setDescription('This variable indicates the number of release messages received')
ibDhcpv6TotalNoOfAdvertises = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfAdvertises.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfAdvertises.setDescription('This variable indicates the number of advertise messages sent')
ibDhcpv6TotalNoOfReplies = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfReplies.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfReplies.setDescription('This variable indicates the number of reply messages sent')
ibDhcpv6TotalNoOfRenews = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfRenews.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfRenews.setDescription('This variable indicates the number of renew messages sent')
ibDhcpv6TotalNoOfRebinds = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfRebinds.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfRebinds.setDescription('This variable indicates the number of rebind messages received')
ibDhcpv6TotalNoOfDeclines = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfDeclines.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfDeclines.setDescription('This variable indicates the number of decline messages received')
ibDhcpv6TotalNoOfInformationRequests = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfInformationRequests.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfInformationRequests.setDescription('This variable indicates the number of Information-Request messages received')
ibDhcpv6TotalNoOfOthers = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfOthers.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6TotalNoOfOthers.setDescription('This variable indicates the number of other messages received')
ibDhcpv6DeferredQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDhcpv6DeferredQueueSize.setStatus('current')
if mibBuilder.loadTexts: ibDhcpv6DeferredQueueSize.setDescription('The size of deferred dynamic DNS update queue for DHCPv6')
ibDHCPv6DDNSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5))
ibDHCPv6DDNSAvgLatency5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency5.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency5.setDescription('Average Latencies (in microseconds) for DHCPDv6 dynamic DNS updates during the last 5 minutes')
ibDHCPv6DDNSAvgLatency15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency15.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency15.setDescription('Average Latencies (in microseconds) for DHCPDv6 dynamic DNS updates during the last 15 minutes')
ibDHCPv6DDNSAvgLatency60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency60.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency60.setDescription('Average Latencies (in microseconds) for DHCPDv6 dynamic DNS updates during the last 60 minutes')
ibDHCPv6DDNSAvgLatency1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency1440.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSAvgLatency1440.setDescription('Average Latencies (in microseconds) for DHCPDv6 dynamic DNS updates during the last 1 day')
ibDHCPv6DDNSTimeoutCount5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount5.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount5.setDescription('The number of timeout DHCPDv6 dynamic DDNS updates during the last 5 minutes')
ibDHCPv6DDNSTimeoutCount15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount15.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount15.setDescription('The number of timeout DHCPDv6 dynamic DDNS updates during the last 15 minutes')
ibDHCPv6DDNSTimeoutCount60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount60.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount60.setDescription('The number of timeout DHCPDv6 dynamic DDNS updates during the last 60 minutes')
ibDHCPv6DDNSTimeoutCount1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 4, 2, 5, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount1440.setStatus('current')
if mibBuilder.loadTexts: ibDHCPv6DDNSTimeoutCount1440.setDescription('The number of timeout DHCPDv6 dynamic DDNS updates during the last 1 day')
mibBuilder.exportSymbols("IB-DHCPV6ONE-MIB", ibDHCPv6Statistics=ibDHCPv6Statistics, ibDHCPv6DDNSAvgLatency15=ibDHCPv6DDNSAvgLatency15, ibDHCPv6SubnetTable=ibDHCPv6SubnetTable, ibDhcpv6Module=ibDhcpv6Module, ibDHCPv6DDNSTimeoutCount1440=ibDHCPv6DDNSTimeoutCount1440, ibDHCPv6SubnetEntry=ibDHCPv6SubnetEntry, ibDHCPv6DDNSTimeoutCount15=ibDHCPv6DDNSTimeoutCount15, ibDhcpv6TotalNoOfReleases=ibDhcpv6TotalNoOfReleases, ibDhcpv6TotalNoOfRenews=ibDhcpv6TotalNoOfRenews, ibDHCPv6DDNSTimeoutCount60=ibDHCPv6DDNSTimeoutCount60, ibDHCPv6DDNSAvgLatency5=ibDHCPv6DDNSAvgLatency5, PYSNMP_MODULE_ID=ibDhcpv6Module, ibDhcpv6TotalNoOfOthers=ibDhcpv6TotalNoOfOthers, ibDHCPv6DDNSAvgLatency60=ibDHCPv6DDNSAvgLatency60, ibDhcpv6TotalNoOfSolicits=ibDhcpv6TotalNoOfSolicits, ibDhcpv6DeferredQueueSize=ibDhcpv6DeferredQueueSize, ibDHCPv6SubnetNetworkAddress=ibDHCPv6SubnetNetworkAddress, ibDhcpv6TotalNoOfAdvertises=ibDhcpv6TotalNoOfAdvertises, ibDHCPv6DDNSAvgLatency1440=ibDHCPv6DDNSAvgLatency1440, ibDHCPv6DDNSStats=ibDHCPv6DDNSStats, ibDHCPv6DDNSTimeoutCount5=ibDHCPv6DDNSTimeoutCount5, ibDhcpv6TotalNoOfRebinds=ibDhcpv6TotalNoOfRebinds, ibDhcpv6TotalNoOfReplies=ibDhcpv6TotalNoOfReplies, ibDhcpv6TotalNoOfRequests=ibDhcpv6TotalNoOfRequests, ibDHCPv6SubnetNetworkMask=ibDHCPv6SubnetNetworkMask, ibDhcpv6TotalNoOfDeclines=ibDhcpv6TotalNoOfDeclines, ibDhcpv6TotalNoOfInformationRequests=ibDhcpv6TotalNoOfInformationRequests)
