#
# PySNMP MIB module HUAWEI-8021PAE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-8021PAE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
huaweiMgmt, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "huaweiMgmt")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Unsigned32, TimeTicks, Integer32, Counter64, ModuleIdentity, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, MibIdentifier, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "TimeTicks", "Integer32", "Counter64", "ModuleIdentity", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "MibIdentifier", "NotificationType", "ObjectIdentity")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
hwpaeExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 22))
hwpaeExtMib.setRevisions(('2001-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwpaeExtMib.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: hwpaeExtMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hwpaeExtMib.setOrganization('')
if mibBuilder.loadTexts: hwpaeExtMib.setContactInfo('')
if mibBuilder.loadTexts: hwpaeExtMib.setDescription('this file extends IEEE8021-PAE-MIB(802.1x)')
hwpaeExtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1))
hwdot1xPaeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1))
hwdot1xPaeAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2))
hwdot1xAuthQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1, 1), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xAuthQuietPeriod.setReference(' 9.4.1, quietPeriod')
if mibBuilder.loadTexts: hwdot1xAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
hwdot1xAuthTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1, 2), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xAuthTxPeriod.setReference(' 9.4.1, txPeriod')
if mibBuilder.loadTexts: hwdot1xAuthTxPeriod.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthTxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine.')
hwdot1xAuthSuppTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1, 3), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xAuthSuppTimeout.setReference(' 9.4.1, suppTimeout')
if mibBuilder.loadTexts: hwdot1xAuthSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthSuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine.')
hwdot1xAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1, 4), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xAuthServerTimeout.setReference(' 9.4.1, serverTimeout')
if mibBuilder.loadTexts: hwdot1xAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthServerTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine.')
hwdot1xAuthMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1, 5), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xAuthMaxReq.setReference(' 9.4.1, maxReq')
if mibBuilder.loadTexts: hwdot1xAuthMaxReq.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthMaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine.')
hwdot1xAuthReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1, 6), Unsigned32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xAuthReAuthPeriod.setReference(' 9.4.1, reAuthPeriod')
if mibBuilder.loadTexts: hwdot1xAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
hwdot1xAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2), ("eap", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xAuthMethod.setReference('')
if mibBuilder.loadTexts: hwdot1xAuthMethod.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthMethod.setDescription('The value defines the 802.1X authenticatin method.')
hwdot1xAuthConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1), )
if mibBuilder.loadTexts: hwdot1xAuthConfigExtTable.setReference(' 9.4.1 Authenticator Configuration')
if mibBuilder.loadTexts: hwdot1xAuthConfigExtTable.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthConfigExtTable.setDescription(' table extends dot1xAuthConfigTable')
hwdot1xAuthConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: hwdot1xAuthConfigExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwdot1xAuthConfigExtEntry.setDescription(' The configuration information for an Authenticator PAE.')
hwdot1xpaeportAuthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xpaeportAuthAdminStatus.setReference('')
if mibBuilder.loadTexts: hwdot1xpaeportAuthAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1xpaeportAuthAdminStatus.setDescription('The administrative enable/disable state for Port Access Control in a port.')
hwdot1xpaeportControlledType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("mac", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xpaeportControlledType.setReference('')
if mibBuilder.loadTexts: hwdot1xpaeportControlledType.setStatus('current')
if mibBuilder.loadTexts: hwdot1xpaeportControlledType.setDescription('Port Access Control type , base port access control or base MAC access control')
hwdot1xpaeportMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1, 3), Integer32().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xpaeportMaxUserNum.setReference('')
if mibBuilder.loadTexts: hwdot1xpaeportMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwdot1xpaeportMaxUserNum.setDescription('the max num of online user in a port')
hwdot1xpaeportUserNumNow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1xpaeportUserNumNow.setReference('')
if mibBuilder.loadTexts: hwdot1xpaeportUserNumNow.setStatus('current')
if mibBuilder.loadTexts: hwdot1xpaeportUserNumNow.setDescription('the num of online user in a port now ')
hwdot1xpaeportClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xpaeportClearStatistics.setReference('')
if mibBuilder.loadTexts: hwdot1xpaeportClearStatistics.setStatus('current')
if mibBuilder.loadTexts: hwdot1xpaeportClearStatistics.setDescription('Clear various Statistics viz. ')
hwdot1xpaeportMcastTrigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xpaeportMcastTrigStatus.setReference('')
if mibBuilder.loadTexts: hwdot1xpaeportMcastTrigStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1xpaeportMcastTrigStatus.setDescription('The administrative enable/disable state for sending muticast EAP_REQ/ID packet.')
hwdot1xpaeportHandshakeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1xpaeportHandshakeStatus.setReference('')
if mibBuilder.loadTexts: hwdot1xpaeportHandshakeStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1xpaeportHandshakeStatus.setDescription('The administrative enable/disable state for sending handshake EAP_REQ/ID packet.')
hwdot1xPaeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 0))
supplicantproxycheck = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 0, 1)).setObjects(("HUAWEI-8021PAE-MIB", "proxycheckVlanId"), ("HUAWEI-8021PAE-MIB", "proxycheckPortName"), ("HUAWEI-8021PAE-MIB", "proxycheckMacAddr"), ("HUAWEI-8021PAE-MIB", "proxycheckIpaddr"), ("HUAWEI-8021PAE-MIB", "proxycheckUsrName"))
if mibBuilder.loadTexts: supplicantproxycheck.setStatus('current')
if mibBuilder.loadTexts: supplicantproxycheck.setDescription('')
proxycheckVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 0, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: proxycheckVlanId.setStatus('current')
if mibBuilder.loadTexts: proxycheckVlanId.setDescription('.')
proxycheckPortName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 0, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: proxycheckPortName.setStatus('current')
if mibBuilder.loadTexts: proxycheckPortName.setDescription('.')
proxycheckMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 0, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: proxycheckMacAddr.setStatus('current')
if mibBuilder.loadTexts: proxycheckMacAddr.setDescription('.')
proxycheckIpaddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 0, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: proxycheckIpaddr.setStatus('current')
if mibBuilder.loadTexts: proxycheckIpaddr.setDescription('.')
proxycheckUsrName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 22, 1, 0, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: proxycheckUsrName.setStatus('current')
if mibBuilder.loadTexts: proxycheckUsrName.setDescription('.')
mibBuilder.exportSymbols("HUAWEI-8021PAE-MIB", hwdot1xpaeportMaxUserNum=hwdot1xpaeportMaxUserNum, proxycheckUsrName=proxycheckUsrName, hwpaeExtMib=hwpaeExtMib, hwdot1xPaeAuthenticator=hwdot1xPaeAuthenticator, hwdot1xpaeportUserNumNow=hwdot1xpaeportUserNumNow, hwdot1xpaeportHandshakeStatus=hwdot1xpaeportHandshakeStatus, hwdot1xAuthReAuthPeriod=hwdot1xAuthReAuthPeriod, hwdot1xAuthSuppTimeout=hwdot1xAuthSuppTimeout, hwdot1xAuthMethod=hwdot1xAuthMethod, hwdot1xPaeSystem=hwdot1xPaeSystem, hwdot1xpaeportMcastTrigStatus=hwdot1xpaeportMcastTrigStatus, hwdot1xpaeportControlledType=hwdot1xpaeportControlledType, hwdot1xpaeportClearStatistics=hwdot1xpaeportClearStatistics, hwdot1xAuthTxPeriod=hwdot1xAuthTxPeriod, proxycheckVlanId=proxycheckVlanId, proxycheckIpaddr=proxycheckIpaddr, hwdot1xAuthServerTimeout=hwdot1xAuthServerTimeout, hwpaeExtMibObjects=hwpaeExtMibObjects, hwdot1xAuthMaxReq=hwdot1xAuthMaxReq, hwdot1xAuthConfigExtEntry=hwdot1xAuthConfigExtEntry, proxycheckPortName=proxycheckPortName, proxycheckMacAddr=proxycheckMacAddr, supplicantproxycheck=supplicantproxycheck, hwdot1xPaeTraps=hwdot1xPaeTraps, PYSNMP_MODULE_ID=hwpaeExtMib, hwdot1xAuthQuietPeriod=hwdot1xAuthQuietPeriod, hwdot1xpaeportAuthAdminStatus=hwdot1xpaeportAuthAdminStatus, hwdot1xAuthConfigExtTable=hwdot1xAuthConfigExtTable)
