#
# PySNMP MIB module ELTEX-MES-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-CFM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:01:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
eltMesMng, = mibBuilder.importSymbols("ELTEX-MES", "eltMesMng")
Dot1agCfmMpDirection, = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "Dot1agCfmMpDirection")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
VlanId, VlanIdOrNone = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "VlanIdOrNone")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, TimeTicks, ObjectIdentity, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Bits, MibIdentifier, Unsigned32, Counter32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "ObjectIdentity", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Bits", "MibIdentifier", "Unsigned32", "Counter32", "ModuleIdentity", "Counter64")
TimeInterval, TAddress, TimeStamp, TruthValue, DisplayString, RowStatus, TextualConvention, MacAddress, TDomain = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TAddress", "TimeStamp", "TruthValue", "DisplayString", "RowStatus", "TextualConvention", "MacAddress", "TDomain")
eltMesCfmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774))
eltMesCfmMIB.setRevisions(('2013-03-19 00:00', '2015-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eltMesCfmMIB.setRevisionsDescriptions(('Initial version.', 'Deprecate all objects in this module.',))
if mibBuilder.loadTexts: eltMesCfmMIB.setLastUpdated('201511190000Z')
if mibBuilder.loadTexts: eltMesCfmMIB.setOrganization('Eltex, Ent.')
if mibBuilder.loadTexts: eltMesCfmMIB.setContactInfo('www.eltex.nsk.ru')
if mibBuilder.loadTexts: eltMesCfmMIB.setDescription('Connectivity Fault Management module for managing Eltex devices')
eltMesCfmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 0))
eltMesCfmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1))
eltMesCfmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 2))
eltMesCfmMd = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 1))
eltMesCfmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 2))
eltCfmMdTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 1, 1), )
if mibBuilder.loadTexts: eltCfmMdTable.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMdTable.setDescription('The Maintenance Domain table. Each row in the table represents a physical maintanance domain that corresponds user-like domain name. ')
eltCfmMdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 1, 1, 1), ).setIndexNames((0, "ELTEX-MES-CFM-MIB", "eltCfmMdName"))
if mibBuilder.loadTexts: eltCfmMdEntry.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMdEntry.setDescription('The Maintenance Domain table entry. This entry is not lost upon reboot. It is backed up by stable storage. ')
eltCfmMdName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: eltCfmMdName.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMdName.setDescription('The user-like name of Maintenance Domain. ')
eltCfmMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eltCfmMdIndex.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMdIndex.setDescription('The index to the Maintenance Domain table dot1agCfmMdTable (IEEE8021-CFM-MIB). ')
eltCfmMdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eltCfmMdRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMdRowStatus.setDescription('The status of the row. The writable columns in a row can not be changed if the row is active. All columns MUST have a valid value before a row can be activated. ')
eltCfmMaTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 2, 1), )
if mibBuilder.loadTexts: eltCfmMaTable.setReference('22.2.2')
if mibBuilder.loadTexts: eltCfmMaTable.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMaTable.setDescription('The Maintenance Association table. This is the part of the complete MA table from IEEE8021-CFM-MIB. It implements restrictions in IEEE 802.1ag-2007 22.2.2 upon creating MEPS. Each row in the table represents an MA. An MA is a set of MEPs, each configured with a single service instance. This table uses two indices, first index is the index of the Maintenance Domain table. The second index is the same as the index of the dot1agCfmMaCompEntry for the same MA. The writable objects in this table need to be persistent upon reboot or restart of a device. ')
eltCfmMaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 2, 1, 1), ).setIndexNames((0, "ELTEX-MES-CFM-MIB", "eltCfmMdIndex"), (0, "ELTEX-MES-CFM-MIB", "eltCfmMaIndex"))
if mibBuilder.loadTexts: eltCfmMaEntry.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMaEntry.setDescription('The MA table entry.')
eltCfmMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: eltCfmMaIndex.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMaIndex.setDescription('Index of the MA table. ')
eltCfmMaDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 2, 1, 1, 2), Dot1agCfmMpDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eltCfmMaDirection.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMaDirection.setDescription('Direction in which the all the MPs in current MA face on the Bridge Port. ')
eltCfmMaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 1, 774, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eltCfmMaRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: eltCfmMaRowStatus.setDescription('The status of the row. The writable columns in a row can not be changed if the row is active. All columns MUST have a valid value before a row can be activated. ')
mibBuilder.exportSymbols("ELTEX-MES-CFM-MIB", eltCfmMdName=eltCfmMdName, eltCfmMdRowStatus=eltCfmMdRowStatus, eltCfmMaEntry=eltCfmMaEntry, eltMesCfmNotifications=eltMesCfmNotifications, eltMesCfmMd=eltMesCfmMd, eltCfmMdTable=eltCfmMdTable, eltCfmMdIndex=eltCfmMdIndex, eltMesCfmMa=eltMesCfmMa, eltMesCfmMIB=eltMesCfmMIB, eltCfmMaTable=eltCfmMaTable, eltMesCfmMIBObjects=eltMesCfmMIBObjects, eltCfmMaRowStatus=eltCfmMaRowStatus, eltCfmMdEntry=eltCfmMdEntry, eltCfmMaIndex=eltCfmMaIndex, eltCfmMaDirection=eltCfmMaDirection, PYSNMP_MODULE_ID=eltMesCfmMIB, eltMesCfmConformance=eltMesCfmConformance)
