#
# PySNMP MIB module RBN-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
rbnSubsActiveName, rbnSubsActiveSessionId = mibBuilder.importSymbols("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveName", "rbnSubsActiveSessionId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Unsigned32, ModuleIdentity, Bits, Counter32, Gauge32, MibIdentifier, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "ModuleIdentity", "Bits", "Counter32", "Gauge32", "MibIdentifier", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rbnQosMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 22))
rbnQosMib.setRevisions(('2007-07-30 00:00', '2006-09-12 00:00', '2005-09-26 00:00', '2003-07-18 00:00', '2002-03-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnQosMib.setRevisionsDescriptions(('Added two new tables, rbnQosHierarchicalPolicyStatsTable and rbnQosHierarchicalPClassStatsTable, containing drop counts due to hierarchical policies or policy classes applied to a child circuit. ', 'Added two new tables, rbnQosIntfRLClassStatsTable and rbnQosSubscriberRLClassStatsTable, to monitor interfaces and subscriber circuits that have policing/metering policy class counters enabled. ', 'Added a new table rbnQosSubscriberQueueStatsTable to monitor the qos statistics per transmit queue on a subscriber circuit. ', 'Added a new table rbnQosInterfaceQueueStatsTable to monitor the qos statistics per transmit queue on an interface. ', 'Initial version.',))
if mibBuilder.loadTexts: rbnQosMib.setLastUpdated('200707300000Z')
if mibBuilder.loadTexts: rbnQosMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnQosMib.setContactInfo(' Redback Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 ')
if mibBuilder.loadTexts: rbnQosMib.setDescription('This MIB defines statistical counters that may be used to monitor subscriber circuits and those IF-MIB layers, which support ifPacketGroup, ifHCPacketGroup or ifVHCPacketGroup, that have Quality Of Service enabled. ')
rbnQosMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1))
rbnQosMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2))
class RbnQosPolicyType(TextualConvention, Integer32):
    description = 'QoS policy type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("policing", 1), ("metering", 2), ("edrr", 3), ("mdrr", 4), ("pq", 5), ("atmwfq", 6), ("pwfq", 7))

class RbnQosClassId(TextualConvention, Unsigned32):
    description = 'A unique QoS class identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

rbnQosInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1), )
if mibBuilder.loadTexts: rbnQosInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: rbnQosInterfaceTable.setDescription('This table contains entries for every packet oriented IF-MIB layer for which QoS is enabled.')
rbnQosInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rbnQosInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: rbnQosInterfaceEntry.setDescription('A conceptual row in the rbnQosInterfaceTable.')
rbnQosIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfInOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfInOctets.setDescription('The total number of post-limited octets received on the interface, including framing characters. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfHCInOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfHCInOctets.setDescription('The total number of post-limited octets received on the interface, including framing characters. This object is 64-bit version of rbnQosIfInOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfOutOctets.setDescription('The total number of pre-limited octets transmitted out of the interface, including framing characters. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfHCOutOctets.setDescription('The total number of pre-limited octets transmitted out of the interface, including framing characters. This object is a 64-bit version of rbnQosIfOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfInDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfInDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfInDroppedOctets.setDescription('The total number of received octets that were dropped on the interface, including but not limited to octets dropped due to limiting. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfHCInDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfHCInDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfHCInDroppedOctets.setDescription('The total number of received octets that were dropped on the interface, including but not limited to octets dropped due to limiting. This object is a 64-bit version of rbnQosIfInDroppedOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfOutDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfOutDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfOutDroppedOctets.setDescription('The total number of outbound octets that were dropped on the interface, including but not limited to octets dropped due to limiting. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfHCOutDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfHCOutDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfHCOutDroppedOctets.setDescription('The total number of outbound octets that were dropped on the interface, including but not limited to octets dropped due to limiting. This object is a 64-bit version of rbnQosIfOutDroppedOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosInterfaceQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2), )
if mibBuilder.loadTexts: rbnQosInterfaceQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnQosInterfaceQueueStatsTable.setDescription('This table specifies per transmit queue statistical information. It contains the transmit queue packet/octet counts for each packet oriented IF-MIB layer for which QoS is enabled.')
rbnQosInterfaceQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RBN-QOS-MIB", "rbnQosIfQueueId"))
if mibBuilder.loadTexts: rbnQosInterfaceQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnQosInterfaceQueueStatsEntry.setDescription('A conceptual row in the rbnQosInterfaceQueueStatsTable. Each row contains the transmitted and dropped packets/octets count for each transmit queue on an interface.')
rbnQosIfQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: rbnQosIfQueueId.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueId.setDescription('A unique identifier for a transmit queue within an interface.')
rbnQosIfQueueOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueOutOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueOutOctets.setDescription('The number of octets transmitted out of this queue. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueOutPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueOutPkts.setDescription('The number of packets transmitted out of this queue. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueWredDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueWredDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueWredDroppedOctets.setDescription('The number of octets dropped due to the application of a weighted random early detection algorithm. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueWredDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueWredDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueWredDroppedPkts.setDescription('The number of packets dropped due to the application of a weighted random early detection algorithm. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueTailDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueTailDroppedOctets.setDescription('The number of octets dropped when the total number of packets in this queue was greater than the maximum threshold. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueTailDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueTailDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueTailDroppedPkts.setDescription('The number of packets dropped when the total number of packets in this queue was greater than the maximum threshold. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueHCOutOctets.setDescription('The number of octets transmitted out of this queue. This object is a 64-bit version of rbnQosIfQueueOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueHCOutPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueHCOutPkts.setDescription('The number of packets transmitted out of this queue. This object is a 64-bit version of rbnQosIfQueueOutPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueHCWredDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueHCWredDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueHCWredDroppedOctets.setDescription('The number of octets dropped due to the application of a weighted random early detection algorithm. This object is a 64-bit version of rbnQosIfQueueWredDroppedOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueHCWredDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueHCWredDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueHCWredDroppedPkts.setDescription('The number of packets dropped due to the application of a weighted random early detection algorithm. This object is a 64-bit version of rbnQosIfQueueWredDroppedPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueHCTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueHCTailDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueHCTailDroppedOctets.setDescription('The number of octets dropped when the total number of packets in this queue was greater than the maximum threshold. This object is a 64-bit version of rbnQosIfQueueTailDroppedOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosIfQueueHCTailDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfQueueHCTailDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueHCTailDroppedPkts.setDescription('The number of packets dropped when the total number of packets in this queue was greater than the maximum threshold. This object is a 64-bit version of rbnQosIfQueueTailDroppedPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
rbnQosSubscriberQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3), )
if mibBuilder.loadTexts: rbnQosSubscriberQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubscriberQueueStatsTable.setDescription('This table specifies per transmit queue statistical information. It contains the transmit queue packet/octet counts for each active subscriber session for which QoS queuing policy is enabled.')
rbnQosSubscriberQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveName"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"), (0, "RBN-QOS-MIB", "rbnQosSubsQueueId"))
if mibBuilder.loadTexts: rbnQosSubscriberQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubscriberQueueStatsEntry.setDescription('A conceptual row in the rbnQosSubscriberQueueStatsTable. Each row contains the transmitted and dropped packets/octets count for each transmit queue used on a subscriber circuit.')
rbnQosSubsQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: rbnQosSubsQueueId.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueId.setDescription('A unique identifier for a transmit queue used by the circuit.')
rbnQosSubsQueuePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueuePolicyName.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueuePolicyName.setDescription('The name of the queuing policy the subscriber circuit is using.')
rbnQosSubsQueueOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueOutOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueOutOctets.setDescription('The number of octets transmitted out of this queue. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueOutPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueOutPkts.setDescription('The number of packets transmitted out of this queue. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueWredDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueWredDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueWredDroppedOctets.setDescription('The number of octets dropped due to the application of a weighted random early detection algorithm. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueWredDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueWredDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueWredDroppedPkts.setDescription('The number of packets dropped due to the application of a weighted random early detection algorithm. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueTailDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueTailDroppedOctets.setDescription('The number of octets dropped when the total number of packets in this queue was greater than the maximum threshold. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueTailDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueTailDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueTailDroppedPkts.setDescription('The number of packets dropped when the total number of packets in this queue was greater than the maximum threshold. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueHCOutOctets.setDescription('The number of octets transmitted out of this queue. This object is a 64-bit version of rbnQosSubsQueueOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueHCOutPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueHCOutPkts.setDescription('The number of packets transmitted out of this queue. This object is a 64-bit version of rbnQosSubsQueueOutPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueHCWredDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueHCWredDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueHCWredDroppedOctets.setDescription('The number of octets dropped due to the application of a weighted random early detection algorithm. This object is a 64-bit version of rbnQosSubsQueueWredDroppedOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueHCWredDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueHCWredDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueHCWredDroppedPkts.setDescription('The number of packets dropped due to the application of a weighted random early detection algorithm. This object is a 64-bit version of rbnQosSubsQueueWredDroppedPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueHCTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueHCTailDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueHCTailDroppedOctets.setDescription('The number of octets dropped when the total number of packets in this queue was greater than the maximum threshold. This object is a 64-bit version of rbnQosSubsQueueTailDroppedOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosSubsQueueHCTailDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsQueueHCTailDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsQueueHCTailDroppedPkts.setDescription('The number of packets dropped when the total number of packets in this queue was greater than the maximum threshold. This object is a 64-bit version of rbnQosSubsQueueTailDroppedPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbnQosIntfRLClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4), )
if mibBuilder.loadTexts: rbnQosIntfRLClassStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnQosIntfRLClassStatsTable.setDescription('This table specifies per class statistical information. It contains the class packet/octet counts for each packet oriented IF-MIB layer to which the class-based policing/ metering policy is applied.')
rbnQosIntfRLClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RBN-QOS-MIB", "rbnQosIfRLPolicyType"), (0, "RBN-QOS-MIB", "rbnQosIfRLClassId"))
if mibBuilder.loadTexts: rbnQosIntfRLClassStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnQosIntfRLClassStatsEntry.setDescription('An entry containing statistical information before and after the class-based rate-limit action is taken on the interface.')
rbnQosIfRLPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 1), RbnQosPolicyType())
if mibBuilder.loadTexts: rbnQosIfRLPolicyType.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLPolicyType.setDescription('The type of the rate-limit policy which is applied to the interface.')
rbnQosIfRLClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 2), RbnQosClassId())
if mibBuilder.loadTexts: rbnQosIfRLClassId.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassId.setDescription('A value that uniquely identifies a class defined in the rate-limit policy access list.')
rbnQosIfRLPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLPolicyName.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLPolicyName.setDescription('Name of the rate-limit policy.')
rbnQosIfRLClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassName.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassName.setDescription('Name of the class in the rate-limit policy access list.')
rbnQosIfRLClassConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassConformOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassConformOctets.setDescription('The number of octets that conform to the rate limit set on the interface for which class counters are enabled.')
rbnQosIfRLClassConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassConformPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassConformPkts.setDescription('The number of packets that conform to the rate limit set on the interface for which class counters are enabled.')
rbnQosIfRLClassConformDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassConformDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassConformDroppedOctets.setDescription('The number of octets that were dropped due to the application of a conform action on packets that conform to the rate limit set on the interface for which class counters are enabled.')
rbnQosIfRLClassConformDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassConformDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassConformDroppedPkts.setDescription('The number of packets that were dropped due to the application of a conform action on packets that conform to the rate limit set on the interface for which class counters are enabled.')
rbnQosIfRLClassExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassExceedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassExceedOctets.setDescription('The number of octets that exceed the rate limit set on the interface for which class counters are enabled.')
rbnQosIfRLClassExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassExceedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassExceedPkts.setDescription('The number of packets that exceed the rate limit set on the interface.')
rbnQosIfRLClassExceedDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassExceedDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassExceedDroppedOctets.setDescription('The number of octets that were dropped due to the application of an exceed action on packets that exceed the rate limit set on the interface for which class counters are enabled.')
rbnQosIfRLClassExceedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassExceedDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassExceedDroppedPkts.setDescription('The number of packets that were dropped due to the application of an exceed action on packets that exceed the rate limit set on the interface for which class counters are enabled.')
rbnQosIfRLClassViolateOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassViolateOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassViolateOctets.setDescription('The number of octets that violate the normal and maximum burst sizes on the interface for which class counters are enabled.')
rbnQosIfRLClassViolatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassViolatePkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassViolatePkts.setDescription('The number of packets that violate the normal and maximum burst sizes on the interface for which class counters are enabled.')
rbnQosIfRLClassViolateDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassViolateDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassViolateDroppedOctets.setDescription('The number of octets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the interface for which class counters are enabled.')
rbnQosIfRLClassViolateDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosIfRLClassViolateDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassViolateDroppedPkts.setDescription('The number of packets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the interface for which class counters are enabled.')
rbnQosSubscriberRLClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5), )
if mibBuilder.loadTexts: rbnQosSubscriberRLClassStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubscriberRLClassStatsTable.setDescription('This table specifies per class statistical information on the subscriber circuits. It contains the class packet/octet counts for each active subscriber session to which the class-based policing/metering policy is applied when the counters are enabled for the class. All MIB objects defined in the table are viewed within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnQosSubscriberRLClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveName"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"), (0, "RBN-QOS-MIB", "rbnQosSubsRLPolicyType"), (0, "RBN-QOS-MIB", "rbnQosSubsRLClassId"))
if mibBuilder.loadTexts: rbnQosSubscriberRLClassStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubscriberRLClassStatsEntry.setDescription('An entry containing statistical information before and after the class-based rate-limit action is taken on the subscriber session.')
rbnQosSubsRLPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 1), RbnQosPolicyType())
if mibBuilder.loadTexts: rbnQosSubsRLPolicyType.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLPolicyType.setDescription('The type of the rate-limit policy which is applied to the circuit.')
rbnQosSubsRLClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 2), RbnQosClassId())
if mibBuilder.loadTexts: rbnQosSubsRLClassId.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassId.setDescription('A value that uniquely identifies a class defined in the rate-limit policy access list.')
rbnQosSubsRLPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLPolicyName.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLPolicyName.setDescription('Name of the rate-limit policy.')
rbnQosSubsRLClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassName.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassName.setDescription('Name of the class in the rate-limit policy access list.')
rbnQosSubsRLClassConformOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassConformOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassConformOctets.setDescription('The number of octets that conform to the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassConformPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassConformPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassConformPkts.setDescription('The number of packets that conform to the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassConformDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassConformDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassConformDroppedOctets.setDescription('The number of octets that were dropped due to the application of a conform action on packets that conform to the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassConformDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassConformDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassConformDroppedPkts.setDescription('The number of packets that were dropped due to the application of a conform action on packets that conform to the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassExceedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedOctets.setDescription('The number of octets that exceed the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassExceedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedPkts.setDescription('The number of packets that exceed the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassExceedDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedDroppedOctets.setDescription('The number of octets that were dropped due to the application of an exceed action on packets that exceed the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassExceedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassExceedDroppedPkts.setDescription('The number of packets that were dropped due to the application of an exceed action on packets that exceed the rate limit set on the subscriber circuit.')
rbnQosSubsRLClassViolateOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassViolateOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassViolateOctets.setDescription('The number of octets that violate the normal and maximum burst sizes on the subscriber circuit.')
rbnQosSubsRLClassViolatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassViolatePkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassViolatePkts.setDescription('The number of packets that violate the normal and maximum burst sizes on the subscriber circuit.')
rbnQosSubsRLClassViolateDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassViolateDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassViolateDroppedOctets.setDescription('The number of octets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the subscriber circuit.')
rbnQosSubsRLClassViolateDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosSubsRLClassViolateDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubsRLClassViolateDroppedPkts.setDescription('The number of packets that were dropped due to the application of a violate action on packets that violate the normal and maximum burst sizes on the subscriber circuit.')
rbnQosHierarchicalPolicyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 6), )
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyStatsTable.setDescription('A table of drop counters for child circuits of hierarchical qos policies applied to the child.')
rbnQosHierarchicalPolicyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RBN-QOS-MIB", "rbnQosHierarchicalPolicyType"))
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyStatsEntry.setDescription('An entry containing the drop counters for one child circuit of hierarchical qos policies applied to the child.')
rbnQosHierarchicalPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 6, 1, 1), RbnQosPolicyType())
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyType.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyType.setDescription('The type of the hierarchical parent rate-limit policy which is applied to the child circuit.')
rbnQosHierarchicalPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 6, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyName.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyName.setDescription('Name of the hierarchical parent policy applied to the child circuit.')
rbnQosHierarchicalPolicyDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyDroppedOctets.setDescription("The number of octets that were dropped due to the hierarchical parent's policy applied to the child circuit.")
rbnQosHierarchicalPolicyDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyDroppedPkts.setDescription("The number of packets that dropped due to the hierarchical parent's policy applied to the child circuit.")
rbnQosHierarchicalPClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 7), )
if mibBuilder.loadTexts: rbnQosHierarchicalPClassStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPClassStatsTable.setDescription('A table of drop counters for child circuits of hierarchical qos policy classes applied to the child.')
rbnQosHierarchicalPClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RBN-QOS-MIB", "rbnQosHierarchicalPolicyType"), (0, "RBN-QOS-MIB", "rbnQosHierarchicalPClassId"))
if mibBuilder.loadTexts: rbnQosHierarchicalPClassStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPClassStatsEntry.setDescription('An entry containing the drop counters for one child circuit of hierarchical qos policy classes applied to the child.')
rbnQosHierarchicalPClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 7, 1, 1), RbnQosClassId())
if mibBuilder.loadTexts: rbnQosHierarchicalPClassId.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPClassId.setDescription('The class id of the hierarchical parent policy class which is applied to the child circuit.')
rbnQosHierarchicalPClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosHierarchicalPClassName.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPClassName.setDescription('Name of the hierarchical parent policy class which is applied to the child circuit.')
rbnQosHierarchicalPClassDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosHierarchicalPClassDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPClassDroppedOctets.setDescription("The number of octets that were dropped due to the hierarchical parent's policy class applied to the child circuit.")
rbnQosHierarchicalPClassDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 22, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnQosHierarchicalPClassDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPClassDroppedPkts.setDescription("The number of packets that dropped due to the hierarchical parent's policy class applied to the child circuit.")
rbnQosCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 1))
rbnQosGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 2))
rbnQosCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 1, 1)).setObjects(("RBN-QOS-MIB", "rbnQosIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosCompliance = rbnQosCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: rbnQosCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback QOS MIB.')
rbnQosCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 1, 2)).setObjects(("RBN-QOS-MIB", "rbnQosIfGroup"), ("RBN-QOS-MIB", "rbnQosIfQueueGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosCompliance2 = rbnQosCompliance2.setStatus('current')
if mibBuilder.loadTexts: rbnQosCompliance2.setDescription('The compliance statement for SNMP entities which implement the Redback QOS MIB.')
rbnQosCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 1, 3)).setObjects(("RBN-QOS-MIB", "rbnQosIfGroup"), ("RBN-QOS-MIB", "rbnQosIfQueueGroup"), ("RBN-QOS-MIB", "rbnQosSubscriberQueueGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosCompliance3 = rbnQosCompliance3.setStatus('current')
if mibBuilder.loadTexts: rbnQosCompliance3.setDescription('The compliance statement for SNMP entities which implement the Redback QOS MIB.')
rbnQosCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 1, 4)).setObjects(("RBN-QOS-MIB", "rbnQosIfGroup"), ("RBN-QOS-MIB", "rbnQosIfQueueGroup"), ("RBN-QOS-MIB", "rbnQosSubscriberQueueGroup"), ("RBN-QOS-MIB", "rbnQosIfRLClassStatsGroup"), ("RBN-QOS-MIB", "rbnQosSubscriberRLClassStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosCompliance4 = rbnQosCompliance4.setStatus('current')
if mibBuilder.loadTexts: rbnQosCompliance4.setDescription('The compliance statement for SNMP entities which implement the Redback QOS MIB.')
rbnQosCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 1, 5)).setObjects(("RBN-QOS-MIB", "rbnQosIfGroup"), ("RBN-QOS-MIB", "rbnQosIfQueueGroup"), ("RBN-QOS-MIB", "rbnQosSubscriberQueueGroup"), ("RBN-QOS-MIB", "rbnQosIfRLClassStatsGroup"), ("RBN-QOS-MIB", "rbnQosSubscriberRLClassStatsGroup"), ("RBN-QOS-MIB", "rbnQosHierarchicalPolicyStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosCompliance5 = rbnQosCompliance5.setStatus('current')
if mibBuilder.loadTexts: rbnQosCompliance5.setDescription('The compliance statement for SNMP entities which implement the Redback QOS MIB.')
rbnQosIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 2, 1)).setObjects(("RBN-QOS-MIB", "rbnQosIfInOctets"), ("RBN-QOS-MIB", "rbnQosIfHCInOctets"), ("RBN-QOS-MIB", "rbnQosIfOutOctets"), ("RBN-QOS-MIB", "rbnQosIfHCOutOctets"), ("RBN-QOS-MIB", "rbnQosIfInDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfHCInDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfOutDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfHCOutDroppedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosIfGroup = rbnQosIfGroup.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfGroup.setDescription('The collection of objects which allow monitoring of interfaces with QoS enabled.')
rbnQosIfQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 2, 2)).setObjects(("RBN-QOS-MIB", "rbnQosIfQueueOutOctets"), ("RBN-QOS-MIB", "rbnQosIfQueueHCOutOctets"), ("RBN-QOS-MIB", "rbnQosIfQueueOutPkts"), ("RBN-QOS-MIB", "rbnQosIfQueueHCOutPkts"), ("RBN-QOS-MIB", "rbnQosIfQueueWredDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfQueueHCWredDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfQueueWredDroppedPkts"), ("RBN-QOS-MIB", "rbnQosIfQueueHCWredDroppedPkts"), ("RBN-QOS-MIB", "rbnQosIfQueueTailDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfQueueHCTailDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfQueueTailDroppedPkts"), ("RBN-QOS-MIB", "rbnQosIfQueueHCTailDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosIfQueueGroup = rbnQosIfQueueGroup.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfQueueGroup.setDescription('The collection of objects which allow monitoring of transmit queues on interfaces with QoS enabled.')
rbnQosSubscriberQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 2, 3)).setObjects(("RBN-QOS-MIB", "rbnQosSubsQueuePolicyName"), ("RBN-QOS-MIB", "rbnQosSubsQueueOutOctets"), ("RBN-QOS-MIB", "rbnQosSubsQueueOutPkts"), ("RBN-QOS-MIB", "rbnQosSubsQueueWredDroppedOctets"), ("RBN-QOS-MIB", "rbnQosSubsQueueWredDroppedPkts"), ("RBN-QOS-MIB", "rbnQosSubsQueueTailDroppedOctets"), ("RBN-QOS-MIB", "rbnQosSubsQueueTailDroppedPkts"), ("RBN-QOS-MIB", "rbnQosSubsQueueHCOutOctets"), ("RBN-QOS-MIB", "rbnQosSubsQueueHCOutPkts"), ("RBN-QOS-MIB", "rbnQosSubsQueueHCWredDroppedOctets"), ("RBN-QOS-MIB", "rbnQosSubsQueueHCWredDroppedPkts"), ("RBN-QOS-MIB", "rbnQosSubsQueueHCTailDroppedOctets"), ("RBN-QOS-MIB", "rbnQosSubsQueueHCTailDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosSubscriberQueueGroup = rbnQosSubscriberQueueGroup.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubscriberQueueGroup.setDescription('The collection of objects which allow monitoring of transmit queues on subscriber circuits with QoS queuing enabled.')
rbnQosIfRLClassStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 2, 4)).setObjects(("RBN-QOS-MIB", "rbnQosIfRLPolicyName"), ("RBN-QOS-MIB", "rbnQosIfRLClassName"), ("RBN-QOS-MIB", "rbnQosIfRLClassConformOctets"), ("RBN-QOS-MIB", "rbnQosIfRLClassConformPkts"), ("RBN-QOS-MIB", "rbnQosIfRLClassConformDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfRLClassConformDroppedPkts"), ("RBN-QOS-MIB", "rbnQosIfRLClassExceedOctets"), ("RBN-QOS-MIB", "rbnQosIfRLClassExceedPkts"), ("RBN-QOS-MIB", "rbnQosIfRLClassExceedDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfRLClassExceedDroppedPkts"), ("RBN-QOS-MIB", "rbnQosIfRLClassViolateOctets"), ("RBN-QOS-MIB", "rbnQosIfRLClassViolatePkts"), ("RBN-QOS-MIB", "rbnQosIfRLClassViolateDroppedOctets"), ("RBN-QOS-MIB", "rbnQosIfRLClassViolateDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosIfRLClassStatsGroup = rbnQosIfRLClassStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnQosIfRLClassStatsGroup.setDescription('The collection of objects which allow monitoring interfaces that have class-based policing/metering policies enabled.')
rbnQosSubscriberRLClassStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 2, 5)).setObjects(("RBN-QOS-MIB", "rbnQosSubsRLPolicyName"), ("RBN-QOS-MIB", "rbnQosSubsRLClassName"), ("RBN-QOS-MIB", "rbnQosSubsRLClassConformOctets"), ("RBN-QOS-MIB", "rbnQosSubsRLClassConformPkts"), ("RBN-QOS-MIB", "rbnQosSubsRLClassConformDroppedOctets"), ("RBN-QOS-MIB", "rbnQosSubsRLClassConformDroppedPkts"), ("RBN-QOS-MIB", "rbnQosSubsRLClassExceedOctets"), ("RBN-QOS-MIB", "rbnQosSubsRLClassExceedPkts"), ("RBN-QOS-MIB", "rbnQosSubsRLClassExceedDroppedOctets"), ("RBN-QOS-MIB", "rbnQosSubsRLClassExceedDroppedPkts"), ("RBN-QOS-MIB", "rbnQosSubsRLClassViolateOctets"), ("RBN-QOS-MIB", "rbnQosSubsRLClassViolatePkts"), ("RBN-QOS-MIB", "rbnQosSubsRLClassViolateDroppedOctets"), ("RBN-QOS-MIB", "rbnQosSubsRLClassViolateDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosSubscriberRLClassStatsGroup = rbnQosSubscriberRLClassStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnQosSubscriberRLClassStatsGroup.setDescription('The collection of objects which allow monitoring subscriber circuits that have class-based policing/metering policies enabled.')
rbnQosHierarchicalPolicyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 22, 2, 2, 6)).setObjects(("RBN-QOS-MIB", "rbnQosHierarchicalPolicyName"), ("RBN-QOS-MIB", "rbnQosHierarchicalPolicyDroppedOctets"), ("RBN-QOS-MIB", "rbnQosHierarchicalPolicyDroppedPkts"), ("RBN-QOS-MIB", "rbnQosHierarchicalPClassName"), ("RBN-QOS-MIB", "rbnQosHierarchicalPClassDroppedOctets"), ("RBN-QOS-MIB", "rbnQosHierarchicalPClassDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnQosHierarchicalPolicyStatsGroup = rbnQosHierarchicalPolicyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnQosHierarchicalPolicyStatsGroup.setDescription('The collection of objects which allow monitoring circuits that have hierarchical policies enabled.')
mibBuilder.exportSymbols("RBN-QOS-MIB", rbnQosIfRLClassViolateOctets=rbnQosIfRLClassViolateOctets, rbnQosHierarchicalPClassStatsEntry=rbnQosHierarchicalPClassStatsEntry, rbnQosSubsQueueId=rbnQosSubsQueueId, rbnQosIfQueueHCWredDroppedOctets=rbnQosIfQueueHCWredDroppedOctets, rbnQosSubsQueuePolicyName=rbnQosSubsQueuePolicyName, rbnQosIfQueueTailDroppedPkts=rbnQosIfQueueTailDroppedPkts, rbnQosIfRLClassExceedDroppedOctets=rbnQosIfRLClassExceedDroppedOctets, rbnQosHierarchicalPClassName=rbnQosHierarchicalPClassName, RbnQosClassId=RbnQosClassId, rbnQosIfQueueTailDroppedOctets=rbnQosIfQueueTailDroppedOctets, rbnQosSubsQueueWredDroppedOctets=rbnQosSubsQueueWredDroppedOctets, rbnQosIfInDroppedOctets=rbnQosIfInDroppedOctets, rbnQosCompliance5=rbnQosCompliance5, rbnQosSubsRLPolicyType=rbnQosSubsRLPolicyType, rbnQosCompliance=rbnQosCompliance, rbnQosSubsRLClassConformDroppedOctets=rbnQosSubsRLClassConformDroppedOctets, rbnQosSubsRLClassExceedDroppedPkts=rbnQosSubsRLClassExceedDroppedPkts, rbnQosInterfaceTable=rbnQosInterfaceTable, rbnQosSubsRLClassConformPkts=rbnQosSubsRLClassConformPkts, rbnQosMib=rbnQosMib, rbnQosIfQueueHCTailDroppedOctets=rbnQosIfQueueHCTailDroppedOctets, rbnQosIntfRLClassStatsTable=rbnQosIntfRLClassStatsTable, rbnQosSubscriberRLClassStatsTable=rbnQosSubscriberRLClassStatsTable, rbnQosSubsRLClassId=rbnQosSubsRLClassId, rbnQosSubsRLClassConformDroppedPkts=rbnQosSubsRLClassConformDroppedPkts, rbnQosHierarchicalPolicyName=rbnQosHierarchicalPolicyName, rbnQosHierarchicalPClassDroppedPkts=rbnQosHierarchicalPClassDroppedPkts, rbnQosSubsQueueWredDroppedPkts=rbnQosSubsQueueWredDroppedPkts, rbnQosIfRLPolicyName=rbnQosIfRLPolicyName, rbnQosInterfaceQueueStatsEntry=rbnQosInterfaceQueueStatsEntry, rbnQosIfRLClassViolatePkts=rbnQosIfRLClassViolatePkts, rbnQosIfRLClassStatsGroup=rbnQosIfRLClassStatsGroup, rbnQosSubsRLClassExceedOctets=rbnQosSubsRLClassExceedOctets, rbnQosIfQueueHCTailDroppedPkts=rbnQosIfQueueHCTailDroppedPkts, rbnQosIfRLClassViolateDroppedOctets=rbnQosIfRLClassViolateDroppedOctets, rbnQosIfRLClassViolateDroppedPkts=rbnQosIfRLClassViolateDroppedPkts, rbnQosHierarchicalPolicyType=rbnQosHierarchicalPolicyType, rbnQosIfQueueGroup=rbnQosIfQueueGroup, rbnQosHierarchicalPolicyStatsEntry=rbnQosHierarchicalPolicyStatsEntry, rbnQosMibObjects=rbnQosMibObjects, rbnQosSubsRLClassViolateDroppedOctets=rbnQosSubsRLClassViolateDroppedOctets, rbnQosSubsRLClassExceedDroppedOctets=rbnQosSubsRLClassExceedDroppedOctets, rbnQosIfHCOutDroppedOctets=rbnQosIfHCOutDroppedOctets, rbnQosCompliance2=rbnQosCompliance2, rbnQosSubscriberRLClassStatsGroup=rbnQosSubscriberRLClassStatsGroup, rbnQosIfHCInDroppedOctets=rbnQosIfHCInDroppedOctets, rbnQosInterfaceQueueStatsTable=rbnQosInterfaceQueueStatsTable, rbnQosIntfRLClassStatsEntry=rbnQosIntfRLClassStatsEntry, rbnQosSubscriberQueueGroup=rbnQosSubscriberQueueGroup, rbnQosSubsQueueTailDroppedOctets=rbnQosSubsQueueTailDroppedOctets, rbnQosIfQueueId=rbnQosIfQueueId, rbnQosIfInOctets=rbnQosIfInOctets, rbnQosSubsQueueHCOutOctets=rbnQosSubsQueueHCOutOctets, rbnQosSubsRLClassViolateDroppedPkts=rbnQosSubsRLClassViolateDroppedPkts, rbnQosHierarchicalPClassStatsTable=rbnQosHierarchicalPClassStatsTable, rbnQosIfQueueWredDroppedPkts=rbnQosIfQueueWredDroppedPkts, rbnQosSubsQueueHCWredDroppedOctets=rbnQosSubsQueueHCWredDroppedOctets, rbnQosHierarchicalPClassId=rbnQosHierarchicalPClassId, rbnQosIfRLClassExceedOctets=rbnQosIfRLClassExceedOctets, rbnQosIfHCOutOctets=rbnQosIfHCOutOctets, rbnQosIfGroup=rbnQosIfGroup, rbnQosHierarchicalPolicyStatsGroup=rbnQosHierarchicalPolicyStatsGroup, rbnQosCompliance3=rbnQosCompliance3, rbnQosIfRLClassConformDroppedOctets=rbnQosIfRLClassConformDroppedOctets, rbnQosSubscriberQueueStatsTable=rbnQosSubscriberQueueStatsTable, rbnQosSubscriberRLClassStatsEntry=rbnQosSubscriberRLClassStatsEntry, rbnQosIfRLClassName=rbnQosIfRLClassName, rbnQosSubsQueueOutOctets=rbnQosSubsQueueOutOctets, rbnQosIfRLClassExceedPkts=rbnQosIfRLClassExceedPkts, PYSNMP_MODULE_ID=rbnQosMib, rbnQosSubsRLClassConformOctets=rbnQosSubsRLClassConformOctets, rbnQosInterfaceEntry=rbnQosInterfaceEntry, rbnQosSubsRLClassViolateOctets=rbnQosSubsRLClassViolateOctets, rbnQosCompliances=rbnQosCompliances, rbnQosSubsQueueTailDroppedPkts=rbnQosSubsQueueTailDroppedPkts, rbnQosIfOutOctets=rbnQosIfOutOctets, rbnQosIfRLClassConformDroppedPkts=rbnQosIfRLClassConformDroppedPkts, rbnQosSubsQueueHCTailDroppedPkts=rbnQosSubsQueueHCTailDroppedPkts, rbnQosIfHCInOctets=rbnQosIfHCInOctets, rbnQosSubsRLClassExceedPkts=rbnQosSubsRLClassExceedPkts, rbnQosIfQueueOutPkts=rbnQosIfQueueOutPkts, rbnQosIfQueueHCOutOctets=rbnQosIfQueueHCOutOctets, rbnQosSubsQueueHCTailDroppedOctets=rbnQosSubsQueueHCTailDroppedOctets, rbnQosMibConformance=rbnQosMibConformance, rbnQosIfRLClassExceedDroppedPkts=rbnQosIfRLClassExceedDroppedPkts, rbnQosSubsRLClassViolatePkts=rbnQosSubsRLClassViolatePkts, rbnQosIfOutDroppedOctets=rbnQosIfOutDroppedOctets, rbnQosSubsQueueHCWredDroppedPkts=rbnQosSubsQueueHCWredDroppedPkts, rbnQosCompliance4=rbnQosCompliance4, rbnQosIfQueueOutOctets=rbnQosIfQueueOutOctets, rbnQosSubscriberQueueStatsEntry=rbnQosSubscriberQueueStatsEntry, rbnQosIfRLPolicyType=rbnQosIfRLPolicyType, rbnQosGroups=rbnQosGroups, rbnQosIfQueueHCOutPkts=rbnQosIfQueueHCOutPkts, RbnQosPolicyType=RbnQosPolicyType, rbnQosSubsQueueHCOutPkts=rbnQosSubsQueueHCOutPkts, rbnQosIfQueueWredDroppedOctets=rbnQosIfQueueWredDroppedOctets, rbnQosIfQueueHCWredDroppedPkts=rbnQosIfQueueHCWredDroppedPkts, rbnQosSubsRLPolicyName=rbnQosSubsRLPolicyName, rbnQosHierarchicalPolicyDroppedOctets=rbnQosHierarchicalPolicyDroppedOctets, rbnQosIfRLClassConformOctets=rbnQosIfRLClassConformOctets, rbnQosHierarchicalPolicyDroppedPkts=rbnQosHierarchicalPolicyDroppedPkts, rbnQosHierarchicalPolicyStatsTable=rbnQosHierarchicalPolicyStatsTable, rbnQosIfRLClassId=rbnQosIfRLClassId, rbnQosSubsQueueOutPkts=rbnQosSubsQueueOutPkts, rbnQosHierarchicalPClassDroppedOctets=rbnQosHierarchicalPClassDroppedOctets, rbnQosIfRLClassConformPkts=rbnQosIfRLClassConformPkts, rbnQosSubsRLClassName=rbnQosSubsRLClassName)
