#
# PySNMP MIB module CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SyslogSeverity, = mibBuilder.importSymbols("CISCO-SYSLOG-MIB", "SyslogSeverity")
CiscoPort, = mibBuilder.importSymbols("CISCO-TC", "CiscoPort")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Counter64, ObjectIdentity, Bits, IpAddress, Integer32, ModuleIdentity, Counter32, MibIdentifier, iso, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ObjectIdentity", "Bits", "IpAddress", "Integer32", "ModuleIdentity", "Counter32", "MibIdentifier", "iso", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
ciscoTelepresenceExchangeSystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 758))
ciscoTelepresenceExchangeSystemMIB.setRevisions(('2011-01-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIB.setRevisionsDescriptions(('Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIB.setLastUpdated('201101130000Z')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-txbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIB.setDescription("The main purpose of this MIB is to provide product component level configuration, status, statistics, events, and alarm notifications for the Cisco TelePresence Exchange System (CTX System). A network management entity can use this MIB to: - Discover cluster nodes - Discover resources and their configurations - Monitor status of all cluster nodes - Monitor status of resources - Monitor configuration status - Monitor license status - Monitor backup process status - Monitor scheduling allocation failures and port usage statistics - Monitor product level error events - Receive real time notifications for status change and error ********************************* System Overview ********************************* Cisco TelePresence Exchange System (CTX System) is a turnkey solution tailored to service providers who want to offer premium video collaboration services and TelePresence as a service to enterprise customers. The CTX System solution preserves the full TelePresence experience across enterprise and service provider boundaries, integrates with third party SD/HD video technology, and maximizes service and network value via tight integration with other Cisco video and unified collaboration products. The Cisco TelePresence Exchange is comprised of a variety of components in order to deliver a highly integrated video service platform that will meet the needs of the service provider. At the heart of the exchange is what we refer to as the core components that are standards based platforms containing custom software to deliver the majority of the systems services and functions. These core components are the Cisco TelePresence Exchange System. ********************************* System Components ********************************* The core components are broken down into three application functional areas; administration, call processing, and persistent data storage. Each application is run on a dedicated server. Each dedicated server has a backup server. For each CTX System there are six servers. The collection of servers are considered a cluster and the servers are considered nodes within the cluster. The below diagram illustrates the CTX System: Cisco TelePresence Exchange System (CTX System) /--------------------------------------------\\ | --------------- --------------- | | | Admin 1 | <----> | Admin 2 | | | --------------- --------------- | | | | | | --------------- --------------- | | | Call Engine 1 | <----> | Call Engine 2 | | | --------------- --------------- | | | | | | --------------- --------------- | | | Database 1 | <----> | Database 2 | | | --------------- --------------- | \\--------------------------------------------/ The overall system requires a number of other Cisco platforms to deliver an end-to-end solution. These other platforms are configured in the CTX System as resources. ********************************* Implementation ********************************* The administration servers provide management interfaces for the CTX System cluster nodes and for the resources configured. This MIB consolidates the configuration, status, alarms, errors, and statistics for all cluster nodes. Therefore this MIB will only be implemented on the admin servers. Each admin server can be polled independently or via a virtual IP address. Each admin server functions in an active/active mode with the same set of information. Hardware and operating system level information, such as CPU, memory, power supplies, fans, etc. remain accessible in hardware and operating system specific MIBS, such as HOST-RESOURCES-MIB, IF-MIB, ... ********************************* Configuration Tables and Linking ********************************* Configuration table hierarchal structure is as follows: ___ |- Cluster Nodes - CTX System devices | |- Service Providers - Logical grouping |-- Regions - Logical grouping | | | |--- Resources - General configs for resources | | that are common to all resources | | | |--- SIP Configs - SIP configurations such as | | SIP IP, port, and protocol | | | |--- Meeting Configs - Meeting configurations | | such as Min/Max meeting ID's | | | |--- Capacity Configs - Media port counts, | | large meeting support, etc. | |-- Organizations All configuration table entries have a globally unique key. No two keys will be the same within or across configuration tables. The intent is to allow network management applications to use these unique keys to link or join associated tables together. Configuration tables that have an association to another table will contain a key reference object. Multiple associations may exist, so the key reference will contain a number in the object name. This number indicates only that there are multiple associations. The reference key object name will have the appended syntax 'KeyRef1'. Optionally there maybe 'KeyRef2', etc. when multiple associations exist. Example of linking associated tables: REGION TABLE Entry: ctxRegionKey.1 = STRING: 8a960c882aa5cd64012aa5d3963b0028 ctxRegionName.1 = STRING: San Francisco ctxRegionDescr.1 = STRING: null ctxRegionServiceProviderKeyRef1.1 = STRING: 8a960c882aa5cd64012aa5d144730017 RESOURCE TABLE Entry: ctxResourceKey.1 = STRING: 8a960c882aca4db8012aca9bbdb401dd ctxResourceName.1 = STRING: abc-cuvcm ctxResourceDescr.1 = STRING: abc-cuvcm ctxResourceMgmtIPType.1 = INTEGER: ipv4(1) ctxResourceMgmtIPAddr.1 = STRING: 0.0.0.0 ctxResourceDeviceType.1 = INTEGER: cuvcm(9) ctxResourceRegionKeyRef1.1 = STRING: 8a960c882aa5cd64012aa5d3963b0028 For the above entry we can see that there is a ctxResourceRegionKeyRef1 that has the ctxRegionKey value for region 'San Francisco' . Therefore resource 'abc-cuvcm' is associated to region 'San Francisco' ********************************* Glossary ********************************* CTX System : Cisco TelePresence Exchange System Service Provider : A service provider is configured in the CTX System and serves as a logical grouping of configuration objects. Region : A region is defined as a set of 'like' resources in terms of network latency, jitter, quality of service, etc. Normally a region is a geographic area such as Americas, Europe, or Asia Pacific, but a region can be a smaller set of like resources such as East and West regions. Resource : A resource is server or network device that the CTX System includes in configuration to provide call signaling, media services, scheduling, or other function. Cluster Node: A cluster node is a server within the CTX System, such as admin server, call engine server, or database server. SIP Protocol: SIP protocol is the transport protocol used to exchange messages between user agents. The protocols are described in RFC3261. Port : Port is the media session port allocation, also referred to as screen E.164 : E.164 is an ITU-T recommendation for telephone numbers. Reference link http://www.itu.int/rec/T-REC-E.164/en Endpoint: End system TelePresence device CUCM : Cisco Unified Communications Manager SBC : Session Border Controller such as ASR-1000 CUBE(sp) CTMS : Cisco TelePresence Multipoint Switch CTS : Cisco TelePresence System endpoint CTS-MAN : Cisco TelePresence Manager CUVCM : Cisco Unified Videoconferencing Manager Media2 : Tandberg MSE 8510 blade TPS : Tandberg MSE 8710 blade VCS : Tandberg Video Communication Server TMS : Tandberg Management Suite XMLRPC : XML Remote Procedure Call protocol")
class CtxKeyId(TextualConvention, OctetString):
    description = 'A key id is a globally unique key across all database tables and entries. This key will persist upon restart and reboot. This key is generated by the CTX System when the entry is added to the database. The format of the key is a HEX string value. The value can be up to 32 hexadecimal characters.'
    status = 'current'
    displayHint = '4x-'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class CtxIndex(TextualConvention, Unsigned32):
    description = 'An arbitrary (system-assigned) index for each instance. If MIB index persistence is configured via the CTX System CLI interface, this index will persist upon restart and reboot. When an entry is removed, this index will be cleared but will not be reused unless MIB index persistence is disabled or if persistence cache is cleared via the CTX System CLI interface.'
    status = 'current'
    displayHint = 'd'

class CtxPorts(TextualConvention, Unsigned32):
    description = 'A port is the media session port allocation for a resource. It is commonly referred to as a media video RTP stream for a multipoint switch and an audio RTP steam for ISDN/IVR. It is also known as a segment or screen. A Cisco TelePresence System 1000 uses one port while a Cisco TelePresence System 3000 uses 3 ports, one for each video screen.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class CtxClusterNodeTypes(TextualConvention, Integer32):
    description = 'The types of cluster nodes. admin(1) - CTX System administrative server engine(2) - CTX System call processing engine server db(3) - CTX System database server'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("admin", 1), ("engine", 2), ("db", 3))

class CtxHealthStates(TextualConvention, Integer32):
    description = 'The CTX System high level status. normal(1) - Normal operational state warning(2) - The system is in a warning state. A warning state needs attention, but is not affecting the system or solution from functioning. A warning state could be generated a redundant server is down or if a configured resource is down but is not affecting current call processing. error(3) - Error state indicates that the system is not fully usable and that immediate attention is required. Example of a error state is if both call engine servers are down.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("error", 3))

class CtxResourceOperState(TextualConvention, Integer32):
    description = 'The resource operational state. The operational state of a resource is determined by the CTX system configuration and proactive health probe monitoring of the resource. An example of a health check probe is a SIP Options Ping or XMLRPC ping. operational(1) - Resource is fully operational and is successfully passing health probe validation checks. disabled(2) - Resource has been administratively disabled. failed(3) - Resource has failed to respond to consecutive health check probes or has failed due to an application failure on the resource. IP connectivity failures are indicated by the unreachable state. maintenance(4) - Resource is currently in maintenance mode. In this state, the resource may be up or down. Probe monitoring is not active on a device in this state. pending(5) - Resource is currently pending a state transition. When a device is added and fully configured, the device will be put into pending state till the health check probes have successfully passed. When passed the state will change to either operational or failed. A device that is put into maintenance mode will go into pending state till all calls are cleared from that device. standby(6) - A resource device in this state is considered fully operational, but is currently the standby server/resource. unreachable(7) - A resource will be in this state if the IP connectivity to the device is not functioning.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("operational", 1), ("disabled", 2), ("failed", 3), ("maintenance", 4), ("pending", 5), ("standby", 6), ("unreachable", 7))

class CtxSIPProtocolType(TextualConvention, Integer32):
    description = 'The SIP transport protocol in use. tcp(1) - connection oriented transport udp(2) - connectionless transport tls(3) - Secured connection oriented transport'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tcp", 1), ("udp", 2), ("tls", 3))

class CtxResourceType(TextualConvention, Integer32):
    description = 'The resource device object type. ctms(1) - Cisco TelePresence Multipoint Switch ivr(2) - Interactive Voice Response sbc(3) - Session Border Controller sip(4) - Generic SIP user agent ctsmanager(5) - CTS Manager mseTps(6) - Tandberg MSE 8710 blade mseMedia2(7) - Tandberg MSG 8510 blade isdn(8) - ISDN PSTN gateway cuvcm(9) - Cisco Unified Videoconferencing Manager cucm(10) - Cisco Unified Communications Manager vcs(11) - Tandberg Video Communication Server tms(12) - Tandberg Management Suite server'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("ctms", 1), ("ivr", 2), ("sbc", 3), ("sip", 4), ("ctsmanager", 5), ("mseTps", 6), ("mseMedia2", 7), ("isdn", 8), ("cuvcm", 9), ("cucm", 10), ("vcs", 11), ("tms", 12))

ciscoTelepresenceExchangeSystemMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 0))
ciscoTelepresenceExchangeSystemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1))
ciscoTelepresenceExchangeSystemMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 7))
ctxConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1))
ctxSystemStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 2))
ctxStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3))
ctxEventHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4))
ctxNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5))
ctxServiceProviderTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 1), )
if mibBuilder.loadTexts: ctxServiceProviderTable.setStatus('current')
if mibBuilder.loadTexts: ctxServiceProviderTable.setDescription('This table specifies the configuration information for service providers as they are configured in the CTX System. Service provider entries provide a logical grouping of regions, organizations, and resources.')
ctxServiceProviderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxServiceProviderIndex"))
if mibBuilder.loadTexts: ctxServiceProviderEntry.setStatus('current')
if mibBuilder.loadTexts: ctxServiceProviderEntry.setDescription('Each entry describes a service provider entry as configured in the CTX System.')
ctxServiceProviderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 1, 1, 1), CtxIndex())
if mibBuilder.loadTexts: ctxServiceProviderIndex.setStatus('current')
if mibBuilder.loadTexts: ctxServiceProviderIndex.setDescription('Service provider snmp instance configuration index.')
ctxServiceProviderKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 1, 1, 2), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServiceProviderKey.setStatus('current')
if mibBuilder.loadTexts: ctxServiceProviderKey.setDescription('This object specifies the service provider ID key.')
ctxServiceProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServiceProviderName.setStatus('current')
if mibBuilder.loadTexts: ctxServiceProviderName.setDescription('This object specifies the service provider name as configured in the CTX System.')
ctxServiceProviderDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServiceProviderDescr.setStatus('current')
if mibBuilder.loadTexts: ctxServiceProviderDescr.setDescription('This object specifies the service provider description as configured in the CTX System.')
ctxServiceProviderHDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxServiceProviderHDNumber.setStatus('current')
if mibBuilder.loadTexts: ctxServiceProviderHDNumber.setDescription('This object specifies the service provider help desk number. This number is normally in the e.164 format.')
ctxRegionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 2), )
if mibBuilder.loadTexts: ctxRegionTable.setStatus('current')
if mibBuilder.loadTexts: ctxRegionTable.setDescription("This table specifies the configuration information for regions as they are configured in the CTX System. A region is defined as a set of 'like' resources in terms of network latency, jitter, quality of service, etc. Normally a region is a geographic area such as Americas, Europe, or Asia Pacific, but a region can be a smaller set of like resources such as East and West regions.")
ctxRegionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionIndex"))
if mibBuilder.loadTexts: ctxRegionEntry.setStatus('current')
if mibBuilder.loadTexts: ctxRegionEntry.setDescription('Each entry describes a region entry as configured in the CTX System.')
ctxRegionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 2, 1, 1), CtxIndex())
if mibBuilder.loadTexts: ctxRegionIndex.setStatus('current')
if mibBuilder.loadTexts: ctxRegionIndex.setDescription('Region snmp instance configuration index.')
ctxRegionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 2, 1, 2), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxRegionKey.setStatus('current')
if mibBuilder.loadTexts: ctxRegionKey.setDescription('This object specifies the region entry ID key as generated by the CTX System when the entry entry was configured.')
ctxRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxRegionName.setStatus('current')
if mibBuilder.loadTexts: ctxRegionName.setDescription('This object specifies the region name as configured in the CTX System.')
ctxRegionDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxRegionDescr.setStatus('current')
if mibBuilder.loadTexts: ctxRegionDescr.setDescription('This object specifies the region description as configured in the CTX System.')
ctxRegionServiceProviderKeyRef1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 2, 1, 5), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxRegionServiceProviderKeyRef1.setReference('ctxServiceProviderKey')
if mibBuilder.loadTexts: ctxRegionServiceProviderKeyRef1.setStatus('current')
if mibBuilder.loadTexts: ctxRegionServiceProviderKeyRef1.setDescription("This object references the ctxServiceProviderKey object from the ctxServiceProviderEntry table. This key matches the service provider key. This key provides an association reference to the service provider entry that is associated to this region entry. This object maybe null or empty if no reference is provided. See MIB description under 'Configuration Tables and Linking' for a detailed example.")
ctxOrganizationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3), )
if mibBuilder.loadTexts: ctxOrganizationTable.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationTable.setDescription('This table specifies the configuration information for an organization as they are configured in the CTX System. Organization entries provide a logical grouping of customer endpoints and resources.')
ctxOrganizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxOrganizationIndex"))
if mibBuilder.loadTexts: ctxOrganizationEntry.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationEntry.setDescription('Each entry represents an organization configuration entry as configured in the CTX system.')
ctxOrganizationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1, 1), CtxIndex())
if mibBuilder.loadTexts: ctxOrganizationIndex.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationIndex.setDescription('Organization snmp instance configuration index.')
ctxOrganizationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1, 2), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxOrganizationKey.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationKey.setDescription('This object specifies the organization ID key as generated by the CTX System when the organization entry was configured.')
ctxOrganizationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxOrganizationName.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationName.setDescription('This object specifies the organization name as configured in the CTX System.')
ctxOrganizationDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxOrganizationDescr.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationDescr.setDescription('This object specifies the organization description as configured in the CTX System.')
ctxOrganizationMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1, 5), CtxPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxOrganizationMaxPorts.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationMaxPorts.setDescription('This object specifies the organization maximum ports for scheduled meetings. The value of 0 indicates undefined.')
ctxOrganizationDirectDial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxOrganizationDirectDial.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationDirectDial.setDescription('This object specifies the organization direct dial enabled flag as configured in the CTX System. If direct dial calls are allowed, this value will be TRUE. If direct dial calls are not allowed, this value will be FALSE.')
ctxOrganizationServiceProviderKeyRef1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 3, 1, 7), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxOrganizationServiceProviderKeyRef1.setReference('ctxServiceProviderKey')
if mibBuilder.loadTexts: ctxOrganizationServiceProviderKeyRef1.setStatus('current')
if mibBuilder.loadTexts: ctxOrganizationServiceProviderKeyRef1.setDescription("This object references the ctxServiceProviderKey object from the ctxServiceProviderEntry table. This key matches the service provider key. This key provides an association reference to the service provider entry that is associated to this region entry. This object maybe null or empty if no reference is provided. See MIB description under 'Configuration Tables and Linking' for a detailed example.")
ctxResourceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4))
ctxResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1), )
if mibBuilder.loadTexts: ctxResourceTable.setStatus('current')
if mibBuilder.loadTexts: ctxResourceTable.setDescription("This table specifies the configuration information for resources as they are configured in the CTX System. A resource is server or network device that the CTX System includes in configuration to provide call signaling, media services, scheduling, or other function. A resource may have additional configuration items, such as ctxSipConfigTable. Each of the other ctxResourceObjects tables are indexed by this resource entry. If a resource has SIP configurations, there will be a entry in the ctxSipConfigEntry indexed by this ctxResourceIndex. |- Service Providers - Logical grouping |-- Regions - Logical grouping | | | |--- Resources - General configs for resources | | that are common to all resources | | | |--- SIP Configs - SIP configurations such as | | SIP IP, port, and protocol | | | |--- Meeting Configs - Meeting configurations | | such as Min/Max meeting ID's | | | |--- Capacity Configs - Media port counts, | | large meeting support, etc.")
ctxResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceIndex"))
if mibBuilder.loadTexts: ctxResourceEntry.setStatus('current')
if mibBuilder.loadTexts: ctxResourceEntry.setDescription('Each entry represents a resource configuration entry as configured in the CTX system.')
ctxResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 1), CtxIndex())
if mibBuilder.loadTexts: ctxResourceIndex.setStatus('current')
if mibBuilder.loadTexts: ctxResourceIndex.setDescription('Resource snmp instance configuration index.')
ctxResourceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 2), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceKey.setStatus('current')
if mibBuilder.loadTexts: ctxResourceKey.setDescription('This object specifies the resource ID key as generated by the CTX System when the resource entry was configured. This key is a globally unique across all configuration tables and entries. This key will persist upon restart and reboot.')
ctxResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceName.setStatus('current')
if mibBuilder.loadTexts: ctxResourceName.setDescription('This object specifies the resource name as configured in the CTX System.')
ctxResourceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceDescr.setStatus('current')
if mibBuilder.loadTexts: ctxResourceDescr.setDescription('This object specifies the resource configuration as configured in the CTX System.')
ctxResourceMgmtIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceMgmtIPType.setStatus('current')
if mibBuilder.loadTexts: ctxResourceMgmtIPType.setDescription('This object specifies the management IP address type for the resource as configured in the CTX System.')
ctxResourceMgmtIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceMgmtIPAddr.setStatus('current')
if mibBuilder.loadTexts: ctxResourceMgmtIPAddr.setDescription('This object specifies the management IP for the resource as configured in the CTX System. This IP address is used for provisioning, monitoring, and resource probes. The IP address 0.0.0.0 will be used if the resource does not have a management IP address configured.')
ctxResourceDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 7), CtxResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceDeviceType.setStatus('current')
if mibBuilder.loadTexts: ctxResourceDeviceType.setDescription('This object specifies the resource device type as configured in the CTX System.')
ctxResourceRegionKeyRef1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 1, 1, 8), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceRegionKeyRef1.setReference('ctxRegionKey')
if mibBuilder.loadTexts: ctxResourceRegionKeyRef1.setStatus('current')
if mibBuilder.loadTexts: ctxResourceRegionKeyRef1.setDescription("This object references the ctxRegionKey object from the ctxRegionEntry table. This key matches the region key. This key provides an association reference to the region entry that is associated to this resource entry. This object maybe null or empty if no reference is provided. See MIB description under 'Configuration Tables and Linking' for a detailed example.")
ctxSipConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 2), )
if mibBuilder.loadTexts: ctxSipConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctxSipConfigTable.setDescription('This table specifies the SIP configuration attributes for a resource. Only resources that have SIP attributes will have an entry in this table.')
ctxSipConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceIndex"))
if mibBuilder.loadTexts: ctxSipConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctxSipConfigEntry.setDescription('Each entry describes the SIP attributes for a resource as configured in the CTX System. As described in ctxResourceTable description, this table is indexed by the ctxResourceIndex. Only entries that have SIP attributes will have an entry in this table.')
ctxSipIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxSipIpType.setStatus('current')
if mibBuilder.loadTexts: ctxSipIpType.setDescription('This object specifies the SIP IP address type for the resource as configured in the CTX System.')
ctxSipIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxSipIpAddr.setStatus('current')
if mibBuilder.loadTexts: ctxSipIpAddr.setDescription('This object specifies the SIP signaling IP for the resource as configured in the CTX System. This IP address is used for signaling and for SIP OPTION PING resource probes.')
ctxSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 2, 1, 3), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxSipPort.setStatus('current')
if mibBuilder.loadTexts: ctxSipPort.setDescription('This object specifies the SIP port for the resource as configured in the CTX System.')
ctxSipTransportProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 2, 1, 4), CtxSIPProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxSipTransportProto.setStatus('current')
if mibBuilder.loadTexts: ctxSipTransportProto.setDescription('This object specifies the SIP transport protocol type as configured in the CTX System.')
ctxMediaCapacityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 3), )
if mibBuilder.loadTexts: ctxMediaCapacityConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctxMediaCapacityConfigTable.setDescription('This table specifies the media capacity configuration attributes for a resource. Only resources that have media capacity attributes will have an entry in this table.')
ctxMediaCapacityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceIndex"))
if mibBuilder.loadTexts: ctxMediaCapacityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctxMediaCapacityConfigEntry.setDescription('Each entry describes the media capacity attributes for a resource as configured in the CTX System. As described in ctxResourceTable description, this table is indexed by the ctxResourceIndex. Only entries that have media capacity attributes will have an entry in this table.')
ctxMediaCapacityMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 3, 1, 1), CtxPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxMediaCapacityMaxPorts.setStatus('current')
if mibBuilder.loadTexts: ctxMediaCapacityMaxPorts.setDescription('This object specifies the maximum port capacity for the resource as configured in the CTX System.')
ctxMediaCapacityLargeMeeting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxMediaCapacityLargeMeeting.setStatus('current')
if mibBuilder.loadTexts: ctxMediaCapacityLargeMeeting.setDescription('This object specifies the large meeting reservation allowed option for the resource as configured in the CTX System.')
ctxMeetingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 4), )
if mibBuilder.loadTexts: ctxMeetingConfigTable.setStatus('current')
if mibBuilder.loadTexts: ctxMeetingConfigTable.setDescription('This table specifies the meeting configuration attributes for a resource. Only resources that have meeting attributes will have an entry in this table.')
ctxMeetingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceIndex"))
if mibBuilder.loadTexts: ctxMeetingConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ctxMeetingConfigEntry.setDescription('Each entry describes the meeting attributes for a resource as configured in the CTX System. As described in ctxResourceTable description, this table is indexed by the ctxResourceIndex. Only entries that have meeting attributes will have an entry in this table.')
ctxMeetingConfigStaticMinId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxMeetingConfigStaticMinId.setStatus('current')
if mibBuilder.loadTexts: ctxMeetingConfigStaticMinId.setDescription('This object specifies the vendor specific minimum static meeting ID as configured in the CTX System.')
ctxMeetingConfigStaticMaxId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxMeetingConfigStaticMaxId.setStatus('current')
if mibBuilder.loadTexts: ctxMeetingConfigStaticMaxId.setDescription('This object specifies the vendor specific maximum static meeting ID as configured in the CTX System.')
ctxMeetingConfigInterOpMinId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxMeetingConfigInterOpMinId.setStatus('current')
if mibBuilder.loadTexts: ctxMeetingConfigInterOpMinId.setDescription('This object specifies the vendor specific minimum interOp meeting ID as configured in the CTX System.')
ctxMeetingConfigInterOpMaxId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxMeetingConfigInterOpMaxId.setStatus('current')
if mibBuilder.loadTexts: ctxMeetingConfigInterOpMaxId.setDescription('This object specifies the vendor specific maximum interOp meeting ID as configured in the CTX System.')
ctxClusterNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5), )
if mibBuilder.loadTexts: ctxClusterNodeTable.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeTable.setDescription('This table specifies the configuration information for cluster nodes as they are configured in the CTX System. A cluster node is a server within the CTX System, such as admin server, call engine server, or database server.')
ctxClusterNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeIndex"))
if mibBuilder.loadTexts: ctxClusterNodeEntry.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeEntry.setDescription('Each entry describes a cluster node entry as configured in the CTX System.')
ctxClusterNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 1), CtxIndex())
if mibBuilder.loadTexts: ctxClusterNodeIndex.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeIndex.setDescription('Cluster node snmp instance configuration index.')
ctxClusterNodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 2), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeKey.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeKey.setDescription('This object specifies the cluster node ID key as generated by the CTX System when the cluster node entry was configured.')
ctxClusterNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeName.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeName.setDescription('This object specifies the cluster node name as configured in the CTX system.')
ctxClusterNodeHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeHostName.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeHostName.setDescription('This object specifies the cluster node hostname as configured in the CTX System.')
ctxClusterNodeIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeIPType.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeIPType.setDescription('This object specifies the cluster node IP address type as configured in the CTX System.')
ctxClusterNodeIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeIPAddr.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeIPAddr.setDescription('This object specifies the cluster node IP address as configured in the CTX System.')
ctxClusterNodeClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeClusterName.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeClusterName.setDescription('This object specifies the cluster node cluster name as configured in the CTX System.')
ctxClusterNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 8), CtxClusterNodeTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeType.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeType.setDescription('This object specifies the cluster node type as configured in the CTX System.')
ctxClusterNodeOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 1, 5, 1, 9), CtxResourceOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxClusterNodeOperState.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeOperState.setDescription('This object specifies the operational state of the cluster node. The operational state is set by the CTX System based on configuration and proactive monitoring of the cluster node. See the textual convention CtxResourceOperState for a detail description of the various states.')
ctxAdminServersStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 2, 1), CtxHealthStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAdminServersStatus.setStatus('current')
if mibBuilder.loadTexts: ctxAdminServersStatus.setDescription('This object specifies an overall system health status state for the cluster admin server nodes. This state is an indicator of the CTX System functional health in terms of the admin functions. The ctxAdminServersStatusChg notification provides real-time alerts for when this state changes. A ctxNotifyMessage will detail the reason why the state changed.')
ctxCallEnginesStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 2, 2), CtxHealthStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxCallEnginesStatus.setStatus('current')
if mibBuilder.loadTexts: ctxCallEnginesStatus.setDescription('This object specifies an overall system health status state for the cluster engine server nodes. This state is an indicator of the CTX System functional health in terms of the call processing engine functions. The ctxCallEnginesStatusChg notification provides real-time alerts for when this state changes. A ctxNotifyMessage will detail the reason why the state changed.')
ctxDatabaseServersStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 2, 3), CtxHealthStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxDatabaseServersStatus.setStatus('current')
if mibBuilder.loadTexts: ctxDatabaseServersStatus.setDescription('This object specifies an overall system health status state for the cluster database server nodes. This state is an indicator of the CTX System functional health in terms of the database server functions. The ctxDatabaseServersStatusChg notification provides real-time alerts for when this state changes. A ctxNotifyMessage will detail the reason why the state changed.')
ctxResourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 2, 4), CtxHealthStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceStatus.setStatus('current')
if mibBuilder.loadTexts: ctxResourceStatus.setDescription('This object specifies an overall system health status state for the resources configured. This state is an indicator of the CTX System functional health in terms of the resource dependencies. The ctxResourceStatusChg notification provides real-time alerts for when this state changes. A ctxNotifyMessage will detail the reason why the state changed.')
ctxSystemConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 2, 5), CtxHealthStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxSystemConfigStatus.setStatus('current')
if mibBuilder.loadTexts: ctxSystemConfigStatus.setDescription('This object specifies an overall system health status state for the system configuration. This state is an indicator of the CTX System functional health in terms of the overall configuration. The ctxSystemConfigStatusChg notification provides real-time alerts for when this state changes. A ctxNotifyMessage will detail the reason why the state changed.')
ctxSystemBackupStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 2, 6), CtxHealthStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxSystemBackupStatus.setStatus('current')
if mibBuilder.loadTexts: ctxSystemBackupStatus.setDescription('This object specifies an overall system health status state for the system backups. This state is an indicator of the CTX System functional health in terms of the overall system backups. The ctxBackupStatusChg notification provides real-time alerts for when this state changes. A ctxNotifyMessage will detail the reason why the state changed.')
ctxResourceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 1), )
if mibBuilder.loadTexts: ctxResourceStatsTable.setStatus('current')
if mibBuilder.loadTexts: ctxResourceStatsTable.setDescription('This table specifies the run-time resource statistics.')
ctxResourceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceIndex"))
if mibBuilder.loadTexts: ctxResourceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ctxResourceStatsEntry.setDescription('Each entry describes an individual resource and statistics for it. This table is indexed by the ctxResourceIndex. All resources will have an entry in this table to define common resource statistics, such as operational state.')
ctxResourceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 1, 1, 1), CtxResourceOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceOperState.setStatus('current')
if mibBuilder.loadTexts: ctxResourceOperState.setDescription('This object specifies the operational state of the resource. The operational state is set by the CTX System based on configuration and proactive monitoring of the resource. See the textual convention CtxResourceOperState for a detail description of the various states.')
ctxResourceUnavailTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 1, 1, 2), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceUnavailTrans.setStatus('current')
if mibBuilder.loadTexts: ctxResourceUnavailTrans.setDescription('This object specifies a counter that increments when the resource transitions to unreachable or failed state from another state. The management entity can use this to track the operational stability of the resource.')
ctxResourceUnavailDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 1, 1, 3), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceUnavailDuration.setStatus('current')
if mibBuilder.loadTexts: ctxResourceUnavailDuration.setDescription('Defines the total time in seconds that the resource was in either the failed or unreachable states. This counter keeps track of time in seconds on how much the resource stays in the failed and unreachable states. The duration is accumulative from SNMP start time and will reset to zero when the snmp agent is restarted.')
ctxResourceCallSetupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 1, 1, 4), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxResourceCallSetupFailures.setStatus('current')
if mibBuilder.loadTexts: ctxResourceCallSetupFailures.setDescription('This object specifies a counter that increments every time a call fails to be setup correctly to this resource. Miss-dialed numbers are excluded and not considered a failure.')
ctxAllocStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 2), )
if mibBuilder.loadTexts: ctxAllocStatsTable.setStatus('current')
if mibBuilder.loadTexts: ctxAllocStatsTable.setDescription('This table specifies the run-time scheduling port allocation statistics.')
ctxAllocStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceIndex"))
if mibBuilder.loadTexts: ctxAllocStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ctxAllocStatsEntry.setDescription('Each entry describes an individual resource and statistics for media port allocations. This table is indexed by the ctxResourceIndex. Only resources that require port allocations will have an entry in this table.')
ctxAllocActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 2, 1, 1), CtxPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocActivePorts.setStatus('current')
if mibBuilder.loadTexts: ctxAllocActivePorts.setDescription('This object identifies the active in-use ports for the resource.')
ctxAllocAvailPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 2, 1, 2), CtxPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocAvailPorts.setStatus('current')
if mibBuilder.loadTexts: ctxAllocAvailPorts.setDescription('This object identifies the available ports for the resource.')
ctxAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 2, 1, 3), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocFailures.setStatus('current')
if mibBuilder.loadTexts: ctxAllocFailures.setDescription('This object increments when there are not enough port resources available to process the requested allocation or if there is an error allocating the ports.')
ctxAllocOutOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 2, 1, 4), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocOutOfPorts.setStatus('current')
if mibBuilder.loadTexts: ctxAllocOutOfPorts.setDescription('This object increments when there are not enough port resources available to process the requested allocation.')
ctxRegionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 3), )
if mibBuilder.loadTexts: ctxRegionStatsTable.setStatus('current')
if mibBuilder.loadTexts: ctxRegionStatsTable.setDescription('This table specifies the run-time statistics for regions for scheduling port allocations and call setup failures. This table is similar to the ctxAllocStatsTable table, except this table provides statistics per region for all resources.')
ctxRegionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionIndex"))
if mibBuilder.loadTexts: ctxRegionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ctxRegionStatsEntry.setDescription('Each entry describes statistics for a region. This table is indexed by the ctxRegionIndex.')
ctxRegionCallSetupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 3, 1, 1), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxRegionCallSetupFailures.setStatus('current')
if mibBuilder.loadTexts: ctxRegionCallSetupFailures.setDescription('This object specifies a counter that increments every time a call fails to be setup correctly in this region. Mis-dialed numbers are excluded and not considered a failure.')
ctxAllocPoolActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 3, 1, 2), CtxPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocPoolActivePorts.setStatus('current')
if mibBuilder.loadTexts: ctxAllocPoolActivePorts.setDescription('This object identifies the active in-use ports for the region.')
ctxAllocPoolAvailPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 3, 1, 3), CtxPorts()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocPoolAvailPorts.setStatus('current')
if mibBuilder.loadTexts: ctxAllocPoolAvailPorts.setDescription('This object identifies the available ports for resources within the region.')
ctxAllocPoolAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 3, 1, 4), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocPoolAllocFailures.setStatus('current')
if mibBuilder.loadTexts: ctxAllocPoolAllocFailures.setDescription('This object increments when there are not enough port resources available to process the requested allocation or if there is an error allocating the port for the given region.')
ctxAllocPoolAllocOutOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 3, 1, 5), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxAllocPoolAllocOutOfPorts.setStatus('current')
if mibBuilder.loadTexts: ctxAllocPoolAllocOutOfPorts.setDescription('This object increments when there are not enough port resources available to process the requested allocation for the given region resource pool.')
ctxAllocPeakHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4))
ctxPeakHistMaxIntervals = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 1440), )).clone(96)).setUnits('intervals').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxPeakHistMaxIntervals.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistMaxIntervals.setDescription('This object specifies the number of time intervals kept in the history tables ctxPeakHistAllocTable and ctxPeakHistAllocPoolTable. The default is 96 intervals. 96 intervals at the ctxPeakHistIntTime default of 15 minutes stores peak values for 24 hours. A value of 0 will disable peak history tables from collecting data. The minimum value is 5 with a maximum of 1440. Changing this value will reset and clear both ctxPeakHistAllocTable and ctxPeakHistAllocPoolTable table entries.')
ctxPeakHistIntTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(15)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxPeakHistIntTime.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistIntTime.setDescription('This object specifies the time interval in minutes. Default is 15 minutes. The minimum interval time is 1 and the maximum is 1440 minutes. Changing this value will reset and clear both ctxPeakHistAllocTable and ctxPeakHistAllocPoolTable table entries.')
ctxPeakHistAllocTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 3), )
if mibBuilder.loadTexts: ctxPeakHistAllocTable.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocTable.setDescription('This table specifies the run-time peak statistics for resource port allocations. This table contains peak port allocations per resource for ctxHistMaxIntervals. The management entity can use this table to monitor the peak port allocations per interval. Setting ctxPeakHistMaxIntervals to 0 will disable this table and clear all entries in table.')
ctxPeakHistAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 3, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceIndex"), (0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistAllocIntIndex"))
if mibBuilder.loadTexts: ctxPeakHistAllocEntry.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocEntry.setDescription('Each entry describes a single peak time interval per resource. This table is indexed by the ctxResourceIndex and ctxPeakHistAllocIntIndex. Only resources that have port allocations will have an entry in this table.')
ctxPeakHistAllocIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ctxPeakHistAllocIntIndex.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocIntIndex.setDescription('A monotonically increasing integer which is incremented for every interval. Based on the allowed interval length the object will not wrap for life of Device. The intent of this object is to allow network management applications a mechanism that allows them to collect only those newly added interval. The network management application only needs to save the index of the last received interval and use it as a starting point when data is next collected from this table.')
ctxPeakHistAllocTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxPeakHistAllocTS.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocTS.setDescription('This object specifies the start timestamp of the interval. The interval end time is this time plus the ctxPeakHistIntTime.')
ctxPeakHistAllocPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 3, 1, 3), CtxPorts()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxPeakHistAllocPorts.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocPorts.setDescription('This object specifies the peak ports for the given interval. This is the maximum port count during the interval time period.')
ctxPeakHistAllocPoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 4), )
if mibBuilder.loadTexts: ctxPeakHistAllocPoolTable.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocPoolTable.setDescription('This table specifies the run-time peak port allocation statistics for all resources within a region. This table contains peak port allocations per region for ctxHistMaxIntervals. The management entity can use this table to monitor the peak port allocations per interval. Setting ctxPeakHistMaxIntervals to 0 will disable this table and clear all entries in table.')
ctxPeakHistAllocPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 4, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionIndex"), (0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistAllocPoolIntIndex"))
if mibBuilder.loadTexts: ctxPeakHistAllocPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocPoolEntry.setDescription('Each entry describes a single peak time interval per region. This table is indexed by the ctxRegionIndex and ctxPeakHistAllocPoolIntIndex.')
ctxPeakHistAllocPoolIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ctxPeakHistAllocPoolIntIndex.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocPoolIntIndex.setDescription('A monotonically increasing integer which is incremented for every interval. Based on the allowed interval length the object will not wrap for life of Device. The intent of this object is to allow network management applications a mechanism that allows them to collect only those newly added interval. The network management application only needs to save the index of the last received interval and use it as a starting point when data is next collected from this table.')
ctxPeakHistAllocPoolTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 4, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxPeakHistAllocPoolTS.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocPoolTS.setDescription('This object specifies the start timestamp of the interval. The interval end time is this time plus the ctxPeakHistIntTime.')
ctxPeakHistAllocPoolPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 3, 4, 4, 1, 3), CtxPorts()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxPeakHistAllocPoolPorts.setStatus('current')
if mibBuilder.loadTexts: ctxPeakHistAllocPoolPorts.setDescription('This object specifies the peak ports for the given interval. This is the maximum port count during the interval time period.')
ctxErrorHistoryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(25, 2500), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxErrorHistoryTableSize.setStatus('current')
if mibBuilder.loadTexts: ctxErrorHistoryTableSize.setDescription("This object specifies the number of entries that the ctxErrorHistoryTable can contain. When the capacity of the ctxErrorHistoryTable is reached, the oldest entry in the table will be deleted in order to accommodate the new entry. A value of '0' disables the history table. The default value is set to 100 entries.")
ctxErrorHistoryMaxSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 2), SyslogSeverity().clone('notice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxErrorHistoryMaxSeverity.setStatus('current')
if mibBuilder.loadTexts: ctxErrorHistoryMaxSeverity.setDescription('Defines the maximum severity of the event messages that the history table will contain. The default is notice(5), which can be changed by setting the object.')
ctxErrorHistoryLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 3), CtxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorHistoryLastIndex.setStatus('current')
if mibBuilder.loadTexts: ctxErrorHistoryLastIndex.setDescription('This object specifies the value of the ctxErrorIndex object corresponding to the last entry added into the table. The management entity can use this object to determine if a new entry has been added into the ctxErrorHistoryTable.')
ctxErrorHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4), )
if mibBuilder.loadTexts: ctxErrorHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ctxErrorHistoryTable.setDescription('This table contains a history of alarms and events generated by the CTX system. This table is a real-time history table of alarms and events for the CTX System. When the table reaches its capacity specified in ctxErrorHistoryTableSize, the agent will purge the oldest entry. The management entity can receive real-time events when an object is inserted into this table by configuring ctxErrorHistoryEventNotifyEnable to TRUE and receiving ctxErrorHistoryEvent notifications')
ctxErrorHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorIndex"))
if mibBuilder.loadTexts: ctxErrorHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ctxErrorHistoryEntry.setDescription('An entry is an event that was generated by the CTX System. Events can be traps that were sent and other log messages.')
ctxErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 1), CtxIndex())
if mibBuilder.loadTexts: ctxErrorIndex.setStatus('current')
if mibBuilder.loadTexts: ctxErrorIndex.setDescription('Error history snmp instance index.')
ctxErrorKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 2), CtxKeyId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorKey.setStatus('current')
if mibBuilder.loadTexts: ctxErrorKey.setDescription('This object specifies the error history key id. A empty string maybe used if the key is not present.')
ctxErrorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ctxErrorTimeStamp.setDescription('This object indicates the timestamp when the message or the notification is generated by the CTX system. The timestamp is UTC.')
ctxErrorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 4), SyslogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorSeverity.setStatus('current')
if mibBuilder.loadTexts: ctxErrorSeverity.setDescription('This object specifies the severity for the given message.')
ctxErrorAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorAppName.setStatus('current')
if mibBuilder.loadTexts: ctxErrorAppName.setDescription('This object specifies the application name for the message. AppNames are documented in the CTX System user guide.')
ctxErrorAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorAlarmId.setStatus('current')
if mibBuilder.loadTexts: ctxErrorAlarmId.setDescription("This object specifies the alarm ID for the event as generated by the CTX System. Alarm ID's are documented in the CTX System user guide.")
ctxErrorAttrValStr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorAttrValStr.setStatus('current')
if mibBuilder.loadTexts: ctxErrorAttrValStr.setDescription("This object specifies an attribute value pair in the format of attr=value [attr=value ...]. This string is limited to 255 characters. If the attribute value string is larger than 255 characters, the string will be truncated to 254 characters and an '*' will be inserted as the 255th character as a way to indicate the message was truncated. Attributes and associated values are documented in the CTX System user guide.")
ctxErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 4, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctxErrorMessage.setStatus('current')
if mibBuilder.loadTexts: ctxErrorMessage.setDescription("This object specifies the message text for the event. This string is limited to 255 characters. If the message string is larger than 255 characters, the string will be truncated to 254 characters and an '*' will be inserted as the 255th character as a way to indicate the message was truncated.")
ctxNotifyMessage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctxNotifyMessage.setStatus('current')
if mibBuilder.loadTexts: ctxNotifyMessage.setDescription('This object specifies a message text for the notification that is sent. This message will indicate a short description detailing the cause for the trap. This is intended as value added information for operational support staff, such as value added information in a ticket that is generated for this trap. Event and trap de-duplication systems should ignore this varbind as this entry will vary. De-duplication should be performed on the other varbinds and should exclude both ctxNotifyMesssage and ctxNotifyState.')
ctxNotifyConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2))
ctxStatusChangeNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxStatusChangeNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctxStatusChangeNotifyEnable.setDescription('This object specifies if the status change traps should be enabled or disabled. Setting this to TRUE will enable the notifications. Setting this to FALSE will disable the notifications. Default is true/enabled. This object controls the generation of the following notifications: ciscoCTXSysAdminServersStatusChg, ciscoCTXSysDatabaseServersStatusChg, ciscoCTXSysCallEnginesStatusChg, ciscoCTXSysResourceStatusChg, ciscoCTXSysSystemConfigStatusChg, ciscoCTXSysSystemBackupStatusChg')
ctxLicenseAlarmNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxLicenseAlarmNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctxLicenseAlarmNotifyEnable.setDescription('This object specifies if the license alarm traps should be enabled or disabled. Setting this to TRUE will enable the notifications. Setting this to FALSE will disable the notifications. Default is true/enabled. This object controls the generation of the following notifications: ciscoCTXSysLicenseFailure')
ctxAuthFailureNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxAuthFailureNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctxAuthFailureNotifyEnable.setDescription('This object specifies if the authentication failure traps should be enabled or disabled. Setting this to TRUE will enable the notifications. Setting this to FALSE will disable the notifications. The default setting for authentication failures is FALSE/disabled in order to prevent unnecessary event flooding. This object controls the generation of the following notifications: ciscoCTXSysUserAuthFailure')
ctxClusterNodeAlarmNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxClusterNodeAlarmNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctxClusterNodeAlarmNotifyEnable.setDescription('This object specifies if the cluster node alarm traps should be enabled or disabled. Setting this to TRUE will enable the notifications. Setting this to FALSE will disable the notifications. Default is true/enabled. This object controls the generation of the following notifications: ciscoCTXSysClusterNodeDown, ciscoCTXSysClusterNodeUp')
ctxResourceAlarmNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxResourceAlarmNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctxResourceAlarmNotifyEnable.setDescription('This object specifies if the resource alarm traps should be enabled or disabled. Setting this to TRUE will enable the notifications. Setting this to FALSE will disable the notifications. Default is true/enabled. This object controls the generation of the following notifications: ciscoCTXSysResourceDown, ciscoCTXSysResourceUp, ciscoCTXSysResourceAllocFailure')
ctxCallFailureNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxCallFailureNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctxCallFailureNotifyEnable.setDescription('This object specifies if the call failure traps should be enabled or disabled. Setting this to TRUE will enable the notifications. Setting this to FALSE will disable the notifications. Default is true/enabled. This object controls the generation of the following notifications: ciscoCTXSysCallSetupFailure, ciscoCTXSysCallAbnormalDisconnect')
ctxErrorHistoryEventNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 758, 1, 5, 2, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctxErrorHistoryEventNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctxErrorHistoryEventNotifyEnable.setDescription('This object specifies if the error event history traps should be enabled or disabled. Setting this to TRUE will enable the notifications. Setting this to FALSE will disable the notifications. Notifications and other error logs are logged in the error history table. Enabling this may cause duplication for events that are in duplicate of other notifications. This may be the desired behavior of the management system. Use ctxErrorHistoryMaxSeverity to specify the maximum severity level to be logged and sent via a notification. Sending error history notifications are disabled by default. This object controls the generation of the following notifications: ciscoCTXSysErrorHistoryEvent')
ciscoCTXSysAdminServersStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 1)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAdminServersStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysAdminServersStatusChg.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysAdminServersStatusChg.setDescription('This notification is sent when the ctxAdminServersStatus changes. ctxStatusChangeNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysDatabaseServersStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 2)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxDatabaseServersStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysDatabaseServersStatusChg.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysDatabaseServersStatusChg.setDescription('This notification is sent when the ctxDatabaseServerStatus changes. ctxStatusChangeNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysCallEnginesStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 3)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxCallEnginesStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysCallEnginesStatusChg.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysCallEnginesStatusChg.setDescription('This notification is sent when the ctxCallEnginesStatus changes. ctxStatusChangeNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysResourceStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 4)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysResourceStatusChg.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysResourceStatusChg.setDescription('This notification is sent when the ctxResourceStatus changes. ctxStatusChangeNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysSystemConfigStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 5)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSystemConfigStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysSystemConfigStatusChg.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysSystemConfigStatusChg.setDescription('This notification is sent when the ctxSystemConfigStatus changes. ctxStatusChangeNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysSystemBackupStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 6)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSystemBackupStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysSystemBackupStatusChg.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysSystemBackupStatusChg.setDescription('This notification is sent when the ctxSystemBackupStatus changes. ctxStatusChangeNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysLicenseFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 7)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysLicenseFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysLicenseFailure.setDescription('This notification is sent for the following license violation failures: 1. DEMO License Errors a. Warnings 5 days prior to Demo License expiration if the user has not installed a permanent license. b. Error message immediately after the Demo License expiration if the user has not installed a permanent license. 2. Volume Based Licensing Errors a. Warning message that the system is reaching the license capacity if using more than 75% of current licenses b. Error Message that the system is violating the current licensing capacity and will soon start rejecting the calls if using more than 100% and less than 150% of available licenses c. Error message that the system will reject calls if claiming more than 150% of available licenses. ctxLicenseAlarmNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysUserAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 8)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysUserAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysUserAuthFailure.setDescription('This notification will be sent when a user authentication failure results in CTX System. 1. User authentication errors while trying to log into the CTX System Admin UI. 2. User authentication errors while trying to log into the CTX System CLI. ctxAuthFailureNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysClusterNodeDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 9)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysClusterNodeDown.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysClusterNodeDown.setDescription('This notification will be sent when there is a network connectivity or probe monitor failure to the cluster node from the admin server. ctxClusterNodeAlarmNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysClusterNodeUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 10)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysClusterNodeUp.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysClusterNodeUp.setDescription('This notification will be sent when the cluster node connectivity is restored or when the probe monitor is successful in monitoring the node after being down. ctxClusterNodeAlarmNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysResourceDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 11)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceDeviceType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysResourceDown.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysResourceDown.setDescription('This notification will be sent when there is a network connectivity or probe monitor failure to the resource. This can be a SIP OPTION PING, XMLRPC, or network connectivity failure. The ctxNotifyMessage will contain the failure details. ctxResourceAlarmNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysResourceUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 12)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceDeviceType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysResourceUp.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysResourceUp.setDescription('This notification will be sent when the resource connectivity is restored or when the probe monitor is successful in monitoring the resource after being down. ctxResourceAlarmNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysResourceAllocFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 13)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceDeviceType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysResourceAllocFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysResourceAllocFailure.setDescription('This notification will be sent when a resource allocation failure occurs. ctxResourceAlarmNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysCallSetupFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 14)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceDeviceType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysCallSetupFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysCallSetupFailure.setDescription('This notification will be sent when there is a call setup/routing failure between the CTX System and a resource. The cause for the setup failure will be detailed in ctxNotifyMessage. ctxCallFailureNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysCallAbnormalDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 15)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceDeviceType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"))
if mibBuilder.loadTexts: ciscoCTXSysCallAbnormalDisconnect.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysCallAbnormalDisconnect.setDescription('This notification will be sent when there is an abnormal call disconnect. The call disconnect reason will be detailed in ctxNotifyMessage. ctxCallFailureNotifyEnable controls whether this notification is sent or not.')
ciscoCTXSysErrorHistoryEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 758, 0, 16)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorSeverity"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorAppName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorAlarmId"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorAttrValStr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorMessage"))
if mibBuilder.loadTexts: ciscoCTXSysErrorHistoryEvent.setStatus('current')
if mibBuilder.loadTexts: ciscoCTXSysErrorHistoryEvent.setDescription('This notification is sent when a new ctxErrorHistoryEntry is created. If the event being logged does not have an organization name, this varbind entry will be an empty string value. ctxErrorHistoryEventNotifyEnable controls whether this notification is sent or not.')
ciscoTelepresenceExchangeSystemMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 1))
ciscoTelepresenceExchangeSystemMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 2))
ciscoTelepresenceExchangeSystemMIBModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 1, 1)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoTelepresenceExchangeSystemMIBStatusGroup"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoTelepresenceExchangeSystemMIBConfigGroup"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoTelepresenceExchangeSystemMIBNotfyObjectsGroup"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoTelepresenceExchangeSystemMIBNotifyGroup"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoTelepresenceExchangeSystemMIBErrorHistoryGroup"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoTelePresenceExchangeSystemMIBStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelepresenceExchangeSystemMIBModuleCompliance = ciscoTelepresenceExchangeSystemMIBModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIBModuleCompliance.setDescription('The compliance statement for entities which implement the Cisco Telepresence Exchange MIB.')
ciscoTelepresenceExchangeSystemMIBStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 2, 1)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAdminServersStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxCallEnginesStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxDatabaseServersStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSystemConfigStatus"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSystemBackupStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelepresenceExchangeSystemMIBStatusGroup = ciscoTelepresenceExchangeSystemMIBStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIBStatusGroup.setDescription('CTX System status object group.')
ciscoTelepresenceExchangeSystemMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 2, 2)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxServiceProviderName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxServiceProviderDescr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxServiceProviderHDNumber"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionDescr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxOrganizationName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxOrganizationDescr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxOrganizationMaxPorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxOrganizationDirectDial"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceDescr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceMgmtIPType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceMgmtIPAddr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceDeviceType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSipIpType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSipIpAddr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSipPort"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxSipTransportProto"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxMediaCapacityMaxPorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxMediaCapacityLargeMeeting"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeHostName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeIPType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeIPAddr"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeClusterName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeType"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxServiceProviderKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionServiceProviderKeyRef1"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxOrganizationKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxOrganizationServiceProviderKeyRef1"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceRegionKeyRef1"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeOperState"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxMeetingConfigStaticMinId"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxMeetingConfigStaticMaxId"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxMeetingConfigInterOpMinId"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxMeetingConfigInterOpMaxId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelepresenceExchangeSystemMIBConfigGroup = ciscoTelepresenceExchangeSystemMIBConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIBConfigGroup.setDescription('CTX System configuration object group.')
ciscoTelePresenceExchangeSystemMIBStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 2, 3)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceUnavailTrans"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocActivePorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocAvailPorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocPoolActivePorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocPoolAvailPorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocFailures"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocPoolAllocFailures"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceCallSetupFailures"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxRegionCallSetupFailures"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocOutOfPorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAllocPoolAllocOutOfPorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceOperState"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceUnavailDuration"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistMaxIntervals"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistIntTime"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistAllocTS"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistAllocPorts"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistAllocPoolTS"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxPeakHistAllocPoolPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelePresenceExchangeSystemMIBStatsGroup = ciscoTelePresenceExchangeSystemMIBStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTelePresenceExchangeSystemMIBStatsGroup.setDescription('Statistics object group.')
ciscoTelepresenceExchangeSystemMIBNotfyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 2, 4)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxNotifyMessage"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxStatusChangeNotifyEnable"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxLicenseAlarmNotifyEnable"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxAuthFailureNotifyEnable"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxClusterNodeAlarmNotifyEnable"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxResourceAlarmNotifyEnable"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxCallFailureNotifyEnable"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorHistoryEventNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelepresenceExchangeSystemMIBNotfyObjectsGroup = ciscoTelepresenceExchangeSystemMIBNotfyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIBNotfyObjectsGroup.setDescription('CTX System notify objects.')
ciscoTelepresenceExchangeSystemMIBErrorHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 2, 5)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorHistoryTableSize"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorHistoryMaxSeverity"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorHistoryLastIndex"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorKey"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorTimeStamp"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorSeverity"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorMessage"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorAppName"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorAlarmId"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ctxErrorAttrValStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelepresenceExchangeSystemMIBErrorHistoryGroup = ciscoTelepresenceExchangeSystemMIBErrorHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIBErrorHistoryGroup.setDescription('CTX System error history table objects.')
ciscoTelepresenceExchangeSystemMIBNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 758, 7, 2, 6)).setObjects(("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysAdminServersStatusChg"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysDatabaseServersStatusChg"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysCallEnginesStatusChg"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysResourceStatusChg"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysSystemConfigStatusChg"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysSystemBackupStatusChg"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysLicenseFailure"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysUserAuthFailure"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysClusterNodeDown"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysResourceDown"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysCallSetupFailure"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysErrorHistoryEvent"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysCallAbnormalDisconnect"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysResourceAllocFailure"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysClusterNodeUp"), ("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", "ciscoCTXSysResourceUp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTelepresenceExchangeSystemMIBNotifyGroup = ciscoTelepresenceExchangeSystemMIBNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTelepresenceExchangeSystemMIBNotifyGroup.setDescription('CTX System trap/notifications.')
mibBuilder.exportSymbols("CISCO-TELEPRESENCE-EXCHANGE-SYSTEM-MIB", ctxSipConfigTable=ctxSipConfigTable, CtxKeyId=CtxKeyId, ctxPeakHistAllocPoolTable=ctxPeakHistAllocPoolTable, ctxSystemStatusObjects=ctxSystemStatusObjects, ctxEventHistory=ctxEventHistory, ctxResourceMgmtIPAddr=ctxResourceMgmtIPAddr, ctxErrorHistoryTable=ctxErrorHistoryTable, ctxClusterNodeEntry=ctxClusterNodeEntry, ctxRegionServiceProviderKeyRef1=ctxRegionServiceProviderKeyRef1, ctxOrganizationMaxPorts=ctxOrganizationMaxPorts, ctxClusterNodeKey=ctxClusterNodeKey, ciscoTelepresenceExchangeSystemMIBNotifyGroup=ciscoTelepresenceExchangeSystemMIBNotifyGroup, ctxAllocActivePorts=ctxAllocActivePorts, PYSNMP_MODULE_ID=ciscoTelepresenceExchangeSystemMIB, ciscoCTXSysSystemBackupStatusChg=ciscoCTXSysSystemBackupStatusChg, ctxSipPort=ctxSipPort, ctxPeakHistAllocPoolTS=ctxPeakHistAllocPoolTS, ctxClusterNodeClusterName=ctxClusterNodeClusterName, ctxResourceOperState=ctxResourceOperState, ctxPeakHistAllocTable=ctxPeakHistAllocTable, ctxAllocPoolAllocOutOfPorts=ctxAllocPoolAllocOutOfPorts, ctxNotifyConfigObjects=ctxNotifyConfigObjects, ctxNotifyMessage=ctxNotifyMessage, ciscoCTXSysResourceStatusChg=ciscoCTXSysResourceStatusChg, ctxServiceProviderName=ctxServiceProviderName, ctxSipConfigEntry=ctxSipConfigEntry, ctxResourceObjects=ctxResourceObjects, ctxClusterNodeIPAddr=ctxClusterNodeIPAddr, ctxConfigObjects=ctxConfigObjects, ciscoTelepresenceExchangeSystemMIBNotfyObjectsGroup=ciscoTelepresenceExchangeSystemMIBNotfyObjectsGroup, ctxClusterNodeOperState=ctxClusterNodeOperState, ctxSipIpType=ctxSipIpType, ciscoCTXSysResourceUp=ciscoCTXSysResourceUp, CtxResourceOperState=CtxResourceOperState, ctxAllocPoolActivePorts=ctxAllocPoolActivePorts, ctxServiceProviderHDNumber=ctxServiceProviderHDNumber, ctxAllocAvailPorts=ctxAllocAvailPorts, ciscoCTXSysErrorHistoryEvent=ciscoCTXSysErrorHistoryEvent, ciscoCTXSysResourceAllocFailure=ciscoCTXSysResourceAllocFailure, ctxAllocPoolAllocFailures=ctxAllocPoolAllocFailures, ctxMediaCapacityMaxPorts=ctxMediaCapacityMaxPorts, ctxErrorHistoryEventNotifyEnable=ctxErrorHistoryEventNotifyEnable, ctxOrganizationEntry=ctxOrganizationEntry, ctxAllocStatsEntry=ctxAllocStatsEntry, ctxResourceStatsEntry=ctxResourceStatsEntry, ctxPeakHistAllocPoolIntIndex=ctxPeakHistAllocPoolIntIndex, ciscoTelepresenceExchangeSystemMIBObjects=ciscoTelepresenceExchangeSystemMIBObjects, ctxServiceProviderEntry=ctxServiceProviderEntry, ctxOrganizationName=ctxOrganizationName, ctxResourceRegionKeyRef1=ctxResourceRegionKeyRef1, CtxResourceType=CtxResourceType, ctxRegionIndex=ctxRegionIndex, ctxErrorIndex=ctxErrorIndex, ctxLicenseAlarmNotifyEnable=ctxLicenseAlarmNotifyEnable, ctxResourceCallSetupFailures=ctxResourceCallSetupFailures, ctxMeetingConfigInterOpMaxId=ctxMeetingConfigInterOpMaxId, ciscoTelepresenceExchangeSystemMIB=ciscoTelepresenceExchangeSystemMIB, ctxResourceDescr=ctxResourceDescr, ctxClusterNodeIndex=ctxClusterNodeIndex, ctxErrorHistoryMaxSeverity=ctxErrorHistoryMaxSeverity, ctxErrorHistoryEntry=ctxErrorHistoryEntry, ctxRegionDescr=ctxRegionDescr, ciscoCTXSysAdminServersStatusChg=ciscoCTXSysAdminServersStatusChg, ctxMediaCapacityConfigTable=ctxMediaCapacityConfigTable, ctxAllocStatsTable=ctxAllocStatsTable, ciscoTelepresenceExchangeSystemMIBGroups=ciscoTelepresenceExchangeSystemMIBGroups, ctxServiceProviderDescr=ctxServiceProviderDescr, ctxRegionTable=ctxRegionTable, ciscoCTXSysResourceDown=ciscoCTXSysResourceDown, ciscoCTXSysCallAbnormalDisconnect=ciscoCTXSysCallAbnormalDisconnect, CtxHealthStates=CtxHealthStates, ciscoCTXSysCallSetupFailure=ciscoCTXSysCallSetupFailure, ctxErrorHistoryTableSize=ctxErrorHistoryTableSize, ctxAdminServersStatus=ctxAdminServersStatus, ctxMeetingConfigStaticMinId=ctxMeetingConfigStaticMinId, ctxPeakHistAllocTS=ctxPeakHistAllocTS, ctxResourceTable=ctxResourceTable, ctxRegionCallSetupFailures=ctxRegionCallSetupFailures, ctxRegionStatsEntry=ctxRegionStatsEntry, ctxResourceUnavailDuration=ctxResourceUnavailDuration, ctxResourceName=ctxResourceName, ctxStatusChangeNotifyEnable=ctxStatusChangeNotifyEnable, ctxAllocFailures=ctxAllocFailures, ctxAllocPeakHistory=ctxAllocPeakHistory, ctxPeakHistMaxIntervals=ctxPeakHistMaxIntervals, ctxSipIpAddr=ctxSipIpAddr, ctxPeakHistAllocPorts=ctxPeakHistAllocPorts, CtxPorts=CtxPorts, CtxSIPProtocolType=CtxSIPProtocolType, ctxOrganizationIndex=ctxOrganizationIndex, ctxPeakHistAllocIntIndex=ctxPeakHistAllocIntIndex, ctxNotifyObjects=ctxNotifyObjects, ctxErrorAttrValStr=ctxErrorAttrValStr, ctxErrorAppName=ctxErrorAppName, ctxOrganizationDescr=ctxOrganizationDescr, ctxResourceAlarmNotifyEnable=ctxResourceAlarmNotifyEnable, ciscoCTXSysDatabaseServersStatusChg=ciscoCTXSysDatabaseServersStatusChg, ctxResourceEntry=ctxResourceEntry, ctxClusterNodeAlarmNotifyEnable=ctxClusterNodeAlarmNotifyEnable, ctxErrorAlarmId=ctxErrorAlarmId, ctxServiceProviderTable=ctxServiceProviderTable, ctxServiceProviderKey=ctxServiceProviderKey, ctxAuthFailureNotifyEnable=ctxAuthFailureNotifyEnable, ctxStatisticsObjects=ctxStatisticsObjects, ctxSystemConfigStatus=ctxSystemConfigStatus, ciscoCTXSysSystemConfigStatusChg=ciscoCTXSysSystemConfigStatusChg, ctxPeakHistAllocPoolPorts=ctxPeakHistAllocPoolPorts, ctxResourceStatus=ctxResourceStatus, ciscoCTXSysUserAuthFailure=ciscoCTXSysUserAuthFailure, ctxErrorSeverity=ctxErrorSeverity, ctxRegionEntry=ctxRegionEntry, ctxServiceProviderIndex=ctxServiceProviderIndex, ctxClusterNodeName=ctxClusterNodeName, ctxErrorMessage=ctxErrorMessage, ciscoTelepresenceExchangeSystemMIBStatusGroup=ciscoTelepresenceExchangeSystemMIBStatusGroup, ciscoTelepresenceExchangeSystemMIBErrorHistoryGroup=ciscoTelepresenceExchangeSystemMIBErrorHistoryGroup, ctxMediaCapacityConfigEntry=ctxMediaCapacityConfigEntry, ciscoTelepresenceExchangeSystemMIBNotifs=ciscoTelepresenceExchangeSystemMIBNotifs, CtxIndex=CtxIndex, ctxCallEnginesStatus=ctxCallEnginesStatus, ctxMeetingConfigInterOpMinId=ctxMeetingConfigInterOpMinId, ciscoTelePresenceExchangeSystemMIBStatsGroup=ciscoTelePresenceExchangeSystemMIBStatsGroup, ctxPeakHistAllocPoolEntry=ctxPeakHistAllocPoolEntry, ctxClusterNodeType=ctxClusterNodeType, ciscoCTXSysClusterNodeDown=ciscoCTXSysClusterNodeDown, ciscoTelepresenceExchangeSystemMIBModuleCompliance=ciscoTelepresenceExchangeSystemMIBModuleCompliance, ciscoCTXSysLicenseFailure=ciscoCTXSysLicenseFailure, ctxResourceDeviceType=ctxResourceDeviceType, ctxMeetingConfigEntry=ctxMeetingConfigEntry, ctxErrorHistoryLastIndex=ctxErrorHistoryLastIndex, ctxRegionKey=ctxRegionKey, ciscoTelepresenceExchangeSystemMIBCompliances=ciscoTelepresenceExchangeSystemMIBCompliances, ctxOrganizationTable=ctxOrganizationTable, ctxDatabaseServersStatus=ctxDatabaseServersStatus, ciscoTelepresenceExchangeSystemMIBConfigGroup=ciscoTelepresenceExchangeSystemMIBConfigGroup, ctxResourceStatsTable=ctxResourceStatsTable, ciscoCTXSysClusterNodeUp=ciscoCTXSysClusterNodeUp, ctxOrganizationDirectDial=ctxOrganizationDirectDial, ctxErrorKey=ctxErrorKey, ctxRegionStatsTable=ctxRegionStatsTable, ctxAllocOutOfPorts=ctxAllocOutOfPorts, ctxAllocPoolAvailPorts=ctxAllocPoolAvailPorts, ctxSystemBackupStatus=ctxSystemBackupStatus, ctxOrganizationKey=ctxOrganizationKey, ctxClusterNodeTable=ctxClusterNodeTable, ctxCallFailureNotifyEnable=ctxCallFailureNotifyEnable, ctxResourceMgmtIPType=ctxResourceMgmtIPType, ctxErrorTimeStamp=ctxErrorTimeStamp, ctxResourceIndex=ctxResourceIndex, ctxClusterNodeHostName=ctxClusterNodeHostName, ctxClusterNodeIPType=ctxClusterNodeIPType, ciscoTelepresenceExchangeSystemMIBConform=ciscoTelepresenceExchangeSystemMIBConform, ctxResourceKey=ctxResourceKey, ctxPeakHistIntTime=ctxPeakHistIntTime, ctxOrganizationServiceProviderKeyRef1=ctxOrganizationServiceProviderKeyRef1, ciscoCTXSysCallEnginesStatusChg=ciscoCTXSysCallEnginesStatusChg, ctxRegionName=ctxRegionName, ctxMeetingConfigStaticMaxId=ctxMeetingConfigStaticMaxId, ctxSipTransportProto=ctxSipTransportProto, ctxMeetingConfigTable=ctxMeetingConfigTable, ctxPeakHistAllocEntry=ctxPeakHistAllocEntry, ctxMediaCapacityLargeMeeting=ctxMediaCapacityLargeMeeting, ctxResourceUnavailTrans=ctxResourceUnavailTrans, CtxClusterNodeTypes=CtxClusterNodeTypes)
