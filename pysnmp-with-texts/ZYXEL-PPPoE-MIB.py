#
# PySNMP MIB module ZYXEL-PPPoE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-PPPoE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, Unsigned32, TimeTicks, Integer32, Bits, Counter64, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Unsigned32", "TimeTicks", "Integer32", "Bits", "Counter64", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Counter32", "IpAddress")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelPppoe = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67))
if mibBuilder.loadTexts: zyxelPppoe.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelPppoe.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelPppoe.setContactInfo('')
if mibBuilder.loadTexts: zyxelPppoe.setDescription('The subtree for Point-to-Point Protocol over Ethernet (PPPoE)')
zyxelPppoeIaSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1))
zyPppoeIaState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaState.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaState.setDescription('Enable/Disable PPPoE intermediate agent globally on the switch.')
zyPppoeIaAccessNodeIdString = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaAccessNodeIdString.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaAccessNodeIdString.setDescription("Up to 20 alphanumeric characters to identify the PPPoE intermediate agent. Hyphens and spaces are also allowed. The default is the switch's host name.")
zyPppoeIaFlexibleCircuitIdSyntaxState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxState.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxState.setDescription('Enable/Disable this if you want the switch to add the user-defined identifier string and variables to PADI and PADR packets from PPPoE clients.')
zyPppoeIaFlexibleCircuitIdSyntaxIdString = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxIdString.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxIdString.setDescription('Specify a string that the switch adds in the agent Circuit ID sub-option.')
zyPppoeIaFlexibleCircuitIdSyntaxOption = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sp", 1), ("sv", 2), ("pv", 3), ("spv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxOption.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxOption.setDescription('Select the variables that you want the switch to generate and add in the agnet circuit ID sub-option. The variable options include sp, sv,pv and spv which indicate combinations of slot-port, slot-VLAN, port-VLAN and slot-port-VLAN respectively.')
zyPppoeIaFlexibleCircuitIdSyntaxDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("poundSign", 1), ("dot", 2), ("comma", 3), ("semicolon", 4), ("slash", 5), ("space", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxDelimiter.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxDelimiter.setDescription('Select a delimiter to spearate the identifier-string, slot ID, port number and/or VLAN ID from each other. ')
zyxelPppoeIaPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7), )
if mibBuilder.loadTexts: zyxelPppoeIaPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPppoeIaPortTable.setDescription('The table contains PPPoE intermediate agent on the specified port configuration. ')
zyxelPppoeIaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelPppoeIaPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPppoeIaPortEntry.setDescription('An entry contains PPPoE intermediate agent on the specified port configuration')
zyPppoeIaPortTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortTrustState.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaPortTrustState.setDescription('Enable/Disable trusted port on the specified port. Trusted ports are uplink ports connected to PPPoE servers. If a PADO (PPPoE Active Discovery Offer), PADS (PPPoE Active Discovery Session-confirmation), or PADT (PPPoE Active Discovery Terminate) packet is sent from a PPPoE server and received on a trusted port, the Switch forwards it to all other ports. If a PADI or PADR packet is sent from a PPPoE client but received on a trusted port, the Switch forwards it to other trusted port(s). Untrusted ports are downlink ports connected to subscribers. If a PADI, PADR, or PADT packet is sent from a PPPoE client and received on an untrusted port, the Switch adds a vendor-specific tag to the packet and then forwards it to the trusted port(s). The Switch discards PADO and PADS packets which are sent from a PPPoE server but received on an untrusted port.')
zyPppoeIaPortCircuitIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortCircuitIdString.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaPortCircuitIdString.setDescription('Enter a string of up to 63 ASCII characters that the switch adds into the Agent Circuit ID sub-option for PPPoE discovery packets received on this port. Spaces are allowed.')
zyPppoeIaPortRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortRemoteIdString.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaPortRemoteIdString.setDescription("Enter a string of up to 63 ASCII characters that the switch adds into the Agent Remote ID sub-option for PPPoE discovery packets received on this port. Space are allows. If you do not specify a string here or in the Remote-id field for a VLAN on a port, the Switch automatically uses the PPPoE client's MAC address. ")
zyPppoeIaMaxNumberOfVlans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPppoeIaMaxNumberOfVlans.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaMaxNumberOfVlans.setDescription('The maximum number of PPPoE IA vlan entries that can be created.')
zyxelPppoeIaVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9), )
if mibBuilder.loadTexts: zyxelPppoeIaVlanTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPppoeIaVlanTable.setDescription('The table contains PPPoE intermediate agent for the specified VLAN configuration. ')
zyxelPppoeIaVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1), ).setIndexNames((0, "ZYXEL-PPPoE-MIB", "zyPppoeIaVlanVid"))
if mibBuilder.loadTexts: zyxelPppoeIaVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPppoeIaVlanEntry.setDescription('An entry contains PPPoE intermediate agent for the specified VLAN configuration.')
zyPppoeIaVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyPppoeIaVlanVid.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaVlanVid.setDescription('VLAN ID you want to configure.')
zyPppoeIaVlanCircuitIdState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaVlanCircuitIdState.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaVlanCircuitIdState.setDescription('Enable/Disable circuit ID setting for a specific VLAN take effect')
zyPppoeIaVlanRemoteIdState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaVlanRemoteIdState.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaVlanRemoteIdState.setDescription('Enable/Disable remote ID settings for a specific VLAN take effect.')
zyPppoeIaVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyPppoeIaVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaVlanRowStatus.setDescription('This object allows entries to be created and deleted from the PPPoE IA VLAN table.')
zyPppoeIaMaxNumberOfPortVlans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPppoeIaMaxNumberOfPortVlans.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaMaxNumberOfPortVlans.setDescription('The maximum number of PPPoE IA per port per vlan entries that can be created.')
zyxelPppoeIaPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11), )
if mibBuilder.loadTexts: zyxelPppoeIaPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPppoeIaPortVlanTable.setDescription('The table contains PPPoE intermediate agent for the specified VLAN on the specified port configuration. ')
zyxelPppoeIaPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ZYXEL-PPPoE-MIB", "zyPppoeIaPortVlanVid"))
if mibBuilder.loadTexts: zyxelPppoeIaPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPppoeIaPortVlanEntry.setDescription('An entry contains PPPoE intermediate agent for the specified VLAN on the specified port configuration')
zyPppoeIaPortVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: zyPppoeIaPortVlanVid.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaPortVlanVid.setDescription('VLAN ID you want to configure.')
zyPppoeIaPortVlanCircuitIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortVlanCircuitIdString.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaPortVlanCircuitIdString.setDescription('A string of up to 63 ASCII characters that the switch adds into the agent circuit ID sub-option for PPPoE discovery packets received on this VLAN on the specified port. The circuit ID you configure for a specific VLAN on a port has the highest priority.')
zyPppoeIaPortVlanRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortVlanRemoteIdString.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaPortVlanRemoteIdString.setDescription("A string of up to 63 ASCII characters that the switch adds into the agent remote ID sub-option for PPPoE discovery packets received on this VLAN on the specified port. If you do not specify a string here or in the Remote-id field for a specific port, the Switch automatically uses the PPPoE client's MAC address. The remote ID you configure for a specific VLAN on a port has the highest priority.")
zyPppoeIaPortVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyPppoeIaPortVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyPppoeIaPortVlanRowStatus.setDescription('This object allows entries to be created and deleted from the PPPoE IA port VLAN table.')
mibBuilder.exportSymbols("ZYXEL-PPPoE-MIB", zyPppoeIaMaxNumberOfVlans=zyPppoeIaMaxNumberOfVlans, zyPppoeIaFlexibleCircuitIdSyntaxIdString=zyPppoeIaFlexibleCircuitIdSyntaxIdString, zyPppoeIaFlexibleCircuitIdSyntaxOption=zyPppoeIaFlexibleCircuitIdSyntaxOption, zyxelPppoe=zyxelPppoe, zyPppoeIaPortVlanVid=zyPppoeIaPortVlanVid, PYSNMP_MODULE_ID=zyxelPppoe, zyPppoeIaVlanRemoteIdState=zyPppoeIaVlanRemoteIdState, zyxelPppoeIaSetup=zyxelPppoeIaSetup, zyxelPppoeIaPortEntry=zyxelPppoeIaPortEntry, zyPppoeIaAccessNodeIdString=zyPppoeIaAccessNodeIdString, zyPppoeIaPortVlanCircuitIdString=zyPppoeIaPortVlanCircuitIdString, zyPppoeIaVlanCircuitIdState=zyPppoeIaVlanCircuitIdState, zyPppoeIaVlanVid=zyPppoeIaVlanVid, zyxelPppoeIaPortTable=zyxelPppoeIaPortTable, zyPppoeIaPortRemoteIdString=zyPppoeIaPortRemoteIdString, zyPppoeIaState=zyPppoeIaState, zyPppoeIaPortCircuitIdString=zyPppoeIaPortCircuitIdString, zyPppoeIaMaxNumberOfPortVlans=zyPppoeIaMaxNumberOfPortVlans, zyPppoeIaPortVlanRowStatus=zyPppoeIaPortVlanRowStatus, zyxelPppoeIaPortVlanEntry=zyxelPppoeIaPortVlanEntry, zyxelPppoeIaPortVlanTable=zyxelPppoeIaPortVlanTable, zyPppoeIaPortVlanRemoteIdString=zyPppoeIaPortVlanRemoteIdString, zyPppoeIaFlexibleCircuitIdSyntaxDelimiter=zyPppoeIaFlexibleCircuitIdSyntaxDelimiter, zyxelPppoeIaVlanTable=zyxelPppoeIaVlanTable, zyPppoeIaFlexibleCircuitIdSyntaxState=zyPppoeIaFlexibleCircuitIdSyntaxState, zyPppoeIaPortTrustState=zyPppoeIaPortTrustState, zyxelPppoeIaVlanEntry=zyxelPppoeIaVlanEntry, zyPppoeIaVlanRowStatus=zyPppoeIaVlanRowStatus)
