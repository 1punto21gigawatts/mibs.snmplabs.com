#
# PySNMP MIB module TACACS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TACACS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, iso, IpAddress, Unsigned32, TimeTicks, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Bits, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "iso", "IpAddress", "Unsigned32", "TimeTicks", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Bits", "Counter32", "Gauge32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
agentTacacsClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18))
agentTacacsClientMIB.setRevisions(('2011-12-14 00:00', '2011-01-26 00:00', '2007-05-23 00:00', '2005-08-17 00:44',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: agentTacacsClientMIB.setRevisionsDescriptions(('TACACS Source Interface related Object added', 'Postal address updated.', 'Ubiquiti branding related changes.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: agentTacacsClientMIB.setLastUpdated('201112140000Z')
if mibBuilder.loadTexts: agentTacacsClientMIB.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: agentTacacsClientMIB.setContactInfo('')
if mibBuilder.loadTexts: agentTacacsClientMIB.setDescription('This MIB module defines a portion of the SNMP MIB under the Broadcom Inc enterprise OID pertaining to TACACS+ client configuration.')
agentTacacsClientObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1))
agentTacacsGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 1))
agentTacacsGlobalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTacacsGlobalTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTacacsGlobalTimeout.setDescription('The time-out in seconds for communication with TACACS servers .')
agentTacacsGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTacacsGlobalKey.setStatus('current')
if mibBuilder.loadTexts: agentTacacsGlobalKey.setDescription('The Encryption and Authentication key used in communication with TACACS servers .')
agentTacacsServerTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2), )
if mibBuilder.loadTexts: agentTacacsServerTable.setStatus('current')
if mibBuilder.loadTexts: agentTacacsServerTable.setDescription('Table of Tacacs server entries')
agentTacacsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1), ).setIndexNames((0, "TACACS-CLIENT-MIB", "agentTacacsServerIpAddress"))
if mibBuilder.loadTexts: agentTacacsServerEntry.setStatus('current')
if mibBuilder.loadTexts: agentTacacsServerEntry.setDescription('An entry in the Tacacs Server table.')
agentTacacsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1, 1), InetAddress())
if mibBuilder.loadTexts: agentTacacsServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentTacacsServerIpAddress.setDescription('The IP address or HostName of the TACACS server.')
agentTacacsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTacacsPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentTacacsPortNumber.setDescription('The port number of the TACACS server.')
agentTacacsTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTacacsTimeOut.setStatus('current')
if mibBuilder.loadTexts: agentTacacsTimeOut.setDescription('The time out value for the TACACS server. If not set the value of agentTacacsGlobalTimeout will be used')
agentTacacsKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTacacsKey.setStatus('current')
if mibBuilder.loadTexts: agentTacacsKey.setDescription('The authentication key for the TACACS server.')
agentTacacsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTacacsPriority.setStatus('current')
if mibBuilder.loadTexts: agentTacacsPriority.setDescription('The priority of the TACACS server.')
agentTacacsServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTacacsServerStatus.setStatus('current')
if mibBuilder.loadTexts: agentTacacsServerStatus.setDescription('The row status of this entry . Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry.')
agentTacacsServerIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTacacsServerIpAddrType.setStatus('current')
if mibBuilder.loadTexts: agentTacacsServerIpAddrType.setDescription('The type of address of the TACACS server. IPv4 and DNS types are supported currently')
agentTacacsSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 18, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTacacsSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentTacacsSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based routing interface, port based routing interface, loopback interface). A non-zero value indicates ifIndex for the corresponding interface entry in the ifTable is selected. A zero value indicates the source-interface un-selection.')
mibBuilder.exportSymbols("TACACS-CLIENT-MIB", agentTacacsKey=agentTacacsKey, agentTacacsSourceInterface=agentTacacsSourceInterface, agentTacacsGlobalKey=agentTacacsGlobalKey, agentTacacsServerIpAddress=agentTacacsServerIpAddress, agentTacacsTimeOut=agentTacacsTimeOut, agentTacacsServerEntry=agentTacacsServerEntry, agentTacacsPortNumber=agentTacacsPortNumber, agentTacacsGlobalTimeout=agentTacacsGlobalTimeout, agentTacacsServerStatus=agentTacacsServerStatus, agentTacacsServerIpAddrType=agentTacacsServerIpAddrType, agentTacacsGlobalConfigGroup=agentTacacsGlobalConfigGroup, agentTacacsPriority=agentTacacsPriority, PYSNMP_MODULE_ID=agentTacacsClientMIB, agentTacacsClientObjects=agentTacacsClientObjects, agentTacacsClientMIB=agentTacacsClientMIB, agentTacacsServerTable=agentTacacsServerTable)
