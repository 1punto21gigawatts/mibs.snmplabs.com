#
# PySNMP MIB module BIANCA-BRICK-TACACSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-TACACSP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, ModuleIdentity, MibIdentifier, TimeTicks, Counter32, Unsigned32, Counter64, Integer32, ObjectIdentity, IpAddress, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Unsigned32", "Counter64", "Integer32", "ObjectIdentity", "IpAddress", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bintecsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 254))
tacacsp = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 254, 13))
tacacspServerTable = MibTable((1, 3, 6, 1, 4, 1, 272, 254, 13, 1), )
if mibBuilder.loadTexts: tacacspServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspServerTable.setDescription('')
tacacspServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-TACACSP-MIB", "tacacspSrvPriority"))
if mibBuilder.loadTexts: tacacspServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspServerEntry.setDescription('')
tacacspSrvPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvPriority.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvPriority.setDescription('The TACACS+ server with the lowest priority is the first used for an TACACS+ AAA request. If there is no response or the access was denied (in the non-authoritave case only, see also tacacspSrvPolicy) the TACACS+ server with the next lowest priority will be used. The default value is 0.')
tacacspSrvAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvAddress.setDescription('The TACACS+ server IP address.')
tacacspSrvTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 3), Integer32().clone(49)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacacspSrvTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvTcpPort.setDescription('The Login Host Protocol (TACACS) TCP port assigned by the IANA.')
tacacspSrvSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvSecret.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvSecret.setDescription("The shared secret between the TACACS+ server and the NAS (encryption key in the TACACS+ server's configuration file).")
tacacspSrvTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvTimeout.setDescription('The amount of seconds waiting for an outstanding TACACS+ response. Default is three seconds.')
tacacspSrvAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("delete", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvAdminStatus.setDescription('The administrative status of this TACACS+ server entry, if set to up(1) the associated server will be used for authentication, authorization and accounting according the priority (see tacacspSrvPriority) and the current operational status (see tacacspSrvOperStatus). Otherwise this entry will not be considered for TACACS+ AAA requests.')
tacacspSrvOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("blocked", 2), ("down", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacacspSrvOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvOperStatus.setDescription('The operational status of this TACACS+ server entry, the status blocked will be set after a failed TACACS+ request. If set to blocked(2) or down(3) this entry will not be considered for TACACS+ AAA requests.')
tacacspSrvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authoritative", 1), ("non-authoritative", 2))).clone('non-authoritative')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvPolicy.setDescription('If set to authoritative(1), a negative answer to a request will be accepted. This is not necessarily true when set to non-authoritative(2), where the next TACACS+ server will be asked until there is finally an authoritative(1) server configured.')
tacacspSrvEncrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encrypt", 1), ("cleartext", 2))).clone('encrypt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvEncrMode.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvEncrMode.setDescription('If set to encrypt(1) the TACACS+ packet will be MD5 encrypted. Otherwise - if set to cleartext(2) - the packet and therefore all related information will be send unencrypted. This mode is intended for testing but not recommended for normal use.')
tacacspSrvMultiSession = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvMultiSession.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvMultiSession.setDescription('If enabled(1) multiple TACACS+ sessions (subsequent TACACS+ requests) may be supported simultaneously over a single TCP connection. If multiple sessions are not being multiplexed over a single TCP connection, a new connection will be opened for each TACACS+ session and closed at the end of that session.')
tacacspSrvPppAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvPppAuth.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvPppAuth.setDescription('Enables the PPP authentication for the associated TACACS+ server.')
tacacspSrvLoginAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvLoginAuth.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvLoginAuth.setDescription('Enables the login authentication (shell) for the associated TACACS+ server.')
tacacspSrvAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvAccounting.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvAccounting.setDescription('Enables the TACACS+ accounting for the associated TACACS+ server.')
tacacspSrvBlockTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvBlockTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvBlockTimeout.setDescription('Timeout in seconds for the blocked status (see also tacacspSrvOperStatus), if expired, the operational status is set to up(1) or down(3) according the the current tacacspSrvAdminStatus. When set to zero, the operational status is never set to blocked.')
tacacspSrvAuthentNoResp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connection-bydefault", 1), ("connection-bylocalloginpwd", 2), ("connection-forbidden", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvAuthentNoResp.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvAuthentNoResp.setDescription('Possible actions for the client when no response from servers : - allowing the connection to the router by local login pwd (2) - or stop the negociation (3).')
tacacspSrvAuthentNegResp = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connection-bydefault", 1), ("connection-bylocalloginpwd", 2), ("connection-forbidden", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvAuthentNegResp.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvAuthentNegResp.setDescription('Possible actions for the client when negative response : from servers. - allowing the connection to the router by local login pwd (2) - or stop the negociation (3).')
tacacspSrvPrivLvlOnLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 254, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacspSrvPrivLvlOnLogin.setStatus('mandatory')
if mibBuilder.loadTexts: tacacspSrvPrivLvlOnLogin.setDescription("Configurable TACACS+ privilege level assigned after successful authentication procedure. This user-specific privilege level is needed for the subsequent command authorization request(s). Note that the user is free to change that initial privilege level via the 'enab<n>' command, provided that it's enabled on the TACACS+ server. If set to -1, this parameter will be ignored.")
mibBuilder.exportSymbols("BIANCA-BRICK-TACACSP-MIB", tacacspSrvPrivLvlOnLogin=tacacspSrvPrivLvlOnLogin, tacacspSrvEncrMode=tacacspSrvEncrMode, tacacspSrvPriority=tacacspSrvPriority, tacacspSrvTcpPort=tacacspSrvTcpPort, bintecsec=bintecsec, tacacspSrvAuthentNegResp=tacacspSrvAuthentNegResp, tacacspSrvTimeout=tacacspSrvTimeout, tacacspSrvAddress=tacacspSrvAddress, tacacspSrvMultiSession=tacacspSrvMultiSession, tacacspSrvAuthentNoResp=tacacspSrvAuthentNoResp, tacacspSrvAccounting=tacacspSrvAccounting, tacacsp=tacacsp, tacacspSrvOperStatus=tacacspSrvOperStatus, tacacspServerEntry=tacacspServerEntry, bintec=bintec, tacacspSrvPppAuth=tacacspSrvPppAuth, tacacspSrvPolicy=tacacspSrvPolicy, tacacspSrvAdminStatus=tacacspSrvAdminStatus, tacacspServerTable=tacacspServerTable, tacacspSrvBlockTimeout=tacacspSrvBlockTimeout, tacacspSrvLoginAuth=tacacspSrvLoginAuth, tacacspSrvSecret=tacacspSrvSecret)
