#
# PySNMP MIB module ZYXEL-ARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-ARP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:49:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, ModuleIdentity, Unsigned32, TimeTicks, IpAddress, Integer32, Gauge32, MibIdentifier, Counter64, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "TimeTicks", "IpAddress", "Integer32", "Gauge32", "MibIdentifier", "Counter64", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
MacAddress, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "RowStatus")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelArp = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11))
if mibBuilder.loadTexts: zyxelArp.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelArp.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelArp.setContactInfo('')
if mibBuilder.loadTexts: zyxelArp.setDescription('The subtree for arp')
zyxelArpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1))
zyxelArpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2))
zyxelArpLearningPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 1), )
if mibBuilder.loadTexts: zyxelArpLearningPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelArpLearningPortTable.setDescription('The table contains ARP learning port configuration.')
zyxelArpLearningPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelArpLearningPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelArpLearningPortEntry.setDescription('An entry contains ARP learning port configuration. ')
zyArpLearningPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("arpReply", 0), ("gratuitousArp", 1), ("arpRequest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpLearningPortMode.setStatus('current')
if mibBuilder.loadTexts: zyArpLearningPortMode.setDescription('The ARP learning mode the switch uses on the port.')
zyArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyArpAgingTime.setStatus('current')
if mibBuilder.loadTexts: zyArpAgingTime.setDescription('The number of seconds which learned arp are held.')
zyStaticArpMaxNumberOfArps = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyStaticArpMaxNumberOfArps.setStatus('current')
if mibBuilder.loadTexts: zyStaticArpMaxNumberOfArps.setDescription('The maximum number of static ARP entries that can be created.')
zyxelStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 4), )
if mibBuilder.loadTexts: zyxelStaticArpTable.setStatus('current')
if mibBuilder.loadTexts: zyxelStaticArpTable.setDescription('The table contains static ARP configuration.')
zyxelStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 4, 1), ).setIndexNames((0, "ZYXEL-ARP-MIB", "zyStaticArpIpAddrress"), (0, "ZYXEL-ARP-MIB", "zyStaticArpMacAddress"), (0, "ZYXEL-ARP-MIB", "zyStaticArpVlan"), (0, "ZYXEL-ARP-MIB", "zyStaticArpPort"))
if mibBuilder.loadTexts: zyxelStaticArpEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelStaticArpEntry.setDescription('An entry contains static ARP configuration.')
zyStaticArpIpAddrress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyStaticArpIpAddrress.setStatus('current')
if mibBuilder.loadTexts: zyStaticArpIpAddrress.setDescription('This parameter specifies the source IP address of this entry. ')
zyStaticArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: zyStaticArpMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyStaticArpMacAddress.setDescription('This parameter specifies the MAC address assigned to the IP address in this entry. ')
zyStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyStaticArpVlan.setStatus('current')
if mibBuilder.loadTexts: zyStaticArpVlan.setDescription('This parameter specifies the VLAN identification nember.')
zyStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 4, 1, 4), Integer32())
if mibBuilder.loadTexts: zyStaticArpPort.setStatus('current')
if mibBuilder.loadTexts: zyStaticArpPort.setDescription('This parameter specifies the port where the ARP entry entered in the previous field.')
zyStaticArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyStaticArpRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyStaticArpRowStatus.setDescription('This object allow static ARP entries to be create and deleted from static ARP table.')
zyxelArpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2, 1), )
if mibBuilder.loadTexts: zyxelArpTable.setStatus('current')
if mibBuilder.loadTexts: zyxelArpTable.setDescription('The table contains ARP information.')
zyxelArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2, 1, 1), ).setIndexNames((0, "ZYXEL-ARP-MIB", "zyArpIpAddress"), (0, "ZYXEL-ARP-MIB", "zyArpVid"))
if mibBuilder.loadTexts: zyxelArpEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelArpEntry.setDescription('An entry contains ARP information.')
zyArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyArpIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyArpIpAddress.setDescription('This is the learned IP address of a device connected to a switch port with the corresponding MAC address below.')
zyArpVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: zyArpVid.setStatus('current')
if mibBuilder.loadTexts: zyArpVid.setDescription('This is the VLAN to which the device belongs.')
zyArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyArpMacAddress.setDescription('This is the MAC address of the device with the corresponding IP address above.')
zyArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpPort.setStatus('current')
if mibBuilder.loadTexts: zyArpPort.setDescription('This is the port to which the device belongs.')
zyArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyArpType.setStatus('current')
if mibBuilder.loadTexts: zyArpType.setDescription('This show whether the MAC address is dynamic (learned by the switch) or static (manually entered).')
mibBuilder.exportSymbols("ZYXEL-ARP-MIB", zyxelArpLearningPortTable=zyxelArpLearningPortTable, zyArpPort=zyArpPort, zyxelArpStatus=zyxelArpStatus, zyStaticArpMaxNumberOfArps=zyStaticArpMaxNumberOfArps, zyStaticArpVlan=zyStaticArpVlan, zyxelArpSetup=zyxelArpSetup, zyxelStaticArpTable=zyxelStaticArpTable, zyxelArpLearningPortEntry=zyxelArpLearningPortEntry, zyArpVid=zyArpVid, zyStaticArpPort=zyStaticArpPort, zyStaticArpRowStatus=zyStaticArpRowStatus, zyArpType=zyArpType, zyxelStaticArpEntry=zyxelStaticArpEntry, zyStaticArpMacAddress=zyStaticArpMacAddress, zyxelArpEntry=zyxelArpEntry, zyArpAgingTime=zyArpAgingTime, zyxelArp=zyxelArp, zyArpIpAddress=zyArpIpAddress, zyStaticArpIpAddrress=zyStaticArpIpAddrress, zyArpLearningPortMode=zyArpLearningPortMode, zyArpMacAddress=zyArpMacAddress, zyxelArpTable=zyxelArpTable, PYSNMP_MODULE_ID=zyxelArp)
