#
# PySNMP MIB module Wellfleet-SNMPEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SNMPEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Counter32, IpAddress, Unsigned32, iso, TimeTicks, NotificationType, ModuleIdentity, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Counter32", "IpAddress", "Unsigned32", "iso", "TimeTicks", "NotificationType", "ModuleIdentity", "Counter64", "MibIdentifier")
AutonomousType, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TextualConvention", "DisplayString")
wfSnmpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSnmpGroup")
wfSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1))
wfSnmpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpDisable.setDescription('Enables or disables the SNMP subsystem')
wfSnmpUseLock = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpUseLock.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpUseLock.setDescription('Flag to indicate whether set locking mechanism is enabled or disabled. Set locking permits only one manager to perform SNMP sets to the system at any given time. A genErr will be returned to managers that are locked out.')
wfSnmpLockAddress = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpLockAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpLockAddress.setDescription('Address of remote manager that is enforcing the lock. This value is set by the SNMP agent. Remote managers are only allowed to clear it.')
wfSnmpLockTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpLockTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpLockTimeOut.setDescription('The maximum time (in minutes) a lock can be idle before it is cleared. An idle period is a time interval with no sets from the locking manager.')
wfSnmpAuth = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trivial", 1), ("party", 2), ("proprietary", 3))).clone('trivial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpAuth.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpAuth.setDescription('The type of authentication used by the agent (set through console interface).')
wfSnmpInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInPkts.setDescription('Total number of PDUs received by SNMP from transport entity')
wfSnmpOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutPkts.setDescription('Total number of PDUs sent by SNMP to transport entity')
wfSnmpInBadVersions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInBadVersions.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInBadVersions.setDescription('Total number of PDUs requesting unsupported versions')
wfSnmpInBadCommunityNames = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInBadCommunityNames.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInBadCommunityNames.setDescription('Total number of PDUs which had an invalid community string')
wfSnmpInBadCommunityUses = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInBadCommunityUses.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInBadCommunityUses.setDescription('Total number of PDUs requesting an operation unsupported by the community')
wfSnmpInASNParseErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInASNParseErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInASNParseErrs.setDescription('Total number of ASN.1 parsing errors during decoding')
wfSnmpInBadTypes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInBadTypes.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInBadTypes.setDescription('Total number of PDUs having an unknown PDU type')
wfSnmpInTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInTooBigs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInTooBigs.setDescription("Total number of PDUs delivered with ErrorStatus='tooBig")
wfSnmpInNoSuchNames = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInNoSuchNames.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInNoSuchNames.setDescription("Total number of PDUs delivered with ErrorStatus='noSuchName")
wfSnmpInBadValues = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInBadValues.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInBadValues.setDescription("Total number of PDUs delivered with ErrorStatus='badValue")
wfSnmpInReadOnlys = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInReadOnlys.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInReadOnlys.setDescription("Total number of PDUs delivered with ErrorStatus='readOnly")
wfSnmpInGenErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInGenErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInGenErrs.setDescription("Total number of PDUs delivered with ErrorStatus='genErr")
wfSnmpInTotalReqVars = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInTotalReqVars.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInTotalReqVars.setDescription('Total number of MIB objects retrieved successfully by the agent')
wfSnmpInTotalSetVars = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInTotalSetVars.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInTotalSetVars.setDescription('Total number of MIB objects which have been SET successfully')
wfSnmpInGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInGetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInGetRequests.setDescription('Total number of Get-Request PDUS accepted and processed')
wfSnmpInGetNexts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInGetNexts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInGetNexts.setDescription('Total number of GetNext-Request PDUS accepted and processed')
wfSnmpInSetRequests = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInSetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInSetRequests.setDescription('Total number of Set-Request PDUS accepted and processed')
wfSnmpInGetResponses = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInGetResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInGetResponses.setDescription('Total number of GetResponse PDUs accepted and processed')
wfSnmpInTraps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpInTraps.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpInTraps.setDescription('Total number of Trap PDUs accepted and processed')
wfSnmpOutTooBigs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutTooBigs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutTooBigs.setDescription("Total number of PDUs generated by the agent with ErrorStatus= 'tooBig")
wfSnmpOutNoSuchNames = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutNoSuchNames.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutNoSuchNames.setDescription("Total number of PDUs generated by the agent with ErrorStatus= 'noSuchName")
wfSnmpOutBadValues = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutBadValues.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutBadValues.setDescription("Total number of PDUs generated by the agent with ErrorStatus= 'badValue")
wfSnmpOutReadOnlys = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutReadOnlys.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutReadOnlys.setDescription("Total number of PDUs generated by the agent with ErrorStatus= 'readOnly")
wfSnmpOutGenErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutGenErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutGenErrs.setDescription("Total number of PDUs generated by the agent with ErrorStatus= 'genErr")
wfSnmpOutGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutGetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutGetRequests.setDescription('Total number of Get-Request PDUs generated by the agent')
wfSnmpOutGetNexts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutGetNexts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutGetNexts.setDescription('Total number of Get-Next-Request PDUs generated by the agent')
wfSnmpOutSetRequests = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutSetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutSetRequests.setDescription('Total number of Set-Request PDUs generated by the agent')
wfSnmpOutGetResponses = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutGetResponses.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutGetResponses.setDescription('Total number of Get-Response PDUs generated by the agent')
wfSnmpOutTraps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpOutTraps.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpOutTraps.setDescription('Total number of Trap PDUs generated by the agent')
wfSnmpEnableAuthTraps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpEnableAuthTraps.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpEnableAuthTraps.setDescription('Idicates whether agent can generate Authentication Failure Traps')
wfSnmpTrapDebug = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapDebug.setStatus('obsolete')
if mibBuilder.loadTexts: wfSnmpTrapDebug.setDescription('This attribute controls the specific trap filter for debug messages')
wfSnmpTrapTrace = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapTrace.setStatus('obsolete')
if mibBuilder.loadTexts: wfSnmpTrapTrace.setDescription('This attribute controls the specific trap filter for trace messages')
wfSnmpTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapInfo.setStatus('obsolete')
if mibBuilder.loadTexts: wfSnmpTrapInfo.setDescription('This attribute controls the specific trap filter for informational messages')
wfSnmpTrapWarn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapWarn.setStatus('obsolete')
if mibBuilder.loadTexts: wfSnmpTrapWarn.setDescription('This attribute controls the specific trap filter for warning messages')
wfSnmpTrapFault = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapFault.setStatus('obsolete')
if mibBuilder.loadTexts: wfSnmpTrapFault.setDescription('This attribute controls the specific trap filter for fault messages')
wfSnmpIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reliability", 2))).clone('reliability')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpIpTos.setStatus('obsolete')
if mibBuilder.loadTexts: wfSnmpIpTos.setDescription('The Type Of Service value set in the IP datagram specifies to the Internet transport layer how the datagram should be handled. For SNMP high reliability Type Of Service is important.')
wfSnmpPropEncryption = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wflt", 1), ("others", 2))).clone('wflt')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpPropEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpPropEncryption.setDescription('The encryption algorithm to use in proprietary security')
wfSnmpPDUThreads = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 20)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpPDUThreads.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpPDUThreads.setDescription('The number of EMANATE Master Agent PDU thread gates')
wfSnmpBusyPDUThreads = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpBusyPDUThreads.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpBusyPDUThreads.setDescription('The current number of busy EMANATE Master Agent PDU thread gates')
wfSnmpLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("apall", 1), ("aperror", 2), ("apwarn", 3), ("aptrace", 4), ("aptraceerr", 5), ("aptracewarn", 6), ("aperrwarn", 7), ("apnone", 8))).clone('apnone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpLogLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpLogLevel.setDescription('The log level enabled for EMANATE log messages')
wfSnmpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpDelete.setDescription('Create/Delete parameter. Default is created.')
wfSnmpScopeDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone('@')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpScopeDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpScopeDelimiter.setDescription('The character used to separate the naming scope from a scoped community name in the community configuration table. Note that any attempt to configure a community containing this delimiter will be rejected. further, any attempt to change the value of this object to a value which is already used in an existing community string will be rejected.')
wfSnmpMaxInPktChain = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpMaxInPktChain.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMaxInPktChain.setDescription('The maximum number of packets allowed to be processed by snmp gate in a single running state.')
wfSnmpCommTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2), )
if mibBuilder.loadTexts: wfSnmpCommTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommTable.setDescription('A table containing valid management communities')
wfSnmpCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2, 1), ).setIndexNames((0, "Wellfleet-SNMPEXT-MIB", "wfSnmpCommIndex"))
if mibBuilder.loadTexts: wfSnmpCommEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommEntry.setDescription('Information about a particular community')
wfSnmpCommDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpCommDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommDelete.setDescription('A flag to indicate community instance deletion')
wfSnmpCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpCommIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommIndex.setDescription('A unique numeric value that has a one to one correspondence with the community name')
wfSnmpCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpCommName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommName.setDescription('Community name')
wfSnmpCommAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2))).clone('read-only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpCommAccess.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommAccess.setDescription('Community access mode')
wfSnmpCommScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2, 1, 5), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpCommScopeType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommScopeType.setDescription("The type of logical entity with which this community is associated. The naming scope for this type of logical entity is accessed by appending a '@' character followed by the ascii name of the naming scope to the community string, wfsnmpCommName, of this entity. If the scope is unspecified {0 0}, then this community is assumed to be affiliated with the main naming scope.")
wfSnmpCommViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpCommViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpCommViewIndex.setDescription('Index of the view that is associated to this community.')
wfSnmpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3), )
if mibBuilder.loadTexts: wfSnmpMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrTable.setDescription('A table containing managers and their respective communities')
wfSnmpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1), ).setIndexNames((0, "Wellfleet-SNMPEXT-MIB", "wfSnmpMgrCommIndex"), (0, "Wellfleet-SNMPEXT-MIB", "wfSnmpMgrAddress"))
if mibBuilder.loadTexts: wfSnmpMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrEntry.setDescription('Information about a manager of a community')
wfSnmpMgrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpMgrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrDelete.setDescription('A flag to indicate manager instance deletion')
wfSnmpMgrCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpMgrCommIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrCommIndex.setDescription('Associates this manager with a community in the community table')
wfSnmpMgrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpMgrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrAddress.setDescription('IP Address of this manager')
wfSnmpMgrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpMgrName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrName.setDescription('A name for this manager')
wfSnmpMgrTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 5), Integer32().clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpMgrTrapPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrTrapPort.setDescription('The UDP Port on which this manager is listening for traps')
wfSnmpMgrTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("none", 1), ("generic", 2), ("specific", 4), ("all", 7))).clone('generic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpMgrTraps.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrTraps.setDescription('Allowable trap types to be sent to Manager')
wfSnmpMgrEncrSeed1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed1.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed1.setDescription('The encrypted value of the seed counter for application 1 of this manager')
wfSnmpMgrEncrSeed2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed2.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed2.setDescription('The encrypted value of the seed counter for application 2 of this manager')
wfSnmpMgrEncrSeed3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed3.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed3.setDescription('The encrypted value of the seed counter for application 3 of this manager')
wfSnmpMgrEncrSeed4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed4.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed4.setDescription('The encrypted value of the seed counter for application 4 of this manager')
wfSnmpMgrEncrSeed5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed5.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrEncrSeed5.setDescription('The encrypted value of the seed counter for application 5 of this manager')
wfSnmpMgrCircuitlessTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpMgrCircuitlessTrap.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpMgrCircuitlessTrap.setDescription('If enabled use the circuitless interface IP address as SNMP Trap source. If disabled (default), use the outgoing interface IP address as SNMP Trap source address.')
wfSnmpTrapEntityTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5), )
if mibBuilder.loadTexts: wfSnmpTrapEntityTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityTable.setDescription('A table of Entity Trap switches ; indexed by entity number and slot')
wfSnmpTrapEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1), ).setIndexNames((0, "Wellfleet-SNMPEXT-MIB", "wfSnmpTrapEntityNumber"), (0, "Wellfleet-SNMPEXT-MIB", "wfSnmpTrapEntitySlot"))
if mibBuilder.loadTexts: wfSnmpTrapEntityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityEntry.setDescription('An Entity Trap Switch Entry')
wfSnmpTrapEntityDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEntityDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityDelete.setDescription('A flag to indicate entity instance deletion')
wfSnmpTrapEntityDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEntityDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityDisable.setDescription("Enable/Disable an entity's traps.")
wfSnmpTrapEntityNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpTrapEntityNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityNumber.setDescription('Entity number')
wfSnmpTrapEntitySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpTrapEntitySlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntitySlot.setDescription('Slot number')
wfSnmpTrapEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpTrapEntityName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityName.setDescription('Entity Name')
wfSnmpTrapEntityFault = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEntityFault.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityFault.setDescription("This attribute controls the entity's fault messages. A trap will be generated when this is turned ON.")
wfSnmpTrapEntityWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEntityWarn.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityWarn.setDescription("This attribute controls the entity's warning messages. A trap will be generated when this is turned ON.")
wfSnmpTrapEntityInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEntityInfo.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityInfo.setDescription("This attribute controls the entity's info messages. A trap will be generated when this is turned ON.")
wfSnmpTrapEntityTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEntityTrace.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityTrace.setDescription("This attribute controls the entity's info messages. A trap will be generated when this is turned ON.")
wfSnmpTrapEntityDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEntityDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEntityDebug.setDescription("This attribute controls the entity's debug messages. A trap will be generated when this is turned ON. ")
wfSnmpTrapEventTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 6), )
if mibBuilder.loadTexts: wfSnmpTrapEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEventTable.setDescription('A table of Event Trap switches ; indexed by entity and event number')
wfSnmpTrapEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 6, 1), ).setIndexNames((0, "Wellfleet-SNMPEXT-MIB", "wfSnmpTrapEventEntity"), (0, "Wellfleet-SNMPEXT-MIB", "wfSnmpTrapEventNumber"))
if mibBuilder.loadTexts: wfSnmpTrapEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEventEntry.setDescription('An Event Trap Switch Entry')
wfSnmpTrapEventDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEventDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEventDelete.setDescription('Create/Delete a trap event switch.')
wfSnmpTrapEventDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpTrapEventDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEventDisable.setDescription('Enable/Disable trap.')
wfSnmpTrapEventEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpTrapEventEntity.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEventEntity.setDescription('Entity number')
wfSnmpTrapEventNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpTrapEventNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEventNumber.setDescription('Event number')
wfSnmpTrapEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpTrapEventName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpTrapEventName.setDescription('Entity name of event')
wfSnmpViewTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7), )
if mibBuilder.loadTexts: wfSnmpViewTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewTable.setDescription('Locally held information about the MIB views known to this snmp agent.')
wfSnmpViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7, 1), ).setIndexNames((0, "Wellfleet-SNMPEXT-MIB", "wfSnmpViewIndex"), (0, "Wellfleet-SNMPEXT-MIB", "wfSnmpViewSubtree"))
if mibBuilder.loadTexts: wfSnmpViewEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewEntry.setDescription('Information on a particular family of view subtrees included in or excluded from the view of an external management entity')
wfSnmpViewDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpViewDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewDelete.setDescription('Create/Delete parameter for the view.')
wfSnmpViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewIndex.setDescription("A unique value for each MIB view. The value for each MIB view must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
wfSnmpViewSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSnmpViewSubtree.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewSubtree.setDescription('A sequencial numeric value that makes each snmp view entry and its subtree view unique.')
wfSnmpViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpViewName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewName.setDescription('Ascii name of the view')
wfSnmpViewTree = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpViewTree.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewTree.setDescription('The ascii representation of the view tree. The object portion of the view tree may be represented by its character name or its numerical representation. The attribute and instance portions of the tree must be indentified by their numerical representation.')
wfSnmpViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2))).clone('included')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSnmpViewType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSnmpViewType.setDescription("The status of a particular family of view subtrees. The value `included(1)' indicates that the corresponding instances of the configured mib subtree define a family of view subtrees included in the MIB view. The value `excluded(2)' indicates that the corresponding instances of the configured mib subtree and wfSnmpViewMask define a family of view subtrees excluded from the MIB view.")
mibBuilder.exportSymbols("Wellfleet-SNMPEXT-MIB", wfSnmpMgrEncrSeed3=wfSnmpMgrEncrSeed3, wfSnmpTrapEventNumber=wfSnmpTrapEventNumber, wfSnmpInGetRequests=wfSnmpInGetRequests, wfSnmpOutPkts=wfSnmpOutPkts, wfSnmpTrapEventName=wfSnmpTrapEventName, wfSnmpMgrDelete=wfSnmpMgrDelete, wfSnmpInNoSuchNames=wfSnmpInNoSuchNames, wfSnmpInTooBigs=wfSnmpInTooBigs, wfSnmpBusyPDUThreads=wfSnmpBusyPDUThreads, wfSnmpScopeDelimiter=wfSnmpScopeDelimiter, wfSnmpOutTooBigs=wfSnmpOutTooBigs, wfSnmpTrapEntityName=wfSnmpTrapEntityName, wfSnmpMgrCircuitlessTrap=wfSnmpMgrCircuitlessTrap, wfSnmpOutReadOnlys=wfSnmpOutReadOnlys, wfSnmpTrapDebug=wfSnmpTrapDebug, wfSnmpOutSetRequests=wfSnmpOutSetRequests, wfSnmpLockAddress=wfSnmpLockAddress, wfSnmpMgrEncrSeed2=wfSnmpMgrEncrSeed2, wfSnmpTrapEntityInfo=wfSnmpTrapEntityInfo, wfSnmpDisable=wfSnmpDisable, wfSnmpCommViewIndex=wfSnmpCommViewIndex, wfSnmpTrapEventDelete=wfSnmpTrapEventDelete, wfSnmpTrapEventEntry=wfSnmpTrapEventEntry, wfSnmpCommTable=wfSnmpCommTable, wfSnmpTrapEntitySlot=wfSnmpTrapEntitySlot, wfSnmpInBadTypes=wfSnmpInBadTypes, wfSnmpTrapTrace=wfSnmpTrapTrace, wfSnmpTrapEntityWarn=wfSnmpTrapEntityWarn, wfSnmpViewEntry=wfSnmpViewEntry, wfSnmpOutGetNexts=wfSnmpOutGetNexts, wfSnmpOutBadValues=wfSnmpOutBadValues, wfSnmpTrapFault=wfSnmpTrapFault, wfSnmpTrapInfo=wfSnmpTrapInfo, wfSnmpInTotalReqVars=wfSnmpInTotalReqVars, wfSnmpOutNoSuchNames=wfSnmpOutNoSuchNames, wfSnmpOutGetResponses=wfSnmpOutGetResponses, wfSnmpMgrTraps=wfSnmpMgrTraps, wfSnmpTrapEntityDisable=wfSnmpTrapEntityDisable, wfSnmpViewName=wfSnmpViewName, wfSnmpLogLevel=wfSnmpLogLevel, wfSnmpCommIndex=wfSnmpCommIndex, wfSnmpMgrAddress=wfSnmpMgrAddress, wfSnmpViewSubtree=wfSnmpViewSubtree, wfSnmpOutGetRequests=wfSnmpOutGetRequests, wfSnmpInBadCommunityUses=wfSnmpInBadCommunityUses, wfSnmpDelete=wfSnmpDelete, wfSnmpAuth=wfSnmpAuth, wfSnmpInBadVersions=wfSnmpInBadVersions, wfSnmpTrapEventEntity=wfSnmpTrapEventEntity, wfSnmpInSetRequests=wfSnmpInSetRequests, wfSnmpPropEncryption=wfSnmpPropEncryption, wfSnmpCommName=wfSnmpCommName, wfSnmpViewIndex=wfSnmpViewIndex, wfSnmpOutTraps=wfSnmpOutTraps, wfSnmpViewDelete=wfSnmpViewDelete, wfSnmpLockTimeOut=wfSnmpLockTimeOut, wfSnmpTrapEntityFault=wfSnmpTrapEntityFault, wfSnmpTrapEntityDebug=wfSnmpTrapEntityDebug, wfSnmpCommDelete=wfSnmpCommDelete, wfSnmpTrapEntityEntry=wfSnmpTrapEntityEntry, wfSnmpPDUThreads=wfSnmpPDUThreads, wfSnmpTrapEntityTable=wfSnmpTrapEntityTable, wfSnmpInGetResponses=wfSnmpInGetResponses, wfSnmp=wfSnmp, wfSnmpMaxInPktChain=wfSnmpMaxInPktChain, wfSnmpInReadOnlys=wfSnmpInReadOnlys, wfSnmpCommEntry=wfSnmpCommEntry, wfSnmpMgrEncrSeed5=wfSnmpMgrEncrSeed5, wfSnmpInBadCommunityNames=wfSnmpInBadCommunityNames, wfSnmpMgrEncrSeed1=wfSnmpMgrEncrSeed1, wfSnmpInTotalSetVars=wfSnmpInTotalSetVars, wfSnmpTrapEntityNumber=wfSnmpTrapEntityNumber, wfSnmpTrapEntityDelete=wfSnmpTrapEntityDelete, wfSnmpInBadValues=wfSnmpInBadValues, wfSnmpIpTos=wfSnmpIpTos, wfSnmpTrapEventDisable=wfSnmpTrapEventDisable, wfSnmpTrapEntityTrace=wfSnmpTrapEntityTrace, wfSnmpViewTable=wfSnmpViewTable, wfSnmpTrapWarn=wfSnmpTrapWarn, wfSnmpMgrName=wfSnmpMgrName, wfSnmpUseLock=wfSnmpUseLock, wfSnmpOutGenErrs=wfSnmpOutGenErrs, wfSnmpMgrTable=wfSnmpMgrTable, wfSnmpViewType=wfSnmpViewType, wfSnmpMgrEncrSeed4=wfSnmpMgrEncrSeed4, wfSnmpCommAccess=wfSnmpCommAccess, wfSnmpMgrCommIndex=wfSnmpMgrCommIndex, wfSnmpInGetNexts=wfSnmpInGetNexts, wfSnmpMgrEntry=wfSnmpMgrEntry, wfSnmpCommScopeType=wfSnmpCommScopeType, wfSnmpInTraps=wfSnmpInTraps, wfSnmpInGenErrs=wfSnmpInGenErrs, wfSnmpMgrTrapPort=wfSnmpMgrTrapPort, wfSnmpTrapEventTable=wfSnmpTrapEventTable, wfSnmpInPkts=wfSnmpInPkts, wfSnmpInASNParseErrs=wfSnmpInASNParseErrs, wfSnmpViewTree=wfSnmpViewTree, wfSnmpEnableAuthTraps=wfSnmpEnableAuthTraps)
