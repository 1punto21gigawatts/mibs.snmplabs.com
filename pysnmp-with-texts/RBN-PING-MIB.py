#
# PySNMP MIB module RBN-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
pingResultsEntry, pingCtlTestName, pingCtlEntry, pingCtlOwnerIndex = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingResultsEntry", "pingCtlTestName", "pingCtlEntry", "pingCtlOwnerIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, iso, ObjectIdentity, TimeTicks, Counter32, MibIdentifier, IpAddress, Unsigned32, Bits, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "iso", "ObjectIdentity", "TimeTicks", "Counter32", "MibIdentifier", "IpAddress", "Unsigned32", "Bits", "Gauge32", "NotificationType")
DateAndTime, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString", "TruthValue")
rbnPingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 46))
rbnPingMib.setRevisions(('2008-07-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnPingMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: rbnPingMib.setLastUpdated('200807300000Z')
if mibBuilder.loadTexts: rbnPingMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnPingMib.setContactInfo(' Redback Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com ')
if mibBuilder.loadTexts: rbnPingMib.setDescription('This Redback MIB supplements the standard Ping MIB, namely: DISMAN-PING-MIB (RFC 4560) This module defines additional objects for creating and monitoring ping tests. All MIB objects defined in this module are viewed within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnPingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1))
rbnPingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2))
rbnPingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 3))
rbnPingGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 1))
rbnPingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2))
rbnPingControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3))
rbnPingIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4))
rbnPingNumTests = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingNumTests.setStatus('current')
if mibBuilder.loadTexts: rbnPingNumTests.setDescription('The number of entries in the pingCtlTable.')
rbnPingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 1), )
if mibBuilder.loadTexts: rbnPingResultsTable.setStatus('current')
if mibBuilder.loadTexts: rbnPingResultsTable.setDescription('This table enhances the pingResultsTable, providing additional statistics for completed ping tests.')
rbnPingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 1, 1), )
pingResultsEntry.registerAugmentions(("RBN-PING-MIB", "rbnPingResultsEntry"))
rbnPingResultsEntry.setIndexNames(*pingResultsEntry.getIndexNames())
if mibBuilder.loadTexts: rbnPingResultsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnPingResultsEntry.setDescription('A conceptual row in the rbnPingResultsTable.')
rbnPingResultsJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 1, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingResultsJitter.setStatus('current')
if mibBuilder.loadTexts: rbnPingResultsJitter.setDescription('The calculated ping jitter value, which is the delta between the minimum round-trip-time (RTT) and the maximum RTT. If no RTT has been received, this object will have a value of 0.')
rbnPingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2), )
if mibBuilder.loadTexts: rbnPingHistoryTable.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryTable.setDescription('Defines a table for storing the results of ping tests. This is essentially a mirror of the pingResultsTable, with the addition of an index object. The number of entries in this table is limited per entry in the pingCtlTable by the value of the corresponding rbnPingCtlMaxHistoryRows object. An entry in this table is created when a ping test completes. The initial 2 instance identifier index values identify the pingCtlEntry that these test results belong to. An entry is removed from the table when its corresponding pingCtlEntry is deleted. The oldest entry in this table for a corresponding entry in the pingCtlTable will be removed to allow the addition of a new entry once the number of rows in this table reaches the value specified by the rbnPingCtlMaxHistory for the corresponding entry in the rbnPingCtlTable.')
rbnPingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"), (0, "RBN-PING-MIB", "rbnPingHistoryIndex"))
if mibBuilder.loadTexts: rbnPingHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryEntry.setDescription('A conceptual row in the rbnPingHistoryTable.')
rbnPingHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnPingHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryIndex.setDescription("An entry in this table is created when a ping test completes. The initial 2 instance identifier index values identify the pingCtlEntry that these results belongs to. rbnPingHistoryIndex will be assigned values starting at 1 and will wrap after exceeding the maximum possible value ('ffffffff'h).")
rbnPingHistoryIpTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 2), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryIpTargetAddressType.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryIpTargetAddressType.setDescription('This object indicates the type of address stored in the corresponding pingResultsIpTargetAddress object.')
rbnPingHistoryIpTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 3), InetAddress().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryIpTargetAddress.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryIpTargetAddress.setDescription('This object reports the IP address associated with a pingCtlTargetAddress value when the destination address is specified as a DNS name. The value of this object should be a zero-length octet string when a DNS name is not specified or when a specified DNS name fails to resolve. The address type (InetAddressType) that relates to this object is specified by the corresponding value of pingResultsIpTargetAddressType.')
rbnPingHistoryMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryMinRtt.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryMinRtt.setDescription('The minimum ping round-trip-time (RTT) received. A value of 0 for this object implies that no RTT has been received.')
rbnPingHistoryMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 5), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryMaxRtt.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryMaxRtt.setDescription('The maximum ping round-trip-time (RTT) received. A value of 0 for this object implies that no RTT has been received.')
rbnPingHistoryAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryAverageRtt.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryAverageRtt.setDescription('The current average ping round-trip-time (RTT).')
rbnPingHistoryProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 7), Gauge32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryProbeResponses.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryProbeResponses.setDescription('Number of responses received for the corresponding pingCtlEntry and pingResultsEntry. The value of this object MUST be reported as 0 when no probe responses have been received.')
rbnPingHistorySentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 8), Gauge32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistorySentProbes.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistorySentProbes.setDescription('The value of this object reflects the number of probes sent for the corresponding pingCtlEntry and pingResultsEntry. The value of this object MUST be reported as 0 when no probes have been sent.')
rbnPingHistoryRttSumOfSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryRttSumOfSquares.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryRttSumOfSquares.setDescription('This object contains the sum of the squares for all ping responses received. Its purpose is to enable standard deviation calculation. The value of this object MUST be reported as 0 when no ping responses have been received.')
rbnPingHistoryLastGoodProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryLastGoodProbe.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryLastGoodProbe.setDescription('Date and time when the last response was received for a probe.')
rbnPingHistoryJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 2, 2, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnPingHistoryJitter.setStatus('current')
if mibBuilder.loadTexts: rbnPingHistoryJitter.setDescription('The calculated ping jitter value, which is the delta between the minimum round-trip-time (RTT) and the maximum RTT. If no RTT has been received, this object will have a value of 0.')
rbnPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3, 1), )
if mibBuilder.loadTexts: rbnPingCtlTable.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlTable.setDescription('This table enhances the pingCtlTable, providing additional options for ping tests.')
rbnPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3, 1, 1), )
pingCtlEntry.registerAugmentions(("RBN-PING-MIB", "rbnPingCtlEntry"))
rbnPingCtlEntry.setIndexNames(*pingCtlEntry.getIndexNames())
if mibBuilder.loadTexts: rbnPingCtlEntry.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlEntry.setDescription('A conceptual row in the rbnPingCtlTable.')
rbnPingCtlMaxHistoryRows = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 3, 1, 1, 1), Unsigned32().clone(12)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnPingCtlMaxHistoryRows.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlMaxHistoryRows.setDescription('The maximum number of corresponding entries allowed in the rbnPingHistoryTable. The oldest corresponding entry in the rbnPingHistoryTable will be removed to allow the addition of a new entry once the number of corresponding rows in the rbnPingHistoryTable reaches this value. When a pingCtlTable entry is removed, all corresponding entries in the rbnPingHistoryTable will also be removed. A value of 0 for this object disables creation of rbnPingHistoryTable entries.')
rbnPingCtlIpTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1), )
if mibBuilder.loadTexts: rbnPingCtlIpTable.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlIpTable.setDescription('This table enhances the pingCtlTable, providing additional options for IPv4 ping tests. These objects are ignored in conceptual rows where the pingCtlType instance does not equal pingIcmpEcho.')
rbnPingCtlIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1, 1), )
pingCtlEntry.registerAugmentions(("RBN-PING-MIB", "rbnPingCtlIpEntry"))
rbnPingCtlIpEntry.setIndexNames(*pingCtlEntry.getIndexNames())
if mibBuilder.loadTexts: rbnPingCtlIpEntry.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlIpEntry.setDescription('A conceptual row in the rbnPingCtlIpTable.')
rbnPingCtlIpDontFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnPingCtlIpDontFragment.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlIpDontFragment.setDescription("Indicates whether the dont-fragment (DF) flag should be set in the probe packet's IP header.")
rbnPingCtlIpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 46, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnPingCtlIpTtl.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlIpTtl.setDescription("Specifies a time-to-live (TTL) value to use in the probe packet's IP header.")
rbnPingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 1))
rbnPingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2))
rbnPingIpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 1, 1)).setObjects(("RBN-PING-MIB", "rbnPingGlobalsGroup"), ("RBN-PING-MIB", "rbnPingResultsGroup"), ("RBN-PING-MIB", "rbnPingCtlGroup"), ("RBN-PING-MIB", "rbnPingIpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingIpCompliance = rbnPingIpCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnPingIpCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback Ping MIB for IPv4.')
rbnPingGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 1)).setObjects(("RBN-PING-MIB", "rbnPingNumTests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingGlobalsGroup = rbnPingGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnPingGlobalsGroup.setDescription('The collection of global objects for ping tests.')
rbnPingResultsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 2)).setObjects(("RBN-PING-MIB", "rbnPingResultsJitter"), ("RBN-PING-MIB", "rbnPingHistoryIpTargetAddressType"), ("RBN-PING-MIB", "rbnPingHistoryIpTargetAddress"), ("RBN-PING-MIB", "rbnPingHistoryMinRtt"), ("RBN-PING-MIB", "rbnPingHistoryMaxRtt"), ("RBN-PING-MIB", "rbnPingHistoryAverageRtt"), ("RBN-PING-MIB", "rbnPingHistoryProbeResponses"), ("RBN-PING-MIB", "rbnPingHistorySentProbes"), ("RBN-PING-MIB", "rbnPingHistoryRttSumOfSquares"), ("RBN-PING-MIB", "rbnPingHistoryLastGoodProbe"), ("RBN-PING-MIB", "rbnPingHistoryJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingResultsGroup = rbnPingResultsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnPingResultsGroup.setDescription('The collection of objects for ping test results.')
rbnPingCtlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 3)).setObjects(("RBN-PING-MIB", "rbnPingCtlMaxHistoryRows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingCtlGroup = rbnPingCtlGroup.setStatus('current')
if mibBuilder.loadTexts: rbnPingCtlGroup.setDescription('The maximum number of corresponding entries allowed in the rbnPingHistoryTable.')
rbnPingIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 46, 2, 2, 4)).setObjects(("RBN-PING-MIB", "rbnPingCtlIpDontFragment"), ("RBN-PING-MIB", "rbnPingCtlIpTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnPingIpGroup = rbnPingIpGroup.setStatus('current')
if mibBuilder.loadTexts: rbnPingIpGroup.setDescription('The collection of objects for executing a ping test over IPv4.')
mibBuilder.exportSymbols("RBN-PING-MIB", rbnPingIp=rbnPingIp, rbnPingHistoryEntry=rbnPingHistoryEntry, rbnPingIpGroup=rbnPingIpGroup, rbnPingHistoryTable=rbnPingHistoryTable, rbnPingResultsTable=rbnPingResultsTable, rbnPingNumTests=rbnPingNumTests, rbnPingCtlIpEntry=rbnPingCtlIpEntry, rbnPingResultsGroup=rbnPingResultsGroup, rbnPingCtlIpTable=rbnPingCtlIpTable, rbnPingHistoryIndex=rbnPingHistoryIndex, rbnPingHistoryIpTargetAddress=rbnPingHistoryIpTargetAddress, rbnPingResults=rbnPingResults, rbnPingGlobals=rbnPingGlobals, rbnPingHistoryLastGoodProbe=rbnPingHistoryLastGoodProbe, rbnPingConformance=rbnPingConformance, rbnPingCtlEntry=rbnPingCtlEntry, rbnPingCtlMaxHistoryRows=rbnPingCtlMaxHistoryRows, rbnPingGlobalsGroup=rbnPingGlobalsGroup, rbnPingHistoryIpTargetAddressType=rbnPingHistoryIpTargetAddressType, rbnPingResultsEntry=rbnPingResultsEntry, rbnPingCtlGroup=rbnPingCtlGroup, rbnPingHistoryRttSumOfSquares=rbnPingHistoryRttSumOfSquares, rbnPingCtlIpDontFragment=rbnPingCtlIpDontFragment, rbnPingCtlIpTtl=rbnPingCtlIpTtl, rbnPingIpCompliance=rbnPingIpCompliance, rbnPingGroups=rbnPingGroups, rbnPingMib=rbnPingMib, PYSNMP_MODULE_ID=rbnPingMib, rbnPingResultsJitter=rbnPingResultsJitter, rbnPingHistoryJitter=rbnPingHistoryJitter, rbnPingCompliances=rbnPingCompliances, rbnPingObjects=rbnPingObjects, rbnPingCtlTable=rbnPingCtlTable, rbnPingControl=rbnPingControl, rbnPingHistoryAverageRtt=rbnPingHistoryAverageRtt, rbnPingHistoryMinRtt=rbnPingHistoryMinRtt, rbnPingHistorySentProbes=rbnPingHistorySentProbes, rbnPingHistoryProbeResponses=rbnPingHistoryProbeResponses, rbnPingNotifications=rbnPingNotifications, rbnPingHistoryMaxRtt=rbnPingHistoryMaxRtt)
