#
# PySNMP MIB module Juniper-HTTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-HTTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:02:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Bits, Counter64, Gauge32, TimeTicks, iso, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Bits", "Counter64", "Gauge32", "TimeTicks", "iso", "ObjectIdentity", "Counter32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
juniHttpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78))
juniHttpMIB.setRevisions(('2005-08-22 15:51',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniHttpMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniHttpMIB.setLastUpdated('200508221551Z')
if mibBuilder.loadTexts: juniHttpMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniHttpMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniHttpMIB.setDescription('The HTTP MIB for Juniper Networks enterprise.')
juniHttpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1))
juniHttpDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 1))
juniHttpDaemonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2))
juniHttpInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 3))
juniHttpDaemonRowStatus = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniHttpDaemonRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy A corresponding entry in ifTable/ifXTable/juniIfTable is created or destroyed as a result of creating or destroying an entry in this table.')
juniHttpDaemonAccessListName = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniHttpDaemonAccessListName.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonAccessListName.setDescription('This object is a 32 byte string that indentifies the access list.')
juniHttpDaemonPort = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 1, 3), Integer32().clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniHttpDaemonPort.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonPort.setDescription('This port number that the HTTP server will serve requests from.')
juniHttpDaemonSameAddressLimit = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 1, 4), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniHttpDaemonSameAddressLimit.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonSameAddressLimit.setDescription('The number of connections that the server will open for requests from the same address.')
juniHttpDaemonStatsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsEnabled.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsEnabled.setDescription('Count of the number of times the server has been enabled.')
juniHttpDaemonStatsDisabled = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsDisabled.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsDisabled.setDescription('Count of the number of times the server has been disabled.')
juniHttpDaemonStatsSameHost = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsSameHost.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsSameHost.setDescription('Count of the number of times the server has not created a connection due to same host client address limit.')
juniHttpDaemonStatsAccDeny = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsAccDeny.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsAccDeny.setDescription('Count of the number of times the server has not created a connection due to policy access table deny.')
juniHttpDaemonStatsNoResource = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsNoResource.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsNoResource.setDescription('Count of the number of times the server has not created a connection due to no resources available.')
juniHttpDaemonStatsCreate = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsCreate.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsCreate.setDescription('Count of the number of connections created.')
juniHttpDaemonStatsRemove = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsRemove.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsRemove.setDescription('Count of the number of connections removed.')
juniHttpDaemonStatsAged = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsAged.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsAged.setDescription('Count of the number of connections removed due to connection age limits.')
juniHttpDaemonStatsServed = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsServed.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsServed.setDescription('Count of the number of successful html requests served.')
juniHttpDaemonStatsHtmlError = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsHtmlError.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsHtmlError.setDescription('Count of the number malformed html requests.')
juniHttpDaemonStatsUnknownUrl = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniHttpDaemonStatsUnknownUrl.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsUnknownUrl.setDescription('Count of the number of requests for unknown urls.')
juniHttpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 3, 1), )
if mibBuilder.loadTexts: juniHttpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: juniHttpInterfaceTable.setDescription('The table listing the interfaces on which HTTP is enabled.')
juniHttpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 3, 1, 1), ).setIndexNames((0, "Juniper-HTTP-MIB", "juniHttpInterfaceIndex"))
if mibBuilder.loadTexts: juniHttpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: juniHttpInterfaceEntry.setDescription('An entry representing an interface on which HTTP is configured.')
juniHttpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniHttpInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: juniHttpInterfaceIndex.setDescription('The ifIndex value of the interface for which HTTP services are enabled.')
juniHttpInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniHttpInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniHttpInterfaceRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy A corresponding entry in ifTable/ifXTable/juniIfTable is created or destroyed as a result of creating or destroying an entry in this table.')
juniHttpInterfaceRedirectUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniHttpInterfaceRedirectUrl.setStatus('current')
if mibBuilder.loadTexts: juniHttpInterfaceRedirectUrl.setDescription('This object is a 64 byte string that will be used as the redirect URL when requests arrive at the HTTP server over the Ip Interface configured.')
juniHttpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 4))
juniHttpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 4, 1))
juniHttpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 4, 2))
juniHttpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 4, 1, 1)).setObjects(("Juniper-HTTP-MIB", "juniHttpDaemonGroup"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsGroup"), ("Juniper-HTTP-MIB", "juniHttpInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniHttpCompliance = juniHttpCompliance.setStatus('current')
if mibBuilder.loadTexts: juniHttpCompliance.setDescription('The compliance statement for entities that implement the Juniper HTTP MIB.')
juniHttpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 4, 2, 1)).setObjects(("Juniper-HTTP-MIB", "juniHttpDaemonRowStatus"), ("Juniper-HTTP-MIB", "juniHttpDaemonAccessListName"), ("Juniper-HTTP-MIB", "juniHttpDaemonPort"), ("Juniper-HTTP-MIB", "juniHttpDaemonSameAddressLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniHttpGroup = juniHttpGroup.setStatus('current')
if mibBuilder.loadTexts: juniHttpGroup.setDescription('A collection of objects providing management of HTTP services in a Juniper product.')
juniHttpDaemonStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 4, 2, 2)).setObjects(("Juniper-HTTP-MIB", "juniHttpDaemonStatsEnabled"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsDisabled"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsSameHost"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsAccDeny"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsNoResource"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsCreate"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsRemove"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsAged"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsServed"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsHtmlError"), ("Juniper-HTTP-MIB", "juniHttpDaemonStatsUnknownUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniHttpDaemonStatsGroup = juniHttpDaemonStatsGroup.setStatus('current')
if mibBuilder.loadTexts: juniHttpDaemonStatsGroup.setDescription('A collection of objects providing management of HTTP interfaces in a Juniper product.')
juniHttpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 78, 4, 2, 3)).setObjects(("Juniper-HTTP-MIB", "juniHttpInterfaceRowStatus"), ("Juniper-HTTP-MIB", "juniHttpInterfaceRedirectUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniHttpInterfaceGroup = juniHttpInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: juniHttpInterfaceGroup.setDescription('A collection of objects providing management of HTTP interfaces in a Juniper product.')
mibBuilder.exportSymbols("Juniper-HTTP-MIB", juniHttpDaemonStatsServed=juniHttpDaemonStatsServed, juniHttpDaemonStatsHtmlError=juniHttpDaemonStatsHtmlError, juniHttpDaemonRowStatus=juniHttpDaemonRowStatus, juniHttpDaemonPort=juniHttpDaemonPort, juniHttpInterfaces=juniHttpInterfaces, juniHttpCompliances=juniHttpCompliances, juniHttpDaemonStats=juniHttpDaemonStats, juniHttpDaemonAccessListName=juniHttpDaemonAccessListName, juniHttpConformance=juniHttpConformance, juniHttpCompliance=juniHttpCompliance, juniHttpDaemonStatsCreate=juniHttpDaemonStatsCreate, juniHttpObjects=juniHttpObjects, juniHttpDaemonStatsAged=juniHttpDaemonStatsAged, juniHttpInterfaceIndex=juniHttpInterfaceIndex, juniHttpInterfaceRedirectUrl=juniHttpInterfaceRedirectUrl, juniHttpDaemon=juniHttpDaemon, juniHttpDaemonStatsNoResource=juniHttpDaemonStatsNoResource, juniHttpMIB=juniHttpMIB, juniHttpDaemonStatsSameHost=juniHttpDaemonStatsSameHost, juniHttpInterfaceGroup=juniHttpInterfaceGroup, juniHttpInterfaceRowStatus=juniHttpInterfaceRowStatus, juniHttpDaemonSameAddressLimit=juniHttpDaemonSameAddressLimit, juniHttpDaemonStatsUnknownUrl=juniHttpDaemonStatsUnknownUrl, juniHttpDaemonStatsRemove=juniHttpDaemonStatsRemove, juniHttpDaemonStatsDisabled=juniHttpDaemonStatsDisabled, juniHttpGroup=juniHttpGroup, juniHttpGroups=juniHttpGroups, PYSNMP_MODULE_ID=juniHttpMIB, juniHttpDaemonStatsEnabled=juniHttpDaemonStatsEnabled, juniHttpDaemonStatsAccDeny=juniHttpDaemonStatsAccDeny, juniHttpInterfaceEntry=juniHttpInterfaceEntry, juniHttpDaemonStatsGroup=juniHttpDaemonStatsGroup, juniHttpInterfaceTable=juniHttpInterfaceTable)
