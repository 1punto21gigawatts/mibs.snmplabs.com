#
# PySNMP MIB module Fore-Funi-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Funi-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
frameInternetworking, = mibBuilder.importSymbols("Fore-Common-MIB", "frameInternetworking")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Counter64, iso, NotificationType, ObjectIdentity, IpAddress, TimeTicks, Unsigned32, Bits, MibIdentifier, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Counter64", "iso", "NotificationType", "ObjectIdentity", "IpAddress", "TimeTicks", "Unsigned32", "Bits", "MibIdentifier", "ModuleIdentity", "Counter32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
funi = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 16, 6))
if mibBuilder.loadTexts: funi.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: funi.setOrganization('FORE')
if mibBuilder.loadTexts: funi.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: funi.setDescription('write something interesting here')
funiConnTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1), )
if mibBuilder.loadTexts: funiConnTable.setStatus('current')
if mibBuilder.loadTexts: funiConnTable.setDescription('Table of cross connections between FUNI and ATM connections')
funiConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1), ).setIndexNames((0, "Fore-Funi-MIB", "funiConnFuniServiceIfIndex"), (0, "Fore-Funi-MIB", "funiConnFuniVpi"), (0, "Fore-Funi-MIB", "funiConnFuniVci"))
if mibBuilder.loadTexts: funiConnEntry.setStatus('current')
if mibBuilder.loadTexts: funiConnEntry.setDescription('Entry in the FUNI/atm netmod crossconnect table')
funiConnFuniServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiConnFuniServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: funiConnFuniServiceIfIndex.setDescription('Interface index of the FUNI service this connection exists on')
funiConnFuniVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiConnFuniVpi.setStatus('current')
if mibBuilder.loadTexts: funiConnFuniVpi.setDescription('VPI of this connection on the FUNI service')
funiConnFuniVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiConnFuniVci.setStatus('current')
if mibBuilder.loadTexts: funiConnFuniVci.setDescription('VCI of this connection on the FUNI service')
funiConnFabricServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiConnFabricServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: funiConnFabricServiceIfIndex.setDescription('This is the IfIndex associated with the pseudo atm service this connection is mapped to by the agent when this FUNI connection is created. This IfIndex can be converted to a BNP notation value through the IfIndexMapTable of the fore-switch MIB. This ifIndex will be stacked on top of the portIfIndex for a port. That BNP value can be used to establish a connection across the switching fabric by means of the FORE-switch MIB.')
funiConnFabricVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiConnFabricVpi.setStatus('current')
if mibBuilder.loadTexts: funiConnFabricVpi.setDescription('This is the Fabric VPI of the ATM connection this FUNI connection is mapped to by the agent when this row is created. This VPI will be used to establish a connection across the switching fabric by means of the FORE-switch MIB')
funiConnFabricVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiConnFabricVci.setStatus('current')
if mibBuilder.loadTexts: funiConnFabricVci.setDescription('This is the Fabric VCI of the ATM connection this FUNI connection is mapped to by the agent when this row is created. This VCI will be used to establish a connection across the switching fabric by means of the FORE-switch MIB')
funiConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: funiConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: funiConnRowStatus.setDescription("This object is used for dynamic creation of entries in this table. When the record is created, it is set to createAndWait, when the second hop of the connection is established across the fabric, this object's value is changed to go, which activates the IWF on the netmod")
funiConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: funiConnName.setStatus('current')
if mibBuilder.loadTexts: funiConnName.setDescription('Symbolic name assigned to this connection by the operator')
funiConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: funiConnAdminStatus.setStatus('current')
if mibBuilder.loadTexts: funiConnAdminStatus.setDescription('Indicates whether the particular virtual circuit is operational.')
funiConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiConnOperStatus.setStatus('current')
if mibBuilder.loadTexts: funiConnOperStatus.setDescription('Indicates the current operational status of a virtual circuit.')
funiConnProfileEpdPpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: funiConnProfileEpdPpdIndex.setStatus('current')
if mibBuilder.loadTexts: funiConnProfileEpdPpdIndex.setDescription('The index of the EpdPpd Controller profile which contains: 1 ) Enable/disable the EPD for CLP=0 cells for a specific connection; 2 ) Enable/disable the EPD for CLP=1 cells for a specific connection; 3 ) Enable/disable the PPD for CLP=1 cells for a specific connection.')
funiIfExtTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2), )
if mibBuilder.loadTexts: funiIfExtTable.setStatus('current')
if mibBuilder.loadTexts: funiIfExtTable.setDescription('This table incorporates the information pertinent to FUNI services, which is not part of the standard FUNI mib. ')
funiIfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: funiIfExtEntry.setStatus('current')
if mibBuilder.loadTexts: funiIfExtEntry.setDescription('Entry in the extended FUNI Interface table')
funiIfExtProfileFuniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfExtProfileFuniIndex.setStatus('current')
if mibBuilder.loadTexts: funiIfExtProfileFuniIndex.setDescription('This is index of the FUNI profile this service is supposed to be using. This index should be used as a key in profileFuniTable')
funiIfExtProfileServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfExtProfileServiceIndex.setStatus('current')
if mibBuilder.loadTexts: funiIfExtProfileServiceIndex.setDescription('This is index of the Generic Service profile this service is supposed to be using. This index should be used as a key in profileGenServiceTable')
funiIfExtStatsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfExtStatsMonitor.setStatus('current')
if mibBuilder.loadTexts: funiIfExtStatsMonitor.setDescription('This object specifies whether statistics are to be counted at a service level, this includes service and connection statistics. When the state changes from enabled to disabled all the related statistics will be frozen at their current value. When the state changes from disabled to enabled then all related statistics will be reset (zeroised). Note that this Monitor is overriden by the netmod level nmFramStatsMonitor. Refer to fore-fram.mib for more details. ')
funiIfExtNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: funiIfExtNeighborIpAddress.setStatus('current')
if mibBuilder.loadTexts: funiIfExtNeighborIpAddress.setDescription('The IP address of the neighbor system connected to the far end of this interface, to which a Network Management Station can send SNMP messages, as IP datagrams sent to UDP port 161, in order to access network management information concerning the operation of that system. Note that the value of this object may be obtained in different ways, e.g., by manual configuration, or through ILMI interaction with the neighbor system.This object is a mirror of atmInterfaceMyNeighborIpAddress from the ATM MIB')
funiIfExtStatsEnabledTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfExtStatsEnabledTimeStamp.setStatus('current')
if mibBuilder.loadTexts: funiIfExtStatsEnabledTimeStamp.setDescription('This object reflects the point in time, with reference to sysUpTime, either when funIfExtStatsMonitor is set to enabled or when nmFramStatsMonitor is set to enabled. The time will reflect the last StatsMonitor to be enabled. The timestamp provides a starting timestamp for the current statistics that are being counted. ')
funiIfExtSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 16, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("nonexist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: funiIfExtSigStatus.setStatus('current')
if mibBuilder.loadTexts: funiIfExtSigStatus.setDescription('This object indicates whether there exists a FUNI signalling instance associated with the FUNI service. The possible value for this object is summarized as follows: FUNI Signalling Support Possible Value of this object =============================================================== disabled nonexist(2) _______________________________________________________________ enabled exist(1) nonexist(2) _______________________________________________________________ ')
mibBuilder.exportSymbols("Fore-Funi-MIB", funiIfExtProfileFuniIndex=funiIfExtProfileFuniIndex, funiConnEntry=funiConnEntry, funiConnFabricVci=funiConnFabricVci, funi=funi, funiIfExtTable=funiIfExtTable, funiConnFuniServiceIfIndex=funiConnFuniServiceIfIndex, funiConnOperStatus=funiConnOperStatus, funiConnRowStatus=funiConnRowStatus, funiIfExtStatsMonitor=funiIfExtStatsMonitor, funiConnTable=funiConnTable, funiConnName=funiConnName, funiConnAdminStatus=funiConnAdminStatus, funiIfExtEntry=funiIfExtEntry, funiConnFuniVpi=funiConnFuniVpi, funiConnFabricServiceIfIndex=funiConnFabricServiceIfIndex, funiConnProfileEpdPpdIndex=funiConnProfileEpdPpdIndex, funiConnFabricVpi=funiConnFabricVpi, PYSNMP_MODULE_ID=funi, funiConnFuniVci=funiConnFuniVci, funiIfExtSigStatus=funiIfExtSigStatus, funiIfExtProfileServiceIndex=funiIfExtProfileServiceIndex, funiIfExtStatsEnabledTimeStamp=funiIfExtStatsEnabledTimeStamp, funiIfExtNeighborIpAddress=funiIfExtNeighborIpAddress)
