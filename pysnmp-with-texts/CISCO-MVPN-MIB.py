#
# PySNMP MIB module CISCO-MVPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MVPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
mplsVpnVrfName, MplsVpnRouteDistinguisher = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName", "MplsVpnRouteDistinguisher")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Integer32, TimeTicks, ObjectIdentity, MibIdentifier, NotificationType, IpAddress, Counter64, Unsigned32, Counter32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Integer32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "NotificationType", "IpAddress", "Counter64", "Unsigned32", "Counter32", "iso", "Gauge32")
TimeStamp, DisplayString, TextualConvention, TruthValue, RowStatus, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "TimeInterval")
ciscoMvpnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 113))
ciscoMvpnMIB.setRevisions(('2004-02-23 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMvpnMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: ciscoMvpnMIB.setLastUpdated('200402231200Z')
if mibBuilder.loadTexts: ciscoMvpnMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMvpnMIB.setContactInfo(' Cisco Systems, Inc. 170 Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS EMail: cs-ipmulticast@cisco.com')
if mibBuilder.loadTexts: ciscoMvpnMIB.setDescription('This MIB contains managed object definitions for Cisco implementation of multicast in VPNs defined by the Internet draft: draft-rosen-vpn-mcast-05.txt. Note that this MIB works along with the L3VPN-MPLS-VPN-MIB.')
ciscoMvpnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 0))
ciscoMvpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 1))
ciscoMvpnScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 1))
ciscoMvpnGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 2))
ciscoMvpnConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3))
ciscoMvpnProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4))
ciscoMvpnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 2))
ciscoMvpnMvrfNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMvrfNumber.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMvrfNumber.setDescription('The number of MVRFs that are present in this device.')
ciscoMvpnNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoMvpnNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnNotificationEnable.setDescription('If this object is TRUE, then the generation of all notifications defined in this MIB is enabled.')
ciscoMvpnGenericTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoMvpnGenericTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnGenericTable.setDescription('This table gives the generic information about the MVRFs present in this device.')
ciscoMvpnGenericEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"))
if mibBuilder.loadTexts: ciscoMvpnGenericEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnGenericEntry.setDescription('An entry in this table is created for every MVRF in the device. Note that many implementations may have MVRF for global VRF (VRF0) by default in the device. Also note that existence of the correspoding VRF in L3VPN-MPLS-VPN-MIB is necessary for a row to exist in this table. Deletion of corresponding VRF in L3VPN-MPLS-VPN-MIB also results in deletion of a row here. But deletion of a row ie deletion of a MVRF here does not result in the deletion of the corresponding VRF in L3VPN-MPLS-VPN-MIB.')
ciscoMvpnGenOperStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createdMvrf", 1), ("deletedMvrf", 2), ("modifiedMvrfDefMdtConfig", 3), ("modifiedMvrfDataMdtConfig", 4))).clone('createdMvrf')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnGenOperStatusChange.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnGenOperStatusChange.setDescription('This object describes the last operational change that happened for the given MVRF. createdMvrf - indicates that the MVRF was created in the device. deletedMvrf - indicates that the MVRF was deleted from the device. A row in this table will never have ciscoMvpnGenOperStatusChange equal to deletedMvrf(2), because in that case the row itself will be deleted from the table. This value for ciscoMvpnGenOperStatusChange is defined mainly for use in ciscoMvpnMvrfChange notification. modifiedMvrfDefMdtConfig - indicates that the default MDT group for the MVRF was configured, deleted or changed. modifiedMvrfDataMdtConfig - indicates that the data MDT group range or a associated variable (like the threshold) for the MVRF was configured, deleted or changed.')
ciscoMvpnGenOperChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 2, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnGenOperChangeTime.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnGenOperChangeTime.setDescription('The time at which the last operational change for the MVRF in question took place. The last operational change is specified by ciscoMvpnGenOperStatusChange.')
ciscoMvpnGenAssociatedInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnGenAssociatedInterfaces.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnGenAssociatedInterfaces.setDescription('Total number of interfaces associated with this MVRF (including the MDT tunnel interface) with ifOperStatus = up(1).')
ciscoMvpnGenRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnGenRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnGenRowStatus.setDescription('This variable is used to create or delete a row in this table.')
ciscoMvpnMdtDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultTable.setDescription('This table specifies the default MDT address and the encapsulation type used for a MVRF instance.')
ciscoMvpnMdtDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"))
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultEntry.setDescription('An entry in this table is created for every MVRF for which a default MDT group is configured. A MVRF which does not have a default MDT group configured will not appear in this table. Creation of a row in this table is the equivalent of configuring default MDT address for the given MVRF. Deletion of a row in this table is the equivalent of deconfiguring default MDT address for the given MVRF.')
ciscoMvpnMdtDefaultAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 1, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultAddrType.setDescription('The Internet address type of ciscoMvpnMdtDefaultAddress.')
ciscoMvpnMdtDefaultAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 1, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultAddress.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultAddress.setDescription('The default MDT address to be used for the MVRF in question.')
ciscoMvpnMdtEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("greIp", 1), ("ipIp", 2), ("mpls", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtEncapsType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtEncapsType.setDescription('The encapsulation type to be used in the MVRF in question.')
ciscoMvpnMdtDefaultRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDefaultRowStatus.setDescription('This variable is used to create, modify or delete a row in this table.')
ciscoMvpnMdtDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2), )
if mibBuilder.loadTexts: ciscoMvpnMdtDataTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataTable.setDescription('This table specifies the range of data MDT addresses and associated variables for a MVRF instance.')
ciscoMvpnMdtDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"))
if mibBuilder.loadTexts: ciscoMvpnMdtDataEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataEntry.setDescription('An entry in this table is created for every MVRF for which a data MDT group range is configured. A MVRF which does not have a data MDT group range configured will not appear in this table. Creation of a row in this table is the equivalent of configuring data MDT addresses for the given MVRF. Deletion of a row in this table is the equivalent of deconfiguring data MDT address usage in the given MVRF. Note that ciscoMvpnMdtDefaultEntry for a MVRF should be present in the device before ciscoMvpnMdtDataEntry for that MVRF can be created.')
ciscoMvpnMdtDataRangeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDataRangeAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataRangeAddrType.setDescription('The Internet address type of ciscoMvpnMdtDataRangeAddress.')
ciscoMvpnMdtDataRangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDataRangeAddress.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataRangeAddress.setDescription('The data MDT group range address for the given MVRF. This along with ciscoMvpnMdtDataWildcardBits gives the pool of data MDT addresses that can be used for encapsulation in the MVRF upon data MDT switchover.')
ciscoMvpnMdtDataWildcardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDataWildcardType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataWildcardType.setDescription('The Internet address type of ciscoMvpnMdtDataWildcardBits.')
ciscoMvpnMdtDataWildcardBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDataWildcardBits.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataWildcardBits.setDescription('Wildcard bits which when used along with data MDT range address, give a pool of addresses to be used in a MVRF. For example, if ciscoMvpnMdtDataRangeAddress is 239.1.2.0 and ciscoMvpnMdtDataWildcardBits is 0.0.0.3, the possible data MDT addresses are 239.1.2.0, 239.1.2.1, 239.1.2.2 and 239.1.2.3. Note that wild card bits should be right contiguous.')
ciscoMvpnMdtDataThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDataThreshold.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataThreshold.setDescription('The bandwidth threshold value which when exceeded for a multicast routing entry in the given MVRF, triggers usage of data MDT address instead of default MDT address for encapsulation.')
ciscoMvpnMdtDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoMvpnMdtDataRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtDataRowStatus.setDescription('This variable is used to create, modify or delete a row in this table.')
ciscoMvpnMrouteMdtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1), )
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtTable.setDescription('Given a multicast routing entry and the context MVRF, this table provides information about the MDT group being used for encapsulating the traffic for the multicast routing entry in the provider network at the instance of querying. Note that this table is a read-only table and is the result of the default MDT and data MDT configurations and the operational conditions like the traffic rate and sometimes, the implementation choices.')
ciscoMvpnMrouteMdtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMrouteMvrfGrpAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMrouteMvrfGroup"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMrouteMvrfSrcAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMrouteMvrfSource"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMrouteUpDownStreamInfo"))
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtEntry.setDescription('An entry in this table exists for a multicast routing entry the traffic for which is being encapsulated in a context MVRF.')
ciscoMvpnMrouteMvrfGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfGrpAddrType.setDescription('The Internet address type of ciscoMvpnMrouteMvrfGroup.')
ciscoMvpnMrouteMvrfGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfGroup.setDescription('Group adddress of multicast routing entry in question.')
ciscoMvpnMrouteMvrfSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 3), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfSrcAddrType.setDescription('The Internet address type of ciscoMvpnMrouteMvrfSource.')
ciscoMvpnMrouteMvrfSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfSource.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMvrfSource.setDescription('Source adddress of the multicast routing entry in question.')
ciscoMvpnMrouteUpDownStreamInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2))))
if mibBuilder.loadTexts: ciscoMvpnMrouteUpDownStreamInfo.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteUpDownStreamInfo.setDescription('Indicates if this PE is the upstream (sending) or the downstream (receiving) router for the multicast routing entry specified by ciscoMvpnMrouteMvrfSource and ciscoMvpnMrouteMvrfGroup in the context MVRF specified by mplsVpnVrfName. Note that there may be two rows for the same multicast routing entry if the traffic is bi-directional, one row for PE as an upstream router the other for PE as the downstream router.')
ciscoMvpnMrouteMdtGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtGrpAddrType.setDescription('The Internet address type of ciscoMvpnMrouteMdtGroup.')
ciscoMvpnMrouteMdtGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtGroup.setDescription('MDT group address used to encapsulate the multicast routing entry specified by ciscoMvpnMrouteMvrfSource and ciscoMvpnMrouteMvrfGroup in the context MVRF specified by mplsVpnVrfName.')
ciscoMvpnMrouteMdtType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mdtDefault", 1), ("mdtData", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMrouteMdtType.setDescription('Indicates the type of MDT group used for encapsulation.')
ciscoMvpnBgpMdtUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2), )
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateTable.setDescription('This table has information about the BGP advertisement of the the MDT groups. (These advertisements are generated and used for source discovery when SSM is used.)')
ciscoMvpnBgpMdtUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdGrpAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdateGroup"), (0, "CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdSrcAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdateSource"))
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateEntry.setDescription('An entry in this table is created when a BGP advertisement of the MDT group is received and cached in the PE device. An entry in this table deleted when such a cached BGP MDT update is withdrawn.')
ciscoMvpnBgpMdtUpdGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdGrpAddrType.setDescription('The Internet address type of ciscoMvpnBgpMdtUpdateGroup.')
ciscoMvpnBgpMdtUpdateGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateGroup.setDescription('MDT group address in the BGP MDT advertisement.')
ciscoMvpnBgpMdtUpdateRd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 3), MplsVpnRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateRd.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateRd.setDescription('RD (route distinguisher) in the BGP MDT advertisement. This is the RD corresponding to the originator PE.')
ciscoMvpnBgpMdtUpdSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 4), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdSrcAddrType.setDescription('The Internet address type of ciscoMvpnBgpMdtUpdateSource.')
ciscoMvpnBgpMdtUpdateSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateSource.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateSource.setDescription('MDT source address in the BGP MDT advertisement.')
ciscoMvpnBgpMdtUpdOrigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdOrigAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdOrigAddrType.setDescription('The Internet address type of ciscoMvpnBgpMdtUpdateOriginator.')
ciscoMvpnBgpMdtUpdateOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateOriginator.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateOriginator.setDescription('The BGP peering address of the device that originated (or advertized) the BGP MDT update.')
ciscoMvpnBgpMdtUpdNhAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdNhAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdNhAddrType.setDescription('The Internet address type of ciscoMvpnBgpMdtUpdateNexthop.')
ciscoMvpnBgpMdtUpdateNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 2, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateNexthop.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnBgpMdtUpdateNexthop.setDescription('The next-hop address (address of the border router to be used to reach the destination network) in the BGP MDT advertisement.')
ciscoMvpnMdtJnRcvTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3), )
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvTable.setDescription('This table has information about the data MDT join TLVs received by a device.')
ciscoMvpnMdtJnRcvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnRcvGrpAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnRcvGroup"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnRcvSrcAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnRcvSource"))
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvEntry.setDescription('An entry in this table is created or updated for every MDT data join TLV received and cached in the device. The value of mplsVpnVrfName in such an entry specifies the name of the MVRF for which the data MDT groups from the TLVs are used.')
ciscoMvpnMdtJnRcvGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvGrpAddrType.setDescription('The Internet address type of ciscoMvpnMdtJnRcvGroup.')
ciscoMvpnMdtJnRcvGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvGroup.setDescription('Data MDT group address in the MDT join TLV.')
ciscoMvpnMdtJnRcvSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3, 1, 3), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvSrcAddrType.setDescription('The Internet address type of ciscoMvpnMdtJnRcvSource.')
ciscoMvpnMdtJnRcvSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvSource.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvSource.setDescription('Source address for the MDT multicast routing entry created following the receipt of MDT join TLV.')
ciscoMvpnMdtJnRcvUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvUpTime.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvUpTime.setDescription('The time since this MDT join TLV was first received by the device.')
ciscoMvpnMdtJnRcvExpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 3, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvExpTime.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnRcvExpTime.setDescription('The amount of time remaining before the cache corresponding to this MDT join TLV is deleted from the device and the corresponding MDT multicast routing entry is marked as a non-MDT entry. Note that multiple TLVs for a data MDT group may be received by a device. Upon receipt, the expiry timer of an already existing entry is restarted and so ciscoMvpnMdtJnRcvExpTime is updated.')
ciscoMvpnMdtJnSendTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4), )
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendTable.setDescription('This table specifies the data MDT Join TLVs sent by a device.')
ciscoMvpnMdtJnSendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnSendGrpAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnSendGroup"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnSendSrcAddrType"), (0, "CISCO-MVPN-MIB", "ciscoMvpnMdtJnSendSource"))
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendEntry.setDescription('Entries in this table exist for data MDT Join TLVs that are being sent by this device to other PEs.')
ciscoMvpnMdtJnSendGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendGrpAddrType.setDescription('The Internet address type of ciscoMvpnMdtJnSendGroup.')
ciscoMvpnMdtJnSendGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendGroup.setDescription('This indicates the address of a multicast group in the MVRF specified by the column mplsVpnVrfName. This along with ciscoMvpnMdtJnSendSource identifies the multicast routing entry for which the MDT join TLV is sent.')
ciscoMvpnMdtJnSendSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1, 3), InetAddressType())
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendSrcAddrType.setDescription('The Internet address type of ciscoMvpnMdtJnSendSource.')
ciscoMvpnMdtJnSendSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendSource.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendSource.setDescription('This indicates the address of a source in the MVRF specified by the column mplsVpnVrfName. This, along with ciscoMvpnMdtJnSendGroup identifies the multicast routing entry for which the MDT join TLV is sent.')
ciscoMvpnMdtJnSendMdtGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendMdtGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendMdtGrpAddrType.setDescription('The Internet address type of ciscoMvpnMdtJnSendMdtGroup.')
ciscoMvpnMdtJnSendMdtGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendMdtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendMdtGroup.setDescription('The data MDT group in the MDT Join TLV sent.')
ciscoMvpnMdtJnSendMdtRefCt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendMdtRefCt.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMdtJnSendMdtRefCt.setDescription('Indicates how many multicast routing entries in the MVRF specified by the column mplsVpnVrfName are using ciscoMvpnMdtJnSendMdtGroup for encapsulation.')
ciscoMvpnTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 5), )
if mibBuilder.loadTexts: ciscoMvpnTunnelTable.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnTunnelTable.setDescription('This table gives information about the MVPN/MDT tunnels present in the device.')
ciscoMvpnTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ciscoMvpnTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnTunnelEntry.setDescription("An entry in this table is created for every MVPN tunnel interface present in the device. The ifType for a MVPN tunnel is 'tunnel' (131). (A MVPN tunnel interface should have relevant generic support in the IF-MIB and in the internet draft, draft-thaler-inet-tunnel-mib. Only MVPN specific aspects of such a tunnel interface are to be specified in this table.)")
ciscoMvpnTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnTunnelName.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnTunnelName.setDescription('The canonical name assigned to the tunnel. The ifName of this tunnel interface should have a value equal to ciscoMvpnTunnelName.')
ciscoMvpnTunnelMvrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 113, 1, 4, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoMvpnTunnelMvrf.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnTunnelMvrf.setDescription('Name of the MVRF that this tunnel is associated with. This object has the same value as mplsVpnVrfName for the MVRF.')
ciscoMvpnMvrfChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 113, 0, 2)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnGenOperStatusChange"))
if mibBuilder.loadTexts: ciscoMvpnMvrfChange.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMvrfChange.setDescription('A ciscoMvpnMvrfChange notification signifies a change about a MVRF in the device. The change event can be creation of the MVRF, deletion of the MVRF or an update on the default or data MDT configuration of the MVRF. The change event is indicated by ciscoMvpnGenOperStatusChange embedded in the notification. The user can then query ciscoMvpnGenericTable, ciscoMvpnMdtDefaultTable and/or ciscoMvpnMdtDataTable to get the details of the change as necessary. Note: Since the creation of a MVRF is often followed by configuration of default and data MDT groups for the MVRF, more than one (three at most) notifications for a MVRF may be generated serially, and it is really not necessary to generate all three of them. An agent may choose to generate a notification for the last event only, that is for data MDT configuration. Similarly, deletion of default or data MDT configuration on a MVRF happens before a MVRF is deleted, it is recommended that the agent send the notification for MVRF deletion event only.')
ciscoMvpnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1))
ciscoMvpnCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 2))
ciscoMvpnModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 2, 1)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnScalarGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBGenericGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtDefaultGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtDataGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMrouteMdtGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBBgpMdtUpdateGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtJnRcvGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtJnSendGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnTunnelGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnModuleFullCompliance = ciscoMvpnModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnModuleFullCompliance.setDescription('Compliance statement for agents that support read-create so that both configuration and monitoring can be accomplished via this MIB module.')
ciscoMvpnModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 2, 2)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnScalarGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBGenericGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtDefaultGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtDataGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMrouteMdtGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBBgpMdtUpdateGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtJnRcvGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMIBMdtJnSendGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnTunnelGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnModuleReadOnlyCompliance = ciscoMvpnModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnModuleReadOnlyCompliance.setDescription('Compliance statement for agents that support the monitoring of MVRFs via this MIB module.')
ciscoMvpnScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 1)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnMvrfNumber"), ("CISCO-MVPN-MIB", "ciscoMvpnNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnScalarGroup = ciscoMvpnScalarGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnScalarGroup.setDescription('Collection of scalar objects required for MVPN management.')
ciscoMvpnMIBGenericGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 2)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnGenOperStatusChange"), ("CISCO-MVPN-MIB", "ciscoMvpnGenOperChangeTime"), ("CISCO-MVPN-MIB", "ciscoMvpnGenAssociatedInterfaces"), ("CISCO-MVPN-MIB", "ciscoMvpnGenRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnMIBGenericGroup = ciscoMvpnMIBGenericGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMIBGenericGroup.setDescription('Collection of objects needed for MVPN MVRF management.')
ciscoMvpnMIBMdtDefaultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 3)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnMdtDefaultAddrType"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtDefaultAddress"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtEncapsType"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtDefaultRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnMIBMdtDefaultGroup = ciscoMvpnMIBMdtDefaultGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMIBMdtDefaultGroup.setDescription('Collection of objects needed for MVPN default MDT group management.')
ciscoMvpnMIBMdtDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 4)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnMdtDataRangeAddrType"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtDataRangeAddress"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtDataWildcardType"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtDataWildcardBits"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtDataThreshold"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtDataRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnMIBMdtDataGroup = ciscoMvpnMIBMdtDataGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMIBMdtDataGroup.setDescription('Collection of objects needed for MVPN data MDT group management.')
ciscoMvpnMIBMrouteMdtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 5)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnMrouteMdtGrpAddrType"), ("CISCO-MVPN-MIB", "ciscoMvpnMrouteMdtGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMrouteMdtType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnMIBMrouteMdtGroup = ciscoMvpnMIBMrouteMdtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMIBMrouteMdtGroup.setDescription('Collection of objects that list sources in a MVRF and the corresponding MDT groups.')
ciscoMvpnMIBBgpMdtUpdateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 6)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdateRd"), ("CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdOrigAddrType"), ("CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdateOriginator"), ("CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdNhAddrType"), ("CISCO-MVPN-MIB", "ciscoMvpnBgpMdtUpdateNexthop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnMIBBgpMdtUpdateGroup = ciscoMvpnMIBBgpMdtUpdateGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMIBBgpMdtUpdateGroup.setDescription('Collection of objects needed for MVPN BGP MDT updates related information.')
ciscoMvpnMIBMdtJnRcvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 7)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnMdtJnRcvUpTime"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtJnRcvExpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnMIBMdtJnRcvGroup = ciscoMvpnMIBMdtJnRcvGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMIBMdtJnRcvGroup.setDescription('Collection of objects needed for management of MVPN MDT data joins received by a device.')
ciscoMvpnMIBMdtJnSendGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 8)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnMdtJnSendMdtGrpAddrType"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtJnSendMdtGroup"), ("CISCO-MVPN-MIB", "ciscoMvpnMdtJnSendMdtRefCt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnMIBMdtJnSendGroup = ciscoMvpnMIBMdtJnSendGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnMIBMdtJnSendGroup.setDescription('Collection of objects needed for management of MVPN MDT data joins received by a device.')
ciscoMvpnTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 9)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnTunnelName"), ("CISCO-MVPN-MIB", "ciscoMvpnTunnelMvrf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnTunnelGroup = ciscoMvpnTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnTunnelGroup.setDescription('Objects required for MDT tunnel interface management.')
ciscoMvpnNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 113, 2, 1, 10)).setObjects(("CISCO-MVPN-MIB", "ciscoMvpnMvrfChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMvpnNotificationGroup = ciscoMvpnNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMvpnNotificationGroup.setDescription('A collection of MVPN notifications.')
mibBuilder.exportSymbols("CISCO-MVPN-MIB", ciscoMvpnMdtJnRcvGroup=ciscoMvpnMdtJnRcvGroup, ciscoMvpnMdtDefaultAddrType=ciscoMvpnMdtDefaultAddrType, ciscoMvpnMdtJnRcvTable=ciscoMvpnMdtJnRcvTable, ciscoMvpnMIBMdtDataGroup=ciscoMvpnMIBMdtDataGroup, ciscoMvpnMIB=ciscoMvpnMIB, ciscoMvpnMdtJnSendEntry=ciscoMvpnMdtJnSendEntry, ciscoMvpnModuleReadOnlyCompliance=ciscoMvpnModuleReadOnlyCompliance, ciscoMvpnCompliances=ciscoMvpnCompliances, ciscoMvpnMdtDataEntry=ciscoMvpnMdtDataEntry, ciscoMvpnGroups=ciscoMvpnGroups, ciscoMvpnMdtJnSendGroup=ciscoMvpnMdtJnSendGroup, ciscoMvpnGenericEntry=ciscoMvpnGenericEntry, ciscoMvpnConfig=ciscoMvpnConfig, ciscoMvpnTunnelName=ciscoMvpnTunnelName, ciscoMvpnNotifications=ciscoMvpnNotifications, ciscoMvpnBgpMdtUpdOrigAddrType=ciscoMvpnBgpMdtUpdOrigAddrType, ciscoMvpnConformance=ciscoMvpnConformance, ciscoMvpnNotificationEnable=ciscoMvpnNotificationEnable, ciscoMvpnMdtJnSendTable=ciscoMvpnMdtJnSendTable, ciscoMvpnMdtDataTable=ciscoMvpnMdtDataTable, ciscoMvpnScalarGroup=ciscoMvpnScalarGroup, ciscoMvpnMdtJnRcvSource=ciscoMvpnMdtJnRcvSource, ciscoMvpnNotificationGroup=ciscoMvpnNotificationGroup, ciscoMvpnGeneric=ciscoMvpnGeneric, ciscoMvpnBgpMdtUpdGrpAddrType=ciscoMvpnBgpMdtUpdGrpAddrType, ciscoMvpnMdtDataThreshold=ciscoMvpnMdtDataThreshold, ciscoMvpnBgpMdtUpdateGroup=ciscoMvpnBgpMdtUpdateGroup, ciscoMvpnMIBMrouteMdtGroup=ciscoMvpnMIBMrouteMdtGroup, ciscoMvpnMIBMdtJnRcvGroup=ciscoMvpnMIBMdtJnRcvGroup, ciscoMvpnProtocol=ciscoMvpnProtocol, ciscoMvpnMvrfChange=ciscoMvpnMvrfChange, ciscoMvpnGenAssociatedInterfaces=ciscoMvpnGenAssociatedInterfaces, ciscoMvpnMvrfNumber=ciscoMvpnMvrfNumber, ciscoMvpnMdtDefaultTable=ciscoMvpnMdtDefaultTable, ciscoMvpnMdtJnSendSource=ciscoMvpnMdtJnSendSource, ciscoMvpnMdtJnRcvExpTime=ciscoMvpnMdtJnRcvExpTime, ciscoMvpnBgpMdtUpdateEntry=ciscoMvpnBgpMdtUpdateEntry, ciscoMvpnBgpMdtUpdateRd=ciscoMvpnBgpMdtUpdateRd, ciscoMvpnScalars=ciscoMvpnScalars, ciscoMvpnMIBMdtJnSendGroup=ciscoMvpnMIBMdtJnSendGroup, ciscoMvpnGenOperStatusChange=ciscoMvpnGenOperStatusChange, ciscoMvpnGenOperChangeTime=ciscoMvpnGenOperChangeTime, ciscoMvpnMdtDataRangeAddrType=ciscoMvpnMdtDataRangeAddrType, ciscoMvpnMdtDataWildcardBits=ciscoMvpnMdtDataWildcardBits, ciscoMvpnBgpMdtUpdateSource=ciscoMvpnBgpMdtUpdateSource, ciscoMvpnTunnelMvrf=ciscoMvpnTunnelMvrf, ciscoMvpnMdtDataWildcardType=ciscoMvpnMdtDataWildcardType, ciscoMvpnMdtDataRangeAddress=ciscoMvpnMdtDataRangeAddress, ciscoMvpnMdtJnSendMdtGroup=ciscoMvpnMdtJnSendMdtGroup, ciscoMvpnTunnelEntry=ciscoMvpnTunnelEntry, ciscoMvpnMdtDataRowStatus=ciscoMvpnMdtDataRowStatus, ciscoMvpnMrouteMdtEntry=ciscoMvpnMrouteMdtEntry, ciscoMvpnMdtJnRcvEntry=ciscoMvpnMdtJnRcvEntry, ciscoMvpnMdtJnSendMdtGrpAddrType=ciscoMvpnMdtJnSendMdtGrpAddrType, ciscoMvpnObjects=ciscoMvpnObjects, ciscoMvpnMdtJnRcvSrcAddrType=ciscoMvpnMdtJnRcvSrcAddrType, ciscoMvpnMdtJnRcvUpTime=ciscoMvpnMdtJnRcvUpTime, ciscoMvpnMrouteUpDownStreamInfo=ciscoMvpnMrouteUpDownStreamInfo, ciscoMvpnMdtEncapsType=ciscoMvpnMdtEncapsType, ciscoMvpnMIBGenericGroup=ciscoMvpnMIBGenericGroup, ciscoMvpnModuleFullCompliance=ciscoMvpnModuleFullCompliance, ciscoMvpnMdtDefaultAddress=ciscoMvpnMdtDefaultAddress, ciscoMvpnMIBBgpMdtUpdateGroup=ciscoMvpnMIBBgpMdtUpdateGroup, ciscoMvpnGenRowStatus=ciscoMvpnGenRowStatus, ciscoMvpnMrouteMdtTable=ciscoMvpnMrouteMdtTable, ciscoMvpnMrouteMvrfGroup=ciscoMvpnMrouteMvrfGroup, ciscoMvpnMdtJnRcvGrpAddrType=ciscoMvpnMdtJnRcvGrpAddrType, ciscoMvpnTunnelGroup=ciscoMvpnTunnelGroup, ciscoMvpnMrouteMdtGrpAddrType=ciscoMvpnMrouteMdtGrpAddrType, ciscoMvpnBgpMdtUpdateOriginator=ciscoMvpnBgpMdtUpdateOriginator, ciscoMvpnBgpMdtUpdateNexthop=ciscoMvpnBgpMdtUpdateNexthop, ciscoMvpnMIBMdtDefaultGroup=ciscoMvpnMIBMdtDefaultGroup, ciscoMvpnBgpMdtUpdateTable=ciscoMvpnBgpMdtUpdateTable, ciscoMvpnMrouteMvrfSource=ciscoMvpnMrouteMvrfSource, PYSNMP_MODULE_ID=ciscoMvpnMIB, ciscoMvpnGenericTable=ciscoMvpnGenericTable, ciscoMvpnMrouteMdtType=ciscoMvpnMrouteMdtType, ciscoMvpnMdtJnSendGrpAddrType=ciscoMvpnMdtJnSendGrpAddrType, ciscoMvpnTunnelTable=ciscoMvpnTunnelTable, ciscoMvpnMdtDefaultRowStatus=ciscoMvpnMdtDefaultRowStatus, ciscoMvpnBgpMdtUpdNhAddrType=ciscoMvpnBgpMdtUpdNhAddrType, ciscoMvpnBgpMdtUpdSrcAddrType=ciscoMvpnBgpMdtUpdSrcAddrType, ciscoMvpnMdtDefaultEntry=ciscoMvpnMdtDefaultEntry, ciscoMvpnMrouteMvrfGrpAddrType=ciscoMvpnMrouteMvrfGrpAddrType, ciscoMvpnMrouteMvrfSrcAddrType=ciscoMvpnMrouteMvrfSrcAddrType, ciscoMvpnMrouteMdtGroup=ciscoMvpnMrouteMdtGroup, ciscoMvpnMdtJnSendSrcAddrType=ciscoMvpnMdtJnSendSrcAddrType, ciscoMvpnMdtJnSendMdtRefCt=ciscoMvpnMdtJnSendMdtRefCt)
