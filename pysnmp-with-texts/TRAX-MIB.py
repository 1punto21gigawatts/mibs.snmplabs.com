#
# PySNMP MIB module TRAX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRAX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, ModuleIdentity, Unsigned32, experimental, IpAddress, iso, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, NotificationType, Counter32, MibIdentifier, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "ModuleIdentity", "Unsigned32", "experimental", "IpAddress", "iso", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "NotificationType", "Counter32", "MibIdentifier", "Integer32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
trax = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31))
traxId = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 1))
traxIdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1), )
if mibBuilder.loadTexts: traxIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdTable.setDescription('A table that contains information that identifies the hardware and software that make up the specified Hiper TRAX card.')
traxIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxIdIndex"))
if mibBuilder.loadTexts: traxIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdEntry.setDescription('There is one entry in this table for every Hiper TRAX card in the chassis.')
traxIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdIndex.setDescription('An index that uniquely identifies the Hiper TRAX card for which this row in the table pertains. The value of this index matches the value of the index for the corresponding entity in the entity table of the chassis MIB.')
traxIdHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdHardwareSerNum.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdHardwareSerNum.setDescription("The Hiper TRAX card's hardware serial number as stored in EEPROM.")
traxIdHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdHardwareRev.setDescription('The hardware revision of the specified Hiper TRAX card as stored in its EEPROM.')
traxIdSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdSoftwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdSoftwareRev.setDescription('The revision of the software being executed in the specified Hiper TRAX card.')
traxIdCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("i80386", 1), ("i80486", 2), ("powerPC603", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdCpuType.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdCpuType.setDescription('Defines the type of CPU present on the Hiper TRAX NAC.')
traxIdRamInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdRamInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdRamInstalled.setDescription('Specifies the amount of DRAM installed on the Hiper TRAX Gateway NAC in Kbytes.')
traxIdFlashInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdFlashInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdFlashInstalled.setDescription('Specifies the amount of Flash Rom installed on the Hiper TRAX NAC in Kbytes.')
traxIdSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdSelfTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdSelfTestResult.setDescription('Displays the results of the most resent self test performed by the Hiper TRAX NAC. If all tests have passed a value of 0 is returned.')
traxIdMgmtConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxIdMgmtConnect.setStatus('mandatory')
if mibBuilder.loadTexts: traxIdMgmtConnect.setDescription('Indicates the current status of Hiper TRAX Card user interface.')
traxCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 2))
traxCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1), )
if mibBuilder.loadTexts: traxCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdTable.setDescription('The Hiper TRAX Card Command table contains an entry for each of the manageable Hiper TRAX Cards in the chassis. It provides a means through which to take specific actions on one or more Hiper TRAX cards in the NAS chassis.')
traxCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxCmdIndex"))
if mibBuilder.loadTexts: traxCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdEntry.setDescription('There is one Hiper TRAX Card Command entry per Hiper TRAX Card in the chassis.')
traxCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdIndex.setDescription("A unique value for each Hiper TRAX Card in the chassis. The value of this object matches the value of the index of the corresponding Hiper TRAX Card's entry in the entity table of the chassis MIB.")
traxCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdMgtStationId.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdMgtStationId.setDescription('This object is a generic read-write variable that a Management Station (MS) can use to guarantee that the results from a given command are the results of a command issued by that specific MS. Each MS must SET a unique value to this object')
traxCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdReqId.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdReqId.setDescription('This object contains the value of the request-id field in the SNMP PDU which invoked the current or most recent command or test on this X.25 Card. If the request-id is unknown or undefined, this object contains the value zero.')
traxCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noCommand", 1), ("saveToNVRAM", 2), ("restoreFromNVRAM", 3), ("restoreFromDefault", 4), ("nonDisruptSelfTest", 5), ("disruptSelfTest", 6), ("softwareReset", 7), ("downloadCfgFile", 8), ("uploadCfgFile", 9), ("resetStsCounters", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdFunction.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdFunction.setDescription('This object contains a value which describes the command which is being invoked.')
traxCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdForce.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdForce.setDescription('In some cases, the Hiper TRAX Card may be in a state such that certain commands could adversely affect connections. In such cases, a command request with this object not present or set to noForce will result in a warning')
traxCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCmdParam.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdParam.setDescription('This object contains parameters that are specific to the particular command being issued. In some cases, there will be no aditional parameters required.')
traxCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdResult.setDescription('This object contains the result of the most recently requested command or test, or the value none(1) if no commands have been requested since the last reset.')
traxCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 46, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 86, 87, 88, 93))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("fileTooBig", 46), ("userInterfaceActive", 58), ("badFlashRomID", 61), ("badFlashVoltage", 62), ("flashEraseError", 63), ("eraseSequenceError", 64), ("eraseExecutionError", 65), ("receiveBufferOverflow", 66), ("badProgramVoltage", 68), ("programmingDataError", 69), ("programCodeError", 70), ("invalidCodeError", 71), ("romCrcBad", 72), ("pendingSoftwareDownload", 73), ("ramCrcBad", 74), ("invalidRomId", 75), ("cardIdMismatch", 84), ("cardIdUnknown", 85), ("tftpTimeout", 86), ("flashEraseTimeout", 87), ("invalidFileHeader", 88), ("bulkTransferInProcess", 93)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCmdCode.setStatus('mandatory')
if mibBuilder.loadTexts: traxCmdCode.setDescription('The value of this object is noError(1) if the command was successful, and indicates a further description of what went wrong if it was unsuccessful.')
traxCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 3))
traxCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1), )
if mibBuilder.loadTexts: traxCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgTable.setDescription('A table of configurable parameters specific to the Hiper TRAX NAC.')
traxCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxCfgIndex"))
if mibBuilder.loadTexts: traxCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgEntry.setDescription('')
traxCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgIndex.setDescription('A unique value for each Hiper TRAX NAC installed in the chassis. The value of this index is identical to the index in the USR chassis MIB associates with the Hiper TRAX Card entity.')
traxCfgCardIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgCardIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgCardIPAddress.setDescription('Specifies the local IP address used for the Hiper TRAX Card Mgmt')
traxCfgIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgIPMask.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgIPMask.setDescription('Specifies the subnet mask for the Hiper TRAX Card')
traxCfgGatewayIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgGatewayIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgGatewayIpAddr.setDescription('Specifies Hiper TRAX gateway IP Address')
traxCfgHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgHostIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgHostIPAddr.setDescription('Specifies Hiper TRAX Cards LAN HOST IP Address')
traxCfgX25Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgX25Addr.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgX25Addr.setDescription('Specifies Hiper TRAX network address port 0 for card.')
traxCfgNicTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgNicTrapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgNicTrapDestination.setDescription('Specifies alternative trap destination for the NIC IP Port')
traxCfgReadMemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgReadMemAddr.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgReadMemAddr.setDescription('Memory Address for retrieving data')
traxCfgReadMemData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgReadMemData.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgReadMemData.setDescription('')
traxCfgReadMemLength = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgReadMemLength.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgReadMemLength.setDescription('Specifies number of byte of the ReadMemoryAddr to Read')
traxCfgWriteMemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgWriteMemAddr.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgWriteMemAddr.setDescription('Memory address for setting data')
traxCfgWriteMemLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgWriteMemLen.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgWriteMemLen.setDescription('Specifies the number of bytes of the WriteMemoryData string to write')
traxCfgWriteMemData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgWriteMemData.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgWriteMemData.setDescription('Specifies the data to be written to processor memory')
traxFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 14), Integer32())
if mibBuilder.loadTexts: traxFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: traxFailureReason.setDescription('Specifies the Failure Reason for the TRAX Traps.')
traxDNIFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: traxDNIFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: traxDNIFailureReason.setDescription('Specifies the Failure Reason for the TRAX Traps.')
traxCfgX25AddrPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxCfgX25AddrPort1.setStatus('mandatory')
if mibBuilder.loadTexts: traxCfgX25AddrPort1.setDescription('Specifies Hiper TRAX network address port 1 for card')
traxTrapEna = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 4))
traxTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1), )
if mibBuilder.loadTexts: traxTrapEnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaTable.setDescription('Table containing objects to enable traps on the Hiper TRAX Cards in the chassis.')
traxTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxTrapEnaIndex"))
if mibBuilder.loadTexts: traxTrapEnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaEntry.setDescription('There is one entry for each Hiper TRAX Card in the chassis')
traxTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxTrapEnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaIndex.setDescription('A unique index identifying the Hiper TRAX Card to which the trap enable objects pertain.')
traxTrapEnaNicMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaNicMissing.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaNicMissing.setDescription('Enables reporting of NIC missing event')
traxTrapEnaX25FrameLevelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25FrameLevelUp.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaX25FrameLevelUp.setDescription('Enables reporting of Hiper TRAX Frame Level Up Event')
traxTrapEnaX25FrameLevelDown = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25FrameLevelDown.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaX25FrameLevelDown.setDescription('Enable reporting of Hiper TRAX Frame Level Down Event')
traxTrapEnaX25PacketLevelUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25PacketLevelUp.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaX25PacketLevelUp.setDescription('Enables Hiper TRAX packet level up event')
traxTrapEnaX25PacketLevelDn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25PacketLevelDn.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaX25PacketLevelDn.setDescription('Enable Hiper TRAX Packet Level Down Event')
traxTrapEnaX25LostCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25LostCalls.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaX25LostCalls.setDescription('Enables Hiper TRAX Lost Calls Event')
traxTrapEnaX25LinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25LinkUp.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaX25LinkUp.setDescription('Enables Hiper TRAX link Up Event')
traxTrapEnaX25LinkDn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaX25LinkDn.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaX25LinkDn.setDescription('Enables Hiper TRAX Link Down Event')
traxTrapEnaDnisLookUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaDnisLookUp.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaDnisLookUp.setDescription('Enables Hiper TRAX DNI Look Up event')
traxTrapEnaSvcSetUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaSvcSetUp.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaSvcSetUp.setDescription('Enables Hiper TRAX SVC setup failed Event')
traxTrapEnaSvcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapEnaSvcAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapEnaSvcAlarm.setDescription('Enables Hiper TRAX SVC alarm event')
traxTrapDupTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: traxTrapDupTrans.setStatus('mandatory')
if mibBuilder.loadTexts: traxTrapDupTrans.setDescription('Enables Hiper TRAX duplicate transaction event')
traxVisaSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 5))
traxVisaStsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1), )
if mibBuilder.loadTexts: traxVisaStsTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaStsTable.setDescription('')
traxVisaStsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxVisaStsIndex"))
if mibBuilder.loadTexts: traxVisaStsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaStsEntry.setDescription('Entries of Hiper TRAX VISA Statistics')
traxVisaStsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaStsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaStsIndex.setDescription('Index into Hiper TRAX Visa Table')
traxVisaCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaCallCount.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaCallCount.setDescription('Number of calls in which VISA protocol was initiated')
traxVisaTransactionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaTransactionCount.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaTransactionCount.setDescription('Number of processed VISA transactions')
traxVisaRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaRetransCount.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaRetransCount.setDescription('Number of VISA retransmits to POS')
traxVisaDuplicateTransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDuplicateTransCount.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDuplicateTransCount.setDescription('Number of duplicate Visa Transactions Detected')
traxVisaDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNormal.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscNormal.setDescription('Number of Visa Calls that terminated normally')
traxVisaDiscPosRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosRequest.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscPosRequest.setDescription('Number of Visa Calls that disconnected at POS request')
traxVisaDiscHostRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostRequest.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscHostRequest.setDescription("Number of Visa Calls that disconnected at Host's request")
traxVisaDiscMaxEnqs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxEnqs.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscMaxEnqs.setDescription('Number of VISA Calls disconnected due to exceeding maximum ENQ limit')
traxVisaDiscMaxRetranToPos = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxRetranToPos.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscMaxRetranToPos.setDescription('Number of VISA calls disconnected due to excedding maximum retransmissions to POS')
traxVisaDiscMaxRetranToHost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxRetranToHost.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscMaxRetranToHost.setDescription('Number of VISA calls disconnected due to excedding maximum retransmissions to HOST')
traxVisaDiscMaxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscMaxBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscMaxBadFrames.setDescription('Number of VISA calls disconnected due to excedding maximum number of bad frames')
traxVisaDiscPosWriteTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosWriteTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscPosWriteTimeouts.setDescription('Number of VISA calls disconnected due to excedding POS write timeout')
traxVisaDiscHostWriteTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostWriteTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscHostWriteTimeouts.setDescription('Number of VISA calls disconnected due to excedding host write timeout')
traxVisaDiscSynDelayTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscSynDelayTooLong.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscSynDelayTooLong.setDescription('Number of VISA calls disconnected due to excedding SYN delay limit')
traxVisaDiscBadCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscBadCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscBadCurrentState.setDescription('Number of VISA calls disconnected due to Transaction process in wrong state')
traxVisaDiscUnexpectedEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscUnexpectedEvent.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscUnexpectedEvent.setDescription('Number of VISA calls disconnected due to occurence of an unexpected event in VISA protocol processing')
traxVisaDiscNdcLogonFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNdcLogonFailures.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscNdcLogonFailures.setDescription('Number of calls disconnected due to too NDC Logon Failures')
traxVisaDiscPosRcvTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosRcvTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscPosRcvTimeouts.setDescription('Number of calls disconnected due to POS exceeding timeout')
traxVisaDiscPosFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscPosFrameTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscPosFrameTooBig.setDescription('Number of calls disconnected due to too large frame from the POS')
traxVisaDiscHostFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostFrameTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscHostFrameTooBig.setDescription('Number of calls disconnected due to too large frame from Host')
traxVisaDiscHostRespTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscHostRespTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscHostRespTimeouts.setDescription('Number of calls disconnected due to timeout on response from the host')
traxVisaDiscNumBadMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNumBadMsg.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscNumBadMsg.setDescription('Number of calls disconnected due to bad message')
traxVisaDiscNumSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxVisaDiscNumSystem.setStatus('mandatory')
if mibBuilder.loadTexts: traxVisaDiscNumSystem.setDescription('')
traxSyncSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 6))
traxSyncStsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1), )
if mibBuilder.loadTexts: traxSyncStsTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncStsTable.setDescription('Hiper TRAX Synchronus Transaction Statistics Group')
traxSyncStsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxSyncStsIndex"))
if mibBuilder.loadTexts: traxSyncStsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncStsEntry.setDescription('')
traxSyncStsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncStsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncStsIndex.setDescription('Index for Hiper TRAX Synchronus Transaction Statistics Table')
traxSyncCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncCallCount.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncCallCount.setDescription('Number of Calls for which synchronous transaction was initiated')
traxSyncTransactionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncTransactionCount.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncTransactionCount.setDescription('Number of processed synchronous transaction')
traxSyncDiscNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscNormal.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscNormal.setDescription('Number of processed synchronous calls disconnected normally')
traxSyncDiscMaxRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscMaxRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscMaxRetrans.setDescription('Number of synchronous call disconnected due to excedding the max number of retransmissions without acknowledgments')
traxSyncDiscMaxSnrms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscMaxSnrms.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscMaxSnrms.setDescription('Number of synchronous call disconnected because link could not be initiated within SNRM limit')
traxSyncDiscHostFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscHostFrameTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscHostFrameTooBig.setDescription('Number of processed synchronous calls disconnected beacause too large an iframe was received from the host')
traxSyncDiscPosFrameTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscPosFrameTooSmall.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscPosFrameTooSmall.setDescription('Number of processed synchronous calls disconnected beacause too small an iframe was received from the host')
traxSyncDiscPosFrameTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscPosFrameTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscPosFrameTooBig.setDescription('Number of processed synchronous calls disconnected beacause too large an iframe was received from the POS')
traxSyncDiscHostFlowOffTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscHostFlowOffTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscHostFlowOffTimeOuts.setDescription('Number of processed synchronous calls disconnected because host has flowed off for too long')
traxSyncDiscPosFlowoffTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscPosFlowoffTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscPosFlowoffTimeOuts.setDescription('Number of processed synchronous calls disconnected because POS has flowed off for too long')
traxSyncDiscInactivityTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscInactivityTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscInactivityTimeouts.setDescription('Number of processed synchronous calls disconnected because there has been no inframe activity for too long')
traxSyncDiscNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscNoBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscNoBuffers.setDescription('Number of processed synchronous calls disconnected because of internal buffer allocation problems')
traxSyncDiscInvalidEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscInvalidEvent.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscInvalidEvent.setDescription('Number of Synchronous calls disconnected due to occurrence of an unexpected event in the synchronous protocol processing')
traxSyncDiscInvalidState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxSyncDiscInvalidState.setStatus('mandatory')
if mibBuilder.loadTexts: traxSyncDiscInvalidState.setDescription('Number of Synchronous calls disconnected')
traxX25wSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 7))
traxx25wanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1))
traxx25wanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1), )
if mibBuilder.loadTexts: traxx25wanStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsTable.setDescription('The x25wanStatsTable is composed of counters which allow the operator to view activity which can indicate the health of the WAN connection.')
traxx25wanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxx25wanStatsIndex"))
if mibBuilder.loadTexts: traxx25wanStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsEntry.setDescription('There is one X.25 WAN status entry for each x.25 subnet installed in the NAS chassis.')
traxx25wanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsIndex.setDescription('A unique value for each X25 WAN port in the NAS chassis. The value of this index matches is the entity index associated with this X25 subnet found in the USR Chassis MIB.')
traxx25wanStatsGoodFramesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsGoodFramesTxs.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsGoodFramesTxs.setDescription('A count of the number of good frames transmitted since this entity was initialized.')
traxx25wanStatsGoodFramesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsGoodFramesRxs.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsGoodFramesRxs.setDescription('A count of the good frames received since this entity was intitalized.')
traxx25wanStatsTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsTxUnderruns.setDescription('A count of the number of transmit underruns that have been seen by this entity since initialization.')
traxx25wanStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsRxOverruns.setDescription('The number of receiver overruns detected by this entity since intitialization.')
traxx25wanStatsRxCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxCrcErrs.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsRxCrcErrs.setDescription('The number of received crc errors since this entity was intitialized.')
traxx25wanStatsRxFrameNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxFrameNoBufs.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsRxFrameNoBufs.setDescription('The number of times this entity has recieved data without a buffer to place it into.')
traxx25wanStatsUnrecoveredRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsUnrecoveredRxs.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsUnrecoveredRxs.setDescription('The number of overrun frames that the entity was unable to recover.')
traxx25wanStatsRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsRxOverflows.setDescription('The number of receive buffer overflows seen by this entity since initialization.')
traxx25wanStatsRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsRxAborts.setDescription('The number of recieve frame aborts seen by this entity since initialization.')
traxx25wanStatsRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsRxTooLongs.setDescription('The number of frames recieved that exceeded the defined maximum receive frame size.')
traxx25wanStatsTxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxTooShorts.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsTxTooShorts.setDescription('The number of times that the upper protocol layers attempted to transmit too small a frame.')
traxx25wanStatsRxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsRxTooShorts.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsRxTooShorts.setDescription('A count of the number of frames received that were smaller than the minimum frame size.')
traxx25wanStatsTxBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsTxBadPackets.setDescription('The number of bad packets that the WAN interface received for transmission from the upper layers of the X.25 protocol stack.')
traxx25wanStatsTxRingQFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsTxRingQFulls.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsTxRingQFulls.setDescription('A count of the number of times the circular buffer used for transmission was full when a transmission was attempted by the upper layers of the X.25 protocol stack.')
traxx25wanStatsDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsDSR.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsDSR.setDescription('X.25 WAN interface DSR signal status.')
traxx25wanStatsCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsCTS.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsCTS.setDescription('X.25 WAN interface CTS signal status.')
traxx25wanStatsDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxx25wanStatsDCD.setStatus('mandatory')
if mibBuilder.loadTexts: traxx25wanStatsDCD.setDescription('X.25 WAN interface DCD signal status.')
traxUX25Sts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 8))
traxUx25StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1), )
if mibBuilder.loadTexts: traxUx25StatTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatTable.setDescription('Defines Object that Report Operational sts for an Hiper TRAX interface')
traxUx25StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxUx25StatIndex"))
if mibBuilder.loadTexts: traxUx25StatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatEntry.setDescription('Entries of ux25StatTable.')
traxUx25StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatIndex.setDescription('A unique value for each Hiper TRAX subnetwork entity in the chassis. The value of this object matches the value of the index of the corresponding Hiper TRAX subnetwork entity entry in the entity table of the chassis MIB.')
traxUx25StatCallsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatCallsRcvd.setDescription('Number of incoming calls.')
traxUx25StatCallsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatCallsSent.setDescription('Number of outgoing calls.')
traxUx25StatCallsRcvdEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsRcvdEstab.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatCallsRcvdEstab.setDescription('Number of incoming calls established.')
traxUx25StatCallsSentEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatCallsSentEstab.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatCallsSentEstab.setDescription('Number of outgoing calls established.')
traxUx25StatDataPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDataPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatDataPktsRcvd.setDescription('Number of data packets received.')
traxUx25StatDataPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDataPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatDataPktsSent.setDescription('Number of data packets sent.')
traxUx25StatRestartsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRestartsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRestartsRcvd.setDescription('Number of restarts received.')
traxUx25StatRestartsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRestartsSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRestartsSent.setDescription('Number of restarts sent.')
traxUx25StatRcvrNotRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrNotRdyRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRcvrNotRdyRcvd.setDescription('Number of receiver not ready received.')
traxUx25StatRcvrNotRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrNotRdySent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRcvrNotRdySent.setDescription('Number of receiver not ready sent.')
traxUx25StatRcvrRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrRdyRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRcvrRdyRcvd.setDescription('Number of receiver ready received.')
traxUx25StatRcvrRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRcvrRdySent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRcvrRdySent.setDescription('Number of receiver ready sent.')
traxUx25StatResetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatResetsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatResetsRcvd.setDescription('Number of resets received.')
traxUx25StatResetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatResetsSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatResetsSent.setDescription('Number of resets sent.')
traxUx25StatDiagPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDiagPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatDiagPktsRcvd.setDescription('Number of diagnostic packets received.')
traxUx25StatDiagPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatDiagPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatDiagPktsSent.setDescription('Number of diagnostic packets sent.')
traxUx25StatIntrptPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatIntrptPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatIntrptPktsRcvd.setDescription('Number of interrupt packets received.')
traxUx25StatIntrptPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatIntrptPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatIntrptPktsSent.setDescription('Number of interrupt packets sent.')
traxUx25StatRejPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRejPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRejPktsRcvd.setDescription('Number of rejects packets received')
traxUx25StatRejPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatRejPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatRejPktsSent.setDescription('Number of rejects packets sent')
traxUx25StatClrPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatClrPktRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatClrPktRcvd.setDescription('Number of clear packets received')
traxUx25StatClrPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatClrPktSent.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatClrPktSent.setDescription('Number of clear packets sent')
traxUx25StatPVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatPVCsInDatTrnsfrState.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatPVCsInDatTrnsfrState.setDescription('Number of PVCs in Data Transfer State.')
traxUx25StatSVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 8, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxUx25StatSVCsInDatTrnsfrState.setStatus('mandatory')
if mibBuilder.loadTexts: traxUx25StatSVCsInDatTrnsfrState.setDescription('Number of SVCs in Data Transfer State.')
traxULPBSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 31, 9))
traxulpbStatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1), )
if mibBuilder.loadTexts: traxulpbStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatTable.setDescription('')
traxulpbStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1), ).setIndexNames((0, "TRAX-MIB", "traxulpbStatIndex"))
if mibBuilder.loadTexts: traxulpbStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatEntry.setDescription('Entries of ulpbStatTrable.')
traxulpbStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatIndex.setDescription('A unique value for each Hiper TRAX entity running LAPB in the chassis. The value of this object matches the value of the index of the corresponding X.25 subnetwork entity running LAPB entry in the entity table of the chassis MIB.')
traxulpbStatRRRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRRRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatRRRcvd.setDescription('Number of RR commands received.')
traxulpbStatRRTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRRTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatRRTrnsmt.setDescription('Number of RR commands transmitted.')
traxulpbStatRNRCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRNRCmdsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatRNRCmdsRcvd.setDescription('Number of RNR commands received.')
traxulpbStatRNRCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatRNRCmdsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatRNRCmdsTrnsmt.setDescription('Number of RNR commands transmitted.')
traxulpbStatREJCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJCmdsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatREJCmdsRcvd.setDescription('Number of REJ commands received.')
traxulpbStatREJCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJCmdsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatREJCmdsTrnsmt.setDescription('Number of REJ commands transmitted.')
traxulpbStatREJRspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJRspsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatREJRspsRcvd.setDescription('Number of REJ responses received.')
traxulpbStatREJRspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatREJRspsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatREJRspsTrnsmt.setDescription('Number of REJ responses transmitted.')
traxulpbStatSABMCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMCmdsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatSABMCmdsRcvd.setDescription('Number of SABM commands received.')
traxulpbStatSABMCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMCmdsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatSABMCmdsTrnsmt.setDescription('Number of SABM commands transmitted.')
traxulpbStatSABMECmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMECmdsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatSABMECmdsRcvd.setDescription('Number of SABME commands received.')
traxulpbStatSABMECmdsTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatSABMECmdsTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatSABMECmdsTransmit.setDescription('Number of SABME commands transmitted.')
traxulpbStatDISCCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDISCCmdsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatDISCCmdsRcvd.setDescription('Number of DISC commands received.')
traxulpbStatDISCCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDISCCmdsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatDISCCmdsTrnsmt.setDescription('Number of DISC commands transmitted.')
traxulpbStatDMRspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDMRspsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatDMRspsRcvd.setDescription('Number of DM response received.')
traxulpbStatDMRspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatDMRspsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatDMRspsTrnsmt.setDescription('Number of DM response transmitted.')
traxulpbStatUARspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatUARspsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatUARspsRcvd.setDescription('Number of UA response received.')
traxulpbStatUARspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatUARspsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatUARspsTrnsmt.setDescription('Number of UA response transmitted.')
traxulpbStatFRMRRspsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatFRMRRspsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatFRMRRspsRcvd.setDescription('Number of FRMR response received.')
traxulpbStatFRMRRspsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatFRMRRspsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatFRMRRspsTrnsmt.setDescription('Number of FRMR response transmitted.')
traxulpbStatIFrameCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatIFrameCmdsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatIFrameCmdsRcvd.setDescription('Number of IFRMR CMD Recvd.')
traxulpbStatIFrameCmdsTrnsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 31, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traxulpbStatIFrameCmdsTrnsmt.setStatus('mandatory')
if mibBuilder.loadTexts: traxulpbStatIFrameCmdsTrnsmt.setDescription('Number of IFRMR CMD Trsmit.')
mibBuilder.exportSymbols("TRAX-MIB", traxUx25StatCallsSentEstab=traxUx25StatCallsSentEstab, traxSyncDiscInactivityTimeouts=traxSyncDiscInactivityTimeouts, traxUx25StatRestartsSent=traxUx25StatRestartsSent, traxCfgWriteMemData=traxCfgWriteMemData, traxTrapEna=traxTrapEna, traxSyncDiscPosFrameTooBig=traxSyncDiscPosFrameTooBig, traxCmdForce=traxCmdForce, trax=trax, traxUx25StatDataPktsRcvd=traxUx25StatDataPktsRcvd, traxVisaSts=traxVisaSts, traxTrapEnaSvcAlarm=traxTrapEnaSvcAlarm, traxUx25StatResetsSent=traxUx25StatResetsSent, traxCfgIndex=traxCfgIndex, traxUx25StatSVCsInDatTrnsfrState=traxUx25StatSVCsInDatTrnsfrState, traxSyncStsTable=traxSyncStsTable, traxSyncDiscPosFlowoffTimeOuts=traxSyncDiscPosFlowoffTimeOuts, traxx25wanStatsTxBadPackets=traxx25wanStatsTxBadPackets, traxx25wanStatsRxCrcErrs=traxx25wanStatsRxCrcErrs, traxUx25StatRestartsRcvd=traxUx25StatRestartsRcvd, traxulpbStatIFrameCmdsRcvd=traxulpbStatIFrameCmdsRcvd, traxCfgHostIPAddr=traxCfgHostIPAddr, traxVisaDiscMaxRetranToPos=traxVisaDiscMaxRetranToPos, traxx25wanStatsRxTooLongs=traxx25wanStatsRxTooLongs, traxIdSelfTestResult=traxIdSelfTestResult, traxUx25StatCallsRcvdEstab=traxUx25StatCallsRcvdEstab, traxIdHardwareRev=traxIdHardwareRev, traxCfgTable=traxCfgTable, traxCmdResult=traxCmdResult, traxUx25StatIntrptPktsSent=traxUx25StatIntrptPktsSent, traxVisaStsIndex=traxVisaStsIndex, traxTrapDupTrans=traxTrapDupTrans, traxulpbStatFRMRRspsTrnsmt=traxulpbStatFRMRRspsTrnsmt, traxulpbStatREJCmdsRcvd=traxulpbStatREJCmdsRcvd, traxUx25StatIndex=traxUx25StatIndex, traxulpbStatRRRcvd=traxulpbStatRRRcvd, traxVisaDiscHostRespTimeouts=traxVisaDiscHostRespTimeouts, traxx25wanStatsRxFrameNoBufs=traxx25wanStatsRxFrameNoBufs, traxSyncDiscNormal=traxSyncDiscNormal, traxCmd=traxCmd, traxx25wanStatsGoodFramesRxs=traxx25wanStatsGoodFramesRxs, traxulpbStatDMRspsTrnsmt=traxulpbStatDMRspsTrnsmt, traxUx25StatTable=traxUx25StatTable, traxCmdMgtStationId=traxCmdMgtStationId, traxx25wanStatsCTS=traxx25wanStatsCTS, traxCfgWriteMemAddr=traxCfgWriteMemAddr, traxSyncDiscPosFrameTooSmall=traxSyncDiscPosFrameTooSmall, traxTrapEnaNicMissing=traxTrapEnaNicMissing, traxCmdFunction=traxCmdFunction, traxCfgGatewayIpAddr=traxCfgGatewayIpAddr, traxCfgNicTrapDestination=traxCfgNicTrapDestination, traxVisaStsEntry=traxVisaStsEntry, traxUx25StatCallsSent=traxUx25StatCallsSent, traxVisaDiscPosFrameTooBig=traxVisaDiscPosFrameTooBig, traxVisaDiscPosWriteTimeouts=traxVisaDiscPosWriteTimeouts, traxUx25StatClrPktRcvd=traxUx25StatClrPktRcvd, traxIdEntry=traxIdEntry, traxTrapEnaTable=traxTrapEnaTable, traxVisaDiscHostWriteTimeouts=traxVisaDiscHostWriteTimeouts, traxVisaDiscNormal=traxVisaDiscNormal, traxCfgX25Addr=traxCfgX25Addr, traxx25wanStatsDCD=traxx25wanStatsDCD, traxCfgReadMemData=traxCfgReadMemData, traxCfg=traxCfg, traxVisaDiscHostRequest=traxVisaDiscHostRequest, traxTrapEnaDnisLookUp=traxTrapEnaDnisLookUp, traxSyncTransactionCount=traxSyncTransactionCount, traxCmdIndex=traxCmdIndex, traxVisaDiscBadCurrentState=traxVisaDiscBadCurrentState, traxulpbStatSABMECmdsTransmit=traxulpbStatSABMECmdsTransmit, traxVisaDiscNdcLogonFailures=traxVisaDiscNdcLogonFailures, traxSyncDiscHostFlowOffTimeOuts=traxSyncDiscHostFlowOffTimeOuts, traxVisaDiscPosRcvTimeouts=traxVisaDiscPosRcvTimeouts, traxX25wSts=traxX25wSts, traxIdHardwareSerNum=traxIdHardwareSerNum, traxCmdEntry=traxCmdEntry, traxx25wanStatsGoodFramesTxs=traxx25wanStatsGoodFramesTxs, traxUx25StatCallsRcvd=traxUx25StatCallsRcvd, traxUx25StatRcvrNotRdyRcvd=traxUx25StatRcvrNotRdyRcvd, traxFailureReason=traxFailureReason, traxDNIFailureReason=traxDNIFailureReason, traxCmdCode=traxCmdCode, traxSyncSts=traxSyncSts, traxUx25StatRejPktsSent=traxUx25StatRejPktsSent, traxCfgX25AddrPort1=traxCfgX25AddrPort1, traxulpbStatREJRspsTrnsmt=traxulpbStatREJRspsTrnsmt, traxCmdTable=traxCmdTable, traxTrapEnaX25FrameLevelDown=traxTrapEnaX25FrameLevelDown, traxTrapEnaX25FrameLevelUp=traxTrapEnaX25FrameLevelUp, traxSyncStsEntry=traxSyncStsEntry, traxCmdReqId=traxCmdReqId, traxx25wanStatsTxUnderruns=traxx25wanStatsTxUnderruns, traxUx25StatClrPktSent=traxUx25StatClrPktSent, traxUx25StatDataPktsSent=traxUx25StatDataPktsSent, traxx25wanStatsTxTooShorts=traxx25wanStatsTxTooShorts, traxulpbStatSABMECmdsRcvd=traxulpbStatSABMECmdsRcvd, traxUx25StatRcvrRdySent=traxUx25StatRcvrRdySent, traxCfgReadMemAddr=traxCfgReadMemAddr, traxVisaDiscMaxRetranToHost=traxVisaDiscMaxRetranToHost, traxulpbStatREJCmdsTrnsmt=traxulpbStatREJCmdsTrnsmt, traxulpbStatIFrameCmdsTrnsmt=traxulpbStatIFrameCmdsTrnsmt, traxTrapEnaX25LinkUp=traxTrapEnaX25LinkUp, traxVisaDiscPosRequest=traxVisaDiscPosRequest, nas=nas, traxCfgIPMask=traxCfgIPMask, traxVisaDiscSynDelayTooLong=traxVisaDiscSynDelayTooLong, traxVisaDiscUnexpectedEvent=traxVisaDiscUnexpectedEvent, traxVisaDiscNumBadMsg=traxVisaDiscNumBadMsg, traxx25wanStatsDSR=traxx25wanStatsDSR, traxUx25StatEntry=traxUx25StatEntry, traxTrapEnaEntry=traxTrapEnaEntry, traxUx25StatPVCsInDatTrnsfrState=traxUx25StatPVCsInDatTrnsfrState, traxVisaCallCount=traxVisaCallCount, traxSyncDiscHostFrameTooBig=traxSyncDiscHostFrameTooBig, traxSyncDiscMaxSnrms=traxSyncDiscMaxSnrms, traxVisaTransactionCount=traxVisaTransactionCount, traxx25wanStatsTable=traxx25wanStatsTable, traxulpbStatDMRspsRcvd=traxulpbStatDMRspsRcvd, traxx25wanStatsUnrecoveredRxs=traxx25wanStatsUnrecoveredRxs, traxTrapEnaX25LostCalls=traxTrapEnaX25LostCalls, traxx25wanStatsIndex=traxx25wanStatsIndex, traxVisaDiscMaxBadFrames=traxVisaDiscMaxBadFrames, traxVisaDuplicateTransCount=traxVisaDuplicateTransCount, traxIdCpuType=traxIdCpuType, traxTrapEnaX25PacketLevelUp=traxTrapEnaX25PacketLevelUp, traxulpbStatRNRCmdsRcvd=traxulpbStatRNRCmdsRcvd, traxVisaDiscMaxEnqs=traxVisaDiscMaxEnqs, traxIdTable=traxIdTable, traxCfgCardIPAddress=traxCfgCardIPAddress, traxVisaDiscNumSystem=traxVisaDiscNumSystem, traxulpbStatRRTrnsmt=traxulpbStatRRTrnsmt, traxx25wanStats=traxx25wanStats, traxulpbStatIndex=traxulpbStatIndex, traxulpbStatSABMCmdsTrnsmt=traxulpbStatSABMCmdsTrnsmt, traxSyncDiscMaxRetrans=traxSyncDiscMaxRetrans, traxUx25StatRcvrNotRdySent=traxUx25StatRcvrNotRdySent, usr=usr, traxx25wanStatsEntry=traxx25wanStatsEntry, traxVisaRetransCount=traxVisaRetransCount, traxIdIndex=traxIdIndex, traxSyncDiscInvalidState=traxSyncDiscInvalidState, traxCmdParam=traxCmdParam, traxUX25Sts=traxUX25Sts, traxulpbStatREJRspsRcvd=traxulpbStatREJRspsRcvd, traxulpbStatDISCCmdsTrnsmt=traxulpbStatDISCCmdsTrnsmt, traxIdFlashInstalled=traxIdFlashInstalled, traxUx25StatDiagPktsRcvd=traxUx25StatDiagPktsRcvd, traxulpbStatUARspsRcvd=traxulpbStatUARspsRcvd, traxId=traxId, traxulpbStatEntry=traxulpbStatEntry, traxULPBSts=traxULPBSts, traxulpbStatDISCCmdsRcvd=traxulpbStatDISCCmdsRcvd, traxx25wanStatsRxTooShorts=traxx25wanStatsRxTooShorts, traxulpbStatSABMCmdsRcvd=traxulpbStatSABMCmdsRcvd, traxCfgReadMemLength=traxCfgReadMemLength, traxUx25StatRejPktsRcvd=traxUx25StatRejPktsRcvd, traxx25wanStatsRxOverflows=traxx25wanStatsRxOverflows, traxUx25StatRcvrRdyRcvd=traxUx25StatRcvrRdyRcvd, traxUx25StatDiagPktsSent=traxUx25StatDiagPktsSent, traxIdMgmtConnect=traxIdMgmtConnect, traxTrapEnaX25PacketLevelDn=traxTrapEnaX25PacketLevelDn, traxIdSoftwareRev=traxIdSoftwareRev, traxCfgWriteMemLen=traxCfgWriteMemLen, traxx25wanStatsRxOverruns=traxx25wanStatsRxOverruns, traxulpbStatFRMRRspsRcvd=traxulpbStatFRMRRspsRcvd, traxUx25StatIntrptPktsRcvd=traxUx25StatIntrptPktsRcvd, traxCfgEntry=traxCfgEntry, traxulpbStatTable=traxulpbStatTable, traxVisaStsTable=traxVisaStsTable, traxUx25StatResetsRcvd=traxUx25StatResetsRcvd, traxx25wanStatsRxAborts=traxx25wanStatsRxAborts, traxTrapEnaIndex=traxTrapEnaIndex, traxIdRamInstalled=traxIdRamInstalled, traxVisaDiscHostFrameTooBig=traxVisaDiscHostFrameTooBig, traxTrapEnaX25LinkDn=traxTrapEnaX25LinkDn, traxulpbStatRNRCmdsTrnsmt=traxulpbStatRNRCmdsTrnsmt, traxSyncStsIndex=traxSyncStsIndex, traxSyncCallCount=traxSyncCallCount, traxSyncDiscNoBuffers=traxSyncDiscNoBuffers, traxSyncDiscInvalidEvent=traxSyncDiscInvalidEvent, traxTrapEnaSvcSetUp=traxTrapEnaSvcSetUp, traxx25wanStatsTxRingQFulls=traxx25wanStatsTxRingQFulls, traxulpbStatUARspsTrnsmt=traxulpbStatUARspsTrnsmt)
