#
# PySNMP MIB module RAPID-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAPID-POLICY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
rapidstream, = mibBuilder.importSymbols("RAPID-MIB", "rapidstream")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, ObjectIdentity, ModuleIdentity, TimeTicks, Bits, NotificationType, IpAddress, Counter32, iso, enterprises, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Bits", "NotificationType", "IpAddress", "Counter32", "iso", "enterprises", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
rsPolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4355, 4))
rsPolicyMIB.setRevisions(('2001-05-21 12:00', '2002-11-01 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsPolicyMIB.setRevisionsDescriptions(('Initial revision.', 'Changed CONTACT-INFO.',))
if mibBuilder.loadTexts: rsPolicyMIB.setLastUpdated('0105211200Z')
if mibBuilder.loadTexts: rsPolicyMIB.setOrganization('WatchGuard Technologies, Inc.')
if mibBuilder.loadTexts: rsPolicyMIB.setContactInfo(' Ella Yu WatchGuard Technologies, Inc. 1841 Zanker Road San Jose, CA 95112 USA 408-519-4888 ella.yu@watchguard.com ')
if mibBuilder.loadTexts: rsPolicyMIB.setDescription('The MIB module describes various policy objects of RapidStream system.')
rsPolicyToTunnel = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 4, 1))
if mibBuilder.loadTexts: rsPolicyToTunnel.setStatus('current')
if mibBuilder.loadTexts: rsPolicyToTunnel.setDescription('This is the base object identifier for all tunnels information of the policies.')
rsPolicyStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 4, 2))
if mibBuilder.loadTexts: rsPolicyStatistics.setStatus('current')
if mibBuilder.loadTexts: rsPolicyStatistics.setDescription('This is the base object identifier for all RASVPN user.')
rsPolicyToTunnelNum = MibScalar((1, 3, 6, 1, 4, 1, 4355, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyToTunnelNum.setStatus('current')
if mibBuilder.loadTexts: rsPolicyToTunnelNum.setDescription('The total number of tunnels in the policytotunnel table. ')
rsPolicyToTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4355, 4, 1, 2), )
if mibBuilder.loadTexts: rsPolicyToTunnelTable.setStatus('current')
if mibBuilder.loadTexts: rsPolicyToTunnelTable.setDescription('This is the policytotunnel table of all the policies.')
rsPolicyToTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4355, 4, 1, 2, 1), ).setIndexNames((0, "RAPID-POLICY-MIB", "rsPolicyToTunnelPolicyID"), (0, "RAPID-POLICY-MIB", "rsPolicyToTunnelTunnelID"))
if mibBuilder.loadTexts: rsPolicyToTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: rsPolicyToTunnelEntry.setDescription('An entry (conceptual row) containing the tunnels information.')
rsPolicyToTunnelPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyToTunnelPolicyID.setStatus('current')
if mibBuilder.loadTexts: rsPolicyToTunnelPolicyID.setDescription('The policy identifier of this entity.')
rsPolicyToTunnelTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyToTunnelTunnelID.setStatus('current')
if mibBuilder.loadTexts: rsPolicyToTunnelTunnelID.setDescription('The tunnel identifier of this entity.')
rsPolicyTableNum = MibScalar((1, 3, 6, 1, 4, 1, 4355, 4, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyTableNum.setStatus('current')
if mibBuilder.loadTexts: rsPolicyTableNum.setDescription('The total number of policies in the policy table. ')
rsPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2), )
if mibBuilder.loadTexts: rsPolicyTable.setStatus('current')
if mibBuilder.loadTexts: rsPolicyTable.setDescription('This is the policytotunnel table of the policies.')
rsPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1), ).setIndexNames((0, "RAPID-POLICY-MIB", "rsPolicyID"))
if mibBuilder.loadTexts: rsPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: rsPolicyEntry.setDescription('An entry (conceptual row) containing the policy information.')
rsPolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyID.setStatus('current')
if mibBuilder.loadTexts: rsPolicyID.setDescription('The policy identifier of this policy.')
rsPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyName.setStatus('current')
if mibBuilder.loadTexts: rsPolicyName.setDescription('The policy name of this policy')
rsPolicyBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyBytes.setStatus('current')
if mibBuilder.loadTexts: rsPolicyBytes.setDescription('Total traffic in bytes since setting up this policy.')
rsPolicyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyPackets.setStatus('current')
if mibBuilder.loadTexts: rsPolicyPackets.setDescription('Total traffic in packets since setting up this policy.')
rsPolicyIpsecDecryptErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyIpsecDecryptErr.setStatus('current')
if mibBuilder.loadTexts: rsPolicyIpsecDecryptErr.setDescription('Total number of packets discarded due to decryption errors since setting up this policy.')
rsPolicyIpsecAuthErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyIpsecAuthErr.setStatus('current')
if mibBuilder.loadTexts: rsPolicyIpsecAuthErr.setDescription('Total number of packets discarded due to authentication errors since setting up this policy.')
rsPolicyIpsecReplayErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyIpsecReplayErr.setStatus('current')
if mibBuilder.loadTexts: rsPolicyIpsecReplayErr.setDescription('Total number of packets discarded due to replay errors since setting up this policy.')
rsPolicyIpsecPadErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyIpsecPadErr.setStatus('current')
if mibBuilder.loadTexts: rsPolicyIpsecPadErr.setDescription('Total number of packets discarded due to pad value errors since setting up this policy.')
rsPolicyIpsecPolicyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyIpsecPolicyErr.setStatus('current')
if mibBuilder.loadTexts: rsPolicyIpsecPolicyErr.setDescription('Total number of packets discarded due to policy errors since setting up this policy.')
rsPolicyFwDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyFwDisc.setStatus('current')
if mibBuilder.loadTexts: rsPolicyFwDisc.setDescription('Total number of packets discarded by firewall policies since setting up this policy.')
rsPolicyOtherDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyOtherDisc.setStatus('current')
if mibBuilder.loadTexts: rsPolicyOtherDisc.setDescription('Total number of packets discarded due to errors other than firewall errors, ipsec errors since setting up this policy.')
rsPolicyActiveStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyActiveStreams.setStatus('current')
if mibBuilder.loadTexts: rsPolicyActiveStreams.setDescription('Total number of the active connections since setting up this policy.')
rsPolicyIpsecDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyIpsecDisc.setStatus('current')
if mibBuilder.loadTexts: rsPolicyIpsecDisc.setDescription('Total number of packets discarded by IPSEC errors (decryption error, authentication error, replay error) since setting up this policy.')
rsPolicyDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyDisc.setStatus('current')
if mibBuilder.loadTexts: rsPolicyDisc.setDescription('Total number of packets discarded since setting up this policy.')
rsPolicyNumTunl = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyNumTunl.setStatus('current')
if mibBuilder.loadTexts: rsPolicyNumTunl.setDescription('Total number of tunnels belong to this policy')
rsPolicySingleCntrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicySingleCntrNum.setStatus('current')
if mibBuilder.loadTexts: rsPolicySingleCntrNum.setDescription('Total number of single counters handled by this policy.')
rsPolicyLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 4, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPolicyLogging.setStatus('current')
if mibBuilder.loadTexts: rsPolicyLogging.setDescription('Indicates whether if the logging of this policy has been enabled. ')
mibBuilder.exportSymbols("RAPID-POLICY-MIB", rsPolicyNumTunl=rsPolicyNumTunl, rsPolicySingleCntrNum=rsPolicySingleCntrNum, rsPolicyToTunnel=rsPolicyToTunnel, rsPolicyActiveStreams=rsPolicyActiveStreams, rsPolicyToTunnelEntry=rsPolicyToTunnelEntry, rsPolicyID=rsPolicyID, rsPolicyToTunnelTunnelID=rsPolicyToTunnelTunnelID, rsPolicyToTunnelPolicyID=rsPolicyToTunnelPolicyID, rsPolicyIpsecReplayErr=rsPolicyIpsecReplayErr, PYSNMP_MODULE_ID=rsPolicyMIB, rsPolicyLogging=rsPolicyLogging, rsPolicyIpsecDisc=rsPolicyIpsecDisc, rsPolicyTable=rsPolicyTable, rsPolicyEntry=rsPolicyEntry, rsPolicyStatistics=rsPolicyStatistics, rsPolicyBytes=rsPolicyBytes, rsPolicyName=rsPolicyName, rsPolicyIpsecDecryptErr=rsPolicyIpsecDecryptErr, rsPolicyDisc=rsPolicyDisc, rsPolicyOtherDisc=rsPolicyOtherDisc, rsPolicyMIB=rsPolicyMIB, rsPolicyToTunnelNum=rsPolicyToTunnelNum, rsPolicyTableNum=rsPolicyTableNum, rsPolicyIpsecPolicyErr=rsPolicyIpsecPolicyErr, rsPolicyPackets=rsPolicyPackets, rsPolicyFwDisc=rsPolicyFwDisc, rsPolicyToTunnelTable=rsPolicyToTunnelTable, rsPolicyIpsecAuthErr=rsPolicyIpsecAuthErr, rsPolicyIpsecPadErr=rsPolicyIpsecPadErr)
