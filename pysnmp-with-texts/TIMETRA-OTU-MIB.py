#
# PySNMP MIB module TIMETRA-OTU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-OTU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:20:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, IpAddress, NotificationType, Counter32, Unsigned32, iso, Gauge32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "IpAddress", "NotificationType", "Counter32", "Unsigned32", "iso", "Gauge32", "TimeTicks", "MibIdentifier")
TimeStamp, TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
timetraSRMIBModules, tmnxSRConfs, tmnxSRObjs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRConfs", "tmnxSRObjs", "tmnxSRNotifyPrefix")
TmnxActionType, = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxActionType")
tmnxOtuMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 62))
tmnxOtuMIBModule.setRevisions(('1909-02-28 00:00', '1908-10-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tmnxOtuMIBModule.setRevisionsDescriptions(('Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-OTU-MIB.', 'Rev 1.0 01 Jul 2008 00:00 1.0 release of the TIMETRA-OTU-MIB.',))
if mibBuilder.loadTexts: tmnxOtuMIBModule.setLastUpdated('0902280000Z')
if mibBuilder.loadTexts: tmnxOtuMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: tmnxOtuMIBModule.setContactInfo('Alcatel-Lucent 7x50 Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: tmnxOtuMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the Optical Transport Unit (OTU) components of the Alcatel-Lucent SROS device. Copyright 2008-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxOtuObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62))
tmnxOtuNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 62))
tmnxOtuConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62))
tmnxOtuConfigurationTimeStamps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 0))
tmnxOtuConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1))
tmnxOtuStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2))
tmnxOtuNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 62, 0))
tmnxOtuCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 1))
tmnxOtuGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2))
class TmnxOtuFecMode(TextualConvention, Integer32):
    description = 'The TmnxOtuFecMode specifies what type of Forward Error Correction (FEC) has been enabled on the port. The valid types are as follows: - disabled - OTU encap enabled with no FEC. - g709fec - OTU encap enabled with G.709 FEC. - enhanced - OTU encap enabled with enhanced FEC.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disabled", 0), ("g709fec", 1), ("enhanced", 2))

class TmnxOtu2LanDataRate(TextualConvention, Integer32):
    description = 'The TmnxOtu2LanDataRate specifies the allowable data rates for a given OTU2 10GE-LAN enabled interface. The valid data rates are as follows: - notApplicable - not an OTU 10GE enabled interface. - dr11049 - 11.049 Gb/s synchronous OTU encapsulated 10GE-LAN signal. (ie. No fixed stuffing bytes in the OTU2 frame). - dr11096 - 11.0957 Gb/s synchronous OTU encapsulated 10GE-LAN signal. (ie. Fixed stuffing bytes in the OTU2 frame).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("dr11049", 1), ("dr11096", 2))

class TmnxOtuSFSDMethod(TextualConvention, Integer32):
    description = 'The TmnxOtuSFSDMethod specifies the method to determine the Signal Failure (SF) and Signal Degradation (SD) of the interface. The valid methods are as follows: - fec - FEC correctable bit errors are used to declare the presence of the Signal Fail and Signal Degrade condition. - bip8 - the SM-BIP8 errors are used to declare the presence of the Signal Fail and Signal Degrade condition.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fec", 1), ("bip8", 2))

class TmnxOtuTtiMode(TextualConvention, Integer32):
    description = 'The TmnxOtuTtiMode specifies the type of data transmitted in the Trail Trace Identifier (TTI) Section of the OTU frame. The valid modes are as follows: - auto - Specifies that the TTI Section is auto-generated by the system. - string - Specifies that the TTI Section is a sequence of printable-ascii. - bytes - Specifies that the TTI Section is a sequence of bytes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("auto", 0), ("string", 1), ("bytes", 2))

class TmnxOtuTtiString(TextualConvention, OctetString):
    description = 'The TmnxOtuTtiString specifies the data transmitted in the Trail Trace Identifier (TTI) Section of the OTU frame. The TTI Section may consist of octet values from the range 0..255 (0x00..0xFF).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class TmnxOtuAlarms(TextualConvention, Bits):
    description = 'The TmnxOtuAlarms specifies the alarms which are enabled or outstanding against an OTU enabled interface. The valid alarms are as follows: - loc - Loss of Clock. - los - Loss of Signal. - lof - Loss of OTU Framing. - lom - Loss of Multi-frame. - otuAis - OTU Alarm Indication Signal. - otuBerSf - OTU Bit Error Rate Signal Fail. - otuBerSd - OTU Bit Error Rate Signal Degradation. - otuBdi - OTU Backward Defect Indication. - otuTim - OTU Trace ID Mismatch. - otuIae - OTU Incoming Alignment Error. - otuBiae - OTU Backward Incoming Alignment Error. - fecSf - FEC Signal Failure. - fecSd - FEC Signal Degradation. - fecFail - FEC Rx/Tx mode mismatch (enhanced/g709fec) or High uncorrectable bit rate (>10E-2). - fecUncorr - One or more uncorrectable FEC errors. - oduAis - Optical Data Unit (ODU) Alarm Indication Signal. - oduOci - ODU Open Connection Indication. - oduLck - ODU Locked. - oduBdi - PM Backward Defect Indication. - oduTim - PM Trace ID Mismatch. - opuTim - OPU PSI Trace Mismatch. - opuPlm - OPU PSI Payload Type Mismatch.'
    status = 'current'
    namedValues = NamedValues(("loc", 0), ("los", 1), ("lof", 2), ("lom", 3), ("otuAis", 4), ("otuBerSf", 5), ("otuBerSd", 6), ("otuBdi", 7), ("otuTim", 8), ("otuIae", 9), ("otuBiae", 10), ("fecSf", 11), ("fecSd", 12), ("fecFail", 13), ("fecUncorr", 14), ("oduAis", 15), ("oduOci", 16), ("oduLck", 17), ("oduBdi", 18), ("oduTim", 19), ("opuTim", 20), ("opuPlm", 21))

class TmnxOtuPsiPayloadType(TextualConvention, Integer32):
    description = 'The TmnxOtuPsiPayloadType specifies the payload type identifier as defined in table 15-8 of section 15.9.2.1.1 of ITU-T Rec. G.709 and the codes are as follows: - auto - Automatic based on operating mode. - exp - Experimental mapping. - asyncCbr - Asynchronous CBR mapping. - syncCbr - Bit synchronous CBR mapping. - atm - ATM mapping. - gfp - GFP mapping. - vcat - Virtual Concatenated signal. - gmp - Generic Mapping Procedure. - bitStrOctet - Bit stream with octet timing mapping. - bitStrNoOctet - Bit stream without octet timing mapping. - oduMux - ODU multiplex structure. - rsvd80 - Reserved Proprietary 0x80 - rsvd81 - Reserved Proprietary 0x81 - rsvd82 - Reserved Proprietary 0x82 - rsvd83 - Reserved Proprietary 0x83 - rsvd84 - Reserved Proprietary 0x84 - rsvd85 - Reserved Proprietary 0x85 - rsvd86 - Reserved Proprietary 0x86 - rsvd87 - Reserved Proprietary 0x87 - rsvd88 - Reserved Proprietary 0x88 - rsvd89 - Reserved Proprietary 0x89 - rsvd8A - Reserved Proprietary 0x8A - rsvd8B - Reserved Proprietary 0x8B - rsvd8C - Reserved Proprietary 0x8C - rsvd8D - Reserved Proprietary 0x8D - rsvd8E - Reserved Proprietary 0x8E - rsvd8F - Reserved Proprietary 0x8F - nullTest - NULL test signal mapping. - prbsTest - PRBS test signal mapping.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 32, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 253, 254))
    namedValues = NamedValues(("auto", 0), ("exp", 1), ("asyncCbr", 2), ("syncCbr", 3), ("atm", 4), ("gfp", 5), ("vcat", 6), ("gmp", 7), ("bitStrOctet", 16), ("bitStrNoOctet", 17), ("oduMux", 32), ("rsvd80", 128), ("rsvd81", 129), ("rsvd82", 130), ("rsvd83", 131), ("rsvd84", 132), ("rsvd85", 133), ("rsvd86", 134), ("rsvd87", 135), ("rsvd88", 136), ("rsvd89", 137), ("rsvd8A", 138), ("rsvd8B", 139), ("rsvd8C", 140), ("rsvd8D", 141), ("rsvd8E", 142), ("rsvd8F", 143), ("nullTest", 253), ("prbsTest", 254))

class TmnxOtuTimReaction(TextualConvention, Integer32):
    description = 'The TmnxOtuTimReaction specifies the type of reaction that should be taken in the event of Trace Identifier (TTI) Mismatch or Payload Type Mismatch. The valid modes are as follows: - none - Specifies that the Received Payload data should be passed through when a Trace Identifier Mismatch is detected. - squelch-rx - Specifies that the Received Payload data should be blocked with a maintenance signal when a Trace Identifier Mismatch is detected.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("squelchRx", 1))

tmnxOtuIfTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 0, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfTableLastChanged.setDescription('The tmnxOtuIfTableLastChanged indicates the time, since system startup, when a row in the tmnxOtuIfTable last changed.')
tmnxOtuIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1), )
if mibBuilder.loadTexts: tmnxOtuIfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfTable.setDescription('The tmnxOtuIfTable consists of the interfaces using OTU encapsulation.')
tmnxOtuIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tmnxOtuIfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfEntry.setDescription('The tmnxOtuIfEntry contains information pertaining to an individual OTU encapsulated physical interface. Rows in this table are created and destroyed using the tmnxOtuIfRowStatus object.')
tmnxOtuIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRowStatus.setDescription("The tmnxOtuIfRowStatus controls the creation and deletion of row entries in the tmnxOtuIfTable. Creating a row in the tmnxOtuIfTable using 'createAndGo (4)' enables OTU encapsulation for the interface. Deleting the row using 'destroy (6)' will disable the OTU encapsulation. If a physical port does not support the OTU encapsulation, an attempt to set the tmnxOtuIfRowStatus to a value of 'createAndGo (4)' will fail with an inconsistent value result.")
tmnxOtuIfTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfTimeStamp.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfTimeStamp.setDescription('The tmnxOtuIfTimeStamp indicates the time, since system startup, of the last change to this row.')
tmnxOtuIfFecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 3), TmnxOtuFecMode().clone('enhanced')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfFecMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfFecMode.setDescription('The tmnxOtuIfFecMode specifies the OTU encapsulation used by this interface.')
tmnxOtuIfSfSdMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 4), TmnxOtuSFSDMethod().clone('fec')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfSfSdMethod.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSfSdMethod.setDescription('The tmnxOtuIfSfSdMethod specifies the method on which to detect Signal Failure and Signal Degradation.')
tmnxOtuIfBerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 6)).clone(5)).setUnits('error bits in 1/10e-n bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfBerSfThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfBerSfThreshold.setDescription('The value of tmnxOtuIfBerSfThreshold specifies the bit error rate(BER) threshold used to determine when to raise and clear otuBerSf/fecSf alarms. Bit error computed must reach/exceed the threshold value over a predefined period of time for the alarms to be raised. The tmnxOtuIfSfSdMethod defines how the bit error is computed and what values of tmnxOtuIfBerSfThreshold are allowed. The following table defines this dependency: tmnxOtuIfSfSdMethod Bit error calculation ------------------- ---------------------------------------------- fec (1) Each corrected bit counts as one bit error. bip8 (2) Each BIP8 coding violation counts as one bit error.')
tmnxOtuIfBerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(7)).setUnits('error bits in 1/10^n bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfBerSdThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfBerSdThreshold.setDescription('The value of tmnxOtuIfBerSdThreshold specifies the bit error rate(BER) threshold used to determine when to raise and clear otuBerSd/fecSd alarms. Bit error computed must reach/exceed the threshold value over a predefined period of time for the alarms to be raised. The tmnxOtuIfSfSdMethod defines how the bit error is computed and what values of tmnxOtuIfBerSdThreshold are allowed. The following table defines this dependency: tmnxOtuIfSfSdMethod Bit error calculation ------------------- ---------------------------------------------- fec (1) Each corrected bit counts as one bit error. bip8 (2) Each BIP8 coding violation counts as one bit error.')
tmnxOtuIfOtuOperDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 7), Unsigned32()).setUnits('Mb/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfOtuOperDataRate.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfOtuOperDataRate.setDescription('The tmnxOtuIfOtuOperDataRate indicates the rate at which the OTU data is transmitted on the line.')
tmnxOtuIfOtu2LanDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 8), TmnxOtu2LanDataRate().clone('dr11049')).setUnits('Gb/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfOtu2LanDataRate.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfOtu2LanDataRate.setDescription("The value of tmnxOtuIfOtu2LanDataRate specifies the rate at which data is transmitted on the line. An interface that does not support OTU2 encapsulation will default, and be restricted to, the value of 'notApplicable (0)'.")
tmnxOtuIfCfgAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 9), TmnxOtuAlarms().clone(namedValues=NamedValues(("loc", 0), ("los", 1), ("lof", 2), ("lom", 3), ("otuBdi", 7), ("otuBerSf", 5), ("fecSf", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfCfgAlarms.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfCfgAlarms.setDescription('The value of tmnxOtuIfCfgAlarms specifies the alarms that are to be monitored by the OTU interface. If an alarm bit is set, then the corresponding alarm will raise/clear an alarm when its state changes. An unset bit specifies that the alarm corresponding with the bit will not alarm on its state transitions.')
tmnxOtuIfAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 10), TmnxOtuAlarms()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfAlarmState.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfAlarmState.setDescription('The value of tmnxOtuIfAlarmState indicates which monitored alarms are raised against the OTU interface.')
tmnxOtuIfHoldTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setUnits('100s of milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfHoldTimeUp.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxOtuIfHoldTimeUp.setDescription('The value of tmnxOtuIfHoldTimeUp is used to configure the hold-timer for link up event dampening. This guards against reporting excessive interface transitions. This is implemented by not advertising subsequent transitions of the interface to upper layer protocols until the configured timer has expired. A value of zero (0) indicates that an up transition is reported immediately.')
tmnxOtuIfHoldTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('100s of milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfHoldTimeDown.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxOtuIfHoldTimeDown.setDescription('The value of tmnxOtuIfHoldTimeDown is used to configure the hold-timer for link down event dampening. This guards against reporting excessive interface transitions. This is implemented by not advertising subsequent transitions of the interface to upper layer protocols until the configured timer has expired. A value of zero (0) indicates that an up transition is reported immediately.')
tmnxOtuIfSmTtiTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 13), TmnxOtuTtiMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfSmTtiTxMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSmTtiTxMode.setDescription("The value of tmnxOtuIfSmTtiTxMode specifies the type of Trail Trace Identifier (TTI) for the Section Monitoring (SM) in the OTU overhead. Specifying a tmnxOtuIfSmTtiTxMode value of 'auto (0)' along with tmnxOtuIfSmTtiTx set with a single octet of '0xFF' will revert the SM-TTI to the default: '<system-name>/<iom-slot>/<mda-slot>/<port-number>/C<dwdm-channel>'")
tmnxOtuIfSmTtiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 14), TmnxOtuTtiString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfSmTtiTx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSmTtiTx.setDescription("The value of tmnxOtuIfSmTtiTx specifies the Trail Trace Identifier (TTI) for the Section Monitoring (SM) in the OTU overhead. This identifier can be a string or a non-printable sequence of bytes. Specifying a one octet string with the value '0xFF' along with a tmnxOtuIfSmTtiTxMode set to the value of 'auto (0)' will reset the TTI to the system generated value.")
tmnxOtuIfSmTtiRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 15), TmnxOtuTtiString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfSmTtiRx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSmTtiRx.setDescription('The value of tmnxOtuIfSmTtiRx indicates the Trail Trace Identifier (TTI) for the Section Monitoring (SM) in the received OTU overhead.')
tmnxOtuIfSmTtiExpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 16), TmnxOtuTtiMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfSmTtiExpMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSmTtiExpMode.setDescription("The value of tmnxOtuIfSmTtiExpMode specifies the type of expected Trail Trace Identifier (TTI) for the Section Monitoring (SM) in the OTU overhead. Specifying a tmnxOtuIfSmTtiExpMode value of 'auto (0)' along with tmnxOtuIfSmTtiExp set with a single octet of '0xFF' will revert the SM-TTI to the default which is 'all zeros' in tmnxOtuIfSmTtiExp.")
tmnxOtuIfSmTtiExpCopyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 17), TmnxActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfSmTtiExpCopyRx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSmTtiExpCopyRx.setDescription('tmnxOtuIfSmTtiExpCopyRx is used to copy the contents of tmnxOtuIfSmTtiRx into tmnxOtuIfSmTtiExp.')
tmnxOtuIfSmTtiExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 18), TmnxOtuTtiString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfSmTtiExp.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSmTtiExp.setDescription("The value of tmnxOtuIfSmTtiExp specifies the Trail Trace Identifier (TTI) for the Section Monitoring (SM) that is expected to be received in the OTU overhead. A mismatch of the received and the expected SM TTI will cause an 'otuTim' alarm to be raised")
tmnxOtuIfPmTtiTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 19), TmnxOtuTtiMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPmTtiTxMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPmTtiTxMode.setDescription("The value of tmnxOtuIfSmTtiTxMode specifies the type of Trail Trace Identifier (TTI) for the Path Monitoring (PM) in the OTU overhead. Specifying a tmnxOtuIfPmTtiTxMode value of 'auto (0)' along with tmnxOtuIfPmTtiTx set with a single octet of '0xFF' will revert the PM-TTI to the default: '<system-name>/<iom-slot>/<mda-slot>/<port-number>/C<dwdm-channel>'")
tmnxOtuIfPmTtiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 20), TmnxOtuTtiString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPmTtiTx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPmTtiTx.setDescription("The value of tmnxOtuIfPmTtiTx specifies the Trail Trace Identifier (TTI) for the Path Monitoring (PM) in the OTU overhead. This identifier can be a string or a non-printable sequence of bytes. Specifying a one octet string with the value '0xFF' along with a tmnxOtuIfPmTtiTxMode set to the value of 'auto (0)' will reset the TTI to the system generated value.")
tmnxOtuIfPmTtiRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 21), TmnxOtuTtiString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfPmTtiRx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPmTtiRx.setDescription('The value of tmnxOtuIfPmTtiRx indicates the Trail Trace Identifier (TTI) for the Path Monitoring (PM) in the received OTU overhead.')
tmnxOtuIfPmTtiExpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 22), TmnxOtuTtiMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPmTtiExpMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPmTtiExpMode.setDescription("The value of tmnxOtuIfPmTtiExpMode specifies the type of expected Trail Trace Identifier (TTI) for the Path Monitoring (PM) in the OTU overhead. Specifying a tmnxOtuIfPmTtiExpMode value of 'auto (0)' along with tmnxOtuIfPmTtiExp set with a single octet of '0xFF' will revert the PM-TTI to the default which is 'all zeros' in tmnxOtuIfPmTtiExp.")
tmnxOtuIfPmTtiExpCopyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 23), TmnxActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPmTtiExpCopyRx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPmTtiExpCopyRx.setDescription('tmnxOtuIfPmTtiExpCopyRx is used to copy the contents of tmnxOtuIfPmTtiRx into tmnxOtuIfPmTtiExp.')
tmnxOtuIfPmTtiExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 24), TmnxOtuTtiString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPmTtiExp.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPmTtiExp.setDescription("The value of tmnxOtuIfPmTtiExp indicates the Trail Trace Identifier (TTI) for the Path Monitoring (PM) that is expected to be received in the OTU overhead. A mismatch of the received and the expected PM TTI will cause an 'oduTim' alarm to be raised")
tmnxOtuIfPsiTtiTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 25), TmnxOtuTtiMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiTxMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiTxMode.setDescription("The value of tmnxOtuIfSmTtiTxMode specifies the type of Trail Trace Identifier (TTI) for the Payload Structure Identifier (PSI) in the OTU overhead. Specifying a tmnxOtuIfPsiTtiTxMode value of 'auto (0)' along with tmnxOtuIfPsiTtiTx set with a single octet of '0xFF' will revert the PSI-TTI to the default: '<system-name>/<iom-slot>/<mda-slot>/<port-number>/C<dwdm-channel>'")
tmnxOtuIfPsiTtiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 26), TmnxOtuTtiString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiTx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiTx.setDescription("The value of tmnxOtuIfPsiTtiTx specifies the Trail Trace Identifier (TTI) for the Payload Structure Identifier (PSI) in the OTU overhead. This identifier can be a string or a non-printable sequence of bytes. Specifying a one octet string with the value '0xFF' along with a tmnxOtuIfPsiTtiTxMode set to the value of 'auto (0)' will reset the PSI Trace to the system generated value.")
tmnxOtuIfPsiTtiRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 27), TmnxOtuTtiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiRx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiRx.setDescription('The value of tmnxOtuIfPsiTtiRx indicates the Trail Trace Identifier (TTI) for the Payload Structure Identifier (PSI) in the received OTU overhead.')
tmnxOtuIfPsiTtiExpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 28), TmnxOtuTtiMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiExpMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiExpMode.setDescription("The value of tmnxOtuIfPsiTtiExpMode specifies the type of expected Trail Trace Identifier (TTI) Payload Structure Identifier (PSI) in the OTU overhead. Specifying a tmnxOtuIfPsiTtiExpMode value of 'auto (0)' along with tmnxOtuIfPsiTtiExp set with a single octet of '0xFF' will revert the PSI-TTI to the default which is 'all zeros' in tmnxOtuIfPsiTtiExp.")
tmnxOtuIfPsiTtiExpCopyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 29), TmnxActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiExpCopyRx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiExpCopyRx.setDescription('tmnxOtuIfPsiTtiExpCopyRx is used to copy the contents of tmnxOtuIfPsiTtiRx into tmnxOtuIfPsiTtiExp.')
tmnxOtuIfPsiTtiExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 30), TmnxOtuTtiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiExp.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiTtiExp.setDescription("The value of tmnxOtuIfPsiTtiExp indicates the Trail Trace Identifier (TTI) for the Payload Structure Identifier (PSI) that is expected to be received in the OTU overhead. A mismatch of the received and the expected PSI Trace will cause an 'opuTim' alarm to be raised")
tmnxOtuIfPsiPayloadTypeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 31), TmnxOtuPsiPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiPayloadTypeTx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiPayloadTypeTx.setDescription("The value of tmnxOtuIfPsiPayloadTypeTx specifies the Payload Type in the transmitted OPU PSI overhead. Specifying a value 'auto (0)' will provision the standard defined payload type for the current OTU mode of operation.")
tmnxOtuIfPsiPayloadTypeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 32), TmnxOtuPsiPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfPsiPayloadTypeRx.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiPayloadTypeRx.setDescription('The value of tmnxOtuIfPsiPayloadTypeRx indicates the Payload Type in the received OPU PSI overhead.')
tmnxOtuIfPsiPayloadTypeExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 33), TmnxOtuPsiPayloadType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiPayloadTypeExp.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiPayloadTypeExp.setDescription("The value of tmnxOtuIfPsiPayloadTypeExp indicates the Payload Type that is expected to be received in the OPU PSI overhead. Specifying a value 'auto (0)' will provision the standard defined payload type for the current OTU mode of operation. A mismatch of the received and the expected Payload type will cause an 'opuPlm' alarm to be raised")
tmnxOtuIfGfpMappingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 34), TruthValue().clone('false'))
if mibBuilder.loadTexts: tmnxOtuIfGfpMappingEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfGfpMappingEnable.setDescription('The value of tmnxOtuIfGfpMappingEnable specifies whether or not the GFP mapping mode of transporting 10GbE is enabled.')
tmnxOtuIfAsyncMappingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 35), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfAsyncMappingEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfAsyncMappingEnable.setDescription('The value of tmnxOtuIfAsyncMappingEnable specifies whether or not the Asynchronous mapping mode of transporting the OTU client is enabled. When this value is set to false, the OTU client is client is mapped Synchronously.')
tmnxOtuIfSmTimReaction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 36), TmnxOtuTimReaction().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfSmTimReaction.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSmTimReaction.setDescription("The value of tmnxOtuIfSmTimReaction specifies the reaction that should be taken in the event of a Section Monitor Trace Inentifier Mismatch. Specifying a value 'none (0)' indicates that no reaction should occur and therefore the ingress data will be passed through in the event of a Section Monitor Trace Indentifier mismatch. Specifying a value 'squelch-rx (1)' indicates that the incoming data will be squelched and therefore the ingress data will be blocked with a maintenance signal in the event of a Section Monitor Trace Indentifier mismatch.")
tmnxOtuIfPmTimReaction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 37), TmnxOtuTimReaction().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPmTimReaction.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPmTimReaction.setDescription("The value of tmnxOtuIfSmTimReaction specifies the reaction that should be taken in the event of a Path Monitor Trace Inentifier Mismatch. Specifying a value 'none (0)' indicates that no reaction should occur and therefore the ingress data will be passed through in the event of a Path Monitor Trace Indentifier mismatch. Specifying a value 'squelch-rx (1)' indicates that the incoming data will be squelched and therefore the ingress data will be blocked with a maintenance signal in the event of a Path Monitor Trace Indentifier mismatch.")
tmnxOtuIfPsiTimReaction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 38), TmnxOtuTimReaction().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiTimReaction.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiTimReaction.setDescription("The value of tmnxOtuIfSmTimReaction specifies the reaction that should be taken in the event of a Payload Structure Identifier Trace Mismatch. Specifying a value 'none (0)' indicates that no reaction should occur and therefore the ingress data will be passed through in the event of a Payload Structure Identifier Trace mismatch. Specifying a value 'squelch-rx (1)' indicates that the incoming data will be squelched and therefore the ingress data will be blocked with a maintenance signal in the event of a Payload Structure Identifier Trace mismatch.")
tmnxOtuIfPsiPlmReaction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 1, 1, 1, 39), TmnxOtuTimReaction().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxOtuIfPsiPlmReaction.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPsiPlmReaction.setDescription("The value of tmnxOtuIfSmTimReaction specifies the reaction that should be taken in the event of a Payload Type mismatch. Specifying a value 'none (0)' indicates that no reaction should occur and therefore the ingress data will be passed through in the event of a Payload Type mismatch. Specifying a value 'squelch-rx (1)' indicates that the incoming data will be squelched and therefore the ingress data will be blocked with a maintenance signal in the event of a Payload Type mismatch.")
tmnxOtuIfRawStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1), )
if mibBuilder.loadTexts: tmnxOtuIfRawStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsTable.setDescription('The tmnxOtuIfRawStatsTable consists of the raw statistics associated with the OTU interfaces contained in the tmnxOtuIfTable.')
tmnxOtuIfRawStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tmnxOtuIfRawStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsEntry.setDescription('The tmnxOtuIfRawStatsEntry stores the statistics for an individual OTU interface. tmnxOtuIfRawStatsEntry rows are created and destroyed by the system when rows are added or removed in the tmnxOtuIfTable.')
tmnxOtuIfRawStatsFECCorrZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 1), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECCorrZeros.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECCorrZeros.setDescription('The value of tmnxOtuIfRawStatsFECCorrZeros indicates the number of Forward Error Correction (FEC) corrected zeros.')
tmnxOtuIfRawStatsOFFECCorrZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 2), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFFECCorrZeros.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFFECCorrZeros.setDescription('The value of tmnxOtuIfRawStatsOFFECCorrZeros indicates the number of times the tmnxOtuIfRawStatsFECCorrZeros overflowed.')
tmnxOtuIfRawStatsHCFECCorrZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 3), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCFECCorrZeros.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCFECCorrZeros.setDescription('The value of tmnxOtuIfRawStatsHCFECCorrZeros indicates the High Capacity number of Forward Error Correction (FEC) corrected zeros.')
tmnxOtuIfRawStatsFECCorrOnes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 4), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECCorrOnes.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECCorrOnes.setDescription('The value of tmnxOtuIfRawStatsFECCorrOnes indicates the number of Forward Error Correction (FEC) corrected ones.')
tmnxOtuIfRawStatsOFFECCorrOnes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 5), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFFECCorrOnes.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFFECCorrOnes.setDescription('The value of tmnxOtuIfRawStatsFECCorrOnes indicates the number of times the tmnxOtuIfRawStatsFECCorrOnes overflowed.')
tmnxOtuIfRawStatsHCFECCorrOnes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 6), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCFECCorrOnes.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCFECCorrOnes.setDescription('The value of tmnxOtuIfRawStatsFECCorrOnes indicates the High Capacity number of Forward Error Correction (FEC) corrected ones.')
tmnxOtuIfRawStatsFECUncorrSR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 7), Counter32()).setUnits('Sub-Rows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECUncorrSR.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECUncorrSR.setDescription('The value of tmnxOtuIfRawStatsFECUncorrSR indicates the number of Forward Error Correction (FEC) Uncorrectable Sub-Rows.')
tmnxOtuIfRawStatsOFFECUncorrSR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 8), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFFECUncorrSR.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFFECUncorrSR.setDescription('The value of tmnxOtuIfRawStatsOFFECUncorrSR indicates the number of times the tmnxOtuIfRawStatsFECUncorrSR overflowed.')
tmnxOtuIfRawStatsHCFECUncorrSR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 9), Counter64()).setUnits('Sub-Rows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCFECUncorrSR.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCFECUncorrSR.setDescription('The value of tmnxOtuIfRawStatsHCFECUncorrSR indicates the High Capacity number of Forward Error Correction (FEC) Uncorrectable Sub-Rows.')
tmnxOtuIfRawStatsFECSES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 10), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECSES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECSES.setDescription('The value of tmnxOtuIfRawStatsFECSES indicates the number of Forward Error Correction (FEC) Severely Errors Seconds (SES).')
tmnxOtuIfRawStatsSMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 11), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMBIP8.setDescription('The value of tmnxOtuIfRawStatsSMBIP8 indicates the number of Section Monitoring (SM) BIP8 errors.')
tmnxOtuIfRawStatsOFSMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 12), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFSMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFSMBIP8.setDescription('The value of tmnxOtuIfRawStatsOFSMBIP8 indicates the number of times the tmnxOtuIfRawStatsSMBIP8 overflowed.')
tmnxOtuIfRawStatsHCSMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 13), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCSMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCSMBIP8.setDescription('The value of tmnxOtuIfRawStatsHCSMBIP8 indicates the High Capacity number of Section Monitoring (SM) BIP8 errors.')
tmnxOtuIfRawStatsSMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 14), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMBEI.setDescription('The value of tmnxOtuIfRawStatsSMBEI indicates the number of Section Monitoring (SM) Backward Error Indication (BEI) errors.')
tmnxOtuIfRawStatsOFSMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 15), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFSMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFSMBEI.setDescription('The value of tmnxOtuIfRawStatsOFSMBEI indicates the number of times the tmnxOtuIfRawStatsSMBEI overflowed.')
tmnxOtuIfRawStatsHCSMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 16), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCSMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCSMBEI.setDescription('The value of tmnxOtuIfRawStatsHCSMBEI indicates the High Capacity number of Section Monitoring (SM) Backward Error Indication (BEI) errors.')
tmnxOtuIfRawStatsSMSES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 17), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMSES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMSES.setDescription('The value of tmnxOtuIfRawStatsSMSES indicates the number of Section Monitoring (SM) Severely Errored Seconds (SES).')
tmnxOtuIfRawStatsPMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 18), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMBIP8.setDescription('The value of tmnxOtuIfRawStatsPMBIP8 indicates the number of Path Monitoring (PM) BIP8 errors.')
tmnxOtuIfRawStatsOFPMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 19), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFPMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFPMBIP8.setDescription('The value of tmnxOtuIfRawStatsOFPMBIP8 indicates the number of times the tmnxOtuIfRawStatsPMBIP8 overflowed.')
tmnxOtuIfRawStatsHCPMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 20), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCPMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCPMBIP8.setDescription('The value of tmnxOtuIfRawStatsHCPMBIP8 indicates the High Capacity number of Path Monitoring (PM) BIP8 errors.')
tmnxOtuIfRawStatsPMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 21), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMBEI.setDescription('The value of tmnxOtuIfRawStatsPMBEI indicates the number of Path Monitoring (PM) Backward Error Indication (BEI) errors.')
tmnxOtuIfRawStatsOFPMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 22), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFPMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsOFPMBEI.setDescription('The value of tmnxOtuIfRawStatsOFPMBEI indicates the number of times tmnxOtuIfRawStatsPMBEI overflowed.')
tmnxOtuIfRawStatsHCPMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 23), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCPMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsHCPMBEI.setDescription('The value of tmnxOtuIfRawStatsPMBEI indicates the High Capacity number of Path Monitoring (PM) Backward Error Indication (BEI) errors.')
tmnxOtuIfRawStatsPMSES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 24), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMSES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMSES.setDescription('The value of tmnxOtuIfRawStatsPMSES indicates the number of Path Monitoring (PM) Severely Errored Seconds (SES).')
tmnxOtuIfRawStatsFECES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 25), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECES.setDescription('The value of tmnxOtuIfRawStatsFECES indicates the number of Forward Error Correction (FEC) Errors Seconds (ES).')
tmnxOtuIfRawStatsFECUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 26), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECUAS.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsFECUAS.setDescription('The value of tmnxOtuIfRawStatsFECUAS indicates the number of Forward Error Correction (FEC) Unavailable Seconds (UAS).')
tmnxOtuIfRawStatsSMES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 27), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMES.setDescription('The value of tmnxOtuIfRawStatsSMES indicates the number of Section Monitoring (SM) Errored Seconds (ES).')
tmnxOtuIfRawStatsSMUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 28), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMUAS.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsSMUAS.setDescription('The value of tmnxOtuIfRawStatsSMUAS indicates the number of Section Monitoring (SM) Unavailable Seconds (UAS).')
tmnxOtuIfRawStatsPMES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 29), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMES.setDescription('The value of tmnxOtuIfRawStatsPMES indicates the number of Path Monitoring (PM) Errored Seconds (ES).')
tmnxOtuIfRawStatsPMUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 30), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMUAS.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPMUAS.setDescription('The value of tmnxOtuIfRawStatsPMUAS indicates the number of Path Monitoring (PM) Unavailable Seconds (UAS).')
tmnxOtuIfRawStatsNPJ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 31), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsNPJ.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsNPJ.setDescription('The value of tmnxOtuIfRawStatsNPJ indicates the number of Negative Pointer justifications that occured during the asynchronous demapping of the received payload inside the OTU frame.')
tmnxOtuIfRawStatsPPJ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 32), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPPJ.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsPPJ.setDescription('The value of tmnxOtuIfRawStatsPPJ indicates the number of Positive Pointer justifications that occured during the asynchronous demapping of the received payload inside the OTU frame.')
tmnxOtuIfRawStatsElapsedSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 1, 1, 33), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfRawStatsElapsedSec.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfRawStatsElapsedSec.setDescription('The value of tmnxOtuIfRawStatsElapsedSec indicates the number of Elapsed seconds since the last OTU raw statistics clearing.')
tmnxOtuIfIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2), )
if mibBuilder.loadTexts: tmnxOtuIfIntervalStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntervalStatsTable.setDescription('The tmnxOtuIfIntervalStatsTable consists of the statistic elements associated with the OTU interfaces contained in the tmnxOtuIfTable.')
tmnxOtuIfIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsIndex"))
if mibBuilder.loadTexts: tmnxOtuIfIntervalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntervalStatsEntry.setDescription('The tmnxOtuIfIntervalStatsEntry stores the statistics for an individual OTU interface per row. tmnxOtuIfIntervalStatsEntry objects are created and destroyed by the system when rows are added or removed in the tmnxOtuIfTable.')
tmnxOtuIfIntvlStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 96), )))
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsIndex.setDescription('The tmnxOtuIfIntvlStatsIndex specifies the 15 minute statistic snap-shot for the OTU interface. The interval index value of 0 specifies the current raw 15 minute statistic window. The value of one indicates the most recently completed 15 minute interval statistics snap-shot. The interval identified by N is the interval immediately preceding the one identified by N-1.')
tmnxOtuIfIntvlStatsIsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsIsValid.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsIsValid.setDescription('The value of tmnxOtuIfIntvlStatsIsValid indicates whether or not the current statistics interval is valid. The raw interval (tmnxOtuIfIntvlStatsIndex set to 0) is always false.')
tmnxOtuIfIntvlStatsFECCorrZeros = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 3), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECCorrZeros.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECCorrZeros.setDescription('The value of tmnxOtuIfIntvlStatsFECCorrZeros indicates the number of Forward Error Correction (FEC) corrected zeros.')
tmnxOtuIfIntvlStatsFECCorrOnes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 4), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECCorrOnes.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECCorrOnes.setDescription('The value of tmnxOtuIfIntvlStatsFECCorrOnes indicates the number of Forward Error Correction (FEC) corrected ones.')
tmnxOtuIfIntvlStatsFECUncorrSR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 5), Counter32()).setUnits('Sub-Rows').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECUncorrSR.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECUncorrSR.setDescription('The value of tmnxOtuIfIntvlStatsFECUncorrSR indicates the number of Forward Error Correction (FEC) Uncorrectable Sub-Rows.')
tmnxOtuIfIntvlStatsFECSES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECSES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECSES.setDescription('The value of tmnxOtuIfIntvlStatsFECSES indicates the number of Forward Error Correction (FEC) Severely Errors Seconds (SES).')
tmnxOtuIfIntvlStatsSMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 7), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMBIP8.setDescription('The value of tmnxOtuIfIntvlStatsSMBIP8 indicates the number of Section Monitoring (SM) BIP8 errors.')
tmnxOtuIfIntvlStatsSMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 8), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMBEI.setDescription('The value of tmnxOtuIfIntvlStatsSMBEI indicates the number of Section Monitoring (SM) Backward Error Indication (BEI) errors.')
tmnxOtuIfIntvlStatsSMSES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMSES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMSES.setDescription('The value of tmnxOtuIfIntvlStatsSMSES indicates the number of Section Monitoring (SM) Severely Errored Seconds (SES).')
tmnxOtuIfIntvlStatsPMBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 10), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMBIP8.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMBIP8.setDescription('The value of tmnxOtuIfIntvlStatsPMBIP8 indicates the number of Path Monitoring (PM) BIP8 errors.')
tmnxOtuIfIntvlStatsPMBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 11), Counter32()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMBEI.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMBEI.setDescription('The value of tmnxOtuIfIntvlStatsPMBEI indicates the number of Path Monitoring (PM) Backward Error Indication (BEI) errors.')
tmnxOtuIfIntvlStatsPMSES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 12), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMSES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMSES.setDescription('The value of tmnxOtuIfIntvlStatsPMSES indicates the number of Path Monitoring (PM) Severely Errored Seconds (SES).')
tmnxOtuIfIntvlStatsFECES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECES.setDescription('The value of tmnxOtuIfIntvlStatsFECES indicates the number of Forward Error Correction (FEC) Errors Seconds (ES).')
tmnxOtuIfIntvlStatsFECUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 14), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECUAS.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsFECUAS.setDescription('The value of tmnxOtuIfIntvlStatsFECUAS indicates the number of Forward Error Correction (FEC) Unavailable Seconds (UAS).')
tmnxOtuIfIntvlStatsSMES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 15), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMES.setDescription('The value of tmnxOtuIfIntvlStatsSMES indicates the number of Section Monitoring (SM) Errored Seconds (ES).')
tmnxOtuIfIntvlStatsSMUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 16), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMUAS.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsSMUAS.setDescription('The value of tmnxOtuIfIntvlStatsSMUAS indicates the number of Section Monitoring (SM) Unavailable Seconds (UAS).')
tmnxOtuIfIntvlStatsPMES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 17), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMES.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMES.setDescription('The value of tmnxOtuIfIntvlStatsPMES indicates the number of Path Monitoring (PM) Errored Seconds (ES).')
tmnxOtuIfIntvlStatsPMUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 18), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMUAS.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPMUAS.setDescription('The value of tmnxOtuIfIntvlStatsPMUAS indicates the number of Path Monitoring (PM) Unavailable Seconds (UAS).')
tmnxOtuIfIntvlStatsNPJ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 19), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsNPJ.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsNPJ.setDescription('The value of tmnxOtuIfIntvlStatsNPJ indicates the number of Negative Pointer justifications that occured during the asynchronous demapping of the received payload inside the OTU frame.')
tmnxOtuIfIntvlStatsPPJ = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 20), Counter32()).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPPJ.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsPPJ.setDescription('The value of tmnxOtuIfIntvlStatsPPJ indicates the number of Positive Pointer justifications that occured during the asynchronous demapping of the received payload inside the OTU frame.')
tmnxOtuIfIntvlStatsElapsedSec = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 62, 2, 2, 1, 21), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsElapsedSec.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfIntvlStatsElapsedSec.setDescription('The value of tmnxOtuIfIntvlStatsElapsedSec indicates the number of Elapsed seconds in the current statistics interval.')
tmnxOtuIfAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 62, 0, 1)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfAlarmState"))
if mibBuilder.loadTexts: tmnxOtuIfAlarmNotification.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfAlarmNotification.setDescription('The tmnxOtuIfAlarmNotification notification indicates that an OTU interface has experienced either a raising or clearing of an alarm in the Forward Error Correction (FEC), Section Monitoring (SM), Path Monitoring (PM) or Payload Monitoring (PSI) fields of the OTU frame.')
tmnxOtuCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 1, 1)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfBaseConfigGroup"), ("TIMETRA-OTU-MIB", "tmnxOtuIfBaseConfigGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSMGroup"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSMGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPMGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPSIGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuStatsGroup"), ("TIMETRA-OTU-MIB", "tmnxOtuStatsGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuCompliance = tmnxOtuCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxOtuCompliance.setDescription('The compliance statement for revision 1.0 of TIMETRA-OTU-MIB.')
tmnxOtuComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 1, 2)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfBaseConfigGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSMGroup"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSMGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPMGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPSIGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuStatsGroup"), ("TIMETRA-OTU-MIB", "tmnxOtuStatsGroupV8v0"), ("TIMETRA-OTU-MIB", "tmnxOtuNotificationGroup"), ("TIMETRA-OTU-MIB", "tmnxOtuObsoleteV8v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuComplianceV8v0 = tmnxOtuComplianceV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuComplianceV8v0.setDescription('The compliance statement for revision 8.0 of TIMETRA-OTU-MIB.')
tmnxOtuIfBaseConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 1)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfTableLastChanged"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRowStatus"), ("TIMETRA-OTU-MIB", "tmnxOtuIfTimeStamp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfFecMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSfSdMethod"), ("TIMETRA-OTU-MIB", "tmnxOtuIfBerSfThreshold"), ("TIMETRA-OTU-MIB", "tmnxOtuIfBerSdThreshold"), ("TIMETRA-OTU-MIB", "tmnxOtuIfOtu2LanDataRate"), ("TIMETRA-OTU-MIB", "tmnxOtuIfCfgAlarms"), ("TIMETRA-OTU-MIB", "tmnxOtuIfAlarmState"), ("TIMETRA-OTU-MIB", "tmnxOtuIfHoldTimeUp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfHoldTimeDown"), ("TIMETRA-OTU-MIB", "tmnxOtuIfOtuOperDataRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuIfBaseConfigGroup = tmnxOtuIfBaseConfigGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxOtuIfBaseConfigGroup.setDescription('The group of objects for management of OTU interfaces for the 7x50.')
tmnxOtuIfSMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 2)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiTxMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiTx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuIfSMGroup = tmnxOtuIfSMGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSMGroup.setDescription('The group of objects for management of Section Monitoring of OTU interfaces for the 7x50.')
tmnxOtuStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 3)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsFECCorrZeros"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsOFFECCorrZeros"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsHCFECCorrZeros"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsFECCorrOnes"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsOFFECCorrOnes"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsHCFECCorrOnes"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsFECUncorrSR"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsOFFECUncorrSR"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsHCFECUncorrSR"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsFECSES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsSMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsOFSMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsHCSMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsSMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsOFSMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsHCSMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsSMSES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsPMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsOFPMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsHCPMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsPMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsOFPMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsHCPMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsPMSES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsIsValid"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsFECCorrZeros"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsFECCorrOnes"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsFECUncorrSR"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsFECSES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsSMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsSMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsSMSES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsPMBIP8"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsPMBEI"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsPMSES"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuStatsGroup = tmnxOtuStatsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuStatsGroup.setDescription('The group of objects for monitoring statistics of OTU interfaces for the 7x50.')
tmnxOtuNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 4)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfAlarmNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuNotificationGroup = tmnxOtuNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuNotificationGroup.setDescription('The group of notifications supporting management of OTU interfaces for the 7x50.')
tmnxOtuGroupsV7v0 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 5))
tmnxOtuGroupsV8v0 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 6))
tmnxOtuIfBaseConfigGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 6, 1)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfTableLastChanged"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRowStatus"), ("TIMETRA-OTU-MIB", "tmnxOtuIfTimeStamp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfFecMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSfSdMethod"), ("TIMETRA-OTU-MIB", "tmnxOtuIfBerSfThreshold"), ("TIMETRA-OTU-MIB", "tmnxOtuIfBerSdThreshold"), ("TIMETRA-OTU-MIB", "tmnxOtuIfOtu2LanDataRate"), ("TIMETRA-OTU-MIB", "tmnxOtuIfCfgAlarms"), ("TIMETRA-OTU-MIB", "tmnxOtuIfAlarmState"), ("TIMETRA-OTU-MIB", "tmnxOtuIfOtuOperDataRate"), ("TIMETRA-OTU-MIB", "tmnxOtuIfAsyncMappingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuIfBaseConfigGroupV8v0 = tmnxOtuIfBaseConfigGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfBaseConfigGroupV8v0.setDescription('The group of additional objects for management of OTU interfaces for the 7x50 in Release 8.0.')
tmnxOtuIfSMGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 6, 2)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiTxMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiTx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiRx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiExpMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiExpCopyRx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTtiExp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfSmTimReaction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuIfSMGroupV8v0 = tmnxOtuIfSMGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfSMGroupV8v0.setDescription('The group of additional objects for management of Section Monitoring of OTU interfaces for the 7x50 in Release 8.0.')
tmnxOtuStatsGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 6, 3)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsFECES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsFECUAS"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsSMES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsSMUAS"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsPMES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsPMUAS"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsNPJ"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsPPJ"), ("TIMETRA-OTU-MIB", "tmnxOtuIfRawStatsElapsedSec"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsFECES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsFECUAS"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsSMES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsSMUAS"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsPMES"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsPMUAS"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsPPJ"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsNPJ"), ("TIMETRA-OTU-MIB", "tmnxOtuIfIntvlStatsElapsedSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuStatsGroupV8v0 = tmnxOtuStatsGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuStatsGroupV8v0.setDescription('The group of additional objects for monitoring statistics of OTU interfaces for the 7x50 in Release 8.0.')
tmnxOtuIfPMGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 6, 4)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfPmTtiTxMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPmTtiTx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPmTtiRx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPmTtiExpMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPmTtiExpCopyRx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPmTtiExp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPmTimReaction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuIfPMGroupV8v0 = tmnxOtuIfPMGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPMGroupV8v0.setDescription('The group of objects for management of Path Monitoring of OTU interfaces for the 7x50 in Release 8.0.')
tmnxOtuIfPSIGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 6, 5)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfPsiTtiTxMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiTtiTx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiTtiRx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiTtiExpMode"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiTtiExpCopyRx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiTtiExp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiPayloadTypeTx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiPayloadTypeRx"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiPayloadTypeExp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiTimReaction"), ("TIMETRA-OTU-MIB", "tmnxOtuIfPsiPlmReaction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuIfPSIGroupV8v0 = tmnxOtuIfPSIGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuIfPSIGroupV8v0.setDescription('The group of objects for management of Payload Structure Identifier of OTU interfaces for the 7x50 in Release 8.0.')
tmnxOtuObsoleteV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 62, 2, 6, 6)).setObjects(("TIMETRA-OTU-MIB", "tmnxOtuIfHoldTimeUp"), ("TIMETRA-OTU-MIB", "tmnxOtuIfHoldTimeDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOtuObsoleteV8v0Group = tmnxOtuObsoleteV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxOtuObsoleteV8v0Group.setDescription('The group of objects that were made obsolete for the 7x50 in Release 8.0.')
mibBuilder.exportSymbols("TIMETRA-OTU-MIB", tmnxOtuIfHoldTimeDown=tmnxOtuIfHoldTimeDown, tmnxOtuIfOtu2LanDataRate=tmnxOtuIfOtu2LanDataRate, tmnxOtuObsoleteV8v0Group=tmnxOtuObsoleteV8v0Group, tmnxOtuIfSMGroup=tmnxOtuIfSMGroup, tmnxOtuIfRawStatsPMUAS=tmnxOtuIfRawStatsPMUAS, tmnxOtuIfIntvlStatsNPJ=tmnxOtuIfIntvlStatsNPJ, tmnxOtuIfPsiTtiTx=tmnxOtuIfPsiTtiTx, tmnxOtuIfSmTtiRx=tmnxOtuIfSmTtiRx, tmnxOtuIfPsiTtiTxMode=tmnxOtuIfPsiTtiTxMode, tmnxOtuIfSmTimReaction=tmnxOtuIfSmTimReaction, tmnxOtuIfSmTtiExp=tmnxOtuIfSmTtiExp, tmnxOtuIfIntvlStatsPMBIP8=tmnxOtuIfIntvlStatsPMBIP8, tmnxOtuIfPsiTtiExpCopyRx=tmnxOtuIfPsiTtiExpCopyRx, tmnxOtuIfRawStatsFECCorrOnes=tmnxOtuIfRawStatsFECCorrOnes, tmnxOtuIfEntry=tmnxOtuIfEntry, tmnxOtuIfIntvlStatsFECUAS=tmnxOtuIfIntvlStatsFECUAS, tmnxOtuIfIntvlStatsElapsedSec=tmnxOtuIfIntvlStatsElapsedSec, tmnxOtuGroups=tmnxOtuGroups, tmnxOtuIfBaseConfigGroup=tmnxOtuIfBaseConfigGroup, tmnxOtuIfRawStatsEntry=tmnxOtuIfRawStatsEntry, tmnxOtuIfPsiPayloadTypeTx=tmnxOtuIfPsiPayloadTypeTx, tmnxOtuIfRawStatsOFFECUncorrSR=tmnxOtuIfRawStatsOFFECUncorrSR, tmnxOtuIfIntvlStatsFECSES=tmnxOtuIfIntvlStatsFECSES, TmnxOtuAlarms=TmnxOtuAlarms, tmnxOtuIfRawStatsPMBIP8=tmnxOtuIfRawStatsPMBIP8, tmnxOtuIfSfSdMethod=tmnxOtuIfSfSdMethod, tmnxOtuIfRawStatsSMBIP8=tmnxOtuIfRawStatsSMBIP8, tmnxOtuIfRawStatsHCFECCorrOnes=tmnxOtuIfRawStatsHCFECCorrOnes, tmnxOtuIfPmTtiTxMode=tmnxOtuIfPmTtiTxMode, tmnxOtuIfIntvlStatsIndex=tmnxOtuIfIntvlStatsIndex, tmnxOtuIfPsiPlmReaction=tmnxOtuIfPsiPlmReaction, tmnxOtuIfIntvlStatsPMES=tmnxOtuIfIntvlStatsPMES, tmnxOtuIfRawStatsHCFECCorrZeros=tmnxOtuIfRawStatsHCFECCorrZeros, tmnxOtuIfTable=tmnxOtuIfTable, tmnxOtuIfRawStatsSMUAS=tmnxOtuIfRawStatsSMUAS, tmnxOtuIfIntvlStatsFECUncorrSR=tmnxOtuIfIntvlStatsFECUncorrSR, tmnxOtuIfRawStatsTable=tmnxOtuIfRawStatsTable, TmnxOtuTimReaction=TmnxOtuTimReaction, tmnxOtuIfPmTtiExpMode=tmnxOtuIfPmTtiExpMode, tmnxOtuIfPsiTimReaction=tmnxOtuIfPsiTimReaction, PYSNMP_MODULE_ID=tmnxOtuMIBModule, tmnxOtuIfPMGroupV8v0=tmnxOtuIfPMGroupV8v0, tmnxOtuIfRowStatus=tmnxOtuIfRowStatus, tmnxOtuConformance=tmnxOtuConformance, tmnxOtuIfAsyncMappingEnable=tmnxOtuIfAsyncMappingEnable, tmnxOtuIfRawStatsFECUncorrSR=tmnxOtuIfRawStatsFECUncorrSR, tmnxOtuIfIntervalStatsTable=tmnxOtuIfIntervalStatsTable, tmnxOtuIfIntvlStatsFECCorrZeros=tmnxOtuIfIntvlStatsFECCorrZeros, tmnxOtuIfBaseConfigGroupV8v0=tmnxOtuIfBaseConfigGroupV8v0, tmnxOtuIfTableLastChanged=tmnxOtuIfTableLastChanged, tmnxOtuIfPmTtiTx=tmnxOtuIfPmTtiTx, tmnxOtuIfRawStatsPPJ=tmnxOtuIfRawStatsPPJ, tmnxOtuIfRawStatsPMSES=tmnxOtuIfRawStatsPMSES, tmnxOtuIfRawStatsHCSMBEI=tmnxOtuIfRawStatsHCSMBEI, tmnxOtuIfCfgAlarms=tmnxOtuIfCfgAlarms, tmnxOtuIfRawStatsPMBEI=tmnxOtuIfRawStatsPMBEI, tmnxOtuIfIntvlStatsSMSES=tmnxOtuIfIntvlStatsSMSES, tmnxOtuIfPSIGroupV8v0=tmnxOtuIfPSIGroupV8v0, tmnxOtuConfigurationTimeStamps=tmnxOtuConfigurationTimeStamps, tmnxOtuIfRawStatsHCSMBIP8=tmnxOtuIfRawStatsHCSMBIP8, tmnxOtuNotificationGroup=tmnxOtuNotificationGroup, tmnxOtuIfOtuOperDataRate=tmnxOtuIfOtuOperDataRate, tmnxOtuStatsGroup=tmnxOtuStatsGroup, tmnxOtuIfRawStatsOFFECCorrOnes=tmnxOtuIfRawStatsOFFECCorrOnes, tmnxOtuObjs=tmnxOtuObjs, tmnxOtuIfAlarmState=tmnxOtuIfAlarmState, tmnxOtuIfRawStatsFECSES=tmnxOtuIfRawStatsFECSES, TmnxOtuTtiMode=TmnxOtuTtiMode, tmnxOtuNotifyPrefix=tmnxOtuNotifyPrefix, TmnxOtuTtiString=TmnxOtuTtiString, tmnxOtuIfSmTtiTxMode=tmnxOtuIfSmTtiTxMode, tmnxOtuIfRawStatsElapsedSec=tmnxOtuIfRawStatsElapsedSec, tmnxOtuIfAlarmNotification=tmnxOtuIfAlarmNotification, tmnxOtuCompliance=tmnxOtuCompliance, tmnxOtuIfPmTimReaction=tmnxOtuIfPmTimReaction, tmnxOtuIfIntvlStatsIsValid=tmnxOtuIfIntvlStatsIsValid, tmnxOtuIfRawStatsHCFECUncorrSR=tmnxOtuIfRawStatsHCFECUncorrSR, tmnxOtuIfTimeStamp=tmnxOtuIfTimeStamp, tmnxOtuIfIntvlStatsFECES=tmnxOtuIfIntvlStatsFECES, tmnxOtuStatsGroupV8v0=tmnxOtuStatsGroupV8v0, tmnxOtuIfPmTtiRx=tmnxOtuIfPmTtiRx, tmnxOtuIfRawStatsOFSMBIP8=tmnxOtuIfRawStatsOFSMBIP8, tmnxOtuIfRawStatsFECCorrZeros=tmnxOtuIfRawStatsFECCorrZeros, tmnxOtuIfRawStatsFECUAS=tmnxOtuIfRawStatsFECUAS, tmnxOtuIfIntvlStatsFECCorrOnes=tmnxOtuIfIntvlStatsFECCorrOnes, tmnxOtuMIBModule=tmnxOtuMIBModule, tmnxOtuIfGfpMappingEnable=tmnxOtuIfGfpMappingEnable, tmnxOtuIfSmTtiExpMode=tmnxOtuIfSmTtiExpMode, tmnxOtuIfFecMode=tmnxOtuIfFecMode, tmnxOtuIfRawStatsFECES=tmnxOtuIfRawStatsFECES, tmnxOtuConfigurations=tmnxOtuConfigurations, tmnxOtuIfRawStatsNPJ=tmnxOtuIfRawStatsNPJ, tmnxOtuIfRawStatsOFPMBIP8=tmnxOtuIfRawStatsOFPMBIP8, TmnxOtuPsiPayloadType=TmnxOtuPsiPayloadType, tmnxOtuIfRawStatsHCPMBEI=tmnxOtuIfRawStatsHCPMBEI, tmnxOtuCompliances=tmnxOtuCompliances, tmnxOtuIfIntvlStatsPMSES=tmnxOtuIfIntvlStatsPMSES, tmnxOtuIfIntvlStatsSMUAS=tmnxOtuIfIntvlStatsSMUAS, tmnxOtuIfRawStatsOFFECCorrZeros=tmnxOtuIfRawStatsOFFECCorrZeros, TmnxOtuSFSDMethod=TmnxOtuSFSDMethod, tmnxOtuIfPsiPayloadTypeExp=tmnxOtuIfPsiPayloadTypeExp, tmnxOtuIfRawStatsSMES=tmnxOtuIfRawStatsSMES, tmnxOtuIfRawStatsSMSES=tmnxOtuIfRawStatsSMSES, tmnxOtuIfIntvlStatsSMBEI=tmnxOtuIfIntvlStatsSMBEI, tmnxOtuIfPsiTtiRx=tmnxOtuIfPsiTtiRx, tmnxOtuIfIntvlStatsPMUAS=tmnxOtuIfIntvlStatsPMUAS, tmnxOtuIfPmTtiExpCopyRx=tmnxOtuIfPmTtiExpCopyRx, tmnxOtuIfIntvlStatsPMBEI=tmnxOtuIfIntvlStatsPMBEI, tmnxOtuIfIntervalStatsEntry=tmnxOtuIfIntervalStatsEntry, tmnxOtuIfRawStatsPMES=tmnxOtuIfRawStatsPMES, TmnxOtu2LanDataRate=TmnxOtu2LanDataRate, tmnxOtuIfHoldTimeUp=tmnxOtuIfHoldTimeUp, tmnxOtuIfPsiTtiExpMode=tmnxOtuIfPsiTtiExpMode, tmnxOtuIfPsiTtiExp=tmnxOtuIfPsiTtiExp, tmnxOtuStatistics=tmnxOtuStatistics, tmnxOtuIfRawStatsOFSMBEI=tmnxOtuIfRawStatsOFSMBEI, tmnxOtuIfBerSdThreshold=tmnxOtuIfBerSdThreshold, tmnxOtuIfSmTtiTx=tmnxOtuIfSmTtiTx, tmnxOtuIfSMGroupV8v0=tmnxOtuIfSMGroupV8v0, tmnxOtuGroupsV7v0=tmnxOtuGroupsV7v0, tmnxOtuIfPsiPayloadTypeRx=tmnxOtuIfPsiPayloadTypeRx, tmnxOtuGroupsV8v0=tmnxOtuGroupsV8v0, tmnxOtuIfIntvlStatsPPJ=tmnxOtuIfIntvlStatsPPJ, tmnxOtuIfPmTtiExp=tmnxOtuIfPmTtiExp, TmnxOtuFecMode=TmnxOtuFecMode, tmnxOtuIfRawStatsSMBEI=tmnxOtuIfRawStatsSMBEI, tmnxOtuNotifications=tmnxOtuNotifications, tmnxOtuIfSmTtiExpCopyRx=tmnxOtuIfSmTtiExpCopyRx, tmnxOtuIfRawStatsHCPMBIP8=tmnxOtuIfRawStatsHCPMBIP8, tmnxOtuIfBerSfThreshold=tmnxOtuIfBerSfThreshold, tmnxOtuComplianceV8v0=tmnxOtuComplianceV8v0, tmnxOtuIfRawStatsOFPMBEI=tmnxOtuIfRawStatsOFPMBEI, tmnxOtuIfIntvlStatsSMBIP8=tmnxOtuIfIntvlStatsSMBIP8, tmnxOtuIfIntvlStatsSMES=tmnxOtuIfIntvlStatsSMES)
