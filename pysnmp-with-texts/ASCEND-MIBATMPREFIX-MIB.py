#
# PySNMP MIB module ASCEND-MIBATMPREFIX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBATMPREFIX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Gauge32, ObjectIdentity, MibIdentifier, Bits, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Unsigned32, ModuleIdentity, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Unsigned32", "ModuleIdentity", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibatmPrefixProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 22))
mibatmPrefixProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 22, 1), )
if mibBuilder.loadTexts: mibatmPrefixProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibatmPrefixProfileTable.setDescription('A list of mibatmPrefixProfile profile entries.')
mibatmPrefixProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1), ).setIndexNames((0, "ASCEND-MIBATMPREFIX-MIB", "atmPrefixProfile-PrefixName"))
if mibBuilder.loadTexts: mibatmPrefixProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibatmPrefixProfileEntry.setDescription('A mibatmPrefixProfile entry containing objects that maps to the parameters of mibatmPrefixProfile profile.')
atmPrefixProfile_PrefixName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 1), DisplayString()).setLabel("atmPrefixProfile-PrefixName").setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPrefixProfile_PrefixName.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_PrefixName.setDescription('The name of the ATM Address Prefix Profile.')
atmPrefixProfile_UseShortAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("atmPrefixProfile-UseShortAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_UseShortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_UseShortAddress.setDescription("Applies to default address generated using this profile's prefix. Flag == NO (default) value means, default address generated will always be 20 byte long. FLAG == YES value means, default address generated could be less than 20 byte. Also algorithm used to generate is different based on this flag's value. use-short-address == FALSE, in NSAP structure, ESI byte is coded as follows. FF MSB MSB-1 MSB-2 LSB PortNumber. In case short-flag == TRUE, in NSAP structure, immediately after Prefix length, following 8 bits are used for the slot number and subsequent 8 bits are used for the port number.")
atmPrefixProfile_PnniNodePrefix_Length = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 3), Integer32()).setLabel("atmPrefixProfile-PnniNodePrefix-Length").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_PnniNodePrefix_Length.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_PnniNodePrefix_Length.setDescription('Length of the prefix in number of bytes.')
atmPrefixProfile_PnniNodePrefix_Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 4), DisplayString()).setLabel("atmPrefixProfile-PnniNodePrefix-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_PnniNodePrefix_Address.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_PnniNodePrefix_Address.setDescription('The prefix value.')
atmPrefixProfile_SpvcAddressPrefix_Length = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 5), Integer32()).setLabel("atmPrefixProfile-SpvcAddressPrefix-Length").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_SpvcAddressPrefix_Length.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_SpvcAddressPrefix_Length.setDescription('Length of the prefix in number of bytes.')
atmPrefixProfile_SpvcAddressPrefix_Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 6), DisplayString()).setLabel("atmPrefixProfile-SpvcAddressPrefix-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_SpvcAddressPrefix_Address.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_SpvcAddressPrefix_Address.setDescription('The prefix value.')
atmPrefixProfile_SvcAddressPrefix_Length = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 7), Integer32()).setLabel("atmPrefixProfile-SvcAddressPrefix-Length").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_SvcAddressPrefix_Length.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_SvcAddressPrefix_Length.setDescription('Length of the prefix in number of bytes.')
atmPrefixProfile_SvcAddressPrefix_Address = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 8), DisplayString()).setLabel("atmPrefixProfile-SvcAddressPrefix-Address").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_SvcAddressPrefix_Address.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_SvcAddressPrefix_Address.setDescription('The prefix value.')
atmPrefixProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 22, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("atmPrefixProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPrefixProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: atmPrefixProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBATMPREFIX-MIB", atmPrefixProfile_PrefixName=atmPrefixProfile_PrefixName, atmPrefixProfile_SpvcAddressPrefix_Length=atmPrefixProfile_SpvcAddressPrefix_Length, DisplayString=DisplayString, mibatmPrefixProfileTable=mibatmPrefixProfileTable, atmPrefixProfile_PnniNodePrefix_Address=atmPrefixProfile_PnniNodePrefix_Address, mibatmPrefixProfile=mibatmPrefixProfile, atmPrefixProfile_SpvcAddressPrefix_Address=atmPrefixProfile_SpvcAddressPrefix_Address, atmPrefixProfile_SvcAddressPrefix_Address=atmPrefixProfile_SvcAddressPrefix_Address, atmPrefixProfile_Action_o=atmPrefixProfile_Action_o, atmPrefixProfile_UseShortAddress=atmPrefixProfile_UseShortAddress, mibatmPrefixProfileEntry=mibatmPrefixProfileEntry, atmPrefixProfile_SvcAddressPrefix_Length=atmPrefixProfile_SvcAddressPrefix_Length, atmPrefixProfile_PnniNodePrefix_Length=atmPrefixProfile_PnniNodePrefix_Length)
