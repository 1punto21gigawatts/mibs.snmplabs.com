#
# PySNMP MIB module A3COM-HUAWEI-SYSLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-SYSLOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:07:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Gauge32, ModuleIdentity, TimeTicks, Unsigned32, Counter32, Bits, MibIdentifier, NotificationType, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Gauge32", "ModuleIdentity", "TimeTicks", "Unsigned32", "Counter32", "Bits", "MibIdentifier", "NotificationType", "Integer32", "ObjectIdentity")
RowStatus, TAddress, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TAddress", "DisplayString", "TextualConvention", "TruthValue")
h3cSyslog = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63))
h3cSyslog.setRevisions(('2010-06-09 10:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cSyslog.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: h3cSyslog.setLastUpdated('201006091050Z')
if mibBuilder.loadTexts: h3cSyslog.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: h3cSyslog.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cSyslog.setDescription('All the configuration of the syslog can be managed by syslog Mib.')
class MessageLevelType(TextualConvention, Integer32):
    description = 'Specify severity level of message.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8), ("invalid", 9))

class TimeStampType(TextualConvention, Integer32):
    description = 'Specify operation types on time stamp of message. none: no time stamp information in message. date: the time stamp type of message is date. boot: the time stamp type of message is the time from uptime of system. dateWithoutYear: the time stamp type of message is date without year information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("date", 2), ("boot", 3), ("dateWithoutYear", 4))

class FacilityType(TextualConvention, Integer32):
    description = 'Specify loghost facility which generates messages.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("kernel", 0), ("userLevel", 1), ("mailSystem", 2), ("systemDaemons", 3), ("securityAuthorization", 4), ("internallyMessages", 5), ("linePrinter", 6), ("networkNews", 7), ("uucp", 8), ("clockDaemon", 9), ("securityAuthorization2", 10), ("ftpDaemon", 11), ("ntp", 12), ("logAudit", 13), ("logAlert", 14), ("clockDaemon2", 15), ("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23))

h3cSyslogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1))
h3cSyslogObject = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 1))
h3cSyslogState = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogState.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogState.setDescription('The state of syslog: true(1):enable. false(2):disable.')
h3cSyslogMaxLoghost = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSyslogMaxLoghost.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogMaxLoghost.setDescription('The object shows the maximum number of rows in h3cLoghostTable.')
h3cSyslogMaxChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSyslogMaxChannel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogMaxChannel.setDescription('The object shows the maximum number of channels in h3cSyslogChannelTable.')
h3cSyslogMaxLogbufferSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSyslogMaxLogbufferSize.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogMaxLogbufferSize.setDescription('The maximum number of messages that can be stored in logbuffer.')
h3cSyslogMaxTrapbufferSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSyslogMaxTrapbufferSize.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogMaxTrapbufferSize.setDescription('The maximum number of messages that can be stored in trapbuffer.')
h3cSyslogConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 2))
h3cSyslogConsoleChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogConsoleChannel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogConsoleChannel.setDescription('The channel number of console.')
h3cSyslogMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 3))
h3cSyslogMonitorChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 3, 1), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogMonitorChannel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogMonitorChannel.setDescription('The channel number of monitor.')
h3cSyslogSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 4))
h3cSyslogSnmpChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 4, 1), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogSnmpChannel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogSnmpChannel.setDescription('The channel number of snmp.')
h3cSyslogLogbuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5))
h3cSyslogLogbufferChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 1), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogLogbufferChannel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogbufferChannel.setDescription('The channel number of logbuffer.')
h3cSyslogLogbufferSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 2), Integer32().clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogLogbufferSize.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogbufferSize.setDescription('The capacity of logbuffer which can be customized by users. The valid range is from 0 to h3cSyslogMaxLogbufferSize.')
h3cSyslogLogbufferTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 3), )
if mibBuilder.loadTexts: h3cSyslogLogbufferTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogbufferTable.setDescription('The table of logbuffer.')
h3cSyslogLogbufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cLogbufferIndex"))
if mibBuilder.loadTexts: h3cSyslogLogbufferEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogbufferEntry.setDescription('The logbuffer entry of syslog.')
h3cLogbufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cLogbufferIndex.setStatus('current')
if mibBuilder.loadTexts: h3cLogbufferIndex.setDescription('The index of this table.')
h3cLogbufferCurrentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cLogbufferCurrentMessages.setStatus('current')
if mibBuilder.loadTexts: h3cLogbufferCurrentMessages.setDescription('The number of log messages stored in logbuffer.')
h3cLogbufferOverwrittenMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cLogbufferOverwrittenMessages.setStatus('current')
if mibBuilder.loadTexts: h3cLogbufferOverwrittenMessages.setDescription('The number of log messages overwritten in logbuffer.')
h3cLogbufferDroppedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cLogbufferDroppedMessages.setStatus('current')
if mibBuilder.loadTexts: h3cLogbufferDroppedMessages.setDescription('The number of log messages dropped in logbuffer.')
h3cSyslogTrapbuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6))
h3cSyslogTrapbufferChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 1), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogTrapbufferChannel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapbufferChannel.setDescription('The channel number of trapbuffer.')
h3cSyslogTrapbufferSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 2), Integer32().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogTrapbufferSize.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapbufferSize.setDescription('The capacity of the trapbuffer which can be customized by users. The valid range is from 0 to h3cSyslogMaxTrapbufferSize.')
h3cSyslogTrapbufferTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 3), )
if mibBuilder.loadTexts: h3cSyslogTrapbufferTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapbufferTable.setDescription('The table of trapbuffer.')
h3cSyslogTrapbufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cTrapbufferIndex"))
if mibBuilder.loadTexts: h3cSyslogTrapbufferEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapbufferEntry.setDescription('The trapbuffer entry of syslog.')
h3cTrapbufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cTrapbufferIndex.setStatus('current')
if mibBuilder.loadTexts: h3cTrapbufferIndex.setDescription('The index of this table.')
h3cTrapbufferCurrentMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTrapbufferCurrentMessages.setStatus('current')
if mibBuilder.loadTexts: h3cTrapbufferCurrentMessages.setDescription('The number of trap messages stored in trapbuffer.')
h3cTrapbufferOverwrittenMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTrapbufferOverwrittenMessages.setStatus('current')
if mibBuilder.loadTexts: h3cTrapbufferOverwrittenMessages.setDescription('The number of trap messages overwritten in trapbuffer.')
h3cTrapbufferDroppedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cTrapbufferDroppedMessages.setStatus('current')
if mibBuilder.loadTexts: h3cTrapbufferDroppedMessages.setDescription('The number of trap messages dropped in trapbuffer.')
h3cSyslogLoghost = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7))
h3cSyslogLoghostSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogLoghostSourceInterface.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostSourceInterface.setDescription('The source interface which sends message to loghost. All loghosts use the same source interface.')
h3cSyslogLoghostTimestampType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 2), TimeStampType().clone('date')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogLoghostTimestampType.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostTimestampType.setDescription('Time stamp type of message sent to loghost.')
h3cSyslogLoghostTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3), )
if mibBuilder.loadTexts: h3cSyslogLoghostTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostTable.setDescription('The table of loghost.')
h3cSyslogLoghostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogLoghostIndex"))
if mibBuilder.loadTexts: h3cSyslogLoghostEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostEntry.setDescription('The loghost entry of syslog.')
h3cSyslogLoghostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cSyslogLoghostIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostIndex.setDescription('The index of this table.')
h3cSyslogLoghostChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 2), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostChannel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostChannel.setDescription('The channel number of loghost.')
h3cSyslogLoghostIpaddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostIpaddressType.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostIpaddressType.setDescription('The ip address type of loghost.')
h3cSyslogLoghostIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostIpaddress.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostIpaddress.setDescription('The ip address of loghost.')
h3cSyslogLoghostFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 5), FacilityType().clone('local7')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostFacility.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostFacility.setDescription('The operations staff can selectively filter the messages with priority which consists of facility that generates the message and severity of the message. ')
h3cSyslogLoghostLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chinese", 1), ("english", 2))).clone('english')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostLanguage.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostLanguage.setDescription('The language of the message sent to the loghost.')
h3cSyslogLoghostOperateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostOperateRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostOperateRowStatus.setDescription('The status of this table entry.')
h3cSyslogLoghostIpaddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostIpaddressPort.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostIpaddressPort.setDescription('The loghost server port.')
h3cSyslogLoghostTAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 7, 3, 1, 9), TAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLoghostTAddress.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLoghostTAddress.setDescription('The loghost server transport address.')
h3cSyslogChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 8))
h3cSyslogChannelTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 8, 1), )
if mibBuilder.loadTexts: h3cSyslogChannelTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogChannelTable.setDescription('A table of syslog channel.')
h3cSyslogChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 8, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogChannelIndex"))
if mibBuilder.loadTexts: h3cSyslogChannelEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogChannelEntry.setDescription('The channel entry of syslog.')
h3cSyslogChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cSyslogChannelIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogChannelIndex.setDescription('The index of this table.')
h3cSyslogChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogChannelName.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogChannelName.setDescription('The name of channel. The channel name must be different from each other.')
h3cSyslogModule = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 9))
h3cSyslogModuleTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 9, 1), )
if mibBuilder.loadTexts: h3cSyslogModuleTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogModuleTable.setDescription('A table of syslog module.')
h3cSyslogModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 9, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogModuleIndex"))
if mibBuilder.loadTexts: h3cSyslogModuleEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogModuleEntry.setDescription('The module entry of syslog.')
h3cSyslogModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cSyslogModuleIndex.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogModuleIndex.setDescription('The index of this table.')
h3cSyslogModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSyslogModuleName.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogModuleName.setDescription('The name of module.')
h3cSyslogLog = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10))
h3cSyslogLogTimestampType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10, 1), TimeStampType().clone('date')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogLogTimestampType.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogTimestampType.setDescription('Time stamp type of log message.')
h3cSyslogLogTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10, 2), )
if mibBuilder.loadTexts: h3cSyslogLogTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogTable.setDescription('A table of syslog module.')
h3cSyslogLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogChannelIndex"), (0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogModuleIndex"))
if mibBuilder.loadTexts: h3cSyslogLogEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogEntry.setDescription('The log entry of syslog.')
h3cSyslogLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10, 2, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLogState.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogState.setDescription('The switch state of log.')
h3cSyslogLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10, 2, 1, 2), MessageLevelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLogLevel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogLevel.setDescription('The level of log message.')
h3cSyslogLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogLogRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogRowStatus.setDescription('The status of this table entry.')
h3cSyslogLogGlobalLevel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 10, 3), MessageLevelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogLogGlobalLevel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogLogGlobalLevel.setDescription('The global level of log message.')
h3cSyslogTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 11))
h3cSyslogTrapTimestampType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 11, 1), TimeStampType().clone('date')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogTrapTimestampType.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapTimestampType.setDescription('Time stamp type of trap message.')
h3cSyslogTrapTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 11, 2), )
if mibBuilder.loadTexts: h3cSyslogTrapTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapTable.setDescription('A table of syslog module.')
h3cSyslogTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 11, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogChannelIndex"), (0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogModuleIndex"))
if mibBuilder.loadTexts: h3cSyslogTrapEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapEntry.setDescription('The trap entry of syslog.')
h3cSyslogTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 11, 2, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogTrapState.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapState.setDescription('The switch state of trap.')
h3cSyslogTrapLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 11, 2, 1, 2), MessageLevelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogTrapLevel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapLevel.setDescription('The level of trap message.')
h3cSyslogTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 11, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogTrapRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogTrapRowStatus.setDescription('The status of this table entry.')
h3cSyslogDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 12))
h3cSyslogDebugTimestampType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 12, 1), TimeStampType().clone('boot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSyslogDebugTimestampType.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogDebugTimestampType.setDescription('Time stamp type of debug message.')
h3cSyslogDebugTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 12, 2), )
if mibBuilder.loadTexts: h3cSyslogDebugTable.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogDebugTable.setDescription('A table of syslog module.')
h3cSyslogDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 12, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogChannelIndex"), (0, "A3COM-HUAWEI-SYSLOG-MIB", "h3cSyslogModuleIndex"))
if mibBuilder.loadTexts: h3cSyslogDebugEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogDebugEntry.setDescription('The debug entry of syslog.')
h3cSyslogDebugState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 12, 2, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogDebugState.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogDebugState.setDescription('The switch state of debug.')
h3cSyslogDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 12, 2, 1, 2), MessageLevelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogDebugLevel.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogDebugLevel.setDescription('The level of debug message.')
h3cSyslogDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 63, 1, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSyslogDebugRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSyslogDebugRowStatus.setDescription('The status of this table entry.')
mibBuilder.exportSymbols("A3COM-HUAWEI-SYSLOG-MIB", TimeStampType=TimeStampType, h3cSyslogModuleEntry=h3cSyslogModuleEntry, h3cTrapbufferOverwrittenMessages=h3cTrapbufferOverwrittenMessages, h3cSyslogTrapRowStatus=h3cSyslogTrapRowStatus, h3cSyslogModuleName=h3cSyslogModuleName, h3cSyslogLoghost=h3cSyslogLoghost, h3cSyslogMaxLoghost=h3cSyslogMaxLoghost, h3cSyslogSnmp=h3cSyslogSnmp, h3cSyslogMaxLogbufferSize=h3cSyslogMaxLogbufferSize, FacilityType=FacilityType, h3cSyslogLoghostChannel=h3cSyslogLoghostChannel, h3cSyslogDebugTable=h3cSyslogDebugTable, h3cSyslogLogbufferSize=h3cSyslogLogbufferSize, h3cSyslogTrapbufferTable=h3cSyslogTrapbufferTable, h3cSyslogDebugTimestampType=h3cSyslogDebugTimestampType, h3cSyslogLogLevel=h3cSyslogLogLevel, h3cSyslogTrapLevel=h3cSyslogTrapLevel, h3cLogbufferOverwrittenMessages=h3cLogbufferOverwrittenMessages, h3cSyslogConsoleChannel=h3cSyslogConsoleChannel, h3cLogbufferIndex=h3cLogbufferIndex, h3cSyslogLoghostOperateRowStatus=h3cSyslogLoghostOperateRowStatus, h3cSyslogTrap=h3cSyslogTrap, h3cSyslogLoghostIpaddress=h3cSyslogLoghostIpaddress, h3cSyslogLogbufferEntry=h3cSyslogLogbufferEntry, h3cSyslogConsole=h3cSyslogConsole, h3cSyslogLogEntry=h3cSyslogLogEntry, h3cSyslogDebug=h3cSyslogDebug, h3cSyslogLoghostTable=h3cSyslogLoghostTable, h3cSyslogSnmpChannel=h3cSyslogSnmpChannel, h3cSyslogDebugState=h3cSyslogDebugState, MessageLevelType=MessageLevelType, h3cSyslogState=h3cSyslogState, h3cSyslogLoghostTimestampType=h3cSyslogLoghostTimestampType, h3cSyslogTrapbufferSize=h3cSyslogTrapbufferSize, h3cSyslogLogTimestampType=h3cSyslogLogTimestampType, h3cSyslogLogTable=h3cSyslogLogTable, h3cSyslogTrapEntry=h3cSyslogTrapEntry, h3cSyslogLogState=h3cSyslogLogState, h3cSyslogMaxChannel=h3cSyslogMaxChannel, h3cSyslogModuleIndex=h3cSyslogModuleIndex, h3cSyslogChannelTable=h3cSyslogChannelTable, h3cSyslogDebugRowStatus=h3cSyslogDebugRowStatus, h3cSyslogLoghostIndex=h3cSyslogLoghostIndex, h3cSyslogTrapbufferChannel=h3cSyslogTrapbufferChannel, h3cSyslogLogRowStatus=h3cSyslogLogRowStatus, h3cSyslogLogbufferChannel=h3cSyslogLogbufferChannel, h3cSyslogTrapbuffer=h3cSyslogTrapbuffer, h3cLogbufferDroppedMessages=h3cLogbufferDroppedMessages, h3cSyslogMonitorChannel=h3cSyslogMonitorChannel, h3cSyslogTrapTimestampType=h3cSyslogTrapTimestampType, h3cTrapbufferCurrentMessages=h3cTrapbufferCurrentMessages, h3cSyslogLogbufferTable=h3cSyslogLogbufferTable, h3cTrapbufferDroppedMessages=h3cTrapbufferDroppedMessages, h3cSyslogLoghostSourceInterface=h3cSyslogLoghostSourceInterface, h3cSyslogObject=h3cSyslogObject, h3cSyslogDebugLevel=h3cSyslogDebugLevel, h3cSyslogLog=h3cSyslogLog, h3cSyslogTrapbufferEntry=h3cSyslogTrapbufferEntry, h3cSyslogChannelIndex=h3cSyslogChannelIndex, h3cTrapbufferIndex=h3cTrapbufferIndex, h3cSyslogMonitor=h3cSyslogMonitor, h3cSyslogLogGlobalLevel=h3cSyslogLogGlobalLevel, h3cSyslogMaxTrapbufferSize=h3cSyslogMaxTrapbufferSize, h3cSyslogChannelName=h3cSyslogChannelName, h3cSyslogModule=h3cSyslogModule, h3cSyslogChannelEntry=h3cSyslogChannelEntry, h3cSyslogLoghostLanguage=h3cSyslogLoghostLanguage, h3cSyslog=h3cSyslog, h3cLogbufferCurrentMessages=h3cLogbufferCurrentMessages, h3cSyslogLoghostFacility=h3cSyslogLoghostFacility, h3cSyslogLoghostEntry=h3cSyslogLoghostEntry, h3cSyslogDebugEntry=h3cSyslogDebugEntry, h3cSyslogLoghostTAddress=h3cSyslogLoghostTAddress, h3cSyslogTrapTable=h3cSyslogTrapTable, PYSNMP_MODULE_ID=h3cSyslog, h3cSyslogObjects=h3cSyslogObjects, h3cSyslogLoghostIpaddressType=h3cSyslogLoghostIpaddressType, h3cSyslogLogbuffer=h3cSyslogLogbuffer, h3cSyslogChannel=h3cSyslogChannel, h3cSyslogModuleTable=h3cSyslogModuleTable, h3cSyslogTrapState=h3cSyslogTrapState, h3cSyslogLoghostIpaddressPort=h3cSyslogLoghostIpaddressPort)
