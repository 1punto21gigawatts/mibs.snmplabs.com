#
# PySNMP MIB module ATSWTCH2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATSWTCH2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, Integer32, iso, Unsigned32, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ObjectIdentity, enterprises, NotificationType, TimeTicks, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Integer32", "iso", "Unsigned32", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ObjectIdentity", "enterprises", "NotificationType", "TimeTicks", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
atiProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
atswitchMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10))
atswitchSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1))
atswitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 2))
atswitchPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 3))
atswitchVlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 4))
atswitchEthernetStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 5))
atswitchEthPortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 6))
atswitchFwdVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 7))
atswitchTrapAttrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 8))
atswitchBridgeMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9))
atswitchStaticMACGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 10))
atswitchPortMacAddrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 12))
atswitchDebugMallocLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 13))
atswitchBrBase = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1))
atswitchBrStp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2))
atswitchBrTp = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3))
atswitchProductType = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("at-3726", 1), ("at-3714", 2), ("at-8124XL", 3), ("at-8118", 4), ("at-3726XL", 5), ("at-3714FXL", 6), ("at-3716XL", 7), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchProductType.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchProductType.setDescription(' This object will return Product Type. ')
atswitchEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthernetPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthernetPortCount.setDescription(' This object will return the number of 10/100 Mbps Ethernet ports on the switch. ')
atswitchReset = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-no-reset", 1), ("switch-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchReset.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchReset.setDescription(" Setting this object to 'switch-reset' will cause the switch to perform a hardware reset within approximately 4-6 seconds. Setting this object to 'switch-no-reset will have no effect. The value 'no-reset' will be returned whenever this object is retrieved. ")
atswitchMDA1Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rj45-mii", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchMDA1Type.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchMDA1Type.setDescription(' This object returns the MDA type of the Uplink port ')
atswitchMDA2Type = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rj45-mii", 1), ("fiber", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchMDA2Type.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchMDA2Type.setDescription(" This Object is supported in 81XX product line only. This object returns the MDA type of the Uplink Port named 'B'. It returns 'none' if a 'B' MDA slot is not installed. ")
atswitchDeviceFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchDeviceFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchDeviceFlowControl.setDescription(' This Object is supported on 81XX products only. This object configures the Flow Control of the Device ')
atswitchSwGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 7))
atswitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8))
atswitchNMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9))
atswitchSwProduct = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchSwProduct.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchSwProduct.setDescription('Identifies the software product the device is running. ')
atswitchSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchSwVersion.setDescription(' Identifies the version number of the present release. ')
atswitchCurrentIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchCurrentIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchCurrentIpAddress.setDescription(' The Current IP address is the one which is currently used and is obtained dynamically through one of the protocols interaction.( DHCP or Bootp.) This address is NULL if the Address is Statically configured. ')
atswitchConfiguredIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchConfiguredIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchConfiguredIpAddress.setDescription(' The Configured IP address of the device. This is the address configured through Network or Local Omega. ')
atswitchConfiguredSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchConfiguredSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchConfiguredSubnetMask.setDescription(' The Configured Subnet Mask of the device.')
atswitchConfiguredRouter = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchConfiguredRouter.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchConfiguredRouter.setDescription(' The Configured Gateway/Router address of the device')
atswitchIPAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("from-dhcp", 1), ("from-bootp", 2), ("from-psuedoip", 3), ("from-Omega", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchIPAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchIPAddressStatus.setDescription(' The IP Address can be obtained/configured by any of the above different ways. This object specifies how IP address currently on the switch Box, was configured/obtained. ')
atswitchDNServer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchDNServer.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchDNServer.setDescription(' The Configured DNS Server address of the device')
atswitchDefaultDomainName = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchDefaultDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchDefaultDomainName.setDescription(' This Object defines the Default Domain where this switch can be belong to. ')
atswitchNwMgrTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1), )
if mibBuilder.loadTexts: atswitchNwMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchNwMgrTable.setDescription(' A list of SNMP Trap Manager stations Entries. The number of entries is given by the switchNwMgrTotal mib object. ')
atswitchNwMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchNwMgrIndex"))
if mibBuilder.loadTexts: atswitchNwMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchNwMgrEntry.setDescription(" Trap receipt Manager Entry containing ipaddress of the configured NMS's to which Traps are sent. ")
atswitchNwMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchNwMgrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchNwMgrIndex.setDescription(' The Index of the Managers Ip address. ')
atswitchNwMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 1, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchNwMgrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchNwMgrIpAddr.setDescription(' The IP Address of the NMS host configured. ')
atswitchPortDisableOnSecurityViolation = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable-on-security-voilation", 1), ("suspend-on-double-address", 2), ("security-not-yet-initalized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortDisableOnSecurityViolation.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortDisableOnSecurityViolation.setDescription(' This System wide attribute allows the port to be disabled on Violation of the Security. or suspend the port due to Duplicate Address. Needs More explaination after somebody figures out whether atswitch needs the suspend state. ')
atswitchMirroringSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchMirroringSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchMirroringSourcePort.setDescription(" This is the Source port number for which there is another mirror port.If the atswitchEthConfigMirrorState is Enabled then ,the mirror portgets routed with all the packets going in and out of Source port. This arrangement is to put an RMON Probe on mirrored port to Probe the traffic on the Source port. One of the port is dedicated to this so that for any port as source port, this dedicated port can be a mirrored port. This object will return a '0' if the MirrorState is not enabled. For the AT-81XX only the receive activity can be mirrored. ")
atswitchMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2), ("both", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchMirrorState.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchMirrorState.setDescription(' if the state of Mirroring is enabled by selecting one of the first three values , then the Mirroring explained above works. If disabled, port operation works normally. No Traffic gets routed from MirroringSourcePort to Destination Mirrored Port. Mirroring of both transmit and receive activity can only be done if the port is half duplex. Choose both only if you know the port will be run in half duplex mode. ')
atswitchMirroringDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchMirroringDestinationPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchMirroringDestinationPort.setDescription(" This is the Destination port number for which there is another mirror port.If the atswitchEthConfigMirrorState is Enabled then ,the mirror portgets routed with all the packets going in and out of Destination port. This arrangement is to put an RMON Probe on mirrored port to Probe the traffic on the Destination port. One of the port is dedicated to this so that for any port as destination port, this dedicated port can be a mirrored port. This object will return a '0' if the MirrorState is not enabled. For the AT-81XX only the receive activity can be mirrored. ")
atswitchSecurityConfig = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-with-learning-locked", 2), ("limited-enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchSecurityConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchSecurityConfig.setDescription(' This Object is suppported only in 37XX product Line. Security feature configuration Object. The Security disable would let the device carry on the learn-new-address-as-it-comes-in mode as usual. When security is enabled-with-learning-locked, the learning of new address is stopped and the addresses locked in the device is used as the security Database. If an address comes in which is not present in the Device Security Database, then any of the atswitchSecurityAction Configured is triggered. When limited-enabled is selected, a per-port atswitchPortSecurityNumberOfAddresses specify the max number of MACs to be learned . ')
atswitchSecurityAction = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("send-trap-only", 1), ("disable-port-only", 2), ("disable-port-and-send-trap", 3), ("do-nothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchSecurityAction.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchSecurityAction.setDescription(' Security Action to be carried when the atswitchSecurityConfig is enabled-with-learning-locked or limted-enabled. ')
atswitchDebugAvailableBytes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugAvailableBytes.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchDebugAvailableBytes.setDescription(' This is strictly for Debug reason and this object should not be beleived as the correct number ')
atswitchTrunkConfig = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchTrunkConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchTrunkConfig.setDescription(' This Object Configures the Trunking for the Uplink Ports only. This feature is currently available only in Fenix 37XX-XL hardware. ')
atswitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1), )
if mibBuilder.loadTexts: atswitchPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortTable.setDescription('Table of basic port configuration information.')
atswitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchPortNumber"))
if mibBuilder.loadTexts: atswitchPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortEntry.setDescription('An entry in the port config table.')
atswitchPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortNumber.setDescription('This object identifies the port of the switch.')
atswitchPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortName.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortName.setDescription('This attribute associates a user defined string name with the port.')
atswitchPortAutosenseOrHalfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portAutoSense", 1), ("forceHalfDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortAutosenseOrHalfDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortAutosenseOrHalfDuplex.setDescription('This attribute allows an administrative request to configure whether this port can Autosense or Force the Half Duplex ')
atswitchPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortLinkState.setDescription('This attribute allows an administrative request to read the status of link state on this port.')
atswitchPortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortDuplexStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortDuplexStatus.setDescription('This attribute allows an administrative request to read the status of Duplex on this port.')
atswitchPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenMBits", 1), ("hundredMBits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortSpeed.setDescription(' This attribute allows an administrative request to read/write the speed of this port. This attribure is read-only for all the Ports on AT-37XX product . This Attribute is read-write for ATS21 (AT81XX) product Only. This attribute allows an administrative request to change the speed on ATS21 product.')
atswitchPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("blocking", 3), ("listening", 4), ("learning", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortState.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortState.setDescription('This attribute allows an administrative request to disable or enable communications on this port.It also responds with the status of the port .Except enabled(1) and disabled(2), all values are read-only status. ')
atswitchPortTransmitPacingConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortTransmitPacingConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortTransmitPacingConfig.setDescription('This Object is supported on AT36XX product line Only. This attribute allows the transmit Pacing to be enabled or disabled. ')
atswitchPortSTPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSTPConfig.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortSTPConfig.setDescription('This attribute allows a bridging Mode to be configured with either Spanning Tree enabled or disabled. When Spanning tree is enabled, make sure that this port is belonging to a valid Bridge_id. Spanning Tree is enabled only when a valid Bridge_id is set. ')
atswitchPortBridgeid = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortBridgeid.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortBridgeid.setDescription(' The Bridge to which this port belongs to . ')
atswitchPortSTPCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSTPCost.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortSTPCost.setDescription(' The Cost of the Spanning Tree Protocol.This object is valid only when STP is enabled. ')
atswitchPortSTPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSTPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortSTPPriority.setDescription(' The Priority of the spanning Tree Protocol. This object is valid when STP is enabled. ')
atswitchPortSwitchingType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast-cut-through", 1), ("store-and-forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSwitchingType.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortSwitchingType.setDescription('This per-port attribute describes whether the port identified by atswitchPortNumber uses store-and-forward bridging for local switched Ethernet packets or cut-through. The Hardware allows cut-through on Transmission and cut-through-on Receive and the same for the store-and-forward. But some of the Config option does not make any sense. So, for now there is no distiction of Rx and Tx. Both Tx/Rx support store-and-forward or cut-through. This Object is not applicable for 37XX with XL hardware as the Hardware does not support both Cut through and Store and Forward. It is default Store and Forward. Even though the Set on either of them is done, Hardware does not do the Cut through Switching. ')
atswitchPortFlowControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortFlowControlEnable.setStatus('deprecated')
if mibBuilder.loadTexts: atswitchPortFlowControlEnable.setDescription(' This Per_port attribute is only for ATS21 product.(81XX). This per-port attribute describes whether the port identified has flow Control Enabled or not. Flow Control on Full Duplex and Half Duplex is detected and Automatically, flow control accordingly is taken care of. BY Default, Flow Control is Disabled. ')
atswitchPortSecurityNumberOfAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPortSecurityNumberOfAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortSecurityNumberOfAddresses.setDescription(' This object configures the Max number of addresses at an instance to be learnt by the device. If the learnt addresses number is above this number, then the atswitchSecurityAction is triggered . when the number of learnt addresses exceeds this number ,the the atswitchSecurityAction is triggered only if atswitchSecurityConfig is set to limited-enalbled. ELse nothing is triggered. ')
atswitchBasicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1), )
if mibBuilder.loadTexts: atswitchBasicVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBasicVlanTable.setDescription('Table of Virtual LAN configured.')
atswitchBasicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBeVlanIndex"))
if mibBuilder.loadTexts: atswitchBasicVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBasicVlanEntry.setDescription('An entry in the table, containing VLAN information.')
atswitchBeVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBeVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBeVlanIndex.setDescription('This object identifies the VLAN.')
atswitchBeVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBeVlanName.setDescription("This attribute associates a user defined string with the Virtual LAN. To configure a new VLAN, do 'set' operation on this object with the VLAN name. To delete an VLAN, do 'set' operation with string '*'. Before configuring any of the objects in this row , set the atswitchVlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational ")
atswitchBeVlanTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanTagId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBeVlanTagId.setDescription(" This object is supported by 37xx series of fenix with the VLAN tagging capability hardware only. Please check whether the SysObjectId is greater than 29. This object configures the VId in the Tag Information header in accordance with 802.1q spec. Before configuring any of the objects in this row , set the atswitchVlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational ")
atswitchBeVlanPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanPortMask.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBeVlanPortMask.setDescription(" This object is supported by 37xx series of fenix with the VLAN tagging capability hardware only. Please check whether the SysObjectId is greater than 29. This Object builds the Output Ports that participate in the Vlan with the atswitchBeVlanName. The Format of the input string would be like '1,2,5,7,12'. Before configuring any of the objects in this row , set the atswitchVlanStatus to 'under-construction' and once configured with all the information, please set the same object to operational ")
atswitchBeVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("operational", 2), ("under-construction", 3), ("not-operational", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBeVlanRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBeVlanRowStatus.setDescription(" This object is supported by 37xx series of fenix with the VLAN tagging capability hardware only. Please check whether the SysObjectId is greater than 29. This object identifies the atswitchBeVLANEntry Row Status . The User sets this object to under-construction, to start with to create a row. Once the User Configures the VlanName and TagId and also the Output Ports.This object should be set to operational. If the user does not set this object to operational, the whole row is lost .when a 'get' of this row is done, this uncommited row is not seen. configured in the switch. ")
atswitchPort2VlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2), )
if mibBuilder.loadTexts: atswitchPort2VlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPort2VlanTable.setDescription('Table of per port Virtual LAN configuration.')
atswitchPort2VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchPvPortNumber"))
if mibBuilder.loadTexts: atswitchPort2VlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPort2VlanEntry.setDescription('An entry in the table, containing per port VLAN information.')
atswitchPvPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPvPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPvPortNumber.setDescription('This object identifies the port on the switch.')
atswitchPvVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchPvVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPvVlanName.setDescription('This attribute associates a user defined string with the Virtual LAN. This Object is the same as atswitchBeVlanName. Please make sure to give the same string as atswitchBeVlanName.')
atswitchEthMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1))
atswitchEthErrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2))
atswitchEthMonRxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonRxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthMonRxGoodFrames.setDescription(' The total number of Good Frames received on this module. ')
atswitchEthMonTxGoodFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthMonTxGoodFrames.setDescription(' The total number of Good Frames Transmitted by this module. ')
atswitchEthMonTxTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxTotalBytes.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthMonTxTotalBytes.setDescription(' The total number of Bytes transmitted from this module. ')
atswitchEthMonTxDeferred = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxDeferred.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthMonTxDeferred.setDescription(' This is the count of first time Transmission attempt which failed on an interface due to medium being busy. ')
atswitchEthMonTxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthMonTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthMonTxCollisions.setDescription(' The total number of collisions while switching on an interface. ')
atswitchEthErrorCRC = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorCRC.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthErrorCRC.setDescription(' The total number of CRC errors on received packets. ')
atswitchEthErrorAlignment = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorAlignment.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthErrorAlignment.setDescription(' The total number of packets received that has alignment errors ')
atswitchEthErrorRxBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorRxBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthErrorRxBadFrames.setDescription(' The counter is incremented when a bad frame was received. ')
atswitchEthErrorLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorLateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthErrorLateCollisions.setDescription(' This object counts the number of times the collison was detected in the port. ')
atswitchEthErrorTxTotal = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 5, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthErrorTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthErrorTxTotal.setDescription(' Total number of error resulted from transfer operations. ')
atswitchEthPortMonStats = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1))
atswitchEthPortError = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2))
atswitchEthPortMonTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1), )
if mibBuilder.loadTexts: atswitchEthPortMonTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortMonTable.setDescription(' A list of statistics entries.')
atswitchEthPortMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchEthPortMonId"))
if mibBuilder.loadTexts: atswitchEthPortMonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortMonEntry.setDescription(' A collection of statistics kept for a particular port. ')
atswitchEthPortMonId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortMonId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortMonId.setDescription(' The relative position of a port within a switch starting with 1. ')
atswitchEthPortMonTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortMonTxTotalBytes.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortMonTxTotalBytes.setDescription(' The total number of Bytes transmited to this port. ')
atswitchRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchRxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchRxGoodFrames.setDescription(' The total number of good packets(including unicast,broadcast packets and multicast packets) received ')
atswitchTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchTxGoodFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchTxGoodFrames.setDescription(' The total number of good packets(including bad packets, broadcast packets and multicast packets) transmitted successfully ')
atswitchTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchTxBroadcastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchTxBroadcastFrames.setDescription(' The total number of packets transmitted that were directed to the broadcast address. This does not include multicast packets ')
atswitchTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchTxMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchTxMulticastFrames.setDescription(' The total number of packets transmitted that were directed to a multicast address. This does not include packets addressed to the broadcast address ')
atswitchAddrDuplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchAddrDuplicate.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchAddrDuplicate.setDescription(' The number of address duplications seen on this port which is secured on another port. If a source address is locked for a port and if that address is eeen as source address on this port, then such occurances of duplicate Address is noted. ')
atswitchAddrMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchAddrMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchAddrMismatches.setDescription(' Address mismatches /address changes the sum of : 1. The number of mismatches seen on a port between a securely assigned port address and the source address observed on the port. Occurrence of this causes the TNETX3150 to suspend the port. 2. The number of times the TNETX3150 is required to assign or learn an address for a port. ')
atswitchRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchRxOverruns.setDescription(' The number of frames lost due to lack of resources during frame reception. The counter is incremented when frame data cannot enter the RX fifo for whatever reason. Frames that overrun after entering the fifo also can be counted as RX discards if they are not cut-through. ')
atswitchEthPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1), )
if mibBuilder.loadTexts: atswitchEthPortErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortErrorTable.setDescription(' A list of statistics entries.')
atswitchEthPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchEthPortErrorId"))
if mibBuilder.loadTexts: atswitchEthPortErrorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortErrorEntry.setDescription(' A collection of statistics kept for a particular port. ')
atswitchEthPortErrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortErrorId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortErrorId.setDescription(' The relative position of a port within a switch starting with 1. ')
atswitchEthPortErrorRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortErrorRxBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortErrorRxBadFrames.setDescription(' The counter is incremented when a bad frame was received on this port. ')
atswitchEthPortErrorTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchEthPortErrorTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchEthPortErrorTxTotal.setDescription(' Total number of error resulted from transmit operations on this port. ')
atswitchFwdVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1), )
if mibBuilder.loadTexts: atswitchFwdVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchFwdVlanTable.setDescription(' This tables lists Mac Addresses lexicographically from the forwarding table and also the information about the Vlan/Vlan which this MAC address belongs to. ')
atswitchFwdVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchFwdVlanMACAddr"))
if mibBuilder.loadTexts: atswitchFwdVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchFwdVlanEntry.setDescription(' Entry in the atswitchFwdVlanTable. ')
atswitchFwdVlanMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanMACAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchFwdVlanMACAddr.setDescription('This object identifies the MAC Address associated with this entry.')
atswitchFwdVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchFwdVlanVlanId.setDescription('This object identifies the Vlan/Vlan which MAC Address defined by the atswitchFwdMACAddr is associated with. ')
atswitchFwdVlanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanAge.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchFwdVlanAge.setDescription('Current Age of the MACAddr in the Forwarding Table.It Starts with 0 and if not heard it increments to some value until it hears from it and if not heard before reaching Max value, it will purge this entry. ')
atswitchFwdVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchFwdVlanStatus.setDescription('The status of this entry. The meanings of the values are: inactive(1) : this entry is not longer valid (e.g., it was learned but has since aged-out), but has not yet been flushed from the table. active(2) : the value of the corresponding instance of atswitchFwdVlanPort was active, and is being used. other(3) : none of the following. ')
atswitchFwdVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchFwdVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchFwdVlanPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of atswitchFwdVlanMACAddr has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address. Implementors are encouraged to assign the port value to this object whenever it is learned even for addresses for which the corresponding value of atswitchFwdVlanStatus is not learned(3). ")
atswitchBrBaseTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1), )
if mibBuilder.loadTexts: atswitchBrBaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBaseTable.setDescription('Table of basic bridge information.')
atswitchBrBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrBaseLanId"))
if mibBuilder.loadTexts: atswitchBrBaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBaseEntry.setDescription('An entry in the atswitchBrBaseTable.')
atswitchBrBaseLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBaseLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atswitchBrBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseBridgeAddress.setReference('IEEE 802.1D-1990: Sections 6.4.1.1.3 and 3.12.5')
if mibBuilder.loadTexts: atswitchBrBaseBridgeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBaseBridgeAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required to be unique. When concatenated with atswitchBrStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
atswitchBrBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseNumPorts.setReference('IEEE 802.1D-1990: Section 6.4.1.1.3')
if mibBuilder.loadTexts: atswitchBrBaseNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
atswitchBrBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBaseType.setDescription('Indicates what type of bridging this bridge can perform. If a bridge is actually performing a certain type of bridging this will be indicated by entries in the port table for the given type.')
atswitchBrBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4), )
if mibBuilder.loadTexts: atswitchBrBasePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePortTable.setDescription('A table that contains generic information about every port that is associated with this bridge. Transparent, source-route, and srt ports are included.')
atswitchBrBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrBasePortLanId"), (0, "ATSWTCH2-MIB", "atswitchBrBasePort"))
if mibBuilder.loadTexts: atswitchBrBasePortEntry.setReference('IEEE 802.1D-1990: Section 6.4.2, 6.6.1')
if mibBuilder.loadTexts: atswitchBrBasePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePortEntry.setDescription('A list of information for each port of the bridge.')
atswitchBrBasePortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePortLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atswitchBrBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePort.setDescription('The port number of the port for which this entry contains bridge management information.')
atswitchBrBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePortIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this port.')
atswitchBrBasePortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePortCircuit.setDescription('For a port which (potentially) has the same value of atswitchBrBasePortIfIndex as another port on the same bridge, this object contains the name of an object instance unique to this port. For example, in the case where multiple ports correspond one- to-one with multiple X.25 virtual circuits, this value might identify an (e.g., the first) object instance associated with the X.25 virtual circuit corresponding to this port. For a port which has a unique value of atswitchBrBasePortIfIndex, this object can have the value { 0 0 }.')
atswitchBrBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortDelayExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atswitchBrBasePortDelayExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePortDelayExceededDiscards.setDescription('The number of frames discarded by this port due to excessive transit delay through the bridge. It is incremented by both transparent and source route bridges.')
atswitchBrBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrBasePortMtuExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atswitchBrBasePortMtuExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrBasePortMtuExceededDiscards.setDescription('The number of frames discarded by this port due to an excessive size. It is incremented by both transparent and source route bridges.')
atswitchBrStpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1), )
if mibBuilder.loadTexts: atswitchBrStpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpTable.setDescription('Table of bridge spanning tree information.')
atswitchBrStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrStpLanId"))
if mibBuilder.loadTexts: atswitchBrStpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpEntry.setDescription('An entry in the atswitchBrStpTable.')
atswitchBrStpLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atswitchBrStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpProtocolSpecification.setDescription("An indication of what version of the Spanning Tree Protocol is being run. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol. IEEE 802.1d implementations will return 'ieee8021d(3)'. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined.")
atswitchBrStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPriority.setReference('IEEE 802.1D-1990: Section 4.5.3.7')
if mibBuilder.loadTexts: atswitchBrStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of atswitchBrBaseBridgeAddress.')
atswitchBrStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpTimeSinceTopologyChange.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: atswitchBrStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
atswitchBrStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpTopChanges.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: atswitchBrStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
atswitchBrStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.3.1')
if mibBuilder.loadTexts: atswitchBrStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
atswitchBrStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpRootCost.setReference('IEEE 802.1D-1990: Section 4.5.3.2')
if mibBuilder.loadTexts: atswitchBrStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
atswitchBrStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpRootPort.setReference('IEEE 802.1D-1990: Section 4.5.3.3')
if mibBuilder.loadTexts: atswitchBrStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
atswitchBrStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.4')
if mibBuilder.loadTexts: atswitchBrStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
atswitchBrStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.5')
if mibBuilder.loadTexts: atswitchBrStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
atswitchBrStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpHoldTime.setReference('IEEE 802.1D-1990: Section 4.5.3.14')
if mibBuilder.loadTexts: atswitchBrStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
atswitchBrStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.6')
if mibBuilder.loadTexts: atswitchBrStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. [Note that this value is the one that this bridge is currently using, in contrast to atswitchBrStpBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.]')
atswitchBrStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpBridgeMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.8')
if mibBuilder.loadTexts: atswitchBrStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of atswitchBrStpBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
atswitchBrStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpBridgeHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.9')
if mibBuilder.loadTexts: atswitchBrStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D- 1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
atswitchBrStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 1, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpBridgeForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.10')
if mibBuilder.loadTexts: atswitchBrStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of atswitchBrStpBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
atswitchBrStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15), )
if mibBuilder.loadTexts: atswitchBrStpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
atswitchBrStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrStpPortLanId"), (0, "ATSWTCH2-MIB", "atswitchBrStpPort"))
if mibBuilder.loadTexts: atswitchBrStpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
atswitchBrStpPortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atswitchBrStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPort.setReference('IEEE 802.1D-1990: Section 6.8.2.1.2')
if mibBuilder.loadTexts: atswitchBrStpPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPort.setDescription('The port number of the port for which this entry contains Spanning Tree Protocol management information.')
atswitchBrStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPortPriority.setReference('IEEE 802.1D-1990: Section 4.5.5.1')
if mibBuilder.loadTexts: atswitchBrStpPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of atswitchBrStpPort.')
atswitchBrStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortState.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: atswitchBrStpPortState.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled (see atswitchBrStpPortEnable), this object will have a value of disabled(1).")
atswitchBrStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPortEnable.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: atswitchBrStpPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortEnable.setDescription('The enabled/disabled status of the port.')
atswitchBrStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrStpPortPathCost.setReference('IEEE 802.1D-1990: Section 4.5.5.3')
if mibBuilder.loadTexts: atswitchBrStpPortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.')
atswitchBrStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.5.4')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
atswitchBrStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedCost.setReference('IEEE 802.1D-1990: Section 4.5.5.5')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
atswitchBrStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedBridge.setReference('IEEE 802.1D-1990: Section 4.5.5.6')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
atswitchBrStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedPort.setReference('IEEE 802.1D-1990: Section 4.5.5.7')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
atswitchBrStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 2, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrStpPortForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrStpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
atswitchBrTpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1), )
if mibBuilder.loadTexts: atswitchBrTpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpTable.setDescription('Table of transparent bridging information.')
atswitchBrTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrTpLanId"))
if mibBuilder.loadTexts: atswitchBrTpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpEntry.setDescription('An entry in the atswitchBrTpTable.')
atswitchBrTpLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atswitchBrTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpLearnedEntryDiscards.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: atswitchBrTpLearnedEntryDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpLearnedEntryDiscards.setDescription('The total number of Forwarding Database entries, which have been or would have been learnt, but have been discarded due to a lack of space to store them in the Forwarding Database. If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full (a condition which has unpleasant performance effects on the subnetwork). If this counter has a significant value but is not presently increasing, it indicates that the problem has been occurring but is not persistent.')
atswitchBrTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchBrTpAgingTime.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: atswitchBrTpAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information. 802.1D-1990 recommends a default of 300 seconds.')
atswitchBrTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3), )
if mibBuilder.loadTexts: atswitchBrTpFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
atswitchBrTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrTpFdbLanId"), (0, "ATSWTCH2-MIB", "atswitchBrTpFdbAddress"))
if mibBuilder.loadTexts: atswitchBrTpFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information.')
atswitchBrTpFdbLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpFdbLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atswitchBrTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: atswitchBrTpFdbAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpFdbAddress.setDescription('A unicast MAC address for which the bridge has forwarding and/or filtering information.')
atswitchBrTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpFdbPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of atswitchBrTpFdbAddress has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address . Implementors are encouraged to assign the port value to this object whenever it is learned even for addresses for which the corresponding value of atswitchBrTpFdbStatus is not learned(3).")
atswitchBrTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpFdbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpFdbStatus.setDescription('The status of this entry. The meanings of the values are: inactive(1) : this entry is not longer valid (e.g., it was learned but has since aged-out), but has not yet been flushed from the table. active(2) : the value of the corresponding instance of atswitchBrTpFdbPort was active, and is being used. other(3) : none of the following. This would include the case where some other MIB object (not the corresponding instance of atswitchBrTpFdbPort ) is being used to determine if and how frames addressed to the value of the corresponding instance of atswitchBrTpFdbAddress are being forwarded. ')
atswitchBrTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4), )
if mibBuilder.loadTexts: atswitchBrTpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPortTable.setDescription('A table that contains information about every port that is associated with this transparent bridge.')
atswitchBrTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchBrTpPortLanId"), (0, "ATSWTCH2-MIB", "atswitchBrTpPort"))
if mibBuilder.loadTexts: atswitchBrTpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPortEntry.setDescription('A list of information for each port of a transparent bridge.')
atswitchBrTpPortLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortLanId.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPortLanId.setDescription('This object uniquely identifies the lan or Virtual lan.')
atswitchBrTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPort.setDescription('The port number of the port for which this entry contains Transparent bridging management information.')
atswitchBrTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortMaxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPortMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
atswitchBrTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortInFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atswitchBrTpPortInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPortInFrames.setDescription('The number of frames that have been received by this port from its segment. Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
atswitchBrTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortOutFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atswitchBrTpPortOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPortOutFrames.setDescription('The number of frames that have been transmitted by this port to its segment. Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
atswitchBrTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 9, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchBrTpPortInDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: atswitchBrTpPortInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchBrTpPortInDiscards.setDescription('Count of valid frames received which were discarded (i.e., filtered) by the Forwarding Process.')
atswitchStaticMACTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1), )
if mibBuilder.loadTexts: atswitchStaticMACTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchStaticMACTable.setDescription(' This tables lists Mac Addresses lexicographically from the Static table which binds MAC addresses to ports on the switch. ')
atswitchStaticMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchStaticMACAddress"))
if mibBuilder.loadTexts: atswitchStaticMACEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchStaticMACEntry.setDescription(' Entry in the atswitchStaticMACTable. ')
atswitchStaticMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchStaticMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchStaticMACAddress.setDescription('This object identifies the MAC Address associated with Static MAC Table.')
atswitchStaticMACPortNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchStaticMACPortNumbers.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchStaticMACPortNumbers.setDescription('This object identifies the Ports for which the above MAC address is associated Statically in Static MAC Table. This Object could take the port numbers as the Static Address added can be Multicast addresses. This Object is a DisplayString So, the input for example would be 1,5,6,8,9 ')
atswitchStaticMACVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 10, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atswitchStaticMACVlan.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchStaticMACVlan.setDescription('The Static MAC Address to be added can also be confined to a Vlan also. If the Port does not belong to that Vlan. the Port is forced to be moved to that Vlan. ')
atswitchPortMACTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1), )
if mibBuilder.loadTexts: atswitchPortMACTable.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortMACTable.setDescription('A table that contains information about unicast entries seen on ports. ')
atswitchPortMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchPortMACAddress"), (0, "ATSWTCH2-MIB", "atswitchPortMACPort"))
if mibBuilder.loadTexts: atswitchPortMACEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortMACEntry.setDescription('Information about a specific unicast MAC address seen on ports. ')
atswitchPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortMACAddress.setDescription('A unicast MAC address seen on this port. ')
atswitchPortMACPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchPortMACPort.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchPortMACPort.setDescription('This object identifies the port on which the atswitchPortMACAddress was seen. ')
atswitchDebugMallocLogTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1), )
if mibBuilder.loadTexts: atswitchDebugMallocLogTable.setStatus('deprecated')
if mibBuilder.loadTexts: atswitchDebugMallocLogTable.setDescription(' Dont care. ')
atswitchMallocLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1), ).setIndexNames((0, "ATSWTCH2-MIB", "atswitchDebugMallocLogIndex"))
if mibBuilder.loadTexts: atswitchMallocLogEntry.setStatus('deprecated')
if mibBuilder.loadTexts: atswitchMallocLogEntry.setDescription(' Entry in the atswitchDebugMallocLogEntry. ')
atswitchDebugMallocLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugMallocLogIndex.setStatus('deprecated')
if mibBuilder.loadTexts: atswitchDebugMallocLogIndex.setDescription(' This is strictly for Debug reason and this object should not be beleived as the correct number. This log is useful for finding the memory leak which is stored in Leak_Table. The Entry of this table is the address where malloc is done and no free is done. The size of this 6000. ')
atswitchDebugMallocLogCaller = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugMallocLogCaller.setStatus('deprecated')
if mibBuilder.loadTexts: atswitchDebugMallocLogCaller.setDescription(" This is strictly for Debug reason and this object should not be beleived as the correct number. This log is useful for finding the memory leak which is stored in Leak_Table. The Entry of this table is the caller address who malloc'd . The size of this 6000. ")
atswitchDebugMallocLogAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 10, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atswitchDebugMallocLogAddress.setStatus('deprecated')
if mibBuilder.loadTexts: atswitchDebugMallocLogAddress.setDescription(' This is strictly for Debug reason and this object should not be beleived as the correct number. This log is useful for finding the memory leak which is stored in Leak_Table. The Entry of this table is the address where malloc is done and no free is done. The size of this 6000. ')
atswitchDuplicateMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: atswitchDuplicateMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchDuplicateMacAddress.setDescription(' The Duplicate Mac address which is secured on atswitchSecurePortNumber. ')
atswitchIntruderMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 8, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: atswitchIntruderMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchIntruderMacAddress.setDescription(' The Mac address of the Intruder as seen on port which is the the next object ')
atswitchSecuredPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 10, 8, 3), Integer32())
if mibBuilder.loadTexts: atswitchSecuredPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: atswitchSecuredPortNumber.setDescription(' This is the Port number which has the duplicate Address as the secured address . ')
newRoot = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,101))
if mibBuilder.loadTexts: newRoot.setDescription('The newRoot trap indicates that the sending agent has become the new root of the Spanning Tree; the trap is sent by a bridge soon after its election as the new root, e.g., upon expiration of the Topology Change Timer immediately subsequent to its election. Implementation of this trap is optional.')
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,102))
if mibBuilder.loadTexts: topologyChange.setDescription('A topologyChange trap is sent by a bridge when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. The trap is not sent if a newRoot trap is sent for the same transition. Implementation of this trap is optional.')
intruderTrap = NotificationType((1, 3, 6, 1, 4, 1, 207) + (0,105))
if mibBuilder.loadTexts: intruderTrap.setDescription('The intruderTrap trap indicates that there was a Intruder was detected on the port shown as ifIndex. ')
mibBuilder.exportSymbols("ATSWTCH2-MIB", atswitchBrBaseNumPorts=atswitchBrBaseNumPorts, atswitchDeviceFlowControl=atswitchDeviceFlowControl, atswitchBrBasePortLanId=atswitchBrBasePortLanId, atswitchPortSTPPriority=atswitchPortSTPPriority, atswitchEthMonRxGoodFrames=atswitchEthMonRxGoodFrames, atswitchBrStpTimeSinceTopologyChange=atswitchBrStpTimeSinceTopologyChange, atswitchBrStpPortDesignatedRoot=atswitchBrStpPortDesignatedRoot, atswitchFwdVlanMACAddr=atswitchFwdVlanMACAddr, atswitchPortMACTable=atswitchPortMACTable, atswitchBrTp=atswitchBrTp, atswitchDebugMallocLogCaller=atswitchDebugMallocLogCaller, atswitchBeVlanName=atswitchBeVlanName, atswitchFwdVlanEntry=atswitchFwdVlanEntry, atswitchBrStpBridgeForwardDelay=atswitchBrStpBridgeForwardDelay, atswitchAddrDuplicate=atswitchAddrDuplicate, atswitchBrStpPortDesignatedPort=atswitchBrStpPortDesignatedPort, atswitchDebugMallocLogTable=atswitchDebugMallocLogTable, atswitchFwdVlanPort=atswitchFwdVlanPort, intruderTrap=intruderTrap, atswitchFwdVlanStatus=atswitchFwdVlanStatus, atswitchBrStpProtocolSpecification=atswitchBrStpProtocolSpecification, atswitchPortSecurityNumberOfAddresses=atswitchPortSecurityNumberOfAddresses, atswitchNwMgrIndex=atswitchNwMgrIndex, mibObject=mibObject, atswitchNwMgrEntry=atswitchNwMgrEntry, atswitchBeVlanRowStatus=atswitchBeVlanRowStatus, atswitchBrTpFdbEntry=atswitchBrTpFdbEntry, atswitchEthPortErrorId=atswitchEthPortErrorId, atswitchCurrentIpAddress=atswitchCurrentIpAddress, atswitchStaticMACEntry=atswitchStaticMACEntry, atswitchPortSpeed=atswitchPortSpeed, atswitchBrTpFdbPort=atswitchBrTpFdbPort, atswitchNMGroup=atswitchNMGroup, atswitchBrStpHoldTime=atswitchBrStpHoldTime, atswitchBrTpFdbTable=atswitchBrTpFdbTable, atswitchEthErrorLateCollisions=atswitchEthErrorLateCollisions, atswitchBeVlanTagId=atswitchBeVlanTagId, atswitchBrStpPortLanId=atswitchBrStpPortLanId, atswitchBrStpBridgeHelloTime=atswitchBrStpBridgeHelloTime, atswitchSecuredPortNumber=atswitchSecuredPortNumber, atswitchDefaultDomainName=atswitchDefaultDomainName, atswitchBrBaseEntry=atswitchBrBaseEntry, atswitchBasicVlanEntry=atswitchBasicVlanEntry, atswitchEthErrorStats=atswitchEthErrorStats, atiProduct=atiProduct, BridgeId=BridgeId, atswitchEthErrorRxBadFrames=atswitchEthErrorRxBadFrames, MacAddress=MacAddress, atswitchPortState=atswitchPortState, atswitchMirroringDestinationPort=atswitchMirroringDestinationPort, atswitchRxGoodFrames=atswitchRxGoodFrames, atswitchBrBasePortDelayExceededDiscards=atswitchBrBasePortDelayExceededDiscards, atswitchBrTpPortMaxInfo=atswitchBrTpPortMaxInfo, atswitchPortMACEntry=atswitchPortMACEntry, topologyChange=topologyChange, atswitchBrBasePortTable=atswitchBrBasePortTable, atswitchMallocLogEntry=atswitchMallocLogEntry, atswitchBrStp=atswitchBrStp, atswitchDebugMallocLogIndex=atswitchDebugMallocLogIndex, atswitchStaticMACGroup=atswitchStaticMACGroup, atswitchPvPortNumber=atswitchPvPortNumber, atswitchPortMACAddress=atswitchPortMACAddress, atswitchTrapAttrGroup=atswitchTrapAttrGroup, atswitchBrBaseBridgeAddress=atswitchBrBaseBridgeAddress, atswitchPortDisableOnSecurityViolation=atswitchPortDisableOnSecurityViolation, atswitchBrStpRootCost=atswitchBrStpRootCost, atswitchBrTpPortOutFrames=atswitchBrTpPortOutFrames, atswitchAddrMismatches=atswitchAddrMismatches, atswitchBrStpRootPort=atswitchBrStpRootPort, atswitchBrBaseTable=atswitchBrBaseTable, atswitchPortEntry=atswitchPortEntry, atswitchBrStpTopChanges=atswitchBrStpTopChanges, atswitchBrTpPortInFrames=atswitchBrTpPortInFrames, atswitchDebugMallocLogGroup=atswitchDebugMallocLogGroup, atswitchProductType=atswitchProductType, alliedTelesyn=alliedTelesyn, atswitchBridgeMib=atswitchBridgeMib, atswitchBasicVlanTable=atswitchBasicVlanTable, Timeout=Timeout, atswitchVlanConfigGroup=atswitchVlanConfigGroup, atswitchMDA1Type=atswitchMDA1Type, atswitchConfiguredRouter=atswitchConfiguredRouter, atswitchEthernetPortCount=atswitchEthernetPortCount, atswitchBrStpDesignatedRoot=atswitchBrStpDesignatedRoot, atswitchBrStpTable=atswitchBrStpTable, atswitchNwMgrTable=atswitchNwMgrTable, atswitchBrTpPortInDiscards=atswitchBrTpPortInDiscards, atswitchEthMonTxGoodFrames=atswitchEthMonTxGoodFrames, atswitchBrStpPortPriority=atswitchBrStpPortPriority, atswitchBrStpPriority=atswitchBrStpPriority, atswitchSwVersion=atswitchSwVersion, atswitchDNServer=atswitchDNServer, atswitchEthPortErrorRxBadFrames=atswitchEthPortErrorRxBadFrames, atswitchBrStpPortPathCost=atswitchBrStpPortPathCost, atswitchMirrorState=atswitchMirrorState, atswitchBrTpPortTable=atswitchBrTpPortTable, atswitchEthPortMonTxTotalBytes=atswitchEthPortMonTxTotalBytes, atswitchBrStpPortEntry=atswitchBrStpPortEntry, atswitchBrStpHelloTime=atswitchBrStpHelloTime, atswitchEthernetStatsGroup=atswitchEthernetStatsGroup, atswitchConfiguredIpAddress=atswitchConfiguredIpAddress, atswitchPortTable=atswitchPortTable, atswitchBrBasePort=atswitchBrBasePort, atswitchTrunkConfig=atswitchTrunkConfig, atswitchMirroringSourcePort=atswitchMirroringSourcePort, atswitchEthPortErrorEntry=atswitchEthPortErrorEntry, atswitchBrTpFdbAddress=atswitchBrTpFdbAddress, atswitchEthErrorCRC=atswitchEthErrorCRC, atswitchBrTpTable=atswitchBrTpTable, atswitchSysGroup=atswitchSysGroup, atswitchDebugAvailableBytes=atswitchDebugAvailableBytes, atswitchEthErrorAlignment=atswitchEthErrorAlignment, atswitchEthMonTxDeferred=atswitchEthMonTxDeferred, atswitchEthPortError=atswitchEthPortError, atswitchStaticMACVlan=atswitchStaticMACVlan, atswitchPortAutosenseOrHalfDuplex=atswitchPortAutosenseOrHalfDuplex, atswitchBrBasePortMtuExceededDiscards=atswitchBrBasePortMtuExceededDiscards, atswitchStaticMACAddress=atswitchStaticMACAddress, atswitchBrStpMaxAge=atswitchBrStpMaxAge, atswitchBrTpAgingTime=atswitchBrTpAgingTime, atswitchDuplicateMacAddress=atswitchDuplicateMacAddress, atswitchBrBase=atswitchBrBase, atswitchEthPortMonEntry=atswitchEthPortMonEntry, atswitchTxGoodFrames=atswitchTxGoodFrames, atswitchBrBasePortEntry=atswitchBrBasePortEntry, atswitchBrTpPortLanId=atswitchBrTpPortLanId, atswitchBrStpPortDesignatedBridge=atswitchBrStpPortDesignatedBridge, atswitchPortTransmitPacingConfig=atswitchPortTransmitPacingConfig, atswitchBrTpPortEntry=atswitchBrTpPortEntry, atswitchBrTpFdbLanId=atswitchBrTpFdbLanId, atswitchBrTpPort=atswitchBrTpPort, atswitchPortMACPort=atswitchPortMACPort, atswitchEthPortErrorTable=atswitchEthPortErrorTable, atswitchFwdVlanAge=atswitchFwdVlanAge, atswitchEthMonTxTotalBytes=atswitchEthMonTxTotalBytes, atswitchBrStpPortDesignatedCost=atswitchBrStpPortDesignatedCost, atswitchMDA2Type=atswitchMDA2Type, atswitchIpGroup=atswitchIpGroup, atswitchEthPortMonStats=atswitchEthPortMonStats, atswitchPortConfigGroup=atswitchPortConfigGroup, atswitchRxOverruns=atswitchRxOverruns, atswitchEthPortMonId=atswitchEthPortMonId, atswitchBrStpPortEnable=atswitchBrStpPortEnable, atswitchPortNumber=atswitchPortNumber, atswitchSecurityAction=atswitchSecurityAction, atswitchBeVlanPortMask=atswitchBeVlanPortMask, atswitchPortBridgeid=atswitchPortBridgeid, atswitchIntruderMacAddress=atswitchIntruderMacAddress, atswitchEthMonStats=atswitchEthMonStats, atswitchBrBasePortCircuit=atswitchBrBasePortCircuit, atswitchSwGroup=atswitchSwGroup, atswitchBrBaseLanId=atswitchBrBaseLanId, atswitchPortSwitchingType=atswitchPortSwitchingType, atswitchPortMacAddrGroup=atswitchPortMacAddrGroup, atswitchFwdVlanGroup=atswitchFwdVlanGroup, atswitchEthPortStatsGroup=atswitchEthPortStatsGroup, atswitchFwdVlanVlanId=atswitchFwdVlanVlanId, atswitchBrStpPortState=atswitchBrStpPortState, atswitchFwdVlanTable=atswitchFwdVlanTable, atswitchTxBroadcastFrames=atswitchTxBroadcastFrames, atswitchBrStpPortTable=atswitchBrStpPortTable, atswitchBeVlanIndex=atswitchBeVlanIndex, atswitchPortName=atswitchPortName, atswitchBrStpLanId=atswitchBrStpLanId, atswitchIPAddressStatus=atswitchIPAddressStatus, atswitchEthPortErrorTxTotal=atswitchEthPortErrorTxTotal, atswitchBrTpLanId=atswitchBrTpLanId, atswitchPortSTPConfig=atswitchPortSTPConfig, atswitchBrStpPort=atswitchBrStpPort, atswitchBrBasePortIfIndex=atswitchBrBasePortIfIndex, atswitchPortFlowControlEnable=atswitchPortFlowControlEnable, atswitchPortSTPCost=atswitchPortSTPCost, atswitchConfiguredSubnetMask=atswitchConfiguredSubnetMask, atswitchBrTpFdbStatus=atswitchBrTpFdbStatus, atswitchPortLinkState=atswitchPortLinkState, atswitchEthPortMonTable=atswitchEthPortMonTable, atswitchEthMonTxCollisions=atswitchEthMonTxCollisions, atswitchBrStpForwardDelay=atswitchBrStpForwardDelay, atswitchPort2VlanEntry=atswitchPort2VlanEntry, atswitchTxMulticastFrames=atswitchTxMulticastFrames, atswitchNwMgrIpAddr=atswitchNwMgrIpAddr, atswitchSwProduct=atswitchSwProduct, atswitchStaticMACPortNumbers=atswitchStaticMACPortNumbers, atswitchDebugMallocLogAddress=atswitchDebugMallocLogAddress, atswitchBrBaseType=atswitchBrBaseType, newRoot=newRoot, atswitchBrTpEntry=atswitchBrTpEntry, atswitchReset=atswitchReset, atswitchBrTpLearnedEntryDiscards=atswitchBrTpLearnedEntryDiscards, atswitchEthErrorTxTotal=atswitchEthErrorTxTotal, atswitchBrStpEntry=atswitchBrStpEntry, atswitchPvVlanName=atswitchPvVlanName, atswitchPortDuplexStatus=atswitchPortDuplexStatus, atswitchStaticMACTable=atswitchStaticMACTable, atswitchSecurityConfig=atswitchSecurityConfig, atswitchBrStpBridgeMaxAge=atswitchBrStpBridgeMaxAge, atswitchBrStpPortForwardTransitions=atswitchBrStpPortForwardTransitions, atswitchPort2VlanTable=atswitchPort2VlanTable, atswitchConfigGroup=atswitchConfigGroup, atswitchMib=atswitchMib)
