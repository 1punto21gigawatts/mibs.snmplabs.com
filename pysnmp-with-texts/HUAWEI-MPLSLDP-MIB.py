#
# PySNMP MIB module HUAWEI-MPLSLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MPLSLDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
MplsLsrIdentifier, MplsLdpIdentifier = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLsrIdentifier", "MplsLdpIdentifier")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, NotificationType, Bits, Counter64, TimeTicks, Integer32, Gauge32, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "NotificationType", "Bits", "Counter64", "TimeTicks", "Integer32", "Gauge32", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "iso")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hwMplsLdp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143))
hwMplsLdp.setRevisions(('2014-11-06 16:40', '2014-08-22 11:26', '2014-05-28 11:26', '2014-01-15 16:00', '2013-07-15 16:00', '2013-06-14 10:00', '2013-01-15 10:00', '2013-01-07 10:00', '2012-07-14 10:00', '2011-11-16 10:00', '2011-09-28 10:00', '2011-09-07 10:00', '2011-05-10 10:00', '2010-08-11 16:00', '2010-07-12 16:00', '2009-03-10 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwMplsLdp.setRevisionsDescriptions(("V2.46, delete LDP GR timer range's validity check, include hwLdpGrNeighborLivenessTimer,hwLdpGrReconnectTimer,hwLdpGrRecoveryTimer.", 'V2.45, add hwMplsLdpSessionDownReason object type sessionProtectTimerExp(30).', 'V2.44, add four nodes for LDP session statistics: hwLdpLocalOperationalSessionNumber, hwLdpRemoteOperationalSessionNumber, hwLdpLocalAndRemoteOperationalSessionNumber and hwLdpTotalOperationalSessionNumber.', 'V2.43, add hwMplsLdpSessionDownReason object type modifyMp2mp(29).', 'V2.42, add hwMplsLdpSessionDownReason object type modifyP2mp(28).', 'V2.41, add trap hwMplsLdpHostIngressLspDownClear, hwMplsLdpHostIngressLspDown, and the trap VB: hwLdpLspDownReason, hwLdpLspDownMplsLsrId, hwLdpLspDownOutIfIndex, hwLdpLspDownOutIfMainIp, hwLdpLspDownOutIfState, hwLdpLspDownDownstreamPeerLsrId.', 'V2.30, modify the name for these nodes:hwLdpPolicyPeerGroupOutBoundRange, hwLdpPolicyPeerGroupOutBoundFecIpPrefix, hwLdpPolicyPeerGroupOutBoundBgpRange, hwLdpPolicyPeerGroupOutBoundBgpIpPrefix, hwLdpPolicyPeerGroupInBoundRange, hwLdpPolicyPeerGroupInBoundIpPrefix, hwLdpPolicyPeerGroupRowStatus.correct name is :hwLdpPeerGroupOutBoundRange,hwLdpPeerGroupOutBoundFecIpPrefix, hwLdpPeerGroupOutBoundBgpRange, hwLdpPeerGroupOutBoundBgpIpPrefix, hwLdpPeerGroupInBoundRange, hwLdpPeerGroupInBoundIpPrefix, hwLdpPeerGroupRowStatus.', 'V2.20, add two nodes hwLdpRemoteLocalLsrIdIfIndex and hwLdpInterfaceLocalLsrIdIfIndex.', 'V2.10, set the length of hwLdpPeerGroupName.', 'V2.02, delete the default value in the description for these nodes: hwLdpGrReconnectTimer, hwLdpGrRecoveryTimer, hwLdpGrNeighborLivenessTimer.', 'V2.01, modify the description for these nodes: hwMplsLdpSessionTable, hwMplsLdpSessionEntry, hwMplsLdpSessionStateTable, hwMplsLdpSessionStateEntry, hwMplsLspTriggerIpPrefix, hwMplsLspTriggerBgpRouteIpPrefix, hwLdpDeleteGtsmAll, hwMplsFrrLspTriggerIpPrefix, hwLdpVpnTable, hwLdpVpnEntry, hwMplsVpnFrrLspTriggerIpPrefix, hwLdpRemoteEntityTable, hwLdpRemoteEntityEntry, hwLdpPeerTable. change the SYNTAX from DisplayString to OCTET STRING for these nodes: hwLdpPropagateIpPrefix, hwMplsLspTriggerIpPrefix, hwMplsLspTriggerBgpRouteIpPrefix, hwMplsFrrLspTriggerIpPrefix, hwMplsVpnFrrLspTriggerIpPrefix.', 'V2.00, modify the description for these nodes, hwMplsLspTriggerIpPrefix, hwMplsLspTrigger, hwMplsFrrLspTriggerIpPrefix, hwMplsFrrLspTrigger, hwLdpOutBoundPolicyPeerAllFecIpPrefix, hwLdpOutBoundPolicyPeerAllRange, hwLdpInBoundPolicyPeerAllIpPrefix, hwLdpInBoundPolicyPeerAllRange, hwLdpOutBoundPolicyPeerAllBgpIpPrefix, hwLdpOutBoundPolicyPeerAllBgpRange, hwMplsVpnFrrLspTrigger, hwMplsVpnFrrLspTriggerIpPrefix, hwLdpPeerOutBoundPolicyRange, hwLdpPeerOutBoundPolicyFecIpPrefix, hwLdpPeerOutBoundPolicyBgpRange, hwLdpPeerOutBoundPolicyBgpIpPrefix, hwLdpPeerOutBoundPolicyFecRange, hwLdpPeerInBoundPolicyFecIpPrefix, hwLdpPeerGroupOutBoundRange, hwLdpPeerGroupOutBoundFecIpPrefix, hwLdpPeerGroupOutBoundBgpRange, hwLdpPeerGroupOutBoundBgpIpPrefix, hwLdpPeerGroupInBoundRange, hwLdpPeerGroupInBoundIpPrefix.', 'V1.03, add four nodes for MPLS LDP Graceful-Delete, hwLdpVpnGracefulDeleteCapability, hwLdpVpnGracefulDeleteTimer, hwLdpGracefulDeleteCapability, hwLdpGracefulDeleteTimer.', 'V1.02, some description is modified.', 'V1.01, some nodes support the set operation.', 'V1.00, initial version.',))
if mibBuilder.loadTexts: hwMplsLdp.setLastUpdated('201411061640Z')
if mibBuilder.loadTexts: hwMplsLdp.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwMplsLdp.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwMplsLdp.setDescription('This MIB contains private managed object and notification trap definitions for MPLS LDP.')
hwMplsLdpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1))
hwMplsLdpProcessName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpProcessName.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpProcessName.setDescription('This object indicates the process name of LDP running on the router. By default, the value is LDP.')
hwMplsLdpLspFec = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpLspFec.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLspFec.setDescription('This object indicates the destination address of an LSP. The value is either a destination IP address or a prefix of an IP address.')
hwMplsLdpLspInLabel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpLspInLabel.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLspInLabel.setDescription('This object indicates that labels are pushed into all the packets for direct MPLS forwarding.')
hwMplsLdpLspOutLabel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpLspOutLabel.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLspOutLabel.setDescription('This object indicates that all the packets swap labels for MPLS forwarding.')
hwMplsLdpLspOutIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 5), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpLspOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLspOutIfIndex.setDescription('The value of this object identifies the index of the outgoing interface of the LSP.')
hwMplsLdpLspDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("routeDelete", 1), ("lspmNotify", 2), ("canNotRecoveryFromGr", 3), ("recvReleaseMsg", 4), ("recvWithdrawMsg", 5), ("upStreamLost", 6), ("downStreamLost", 7), ("otherReason", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpLspDownReason.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpLspDownReason.setDescription('This object indicates the cause that the LSP becomes Down. Options: 1. routeDelete(1) -indicates that a route has been deleted. 2. lspmNotify(2) -indicates that LSPM notify. 3. canNotRecoveryFromGr(3) -indicates that the recovery from GR was failed. 4. recvReleaseMsg(4) -indicates that the release message was received. 5. recvWithdrawMsg(5) -indicates that the withdraw message was received. 6. upStreamLost(6) -indicates that the upstream route was lost. 7. downStreamLost(7) -indicates that the downstream route was lost. 8. otherReason(8) -indicates that another cause was involved. ')
hwMplsLdpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 7), )
if mibBuilder.loadTexts: hwMplsLdpSessionTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionTable.setDescription('This object is used to display the session parameters and session age. The index of this table is hwMplsLdpSessionPeerLsrId. ')
hwMplsLdpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 7, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionPeerLsrId"))
if mibBuilder.loadTexts: hwMplsLdpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionEntry.setDescription('This object is used to display the session parameters and session age. The index of this entry is hwMplsLdpSessionPeerLsrId. ')
hwMplsLdpSessionPeerLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 7, 1, 1), MplsLdpIdentifier())
if mibBuilder.loadTexts: hwMplsLdpSessionPeerLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionPeerLsrId.setDescription('This object indicates the LSR ID of the peer in a session.')
hwMplsLdpSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 7, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionIfIndex.setDescription('This object indicates the index of the interface on which the session is established.')
hwMplsLdpSessionDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("sessionUp", 0), ("helloHoldTimerExp", 1), ("ssnHoldTimerExp", 2), ("resetMplsLdp", 3), ("undoMplsLdp", 4), ("undoMpls", 5), ("undoMplsLdpRemotePeer", 6), ("modifyGRConfig", 7), ("modifyGRTimer", 8), ("modifyKeepaliveTimer", 9), ("modifyMD5Config", 10), ("ssnRoleSwitch", 11), ("modifyMTUConfig", 12), ("modifyTransportAddress", 13), ("modifyLDPLsrID", 14), ("recvNotification", 15), ("transportAddressNotMatch", 16), ("protocolGR", 17), ("ifStatusChanged", 18), ("tcpDown", 19), ("otherReason", 20), ("sentNotification", 21), ("canntBuildSessionRelation", 22), ("receiveErrorMessageFromPeer", 23), ("receiveSocketError", 24), ("sessionDelete", 25), ("modifyCapabilityAnnouncementConfig", 26), ("modifyLocalLsrID", 27), ("modifyP2MP", 28), ("modifyMP2MP", 29), ("sessionProtectTimerExp", 30)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLdpSessionDownReason.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionDownReason.setDescription('This object indicates the cause that the session becomes Down. Options: 1. sessionUp(0) -indicates that the session was Up. 2. helloHoldTimerExp(1) -indicates that the Hello hold timer expired. 3. ssnHoldTimerExp(2) -indicates that the session hold timer expired. 4. resetMplsLdp(3) -indicates MPLS LDP was reset. 5. undoMplsLdp(4) -indicates that MPLS LDP was disabled. 6. undoMpls(5) -indicates that MPLS was disabled. 7. undoMplsLdpRemotePeer(6) -indicates that the remote peer was deleted. 8. modifyGRConfig(7) -indicates that GR capability was modified. 9. modifyGRTimer(8) -indicates that the GR timer was modified. 10. modifyKeepaliveTimer(9) -indicates that the keepalive timer was modified. 11. modifyMD5Config(10) -indicates that MD5 was configured. 12. ssnRoleSwitch(11) -indicates that the session role was switched. 13. modifyMTUConfig(12) -indicates that the MTU was modified. 14. modifyTransportAddress(13) -indicates that the transport address was modified. 15. modifyLDPLsrID(14) -indicates that the LDP LSR ID was modified. 16. recvNotification(15) -indicates that the notification message was received. 17. transportAddressNotMatch(16) -indicates that the transport address was not matched. 18. protocolGR(17) -indicates that the protocol GR was in processing. 19. ifStatusChanged(18) -indicates that the interface status was changed. 20. tcpDown(19) -indicates that TCP was Down. 21. otherReason(20) -indicates that another cause was involved. 22. sentNotification(21) -indicates that the notification was sent. 23. canntBuildSessionRelation(22) -indicates that the session relation cannot be built. 24. receiveErrorMessageFromPeer(23) -indicates that error message from peer was received. 25. receiveSocketError(24) -indicates that error pakcet from socket was received. 26. sessionDelete(25) -indicates that the session was deleted. 27. modifyCapabilityAnnouncementConfig(26) -indicates that the capability-announcement was modified. 28. modifyLocalLsrID(27) -indicates that the Local LSR ID was modified. 29. modifyP2MP(28) -indicates that the mLDP P2MP was modified. 30. modifyMP2MP(29) -indicates that the mLDP MP2MP was modified. 31. sessionProtectTimerExp(30) -indicates that the session protection timer expired. ')
hwMplsLdpSessionAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 7, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionAge.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionAge.setDescription('This object indicates the duration since the session is set up.')
hwMplsLdpSessionStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8), )
if mibBuilder.loadTexts: hwMplsLdpSessionStateTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionStateTable.setDescription('This object is used to display the detailed state parameters of the session. The index of this table is hwMplsLdpSessionPeerId. ')
hwMplsLdpSessionStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionPeerId"))
if mibBuilder.loadTexts: hwMplsLdpSessionStateEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionStateEntry.setDescription('This object is used to display the detailed state parameters of the session. The index of this entry is hwMplsLdpSessionPeerId. ')
hwMplsLdpSessionPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 1), MplsLdpIdentifier())
if mibBuilder.loadTexts: hwMplsLdpSessionPeerId.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionPeerId.setDescription('This object indicates the LSR ID of the LDP peer to which the session is connected.')
hwMplsLdpSessionLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 2), MplsLdpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionLsrId.setDescription('This object indicates the ID of the local LSR.')
hwMplsLdpSessionTcpConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionTcpConnectionState.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionTcpConnectionState.setDescription('This object indicates the TCP link status of the session.')
hwMplsLdpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionState.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionState.setDescription('This object indicates the current status of the session.')
hwMplsLdpSessionRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionRole.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionRole.setDescription('This object indicates the session roles.')
hwMplsLdpSessionFtFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionFtFlag.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionFtFlag.setDescription('This object indicates whether the FT of the session is enabled.')
hwMplsLdpSessionMd5Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionMd5Flag.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionMd5Flag.setDescription('This object indicates whether the MD5 is enabled for the peer.')
hwMplsLdpSessionReconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionReconnectTimer.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionReconnectTimer.setDescription('This object indicates the value of the GR reconnection timer after the negotiation. Unit: seconds ')
hwMplsLdpSessionRecoveryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionRecoveryTimer.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionRecoveryTimer.setDescription('This object indicates the value of the GR recovery timer after the negotiation. Unit: seconds ')
hwMplsLdpSessionKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveTimer.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveTimer.setDescription('This object indicates the value of the KeepAlive timer after the negotiation. Unit: seconds ')
hwMplsLdpSessionKeepAliveMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveMsgReceived.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveMsgReceived.setDescription('This object indicates the number of the KeepAlive messages that the session obtains.')
hwMplsLdpSessionKeepAliveMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveMsgSent.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionKeepAliveMsgSent.setDescription('This object indicates the number of the KeepAlive messages that the session sends.')
hwMplsLdpSessionLabelAdvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionLabelAdvMode.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionLabelAdvMode.setDescription('This object indicates the label distribution mode of the session.')
hwMplsLdpSessionLocalLabelResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionLocalLabelResourceStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionLocalLabelResourceStatus.setDescription('This object indicates the status of the local label resources of the session.')
hwMplsLdpSessionPeerLabelResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionPeerLabelResourceStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionPeerLabelResourceStatus.setDescription('This object indicates the status of the label resources of the LDP peer.')
hwMplsLdpSessionAgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 8, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLdpSessionAgeStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionAgeStatus.setDescription('This object indicates the existence time of the session.')
hwLdpCapabilityConfig = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpCapabilityConfig.setStatus('current')
if mibBuilder.loadTexts: hwLdpCapabilityConfig.setDescription('This object indicates the global configuration or deletion of the LDP capability. Before enabling LDP capability, ensure that the MPLS capability is enabled globally.')
hwLdpLsrId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpLsrId.setStatus('current')
if mibBuilder.loadTexts: hwLdpLsrId.setDescription('This object indicates the way to change the LDP LSR ID. The default LDP LSR ID has the same value as the MPLS LSR ID. It is recommended not to change the LDP LSR ID unless necessary.')
hwLdpPropagateIpPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpPropagateIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpPropagateIpPrefix.setDescription('This object indicates the configuration or deletion of the transit policy for the LDP. The object has a valid length ranging from 1 to 169 characters. The length 0 characters shows that the transit policy is deleted.')
hwLdpGlobalRemotePwe3 = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpGlobalRemotePwe3.setStatus('current')
if mibBuilder.loadTexts: hwLdpGlobalRemotePwe3.setDescription('This object indicates the configuration or deletion of the policy for the LDP remote session. When the object is enabled, it is forbidden to send mapping message to the remote peer. By default, the policy is disabled, which means that there is no limitation to send mapping message to the remote peer.')
hwLdpMtuSignaling = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 13), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpMtuSignaling.setStatus('current')
if mibBuilder.loadTexts: hwLdpMtuSignaling.setDescription('This object indicates the configuration or deletion of the MTU signaling function. By default, the MTU signaling function is enabled, and the MTU TLV type in the LDP message is 0x900. ')
hwLdpMtuApplyTlv = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpMtuApplyTlv.setStatus('current')
if mibBuilder.loadTexts: hwLdpMtuApplyTlv.setDescription('This object conflicts with the object hwLdpMtuSignaling. If the object is enabled, it indicates that the MTU TLV type in the LDP message is 0x601 according to the RFC 3988.')
hwLdpGrCapabilityConfig = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpGrCapabilityConfig.setStatus('current')
if mibBuilder.loadTexts: hwLdpGrCapabilityConfig.setDescription('This object indicates the configuration or deletion of the LDP GR capability.')
hwLdpGrNeighborLivenessTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpGrNeighborLivenessTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpGrNeighborLivenessTimer.setDescription('This object indicates the way to configure the value of GR neighbor life timer. When the status of hwLdpGrCapabilityConfig is enabled, the default value returned by the object is valid. Unit: seconds ')
hwLdpGrReconnectTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpGrReconnectTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpGrReconnectTimer.setDescription('This object indicates the way to configure the value of GR reconnect timer. When the status of hwLdpGrCapabilityConfig is enabled, the default value returned by the object is valid. Unit: seconds ')
hwLdpGrRecoveryTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpGrRecoveryTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpGrRecoveryTimer.setDescription('This object indicates the way to configure the value of GR recovery timer. When the status of hwLdpGrCapabilityConfig is enabled, the default value returned by the object is valid. Unit: seconds ')
hwMplsLspTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("host", 3), ("ipprefix", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLspTrigger.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTrigger.setDescription('This object indicates the way to configure the LDP policy for the ingress LSP and egress LSP. Options: 1. all(1) -indicates that all FECs are triggered for the IGP. 2. none(2) -indicates that no FEC is triggered for the IGP. 3. host(3) -indicates that the host FEC is triggered for the IGP. 4. ipprefix(4) -indicates that the ip-prefix list is triggered for the IGP. If the object is set as ipprefix, the value of hwMplsLspTriggerIpPrefix must be set together. Default: host ')
hwMplsLspTriggerIpPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLspTriggerIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTriggerIpPrefix.setDescription('This object indicates the IP prefix when configuring the LDP policy for the ingress LSP and egress LSP. The object has a valid length ranging from 1 to 169 characters. If the object is set with a value, the value of hwMplsLspTrigger must be set as ipprefix.')
hwMplsLspTriggerBgpRoute = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 21), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLspTriggerBgpRoute.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTriggerBgpRoute.setDescription('This object indicates the policy of triggering the BGP route to create the LDP LSP. Default: disabled ')
hwMplsLspTriggerBgpRouteIpPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLspTriggerBgpRouteIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTriggerBgpRouteIpPrefix.setDescription('This object indicates the IP prefix when triggering the BGP route to create the LDP LSP. The object has a valid length ranging from 1 to 169 characters. ')
hwLdpReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("resetall", 2), ("ready", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpReset.setStatus('current')
if mibBuilder.loadTexts: hwLdpReset.setDescription('This object indicates the reset of the LDP protocol. Options: 1. reset(1) -indicates the reset of the LDP protocol. 2. resetall(2) -indicates the reset of all LDP instances. 3. ready(3) -indicates that it is ready to reset LDP. This value cannot be set. ')
hwLdpOutBoundSplitHorizonAll = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 24), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpOutBoundSplitHorizonAll.setStatus('current')
if mibBuilder.loadTexts: hwLdpOutBoundSplitHorizonAll.setDescription('This object indicates the way to set the flag of global split horizon. Default: disabled ')
hwLdpDeleteGtsmAll = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("ready", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpDeleteGtsmAll.setStatus('current')
if mibBuilder.loadTexts: hwLdpDeleteGtsmAll.setDescription('This object indicates the deletion of the global GTSM configurations. Options: 1. delete(1) -indicates that global GTSM configurations are to be deleted. 2. ready(2) -indicates that it is ready to delete global GTSM configurations. ')
hwMplsFrrLspTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("host", 3), ("ipPrefix", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsFrrLspTrigger.setStatus('current')
if mibBuilder.loadTexts: hwMplsFrrLspTrigger.setDescription('This object indicates the way to configure the LDP policy of global instance for LDP Auto FRR. Options: 1. all(1) -indicates that all FECs are triggered for the IGP. 2. none(2) -indicates that no FEC is triggered for the IGP. 3. host(3) -indicates that the host FEC is triggered for the IGP. 4. ipprefix(4) -indicates that the ip-prefix list is triggered for the IGP. If the object is set as ipprefix, the value of hwMplsFrrLspTriggerIpPrefix must be set together. Default: host ')
hwMplsFrrLspTriggerIpPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsFrrLspTriggerIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwMplsFrrLspTriggerIpPrefix.setDescription('This object indicates the IP prefix when configuring LDP Auto FRR for the public network instance. The object has a valid length ranging from 1 to 169 characters. If the object is set with a value, the value of hwMplsFrrLspTrigger must be set as ipprefix.')
hwLdpBackOffTimerInit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpBackOffTimerInit.setStatus('current')
if mibBuilder.loadTexts: hwLdpBackOffTimerInit.setDescription('This object indicates the initial value of backoff timer. Default: 15 Unit: seconds ')
hwLdpBackOffTimerMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpBackOffTimerMax.setStatus('current')
if mibBuilder.loadTexts: hwLdpBackOffTimerMax.setDescription('This object indicates the maximum value of backoff timer. Default: 120 Unit: seconds ')
hwLdpLongestMatch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 30), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpLongestMatch.setStatus('current')
if mibBuilder.loadTexts: hwLdpLongestMatch.setDescription('This object indicates that the LDP is enabled with the function of searching for routes according to the longest match rule to establish LSPs. Default: disabled ')
hwLdpRemotePeerAutoDodRequest = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 37), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpRemotePeerAutoDodRequest.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemotePeerAutoDodRequest.setDescription('The value of this object identifies whether the remote peer is globally enabled with the capability of automatically sending a DoD request.')
hwLdpCapabilityAnnouncementConfig = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 38), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpCapabilityAnnouncementConfig.setStatus('current')
if mibBuilder.loadTexts: hwLdpCapabilityAnnouncementConfig.setDescription('The value of this object identifies whether LDP has Capability-Announcement ability.')
hwLdpVpnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50), )
if mibBuilder.loadTexts: hwLdpVpnTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnTable.setDescription('This object is used to configure or delete the LDP multi-instance. The index of this table is hwLdpVpnInstanceId. Make sure the relevant VPN instance is already created. ')
hwLdpVpnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwLdpVpnInstanceId"))
if mibBuilder.loadTexts: hwLdpVpnEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnEntry.setDescription('This object is used to configure or delete the LDP multi-instance. The index of this entry is hwLdpVpnInstanceId. Make sure the relevant VPN instance is already created. ')
hwLdpVpnInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwLdpVpnInstanceId.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnInstanceId.setDescription('This object indicates the ID of the VPN instance. You can find the correct VPN instance ID based on hwL3vpnVrfIndex of hwL3vpnStatisticsTable.')
hwLdpVpnLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnLsrId.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnLsrId.setDescription('This object indicates the way to configure the LDP LSR ID. If the value of the LDP LSR ID is the same as the value of the MPLS LSR ID, the LDP LSR ID is deleted. It is recommended not to change the LDP LSR ID unless necessary.')
hwLdpVpnSplitHorizonAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 12), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnSplitHorizonAll.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnSplitHorizonAll.setDescription('This object indicates the way to set the flag of split horizon for all LDP VPN peers. Default: disabled ')
hwLdpVpnReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnReset.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnReset.setDescription('This object indicates the reset of the LDP multi-instance corresponding to the VPN. Options: 1.reset(1) -indicates that the LDP multi-instance will be reset. 2.ready(2) -indicates that it is ready to reset ldp multi-instance. This value cannot be set. ')
hwMplsVpnFrrLspTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("host", 3), ("ipPrefix", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsVpnFrrLspTrigger.setStatus('current')
if mibBuilder.loadTexts: hwMplsVpnFrrLspTrigger.setDescription('This object indicates the way to configure the LDP policy of vpn instance for LDP Auto FRR. Options: 1. all(1) -indicates that all FECs are triggered for the IGP. 2. none(2) -indicates that no FEC is triggered for the IGP. 3. host(3) -indicates that the host FEC is triggered for the IGP. 4. ipprefix(4) -indicates that the ip-prefix list is triggered for the IGP. If the object is set as ipprefix, the value of hwMplsVpnFrrLspTriggerIpPrefix must be set together. ')
hwMplsVpnFrrLspTriggerIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 15), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsVpnFrrLspTriggerIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwMplsVpnFrrLspTriggerIpPrefix.setDescription('This object indicates the IP prefix when configuring the LDP policy of vpn instance for LDP Auto FRR. The object has a valid length ranging from 1 to 169 characters. If the object is set with a value, the value of hwMplsVpnFrrLspTrigger must be set as ipprefix.')
hwLdpVpnGracefulDeleteCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 16), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnGracefulDeleteCapability.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnGracefulDeleteCapability.setDescription('This object indicates whether the LDP graceful-delete capability is enabled for a VPN instance.')
hwLdpVpnGracefulDeleteTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnGracefulDeleteTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnGracefulDeleteTimer.setDescription('The value of this object identifies the value of a graceful-delete timer for a VPN instance. When the status of hwLdpVpnGracefulDeleteCapability is enabled, the default value returned by the object is valid. Default: 5 Unit: seconds ')
hwLdpVpnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 50, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnRowStatus.setDescription('This object indicates whether one entry of hwLdpVpnTable is created or destroyed. The value of this object can be CreatAndGo or Destroy. When the value of the object is set as CreatAndGo, and the entry is correctly created, the status of the object will change into active.')
hwLdpRemoteEntityTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51), )
if mibBuilder.loadTexts: hwLdpRemoteEntityTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteEntityTable.setDescription('This object is used to configure or delete the LDP remote peer. The index of this table is hwLdpRemoteName. ')
hwLdpRemoteEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwLdpRemoteName"))
if mibBuilder.loadTexts: hwLdpRemoteEntityEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteEntityEntry.setDescription('This object is used to configure or delete the LDP remote peer. The index of this entry is hwLdpRemoteName. ')
hwLdpRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 1), DisplayString())
if mibBuilder.loadTexts: hwLdpRemoteName.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteName.setDescription('This object indicates the name of the LDP remote peer. Range: 1-32 characters ')
hwLdpRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteIp.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteIp.setDescription('This object indicates the configuration of the remote peer LSR ID. If being set, the ID cannot be modified. To modify the ID, delete the original ID and create a new one. If the ID is set as 0.0.0.0, it indicates that the ID is deleted.')
hwLdpRemotePwe3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 12), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemotePwe3.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemotePwe3.setDescription('This object indicates the configuration or deletion of the policy for the remote LDP session. When the object is enabled, it is forbidden to send the mapping message to the remote peer. Default: disabled ')
hwLdpRemoteKeepaliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteKeepaliveTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteKeepaliveTimer.setDescription('This object indicates the value of LDP Keepalive timer. Default: 45 Unit: seconds ')
hwLdpRemoteHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteHelloTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteHelloTimer.setDescription('This object indicates the value of LDP Hello hold timer. Default: 45 Unit: seconds ')
hwLdpRemoteKeepaliveSendTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteKeepaliveSendTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteKeepaliveSendTimer.setDescription('This object indicates the value of LDP Keepalive send timer. By default, the value of the timer is 0, configuration does not take effect. Default: 0 Unit: seconds ')
hwLdpRemoteHelloSendTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteHelloSendTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteHelloSendTimer.setDescription('This object indicates the value of LDP Hello send timer. By default, the value of the timer is 0, configuration does not take effect. Default: 0 Unit: seconds ')
hwLdpRemoteIgpSyncTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteIgpSyncTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteIgpSyncTimer.setDescription('This object indicates the value of IGP-Sync timer. Default: 10 Unit: seconds ')
hwLdpRemoteIpAutoDoDRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 18), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteIpAutoDoDRequest.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteIpAutoDoDRequest.setDescription('This object identifies whether the remote peer is enabled with the capability of automatically sending a DoD request. Default: disabled ')
hwLdpRemoteIpAutoDoDRequestBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 19), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteIpAutoDoDRequestBlock.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteIpAutoDoDRequestBlock.setDescription('This object indicates whether the remote ip auto dod request function blocked. Default: disabled ')
hwLdpRemoteLabelAdvertisementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dod", 1), ("du", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteLabelAdvertisementMode.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteLabelAdvertisementMode.setDescription('This object indicates the label distribution mode. Options: 1. dod(1) -indicates that the label distribution mode is dod. 2. du(2) -indicates that the label distribution mode is du. Default: du ')
hwLdpRemoteLocalLsrIdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 21), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteLocalLsrIdIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteLocalLsrIdIfIndex.setDescription('This object indicates the way to specify the interface that the local LDP LSR-ID based on remote entity is assigned to. Value: 0..2147483647 The default value of the object is the interface that the global LDP LSR ID is assigned to. If the global LDP LSR ID is not assigned to any interface, then the value of the object is 0. If set 0, the value of the object will be the default value. ')
hwLdpRemoteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 51, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpRemoteRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteRowStatus.setDescription('This object indicates whether one entry of hwLdpRemoteEntityTable is created or destroyed. The value of this object can be CreatAndGo or Destroy. When the value of the object is set as CreatAndGo, and the entry is correctly created, the status of the object will change into active.')
hwLdpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52), )
if mibBuilder.loadTexts: hwLdpPeerTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerTable.setDescription('This object is used to configure the LDP peer. The index of this table is hwLdpPeerLsrId. ')
hwLdpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwLdpPeerLsrId"))
if mibBuilder.loadTexts: hwLdpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerEntry.setDescription('An entry of the peer feature table, used to configure and display features, such as the MD5 password and split horizon policy negotiated with the local peer. The index of this entry is hwLdpPeerLsrId. ')
hwLdpPeerLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwLdpPeerLsrId.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerLsrId.setDescription('This object indicates the LSR ID of the LDP peer.')
hwLdpPeerMd5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cipher", 1), ("plain", 2), ("null", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerMd5Type.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerMd5Type.setDescription('This object indicates the Md5 type. Options: 1. cipher(1) -indicates that the MD5 password is in cipher text mode. 2. plain(2) -indicates that the MD5 password is in plain text mode. 3. null(3) -indicates that the MD5 type is null, which means that the MD5 authentication is not configured for the LDP peer. ')
hwLdpPeerMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 12), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerMd5Password.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerMd5Password.setDescription('This object indicates the MD5 password of LDP neighbor. To delete the password, set the password length as zero. When read, it always returns an Octet string with the length of zero. ')
hwLdpPeerGtsmHops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGtsmHops.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGtsmHops.setDescription('This object indicates the number of GTSM hops. The valid number of GTSM hops ranges from 1 to 255. To clear the configuration of GTSM hops, set the number of GTSM hops as 0.')
hwLdpPeerSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 14), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerSplitHorizon.setDescription('This object indicates the way to set the flag of split horizon for the specified LDP peer. Default: disabled ')
hwLdpPeerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerReset.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerReset.setDescription('This object indicates the reset of the neighbor services. Options: 1. reset(1) -indicates that the neighbor services will be reset. Only when the object is ready, can this value take effect. 2. ready(2) -indicates that it is ready to reset the neighbor services. This value cannot be set. ')
hwLdpPeerKeychainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 18), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerKeychainName.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerKeychainName.setDescription('This object indicates the Keychain name. To cancel the Keychain authentication, set the Keychain name length as 0.')
hwLdpPeerOutBoundPolicyRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("none", 2), ("ipprefix", 3), ("host", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyRange.setDescription('This object indicates the range of IGP routes for an outbound policy. The default value is clear. If the object is set as ipprefix, the value of hwLdpPeerOutBoundPolicyFecIpPrefix must be set together.')
hwLdpPeerOutBoundPolicyFecIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 20), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyFecIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyFecIpPrefix.setDescription('This object indicates the IP prefix list name of IGP routes for an outbound policy. If the object is set with a value, the value of hwLdpPeerOutBoundPolicyRange must be set as ipprefix.')
hwLdpPeerOutBoundPolicyBgpRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("none", 2), ("ipprefix", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyBgpRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyBgpRange.setDescription('This object indicates the range of BGP routes for an outbound policy. The default value is clear. If the object is set as ipprefix, the value of hwLdpPeerOutBoundPolicyBgpIpPrefix must be set together.')
hwLdpPeerOutBoundPolicyBgpIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 22), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyBgpIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerOutBoundPolicyBgpIpPrefix.setDescription('This object indicates the IP prefix list name of BGP routes for the outbound policy. If the object is set with a value, the value of hwLdpPeerOutBoundPolicyBgpRange must be set as ipprefix.')
hwLdpPeerInBoundPolicyRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("none", 2), ("ipprefix", 3), ("host", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerInBoundPolicyRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerInBoundPolicyRange.setDescription('This object indicates the route range for the inbound policy. The default value is clear. If the object is set as ipprefix, the value of hwLdpPeerInBoundPolicyFecIpPrefix must be set together.')
hwLdpPeerInBoundPolicyFecIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 24), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerInBoundPolicyFecIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerInBoundPolicyFecIpPrefix.setDescription('This object indicates the IP prefix list name for the inbound policy. If the object is set with a value, the value of hwLdpPeerInBoundPolicyRange must be set as ipprefix.')
hwLdpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 52, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerRowStatus.setDescription('This object indicates whether one entry of hwLdpPeerTable is created or destroyed. The value of this object can be CreatAndGo or Destroy. When the value of the object is set as CreatAndGo, and the entry is correctly created, the status of the object will change into active.')
hwLdpVpnPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53), )
if mibBuilder.loadTexts: hwLdpVpnPeerTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerTable.setDescription('This table is used to create and delete peer configurations in the LDP multi-instance. The indexs of this table are hwLdpVpnInstanceId, hwLdpVpnPeerLsrId. Make sure the corresponding LDP VPN-instance is already created in hwLdpVpnTable. ')
hwLdpVpnPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwLdpVpnInstanceId"), (0, "HUAWEI-MPLSLDP-MIB", "hwLdpVpnPeerLsrId"))
if mibBuilder.loadTexts: hwLdpVpnPeerEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerEntry.setDescription('An entry of the VPN peer feature table, used to configure and display features, such as the MD5 password and split horizon policy negotiated with the local peer on the VPN. The indexs of this entry are hwLdpVpnInstanceId, hwLdpVpnPeerLsrId. Make sure the corresponding LDP VPN-instance is already created in hwLdpVpnTable. ')
hwLdpVpnPeerLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwLdpVpnPeerLsrId.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerLsrId.setDescription('This object indicates the LSR ID of the LDP peer.')
hwLdpVpnPeerMd5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cipher", 1), ("plain", 2), ("null", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnPeerMd5Type.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerMd5Type.setDescription('This object indicates the Md5 type. 1. cipher(1) -indicates that the MD5 password is in cipher text mode. 2. plain(2) -indicates that the MD5 password is in plain text mode. 3. null(3) -indicates that the MD5 type is null, which means that the MD5 authentication is not configured for the LDP peer. ')
hwLdpVpnPeerMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1, 12), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnPeerMd5Password.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerMd5Password.setDescription('This object indicates the MD5 password of VPN LDP neighbor. To delete the password, set the password length as zero. When read, it always returns an Octet string with the length of zero. ')
hwLdpVpnPeerSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1, 13), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnPeerSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerSplitHorizon.setDescription('This object indicates the way to set the flag of split horizon for the specified LDP peer. Default: disabled ')
hwLdpVpnPeerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnPeerReset.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerReset.setDescription('This object indicates the reset of the neighbor services. Options: 1. reset(1) -indicates that the neighbor services will be reset. Only when the object is ready, can this value take effect. 2. ready(2) -indicates that it is ready to reset the neighbor services. This value cannot be set. ')
hwLdpVpnPeerKeychainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1, 17), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnPeerKeychainName.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerKeychainName.setDescription('This object indicates the Keychain name. To cancel the Keychain authentication, set the Keychain name length as 0.')
hwLdpVpnPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 53, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpVpnPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpVpnPeerRowStatus.setDescription('This object indicates whether one entry of hwLdpVpnPeerTable is created or destroyed. The value of this object can be CreatAndGo or Destroy. When the value of the object is set as CreatAndGo, and the entry is correctly created, the status of the object will change into active.')
hwLdpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54), )
if mibBuilder.loadTexts: hwLdpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpInterfaceTable.setDescription('This table is used to configure or delete the LDP capability on the interface. The index of this table is hwLdpInterfaceIndex. ')
hwLdpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwLdpInterfaceIndex"))
if mibBuilder.loadTexts: hwLdpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpInterfaceEntry.setDescription('An entry of the LDP interface table, used to configure and display the LDP negotiation parameters on the interface enabled with LDP capabilities. The index of this entry is hwLdpInterfaceIndex. ')
hwLdpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwLdpInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdpInterfaceIndex.setDescription('This object indicates the interface index. You can get the correct interface index based on ifIndex of ifTable.')
hwLdpStaticFrrProtectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpStaticFrrProtectTimer.setStatus('obsolete')
if mibBuilder.loadTexts: hwLdpStaticFrrProtectTimer.setDescription('This object indicates the value of static FRR protect timer. Default: 10 Unit: seconds ')
hwLdpKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpKeepAliveTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpKeepAliveTimer.setDescription('This object indicates the value of Keepalive timer. Default: 45 Unit: seconds ')
hwLdpIgpSyncTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpIgpSyncTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpIgpSyncTimer.setDescription('This object indicates the value of IGP-Sync timer. By default, the timer is set to 10 seconds. Default: 10 Unit: seconds ')
hwLdpHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpHelloTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpHelloTimer.setDescription('This object indicates the value of Hello hold timer. By default, the value of the timer is 15 seconds. Default: 15 Unit: seconds ')
hwLdpTransportAddressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 15), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpTransportAddressIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdpTransportAddressIfIndex.setDescription('This object indicates the way to specify the interface that the Transport Address is assigned to. Value: 0..2147483647 The default value of the object for the public interface is the interface that the LDP LSR ID is assigned to. If the LDP LSR ID is not assigned to any interface, then the value of the object is 0, and 0 cannot be set. The default value of the object for the private interface is the private interface itself. Based on mplsL3VpnIfConfRowStatus of mplsL3VpnIfConfTable, you can find which interface belongs to the VPN. The interface must be bound with the same VPN instance. ')
hwLdpKeepAliveSendTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpKeepAliveSendTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpKeepAliveSendTimer.setDescription('This object indicates the value of LDP Keepalive send timer. Default: 0 Unit: seconds ')
hwLdpHelloSendTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpHelloSendTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpHelloSendTimer.setDescription('This object indicates the value of LDP Hello send timer. Default: 0 Unit: seconds ')
hwLdpInterfaceLabelAdvertisementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dod", 1), ("du", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpInterfaceLabelAdvertisementMode.setStatus('current')
if mibBuilder.loadTexts: hwLdpInterfaceLabelAdvertisementMode.setDescription('This object indicates the label distribution mode. Options: 1. dod(1) -indicates that the label distribution mode is dod. 2. du(2) -indicates that the label distribution mode is du. Default: du ')
hwLdpInterfaceLocalLsrIdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 19), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpInterfaceLocalLsrIdIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdpInterfaceLocalLsrIdIfIndex.setDescription('This object indicates the way to specify the interface that the local LDP LSR-ID based on interface is assigned to. Value: 0..2147483647 The default value of the object for the public interface is the interface that the global LDP LSR ID is assigned to. If the global LDP LSR ID is not assigned to any interface, then the value of the object is 0. If set 0, the value of the object will be the default value. The default value of the object for the private interface is the interface that the global LDP LSR ID of VPN Instance is assigned to. Based on mplsL3VpnIfConfRowStatus of mplsL3VpnIfConfTable, you can find which interface belongs to the VPN. The interface which the object specified must be bound with the same VPN instance with the interface which is configured. ')
hwLdpInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 54, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpInterfaceRowStatus.setDescription('This object indicates whether one entry of hwLdpInterfaceTable is created or destroyed. The value of this object can be CreatAndGo or Destroy. When the value of the object is set as CreatAndGo, and the entry is correctly created, the status of the object will change into active.')
hwLdpPeerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58), )
if mibBuilder.loadTexts: hwLdpPeerGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupTable.setDescription('This table is used to configure an LDP peer group. ')
hwLdpPeerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1), ).setIndexNames((0, "HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupName"))
if mibBuilder.loadTexts: hwLdpPeerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupEntry.setDescription('An entry of this table.')
hwLdpPeerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 110)))
if mibBuilder.loadTexts: hwLdpPeerGroupName.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupName.setDescription('This object indicates the name of a peer group.')
hwLdpPeerGroupOutBoundRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("none", 2), ("ipprefix", 3), ("host", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundRange.setDescription('This object indicates the range of IGP routes for an outbound policy. The default value is clear. If the object is set as ipprefix, the value of hwLdpPeerGroupOutBoundFecIpPrefix must be set together.')
hwLdpPeerGroupOutBoundFecIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 12), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundFecIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundFecIpPrefix.setDescription('This object indicates the IP prefix list name of IGP routes for an outbound policy. If the object is set with a value, the value of hwLdpPeerGroupOutBoundRange must be set as ipprefix.')
hwLdpPeerGroupOutBoundBgpRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("none", 2), ("ipprefix", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundBgpRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundBgpRange.setDescription('This object indicates the range of BGP routes for an outbound policy. The default value is clear. If the object is set as ipprefix, the value of hwLdpPeerGroupOutBoundBgpIpPrefix must be set together.')
hwLdpPeerGroupOutBoundBgpIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 14), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundBgpIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupOutBoundBgpIpPrefix.setDescription('This object indicates the IP prefix list name of BGP routes for an outbound policy. If the object is set with a value, the value of hwLdpPeerGroupOutBoundBgpRange must be set as ipprefix.')
hwLdpPeerGroupInBoundRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("none", 2), ("ipprefix", 3), ("host", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGroupInBoundRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupInBoundRange.setDescription('This object indicates the route range for an inbound policy. The default value is clear. If the object is set as ipprefix, the value of hwLdpPeerGroupInBoundIpPrefix must be set together.')
hwLdpPeerGroupInBoundIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 16), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGroupInBoundIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupInBoundIpPrefix.setDescription('This object indicates the IP prefix list name of routes for an inbound policy. If the object is set with a value, the value of hwLdpPeerGroupInBoundRange must be set as ipprefix.')
hwLdpPeerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 58, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpPeerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpPeerGroupRowStatus.setDescription('This object indicates whether one entry of hwLdpPolicyPeerGroupTable is created or destroyed. The value of this object is CreatAndGo or Destroy. When the value of the object is set to CreatAndGo, and the entry is correctly created, the status of the object will change into active.')
hwLdpOutBoundPolicyPeerAllRange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("ipprefix", 3), ("host", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllRange.setDescription('This object indicates the range of IGP routes for a global outbound LDP policy. The default value is all. If the object is set as ipprefix, the value of hwLdpOutBoundPolicyPeerAllFecIpPrefix must be set together.')
hwLdpOutBoundPolicyPeerAllFecIpPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 60), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllFecIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllFecIpPrefix.setDescription('This object indicates the IP prefix list name of IGP routes for a global outbound LDP policy. The default value is NULL. If the object is set with a value, the value of hwLdpOutBoundPolicyPeerAllRange must be set as ipprefix.')
hwLdpOutBoundPolicyPeerAllBgpRange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("ipprefix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllBgpRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllBgpRange.setDescription('This object indicates the range of BGP routes for a global outbound LDP policy. The default value is all. If the object is set as ipprefix, the value of hwLdpOutBoundPolicyPeerAllBgpIpPrefix must be set together.')
hwLdpOutBoundPolicyPeerAllBgpIpPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 62), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllBgpIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpOutBoundPolicyPeerAllBgpIpPrefix.setDescription('This object indicates the IP prefix list name of BGP routes for a global outbound LDP policy. The default value is NULL. If the object is set with a value, the value of hwLdpOutBoundPolicyPeerAllBgpRange must be set as ipprefix.')
hwLdpInBoundPolicyPeerAllRange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("none", 2), ("ipprefix", 3), ("host", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpInBoundPolicyPeerAllRange.setStatus('current')
if mibBuilder.loadTexts: hwLdpInBoundPolicyPeerAllRange.setDescription('This object indicates the range of routes for a global inbound LDP policy. The default value is all. If the object is set as ipprefix, the value of hwLdpInBoundPolicyPeerAllIpPrefix must be set together.')
hwLdpInBoundPolicyPeerAllIpPrefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 64), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpInBoundPolicyPeerAllIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpInBoundPolicyPeerAllIpPrefix.setDescription('This object indicates the IP prefix list name of routes for a global inbound LDP policy. The default value is NULL. If the object is set with a value, the value of hwLdpInBoundPolicyPeerAllRange must be set as ipprefix.')
hwLdpGracefulDeleteCapability = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 65), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpGracefulDeleteCapability.setStatus('current')
if mibBuilder.loadTexts: hwLdpGracefulDeleteCapability.setDescription('This object indicates whether the LDP graceful-delete capability is enabled.')
hwLdpGracefulDeleteTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdpGracefulDeleteTimer.setStatus('current')
if mibBuilder.loadTexts: hwLdpGracefulDeleteTimer.setDescription('The value of this object identifies the value of a graceful-delete timer. When the status of hwLdpGracefulDeleteCapability is enabled, the default value returned by the object is valid. Default: 5 Unit: seconds ')
hwLdpLspDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("sessionDown", 2), ("routeChange", 3), ("canNotRecoveryFromGr", 4), ("policyChange", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpLspDownReason.setStatus('current')
if mibBuilder.loadTexts: hwLdpLspDownReason.setDescription('The LDP LSP down reason. Options: 1. other(1) -indicates other reasons. 2. session down(2) -indicates the ldp session went down. 3. route change(3) -indicates the route changed. 4. cannot recovery from GR(4) -indicates LSP cannot recovery from graceful-restart. 5. policy change(5) -indicates the policy changed. ')
hwLdpLspDownMplsLsrId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 68), MplsLsrIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpLspDownMplsLsrId.setStatus('current')
if mibBuilder.loadTexts: hwLdpLspDownMplsLsrId.setDescription('This object indicates the LSR ID of failed router.')
hwLdpLspDownOutIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 69), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpLspDownOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdpLspDownOutIfIndex.setDescription('This object indicates the outgoing interface index of the failed router.')
hwLdpLspDownOutIfMainIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 70), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpLspDownOutIfMainIp.setStatus('current')
if mibBuilder.loadTexts: hwLdpLspDownOutIfMainIp.setDescription("This object indicates the main ip address of the failed router's outgoing interface.")
hwLdpLspDownOutIfState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpLspDownOutIfState.setStatus('current')
if mibBuilder.loadTexts: hwLdpLspDownOutIfState.setDescription("The state of the failed router's outgoing interface. Options: 1. up(1) -indicates that the state of the outgoing interface is Up. 2. down(2) -indicates that the state of the outgoing interface is Down. ")
hwLdpLspDownDownstreamPeerLsrId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 72), MplsLdpIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpLspDownDownstreamPeerLsrId.setStatus('current')
if mibBuilder.loadTexts: hwLdpLspDownDownstreamPeerLsrId.setDescription("This object indicates the failed router's downstream peer's LSR ID.")
hwLdpSessionStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 73))
hwLdpLocalOperationalSessionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 73, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdpLocalOperationalSessionNumber.setStatus('current')
if mibBuilder.loadTexts: hwLdpLocalOperationalSessionNumber.setDescription('This object indicates the number of local LDP operational sessions.')
hwLdpRemoteOperationalSessionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 73, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdpRemoteOperationalSessionNumber.setStatus('current')
if mibBuilder.loadTexts: hwLdpRemoteOperationalSessionNumber.setDescription('This object indicates the number of remote LDP operational sessions.')
hwLdpLocalAndRemoteOperationalSessionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 73, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdpLocalAndRemoteOperationalSessionNumber.setStatus('current')
if mibBuilder.loadTexts: hwLdpLocalAndRemoteOperationalSessionNumber.setDescription('This object indicates the number of local and remote LDP operational sessions.')
hwLdpTotalOperationalSessionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 1, 73, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdpTotalOperationalSessionNumber.setStatus('current')
if mibBuilder.loadTexts: hwLdpTotalOperationalSessionNumber.setDescription('This object indicates the total number of LDP operational sessions.')
hwMplsLdpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 2))
hwMplsLdpSessionDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 2, 1)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionDownReason"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionIfIndex"))
if mibBuilder.loadTexts: hwMplsLdpSessionDown.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsLdpSessionDown.setDescription('When the trap indicating that a session is down is sent, the cause for the down LDP session is displayed. ')
hwMplsLdpLspDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 2, 2)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspFec"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspInLabel"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspOutLabel"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspOutIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspDownReason"))
if mibBuilder.loadTexts: hwMplsLdpLspDown.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsLdpLspDown.setDescription('When the trap indicating that a session is down is sent, the cause for the down LSP session is displayed.')
hwMplsLdpHostIngressLspDownClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 2, 3)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspFec"))
if mibBuilder.loadTexts: hwMplsLdpHostIngressLspDownClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpHostIngressLspDownClear.setDescription("A trap is sent to clear the down trap of a specified FEC's ingress lsp.")
hwMplsLdpHostIngressLspDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 2, 4)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspFec"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownReason"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownMplsLsrId"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfMainIp"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfState"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownDownstreamPeerLsrId"))
if mibBuilder.loadTexts: hwMplsLdpHostIngressLspDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpHostIngressLspDown.setDescription('A trap is sent when all the ingress lsp of a specified FEC went down.')
hwMplsLdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3))
hwMplsLdpCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 1)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpCompliances = hwMplsLdpCompliances.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpCompliances.setDescription('The Compliance statement for systems supporting the HUAWEI-MPLSLDP-MIB.')
hwMplsLdpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2))
hwMplsLdpInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 1)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspDownReason"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspFec"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspInLabel"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspOutLabel"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionAge"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionAgeStatus"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionPeerLabelResourceStatus"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionLocalLabelResourceStatus"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionLabelAdvMode"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionKeepAliveMsgSent"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionKeepAliveMsgReceived"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionKeepAliveTimer"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionRecoveryTimer"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionReconnectTimer"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionMd5Flag"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionFtFlag"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionRole"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionState"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionTcpConnectionState"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionLsrId"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemotePeerAutoDodRequest"), ("HUAWEI-MPLSLDP-MIB", "hwLdpCapabilityAnnouncementConfig"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionDownReason"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpProcessName"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspOutIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwLdpOutBoundPolicyPeerAllRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpOutBoundPolicyPeerAllFecIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpOutBoundPolicyPeerAllBgpRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpOutBoundPolicyPeerAllBgpIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpInBoundPolicyPeerAllRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpInBoundPolicyPeerAllIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpGracefulDeleteCapability"), ("HUAWEI-MPLSLDP-MIB", "hwLdpGracefulDeleteTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownReason"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownMplsLsrId"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfMainIp"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfState"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownDownstreamPeerLsrId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpInfoGroup = hwMplsLdpInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpInfoGroup.setDescription('Infomation about LDP LSP.')
hwMplsLdpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 2)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpSessionDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpNotificationGroup = hwMplsLdpNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsLdpNotificationGroup.setDescription('Notification information included in the mib.')
hwMplsLdpLspDownNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 3)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpLspDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpLspDownNotificationGroup = hwMplsLdpLspDownNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsLdpLspDownNotificationGroup.setDescription('No use.')
hwMplsLdpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 4)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpCapabilityConfig"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLsrId"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPropagateIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpGlobalRemotePwe3"), ("HUAWEI-MPLSLDP-MIB", "hwLdpMtuSignaling"), ("HUAWEI-MPLSLDP-MIB", "hwLdpMtuApplyTlv"), ("HUAWEI-MPLSLDP-MIB", "hwLdpGrCapabilityConfig"), ("HUAWEI-MPLSLDP-MIB", "hwLdpGrNeighborLivenessTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpGrReconnectTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpGrRecoveryTimer"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLspTrigger"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLspTriggerIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLspTriggerBgpRoute"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLspTriggerBgpRouteIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpReset"), ("HUAWEI-MPLSLDP-MIB", "hwLdpOutBoundSplitHorizonAll"), ("HUAWEI-MPLSLDP-MIB", "hwLdpDeleteGtsmAll"), ("HUAWEI-MPLSLDP-MIB", "hwMplsFrrLspTrigger"), ("HUAWEI-MPLSLDP-MIB", "hwMplsFrrLspTriggerIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpBackOffTimerInit"), ("HUAWEI-MPLSLDP-MIB", "hwLdpBackOffTimerMax"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLongestMatch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpGlobalGroup = hwMplsLdpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpGlobalGroup.setDescription('Information about Ldp Global configuration.')
hwMplsLdpVpnGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 5)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpVpnLsrId"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnSplitHorizonAll"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnReset"), ("HUAWEI-MPLSLDP-MIB", "hwMplsVpnFrrLspTrigger"), ("HUAWEI-MPLSLDP-MIB", "hwMplsVpnFrrLspTriggerIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnGracefulDeleteCapability"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnGracefulDeleteTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpVpnGlobalGroup = hwMplsLdpVpnGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpVpnGlobalGroup.setDescription('Information about Ldp Vpn configuration.')
hwMplsLdpRemoteEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 6)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteIp"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemotePwe3"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteKeepaliveTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteHelloTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteKeepaliveSendTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteHelloSendTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteIgpSyncTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteIpAutoDoDRequest"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteIpAutoDoDRequestBlock"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteLabelAdvertisementMode"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteLocalLsrIdIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpRemoteEntityGroup = hwMplsLdpRemoteEntityGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpRemoteEntityGroup.setDescription('Information about remote entity.')
hwMplsLdpPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 7)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpPeerMd5Type"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerMd5Password"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGtsmHops"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerSplitHorizon"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerReset"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerKeychainName"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerOutBoundPolicyRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerOutBoundPolicyFecIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerOutBoundPolicyBgpRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerOutBoundPolicyBgpIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerInBoundPolicyRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerInBoundPolicyFecIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpPeerGroup = hwMplsLdpPeerGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpPeerGroup.setDescription('Information about Ldp Peer.')
hwMplsLdpVpnPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 8)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpVpnPeerMd5Type"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnPeerMd5Password"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnPeerSplitHorizon"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnPeerReset"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnPeerKeychainName"), ("HUAWEI-MPLSLDP-MIB", "hwLdpVpnPeerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpVpnPeerGroup = hwMplsLdpVpnPeerGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpVpnPeerGroup.setDescription('Information about Ldp Vpn Peer.')
hwMplsLdpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 9)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpKeepAliveTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpIgpSyncTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpHelloTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpTransportAddressIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwLdpKeepAliveSendTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpHelloSendTimer"), ("HUAWEI-MPLSLDP-MIB", "hwLdpInterfaceLabelAdvertisementMode"), ("HUAWEI-MPLSLDP-MIB", "hwLdpInterfaceLocalLsrIdIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwLdpInterfaceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpInterfaceGroup = hwMplsLdpInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpInterfaceGroup.setDescription('Information about Ldp interface capability.')
hwLdpLspDownReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 10)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownReason"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownMplsLsrId"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfIndex"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfMainIp"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownOutIfState"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLspDownDownstreamPeerLsrId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdpLspDownReasonGroup = hwLdpLspDownReasonGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdpLspDownReasonGroup.setDescription('Information about Ldp ingress Lsp down reason.')
hwMplsLdpHostIngressLspDownNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 11)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwMplsLdpHostIngressLspDownClear"), ("HUAWEI-MPLSLDP-MIB", "hwMplsLdpHostIngressLspDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpHostIngressLspDownNotificationGroup = hwMplsLdpHostIngressLspDownNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpHostIngressLspDownNotificationGroup.setDescription('Notification information included in the mib.')
hwLdpPolicyPeerGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 15)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupOutBoundRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupOutBoundFecIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupOutBoundBgpRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupOutBoundBgpIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupInBoundRange"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupInBoundIpPrefix"), ("HUAWEI-MPLSLDP-MIB", "hwLdpPeerGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdpPolicyPeerGroupGroup = hwLdpPolicyPeerGroupGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdpPolicyPeerGroupGroup.setDescription('Information about Ldp Policies of peer groups.')
hwMplsLdpFrrProtectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 16)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpStaticFrrProtectTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpFrrProtectGroup = hwMplsLdpFrrProtectGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsLdpFrrProtectGroup.setDescription('Information about Ldp FRR protect timer.')
hwMplsLdpSessionStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 143, 3, 2, 17)).setObjects(("HUAWEI-MPLSLDP-MIB", "hwLdpLocalOperationalSessionNumber"), ("HUAWEI-MPLSLDP-MIB", "hwLdpRemoteOperationalSessionNumber"), ("HUAWEI-MPLSLDP-MIB", "hwLdpLocalAndRemoteOperationalSessionNumber"), ("HUAWEI-MPLSLDP-MIB", "hwLdpTotalOperationalSessionNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpSessionStatisticsGroup = hwMplsLdpSessionStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpSessionStatisticsGroup.setDescription('Information about Ldp Session Statistics.')
mibBuilder.exportSymbols("HUAWEI-MPLSLDP-MIB", hwMplsFrrLspTriggerIpPrefix=hwMplsFrrLspTriggerIpPrefix, hwLdpPeerMd5Password=hwLdpPeerMd5Password, hwLdpPeerMd5Type=hwLdpPeerMd5Type, hwLdpGracefulDeleteTimer=hwLdpGracefulDeleteTimer, hwMplsLdpSessionEntry=hwMplsLdpSessionEntry, hwLdpPeerTable=hwLdpPeerTable, hwLdpPeerGroupInBoundRange=hwLdpPeerGroupInBoundRange, hwLdpLspDownReason=hwLdpLspDownReason, hwMplsLdpFrrProtectGroup=hwMplsLdpFrrProtectGroup, hwMplsLdpHostIngressLspDownNotificationGroup=hwMplsLdpHostIngressLspDownNotificationGroup, hwLdpBackOffTimerInit=hwLdpBackOffTimerInit, hwMplsLdpInfoGroup=hwMplsLdpInfoGroup, hwLdpPeerSplitHorizon=hwLdpPeerSplitHorizon, hwLdpCapabilityAnnouncementConfig=hwLdpCapabilityAnnouncementConfig, hwLdpRemoteName=hwLdpRemoteName, hwLdpReset=hwLdpReset, hwLdpVpnPeerSplitHorizon=hwLdpVpnPeerSplitHorizon, hwMplsLdpSessionLabelAdvMode=hwMplsLdpSessionLabelAdvMode, hwLdpPeerEntry=hwLdpPeerEntry, hwLdpInterfaceLabelAdvertisementMode=hwLdpInterfaceLabelAdvertisementMode, hwLdpVpnGracefulDeleteTimer=hwLdpVpnGracefulDeleteTimer, hwLdpLspDownOutIfMainIp=hwLdpLspDownOutIfMainIp, hwLdpOutBoundPolicyPeerAllFecIpPrefix=hwLdpOutBoundPolicyPeerAllFecIpPrefix, hwMplsLdpSessionStateEntry=hwMplsLdpSessionStateEntry, hwLdpVpnPeerRowStatus=hwLdpVpnPeerRowStatus, hwLdpLspDownOutIfState=hwLdpLspDownOutIfState, hwMplsVpnFrrLspTriggerIpPrefix=hwMplsVpnFrrLspTriggerIpPrefix, hwMplsLdpSessionFtFlag=hwMplsLdpSessionFtFlag, hwLdpInterfaceLocalLsrIdIfIndex=hwLdpInterfaceLocalLsrIdIfIndex, hwLdpRemotePeerAutoDodRequest=hwLdpRemotePeerAutoDodRequest, hwLdpSessionStatistics=hwLdpSessionStatistics, hwLdpOutBoundPolicyPeerAllBgpIpPrefix=hwLdpOutBoundPolicyPeerAllBgpIpPrefix, hwLdpPeerGroupOutBoundBgpRange=hwLdpPeerGroupOutBoundBgpRange, hwLdpPeerOutBoundPolicyRange=hwLdpPeerOutBoundPolicyRange, hwLdpVpnTable=hwLdpVpnTable, hwLdpPeerGroupOutBoundRange=hwLdpPeerGroupOutBoundRange, hwLdpTransportAddressIfIndex=hwLdpTransportAddressIfIndex, hwLdpPeerKeychainName=hwLdpPeerKeychainName, hwMplsLdpPeerGroup=hwMplsLdpPeerGroup, hwLdpGrRecoveryTimer=hwLdpGrRecoveryTimer, hwMplsLdpSessionIfIndex=hwMplsLdpSessionIfIndex, hwMplsLdpSessionMd5Flag=hwMplsLdpSessionMd5Flag, hwMplsLdpVpnGlobalGroup=hwMplsLdpVpnGlobalGroup, hwLdpInBoundPolicyPeerAllRange=hwLdpInBoundPolicyPeerAllRange, hwLdpInterfaceRowStatus=hwLdpInterfaceRowStatus, hwMplsLdpLspFec=hwMplsLdpLspFec, hwLdpOutBoundPolicyPeerAllBgpRange=hwLdpOutBoundPolicyPeerAllBgpRange, hwMplsLdpInterfaceGroup=hwMplsLdpInterfaceGroup, hwMplsLdpSessionRecoveryTimer=hwMplsLdpSessionRecoveryTimer, PYSNMP_MODULE_ID=hwMplsLdp, hwMplsLspTriggerBgpRouteIpPrefix=hwMplsLspTriggerBgpRouteIpPrefix, hwLdpPeerLsrId=hwLdpPeerLsrId, hwLdpRemotePwe3=hwLdpRemotePwe3, hwMplsLdpSessionAgeStatus=hwMplsLdpSessionAgeStatus, hwMplsLdpLspOutLabel=hwMplsLdpLspOutLabel, hwLdpPeerGroupRowStatus=hwLdpPeerGroupRowStatus, hwLdpTotalOperationalSessionNumber=hwLdpTotalOperationalSessionNumber, hwMplsLdpTrap=hwMplsLdpTrap, hwLdpPeerGroupName=hwLdpPeerGroupName, hwMplsLdpSessionState=hwMplsLdpSessionState, hwLdpHelloTimer=hwLdpHelloTimer, hwLdpRemoteOperationalSessionNumber=hwLdpRemoteOperationalSessionNumber, hwMplsLdpSessionStateTable=hwMplsLdpSessionStateTable, hwLdpPeerInBoundPolicyFecIpPrefix=hwLdpPeerInBoundPolicyFecIpPrefix, hwMplsLdpLspDownNotificationGroup=hwMplsLdpLspDownNotificationGroup, hwMplsLspTriggerBgpRoute=hwMplsLspTriggerBgpRoute, hwMplsLdpInfo=hwMplsLdpInfo, hwLdpOutBoundSplitHorizonAll=hwLdpOutBoundSplitHorizonAll, hwLdpRemoteLocalLsrIdIfIndex=hwLdpRemoteLocalLsrIdIfIndex, hwMplsLdp=hwMplsLdp, hwMplsLdpSessionStatisticsGroup=hwMplsLdpSessionStatisticsGroup, hwLdpRemoteIpAutoDoDRequestBlock=hwLdpRemoteIpAutoDoDRequestBlock, hwMplsLdpVpnPeerGroup=hwMplsLdpVpnPeerGroup, hwLdpVpnPeerReset=hwLdpVpnPeerReset, hwLdpGrReconnectTimer=hwLdpGrReconnectTimer, hwLdpVpnPeerEntry=hwLdpVpnPeerEntry, hwMplsLdpProcessName=hwMplsLdpProcessName, hwLdpKeepAliveTimer=hwLdpKeepAliveTimer, hwLdpPropagateIpPrefix=hwLdpPropagateIpPrefix, hwLdpRemoteIpAutoDoDRequest=hwLdpRemoteIpAutoDoDRequest, hwLdpLspDownDownstreamPeerLsrId=hwLdpLspDownDownstreamPeerLsrId, hwLdpVpnPeerLsrId=hwLdpVpnPeerLsrId, hwLdpVpnInstanceId=hwLdpVpnInstanceId, hwMplsLdpSessionTable=hwMplsLdpSessionTable, hwMplsLdpSessionAge=hwMplsLdpSessionAge, hwLdpMtuSignaling=hwLdpMtuSignaling, hwLdpVpnPeerKeychainName=hwLdpVpnPeerKeychainName, hwLdpLspDownReasonGroup=hwLdpLspDownReasonGroup, hwLdpPeerGroupEntry=hwLdpPeerGroupEntry, hwLdpPeerGroupOutBoundBgpIpPrefix=hwLdpPeerGroupOutBoundBgpIpPrefix, hwLdpLsrId=hwLdpLsrId, hwLdpGlobalRemotePwe3=hwLdpGlobalRemotePwe3, hwMplsLdpSessionReconnectTimer=hwMplsLdpSessionReconnectTimer, hwLdpMtuApplyTlv=hwLdpMtuApplyTlv, hwLdpLocalAndRemoteOperationalSessionNumber=hwLdpLocalAndRemoteOperationalSessionNumber, hwLdpInterfaceIndex=hwLdpInterfaceIndex, hwMplsLdpSessionPeerLsrId=hwMplsLdpSessionPeerLsrId, hwLdpPeerGroupTable=hwLdpPeerGroupTable, hwMplsLdpLspInLabel=hwMplsLdpLspInLabel, hwLdpPeerOutBoundPolicyBgpRange=hwLdpPeerOutBoundPolicyBgpRange, hwMplsFrrLspTrigger=hwMplsFrrLspTrigger, hwLdpLspDownOutIfIndex=hwLdpLspDownOutIfIndex, hwLdpStaticFrrProtectTimer=hwLdpStaticFrrProtectTimer, hwMplsLdpGlobalGroup=hwMplsLdpGlobalGroup, hwLdpLspDownMplsLsrId=hwLdpLspDownMplsLsrId, hwLdpPeerGroupOutBoundFecIpPrefix=hwLdpPeerGroupOutBoundFecIpPrefix, hwLdpPeerGtsmHops=hwLdpPeerGtsmHops, hwLdpIgpSyncTimer=hwLdpIgpSyncTimer, hwMplsLspTriggerIpPrefix=hwMplsLspTriggerIpPrefix, hwLdpRemoteKeepaliveTimer=hwLdpRemoteKeepaliveTimer, hwLdpRemoteKeepaliveSendTimer=hwLdpRemoteKeepaliveSendTimer, hwMplsVpnFrrLspTrigger=hwMplsVpnFrrLspTrigger, hwLdpGrCapabilityConfig=hwLdpGrCapabilityConfig, hwLdpVpnSplitHorizonAll=hwLdpVpnSplitHorizonAll, hwLdpLongestMatch=hwLdpLongestMatch, hwMplsLdpLspOutIfIndex=hwMplsLdpLspOutIfIndex, hwLdpVpnPeerMd5Type=hwLdpVpnPeerMd5Type, hwMplsLdpSessionDownReason=hwMplsLdpSessionDownReason, hwMplsLdpCompliances=hwMplsLdpCompliances, hwLdpKeepAliveSendTimer=hwLdpKeepAliveSendTimer, hwMplsLdpSessionRole=hwMplsLdpSessionRole, hwLdpVpnGracefulDeleteCapability=hwLdpVpnGracefulDeleteCapability, hwMplsLdpSessionKeepAliveMsgReceived=hwMplsLdpSessionKeepAliveMsgReceived, hwLdpHelloSendTimer=hwLdpHelloSendTimer, hwLdpPeerGroupInBoundIpPrefix=hwLdpPeerGroupInBoundIpPrefix, hwMplsLdpHostIngressLspDown=hwMplsLdpHostIngressLspDown, hwMplsLdpSessionLsrId=hwMplsLdpSessionLsrId, hwMplsLdpSessionPeerLabelResourceStatus=hwMplsLdpSessionPeerLabelResourceStatus, hwMplsLdpConformance=hwMplsLdpConformance, hwLdpPeerRowStatus=hwLdpPeerRowStatus, hwLdpGracefulDeleteCapability=hwLdpGracefulDeleteCapability, hwLdpDeleteGtsmAll=hwLdpDeleteGtsmAll, hwLdpRemoteHelloTimer=hwLdpRemoteHelloTimer, hwLdpRemoteIp=hwLdpRemoteIp, hwMplsLdpNotificationGroup=hwMplsLdpNotificationGroup, hwLdpRemoteIgpSyncTimer=hwLdpRemoteIgpSyncTimer, hwMplsLdpRemoteEntityGroup=hwMplsLdpRemoteEntityGroup, hwLdpVpnRowStatus=hwLdpVpnRowStatus, hwLdpLocalOperationalSessionNumber=hwLdpLocalOperationalSessionNumber, hwLdpRemoteLabelAdvertisementMode=hwLdpRemoteLabelAdvertisementMode, hwLdpGrNeighborLivenessTimer=hwLdpGrNeighborLivenessTimer, hwMplsLdpSessionTcpConnectionState=hwMplsLdpSessionTcpConnectionState, hwLdpPeerOutBoundPolicyBgpIpPrefix=hwLdpPeerOutBoundPolicyBgpIpPrefix, hwLdpVpnLsrId=hwLdpVpnLsrId, hwMplsLdpSessionLocalLabelResourceStatus=hwMplsLdpSessionLocalLabelResourceStatus, hwLdpRemoteEntityEntry=hwLdpRemoteEntityEntry, hwLdpCapabilityConfig=hwLdpCapabilityConfig, hwLdpBackOffTimerMax=hwLdpBackOffTimerMax, hwLdpVpnReset=hwLdpVpnReset, hwLdpPolicyPeerGroupGroup=hwLdpPolicyPeerGroupGroup, hwLdpVpnPeerMd5Password=hwLdpVpnPeerMd5Password, hwLdpInterfaceTable=hwLdpInterfaceTable, hwLdpVpnPeerTable=hwLdpVpnPeerTable, hwLdpPeerOutBoundPolicyFecIpPrefix=hwLdpPeerOutBoundPolicyFecIpPrefix, hwLdpOutBoundPolicyPeerAllRange=hwLdpOutBoundPolicyPeerAllRange, hwMplsLdpLspDownReason=hwMplsLdpLspDownReason, hwMplsLspTrigger=hwMplsLspTrigger, hwLdpPeerInBoundPolicyRange=hwLdpPeerInBoundPolicyRange, hwMplsLdpLspDown=hwMplsLdpLspDown, hwMplsLdpHostIngressLspDownClear=hwMplsLdpHostIngressLspDownClear, hwLdpRemoteEntityTable=hwLdpRemoteEntityTable, hwLdpInterfaceEntry=hwLdpInterfaceEntry, hwLdpRemoteHelloSendTimer=hwLdpRemoteHelloSendTimer, hwLdpInBoundPolicyPeerAllIpPrefix=hwLdpInBoundPolicyPeerAllIpPrefix, hwMplsLdpGroup=hwMplsLdpGroup, hwMplsLdpSessionKeepAliveMsgSent=hwMplsLdpSessionKeepAliveMsgSent, hwLdpRemoteRowStatus=hwLdpRemoteRowStatus, hwLdpPeerReset=hwLdpPeerReset, hwMplsLdpSessionDown=hwMplsLdpSessionDown, hwMplsLdpSessionPeerId=hwMplsLdpSessionPeerId, hwLdpVpnEntry=hwLdpVpnEntry, hwMplsLdpSessionKeepAliveTimer=hwMplsLdpSessionKeepAliveTimer)
