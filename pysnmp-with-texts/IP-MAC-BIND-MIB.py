#
# PySNMP MIB module IP-MAC-BIND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IP-MAC-BIND-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, IpAddress, iso, Counter32, NotificationType, TimeTicks, ObjectIdentity, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "IpAddress", "iso", "Counter32", "NotificationType", "TimeTicks", "ObjectIdentity", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "MibIdentifier")
MacAddress, DateAndTime, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DateAndTime", "RowStatus", "DisplayString", "TextualConvention")
class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

swIpMacBindMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 23))
if mibBuilder.loadTexts: swIpMacBindMIB.setLastUpdated('1004260000Z')
if mibBuilder.loadTexts: swIpMacBindMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swIpMacBindMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swIpMacBindMIB.setDescription('The structure of IP-MAC binding management for the proprietary enterprise.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swIpMacBindingCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 23, 1))
swIpMacBindingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 23, 2))
swIpMacBindingPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 23, 3))
swIpMacBindingMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 23, 4))
swIpMacBindingNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 23, 5))
swIpMacBindingTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingTrapLogState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingTrapLogState.setDescription('When enabled (2), whenever there is a new MAC that violates the pre-defined IP MAC Binding configuration, a trap will be sent out and the relevant information will be logged into the system.')
swIpMacBindingACLMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingACLMode.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingACLMode.setDescription('When enabled (2), the IP-MAC Binding function will use the ACL mode. Note: Supported in IP-MAC binding v3.3 only.')
swIpMacBindingRecoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingRecoveryInterval.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingRecoveryInterval.setDescription("Specifies the seconds in which the switch will delete the blocked ARL (Address Resolution Logic) entry in order to relearn the entry. This is a mechanism by which the switch can recover an ARL entry from the blocked state to the normal state. A value of '0' means an infinite state. Note: This object is specific to models that are unable to recover a blocked MAC address without removing the blocked ARL entry and relearning the entry. ")
swIpMacBindingDHCPSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopState.setDescription('When the dhcp_snoop function is enabled, all address_binding disabled ports will act as DHCP server ports (the switch will learn IP addresses through DHCP server ports (by DHCP OFFER and DHCP ACK packets)). The auto-learned IP-MAC binding entry will be mapped to a specific source port based on the MAC address learning function. This entry will be created as an ACL-mode binding entry for this specific port. Each entry is associated with a lease time. When the lease time expires, the expired entry will be removed from this port. The automatically learned binding entry can be moved from one port to another port if the DHCP snooping function has learned that the MAC address has moved to a different port. Consider a case where DHCP snooping learns a binding entry, and the same IP-MAC binding entry has been statically configured. Suppose that the learned information is consistent with the statically configured entry, then the automatically learned entry will not be created. Supposing that the entry has been statically configured in ARP mode, since the automatically learned entry will be created in ACL mode, the entry will become an ACL mode entry. Supposing that the entry is statically configured on one port and the entry is automatically learned on another port, then both entries will exist. When the dhcp_snoop function is disabled, all of the automatically learned binding entries will be removed. ')
swIpMacBindingDHCPSnoopEntryClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopEntryClearAllState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopEntryClearAllState.setDescription('Used to clear all the entries created by DHCP packets.')
swIpMacBindingARPInspectionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingARPInspectionState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingARPInspectionState.setDescription('Used to set the ARP inspection state.')
swIpMacBindingIPv6DHCPSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopState.setDescription('This object indicates the global state of IPv6 DHCP snooping.')
swIpMacBindingNDSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingNDSnoopState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopState.setDescription('This object indicates the global state of ND snooping.')
swIpMacBindingIPv6DHCPSnoopEntryClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopEntryClearAllState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopEntryClearAllState.setDescription('Used to clear all the entries learned by IPv6 DHCP snooping.')
swIpMacBindingNDSnoopEntryClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingNDSnoopEntryClearAllState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopEntryClearAllState.setDescription('Used to clear all the entries learned by ND snooping.')
swIpMacBindingAllPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enable-strict", 2), ("disable", 3), ("enable-loose", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingAllPortState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingAllPortState.setDescription('This object enables/disables IP-MAC binding on all the system ports. This action is only applicable when users have write privileges, and can only be viewed when users have read privileges. Note: enable-strict (2): This means strict mode (SW learning). In this mode all packets will be sent to the CPU. The user can choose if the port will check the ARP packets and IP packets of the IP-MAC-PORT Binding entries. If the MAC address can be found or not found by the entry, the MAC address will be set as a dynamic learned or blocked entry, respectively. Other packets will be sent to the CPU and dropped. enable-loose (4) : This means loose mode (HW learning): Only ARP packets and IP broadcast packets will be sent to the CPU. If the user chooses , the port will directly learn MAC addresses on non-ARP and non-IP broadcast packets, so these packets will be bypassed. However, if the switch receives ARP or IP broadcast packets and cannot bypass the IP MAC Binding checks, the switch will set this MAC address as blocked and all packets from this MAC address will be dropped. ')
swIpMacBindingPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2), )
if mibBuilder.loadTexts: swIpMacBindingPortTable.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortTable.setDescription('The table specifies the IP-MAC binding function of a specified port.')
swIpMacBindingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1), ).setIndexNames((0, "IP-MAC-BIND-MIB", "swIpMacBindingPortIndex"))
if mibBuilder.loadTexts: swIpMacBindingPortEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortEntry.setDescription('A list containing information about the IP-MAC binding function of a port.')
swIpMacBindingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingPortIndex.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortIndex.setDescription("This object indicates the module's port number. (1..Max port number in the module).")
swIpMacBindingPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enable-strict", 2), ("disable", 3), ("enable-loose", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortState.setDescription('This object enables (strict or loose mode)/disables IP-MAC binding on the specified port. Note: enable-strict (2): This means strict mode (SW learning). All packets are sent to the CPU. If the user chooses this option, the port will check ARP packets and IP packets by the IP-MAC-PORT Binding entries. If the MAC address can or cannot be found by the entry, the MAC will be set as a dynamic learned or blocked entry, respectively. Other packets will be sent to the CPU and dropped. enable-loose (4) : This means loose mode (HW learning): Only ARP packets and IP broadcast packets will be sent to the CPU. If the user chooses, the port will learn MAC addresses on non-ARP and non-IP broadcast packets directly, so these packets will be bypassed. However, if the switch receives ARP or IP broadcast packets and cannot bypass the IP MAC Binding checks, the switch will set this MAC address as blocked and all packets from this MAC address will be dropped. ')
swIpMacBindingPortZeroIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortZeroIPState.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortZeroIPState.setDescription('Specifies whether to allow ARP packets with the SIP address 0.0.0.0, regardless of whether the IP address 0.0.0.0 is set in the binding list or not. When set to enable, the ARP packets with the SIP address 0.0.0.0 will be allowed. When set to disable, ARP packets with the SIP address 0.0.0.0 will be dropped. Note: This option does not affect the IP-MAC-Port binding ACL Mode. ')
swIpMacBindingPortForwardDhcpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortForwardDhcpPkt.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortForwardDhcpPkt.setDescription('This object can be set to forward DHCP packets or not forward DHCP packets on the specified port.')
swIpMacBindingPortDHCPSnoopMaxEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortDHCPSnoopMaxEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortDHCPSnoopMaxEntry.setDescription('This object indicates the max entry created by DHCP packets on the specified port. Note: The max entry range is (0..N), the N value indicates the maximum number, which is determined by the project itself. When 0 is set on the specified port, there is no limit on the maximum number of entries that can be created by DHCP packets . ')
swIpMacBindingPortDHCPSnoopEntryClearAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortDHCPSnoopEntryClearAction.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortDHCPSnoopEntryClearAction.setDescription('When set to start (2), the address binding entries learned for the specified ports will be cleared. When get, it always returns other (1). ')
swIpMacBindingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("arp", 1), ("acl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortMode.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortMode.setDescription('The mode of this entry. arp: This entry is specified as an ARP mode entry, and this entry will not be added as an access entry. If this object is not specified, the mode defaults to ARP mode. If the system is in ARP mode, the ARP mode entries and ACL mode entries will be effective. If the system is in ACL mode, only the ACL mode entries will be active. acl: This entry is specified as an ACL mode entry. If the user enables the ACL mode, this entry will be added as an access entry.')
swIpMacBindingPortStopLearningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortStopLearningThreshold.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortStopLearningThreshold.setDescription('This object indicates the threshold to stop learning new MAC addresses on the specified port. When the number of blocked entries exceeds the threshold, the port will stop learning new addresses. The packet with new addresses will be dropped. Note: When 0 is set on the specified port, it means no limit.')
swIpMacBindingPortRecoverLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortRecoverLearning.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortRecoverLearning.setDescription('When set to start (2), it will change from the stop_learning state to the normal state on the specified port. When get, it always returns other (1).')
swIpMacBindingPortLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingPortLearningStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortLearningStatus.setDescription('This object indicates the learning status of a port. When the status is stop (2), the port will stop learning new addresses and the packets with new addresses will be dropped.')
swIpMacBindingPortIPv6State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortIPv6State.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortIPv6State.setDescription('This object enables/disables IPv6 IP-MAC binding on the specified port.')
swIpMacBindingPortIPv6DHCPSnoopMaxEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortIPv6DHCPSnoopMaxEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortIPv6DHCPSnoopMaxEntry.setDescription('This object indicates the maximum number of entries that can be learned by IPv6 DHCP snooping on the specified port. Note: The maximum entry range is (0..N), the N value indicates the maximum number, which is determined by the project itself. When 0 is set on the specified port, there is no limit on the number of maximum entries that can be learned by DHCP snooping. ')
swIpMacBindingPortNDSnoopMaxEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortNDSnoopMaxEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortNDSnoopMaxEntry.setDescription('This object indicates the maximum number of entries that can be learned by ND snooping on the specified port. Note: The maximum entry range is (0..N), the N value indicates the maximum number, which is determined by the project itself. When 0 is set on the specified port, there is no limit on the maximum number of entries that can be learned by ND snooping is no limit. ')
swIpMacBindingPortIPv6DHCPSnoopEntryClearAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortIPv6DHCPSnoopEntryClearAction.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortIPv6DHCPSnoopEntryClearAction.setDescription('When set to start (2), the address binding entries learned by IPv6 DHCP snooping on the specified ports will be cleared. When get, it always returns other (1). ')
swIpMacBindingPortNDSnoopEntryClearAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortNDSnoopEntryClearAction.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortNDSnoopEntryClearAction.setDescription('When set to start (2), the address binding entries learnt by ND snooping on the specified ports will be cleared. When get, it always returns other (1). ')
swIpMacBindingPortARPInspection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("strict", 2), ("loose", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortARPInspection.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortARPInspection.setDescription('This object used to set ARP inspection state on the specified port. When ARP inspection is enabled on the port, the legal ARP packets will be forward, while the illegal packets will be dropped. strict : In this mode, all packets are dropped by default until a legal ARP or broadcast IP packets are detected. loose: In this mode, all packets are forwarded by default until an illegal ARP or broadcast IP packets are detected. ')
swIpMacBindingPortIPInspection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortIPInspection.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortIPInspection.setDescription('This object used to set the IP inspection state on the specified port. When IP inspection is enabled on the port, the legal IP packets will be forwarded, while the illegal IP packets will be dropped.')
swIpMacBindingPortIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("ipv4", 2), ("ipv6", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingPortIPProtocol.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPortIPProtocol.setDescription('This object is used to set which kind of IP packets need to be checked by IP-MAC-PORT binding on the specified port. ipv4: Only IPv4 packets will be checked. ipv6: Only IPv6 packets will be checked. all: Both IPv4 and IPv6 packets will be checked. ')
swIpMacBindingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1), )
if mibBuilder.loadTexts: swIpMacBindingTable.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingTable.setDescription('This table specifies the IP-MAC binding information.')
swIpMacBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1), ).setIndexNames((0, "IP-MAC-BIND-MIB", "swIpMacBindingIpIndex"))
if mibBuilder.loadTexts: swIpMacBindingEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingEntry.setDescription("The IP-MAC binding entry used to add/delete/configure the address pair of the switch's authorized user database.")
swIpMacBindingIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIpIndex.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIpIndex.setDescription('The IP address of the IP-MAC binding entry.')
swIpMacBindingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingMac.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingMac.setDescription('The MAC address of the IP-MAC binding entry.')
swIpMacBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingStatus.setDescription('The status of this entry.')
swIpMacBindingPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingPorts.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingPorts.setDescription('The port members of this entry.')
swIpMacBindingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingAction.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingAction.setDescription('The action of this entry. Note: Supported in IP-MAC binding v3.5 and the earlier versions.')
swIpMacBindingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("arp", 1), ("acl", 2), ("dhcp-snooping", 3), ("static", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingMode.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingMode.setDescription('The mode of this entry. arp: This entry is specified as an ARP mode entry, and this entry will not be added as an access entry. If this object is not specified, the mode defaults to ARP mode. If the system is in ARP mode, the ARP mode entries and ACL mode entries will be effective. If the system is in ACL mode, only the ACL mode entries will be active.(Note: Supported on IP-MAC binding v3.5 and the earlier version.) acl: This entry is specified as an ACL mode entry. If the user enables the ACL mode, this entry will be added as an access entry. (Note: Supported in IP-MAC binding v3.3 only). dhcp-snooping: This mode cannot be configured, and when the dhcp-snooping mode is employed, it means that this entry has been learned by DHCP snooping. static: This entry is manually configured.')
swIpMacBindingAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingAclStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingAclStatus.setDescription('This object indicates the ACL status of this entry.')
swIpMacBindingBlockedTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2), )
if mibBuilder.loadTexts: swIpMacBindingBlockedTable.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedTable.setDescription('This table displays information regarding the blocked MAC addresses.')
swIpMacBindingBlockedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1), ).setIndexNames((0, "IP-MAC-BIND-MIB", "swIpMacBindingBlockedVID"), (0, "IP-MAC-BIND-MIB", "swIpMacBindingBlockedMac"))
if mibBuilder.loadTexts: swIpMacBindingBlockedEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedEntry.setDescription('The entry cannot be created or configured. It can only be deleted.')
swIpMacBindingBlockedVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingBlockedVID.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedVID.setDescription('This object specifies the VLAN ID.')
swIpMacBindingBlockedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingBlockedMac.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedMac.setDescription('The MAC address that was blocked.')
swIpMacBindingBlockedVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingBlockedVlanName.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedVlanName.setDescription('This object specifies the VLAN name.')
swIpMacBindingBlockedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingBlockedPort.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedPort.setDescription('The port that the MAC is associated with.')
swIpMacBindingBlockedType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("blockByAddrBind", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIpMacBindingBlockedType.setStatus('obsolete')
if mibBuilder.loadTexts: swIpMacBindingBlockedType.setDescription("The value is always blockByAddrBind. This entry will be deleted when the value is set to 'delete'.")
swIpMacBindingBlockedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingBlockedTime.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedTime.setDescription('This object specifies the last time that this entry was generated.')
swIpMacBindingBlockedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingBlockedStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingBlockedStatus.setDescription('The status of this entry. Currently only the destroy (6) option can be used to delete this entry.')
swIpMacBindingDHCPSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 3), )
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopTable.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopTable.setDescription('The table specifies information regarding the IP-MAC binding entries that were learned by the DHCP snooping function.')
swIpMacBindingDHCPSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 3, 1), ).setIndexNames((0, "IP-MAC-BIND-MIB", "swIpMacBindingDHCPSnoopIpIndex"))
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopEntry.setDescription('A list containing information about the DHCP snooping learning IP-MAC binding entry.')
swIpMacBindingDHCPSnoopIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopIpIndex.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopIpIndex.setDescription('The IP address of this entry.')
swIpMacBindingDHCPSnoopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopMac.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopMac.setDescription('The MAC address of this entry.')
swIpMacBindingDHCPSnoopLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopLeaseTime.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopLeaseTime.setDescription('Specifies the lease time of this entry. When the lease time expires, this entry will be removed from this port. ')
swIpMacBindingDHCPSnoopPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopPort.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopPort.setDescription('Specifies the port of this entry.')
swIpMacBindingDHCPSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingDHCPSnoopStatus.setDescription('Specifies the status (inactive or active) of this entry.')
swIpMacBindingIPv6Table = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4), )
if mibBuilder.loadTexts: swIpMacBindingIPv6Table.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6Table.setDescription('This table specifies the IPv6 IP-MAC binding information.')
swIpMacBindingIPv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4, 1), ).setIndexNames((0, "IP-MAC-BIND-MIB", "swIpMacBindingIPv6Addr"))
if mibBuilder.loadTexts: swIpMacBindingIPv6Entry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6Entry.setDescription("The IPv6 IP-MAC binding entry is used to add/delete/configure an IPv6 address and MAC address pair in the switch's authorized user database.")
swIpMacBindingIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6Addr.setDescription('The IPv6 address of the IPv6 IP-MAC binding entry.')
swIpMacBindingIPv6MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingIPv6MacAddr.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6MacAddr.setDescription('The MAC address of the IPv6 IP-MAC binding entry.')
swIpMacBindingIPv6Portlist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingIPv6Portlist.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6Portlist.setDescription('The port members of the IPv6 IP-MAC binding entry.')
swIpMacBindingIPv6Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp-snooping", 2), ("nd-snooping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6Mode.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6Mode.setDescription('The mode of the IPv6 IP-MAC binding entry. static(1): When the Static mode is employed, it means this entry is manually configured. dhcp-snooping(2): This mode cannot be configured, and when the dhcp-snooping mode is employed, it means this entry is to be learned by IPv6 DHCP snooping. nd-snooping(3): This mode cannot be configured, and when the nd-snooping mode is employed, it means this entry is to be learned by ND snooping.')
swIpMacBindingIPv6ACLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6ACLStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6ACLStatus.setDescription('The ACL Status of the IPv6 IP-MAC binding entry.')
swIpMacBindingIPv6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swIpMacBindingIPv6RowStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6RowStatus.setDescription('The status of this conceptual row. To create a row in this table, a manager must set this object to createAndGo(4). To delete a row in this table, a manager must set this object to destroy(6).')
swIpMacBindingIPv6DHCPSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 5), )
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopTable.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopTable.setDescription('The table specifies information regarding the IPv6 DHCP snooping function learning IPv6 IP-MAC binding entries.')
swIpMacBindingIPv6DHCPSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 5, 1), ).setIndexNames((0, "IP-MAC-BIND-MIB", "swIpMacBindingIPv6DHCPSnoopAddr"))
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopEntry.setDescription('A list containing information about the IPv6 DHCP snooping learning IPv6 IP-MAC binding entry.')
swIpMacBindingIPv6DHCPSnoopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 5, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopAddr.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopAddr.setDescription('The IPv6 address of this entry.')
swIpMacBindingIPv6DHCPSnoopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopMac.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopMac.setDescription('The MAC address of this entry.')
swIpMacBindingIPv6DHCPSnoopLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopLeaseTime.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopLeaseTime.setDescription('Specifies the lease time of this entry. When the lease time expires, this entry will be removed.')
swIpMacBindingIPv6DHCPSnoopPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopPort.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopPort.setDescription('Specifies the port of this entry.')
swIpMacBindingIPv6DHCPSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6DHCPSnoopStatus.setDescription('Specifies the status (inactive or active) of this entry.')
swIpMacBindingNDSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 6), )
if mibBuilder.loadTexts: swIpMacBindingNDSnoopTable.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopTable.setDescription('The table specifies information regarding the ND snooping function of learning IPv6 IP-MAC binding entries.')
swIpMacBindingNDSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 6, 1), ).setIndexNames((0, "IP-MAC-BIND-MIB", "swIpMacBindingNDSnoopAddr"))
if mibBuilder.loadTexts: swIpMacBindingNDSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopEntry.setDescription('A list of information about the ND snooping learning IPv6 IP-MAC binding entry.')
swIpMacBindingNDSnoopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 6, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingNDSnoopAddr.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopAddr.setDescription('The IPv6 address of this entry.')
swIpMacBindingNDSnoopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingNDSnoopMac.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopMac.setDescription('The MAC address of this entry.')
swIpMacBindingNDSnoopLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingNDSnoopLeaseTime.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopLeaseTime.setDescription('Specifies the lease time of this entry. When the lease time expires, this entry will be removed.')
swIpMacBindingNDSnoopPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingNDSnoopPort.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopPort.setDescription('Specifies the port of this entry.')
swIpMacBindingNDSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 23, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIpMacBindingNDSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingNDSnoopStatus.setDescription('Specifies the status (inactive or active) of this entry.')
swIpMacBindingNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 0))
swIpMacBindingViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 0, 1)).setObjects(("IP-MAC-BIND-MIB", "swIpMacBindingPortIndex"), ("IP-MAC-BIND-MIB", "swIpMacBindingViolationIP"), ("IP-MAC-BIND-MIB", "swIpMacBindingViolationMac"))
if mibBuilder.loadTexts: swIpMacBindingViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingViolationTrap.setDescription("When the IP-MAC Binding trap is enabled, if there's a new MAC that violates the pre-defined port security configuration, a trap will be sent out.")
swIpMacBindingStopLearningTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 0, 2)).setObjects(("IP-MAC-BIND-MIB", "swIpMacBindingPortIndex"))
if mibBuilder.loadTexts: swIpMacBindingStopLearningTrap.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingStopLearningTrap.setDescription('When the IP-MAC Binding trap is enabled, if the specific port changes from a normal state to a stop_learning state, a trap will be sent out.')
swIpMacBindingRecoverLearningTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 0, 3)).setObjects(("IP-MAC-BIND-MIB", "swIpMacBindingPortIndex"))
if mibBuilder.loadTexts: swIpMacBindingRecoverLearningTrap.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingRecoverLearningTrap.setDescription('When the IP-MAC Binding trap is enabled, if the specific port changes from a stop_learning state to a normal state, a trap will be sent out.')
swIpMacBindingIPv6ViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 0, 4)).setObjects(("IP-MAC-BIND-MIB", "swIpMacBindingPortIndex"), ("IP-MAC-BIND-MIB", "swIpMacBindingViolationIPv6Addr"), ("IP-MAC-BIND-MIB", "swIpMacBindingViolationMac"))
if mibBuilder.loadTexts: swIpMacBindingIPv6ViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingIPv6ViolationTrap.setDescription("When the IP-MAC Binding trap is enabled, if there's a new MAC that violates the pre-defined IPv6 IP-MAC Binding configuration, a trap will be sent out.")
swIpMacBindingNotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 2))
swIpMacBindingViolationIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIpMacBindingViolationIP.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingViolationIP.setDescription('This object indicates the IP address that violates the IP-MAC Binding configuration.')
swIpMacBindingViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 2, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIpMacBindingViolationMac.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingViolationMac.setDescription('This object indicates the MAC address that violates the IP-MAC Binding configuration.')
swIpMacBindingViolationIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 23, 5, 2, 3), Ipv6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIpMacBindingViolationIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: swIpMacBindingViolationIPv6Addr.setDescription('This object indicates the IPv6 address that violates the IPv6 IP-MAC Binding entry.')
mibBuilder.exportSymbols("IP-MAC-BIND-MIB", swIpMacBindingIPv6Table=swIpMacBindingIPv6Table, swIpMacBindingARPInspectionState=swIpMacBindingARPInspectionState, swIpMacBindingNDSnoopEntryClearAllState=swIpMacBindingNDSnoopEntryClearAllState, PortList=PortList, swIpMacBindingBlockedType=swIpMacBindingBlockedType, swIpMacBindingTrapLogState=swIpMacBindingTrapLogState, swIpMacBindingNDSnoopStatus=swIpMacBindingNDSnoopStatus, swIpMacBindingIPv6ViolationTrap=swIpMacBindingIPv6ViolationTrap, swIpMacBindingPortIPv6DHCPSnoopEntryClearAction=swIpMacBindingPortIPv6DHCPSnoopEntryClearAction, swIpMacBindingNotify=swIpMacBindingNotify, swIpMacBindingBlockedPort=swIpMacBindingBlockedPort, swIpMacBindingAllPortState=swIpMacBindingAllPortState, swIpMacBindingPortARPInspection=swIpMacBindingPortARPInspection, swIpMacBindingIPv6DHCPSnoopMac=swIpMacBindingIPv6DHCPSnoopMac, swIpMacBindingPortMgmt=swIpMacBindingPortMgmt, swIpMacBindingDHCPSnoopTable=swIpMacBindingDHCPSnoopTable, swIpMacBindingIPv6Mode=swIpMacBindingIPv6Mode, swIpMacBindingDHCPSnoopIpIndex=swIpMacBindingDHCPSnoopIpIndex, swIpMacBindingPortNDSnoopMaxEntry=swIpMacBindingPortNDSnoopMaxEntry, PYSNMP_MODULE_ID=swIpMacBindMIB, swIpMacBindingPortIPv6DHCPSnoopMaxEntry=swIpMacBindingPortIPv6DHCPSnoopMaxEntry, swIpMacBindingPortStopLearningThreshold=swIpMacBindingPortStopLearningThreshold, swIpMacBindingPortState=swIpMacBindingPortState, swIpMacBindingIPv6Addr=swIpMacBindingIPv6Addr, swIpMacBindingPortIndex=swIpMacBindingPortIndex, swIpMacBindingInfo=swIpMacBindingInfo, swIpMacBindingPortLearningStatus=swIpMacBindingPortLearningStatus, swIpMacBindingPortTable=swIpMacBindingPortTable, swIpMacBindingIPv6RowStatus=swIpMacBindingIPv6RowStatus, swIpMacBindingNDSnoopMac=swIpMacBindingNDSnoopMac, swIpMacBindingPortNDSnoopEntryClearAction=swIpMacBindingPortNDSnoopEntryClearAction, swIpMacBindingAclStatus=swIpMacBindingAclStatus, swIpMacBindingIPv6MacAddr=swIpMacBindingIPv6MacAddr, swIpMacBindingPortIPProtocol=swIpMacBindingPortIPProtocol, swIpMacBindingIPv6DHCPSnoopEntryClearAllState=swIpMacBindingIPv6DHCPSnoopEntryClearAllState, swIpMacBindingStopLearningTrap=swIpMacBindingStopLearningTrap, swIpMacBindingIPv6Entry=swIpMacBindingIPv6Entry, swIpMacBindingACLMode=swIpMacBindingACLMode, swIpMacBindingCtrl=swIpMacBindingCtrl, swIpMacBindingBlockedTime=swIpMacBindingBlockedTime, swIpMacBindingNDSnoopEntry=swIpMacBindingNDSnoopEntry, swIpMacBindingIPv6DHCPSnoopStatus=swIpMacBindingIPv6DHCPSnoopStatus, swIpMacBindingEntry=swIpMacBindingEntry, swIpMacBindingBlockedTable=swIpMacBindingBlockedTable, swIpMacBindingPortEntry=swIpMacBindingPortEntry, swIpMacBindingDHCPSnoopStatus=swIpMacBindingDHCPSnoopStatus, swIpMacBindingTable=swIpMacBindingTable, swIpMacBindingPortRecoverLearning=swIpMacBindingPortRecoverLearning, swIpMacBindingViolationIP=swIpMacBindingViolationIP, swIpMacBindingDHCPSnoopState=swIpMacBindingDHCPSnoopState, swIpMacBindingIPv6DHCPSnoopLeaseTime=swIpMacBindingIPv6DHCPSnoopLeaseTime, swIpMacBindingViolationTrap=swIpMacBindingViolationTrap, swIpMacBindingIPv6DHCPSnoopAddr=swIpMacBindingIPv6DHCPSnoopAddr, swIpMacBindingBlockedEntry=swIpMacBindingBlockedEntry, swIpMacBindingIPv6DHCPSnoopEntry=swIpMacBindingIPv6DHCPSnoopEntry, swIpMacBindingNotifyPrefix=swIpMacBindingNotifyPrefix, swIpMacBindingIPv6ACLStatus=swIpMacBindingIPv6ACLStatus, swIpMacBindingPortDHCPSnoopMaxEntry=swIpMacBindingPortDHCPSnoopMaxEntry, swIpMacBindingDHCPSnoopPort=swIpMacBindingDHCPSnoopPort, swIpMacBindingMode=swIpMacBindingMode, swIpMacBindingBlockedStatus=swIpMacBindingBlockedStatus, swIpMacBindingPortZeroIPState=swIpMacBindingPortZeroIPState, swIpMacBindingDHCPSnoopEntryClearAllState=swIpMacBindingDHCPSnoopEntryClearAllState, swIpMacBindingPortIPv6State=swIpMacBindingPortIPv6State, swIpMacBindingAction=swIpMacBindingAction, swIpMacBindingBlockedMac=swIpMacBindingBlockedMac, swIpMacBindingRecoverLearningTrap=swIpMacBindingRecoverLearningTrap, swIpMacBindingBlockedVlanName=swIpMacBindingBlockedVlanName, swIpMacBindingStatus=swIpMacBindingStatus, swIpMacBindingBlockedVID=swIpMacBindingBlockedVID, swIpMacBindingDHCPSnoopLeaseTime=swIpMacBindingDHCPSnoopLeaseTime, swIpMacBindMIB=swIpMacBindMIB, swIpMacBindingRecoveryInterval=swIpMacBindingRecoveryInterval, swIpMacBindingNDSnoopTable=swIpMacBindingNDSnoopTable, swIpMacBindingDHCPSnoopEntry=swIpMacBindingDHCPSnoopEntry, swIpMacBindingPortDHCPSnoopEntryClearAction=swIpMacBindingPortDHCPSnoopEntryClearAction, swIpMacBindingMgmt=swIpMacBindingMgmt, swIpMacBindingNDSnoopState=swIpMacBindingNDSnoopState, swIpMacBindingDHCPSnoopMac=swIpMacBindingDHCPSnoopMac, swIpMacBindingIPv6DHCPSnoopPort=swIpMacBindingIPv6DHCPSnoopPort, swIpMacBindingMac=swIpMacBindingMac, VlanId=VlanId, swIpMacBindingIPv6DHCPSnoopTable=swIpMacBindingIPv6DHCPSnoopTable, swIpMacBindingPortMode=swIpMacBindingPortMode, swIpMacBindingViolationIPv6Addr=swIpMacBindingViolationIPv6Addr, swIpMacBindingIPv6Portlist=swIpMacBindingIPv6Portlist, swIpMacBindingNotificationBidings=swIpMacBindingNotificationBidings, swIpMacBindingViolationMac=swIpMacBindingViolationMac, swIpMacBindingNDSnoopLeaseTime=swIpMacBindingNDSnoopLeaseTime, swIpMacBindingIPv6DHCPSnoopState=swIpMacBindingIPv6DHCPSnoopState, swIpMacBindingPortIPInspection=swIpMacBindingPortIPInspection, swIpMacBindingPortForwardDhcpPkt=swIpMacBindingPortForwardDhcpPkt, swIpMacBindingIpIndex=swIpMacBindingIpIndex, swIpMacBindingPorts=swIpMacBindingPorts, swIpMacBindingNDSnoopPort=swIpMacBindingNDSnoopPort, swIpMacBindingNDSnoopAddr=swIpMacBindingNDSnoopAddr)
