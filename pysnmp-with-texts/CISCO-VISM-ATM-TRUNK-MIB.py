#
# PySNMP MIB module CISCO-VISM-ATM-TRUNK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-ATM-TRUNK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
voice, vismChanGrp = mibBuilder.importSymbols("BASIS-MIB", "voice", "vismChanGrp")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, MibIdentifier, TimeTicks, Unsigned32, ObjectIdentity, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, IpAddress, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibIdentifier", "TimeTicks", "Unsigned32", "ObjectIdentity", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "IpAddress", "Gauge32", "Bits")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoVismAtmTrunkMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 87))
ciscoVismAtmTrunkMIB.setRevisions(('2004-04-14 00:00', '2004-02-05 00:00', '2003-12-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVismAtmTrunkMIB.setRevisionsDescriptions(('Added - bearerPeakXmtCellRate - bearerCurrentXmtCellRate - bearerPeakRcvCellRate - bearerCurrentRcvCellRate - bearerCurrentExtAISRcvCnts - bearerCurrentExtRAIRcvCnts - bearerCurrentConnAISCnts - bearerCurrentConnRDICnts - bearerCurrentExtAISXmtCnts - bearerCurrentExtRAIXmtCnts Statistics for bearer cell rates and alarm counts. ', 'Added - vismAal2CidAdminState ', 'Initial version of the MIB. The content of this MIB was originally available in SMIv1 version. The MIB has been converted to SMIv2 version and descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoVismAtmTrunkMIB.setLastUpdated('200404140000Z')
if mibBuilder.loadTexts: ciscoVismAtmTrunkMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVismAtmTrunkMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoVismAtmTrunkMIB.setDescription('The MIB module contain the Bearer and CID (Channel Identifier) connection information.')
bearerConnGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9))
vismAal2CidGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4))
bearerConnTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1), )
if mibBuilder.loadTexts: bearerConnTable.setStatus('current')
if mibBuilder.loadTexts: bearerConnTable.setDescription('This table describes the statistical information available on a per-bearer connection basis. These values are applicable equally to an endpoint. ')
bearerConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1), ).setIndexNames((0, "CISCO-VISM-ATM-TRUNK-MIB", "bearerEndptNum"))
if mibBuilder.loadTexts: bearerConnEntry.setStatus('current')
if mibBuilder.loadTexts: bearerConnEntry.setDescription(' Each entry in this table corresponds to a bearer connection, that was setup by binding an endpoint with a VC(Virtual channel)/CID pair, either through CLI or SNMP. The statistical counters in this table are generic voice quality parameters that are equally applicable in all types of Voice Over Packet adapations (VoIP, VoAAL1 and VoAAL2). However, they are maintained only in the PVC(Permanent virtual circuit) trunking model because, these counters get reset in the switching model on a per call basis. The entries in this table are implicitly created/deleted at the time of creation/deletion of entries in the vismAal2CidCnfTable. ')
bearerEndptNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerEndptNum.setStatus('current')
if mibBuilder.loadTexts: bearerEndptNum.setDescription('This attribute defines the index for the Bearer Connection Table. This refers to the same value as the index to the mgEndpointTable ie. mgEndpointNumber. This is define in CISCO-WAN-MG-MIB MIB. ')
bearerCid = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCid.setStatus('current')
if mibBuilder.loadTexts: bearerCid.setDescription('This attribute defines the CID associated with this bearer connection. This refers to the same value as vismAal2CidNum in the vismAal2CidCnfTable. ')
bearerLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerLcn.setStatus('current')
if mibBuilder.loadTexts: bearerLcn.setDescription('This attribute defines the PVC or LCN(Logical Channel Number) number to which this bearer connection is associated with. This refers to the same value as in vismCnfChanNum in vismChanCnfGrp table. This is define in CISCO-VISM-CONN-MIB MIB. ')
bearerSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerSentPkts.setStatus('current')
if mibBuilder.loadTexts: bearerSentPkts.setDescription('This attribute defines the count of packets sent towards the network since this connection setup. ')
bearerRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: bearerRcvdPkts.setDescription('This attribute defines the count of packets received from the network since this connection setup. ')
bearerSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerSentOctets.setStatus('current')
if mibBuilder.loadTexts: bearerSentOctets.setDescription('This attribute defines the count of bytes sent towards the network since this connection setup. ')
bearerRcvdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerRcvdOctets.setStatus('current')
if mibBuilder.loadTexts: bearerRcvdOctets.setDescription('This attribute defines the count of bytes received from the network since this connection setup. ')
bearerLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerLostPkts.setStatus('current')
if mibBuilder.loadTexts: bearerLostPkts.setDescription('This attribute defines the count of packets lost in the egress direction (from the network). This is a computed number based on the expected number of packets and the actual number of packets arrived from the network. ')
bearerJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 9), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerJitter.setStatus('current')
if mibBuilder.loadTexts: bearerJitter.setDescription('This attribute defines the jitter (a.k.a interarrival jitter) This value is determined by the DSP(Digital Signal Processing) and obtained by the HOST processor upon querying the DSP on a periodic basis. ')
bearerLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 10), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerLatency.setStatus('current')
if mibBuilder.loadTexts: bearerLatency.setDescription('This attribute defines the latency (a.k.a end-to-end average transmission delay for a voice packet). ')
bearerAal2ExtAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ExtAISCnts.setReference('ITU-T Rec. M.20 sec. 5.4.2 a')
if mibBuilder.loadTexts: bearerAal2ExtAISCnts.setStatus('current')
if mibBuilder.loadTexts: bearerAal2ExtAISCnts.setDescription(" This object contains the number of external AIS (Alarm Indication Signal) AAL2 Type3 packets received. External AIS - is associated with a maintenance alarm detected on a defective maintenance span, that is transmitted in the direction of the defect as a substitute for normal signal. The purpose is to show the downstream entities that a defect has been identified and to prevent other maintenance alrams consequent to this first defect. External AIS bit stream is represented by an all 1's signal. ")
bearerAal2ExtRAICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ExtRAICnts.setReference('ITU-T Rec. G.704 section 2.1.3.1.3')
if mibBuilder.loadTexts: bearerAal2ExtRAICnts.setStatus('current')
if mibBuilder.loadTexts: bearerAal2ExtRAICnts.setDescription('This object contains the number of external RAI (Remote Alarm Indication) AAL2 Type3 packets received. External RAI - is a signal that is transmitted upstream from an entity that has detected defects persisting long enough to constitute a received signal failure. Its purpose is to report in the backward direction that there is an interruption of service in the forward direction. ')
bearerAal2ConnAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ConnAISCnts.setReference('ITU-T Rec. I.610 sec 6.2.2.1.1.1')
if mibBuilder.loadTexts: bearerAal2ConnAISCnts.setStatus('current')
if mibBuilder.loadTexts: bearerAal2ConnAISCnts.setDescription('This object contains the number of external Conn AIS AAL2 Type2 packets received. External Conn AIS - is transmitted in the downstream direction from the AAL Type 2 connecting point that first detects a defect affecting the AAL Type 2 connection; this includes defects indicated by lower layers. ')
bearerAal2ConnRDICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerAal2ConnRDICnts.setStatus('current')
if mibBuilder.loadTexts: bearerAal2ConnRDICnts.setDescription(' This object contains the number of external Conn RDI(Remote Defect Indication) AAL2 Type2 packets received. External Conn RDI - is a signal transmitted upstream by an AAL Type 2 endpoint that is in an alarm state as the result of having received an AAL Type2 connection AIS or having detected a defect that affects the AAL Type2 connection. ')
bearerCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bearerCntClrButton.setStatus('current')
if mibBuilder.loadTexts: bearerCntClrButton.setDescription(' This object is used to clear bearerSentPkts, bearerRcvdPkts, bearerSentOctets, and bearerRcvdOctets. ')
bearerPeakXmtCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerPeakXmtCellRate.setStatus('current')
if mibBuilder.loadTexts: bearerPeakXmtCellRate.setDescription('Peak transmit ATM cell rate is the ATM cells required to transmit peak AAL2 packets on a CID per second since midnight as per system time; the peak cell rate gets cleared every 24 hours at midnight as per system time. ')
bearerCurrentXmtCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentXmtCellRate.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentXmtCellRate.setDescription('Current transmit ATM cell rate is the ATM cells required to transmit current AAL2 packets on a CID per second. ')
bearerPeakRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerPeakRcvCellRate.setStatus('current')
if mibBuilder.loadTexts: bearerPeakRcvCellRate.setDescription('Peak receive ATM cell rate is the ATM cells required to receive peak AAL2 packets on a CID per second since midnight as per system time; the peak cell rate gets cleared every 24 hours at midnight as per system time. ')
bearerCurrentRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('cells-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentRcvCellRate.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentRcvCellRate.setDescription('Current receive ATM cell rate is the ATM cells required to receive current AAL2 packets on a CID per second. ')
bearerCurrentExtAISRcvCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentExtAISRcvCnts.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentExtAISRcvCnts.setDescription('This object contains the count of external AIS AAL2 (Type 2) received on this bearerEndptNum since its creation. ')
bearerCurrentExtRAIRcvCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentExtRAIRcvCnts.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentExtRAIRcvCnts.setDescription('This object contains the number of external RAI AAL2 (Type 2) received in this bearerEndptNum since its creation. ')
bearerCurrentConnAISCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentConnAISCnts.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentConnAISCnts.setDescription('This object contains count of external Connection AIS AAL2 (Type 2) received in this bearerEndptNum since its creation. ')
bearerCurrentConnRDICnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentConnRDICnts.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentConnRDICnts.setDescription('This object contains the count of external Connection RDI (Remote Defect Indication) AAL2 (Type 2) received in this bearerEndptNum since its creation. ')
bearerCurrentExtAISXmtCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentExtAISXmtCnts.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentExtAISXmtCnts.setDescription('This object contains the count of external AIS AAL2 (Type 2) transmitted in this bearerEndptNum since its creation. ')
bearerCurrentExtRAIXmtCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bearerCurrentExtRAIXmtCnts.setStatus('current')
if mibBuilder.loadTexts: bearerCurrentExtRAIXmtCnts.setDescription('This object contains the count of external RAI AAL2 (Type 2) transmitted in this bearerEndptNum since its creation. ')
vismAal2CidCnfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1), )
if mibBuilder.loadTexts: vismAal2CidCnfTable.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidCnfTable.setDescription('This table is defined to establish the binding between an endpoint and a PVC/CID pair in the case of AAL2 adaptation. This table is created and used in trunking mode VISM application only. The maximum number of CIDs that can be configured depends on the current codec template being used as represented by vismAppliedTemplate object. The signaling type of the line has to be configured before adding any CID on that line. ')
vismAal2CidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1), ).setIndexNames((0, "CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidLcn"), (0, "CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidNum"))
if mibBuilder.loadTexts: vismAal2CidEntry.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidEntry.setDescription('Identifies an entry for vismAal2CidCnfTable. ')
vismAal2CidNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidNum.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidNum.setDescription('This attribute defines part of the index for this table. vismAal2CidNum is the CID of a voice channel. CID has to be the same at both endpoints for a connection. CID is unique only within the context of a Virtual Circuit (PVC or SVC). ')
vismAal2CidLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidLcn.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidLcn.setDescription('This attribute defines part of the index for the vismAal2CidCnfTable. Since CID is unique to a PVC, a combination of LCN and CID uniquely identifies a voice connection. This field refers to vismCnfChanNum defined in vismChanCnfGrp of CISCO-VISM-CONN-MIB MIB. ')
vismAal2EndptNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2EndptNum.setStatus('current')
if mibBuilder.loadTexts: vismAal2EndptNum.setDescription('This attribute defines the endpoint number to which this CID is associated. It is the same as mgEndpointNumber defined in mgEndpointTable of CISCO-WAN-MG-MIB MIB. ')
vismAal2CidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidRowStatus.setDescription("This variable allows to add or delete a CID. A CID can only be added or deleted. Once added, modifying an entry is not allowed. 'createAndGo': Use this to add an entry in this table. 'active': This values is returned, once the row is created. 'destroy': Use this to delete an entry from this table. ")
vismAal2CidType3Redundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidType3Redundancy.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidType3Redundancy.setDescription("This attribute defines whether the triple redundancy is supported for type 3 packets in AAL2 for this channel. When Triple redundancy is enabled for a channel, the Type 3 packets (CAS bits, dialled digits and user state control packets) are transmitted in triplicates with an interval defined as per the standards I.366.2. For channels which are quite reliable, triple redundancy can be disabled in order to save the bandwidth and the processing overheads. The default value of this object is 'true(1)' if either vismAal2CidCasTransport or vismAal2CidDtmfTransport is 'true(1)', otherwise the default value is 'false(2)'. ")
vismAal2CidVad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidVad.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidVad.setDescription("This attribute defines whether the VAD (Voice Activity Detection) has to be applied on this channel, upon detection of silence. For algorithms that do not have VAD standards, Cisco-proprietary VAD can be applied and the generic SID(Silence Information Descriptor) packet as specified in I.366.2 standards can be sent to the other end. When the codec specify in vismAal2CidCodecType is 'clearChannel' VAD has to be off. ")
vismAal2CidProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("itu", 1), ("atm", 2), ("custom", 3), ("none", 4))).clone('custom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidProfileType.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidProfileType.setDescription("This attribute defines the profile type. The profile type defines which group of the profile tables the profile number should correspond to. There are three possible groups: 'itu' - corresponding to the tables in ITU format in the profile is being used. 'atm' - This is not supported 'custom' - VISM specific custom profiles. ")
vismAal2CidProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidProfileNum.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidProfileNum.setDescription('This attribute defines the profile number. A profile is a set of entries, where each entry specifies an encoding format with a UUI(User-to-User Indication) range and length. This set defines a mapping that informs the receiver of a Type 1 packet how to interpret the packet contents, i.e. which encoding format in the profile is being used. ')
vismAal2CidCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g726r32000", 3), ("g729a", 4), ("g729ab", 5), ("clearChannel", 6), ("g726r16000", 7), ("g726r24000", 8), ("g726r40000", 9), ("g723h", 11), ("g723ah", 12), ("g723l", 13), ("g723al", 14), ("lossless", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidCodecType.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidCodecType.setDescription("This attribute defines the codec Type used for the connection. 'g711u' represents PCMU with 64 kbps. 'g711a' represents PCMA with 64 kbps. 'g726r32000' represents G.726 at rate 32 kbps 'g726r16000' represents G.726 at rate 16 kbps 'g726r24000' represents G.726 at rate 24 kbps 'g726r40000' represents G.726 at rate 40 kbps 'g729a' represents G.729 Annex A algorithm. 'g729ab' represents G.729 Annex A and Annex B algorithm. 'clearChannel' represents CCD with 64 kbps. 'g723h' represents G.723.1-H at rate 6.3kbps. 'g723ah' represents G.723.1-H at rate 6.3kbps with Silence Supression ON. 'g723l' represents G.723.1-L at rate 5.3kbps. 'g723al' represents G.723.1-L at rate 5.3kbps with Silence Supression ON. 'lossless' represents Lossless Note : 1. When codec type is 'clearChannel', vismAal2CidProfileType and vismAal2CidProfileNum are not applicable and will be ignored. 2. Value 10 is RESERVED. ")
vismAal2CidDtmfTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidDtmfTransport.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidDtmfTransport.setDescription('This attribute defines whether the DTMF (Dual Tone Multi Frequency) digits need to be transported to the other end-point. ')
vismAal2CidCasTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidCasTransport.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidCasTransport.setDescription("This attribute defines whether the CAS(Channel Associated Signaling) bits need to be transported to the other endpoint. In the case of switching application, the CAS bits are backhauled to the call agent through xGCP(Gateway Control Protocol)-CAS protocol. Note that if the line signaling type is CAS the default value is 'true(1)', else the default value is 'false(2)'. ")
vismAal2CidEcanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidEcanEnable.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidEcanEnable.setDescription("This attribute defines whether Echo Cancellation has to be enabled on this connection. If it is set to 'true(1)', echo cancellation is enabled. If it is set to 'false(2)', echo cancellation is disabled. ")
vismAal2InitVadTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2InitVadTimer.setStatus('current')
if mibBuilder.loadTexts: vismAal2InitVadTimer.setDescription('This attribute defines the hangover time for VAD. Once the voice inactivity is detected, the gateway will wait for this duration before activating silence suppression. ')
vismAal2CnfPktPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 20, 30, 40))).clone(namedValues=NamedValues(("five", 5), ("ten", 10), ("twenty", 20), ("thirty", 30), ("fourty", 40))).clone('ten')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CnfPktPeriod.setReference('ITU specification I.366.2 annex P.')
if mibBuilder.loadTexts: vismAal2CnfPktPeriod.setStatus('current')
if mibBuilder.loadTexts: vismAal2CnfPktPeriod.setDescription(" This object is used to configure the packetization period for a given codec. This packetization period has to be a valid entry in the profile table. Profile type and number identify a unique profile table and one codec type in this table might have one or more packetization period. This is applicable only if the vismAal2CidCodecType is 'g729a'. The configurable values for 'g729a' are 10,20,30 & 40. If a CID entry is configured with a codec other than 'g729a' then the user cannot configure the pkt period for that codec and the pkt period is picked from the profile table. Hence when we do get/walk on this entry/table any one of the above values could be returned. ")
vismAal2CidICSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidICSEnable.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidICSEnable.setDescription(' This object is used to enable or disable the ICS(Idle Channel Suppression) for a CID. This can be specified while adding the CID and cannot be modified. When the Idle Channel Suppression is enabled the DSP will look for the idle CAS (ABCD bits) pattern specified in ds0IdleCode in CISCO-VISM-DSX0-MIB MIB. If the idle pattern is present the DSP stops generating voice packets towards ATM side. By default the ds0IdleCode will be zero unless the user has configured it before adding the CID. If the ds0IdleCode is changed after the CID is added it will have no affect unless the card is reset. ICS is applicable only for trunking application, in case of switching there is no need for ICS as the calls are teared down and set up dynamically. ')
vismAal2CidState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cidStateActive", 1), ("cidStateFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidState.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidState.setDescription("Indicates the state of the CID. 'cidStateActive' : The CID is in service and operational. 'cidStateFailed' : The CID is in service but not operational, e.g. because the PVC that the CID belongs to is receiving F5(Operation, Administration and Maintenance Flow) level alarm. When VISM sees alarm on a CID (network side) sets this object to 'cidStateFailed', and an AIS will be sent on the ds0(Time Division Multiplexed voice channel) that this CID corresponds to. If the whole PVC is in alarm then all the CIDs on that PVC will be set to 'cidStateFailed', trapVismChanFailed trap will be sent and all the ds0's that corresponds to each of the CIDs on this PVC will be in alarm. If VISM sees an alarm on a ds0 in a line then an RAI(Remote Alarm Indication) will be sent on the CID that corresponds to this ds0, however the CID will not be put in failed state. ")
vismAal2CidFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("self", 1), ("highLevel", 2), ("both", 3), ("notFail", 4))).clone('notFail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismAal2CidFailReason.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidFailReason.setDescription("This object is used to indicate the CID failure reason. 'self': fail because of non-PVC alarm 'highLevel': fail because of PVC alarm 'both': fail because of both PVC and non-PVC alarm 'notFail': not fail ")
vismAal2CidAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cidPendingInService", 1), ("cidInService", 2), ("cidCommandedOutOfService", 3), ("cidPendingOutOfService", 4), ("cidUnknownState", 5))).clone('cidPendingInService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismAal2CidAdminState.setStatus('current')
if mibBuilder.loadTexts: vismAal2CidAdminState.setDescription('This attribute defines the operational administrative state of the bearer connection. cidInService: This is an operational state of the bearer connection where it is ready to transmit/receive data/voice packets. The user can take the bearer connection into cidInService. cidCommandedOutOfService: This is an operational state of the bearer connection where it is not ready to transmit/receive data/voice packets. The user can take the bearer connection into cidPendingOutOfService. cidPendingInService: It is a transient state. In this state the bearer connection is waiting for the user to transition it to the cidInService state. This value cannot be specified in a management protocol set operation. cidPendingOutOfService: It is a transient state. In this state the bearer connection is waiting for the user to transition it to the cidOutOfService state. This value cannot be specified in a management protocol set operation. cidUnknownState: This is an abnormal state of the bearer connection. This state would indicate to the user that there is some data integrity issue on the bearer administrative state. ')
cvismAtmTrunkMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 87, 2))
cvismAtmTrunkMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 1))
cvismAtmTrunkMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 2))
cvismAtmTrunkCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 2, 1)).setObjects(("CISCO-VISM-ATM-TRUNK-MIB", "ciscoVismBearerConnGroup"), ("CISCO-VISM-ATM-TRUNK-MIB", "ciscoVismAAl2CidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvismAtmTrunkCompliance = cvismAtmTrunkCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cvismAtmTrunkCompliance.setDescription('The compliance statement for objects related to VISM Bearer and CID Connection.')
cvismAtmTrunkComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 2, 2)).setObjects(("CISCO-VISM-ATM-TRUNK-MIB", "ciscoVismBearerConnGroup"), ("CISCO-VISM-ATM-TRUNK-MIB", "ciscoVismAAl2CidGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvismAtmTrunkComplianceRev1 = cvismAtmTrunkComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvismAtmTrunkComplianceRev1.setDescription('The compliance statement for objects related to VISM Bearer and CID Connection.')
cvismAtmTrunkComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 2, 3)).setObjects(("CISCO-VISM-ATM-TRUNK-MIB", "ciscoVismBearerConnGroupRev1"), ("CISCO-VISM-ATM-TRUNK-MIB", "ciscoVismAAl2CidGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvismAtmTrunkComplianceRev2 = cvismAtmTrunkComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: cvismAtmTrunkComplianceRev2.setDescription('The compliance statement for objects related to VISM Bearer and CID Connection.')
ciscoVismBearerConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 1, 1)).setObjects(("CISCO-VISM-ATM-TRUNK-MIB", "bearerEndptNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCid"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerLcn"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerSentPkts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerRcvdPkts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerSentOctets"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerRcvdOctets"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerLostPkts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerJitter"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerLatency"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ExtAISCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ExtRAICnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ConnAISCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ConnRDICnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCntClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismBearerConnGroup = ciscoVismBearerConnGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismBearerConnGroup.setDescription('The collection of objects which are used to represent VISM Bearer connection.')
ciscoVismAAl2CidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 1, 2)).setObjects(("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidLcn"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2EndptNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidRowStatus"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidType3Redundancy"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidVad"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidProfileType"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidProfileNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidCodecType"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidDtmfTransport"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidCasTransport"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidEcanEnable"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2InitVadTimer"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CnfPktPeriod"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidICSEnable"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidState"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismAAl2CidGroup = ciscoVismAAl2CidGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismAAl2CidGroup.setDescription('The collection of objects which are used to represent VISM AAL2 CID connection.')
ciscoVismAAl2CidGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 1, 3)).setObjects(("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidLcn"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2EndptNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidRowStatus"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidType3Redundancy"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidVad"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidProfileType"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidProfileNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidCodecType"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidDtmfTransport"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidCasTransport"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidEcanEnable"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2InitVadTimer"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CnfPktPeriod"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidICSEnable"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidState"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidFailReason"), ("CISCO-VISM-ATM-TRUNK-MIB", "vismAal2CidAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismAAl2CidGroupRev1 = ciscoVismAAl2CidGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoVismAAl2CidGroupRev1.setDescription('The collection of objects which are used to represent VISM AAL2 CID connection.')
ciscoVismBearerConnGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 87, 2, 1, 4)).setObjects(("CISCO-VISM-ATM-TRUNK-MIB", "bearerEndptNum"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCid"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerLcn"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerSentPkts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerRcvdPkts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerSentOctets"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerRcvdOctets"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerLostPkts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerJitter"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerLatency"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ExtAISCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ExtRAICnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ConnAISCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerAal2ConnRDICnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCntClrButton"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerPeakXmtCellRate"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentXmtCellRate"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerPeakRcvCellRate"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentRcvCellRate"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentExtAISRcvCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentExtRAIRcvCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentConnAISCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentConnRDICnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentExtAISXmtCnts"), ("CISCO-VISM-ATM-TRUNK-MIB", "bearerCurrentExtRAIXmtCnts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismBearerConnGroupRev1 = ciscoVismBearerConnGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoVismBearerConnGroupRev1.setDescription('The collection of objects which are used to represent VISM Bearer connection.')
mibBuilder.exportSymbols("CISCO-VISM-ATM-TRUNK-MIB", bearerPeakXmtCellRate=bearerPeakXmtCellRate, vismAal2CidGrp=vismAal2CidGrp, vismAal2EndptNum=vismAal2EndptNum, bearerLcn=bearerLcn, bearerConnGrp=bearerConnGrp, vismAal2CidCodecType=vismAal2CidCodecType, bearerAal2ExtRAICnts=bearerAal2ExtRAICnts, bearerCurrentRcvCellRate=bearerCurrentRcvCellRate, ciscoVismBearerConnGroup=ciscoVismBearerConnGroup, bearerCurrentExtRAIXmtCnts=bearerCurrentExtRAIXmtCnts, cvismAtmTrunkComplianceRev1=cvismAtmTrunkComplianceRev1, bearerAal2ExtAISCnts=bearerAal2ExtAISCnts, bearerSentOctets=bearerSentOctets, vismAal2CidAdminState=vismAal2CidAdminState, bearerCid=bearerCid, vismAal2CidProfileType=vismAal2CidProfileType, bearerConnEntry=bearerConnEntry, bearerPeakRcvCellRate=bearerPeakRcvCellRate, bearerCurrentConnRDICnts=bearerCurrentConnRDICnts, cvismAtmTrunkMIBGroups=cvismAtmTrunkMIBGroups, vismAal2CidEcanEnable=vismAal2CidEcanEnable, vismAal2CidState=vismAal2CidState, bearerConnTable=bearerConnTable, bearerAal2ConnAISCnts=bearerAal2ConnAISCnts, bearerCurrentExtAISRcvCnts=bearerCurrentExtAISRcvCnts, vismAal2CidVad=vismAal2CidVad, bearerLatency=bearerLatency, ciscoVismAtmTrunkMIB=ciscoVismAtmTrunkMIB, vismAal2CidLcn=vismAal2CidLcn, ciscoVismAAl2CidGroup=ciscoVismAAl2CidGroup, bearerLostPkts=bearerLostPkts, vismAal2InitVadTimer=vismAal2InitVadTimer, cvismAtmTrunkComplianceRev2=cvismAtmTrunkComplianceRev2, vismAal2CidNum=vismAal2CidNum, vismAal2CidICSEnable=vismAal2CidICSEnable, ciscoVismBearerConnGroupRev1=ciscoVismBearerConnGroupRev1, vismAal2CidDtmfTransport=vismAal2CidDtmfTransport, bearerRcvdPkts=bearerRcvdPkts, bearerCurrentExtRAIRcvCnts=bearerCurrentExtRAIRcvCnts, vismAal2CidEntry=vismAal2CidEntry, vismAal2CidFailReason=vismAal2CidFailReason, vismAal2CidProfileNum=vismAal2CidProfileNum, bearerCurrentXmtCellRate=bearerCurrentXmtCellRate, vismAal2CnfPktPeriod=vismAal2CnfPktPeriod, cvismAtmTrunkCompliance=cvismAtmTrunkCompliance, vismAal2CidRowStatus=vismAal2CidRowStatus, bearerCntClrButton=bearerCntClrButton, bearerRcvdOctets=bearerRcvdOctets, bearerCurrentExtAISXmtCnts=bearerCurrentExtAISXmtCnts, ciscoVismAAl2CidGroupRev1=ciscoVismAAl2CidGroupRev1, vismAal2CidCasTransport=vismAal2CidCasTransport, bearerEndptNum=bearerEndptNum, bearerJitter=bearerJitter, vismAal2CidType3Redundancy=vismAal2CidType3Redundancy, cvismAtmTrunkMIBConformance=cvismAtmTrunkMIBConformance, bearerSentPkts=bearerSentPkts, bearerAal2ConnRDICnts=bearerAal2ConnRDICnts, PYSNMP_MODULE_ID=ciscoVismAtmTrunkMIB, cvismAtmTrunkMIBCompliances=cvismAtmTrunkMIBCompliances, bearerCurrentConnAISCnts=bearerCurrentConnAISCnts, vismAal2CidCnfTable=vismAal2CidCnfTable)
