#
# PySNMP MIB module STN-PROXYTUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-PROXYTUNNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, TimeTicks, Unsigned32, Bits, NotificationType, MibIdentifier, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "TimeTicks", "Unsigned32", "Bits", "NotificationType", "MibIdentifier", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "IpAddress", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
stnNotification, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification")
stnPMProxyTunnel, = mibBuilder.importSymbols("STN-POLICY-MIB", "stnPMProxyTunnel")
stnProxyTunnel = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1))
if mibBuilder.loadTexts: stnProxyTunnel.setLastUpdated('0001160000Z')
if mibBuilder.loadTexts: stnProxyTunnel.setOrganization('Spring Tide Networks')
if mibBuilder.loadTexts: stnProxyTunnel.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Suite 200 Maynard, MA 01754 USA Tel: +1 978 298 2000 Email: custserv@springtidenet.com ')
if mibBuilder.loadTexts: stnProxyTunnel.setDescription('This MIB module describes managed objects of Spring Tide Networks Proxy Tunnel.')
stnProxyTunnelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1))
stnProxyTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1), )
if mibBuilder.loadTexts: stnProxyTunnelTable.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelTable.setDescription('A list of Proxy Tunnel entries.')
stnProxyTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1), ).setIndexNames((0, "STN-PROXYTUNNEL-MIB", "stnProxyTunnelSerialNumber"), (0, "STN-PROXYTUNNEL-MIB", "stnProxyTunnelRouterInstance"))
if mibBuilder.loadTexts: stnProxyTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelEntry.setDescription('Entry contains information about a particular Proxy Tunnel.')
stnProxyTunnelSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelSerialNumber.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelSerialNumber.setDescription('The serial number of the Proxy Tunnel Interface.')
stnProxyTunnelRouterInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelRouterInstance.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelRouterInstance.setDescription('The instance of the router corresponding to this proxy tunnel.')
stnProxyTunnelConnIdleTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelConnIdleTimeOut.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelConnIdleTimeOut.setDescription('The timeout in seconds that the tunnel will stay connected even if no activity takes place.')
stnProxyTunnelPolicyInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelPolicyInstance.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelPolicyInstance.setDescription('The instance of the policy from which the proxy tunnel was created.')
stnProxyTunnelPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelPolicyName.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelPolicyName.setDescription('The name of the policy associated with this proxy tunnel interface.')
stnProxyTunnelEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stnProxyTunEncapsIpIp", 1), ("stnProxyTunEncapsIpGre", 2), ("stnProxyTunEncapsIpsec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelEncapsType.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelEncapsType.setDescription('The type of encapsulation used on the proxy tunnel. A value of stnProxyTunEncapsIpIp indicates an IP-IP encapsulation on the tunnel. A value of stnProxyTunEncapsIpGre indicates an IP/GRE encapsulation and a value of stnProxyTunEncapsIpsec indicates IPSEC encapsulation on the tunnel.')
stnProxyTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelState.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelState.setDescription('The state of the proxy tunnel. A value of up indicates that the proxy tunnel is ready to send and receive data.')
stnProxyTunnelL3IfaceTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelL3IfaceTx.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelL3IfaceTx.setDescription('Interface index of the L3 interface over which the proxy tunnel is established. The interface corresponding to this index is used by the proxy i tunnel to send out packets.')
stnProxyTunnelLocalTunnelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelLocalTunnelAddr.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelLocalTunnelAddr.setDescription('The IP address of the local tunnel end-point.')
stnProxyTunnelRemoteTunnelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelRemoteTunnelAddr.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelRemoteTunnelAddr.setDescription('The IP address of the remote tunnel end-point.')
stnProxyTunnelInESPSPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelInESPSPIs.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelInESPSPIs.setDescription('Packet array of Security Protocol Indices corresponding to incoming ESP security assocations used to encapsulate traffic on the proxy tunnel when the encapsulation type is set to IPSEC.')
stnProxyTunnelOutESPSPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelOutESPSPIs.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelOutESPSPIs.setDescription('Packet array of Security Protocol Indices corresponding to outgoing ESP security assocations used to encapsulate traffic on the proxy tunnel when the encapsulation type is set to IPSEC.')
stnProxyTunnelInAHSPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelInAHSPIs.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelInAHSPIs.setDescription('Packet array of Security Protocol Indices corresponding to incoming AH security assocations used to encapsulate traffic on the proxy tunnel when the encapsulation type is set to IPSEC.')
stnProxyTunnelOutAHSPIs = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelOutAHSPIs.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelOutAHSPIs.setDescription('Packet array of Security Protocol Indices corresponding to outgoing AH security assocations used to encapsulate traffic on the proxy tunnel when the encapsulation type is set to IPSEC.')
stnProxyTunnelEncapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelEncapsIndex.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelEncapsIndex.setDescription('Index of the Encapsulation entry in the stnPmEncapsTable used to encapsulate traffic on the proxy tunnel when the encapsulation type is set IP-IP or IP-GRE.')
stnProxyTunnelInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelInPkts.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelInPkts.setDescription('The total number of packets received across the proxy tunnel.')
stnProxyTunnelInErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelInErrPkts.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelInErrPkts.setDescription('The number of packets received across the proxy tunnel that were determined to be erroneous.')
stnProxyTunnelOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelOutPkts.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelOutPkts.setDescription('The total number of packets sent out the proxy tunnel.')
stnProxyTunnelOutErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 11, 1, 16, 1, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnProxyTunnelOutErrPkts.setStatus('current')
if mibBuilder.loadTexts: stnProxyTunnelOutErrPkts.setDescription('The number of packets determined to be in error and discarded before sending over the tunnel.')
mibBuilder.exportSymbols("STN-PROXYTUNNEL-MIB", stnProxyTunnelState=stnProxyTunnelState, stnProxyTunnel=stnProxyTunnel, stnProxyTunnelOutESPSPIs=stnProxyTunnelOutESPSPIs, stnProxyTunnelLocalTunnelAddr=stnProxyTunnelLocalTunnelAddr, stnProxyTunnelSerialNumber=stnProxyTunnelSerialNumber, stnProxyTunnelOutPkts=stnProxyTunnelOutPkts, stnProxyTunnelRemoteTunnelAddr=stnProxyTunnelRemoteTunnelAddr, stnProxyTunnelOutErrPkts=stnProxyTunnelOutErrPkts, stnProxyTunnelInAHSPIs=stnProxyTunnelInAHSPIs, stnProxyTunnelEncapsType=stnProxyTunnelEncapsType, stnProxyTunnelTable=stnProxyTunnelTable, stnProxyTunnelObjects=stnProxyTunnelObjects, stnProxyTunnelPolicyInstance=stnProxyTunnelPolicyInstance, PYSNMP_MODULE_ID=stnProxyTunnel, stnProxyTunnelOutAHSPIs=stnProxyTunnelOutAHSPIs, stnProxyTunnelRouterInstance=stnProxyTunnelRouterInstance, stnProxyTunnelEntry=stnProxyTunnelEntry, stnProxyTunnelL3IfaceTx=stnProxyTunnelL3IfaceTx, stnProxyTunnelPolicyName=stnProxyTunnelPolicyName, stnProxyTunnelInErrPkts=stnProxyTunnelInErrPkts, stnProxyTunnelInPkts=stnProxyTunnelInPkts, stnProxyTunnelConnIdleTimeOut=stnProxyTunnelConnIdleTimeOut, stnProxyTunnelEncapsIndex=stnProxyTunnelEncapsIndex, stnProxyTunnelInESPSPIs=stnProxyTunnelInESPSPIs)
