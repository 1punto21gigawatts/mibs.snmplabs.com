#
# PySNMP MIB module EMD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:02:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
sysContact, sysLocation, sysName = mibBuilder.importSymbols("SNMPv2-MIB", "sysContact", "sysLocation", "sysName")
Unsigned32, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, iso, enterprises, TimeTicks, Gauge32, MibIdentifier, ModuleIdentity, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "iso", "enterprises", "TimeTicks", "Gauge32", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "NotificationType", "IpAddress")
MacAddress, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "TruthValue")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2015-10-26 00:00', '2014-09-29 00:00', '2014-02-21 00:00', '2013-12-17 00:00', '2012-10-01 00:00', '2012-07-11 00:00', '2012-05-25 00:00', '2012-01-25 00:00', '2011-12-14 00:00', '2011-12-12 00:00', '2011-11-04 00:00', '2011-08-26 00:00', '2011-08-05 00:00', '2011-06-30 00:00', '2011-03-30 00:00', '2011-03-10 00:00', '2011-02-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raritan.setRevisionsDescriptions(('EMX release 3.2.10: 1) SensorUnitsEnumeration: Added degrees(20) voltampReactive(23) 2) Added to trapInformation: phoneNumber Added the following traps: smsMessageTransmissionFailure trap ', 'EMX release 3.1.0: - Allow configuration of default thresholds for peripheral devices 1) Added externalSensorTypeDefaultThresholdsTable 2) Added: externalSensorUseDefaultThresholds 3) Added agentInetPortNumber under trapInformation 4) Added agentInetPortNumber as a varbind to all traps 5) SensorTypeEnumeration: Added absoluteHumidity(28) ', 'EMX release 2.6.0: - Send trap on peripheral device firmware update - Allow peripheral device auto management to be disabled - Support DX-PIR occupancy sensor 1) Added traps: radiusError, serverReachabilityError 2) Added unknownPeripheralDeviceAttached trap 3) Added: PeripheralDeviceFirmwareUpdateStateEnumeration peripheralDeviceFirmwareUpdateState peripheralDeviceFirmwareUpdate trap 4) Added: peripheralDevicesAutoManagement 5) Added userName to the following traps: bulkConfigurationSaved bulkConfigurationCopied deviceSettingsSaved deviceSettingsRestored lhxSupportChanged 6) Added: externalSensorAlarmedToNormalDelay 7) SensorUnitsEnumeration: Added grampercubicmeter(22) ', 'EMX release 2.5.0: - Support for G2 peripheral devices - Support Webcams 1) Added externalSensorIsActuator to the externalSensorConfigurationTable 2) Added actuatorControlTable 3) Added required sensor types and units 4) Added traps: webcamInserted and webcamRemoved 5) Added trapInformation parameters: webcamModel, webcamConnectionPort 6) Added serverConnectivityUnrecoverable trap 7) Added peripheralDevicePackageTable containing information on peripheral device packages ', 'Added the following traps: deviceSettingsSaved, deviceSettingsRestored ', 'Added a comment before the section listing the traps. The comment notes that the deviceInetAddressType and deviceInetIPAddress fields are not used for IPv6 traps ', 'added userAccepted/DeclinedRestrictedServiceAgreement traps', 'added lhxSupportChanged trap.', ' 1. Added usbSlaveConnected, usbSlaveDisconnected traps ', ' 1. Added cascadedDeviceConnected to unitConfiguration ', ' 1. Added DeviceIdentificationParameterEnumeration 2. Added deviceIdentificationChanged Trap 3. Added sysContact, sysName, sysLocation to all traps ', 'Added model name.', 'Added external sensor port number.', 'Added sensor log.', 'Changed MAX-ACCESS for externalOnOffSensorSubtype to read-write.', 'Remove unused deviceNumber from ExternalSensorStateChangeTrap.', 'The first version of the MIB.',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201510260000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
if mibBuilder.loadTexts: raritan.setContactInfo(' Author: Raritan Americas, Inc. postal: Raritan Americas, Inc. 400 Cottontail Lane Somerset, NJ 08873 email: tech@raritan.com phone: +1 732 764 8886 ')
if mibBuilder.loadTexts: raritan.setDescription('This MIB describes the SNMP functions of the EMX Environmental Monitoring Device by Raritan Computer.')
emd = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 0))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 2))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 3))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 4))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 5))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2))
serverReachability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3))
measurementsExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 3, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2))
logUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1))
logExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2))
actuatorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1))
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 8, 3, 1, 1)).setObjects(("EMD-MIB", "configGroup"), ("EMD-MIB", "measurementsGroup"), ("EMD-MIB", "trapInformationGroup"), ("EMD-MIB", "trapsGroup"), ("EMD-MIB", "logGroup"), ("EMD-MIB", "controlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('current')
if mibBuilder.loadTexts: complianceRev1.setDescription('The requirements for conformance to the EMD-MIB.')
configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 1)).setObjects(("EMD-MIB", "externalSensorCount"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "deviceInetNetmask"), ("EMD-MIB", "deviceInetGateway"), ("EMD-MIB", "deviceMACAddress"), ("EMD-MIB", "utcOffset"), ("EMD-MIB", "model"), ("EMD-MIB", "deviceName"), ("EMD-MIB", "hardwareVersion"), ("EMD-MIB", "firmwareVersion"), ("EMD-MIB", "externalSensorType"), ("EMD-MIB", "externalSensorSerialNumber"), ("EMD-MIB", "externalSensorName"), ("EMD-MIB", "externalSensorDescription"), ("EMD-MIB", "externalSensorXCoordinate"), ("EMD-MIB", "externalSensorYCoordinate"), ("EMD-MIB", "externalSensorZCoordinate"), ("EMD-MIB", "externalSensorChannelNumber"), ("EMD-MIB", "externalOnOffSensorSubtype"), ("EMD-MIB", "externalSensorUnits"), ("EMD-MIB", "externalSensorDecimalDigits"), ("EMD-MIB", "externalSensorAccuracy"), ("EMD-MIB", "externalSensorResolution"), ("EMD-MIB", "externalSensorTolerance"), ("EMD-MIB", "externalSensorMaximum"), ("EMD-MIB", "externalSensorMinimum"), ("EMD-MIB", "externalSensorHysteresis"), ("EMD-MIB", "externalSensorStateChangeDelay"), ("EMD-MIB", "externalSensorLowerCriticalThreshold"), ("EMD-MIB", "externalSensorLowerWarningThreshold"), ("EMD-MIB", "externalSensorUpperCriticalThreshold"), ("EMD-MIB", "externalSensorUpperWarningThreshold"), ("EMD-MIB", "externalSensorEnabledThresholds"), ("EMD-MIB", "externalSensorPort"), ("EMD-MIB", "externalSensorsZCoordinateUnits"), ("EMD-MIB", "externalSensorIsActuator"), ("EMD-MIB", "externalSensorUseDefaultThresholds"), ("EMD-MIB", "externalSensorTypeDefaultHysteresis"), ("EMD-MIB", "externalSensorTypeDefaultStateChangeDelay"), ("EMD-MIB", "externalSensorTypeDefaultLowerCriticalThreshold"), ("EMD-MIB", "externalSensorTypeDefaultLowerWarningThreshold"), ("EMD-MIB", "externalSensorTypeDefaultUpperCriticalThreshold"), ("EMD-MIB", "externalSensorTypeDefaultUpperWarningThreshold"), ("EMD-MIB", "externalSensorTypeDefaultEnabledThresholds"), ("EMD-MIB", "managedExternalSensorCount"), ("EMD-MIB", "serverCount"), ("EMD-MIB", "serverIPAddress"), ("EMD-MIB", "serverPingEnabled"), ("EMD-MIB", "measurementPeriod"), ("EMD-MIB", "measurementsPerLogEntry"), ("EMD-MIB", "logSize"), ("EMD-MIB", "cascadedDeviceConnected"), ("EMD-MIB", "peripheralDevicePackageSerialNumber"), ("EMD-MIB", "peripheralDevicePackageModel"), ("EMD-MIB", "peripheralDevicePackageFirmwareVersion"), ("EMD-MIB", "peripheralDevicePackageMinFirmwareVersion"), ("EMD-MIB", "peripheralDevicePackageFirmwareTimeStamp"), ("EMD-MIB", "peripheralDevicePackagePosition"), ("EMD-MIB", "peripheralDevicePackageState"), ("EMD-MIB", "peripheralDevicesAutoManagement"), ("EMD-MIB", "externalSensorAlarmedToNormalDelay"), ("EMD-MIB", "synchronizeWithNTPServer"), ("EMD-MIB", "useDHCPProvidedNTPServer"), ("EMD-MIB", "firstNTPServerAddressType"), ("EMD-MIB", "firstNTPServerAddress"), ("EMD-MIB", "secondNTPServerAddressType"), ("EMD-MIB", "secondNTPServerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configGroup = configGroup.setStatus('current')
if mibBuilder.loadTexts: configGroup.setDescription('A collection of objects representing configuration data.')
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 2)).setObjects(("EMD-MIB", "measurementsExternalSensorIsAvailable"), ("EMD-MIB", "measurementsExternalSensorState"), ("EMD-MIB", "measurementsExternalSensorValue"), ("EMD-MIB", "measurementsExternalSensorTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementsGroup = measurementsGroup.setStatus('current')
if mibBuilder.loadTexts: measurementsGroup.setDescription('A collection of objects providing the measurement capability of EMD.')
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 3)).setObjects(("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "imageVersion"), ("EMD-MIB", "roleName"), ("EMD-MIB", "oldSensorState"), ("EMD-MIB", "externalSensorNumber"), ("EMD-MIB", "typeOfSensor"), ("EMD-MIB", "smtpMessageRecipients"), ("EMD-MIB", "smtpServer"), ("EMD-MIB", "errorDescription"), ("EMD-MIB", "deviceChangedParameter"), ("EMD-MIB", "changedParameterNewValue"), ("EMD-MIB", "lhxSupportEnabled"), ("EMD-MIB", "webcamModel"), ("EMD-MIB", "webcamConnectionPort"), ("EMD-MIB", "peripheralDeviceRomcode"), ("EMD-MIB", "peripheralDeviceFirmwareUpdateState"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "phoneNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapInformationGroup = trapInformationGroup.setStatus('current')
if mibBuilder.loadTexts: trapInformationGroup.setDescription('A collection of objects providing information in the traps.')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 4)).setObjects(("EMD-MIB", "systemStarted"), ("EMD-MIB", "systemReset"), ("EMD-MIB", "userLogin"), ("EMD-MIB", "userLogout"), ("EMD-MIB", "userAuthenticationFailure"), ("EMD-MIB", "userSessionTimeout"), ("EMD-MIB", "userAdded"), ("EMD-MIB", "userModified"), ("EMD-MIB", "userDeleted"), ("EMD-MIB", "roleAdded"), ("EMD-MIB", "roleModified"), ("EMD-MIB", "roleDeleted"), ("EMD-MIB", "deviceUpdateStarted"), ("EMD-MIB", "deviceUpdateCompleted"), ("EMD-MIB", "userBlocked"), ("EMD-MIB", "userPasswordChanged"), ("EMD-MIB", "passwordSettingsChanged"), ("EMD-MIB", "firmwareValidationFailed"), ("EMD-MIB", "logFileCleared"), ("EMD-MIB", "bulkConfigurationSaved"), ("EMD-MIB", "bulkConfigurationCopied"), ("EMD-MIB", "externalSensorStateChange"), ("EMD-MIB", "smtpMessageTransmissionFailure"), ("EMD-MIB", "ldapError"), ("EMD-MIB", "deviceUpdateFailed"), ("EMD-MIB", "pingServerEnabled"), ("EMD-MIB", "pingServerDisabled"), ("EMD-MIB", "serverNotReachable"), ("EMD-MIB", "serverReachable"), ("EMD-MIB", "deviceIdentificationChanged"), ("EMD-MIB", "usbSlaveConnected"), ("EMD-MIB", "usbSlaveDisconnected"), ("EMD-MIB", "lhxSupportChanged"), ("EMD-MIB", "userAcceptedRestrictedServiceAgreement"), ("EMD-MIB", "userDeclinedRestrictedServiceAgreement"), ("EMD-MIB", "deviceSettingsSaved"), ("EMD-MIB", "deviceSettingsRestored"), ("EMD-MIB", "webcamInserted"), ("EMD-MIB", "webcamRemoved"), ("EMD-MIB", "serverConnectivityUnrecoverable"), ("EMD-MIB", "radiusError"), ("EMD-MIB", "serverReachabilityError"), ("EMD-MIB", "unknownPeripheralDeviceAttached"), ("EMD-MIB", "peripheralDeviceFirmwareUpdate"), ("EMD-MIB", "smsMessageTransmissionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
if mibBuilder.loadTexts: trapsGroup.setDescription('A collection of traps.')
logGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 5)).setObjects(("EMD-MIB", "dataLogging"), ("EMD-MIB", "oldestLogID"), ("EMD-MIB", "newestLogID"), ("EMD-MIB", "logTimeStamp"), ("EMD-MIB", "dataLoggingEnableForAllSensors"), ("EMD-MIB", "logExternalSensorDataAvailable"), ("EMD-MIB", "logExternalSensorState"), ("EMD-MIB", "logExternalSensorAvgValue"), ("EMD-MIB", "logExternalSensorMaxValue"), ("EMD-MIB", "logExternalSensorMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    logGroup = logGroup.setStatus('current')
if mibBuilder.loadTexts: logGroup.setDescription('A collection of objects providing the logging capabilities about the EMD.')
controlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 8, 3, 2, 6)).setObjects(("EMD-MIB", "actuatorState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controlGroup = controlGroup.setStatus('current')
if mibBuilder.loadTexts: controlGroup.setDescription('A collection of objects providing the ability to control actuators of the EMD.')
class SensorTypeEnumeration(TextualConvention, Integer32):
    description = 'The types a sensor can be.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 30, 31, 42, 43, 44, 45))
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("fanSpeed", 21), ("absoluteHumidity", 28), ("other", 30), ("none", 31), ("illuminance", 42), ("doorContact", 43), ("tamperDetection", 44), ("motionDetection", 45))

class SensorStateEnumeration(TextualConvention, Integer32):
    description = 'The states a sensor can be in.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11))

class SensorUnitsEnumeration(TextualConvention, Integer32):
    description = 'The types a sensor can be.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19), ("degrees", 20), ("lux", 21), ("grampercubicmeter", 22), ("voltampReactive", 23))

class ExternalSensorsZCoordinateUnitsEnumeration(TextualConvention, Integer32):
    description = 'The units of the external Sensor Z Coordinate. rackUnits implies that the Z Coordinate for all external sensors is in rack Units (U) text implies that the Z Coordinate for all external sensors is a text string (label)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("rackUnits", 0), ("text", 1))

class HundredthsOfAPercentage(TextualConvention, Unsigned32):
    description = 'Data type for reporting values in hundredths of percentage, i.e. 0.01 %.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class DeviceIdentificationParameterEnumeration(TextualConvention, Integer32):
    description = 'The configurable parameters.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("deviceName", 0), ("sysContact", 1), ("sysName", 2), ("sysLocation", 3))

class PeripheralDeviceFirmwareUpdateStateEnumeration(TextualConvention, Integer32):
    description = 'The state of an peripheral device firmware update.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("started", 1), ("successful", 2), ("failed", 3))

unitConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1))
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('The user-defined name for the EMD.')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('The main boards hardware version.')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The firmware version.')
utcOffset = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setStatus('current')
if mibBuilder.loadTexts: utcOffset.setDescription('The current UTC offset.')
externalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setStatus('current')
if mibBuilder.loadTexts: externalSensorCount.setDescription('The number of external sensors.')
managedExternalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedExternalSensorCount.setStatus('current')
if mibBuilder.loadTexts: managedExternalSensorCount.setDescription('The number of managed external sensors ')
externalSensorsZCoordinateUnits = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 7), ExternalSensorsZCoordinateUnitsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setStatus('current')
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setDescription('External Sensor Z Coordinate units: Freeform Text or Rack Units (U). Default is U.')
deviceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMACAddress.setStatus('current')
if mibBuilder.loadTexts: deviceMACAddress.setDescription('The current MAC address.')
deviceInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetAddressType.setStatus('current')
if mibBuilder.loadTexts: deviceInetAddressType.setDescription('The type of address format')
deviceInetIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetIPAddress.setStatus('current')
if mibBuilder.loadTexts: deviceInetIPAddress.setDescription('The current IP address. A value of 0.0.0.0 indicates an error or an unset option.')
deviceInetNetmask = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetNetmask.setStatus('current')
if mibBuilder.loadTexts: deviceInetNetmask.setDescription('The current netmask. A value of 0.0.0.0 indicates an error or an unset option.')
deviceInetGateway = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInetGateway.setStatus('current')
if mibBuilder.loadTexts: deviceInetGateway.setDescription('The current gateway. A value of 0.0.0.0 indicates an error or an unset option.')
serverCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setStatus('current')
if mibBuilder.loadTexts: serverCount.setDescription('The number of entries in serverReachabilityTable')
model = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: model.setStatus('current')
if mibBuilder.loadTexts: model.setDescription('The EMD device model.')
cascadedDeviceConnected = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cascadedDeviceConnected.setStatus('current')
if mibBuilder.loadTexts: cascadedDeviceConnected.setDescription('Indicates whether a device is connected using an USB cable to the USB-A port of this EMX in a cascaded configuration. true: Connected false: Not Connected')
peripheralDevicesAutoManagement = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setDescription('Set enabled state of auto management for new peripheral devices.')
synchronizeWithNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setStatus('current')
if mibBuilder.loadTexts: synchronizeWithNTPServer.setDescription("Set enabled state of the device's NTP client.")
useDHCPProvidedNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setStatus('current')
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setDescription('Enable usage of the DHCP/BOOTP provided NTP server addresses; the value is used only if synchronizeWithNTPServer is enabled.')
firstNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 19), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddressType.setStatus('current')
if mibBuilder.loadTexts: firstNTPServerAddressType.setDescription('Represents the type of firstNTPServerAddress.')
firstNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 20), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: firstNTPServerAddress.setDescription('The address of the primary NTP server.')
secondNTPServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 21), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddressType.setStatus('current')
if mibBuilder.loadTexts: secondNTPServerAddressType.setDescription('Represents the type of secondNTPServerAddress.')
secondNTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 1, 22), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddress.setStatus('current')
if mibBuilder.loadTexts: secondNTPServerAddress.setDescription('The address of the secondary NTP server.')
logConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2))
dataLogging = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setStatus('current')
if mibBuilder.loadTexts: dataLogging.setDescription('Data Retrieval: enabled/disabled.')
measurementPeriod = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementPeriod.setStatus('current')
if mibBuilder.loadTexts: measurementPeriod.setDescription('Data Collection periodicity. This is the periodicity of the data collected by the PX. This value is fixed at 1 second.')
measurementsPerLogEntry = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setStatus('current')
if mibBuilder.loadTexts: measurementsPerLogEntry.setDescription('The number of measurements used for each entry in the log.')
logSize = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSize.setStatus('current')
if mibBuilder.loadTexts: logSize.setDescription('The number of entries in the log.')
dataLoggingEnableForAllSensors = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 1, 1, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setStatus('current')
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setDescription('Operation to control data logging for all sensors. If this OID is set to true, then all xxxSensorLogAvailable are set to true If this OID is set to false, then all xxxSensorLogAvailable are set to false ')
externalSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1), )
if mibBuilder.loadTexts: externalSensorConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorConfigurationTable.setDescription('A list of externalSensor configuration entries. The number of entries is given by the value of externalSensorCount for the EMD.')
externalSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setDescription('An entry containing parameters for an external sensor.')
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorID.setStatus('current')
if mibBuilder.loadTexts: sensorID.setDescription('A unique value for each sensor. Its value ranges between 1 and the value of externalSensorCount.')
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 2), SensorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setStatus('current')
if mibBuilder.loadTexts: externalSensorType.setDescription('The type of sensor.')
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorSerialNumber.setDescription('The sensor serial number.')
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setStatus('current')
if mibBuilder.loadTexts: externalSensorName.setDescription('The user-defined name.')
externalSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorDescription.setStatus('current')
if mibBuilder.loadTexts: externalSensorDescription.setDescription('The user-defined description.')
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorXCoordinate.setDescription('The X coordinate.')
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorYCoordinate.setDescription('The Y coordinate.')
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setStatus('current')
if mibBuilder.loadTexts: externalSensorZCoordinate.setDescription('The Z coordinate.')
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorChannelNumber.setDescription('The channel number, applies only to contact sensors; -1 for other sensors')
externalOnOffSensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 10), SensorTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setStatus('current')
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setDescription('Type of measurement in case sensor type is discrete OnOff')
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 11), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setStatus('current')
if mibBuilder.loadTexts: externalSensorUnits.setDescription('The base units. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors. ')
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setStatus('current')
if mibBuilder.loadTexts: externalSensorDecimalDigits.setDescription('The number of digits displayed to the right of the decimal point This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 13), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorAccuracy.setStatus('current')
if mibBuilder.loadTexts: externalSensorAccuracy.setDescription('The accuracy: how close (in percent) the measurement is to the actual value. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorResolution.setStatus('current')
if mibBuilder.loadTexts: externalSensorResolution.setDescription('The resolution: the minimum difference between any two measured values. The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorTolerance.setStatus('current')
if mibBuilder.loadTexts: externalSensorTolerance.setDescription('The resolution: the difference between a sensor value and the actual value. The value of this OID variable should be scaled by (externalSensorDecimalDigits + 1). For example, if the value is 50 and externalSensorDecimalDigits is 2, then actual value is 0.05. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMaximum.setStatus('current')
if mibBuilder.loadTexts: externalSensorMaximum.setDescription('The largest possible value The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMinimum.setStatus('current')
if mibBuilder.loadTexts: externalSensorMinimum.setDescription('The smallest possible value The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setStatus('current')
if mibBuilder.loadTexts: externalSensorHysteresis.setDescription('The hysteresis used for deassertions The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setDescription('The delay measured in samples before a state is asserted. If the value is zero, then the state is asserted as soon as it is detected; if it is non-zero, say n, then the assertion condition must exist for n+1 consecutive samples before the corresponding assertion event is reported. At present, this value cannot be written (set)')
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setDescription('The lower critical threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setDescription('The lower non-critical (warning) threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setDescription('The upper critical threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setDescription('The upper non-critical (warning) threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 24), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setDescription('A bit string which indicates which thresholds are enabled. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors')
externalSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorPort.setStatus('current')
if mibBuilder.loadTexts: externalSensorPort.setDescription('The position of the sensor. The format is a semicolon separated list of Keyword:value pairs - Keyword1:Value1;Keyword2:value2;... Keyword can be one of the following: ONBOARD, DEVICE-1WIREPORT, HUBPORT, CHAIN-POSITION Examples 1) Onboard Sensor ONBOARD:CC1 2) Old sensor connected to device 1-wire port DEVICE-1WIREPORT:2 3) New style sensor connected to device 1-wire port DEVICE-1WIREPORT:2;CHAIN-POSITION:3 4) New style sensor connected to hub port 3 DEVICE-1WIREPORT:2;CHAIN-POSITION:1;HUBPORT:3;CHAIN-POSITION:1 5) Old style sensor connected to end of new style sensor chain DEVICE-1WIREPORT:2; ')
externalSensorIsActuator = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorIsActuator.setStatus('current')
if mibBuilder.loadTexts: externalSensorIsActuator.setDescription('Is this an actuator? True: It is an actuator False: It is not an actuator')
externalSensorAlarmedToNormalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setStatus('current')
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setDescription('The delay in seconds for transitions from the alarmed state to the normal state. If the sensor type is motionDetection, then it can set to a value greater >= 0 For all other sensor types, the value is 0 and cannot be set to any other value. ')
externalSensorUseDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setStatus('current')
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setDescription('Use default thresholds for this sensor? True: Use default thresholds for this sensor False: Do not use default thresholds for this sensor')
externalSensorTypeDefaultThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4), )
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setDescription('A list of entries listing the default thresholds for each sensor type.')
externalSensorTypeDefaultThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1), ).setIndexNames((0, "EMD-MIB", "externalSensorType"))
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setDescription('An entry containing default thresholds for a sensor type.')
externalSensorTypeDefaultHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setDescription('The hysteresis used for deassertions The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorTypeDefaultStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setDescription('The delay measured in samples before a state is asserted. If the value is zero, then the state is asserted as soon as it is detected; if it is non-zero, say n, then the assertion condition must exist for n+1 consecutive samples before the corresponding assertion event is reported. At present, this value cannot be written (set)')
externalSensorTypeDefaultLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setDescription('The lower critical threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorTypeDefaultLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setDescription('The lower non-critical (warning) threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorTypeDefaultUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setDescription('The upper critical threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorTypeDefaultUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setDescription('The upper non-critical (warning) threshold The value of this OID variable should be scaled by externalSensorDecimalDigits. For example, if the value is 1 and externalSensorDecimalDigits is 2, then actual value is 0.01. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
externalSensorTypeDefaultEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 4, 1, 9), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setStatus('current')
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setDescription('A bit string which indicates which thresholds are enabled. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors ')
peripheralDevicePackageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5), )
if mibBuilder.loadTexts: peripheralDevicePackageTable.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageTable.setDescription('A list of entries for the peripheral Device Packages connected to an EMX. The number of entries is given by the value of peripheralDevicePackagesCount.')
peripheralDevicePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1), ).setIndexNames((0, "EMD-MIB", "peripheralDevicePackageId"))
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setDescription('An entry containing objects for a controller.')
peripheralDevicePackageId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: peripheralDevicePackageId.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageId.setDescription('A unique value for each peripheral device package.')
peripheralDevicePackageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setDescription('The peripheral device package serial number.')
peripheralDevicePackageModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageModel.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageModel.setDescription('The peripheral device package model. Examples are DX-D2C6, DPX2-T1, DPX2-T1H1, DPX2-T2H1, DPX2-T3H1')
peripheralDevicePackageFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setDescription('The peripheral device package firmware version.')
peripheralDevicePackageMinFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setDescription('The peripheral device package minimum firmware version. This field may be empty. If it is not empty, then it shall not be possible to downgrade the peripheral device firmware to a version < minimum firmware version number.')
peripheralDevicePackageFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setDescription('The time when the peripheralDevicePackage firmware was updated in UNIX(epoch)time. It is measured in seconds relative to January 1, 1970 (midnight UTC/GMT), i.e a value of 0 indicates January 1, 1970 (midnight UTC/GMT).')
peripheralDevicePackagePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setDescription('The position of the package. The format is a semicolon separated list of Keyword:value pairs - Keyword1:Value1;Keyword2:value2;... Keyword can be one of the following: ONBOARD, DEVICE-1WIREPORT, HUBPORT, CHAIN-POSITION Examples 1) Onboard Sensor ONBOARD:CC1 2) Old sensor connected to device 1-wire port DEVICE-1WIREPORT:2 3) New style sensor connected to device 1-wire port DEVICE-1WIREPORT:2;CHAIN-POSITION:3 4) New style sensor connected to hub port 3 DEVICE-1WIREPORT:2;CHAIN-POSITION:1;HUBPORT:3;CHAIN-POSITION:1 5) Old style sensor connected to end of new style sensor chain DEVICE-1WIREPORT:2; ')
peripheralDevicePackageState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 2, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageState.setStatus('current')
if mibBuilder.loadTexts: peripheralDevicePackageState.setDescription('The state of the package.')
serverReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1), )
if mibBuilder.loadTexts: serverReachabilityTable.setStatus('current')
if mibBuilder.loadTexts: serverReachabilityTable.setDescription('A list of server entries. The number of entries is given by the value of serverCount for the EMD.')
serverReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1), ).setIndexNames((0, "EMD-MIB", "serverID"))
if mibBuilder.loadTexts: serverReachabilityEntry.setStatus('current')
if mibBuilder.loadTexts: serverReachabilityEntry.setDescription('An entry containing parameters for a server.')
serverID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: serverID.setStatus('current')
if mibBuilder.loadTexts: serverID.setDescription('A unique value for each server. Its value ranges between 1 and the value of serverCount for that EMD')
serverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIPAddress.setStatus('current')
if mibBuilder.loadTexts: serverIPAddress.setDescription('The IP Address/host name of the server')
serverPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPingEnabled.setStatus('current')
if mibBuilder.loadTexts: serverPingEnabled.setDescription('Is ping enabled for this server?')
oldestLogID = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldestLogID.setStatus('current')
if mibBuilder.loadTexts: oldestLogID.setDescription('The index of the oldest data in the buffer for this EMD.')
newestLogID = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newestLogID.setStatus('current')
if mibBuilder.loadTexts: newestLogID.setDescription('The index of the newest data in the buffer for this EMD.')
logTimeStampTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3), )
if mibBuilder.loadTexts: logTimeStampTable.setStatus('current')
if mibBuilder.loadTexts: logTimeStampTable.setDescription('A list of entries containing the timestamps of the entries in the log.')
logTimeStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3, 1), ).setIndexNames((0, "EMD-MIB", "logIndex"))
if mibBuilder.loadTexts: logTimeStampEntry.setStatus('current')
if mibBuilder.loadTexts: logTimeStampEntry.setDescription('An entry containing the timestamp for log entries.')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: logIndex.setStatus('current')
if mibBuilder.loadTexts: logIndex.setDescription('A unique value for each entry in the log. Its value ranges between 1 and the value of logSize.')
logTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTimeStamp.setStatus('current')
if mibBuilder.loadTexts: logTimeStamp.setDescription('The time when the data was collected. It is measured in seconds relative to January 1, 1970 (midnight UTC/GMT), i.e a value of 0 indicates January 1, 1970 (midnight UTC/GMT).')
externalSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1), )
if mibBuilder.loadTexts: externalSensorLogTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorLogTable.setDescription('A list of external sensor entries. The number of entries is given by the value of externalSensorCount for the EMD.')
externalSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"), (0, "EMD-MIB", "logIndex"))
if mibBuilder.loadTexts: externalSensorLogEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorLogEntry.setDescription('An entry containing log objects for an external sensor.')
logExternalSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setDescription('Is data available for this sensor during this measurement period?')
logExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorState.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorState.setDescription('The sensor state.')
logExternalSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorAvgValue.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorAvgValue.setDescription('The sensor reading average value.')
logExternalSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMaxValue.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorMaxValue.setDescription('The sensor reading maximum value.')
logExternalSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMinValue.setStatus('current')
if mibBuilder.loadTexts: logExternalSensorMinValue.setDescription('The sensor reading minimum value.')
externalSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1), )
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setStatus('current')
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setDescription('A list of external sensor entries. The number of entries is given by the value of externalSensorCount for the EMD.')
externalSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setStatus('current')
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setDescription('An entry containing measurement objects for an external sensor.')
measurementsExternalSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setDescription('Is the sensor available?')
measurementsExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 2), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorState.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorState.setDescription('The sensor state.')
measurementsExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorValue.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorValue.setDescription('The sensor reading. This parameter does not apply to onOff, trip, vibration, waterDetection, smokeDetection sensors.')
measurementsExternalSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 2, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setDescription('The sensor reading timestamp.')
actuatorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1, 1), )
if mibBuilder.loadTexts: actuatorControlTable.setStatus('current')
if mibBuilder.loadTexts: actuatorControlTable.setDescription('A list of actuators for an EMX. ')
actuatorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1, 1, 1), ).setIndexNames((0, "EMD-MIB", "sensorID"))
if mibBuilder.loadTexts: actuatorControlEntry.setStatus('current')
if mibBuilder.loadTexts: actuatorControlEntry.setDescription('An entry for implementing user-initiated state changes for an actuator.')
actuatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 8, 5, 1, 1, 1, 1), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actuatorState.setStatus('current')
if mibBuilder.loadTexts: actuatorState.setDescription('The actuator state. A Get operation retrieves the state of the actuator. A Set operation changes the stae of the sensor. The valid states for set operations are on and Off. Attempting to set the state to any other value will generate an error. ')
userName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The user currently logged in.')
targetUser = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetUser.setStatus('current')
if mibBuilder.loadTexts: targetUser.setDescription('The user added, deleted, or modified.')
imageVersion = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
if mibBuilder.loadTexts: imageVersion.setDescription('The version of the upgrade image.')
roleName = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleName.setStatus('current')
if mibBuilder.loadTexts: roleName.setDescription('The role added, deleted, or modified.')
smtpMessageRecipients = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpMessageRecipients.setStatus('current')
if mibBuilder.loadTexts: smtpMessageRecipients.setDescription('Comma separated list of SMTP Message recipients')
smtpServer = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServer.setStatus('current')
if mibBuilder.loadTexts: smtpServer.setDescription('The IP address/host name of the SMTP server')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 7), SensorStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
if mibBuilder.loadTexts: oldSensorState.setDescription('The old sensor state used in Sensor State Transition traps.')
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorNumber.setStatus('current')
if mibBuilder.loadTexts: externalSensorNumber.setDescription('A unique value for each sensor. Its value ranges between 1 and the value of externalSensorCount.')
typeOfSensor = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 9), SensorTypeEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: typeOfSensor.setStatus('current')
if mibBuilder.loadTexts: typeOfSensor.setDescription('The type of sensor.')
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorDescription.setStatus('current')
if mibBuilder.loadTexts: errorDescription.setDescription('Description of the Error')
deviceChangedParameter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 11), DeviceIdentificationParameterEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceChangedParameter.setStatus('current')
if mibBuilder.loadTexts: deviceChangedParameter.setDescription('Description of the parameter(s) that changed.')
changedParameterNewValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: changedParameterNewValue.setStatus('current')
if mibBuilder.loadTexts: changedParameterNewValue.setDescription('The new value of the changed parameter')
lhxSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 13), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lhxSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: lhxSupportEnabled.setDescription('The new enabled state for Schroff LHX Support.')
webcamModel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamModel.setStatus('current')
if mibBuilder.loadTexts: webcamModel.setDescription('The model of the Webcam ')
webcamConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamConnectionPort.setStatus('current')
if mibBuilder.loadTexts: webcamConnectionPort.setDescription('The port to which the Webcam is connected ')
peripheralDeviceRomcode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceRomcode.setStatus('current')
if mibBuilder.loadTexts: peripheralDeviceRomcode.setDescription('The Romcode of an peripheral device')
peripheralDeviceFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 17), PeripheralDeviceFirmwareUpdateStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setStatus('current')
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setDescription('The firmware update state of an peripheral device')
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 18), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentInetPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentInetPortNumber.setDescription('The UDP port number used for accessing the SNMP agent on the device. Examples: If deviceCascadeType is portForwarding, then master: 50500 slave 1:50501 slave 2: 50502 ...... If cascading mode is not portForwarding and default (Standard) ports are being used, then port: 161')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 8, 0, 0, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: phoneNumber.setStatus('current')
if mibBuilder.loadTexts: phoneNumber.setDescription('The phone number of e.g. an SMS receiver.')
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 1)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemStarted.setStatus('current')
if mibBuilder.loadTexts: systemStarted.setDescription('The system has started.')
systemReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 2)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: systemReset.setStatus('current')
if mibBuilder.loadTexts: systemReset.setDescription('The system was reset. The conditions under which this trap is sent include, but are not limited to, the following. using the GUI - Maintenance->Reset Unit using the CLI - reset emd unit')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 3)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
if mibBuilder.loadTexts: userLogin.setDescription('A user logged in.')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 4)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
if mibBuilder.loadTexts: userLogout.setDescription('A user logged out.')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 5)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFailure.setDescription('A user authentication attempt failed.')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 6)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: userSessionTimeout.setDescription('A user timed out from the device.')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 7)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
if mibBuilder.loadTexts: userAdded.setDescription('A user was added to the system.')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 8)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userModified.setStatus('current')
if mibBuilder.loadTexts: userModified.setDescription('A user account was modified.')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 9)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
if mibBuilder.loadTexts: userDeleted.setDescription('A user was deleted from the system.')
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 10)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "roleName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleAdded.setStatus('current')
if mibBuilder.loadTexts: roleAdded.setDescription('A role was added to the system.')
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 11)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "roleName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleModified.setStatus('current')
if mibBuilder.loadTexts: roleModified.setDescription('A role was modified.')
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 12)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "roleName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: roleDeleted.setStatus('current')
if mibBuilder.loadTexts: roleDeleted.setDescription('A role was deleted from the system.')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 13)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateStarted.setDescription('The device update has started.')
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 14)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateCompleted.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateCompleted.setDescription('The device update has completed.')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 15)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
if mibBuilder.loadTexts: userBlocked.setDescription('A blocked user tried to log in.')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 16)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "targetUser"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: userPasswordChanged.setDescription('User password was changed.')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 17)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
if mibBuilder.loadTexts: passwordSettingsChanged.setDescription('Strong password settings changed.')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 18)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
if mibBuilder.loadTexts: firmwareValidationFailed.setDescription('Firmware validation failed.')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 19)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
if mibBuilder.loadTexts: logFileCleared.setDescription('The log file has been cleared.')
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 20)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: bulkConfigurationSaved.setStatus('current')
if mibBuilder.loadTexts: bulkConfigurationSaved.setDescription('Bulk Configuration saved.')
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 21)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: bulkConfigurationCopied.setStatus('current')
if mibBuilder.loadTexts: bulkConfigurationCopied.setDescription('Bulk Configuration saved.')
externalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 22)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "externalSensorNumber"), ("EMD-MIB", "typeOfSensor"), ("EMD-MIB", "measurementsExternalSensorTimeStamp"), ("EMD-MIB", "measurementsExternalSensorValue"), ("EMD-MIB", "measurementsExternalSensorState"), ("EMD-MIB", "oldSensorState"), ("EMD-MIB", "externalSensorSerialNumber"), ("EMD-MIB", "externalOnOffSensorSubtype"), ("EMD-MIB", "externalSensorChannelNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: externalSensorStateChange.setStatus('current')
if mibBuilder.loadTexts: externalSensorStateChange.setDescription('External Sensor State Change.')
smtpMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 23)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "smtpMessageRecipients"), ("EMD-MIB", "smtpServer"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setStatus('current')
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setDescription('SMTP message transmission failure')
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 24)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: ldapError.setStatus('current')
if mibBuilder.loadTexts: ldapError.setDescription('LDAP Error occurred; errorDescription describes the error')
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 25)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceUpdateFailed.setStatus('current')
if mibBuilder.loadTexts: deviceUpdateFailed.setDescription('The device update has failed.')
pingServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 26)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pingServerEnabled.setStatus('current')
if mibBuilder.loadTexts: pingServerEnabled.setDescription('The ping feature has been enabled')
pingServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 27)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: pingServerDisabled.setStatus('current')
if mibBuilder.loadTexts: pingServerDisabled.setDescription('The ping feature has been disabled')
serverNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 28)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverNotReachable.setStatus('current')
if mibBuilder.loadTexts: serverNotReachable.setDescription('The server is not reachable')
serverReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 29)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverReachable.setStatus('current')
if mibBuilder.loadTexts: serverReachable.setDescription('The server is reachable')
deviceIdentificationChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 30)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceChangedParameter"), ("EMD-MIB", "changedParameterNewValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceIdentificationChanged.setStatus('current')
if mibBuilder.loadTexts: deviceIdentificationChanged.setDescription('Device identification has changed')
usbSlaveConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 31)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: usbSlaveConnected.setStatus('current')
if mibBuilder.loadTexts: usbSlaveConnected.setDescription('USB Connectivity to slave has been established')
usbSlaveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 32)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: usbSlaveDisconnected.setStatus('current')
if mibBuilder.loadTexts: usbSlaveDisconnected.setDescription('USB Connectivity to slave has been lost')
lhxSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 33)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("EMD-MIB", "lhxSupportEnabled"))
if mibBuilder.loadTexts: lhxSupportChanged.setStatus('current')
if mibBuilder.loadTexts: lhxSupportChanged.setDescription("The Schroff LHX Support changed to state 'lhxSupportEnabled'.")
userAcceptedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 34)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setStatus('current')
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setDescription('The user accepted the Restricted Service Agreement.')
userDeclinedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 35)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setStatus('current')
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setDescription('The user declined the Restricted Service Agreement.')
deviceSettingsSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 36)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceSettingsSaved.setStatus('current')
if mibBuilder.loadTexts: deviceSettingsSaved.setDescription('Device Settings have been saved.')
deviceSettingsRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 37)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "userName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: deviceSettingsRestored.setStatus('current')
if mibBuilder.loadTexts: deviceSettingsRestored.setDescription('Device Settings have been restored.')
webcamInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 38)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "webcamModel"), ("EMD-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: webcamInserted.setStatus('current')
if mibBuilder.loadTexts: webcamInserted.setDescription('A webcam has been inserted')
webcamRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 39)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "webcamModel"), ("EMD-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: webcamRemoved.setStatus('current')
if mibBuilder.loadTexts: webcamRemoved.setDescription('A webcam has been removed')
serverConnectivityUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 40)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setStatus('current')
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setDescription('The connection to the server could not be recovered')
radiusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 41)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: radiusError.setStatus('current')
if mibBuilder.loadTexts: radiusError.setDescription('LDAP Error occurred; errorDescription describes the error')
serverReachabilityError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 42)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "serverIPAddress"), ("EMD-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: serverReachabilityError.setStatus('current')
if mibBuilder.loadTexts: serverReachabilityError.setDescription('Server Reachability Error occurred; errorDescription describes the error. This trap is sent when the Error state is entered. Reasons for transitioning to the Error state include the following: Unable to resolve the server hostname.')
unknownPeripheralDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 43)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "peripheralDeviceRomcode"), ("EMD-MIB", "peripheralDevicePackagePosition"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setStatus('current')
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setDescription('An unknown peripheral device was attached.')
peripheralDeviceFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 44)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "peripheralDevicePackageSerialNumber"), ("EMD-MIB", "peripheralDeviceFirmwareUpdateState"), ("EMD-MIB", "peripheralDevicePackageFirmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setStatus('current')
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setDescription('The firmware update state of a peripheral device changed while performing update to peripheralDevicePackageFirmwareVersion.')
smsMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 8, 0, 45)).setObjects(("EMD-MIB", "deviceName"), ("EMD-MIB", "deviceInetAddressType"), ("EMD-MIB", "deviceInetIPAddress"), ("EMD-MIB", "agentInetPortNumber"), ("EMD-MIB", "phoneNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"))
if mibBuilder.loadTexts: smsMessageTransmissionFailure.setStatus('current')
if mibBuilder.loadTexts: smsMessageTransmissionFailure.setDescription('Sending an SMS message failed.')
mibBuilder.exportSymbols("EMD-MIB", logSize=logSize, userAuthenticationFailure=userAuthenticationFailure, configGroup=configGroup, lhxSupportChanged=lhxSupportChanged, peripheralDevicePackagePosition=peripheralDevicePackagePosition, userAcceptedRestrictedServiceAgreement=userAcceptedRestrictedServiceAgreement, firstNTPServerAddressType=firstNTPServerAddressType, serverReachabilityError=serverReachabilityError, emd=emd, deviceIdentificationChanged=deviceIdentificationChanged, externalSensorTypeDefaultHysteresis=externalSensorTypeDefaultHysteresis, newestLogID=newestLogID, userPasswordChanged=userPasswordChanged, hardwareVersion=hardwareVersion, externalSensorIsActuator=externalSensorIsActuator, externalSensorTypeDefaultLowerCriticalThreshold=externalSensorTypeDefaultLowerCriticalThreshold, PeripheralDeviceFirmwareUpdateStateEnumeration=PeripheralDeviceFirmwareUpdateStateEnumeration, usbSlaveConnected=usbSlaveConnected, serverIPAddress=serverIPAddress, userBlocked=userBlocked, serverID=serverID, deviceSettingsRestored=deviceSettingsRestored, logGroup=logGroup, externalSensorChannelNumber=externalSensorChannelNumber, control=control, firmwareVersion=firmwareVersion, logConfiguration=logConfiguration, userLogout=userLogout, trapInformationGroup=trapInformationGroup, peripheralDevicePackageMinFirmwareVersion=peripheralDevicePackageMinFirmwareVersion, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, deviceName=deviceName, serverReachabilityTable=serverReachabilityTable, bulkConfigurationSaved=bulkConfigurationSaved, logExternalSensorAvgValue=logExternalSensorAvgValue, peripheralDevicePackageId=peripheralDevicePackageId, externalSensorResolution=externalSensorResolution, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, externalSensorHysteresis=externalSensorHysteresis, actuatorControlEntry=actuatorControlEntry, oldSensorState=oldSensorState, deviceUpdateStarted=deviceUpdateStarted, userSessionTimeout=userSessionTimeout, externalSensors=externalSensors, groups=groups, firmwareValidationFailed=firmwareValidationFailed, externalSensorDecimalDigits=externalSensorDecimalDigits, roleDeleted=roleDeleted, externalSensorDescription=externalSensorDescription, logExternalSensorDataAvailable=logExternalSensorDataAvailable, peripheralDeviceFirmwareUpdateState=peripheralDeviceFirmwareUpdateState, externalSensorCount=externalSensorCount, radiusError=radiusError, externalSensorTolerance=externalSensorTolerance, firstNTPServerAddress=firstNTPServerAddress, phoneNumber=phoneNumber, externalOnOffSensorSubtype=externalOnOffSensorSubtype, peripheralDevicePackageSerialNumber=peripheralDevicePackageSerialNumber, measurementsGroup=measurementsGroup, userName=userName, deviceChangedParameter=deviceChangedParameter, serverReachable=serverReachable, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, externalSensorYCoordinate=externalSensorYCoordinate, externalSensorTypeDefaultLowerWarningThreshold=externalSensorTypeDefaultLowerWarningThreshold, actuatorState=actuatorState, externalSensorTypeDefaultStateChangeDelay=externalSensorTypeDefaultStateChangeDelay, complianceRev1=complianceRev1, peripheralDevicePackageFirmwareTimeStamp=peripheralDevicePackageFirmwareTimeStamp, controlGroup=controlGroup, ldapError=ldapError, externalSensorPort=externalSensorPort, logExternalSensorState=logExternalSensorState, measurementsExternalSensorTimeStamp=measurementsExternalSensorTimeStamp, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, conformance=conformance, ExternalSensorsZCoordinateUnitsEnumeration=ExternalSensorsZCoordinateUnitsEnumeration, smtpMessageTransmissionFailure=smtpMessageTransmissionFailure, serverCount=serverCount, oldestLogID=oldestLogID, serverPingEnabled=serverPingEnabled, compliances=compliances, model=model, pingServerEnabled=pingServerEnabled, peripheralDevicesAutoManagement=peripheralDevicesAutoManagement, log=log, deviceInetGateway=deviceInetGateway, externalSensorTypeDefaultThresholdsEntry=externalSensorTypeDefaultThresholdsEntry, logFileCleared=logFileCleared, peripheralDevicePackageTable=peripheralDevicePackageTable, deviceSettingsSaved=deviceSettingsSaved, externalSensorTypeDefaultUpperCriticalThreshold=externalSensorTypeDefaultUpperCriticalThreshold, unitConfiguration=unitConfiguration, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, logExternalSensorMaxValue=logExternalSensorMaxValue, deviceInetIPAddress=deviceInetIPAddress, externalSensorAccuracy=externalSensorAccuracy, measurements=measurements, roleName=roleName, pingServerDisabled=pingServerDisabled, synchronizeWithNTPServer=synchronizeWithNTPServer, unknownPeripheralDeviceAttached=unknownPeripheralDeviceAttached, lhxSupportEnabled=lhxSupportEnabled, SensorStateEnumeration=SensorStateEnumeration, PYSNMP_MODULE_ID=raritan, trapInformation=trapInformation, measurementsExternalSensorIsAvailable=measurementsExternalSensorIsAvailable, actuatorControlTable=actuatorControlTable, userDeclinedRestrictedServiceAgreement=userDeclinedRestrictedServiceAgreement, DeviceIdentificationParameterEnumeration=DeviceIdentificationParameterEnumeration, targetUser=targetUser, roleModified=roleModified, secondNTPServerAddress=secondNTPServerAddress, SensorTypeEnumeration=SensorTypeEnumeration, externalSensorConfigurationEntry=externalSensorConfigurationEntry, errorDescription=errorDescription, logExternalSensor=logExternalSensor, peripheralDeviceRomcode=peripheralDeviceRomcode, configuration=configuration, peripheralDevicePackageEntry=peripheralDevicePackageEntry, externalSensorLogTable=externalSensorLogTable, webcamRemoved=webcamRemoved, deviceUpdateCompleted=deviceUpdateCompleted, actuatorControl=actuatorControl, dataLogging=dataLogging, dataLoggingEnableForAllSensors=dataLoggingEnableForAllSensors, externalSensorTypeDefaultEnabledThresholds=externalSensorTypeDefaultEnabledThresholds, externalSensorMinimum=externalSensorMinimum, peripheralDevicePackageModel=peripheralDevicePackageModel, externalSensorType=externalSensorType, measurementPeriod=measurementPeriod, serverConnectivityUnrecoverable=serverConnectivityUnrecoverable, externalSensorMeasurementsEntry=externalSensorMeasurementsEntry, externalSensorName=externalSensorName, deviceMACAddress=deviceMACAddress, externalSensorLogEntry=externalSensorLogEntry, imageVersion=imageVersion, userLogin=userLogin, serverNotReachable=serverNotReachable, usbSlaveDisconnected=usbSlaveDisconnected, traps=traps, deviceUpdateFailed=deviceUpdateFailed, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, logTimeStampEntry=logTimeStampEntry, typeOfSensor=typeOfSensor, agentInetPortNumber=agentInetPortNumber, bulkConfigurationCopied=bulkConfigurationCopied, secondNTPServerAddressType=secondNTPServerAddressType, externalSensorUnits=externalSensorUnits, externalSensorXCoordinate=externalSensorXCoordinate, externalSensorAlarmedToNormalDelay=externalSensorAlarmedToNormalDelay, peripheralDevicePackageFirmwareVersion=peripheralDevicePackageFirmwareVersion, serverReachabilityEntry=serverReachabilityEntry, deviceInetNetmask=deviceInetNetmask, externalSensorTypeDefaultThresholdsTable=externalSensorTypeDefaultThresholdsTable, systemReset=systemReset, measurementsExternalSensorState=measurementsExternalSensorState, externalSensorZCoordinate=externalSensorZCoordinate, measurementsExternalSensor=measurementsExternalSensor, logTimeStamp=logTimeStamp, logTimeStampTable=logTimeStampTable, smtpMessageRecipients=smtpMessageRecipients, userAdded=userAdded, measurementsPerLogEntry=measurementsPerLogEntry, SensorUnitsEnumeration=SensorUnitsEnumeration, externalSensorNumber=externalSensorNumber, logExternalSensorMinValue=logExternalSensorMinValue, externalSensorMaximum=externalSensorMaximum, webcamModel=webcamModel, externalSensorTypeDefaultUpperWarningThreshold=externalSensorTypeDefaultUpperWarningThreshold, raritan=raritan, externalSensorMeasurementsTable=externalSensorMeasurementsTable, managedExternalSensorCount=managedExternalSensorCount, deviceInetAddressType=deviceInetAddressType, externalSensorStateChange=externalSensorStateChange, webcamInserted=webcamInserted, unit=unit, HundredthsOfAPercentage=HundredthsOfAPercentage, cascadedDeviceConnected=cascadedDeviceConnected, logIndex=logIndex, externalSensorEnabledThresholds=externalSensorEnabledThresholds, systemStarted=systemStarted, userModified=userModified, webcamConnectionPort=webcamConnectionPort, sensorID=sensorID, externalSensorUseDefaultThresholds=externalSensorUseDefaultThresholds, smsMessageTransmissionFailure=smsMessageTransmissionFailure, serverReachability=serverReachability, roleAdded=roleAdded, externalSensorSerialNumber=externalSensorSerialNumber, passwordSettingsChanged=passwordSettingsChanged, smtpServer=smtpServer, externalSensorConfigurationTable=externalSensorConfigurationTable, trapsGroup=trapsGroup, changedParameterNewValue=changedParameterNewValue, externalSensorStateChangeDelay=externalSensorStateChangeDelay, utcOffset=utcOffset, userDeleted=userDeleted, logUnit=logUnit, peripheralDeviceFirmwareUpdate=peripheralDeviceFirmwareUpdate, peripheralDevicePackageState=peripheralDevicePackageState, measurementsExternalSensorValue=measurementsExternalSensorValue)
