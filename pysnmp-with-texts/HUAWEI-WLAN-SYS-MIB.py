#
# PySNMP MIB module HUAWEI-WLAN-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-WLAN-SYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
hwWlan, = mibBuilder.importSymbols("HUAWEI-WLAN-MIB", "hwWlan")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, IpAddress, iso, Gauge32, Unsigned32, Counter32, ObjectIdentity, TimeTicks, NotificationType, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "IpAddress", "iso", "Gauge32", "Unsigned32", "Counter32", "ObjectIdentity", "TimeTicks", "NotificationType", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hwWlanSysManagement = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1))
hwWlanSysManagement.setRevisions(('2014-10-23 16:00', '2014-03-21 16:00', '2013-12-20 09:58', '2013-11-12 10:16', '2013-11-12 10:16', '2013-10-23 17:22', '2013-05-23 00:00', '2010-11-01 00:00', '2010-09-27 00:00', '2010-09-15 00:00', '2010-09-10 00:00', '2010-07-06 00:00', '2010-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwWlanSysManagement.setRevisionsDescriptions(('add table of hwWlanInterAcManagement,and notes for inter-ac dtls.', 'add node of hwWlanAcSourceIPv4Address for table hwWlanAcSourceInterface.', 'The MIB module defines the ap update operation.', 'add node of 80M for table hwWlanConfigChannel', 'add node of 80M for table hwWlanConfigChannel', ' V1.07, Add for v2r5. ', ' V1.06, Add for wifi location and spectrum analysis. ', ' V1.05, Add hwWlanAcProtectIpAddress for IP address of the backup AC, Add hwWlanAcProtectPriority for Dual-link hot backup priorities, Add hwWlanAcProtectSwitch for Dual-link hot backup switch. ', " V1.04, Add hwWlanCapwapConfig for supportting configuration of CAPWAP parameter. Add hwWlanCapwapKeepAliveInterval for supportting configuration of CAPWAP keep-alive interval, in seconds. Add hwWlanCapwapKeepAliveTimes for supportting configuration of CAPWAP keep-alive times. hwWlanCarrierId add a enum 'other'. Add batch query function. Add hwWlanAcCapwapControlPacketPriority for ac's priority value of CAPWAP control packet. Add hwWlanApCapwapControlPacketPriority for ap's priority value of CAPWAP control packet. ", ' V1.03, Add hwWlanBatchQuery for the supporting batch query. ', ' V1.02, Add hwWlanAcSourceInterface for the supporting configuration of wlan ac source interface. ', ' V1.01, Add trap restrain. ', ' V1.00, Inital version. ',))
if mibBuilder.loadTexts: hwWlanSysManagement.setLastUpdated('201410231600Z')
if mibBuilder.loadTexts: hwWlanSysManagement.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwWlanSysManagement.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwWlanSysManagement.setDescription('add table of hwWlanStaIpv6Switch,and notes for sta ipv6 service.')
hwWlanTrapRestrain = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1))
hwWlanTrapRestrainAll = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanTrapRestrainAll.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrapRestrainAll.setDescription('All wlan trap restrain switch. If this switch is enabled, all the traps on ac will not be sent.')
hwWlanTrapSeverityRestrain = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1, 2))
hwWlanTrapSeverityRestrainSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanTrapSeverityRestrainSeverity.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrapSeverityRestrainSeverity.setDescription('Wlan trap restrain by severity. critical: means the trap whose severity is not higner than critical will not be sent. major: means the trap whose severity is not higner than major will not be sent. minor: means the trap whose severity is not higner than minor will not be sent. warning: means the trap whose severity is not higner than warning will not be sent. none: means all the severities of traps can be sent.')
hwWlanApRegionTrapRestrain = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1, 3))
hwWlanApRegionTrapRestrainRegionIndexMask = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanApRegionTrapRestrainRegionIndexMask.setStatus('current')
if mibBuilder.loadTexts: hwWlanApRegionTrapRestrainRegionIndexMask.setDescription("Wlan trap restrain by ap region. Every bit is used to describe the region's trap will be restrained or not. 0 means not restrain, and 1 means restrain. Each Byte describes 8 regions are restrained or not. The value of this node is hexadecimal integer block. For example, the first Byte describes region 0~7 is restrained or not, and the second Byte describes region 8~15 is restrained or not. Such as, if only region 0,4,5,6,7,9 is restrain, the binary number is 11110001 and 00000010, the hexadecimal number is 0xF1 and 0x2, so the first Byte of this node is 0xF1, and the second Byte is 0x2.")
hwWlanApTrapRestrain = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1, 4))
hwWlanApTrapRestrainApIndexMask = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 1, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanApTrapRestrainApIndexMask.setStatus('current')
if mibBuilder.loadTexts: hwWlanApTrapRestrainApIndexMask.setDescription("Wlan trap restrain by ap. Every bit is used to describe the ap's trap will be restrained or not. 0 means not restrain, and 1 means restrain. Each Byte describes 8 aps are restrained or not. The value of this node is hexadecimal integer block. For example, the first Byte describes ap 0~7 is restrained or not, and the second Byte describes ap 8~15 is restrained or not. Such as, if only ap 0,4,5,6,7,9 is restrain, the binary number is 11110001 and 00000010, the hexadecimal number is 0xF1 and 0x2, so the first Byte of this node is 0xF1, and the second Byte is 0x2.")
hwWlanSysPara = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2))
hwWlanCarrierId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 65535))).clone(namedValues=NamedValues(("cmcc", 1), ("ctc", 2), ("cuc", 3), ("other", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanCarrierId.setStatus('current')
if mibBuilder.loadTexts: hwWlanCarrierId.setDescription("The carrier identification. cmcc means 'China mobile communications corporation' , ctc means 'China telecom company' , cuc means 'China unicom company', other means 'Other company', ")
hwWlanAcId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcId.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcId.setDescription('The ac identification. The carrier must set ac id and carrier id before use. In this case, APs can check each other whether blong to a same AC. ')
hwWlanForwardMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ess", 1), ("ap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanForwardMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanForwardMode.setDescription('AC forward mode.It can be set ess(1): ess mode ap(2): ap mode ')
hwWlanAcNEnumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcNEnumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcNEnumber.setDescription('Description.')
hwWlanAcAccessMaxApNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanAcAccessMaxApNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcAccessMaxApNumber.setDescription('Description.')
hwAcCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAcCountryCode.setStatus('current')
if mibBuilder.loadTexts: hwAcCountryCode.setDescription('Description.')
hwWlanApUsername = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanApUsername.setStatus('current')
if mibBuilder.loadTexts: hwWlanApUsername.setDescription('Description: When set, need to together with password, and the username length is 4 to 31 characters.')
hwWlanApPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanApPassword.setStatus('current')
if mibBuilder.loadTexts: hwWlanApPassword.setDescription('Description: When set, need to together with username, and the password length is 8 to 32 characters which must contain at least one capital letter, one lowcase letter and one number.')
hwWlanUsernamePasswordApId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanUsernamePasswordApId.setStatus('current')
if mibBuilder.loadTexts: hwWlanUsernamePasswordApId.setDescription("Description: The node is useful only when get the username or password and must be set first and read with username or password. When get the username or password without the node ,it means get the gloable configuration from AC, otherwise, it means get the specified AP' username or password from AP. For when change the username or password,and not commit, the AC's configuration is diffrent with AP' real configuration. When specified the AP ID , and the AP is not in the normal state, return the username or password from AC's gloable configuration.")
hwWlanApLldpSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanApLldpSwitch.setStatus('current')
if mibBuilder.loadTexts: hwWlanApLldpSwitch.setDescription('Description: Global AP LLDP switch.')
hwWlanAcAccessMaxStaNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanAcAccessMaxStaNumber.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcAccessMaxStaNumber.setDescription('Description.')
hwWlanAcDtlsSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcDtlsSwitch.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcDtlsSwitch.setDescription('Description.')
hwWlanAcDtlsPsk = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcDtlsPsk.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcDtlsPsk.setDescription('Description.')
hwWlanApLogManualBackupApId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanApLogManualBackupApId.setStatus('current')
if mibBuilder.loadTexts: hwWlanApLogManualBackupApId.setDescription('Description.')
hwWlanAcDtlsDefaultPskSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcDtlsDefaultPskSwitch.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcDtlsDefaultPskSwitch.setDescription('Description.')
hwWlanWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("ap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanWorkMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanWorkMode.setDescription('Description.')
hwWlanIpv6Enable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanIpv6Enable.setStatus('current')
if mibBuilder.loadTexts: hwWlanIpv6Enable.setDescription('Description.')
hwWlanInterAcDtlsEncrpyt = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanInterAcDtlsEncrpyt.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterAcDtlsEncrpyt.setDescription('Description.')
hwWlanInterAcDtlsPsk = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanInterAcDtlsPsk.setStatus('current')
if mibBuilder.loadTexts: hwWlanInterAcDtlsPsk.setDescription('Description.')
hwWlanStaIpv6Switch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanStaIpv6Switch.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaIpv6Switch.setDescription('Whether to process IPv6 services of STAs.')
hwWlanAcSourceInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 3))
hwWlanAcSourceInterfaceValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcSourceInterfaceValue.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcSourceInterfaceValue.setDescription('the value of wlan ac source interface. ')
hwWlanAcSourceInterfaceMethod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("vlanif", 2), ("loopback", 3), ("ipaddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcSourceInterfaceMethod.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcSourceInterfaceMethod.setDescription('operation method of wlan ac source interface.It can be set default(1): use default setting vlanif(2): use vlanif interface loopback(3): use loopback interface ipaddress(4):user ip address ')
hwWlanAcSourceIPv4Address = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcSourceIPv4Address.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcSourceIPv4Address.setDescription('Description.')
hwWlanBatchQuery = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4))
hwWlanBatchQueryType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 65535))).clone(namedValues=NamedValues(("apProfName", 1), ("apWhiteListMac", 2), ("apWhiteListSn", 3), ("apBlackListMac", 4), ("apBlackListSn", 5), ("apRegionId", 6), ("apRegionIdModeName", 7), ("apId", 8), ("apIdState", 9), ("apIdStateRegionName", 10), ("unauthApIdMac", 11), ("radioProfName", 12), ("radioBalanceGroupName", 13), ("uncontrolApIdBssidAuthApId", 14), ("essNameSsid", 15), ("wmmProfName", 16), ("trafficProfName", 17), ("secProfName", 18), ("authMacStateType", 19), ("clear", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchQueryType.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchQueryType.setDescription('Data type of Batch query. For example, apProfName(1) can be used to get ap-profile-name list. The batch query support two modes, the number mode and the ID list mode, binding the node hwWlanBatchRequestNum and hwWlanBatchStartCount means use the number mode, binding the node hwWlanBatchRequestIdList, hwWlanBatchRequestIdSize hwWlanBatchRequestIdNum means use the ID list mode. ')
hwWlanBatchRequestNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchRequestNum.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchRequestNum.setDescription('The request number of the batch query, it used in number mode. This node must be set in company with the node hwWlanBatchStartCount. For example, there are 6 ap-profiles(0 1 3 5 6 9) in the AC, Set hwWlanBatchQuery to apProfName(1), set hwWlanBatchRequestNum to 3, and set hwWlanBatchStartCount to 2, then get the node hwWlanBatchValueList and hwWlanBatchReturnNum, that means start from the 2nd ap-profile, get 3 ap-profile-names, the result in hwWlanBatchValueList are ap-profile(3 5 6 9). ')
hwWlanBatchStartCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchStartCount.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchStartCount.setDescription('The start count of the batch query, it used in number mode. This node must be set in company with the node hwWlanBatchRequestNum. For example, there are 6 ap-profiles(0 1 3 5 6 9) in the AC, Set hwWlanBatchQuery to apProfName(1), set hwWlanBatchRequestNum to 3, and set hwWlanBatchStartCount to 2, then get the node hwWlanBatchValueList and hwWlanBatchReturnNum, that means start from the 2nd ap-profile, get 3 ap-profile-names, the result in hwWlanBatchValueList are ap-profile(3 5 6 9).')
hwWlanBatchRequestIdList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchRequestIdList.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchRequestIdList.setDescription('The ID list of the data type, It used in ID list mode. This node must be set in company with the node hwWlanBatchRequestIdSize and hwWlanBatchRequestIdNum. For example, Ther are 6 apid(0 1 3 4 5 6) int the AC, set hwWlanBatchQuery to apIdStateRegionName(10), set hwWlanBatchRequestIdList to #0x00 0x01 0x00 0x02 0x00 0x03 (ap1 ap2 ap3), set hwWlanBatchRequestIdSize to 2(bytes), and set hwWlanBatchRequestIdNum to 3, then get the node hwWlanBatchValueList and hwWlanBatchReturnNum. The result in hwWlanBatchValueList are apids(1 2 3)')
hwWlanBatchRequestIdSize = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchRequestIdSize.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchRequestIdSize.setDescription('The length of a batch query ID element, it used in ID list mode. This node must be set in company with the node hwWlanBatchRequestIdList and hwWlanBatchRequestIdNum. For example, Ther are 6 apid(0 1 3 4 5 6) int the AC, set hwWlanBatchQuery to apIdStateRegionName(10), set hwWlanBatchRequestIdList to #0x00 0x01 0x00 0x02 0x00 0x03 (ap1 ap2 ap3), set hwWlanBatchRequestIdSize to 2(bytes), and set hwWlanBatchRequestIdNum to 3, then get the node hwWlanBatchValueList and hwWlanBatchReturnNum. The result in hwWlanBatchValueList are apids(1 2 3)')
hwWlanBatchRequestIdNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanBatchRequestIdNum.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchRequestIdNum.setDescription('The number of batch query by id, it used in ID list mode. This node must be set in company with the node hwWlanBatchRequestIdList and hwWlanBatchRequestIdSize. For example, Ther are 6 apid(0 1 3 4 5 6) int the AC, set hwWlanBatchQuery to apIdStateRegionName(10), set hwWlanBatchRequestIdList to #0x00 0x01 0x00 0x02 0x00 0x03 (ap1 ap2 ap3), set hwWlanBatchRequestIdSize to 2(bytes), and set hwWlanBatchRequestIdNum to 3, then get the node hwWlanBatchValueList and hwWlanBatchReturnNum. The result in hwWlanBatchValueList are apids(1 2 3)')
hwWlanBatchValueList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6144))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanBatchValueList.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchValueList.setDescription("The returned value list. If the value ended by a string, each value is divided by '?', otherwise , each value will have a fixed length. This node must be get in company with the node hwWlanBatchReturnNum.")
hwWlanBatchReturnNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanBatchReturnNum.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchReturnNum.setDescription('The number of successful query. This node must be get in company with the node hwWlanBatchValueList.')
hwWlanBatchTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlanBatchTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchTotalNum.setDescription('Total number of current batch query. For example, There are 10 ap-Profiles in the AC, the value of this node will be 10.')
hwWlanCapwapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 5))
hwWlanCapwapKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanCapwapKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: hwWlanCapwapKeepAliveInterval.setDescription(' The interval of maintain freshness of the CAPWAP channel, in seconds. ')
hwWlanCapwapKeepAliveTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanCapwapKeepAliveTimes.setStatus('current')
if mibBuilder.loadTexts: hwWlanCapwapKeepAliveTimes.setDescription(' The times of maintain freshness of the CAPWAP channel before it timeout. ')
hwWlanCapwapControlPriorityACToAP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanCapwapControlPriorityACToAP.setStatus('current')
if mibBuilder.loadTexts: hwWlanCapwapControlPriorityACToAP.setDescription(" the ac's priority value of CAPWAP control packet,includ cos and tos, ranging between 0 and 7. ")
hwWlanCapwapControlPriorityAPToAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanCapwapControlPriorityAPToAC.setStatus('current')
if mibBuilder.loadTexts: hwWlanCapwapControlPriorityAPToAC.setDescription(" the ap's priority value of CAPWAP control packet,includ tos, ranging between 0 and 7. ")
hwWlanAcProtect = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6))
hwWlanAcProtectIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcProtectIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcProtectIpAddress.setDescription('IP address of the backup AC.')
hwWlanAcProtectPriority = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcProtectPriority.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcProtectPriority.setDescription('Dual-link hot backup priorities.')
hwWlanAcProtectSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcProtectSwitch.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcProtectSwitch.setDescription('Dual-link hot backup switch.')
hwWlanAcProtectRestoreSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcProtectRestoreSwitch.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcProtectRestoreSwitch.setDescription('Description.')
hwUndoWlanAcProtectIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUndoWlanAcProtectIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwUndoWlanAcProtectIpAddress.setDescription('Description.')
hwUndoWlanAcProtectPriority = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUndoWlanAcProtectPriority.setStatus('current')
if mibBuilder.loadTexts: hwUndoWlanAcProtectPriority.setDescription('Description.')
hwWlanAcProtectIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanAcProtectIpv6Address.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcProtectIpv6Address.setDescription('Description.')
hwWlanConfigChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7))
hwWlan24G20MconfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan24G20MconfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan24G20MconfigChannel.setDescription('Description.')
hwWlan24G40MPlusConfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan24G40MPlusConfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan24G40MPlusConfigChannel.setDescription('Description.')
hwWlan24G40MMinusConfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan24G40MMinusConfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan24G40MMinusConfigChannel.setDescription('Description.')
hwWlan5G20MConfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan5G20MConfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan5G20MConfigChannel.setDescription('Description.')
hwWlan5G40MPlusConfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan5G40MPlusConfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan5G40MPlusConfigChannel.setDescription('Description.')
hwWlan5G40MMinusConfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan5G40MMinusConfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan5G40MMinusConfigChannel.setDescription('Description.')
hwWlanConfigChannelApId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanConfigChannelApId.setStatus('current')
if mibBuilder.loadTexts: hwWlanConfigChannelApId.setDescription('Ap index, is used to identify AP uniquely.Query the configurable channel of the ap must contain apid otherwise query are global configurable channel.')
hwWlan24G80MConfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan24G80MConfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan24G80MConfigChannel.setDescription('Description.')
hwWlan5G80MConfigChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 7, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWlan5G80MConfigChannel.setStatus('current')
if mibBuilder.loadTexts: hwWlan5G80MConfigChannel.setDescription('Description.')
hwWlanStaLoadbalance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 8))
hwWlanStaLoadbalanceEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanStaLoadbalanceEnable.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaLoadbalanceEnable.setDescription('Description.')
hwWlanStaLoadbalanceMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanStaLoadbalanceMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaLoadbalanceMode.setDescription('Description.')
hwWlanStaLoadbalanceSessionGap = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanStaLoadbalanceSessionGap.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaLoadbalanceSessionGap.setDescription('Description.')
hwWlanStaLoadbalanceTrafficGap = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanStaLoadbalanceTrafficGap.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaLoadbalanceTrafficGap.setDescription('Description.')
hwWlanStaLoadbalanceAssociateThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanStaLoadbalanceAssociateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaLoadbalanceAssociateThreshold.setDescription('Description.')
hwWlanHsbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 9))
hwWlanHsbServiceType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("hsbGroup", 2), ("hsbService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanHsbServiceType.setStatus('current')
if mibBuilder.loadTexts: hwWlanHsbServiceType.setDescription('The hsb service type can be one of the three values: 1, 2, 3 (1: disable(1) 2: hsbGroup(2) 3: hsbService(3)). The default value of this node is 1.')
hwWlanHsbGroupId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 9, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanHsbGroupId.setStatus('current')
if mibBuilder.loadTexts: hwWlanHsbGroupId.setDescription('The id of the hsb group used. When hsb service type is disabled, the value of this node is 0xFFFFFFFF.')
hwWlanHsbTunnelId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 9, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanHsbTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwWlanHsbTunnelId.setDescription('The id of the hsb tunnel used. When hsb service type is disabled, the value of this node is 0xFFFFFFFF.')
hwWlanLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10))
hwWlanLocationServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationServerIP.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationServerIP.setDescription('Description.')
hwWlanLocationServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationServerPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationServerPort.setDescription('Description.')
hwWlanLocationSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationSourceIP.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationSourceIP.setDescription('Description.')
hwWlanLocationApReportToAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationApReportToAC.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationApReportToAC.setDescription('Description.')
hwWlanLocationApReportToServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationApReportToServerIp.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationApReportToServerIp.setDescription('Description.')
hwWlanLocationApReportToUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationApReportToUdpPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationApReportToUdpPort.setDescription('Description.')
hwWlanLocationApReportToIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationApReportToIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationApReportToIpv6Addr.setDescription('Description.')
hwWlanLocationAcReportToIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 10, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLocationAcReportToIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationAcReportToIpv6Addr.setDescription('Description.')
hwWlanSpectrumAnalysis = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11))
hwWlanSpectrumAnalysisServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanSpectrumAnalysisServerIP.setStatus('current')
if mibBuilder.loadTexts: hwWlanSpectrumAnalysisServerIP.setDescription('Description.')
hwWlanSpectrumAnalysisServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanSpectrumAnalysisServerPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanSpectrumAnalysisServerPort.setDescription('Description.')
hwWlanNonWifiDeviceAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanNonWifiDeviceAgeTime.setStatus('current')
if mibBuilder.loadTexts: hwWlanNonWifiDeviceAgeTime.setDescription('Description.')
hwWlanSpectrogramServerIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanSpectrogramServerIP.setStatus('current')
if mibBuilder.loadTexts: hwWlanSpectrogramServerIP.setDescription('Description.')
hwWlanSpectrogramServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanSpectrogramServerPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanSpectrogramServerPort.setDescription('Description.')
hwWlanSpectrumAnalysisServerIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanSpectrumAnalysisServerIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwWlanSpectrumAnalysisServerIPv6Addr.setDescription('Description.')
hwWlanSpectrogramServerIPv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 11, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanSpectrogramServerIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwWlanSpectrogramServerIPv6Addr.setDescription('Description.')
hwWlanSysManagementObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12))
hwWlanLBSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1))
hwWlanLBSAeServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSAeServerPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSAeServerPort.setDescription('Description.')
hwWlanLBSAeApReportMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("toAc", 2), ("toServer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSAeApReportMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSAeApReportMode.setDescription('Description.')
hwWlanLBSAeApReportPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSAeApReportPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSAeApReportPort.setDescription('Description.')
hwWlanLBSEkServerIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSEkServerIp.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSEkServerIp.setDescription('Description.')
hwWlanLBSEkServerPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSEkServerPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSEkServerPort.setDescription('Description.')
hwWlanLBSEkApReportMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("toAc", 2), ("toServer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSEkApReportMode.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSEkApReportMode.setDescription('Description.')
hwWlanLBSEkApReportIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSEkApReportIp.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSEkApReportIp.setDescription('Description.')
hwWlanLBSEkApReportPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSEkApReportPort.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSEkApReportPort.setDescription('Description.')
hwWlanLBSSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSSourceIp.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSSourceIp.setDescription('Description.')
hwWlanLBSAeCompoundTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSAeCompoundTime.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSAeCompoundTime.setDescription('Compound Time of AeroScout Tag Message')
hwWlanLBSEkServerIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSEkServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSEkServerIpv6Addr.setDescription('Description.')
hwWlanLBSEkApReportIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSEkApReportIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSEkApReportIpv6Addr.setDescription('Description.')
hwWlanLBSSourceIpv6Addr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 12, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWlanLBSSourceIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSSourceIpv6Addr.setDescription('Description.')
hwInterAcManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 13))
hwMasterControllerSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMasterControllerSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMasterControllerSwitch.setDescription('Description.')
hwConnectMasterControllerSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnect", 1), ("connect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectMasterControllerSwitch.setStatus('current')
if mibBuilder.loadTexts: hwConnectMasterControllerSwitch.setDescription('Description.')
hwConnectMasterControllerIPv4Address = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectMasterControllerIPv4Address.setStatus('current')
if mibBuilder.loadTexts: hwConnectMasterControllerIPv4Address.setDescription('Description.')
hwConnectMasterControllerIPv6Address = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 13, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectMasterControllerIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hwConnectMasterControllerIPv6Address.setDescription('Description.')
hwWlanSysManagementConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14))
hwWlanSysManagementCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 1))
hwWlanSysManagementCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 1, 1)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanTrapRestrainGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanSysParaGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcSourceInterfaceGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchQueryGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanCapwapConfigGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcProtectGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanConfigChannelGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanStaLoadbalanceGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanHsbConfigGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanSpectrumAnalysisGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSConfigGroup"), ("HUAWEI-WLAN-SYS-MIB", "hwInterAcManagementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanSysManagementCompliance = hwWlanSysManagementCompliance.setStatus('current')
if mibBuilder.loadTexts: hwWlanSysManagementCompliance.setDescription('Description.')
hwWlanSysManagementObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2))
hwWlanTrapRestrainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 1)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanTrapRestrainAll"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanTrapSeverityRestrainSeverity"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanApRegionTrapRestrainRegionIndexMask"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanApTrapRestrainApIndexMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanTrapRestrainGroup = hwWlanTrapRestrainGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanTrapRestrainGroup.setDescription('Description.')
hwWlanSysParaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 2)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanCarrierId"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcId"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanForwardMode"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcNEnumber"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcAccessMaxApNumber"), ("HUAWEI-WLAN-SYS-MIB", "hwAcCountryCode"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanApUsername"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanApPassword"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanUsernamePasswordApId"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanApLldpSwitch"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcAccessMaxStaNumber"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcDtlsSwitch"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcDtlsPsk"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanApLogManualBackupApId"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcDtlsDefaultPskSwitch"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanWorkMode"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanIpv6Enable"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanInterAcDtlsEncrpyt"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanInterAcDtlsPsk"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanStaIpv6Switch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanSysParaGroup = hwWlanSysParaGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanSysParaGroup.setDescription('Description.')
hwWlanAcSourceInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 3)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanAcSourceInterfaceValue"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcSourceInterfaceMethod"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcSourceIPv4Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanAcSourceInterfaceGroup = hwWlanAcSourceInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcSourceInterfaceGroup.setDescription('Description.')
hwWlanBatchQueryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 4)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchQueryType"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchRequestNum"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchStartCount"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchRequestIdList"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchRequestIdSize"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchRequestIdNum"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchValueList"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchReturnNum"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanBatchTotalNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanBatchQueryGroup = hwWlanBatchQueryGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanBatchQueryGroup.setDescription('Description.')
hwWlanCapwapConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 5)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanCapwapKeepAliveInterval"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanCapwapKeepAliveTimes"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanCapwapControlPriorityACToAP"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanCapwapControlPriorityAPToAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanCapwapConfigGroup = hwWlanCapwapConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanCapwapConfigGroup.setDescription('Description.')
hwWlanAcProtectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 6)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanAcProtectIpAddress"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcProtectPriority"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcProtectSwitch"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcProtectRestoreSwitch"), ("HUAWEI-WLAN-SYS-MIB", "hwUndoWlanAcProtectIpAddress"), ("HUAWEI-WLAN-SYS-MIB", "hwUndoWlanAcProtectPriority"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanAcProtectIpv6Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanAcProtectGroup = hwWlanAcProtectGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanAcProtectGroup.setDescription('Description.')
hwWlanConfigChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 7)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlan24G20MconfigChannel"), ("HUAWEI-WLAN-SYS-MIB", "hwWlan24G40MPlusConfigChannel"), ("HUAWEI-WLAN-SYS-MIB", "hwWlan24G40MMinusConfigChannel"), ("HUAWEI-WLAN-SYS-MIB", "hwWlan5G20MConfigChannel"), ("HUAWEI-WLAN-SYS-MIB", "hwWlan5G40MPlusConfigChannel"), ("HUAWEI-WLAN-SYS-MIB", "hwWlan5G40MMinusConfigChannel"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanConfigChannelApId"), ("HUAWEI-WLAN-SYS-MIB", "hwWlan24G80MConfigChannel"), ("HUAWEI-WLAN-SYS-MIB", "hwWlan5G80MConfigChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanConfigChannelGroup = hwWlanConfigChannelGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanConfigChannelGroup.setDescription('Description.')
hwWlanStaLoadbalanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 8)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanStaLoadbalanceEnable"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanStaLoadbalanceMode"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanStaLoadbalanceSessionGap"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanStaLoadbalanceTrafficGap"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanStaLoadbalanceAssociateThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanStaLoadbalanceGroup = hwWlanStaLoadbalanceGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanStaLoadbalanceGroup.setDescription('Description.')
hwWlanHsbConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 9)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanHsbServiceType"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanHsbGroupId"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanHsbTunnelId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanHsbConfigGroup = hwWlanHsbConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanHsbConfigGroup.setDescription('Description.')
hwWlanLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 10)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationServerIP"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationServerPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationSourceIP"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationApReportToAC"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationApReportToServerIp"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationApReportToUdpPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationApReportToIpv6Addr"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLocationAcReportToIpv6Addr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanLocationGroup = hwWlanLocationGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanLocationGroup.setDescription('Description.')
hwWlanSpectrumAnalysisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 11)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanSpectrumAnalysisServerIP"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanSpectrumAnalysisServerPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanNonWifiDeviceAgeTime"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanSpectrogramServerIP"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanSpectrogramServerPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanSpectrumAnalysisServerIPv6Addr"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanSpectrogramServerIPv6Addr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanSpectrumAnalysisGroup = hwWlanSpectrumAnalysisGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanSpectrumAnalysisGroup.setDescription('Description.')
hwWlanLBSConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 12)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSAeServerPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSAeApReportMode"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSAeApReportPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSEkServerIp"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSEkServerPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSEkApReportMode"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSEkApReportIp"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSEkApReportPort"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSSourceIp"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSAeCompoundTime"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSEkServerIpv6Addr"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSEkApReportIpv6Addr"), ("HUAWEI-WLAN-SYS-MIB", "hwWlanLBSSourceIpv6Addr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwWlanLBSConfigGroup = hwWlanLBSConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwWlanLBSConfigGroup.setDescription('Description.')
hwInterAcManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 1, 14, 2, 13)).setObjects(("HUAWEI-WLAN-SYS-MIB", "hwMasterControllerSwitch"), ("HUAWEI-WLAN-SYS-MIB", "hwConnectMasterControllerSwitch"), ("HUAWEI-WLAN-SYS-MIB", "hwConnectMasterControllerIPv4Address"), ("HUAWEI-WLAN-SYS-MIB", "hwConnectMasterControllerIPv6Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwInterAcManagementGroup = hwInterAcManagementGroup.setStatus('current')
if mibBuilder.loadTexts: hwInterAcManagementGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-WLAN-SYS-MIB", hwWlan5G40MMinusConfigChannel=hwWlan5G40MMinusConfigChannel, hwWlanHsbTunnelId=hwWlanHsbTunnelId, hwConnectMasterControllerSwitch=hwConnectMasterControllerSwitch, hwWlanLocation=hwWlanLocation, hwWlan5G20MConfigChannel=hwWlan5G20MConfigChannel, hwWlanStaIpv6Switch=hwWlanStaIpv6Switch, hwWlanLocationApReportToIpv6Addr=hwWlanLocationApReportToIpv6Addr, hwWlanHsbGroupId=hwWlanHsbGroupId, hwWlan24G40MMinusConfigChannel=hwWlan24G40MMinusConfigChannel, hwWlanStaLoadbalanceTrafficGap=hwWlanStaLoadbalanceTrafficGap, hwWlanHsbConfigGroup=hwWlanHsbConfigGroup, hwWlanSysManagementConformance=hwWlanSysManagementConformance, hwWlanConfigChannelGroup=hwWlanConfigChannelGroup, hwWlanStaLoadbalanceGroup=hwWlanStaLoadbalanceGroup, hwWlanLBSEkServerPort=hwWlanLBSEkServerPort, hwAcCountryCode=hwAcCountryCode, hwWlanSpectrumAnalysisServerIPv6Addr=hwWlanSpectrumAnalysisServerIPv6Addr, hwWlanBatchRequestIdList=hwWlanBatchRequestIdList, hwWlanAcProtect=hwWlanAcProtect, hwUndoWlanAcProtectIpAddress=hwUndoWlanAcProtectIpAddress, hwWlanSpectrumAnalysisGroup=hwWlanSpectrumAnalysisGroup, hwWlanAcId=hwWlanAcId, hwWlanCarrierId=hwWlanCarrierId, hwWlanAcSourceIPv4Address=hwWlanAcSourceIPv4Address, hwWlanCapwapControlPriorityAPToAC=hwWlanCapwapControlPriorityAPToAC, hwWlanLBSEkApReportMode=hwWlanLBSEkApReportMode, hwWlanCapwapKeepAliveInterval=hwWlanCapwapKeepAliveInterval, hwWlanLBSSourceIpv6Addr=hwWlanLBSSourceIpv6Addr, hwWlanBatchQuery=hwWlanBatchQuery, hwWlanLocationApReportToServerIp=hwWlanLocationApReportToServerIp, hwWlanAcAccessMaxApNumber=hwWlanAcAccessMaxApNumber, hwWlanBatchTotalNum=hwWlanBatchTotalNum, hwWlanBatchRequestIdNum=hwWlanBatchRequestIdNum, hwWlan5G80MConfigChannel=hwWlan5G80MConfigChannel, hwWlanBatchRequestIdSize=hwWlanBatchRequestIdSize, hwWlanLBSEkApReportPort=hwWlanLBSEkApReportPort, hwConnectMasterControllerIPv6Address=hwConnectMasterControllerIPv6Address, hwWlanLocationGroup=hwWlanLocationGroup, hwWlanBatchValueList=hwWlanBatchValueList, PYSNMP_MODULE_ID=hwWlanSysManagement, hwWlanApTrapRestrain=hwWlanApTrapRestrain, hwWlan24G20MconfigChannel=hwWlan24G20MconfigChannel, hwConnectMasterControllerIPv4Address=hwConnectMasterControllerIPv4Address, hwWlanLBSAeServerPort=hwWlanLBSAeServerPort, hwWlanLocationApReportToUdpPort=hwWlanLocationApReportToUdpPort, hwWlanAcDtlsDefaultPskSwitch=hwWlanAcDtlsDefaultPskSwitch, hwWlanStaLoadbalanceSessionGap=hwWlanStaLoadbalanceSessionGap, hwWlanAcNEnumber=hwWlanAcNEnumber, hwWlanLBSEkApReportIp=hwWlanLBSEkApReportIp, hwWlanTrapRestrainGroup=hwWlanTrapRestrainGroup, hwWlanAcProtectIpAddress=hwWlanAcProtectIpAddress, hwWlanSysParaGroup=hwWlanSysParaGroup, hwWlanConfigChannelApId=hwWlanConfigChannelApId, hwWlanHsbServiceType=hwWlanHsbServiceType, hwWlanApRegionTrapRestrain=hwWlanApRegionTrapRestrain, hwWlanLocationServerIP=hwWlanLocationServerIP, hwWlanIpv6Enable=hwWlanIpv6Enable, hwWlanInterAcDtlsEncrpyt=hwWlanInterAcDtlsEncrpyt, hwWlanCapwapConfigGroup=hwWlanCapwapConfigGroup, hwWlanSysManagementCompliances=hwWlanSysManagementCompliances, hwWlanApLogManualBackupApId=hwWlanApLogManualBackupApId, hwWlanAcProtectRestoreSwitch=hwWlanAcProtectRestoreSwitch, hwWlanSysManagementObjects=hwWlanSysManagementObjects, hwWlanBatchReturnNum=hwWlanBatchReturnNum, hwWlanConfigChannel=hwWlanConfigChannel, hwWlanSysPara=hwWlanSysPara, hwWlanLBSAeApReportMode=hwWlanLBSAeApReportMode, hwWlanLBSAeApReportPort=hwWlanLBSAeApReportPort, hwWlanLBSEkServerIpv6Addr=hwWlanLBSEkServerIpv6Addr, hwWlanSpectrumAnalysisServerPort=hwWlanSpectrumAnalysisServerPort, hwWlanLocationServerPort=hwWlanLocationServerPort, hwWlanApUsername=hwWlanApUsername, hwWlanApPassword=hwWlanApPassword, hwInterAcManagement=hwInterAcManagement, hwWlanStaLoadbalanceEnable=hwWlanStaLoadbalanceEnable, hwWlanStaLoadbalanceAssociateThreshold=hwWlanStaLoadbalanceAssociateThreshold, hwWlanTrapSeverityRestrainSeverity=hwWlanTrapSeverityRestrainSeverity, hwWlanAcProtectPriority=hwWlanAcProtectPriority, hwWlanLBSEkApReportIpv6Addr=hwWlanLBSEkApReportIpv6Addr, hwInterAcManagementGroup=hwInterAcManagementGroup, hwWlanApLldpSwitch=hwWlanApLldpSwitch, hwWlanAcSourceInterfaceMethod=hwWlanAcSourceInterfaceMethod, hwWlanLocationApReportToAC=hwWlanLocationApReportToAC, hwUndoWlanAcProtectPriority=hwUndoWlanAcProtectPriority, hwWlanApRegionTrapRestrainRegionIndexMask=hwWlanApRegionTrapRestrainRegionIndexMask, hwWlanAcProtectIpv6Address=hwWlanAcProtectIpv6Address, hwWlan5G40MPlusConfigChannel=hwWlan5G40MPlusConfigChannel, hwWlanLocationSourceIP=hwWlanLocationSourceIP, hwWlanTrapRestrainAll=hwWlanTrapRestrainAll, hwWlanAcDtlsSwitch=hwWlanAcDtlsSwitch, hwWlanTrapRestrain=hwWlanTrapRestrain, hwWlanSpectrogramServerIP=hwWlanSpectrogramServerIP, hwWlanLBSEkServerIp=hwWlanLBSEkServerIp, hwMasterControllerSwitch=hwMasterControllerSwitch, hwWlanCapwapKeepAliveTimes=hwWlanCapwapKeepAliveTimes, hwWlanAcSourceInterfaceValue=hwWlanAcSourceInterfaceValue, hwWlanHsbConfig=hwWlanHsbConfig, hwWlanSpectrumAnalysisServerIP=hwWlanSpectrumAnalysisServerIP, hwWlanAcSourceInterfaceGroup=hwWlanAcSourceInterfaceGroup, hwWlanSysManagement=hwWlanSysManagement, hwWlanSpectrumAnalysis=hwWlanSpectrumAnalysis, hwWlanUsernamePasswordApId=hwWlanUsernamePasswordApId, hwWlanSysManagementObjectGroups=hwWlanSysManagementObjectGroups, hwWlanSpectrogramServerIPv6Addr=hwWlanSpectrogramServerIPv6Addr, hwWlanTrapSeverityRestrain=hwWlanTrapSeverityRestrain, hwWlanWorkMode=hwWlanWorkMode, hwWlanLocationAcReportToIpv6Addr=hwWlanLocationAcReportToIpv6Addr, hwWlanAcAccessMaxStaNumber=hwWlanAcAccessMaxStaNumber, hwWlanLBSSourceIp=hwWlanLBSSourceIp, hwWlanSpectrogramServerPort=hwWlanSpectrogramServerPort, hwWlanLBSConfig=hwWlanLBSConfig, hwWlanForwardMode=hwWlanForwardMode, hwWlanBatchQueryGroup=hwWlanBatchQueryGroup, hwWlanBatchQueryType=hwWlanBatchQueryType, hwWlanAcSourceInterface=hwWlanAcSourceInterface, hwWlanInterAcDtlsPsk=hwWlanInterAcDtlsPsk, hwWlanBatchStartCount=hwWlanBatchStartCount, hwWlanLBSConfigGroup=hwWlanLBSConfigGroup, hwWlanAcProtectSwitch=hwWlanAcProtectSwitch, hwWlanLBSAeCompoundTime=hwWlanLBSAeCompoundTime, hwWlanNonWifiDeviceAgeTime=hwWlanNonWifiDeviceAgeTime, hwWlanAcProtectGroup=hwWlanAcProtectGroup, hwWlan24G80MConfigChannel=hwWlan24G80MConfigChannel, hwWlanStaLoadbalance=hwWlanStaLoadbalance, hwWlanAcDtlsPsk=hwWlanAcDtlsPsk, hwWlanBatchRequestNum=hwWlanBatchRequestNum, hwWlan24G40MPlusConfigChannel=hwWlan24G40MPlusConfigChannel, hwWlanApTrapRestrainApIndexMask=hwWlanApTrapRestrainApIndexMask, hwWlanSysManagementCompliance=hwWlanSysManagementCompliance, hwWlanCapwapConfig=hwWlanCapwapConfig, hwWlanStaLoadbalanceMode=hwWlanStaLoadbalanceMode, hwWlanCapwapControlPriorityACToAP=hwWlanCapwapControlPriorityACToAP)
