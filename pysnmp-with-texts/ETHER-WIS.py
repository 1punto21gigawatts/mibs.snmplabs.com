#
# PySNMP MIB module ETHER-WIS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ETHER-WIS
# Produced by pysmi-0.3.4 at Wed May  1 13:06:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, transmission, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, IpAddress, MibIdentifier, Counter64, Unsigned32, ObjectIdentity, NotificationType, iso, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "transmission", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "IpAddress", "MibIdentifier", "Counter64", "Unsigned32", "ObjectIdentity", "NotificationType", "iso", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonetMediumLineType, sonetFarEndPathStuff2, sonetSESthresholdSet, sonetMediumStuff2, sonetSectionStuff2, sonetPathCurrentWidth, sonetPathStuff2, sonetMediumCircuitIdentifier, sonetMediumLoopbackConfig, sonetFarEndLineStuff2, sonetLineStuff2, sonetMediumLineCoding, sonetMediumType = mibBuilder.importSymbols("SONET-MIB", "sonetMediumLineType", "sonetFarEndPathStuff2", "sonetSESthresholdSet", "sonetMediumStuff2", "sonetSectionStuff2", "sonetPathCurrentWidth", "sonetPathStuff2", "sonetMediumCircuitIdentifier", "sonetMediumLoopbackConfig", "sonetFarEndLineStuff2", "sonetLineStuff2", "sonetMediumLineCoding", "sonetMediumType")
etherWisMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 134))
etherWisMIB.setRevisions(('2003-09-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etherWisMIB.setRevisionsDescriptions(('Initial version, published as RFC 3637.',))
if mibBuilder.loadTexts: etherWisMIB.setLastUpdated('200309190000Z')
if mibBuilder.loadTexts: etherWisMIB.setOrganization('IETF Ethernet Interfaces and Hub MIB Working Group')
if mibBuilder.loadTexts: etherWisMIB.setContactInfo('WG charter: http://www.ietf.org/html.charters/hubmib-charter.html Mailing Lists: General Discussion: hubmib@ietf.org To Subscribe: hubmib-request@ietf.org In Body: subscribe your_email_address Chair: Dan Romascanu Postal: Avaya Inc. Atidim Technology Park, Bldg. 3 Tel Aviv 61131 Israel Tel: +972 3 645 8414 E-mail: dromasca@avaya.com Editor: C. M. Heard Postal: 600 Rainbow Dr. #141 Mountain View, CA 94041-2542 USA Tel: +1 650-964-8391 E-mail: heard@pobox.com')
if mibBuilder.loadTexts: etherWisMIB.setDescription("The objects in this MIB module are used in conjunction with objects in the SONET-MIB and the MAU-MIB to manage the Ethernet WAN Interface Sublayer (WIS). The following reference is used throughout this MIB module: [IEEE 802.3 Std] refers to: IEEE Std 802.3, 2000 Edition: 'IEEE Standard for Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific requirements - Part 3: Carrier sense multiple access with collision detection (CSMA/CD) access method and physical layer specifications', as amended by IEEE Std 802.3ae-2002, 'IEEE Standard for Carrier Sense Multiple Access with Collision Detection (CSMA/CD) Access Method and Physical Layer Specifications - Media Access Control (MAC) Parameters, Physical Layer and Management Parameters for 10 Gb/s Operation', 30 August 2002. Of particular interest are Clause 50, 'WAN Interface Sublayer (WIS), type 10GBASE-W', Clause 30, '10Mb/s, 100Mb/s, 1000Mb/s, and 10Gb/s MAC Control, and Link Aggregation Management', and Clause 45, 'Management Data Input/Output (MDIO) Interface'. Copyright (C) The Internet Society (2003). This version of this MIB module is part of RFC 3637; see the RFC itself for full legal notices.")
etherWisObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 1))
etherWisObjectsPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 2))
etherWisConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 3))
etherWisDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 1, 1))
etherWisSection = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 1, 2))
etherWisPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 2, 1))
etherWisFarEndPath = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 2, 2))
etherWisDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1), )
if mibBuilder.loadTexts: etherWisDeviceTable.setStatus('current')
if mibBuilder.loadTexts: etherWisDeviceTable.setDescription('The table for Ethernet WIS devices')
etherWisDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etherWisDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: etherWisDeviceEntry.setDescription('An entry in the Ethernet WIS device table. For each instance of this object there MUST be a corresponding instance of sonetMediumEntry.')
etherWisDeviceTxTestPatternMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("squareWave", 2), ("prbs31", 3), ("mixedFrequency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherWisDeviceTxTestPatternMode.setReference('[IEEE 802.3 Std.], 50.3.8, WIS test pattern generator and checker, 45.2.2.6, 10G WIS control 2 register (2.7), and 45.2.2.7.2, PRBS31 pattern testing ability (2.8.1).')
if mibBuilder.loadTexts: etherWisDeviceTxTestPatternMode.setStatus('current')
if mibBuilder.loadTexts: etherWisDeviceTxTestPatternMode.setDescription('This variable controls the transmit test pattern mode. The value none(1) puts the the WIS transmit path into the normal operating mode. The value squareWave(2) puts the WIS transmit path into the square wave test pattern mode described in [IEEE 802.3 Std.] subclause 50.3.8.1. The value prbs31(3) puts the WIS transmit path into the PRBS31 test pattern mode described in [IEEE 802.3 Std.] subclause 50.3.8.2. The value mixedFrequency(4) puts the WIS transmit path into the mixed frequency test pattern mode described in [IEEE 802.3 Std.] subclause 50.3.8.3. Any attempt to set this object to a value other than none(1) when the corresponding instance of ifAdminStatus has the value up(1) MUST be rejected with the error inconsistentValue, and any attempt to set the corresponding instance of ifAdminStatus to the value up(1) when an instance of this object has a value other than none(1) MUST be rejected with the error inconsistentValue.')
etherWisDeviceRxTestPatternMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("prbs31", 3), ("mixedFrequency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherWisDeviceRxTestPatternMode.setReference('[IEEE 802.3 Std.], 50.3.8, WIS test pattern generator and checker, 45.2.2.6, 10G WIS control 2 register (2.7), and 45.2.2.7.2, PRBS31 pattern testing ability (2.8.1).')
if mibBuilder.loadTexts: etherWisDeviceRxTestPatternMode.setStatus('current')
if mibBuilder.loadTexts: etherWisDeviceRxTestPatternMode.setDescription('This variable controls the receive test pattern mode. The value none(1) puts the the WIS receive path into the normal operating mode. The value prbs31(3) puts the WIS receive path into the PRBS31 test pattern mode described in [IEEE 802.3 Std.] subclause 50.3.8.2. The value mixedFrequency(4) puts the WIS receive path into the mixed frequency test pattern mode described in [IEEE 802.3 Std.] subclause 50.3.8.3. Any attempt to set this object to a value other than none(1) when the corresponding instance of ifAdminStatus has the value up(1) MUST be rejected with the error inconsistentValue, and any attempt to set the corresponding instance of ifAdminStatus to the value up(1) when an instance of this object has a value other than none(1) MUST be rejected with the error inconsistentValue.')
etherWisDeviceRxTestPatternErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 1, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherWisDeviceRxTestPatternErrors.setReference('[IEEE 802.3 Std.], 50.3.8, WIS test pattern generator and checker, 45.2.2.7.2, PRBS31 pattern testing ability (2.8.1), and 45.2.2.8, 10G WIS test pattern error counter register (2.9).')
if mibBuilder.loadTexts: etherWisDeviceRxTestPatternErrors.setStatus('current')
if mibBuilder.loadTexts: etherWisDeviceRxTestPatternErrors.setDescription('This object counts the number of errors detected when the WIS receive path is operating in the PRBS31 test pattern mode. It is reset to zero when the WIS receive path initially enters that mode, and it increments each time the PRBS pattern checker detects an error as described in [IEEE 802.3 Std.] subclause 50.3.8.2 unless its value is 65535, in which case it remains unchanged. This object is writeable so that it may be reset upon explicit request of a command generator application while the WIS receive path continues to operate in PRBS31 test pattern mode.')
etherWisSectionCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1), )
if mibBuilder.loadTexts: etherWisSectionCurrentTable.setStatus('current')
if mibBuilder.loadTexts: etherWisSectionCurrentTable.setDescription('The table for the current state of Ethernet WIS sections.')
etherWisSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etherWisSectionCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: etherWisSectionCurrentEntry.setDescription('An entry in the etherWisSectionCurrentTable. For each instance of this object there MUST be a corresponding instance of sonetSectionCurrentEntry.')
etherWisSectionCurrentJ0Transmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherWisSectionCurrentJ0Transmitted.setReference('[IEEE 802.3 Std.], 30.8.1.1.8, aJ0ValueTX.')
if mibBuilder.loadTexts: etherWisSectionCurrentJ0Transmitted.setStatus('current')
if mibBuilder.loadTexts: etherWisSectionCurrentJ0Transmitted.setDescription("This is the 16-octet section trace message that is transmitted in the J0 byte. The value SHOULD be '89'h followed by fifteen octets of '00'h (or some cyclic shift thereof) when the section trace function is not used, and the implementation SHOULD use that value (or a cyclic shift thereof) as a default if no other value has been set.")
etherWisSectionCurrentJ0Received = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherWisSectionCurrentJ0Received.setReference('[IEEE 802.3 Std.], 30.8.1.1.9, aJ0ValueRX.')
if mibBuilder.loadTexts: etherWisSectionCurrentJ0Received.setStatus('current')
if mibBuilder.loadTexts: etherWisSectionCurrentJ0Received.setDescription('This is the 16-octet section trace message that was most recently received in the J0 byte.')
etherWisPathCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1), )
if mibBuilder.loadTexts: etherWisPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: etherWisPathCurrentTable.setDescription('The table for the current state of Ethernet WIS paths.')
etherWisPathCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etherWisPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: etherWisPathCurrentEntry.setDescription('An entry in the etherWisPathCurrentTable. For each instance of this object there MUST be a corresponding instance of sonetPathCurrentEntry.')
etherWisPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("etherWisPathLOP", 0), ("etherWisPathAIS", 1), ("etherWisPathPLM", 2), ("etherWisPathLCD", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherWisPathCurrentStatus.setReference('[IEEE 802.3 Std.], 30.8.1.1.18, aPathStatus.')
if mibBuilder.loadTexts: etherWisPathCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: etherWisPathCurrentStatus.setDescription('This variable indicates the current status of the path payload with a bit map that can indicate multiple defects at once. The bit positions are assigned as follows: etherWisPathLOP(0) This bit is set to indicate that an LOP-P (Loss of Pointer - Path) defect is being experienced. Note: when this bit is set, sonetPathSTSLOP MUST be set in the corresponding instance of sonetPathCurrentStatus. etherWisPathAIS(1) This bit is set to indicate that an AIS-P (Alarm Indication Signal - Path) defect is being experienced. Note: when this bit is set, sonetPathSTSAIS MUST be set in the corresponding instance of sonetPathCurrentStatus. etherWisPathPLM(1) This bit is set to indicate that a PLM-P (Payload Label Mismatch - Path) defect is being experienced. Note: when this bit is set, sonetPathSignalLabelMismatch MUST be set in the corresponding instance of sonetPathCurrentStatus. etherWisPathLCD(3) This bit is set to indicate that an LCD-P (Loss of Codegroup Delination - Path) defect is being experienced. Since this defect is detected by the PCS and not by the path layer itself, there is no corresponding bit in sonetPathCurrentStatus.')
etherWisPathCurrentJ1Transmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherWisPathCurrentJ1Transmitted.setReference('[IEEE 802.3 Std.], 30.8.1.1.23, aJ1ValueTX.')
if mibBuilder.loadTexts: etherWisPathCurrentJ1Transmitted.setStatus('current')
if mibBuilder.loadTexts: etherWisPathCurrentJ1Transmitted.setDescription("This is the 16-octet path trace message that is transmitted in the J1 byte. The value SHOULD be '89'h followed by fifteen octets of '00'h (or some cyclic shift thereof) when the path trace function is not used, and the implementation SHOULD use that value (or a cyclic shift thereof) as a default if no other value has been set.")
etherWisPathCurrentJ1Received = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherWisPathCurrentJ1Received.setReference('[IEEE 802.3 Std.], 30.8.1.1.24, aJ1ValueRX.')
if mibBuilder.loadTexts: etherWisPathCurrentJ1Received.setStatus('current')
if mibBuilder.loadTexts: etherWisPathCurrentJ1Received.setDescription('This is the 16-octet path trace message that was most recently received in the J1 byte.')
etherWisFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1), )
if mibBuilder.loadTexts: etherWisFarEndPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: etherWisFarEndPathCurrentTable.setDescription('The table for the current far-end state of Ethernet WIS paths.')
etherWisFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: etherWisFarEndPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: etherWisFarEndPathCurrentEntry.setDescription('An entry in the etherWisFarEndPathCurrentTable. For each instance of this object there MUST be a corresponding instance of sonetFarEndPathCurrentEntry.')
etherWisFarEndPathCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 134, 2, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("etherWisFarEndPayloadDefect", 0), ("etherWisFarEndServerDefect", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherWisFarEndPathCurrentStatus.setReference('[IEEE 802.3 Std.], 30.8.1.1.25, aFarEndPathStatus.')
if mibBuilder.loadTexts: etherWisFarEndPathCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: etherWisFarEndPathCurrentStatus.setDescription('This variable indicates the current status at the far end of the path using a bit map that can indicate multiple defects at once. The bit positions are assigned as follows: etherWisFarEndPayloadDefect(0) A far end payload defect (i.e., far end PLM-P or LCD-P) is currently being signaled in G1 bits 5-7. etherWisFarEndServerDefect(1) A far end server defect (i.e., far end LOP-P or AIS-P) is currently being signaled in G1 bits 5-7. Note: when this bit is set, sonetPathSTSRDI MUST be set in the corresponding instance of sonetPathCurrentStatus.')
etherWisGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 3, 1))
etherWisCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 134, 3, 2))
etherWisDeviceGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 1)).setObjects(("ETHER-WIS", "etherWisDeviceTxTestPatternMode"), ("ETHER-WIS", "etherWisDeviceRxTestPatternMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherWisDeviceGroupBasic = etherWisDeviceGroupBasic.setStatus('current')
if mibBuilder.loadTexts: etherWisDeviceGroupBasic.setDescription('A collection of objects that support test features required of all WIS devices.')
etherWisDeviceGroupExtra = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 2)).setObjects(("ETHER-WIS", "etherWisDeviceRxTestPatternErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherWisDeviceGroupExtra = etherWisDeviceGroupExtra.setStatus('current')
if mibBuilder.loadTexts: etherWisDeviceGroupExtra.setDescription('A collection of objects that support optional WIS device test features.')
etherWisSectionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 3)).setObjects(("ETHER-WIS", "etherWisSectionCurrentJ0Transmitted"), ("ETHER-WIS", "etherWisSectionCurrentJ0Received"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherWisSectionGroup = etherWisSectionGroup.setStatus('current')
if mibBuilder.loadTexts: etherWisSectionGroup.setDescription('A collection of objects that provide required information about a WIS section.')
etherWisPathGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 4)).setObjects(("ETHER-WIS", "etherWisPathCurrentStatus"), ("ETHER-WIS", "etherWisPathCurrentJ1Transmitted"), ("ETHER-WIS", "etherWisPathCurrentJ1Received"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherWisPathGroup = etherWisPathGroup.setStatus('current')
if mibBuilder.loadTexts: etherWisPathGroup.setDescription('A collection of objects that provide required information about a WIS path.')
etherWisFarEndPathGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 134, 3, 1, 5)).setObjects(("ETHER-WIS", "etherWisFarEndPathCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherWisFarEndPathGroup = etherWisFarEndPathGroup.setStatus('current')
if mibBuilder.loadTexts: etherWisFarEndPathGroup.setDescription('A collection of objects that provide required information about the far end of a WIS path.')
etherWisCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 134, 3, 2, 1)).setObjects(("ETHER-WIS", "etherWisDeviceGroupBasic"), ("ETHER-WIS", "etherWisSectionGroup"), ("ETHER-WIS", "etherWisPathGroup"), ("ETHER-WIS", "etherWisFarEndPathGroup"), ("SONET-MIB", "sonetMediumStuff2"), ("SONET-MIB", "sonetSectionStuff2"), ("SONET-MIB", "sonetLineStuff2"), ("SONET-MIB", "sonetFarEndLineStuff2"), ("SONET-MIB", "sonetPathStuff2"), ("SONET-MIB", "sonetFarEndPathStuff2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etherWisCompliance = etherWisCompliance.setStatus('current')
if mibBuilder.loadTexts: etherWisCompliance.setDescription('The compliance statement for interfaces that include the Ethernet WIS. Compliance with the following external compliance statements is prerequisite: MIB Module Compliance Statement ---------- -------------------- IF-MIB ifCompliance3 IF-INVERTED-STACK-MIB ifInvCompliance EtherLike-MIB dot3Compliance2 MAU-MIB mauModIfCompl3')
mibBuilder.exportSymbols("ETHER-WIS", etherWisDevice=etherWisDevice, etherWisPathCurrentEntry=etherWisPathCurrentEntry, PYSNMP_MODULE_ID=etherWisMIB, etherWisObjectsPath=etherWisObjectsPath, etherWisPathCurrentStatus=etherWisPathCurrentStatus, etherWisDeviceGroupExtra=etherWisDeviceGroupExtra, etherWisDeviceRxTestPatternErrors=etherWisDeviceRxTestPatternErrors, etherWisMIB=etherWisMIB, etherWisPathCurrentJ1Transmitted=etherWisPathCurrentJ1Transmitted, etherWisDeviceRxTestPatternMode=etherWisDeviceRxTestPatternMode, etherWisSectionCurrentJ0Received=etherWisSectionCurrentJ0Received, etherWisSectionCurrentJ0Transmitted=etherWisSectionCurrentJ0Transmitted, etherWisFarEndPathCurrentStatus=etherWisFarEndPathCurrentStatus, etherWisFarEndPath=etherWisFarEndPath, etherWisPath=etherWisPath, etherWisSectionCurrentEntry=etherWisSectionCurrentEntry, etherWisGroups=etherWisGroups, etherWisDeviceGroupBasic=etherWisDeviceGroupBasic, etherWisPathGroup=etherWisPathGroup, etherWisPathCurrentTable=etherWisPathCurrentTable, etherWisDeviceTxTestPatternMode=etherWisDeviceTxTestPatternMode, etherWisObjects=etherWisObjects, etherWisPathCurrentJ1Received=etherWisPathCurrentJ1Received, etherWisDeviceEntry=etherWisDeviceEntry, etherWisFarEndPathCurrentTable=etherWisFarEndPathCurrentTable, etherWisSectionGroup=etherWisSectionGroup, etherWisCompliances=etherWisCompliances, etherWisSection=etherWisSection, etherWisFarEndPathGroup=etherWisFarEndPathGroup, etherWisFarEndPathCurrentEntry=etherWisFarEndPathCurrentEntry, etherWisSectionCurrentTable=etherWisSectionCurrentTable, etherWisCompliance=etherWisCompliance, etherWisConformance=etherWisConformance, etherWisDeviceTable=etherWisDeviceTable)
