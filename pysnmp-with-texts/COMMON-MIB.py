#
# PySNMP MIB module COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, enterprises, Bits, Counter32, Gauge32, Counter64, TimeTicks, IpAddress, ObjectIdentity, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "enterprises", "Bits", "Counter32", "Gauge32", "Counter64", "TimeTicks", "IpAddress", "ObjectIdentity", "MibIdentifier", "NotificationType")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
dlinkcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
marconi_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("marconi-mgmt")
agentConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1))
agentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1))
agentRuntimeSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRuntimeSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentRuntimeSwVersion.setDescription("This is a textual description of the runtime software version and revision. If the version number is one and revision number is zero agentRuntimeSwVersion would be 'Ver. 1.0'")
agentPromFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPromFwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentPromFwVersion.setDescription("This is a textual description of the agent PROM firmware version and revision. If the version number is one and revision number is zero agentPromFwVersion would be 'Ver. 1.0'")
agentHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: agentHwRevision.setDescription('This is a integer number of the hardware revision.')
agentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setStatus('mandatory')
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
agentMibCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 5), )
if mibBuilder.loadTexts: agentMibCapabilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityTable.setDescription('A list of MIB capability entries supported by this agent.')
agentMibCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 5, 1), ).setIndexNames((0, "COMMON-MIB", "agentMibCapabilityIndex"))
if mibBuilder.loadTexts: agentMibCapabilityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityEntry.setDescription('A MIB capability entry contains objects describing a particular MIB supported by this agent.')
agentMibCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityIndex.setDescription('A list of agentMibCapabilityDescr entries.')
agentMibCapabilityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityDescr.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityDescr.setDescription('The name of the MIB supported by the agent.')
agentMibCapabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityVersion.setDescription('The version of the MIB specified in this entry.')
agentMibCapabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityType.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityType.setDescription('The type of the MIB specified in this entry.')
agentBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2))
agentSwUpdateMode = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwUpdateMode.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwUpdateMode.setDescription('The download media used by the system to download the runtime software.')
agentSwUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwUpdateCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwUpdateCtrl.setDescription('Current status of configuration software download control. The setting is effective the next time you reset or power on the hub.')
agentBootFile = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBootFile.setStatus('mandatory')
if mibBuilder.loadTexts: agentBootFile.setDescription('The name of the configuration file to be downloaded from the TFTP server when software update is enabled.')
agentFirmwareUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFirmwareUpdateCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: agentFirmwareUpdateCtrl.setDescription('Current status of firmware software download control. The setting is effective the next time you reset or power on the hub.')
agentFirmwareFile = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFirmwareFile.setStatus('mandatory')
if mibBuilder.loadTexts: agentFirmwareFile.setDescription('The name of the firmware file to be downloaded from the TFTP server when software update is enabled.')
agentSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cold-start", 2), ("warm-start", 3), ("no-reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: agentSystemReset.setDescription('This object indicates the agent system reset state. Setting this object to no-reset(4) has no effect. Setting this object to cold-start(2) or warm-start(3) will reset the agent. The agent always returns no-reset(4) when this object is read.')
agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRs232PortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: agentRs232PortConfig.setDescription('This object indicates the RS-232C mode while device restart.')
agentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setDescription('This object indicates the out_of_band baud rate while device restart.')
agentIpProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3))
agentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumOfIf.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
agentIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: agentIpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfTable.setDescription('A list of IP interface entries supported by the agent.')
agentIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "COMMON-MIB", "agentIpIfIndex"))
if mibBuilder.loadTexts: agentIpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfEntry.setDescription('An agentIPIfEntry contains information about a particular IP interface.')
agentIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfIndex.setDescription('This object uniquely identifies the IP interface number in the agentIpIfTable. This value should never greater than agentIpNumOfIf')
agentIpIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfAddress.setDescription('The IP address of the interface.')
agentIpIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpIfNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfNetMask.setDescription('The IP net mask for this interface.')
agentIpIfDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpIfDefaultRouter.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfDefaultRouter.setDescription('The default gateway for this IP interface.')
agentIpIfMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfMacAddr.setDescription('The MAC address of this IP interface. For interfaces which do not have such an address. (e.g., a serial line), this object should contain an octet string of zero length.')
agentIpIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 28))).clone(namedValues=NamedValues(("other", 1), ("ethernet-csmacd", 6), ("slip", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfType.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpIfType.setDescription('The physical layer interface of the IP interface.')
agentIpBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpBootServerAddr.setDescription('The IP Address of Boot Server.')
agentIpGetIpFromBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpGetIpFromBootpServer.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpGetIpFromBootpServer.setDescription('This object indicates whether the agent get its system IP address from Bootp/DHCP server at start up.')
agentIpUnauthAddr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpUnauthAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpUnauthAddr.setDescription('The IP address of an unauthorized SNMP packet.')
agentIpUnauthComm = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpUnauthComm.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpUnauthComm.setDescription('The community string of an unauthorized SNMP packet.')
agentIpLastBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpLastBootServerAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpLastBootServerAddr.setDescription('The last IP address used as Boot server IP address.')
agentIpLastIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpLastIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpLastIpAddr.setDescription('The last IP address used as the agent system IP address.')
agentIpTrapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 9), )
if mibBuilder.loadTexts: agentIpTrapManagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerTable.setDescription('A list of trap manager entries to which to send SNMP traps .')
agentIpTrapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 9, 1), ).setIndexNames((0, "COMMON-MIB", "agentIpTrapManagerIpAddr"))
if mibBuilder.loadTexts: agentIpTrapManagerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerEntry.setDescription('This entry contains the particular trap manager settings.')
agentIpTrapManagerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpTrapManagerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerIpAddr.setDescription('The IP address to receive SNMP traps from this device.')
agentIpTrapManagerComm = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTrapManagerComm.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerComm.setDescription('The community string of the SNMP trap packet sent to the trap manager.')
agentIpTrapManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTrapManagerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerStatus.setDescription('This object indicates whether or not the trap should be send to this trap manager.')
mibBuilder.exportSymbols("COMMON-MIB", agentIpIfNetMask=agentIpIfNetMask, marconi_mgmt=marconi_mgmt, agentIpIfTable=agentIpIfTable, agentMibCapabilityEntry=agentMibCapabilityEntry, systems=systems, golfcommon=golfcommon, agentIpTrapManagerIpAddr=agentIpTrapManagerIpAddr, external=external, agentMibCapabilityIndex=agentMibCapabilityIndex, agentIpGetIpFromBootpServer=agentIpGetIpFromBootpServer, agentConfigInfo=agentConfigInfo, agentBasicInfo=agentBasicInfo, agentIpTrapManagerComm=agentIpTrapManagerComm, agentMibCapabilityType=agentMibCapabilityType, golf=golf, agentMibCapabilityDescr=agentMibCapabilityDescr, agentBootFile=agentBootFile, agentSwUpdateMode=agentSwUpdateMode, agentSystemReset=agentSystemReset, agentIpBootServerAddr=agentIpBootServerAddr, agentIpIfEntry=agentIpIfEntry, agentIpUnauthAddr=agentIpUnauthAddr, agentFirmwareUpdateCtrl=agentFirmwareUpdateCtrl, dlinkcommon=dlinkcommon, agentIpTrapManagerTable=agentIpTrapManagerTable, golfproducts=golfproducts, agentRuntimeSwVersion=agentRuntimeSwVersion, agentIpIfIndex=agentIpIfIndex, agentFirmwareFile=agentFirmwareFile, agentIpUnauthComm=agentIpUnauthComm, agentMgmtProtocolCapability=agentMgmtProtocolCapability, agentMibCapabilityTable=agentMibCapabilityTable, agentIpIfType=agentIpIfType, agentIpNumOfIf=agentIpNumOfIf, agentMibCapabilityVersion=agentMibCapabilityVersion, marconi=marconi, agentIpLastBootServerAddr=agentIpLastBootServerAddr, agentIpIfMacAddr=agentIpIfMacAddr, agentIpProtoConfig=agentIpProtoConfig, agentIpTrapManagerEntry=agentIpTrapManagerEntry, agentIpIfDefaultRouter=agentIpIfDefaultRouter, agentIpTrapManagerStatus=agentIpTrapManagerStatus, agentBasicConfig=agentBasicConfig, agentOutOfBandBaudRateConfig=agentOutOfBandBaudRateConfig, agentHwRevision=agentHwRevision, dlink=dlink, agentIpLastIpAddr=agentIpLastIpAddr, agentIpIfAddress=agentIpIfAddress, agentSwUpdateCtrl=agentSwUpdateCtrl, agentRs232PortConfig=agentRs232PortConfig, agentPromFwVersion=agentPromFwVersion)
