#
# PySNMP MIB module ArrayManager-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ArrayManager-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, NotificationType, NotificationType, IpAddress, Unsigned32, Bits, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Counter64, ObjectIdentity, TimeTicks, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "NotificationType", "NotificationType", "IpAddress", "Unsigned32", "Bits", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Counter64", "ObjectIdentity", "TimeTicks", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1))
arrayManager = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1))
arrayMgrSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrSoftwareVersion.setDescription('Version information for the Dell OpenManage Array Manager software.')
arrayMgrGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("normal", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrGlobalStatus.setDescription('Global health information for the subsystem managed by the Dell Array Manager software. This global status is customized for HP OpenView. Other applications should refer to the agentSystemGlobalStatus entry in the globalData object group. Possible values: 1: Critical 2: Warning 3: Normal 4: Unknown')
arrayMgrSoftwareManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrSoftwareManufacturer.setDescription('Manufacturer information for the Dell Array Manager software.')
arrayMgrSoftwareProduct = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareProduct.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrSoftwareProduct.setDescription('Product information for the Dell Array Manager software.')
arrayMgrSoftwareDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrSoftwareDescription.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrSoftwareDescription.setDescription('Product Description for the Dell Array Manager software.')
arrayMgrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100))
arrayMgrDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrDisplayName.setDescription('Name of this agent for display purposes.')
arrayMgrDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrDescription.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrDescription.setDescription('A short description of this agent such as &lt;The Dell Storage Consolidation SNMP Agent&gt;.')
arrayMgrAgentVendor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrAgentVendor.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrAgentVendor.setDescription('The name of the agent software manufacturer.')
arrayMgrAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 100, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayMgrAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: arrayMgrAgentVersion.setDescription('Version information for the Dell OpenManage Array Manager software.')
globalData = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110))
agentSystemGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("nonCriticalError", 3), ("failure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSystemGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentSystemGlobalStatus.setDescription('Global health information for the subsystem managed by the Dell Array Manager software. This global status should be used by applications other than HP OpenView. HP OpenView should refer to the arrayMgrGlobalStatus in the root level object group. This is a rollup for the entire agent including any monitored devices. The status is intended to give initiative to a snmp monitor to get further data when this status is abnormal. Possible values: 1: Normal 2: Warning 3: Non-critical Error 4: Failure 5: Unknown')
agentLastGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("nonCriticalError", 3), ("failure", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLastGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentLastGlobalStatus.setDescription('The the previous global status of the system managed by the Dell Array Manager software. Possible values: 1: Normal 2: Warning 3: Non-critical Error 4: Failure 5: Unknown')
agentTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: agentTimeStamp.setDescription('The last time that the agent values have been updated. Universal time in sec since UTC 1/1/70.')
agentGetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGetTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: agentGetTimeout.setDescription('Suggested timeout value in milliseconds for how long the SNMP getter should wait while attempting to poll the SNMP agent.')
agentModifiers = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentModifiers.setStatus('mandatory')
if mibBuilder.loadTexts: agentModifiers.setDescription('Agent functional modifiers, when set the modifier is active. Bit definitions: Bit 3: agent in debug mode. All other bits are product specific ')
agentRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRefreshRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentRefreshRate.setDescription('Rate in seconds at which the agent cached data is being updated.')
agentHostname = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHostname.setStatus('mandatory')
if mibBuilder.loadTexts: agentHostname.setDescription('The fully qualified network hostname of the host where the agent is running.')
agentIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: agentIPAddress.setDescription('The IP Address of the host where the agent is running and at which the SNMP agent can be contacted.')
agentSoftwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databaseUp", 1), ("databaseDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSoftwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentSoftwareStatus.setDescription('Status of the Array Manager Database service software. 1: Database Up - Communication with the database is possible for SNMP queries. 2: Database Down - Communication with the database is not possible for SNMP queries.')
agentAmSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAmSnmpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentAmSnmpVersion.setDescription('Version of the Array Manager SNMP extension agent for Windows, SNMP provider for Netware.')
agentAmMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 110, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAmMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentAmMibVersion.setDescription('Version of the Array Manager MIB.')
providerData = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120))
providerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1), )
if mibBuilder.loadTexts: providerTable.setStatus('mandatory')
providerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1), ).setIndexNames((0, "ArrayManager-MIB", "providerNumber"))
if mibBuilder.loadTexts: providerEntry.setStatus('mandatory')
providerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: providerNumber.setDescription('Instance number of this provider entry.')
providerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerName.setStatus('mandatory')
if mibBuilder.loadTexts: providerName.setDescription('The name of the module that supports either a family of devices or a set of functions.')
providerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loaded", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: providerStatus.setDescription('The status of this provider. 1: Loaded 2: Failed 3: Unknown')
providerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 120, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: providerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: providerVersion.setDescription('This version and build number of the provider module.')
physicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130))
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: controllerTable.setDescription('A table of managed RAID controllers. The number of entries is related to number of RAID controllers discovered in the system.')
controllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1), ).setIndexNames((0, "ArrayManager-MIB", "controllerNumber"))
if mibBuilder.loadTexts: controllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEntry.setDescription('An entry in the table of RAID controllers. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
controllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNumber.setDescription('Instance number of this controller entry.')
controllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('mandatory')
if mibBuilder.loadTexts: controllerName.setDescription('The name of the contoller in this subsystem as represented in Array Manager. Includes the controller type and instance. For example: Perc3/QC 1.')
controllerVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerVendor.setStatus('mandatory')
if mibBuilder.loadTexts: controllerVendor.setDescription("The controller's (re)seller's name. For Dell controllers this will = Dell.")
controllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("scsi", 1), ("pv660F", 2), ("pv662F", 3), ("ide", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerType.setStatus('mandatory')
if mibBuilder.loadTexts: controllerType.setDescription('The type of this controller: 1: SCSI 2: PV660F 3: PV662F 4: IDE (Integrated/Intelligent Drive Electronics)')
controllerState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerState.setStatus('mandatory')
if mibBuilder.loadTexts: controllerState.setDescription("The status of this controller's subsystem (which includes any devices connected to it.) Possible states: 0: Unknown 1: Ready 2: Failed 3: Online 4: Offline 6: Degraded")
controllerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: controllerSeverity.setDescription('Seriousness of the controller state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
controllerRebuildRateInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerRebuildRateInPercent.setStatus('mandatory')
if mibBuilder.loadTexts: controllerRebuildRateInPercent.setDescription('The percent of the compute cycles dedicated to rebuilding failed array disks. ')
controllerFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: controllerFWVersion.setDescription("The controller's current firmware version.")
controllerCacheSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCacheSizeInMB.setDescription("The controller's current amount of cache memory in megabytes. If this size is 0, it is less than a megabyte.")
controllerCacheSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerCacheSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: controllerCacheSizeInBytes.setDescription("The controller's current amount of cache memory that is less than a megabyte. This combined with the controllerCacheSizeInMB will be the total amount of memory.")
controllerPhysicalDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPhysicalDeviceCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPhysicalDeviceCount.setDescription('Number of physical devices on the controller channel including both disks and the controller.')
controllerLogicalDeviceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerLogicalDeviceCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerLogicalDeviceCount.setDescription('Number of virtual disks on the controller.')
controllerPartnerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerPartnerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: controllerPartnerStatus.setDescription('Indicates availability of the redundant controller in a redundant configuration. Booting: Controller is powering up. OK: Controller is in fully redundant status. Inserted: Controller is there, but not acting as a partner. Kill Partner Command Received: Failed: UnknownStatus: SCSI Comm Failure:')
controllerHostPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerHostPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerHostPortCount.setDescription('The number of host ports on this controller. Host Port: An active fibre port connected to an arbitrated loop. The port may be opened by an initiator on the loop and process i/o requests. ')
controllerMemorySizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMemorySizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMemorySizeInMB.setDescription('Size of memory in megabytes on the controller. If this size is 0, it is less than a megabyte.')
controllerMemorySizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerMemorySizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: controllerMemorySizeInBytes.setDescription('Size of memory on the controller that is less than a megabyte. This combined with the controllerMemorySizeInMB will be the total size of the memory.')
controllerDriveChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerDriveChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerDriveChannelCount.setDescription('The number of redundant drive channels for the controller.')
controllerFaultTolerant = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerFaultTolerant.setStatus('mandatory')
if mibBuilder.loadTexts: controllerFaultTolerant.setDescription('Indicates whether the controller is enabled to be fault tolerant. 0: no 1: yes ')
controllerC0Port0WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0WWN.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0Port0WWN.setDescription('World Wide name for the first port on controller 0. ')
controllerC0Port0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0Name.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0Port0Name.setDescription("The unique value/name assigned to the controller's first active port.")
controllerC0Port0ID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port0ID.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0Port0ID.setDescription("The controller's preferred host port/loopid as specified by controller option 'hard loop id' for its first port.")
controllerC0Target = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Target.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0Target.setDescription('The controller in slot 0 (it should always be the master controller.) ')
controllerC0Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Channel.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0Channel.setDescription("Channel number of the controller's first port. Channel: A path for the transfer of data and controller information between the host or the physical disk drives and the controller.")
controllerC0OSController = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0OSController.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0OSController.setDescription("Manufacturer's identification of controller on first port.")
controllerC0BatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 9, 10, 12, 21))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("reconditioning", 7), ("high", 9), ("low", 10), ("charging", 12), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0BatteryState.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0BatteryState.setDescription("Current state of battery on the controller's first port. Possible values: 0: Unknown 1: OK (present and operational) 2: Failed (cannot hold charge or cannot be recharged) 7: Reconditioning (PV660 Only) 9: High 10: Low 12: Charging 21: Missing (Adaptec Only) ")
controllerC1Port0WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0WWN.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1Port0WWN.setDescription('World Wide name for the first port on controller 1.')
controllerC1Port0Name = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0Name.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1Port0Name.setDescription("The unique value/name assigned to the controller's second active port.")
controllerC1Port0ID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port0ID.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1Port0ID.setDescription("The controller's preferred host port/loopid as specified by controller option 'hard loop id' for its second port. (Value of 255 = C1 controller not there) ")
controllerC1Target = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Target.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1Target.setDescription('The controller in slot 1. (Value of 255 = controller not there)')
controllerC1Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Channel.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1Channel.setDescription("Channel number of the controller's second port. Channel: A path for the transfer of data and controller information between the host or the physical disk drives and the controller. (Value of 255 = controller not there)")
controllerC1OSController = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1OSController.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1OSController.setDescription("Manufacturer's identification of controller on second port. (Value of 255 = controller not there)")
controllerC1BatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 9, 10, 12, 21))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("reconditioning", 7), ("high", 9), ("low", 10), ("charging", 12), ("missing", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1BatteryState.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1BatteryState.setDescription("Current state of battery on the controller's second port. Possible values: 0: Unknown 1: OK (present and operational) 2: Failed (cannot hold charge or cannot be recharged) 7: Reconditioning (PV660 Only) 9: High 10: Low 12: Charging 21: Missing (Adaptec Only) ")
controllerNodeWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNodeWWN.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNodeWWN.setDescription('Used as the node name for the storage subsystem. ')
controllerC0Port1WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC0Port1WWN.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC0Port1WWN.setDescription('World Wide name for the second port on controller 0.')
controllerC1Port1WWN = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerC1Port1WWN.setStatus('mandatory')
if mibBuilder.loadTexts: controllerC1Port1WWN.setDescription('World Wide name for the second port on controller 1.')
controllerBatteryChargeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerBatteryChargeCount.setStatus('mandatory')
if mibBuilder.loadTexts: controllerBatteryChargeCount.setDescription('The number of charges that have been applied to the battery on this controller.')
channelTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2), )
if mibBuilder.loadTexts: channelTable.setStatus('mandatory')
if mibBuilder.loadTexts: channelTable.setDescription('A table of controller channels. The number of entries is related to number of channels supported in a RAID controllers. Perc2 RAID controller supports a max of 4 channels per controller. The maximum number of entries is implementation dependent.')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1), ).setIndexNames((0, "ArrayManager-MIB", "channelNumber"))
if mibBuilder.loadTexts: channelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: channelEntry.setDescription('An entry in the channel table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
channelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: channelNumber.setDescription('Instance number of this channel entry.')
channelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelName.setStatus('mandatory')
if mibBuilder.loadTexts: channelName.setDescription('The name of the channel as represented in Array Manager. The name will include the word channel and the instance. For example: Channel 1')
channelState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelState.setStatus('mandatory')
if mibBuilder.loadTexts: channelState.setDescription('The current state of this channel. Possible states: 0: Unknown 1: Ready - The I/O has resumed. 2: Failed 3: Online 4: Offline - The I/O has paused. 6: Degraded ')
channelSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: channelSeverity.setDescription('Seriousness of the channel state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
channelTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("narrow", 2), ("notTerminated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelTermination.setStatus('mandatory')
if mibBuilder.loadTexts: channelTermination.setDescription('The type of SCSI termination on this channel. Termination is required for proper operation of this channel. 1: Wide Termination (16 bit) 2: Narrow Termination (8 bit) 3: Not Terminated')
channelSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSCSIID.setStatus('mandatory')
if mibBuilder.loadTexts: channelSCSIID.setDescription('The SCSI ID of the controller to which the channel belongs.')
enclosureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3), )
if mibBuilder.loadTexts: enclosureTable.setStatus('mandatory')
enclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1), ).setIndexNames((0, "ArrayManager-MIB", "enclosureNumber"))
if mibBuilder.loadTexts: enclosureEntry.setStatus('mandatory')
enclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNumber.setDescription('Instance number of the enclosure entry.')
enclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureName.setDescription("The enclosure's name as represented in Array Manager.")
enclosureVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureVendor.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureVendor.setDescription("The enclosure's (re)seller's name.")
enclosureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureState.setDescription('The state of the controller. Possible states: 0 : Unknown 1 : Ready 2 : Failed 3 : Online 4 : Offline 6 : Degraded 55: Communication Lost')
enclosureSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warining", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSeverity.setDescription('Seriousness of the enclosure state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
enclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureID.setDescription('For fibre channel - The number of the enclosure in the subsystem. For SCSI - The SCSI address of the processor.')
enclosureProcessorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProcessorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureProcessorVersion.setDescription("Firmware version of the enclosure's processor. For Fibre Channel only.")
enclosureServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureServiceTag.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureServiceTag.setDescription('Enclosure identification used when consulting customer support.')
enclosureAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureAssetTag.setDescription('Customer definable asset tag for the enclosure.')
enclosureAssetName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAssetName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureAssetName.setDescription('Customer definable asset name of the enclosure.')
enclosureSplitBusPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSplitBusPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSplitBusPartNumber.setDescription("The enclosure's split bus part number.")
enclosureProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProductID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureProductID.setDescription("The enclosure's product identification. This also corresponds to the enclosure type. ")
enclosureKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureKernelVersion.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureKernelVersion.setDescription("The version of the enclosure's kernel (Dell PV200S, PV201S, PV210S, and PV211S only.)")
enclosureESM1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureESM1PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureESM1PartNumber.setDescription('This entry is obsolete.')
enclosureESM2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureESM2PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureESM2PartNumber.setDescription('This entry is obsolete.')
enclosureType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("internal", 1), ("dELLPV200SPV201S", 2), ("dELLPV210SPV211S", 3), ("dELLPV220SPV221S", 4), ("dELLPV660F", 5), ("dELLPV224F", 6), ("dELLPV660F224F", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureType.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureType.setDescription('The type of this enclosure. Possible values: 1: Internal 2: Dell PV200S (PV201S) 3: Dell PV210S (PV211S) 4: Dell PV220S (PV221S) 5: Dell PV660F 6: Dell PV224F 7: Dell PV660F / PV224F')
enclosureProcessor2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureProcessor2Version.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureProcessor2Version.setDescription('This entry is obsolete.')
enclosureConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("joined", 1), ("splitBus", 2), ("clustered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureConfig.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureConfig.setDescription("The current configuration of the enclosure's backplane. Possible values: 1: Joined 2: Split Bus 3: Clustered")
enclosureChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureChannelNumber.setDescription('The channel number, or bus, to which the enclosure is connected.')
enclosureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureAlarm.setDescription("The current status of the enclosure's alarm (PV220S, and PV221S only.) Possible values: 1: Off 2: On")
enclosureBackplanePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureBackplanePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureBackplanePartNumber.setDescription("The part number of the enclosure's backplane.")
enclosureSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureSCSIID.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureSCSIID.setDescription('The SCSI ID of the controller to which this enclosure is attached.')
arrayDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4), )
if mibBuilder.loadTexts: arrayDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskTable.setDescription('A table of managed Array Disks. The number of entries is related to number of Array Disks discovered in the system. The maximum number of entries is implementation dependent.')
arrayDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskNumber"))
if mibBuilder.loadTexts: arrayDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEntry.setDescription('An entry in the Array Disk table . A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
arrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskNumber.setDescription('Instance number of this array disk entry.')
arrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskName.setDescription('The name of the array disk as represented in Array Manager.')
arrayDiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskVendor.setDescription("The array disk's (re)seller's name.")
arrayDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 11, 15, 24, 25, 26, 28, 35))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("recovering", 7), ("removed", 11), ("resynching", 15), ("rebuild", 24), ("noMedia", 25), ("formatting", 26), ("diagnostics", 28), ("initializing", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskState.setDescription('The current state of the array disk. Possible states: 0: Unknown 1: Ready - Available for use, but no RAID configuration has been assigned. 2: Failed - Not operational. 3: Online - Operational. RAID configuration has been assigned. 4: Offline - The drive is not available to the RAID controller. 6: Degraded - Refers to a fault-tolerant array/virtual disk that has a failed disk. 7: Recovering - Refers to state of recovering from bad blocks on disks. 11: Removed - Indicates that array disk has been removed. 15: Resynching - Indicates one of the following types of disk operations: Transform Type, Reconfiguration, and Check Consistency. 24: Rebuild 25: No Media - CD-ROM or removable disk has no media. 26: Formatting - In the process of formatting. 28: Diagnostics - Diagnostics are running. 35: Initializing: Applies only to virtual disks on PERC, PERC 2/SC, and PERC 2/DC controllers. ')
arrayDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSeverity.setDescription('Severity of the array disk state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
arrayDiskProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskProductID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskProductID.setDescription('The model number of the array disk.')
arrayDiskSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSerialNo.setDescription("The array disk's unique identification number from the manufacturer.")
arrayDiskRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskRevision.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskRevision.setDescription('The firmware version of the array disk.')
arrayDiskEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureID.setDescription('The SCSI ID of the enclosure processor to which this array disk belongs.')
arrayDiskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannel.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannel.setDescription('The bus to which this array disk is connected.')
arrayDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLengthInMB.setDescription('The size in megabytes of the array disk. If this size is 0, it is smaller than a megabyte.')
arrayDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLengthInBytes.setDescription('The size of the array disk in bytes that is less than a megabyte. This size plus the arrayDiskLengthInMB is the total size of the array disk.')
arrayDiskLargestContiguousFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInMB.setDescription('The size in megabytes of the largest contiguous free space on the array disk. If this size is 0, it is less than a megabyte.')
arrayDiskLargestContiguousFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLargestContiguousFreeSpaceInBytes.setDescription('The size of the largest contiguouis free space on this array disk in bytes that is less than a megabyte. This size plus the arrayDiskLargestContiguousFreeSpaceInMB is the total size of the largest contiguous free space on the array disk.')
arrayDiskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskTargetID.setDescription('The SCSI target ID which this array disk is assigned. ')
arrayDiskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLunID.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLunID.setDescription("The array disk's logical unit number. ")
arrayDiskUsedSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskUsedSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskUsedSpaceInMB.setDescription('The amount in megabytes of the used space on the array disk. If this size is 0, it is smaller than a megabyte.')
arrayDiskUsedSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskUsedSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskUsedSpaceInBytes.setDescription('The size in bytes of the used space on the array disk that is smaller than a megabyte. This size plus the arrayDiskUsedSpaceInMB is the total amount of used space on the array disk.')
arrayDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskFreeSpaceInMB.setDescription('The amount in megabytes of the free space on the array disk. If this size is 0, it is smaller than a megabyte.')
arrayDiskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arrayDiskFreeSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskFreeSpaceInBytes.setDescription('The size in bytes of the free space on the array disk that is smaller than a megabyte. This size plus the arrayDiskFreeSpaceInMB is the total amount of free space on the array disk.')
arrayDiskBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("scsi", 1), ("ide", 2), ("fibre", 3), ("ssa", 4), ("usb", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskBusType.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskBusType.setDescription('The bus type of the array disk. Possible values: 1: SCSI 2: IDE 3: Fibre Channel 4: SSA 6: USB')
arrayDiskSpareState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("memberVD", 1), ("memberDG", 2), ("globalHotSpare", 3), ("dedicatedHotSpare", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arrayDiskSpareState.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskSpareState.setDescription('The status of the array disk as a spare. Possible states: 1: disk is a member of a virtual disk 2: disk is a member of a disk group 3: disk is a global hot spare 4: disk is a dedicated hot spare')
arrayDiskEnclosureConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5), )
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionTable.setDescription('A table of the connections between array disks, their enclosure, and their associated controller. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found.')
arrayDiskEnclosureConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskEnclosureConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEntry.setStatus('mandatory')
arrayDiskEnclosureConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionNumber.setDescription('Instance number of this array disk connection entry. This table shows the array disk to SCSI or Fibre Channel enclosure relationship.')
arrayDiskEnclosureConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskName.setDescription('The name of the array disk in this connection as represented in Array Manager.')
arrayDiskEnclosureConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionArrayDiskNumber.setDescription('The instance number of the array disk in the arrayDiskTable in this connection.')
arrayDiskEnclosureConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureName.setDescription('The name of the enclosure as represented in Array Manager to which this array disk belongs. ')
arrayDiskEnclosureConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionEnclosureNumber.setDescription('The instance number in the enclosureTable of the enclosure to which this array disk belongs.')
arrayDiskEnclosureConnectionControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerName.setDescription('The name of the controller as represented in Array Manager to which this array disk is connected.')
arrayDiskEnclosureConnectionControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskEnclosureConnectionControllerNumber.setDescription('The instance number in the controllerTable of the controller to which this array disk is connected.')
arrayDiskChannelConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6), )
if mibBuilder.loadTexts: arrayDiskChannelConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionTable.setDescription('A table of the connections between array disks, their channel, and their associated controller. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found.')
arrayDiskChannelConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskChannelConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskChannelConnectionEntry.setStatus('mandatory')
arrayDiskChannelConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionNumber.setDescription('Instance number of this array disk connection entry. This table shows the array disk to SCSI channel relationship. There is no enclosure service processor associated with these array disks.')
arrayDiskChannelConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskName.setDescription('The name of the array disk in this connection as represented in Array Manager.')
arrayDiskChannelConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionArrayDiskNumber.setDescription('The instance number of the array disk in the arrayDiskTable in this connection.')
arrayDiskChannelConnectionChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelName.setDescription('The name of the channel as represented in Array Manager to which is array disk is connected.')
arrayDiskChannelConnectionChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionChannelNumber.setDescription('The instance number of the channel in the channelTable to which this array disk is connected.')
arrayDiskChannelConnectionControllerName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerName.setDescription('The name of the controller as represented in Array Manager to which this array disk is connected.')
arrayDiskChannelConnectionControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskChannelConnectionControllerNumber.setDescription('The instance number in the controllerTable of the controller to which this array disk is connected.')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7), )
if mibBuilder.loadTexts: fanTable.setStatus('mandatory')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1), ).setIndexNames((0, "ArrayManager-MIB", "fanNumber"))
if mibBuilder.loadTexts: fanEntry.setStatus('mandatory')
fanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanNumber.setDescription('Instance number of this fan entry.')
fanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanName.setStatus('mandatory')
if mibBuilder.loadTexts: fanName.setDescription("The fan's name as represented in Array Manager.")
fanVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanVendor.setStatus('mandatory')
if mibBuilder.loadTexts: fanVendor.setDescription("The fan's (re)seller's name.")
fanState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 11, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("degraded", 6), ("removed", 11), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanState.setStatus('mandatory')
if mibBuilder.loadTexts: fanState.setDescription('Current state of the fan. Possible states: 0 : Unknown 1 : Ready 2 : Failed 3 : Online 4 : Offline 6 : Degraded 55: Communication Lost')
fanSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: fanSeverity.setDescription('Seiousness of the fan state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
fanProbeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeUnit.setStatus('mandatory')
fanProbeMinWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMinWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fanProbeMinWarning.setDescription('The minimum value that will force the fan into a warning state.')
fanProbeMinCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMinCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fanProbeMinCritical.setDescription('The minimum value that will force the fan into an error state.')
fanProbeMaxWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMaxWarning.setStatus('mandatory')
if mibBuilder.loadTexts: fanProbeMaxWarning.setDescription('The maximum value that will force the fan into a warning state.')
fanProbeMaxCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeMaxCritical.setStatus('mandatory')
if mibBuilder.loadTexts: fanProbeMaxCritical.setDescription('The maximum value that will force the fan into an error state.')
fanProbeCurrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProbeCurrValue.setStatus('mandatory')
if mibBuilder.loadTexts: fanProbeCurrValue.setDescription('The current speed of the fan. ')
fan1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan1PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fan1PartNumber.setDescription('The part number of the fan in the enclosure.')
fan2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fan2PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fan2PartNumber.setDescription('This entry is obsolete.')
fanConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8), )
if mibBuilder.loadTexts: fanConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionTable.setDescription('A table of the connections between each fan on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
fanConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1), ).setIndexNames((0, "ArrayManager-MIB", "fanConnectionNumber"))
if mibBuilder.loadTexts: fanConnectionEntry.setStatus('mandatory')
fanConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionNumber.setDescription('Instance number of this fan connection entry.')
fanConnectionFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionFanName.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionFanName.setDescription('The name of the fan in this connection as represented in Array Manager.')
fanConnectionFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionFanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionFanNumber.setDescription('The instance number of the fan in the fanTable in this connection.')
fanConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionEnclosureName.setDescription('The name of the enclosure as represented in Array Manager to which this fan belongs.')
fanConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fanConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this fan belongs.')
powersupplyTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9), )
if mibBuilder.loadTexts: powersupplyTable.setStatus('mandatory')
powersupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1), ).setIndexNames((0, "ArrayManager-MIB", "powersupplyNumber"))
if mibBuilder.loadTexts: powersupplyEntry.setStatus('mandatory')
powersupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyNumber.setDescription('Instance number of this powersupply entry.')
powersupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyName.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyName.setDescription("The power supply's name as represented in Array Manager.")
powersupplyVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyVendor.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyVendor.setDescription("The power supply's (re)seller's name.")
powersupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyState.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyState.setDescription('Current state of the power supply. Possible states: 0 : Unknown 1 : Ready 2 : Failed 55: Communication Lost')
powersupplySeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplySeverity.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplySeverity.setDescription('Seriousness of the power supply state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
powersupply1PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupply1PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powersupply1PartNumber.setDescription('The part number of the power supply of the enclosure.')
powersupply2PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupply2PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powersupply2PartNumber.setDescription('This entry is obsolete.')
powersupplyConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10), )
if mibBuilder.loadTexts: powersupplyConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyConnectionTable.setDescription('A table of the connections between each power supply on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
powersupplyConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1), ).setIndexNames((0, "ArrayManager-MIB", "powersupplyConnectionNumber"))
if mibBuilder.loadTexts: powersupplyConnectionEntry.setStatus('mandatory')
powersupplyConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyConnectionNumber.setDescription('Instance number of this powersupply connection entry.')
powersupplyConnectionPowersupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionPowersupplyName.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyConnectionPowersupplyName.setDescription('The name of the power supply in this connection as represented in Array Manager.')
powersupplyConnectionPowersupplyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionPowersupplyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyConnectionPowersupplyNumber.setDescription('This instance number in the powersupplyTable of the power supply in this connection.')
powersupplyConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powersupplyConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyConnectionEnclosureName.setDescription('The name of the enclosure to which this power supply is connected as represented in Array Manager.')
powersupplyConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powersupplyConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: powersupplyConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this power supply is connected.')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11), )
if mibBuilder.loadTexts: temperatureTable.setStatus('mandatory')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1), ).setIndexNames((0, "ArrayManager-MIB", "temperatureNumber"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('mandatory')
temperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureNumber.setDescription('Instance number of this temperature probe entry.')
temperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureName.setDescription('Name of this temperature probe as represented in Array Manager.')
temperatureVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureVendor.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureVendor.setDescription("Temperature probe's (re)seller's name.")
temperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("offline", 4), ("degraded", 6), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureState.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureState.setDescription('Current state of this temperature probe. Possible states: 0 : Unknown 1 : Ready 2 : Failed 4 : Offline 6 : Degraded 55: Communication Lost')
temperatureSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureSeverity.setDescription('Seriousness of the temperature probe state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
temperatureProbeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeUnit.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeUnit.setDescription('The units that will be used to display temperatures for this temperature probe.')
temperatureProbeMinWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMinWarning.setDescription('The minimum temperature that will force the probe into a warning state.')
temperatureProbeMinCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMinCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMinCritical.setDescription('The minimum temperature that will force the probe into an error state.')
temperatureProbeMaxWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaxWarning.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMaxWarning.setDescription('The maximum temperature that will force the probe into a warning state.')
temperatureProbeMaxCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeMaxCritical.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeMaxCritical.setDescription('The maximum temperature that will force the probe into an error state.')
temperatureProbeCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureProbeCurValue.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureProbeCurValue.setDescription('The current temperature of this probe.')
temperatureConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12), )
if mibBuilder.loadTexts: temperatureConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionTable.setDescription('A table of the connections between each temperature probe on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
temperatureConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1), ).setIndexNames((0, "ArrayManager-MIB", "temperatureConnectionNumber"))
if mibBuilder.loadTexts: temperatureConnectionEntry.setStatus('mandatory')
temperatureConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionNumber.setDescription('Instance number of this temperature probe connection entry.')
temperatureConnectionTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionTemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionTemperatureName.setDescription('The name of the temperature probe in this connection as represented in Array Manager.')
temperatureConnectionTemperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionTemperatureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionTemperatureNumber.setDescription('The instance number in the temperatureTable of the temperature probe in this connection.')
temperatureConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionEnclosureName.setDescription('The name of the enclosure as represented in Array Manager to which this temperature probe belongs.')
temperatureConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: temperatureConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this temperature probe belongs. ')
enclosureManagementModuleTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13), )
if mibBuilder.loadTexts: enclosureManagementModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleTable.setDescription('A table of managed Enclosure Memory Modules. The number of entries is related to number of Enclosure Memory Modules discovered in the system. The maximum number of entries is implementation dependent.')
enclosureManagementModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1), ).setIndexNames((0, "ArrayManager-MIB", "enclosureManagementModuleNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleEntry.setStatus('mandatory')
enclosureManagementModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleNumber.setDescription('Instance number of this enclosure memory module entry.')
enclosureManagementModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleName.setDescription('Name of this enclosure memory module as represented in Array Manager.')
enclosureManagementModuleVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleVendor.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleVendor.setDescription("The management module's (re)seller's name.")
enclosureManagementModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 55))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("commLost", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleState.setDescription('The state of the enclosure management module. Possible states: 0 : Unknown 1 : Ready 2 : Failed 3 : Online 4 : Offline 6 : Degraded 55: Communication Lost')
enclosureManagementModuleSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleSeverity.setDescription('Seriousness of the enclosure management module state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
enclosureManagementModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModulePartNumber.setDescription('The part number of the enclosure memory module.')
enclosureManagementModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eMM", 1), ("terminationCard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleType.setDescription('The type of the enclosure management module. Possible values: 0: Unknown 1: EMM 2: Termination Card')
enclosureManagementModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleFWVersion.setDescription('Firmware version of the enclosure memory module.')
enclosureManagementModuleMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleMaxSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleMaxSpeed.setDescription('The maximum bus speed of the enclosure management module.')
enclosureManagementModuleConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14), )
if mibBuilder.loadTexts: enclosureManagementModuleConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionTable.setDescription('A table of the connections between each enclosure management module on the managed node and its enclosure. Each enclosure number in the table corresponds to that enclosure instance in the Enclosure Table.')
enclosureManagementModuleConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1), ).setIndexNames((0, "ArrayManager-MIB", "enclosureManagementModuleConnectionNumber"))
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEntry.setStatus('mandatory')
enclosureManagementModuleConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionNumber.setDescription('Instance number of this enclosure management module connection entry.')
enclosureManagementModuleConnectionEMMName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMName.setDescription('The name of the enclosure management module in this connection as represented in Array Manager.')
enclosureManagementModuleConnectionEMMNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEMMNumber.setDescription('The instance number of the enclosure management module in the enclosureManagementModuleTable in this connection.')
enclosureManagementModuleConnectionEnclosureName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureName.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureName.setDescription('The name of the enclosure as represented in Array Manager to which this enclosure management module belongs.')
enclosureManagementModuleConnectionEnclosureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 130, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureManagementModuleConnectionEnclosureNumber.setDescription('The instance number of the enclosure in the enclosureTable to which this enclosure management module belongs')
logicalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140))
virtualDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1), )
if mibBuilder.loadTexts: virtualDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskTable.setDescription('A table of managed Virtual Disks. The number of entries is related to number of Virtual Disks discovered in the system. The maximum number of entries is implementation dependent.')
virtualDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1), ).setIndexNames((0, "ArrayManager-MIB", "virtualDiskNumber"))
if mibBuilder.loadTexts: virtualDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskEntry.setDescription('An entry in the Virtual Disk table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
virtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskNumber.setDescription('Instance number of this virtual disk entry.')
virtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskName.setDescription("The virtual disk's label generated by the provider or entered by the user.")
virtualDiskDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskDeviceName.setDescription("Device name used by this virtual disk's member disks.")
virtualDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 15, 18, 24, 26, 35))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("verifying", 7), ("resynching", 15), ("failedRedundancy", 18), ("rebuilding", 24), ("formatting", 26), ("initializing", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskState.setDescription('The current state of this virtual disk. Possible states: 0: Unknown 1: Ready - The disk is accessible and has no known problems. 2: Failed - Access has been lost to the data or is about to be lost. 3: Online 4: Offline - The disk is not accessible. The disk may be corrupted or intermittently unavailable. 6: Degraded - The data on the virtual disk is no longer fault tolerant because one of the underlying disks is not online. 15: Resynching 24: Rebuilding 26: Formatting 35: Initializing')
virtualDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskSeverity.setDescription('Seriousness of the virtual disk state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
virtualDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLengthInMB.setDescription('The size of this virtual disk in megabytes. If this size is 0, it is smaller than a megabyte.')
virtualDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLengthInBytes.setDescription('The portion of the virtual disk in bytes that is smaller than a megabyte. This size plus the virtualDiskLengthInMB is the total size of the virtual disk.')
virtualDiskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskFreeSpaceInMB.setDescription('Amount of free space in megabytes on virtual disk. If this size is 0, it is smaller than a megabyte.')
virtualDiskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskFreeSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskFreeSpaceInBytes.setDescription('The portion of the free space on the virtual disk in bytes that is smaller than a megabyte. This size plus the virtualDiskFreeSpaceInMB is the total free space on the virtual disk.')
virtualDiskWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskWritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskWritePolicy.setDescription("Indicates whether the controller's write cache will be used when writing to a virtual disk. Possible values: 1: Enabled - Write Back 2: Disabled - Write Through")
virtualDiskReadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("adaptiveReadAhead", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskReadPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskReadPolicy.setDescription("Indicates whether the controller's read cache will be used when reading from a virtual disk. Note: Virtual Disks on a PV660F do not have a read cache policy. Possible values: 1: Enabled - Read Ahead 2: Disabled - No Read Ahead 3: Adaptive Read Ahead")
virtualDiskCachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("directIO", 1), ("cachedIO", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCachePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskCachePolicy.setDescription("Indicates whether the controller's cache is used when reading from or writing to a virtual disk. Possible values: 1: Direct I/O 2: Cached I/O")
virtualDiskLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18))).clone(namedValues=NamedValues(("concatenated", 1), ("raid-0", 2), ("raid-1", 3), ("raid-2", 4), ("raid-3", 5), ("raid-4", 6), ("raid-5", 7), ("raid-6", 8), ("raid-7", 9), ("raid-10", 10), ("raid-30", 11), ("raid-50", 12), ("addSpares", 13), ("deleteLogical", 14), ("transformLogical", 15), ("raid-0-plus-1", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLayout.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLayout.setDescription("The virtual disk's RAID type. Possible values: 1: Concatenated 2: Raid-0 3: Raid-1 4: Raid-2 5: Raid-3 6: Raid-4 7: Raid-5 8: Raid-6 9: Raid-7 10: Raid-10 11: Raid-30 12: Raid-50 13: Add Spares 14: Delete Logical 15: Transform Logical 18: Raid-0-plus-1 (0+1)")
virtualDiskCurStripeSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInMB.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInMB.setDescription('The stripe size of this virtual disk in megabytes. If this size is 0, it is smaller than a megabyte. ')
virtualDiskCurStripeSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskCurStripeSizeInBytes.setDescription('The portion of the stripe size in bytes that is smaller than a megabyte. This size plus the virtualDiskCurStripeSizeInMB is the total stripe size on the virtual disk.')
virtualDiskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskChannel.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskChannel.setDescription("The virtual disk's channel number.")
virtualDiskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskTargetID.setDescription("The virtual disk's target ID.")
virtualDiskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskLunID.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskLunID.setDescription("The virtual disk's LUN ID.")
diskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
if mibBuilder.loadTexts: diskTable.setDescription('A table of managed disks that are a member of a Virtual Disk. The number of entries is related to the number of online array disks discovered in the system. The maximum number of entries is implementation dependent.')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1), ).setIndexNames((0, "ArrayManager-MIB", "diskNumber"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry in the Member Disk table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
diskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: diskNumber.setDescription('Instance number of the disk entry.')
diskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskName.setStatus('mandatory')
if mibBuilder.loadTexts: diskName.setDescription("The disk's name as represented in Array Manager.")
diskVirtualDiskDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVirtualDiskDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: diskVirtualDiskDeviceName.setDescription('Device name of the virtual disk that includes this disk. This is used to link the Disk to its virtual disk.')
diskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 24, 25, 40))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("rebuild", 24), ("noMedia", 25), ("notReady", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskState.setStatus('mandatory')
if mibBuilder.loadTexts: diskState.setDescription('The current state of the Disk. Possible states: 0: Unknown 1: Ready 2: Failed 3: Online - The disk is accessible and has no known problems. 4: Offline 6: Degraded 24: Rebuild 25: No Media 40: Not Ready')
diskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: diskSeverity.setDescription('Seriousness of the disk state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
diskLdmDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dynamic", 1), ("removable", 2), ("cd-rom", 3), ("basic", 4), ("basicNoSignature", 5), ("oem", 6), ("dvd", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLdmDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: diskLdmDeviceType.setDescription("The disk's LDM device type. Possible values: 1: Dynamic 2: Removable 3: CD-ROM 4: Basic 5: Basic with no signature 6: OEM 7: DVD")
diskDgName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDgName.setStatus('mandatory')
if mibBuilder.loadTexts: diskDgName.setDescription('The name identifying the disk type.')
diskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: diskLengthInMB.setDescription('Length of the disk in megabytes. If this size is 0, it is smaller than a megabyte.')
diskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: diskLengthInBytes.setDescription('The portion in bytes of the disk length that is less than a megabyte. This size plus the diskLengthInMB is the total length of the disk.')
diskFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: diskFreeSpaceInMB.setDescription('The amount of free space on this disk in megabytes. If this size is 0, it is smaller than a megabyte.')
diskFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskFreeSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: diskFreeSpaceInBytes.setDescription('The portion in bytes of the disk free space that is less than a megabyte. This size plus the diskFreeSpaceInMB is the total free space on the disk.')
diskAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskAdapter.setStatus('mandatory')
if mibBuilder.loadTexts: diskAdapter.setDescription('The name of the controller to which the device(s) represented by this disk object are connected.')
diskPort = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPort.setStatus('mandatory')
if mibBuilder.loadTexts: diskPort.setDescription("The disk's port number as represented in Array Manager.")
diskTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: diskTargetID.setDescription("The disk's target ID as represented in Array Manager.")
diskLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskLunID.setStatus('mandatory')
if mibBuilder.loadTexts: diskLunID.setDescription("The disk's LUN ID as represented in Array Manager.")
diskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskVendor.setStatus('mandatory')
if mibBuilder.loadTexts: diskVendor.setDescription("The disk's (re)seller's name.")
arrayDiskLogicalConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3), )
if mibBuilder.loadTexts: arrayDiskLogicalConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionTable.setDescription('A table of the connections between array disks, the virtual disk to which they belong, and their associated logical disk. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found. ')
arrayDiskLogicalConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1), ).setIndexNames((0, "ArrayManager-MIB", "arrayDiskLogicalConnectionNumber"))
if mibBuilder.loadTexts: arrayDiskLogicalConnectionEntry.setStatus('mandatory')
arrayDiskLogicalConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionNumber.setDescription('Instance number of this array disk logical connection entry.')
arrayDiskLogicalConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskName.setDescription('The name of the array disk in this logical connection.')
arrayDiskLogicalConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionArrayDiskNumber.setDescription('The instance number of the array disk in this logical connection.')
arrayDiskLogicalConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskName.setDescription('The name of the virtual disk to which this array disk belongs.')
arrayDiskLogicalConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionVirtualDiskNumber.setDescription('The instance number of the virtual disk to which this array disk belongs.')
arrayDiskLogicalConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskName.setDescription('The name of the disk group to with this array disk belongs.')
arrayDiskLogicalConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskLogicalConnectionDiskNumber.setDescription('This instance number of the disk group to with this array disk belongs. ')
subDiskTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4), )
if mibBuilder.loadTexts: subDiskTable.setStatus('mandatory')
subDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1), ).setIndexNames((0, "ArrayManager-MIB", "subDiskNumber"))
if mibBuilder.loadTexts: subDiskEntry.setStatus('mandatory')
subDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskNumber.setStatus('mandatory')
subDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: subDiskName.setDescription('The name identifying this sub-disk.')
subDiskState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskState.setStatus('mandatory')
if mibBuilder.loadTexts: subDiskState.setDescription('The current state of the sub-disk. Possible states: 0: Unknown 1: Ready 2: Failed 3: Online - The disk is accessible and has no known problems. 4: Offline 6: Degraded')
subDiskSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: subDiskSeverity.setDescription('Severity of the sub-disk state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
subDiskLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: subDiskLengthInMB.setDescription('Length of the sub-disk in megabytes. If this size is 0, it is smaller than a megabyte.')
subDiskLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDiskLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: subDiskLengthInBytes.setDescription('The portion in bytes of the sub-disk length that is less than a megabyte. This size plus the subDiskLengthInMB is the total length of the sub-disk.')
partitionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5), )
if mibBuilder.loadTexts: partitionTable.setStatus('mandatory')
partitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1), ).setIndexNames((0, "ArrayManager-MIB", "partitionNumber"))
if mibBuilder.loadTexts: partitionEntry.setStatus('mandatory')
partitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: partitionNumber.setDescription('Instance number of the partition entry.')
partitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionName.setStatus('mandatory')
if mibBuilder.loadTexts: partitionName.setDescription("The partition's name as represented in Array Manager.")
partitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionState.setStatus('mandatory')
if mibBuilder.loadTexts: partitionState.setDescription('The state of the partition. Possible states: 0: Unknown 1: Ready 2: Failed 3: Online 6: Degraded')
partitionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: partitionSeverity.setDescription('Severity of the partition state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
partitionLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLengthInMB.setDescription('The length of the partition in megabytes. If this size is 0, it is smaller than a megabyte.')
partitionLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLengthInBytes.setDescription('The portion of the partition length that is less than a megabyte. This size plus the partitionLengthInMB is the total length of the partition.')
partitionLdmVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2), ("logical", 3), ("cdrom", 4), ("simple", 5), ("stripe", 6), ("mirror", 7), ("raid5", 8), ("span", 9), ("dynamic", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLdmVolumeType.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLdmVolumeType.setDescription("The partition's LDM volume type. Possible values: 1: Basic - standard DOS/Windows disk signature 2: Extended 3: Logical 4: CD ROM 5: Simple 6: Stripe 7: Mirror 8: Raid5 9: Span 10: Dynamic - upgraded disk")
extendedPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6), )
if mibBuilder.loadTexts: extendedPartitionTable.setStatus('mandatory')
extendedPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1), ).setIndexNames((0, "ArrayManager-MIB", "extendedPartitionNumber"))
if mibBuilder.loadTexts: extendedPartitionEntry.setStatus('mandatory')
extendedPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: extendedPartitionNumber.setDescription('The instance number of this extended partition entry.')
extendedPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: extendedPartitionName.setDescription('The name of this extended partition as represented in Array Manager')
extendedPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("degraded", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionState.setStatus('mandatory')
if mibBuilder.loadTexts: extendedPartitionState.setDescription('The current state of the extended partition. Possible states: 0: Unknown 1: Ready 2: Failed 3: Online 6: Degraded')
extendedPartitionSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extendedPartitionSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: extendedPartitionSeverity.setDescription('Seriousness of the extended partition state. Possible values: 0: OK 1: Warning 2: Error 3: Failure')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7), )
if mibBuilder.loadTexts: volumeTable.setStatus('mandatory')
if mibBuilder.loadTexts: volumeTable.setDescription('A table of volumes that are recognized by the operating system.')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1), ).setIndexNames((0, "ArrayManager-MIB", "volumeNumber"))
if mibBuilder.loadTexts: volumeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: volumeEntry.setDescription('An entry in the volume table. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
volumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: volumeNumber.setDescription('Instance number of the volume entry.')
volumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: volumeDriveLetter.setDescription("The volume's path (or drive letter) according to the operating system.")
volumeState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 18, 25, 26))).clone(namedValues=NamedValues(("ready", 1), ("failed", 2), ("online", 3), ("offline", 4), ("degraded", 6), ("failedRedundancy", 18), ("noMedia", 25), ("formatting", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeState.setStatus('mandatory')
if mibBuilder.loadTexts: volumeState.setDescription("The volume's current state. Possible states: 0: Unknown 1: Ready - The volume is accessible and has no known problems. 2: Failed - The volume cannot be started automatically. 3: Online 4: Offline 6: Degraded 18: Failed Redundancy - The data on the volume is no longer fault tolerant because one of the underlying disks is not online. 25: No Media 26: Formatting - The volume is being formatted using the specifications you chose for formatting. ?: Initializing - The volume is being initialized. ?: Resynching - The volume's mirrors are being resynchronized so that both mirrors contain identical data. ?: Regenerating - Data and parity are being regenerated for the RAID-5 volume. ?: Failed Redundancy (At Risk) - The data on the volume is no longer fault tolerant, and I/O errors have been detected on the underlying disk ?: No Media - No media has been inserted into the CD-ROM or removable drive. ")
volumeSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warning", 1), ("error", 2), ("failrue", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: volumeSeverity.setDescription('The severity of the volume. Possible values: 0: OK 1: Warining 2: Error 3: Failure')
volumeLdmVolumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2), ("logical", 3), ("cd-rom", 4), ("simple", 5), ("stripe", 6), ("mirrror", 7), ("raid5", 8), ("span", 9), ("dynamic", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLdmVolumeType.setStatus('mandatory')
if mibBuilder.loadTexts: volumeLdmVolumeType.setDescription("The volume's LMD volume type. Possible values: 1: Basic - standard DOS/Windows disk signature 2: Extended 3: Logical 4: CD ROM 5: Simple 6: Stripe 7: Mirror 8: Raid5 9: Span 10: Dynamic ")
volumeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLabel.setStatus('mandatory')
if mibBuilder.loadTexts: volumeLabel.setDescription('The user definable label for this volume.')
volumeFSType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFSType.setStatus('mandatory')
if mibBuilder.loadTexts: volumeFSType.setDescription("The volume's operating system file system type. ")
volumeLengthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLengthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: volumeLengthInMB.setDescription('The size of the volume in megabytes. If this size is 0, it is smaller than a megabyte.')
volumeLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeLengthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: volumeLengthInBytes.setDescription('The portion in bytes of the volume that is smaller than a megabyte. This size plus the volumeLengthInMB is the total length of the volume.')
volumeFreeSpaceInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpaceInMB.setStatus('mandatory')
if mibBuilder.loadTexts: volumeFreeSpaceInMB.setDescription('The amount of free space on the volume in megabytes. If this size if 0, it is smaller than a megabyte.')
volumeFreeSpaceInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpaceInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: volumeFreeSpaceInBytes.setDescription('The portion in bytes of the free space on the volume that is smaller than a megabyte. This size plus the volumeFreeSpaceInMB is the total length of the volume.')
plexTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8), )
if mibBuilder.loadTexts: plexTable.setStatus('mandatory')
plexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1), ).setIndexNames((0, "ArrayManager-MIB", "plexNumber"))
if mibBuilder.loadTexts: plexEntry.setStatus('mandatory')
plexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexNumber.setStatus('mandatory')
if mibBuilder.loadTexts: plexNumber.setDescription('Instance number of the plex entry.')
plexName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexName.setStatus('mandatory')
if mibBuilder.loadTexts: plexName.setDescription('The name identifying this plex as represented in Array Manager.')
plexStripeWidthInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStripeWidthInMB.setStatus('mandatory')
if mibBuilder.loadTexts: plexStripeWidthInMB.setDescription('The width of the plex stripe in megabytes. If this size is 0, it is smaller than a megabyte.')
plexStripeWidthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexStripeWidthInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: plexStripeWidthInBytes.setDescription('The portion in bytes of the plex stripe that is smaller than a megabyte. This size plus the plexStripeWidthInMB is the total size of the stripe.')
plexColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexColumns.setStatus('mandatory')
if mibBuilder.loadTexts: plexColumns.setDescription('The number of columns in one plex.')
plexLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stripedSubdisks", 1), ("concatenatedSubdisks", 2), ("raidLayout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plexLayout.setStatus('mandatory')
if mibBuilder.loadTexts: plexLayout.setDescription('The type of RAID of this plex. Possible values: 1: Striped Subdisks 2: Concatenated Subdisks 3: RAID layout ')
basicDiskExtendedConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9), )
if mibBuilder.loadTexts: basicDiskExtendedConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionTable.setDescription('A table of the connections between array disks, the virtual disk to which they belong, their associated logical basic disk, extended partition, partition and volume. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found. ')
basicDiskExtendedConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1), ).setIndexNames((0, "ArrayManager-MIB", "basicDiskExtendedConnectionNumber"))
if mibBuilder.loadTexts: basicDiskExtendedConnectionEntry.setStatus('mandatory')
basicDiskExtendedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionNumber.setDescription('Instance number of this basic disk connection entry.')
basicDiskExtendedConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionArrayDiskName.setDescription('The name of an array disk that is part of the basic disk in this connection table entry.')
basicDiskExtendedConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionArrayDiskNumber.setDescription('The instance number in the arrayDiskTable of the array disk in this basic disk connection entry.')
basicDiskExtendedConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVirtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionVirtualDiskName.setDescription('The name of the virtual disk that is part of the basic disk in this connection table entry.')
basicDiskExtendedConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVirtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionVirtualDiskNumber.setDescription('The instance number in the virtualDiskTable of this virtual disk that is part of the basic disk.')
basicDiskExtendedConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionDiskName.setDescription('The name of the basic disk in this connection table entry.')
basicDiskExtendedConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionDiskNumber.setDescription('The instance number in the diskTable of the disk in this conneciton table entry.')
basicDiskExtendedConnectionExtendedPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionExtendedPartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionExtendedPartitionName.setDescription('The name of the extended partition that is part of the basic disk in this connection table entry.')
basicDiskExtendedConnectionExtendedPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionExtendedPartitionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionExtendedPartitionNumber.setDescription('The instance number in the extendedPartitionTable of this extended partition that is part of the basic disk.')
basicDiskExtendedConnectionPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionPartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionPartitionName.setDescription('The name of the partition that is part of the basic disk in this connection table entry.')
basicDiskExtendedConnectionPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionPartitionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionPartitionNumber.setDescription('The instance number in the partitionTable of this partition that is part of the basic disk.')
basicDiskExtendedConnectionVolumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVolumeDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionVolumeDriveLetter.setDescription('The path (or drive letter) of the volume to which this basic disk belongs.')
basicDiskExtendedConnectionVolumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskExtendedConnectionVolumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskExtendedConnectionVolumeNumber.setDescription('The instance number in the volumeTable of the volume to which this basic disk belongs.')
basicDiskNonExtendedConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10), )
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionTable.setDescription('A table of the connections between array disks, the virtual disk to which they belong, their associated logical basic disk, partition and volume. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found.')
basicDiskNonExtendedConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1), ).setIndexNames((0, "ArrayManager-MIB", "basicDiskNonExtendedConnectionNumber"))
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionEntry.setStatus('mandatory')
basicDiskNonExtendedConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionNumber.setDescription('Instance number of this basic disk connection entry.')
basicDiskNonExtendedConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionArrayDiskName.setDescription('The name of an array disk that is part of the basic disk in this connection table entry.')
basicDiskNonExtendedConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionArrayDiskNumber.setDescription('The instance number in the arrayDiskTable of the array disk in this basic disk connection entry.')
basicDiskNonExtendedConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVirtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVirtualDiskName.setDescription('The name of the virtual disk that is part of the basic disk in this connection table entry.')
basicDiskNonExtendedConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVirtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVirtualDiskNumber.setDescription('The instance number in the virtualDiskTable of this virtual disk that is part of the basic disk.')
basicDiskNonExtendedConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionDiskName.setDescription('The name of the basic disk in this connection table entry.')
basicDiskNonExtendedConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionDiskNumber.setDescription('The instance number in the diskTable of the disk in this conneciton table entry.')
basicDiskNonExtendedConnectionPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionPartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionPartitionName.setDescription('The name of the partition that is part of the basic disk in this connection table entry.')
basicDiskNonExtendedConnectionPartitionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionPartitionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionPartitionNumber.setDescription('The instance number in the partitionTable of this partition that is part of the basic disk.')
basicDiskNonExtendedConnectionVolumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVolumeDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVolumeDriveLetter.setDescription('The path (or drive letter) of the volume to which this basic disk belongs.')
basicDiskNonExtendedConnectionVolumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVolumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDiskNonExtendedConnectionVolumeNumber.setDescription('The instance number in the volumeTable of the volume to which this basic disk belongs.')
dynamicDiskConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11), )
if mibBuilder.loadTexts: dynamicDiskConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionTable.setDescription('A table of the connections between array disks, the virtual disk to which they belong, their associated logical dynamic disk, sub-disk, plex and volume. For each object in the table, its object number corresponds to an instance number in the appropriate MIB table for that object where all of the object properties can be found.')
dynamicDiskConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1), ).setIndexNames((0, "ArrayManager-MIB", "dynamicDiskConnectionNumber"))
if mibBuilder.loadTexts: dynamicDiskConnectionEntry.setStatus('mandatory')
dynamicDiskConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionNumber.setDescription('Instance number of this dynamic disk connection entry.')
dynamicDiskConnectionArrayDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionArrayDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionArrayDiskName.setDescription('The name of an array disk that is part of the dynamic disk in this connection table entry.')
dynamicDiskConnectionArrayDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionArrayDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionArrayDiskNumber.setDescription('The instance number in the arrayDiskTable of the array disk in this dynamic disk connection entry.')
dynamicDiskConnectionVirtualDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVirtualDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionVirtualDiskName.setDescription('The name of the virtual disk that is part of the dynamic disk in this connection table entry.')
dynamicDiskConnectionVirtualDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVirtualDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionVirtualDiskNumber.setDescription('The instance number in the virtualDiskTable of this virtual disk that is part of the dynamic disk.')
dynamicDiskConnectionDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionDiskName.setDescription('The name of the dynamic disk in this connection table entry.')
dynamicDiskConnectionDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionDiskNumber.setDescription('The instance number in the diskTable of the disk in this conneciton table entry.')
dynamicDiskConnectionSubDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionSubDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionSubDiskName.setDescription('The name of the dynamic sub-disk in this connection.')
dynamicDiskConnectionSubDiskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionSubDiskNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionSubDiskNumber.setDescription('The instance number in the subDiskTable of the dynamic sub-disk in this connection.')
dynamicDiskConnectionPlexName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionPlexName.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionPlexName.setDescription('The name of the plex to which this dynamic disk belongs.')
dynamicDiskConnectionPlexNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDiskConnectionPlexNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionPlexNumber.setDescription('The instance number in the plexTable of the plex to which this dynamic disk belongs. ')
dynamicDiskConnectionVolumeDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVolumeDriveLetter.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionVolumeDriveLetter.setDescription('The path (or drive letter) of the volume to which this dynamic disk belongs.')
dynamicDiskConnectionVolumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 140, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDiskConnectionVolumeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDiskConnectionVolumeNumber.setDescription('The instance number of the volume to which this dynamic disk belongs.')
aryMgrEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200))
controllerNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 201), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNameEv.setDescription('Controller Name for which trap is generated.')
channelNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumberEv.setStatus('mandatory')
if mibBuilder.loadTexts: channelNumberEv.setDescription('Channel Number for which trap is generated.')
targetIDEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 203), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetIDEv.setStatus('mandatory')
if mibBuilder.loadTexts: targetIDEv.setDescription('SCSI ID of the device for which trap is generated.')
virtualDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 204), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskNameEv.setDescription('Virtual Disk for which trap is generated.')
arrayDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 205), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: arrayDiskNameEv.setDescription('Array Disk for which trap is generated.')
oldVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 206), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldVDConfigEv.setStatus('mandatory')
if mibBuilder.loadTexts: oldVDConfigEv.setDescription('Current Virtual Disk configuration for which trap is generated')
newVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 207), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newVDConfigEv.setStatus('mandatory')
if mibBuilder.loadTexts: newVDConfigEv.setDescription('New Virtual Disk configuration for which trap is generated.')
enclosureNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumberEv.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNumberEv.setDescription('Enclosure Number for which trap is generated.')
unitNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNumberEv.setStatus('mandatory')
if mibBuilder.loadTexts: unitNumberEv.setDescription('Unit Number for which trap is generated. (Fan, Power Supply, Temperature Probe)')
enclosureNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 210), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureNameEv.setDescription('Enclosure Name for which trap is generated.')
unitNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 211), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: unitNameEv.setDescription('Unit Number for which trap is generated. (Fan, Power Supply, Temperature Probe)')
timeEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeEv.setStatus('mandatory')
if mibBuilder.loadTexts: timeEv.setDescription('Amount of time specified in the trap message.')
volumeNameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 213), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNameEv.setStatus('mandatory')
if mibBuilder.loadTexts: volumeNameEv.setDescription('Volume Drive Letter for which trap is generated.')
enclosureUnitNamesEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 214), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureUnitNamesEv.setStatus('mandatory')
if mibBuilder.loadTexts: enclosureUnitNamesEv.setDescription('Combination of the enclosure name and unit number for which trap is generated.')
virtualDiskNameNewEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 215), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNameNewEv.setStatus('mandatory')
if mibBuilder.loadTexts: virtualDiskNameNewEv.setDescription('New name of the virtual disk for which trap is generated.')
device1NameEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 216), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: device1NameEv.setStatus('mandatory')
if mibBuilder.loadTexts: device1NameEv.setDescription('Name of the device for which trap is generated. Note: The device type contained in this generic variable could change for different occurrences of a trap.')
senseKeyEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 217), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: senseKeyEv.setStatus('mandatory')
if mibBuilder.loadTexts: senseKeyEv.setDescription('Sense Key data for this trap in hexidecimal.')
senseCodeEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 218), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: senseCodeEv.setStatus('mandatory')
if mibBuilder.loadTexts: senseCodeEv.setDescription('Sense Code data for this trap in hexidecimal.')
senseQualifierEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 219), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: senseQualifierEv.setStatus('mandatory')
if mibBuilder.loadTexts: senseQualifierEv.setDescription('Sense Qualifier data for this trap in hexidecimal.')
eMMFWVersion0Ev = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 220), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMMFWVersion0Ev.setStatus('mandatory')
if mibBuilder.loadTexts: eMMFWVersion0Ev.setDescription('Firmware version for EMM 0.')
eMMFWVersion1Ev = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 221), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMMFWVersion1Ev.setStatus('mandatory')
if mibBuilder.loadTexts: eMMFWVersion1Ev.setDescription('Firmware version for EMM 1.')
rebuildRateEv = MibScalar((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200, 222), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rebuildRateEv.setStatus('mandatory')
if mibBuilder.loadTexts: rebuildRateEv.setDescription('New rebuild rate for controller in this event.')
arrayDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,500)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: arrayDiskFailed.setDescription('%s, %s failed.')
arrayDiskRemoved = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,501)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: arrayDiskRemoved.setDescription('%s, %s removed.')
arrayDiskOffline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,502)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: arrayDiskOffline.setDescription('%s, %s offline.')
arrayDiskDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,503)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: arrayDiskDegraded.setDescription('%s, %s degraded.')
arrayDiskInserted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,504)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: arrayDiskInserted.setDescription('%s, %s inserted.')
virtualDiskCreated = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,505)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: virtualDiskCreated.setDescription('%s, virtual disk (%s) created.')
virtualDiskDeleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,506)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: virtualDiskDeleted.setDescription('%s, virtual disk (%s) deleted.')
virtualDiskConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,507)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"), ("ArrayManager-MIB", "oldVDConfigEv"), ("ArrayManager-MIB", "newVDConfigEv"))
if mibBuilder.loadTexts: virtualDiskConfigChanged.setDescription('%s, virtual disk (%s) configuration changed from %s to %s')
virtualDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,508)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: virtualDiskFailed.setDescription('%s, virtual disk (%s) failed.')
virtualDiskDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,509)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: virtualDiskDegraded.setDescription('%s, virtual disk (%s) degraded.')
vdFailedRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,510)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdFailedRedundancy.setDescription('%s, virtual disk (%s) is no longer redundant.')
checkConsistencyStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,520)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: checkConsistencyStarted.setDescription('%s, virtual disk (%s) check consistency started.')
vdFormatStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,521)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdFormatStarted.setDescription('%s, virtual disk (%s) format started.')
adFormatStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,522)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adFormatStarted.setDescription('%s, %s format started.')
vdInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,523)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdInitializeStarted.setDescription('%s, virtual disk (%s) initialization started.')
adInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,524)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adInitializeStarted.setDescription('%s, %s initialize started.')
vdReconfigStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,525)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"), ("ArrayManager-MIB", "oldVDConfigEv"), ("ArrayManager-MIB", "newVDConfigEv"))
if mibBuilder.loadTexts: vdReconfigStarted.setDescription('%s, virtual disk (%s) reconfiguration from %s stripe size to %s stripe size started.')
vdRebuildStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,526)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdRebuildStarted.setDescription('%s, virtual disk (%s) rebuild started.')
adRebuildStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,527)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adRebuildStarted.setDescription('%s, %s rebuild started.')
adDiagStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,528)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adDiagStarted.setDescription('%s, %s diagnostics started.')
checkConsistencyCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,529)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: checkConsistencyCancelled.setDescription('%s, virtual disk (%s) consistency check cancelled.')
vdFormatCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,530)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdFormatCancelled.setDescription('%s, virtual disk (%s) format cancelled.')
adFormatCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,531)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adFormatCancelled.setDescription('%s, %s format cancelled.')
vdInitializeCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,532)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdInitializeCancelled.setDescription('%s, virtual disk (%s) initialization cancelled.')
adInitializeCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,533)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adInitializeCancelled.setDescription('%s, %s initialize cancelled.')
vdReconfigCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,534)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdReconfigCancelled.setDescription('%s, virtual disk (%s) reconfiguration cancelled.')
vdRebuildCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,535)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdRebuildCancelled.setDescription('%s, virtual disk (%s) rebuild cancelled.')
adRebuildCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,536)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adRebuildCancelled.setDescription('%s, %s rebuild cancelled.')
adDiagCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,537)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adDiagCancelled.setDescription('%s, %s diagnostics cancelled.')
checkConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,538)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: checkConsistencyFailed.setDescription('%s, virtual disk (%s) consistency check failed.')
vdFormatFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,539)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdFormatFailed.setDescription('%s, virtual disk (%s) format failed.')
adFormatFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,540)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adFormatFailed.setDescription('%s, %s format failed.')
vdInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,541)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdInitializeFailed.setDescription('%s, virtual disk (%s) initialization failed.')
adInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,542)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adInitializeFailed.setDescription('%s, %s initialize failed.')
vdReconfigFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,543)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdReconfigFailed.setDescription('%s, virtual disk (%s) reconfiguration failed.')
vdRebuildFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,544)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdRebuildFailed.setDescription('%s, virtual disk (%s) rebuild failed.')
adRebuildFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,545)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adRebuildFailed.setDescription('%s, %s rebuild failed.')
adDiagFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,546)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adDiagFailed.setDescription('%s, %s diagnostics failed.')
checkConsistencyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,547)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: checkConsistencyCompleted.setDescription('%s, virtual disk (%s) consistency check completed.')
vdFormatCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,548)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdFormatCompleted.setDescription('%s, virtual disk (%s) format completed.')
adFormatCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,549)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adFormatCompleted.setDescription('%s, %s format completed.')
vdInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,550)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdInitializeCompleted.setDescription('%s, virtual disk (%s) initialization completed.')
adInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,551)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adInitializeCompleted.setDescription('%s, %s initialize completed.')
vdReconfigCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,552)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdReconfigCompleted.setDescription('%s, virtual disk (%s) reconfiguration completed.')
vdRebuildCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,553)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: vdRebuildCompleted.setDescription('%s, virtual disk (%s) rebuild completed.')
adRebuildCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,554)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adRebuildCompleted.setDescription('%s, %s rebuild completed.')
adDiagCompleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,555)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: adDiagCompleted.setDescription('%s, %s diagnostics completed.')
percPredictiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,570)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: percPredictiveFailure.setDescription("%s, %s reported predictive failure. If this disk is part of a redundant virtual disk, select the 'Offline' option and then replace the disk. Then configure a hot spare and it will start the rebuild automatically. If this disk is a hot spare, select the 'Prepare to Remove' option and then replace the disk. If this disk is part of a non-redundant disk, you should back-up your data immediately. If the disk fails, you will not be able to recover the data.")
percSCSISenseData = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,571)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: percSCSISenseData.setDescription("%s, %s SCSI sense failure. If this disk is part of a redundant virtual disk, select the 'Offline' option and then replace the disk. Then configure a hot spare and it will start the rebuild automatically. If this disk is a hot spare, select the 'Prepare to Remove' option and then replace the disk. If this disk is part of a non-redundant disk, you should back-up your data immediately. If the disk fails, you will not be able to recover the data.")
percPauseIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,572)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "timeEv"))
if mibBuilder.loadTexts: percPauseIO.setDescription('%s, Channel %s I/O paused, I/O will automatically resume after the allotted time (%d seconds).')
percResumeIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,573)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: percResumeIO.setDescription('%s, Channel %s I/O resumed.')
percHotSpareAssign = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,574)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: percHotSpareAssign.setDescription('%s, assigned %s as Hot Spare.')
percHotSpareUnAssign = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,575)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: percHotSpareUnAssign.setDescription('%s, unassigned %s as Hot Spare.')
cntrlBatteryNeedsReconditioning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,579)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: cntrlBatteryNeedsReconditioning.setDescription('%s battery needs reconditioning.')
cntrlBatteryLow = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,580)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: cntrlBatteryLow.setDescription('%s battery low.')
cntrlBatteryRecondition = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,581)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: cntrlBatteryRecondition.setDescription('%s battery is reconditioning.')
cntrlBatteryReconComplete = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,582)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: cntrlBatteryReconComplete.setDescription('%s battery reconditioning completed.')
cntrlPauseIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,583)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: cntrlPauseIO.setDescription('%s I/O paused, I/O will automatically resume after the allotted time.')
cntrlResumeIO = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,584)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: cntrlResumeIO.setDescription('%s I/O resumed.')
perc2SmartFPTExceeded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,585)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: perc2SmartFPTExceeded.setDescription('%s SMART:FPT_EXCEEDED on %s.')
perc2SmartConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,586)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: perc2SmartConfigChange.setDescription('%s SMART configuration change on %s.')
perc2SmartWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,587)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: perc2SmartWarning.setDescription('%s SMART warning on %s.')
perc2SmartWarningTemp = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,588)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: perc2SmartWarningTemp.setDescription('%s SMART warning temperature on %s.')
perc2SmartWarningDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,589)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: perc2SmartWarningDegraded.setDescription('%s SMART warning degraded on %s.')
perc2SmartFPTExceededTest = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,590)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: perc2SmartFPTExceededTest.setDescription('%s, On %s the failure prediction threshold exceeded due to test-No action needed.')
enclosureAlertTempWarnMax = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,591)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureAlertTempWarnMax.setDescription('%s, %s has exceded the maximum warning threshold.')
enclosureAlertTempWarnMin = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,592)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureAlertTempWarnMin.setDescription('%s, %s has dropped below the minimum warning threshold.')
enclosureAlertTempErrMax = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,593)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureAlertTempErrMax.setDescription('%s, %s has exceded the maximum error threshold.')
enclosureAlertTempErrMin = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,594)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureAlertTempErrMin.setDescription('%s, %s has dropped below the minimum error threshold.')
enclosureGenericFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,595)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureGenericFailed.setDescription('%s, %s failed.')
enclosureGenericOffline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,596)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureGenericOffline.setDescription('%s, %s is offline.')
enclosureGenericUnknown = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,597)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureGenericUnknown.setDescription('%s, %s is in an unknown state.')
enclosureGenericWarning = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,598)).setObjects(("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "unitNameEv"))
if mibBuilder.loadTexts: enclosureGenericWarning.setDescription('%s, %s is in a warning state.')
enclosureGenericDegraded = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,600)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureUnitNamesEv"))
if mibBuilder.loadTexts: enclosureGenericDegraded.setDescription('%s, %s is degraded.')
alertShutdownEnclosure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,602)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
if mibBuilder.loadTexts: alertShutdownEnclosure.setDescription('%s, %s Shutting down.')
alertShutdownServer = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,603)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
if mibBuilder.loadTexts: alertShutdownServer.setDescription('%s, %s Shutting down the server.')
alertPausedCheckConsistency = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,604)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertPausedCheckConsistency.setDescription('%s, Virtual Disk (%s) consistency check paused.')
alertResumedCheckConsistency = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,605)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertResumedCheckConsistency.setDescription('%s, Virtual Disk (%s) consistency check resumed.')
alertVirtualDiskSplitMirror = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,606)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertVirtualDiskSplitMirror.setDescription('%s, Virtual Disk (%s) split mirror.')
alertVirtualDiskUnmirror = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,607)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertVirtualDiskUnmirror.setDescription('%s, Virtual Disk (%s) unmirrored.')
alertRenameVirtualDisk = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,608)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"), ("ArrayManager-MIB", "virtualDiskNameNewEv"))
if mibBuilder.loadTexts: alertRenameVirtualDisk.setDescription('%s, %s renamed to %s.')
alertGenericReady = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,609)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
if mibBuilder.loadTexts: alertGenericReady.setDescription('%s, %s is in a ready state.')
alertCommTimeout = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,610)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
if mibBuilder.loadTexts: alertCommTimeout.setDescription('%s, %s SES communication timeout.')
alertCommFailure = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,611)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
if mibBuilder.loadTexts: alertCommFailure.setDescription('%s, %s SES communication lost.')
alertCommRestored = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,612)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "device1NameEv"))
if mibBuilder.loadTexts: alertCommRestored.setDescription('%s, %s SES communication restored.')
genericEvent_DATABASE_UP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,650))
if mibBuilder.loadTexts: genericEvent_DATABASE_UP.setDescription('Communication with the Array Manager database is now possible.')
genericEvent_DATABASE_DOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,651))
if mibBuilder.loadTexts: genericEvent_DATABASE_DOWN.setDescription('Communication with the Array Manager database is NOT possible.')
alertMegalibTimeout = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,668)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: alertMegalibTimeout.setDescription('%s Array Manager has lost communication with this RAID controller and subsystem.')
alertScsiSenseFormatFail = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,670)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"), ("ArrayManager-MIB", "senseKeyEv"), ("ArrayManager-MIB", "senseCodeEv"), ("ArrayManager-MIB", "senseQualifierEv"))
if mibBuilder.loadTexts: alertScsiSenseFormatFail.setDescription('%s, %s Sense Key = %s, Sense Code = %s, Sense Qualifier = %s A format unit operation was interrupted prior to completion.')
alertScsiSenseSectorReassign = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,671)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"), ("ArrayManager-MIB", "senseKeyEv"), ("ArrayManager-MIB", "senseCodeEv"), ("ArrayManager-MIB", "senseQualifierEv"))
if mibBuilder.loadTexts: alertScsiSenseSectorReassign.setDescription('%s, %s Sense Key = %s, Sense Code = %s, Sense Qualifier = %s If this disk is part of a non-redundant virtual disk, the data for this block cannot be recovered.')
alertEmmFwMismatch = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,672)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "eMMFWVersion0Ev"), ("ArrayManager-MIB", "eMMFWVersion1Ev"))
if mibBuilder.loadTexts: alertEmmFwMismatch.setDescription('%s, %s EMMfirmware mismatch (%s / %s.) This is an unsupported configuration. Please download the firmware to this enclosure again to correct this condition.')
alertConserveCacheModeEnable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,673)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
if mibBuilder.loadTexts: alertConserveCacheModeEnable.setDescription('%s, %s conservative cache mode enabled.')
alertConserveCacheModeDisable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,674)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
if mibBuilder.loadTexts: alertConserveCacheModeDisable.setDescription('%s, %s conservative cache mode disabled.')
alertEnclosureFwDownload = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,675)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"), ("ArrayManager-MIB", "eMMFWVersion0Ev"))
if mibBuilder.loadTexts: alertEnclosureFwDownload.setDescription('%s, %s firmware version %s downloaded successfully.')
alertEnclosureAlarmEnable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,676)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
if mibBuilder.loadTexts: alertEnclosureAlarmEnable.setDescription('%s, %s alarm enabled.')
alertEnclosureAlarmDisable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,677)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNameEv"))
if mibBuilder.loadTexts: alertEnclosureAlarmDisable.setDescription('%s, %s alarm disabled.')
alertControllerAlarmEnable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,678)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: alertControllerAlarmEnable.setDescription('%s, %s alarm enabled.')
alertControllerAlarmDisable = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,679)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: alertControllerAlarmDisable.setDescription('%s, %s alarm disabled.')
alertControllerRebuildRate = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,680)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "rebuildRateEv"))
if mibBuilder.loadTexts: alertControllerRebuildRate.setDescription('%s, rebuild rate changed to %s.')
alertArrayDiskForcedOnline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,681)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: alertArrayDiskForcedOnline.setDescription('%s, %s forced online.')
alertArrayDiskForcedOffline = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,682)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "arrayDiskNameEv"))
if mibBuilder.loadTexts: alertArrayDiskForcedOffline.setDescription('%s, %s forced offline.')
alertTaskBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,683)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertTaskBGI.setDescription('%s, virtual disk %s background initialization started.')
alertCancelBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,684)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertCancelBGI.setDescription('%s, virtual disk %s background initialization cancelled.')
alertFailBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,685)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertFailBGI.setDescription('%s, virtual disk %s background initialization failed.')
alertCompleteBGI = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,686)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: alertCompleteBGI.setDescription('%s, virtual disk %s background initialization completed.')
enclosureGenericNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,687)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureUnitNamesEv"))
if mibBuilder.loadTexts: enclosureGenericNotInstalled.setDescription('%s, %s is not installed.')
pv660fEvent_PHYSDEV_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,700)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_ONLINE.setDescription('A hard disk has been placed online.')
pv660fEvent_PHYSDEV_HOTSPARE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,701)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_HOTSPARE.setDescription('A hard disk added as hot spare.')
pv660fEvent_PHYSDEV_HARD_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,702)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_HARD_ERROR.setDescription('Hard disk error found.')
pv660fEvent_PHYSDEV_PFA = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,703)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_PFA.setDescription('Hard disk PFA condition found, this disk may fail soon.')
pv660fEvent_PHYSDEV_AUTO_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,704)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_AUTO_REBUILD_START.setDescription('An automatic rebuild has started.')
pv660fEvent_PHYSDEV_MANUAL_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,705)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_MANUAL_REBUILD_START.setDescription('A rebuild has started.')
pv660fEvent_PHYSDEV_REBUILD_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,706)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REBUILD_DONE.setDescription('Rebuild is over.')
pv660fEvent_PHYSDEV_REBUILD_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,707)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REBUILD_CANCELED.setDescription('Rebuild is cancelled.')
pv660fEvent_PHYSDEV_REBUILD_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,708)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REBUILD_ERROR.setDescription('Rebuild stopped with error.')
pv660fEvent_PHYSDEV_REBUILD_NEWDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,709)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REBUILD_NEWDEV_FAILED.setDescription('Rebuild stopped with error. New device failed.')
pv660fEvent_PHYSDEV_REBUILD_SYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,710)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REBUILD_SYSDEV_FAILED.setDescription('Rebuild stopped because logical drive failed.')
pv660fEvent_PHYSDEV_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,711)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_DEAD.setDescription('A hard disk has failed.')
pv660fEvent_PHYSDEV_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,712)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_FOUND.setDescription('A new hard disk has been found.')
pv660fEvent_PHYSDEV_GONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,713)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_GONE.setDescription('A hard disk has been removed.')
pv660fEvent_PHYSDEV_UNCONFIGURED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,714)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_UNCONFIGURED.setDescription('A previously configured disk is now available.')
pv660fEvent_PHYSDEV_EXPANDCAPACITY_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,715)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_EXPANDCAPACITY_START.setDescription('Expand Capacity Started.')
pv660fEvent_PHYSDEV_EXPANDCAPACITY_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,716)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_EXPANDCAPACITY_DONE.setDescription('Expand Capacity Completed.')
pv660fEvent_PHYSDEV_EXPANDCAPACITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,717)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_EXPANDCAPACITY_ERROR.setDescription('Expand Capacity Stopped with error.')
pv660fEvent_PHYSDEV_COMMAND_TIMEOUT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,718)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_COMMAND_TIMEOUT.setDescription('SCSI command timeout on hard device.')
pv660fEvent_PHYSDEV_COMMAND_ABORT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,719)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_COMMAND_ABORT.setDescription('SCSI command abort on hard disk.')
pv660fEvent_PHYSDEV_COMMAND_RETRIED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,720)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_COMMAND_RETRIED.setDescription('SCSI command retried on hard disk.')
pv660fEvent_PHYSDEV_PARITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,721)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_PARITY_ERROR.setDescription('Parity error found.')
pv660fEvent_PHYSDEV_SOFT_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,722)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_SOFT_ERROR.setDescription('Soft error found.')
pv660fEvent_PHYSDEV_MISC_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,723)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_MISC_ERROR.setDescription('Misc error found.')
pv660fEvent_PHYSDEV_RESET = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,724)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_RESET.setDescription('SCSI device reset.')
pv660fEvent_PHYSDEV_ACTIVESPARE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,725)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_ACTIVESPARE.setDescription('Active spare found.-')
pv660fEvent_PHYSDEV_WARMSPARE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,726)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_WARMSPARE.setDescription('Warm spare found.-')
pv660fEvent_PHYSDEV_REQSENSE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,727)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REQSENSE.setDescription('Request Sense Data available.')
pv660fEvent_PHYSDEV_INIT_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,728)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_INIT_STARTED.setDescription('Initialization started.')
pv660fEvent_PHYSDEV_INIT_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,729)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_INIT_DONE.setDescription('Initialization completed.')
pv660fEvent_PHYSDEV_INIT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,730)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_INIT_FAILED.setDescription('Initialization failed.')
pv660fEvent_PHYSDEV_INIT_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,731)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_INIT_CANCELED.setDescription('Initialization canceled.')
pv660fEvent_PHYSDEV_WRITEREC_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,732)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_WRITEREC_DEAD.setDescription('A hard disk failed because write recovery failed.')
pv660fEvent_PHYSDEV_RESET_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,733)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_RESET_DEAD.setDescription('A hard disk failed because SCSI bus reset failed.')
pv660fEvent_PHYSDEV_DBLCC_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,734)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_DBLCC_DEAD.setDescription('A hard disk failed because double check condition occured.')
pv660fEvent_PHYSDEV_REMOVED_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,735)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REMOVED_DEAD.setDescription('A hard disk failed because device is missing.')
pv660fEvent_PHYSDEV_GROSSERR_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,736)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_GROSSERR_DEAD.setDescription('A hard disk failed because of gross error on SCSI processor.')
pv660fEvent_PHYSDEV_BADTAG_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,737)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_BADTAG_DEAD.setDescription('A hard disk failed because of bad tag from the device.')
pv660fEvent_PHYSDEV_SCSITMO_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,738)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_SCSITMO_DEAD.setDescription('A hard disk failed because command to the device timed out.')
pv660fEvent_PHYSDEV_SYSRESET_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,739)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_SYSRESET_DEAD.setDescription('A hard disk failed because of the system reset.')
pv660fEvent_PHYSDEV_BSYPAR_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,740)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_BSYPAR_DEAD.setDescription('A hard disk failed because of busy status or parity error.')
pv660fEvent_PHYSDEV_BYCMD_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,741)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_BYCMD_DEAD.setDescription('A hard disk set to failed state by host.')
pv660fEvent_PHYSDEV_SELTMO_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,742)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_SELTMO_DEAD.setDescription('A hard disk failed because access to the device met with a selection time out.')
pv660fEvent_PHYSDEV_SEQERR_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,743)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_SEQERR_DEAD.setDescription('A hard disk failed because of a sequence error in the SCSI bus phase handling.')
pv660fEvent_PHYSDEV_UNKNOWNSTS_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,744)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_UNKNOWNSTS_DEAD.setDescription('A hard disk failed because device returned an unknown status.')
pv660fEvent_PHYSDEV_NOTRDY_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,745)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_NOTRDY_DEAD.setDescription('A hard disk failed because device is not ready.')
pv660fEvent_PHYSDEV_MISSING_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,746)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_MISSING_DEAD.setDescription('A hard disk failed because device was not found on start up.')
pv660fEvent_PHYSDEV_CODWRFAIL_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,747)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_CODWRFAIL_DEAD.setDescription("A hard disk failed because write operation of the 'Configuration On Disk' failed.")
pv660fEvent_PHYSDEV_BDTWRFAIL_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,748)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_BDTWRFAIL_DEAD.setDescription("A hard disk failed because write operation of 'Bad Data Table' failed.")
pv660fEvent_PHYSDEV_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,749)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_OFFLINE.setDescription('Physical device status changed to offline.')
pv660fEvent_PHYSDEV_STANDBY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,750)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_STANDBY.setDescription('Physical device status changed to Hot Spare.')
pv660fEvent_PHYSDEV_REBUILD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,751)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REBUILD.setDescription('Physical device status changed to rebuild.')
pv660fEvent_PHYSDEV_ID_MISMATCH = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,752)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_ID_MISMATCH.setDescription('Physical device ID did not match.')
pv660fEvent_PHYSDEV_FAILED_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,753)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_FAILED_START.setDescription('Physical device failed to start.')
pv660fEvent_PHYSDEV_OFFSET_SET = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,754)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_OFFSET_SET.setDescription('Physical device negotiated different offset than config.')
pv660fEvent_PHYSDEV_SET_BUS_WIDTH = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,755)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_SET_BUS_WIDTH.setDescription('Physical device negotiated different bus width than config.')
pv660fEvent_PHYSDEV_MISSING_ONSTARTUP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,756)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_MISSING_ONSTARTUP.setDescription('Physical drive missing on startup.')
pv660fEvent_PHYSDEV_REBUILD_START_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,757)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_REBUILD_START_FAILED.setDescription('Rebuild startup failed due to lower disk capacity.')
pv660fEvent_PHYSDEV_MOVING_TO_OTHER_CHN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,758)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_MOVING_TO_OTHER_CHN.setDescription('Physical drive is switching from a channel to the other channel.')
pv660fEvent_PHYSDEV_OFFLINE_DEVICE_MADE_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,759)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_OFFLINE_DEVICE_MADE_ONLINE.setDescription('Temporary-Dead physical drive is automatically made online.')
pv660fEvent_PHYSDEV_STANDBY_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,760)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_STANDBY_REBUILD_START.setDescription('A standby rebuild has started.')
pv660fEvent_FIBREDEV_LOOPID_SOFTADDR_OCCURRED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,761)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_FIBREDEV_LOOPID_SOFTADDR_OCCURRED.setDescription('Device Loop Id Conflict (Soft Addressing) Detected.')
pv660fEvent_SYSDEV_CHECK_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,762)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_CHECK_START.setDescription('Consistency check is started.')
pv660fEvent_SYSDEV_CHECK_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,763)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_CHECK_DONE.setDescription('Consistency check is finished.')
pv660fEvent_SYSDEV_CHECK_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,764)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_CHECK_CANCELED.setDescription('Consistency check is cancelled.')
pv660fEvent_SYSDEV_CHECK_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,765)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_CHECK_ERROR.setDescription('Consistency check on logical drive error.')
pv660fEvent_SYSDEV_CHECK_SYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,766)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_CHECK_SYSDEV_FAILED.setDescription('Consistency check on logical drive failed.')
pv660fEvent_SYSDEV_CHECK_PHYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,767)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_CHECK_PHYSDEV_FAILED.setDescription('Consistency check failed due to physical device failure.')
pv660fEvent_SYSDEV_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,768)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_OFFLINE.setDescription('Logical drive has been made offline.')
pv660fEvent_SYSDEV_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,769)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_CRITICAL.setDescription('Logical drive is critical.')
pv660fEvent_SYSDEV_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,770)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_ONLINE.setDescription('Logical drive has been placed online.')
pv660fEvent_SYSDEV_AUTO_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,771)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_AUTO_REBUILD_START.setDescription('An automatic rebuild has started on logical drive.')
pv660fEvent_SYSDEV_MANUAL_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,772)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_MANUAL_REBUILD_START.setDescription('A manual rebuild has started on logical drive.')
pv660fEvent_SYSDEV_REBUILD_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,773)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_REBUILD_DONE.setDescription('Rebuild on logical drive is over.')
pv660fEvent_SYSDEV_REBUILD_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,774)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_REBUILD_CANCELED.setDescription('Rebuild on logical drive is cancelled.')
pv660fEvent_SYSDEV_REBUILD_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,775)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_REBUILD_ERROR.setDescription('Rebuild stopped with error.')
pv660fEvent_SYSDEV_REBUILD_NEWDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,776)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_REBUILD_NEWDEV_FAILED.setDescription('Rebuild stopped with error. New device failed.')
pv660fEvent_SYSDEV_REBUILD_SYSDEV_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,777)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_REBUILD_SYSDEV_FAILED.setDescription('Rebuild stopped because logical drive failed.')
pv660fEvent_SYSDEV_INIT_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,778)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_INIT_STARTED.setDescription('Logical drive initialization started.')
pv660fEvent_SYSDEV_INIT_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,779)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_INIT_DONE.setDescription('Logical drive initialization done.')
pv660fEvent_SYSDEV_INIT_CANCELED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,780)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_INIT_CANCELED.setDescription('Logical drive initialization cancelled.')
pv660fEvent_SYSDEV_INIT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,781)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_INIT_FAILED.setDescription('Logical drive initialization failed.')
pv660fEvent_SYSDEV_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,782)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_FOUND.setDescription('A logical drive has been found.')
pv660fEvent_SYSDEV_GONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,783)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_GONE.setDescription('A logical drive has been deleted.')
pv660fEvent_SYSDEV_EXPANDCAPACITY_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,784)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_EXPANDCAPACITY_START.setDescription('Expand Capacity Started.')
pv660fEvent_SYSDEV_EXPANDCAPACITY_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,785)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_EXPANDCAPACITY_DONE.setDescription('Expand Capacity Completed.')
pv660fEvent_SYSDEV_EXPANDCAPACITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,786)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_EXPANDCAPACITY_ERROR.setDescription('Expand Capacity stopped with error.')
pv660fEvent_SYSDEV_BADBLOCK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,787)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BADBLOCK.setDescription('Bad Blocks found.')
pv660fEvent_SYSDEV_SIZECHANGED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,788)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_SIZECHANGED.setDescription('System drive size changed.')
pv660fEvent_SYSDEV_TYPECHANGED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,789)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_TYPECHANGED.setDescription('System drive type changed.')
pv660fEvent_SYSDEV_BADDATABLOCK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,790)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BADDATABLOCK.setDescription('Bad data blocks found. Possible data loss.')
pv660fEvent_SYSDEV_WR_LUN_MAP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,791)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_WR_LUN_MAP.setDescription('System drive LUN mapping has been written to config.')
pv660fEvent_SYSDEV_DATAREAD_FROM_BLOCK_IN_BDT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,792)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_DATAREAD_FROM_BLOCK_IN_BDT.setDescription('Attempt to read data from block that is marked in Bad Data Table')
pv660fEvent_SYSDEV_DATA_FOR_BLOCK_LOST = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,793)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_DATA_FOR_BLOCK_LOST.setDescription('Data for Disk Block has been lost due to Logical Drive problem')
pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE_WITH_DATALOSS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,794)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE_WITH_DATALOSS.setDescription('Temporary-Offline RAID5/RAID3 array is available to the user again with the possibility of data loss in the array.')
pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,795)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE.setDescription('Temporary-Offline RAID0+1/RAID1/RAID0/JBOD array is available to the user again.')
pv660fEvent_SYSDEV_STANDBY_REBUILD_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,796)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_STANDBY_REBUILD_START.setDescription('An standby rebuild has started on logical drive.')
pv660fEvent_FMTFAN_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,797)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTFAN_FAILED.setDescription('Fan failure.')
pv660fEvent_FMTFAN_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,798)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTFAN_OK.setDescription('Fan has been restored.')
pv660fEvent_AEMI_FAN_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,799)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_AEMI_FAN_FAILED.setDescription('Fan failure.')
pv660fEvent_FMTFAN_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,800)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTFAN_NOTPRESENT.setDescription('Storage cabinet fan is not present.')
pv660fEvent_FMTPOWER_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,801)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTPOWER_FAILED.setDescription('Power supply failure.')
pv660fEvent_FMTPOWER_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,802)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTPOWER_OK.setDescription('Power supply has been restored.')
pv660fEvent_AEMI_PWR_SUPPLY_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,803)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_AEMI_PWR_SUPPLY_FAILED.setDescription('Power supply failure.')
pv660fEvent_FMTPOWER_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,804)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTPOWER_NOTPRESENT.setDescription('Storage cabinet power supply is not present.')
pv660fEvent_FMTHEAT_BAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,805)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTHEAT_BAD.setDescription('Over temperature. Temperature is above 70 degrees Celsius.')
pv660fEvent_FMTHEAT_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,806)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTHEAT_CRITICAL.setDescription('Temperature is above 50 degrees Celsius.')
pv660fEvent_FMTHEAT_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,807)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTHEAT_OK.setDescription('Normal temperature has been restored.')
pv660fEvent_AEMI_OVER_TEMPERATURE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,808)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_AEMI_OVER_TEMPERATURE.setDescription('Over temperature.')
pv660fEvent_FMTHEAT_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,809)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTHEAT_NOTPRESENT.setDescription('Storage cabinet temperature sensor is not present.')
pv660fEvent_FMTSTWK_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,810)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTSTWK_FAILED.setDescription('Storage Works enclosure reported failure state.')
pv660fEvent_FMTSTWK_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,811)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTSTWK_CRITICAL.setDescription('Storage Works enclosure reported critical state.')
pv660fEvent_FMTSTWK_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,812)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_FMTSTWK_OK.setDescription('Storage Works enclosure reported normal state.')
pv660fEvent_FMT_UPS_DISABLED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,813)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMT_UPS_DISABLED.setDescription('Uninterruptible Power Supply Disabled.')
pv660fEvent_FMT_UPS_AC_FAIL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,814)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMT_UPS_AC_FAIL.setDescription('Uninterruptible Power Supply AC Failed.')
pv660fEvent_FMT_UPS_BAT_LOW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,815)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMT_UPS_BAT_LOW.setDescription('Uninterruptible Power Supply Battery Low.')
pv660fEvent_FMT_UPS_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,816)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMT_UPS_FAILED.setDescription('Uninterruptible Power Supply Failed.')
pv660fEvent_FMT_UPS_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,817)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_FMT_UPS_OK.setDescription('Uninterruptible Power Supply Normal.')
pv660fEvent_ENCLFAN_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,818)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLFAN_FAILED.setDescription('Fan failure.')
pv660fEvent_ENCLFAN_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,819)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLFAN_OK.setDescription('Fan has been restored.')
pv660fEvent_ENCLFAN_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,820)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLFAN_NOTPRESENT.setDescription('Fan is not present.')
pv660fEvent_ENCLPOWER_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,821)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLPOWER_FAILED.setDescription('Power supply failure.')
pv660fEvent_ENCLPOWER_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,822)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLPOWER_OK.setDescription('Power supply has been restored.')
pv660fEvent_ENCLPOWER_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,823)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLPOWER_NOTPRESENT.setDescription('Power supply is not present.')
pv660fEvent_ENCLHEAT_BAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,824)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLHEAT_BAD.setDescription('Temperature is over safe limit. Failure imminent.')
pv660fEvent_ENCLHEAT_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,825)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLHEAT_CRITICAL.setDescription('Temperature is above working limit.')
pv660fEvent_ENCLHEAT_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,826)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLHEAT_OK.setDescription('Normal temperature has been restored.')
pv660fEvent_ENCLHEAT_NOTPRESENT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,827)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLHEAT_NOTPRESENT.setDescription('Temperature sensor is not present.')
pv660fEvent_ENCLACCESS_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,828)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLACCESS_CRITICAL.setDescription('Enclosure access critical.')
pv660fEvent_ENCLACCESS_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,829)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLACCESS_OK.setDescription('Enclosure access has been restored.')
pv660fEvent_ENCLACCESS_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,830)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLACCESS_OFFLINE.setDescription('Enclosure access is offline.')
pv660fEvent_ENCLSES_SOFTADDR_OCCURRED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,831)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLSES_SOFTADDR_OCCURRED.setDescription('Enclosure Soft Addressing Detected.')
pv660fEvent_ENCLACCESS_READY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,832)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLACCESS_READY.setDescription('Enclosure services ready')
pv660fEvent_ENCLHEAT_UNKNOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,833)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLHEAT_UNKNOWN.setDescription('Access to temperature sensor has been lost.')
pv660fEvent_ENCLPOWER_UNKNOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,834)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLPOWER_UNKNOWN.setDescription('Access to power supply status information has been lost.')
pv660fEvent_ENCLFAN_UNKNOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,835)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "enclosureNumberEv"), ("ArrayManager-MIB", "unitNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_ENCLFAN_UNKNOWN.setDescription('Access to fan status information has been lost.')
pv660fEvent_SYSTEM_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,836))
if mibBuilder.loadTexts: pv660fEvent_SYSTEM_STARTED.setDescription('Array management server software started successfully.')
pv660fEvent_CTLDEV_WRITEBACK_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,837)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_WRITEBACK_ERROR.setDescription('Write back error.')
pv660fEvent_CTLDEV_STATE_TABLE_FULL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,838)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_STATE_TABLE_FULL.setDescription('Internal log structures getting full,PLEASE SHUTDOWN AND RESET THE SYSTEM IN THE NEAR FUTURE.')
pv660fEvent_CTLDEV_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,839)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_DEAD.setDescription('Controller is dead. System is disconnecting from this controller.')
pv660fEvent_CTLDEV_RESET = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,840)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_RESET.setDescription('Controller has been reset.')
pv660fEvent_CTLDEV_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,841)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_FOUND.setDescription('Controller is found.')
pv660fEvent_CTLDEV_GONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,842)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_GONE.setDescription('Controller is gone. System is disconnecting from this controller.')
pv660fEvent_CTLDEV_BBU_FOUND = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,843)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_FOUND.setDescription('BBU Present.')
pv660fEvent_CTLDEV_BBU_POWER_LOW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,844)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_POWER_LOW.setDescription('BBU Power Low.')
pv660fEvent_CTLDEV_BBU_POWER_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,845)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_POWER_OK.setDescription('BBU Power OK.')
pv660fEvent_CTLDEV_POWER_OFF = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,846)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_POWER_OFF.setDescription('Controller is powered off.')
pv660fEvent_CTLDEV_POWER_ON = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,847)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_POWER_ON.setDescription('Controller powered on')
pv660fEvent_CTLDEV_ONLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,848)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_ONLINE.setDescription('Controller is online.')
pv660fEvent_CTLDEV_OFFLINE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,849)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_OFFLINE.setDescription('Controller is offline.')
pv660fEvent_CTLDEV_CRITICAL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,850)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_CRITICAL.setDescription("Controller's partner is gone, controller is in failover mode now.")
pv660fEvent_CTLDEV_BBU_RECOND_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,851)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_RECOND_START.setDescription('BBU reconditioning is started.')
pv660fEvent_CTLDEV_BBU_RECOND_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,852)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_RECOND_DONE.setDescription('BBU reconditioning is finished.')
pv660fEvent_CTLDEV_BBU_RECOND_ABORT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,853)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_RECOND_ABORT.setDescription('BBU reconditioning is canceled.')
pv660fEvent_CTLDEV_INSTALLATION_ABORTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,854)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_INSTALLATION_ABORTED.setDescription('Installation aborted.')
pv660fEvent_CTLDEV_FIRMWARE_MISMATCH = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,855)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_FIRMWARE_MISMATCH.setDescription('Controller firmware mismatch.')
pv660fEvent_CTLDEV_BBU_NORESPONSE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,856)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_NORESPONSE.setDescription('BBU removed.')
pv660fEvent_CTLDEV_WARM_BOOT_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,857)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_WARM_BOOT_ERROR.setDescription('WARM BOOT failed.')
pv660fEvent_CTLDEV_CONSERV_CACHE_MODE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,858)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_CONSERV_CACHE_MODE.setDescription('Controller entered Conservative Cache Mode.')
pv660fEvent_CTLDEV_NORMAL_CACHE_MODE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,859)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NORMAL_CACHE_MODE.setDescription('Controller entered Normal Cache Mode.')
pv660fEvent_CTLDEV_DEV_START_CMPLT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,860)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_DEV_START_CMPLT.setDescription('Controller Device Start Complete.')
pv660fEvent_CTLDEV_SOFT_ECC_CORRECTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,861)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_SOFT_ECC_CORRECTED.setDescription('Soft ECC error Corrected.')
pv660fEvent_CTLDEV_HARD_ECC_CORRECTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,862)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_HARD_ECC_CORRECTED.setDescription('Hard ECC error Corrected.')
pv660fEvent_CTLDEV_BBU_RECOND_NEEDED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,863)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_RECOND_NEEDED.setDescription('BBU Recondition Suggested.')
pv660fEvent_CTLDEV_REMOVED_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,864)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_REMOVED_PTNR.setDescription("Controller's Partner Has Been Removed.")
pv660fEvent_CTLDEV_BBU_OUT_OF_SERVICE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,865)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_OUT_OF_SERVICE.setDescription('BBU out of service.')
pv660fEvent_CTLDEV_UPDATE_PTNR_STATUS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,866)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_UPDATE_PTNR_STATUS.setDescription("Updated partner's status.")
pv660fEvent_CTLDEV_RELINQUISH_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,867)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_RELINQUISH_PTNR.setDescription('Relinquished partner.')
pv660fEvent_CTLDEV_INSERTED_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,868)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_INSERTED_PTNR.setDescription('Inserted Partner.')
pv660fEvent_CTLDEV_DUAL_ENABLED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,869)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_DUAL_ENABLED.setDescription('Dual Controllers Enabled.')
pv660fEvent_CTLDEV_KILL_PTNR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,870)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_KILL_PTNR.setDescription('Killed Partner.')
pv660fEvent_CTLDEV_NEXUS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,871)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEXUS.setDescription('Dual Controllers entered Nexus.')
pv660fEvent_CTLDEV_BAD_BOOTROM_IMAGE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,872)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BAD_BOOTROM_IMAGE.setDescription('Controller Boot ROM Image needs to be reloaded.')
pv660fEvent_CTLDEV_BAD_MAC_ADDRESS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,873)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BAD_MAC_ADDRESS.setDescription('Controller is using default non-unique world-wide name.')
pv660fEvent_CTLDEV_MIRROR_RACE_RECOVERY_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,874)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_MIRROR_RACE_RECOVERY_FAILED.setDescription('Mirror Race recovery failed.')
pv660fEvent_CTLDEV_MIRROR_CRITICAL_DRIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,875)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_MIRROR_CRITICAL_DRIVE.setDescription('Mirror Race on critical drive.')
pv660fEvent_SYSTEM_STARTED_NEW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,876))
if mibBuilder.loadTexts: pv660fEvent_SYSTEM_STARTED_NEW.setDescription('System started.-')
pv660fEvent_SYSTEM_SIZE_TABLE_FULL = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,877))
if mibBuilder.loadTexts: pv660fEvent_SYSTEM_SIZE_TABLE_FULL.setDescription('Size table full.')
pv660fEvent_SYSTEM_USER_LOGGED_IN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,878))
if mibBuilder.loadTexts: pv660fEvent_SYSTEM_USER_LOGGED_IN.setDescription('User logged in.')
pv660fEvent_SYSTEM_USER_LOGGED_OUT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,879))
if mibBuilder.loadTexts: pv660fEvent_SYSTEM_USER_LOGGED_OUT.setDescription('User logged out.-')
pv660fEvent_SYSTEM_ALIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,880))
if mibBuilder.loadTexts: pv660fEvent_SYSTEM_ALIVE.setDescription('Server alive.')
pv660fEvent_SYSTEM_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,881))
if mibBuilder.loadTexts: pv660fEvent_SYSTEM_DEAD.setDescription('Lost connection to server, or server is down.')
pv660fEvent_AUTOBOOT_CHANGED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,882)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_AUTOBOOT_CHANGED.setDescription('Automatic reboot count has changed.')
pv660fEvent_CHANNEL_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,883)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_CHANNEL_FAILED.setDescription('Channel Failed.')
pv660fEvent_CHANNEL_OK = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,884)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_CHANNEL_OK.setDescription('Channel Online.')
pv660fEvent_CHANNEL_SCSI_BUS_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,885)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_CHANNEL_SCSI_BUS_DEAD.setDescription('Back End SCSI Bus Dead.')
pv660fEvent_CHANNEL_SCSI_BUS_ALIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,886)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_CHANNEL_SCSI_BUS_ALIVE.setDescription('Back End SCSI Bus Alive.')
pv660fEvent_CHANNEL_FIBER_DEAD = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,887)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_CHANNEL_FIBER_DEAD.setDescription('Back End Fibre Dead.')
pv660fEvent_CHANNEL_FIBER_ALIVE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,888)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_CHANNEL_FIBER_ALIVE.setDescription('Back End Fibre Alive.')
pv660fEvent_LOG_EMPTY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,889)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_LOG_EMPTY.setDescription('Event Log Empty.')
pv660fEvent_LOG_OUT_SYNC = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,890)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_LOG_OUT_SYNC.setDescription('Event Log Entries Lost.')
pv660fEvent_LOG_REQUEST_SENSE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,891)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_LOG_REQUEST_SENSE.setDescription('Request Sense')
pv660fEvent_LOG_SET_RTC = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,892)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"))
if mibBuilder.loadTexts: pv660fEvent_LOG_SET_RTC.setDescription('Set Real Time Clock.')
pv660fEvent_CFG_NEW = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,893)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CFG_NEW.setDescription('New Configuration Received.')
pv660fEvent_CFG_CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,894)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CFG_CLEAR.setDescription('Configuration Cleared.')
pv660fEvent_CFG_INVALID = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,895)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CFG_INVALID.setDescription('Configuration Invalid.')
pv660fEvent_CFG_COD_ACCESS_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,896)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CFG_COD_ACCESS_ERROR.setDescription('Configuration On Disk Access Error.')
pv660fEvent_CFG_COD_CONVERTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,897)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CFG_COD_CONVERTED.setDescription('Configuration On Disk Converted.')
pv660fEvent_CFG_COD_IMPORT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,898)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CFG_COD_IMPORT_FAILED.setDescription('Configuration On Disk Import Failed.')
pv660fEvent_DEBUG_DUMP_GENERATED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,899)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_DEBUG_DUMP_GENERATED.setDescription('A Debug Dump exists on this system.')
pv660fEvent_DEBUG_DUMP_GENERATED_PARTNER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,900)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_DEBUG_DUMP_GENERATED_PARTNER.setDescription('A Debug Dump exists on this system.')
pv660fEvent_FATAL_HANG = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,901))
if mibBuilder.loadTexts: pv660fEvent_FATAL_HANG.setDescription('Internal Controller is in the hung state.')
pv660fEvent_FATAL_BRKP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,902))
if mibBuilder.loadTexts: pv660fEvent_FATAL_BRKP.setDescription('Internal Controller has encountered a Firmware breakpoint.')
pv660fEvent_I960_HW_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,903))
if mibBuilder.loadTexts: pv660fEvent_I960_HW_ERR.setDescription('Internal Controller has encountered i960 processor specific error.')
pv660fEvent_SARM_HW_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,904))
if mibBuilder.loadTexts: pv660fEvent_SARM_HW_ERR.setDescription('Internal Controller has encountered Strong-ARM processor specific error')
pv660fEvent_SYSDEV_BG_INIT_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,905)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BG_INIT_STARTED.setDescription('Logical drive background initialization started.')
pv660fEvent_SYSDEV_BG_INIT_STOPPED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,906)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BG_INIT_STOPPED.setDescription('Logical drive background initialization stopped.')
pv660fEvent_SYSDEV_BG_INIT_PAUSED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,907)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BG_INIT_PAUSED.setDescription('Logical drive background initialization paused.')
pv660fEvent_SYSDEV_BG_INIT_RESTARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,908)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BG_INIT_RESTARTED.setDescription('Logical drive background initialization restarted.')
pv660fEvent_SYSDEV_BG_INIT_FAILED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,909)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BG_INIT_FAILED.setDescription('Logical drive background initialization failed.')
pv660fEvent_SYSDEV_BG_INIT_COMPLETED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,910)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BG_INIT_COMPLETED.setDescription('Logical drive background initialization completed.')
pv660fEvent_CTLDEV_BBU_CALIBRATE_START = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,911)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_CALIBRATE_START.setDescription('BBU calibration cycle started.')
pv660fEvent_CTLDEV_BBU_CALIBRATE_DONE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,912)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_CALIBRATE_DONE.setDescription('BBU calibration cycle finished.')
pv660fEvent_CTLDEV_BBU_CALIBRATE_ABORT = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,913)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_CALIBRATE_ABORT.setDescription('BBU calibration cycle is canceled.')
pv660fEvent_CTLDEV_BBU_NO_BATTERY = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,914)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_BBU_NO_BATTERY.setDescription('BBU battery not present.')
pv660fEvent_SYSDEV_BBULOW_POSSIBLE_DATA_LOSS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,915)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SYSDEV_BBULOW_POSSIBLE_DATA_LOSS.setDescription('Low battery charge level. Logical drive may have lost data.')
pv660fEvent_CTLDEV_IN_CLUSTER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,916))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_IN_CLUSTER.setDescription('Controller connected to cluster.')
pv660fEvent_CTLDEV_NOT_IN_CLUSTER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,917))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NOT_IN_CLUSTER.setDescription('Controller disconnected from cluster.')
pv660fEvent_CTLDEV_IMPROPERLY_SHUTDOWN = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,918)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "virtualDiskNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_IMPROPERLY_SHUTDOWN.setDescription('Controller improperly shutdown! Data may have been lost.')
pv660fEvent_CTLDEV_AUTOMATIC_FLASH_STARTED = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,919)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_AUTOMATIC_FLASH_STARTED.setDescription('Dual Active Automatic Flash of Replacement Controller.')
pv660fEvent_CTLDEV_NEGOTIATION_FAILED_JUMPERS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,920)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEGOTIATION_FAILED_JUMPERS.setDescription('Dual Active Negotiation failed jumpers.')
pv660fEvent_CTLDEV_NEGOTIATION_SAME_ID = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,921)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEGOTIATION_SAME_ID.setDescription("Dual Active Negotiation failed ID's.")
pv660fEvent_CTLDEV_NEGOTIATION_BOARD_TYPE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,922)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEGOTIATION_BOARD_TYPE.setDescription('Dual Active Negotiation failed board types.')
pv660fEvent_CTLDEV_NEGOTIATION_DISK_CHANNELS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,923)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEGOTIATION_DISK_CHANNELS.setDescription('Dual Active Negotiation failed disk channels.')
pv660fEvent_CTLDEV_NEGOTIATION_HOST_CHANNELS = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,924)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEGOTIATION_HOST_CHANNELS.setDescription('Dual Active Negotiation failed host ports.')
pv660fEvent_CTLDEV_NEGOTIATION_MEMORY_SIZE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,925)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEGOTIATION_MEMORY_SIZE.setDescription('Dual Active Negotiation failed memory size.')
pv660fEvent_CTLDEV_NEGOTIATION_CACHE_SIZE = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,926)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_CTLDEV_NEGOTIATION_CACHE_SIZE.setDescription('Dual Active Negotiation failed cache memory size.')
pv660fEvent_PHYSDEV_HOT_SPARE_SMALLER = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,927)).setObjects(("ArrayManager-MIB", "controllerNameEv"), ("ArrayManager-MIB", "channelNumberEv"), ("ArrayManager-MIB", "targetIDEv"))
if mibBuilder.loadTexts: pv660fEvent_PHYSDEV_HOT_SPARE_SMALLER.setDescription('Hot spare replaced with a smaller capacity drive.')
pv660fEvent_SES_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,980)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_SES_ERR.setDescription('Controller failed, SES not operational. This trap is similar to 981 but may occur for older firmware versions.')
pv660fEvent_ENC_SES_ERR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,981)).setObjects(("ArrayManager-MIB", "controllerNameEv"))
if mibBuilder.loadTexts: pv660fEvent_ENC_SES_ERR.setDescription('Unable to get enclosure status. Doing a PV660F Subsystem rescan may resolve this problem. This trap is similar to 980 but may occur for more recent firmware versions.')
fsysPro_DISK_CAPACITY_WARNING = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,10804)).setObjects(("ArrayManager-MIB", "volumeNameEv"))
if mibBuilder.loadTexts: fsysPro_DISK_CAPACITY_WARNING.setDescription('Free disk space has reached warning threshold on volume %s.')
fsysPro_DISK_CAPACITY_ERROR = NotificationType((1, 3, 6, 1, 4, 1, 674, 10893, 1, 1, 200) + (0,10805)).setObjects(("ArrayManager-MIB", "volumeNameEv"))
if mibBuilder.loadTexts: fsysPro_DISK_CAPACITY_ERROR.setDescription('Free disk space has reached error threshold on volume %s.')
mibBuilder.exportSymbols("ArrayManager-MIB", alertGenericReady=alertGenericReady, arrayDiskVendor=arrayDiskVendor, arrayMgrSoftwareDescription=arrayMgrSoftwareDescription, enclosureGenericNotInstalled=enclosureGenericNotInstalled, arrayDiskSpareState=arrayDiskSpareState, controllerC1OSController=controllerC1OSController, alertFailBGI=alertFailBGI, pv660fEvent_PHYSDEV_INIT_FAILED=pv660fEvent_PHYSDEV_INIT_FAILED, pv660fEvent_LOG_EMPTY=pv660fEvent_LOG_EMPTY, controllerMemorySizeInMB=controllerMemorySizeInMB, subDiskLengthInBytes=subDiskLengthInBytes, temperatureProbeCurValue=temperatureProbeCurValue, subDiskName=subDiskName, volumeLdmVolumeType=volumeLdmVolumeType, alertArrayDiskForcedOffline=alertArrayDiskForcedOffline, pv660fEvent_SES_ERR=pv660fEvent_SES_ERR, enclosureChannelNumber=enclosureChannelNumber, eMMFWVersion0Ev=eMMFWVersion0Ev, diskLdmDeviceType=diskLdmDeviceType, pv660fEvent_PHYSDEV_CODWRFAIL_DEAD=pv660fEvent_PHYSDEV_CODWRFAIL_DEAD, pv660fEvent_SYSDEV_CHECK_ERROR=pv660fEvent_SYSDEV_CHECK_ERROR, pv660fEvent_SYSDEV_BG_INIT_FAILED=pv660fEvent_SYSDEV_BG_INIT_FAILED, enclosureManagementModuleConnectionEMMNumber=enclosureManagementModuleConnectionEMMNumber, adDiagCancelled=adDiagCancelled, extendedPartitionTable=extendedPartitionTable, cntrlBatteryNeedsReconditioning=cntrlBatteryNeedsReconditioning, adInitializeFailed=adInitializeFailed, virtualDiskState=virtualDiskState, pv660fEvent_SYSDEV_BG_INIT_COMPLETED=pv660fEvent_SYSDEV_BG_INIT_COMPLETED, enclosureAlertTempErrMin=enclosureAlertTempErrMin, basicDiskNonExtendedConnectionVirtualDiskName=basicDiskNonExtendedConnectionVirtualDiskName, arrayDiskSerialNo=arrayDiskSerialNo, powersupplyName=powersupplyName, volumeSeverity=volumeSeverity, arrayDiskSeverity=arrayDiskSeverity, arrayMgrDisplayName=arrayMgrDisplayName, subDiskEntry=subDiskEntry, arrayDiskLargestContiguousFreeSpaceInMB=arrayDiskLargestContiguousFreeSpaceInMB, pv660fEvent_SYSDEV_BG_INIT_RESTARTED=pv660fEvent_SYSDEV_BG_INIT_RESTARTED, perc2SmartWarning=perc2SmartWarning, controllerFaultTolerant=controllerFaultTolerant, enclosureSeverity=enclosureSeverity, pv660fEvent_SYSDEV_REBUILD_CANCELED=pv660fEvent_SYSDEV_REBUILD_CANCELED, pv660fEvent_CTLDEV_ONLINE=pv660fEvent_CTLDEV_ONLINE, pv660fEvent_CTLDEV_BBU_CALIBRATE_START=pv660fEvent_CTLDEV_BBU_CALIBRATE_START, basicDiskExtendedConnectionDiskName=basicDiskExtendedConnectionDiskName, volumeDriveLetter=volumeDriveLetter, diskState=diskState, virtualDiskChannel=virtualDiskChannel, controllerState=controllerState, controllerC1Port0Name=controllerC1Port0Name, temperatureProbeMaxCritical=temperatureProbeMaxCritical, pv660fEvent_CTLDEV_UPDATE_PTNR_STATUS=pv660fEvent_CTLDEV_UPDATE_PTNR_STATUS, alertEnclosureAlarmDisable=alertEnclosureAlarmDisable, timeEv=timeEv, alertPausedCheckConsistency=alertPausedCheckConsistency, volumeNumber=volumeNumber, volumeTable=volumeTable, checkConsistencyFailed=checkConsistencyFailed, pv660fEvent_AEMI_OVER_TEMPERATURE=pv660fEvent_AEMI_OVER_TEMPERATURE, pv660fEvent_CTLDEV_OFFLINE=pv660fEvent_CTLDEV_OFFLINE, dynamicDiskConnectionVolumeDriveLetter=dynamicDiskConnectionVolumeDriveLetter, pv660fEvent_AEMI_FAN_FAILED=pv660fEvent_AEMI_FAN_FAILED, volumeLabel=volumeLabel, storage=storage, pv660fEvent_FMTHEAT_OK=pv660fEvent_FMTHEAT_OK, pv660fEvent_CTLDEV_CRITICAL=pv660fEvent_CTLDEV_CRITICAL, arrayDiskEnclosureConnectionNumber=arrayDiskEnclosureConnectionNumber, cntrlResumeIO=cntrlResumeIO, alertEnclosureFwDownload=alertEnclosureFwDownload, pv660fEvent_SYSTEM_USER_LOGGED_IN=pv660fEvent_SYSTEM_USER_LOGGED_IN, pv660fEvent_CTLDEV_BBU_POWER_OK=pv660fEvent_CTLDEV_BBU_POWER_OK, pv660fEvent_PHYSDEV_PFA=pv660fEvent_PHYSDEV_PFA, arrayDiskName=arrayDiskName, pv660fEvent_FMTFAN_NOTPRESENT=pv660fEvent_FMTFAN_NOTPRESENT, pv660fEvent_CTLDEV_BBU_RECOND_DONE=pv660fEvent_CTLDEV_BBU_RECOND_DONE, adRebuildStarted=adRebuildStarted, pv660fEvent_CTLDEV_STATE_TABLE_FULL=pv660fEvent_CTLDEV_STATE_TABLE_FULL, alertControllerAlarmEnable=alertControllerAlarmEnable, temperatureSeverity=temperatureSeverity, pv660fEvent_PHYSDEV_REBUILD_NEWDEV_FAILED=pv660fEvent_PHYSDEV_REBUILD_NEWDEV_FAILED, controllerType=controllerType, basicDiskExtendedConnectionNumber=basicDiskExtendedConnectionNumber, enclosureConfig=enclosureConfig, dynamicDiskConnectionPlexNumber=dynamicDiskConnectionPlexNumber, arrayMgrAgentVersion=arrayMgrAgentVersion, perc2SmartWarningDegraded=perc2SmartWarningDegraded, enclosureAlertTempWarnMax=enclosureAlertTempWarnMax, pv660fEvent_PHYSDEV_MANUAL_REBUILD_START=pv660fEvent_PHYSDEV_MANUAL_REBUILD_START, partitionState=partitionState, physicalDevices=physicalDevices, percHotSpareUnAssign=percHotSpareUnAssign, enclosureNumberEv=enclosureNumberEv, pv660fEvent_ENCLHEAT_NOTPRESENT=pv660fEvent_ENCLHEAT_NOTPRESENT, enclosureManagementModuleConnectionNumber=enclosureManagementModuleConnectionNumber, basicDiskExtendedConnectionPartitionName=basicDiskExtendedConnectionPartitionName, adInitializeStarted=adInitializeStarted, alertTaskBGI=alertTaskBGI, virtualDiskLayout=virtualDiskLayout, temperatureProbeMinCritical=temperatureProbeMinCritical, partitionEntry=partitionEntry, providerNumber=providerNumber, pv660fEvent_PHYSDEV_ID_MISMATCH=pv660fEvent_PHYSDEV_ID_MISMATCH, diskTargetID=diskTargetID, powersupplyNumber=powersupplyNumber, pv660fEvent_PHYSDEV_COMMAND_ABORT=pv660fEvent_PHYSDEV_COMMAND_ABORT, pv660fEvent_CTLDEV_NEXUS=pv660fEvent_CTLDEV_NEXUS, pv660fEvent_PHYSDEV_NOTRDY_DEAD=pv660fEvent_PHYSDEV_NOTRDY_DEAD, pv660fEvent_CHANNEL_FIBER_ALIVE=pv660fEvent_CHANNEL_FIBER_ALIVE, partitionLdmVolumeType=partitionLdmVolumeType, alertShutdownServer=alertShutdownServer, pv660fEvent_PHYSDEV_INIT_DONE=pv660fEvent_PHYSDEV_INIT_DONE, pv660fEvent_SYSDEV_EXPANDCAPACITY_START=pv660fEvent_SYSDEV_EXPANDCAPACITY_START, diskLengthInBytes=diskLengthInBytes, cntrlBatteryRecondition=cntrlBatteryRecondition, pv660fEvent_PHYSDEV_COMMAND_RETRIED=pv660fEvent_PHYSDEV_COMMAND_RETRIED, providerData=providerData, controllerNumber=controllerNumber, dynamicDiskConnectionSubDiskNumber=dynamicDiskConnectionSubDiskNumber, pv660fEvent_CTLDEV_INSTALLATION_ABORTED=pv660fEvent_CTLDEV_INSTALLATION_ABORTED, pv660fEvent_CTLDEV_BBU_FOUND=pv660fEvent_CTLDEV_BBU_FOUND, dynamicDiskConnectionPlexName=dynamicDiskConnectionPlexName, pv660fEvent_AEMI_PWR_SUPPLY_FAILED=pv660fEvent_AEMI_PWR_SUPPLY_FAILED, temperatureConnectionTable=temperatureConnectionTable, channelNumberEv=channelNumberEv, pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE=pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE, pv660fEvent_CTLDEV_HARD_ECC_CORRECTED=pv660fEvent_CTLDEV_HARD_ECC_CORRECTED, controllerHostPortCount=controllerHostPortCount, pv660fEvent_PHYSDEV_OFFLINE=pv660fEvent_PHYSDEV_OFFLINE, targetIDEv=targetIDEv, alertConserveCacheModeEnable=alertConserveCacheModeEnable, perc2SmartFPTExceeded=perc2SmartFPTExceeded, enclosureManagementModuleMaxSpeed=enclosureManagementModuleMaxSpeed, vdFormatFailed=vdFormatFailed, basicDiskExtendedConnectionArrayDiskName=basicDiskExtendedConnectionArrayDiskName, perc2SmartWarningTemp=perc2SmartWarningTemp, powersupplyConnectionPowersupplyNumber=powersupplyConnectionPowersupplyNumber, controllerC1Channel=controllerC1Channel, pv660fEvent_SYSDEV_BADBLOCK=pv660fEvent_SYSDEV_BADBLOCK, diskSeverity=diskSeverity, diskAdapter=diskAdapter, agentSystemGlobalStatus=agentSystemGlobalStatus, pv660fEvent_FMTSTWK_FAILED=pv660fEvent_FMTSTWK_FAILED, partitionSeverity=partitionSeverity, enclosureGenericFailed=enclosureGenericFailed, arrayDiskLogicalConnectionEntry=arrayDiskLogicalConnectionEntry, alertVirtualDiskSplitMirror=alertVirtualDiskSplitMirror, enclosureManagementModuleSeverity=enclosureManagementModuleSeverity, basicDiskExtendedConnectionVolumeNumber=basicDiskExtendedConnectionVolumeNumber, fanState=fanState, pv660fEvent_FMT_UPS_FAILED=pv660fEvent_FMT_UPS_FAILED, pv660fEvent_PHYSDEV_REQSENSE=pv660fEvent_PHYSDEV_REQSENSE, pv660fEvent_SYSDEV_STANDBY_REBUILD_START=pv660fEvent_SYSDEV_STANDBY_REBUILD_START, dynamicDiskConnectionEntry=dynamicDiskConnectionEntry, diskVendor=diskVendor, vdFailedRedundancy=vdFailedRedundancy, pv660fEvent_SYSDEV_WR_LUN_MAP=pv660fEvent_SYSDEV_WR_LUN_MAP, diskFreeSpaceInMB=diskFreeSpaceInMB, vdRebuildCancelled=vdRebuildCancelled, pv660fEvent_SYSDEV_REBUILD_ERROR=pv660fEvent_SYSDEV_REBUILD_ERROR, pv660fEvent_CTLDEV_BBU_NO_BATTERY=pv660fEvent_CTLDEV_BBU_NO_BATTERY, basicDiskNonExtendedConnectionNumber=basicDiskNonExtendedConnectionNumber, extendedPartitionNumber=extendedPartitionNumber, powersupplyConnectionNumber=powersupplyConnectionNumber, pv660fEvent_PHYSDEV_SCSITMO_DEAD=pv660fEvent_PHYSDEV_SCSITMO_DEAD, pv660fEvent_PHYSDEV_EXPANDCAPACITY_START=pv660fEvent_PHYSDEV_EXPANDCAPACITY_START, temperatureTable=temperatureTable, partitionLengthInMB=partitionLengthInMB, subDiskLengthInMB=subDiskLengthInMB, enclosureEntry=enclosureEntry, pv660fEvent_CTLDEV_CONSERV_CACHE_MODE=pv660fEvent_CTLDEV_CONSERV_CACHE_MODE, pv660fEvent_ENCLPOWER_OK=pv660fEvent_ENCLPOWER_OK, basicDiskNonExtendedConnectionEntry=basicDiskNonExtendedConnectionEntry, pv660fEvent_SYSDEV_INIT_DONE=pv660fEvent_SYSDEV_INIT_DONE, enclosureAssetName=enclosureAssetName, pv660fEvent_CTLDEV_BBU_POWER_LOW=pv660fEvent_CTLDEV_BBU_POWER_LOW, pv660fEvent_PHYSDEV_FOUND=pv660fEvent_PHYSDEV_FOUND, pv660fEvent_PHYSDEV_COMMAND_TIMEOUT=pv660fEvent_PHYSDEV_COMMAND_TIMEOUT, pv660fEvent_CTLDEV_REMOVED_PTNR=pv660fEvent_CTLDEV_REMOVED_PTNR, virtualDiskDegraded=virtualDiskDegraded, enclosureManagementModuleNumber=enclosureManagementModuleNumber, pv660fEvent_CFG_INVALID=pv660fEvent_CFG_INVALID, adFormatFailed=adFormatFailed, temperatureConnectionEnclosureNumber=temperatureConnectionEnclosureNumber, arrayDiskUsedSpaceInBytes=arrayDiskUsedSpaceInBytes, arrayDiskEnclosureConnectionEntry=arrayDiskEnclosureConnectionEntry, basicDiskNonExtendedConnectionTable=basicDiskNonExtendedConnectionTable, globalData=globalData, pv660fEvent_ENCLFAN_OK=pv660fEvent_ENCLFAN_OK, pv660fEvent_SYSDEV_CHECK_START=pv660fEvent_SYSDEV_CHECK_START, virtualDiskFreeSpaceInMB=virtualDiskFreeSpaceInMB, pv660fEvent_FMT_UPS_AC_FAIL=pv660fEvent_FMT_UPS_AC_FAIL, pv660fEvent_SYSDEV_REBUILD_DONE=pv660fEvent_SYSDEV_REBUILD_DONE, arrayDiskTargetID=arrayDiskTargetID, volumeFreeSpaceInBytes=volumeFreeSpaceInBytes, alertArrayDiskForcedOnline=alertArrayDiskForcedOnline, arrayMgrAgentVendor=arrayMgrAgentVendor, dynamicDiskConnectionArrayDiskName=dynamicDiskConnectionArrayDiskName, pv660fEvent_ENCLFAN_UNKNOWN=pv660fEvent_ENCLFAN_UNKNOWN, agentLastGlobalStatus=agentLastGlobalStatus, controllerMemorySizeInBytes=controllerMemorySizeInBytes, agentSoftwareStatus=agentSoftwareStatus, virtualDiskCurStripeSizeInMB=virtualDiskCurStripeSizeInMB, subDiskTable=subDiskTable, pv660fEvent_PHYSDEV_OFFLINE_DEVICE_MADE_ONLINE=pv660fEvent_PHYSDEV_OFFLINE_DEVICE_MADE_ONLINE, controllerC0Port0ID=controllerC0Port0ID, pv660fEvent_PHYSDEV_REBUILD=pv660fEvent_PHYSDEV_REBUILD, adFormatStarted=adFormatStarted, arrayMgrSoftwareVersion=arrayMgrSoftwareVersion, pv660fEvent_PHYSDEV_SOFT_ERROR=pv660fEvent_PHYSDEV_SOFT_ERROR, controllerDriveChannelCount=controllerDriveChannelCount, alertCommFailure=alertCommFailure, controllerLogicalDeviceCount=controllerLogicalDeviceCount, providerStatus=providerStatus, fanProbeMaxCritical=fanProbeMaxCritical, powersupplyConnectionTable=powersupplyConnectionTable, subDiskNumber=subDiskNumber, dynamicDiskConnectionVolumeNumber=dynamicDiskConnectionVolumeNumber, arrayDiskEnclosureConnectionControllerName=arrayDiskEnclosureConnectionControllerName, controllerVendor=controllerVendor, arrayMgrInfo=arrayMgrInfo, enclosureUnitNamesEv=enclosureUnitNamesEv, channelTermination=channelTermination, enclosureAlertTempErrMax=enclosureAlertTempErrMax, pv660fEvent_PHYSDEV_BADTAG_DEAD=pv660fEvent_PHYSDEV_BADTAG_DEAD, arrayDiskLogicalConnectionArrayDiskNumber=arrayDiskLogicalConnectionArrayDiskNumber, pv660fEvent_PHYSDEV_MISC_ERROR=pv660fEvent_PHYSDEV_MISC_ERROR, virtualDiskFailed=virtualDiskFailed, pv660fEvent_FIBREDEV_LOOPID_SOFTADDR_OCCURRED=pv660fEvent_FIBREDEV_LOOPID_SOFTADDR_OCCURRED, vdRebuildFailed=vdRebuildFailed, pv660fEvent_PHYSDEV_INIT_CANCELED=pv660fEvent_PHYSDEV_INIT_CANCELED, pv660fEvent_SYSDEV_EXPANDCAPACITY_ERROR=pv660fEvent_SYSDEV_EXPANDCAPACITY_ERROR, channelSCSIID=channelSCSIID, pv660fEvent_CTLDEV_BAD_MAC_ADDRESS=pv660fEvent_CTLDEV_BAD_MAC_ADDRESS, pv660fEvent_CHANNEL_OK=pv660fEvent_CHANNEL_OK, pv660fEvent_PHYSDEV_REBUILD_ERROR=pv660fEvent_PHYSDEV_REBUILD_ERROR, controllerCacheSizeInMB=controllerCacheSizeInMB, pv660fEvent_SYSDEV_INIT_FAILED=pv660fEvent_SYSDEV_INIT_FAILED, enclosureManagementModuleConnectionEntry=enclosureManagementModuleConnectionEntry, dynamicDiskConnectionNumber=dynamicDiskConnectionNumber, arrayDiskLengthInBytes=arrayDiskLengthInBytes, eMMFWVersion1Ev=eMMFWVersion1Ev, fanSeverity=fanSeverity, alertResumedCheckConsistency=alertResumedCheckConsistency, virtualDiskCurStripeSizeInBytes=virtualDiskCurStripeSizeInBytes, arrayDiskLogicalConnectionArrayDiskName=arrayDiskLogicalConnectionArrayDiskName, dynamicDiskConnectionVirtualDiskName=dynamicDiskConnectionVirtualDiskName, pv660fEvent_CTLDEV_BAD_BOOTROM_IMAGE=pv660fEvent_CTLDEV_BAD_BOOTROM_IMAGE, arrayDiskEnclosureConnectionEnclosureNumber=arrayDiskEnclosureConnectionEnclosureNumber, pv660fEvent_ENCLACCESS_OFFLINE=pv660fEvent_ENCLACCESS_OFFLINE, pv660fEvent_SYSTEM_STARTED_NEW=pv660fEvent_SYSTEM_STARTED_NEW, channelNumber=channelNumber, newVDConfigEv=newVDConfigEv, powersupplyState=powersupplyState)
mibBuilder.exportSymbols("ArrayManager-MIB", temperatureConnectionTemperatureName=temperatureConnectionTemperatureName, diskNumber=diskNumber, virtualDiskReadPolicy=virtualDiskReadPolicy, diskLunID=diskLunID, vdInitializeCompleted=vdInitializeCompleted, pv660fEvent_CTLDEV_BBU_RECOND_ABORT=pv660fEvent_CTLDEV_BBU_RECOND_ABORT, diskPort=diskPort, pv660fEvent_SYSDEV_BBULOW_POSSIBLE_DATA_LOSS=pv660fEvent_SYSDEV_BBULOW_POSSIBLE_DATA_LOSS, fanConnectionEnclosureNumber=fanConnectionEnclosureNumber, controllerEntry=controllerEntry, pv660fEvent_FMTHEAT_NOTPRESENT=pv660fEvent_FMTHEAT_NOTPRESENT, pv660fEvent_SYSTEM_STARTED=pv660fEvent_SYSTEM_STARTED, controllerSeverity=controllerSeverity, vdReconfigFailed=vdReconfigFailed, fanProbeMinCritical=fanProbeMinCritical, pv660fEvent_SYSTEM_USER_LOGGED_OUT=pv660fEvent_SYSTEM_USER_LOGGED_OUT, fanConnectionEnclosureName=fanConnectionEnclosureName, vdReconfigCompleted=vdReconfigCompleted, subDiskSeverity=subDiskSeverity, temperatureName=temperatureName, fanEntry=fanEntry, arrayMgrDescription=arrayMgrDescription, enclosureSplitBusPartNumber=enclosureSplitBusPartNumber, arrayDiskDegraded=arrayDiskDegraded, agentRefreshRate=agentRefreshRate, pv660fEvent_SYSDEV_DATA_FOR_BLOCK_LOST=pv660fEvent_SYSDEV_DATA_FOR_BLOCK_LOST, pv660fEvent_PHYSDEV_REBUILD_DONE=pv660fEvent_PHYSDEV_REBUILD_DONE, providerTable=providerTable, enclosureState=enclosureState, basicDiskExtendedConnectionExtendedPartitionName=basicDiskExtendedConnectionExtendedPartitionName, adRebuildCompleted=adRebuildCompleted, pv660fEvent_PHYSDEV_WRITEREC_DEAD=pv660fEvent_PHYSDEV_WRITEREC_DEAD, fanProbeUnit=fanProbeUnit, pv660fEvent_PHYSDEV_BDTWRFAIL_DEAD=pv660fEvent_PHYSDEV_BDTWRFAIL_DEAD, pv660fEvent_DEBUG_DUMP_GENERATED_PARTNER=pv660fEvent_DEBUG_DUMP_GENERATED_PARTNER, adInitializeCancelled=adInitializeCancelled, pv660fEvent_CTLDEV_NEGOTIATION_BOARD_TYPE=pv660fEvent_CTLDEV_NEGOTIATION_BOARD_TYPE, arrayDiskOffline=arrayDiskOffline, arrayMgrSoftwareManufacturer=arrayMgrSoftwareManufacturer, pv660fEvent_CTLDEV_NORMAL_CACHE_MODE=pv660fEvent_CTLDEV_NORMAL_CACHE_MODE, genericEvent_DATABASE_UP=genericEvent_DATABASE_UP, pv660fEvent_ENCLHEAT_CRITICAL=pv660fEvent_ENCLHEAT_CRITICAL, pv660fEvent_PHYSDEV_SYSRESET_DEAD=pv660fEvent_PHYSDEV_SYSRESET_DEAD, enclosureManagementModuleState=enclosureManagementModuleState, pv660fEvent_PHYSDEV_HARD_ERROR=pv660fEvent_PHYSDEV_HARD_ERROR, controllerName=controllerName, pv660fEvent_PHYSDEV_SEQERR_DEAD=pv660fEvent_PHYSDEV_SEQERR_DEAD, pv660fEvent_CTLDEV_SOFT_ECC_CORRECTED=pv660fEvent_CTLDEV_SOFT_ECC_CORRECTED, pv660fEvent_CFG_COD_IMPORT_FAILED=pv660fEvent_CFG_COD_IMPORT_FAILED, basicDiskExtendedConnectionPartitionNumber=basicDiskExtendedConnectionPartitionNumber, pv660fEvent_PHYSDEV_UNKNOWNSTS_DEAD=pv660fEvent_PHYSDEV_UNKNOWNSTS_DEAD, pv660fEvent_CTLDEV_IMPROPERLY_SHUTDOWN=pv660fEvent_CTLDEV_IMPROPERLY_SHUTDOWN, adRebuildFailed=adRebuildFailed, partitionLengthInBytes=partitionLengthInBytes, arrayDiskChannelConnectionControllerNumber=arrayDiskChannelConnectionControllerNumber, virtualDiskNameNewEv=virtualDiskNameNewEv, virtualDiskDeviceName=virtualDiskDeviceName, senseKeyEv=senseKeyEv, enclosureAlertTempWarnMin=enclosureAlertTempWarnMin, enclosureAssetTag=enclosureAssetTag, pv660fEvent_CTLDEV_GONE=pv660fEvent_CTLDEV_GONE, controllerFWVersion=controllerFWVersion, volumeState=volumeState, basicDiskExtendedConnectionDiskNumber=basicDiskExtendedConnectionDiskNumber, pv660fEvent_PHYSDEV_EXPANDCAPACITY_DONE=pv660fEvent_PHYSDEV_EXPANDCAPACITY_DONE, diskDgName=diskDgName, controllerC1Port0WWN=controllerC1Port0WWN, channelEntry=channelEntry, controllerNodeWWN=controllerNodeWWN, fanProbeMaxWarning=fanProbeMaxWarning, basicDiskNonExtendedConnectionPartitionName=basicDiskNonExtendedConnectionPartitionName, pv660fEvent_SYSDEV_GONE=pv660fEvent_SYSDEV_GONE, pv660fEvent_PHYSDEV_BYCMD_DEAD=pv660fEvent_PHYSDEV_BYCMD_DEAD, pv660fEvent_ENCLPOWER_UNKNOWN=pv660fEvent_ENCLPOWER_UNKNOWN, pv660fEvent_ENCLHEAT_UNKNOWN=pv660fEvent_ENCLHEAT_UNKNOWN, pv660fEvent_SYSDEV_BADDATABLOCK=pv660fEvent_SYSDEV_BADDATABLOCK, pv660fEvent_CTLDEV_DEV_START_CMPLT=pv660fEvent_CTLDEV_DEV_START_CMPLT, agentIPAddress=agentIPAddress, providerEntry=providerEntry, pv660fEvent_SYSDEV_SIZECHANGED=pv660fEvent_SYSDEV_SIZECHANGED, enclosureNameEv=enclosureNameEv, arrayDiskEnclosureConnectionArrayDiskName=arrayDiskEnclosureConnectionArrayDiskName, pv660fEvent_FMT_UPS_OK=pv660fEvent_FMT_UPS_OK, pv660fEvent_CTLDEV_AUTOMATIC_FLASH_STARTED=pv660fEvent_CTLDEV_AUTOMATIC_FLASH_STARTED, basicDiskExtendedConnectionTable=basicDiskExtendedConnectionTable, pv660fEvent_LOG_SET_RTC=pv660fEvent_LOG_SET_RTC, plexStripeWidthInMB=plexStripeWidthInMB, checkConsistencyCompleted=checkConsistencyCompleted, plexColumns=plexColumns, powersupplySeverity=powersupplySeverity, oldVDConfigEv=oldVDConfigEv, arrayDiskRemoved=arrayDiskRemoved, pv660fEvent_SYSDEV_DATAREAD_FROM_BLOCK_IN_BDT=pv660fEvent_SYSDEV_DATAREAD_FROM_BLOCK_IN_BDT, controllerC1Port1WWN=controllerC1Port1WWN, plexTable=plexTable, channelState=channelState, pv660fEvent_PHYSDEV_DEAD=pv660fEvent_PHYSDEV_DEAD, controllerBatteryChargeCount=controllerBatteryChargeCount, controllerC0Port0Name=controllerC0Port0Name, enclosureKernelVersion=enclosureKernelVersion, fanProbeCurrValue=fanProbeCurrValue, arrayMgrSoftwareProduct=arrayMgrSoftwareProduct, logicalDevices=logicalDevices, senseCodeEv=senseCodeEv, alertCancelBGI=alertCancelBGI, unitNameEv=unitNameEv, pv660fEvent_PHYSDEV_UNCONFIGURED=pv660fEvent_PHYSDEV_UNCONFIGURED, pv660fEvent_CHANNEL_FAILED=pv660fEvent_CHANNEL_FAILED, pv660fEvent_CTLDEV_KILL_PTNR=pv660fEvent_CTLDEV_KILL_PTNR, virtualDiskFreeSpaceInBytes=virtualDiskFreeSpaceInBytes, alertControllerAlarmDisable=alertControllerAlarmDisable, dell=dell, dynamicDiskConnectionDiskName=dynamicDiskConnectionDiskName, pv660fEvent_PHYSDEV_ONLINE=pv660fEvent_PHYSDEV_ONLINE, pv660fEvent_SYSDEV_BG_INIT_PAUSED=pv660fEvent_SYSDEV_BG_INIT_PAUSED, pv660fEvent_CTLDEV_BBU_RECOND_NEEDED=pv660fEvent_CTLDEV_BBU_RECOND_NEEDED, virtualDiskNumber=virtualDiskNumber, extendedPartitionSeverity=extendedPartitionSeverity, agentModifiers=agentModifiers, pv660fEvent_PHYSDEV_OFFSET_SET=pv660fEvent_PHYSDEV_OFFSET_SET, volumeFSType=volumeFSType, fsysPro_DISK_CAPACITY_ERROR=fsysPro_DISK_CAPACITY_ERROR, alertRenameVirtualDisk=alertRenameVirtualDisk, adDiagStarted=adDiagStarted, powersupplyConnectionEnclosureNumber=powersupplyConnectionEnclosureNumber, extendedPartitionState=extendedPartitionState, pv660fEvent_CTLDEV_MIRROR_RACE_RECOVERY_FAILED=pv660fEvent_CTLDEV_MIRROR_RACE_RECOVERY_FAILED, pv660fEvent_PHYSDEV_FAILED_START=pv660fEvent_PHYSDEV_FAILED_START, vdReconfigStarted=vdReconfigStarted, enclosureManagementModuleVendor=enclosureManagementModuleVendor, arrayDiskLunID=arrayDiskLunID, pv660fEvent_FMTPOWER_FAILED=pv660fEvent_FMTPOWER_FAILED, arrayDiskChannelConnectionControllerName=arrayDiskChannelConnectionControllerName, pv660fEvent_SYSDEV_CHECK_SYSDEV_FAILED=pv660fEvent_SYSDEV_CHECK_SYSDEV_FAILED, arrayDiskNumber=arrayDiskNumber, virtualDiskConfigChanged=virtualDiskConfigChanged, pv660fEvent_FMT_UPS_DISABLED=pv660fEvent_FMT_UPS_DISABLED, diskName=diskName, arrayDiskProductID=arrayDiskProductID, alertShutdownEnclosure=alertShutdownEnclosure, temperatureConnectionEnclosureName=temperatureConnectionEnclosureName, enclosureProductID=enclosureProductID, plexStripeWidthInBytes=plexStripeWidthInBytes, basicDiskExtendedConnectionVolumeDriveLetter=basicDiskExtendedConnectionVolumeDriveLetter, cntrlBatteryReconComplete=cntrlBatteryReconComplete, pv660fEvent_CFG_COD_CONVERTED=pv660fEvent_CFG_COD_CONVERTED, enclosureProcessorVersion=enclosureProcessorVersion, checkConsistencyStarted=checkConsistencyStarted, enclosureServiceTag=enclosureServiceTag, vdRebuildStarted=vdRebuildStarted, pv660fEvent_PHYSDEV_HOT_SPARE_SMALLER=pv660fEvent_PHYSDEV_HOT_SPARE_SMALLER, enclosureType=enclosureType, pv660fEvent_PHYSDEV_REBUILD_SYSDEV_FAILED=pv660fEvent_PHYSDEV_REBUILD_SYSDEV_FAILED, controllerC0BatteryState=controllerC0BatteryState, partitionName=partitionName, volumeNameEv=volumeNameEv, arrayDiskFailed=arrayDiskFailed, arrayDiskChannelConnectionArrayDiskName=arrayDiskChannelConnectionArrayDiskName, temperatureEntry=temperatureEntry, arrayDiskLengthInMB=arrayDiskLengthInMB, enclosureName=enclosureName, virtualDiskCachePolicy=virtualDiskCachePolicy, perc2SmartConfigChange=perc2SmartConfigChange, pv660fEvent_CTLDEV_POWER_OFF=pv660fEvent_CTLDEV_POWER_OFF, pv660fEvent_SYSDEV_AUTO_REBUILD_START=pv660fEvent_SYSDEV_AUTO_REBUILD_START, enclosureESM1PartNumber=enclosureESM1PartNumber, enclosureManagementModuleName=enclosureManagementModuleName, basicDiskExtendedConnectionVirtualDiskName=basicDiskExtendedConnectionVirtualDiskName, pv660fEvent_FMTSTWK_OK=pv660fEvent_FMTSTWK_OK, fanNumber=fanNumber, plexEntry=plexEntry, rebuildRateEv=rebuildRateEv, controllerC0Channel=controllerC0Channel, virtualDiskEntry=virtualDiskEntry, pv660fEvent_SYSDEV_TYPECHANGED=pv660fEvent_SYSDEV_TYPECHANGED, pv660fEvent_DEBUG_DUMP_GENERATED=pv660fEvent_DEBUG_DUMP_GENERATED, pv660fEvent_FMTPOWER_NOTPRESENT=pv660fEvent_FMTPOWER_NOTPRESENT, pv660fEvent_ENCLSES_SOFTADDR_OCCURRED=pv660fEvent_ENCLSES_SOFTADDR_OCCURRED, alertScsiSenseFormatFail=alertScsiSenseFormatFail, checkConsistencyCancelled=checkConsistencyCancelled, powersupplyConnectionEnclosureName=powersupplyConnectionEnclosureName, pv660fEvent_CTLDEV_IN_CLUSTER=pv660fEvent_CTLDEV_IN_CLUSTER, enclosureBackplanePartNumber=enclosureBackplanePartNumber, controllerCacheSizeInBytes=controllerCacheSizeInBytes, plexName=plexName, alertCompleteBGI=alertCompleteBGI, powersupplyTable=powersupplyTable, pv660fEvent_AUTOBOOT_CHANGED=pv660fEvent_AUTOBOOT_CHANGED, pv660fEvent_CTLDEV_NEGOTIATION_FAILED_JUMPERS=pv660fEvent_CTLDEV_NEGOTIATION_FAILED_JUMPERS, temperatureProbeUnit=temperatureProbeUnit, controllerC1BatteryState=controllerC1BatteryState, temperatureProbeMaxWarning=temperatureProbeMaxWarning, adFormatCancelled=adFormatCancelled, arrayDiskEnclosureConnectionEnclosureName=arrayDiskEnclosureConnectionEnclosureName, temperatureConnectionNumber=temperatureConnectionNumber, controllerC0Port1WWN=controllerC0Port1WWN, pv660fEvent_FMTHEAT_CRITICAL=pv660fEvent_FMTHEAT_CRITICAL, pv660fEvent_CTLDEV_MIRROR_CRITICAL_DRIVE=pv660fEvent_CTLDEV_MIRROR_CRITICAL_DRIVE, virtualDiskSeverity=virtualDiskSeverity, pv660fEvent_CTLDEV_WRITEBACK_ERROR=pv660fEvent_CTLDEV_WRITEBACK_ERROR, virtualDiskWritePolicy=virtualDiskWritePolicy, alertScsiSenseSectorReassign=alertScsiSenseSectorReassign, pv660fEvent_PHYSDEV_MISSING_DEAD=pv660fEvent_PHYSDEV_MISSING_DEAD, pv660fEvent_FATAL_HANG=pv660fEvent_FATAL_HANG, pv660fEvent_CTLDEV_NEGOTIATION_SAME_ID=pv660fEvent_CTLDEV_NEGOTIATION_SAME_ID, pv660fEvent_SYSDEV_FOUND=pv660fEvent_SYSDEV_FOUND, virtualDiskCreated=virtualDiskCreated, channelName=channelName, controllerRebuildRateInPercent=controllerRebuildRateInPercent, vdFormatCancelled=vdFormatCancelled, perc2SmartFPTExceededTest=perc2SmartFPTExceededTest, basicDiskExtendedConnectionExtendedPartitionNumber=basicDiskExtendedConnectionExtendedPartitionNumber, arrayDiskChannelConnectionNumber=arrayDiskChannelConnectionNumber, temperatureProbeMinWarning=temperatureProbeMinWarning, arrayDiskEnclosureConnectionArrayDiskNumber=arrayDiskEnclosureConnectionArrayDiskNumber, subDiskState=subDiskState, pv660fEvent_CTLDEV_BBU_NORESPONSE=pv660fEvent_CTLDEV_BBU_NORESPONSE, pv660fEvent_SYSDEV_BG_INIT_STOPPED=pv660fEvent_SYSDEV_BG_INIT_STOPPED, pv660fEvent_ENCLACCESS_READY=pv660fEvent_ENCLACCESS_READY, powersupplyVendor=powersupplyVendor, arrayDiskChannelConnectionEntry=arrayDiskChannelConnectionEntry, vdInitializeCancelled=vdInitializeCancelled, pv660fEvent_PHYSDEV_EXPANDCAPACITY_ERROR=pv660fEvent_PHYSDEV_EXPANDCAPACITY_ERROR, enclosureID=enclosureID, pv660fEvent_LOG_OUT_SYNC=pv660fEvent_LOG_OUT_SYNC, fanProbeMinWarning=fanProbeMinWarning, pv660fEvent_PHYSDEV_SET_BUS_WIDTH=pv660fEvent_PHYSDEV_SET_BUS_WIDTH, arrayDiskLogicalConnectionNumber=arrayDiskLogicalConnectionNumber, fan1PartNumber=fan1PartNumber, pv660fEvent_PHYSDEV_STANDBY_REBUILD_START=pv660fEvent_PHYSDEV_STANDBY_REBUILD_START, pv660fEvent_PHYSDEV_MOVING_TO_OTHER_CHN=pv660fEvent_PHYSDEV_MOVING_TO_OTHER_CHN, fsysPro_DISK_CAPACITY_WARNING=fsysPro_DISK_CAPACITY_WARNING, providerName=providerName, pv660fEvent_CTLDEV_INSERTED_PTNR=pv660fEvent_CTLDEV_INSERTED_PTNR, arrayDiskEnclosureConnectionControllerNumber=arrayDiskEnclosureConnectionControllerNumber, enclosureSCSIID=enclosureSCSIID, pv660fEvent_ENCLHEAT_BAD=pv660fEvent_ENCLHEAT_BAD, enclosureManagementModuleFWVersion=enclosureManagementModuleFWVersion, fanConnectionTable=fanConnectionTable, basicDiskNonExtendedConnectionArrayDiskNumber=basicDiskNonExtendedConnectionArrayDiskNumber, volumeEntry=volumeEntry, pv660fEvent_ENCLFAN_FAILED=pv660fEvent_ENCLFAN_FAILED, enclosureGenericUnknown=enclosureGenericUnknown, virtualDiskTargetID=virtualDiskTargetID, adFormatCompleted=adFormatCompleted, pv660fEvent_PHYSDEV_INIT_STARTED=pv660fEvent_PHYSDEV_INIT_STARTED, pv660fEvent_FMTSTWK_CRITICAL=pv660fEvent_FMTSTWK_CRITICAL, pv660fEvent_ENCLHEAT_OK=pv660fEvent_ENCLHEAT_OK, pv660fEvent_CTLDEV_RELINQUISH_PTNR=pv660fEvent_CTLDEV_RELINQUISH_PTNR, arrayMgrGlobalStatus=arrayMgrGlobalStatus, pv660fEvent_SARM_HW_ERR=pv660fEvent_SARM_HW_ERR, controllerC0Target=controllerC0Target, arrayDiskFreeSpaceInMB=arrayDiskFreeSpaceInMB, alertEnclosureAlarmEnable=alertEnclosureAlarmEnable)
mibBuilder.exportSymbols("ArrayManager-MIB", pv660fEvent_CTLDEV_BBU_RECOND_START=pv660fEvent_CTLDEV_BBU_RECOND_START, arrayDiskLogicalConnectionDiskNumber=arrayDiskLogicalConnectionDiskNumber, device1NameEv=device1NameEv, virtualDiskTable=virtualDiskTable, temperatureConnectionEntry=temperatureConnectionEntry, pv660fEvent_FMTPOWER_OK=pv660fEvent_FMTPOWER_OK, alertCommRestored=alertCommRestored, pv660fEvent_CTLDEV_NEGOTIATION_CACHE_SIZE=pv660fEvent_CTLDEV_NEGOTIATION_CACHE_SIZE, pv660fEvent_CFG_NEW=pv660fEvent_CFG_NEW, adDiagFailed=adDiagFailed, pv660fEvent_FMT_UPS_BAT_LOW=pv660fEvent_FMT_UPS_BAT_LOW, aryMgrEvts=aryMgrEvts, basicDiskNonExtendedConnectionDiskNumber=basicDiskNonExtendedConnectionDiskNumber, pv660fEvent_I960_HW_ERR=pv660fEvent_I960_HW_ERR, vdInitializeStarted=vdInitializeStarted, pv660fEvent_CTLDEV_NEGOTIATION_MEMORY_SIZE=pv660fEvent_CTLDEV_NEGOTIATION_MEMORY_SIZE, pv660fEvent_PHYSDEV_GONE=pv660fEvent_PHYSDEV_GONE, pv660fEvent_SYSDEV_REBUILD_SYSDEV_FAILED=pv660fEvent_SYSDEV_REBUILD_SYSDEV_FAILED, powersupplyConnectionEntry=powersupplyConnectionEntry, controllerC1Port0ID=controllerC1Port0ID, dynamicDiskConnectionArrayDiskNumber=dynamicDiskConnectionArrayDiskNumber, controllerTable=controllerTable, enclosureNumber=enclosureNumber, agentAmSnmpVersion=agentAmSnmpVersion, controllerPartnerStatus=controllerPartnerStatus, diskLengthInMB=diskLengthInMB, alertEmmFwMismatch=alertEmmFwMismatch, pv660fEvent_ENC_SES_ERR=pv660fEvent_ENC_SES_ERR, enclosureVendor=enclosureVendor, pv660fEvent_PHYSDEV_REMOVED_DEAD=pv660fEvent_PHYSDEV_REMOVED_DEAD, enclosureManagementModulePartNumber=enclosureManagementModulePartNumber, diskEntry=diskEntry, controllerC0Port0WWN=controllerC0Port0WWN, pv660fEvent_PHYSDEV_RESET_DEAD=pv660fEvent_PHYSDEV_RESET_DEAD, pv660fEvent_PHYSDEV_MISSING_ONSTARTUP=pv660fEvent_PHYSDEV_MISSING_ONSTARTUP, pv660fEvent_SYSDEV_CRITICAL=pv660fEvent_SYSDEV_CRITICAL, enclosureManagementModuleConnectionEnclosureName=enclosureManagementModuleConnectionEnclosureName, pv660fEvent_ENCLPOWER_NOTPRESENT=pv660fEvent_ENCLPOWER_NOTPRESENT, vdFormatCompleted=vdFormatCompleted, pv660fEvent_ENCLACCESS_OK=pv660fEvent_ENCLACCESS_OK, virtualDiskNameEv=virtualDiskNameEv, virtualDiskName=virtualDiskName, dynamicDiskConnectionDiskNumber=dynamicDiskConnectionDiskNumber, arrayDiskRevision=arrayDiskRevision, basicDiskExtendedConnectionArrayDiskNumber=basicDiskExtendedConnectionArrayDiskNumber, pv660fEvent_CHANNEL_SCSI_BUS_ALIVE=pv660fEvent_CHANNEL_SCSI_BUS_ALIVE, enclosureGenericDegraded=enclosureGenericDegraded, enclosureManagementModuleConnectionEnclosureNumber=enclosureManagementModuleConnectionEnclosureNumber, diskTable=diskTable, pv660fEvent_CTLDEV_DUAL_ENABLED=pv660fEvent_CTLDEV_DUAL_ENABLED, arrayDiskLogicalConnectionTable=arrayDiskLogicalConnectionTable, pv660fEvent_CFG_CLEAR=pv660fEvent_CFG_CLEAR, pv660fEvent_PHYSDEV_STANDBY=pv660fEvent_PHYSDEV_STANDBY, enclosureGenericOffline=enclosureGenericOffline, enclosureManagementModuleTable=enclosureManagementModuleTable, arrayDiskUsedSpaceInMB=arrayDiskUsedSpaceInMB, enclosureProcessor2Version=enclosureProcessor2Version, arrayDiskLogicalConnectionDiskName=arrayDiskLogicalConnectionDiskName, extendedPartitionEntry=extendedPartitionEntry, vdReconfigCancelled=vdReconfigCancelled, pv660fEvent_PHYSDEV_PARITY_ERROR=pv660fEvent_PHYSDEV_PARITY_ERROR, percHotSpareAssign=percHotSpareAssign, pv660fEvent_FMTFAN_OK=pv660fEvent_FMTFAN_OK, controllerPhysicalDeviceCount=controllerPhysicalDeviceCount, pv660fEvent_FMTFAN_FAILED=pv660fEvent_FMTFAN_FAILED, fanName=fanName, pv660fEvent_SYSDEV_OFFLINE=pv660fEvent_SYSDEV_OFFLINE, basicDiskNonExtendedConnectionVolumeDriveLetter=basicDiskNonExtendedConnectionVolumeDriveLetter, basicDiskNonExtendedConnectionVolumeNumber=basicDiskNonExtendedConnectionVolumeNumber, pv660fEvent_PHYSDEV_SELTMO_DEAD=pv660fEvent_PHYSDEV_SELTMO_DEAD, pv660fEvent_SYSDEV_MANUAL_REBUILD_START=pv660fEvent_SYSDEV_MANUAL_REBUILD_START, pv660fEvent_PHYSDEV_RESET=pv660fEvent_PHYSDEV_RESET, pv660fEvent_CHANNEL_FIBER_DEAD=pv660fEvent_CHANNEL_FIBER_DEAD, enclosureManagementModuleConnectionTable=enclosureManagementModuleConnectionTable, pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE_WITH_DATALOSS=pv660fEvent_SYSDEV_OFFLINE_DEVICE_MADE_AVAILABLE_WITH_DATALOSS, volumeLengthInMB=volumeLengthInMB, fanVendor=fanVendor, extendedPartitionName=extendedPartitionName, arrayDiskChannelConnectionChannelNumber=arrayDiskChannelConnectionChannelNumber, pv660fEvent_PHYSDEV_WARMSPARE=pv660fEvent_PHYSDEV_WARMSPARE, arrayDiskLogicalConnectionVirtualDiskNumber=arrayDiskLogicalConnectionVirtualDiskNumber, powersupply1PartNumber=powersupply1PartNumber, pv660fEvent_ENCLFAN_NOTPRESENT=pv660fEvent_ENCLFAN_NOTPRESENT, pv660fEvent_SYSDEV_CHECK_DONE=pv660fEvent_SYSDEV_CHECK_DONE, pv660fEvent_SYSDEV_CHECK_CANCELED=pv660fEvent_SYSDEV_CHECK_CANCELED, pv660fEvent_CTLDEV_RESET=pv660fEvent_CTLDEV_RESET, virtualDiskLengthInMB=virtualDiskLengthInMB, pv660fEvent_PHYSDEV_REBUILD_START_FAILED=pv660fEvent_PHYSDEV_REBUILD_START_FAILED, fanConnectionNumber=fanConnectionNumber, adInitializeCompleted=adInitializeCompleted, arrayDiskState=arrayDiskState, agentTimeStamp=agentTimeStamp, arrayManager=arrayManager, fanConnectionFanName=fanConnectionFanName, virtualDiskLunID=virtualDiskLunID, pv660fEvent_CTLDEV_NOT_IN_CLUSTER=pv660fEvent_CTLDEV_NOT_IN_CLUSTER, pv660fEvent_SYSDEV_REBUILD_NEWDEV_FAILED=pv660fEvent_SYSDEV_REBUILD_NEWDEV_FAILED, dynamicDiskConnectionTable=dynamicDiskConnectionTable, pv660fEvent_LOG_REQUEST_SENSE=pv660fEvent_LOG_REQUEST_SENSE, basicDiskExtendedConnectionEntry=basicDiskExtendedConnectionEntry, temperatureConnectionTemperatureNumber=temperatureConnectionTemperatureNumber, pv660fEvent_PHYSDEV_ACTIVESPARE=pv660fEvent_PHYSDEV_ACTIVESPARE, unitNumberEv=unitNumberEv, powersupplyConnectionPowersupplyName=powersupplyConnectionPowersupplyName, pv660fEvent_SYSTEM_ALIVE=pv660fEvent_SYSTEM_ALIVE, fanConnectionFanNumber=fanConnectionFanNumber, vdInitializeFailed=vdInitializeFailed, software=software, controllerNameEv=controllerNameEv, vdFormatStarted=vdFormatStarted, agentGetTimeout=agentGetTimeout, arrayDiskChannel=arrayDiskChannel, arrayDiskLogicalConnectionVirtualDiskName=arrayDiskLogicalConnectionVirtualDiskName, arrayDiskChannelConnectionTable=arrayDiskChannelConnectionTable, pv660fEvent_SYSTEM_SIZE_TABLE_FULL=pv660fEvent_SYSTEM_SIZE_TABLE_FULL, enclosureManagementModuleType=enclosureManagementModuleType, virtualDiskDeleted=virtualDiskDeleted, agentAmMibVersion=agentAmMibVersion, senseQualifierEv=senseQualifierEv, pv660fEvent_CTLDEV_BBU_CALIBRATE_DONE=pv660fEvent_CTLDEV_BBU_CALIBRATE_DONE, temperatureNumber=temperatureNumber, plexNumber=plexNumber, controllerC1Target=controllerC1Target, pv660fEvent_SYSDEV_INIT_STARTED=pv660fEvent_SYSDEV_INIT_STARTED, pv660fEvent_CTLDEV_WARM_BOOT_ERROR=pv660fEvent_CTLDEV_WARM_BOOT_ERROR, pv660fEvent_FATAL_BRKP=pv660fEvent_FATAL_BRKP, channelTable=channelTable, powersupply2PartNumber=powersupply2PartNumber, enclosureManagementModuleConnectionEMMName=enclosureManagementModuleConnectionEMMName, diskVirtualDiskDeviceName=diskVirtualDiskDeviceName, pv660fEvent_FMTHEAT_BAD=pv660fEvent_FMTHEAT_BAD, pv660fEvent_PHYSDEV_GROSSERR_DEAD=pv660fEvent_PHYSDEV_GROSSERR_DEAD, arrayDiskLargestContiguousFreeSpaceInBytes=arrayDiskLargestContiguousFreeSpaceInBytes, partitionTable=partitionTable, basicDiskExtendedConnectionVirtualDiskNumber=basicDiskExtendedConnectionVirtualDiskNumber, temperatureVendor=temperatureVendor, pv660fEvent_SYSDEV_BG_INIT_STARTED=pv660fEvent_SYSDEV_BG_INIT_STARTED, arrayDiskNameEv=arrayDiskNameEv, enclosureGenericWarning=enclosureGenericWarning, diskFreeSpaceInBytes=diskFreeSpaceInBytes, basicDiskNonExtendedConnectionPartitionNumber=basicDiskNonExtendedConnectionPartitionNumber, arrayDiskChannelConnectionChannelName=arrayDiskChannelConnectionChannelName, pv660fEvent_PHYSDEV_HOTSPARE=pv660fEvent_PHYSDEV_HOTSPARE, virtualDiskLengthInBytes=virtualDiskLengthInBytes, dynamicDiskConnectionSubDiskName=dynamicDiskConnectionSubDiskName, alertControllerRebuildRate=alertControllerRebuildRate, powersupplyEntry=powersupplyEntry, adRebuildCancelled=adRebuildCancelled, percResumeIO=percResumeIO, pv660fEvent_SYSTEM_DEAD=pv660fEvent_SYSTEM_DEAD, pv660fEvent_PHYSDEV_AUTO_REBUILD_START=pv660fEvent_PHYSDEV_AUTO_REBUILD_START, arrayDiskFreeSpaceInBytes=arrayDiskFreeSpaceInBytes, pv660fEvent_CTLDEV_DEAD=pv660fEvent_CTLDEV_DEAD, cntrlPauseIO=cntrlPauseIO, vdRebuildCompleted=vdRebuildCompleted, pv660fEvent_ENCLACCESS_CRITICAL=pv660fEvent_ENCLACCESS_CRITICAL, pv660fEvent_CTLDEV_BBU_CALIBRATE_ABORT=pv660fEvent_CTLDEV_BBU_CALIBRATE_ABORT, percSCSISenseData=percSCSISenseData, partitionNumber=partitionNumber, controllerC0OSController=controllerC0OSController, pv660fEvent_ENCLPOWER_FAILED=pv660fEvent_ENCLPOWER_FAILED, fanConnectionEntry=fanConnectionEntry, pv660fEvent_PHYSDEV_DBLCC_DEAD=pv660fEvent_PHYSDEV_DBLCC_DEAD, pv660fEvent_CTLDEV_FIRMWARE_MISMATCH=pv660fEvent_CTLDEV_FIRMWARE_MISMATCH, pv660fEvent_CTLDEV_BBU_OUT_OF_SERVICE=pv660fEvent_CTLDEV_BBU_OUT_OF_SERVICE, pv660fEvent_SYSDEV_CHECK_PHYSDEV_FAILED=pv660fEvent_SYSDEV_CHECK_PHYSDEV_FAILED, enclosureAlarm=enclosureAlarm, dynamicDiskConnectionVirtualDiskNumber=dynamicDiskConnectionVirtualDiskNumber, pv660fEvent_CTLDEV_POWER_ON=pv660fEvent_CTLDEV_POWER_ON, alertCommTimeout=alertCommTimeout, agentHostname=agentHostname, basicDiskNonExtendedConnectionArrayDiskName=basicDiskNonExtendedConnectionArrayDiskName, percPredictiveFailure=percPredictiveFailure, temperatureState=temperatureState, arrayDiskEnclosureConnectionTable=arrayDiskEnclosureConnectionTable, plexLayout=plexLayout, percPauseIO=percPauseIO, pv660fEvent_CTLDEV_FOUND=pv660fEvent_CTLDEV_FOUND, cntrlBatteryLow=cntrlBatteryLow, fan2PartNumber=fan2PartNumber, basicDiskNonExtendedConnectionVirtualDiskNumber=basicDiskNonExtendedConnectionVirtualDiskNumber, alertVirtualDiskUnmirror=alertVirtualDiskUnmirror, arrayDiskBusType=arrayDiskBusType, pv660fEvent_PHYSDEV_REBUILD_CANCELED=pv660fEvent_PHYSDEV_REBUILD_CANCELED, channelSeverity=channelSeverity, volumeFreeSpaceInMB=volumeFreeSpaceInMB, pv660fEvent_CFG_COD_ACCESS_ERROR=pv660fEvent_CFG_COD_ACCESS_ERROR, fanTable=fanTable, basicDiskNonExtendedConnectionDiskName=basicDiskNonExtendedConnectionDiskName, arrayDiskChannelConnectionArrayDiskNumber=arrayDiskChannelConnectionArrayDiskNumber, arrayDiskEntry=arrayDiskEntry, arrayDiskTable=arrayDiskTable, genericEvent_DATABASE_DOWN=genericEvent_DATABASE_DOWN, enclosureManagementModuleEntry=enclosureManagementModuleEntry, adDiagCompleted=adDiagCompleted, pv660fEvent_CTLDEV_NEGOTIATION_HOST_CHANNELS=pv660fEvent_CTLDEV_NEGOTIATION_HOST_CHANNELS, arrayDiskEnclosureID=arrayDiskEnclosureID, arrayDiskInserted=arrayDiskInserted, enclosureESM2PartNumber=enclosureESM2PartNumber, alertMegalibTimeout=alertMegalibTimeout, pv660fEvent_SYSDEV_INIT_CANCELED=pv660fEvent_SYSDEV_INIT_CANCELED, alertConserveCacheModeDisable=alertConserveCacheModeDisable, pv660fEvent_SYSDEV_ONLINE=pv660fEvent_SYSDEV_ONLINE, pv660fEvent_SYSDEV_EXPANDCAPACITY_DONE=pv660fEvent_SYSDEV_EXPANDCAPACITY_DONE, providerVersion=providerVersion, pv660fEvent_CHANNEL_SCSI_BUS_DEAD=pv660fEvent_CHANNEL_SCSI_BUS_DEAD, enclosureTable=enclosureTable, pv660fEvent_PHYSDEV_BSYPAR_DEAD=pv660fEvent_PHYSDEV_BSYPAR_DEAD, pv660fEvent_CTLDEV_NEGOTIATION_DISK_CHANNELS=pv660fEvent_CTLDEV_NEGOTIATION_DISK_CHANNELS, volumeLengthInBytes=volumeLengthInBytes)
