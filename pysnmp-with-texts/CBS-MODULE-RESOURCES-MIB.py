#
# PySNMP MIB module CBS-MODULE-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CBS-MODULE-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
cbsHwModuleID, = mibBuilder.importSymbols("CBS-HARDWARE-MIB", "cbsHwModuleID")
cbsVgVapGroupID, = mibBuilder.importSymbols("CBS-VAPGROUP-MIB", "cbsVgVapGroupID")
cbsTraps, cbsMIBs, cbsMgmt = mibBuilder.importSymbols("CROSSBEAM-SYSTEMS-MIB", "cbsTraps", "cbsMIBs", "cbsMgmt")
ProductID, KBytes = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "ProductID", "KBytes")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, IpAddress, iso, NotificationType, TimeTicks, ObjectIdentity, Unsigned32, Gauge32, Integer32, Counter64, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "IpAddress", "iso", "NotificationType", "TimeTicks", "ObjectIdentity", "Unsigned32", "Gauge32", "Integer32", "Counter64", "Bits", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
cbsModuleResourcesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6848, 3, 3))
cbsModuleResourcesMIB.setRevisions(('2002-03-18 00:00', '2002-08-01 00:00', '2002-12-11 00:00', '2007-12-17 00:00', '2009-06-10 00:00', '2009-07-17 00:00', '2009-09-10 00:00', '2009-10-16 00:00', '2010-01-07 00:00', '2010-04-13 00:00', '2010-05-13 00:00', '2010-05-22 00:00', '2010-05-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cbsModuleResourcesMIB.setRevisionsDescriptions(('Initial Revision', 'Obsoleted cbsModuleMemoryUsageExceeded and cbsModuleMemoryUsageNormal notification types', 'Added cbsModuleCPUUtil objects. Obsoleted cpuLoad exceeded/normal notification types in favor of cpuUtil notification types', 'Added cbsModuleMU, cbsModuleFR, and cbModuleBU objects', 'Added some objects for module refer to the standard memory mib, such as cbsModuleMemoryTotalFree, cbsModuleMemoryShared, cbsModuleMemoryBuffer, cbsModuleMemoryCached and etc.', 'Added some objects for module refer to the standard memory mib, such as cbsModuleMemoryHiTotal, cbsModuleMemoryHiFree, cbsModuleMemoryLoTotal, and cbsModuleMemoryLoFree.', 'Added cbsModuleDUMgmt object.', 'Added cbsModuleCpuCoreHiUtil object.', 'Added cbsModuleSdramCheck trap definition.', 'Added cbsCpmDiskCheck trap definition.', 'Added cbsModuleDUVar object.', 'Added application information on each Vap Group.', 'Added chassis utilization, Flow By NPM, Flow By VAP.',))
if mibBuilder.loadTexts: cbsModuleResourcesMIB.setLastUpdated('200909100000Z')
if mibBuilder.loadTexts: cbsModuleResourcesMIB.setOrganization('Crossbeam Systems, Inc.')
if mibBuilder.loadTexts: cbsModuleResourcesMIB.setContactInfo('Email: mib-admin@crossbeamsys.com Postal: 80 Central Street Boxborough, MA 01719')
if mibBuilder.loadTexts: cbsModuleResourcesMIB.setDescription('XOS, Release 9.5: This MIB module defines the objects that monitor the performance and utilization of Module resources.')
class UtilSeverityLvl(TextualConvention, Integer32):
    description = 'Utilization alarm severity level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("minor", 1), ("major", 2), ("critical", 3))

class BadSdramMemCfgStat(TextualConvention, Integer32):
    description = 'Unsupported SDRAM memory configuration error status. no-error - no memory configuration error detected. no-four-gig-dimms-error - four 1Gig DIMMs not found installed. bad-total-memory-error - four 1 or 4 Gig DIMMs found installed, but memory not fully recognized by system. no-four-4gig-dimms-error - four 4Gig DIMMs not found installed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("no-error", 0), ("no-four-gig-dimms-error", 1), ("bad-total-memory-error", 2), ("no-four-4gig-dimms-error", 3))

class BadDiskCfgStat(TextualConvention, Integer32):
    description = 'Unsupported Disk configuration error status for RAID-1. no-error - no disk configuration error detected. no-raid-1-config-error - not raid 1 configuration. no-two-500GB-or-greater-disks-error - dual HDs of 500GB or greater not found.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("no-error", 0), ("no-raid-1-config-error", 1), ("no-two-500GB-or-greater-disks-error", 2))

class GuestHealthSeverityLvl(TextualConvention, Integer32):
    description = 'Guest OS alarm severity level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("minor", 1), ("major", 2), ("critical", 3))

cbsModuleResources = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 2, 3))
cbsModuleResourceTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6848, 4, 2))
cbsModuleCPULoadTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1), )
if mibBuilder.loadTexts: cbsModuleCPULoadTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPULoadTable.setDescription('This table contains information about the CPU utilization of the processor modules.')
cbsModuleCPULoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleCPULoadEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPULoadEntry.setDescription('An entry in the CPU load table.')
cbsModuleCPUSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUSpeed.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUSpeed.setDescription('The speed of the processor(s) in MHz.')
cbsModuleCPUCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUCount.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUCount.setDescription('The number of CPUs in the module')
cbsModuleCPULoad1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPULoad1.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPULoad1.setDescription('The average number of processes ready to run in the last minute.')
cbsModuleCPULoad5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPULoad5.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPULoad5.setDescription('The average number of processes ready to run in the last 5 minutes.')
cbsModuleCPULoad15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPULoad15.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPULoad15.setDescription('The average number of processes ready to run in the last 15 minutes.')
cbsModuleCPUUtil1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUUtil1.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUUtil1.setDescription('CPU utilization averaged over last 1 minute.')
cbsModuleCPUUtil5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUUtil5.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUUtil5.setDescription('CPU utilization averaged over last 5 minutes.')
cbsModuleCPUUtil15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUUtil15.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUUtil15.setDescription('CPU utilization averaged over last 15 minutes.')
cbsModuleMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2), )
if mibBuilder.loadTexts: cbsModuleMemoryTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryTable.setDescription('This table contains information about the memory utilization of the processor modules.')
cbsModuleMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryEntry.setDescription('An entry in the memory utilization table.')
cbsModuleMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 1), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryTotal.setDescription('Total memory that can be used by the operating system.')
cbsModuleMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 2), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryUsed.setDescription('The amount of memory in use.')
cbsModuleMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryFree.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryFree.setDescription('Amount of memory available for use.')
cbsModuleMemoryTotalSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryTotalSwap.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryTotalSwap.setDescription('Total Swap Size configured for the module.')
cbsModuleMemoryAvailSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 5), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryAvailSwap.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryAvailSwap.setDescription('Available Swap Space on the module.')
cbsModuleMemoryTotalReal = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 6), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryTotalReal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryTotalReal.setDescription('Total Real/Physical Memory Size on the module.')
cbsModuleMemoryAvailReal = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 7), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryAvailReal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryAvailReal.setDescription('Available Real/Physical Memory Space on the module.')
cbsModuleMemoryTotalFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 8), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryTotalFree.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryTotalFree.setDescription('Total available memory(Including memory free and swap free).')
cbsModuleMemoryShared = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 9), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryShared.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryShared.setDescription('Total shared memory.')
cbsModuleMemoryBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 10), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryBuffer.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryBuffer.setDescription('Total buffered memory.')
cbsModuleMemoryCached = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 11), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryCached.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryCached.setDescription('Total cached memory.')
cbsModuleMemoryHiTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 12), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryHiTotal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryHiTotal.setDescription('Total amount of memory that is not directly mapped into kernel space.')
cbsModuleMemoryHiFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 13), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryHiFree.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryHiFree.setDescription('Total amount of free memory that is not directly mapped into kernel space.')
cbsModuleMemoryLoTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 14), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryLoTotal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryLoTotal.setDescription('Total amount of memory that is directly mapped into kernel space.')
cbsModuleMemoryLoFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 2, 1, 15), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleMemoryLoFree.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMemoryLoFree.setDescription('Total amount of free memory that is directly mapped into kernel space.')
cbsModuleSwapTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 3), )
if mibBuilder.loadTexts: cbsModuleSwapTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSwapTable.setDescription('This table contains information about the swap utilization of the processor modules.')
cbsModuleSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 3, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleSwapEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSwapEntry.setDescription('An entry in the memory utilization table.')
cbsModuleSwapTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 3, 1, 1), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSwapTotal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSwapTotal.setDescription('Total swap space available to the operating system.')
cbsModuleSwapUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 3, 1, 2), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSwapUsed.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSwapUsed.setDescription('The amount of swap space in use.')
cbsModuleSwapFree = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 3, 1, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSwapFree.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSwapFree.setDescription('Amount of free swap space.')
cbsModuleDUTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4), )
if mibBuilder.loadTexts: cbsModuleDUTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUTable.setDescription('This table contains information about the disk usage of the processor modules.')
cbsModuleDUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleDUEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUEntry.setDescription('An entry in the disk usage table.')
cbsModuleDURoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleDURoot.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDURoot.setDescription('The current percentage of disk usage on the / partition.')
cbsModuleDUBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleDUBoot.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUBoot.setDescription('The current percentage of disk usage on the /boot partition.')
cbsModuleDUCbconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleDUCbconfig.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUCbconfig.setDescription('The current percentage of disk usage on the /cbconfig partition.')
cbsModuleDUTftpboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleDUTftpboot.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUTftpboot.setDescription('The current percentage of disk usage on the /tftpboot partition.')
cbsModuleDUMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleDUMgmt.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUMgmt.setDescription('The current percentage of disk usage on the /mgmt partition.')
cbsModuleDUVar = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 4, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleDUVar.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUVar.setDescription('The current percentage of disk usage on the /var partition.')
cbsModuleFreePageTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 5), )
if mibBuilder.loadTexts: cbsModuleFreePageTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageTable.setDescription('This table contains information about the free page utilization of the APMs.')
cbsModuleFreePageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 5, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleFreePageEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageEntry.setDescription('An entry in the free page utilization table.')
cbsModuleFreePageAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 5, 1, 1), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleFreePageAvailable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageAvailable.setDescription('The number of free pages available to the operating system.')
cbsModuleFreePageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 5, 1, 2), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleFreePageThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageThreshold.setDescription('Free Page threshold setting in cbs_fp_th.')
cbsModuleFreePageSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 5, 1, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleFreePageSeverity.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageSeverity.setDescription('The amount severity of the alarm. 0 = No alarm, 1 = Minor, 2 = Major, 3 = Critical')
cbsModuleFreePageVapName = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleFreePageVapName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageVapName.setDescription('The VAP group name. For example, cbsVmVapGroupName-cbsVmVapIndex')
cbsModuleCPUAvgUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6), )
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilTable.setDescription('This table contains utilization information for all CPUs on a module')
cbsModuleCPUAvgUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilEntry.setDescription('An entry in the utilization table.')
cbsModuleCPUAvgUtilCore1User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore1Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore1Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore1Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore1IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore1SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore1IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore1IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleCPUAvgUtilCore2User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore2Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore2Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore2Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore2IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore2SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore2IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore2IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleCPUAvgUtilCore3User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore3Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore3Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore3Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore3IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore3SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore3IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore3IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleCPUAvgUtilCore4User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore4Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore4Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore4Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore4IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore4SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore4IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore4IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleCPUAvgUtilCore5User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore5Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore5Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore5Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore5IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore5SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore5IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore5IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleCPUAvgUtilCore6User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore6Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore6Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore6Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore6IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore6SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore6IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore6IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleCPUAvgUtilCore7User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore7Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore7Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore7Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore7IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore7SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore7IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore7IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleCPUAvgUtilCore8User = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8User.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8User.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in User state. ')
cbsModuleCPUAvgUtilCore8Nice = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8Nice.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8Nice.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Nice state. ')
cbsModuleCPUAvgUtilCore8Syst = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8Syst.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8Syst.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Syst state. ')
cbsModuleCPUAvgUtilCore8Idle = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8Idle.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8Idle.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Idle state. ')
cbsModuleCPUAvgUtilCore8IRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8IRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8IRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IRQ state. ')
cbsModuleCPUAvgUtilCore8SoftIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8SoftIRQ.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8SoftIRQ.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in Soft IRQ state. ')
cbsModuleCPUAvgUtilCore8IOWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 6, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8IOWait.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUAvgUtilCore8IOWait.setDescription('Entry from /proc/stat. It represents the percentage of time (in tenths of a percent) this core was in IOWait state. ')
cbsModuleSDPTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7), )
if mibBuilder.loadTexts: cbsModuleSDPTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDPTable.setDescription('This table contains utilization information for all Switched Data Paths on an NPM module')
cbsModuleSDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleSDPEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDPEntry.setDescription('An entry in the utilization table.')
cbsModuleSDP0OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP0OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP0OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP0OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP0OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP0OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP0InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP0InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP0InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP0InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP0InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP0InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP1OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP1OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP1OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP1OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP1OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP1OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP1InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP1InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP1InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP1InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP1InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP1InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP2OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP2OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP2OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP2OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP2OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP2InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP2InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP2InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP2InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP2InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP3OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP3OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP3OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP3OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP3OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP3OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP3InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP3InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP3InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP3InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP3InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP3InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP4OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP4OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP4OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP4OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP4OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP4OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP4InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP4InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP4InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP4InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP4InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP4InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP5OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP5OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP5OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP5OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP5OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP5OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP5InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP5InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP5InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP5InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP5InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP5InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP6OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP6OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP6OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP6OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP6OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP6OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP6InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP6InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP6InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP6InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP6InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP6InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP7OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP7OutPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP7OutPkts.setDescription('Entry from /proc/driver/ap6_8600/link(x)')
cbsModuleSDP7OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP7OutOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP7OutOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleSDP7InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP7InPkts.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP7InPkts.setDescription('Entry from /proc/net/dev/link(x)')
cbsModuleSDP7InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 7, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSDP7InOctets.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSDP7InOctets.setDescription(' Entry from /proc/net/dev/link(x)')
cbsModuleUptimeTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 8), )
if mibBuilder.loadTexts: cbsModuleUptimeTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleUptimeTable.setDescription('This table contains the uptime for all of the modules in the chassis indexed by module ID')
cbsModuleUptimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 8, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleUptimeEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleUptimeEntry.setDescription('An entry in the Module Uptime table.')
cbsModuleUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 8, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleUptime.setStatus('current')
if mibBuilder.loadTexts: cbsModuleUptime.setDescription('Indicates the elapsed time since the last slot reboot.')
cbsModuleNPMFlowCountTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 9), )
if mibBuilder.loadTexts: cbsModuleNPMFlowCountTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNPMFlowCountTable.setDescription('This table contains concurrent flow count information for all NPM modules')
cbsModuleNPMFlowCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 9, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleNPMFlowCountEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNPMFlowCountEntry.setDescription('An entry in the NPM Flow count table.')
cbsModuleNPMFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleNPMFlowCount.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNPMFlowCount.setDescription('The current percentage full of the NPM active flow cache')
cbsModuleAppMonTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10), )
if mibBuilder.loadTexts: cbsModuleAppMonTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppMonTable.setDescription('This table contains information about the AppMon status on each APM.')
cbsModuleAppMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleAppMonEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppMonEntry.setDescription('An entry in the AppMon table.')
cbsModuleAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleAppName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppName.setDescription('Application Name')
cbsModuleAppVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleAppVersion.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppVersion.setDescription('Application Version')
cbsModuleAppRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleAppRelease.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppRelease.setDescription('Application Release')
cbsModuleAppCPMHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 4), DisplayString())
if mibBuilder.loadTexts: cbsModuleAppCPMHostName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppCPMHostName.setDescription('Host name of the CPM')
cbsModuleAppCPMIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 5), DisplayString())
if mibBuilder.loadTexts: cbsModuleAppCPMIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppCPMIPAddress.setDescription('IP address of the CPM')
cbsModuleAppVAPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleAppVAPGroupName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppVAPGroupName.setDescription('Vap Group name to which the routing protocol belongs to')
cbsModuleAppVAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleAppVAPIndex.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppVAPIndex.setDescription('VAPIndex')
cbsModuleAppOldState = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleAppOldState.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppOldState.setDescription('The last state of the application')
cbsModuleAppNewState = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleAppNewState.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppNewState.setDescription('New (current) state of the application')
cbsModuleRSWName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWName.setDescription('Routing protocol name')
cbsModuleRSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWVersion.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWVersion.setDescription('Routing protocol version')
cbsModuleRSWRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWRelease.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWRelease.setDescription('Routing protocol release')
cbsModuleRSWStartOnBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWStartOnBoot.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWStartOnBoot.setDescription('Indicates whether routing protocol is enabled or not')
cbsModuleRSWCPMHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 14), DisplayString())
if mibBuilder.loadTexts: cbsModuleRSWCPMHostName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWCPMHostName.setDescription('Host name of the CPM')
cbsModuleRSWCPMIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 15), DisplayString())
if mibBuilder.loadTexts: cbsModuleRSWCPMIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWCPMIPAddress.setDescription('IP address of the CPM')
cbsModuleRSWVAPGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWVAPGroupName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWVAPGroupName.setDescription('Vap Group name to which the application belongs')
cbsModuleRSWVAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWVAPIndex.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWVAPIndex.setDescription('VAPIndex')
cbsModuleRSWOldState = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWOldState.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWOldState.setDescription('The last state of the routing protocol')
cbsModuleRSWNewState = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 10, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleRSWNewState.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWNewState.setDescription('Current state of the routing protocol')
cbsModuleNtpdMonTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 11), )
if mibBuilder.loadTexts: cbsModuleNtpdMonTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNtpdMonTable.setDescription('This table contains information about the ntpd status on primary CPM.')
cbsModuleNtpdMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 11, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleNtpdMonEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNtpdMonEntry.setDescription('An entry in the ntpd monitor table.')
cbsModuleNtpdCPMHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleNtpdCPMHostName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNtpdCPMHostName.setDescription('Hostname of the CPM')
cbsModuleNtpdCPMIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleNtpdCPMIPAddress.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNtpdCPMIPAddress.setDescription('IP address of the CPM')
cbsModuleNtpdState = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleNtpdState.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNtpdState.setDescription('Current state of the ntpd')
cbsModuleCpuCoreHiUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 12), )
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilTable.setDescription('This table contains the CPU core high utilization states for all of the modules in the chassis indexed by module ID')
cbsModuleCpuCoreHiUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 12, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilEntry.setDescription('An entry in the Module Cpu Core Utilization table.')
cbsModuleCpuCoreHiUtilSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 12, 1, 1), UtilSeverityLvl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilSeverity.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilSeverity.setDescription('The severity level of CPU core utilization alarm.')
cbsModuleCpuCoreHiUtilPerc = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilPerc.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilPerc.setDescription('Highest CPU core utilization percentage seen.')
cbsModuleCpuCoreHiUtilCores = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 12, 1, 3), Bits().clone(namedValues=NamedValues(("core7", 0), ("core6", 1), ("core5", 2), ("core4", 3), ("core3", 4), ("core2", 5), ("core1", 6), ("core0", 7), ("core15", 8), ("core14", 9), ("core13", 10), ("core12", 11), ("core11", 12), ("core10", 13), ("core9", 14), ("core8", 15), ("core23", 16), ("core22", 17), ("core21", 18), ("core20", 19), ("core19", 20), ("core18", 21), ("core17", 22), ("core16", 23), ("core31", 24), ("core30", 25), ("core29", 26), ("core28", 27), ("core27", 28), ("core26", 29), ("core25", 30), ("core24", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilCores.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilCores.setDescription('Bit mask value of CPU cores at or above utilization threshold.')
cbsModuleCpuCoreHiUtilDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilDuration.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreHiUtilDuration.setDescription('Amount of time in minutes that a CPU core has exceeded a threshold.')
cbsNpmFlowTableUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13), )
if mibBuilder.loadTexts: cbsNpmFlowTableUtilTable.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFlowTableUtilTable.setDescription('This table contains the chassis-wide NPM flow table usage, the user configured NPM flow table limit and median thresholds, and the NPM flow table utilization severity.')
cbsNpmFlowTableUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsNpmFlowTableUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFlowTableUtilEntry.setDescription('An entry in the chassis-wide NPM flow table utilization table. The index is the module ID of the reporting NPM.')
cbsNpmFTUtilSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 1), UtilSeverityLvl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTUtilSeverity.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUtilSeverity.setDescription('The severity level of chassis-wide NPM flow table utilization alarm.')
cbsNpmFTTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTTriggerThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTriggerThreshold.setDescription('The user configured NPM flow table trigger threshold as percentage of the NPM flow table size.')
cbsNpmFTUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTUsage.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUsage.setDescription('The chassis-wide NPM flow table usage as percentage of the NPM flow table size.')
cbsNpmFTUdpLimitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTUdpLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUdpLimitThreshold.setDescription('The user-configured limit for UDP flows after the the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsNpmFTUdpMedianThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTUdpMedianThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUdpMedianThreshold.setDescription('The median of the NPM flow table UDP limit as percentage of the NPM flow table size.')
cbsNpmFTUdpQuotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTUdpQuotaUsage.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUdpQuotaUsage.setDescription('The flow table usage for UDP flows after the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsNpmFTTcpLimitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTTcpLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTcpLimitThreshold.setDescription('The user-configured limit for TCP flows after the the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsNpmFTTcpMedianThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTTcpMedianThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTcpMedianThreshold.setDescription('The median of the NPM flow table TCP limit as percentage of the NPM flow table size.')
cbsNpmFTTcpQuotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTTcpQuotaUsage.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTcpQuotaUsage.setDescription('The flow table usage for TCP flows after the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsNpmFTIcmpLimitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTIcmpLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTIcmpLimitThreshold.setDescription('The user-configured limit for ICMP flows after the the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsNpmFTIcmpMedianThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTIcmpMedianThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTIcmpMedianThreshold.setDescription('The median of the NPM flow table ICMP limit as percentage of the NPM flow table size.')
cbsNpmFTIcmpQuotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTIcmpQuotaUsage.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTIcmpQuotaUsage.setDescription('The flow table usage for ICMP flows after the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsNpmFTOtherIpLimitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTOtherIpLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTOtherIpLimitThreshold.setDescription('The user-configured limit for other-IP flows after the the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsNpmFTOtherIpMedianThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTOtherIpMedianThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTOtherIpMedianThreshold.setDescription('The median of the NPM flow table other-IP limit as percentage of the NPM flow table size.')
cbsNpmFTOtherIpQuotaUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmFTOtherIpQuotaUsage.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTOtherIpQuotaUsage.setDescription('The flow table usage for other-IP flows after the NPM flow table trigger threshold is exceeded, as percentage of the NPM flow table size.')
cbsModuleSdramMemCfgStatTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 14), )
if mibBuilder.loadTexts: cbsModuleSdramMemCfgStatTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSdramMemCfgStatTable.setDescription('This table contains the status entries of the unsupported SDRAM configuration error status')
cbsModuleSdramMemCfgStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 14, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleSdramMemCfgStatEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSdramMemCfgStatEntry.setDescription('An entry in the Module SDRAM configuration table.')
cbsModuleSdramMemCfgStat = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 14, 1, 1), BadSdramMemCfgStat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleSdramMemCfgStat.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSdramMemCfgStat.setDescription('CPM SDRAM error state')
cbsModuleGuestHealthTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 15), )
if mibBuilder.loadTexts: cbsModuleGuestHealthTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleGuestHealthTable.setDescription('List of traps indicating VE VAPs guests health problems.')
cbsModuleGuestHealthTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 15, 1), ).setIndexNames((0, "CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleGuestHealthTableEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleGuestHealthTableEntry.setDescription('A trap entry in VE VAPs guest health problem table.')
cbsApmGuestHealthSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 15, 1, 1), GuestHealthSeverityLvl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsApmGuestHealthSeverity.setStatus('current')
if mibBuilder.loadTexts: cbsApmGuestHealthSeverity.setDescription('The severity level of Guest OS Health problem.')
cbsCpmDiskCfgStat = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 16), BadDiskCfgStat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsCpmDiskCfgStat.setStatus('current')
if mibBuilder.loadTexts: cbsCpmDiskCfgStat.setDescription('CPM DISK error state')
cbsModuleApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 17), )
if mibBuilder.loadTexts: cbsModuleApplicationTable.setStatus('current')
if mibBuilder.loadTexts: cbsModuleApplicationTable.setDescription('This table contains information about the application on each Vap Group.')
cbsModuleApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 17, 1), ).setIndexNames((0, "CBS-VAPGROUP-MIB", "cbsVgVapGroupID"))
if mibBuilder.loadTexts: cbsModuleApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: cbsModuleApplicationEntry.setDescription('An entry in the Application table.')
cbsModuleApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleApplicationName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleApplicationName.setDescription('Application Name')
cbsModuleApplicationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleApplicationVersion.setStatus('current')
if mibBuilder.loadTexts: cbsModuleApplicationVersion.setDescription('Application Version')
cbsModuleApplicationRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleApplicationRelease.setStatus('current')
if mibBuilder.loadTexts: cbsModuleApplicationRelease.setDescription('Application Release')
cbsModuleApplicationMonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 17, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleApplicationMonEnabled.setStatus('current')
if mibBuilder.loadTexts: cbsModuleApplicationMonEnabled.setDescription('Indicates whether Application Monitoring is enabled or disabled.')
cbsModuleApplicationVgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsModuleApplicationVgName.setStatus('current')
if mibBuilder.loadTexts: cbsModuleApplicationVgName.setDescription('Vap Group Name')
cbsFlowTablePartitionThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFlowTablePartitionThreshold.setStatus('current')
if mibBuilder.loadTexts: cbsFlowTablePartitionThreshold.setDescription('Flow Table Partition Threshold.')
cbsFlowTableCriticalAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFlowTableCriticalAlarm.setStatus('current')
if mibBuilder.loadTexts: cbsFlowTableCriticalAlarm.setDescription('NPM Flow Table Critical Alarm.')
cbsFlowTableUtilization = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFlowTableUtilization.setStatus('current')
if mibBuilder.loadTexts: cbsFlowTableUtilization.setDescription('Flow Table Utilization.')
cbsFlowTableUtilTcpFlowEntries = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFlowTableUtilTcpFlowEntries.setStatus('current')
if mibBuilder.loadTexts: cbsFlowTableUtilTcpFlowEntries.setDescription('NPM Flow Table Utilization TCP Flow Entries.')
cbsFlowTableUtilUdpFlowEntries = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFlowTableUtilUdpFlowEntries.setStatus('current')
if mibBuilder.loadTexts: cbsFlowTableUtilUdpFlowEntries.setDescription('NPM Flow Table Utilization UDP Flow Entries.')
cbsFlowTableUtilIcmpFlowEntries = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFlowTableUtilIcmpFlowEntries.setStatus('current')
if mibBuilder.loadTexts: cbsFlowTableUtilIcmpFlowEntries.setDescription('NPM Flow Table Utilization ICMP Flow Entries.')
cbsFlowTableUtilOtherIpFlowEntries = MibScalar((1, 3, 6, 1, 4, 1, 6848, 2, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsFlowTableUtilOtherIpFlowEntries.setStatus('current')
if mibBuilder.loadTexts: cbsFlowTableUtilOtherIpFlowEntries.setDescription('NPM Flow Table Utilization Other IP Flow Entries.')
cbsNpmFlowDistTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25), )
if mibBuilder.loadTexts: cbsNpmFlowDistTable.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFlowDistTable.setDescription('The NPM flow table.')
cbsNpmFlowDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1), ).setIndexNames((0, "CBS-MODULE-RESOURCES-MIB", "cbsNpmSlotId"))
if mibBuilder.loadTexts: cbsNpmFlowDistEntry.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFlowDistEntry.setDescription('An entry in the NPM flow table. The index is the module ID of the reporting NPM.')
cbsNpmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmSlotId.setStatus('current')
if mibBuilder.loadTexts: cbsNpmSlotId.setDescription('The module ID of the NPM.')
cbsNpmTcpCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmTcpCurrentFlows.setStatus('current')
if mibBuilder.loadTexts: cbsNpmTcpCurrentFlows.setDescription('The number of TCP flows in the NPM flow table.')
cbsNpmUdpCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmUdpCurrentFlows.setStatus('current')
if mibBuilder.loadTexts: cbsNpmUdpCurrentFlows.setDescription('The number of UDP flows in the NPM flow table.')
cbsNpmIcmpCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmIcmpCurrentFlows.setStatus('current')
if mibBuilder.loadTexts: cbsNpmIcmpCurrentFlows.setDescription('The number of ICMP flows in the NPM flow table.')
cbsNpmOtherIpCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmOtherIpCurrentFlows.setStatus('current')
if mibBuilder.loadTexts: cbsNpmOtherIpCurrentFlows.setDescription('The number of Other IP protocol flows in the NPM flow table.')
cbsNpmNewFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmNewFlowRate.setStatus('current')
if mibBuilder.loadTexts: cbsNpmNewFlowRate.setDescription('The flow rate in bits per second of new flows in the NPM flow table.')
cbsNpmAgedFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsNpmAgedFlowRate.setStatus('current')
if mibBuilder.loadTexts: cbsNpmAgedFlowRate.setDescription('The flow rate in bits per second of aged flows in the NPM flow table.')
cbsVapFlowDistTable = MibTable((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26), )
if mibBuilder.loadTexts: cbsVapFlowDistTable.setStatus('current')
if mibBuilder.loadTexts: cbsVapFlowDistTable.setDescription("The VAP group's flow statistics.")
cbsVapFlowDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26, 1), ).setIndexNames((0, "CBS-MODULE-RESOURCES-MIB", "cbsVapFlowGroupID"), (0, "CBS-MODULE-RESOURCES-MIB", "cbsVapFlowIndex"))
if mibBuilder.loadTexts: cbsVapFlowDistEntry.setStatus('current')
if mibBuilder.loadTexts: cbsVapFlowDistEntry.setDescription('An entry in a VAP group flow table. The index is a combination of the VAP group ID and the index of a VAP in the VAP group.')
cbsVapFlowGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVapFlowGroupID.setStatus('current')
if mibBuilder.loadTexts: cbsVapFlowGroupID.setDescription('The VAP group ID.')
cbsVapFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVapFlowIndex.setStatus('current')
if mibBuilder.loadTexts: cbsVapFlowIndex.setDescription('The index value of a VAP in the VAP group.')
cbsVapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVapName.setStatus('current')
if mibBuilder.loadTexts: cbsVapName.setDescription('The name of the VAP specified by the VAP group ID and the index of the VAP.')
cbsVapCurrentFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVapCurrentFlows.setStatus('current')
if mibBuilder.loadTexts: cbsVapCurrentFlows.setDescription('Current flows for the specified VAP.')
cbsVapNewFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVapNewFlowRate.setStatus('current')
if mibBuilder.loadTexts: cbsVapNewFlowRate.setDescription('The flow rate in bits per second of new flows for the specified VAP.')
cbsVapAgedFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6848, 2, 3, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbsVapAgedFlowRate.setStatus('current')
if mibBuilder.loadTexts: cbsVapAgedFlowRate.setDescription('The flow rate in bits per second of aged flows for the specified VAP.')
cbsModuleCPULoadExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 1)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleCPULoad1"))
if mibBuilder.loadTexts: cbsModuleCPULoadExceeded.setStatus('obsolete')
if mibBuilder.loadTexts: cbsModuleCPULoadExceeded.setDescription('The CPU load on one of the processor modules is excessive. This sends the current value of the one minute load on the CPU module that is experiencing excessive load.')
cbsModuleCPULoadNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 2)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleCPULoad1"))
if mibBuilder.loadTexts: cbsModuleCPULoadNormal.setStatus('obsolete')
if mibBuilder.loadTexts: cbsModuleCPULoadNormal.setDescription('The CPU load on one of the processor modules has returned to normal. This sends the current value of the one minute load on the CPU module that returned to normal.')
cbsModuleMemoryUsageExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 3)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleMemoryTotal"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleMemoryUsed"))
if mibBuilder.loadTexts: cbsModuleMemoryUsageExceeded.setStatus('obsolete')
if mibBuilder.loadTexts: cbsModuleMemoryUsageExceeded.setDescription('The memory usage on the processor modules is excessive. This sends the current values of total and free memory for the module.')
cbsModuleMemoryUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 4)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleMemoryTotal"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleMemoryUsed"))
if mibBuilder.loadTexts: cbsModuleMemoryUsageNormal.setStatus('obsolete')
if mibBuilder.loadTexts: cbsModuleMemoryUsageNormal.setDescription('The memory usage on the processor modules that was excessive returned to normal. This sends the current values of total and free memory for the module.')
cbsModuleCPUUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 5)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleCPUUtil1"))
if mibBuilder.loadTexts: cbsModuleCPUUtilExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUUtilExceeded.setDescription('The CPU utilization on one of the processor modules is excessive. This sends the current value of the one minute utilization on the CPU module that is experiencing excessive load.')
cbsModuleCPUUtilNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 6)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleCPUUtil1"))
if mibBuilder.loadTexts: cbsModuleCPUUtilNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCPUUtilNormal.setDescription('The CPU utilization on one of the processor modules returned to normal. This sends the current value of the one minute utilization on the CPU module that returned to normal.')
cbsModuleDURootHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 7)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDURoot"))
if mibBuilder.loadTexts: cbsModuleDURootHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDURootHigh.setDescription('The disk usage on the / partition of the processor module is high. This sends the current value of the disk usage on the / partition that is experiencing the high usage.')
cbsModuleDURootNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 8)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDURoot"))
if mibBuilder.loadTexts: cbsModuleDURootNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDURootNormal.setDescription('The disk usage on the / partition of the processor module returned to normal. This sends the current value of the disk usage on the / partition that returned to normal.')
cbsModuleDUBootHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 9)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUBoot"))
if mibBuilder.loadTexts: cbsModuleDUBootHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUBootHigh.setDescription('The disk usage on the /boot partition of the processor module is high. This sends the current value of the disk usage on the /boot partition that is experiencing the high usage.')
cbsModuleDUBootNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 10)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUBoot"))
if mibBuilder.loadTexts: cbsModuleDUBootNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUBootNormal.setDescription('The disk usage on the /boot partition of the processor module returned to normal. This sends the current value of the disk usage on the /boot partition that returned to normal.')
cbsModuleDUCbconfigHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 11)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUCbconfig"))
if mibBuilder.loadTexts: cbsModuleDUCbconfigHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUCbconfigHigh.setDescription('The disk usage on the /cbconfig partition of the processor module is high. This sends the current value of the disk usage on the /cbconfig partition that is experiencing the high usage.')
cbsModuleDUCbconfigNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 12)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUCbconfig"))
if mibBuilder.loadTexts: cbsModuleDUCbconfigNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUCbconfigNormal.setDescription('The disk usage on the /cbconfig partition of the processor module returned to normal. This sends the current value of the disk usage on the /cbconfig partition that returned to normal.')
cbsModuleDUTftpbootHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 13)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUTftpboot"))
if mibBuilder.loadTexts: cbsModuleDUTftpbootHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUTftpbootHigh.setDescription('The disk usage on the /tftpboot partition of the processor module is high. This sends the current value of the disk usage on the /tftpboot partition that is experiencing the high usage.')
cbsModuleDUTftpbootNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 14)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUTftpboot"))
if mibBuilder.loadTexts: cbsModuleDUTftpbootNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUTftpbootNormal.setDescription('The disk usage on the /tftpboot partition of the processor module returned to normal. This sends the current value of the disk usage on the /tftpboot partition that returned to normal.')
cbsModuleFreePageAvailableHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 15)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageAvailable"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageThreshold"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageVapName"))
if mibBuilder.loadTexts: cbsModuleFreePageAvailableHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageAvailableHigh.setDescription('The used free page usage on the module is high. The values passed are the threshold value and the free page count in /proc/cbs_fp_th on the AP and the VAP group name.')
cbsModuleFreePageAvailableNorm = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 16)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageAvailable"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageThreshold"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleFreePageVapName"))
if mibBuilder.loadTexts: cbsModuleFreePageAvailableNorm.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFreePageAvailableNorm.setDescription('The used free page usage on the module is normal. The values passed are the threshold value and the free page count in /proc/cbs_fp_th on the AP and the VAP group name.')
cbsModuleMUHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 17)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleMUHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMUHigh.setDescription('Internal memory tables usage on this NPM is high.')
cbsModuleMUNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 18)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleMUNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleMUNormal.setDescription('Internal memory table usage on this NPM returned to normal.')
cbsModuleFRHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 19)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleFRHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFRHigh.setDescription('Usage of resources dealing with fragmentation is high.')
cbsModuleFRNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 20)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleFRNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleFRNormal.setDescription('Usage of resources dealing with fragmentation returned to normal.')
cbsModuleBUHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 21)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleBUHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleBUHigh.setDescription('High usage of packet buffers.')
cbsModuleBUNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 22)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"))
if mibBuilder.loadTexts: cbsModuleBUNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleBUNormal.setDescription('Usage of packet buffers returned to normal.')
cbsModuleAppStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 23)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppName"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppVersion"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppRelease"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppCPMHostName"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppCPMIPAddress"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppVAPGroupName"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppVAPIndex"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppOldState"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleAppNewState"))
if mibBuilder.loadTexts: cbsModuleAppStateChange.setStatus('current')
if mibBuilder.loadTexts: cbsModuleAppStateChange.setDescription('This describes the full state of the application. It will be sent ever there is a state change .i.e. when ever cbsModuleAppNewState changes.')
cbsModuleNtpdMonStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 24)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleNtpdCPMHostName"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleNtpdCPMIPAddress"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleNtpdState"))
if mibBuilder.loadTexts: cbsModuleNtpdMonStateChange.setStatus('current')
if mibBuilder.loadTexts: cbsModuleNtpdMonStateChange.setDescription('This describes the state of the ntpd. It will be sent when ntpd daemon stop.')
cbsModuleDUMgmtHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 25)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUMgmt"))
if mibBuilder.loadTexts: cbsModuleDUMgmtHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUMgmtHigh.setDescription('The disk usage on the /mgmt partition of the processor module is high. This sends the current value of the disk usage on the /mgmt partition that is experiencing the high usage.')
cbsModuleDUMgmtNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 26)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUMgmt"))
if mibBuilder.loadTexts: cbsModuleDUMgmtNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUMgmtNormal.setDescription('The disk usage on the /mgmt partition of the processor module returned to normal. This sends the current value of the disk usage on the /mgmt partition that returned to normal.')
cbsModuleCpuCoreUtilExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 27)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleCpuCoreHiUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleCpuCoreHiUtilPerc"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleCpuCoreHiUtilDuration"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleCpuCoreHiUtilCores"))
if mibBuilder.loadTexts: cbsModuleCpuCoreUtilExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreUtilExceeded.setDescription('The utilization of one or more CPU cores on one of the process modules is excessive.')
cbsModuleCpuCoreUtilNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 28)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleCpuCoreHiUtilPerc"))
if mibBuilder.loadTexts: cbsModuleCpuCoreUtilNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleCpuCoreUtilNormal.setDescription('The utilization of all CPU cores on one of the process modules has returned to normal.')
cbsNpmFlowTableUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 29)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTTriggerThreshold"))
if mibBuilder.loadTexts: cbsNpmFlowTableUsageHigh.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFlowTableUsageHigh.setDescription('The chassis-wide NPM flow table usage has exceeded the user configured flow-table partition trigger threshold.')
cbsNpmFlowTableUsageNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 30))
if mibBuilder.loadTexts: cbsNpmFlowTableUsageNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFlowTableUsageNormal.setDescription('The chassis-wide NPM flow table usage has returned below the user configured flow-table partition trigger threshold.')
cbsNpmFTUdpLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 31)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUdpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTUdpLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUdpLimitExceeded.setDescription('UDP flow table usage has exceeded the user configured UDP flow-table partition limit.')
cbsNpmFTUdpLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 32))
if mibBuilder.loadTexts: cbsNpmFTUdpLimitNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUdpLimitNormal.setDescription('UDP flow table usage has returned below the user configured UDP flow-table partition limit.')
cbsNpmFTUdpMedianExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 33)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUdpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTUdpMedianExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUdpMedianExceeded.setDescription('UDP flow table usage has exceeded the median of the user configured UDP flow-table partition limit.')
cbsNpmFTUdpMedianNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 34))
if mibBuilder.loadTexts: cbsNpmFTUdpMedianNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTUdpMedianNormal.setDescription('UDP flow table usage has returned below the median of the user configured UDP flow-table partition limit.')
cbsNpmFTTcpLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 35)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTTcpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTTcpLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTcpLimitExceeded.setDescription('TCP flow table usage has exceeded the user configured TCP flow-table partition limit.')
cbsNpmFTTcpLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 36))
if mibBuilder.loadTexts: cbsNpmFTTcpLimitNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTcpLimitNormal.setDescription('TCP flow table usage has returned below the user configured TCP flow-table partition limit.')
cbsNpmFTTcpMedianExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 37)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTTcpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTTcpMedianExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTcpMedianExceeded.setDescription('TCP flow table usage has exceeded the median of the user configured TCP flow-table partition limit.')
cbsNpmFTTcpMedianNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 38))
if mibBuilder.loadTexts: cbsNpmFTTcpMedianNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTTcpMedianNormal.setDescription('TCP flow table usage has returned below the median of the user configured TCP flow-table partition limit.')
cbsNpmFTIcmpLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 39)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTIcmpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTIcmpLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTIcmpLimitExceeded.setDescription('ICMP flow table usage has exceeded the user configured flow-table partition limit.')
cbsNpmFTIcmpLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 40))
if mibBuilder.loadTexts: cbsNpmFTIcmpLimitNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTIcmpLimitNormal.setDescription('ICMP flow table usage has returned below the user configured ICMP flow-table partition limit.')
cbsNpmFTIcmpMedianExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 41)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTIcmpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTIcmpMedianExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTIcmpMedianExceeded.setDescription('ICMP flow table usage has exceeded the median of the user configured ICMP flow-table partition limit.')
cbsNpmFTIcmpMedianNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 42))
if mibBuilder.loadTexts: cbsNpmFTIcmpMedianNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTIcmpMedianNormal.setDescription('ICMP flow table usage has returned below the median of the user configured ICMP flow-table partition limit.')
cbsNpmFTOtherIpLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 43)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTOtherIpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTOtherIpLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTOtherIpLimitExceeded.setDescription('Other-IP flow table usage has exceeded the user configured flow-table partition limit.')
cbsNpmFTOtherIpLimitNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 44))
if mibBuilder.loadTexts: cbsNpmFTOtherIpLimitNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTOtherIpLimitNormal.setDescription('Other-IP flow table usage has returned below the user configured flow-table partition limit.')
cbsNpmFTOtherIpMedianExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 45)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTUtilSeverity"), ("CBS-MODULE-RESOURCES-MIB", "cbsNpmFTOtherIpLimitThreshold"))
if mibBuilder.loadTexts: cbsNpmFTOtherIpMedianExceeded.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTOtherIpMedianExceeded.setDescription('Other-IP flow table usage has exceeded the median of the user configured flow-table partition limit.')
cbsNpmFTOtherIpMedianNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 46))
if mibBuilder.loadTexts: cbsNpmFTOtherIpMedianNormal.setStatus('current')
if mibBuilder.loadTexts: cbsNpmFTOtherIpMedianNormal.setDescription('Other-IP flow table usage has returned below the median of the user configured flow-table partition limit.')
cbsModuleSdramCheck = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 47)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleSdramMemCfgStat"))
if mibBuilder.loadTexts: cbsModuleSdramCheck.setStatus('current')
if mibBuilder.loadTexts: cbsModuleSdramCheck.setDescription('Check of module memory configuration has determined whether or not the current SDRAM memory is supported by the current version of XOS software or not.')
cbsApmGuestHealthCheck = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 48)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsApmGuestHealthSeverity"))
if mibBuilder.loadTexts: cbsApmGuestHealthCheck.setStatus('current')
if mibBuilder.loadTexts: cbsApmGuestHealthCheck.setDescription('Guest OS running on VE VAP reports health problem. Please check syslog for details.')
cbsCpmDiskCheck = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 49)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsCpmDiskCfgStat"))
if mibBuilder.loadTexts: cbsCpmDiskCheck.setStatus('current')
if mibBuilder.loadTexts: cbsCpmDiskCheck.setDescription('Check of CPM disk configuration has determined whether or not the current disk is supported by the current version of XOS software or not.')
cbsModuleDUVarHigh = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 50)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUVar"))
if mibBuilder.loadTexts: cbsModuleDUVarHigh.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUVarHigh.setDescription('The disk usage on the /var partition of the processor module is high. This sends the current value of the disk usage on the /var partition that is experiencing the high usage.')
cbsModuleDUVarNormal = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 51)).setObjects(("CBS-MODULE-RESOURCES-MIB", "cbsModuleDUVar"))
if mibBuilder.loadTexts: cbsModuleDUVarNormal.setStatus('current')
if mibBuilder.loadTexts: cbsModuleDUVarNormal.setDescription('The disk usage on the /var partition of the processor module returned to normal. This sends the current value of the disk usage on the /var partition that returned to normal.')
cbsModuleRSWStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6848, 4, 2, 52)).setObjects(("CBS-HARDWARE-MIB", "cbsHwModuleID"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWName"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWVersion"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWRelease"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWStartOnBoot"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWCPMHostName"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWCPMIPAddress"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWVAPGroupName"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWVAPIndex"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWOldState"), ("CBS-MODULE-RESOURCES-MIB", "cbsModuleRSWNewState"))
if mibBuilder.loadTexts: cbsModuleRSWStateChange.setStatus('current')
if mibBuilder.loadTexts: cbsModuleRSWStateChange.setDescription('This describes the full state of the routing protocol. It will be sent ever there is a state change .i.e. when ever cbsModuleRSWNewState changes.')
mibBuilder.exportSymbols("CBS-MODULE-RESOURCES-MIB", cbsModuleNtpdCPMHostName=cbsModuleNtpdCPMHostName, cbsModuleSDP1OutOctets=cbsModuleSDP1OutOctets, cbsModuleRSWVersion=cbsModuleRSWVersion, cbsFlowTableUtilOtherIpFlowEntries=cbsFlowTableUtilOtherIpFlowEntries, cbsModuleFRHigh=cbsModuleFRHigh, cbsModuleAppMonTable=cbsModuleAppMonTable, cbsModuleNPMFlowCountEntry=cbsModuleNPMFlowCountEntry, cbsModuleMUHigh=cbsModuleMUHigh, cbsModuleDUVarNormal=cbsModuleDUVarNormal, cbsModuleFreePageEntry=cbsModuleFreePageEntry, cbsModuleSDP7InOctets=cbsModuleSDP7InOctets, cbsVapName=cbsVapName, cbsModuleCPUAvgUtilCore3IRQ=cbsModuleCPUAvgUtilCore3IRQ, cbsModuleCPUAvgUtilCore3Syst=cbsModuleCPUAvgUtilCore3Syst, cbsNpmFTTcpLimitThreshold=cbsNpmFTTcpLimitThreshold, cbsModuleApplicationVgName=cbsModuleApplicationVgName, cbsModuleRSWName=cbsModuleRSWName, cbsModuleCPUUtil5=cbsModuleCPUUtil5, cbsModuleAppVersion=cbsModuleAppVersion, cbsNpmFTTriggerThreshold=cbsNpmFTTriggerThreshold, cbsModuleSDP2OutPkts=cbsModuleSDP2OutPkts, cbsFlowTableUtilTcpFlowEntries=cbsFlowTableUtilTcpFlowEntries, cbsNpmFlowDistTable=cbsNpmFlowDistTable, UtilSeverityLvl=UtilSeverityLvl, cbsModuleCPULoadNormal=cbsModuleCPULoadNormal, cbsModuleSDP4InPkts=cbsModuleSDP4InPkts, cbsNpmFlowTableUsageHigh=cbsNpmFlowTableUsageHigh, cbsNpmFTTcpQuotaUsage=cbsNpmFTTcpQuotaUsage, cbsModuleApplicationRelease=cbsModuleApplicationRelease, cbsModuleMemoryFree=cbsModuleMemoryFree, cbsModuleCPUAvgUtilCore2Idle=cbsModuleCPUAvgUtilCore2Idle, cbsModuleDUBoot=cbsModuleDUBoot, cbsModuleMemoryUsed=cbsModuleMemoryUsed, cbsModuleCPUAvgUtilCore3User=cbsModuleCPUAvgUtilCore3User, cbsModuleCPUAvgUtilCore3Nice=cbsModuleCPUAvgUtilCore3Nice, cbsModuleCPUAvgUtilCore4Syst=cbsModuleCPUAvgUtilCore4Syst, cbsModuleRSWNewState=cbsModuleRSWNewState, cbsModuleCPULoadTable=cbsModuleCPULoadTable, cbsModuleSDPTable=cbsModuleSDPTable, cbsNpmFlowTableUtilTable=cbsNpmFlowTableUtilTable, cbsModuleMemoryUsageExceeded=cbsModuleMemoryUsageExceeded, cbsNpmNewFlowRate=cbsNpmNewFlowRate, cbsModuleBUNormal=cbsModuleBUNormal, cbsModuleSDP4OutOctets=cbsModuleSDP4OutOctets, cbsNpmFTIcmpMedianNormal=cbsNpmFTIcmpMedianNormal, cbsModuleCPUAvgUtilTable=cbsModuleCPUAvgUtilTable, cbsModuleAppMonEntry=cbsModuleAppMonEntry, cbsModuleCpuCoreHiUtilDuration=cbsModuleCpuCoreHiUtilDuration, cbsNpmFTOtherIpMedianThreshold=cbsNpmFTOtherIpMedianThreshold, cbsModuleDUVar=cbsModuleDUVar, cbsNpmFTTcpMedianThreshold=cbsNpmFTTcpMedianThreshold, cbsModuleCPUAvgUtilCore2User=cbsModuleCPUAvgUtilCore2User, cbsApmGuestHealthSeverity=cbsApmGuestHealthSeverity, cbsNpmTcpCurrentFlows=cbsNpmTcpCurrentFlows, cbsModuleSdramMemCfgStat=cbsModuleSdramMemCfgStat, cbsModuleCPULoadEntry=cbsModuleCPULoadEntry, cbsModuleCPUAvgUtilCore1Idle=cbsModuleCPUAvgUtilCore1Idle, cbsModuleMemoryTotal=cbsModuleMemoryTotal, cbsModuleMemoryTable=cbsModuleMemoryTable, cbsModuleRSWVAPGroupName=cbsModuleRSWVAPGroupName, cbsNpmFTUtilSeverity=cbsNpmFTUtilSeverity, cbsNpmFTIcmpLimitThreshold=cbsNpmFTIcmpLimitThreshold, cbsNpmFTOtherIpLimitNormal=cbsNpmFTOtherIpLimitNormal, cbsModuleCPUAvgUtilCore6IRQ=cbsModuleCPUAvgUtilCore6IRQ, cbsModuleMemoryTotalFree=cbsModuleMemoryTotalFree, cbsModuleSdramMemCfgStatTable=cbsModuleSdramMemCfgStatTable, cbsModuleResourceTraps=cbsModuleResourceTraps, cbsModuleSwapUsed=cbsModuleSwapUsed, cbsNpmFTTcpLimitExceeded=cbsNpmFTTcpLimitExceeded, cbsModuleAppStateChange=cbsModuleAppStateChange, cbsModuleRSWCPMHostName=cbsModuleRSWCPMHostName, cbsModuleFreePageAvailableNorm=cbsModuleFreePageAvailableNorm, cbsModuleCPUAvgUtilCore1Syst=cbsModuleCPUAvgUtilCore1Syst, cbsNpmOtherIpCurrentFlows=cbsNpmOtherIpCurrentFlows, cbsModuleCPUAvgUtilCore8Idle=cbsModuleCPUAvgUtilCore8Idle, cbsModuleCPUAvgUtilCore6Nice=cbsModuleCPUAvgUtilCore6Nice, cbsModuleNtpdState=cbsModuleNtpdState, cbsModuleCpuCoreHiUtilEntry=cbsModuleCpuCoreHiUtilEntry, cbsModuleMemoryBuffer=cbsModuleMemoryBuffer, cbsModuleCPUAvgUtilCore2IOWait=cbsModuleCPUAvgUtilCore2IOWait, cbsModuleCPUAvgUtilCore8SoftIRQ=cbsModuleCPUAvgUtilCore8SoftIRQ, cbsCpmDiskCheck=cbsCpmDiskCheck, cbsModuleCPUAvgUtilCore7Syst=cbsModuleCPUAvgUtilCore7Syst, cbsModuleDUTftpbootHigh=cbsModuleDUTftpbootHigh, cbsModuleCPUAvgUtilCore5Idle=cbsModuleCPUAvgUtilCore5Idle, cbsVapCurrentFlows=cbsVapCurrentFlows, cbsModuleCPUAvgUtilCore4User=cbsModuleCPUAvgUtilCore4User, cbsModuleNtpdMonStateChange=cbsModuleNtpdMonStateChange, cbsModuleCpuCoreHiUtilTable=cbsModuleCpuCoreHiUtilTable, cbsModuleSDP6InOctets=cbsModuleSDP6InOctets, cbsModuleCPUAvgUtilCore8Syst=cbsModuleCPUAvgUtilCore8Syst, cbsModuleSdramMemCfgStatEntry=cbsModuleSdramMemCfgStatEntry, cbsNpmFlowTableUsageNormal=cbsNpmFlowTableUsageNormal, cbsModuleSDP6InPkts=cbsModuleSDP6InPkts, cbsNpmFTIcmpQuotaUsage=cbsNpmFTIcmpQuotaUsage, cbsModuleResources=cbsModuleResources, cbsModuleApplicationTable=cbsModuleApplicationTable, cbsNpmFTUdpLimitNormal=cbsNpmFTUdpLimitNormal, cbsModuleCPUAvgUtilCore2Syst=cbsModuleCPUAvgUtilCore2Syst, cbsModuleCPUAvgUtilCore2Nice=cbsModuleCPUAvgUtilCore2Nice, cbsNpmIcmpCurrentFlows=cbsNpmIcmpCurrentFlows, cbsModuleCpuCoreHiUtilCores=cbsModuleCpuCoreHiUtilCores, cbsFlowTableUtilIcmpFlowEntries=cbsFlowTableUtilIcmpFlowEntries, cbsModuleNtpdCPMIPAddress=cbsModuleNtpdCPMIPAddress, cbsFlowTableUtilization=cbsFlowTableUtilization, cbsModuleDUTable=cbsModuleDUTable, cbsModuleRSWVAPIndex=cbsModuleRSWVAPIndex, cbsModuleCPUAvgUtilCore8IRQ=cbsModuleCPUAvgUtilCore8IRQ, cbsVapFlowDistTable=cbsVapFlowDistTable, cbsModuleCPUAvgUtilCore7User=cbsModuleCPUAvgUtilCore7User, cbsModuleCPUUtilNormal=cbsModuleCPUUtilNormal, cbsModuleCPUAvgUtilCore5IOWait=cbsModuleCPUAvgUtilCore5IOWait, cbsNpmFTUsage=cbsNpmFTUsage, cbsModuleSDP6OutPkts=cbsModuleSDP6OutPkts, cbsVapFlowGroupID=cbsVapFlowGroupID, cbsModuleSDP7InPkts=cbsModuleSDP7InPkts, cbsModuleSDP2InPkts=cbsModuleSDP2InPkts, cbsModuleRSWStateChange=cbsModuleRSWStateChange, cbsNpmFTOtherIpLimitThreshold=cbsNpmFTOtherIpLimitThreshold, cbsModuleAppCPMIPAddress=cbsModuleAppCPMIPAddress, cbsModuleSDP5OutPkts=cbsModuleSDP5OutPkts, cbsModuleCPUAvgUtilCore3Idle=cbsModuleCPUAvgUtilCore3Idle, cbsModuleAppCPMHostName=cbsModuleAppCPMHostName, cbsNpmFTTcpMedianExceeded=cbsNpmFTTcpMedianExceeded, cbsVapNewFlowRate=cbsVapNewFlowRate, cbsModuleSDP0OutPkts=cbsModuleSDP0OutPkts, cbsModuleSDP3OutOctets=cbsModuleSDP3OutOctets, cbsNpmFTOtherIpMedianNormal=cbsNpmFTOtherIpMedianNormal, cbsModuleDUMgmtHigh=cbsModuleDUMgmtHigh, cbsModuleCPUAvgUtilCore4IOWait=cbsModuleCPUAvgUtilCore4IOWait, cbsModuleCPUAvgUtilCore1SoftIRQ=cbsModuleCPUAvgUtilCore1SoftIRQ, cbsModuleFreePageSeverity=cbsModuleFreePageSeverity, cbsModuleSDP3InPkts=cbsModuleSDP3InPkts, cbsModuleGuestHealthTableEntry=cbsModuleGuestHealthTableEntry, cbsModuleCPUAvgUtilCore5Nice=cbsModuleCPUAvgUtilCore5Nice, cbsNpmSlotId=cbsNpmSlotId, cbsModuleMemoryTotalReal=cbsModuleMemoryTotalReal, cbsModuleSDP5InOctets=cbsModuleSDP5InOctets, cbsModuleDUMgmtNormal=cbsModuleDUMgmtNormal, cbsNpmFTUdpMedianExceeded=cbsNpmFTUdpMedianExceeded, cbsModuleCpuCoreHiUtilPerc=cbsModuleCpuCoreHiUtilPerc, cbsModuleCPUUtilExceeded=cbsModuleCPUUtilExceeded, cbsModuleApplicationName=cbsModuleApplicationName, cbsNpmFlowDistEntry=cbsNpmFlowDistEntry, cbsModuleMemoryHiTotal=cbsModuleMemoryHiTotal, cbsModuleCpuCoreUtilExceeded=cbsModuleCpuCoreUtilExceeded, cbsModuleSDP0InPkts=cbsModuleSDP0InPkts, cbsModuleCPULoad1=cbsModuleCPULoad1, BadDiskCfgStat=BadDiskCfgStat, cbsModuleFreePageAvailableHigh=cbsModuleFreePageAvailableHigh, cbsModuleCPUAvgUtilCore8User=cbsModuleCPUAvgUtilCore8User, cbsModuleCPUAvgUtilCore3IOWait=cbsModuleCPUAvgUtilCore3IOWait, cbsModuleAppRelease=cbsModuleAppRelease, cbsModuleNPMFlowCountTable=cbsModuleNPMFlowCountTable, cbsModuleSDP2OutOctets=cbsModuleSDP2OutOctets, cbsModuleRSWStartOnBoot=cbsModuleRSWStartOnBoot, cbsModuleCPUAvgUtilCore1User=cbsModuleCPUAvgUtilCore1User, cbsModuleSDP1OutPkts=cbsModuleSDP1OutPkts, cbsModuleAppNewState=cbsModuleAppNewState, cbsModuleSDPEntry=cbsModuleSDPEntry, cbsModuleFRNormal=cbsModuleFRNormal, cbsVapFlowDistEntry=cbsVapFlowDistEntry, cbsModuleCPUAvgUtilCore5User=cbsModuleCPUAvgUtilCore5User, cbsVapAgedFlowRate=cbsVapAgedFlowRate, cbsModuleDUTftpbootNormal=cbsModuleDUTftpbootNormal, cbsModuleSDP3InOctets=cbsModuleSDP3InOctets, cbsNpmUdpCurrentFlows=cbsNpmUdpCurrentFlows, cbsNpmFTIcmpLimitExceeded=cbsNpmFTIcmpLimitExceeded, cbsModuleSwapEntry=cbsModuleSwapEntry, cbsModuleUptimeEntry=cbsModuleUptimeEntry, cbsModuleMemoryUsageNormal=cbsModuleMemoryUsageNormal, cbsModuleMemoryCached=cbsModuleMemoryCached, cbsModuleDURoot=cbsModuleDURoot, cbsModuleSDP2InOctets=cbsModuleSDP2InOctets, cbsModuleSwapFree=cbsModuleSwapFree, cbsModuleCPUAvgUtilCore5SoftIRQ=cbsModuleCPUAvgUtilCore5SoftIRQ, cbsModuleSDP1InOctets=cbsModuleSDP1InOctets, cbsModuleCPUAvgUtilCore7IOWait=cbsModuleCPUAvgUtilCore7IOWait, cbsModuleAppVAPIndex=cbsModuleAppVAPIndex, cbsModuleSdramCheck=cbsModuleSdramCheck, GuestHealthSeverityLvl=GuestHealthSeverityLvl, cbsModuleSDP1InPkts=cbsModuleSDP1InPkts, cbsModuleMemoryShared=cbsModuleMemoryShared, cbsModuleMemoryEntry=cbsModuleMemoryEntry, cbsModuleDUBootHigh=cbsModuleDUBootHigh, cbsModuleApplicationMonEnabled=cbsModuleApplicationMonEnabled, cbsModuleCPUAvgUtilCore6Idle=cbsModuleCPUAvgUtilCore6Idle, cbsModuleBUHigh=cbsModuleBUHigh, cbsModuleCPUAvgUtilCore4IRQ=cbsModuleCPUAvgUtilCore4IRQ, cbsNpmFTIcmpLimitNormal=cbsNpmFTIcmpLimitNormal, cbsModuleMemoryTotalSwap=cbsModuleMemoryTotalSwap, cbsModuleUptimeTable=cbsModuleUptimeTable, cbsModuleMemoryHiFree=cbsModuleMemoryHiFree, cbsModuleDUCbconfig=cbsModuleDUCbconfig, cbsModuleCPUAvgUtilCore7SoftIRQ=cbsModuleCPUAvgUtilCore7SoftIRQ, cbsNpmFTUdpMedianThreshold=cbsNpmFTUdpMedianThreshold, cbsFlowTableUtilUdpFlowEntries=cbsFlowTableUtilUdpFlowEntries, cbsModuleDUCbconfigNormal=cbsModuleDUCbconfigNormal, cbsNpmFTUdpMedianNormal=cbsNpmFTUdpMedianNormal, cbsModuleCPUAvgUtilCore4SoftIRQ=cbsModuleCPUAvgUtilCore4SoftIRQ, cbsModuleMemoryAvailReal=cbsModuleMemoryAvailReal, cbsNpmFTIcmpMedianExceeded=cbsNpmFTIcmpMedianExceeded, cbsModuleAppOldState=cbsModuleAppOldState, PYSNMP_MODULE_ID=cbsModuleResourcesMIB, cbsModuleFreePageThreshold=cbsModuleFreePageThreshold, cbsModuleCPUAvgUtilCore5Syst=cbsModuleCPUAvgUtilCore5Syst, cbsModuleCPUUtil15=cbsModuleCPUUtil15, cbsModuleMemoryAvailSwap=cbsModuleMemoryAvailSwap, cbsModuleSwapTotal=cbsModuleSwapTotal, cbsModuleCPUAvgUtilCore2IRQ=cbsModuleCPUAvgUtilCore2IRQ, cbsModuleCPUAvgUtilCore4Idle=cbsModuleCPUAvgUtilCore4Idle, cbsModuleRSWCPMIPAddress=cbsModuleRSWCPMIPAddress, cbsModuleNtpdMonTable=cbsModuleNtpdMonTable, cbsModuleCpuCoreHiUtilSeverity=cbsModuleCpuCoreHiUtilSeverity, cbsModuleApplicationVersion=cbsModuleApplicationVersion, cbsNpmFTUdpLimitThreshold=cbsNpmFTUdpLimitThreshold, cbsModuleCPUAvgUtilEntry=cbsModuleCPUAvgUtilEntry, cbsModuleSDP0InOctets=cbsModuleSDP0InOctets, cbsModuleDURootNormal=cbsModuleDURootNormal, cbsModuleRSWOldState=cbsModuleRSWOldState, cbsModuleCPUAvgUtilCore5IRQ=cbsModuleCPUAvgUtilCore5IRQ, cbsModuleSDP6OutOctets=cbsModuleSDP6OutOctets, cbsModuleResourcesMIB=cbsModuleResourcesMIB, cbsModuleDUTftpboot=cbsModuleDUTftpboot, cbsModuleGuestHealthTable=cbsModuleGuestHealthTable, cbsModuleDURootHigh=cbsModuleDURootHigh, cbsModuleCpuCoreUtilNormal=cbsModuleCpuCoreUtilNormal, cbsModuleSDP5InPkts=cbsModuleSDP5InPkts, cbsModuleDUVarHigh=cbsModuleDUVarHigh, cbsApmGuestHealthCheck=cbsApmGuestHealthCheck, cbsModuleUptime=cbsModuleUptime, cbsModuleCPUAvgUtilCore7IRQ=cbsModuleCPUAvgUtilCore7IRQ, cbsNpmFTOtherIpLimitExceeded=cbsNpmFTOtherIpLimitExceeded, cbsModuleCPULoad15=cbsModuleCPULoad15, cbsNpmFTOtherIpQuotaUsage=cbsNpmFTOtherIpQuotaUsage, cbsModuleApplicationEntry=cbsModuleApplicationEntry, cbsModuleDUEntry=cbsModuleDUEntry, cbsModuleSDP7OutPkts=cbsModuleSDP7OutPkts, cbsModuleCPUAvgUtilCore3SoftIRQ=cbsModuleCPUAvgUtilCore3SoftIRQ, cbsModuleCPUAvgUtilCore8IOWait=cbsModuleCPUAvgUtilCore8IOWait, cbsFlowTablePartitionThreshold=cbsFlowTablePartitionThreshold, cbsModuleDUBootNormal=cbsModuleDUBootNormal, BadSdramMemCfgStat=BadSdramMemCfgStat, cbsModuleAppName=cbsModuleAppName, cbsModuleCPUAvgUtilCore6SoftIRQ=cbsModuleCPUAvgUtilCore6SoftIRQ, cbsModuleSDP0OutOctets=cbsModuleSDP0OutOctets, cbsModuleCPUAvgUtilCore1IRQ=cbsModuleCPUAvgUtilCore1IRQ, cbsNpmFTIcmpMedianThreshold=cbsNpmFTIcmpMedianThreshold, cbsNpmAgedFlowRate=cbsNpmAgedFlowRate, cbsModuleFreePageVapName=cbsModuleFreePageVapName, cbsModuleCPUAvgUtilCore6Syst=cbsModuleCPUAvgUtilCore6Syst, cbsNpmFTOtherIpMedianExceeded=cbsNpmFTOtherIpMedianExceeded, cbsModuleCPUAvgUtilCore4Nice=cbsModuleCPUAvgUtilCore4Nice, cbsModuleMemoryLoTotal=cbsModuleMemoryLoTotal)
mibBuilder.exportSymbols("CBS-MODULE-RESOURCES-MIB", cbsModuleCPULoad5=cbsModuleCPULoad5, cbsVapFlowIndex=cbsVapFlowIndex, cbsNpmFTTcpMedianNormal=cbsNpmFTTcpMedianNormal, cbsModuleMUNormal=cbsModuleMUNormal, cbsModuleCPUUtil1=cbsModuleCPUUtil1, cbsModuleSDP4OutPkts=cbsModuleSDP4OutPkts, cbsCpmDiskCfgStat=cbsCpmDiskCfgStat, cbsModuleRSWRelease=cbsModuleRSWRelease, cbsModuleCPUSpeed=cbsModuleCPUSpeed, cbsNpmFTUdpLimitExceeded=cbsNpmFTUdpLimitExceeded, cbsModuleNPMFlowCount=cbsModuleNPMFlowCount, cbsModuleCPUCount=cbsModuleCPUCount, cbsModuleFreePageAvailable=cbsModuleFreePageAvailable, cbsModuleSDP4InOctets=cbsModuleSDP4InOctets, cbsModuleCPUAvgUtilCore1IOWait=cbsModuleCPUAvgUtilCore1IOWait, cbsModuleSDP3OutPkts=cbsModuleSDP3OutPkts, cbsFlowTableCriticalAlarm=cbsFlowTableCriticalAlarm, cbsModuleAppVAPGroupName=cbsModuleAppVAPGroupName, cbsNpmFTTcpLimitNormal=cbsNpmFTTcpLimitNormal, cbsNpmFlowTableUtilEntry=cbsNpmFlowTableUtilEntry, cbsModuleDUCbconfigHigh=cbsModuleDUCbconfigHigh, cbsModuleSDP5OutOctets=cbsModuleSDP5OutOctets, cbsModuleFreePageTable=cbsModuleFreePageTable, cbsModuleCPUAvgUtilCore6IOWait=cbsModuleCPUAvgUtilCore6IOWait, cbsModuleCPUAvgUtilCore8Nice=cbsModuleCPUAvgUtilCore8Nice, cbsModuleNtpdMonEntry=cbsModuleNtpdMonEntry, cbsModuleCPUAvgUtilCore6User=cbsModuleCPUAvgUtilCore6User, cbsModuleCPUAvgUtilCore7Idle=cbsModuleCPUAvgUtilCore7Idle, cbsModuleCPUAvgUtilCore1Nice=cbsModuleCPUAvgUtilCore1Nice, cbsModuleCPUAvgUtilCore7Nice=cbsModuleCPUAvgUtilCore7Nice, cbsModuleMemoryLoFree=cbsModuleMemoryLoFree, cbsModuleDUMgmt=cbsModuleDUMgmt, cbsModuleCPUAvgUtilCore2SoftIRQ=cbsModuleCPUAvgUtilCore2SoftIRQ, cbsModuleSDP7OutOctets=cbsModuleSDP7OutOctets, cbsNpmFTUdpQuotaUsage=cbsNpmFTUdpQuotaUsage, cbsModuleCPULoadExceeded=cbsModuleCPULoadExceeded, cbsModuleSwapTable=cbsModuleSwapTable)
