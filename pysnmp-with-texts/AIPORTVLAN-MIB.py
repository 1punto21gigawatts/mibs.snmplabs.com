#
# PySNMP MIB module AIPORTVLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIPORTVLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
PositiveInteger, = mibBuilder.importSymbols("AISYSTEM-MIB", "PositiveInteger")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Integer32, TimeTicks, Gauge32, IpAddress, enterprises, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, ModuleIdentity, NotificationType, Counter32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "TimeTicks", "Gauge32", "IpAddress", "enterprises", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "ModuleIdentity", "NotificationType", "Counter32", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiPortVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 29))
if mibBuilder.loadTexts: aiPortVlan.setLastUpdated('980803164411Z')
if mibBuilder.loadTexts: aiPortVlan.setOrganization('Applied Innovation Incorporated')
if mibBuilder.loadTexts: aiPortVlan.setContactInfo(' Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, OH 43016-3271 Tel: 614/798-2000 Fax: 614/798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiPortVlan.setDescription(' The MIB Module for port based VLAN.')
aiPortVlanCnf = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 29, 1))
portVlanCnfTable = MibTable((1, 3, 6, 1, 4, 1, 539, 29, 1, 1), )
if mibBuilder.loadTexts: portVlanCnfTable.setStatus('current')
if mibBuilder.loadTexts: portVlanCnfTable.setDescription('Table of configuration information about port based VLANs.')
portVlanCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 29, 1, 1, 1), ).setIndexNames((0, "AIPORTVLAN-MIB", "portVlanIndex"))
if mibBuilder.loadTexts: portVlanCnfEntry.setStatus('current')
if mibBuilder.loadTexts: portVlanCnfEntry.setDescription('Entries of aiPortVlanTable.')
portVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 29, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanIndex.setStatus('current')
if mibBuilder.loadTexts: portVlanIndex.setDescription('This object identifies the VLAN within the group for which this entry contains information.')
portVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 29, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanName.setStatus('current')
if mibBuilder.loadTexts: portVlanName.setDescription('This is the name given to this VLAN.')
portVlanOverlap = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 29, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanOverlap.setStatus('current')
if mibBuilder.loadTexts: portVlanOverlap.setDescription('This allows VLANs to overlap. WARNING: Enabling this feature will turn STP off on the overlapped switch ports. Therefore, it is possible to generate undetected loops.')
portVlanMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 539, 29, 1, 2), )
if mibBuilder.loadTexts: portVlanMembershipTable.setStatus('current')
if mibBuilder.loadTexts: portVlanMembershipTable.setDescription('A two dimensional table listing the vlan and port membership of each vlan.')
portVlanMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 29, 1, 2, 1), ).setIndexNames((0, "AIPORTVLAN-MIB", "portVlanMembershipVlanIndex"), (0, "AIPORTVLAN-MIB", "portVlanMembershipPortIndex"))
if mibBuilder.loadTexts: portVlanMembershipEntry.setStatus('current')
if mibBuilder.loadTexts: portVlanMembershipEntry.setDescription('Table of VLAN membership per port.')
portVlanMembershipVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 29, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanMembershipVlanIndex.setStatus('current')
if mibBuilder.loadTexts: portVlanMembershipVlanIndex.setDescription('This object identifies the VLAN within the group for which this entry contains information.')
portVlanMembershipPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 29, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVlanMembershipPortIndex.setStatus('current')
if mibBuilder.loadTexts: portVlanMembershipPortIndex.setDescription('This object identifies the port within the group for which this entry contains information.')
portVlanMembershipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 29, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("member", 1), ("nonmember", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVlanMembershipStatus.setStatus('current')
if mibBuilder.loadTexts: portVlanMembershipStatus.setDescription('The status of the vlan membership of the specified port.')
mibBuilder.exportSymbols("AIPORTVLAN-MIB", PYSNMP_MODULE_ID=aiPortVlan, aii=aii, portVlanCnfTable=portVlanCnfTable, portVlanOverlap=portVlanOverlap, aiPortVlanCnf=aiPortVlanCnf, aiSystemOID=aiSystemOID, portVlanMembershipEntry=portVlanMembershipEntry, portVlanMembershipTable=portVlanMembershipTable, portVlanName=portVlanName, aiPortVlan=aiPortVlan, portVlanIndex=portVlanIndex, portVlanCnfEntry=portVlanCnfEntry, portVlanMembershipStatus=portVlanMembershipStatus, portVlanMembershipPortIndex=portVlanMembershipPortIndex, portVlanMembershipVlanIndex=portVlanMembershipVlanIndex)
