#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
StorageType, DisplayString, RowStatus, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "DisplayString", "RowStatus", "Unsigned32")
NonReplicated, Link = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "Link")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
mscSigChanIndex, mscSigChan = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex", "mscSigChan")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, Counter64, IpAddress, TimeTicks, NotificationType, ModuleIdentity, Unsigned32, Bits, Counter32, Gauge32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Counter64", "IpAddress", "TimeTicks", "NotificationType", "ModuleIdentity", "Unsigned32", "Bits", "Counter32", "Gauge32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vnetEtsiQsigMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110))
mscSigChanEQsig = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2))
mscSigChanEQsigRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 1), )
if mibBuilder.loadTexts: mscSigChanEQsigRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigRowStatusTable.setDescription('This entry controls the addition and deletion of mscSigChanEQsig components.')
mscSigChanEQsigRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigRowStatusEntry.setDescription('A single entry in the table represents a single mscSigChanEQsig component.')
mscSigChanEQsigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSigChanEQsig components. These components can be added and deleted.')
mscSigChanEQsigComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSigChanEQsigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigStorageType.setDescription('This variable represents the storage type value for the mscSigChanEQsig tables.')
mscSigChanEQsigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscSigChanEQsigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigIndex.setDescription('This variable represents the index for the mscSigChanEQsig tables.')
mscSigChanEQsigL2Table = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 11), )
if mibBuilder.loadTexts: mscSigChanEQsigL2Table.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigL2Table.setDescription('This group specifies the provisionable layer 2 attributes of the Q.931 ITU-T protocol.')
mscSigChanEQsigL2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigL2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigL2Entry.setDescription('An entry in the mscSigChanEQsigL2Table.')
mscSigChanEQsigT23 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigT23.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigT23.setDescription('This attribute specifies the layer 2 enable request timer.')
mscSigChanEQsigT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigT200.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigT200.setDescription('This attribute specifies the maximum time between a layer 2 frame and its acknowledgment.')
mscSigChanEQsigN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigN200.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigN200.setDescription('This attribute specifies the maximum number of re-transmissions of a layer 2 frame.')
mscSigChanEQsigT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 40)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigT203.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigT203.setDescription('This attribute specifies the maximum time for which layer 2 frames may be absent. Expiry triggers a check on whether the far end is alive.')
mscSigChanEQsigCircuitSwitchedK = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigCircuitSwitchedK.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigCircuitSwitchedK.setDescription('This attribute specifies the maximum number of sequentially numbered I frames (that is, window size (k)) that may be unacknowledged at any given time for a SAP supporting primary rate (64kbit/sec) signalling.')
mscSigChanEQsigL3Table = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 12), )
if mibBuilder.loadTexts: mscSigChanEQsigL3Table.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigL3Table.setDescription('This group represents the provisionable Layer 3 timer attributes of the ETSI Qsig protocol.')
mscSigChanEQsigL3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigL3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigL3Entry.setDescription('An entry in the mscSigChanEQsigL3Table.')
mscSigChanEQsigT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 120)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigT309.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigT309.setDescription('This attribute specifies the data link failure timer; used to ride out temporary failures.')
mscSigChanEQsigT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigT310.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigT310.setDescription('This attribute specifies the call proceeding state timer.')
mscSigChanEQsigProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 13), )
if mibBuilder.loadTexts: mscSigChanEQsigProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigProvTable.setDescription('This group defines the general options of the D-channel signalling link.')
mscSigChanEQsigProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigProvEntry.setDescription('An entry in the mscSigChanEQsigProvTable.')
mscSigChanEQsigSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigSide.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigSide.setDescription('This attribute specifies whether the interface is the network or user side of the connection. The parameter applies to both the layer 2 and layer 3 of the interface. If this attribute is set to network, then the interface is master during channel negotiation. If this attribute is set to user, then the interface is slave during channel negotiation.')
mscSigChanEQsigMaxNonCallConcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigMaxNonCallConcurrent.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigMaxNonCallConcurrent.setDescription('This attribute specifies the maximum number of simultaneous active non-call messages that are allowed.')
mscSigChanEQsigOverlapSendingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigOverlapSendingEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigOverlapSendingEnabled.setDescription('This attribute specifies whether overlap sending to the PBX is enabled.')
mscSigChanEQsigOverlapReceivingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigOverlapReceivingEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigOverlapReceivingEnabled.setDescription('This attribute specifies whether overlap receiving from the PBX is enabled.')
mscSigChanEQsigStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 14), )
if mibBuilder.loadTexts: mscSigChanEQsigStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscSigChanEQsigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigStateEntry.setDescription('An entry in the mscSigChanEQsigStateTable.')
mscSigChanEQsigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscSigChanEQsigOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscSigChanEQsigUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscSigChanEQsigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 15), )
if mibBuilder.loadTexts: mscSigChanEQsigStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigStatsTable.setDescription('This group provides the operational components for the EtsiQsig component.')
mscSigChanEQsigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigStatsEntry.setDescription('An entry in the mscSigChanEQsigStatsTable.')
mscSigChanEQsigTotalCallsToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigTotalCallsToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigTotalCallsToIf.setDescription('This attribute counts the total number of calls that have been made to the interface. The value wraps when it reaches its maximum.')
mscSigChanEQsigTotalCallsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 15, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigTotalCallsFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigTotalCallsFromIf.setDescription('This attribute counts the total number of calls from the interface. The value wraps when it reaches its maximum.')
mscSigChanEQsigNonCallAssocSessionsToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 15, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigNonCallAssocSessionsToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigNonCallAssocSessionsToIf.setDescription('This attribute counts the total number of non-call associated sessions to the interface. The value wraps when it reaches its maximum.')
mscSigChanEQsigNonCallAssocSessionsFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 15, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigNonCallAssocSessionsFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigNonCallAssocSessionsFromIf.setDescription('This attribute counts the total number of non-call associated sessions from the interface. The value wraps when it reaches its maximum.')
mscSigChanEQsigOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16), )
if mibBuilder.loadTexts: mscSigChanEQsigOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigOperTable.setDescription('This group provides the operational attributes for the EtsiQsig protocol.')
mscSigChanEQsigOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigOperEntry.setDescription('An entry in the mscSigChanEQsigOperTable.')
mscSigChanEQsigActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigActiveChannels.setDescription('This attribute indicates the number of currently active channels. This includes data and voice channels.')
mscSigChanEQsigActiveVoiceChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigActiveVoiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigActiveVoiceChannels.setDescription('This attribute indicates the number of channels that are currently carrying voice.')
mscSigChanEQsigActiveDataChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigActiveDataChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigActiveDataChannels.setDescription('This attribute indicates the number of channels that are currently carrying data. This does not include modem data.')
mscSigChanEQsigPeakActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigPeakActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigPeakActiveChannels.setDescription('This attribute indicates the maximum number of channels that have been active on this signalling channel during the last polling period.')
mscSigChanEQsigPeakActiveVoiceChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigPeakActiveVoiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigPeakActiveVoiceChannels.setDescription('This attribute indicates the maximum number of voice channels that have been active on this signalling channel during the last polling period.')
mscSigChanEQsigPeakActiveDataChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigPeakActiveDataChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigPeakActiveDataChannels.setDescription('This attribute indicates the maximum number of data channels that have been active on this signalling channel during the last polling period.')
mscSigChanEQsigDChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outOfService", 0), ("establishing", 1), ("established", 2), ("enabling", 3), ("inService", 4), ("restarting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigDChanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigDChanStatus.setDescription('This attribute indicates the state of the D-channel. outOfService means that there is no layer 2 or layer 3 connectivity to the PBX. establishing means that the signalling channel is attempting to stage the layer 2. established means that the layer 2 is enabled. If the signalling channel stays in the established state, then it is waiting for a restart from the PBX. enabling means that the resources for processing calls are being initialized. If the signalling channel stays in the enabling state then it is waiting for a restart acknowledgement from the PBX. inService means that the resources for processing calls are available. restarting means that the resources for call processing are being rei-initialized.')
mscSigChanEQsigToolsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 17), )
if mibBuilder.loadTexts: mscSigChanEQsigToolsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigToolsTable.setDescription('This contains a series of operational attributes which turn on and off several kinds of tracing.')
mscSigChanEQsigToolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigToolsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigToolsEntry.setDescription('An entry in the mscSigChanEQsigToolsTable.')
mscSigChanEQsigTracing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 17, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigTracing.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigTracing.setDescription('This attribute defines which types of tracing are active for this signalling channel. The tracing messages are sent to the debug stream. To see the messages the agentQueue attribute in Col/debug must be greater than 0 and a Telnet NMIS session must list the debug stream in in its data streams (ex. set nmis telnet session/1 dataStreams debug). Different types of tracing can be enabled simultaneously. Note that tracing consumes additional CPU resources and will slow down call processing on a heavily loaded card. If there is message block exhaustion tracing will be suspended for a period and then automatically reenabled. An alarm is generated on tracing suspension and resumption. This mechanism protects the function processor against excessive numbers of tracing messages. Types of tracing include: protocolErrors - get details of any protocol errors which are occuring. Protocol errors are also reported in summary form as alarms. q931Summary - Summary of the Q.931 messages on the signalling link, including certain call details (calling number, called number, release codes). q931Hex - Q.931 messages displayed in hex format. Useful to determine protocol compliance in case of errors reported on local or remote ends. q931Symbolic - Q.931 messages parsed to give maximum detail. Useful for understanding content of messages flowing on the link. portHex - Messages in hex format being sent and received on the link. Description of bits: protocolErrors(0) q931Summary(1) q931Hex(2) q931Symbolic(3) portHex(4)')
mscSigChanEQsigEQsigSpecificProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 18), )
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificProvTable.setDescription('This group provides EtsiQsig protocol specific provisioning.')
mscSigChanEQsigEQsigSpecificProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificProvEntry.setDescription('An entry in the mscSigChanEQsigEQsigSpecificProvTable.')
mscSigChanEQsigMsgSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigMsgSegmentation.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigMsgSegmentation.setDescription('This attribute allows users to enable/disable the EtsiQsig message segmentation service.')
mscSigChanEQsigE1ChannelNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("skip16", 1), ("contiguous", 2))).clone('skip16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigE1ChannelNumbers.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigE1ChannelNumbers.setDescription('This attribute is applicable to E1 interfaces only. It specifies the mapping scheme between channel numbers (identified in Layer 3 messages) and timeslot numbers on the E1 link. When the attribute value is skip16, channel numbers map directly to actual E1 timeslots; therefore only channel numbers 1 - 15 and 17 - 31 are expected. When the value is contiguous, channel numbers from 1 - 30 are expected, and the following mapping is used: channels 1 - 15 are mapped to timeslots 1 - 15, and channels 16 - 30 are mapped to timeslots 17 - 31. On T1 interfaces, channel numbers are always expected in the range 1 - 23.')
mscSigChanEQsigEQsigSpecificOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 19), )
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificOpTable.setDescription('This group provides specific operational attributes for the Etsi Qsig protocol.')
mscSigChanEQsigEQsigSpecificOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 19, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigEQsigSpecificOpEntry.setDescription('An entry in the mscSigChanEQsigEQsigSpecificOpTable.')
mscSigChanEQsigSegmentationAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 19, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigSegmentationAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigSegmentationAccepted.setDescription('This attribute counts the total number of times a long Etsi Qsig message has been received from a PBX and forwarded to a Passport subnet. The value wraps when it reaches its maximum.')
mscSigChanEQsigSegmentationFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigSegmentationFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigSegmentationFailed.setDescription('This attribute counts the total number of times a long Etsi Qsig message has been received from a PBX and could not be forwarded as is to a Passport subnet due to end-to-end incompatibility. The value wraps when it reaches its maximum.')
mscSigChanEQsigFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2))
mscSigChanEQsigFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 1), )
if mibBuilder.loadTexts: mscSigChanEQsigFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerRowStatusTable.setDescription('This entry controls the addition and deletion of mscSigChanEQsigFramer components.')
mscSigChanEQsigFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigFramerIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerRowStatusEntry.setDescription('A single entry in the table represents a single mscSigChanEQsigFramer component.')
mscSigChanEQsigFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscSigChanEQsigFramer components. These components cannot be added nor deleted.')
mscSigChanEQsigFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscSigChanEQsigFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerStorageType.setDescription('This variable represents the storage type value for the mscSigChanEQsigFramer tables.')
mscSigChanEQsigFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscSigChanEQsigFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerIndex.setDescription('This variable represents the index for the mscSigChanEQsigFramer tables.')
mscSigChanEQsigFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 10), )
if mibBuilder.loadTexts: mscSigChanEQsigFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
mscSigChanEQsigFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigFramerIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerProvEntry.setDescription('An entry in the mscSigChanEQsigFramerProvTable.')
mscSigChanEQsigFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscSigChanEQsigFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
mscSigChanEQsigFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 12), )
if mibBuilder.loadTexts: mscSigChanEQsigFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscSigChanEQsigFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigFramerIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerStateEntry.setDescription('An entry in the mscSigChanEQsigFramerStateTable.')
mscSigChanEQsigFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscSigChanEQsigFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscSigChanEQsigFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscSigChanEQsigFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13), )
if mibBuilder.loadTexts: mscSigChanEQsigFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
mscSigChanEQsigFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VoiceNetworkingMIB", "mscSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigIndex"), (0, "Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", "mscSigChanEQsigFramerIndex"))
if mibBuilder.loadTexts: mscSigChanEQsigFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerStatsEntry.setDescription('An entry in the mscSigChanEQsigFramerStatsTable.')
mscSigChanEQsigFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerFrmToIf.setDescription('This attribute counts the number of frames transmitted to the link interface by Framer. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerFrmFromIf.setDescription('This attribute counts the number of frames received from the link interface by Framer. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerOctetFromIf.setDescription('The number of bytes received from the link interface by Framer.')
mscSigChanEQsigFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerAborts.setDescription('This attribute counts the total number of aborts received. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerCrcErrors.setDescription('This attribute counts the total number of frames with CRC errors. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerLrcErrors.setDescription('This attribute counts the total number of frames with LRC errors. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerNonOctetErrors.setDescription('This attribute counts the total number of frames that were non octet aligned. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerOverruns.setDescription('This attribute counts the total number of frames received from the link for which overruns occurred. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerUnderruns.setDescription('This attribute counts the total number of frames transmitted to the link for which underruns occurred. This count wraps to zero after reaching its maximum value.')
mscSigChanEQsigFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 115, 2, 2, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscSigChanEQsigFramerLargeFrmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscSigChanEQsigFramerLargeFrmErrors.setDescription('This attribute counts the total number of frames received which were too large (longer than 500 bytes). This count wraps to zero after reaching its maximum value.')
vnetEtsiQsigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 1))
vnetEtsiQsigGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 1, 1))
vnetEtsiQsigGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 1, 1, 3))
vnetEtsiQsigGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 1, 1, 3, 2))
vnetEtsiQsigCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 3))
vnetEtsiQsigCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 3, 1))
vnetEtsiQsigCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 3, 1, 3))
vnetEtsiQsigCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 110, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-VnetEtsiQsigMIB", mscSigChanEQsigStatsTable=mscSigChanEQsigStatsTable, vnetEtsiQsigCapabilities=vnetEtsiQsigCapabilities, mscSigChanEQsigFramer=mscSigChanEQsigFramer, vnetEtsiQsigCapabilitiesCA02A=vnetEtsiQsigCapabilitiesCA02A, mscSigChanEQsigT200=mscSigChanEQsigT200, mscSigChanEQsigFramerNonOctetErrors=mscSigChanEQsigFramerNonOctetErrors, mscSigChanEQsigFramerIndex=mscSigChanEQsigFramerIndex, mscSigChanEQsigEQsigSpecificOpTable=mscSigChanEQsigEQsigSpecificOpTable, mscSigChanEQsigOverlapSendingEnabled=mscSigChanEQsigOverlapSendingEnabled, mscSigChanEQsigT309=mscSigChanEQsigT309, mscSigChanEQsigNonCallAssocSessionsFromIf=mscSigChanEQsigNonCallAssocSessionsFromIf, mscSigChanEQsigTotalCallsFromIf=mscSigChanEQsigTotalCallsFromIf, mscSigChanEQsigRowStatusTable=mscSigChanEQsigRowStatusTable, mscSigChanEQsigSegmentationAccepted=mscSigChanEQsigSegmentationAccepted, mscSigChanEQsigComponentName=mscSigChanEQsigComponentName, vnetEtsiQsigGroupCA=vnetEtsiQsigGroupCA, mscSigChanEQsigN200=mscSigChanEQsigN200, mscSigChanEQsigFramerInterfaceName=mscSigChanEQsigFramerInterfaceName, mscSigChanEQsigToolsTable=mscSigChanEQsigToolsTable, mscSigChanEQsigIndex=mscSigChanEQsigIndex, mscSigChanEQsigFramerOctetFromIf=mscSigChanEQsigFramerOctetFromIf, mscSigChanEQsigSegmentationFailed=mscSigChanEQsigSegmentationFailed, mscSigChanEQsigFramerProvTable=mscSigChanEQsigFramerProvTable, mscSigChanEQsigSide=mscSigChanEQsigSide, mscSigChanEQsigStateTable=mscSigChanEQsigStateTable, mscSigChanEQsigL3Table=mscSigChanEQsigL3Table, mscSigChanEQsigDChanStatus=mscSigChanEQsigDChanStatus, mscSigChanEQsigT23=mscSigChanEQsigT23, mscSigChanEQsigActiveChannels=mscSigChanEQsigActiveChannels, mscSigChanEQsigStateEntry=mscSigChanEQsigStateEntry, vnetEtsiQsigCapabilitiesCA=vnetEtsiQsigCapabilitiesCA, mscSigChanEQsigFramerFrmFromIf=mscSigChanEQsigFramerFrmFromIf, mscSigChanEQsigCircuitSwitchedK=mscSigChanEQsigCircuitSwitchedK, mscSigChanEQsigT310=mscSigChanEQsigT310, mscSigChanEQsigFramerUsageState=mscSigChanEQsigFramerUsageState, vnetEtsiQsigMIB=vnetEtsiQsigMIB, mscSigChanEQsigL2Entry=mscSigChanEQsigL2Entry, mscSigChanEQsigMaxNonCallConcurrent=mscSigChanEQsigMaxNonCallConcurrent, mscSigChanEQsigActiveVoiceChannels=mscSigChanEQsigActiveVoiceChannels, mscSigChanEQsigProvEntry=mscSigChanEQsigProvEntry, mscSigChanEQsigStorageType=mscSigChanEQsigStorageType, mscSigChanEQsigEQsigSpecificOpEntry=mscSigChanEQsigEQsigSpecificOpEntry, mscSigChanEQsigFramerOperationalState=mscSigChanEQsigFramerOperationalState, mscSigChanEQsigPeakActiveDataChannels=mscSigChanEQsigPeakActiveDataChannels, mscSigChanEQsigToolsEntry=mscSigChanEQsigToolsEntry, mscSigChanEQsigFramerLargeFrmErrors=mscSigChanEQsigFramerLargeFrmErrors, mscSigChanEQsigT203=mscSigChanEQsigT203, mscSigChanEQsigFramerAborts=mscSigChanEQsigFramerAborts, mscSigChanEQsigFramerStatsTable=mscSigChanEQsigFramerStatsTable, mscSigChanEQsigFramerRowStatus=mscSigChanEQsigFramerRowStatus, mscSigChanEQsigFramerStatsEntry=mscSigChanEQsigFramerStatsEntry, vnetEtsiQsigGroupCA02A=vnetEtsiQsigGroupCA02A, mscSigChanEQsigFramerRowStatusTable=mscSigChanEQsigFramerRowStatusTable, mscSigChanEQsigRowStatusEntry=mscSigChanEQsigRowStatusEntry, mscSigChanEQsigFramerComponentName=mscSigChanEQsigFramerComponentName, mscSigChanEQsigFramerStateEntry=mscSigChanEQsigFramerStateEntry, mscSigChanEQsigFramerLrcErrors=mscSigChanEQsigFramerLrcErrors, vnetEtsiQsigGroup=vnetEtsiQsigGroup, mscSigChanEQsig=mscSigChanEQsig, mscSigChanEQsigFramerUnderruns=mscSigChanEQsigFramerUnderruns, mscSigChanEQsigFramerProvEntry=mscSigChanEQsigFramerProvEntry, mscSigChanEQsigOperationalState=mscSigChanEQsigOperationalState, mscSigChanEQsigL2Table=mscSigChanEQsigL2Table, mscSigChanEQsigE1ChannelNumbers=mscSigChanEQsigE1ChannelNumbers, mscSigChanEQsigL3Entry=mscSigChanEQsigL3Entry, mscSigChanEQsigNonCallAssocSessionsToIf=mscSigChanEQsigNonCallAssocSessionsToIf, mscSigChanEQsigMsgSegmentation=mscSigChanEQsigMsgSegmentation, mscSigChanEQsigOperEntry=mscSigChanEQsigOperEntry, mscSigChanEQsigOverlapReceivingEnabled=mscSigChanEQsigOverlapReceivingEnabled, mscSigChanEQsigActiveDataChannels=mscSigChanEQsigActiveDataChannels, mscSigChanEQsigUsageState=mscSigChanEQsigUsageState, mscSigChanEQsigRowStatus=mscSigChanEQsigRowStatus, mscSigChanEQsigAdminState=mscSigChanEQsigAdminState, vnetEtsiQsigCapabilitiesCA02=vnetEtsiQsigCapabilitiesCA02, mscSigChanEQsigEQsigSpecificProvEntry=mscSigChanEQsigEQsigSpecificProvEntry, mscSigChanEQsigFramerFrmToIf=mscSigChanEQsigFramerFrmToIf, mscSigChanEQsigPeakActiveChannels=mscSigChanEQsigPeakActiveChannels, mscSigChanEQsigOperTable=mscSigChanEQsigOperTable, mscSigChanEQsigFramerAdminState=mscSigChanEQsigFramerAdminState, mscSigChanEQsigFramerRowStatusEntry=mscSigChanEQsigFramerRowStatusEntry, mscSigChanEQsigStatsEntry=mscSigChanEQsigStatsEntry, mscSigChanEQsigEQsigSpecificProvTable=mscSigChanEQsigEQsigSpecificProvTable, mscSigChanEQsigTotalCallsToIf=mscSigChanEQsigTotalCallsToIf, mscSigChanEQsigTracing=mscSigChanEQsigTracing, mscSigChanEQsigPeakActiveVoiceChannels=mscSigChanEQsigPeakActiveVoiceChannels, vnetEtsiQsigGroupCA02=vnetEtsiQsigGroupCA02, mscSigChanEQsigFramerStorageType=mscSigChanEQsigFramerStorageType, mscSigChanEQsigProvTable=mscSigChanEQsigProvTable, mscSigChanEQsigFramerStateTable=mscSigChanEQsigFramerStateTable, mscSigChanEQsigFramerCrcErrors=mscSigChanEQsigFramerCrcErrors, mscSigChanEQsigFramerOverruns=mscSigChanEQsigFramerOverruns)
