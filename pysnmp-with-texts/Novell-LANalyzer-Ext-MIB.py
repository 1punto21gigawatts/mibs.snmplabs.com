#
# PySNMP MIB module Novell-LANalyzer-Ext-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Novell-LANalyzer-Ext-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
EntryStatus, rmon, channelDescription, alarmValue, alarmIndex, channelIndex, alarmVariable, channelMatches, alarmSampleType, alarmFallingThreshold, OwnerString, alarmRisingThreshold = mibBuilder.importSymbols("RFC1271-MIB", "EntryStatus", "rmon", "channelDescription", "alarmValue", "alarmIndex", "channelIndex", "alarmVariable", "channelMatches", "alarmSampleType", "alarmFallingThreshold", "OwnerString", "alarmRisingThreshold")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Gauge32, Integer32, NotificationType, ModuleIdentity, ObjectIdentity, Counter32, MibIdentifier, iso, enterprises, Unsigned32, IpAddress, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Integer32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Counter32", "MibIdentifier", "iso", "enterprises", "Unsigned32", "IpAddress", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
productType = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
lantern = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 1))
lantern_rmonPlus = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 1, 3)).setLabel("lantern-rmonPlus")
rmonPlus_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13)).setLabel("rmonPlus-mib")
rmonShadow = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1))
rmonExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2))
rpAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3))
rpHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4))
rpMatrix = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6))
rpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7))
rpBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8))
rpAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 1))
rpHostMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2))
rpDuplicateIp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3))
rpMacToIp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4))
rpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1), )
if mibBuilder.loadTexts: rpAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpAlarmTable.setDescription('A list of alarm entries that extends the RMON MIB.')
rpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpAlarmIndex"))
if mibBuilder.loadTexts: rpAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpAlarmEntry.setDescription('A list of parameters that extends the alarm entries in RMON.')
rpAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpAlarmIndex.setDescription('An index that uniquely identifies an entry in the rpAlarmTable.')
rpAlarmRisingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpAlarmRisingDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rpAlarmRisingDescription.setDescription('A description of the rising alarm.')
rpAlarmFallingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpAlarmFallingDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rpAlarmFallingDescription.setDescription('A description of the falling alarm.')
rpHostTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2), )
if mibBuilder.loadTexts: rpHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTable.setDescription('A list of host entries that extends the RMON MIB.')
rpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpHostAddress"))
if mibBuilder.loadTexts: rpHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostEntry.setDescription('A collection of statistics that extend the host entries in RMON.')
rpHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostAddress.setDescription('The physical address of this host.')
rpHostCreationOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostCreationOrder.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostCreationOrder.setDescription('See hostCreationOrder in the RMON MIB.')
rpHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostIndex.setDescription('See hostIndex in the RMON MIB.')
rpHostProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostProtocols.setDescription('A bit array where each bit indicates a protocol that was seen in a good packet transmitted by that host. The protocols currently monitored are: Bit Protocol 2^0 Unrecognized protocol (none of the following) 2^1 Internet (IP, ARP, RARP) 2^2 ISO 2^3 DEC 2^4 NetWare 2^5 AppleTalk (AppleTalk, AppleTalk ARP) 2^6 XNS 2^7 SNA 2^8 VINES 2^9 NetBEUI 2^10 Media Access Control A value of 0 means that no transmission has been registered.')
rpHostFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostFirstTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostFirstTransmit.setDescription('The value of sysUpTime when the first good transmission by this host occurred. If this value is 0 and the hostOutPkts count is 0 then the host has not yet transmitted.')
rpHostLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostLastTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostLastTransmit.setDescription('The value of sysUpTime when the most recent transmission by this host occurred.')
rpHostTimeTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3), )
if mibBuilder.loadTexts: rpHostTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeTable.setDescription('A list of host entries that extends the RMON MIB.')
rpHostTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostTimeIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpHostTimeCreationOrder"))
if mibBuilder.loadTexts: rpHostTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeEntry.setDescription('A collection of statistics that extend the host entries in RMON.')
rpHostTimeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeAddress.setDescription('The physical address of this host.')
rpHostTimeCreationOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeCreationOrder.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeCreationOrder.setDescription('See hostTimeCreationOrder in the RMON MIB.')
rpHostTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeIndex.setDescription('See hostIndex in the RMON MIB.')
rpHostTimeProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeProtocols.setDescription('A bit array where each bit indicates a protocol that was seen in a good packet transmitted by that host. The protocols currently monitored are: Bit Protocol 2^0 Unrecognized protocol (none of the following) 2^1 Internet (IP, ARP, RARP) 2^2 ISO 2^3 DEC 2^4 NetWare 2^5 AppleTalk (AppleTalk, AppleTalk ARP) 2^6 XNS 2^7 SNA 2^8 VINES 2^9 NetBEUI 2^10 Media Access Control A value of 0 means that no transmission has been registered.')
rpHostTimeFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeFirstTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeFirstTransmit.setDescription('The value of sysUpTime when the first good transmission by this host occurred. If this value is 0 and the hostOutPkts count is 0 then the host has not yet transmitted.')
rpHostTimeLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeLastTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostTimeLastTransmit.setDescription('The value of sysUpTime when the most recent transmission by this host occurred.')
rpMatrixSDTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2), )
if mibBuilder.loadTexts: rpMatrixSDTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDTable.setDescription('A list of matrix entries that extends the RMON MIB.')
rpMatrixSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpMatrixSDIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixSDSourceAddress"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixSDDestAddress"))
if mibBuilder.loadTexts: rpMatrixSDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDEntry.setDescription('A collection of statistics that extend the matrix entries in RMON.')
rpMatrixSDSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDSourceAddress.setDescription('The source physical address.')
rpMatrixSDDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDDestAddress.setDescription('The destination physical address.')
rpMatrixSDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDIndex.setDescription('See matrixSDIndex in the RMON MIB.')
rpMatrixSDProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDProtocols.setDescription('A bit array where each bit indicates a protocol that was seen in a good packet transmitted from rpMatrixSDSourceAddress to rpMatrixSDDestAddress. The protocols currently monitored are: Bit Protocol 2^0 Unrecognized protocol (none of the following) 2^1 Internet (IP, ARP, RARP) 2^2 ISO 2^3 DEC 2^4 NetWare 2^5 AppleTalk (AppleTalk, AppleTalk ARP) 2^6 XNS 2^7 SNA 2^8 VINES 2^9 NetBEUI 2^10 Media Access Control')
rpMatrixSDFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDFirstTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDFirstTransmit.setDescription('The value of sysUpTime when the first good transmission from rpMatrixSDSourceAddress to rpMatrixSDDestAddress occurred.')
rpMatrixSDLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDLastTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixSDLastTransmit.setDescription('The value of sysUpTime when the most recent transmission from rpMatrixSDSourceAddress to rpMatrixSDDestAddress occurred.')
rpMatrixDSTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3), )
if mibBuilder.loadTexts: rpMatrixDSTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSTable.setDescription('A list of matrix entries that extends the RMON MIB.')
rpMatrixDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpMatrixDSIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixDSDestAddress"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixDSSourceAddress"))
if mibBuilder.loadTexts: rpMatrixDSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSEntry.setDescription('A collection of statistics that extend the matrix entries in RMON.')
rpMatrixDSSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSSourceAddress.setDescription('The source physical address.')
rpMatrixDSDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSDestAddress.setDescription('The destination physical address.')
rpMatrixDSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSIndex.setDescription('See matrixDSIndex in the RMON MIB.')
rpMatrixDSProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSProtocols.setDescription('A bit array where each bit indicates a protocol that was seen in a good packet transmitted from rpMatrixDSSourceAddress to rpMatrixDSDestAddress. The protocols currently monitored are: Bit Protocol 2^0 Unrecognized protocol (none of the following) 2^1 Internet (IP, ARP, RARP) 2^2 ISO 2^3 DEC 2^4 NetWare 2^5 AppleTalk (AppleTalk, AppleTalk ARP) 2^6 XNS 2^7 SNA 2^8 VINES 2^9 NetBEUI 2^10 Media Access Control')
rpMatrixDSFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSFirstTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSFirstTransmit.setDescription('The value of sysUpTime when the first good transmission from rpMatrixDSSourceAddress to rpMatrixDSDestAddress occurred.')
rpMatrixDSLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSLastTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: rpMatrixDSLastTransmit.setDescription('The value of sysUpTime when the most recent transmission from rpMatrixDSSourceAddress to rpMatrixDSDestAddress occurred.')
rpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1), )
if mibBuilder.loadTexts: rpFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpFilterTable.setDescription('A list of filter entries that extends the RMON MIB.')
rpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpFilterIndex"))
if mibBuilder.loadTexts: rpFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpFilterEntry.setDescription('A collection of objects that extend the filter entries in RMON.')
rpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpFilterIndex.setDescription('See filterIndex in the RMON MIB.')
rpFilterProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1, 1, 2), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpFilterProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: rpFilterProtocols.setDescription('This object is a bit mask that identifies the protocol suite(s) that match this filter. The currently defined bits are: Bit Protocol 2^0 Unrecognized protocol (none of the following) 2^1 Internet (IP, ARP, RARP) 2^2 ISO 2^3 DEC 2^4 NetWare 2^5 AppleTalk (AppleTalk, AppleTalk ARP) 2^6 XNS 2^7 SNA 2^8 VINES 2^9 NetBEUI 2^10 Media Access Control The default is -1 (all bits set) which means match any protocol. This object may not be modified if the associated filterStatus is equal to valid(1).')
rpChannelTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2), )
if mibBuilder.loadTexts: rpChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpChannelTable.setDescription('A list of channel entries that extends the RMON MIB.')
rpChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpChannelIndex"))
if mibBuilder.loadTexts: rpChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpChannelEntry.setDescription('A collection of objects that extend the channel entries in the RMON MIB.')
rpChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpChannelIndex.setDescription('See channelIndex in the RMON MIB.')
rpChannelMatchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpChannelMatchOctets.setStatus('mandatory')
if mibBuilder.loadTexts: rpChannelMatchOctets.setDescription('The number of octets (excluding framing bits but including FCS octets) in packets which increment the channelMatches object in the RMON MIB.')
rpChannelControlBufferFull = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpChannelControlBufferFull.setStatus('mandatory')
if mibBuilder.loadTexts: rpChannelControlBufferFull.setDescription('When this object is set to 1 and the bufferControlFullStatus is full and the bufferControlFullAction is set to lockWhenFull, this channel will stop monitoring the incomming packet.')
rpBufferControlTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1), )
if mibBuilder.loadTexts: rpBufferControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpBufferControlTable.setDescription('A list of buffer entries that extends the RMON MIB.')
rpBufferControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpBufferControlIndex"))
if mibBuilder.loadTexts: rpBufferControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpBufferControlEntry.setDescription('A collection of objects that extend the buffer entries in the RMON MIB.')
rpBufferControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpBufferControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpBufferControlIndex.setDescription('See bufferControlIndex in the RMON MIB.')
rpBufferCaptureOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpBufferCaptureOctets.setStatus('mandatory')
if mibBuilder.loadTexts: rpBufferCaptureOctets.setDescription('The number of octets (excluding framing bits but including FCS octets and overhead) in packets which are captured in the buffer.')
rpAdminSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpAdminSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rpAdminSerialNumber.setDescription('An ASCII string specifying the serial number for this probe.')
rpAdminProbeCopies = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpAdminProbeCopies.setStatus('mandatory')
if mibBuilder.loadTexts: rpAdminProbeCopies.setDescription('The number of copies of a probe with rpAdminSerialNumber that can reside on a network. A value of 0 means unlimited copies.')
rpHostMonitorControlTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1), )
if mibBuilder.loadTexts: rpHostMonitorControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlTable.setDescription('A list of host monitor table control entries.')
rpHostMonitorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostMonitorControlIndex"))
if mibBuilder.loadTexts: rpHostMonitorControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlEntry.setDescription('A list of parameters used to monitor the activity of a host.')
rpHostMonitorControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlIndex.setDescription('An index that uniquely identifies an entry in the rpHostMonitorControlTable.')
rpHostMonitorControlHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlHostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlHostIndex.setDescription('The host table identified by a particular value of this index is associated with the same host table as identified by the same value of hostIndex. This object may not be modified if the associated rpHostMonitorControlStatus is equal to valid(1).')
rpHostMonitorControlActiveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlActiveEvent.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlActiveEvent.setDescription('The index of the eventEntry that is used when a host monitor entry goes from inactive to active. This object may not be modified if the associated rpHostMonitorControlStatus is equal to valid(1).')
rpHostMonitorControlInactiveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlInactiveEvent.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlInactiveEvent.setDescription('The index of the eventEntry that is used when a host monitor entry goes from active to inactive. This object may not be modified if the associated rpHostMonitorControlStatus is equal to valid(1).')
rpHostMonitorControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlTimeout.setDescription('The amount of time in minutes a host is allowed to be inactive before it is reported to be dead via an rpHostInactive trap. Subsequent traps will not be sent for the same host until the host has transmitted a packet and timed-out again. A value of 0 disables the monitoring of this table.')
rpHostMonitorControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 6), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlOwner.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
rpHostMonitorControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 7), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorControlStatus.setDescription('The status of this rpHostMonitorControlEntry.')
rpHostMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2), )
if mibBuilder.loadTexts: rpHostMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorTable.setDescription('A list of hosts.')
rpHostMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostMonitorIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpHostMonitorAddress"))
if mibBuilder.loadTexts: rpHostMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorEntry.setDescription('A collection of information used to monitor a host for activity.')
rpHostMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorIndex.setDescription('The host table identified by a particular value of this index is associated wth the same host table as identified by the same value of hostMonitorControlIndex.')
rpHostMonitorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorAddress.setDescription('The physical address of the monitored host.')
rpHostMonitorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorActivity.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorActivity.setDescription('The state of the monitored host, initially set to active(1). If an active(1) host has not transmitted for rpHostMonitorControlTimeout minutes then the state changes to inactive(2). If an inactive(2) host transmits the state changes to active(1).')
rpHostMonitorAddDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorAddDelete.setStatus('mandatory')
if mibBuilder.loadTexts: rpHostMonitorAddDelete.setDescription('Writing add(1) to this variable will add the host specified by the rpHostMonitorAddress index to this rpHostMonitorTable. Writing delete(2) will delete the host specified by the rpHostMonitorAddress index. This object may not be modified if the associated rpHostMonitorControlStatus is not equal to valid(1).')
rpDuplicateIpTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1), )
if mibBuilder.loadTexts: rpDuplicateIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpDuplicateIpTable.setDescription('A list of IP addresses that have duplicate physical address.')
rpDuplicateIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpDuplicateIpAddress"))
if mibBuilder.loadTexts: rpDuplicateIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpDuplicateIpEntry.setDescription('A list of parameters defining an IP address with duplicate physical addresses.')
rpDuplicateIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpDuplicateIpAddress.setDescription('The IP address.')
rpDuplicateIpNewMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpNewMAC.setStatus('mandatory')
if mibBuilder.loadTexts: rpDuplicateIpNewMAC.setDescription('The latest physical address associated with the IP address in rpDuplicateIPAddress.')
rpDuplicateIpOldMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpOldMAC.setStatus('mandatory')
if mibBuilder.loadTexts: rpDuplicateIpOldMAC.setDescription('The previous physical address associated with the IP address in rpDuplicateIPAddress.')
rpDuplicateIpTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: rpDuplicateIpTimestamp.setDescription('The value of sysUpTime when this entry was last added or updated in the table.')
rpMacToIpTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1), )
if mibBuilder.loadTexts: rpMacToIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: rpMacToIpTable.setDescription('A list of host and IP address pairs.')
rpMacToIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpMacToIpHostIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpMacToIpMACAddress"), (0, "Novell-LANalyzer-Ext-MIB", "rpMacToIpIPAddress"))
if mibBuilder.loadTexts: rpMacToIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rpMacToIpEntry.setDescription('A record defining a host and IP address pair.')
rpMacToIpHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMacToIpHostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rpMacToIpHostIndex.setDescription('The host table of which this entry is a part.')
rpMacToIpMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMacToIpMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpMacToIpMACAddress.setDescription('The physical address of this host.')
rpMacToIpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMacToIpIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rpMacToIpIPAddress.setDescription('The IP address of this host.')
risingAlarm = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,1)).setObjects(("RFC1271-MIB", "alarmIndex"), ("RFC1271-MIB", "alarmVariable"), ("RFC1271-MIB", "alarmSampleType"), ("RFC1271-MIB", "alarmValue"), ("RFC1271-MIB", "alarmRisingThreshold"), ("Novell-LANalyzer-Ext-MIB", "rpAlarmRisingDescription"))
if mibBuilder.loadTexts: risingAlarm.setDescription('The SNMP trap that is generated when an alarm entry crosses its rising threshold and generates an event that is configured for sending SNMP traps.')
fallingAlarm = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,2)).setObjects(("RFC1271-MIB", "alarmIndex"), ("RFC1271-MIB", "alarmVariable"), ("RFC1271-MIB", "alarmSampleType"), ("RFC1271-MIB", "alarmValue"), ("RFC1271-MIB", "alarmFallingThreshold"), ("Novell-LANalyzer-Ext-MIB", "rpAlarmFallingDescription"))
if mibBuilder.loadTexts: fallingAlarm.setDescription('The SNMP trap that is generated when an alarm entry crosses its falling threshold and generates an event that is configured for sending SNMP traps.')
packetMatch = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,3)).setObjects(("RFC1271-MIB", "channelIndex"), ("RFC1271-MIB", "channelMatches"), ("RFC1271-MIB", "channelDescription"))
if mibBuilder.loadTexts: packetMatch.setDescription('The SNMP trap that is generated when a packet is captured by a channel that is configured for sending SNMP traps.')
rpHostActive = NotificationType((1, 3, 6, 1, 4, 1, 23, 1, 1, 3) + (0,1)).setObjects(("Novell-LANalyzer-Ext-MIB", "rpHostMonitorAddress"))
if mibBuilder.loadTexts: rpHostActive.setDescription('This trap is generated whenever the probe first detects that a monitored inactive host has begun transmitting again.')
rpHostInactive = NotificationType((1, 3, 6, 1, 4, 1, 23, 1, 1, 3) + (0,2)).setObjects(("Novell-LANalyzer-Ext-MIB", "rpHostMonitorAddress"))
if mibBuilder.loadTexts: rpHostInactive.setDescription('This trap is generated whenever the probe first detects that a monitored active host has not transmitted for the specified interval rpHostMonitorControlTimeout.')
rpDuplicateIpAddr = NotificationType((1, 3, 6, 1, 4, 1, 23, 1, 1, 3) + (0,3)).setObjects(("Novell-LANalyzer-Ext-MIB", "rpDuplicateIpAddress"), ("Novell-LANalyzer-Ext-MIB", "rpDuplicateIpNewMAC"), ("Novell-LANalyzer-Ext-MIB", "rpDuplicateIpOldMAC"))
if mibBuilder.loadTexts: rpDuplicateIpAddr.setDescription('This trap is generated when the probe detects that a host is using an IP address used by another host(s) and the IP address is not in the associated duplicate IP table.')
mibBuilder.exportSymbols("Novell-LANalyzer-Ext-MIB", rpBufferControlEntry=rpBufferControlEntry, rpMatrixSDProtocols=rpMatrixSDProtocols, rpHostMonitorControlIndex=rpHostMonitorControlIndex, rpMatrixSDLastTransmit=rpMatrixSDLastTransmit, rpHostTimeProtocols=rpHostTimeProtocols, rpBuffer=rpBuffer, fallingAlarm=fallingAlarm, rpMatrixSDEntry=rpMatrixSDEntry, rpDuplicateIpAddr=rpDuplicateIpAddr, rpAlarmIndex=rpAlarmIndex, rpHostMonitorControlEntry=rpHostMonitorControlEntry, rpMatrixSDIndex=rpMatrixSDIndex, novell=novell, rpHostMonitorControlInactiveEvent=rpHostMonitorControlInactiveEvent, rpMatrixDSSourceAddress=rpMatrixDSSourceAddress, rpHostTimeFirstTransmit=rpHostTimeFirstTransmit, rpHostCreationOrder=rpHostCreationOrder, rpFilterTable=rpFilterTable, rpMatrix=rpMatrix, rpAlarmEntry=rpAlarmEntry, rpHostMonitorControlHostIndex=rpHostMonitorControlHostIndex, rpHostMonitorActivity=rpHostMonitorActivity, packetMatch=packetMatch, rmonPlus_mib=rmonPlus_mib, rpDuplicateIpOldMAC=rpDuplicateIpOldMAC, mibDoc=mibDoc, rpMatrixDSEntry=rpMatrixDSEntry, rpHostTable=rpHostTable, rpFilterIndex=rpFilterIndex, rpBufferControlTable=rpBufferControlTable, rpBufferControlIndex=rpBufferControlIndex, rpAdminSerialNumber=rpAdminSerialNumber, rpMatrixDSDestAddress=rpMatrixDSDestAddress, rpMacToIpTable=rpMacToIpTable, rpAlarmRisingDescription=rpAlarmRisingDescription, rpMacToIpIPAddress=rpMacToIpIPAddress, rpMacToIpEntry=rpMacToIpEntry, rpDuplicateIpTimestamp=rpDuplicateIpTimestamp, rpDuplicateIp=rpDuplicateIp, rpChannelEntry=rpChannelEntry, rmonShadow=rmonShadow, rpMatrixDSTable=rpMatrixDSTable, rpDuplicateIpAddress=rpDuplicateIpAddress, rpAlarm=rpAlarm, rpHostMonitorEntry=rpHostMonitorEntry, rpFilter=rpFilter, rpHostTimeCreationOrder=rpHostTimeCreationOrder, rpHostProtocols=rpHostProtocols, rpMatrixSDTable=rpMatrixSDTable, rpHostMonitorControlStatus=rpHostMonitorControlStatus, rpHostMonitorControlOwner=rpHostMonitorControlOwner, rpChannelIndex=rpChannelIndex, rmonExtensions=rmonExtensions, rpMatrixDSProtocols=rpMatrixDSProtocols, rpHostFirstTransmit=rpHostFirstTransmit, rpHostMonitor=rpHostMonitor, rpMatrixDSLastTransmit=rpMatrixDSLastTransmit, rpHostActive=rpHostActive, productType=productType, rpMatrixDSFirstTransmit=rpMatrixDSFirstTransmit, rpFilterEntry=rpFilterEntry, rpHostTimeTable=rpHostTimeTable, rpMatrixDSIndex=rpMatrixDSIndex, rpDuplicateIpTable=rpDuplicateIpTable, rpHostIndex=rpHostIndex, rpBufferCaptureOctets=rpBufferCaptureOctets, rpHosts=rpHosts, rpChannelControlBufferFull=rpChannelControlBufferFull, rpAlarmTable=rpAlarmTable, rpDuplicateIpEntry=rpDuplicateIpEntry, rpChannelMatchOctets=rpChannelMatchOctets, rpHostTimeLastTransmit=rpHostTimeLastTransmit, rpHostMonitorTable=rpHostMonitorTable, rpHostMonitorAddDelete=rpHostMonitorAddDelete, rpDuplicateIpNewMAC=rpDuplicateIpNewMAC, rpAlarmFallingDescription=rpAlarmFallingDescription, rpMacToIp=rpMacToIp, rpChannelTable=rpChannelTable, rpAdmin=rpAdmin, rpAdminProbeCopies=rpAdminProbeCopies, rpFilterProtocols=rpFilterProtocols, rpHostMonitorControlTimeout=rpHostMonitorControlTimeout, rpHostTimeEntry=rpHostTimeEntry, rpHostMonitorAddress=rpHostMonitorAddress, rpHostInactive=rpHostInactive, rpMacToIpMACAddress=rpMacToIpMACAddress, lantern=lantern, lantern_rmonPlus=lantern_rmonPlus, rpHostLastTransmit=rpHostLastTransmit, rpMatrixSDFirstTransmit=rpMatrixSDFirstTransmit, rpMatrixSDDestAddress=rpMatrixSDDestAddress, rpHostMonitorControlTable=rpHostMonitorControlTable, rpMatrixSDSourceAddress=rpMatrixSDSourceAddress, rpHostEntry=rpHostEntry, rpHostMonitorIndex=rpHostMonitorIndex, rpMacToIpHostIndex=rpMacToIpHostIndex, rpHostMonitorControlActiveEvent=rpHostMonitorControlActiveEvent, rpHostTimeIndex=rpHostTimeIndex, rpHostAddress=rpHostAddress, risingAlarm=risingAlarm, rpHostTimeAddress=rpHostTimeAddress)
