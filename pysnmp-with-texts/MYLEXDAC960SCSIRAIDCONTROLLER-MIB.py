#
# PySNMP MIB module MYLEXDAC960SCSIRAIDCONTROLLER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MYLEXDAC960SCSIRAIDCONTROLLER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, TimeTicks, ModuleIdentity, Unsigned32, ObjectIdentity, iso, MibIdentifier, Integer32, Gauge32, enterprises, NotificationType, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "TimeTicks", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "iso", "MibIdentifier", "Integer32", "Gauge32", "enterprises", "NotificationType", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

mylex = MibIdentifier((1, 3, 6, 1, 4, 1, 1608))
mib = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 3))
v2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 3, 2))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines attributes common to allcomponents. This group is required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Controller Manufacturer.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product Name for this Controller.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1, 1, 3), DmiDisplaystring())
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1, 1, 4), DmiDisplaystring())
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1, 1, 5), DmiDateX())
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time and date for the last time this componentwas installed.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 1, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification thatthe component is still installed and working.')
tControllerInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2), )
if mibBuilder.loadTexts: tControllerInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tControllerInformation.setDescription('This group provides Controller Information.')
eControllerInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a2ControllerNumber"))
if mibBuilder.loadTexts: eControllerInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eControllerInformation.setDescription('')
a2ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2ControllerNumber.setDescription('Controller Number assigned to this controller by the device driver.')
a2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: a2OperationalState.setDescription('Operational state of this controller as seen by the device driver.')
a2FirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2FirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a2FirmwareRevision.setDescription('Controller Firmware Revision.')
a2ConfiguredChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ConfiguredChannels.setStatus('mandatory')
if mibBuilder.loadTexts: a2ConfiguredChannels.setDescription('Number of Channels (SCSI Bus) that are part of controller configuration.')
a2ActualChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ActualChannels.setStatus('mandatory')
if mibBuilder.loadTexts: a2ActualChannels.setDescription('Number of Channels (SCSI Bus) that are physically present on-board the controller.')
a2MaximumLogicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumLogicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumLogicalDrives.setDescription('Maximum number of logical drives that can be configured on this controller.')
a2MaximumTargetsPerChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumTargetsPerChannel.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumTargetsPerChannel.setDescription('Maximum Number of SCSI Target IDs supported per SCSI Bus.')
a2MaximumTaggedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumTaggedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumTaggedRequests.setDescription('Maximum Number of Tagged requests that may be sent to a Hard disk device by Controller Firmware.')
a2MaximumDataTransferSizePerIoRequestInK = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumDataTransferSizePerIoRequestInK.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumDataTransferSizePerIoRequestInK.setDescription('Maximum amount of data that can be transferred per a single IO request - in KB.')
a2MaximumConcurrentCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MaximumConcurrentCommands.setStatus('mandatory')
if mibBuilder.loadTexts: a2MaximumConcurrentCommands.setDescription('Maximum number of requests that can be sent to the controller simultaneouly.')
a2RebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2RebuildRate.setStatus('mandatory')
if mibBuilder.loadTexts: a2RebuildRate.setDescription('Value of Rebuild Rate.')
a2LogicalSectorSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LogicalSectorSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a2LogicalSectorSizeInBytes.setDescription('Logical Sector Size in Bytes (Default: 512 bytes).')
a2PhysicalSectorSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2PhysicalSectorSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a2PhysicalSectorSizeInBytes.setDescription('Physical Sector Size in Bytes (Default: 512 bytes).')
a2CacheLineSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2CacheLineSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a2CacheLineSizeInBytes.setDescription('Cache Line Size in Bytes.')
a2DramSizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2DramSizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a2DramSizeInMb.setDescription('Size of Controller EPROM Module - in MB.')
a2EpromSizeInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2EpromSizeInKb.setStatus('mandatory')
if mibBuilder.loadTexts: a2EpromSizeInKb.setDescription('Size of Controller EPROM Module - in KB.')
a2BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 17), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2BusType.setStatus('mandatory')
if mibBuilder.loadTexts: a2BusType.setDescription('Controller - System Bus Interface Type.')
a2SystemBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 18), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SystemBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2SystemBusNumber.setDescription('System Bus Number, for the bus the controller is interfacing with. This value is supplied by the Operating system and may not be defined for all operating systems.')
a2SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 19), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2SlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2SlotNumber.setDescription('Slot Number where the controller is physically present. Defined for EISA and MCA controller only. For PCI controller it will always be set to 0.')
a2InterruptVectorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 20), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterruptVectorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2InterruptVectorNumber.setDescription('Interrupt Vector Number being used by the controller.This value is a mapped IRQ supplied by OperatingSystem and may not be same as the actual Interrupt Vector.')
a2InterruptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 2, 1, 21), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InterruptMode.setStatus('mandatory')
if mibBuilder.loadTexts: a2InterruptMode.setDescription('Interrupt Mode - Edge/Level.')
tLogicalDriveInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3), )
if mibBuilder.loadTexts: tLogicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalDriveInformation.setDescription('Provides information about Logical Drive Configuration.')
eLogicalDriveInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a3ControllerNumber"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a3LogicalDriveNumber"))
if mibBuilder.loadTexts: eLogicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalDriveInformation.setDescription('')
a3ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ControllerNumber.setDescription('Controller Number - used as a key.')
a3LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3LogicalDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3LogicalDriveNumber.setDescription('Logical Drive Number - used as a Key.')
a3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: a3OperationalState.setDescription('Logical Drive Operational State.')
a3RaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3RaidLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a3RaidLevel.setDescription('RAID Level associated with Logical Drive.')
a3WritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3WritePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a3WritePolicy.setDescription('Write Cache Policy associated with Logical Drive.')
a3SizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3SizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a3SizeInMb.setDescription('Logical Drive Size - in MB.')
a3StripeSizeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3StripeSizeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: a3StripeSizeInBytes.setDescription('Stripe size associated with Logical Drive. Valid for RAID Levels 0, 5 and 6 only. Value is specifed in bytes.')
a3PhysicalDriveMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 3, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3PhysicalDriveMap.setStatus('mandatory')
if mibBuilder.loadTexts: a3PhysicalDriveMap.setDescription('List of all physical drives that make up this Logical Drive. The information is provided in Channel-Target combination form.')
tPhyicalDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4), )
if mibBuilder.loadTexts: tPhyicalDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tPhyicalDeviceInformation.setDescription('SCSI Physical Device Information.')
ePhyicalDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a4ControllerNumber"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a4ScsiBusId"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a4ScsiTargetId"))
if mibBuilder.loadTexts: ePhyicalDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: ePhyicalDeviceInformation.setDescription('')
a4ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4ControllerNumber.setDescription('Controller Number - used as a key')
a4ScsiBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ScsiBusId.setStatus('mandatory')
if mibBuilder.loadTexts: a4ScsiBusId.setDescription('SCSI Channel Number - used as a key')
a4ScsiTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ScsiTargetId.setStatus('mandatory')
if mibBuilder.loadTexts: a4ScsiTargetId.setDescription('SCSI Physical Device Target Id - used as a key')
a4OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: a4OperationalState.setDescription('SCSI Physical Device State.')
a4VendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4VendorId.setStatus('mandatory')
if mibBuilder.loadTexts: a4VendorId.setDescription('Physical Device Vendor Id - from SCSI Inquiry Info.')
a4ProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ProductId.setStatus('mandatory')
if mibBuilder.loadTexts: a4ProductId.setDescription('Physical Device Product Id - from SCSI Inquiry Info.')
a4ProductRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ProductRevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a4ProductRevisionLevel.setDescription('Physical Device Product Revision Level - from SCSI Inquiry Info.')
a4SizeInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SizeInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a4SizeInMb.setDescription('Size in MB - from SCSI Read Capacity Data.')
a4DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 9), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: a4DeviceType.setDescription('SCSI Device Type - from SCSI Inquiry Information.')
a4SoftErrorsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 10), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SoftErrorsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a4SoftErrorsCount.setDescription('Number of Soft Errors.')
a4HardErrorsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 11), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4HardErrorsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a4HardErrorsCount.setDescription('Number of Hard Errors.')
a4ParityErrorsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 12), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ParityErrorsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a4ParityErrorsCount.setDescription('Number of Parity Errors.')
a4MiscErrorsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 4, 1, 13), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4MiscErrorsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a4MiscErrorsCount.setDescription('Number of Misc Errors.')
tMylexDac960ComponentInstrumentationInfo = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 5), )
if mibBuilder.loadTexts: tMylexDac960ComponentInstrumentationInfo.setStatus('mandatory')
if mibBuilder.loadTexts: tMylexDac960ComponentInstrumentationInfo.setDescription('MDAC CI Software Version Information.')
eMylexDac960ComponentInstrumentationInfo = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 5, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMylexDac960ComponentInstrumentationInfo.setStatus('mandatory')
if mibBuilder.loadTexts: eMylexDac960ComponentInstrumentationInfo.setDescription('')
a5CiRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 5, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5CiRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a5CiRevision.setDescription('CI Software Revision Information.')
a5CiBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 5, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5CiBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: a5CiBuildDate.setDescription('CI Software Build Date Information - date/month/year format.')
a5MdacDeviceDriverRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MdacDeviceDriverRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a5MdacDeviceDriverRevision.setDescription('Mylex DAC960 Controller Device driver Revision Info.')
a5MdacDeviceDriverBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 5, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MdacDeviceDriverBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: a5MdacDeviceDriverBuildDate.setDescription('Mylex DAC960 Device Driver Build Date Information - date/month/ ear format.')
tLogicalDriveStatistics = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6), )
if mibBuilder.loadTexts: tLogicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalDriveStatistics.setDescription('Logical Drive Performance Statistics')
eLogicalDriveStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a6ControllerNumber"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a6LogicalDriveNumber"))
if mibBuilder.loadTexts: eLogicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalDriveStatistics.setDescription('')
a6ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a6ControllerNumber.setDescription('Controller Number - used as a key.')
a6LogicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6LogicalDriveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a6LogicalDriveNumber.setDescription('Logical Drive Number - used as a key.')
a6ReadRequestsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ReadRequestsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a6ReadRequestsCount.setDescription('Number of Read Requests.')
a6AmountOfDataReadInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6AmountOfDataReadInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a6AmountOfDataReadInMb.setDescription('Amount of Data Read - in MB.')
a6WriteRequestsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6WriteRequestsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a6WriteRequestsCount.setDescription('Number of Write Requests.')
a6AmountOfDataWrittenInMb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1, 6), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6AmountOfDataWrittenInMb.setStatus('mandatory')
if mibBuilder.loadTexts: a6AmountOfDataWrittenInMb.setDescription('Amount of data written - in MB.')
a6ReadCacheHit = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 6, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6ReadCacheHit.setStatus('mandatory')
if mibBuilder.loadTexts: a6ReadCacheHit.setDescription('Read Cache Hit Rate.')
tPhysicalDriveStatistics = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7), )
if mibBuilder.loadTexts: tPhysicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalDriveStatistics.setDescription('Physical Drive Performance Statistics')
ePhysicalDriveStatistics = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a7ControllerNumber"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a7ScsiBusId"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a7ScsiTargetId"))
if mibBuilder.loadTexts: ePhysicalDriveStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalDriveStatistics.setDescription('')
a7ControllerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ControllerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a7ControllerNumber.setDescription('Controller Number - used as a key.')
a7ScsiBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ScsiBusId.setStatus('mandatory')
if mibBuilder.loadTexts: a7ScsiBusId.setDescription('SCSI Channel Number - used as a key.')
a7ScsiTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ScsiTargetId.setStatus('mandatory')
if mibBuilder.loadTexts: a7ScsiTargetId.setDescription('SCSI Target Device Id - used as a key.')
a7ReadRequestsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ReadRequestsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a7ReadRequestsCount.setDescription('Number of Read Requests.')
a7AmountOfDataReadInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1, 5), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7AmountOfDataReadInKb.setStatus('mandatory')
if mibBuilder.loadTexts: a7AmountOfDataReadInKb.setDescription('Amount of Data Read - in KB.')
a7WriteRequestsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1, 6), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7WriteRequestsCount.setStatus('mandatory')
if mibBuilder.loadTexts: a7WriteRequestsCount.setDescription('Number of Write Requests.')
a7AmountOfDataWrittenInKb = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 7, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7AmountOfDataWrittenInKb.setStatus('mandatory')
if mibBuilder.loadTexts: a7AmountOfDataWrittenInKb.setDescription('Amount of data written - in KB.')
tErrorControl = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98), )
if mibBuilder.loadTexts: tErrorControl.setStatus('mandatory')
if mibBuilder.loadTexts: tErrorControl.setDescription('Indication control and status for the parent group')
eErrorControl = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"), (0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a98Selfid"))
if mibBuilder.loadTexts: eErrorControl.setStatus('mandatory')
if mibBuilder.loadTexts: eErrorControl.setDescription('')
a98Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a98Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a98Selfid.setDescription('Instance Identifier. A unique number that identifies this row.')
a98NumberOfFatalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a98NumberOfFatalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a98NumberOfFatalErrors.setDescription('Count of all fatal errors since system startup.')
a98NumberOfMajorErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a98NumberOfMajorErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a98NumberOfMajorErrors.setDescription('Count of all major errors since system startup.')
a98NumberOfWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a98NumberOfWarnings.setStatus('mandatory')
if mibBuilder.loadTexts: a98NumberOfWarnings.setDescription('Count of all warning errors since system startup.')
a98ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vOk", 0), ("vWarning", 1), ("vMajor", 2), ("vFatal", 3), ("vInformational", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a98ErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a98ErrorStatus.setDescription('current error status')
a98ErrorStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vPost", 0), ("vRuntime", 1), ("vDiagnosticTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a98ErrorStatusType.setStatus('mandatory')
if mibBuilder.loadTexts: a98ErrorStatusType.setDescription('Indicates the type of detection that set the current error status.')
a98AlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 98, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a98AlarmGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: a98AlarmGeneration.setDescription('Controls indication generation for errors.')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 99, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibName.setDescription('The MIB name that defines this MIF')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibOid.setDescription('The MIB OID that corresponds to this MIF')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a99DisableTrap.setDescription('This attribute can be changed to disable sending of traps from this component')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tTrapGroup.setDescription('This group defines attributes needed for Trap definition. This group does not exist in MIF file')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1), ).setIndexNames((0, "MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eTrapGroup.setDescription('')
a9999ErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorTime.setDescription('The Date & Time when the error occured')
a9999ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorStatus.setDescription('Error Status Code')
a9999ErrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorGroupId.setDescription('Group ID of the errorControl Group')
a9999ErrorInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorInstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorInstanceId.setDescription('Instance ID of the errorControl Group')
a9999ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ComponentId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ComponentId.setDescription('Component ID of the component that caused this error')
a9999GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999GroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999GroupId.setDescription('Group ID of the Group that caused this error')
a9999InstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999InstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999InstanceId.setDescription('Instance ID of the Group that caused this error')
a9999VendorCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode1.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorCode1.setDescription('Vendor specific code 1')
a9999VendorCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode2.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorCode2.setDescription('Vendor specific code 2')
a9999VendorText = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorText.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorText.setDescription('Vendor specific octet string info')
a9999ParentGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ParentGroupId.setDescription('Group ID of parent of Group that caused this error')
a9999ParentInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentInstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ParentInstanceId.setDescription('Instance ID of parent of Group that caused this error')
mdacEventError = NotificationType((1, 3, 6, 1, 4, 1, 1608, 3, 2, 1, 9999, 1) + (0,1)).setObjects(("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999ErrorTime"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999ErrorStatus"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999ErrorGroupId"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999ErrorInstanceId"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999ComponentId"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999GroupId"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999InstanceId"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999VendorCode1"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999VendorCode2"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999VendorText"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999ParentGroupId"), ("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", "a9999ParentInstanceId"))
if mibBuilder.loadTexts: mdacEventError.setDescription('DMI Service Layer generated event for Mylex Raid')
mibBuilder.exportSymbols("MYLEXDAC960SCSIRAIDCONTROLLER-MIB", a6AmountOfDataReadInMb=a6AmountOfDataReadInMb, a4VendorId=a4VendorId, a6ReadRequestsCount=a6ReadRequestsCount, a98ErrorStatusType=a98ErrorStatusType, DmiDateX=DmiDateX, a3OperationalState=a3OperationalState, a2SlotNumber=a2SlotNumber, a9999VendorCode2=a9999VendorCode2, a4SizeInMb=a4SizeInMb, a7ControllerNumber=a7ControllerNumber, eLogicalDriveStatistics=eLogicalDriveStatistics, a9999VendorText=a9999VendorText, a7AmountOfDataWrittenInKb=a7AmountOfDataWrittenInKb, a98NumberOfMajorErrors=a98NumberOfMajorErrors, a7WriteRequestsCount=a7WriteRequestsCount, a5MdacDeviceDriverBuildDate=a5MdacDeviceDriverBuildDate, a3ControllerNumber=a3ControllerNumber, a3SizeInMb=a3SizeInMb, a9999GroupId=a9999GroupId, a98ErrorStatus=a98ErrorStatus, tControllerInformation=tControllerInformation, a1SerialNumber=a1SerialNumber, a9999ComponentId=a9999ComponentId, a4HardErrorsCount=a4HardErrorsCount, a7ScsiBusId=a7ScsiBusId, a99MibOid=a99MibOid, eMylexDac960ComponentInstrumentationInfo=eMylexDac960ComponentInstrumentationInfo, a1Product=a1Product, a3PhysicalDriveMap=a3PhysicalDriveMap, a7AmountOfDataReadInKb=a7AmountOfDataReadInKb, a3LogicalDriveNumber=a3LogicalDriveNumber, eErrorControl=eErrorControl, a9999ErrorInstanceId=a9999ErrorInstanceId, tMiftomib=tMiftomib, a2OperationalState=a2OperationalState, a98NumberOfWarnings=a98NumberOfWarnings, ePhysicalDriveStatistics=ePhysicalDriveStatistics, a2RebuildRate=a2RebuildRate, DmiComponentIndex=DmiComponentIndex, a3StripeSizeInBytes=a3StripeSizeInBytes, a2InterruptVectorNumber=a2InterruptVectorNumber, a98NumberOfFatalErrors=a98NumberOfFatalErrors, eMiftomib=eMiftomib, a4MiscErrorsCount=a4MiscErrorsCount, v2=v2, tMylexDac960ComponentInstrumentationInfo=tMylexDac960ComponentInstrumentationInfo, a9999ParentInstanceId=a9999ParentInstanceId, a2SystemBusNumber=a2SystemBusNumber, a9999VendorCode1=a9999VendorCode1, a3WritePolicy=a3WritePolicy, tPhyicalDeviceInformation=tPhyicalDeviceInformation, tErrorControl=tErrorControl, ePhyicalDeviceInformation=ePhyicalDeviceInformation, a2EpromSizeInKb=a2EpromSizeInKb, a4ProductId=a4ProductId, a98Selfid=a98Selfid, a2BusType=a2BusType, a1Verify=a1Verify, DmiInteger=DmiInteger, a5MdacDeviceDriverRevision=a5MdacDeviceDriverRevision, a4SoftErrorsCount=a4SoftErrorsCount, a2DramSizeInMb=a2DramSizeInMb, a99MibName=a99MibName, a4ProductRevisionLevel=a4ProductRevisionLevel, a4ScsiTargetId=a4ScsiTargetId, a99DisableTrap=a99DisableTrap, a1Version=a1Version, a9999ErrorStatus=a9999ErrorStatus, a9999ErrorGroupId=a9999ErrorGroupId, a2MaximumConcurrentCommands=a2MaximumConcurrentCommands, a6ReadCacheHit=a6ReadCacheHit, tLogicalDriveStatistics=tLogicalDriveStatistics, a4ControllerNumber=a4ControllerNumber, dmtfGroups=dmtfGroups, a4ScsiBusId=a4ScsiBusId, eComponentid=eComponentid, a1Manufacturer=a1Manufacturer, tComponentid=tComponentid, DmiDisplaystring=DmiDisplaystring, a5CiBuildDate=a5CiBuildDate, a9999ErrorTime=a9999ErrorTime, a6AmountOfDataWrittenInMb=a6AmountOfDataWrittenInMb, a2MaximumDataTransferSizePerIoRequestInK=a2MaximumDataTransferSizePerIoRequestInK, a2PhysicalSectorSizeInBytes=a2PhysicalSectorSizeInBytes, a6WriteRequestsCount=a6WriteRequestsCount, a2MaximumTaggedRequests=a2MaximumTaggedRequests, a4DeviceType=a4DeviceType, DmiCounter=DmiCounter, a4ParityErrorsCount=a4ParityErrorsCount, tPhysicalDriveStatistics=tPhysicalDriveStatistics, a6LogicalDriveNumber=a6LogicalDriveNumber, a2InterruptMode=a2InterruptMode, a1Installation=a1Installation, mib=mib, a7ReadRequestsCount=a7ReadRequestsCount, a2LogicalSectorSizeInBytes=a2LogicalSectorSizeInBytes, tTrapGroup=tTrapGroup, eLogicalDriveInformation=eLogicalDriveInformation, a4OperationalState=a4OperationalState, a2ConfiguredChannels=a2ConfiguredChannels, eControllerInformation=eControllerInformation, mdacEventError=mdacEventError, a2MaximumTargetsPerChannel=a2MaximumTargetsPerChannel, tLogicalDriveInformation=tLogicalDriveInformation, mylex=mylex, a2FirmwareRevision=a2FirmwareRevision, a2MaximumLogicalDrives=a2MaximumLogicalDrives, a5CiRevision=a5CiRevision, a6ControllerNumber=a6ControllerNumber, a7ScsiTargetId=a7ScsiTargetId, a98AlarmGeneration=a98AlarmGeneration, eTrapGroup=eTrapGroup, a2ActualChannels=a2ActualChannels, a9999InstanceId=a9999InstanceId, a2CacheLineSizeInBytes=a2CacheLineSizeInBytes, a2ControllerNumber=a2ControllerNumber, a3RaidLevel=a3RaidLevel, a9999ParentGroupId=a9999ParentGroupId)
