#
# PySNMP MIB module APPIAN-PFOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PFOT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcNodeId, acPport, AcSlotNumber, AcPortNumber = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcNodeId", "acPport", "AcSlotNumber", "AcPortNumber")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, IpAddress, Bits, MibIdentifier, Unsigned32, Counter64, NotificationType, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "IpAddress", "Bits", "MibIdentifier", "Unsigned32", "Counter64", "NotificationType", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
acPfot = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7))
acPfot.setRevisions(('1900-02-23 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acPfot.setRevisionsDescriptions(('Draft revision, Engineering use only.',))
if mibBuilder.loadTexts: acPfot.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acPfot.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acPfot.setContactInfo('Douglas Theriault')
if mibBuilder.loadTexts: acPfot.setDescription('Appian Communications Pluggable Fiber Optic Transceiver MIB which contains the configuration attributes for use of pluggable fiber optic transceiver technology in the OSAP product.')
class AcPfotType(TextualConvention, Integer32):
    description = 'The type of transceiver in use on a port expressed as an integer enumeration. This name includes an indication of the technology supported (Gigabit, Sonet etc), and reach (short, intermediate, or long). '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-present", 0), ("sfp-gbe-sx", 1), ("sfp-gbe-lx-sr", 2), ("sfp-gbe-lx-ir", 3), ("sfp-gbe-lx-lr", 4))

acPfotTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1), )
if mibBuilder.loadTexts: acPfotTable.setStatus('current')
if mibBuilder.loadTexts: acPfotTable.setDescription('A table containing the configuration parameters for pluggable fiber optic transceiver in use on a port. The index keys used in this table (node-id.slot.port) are mapped to ifIndex under the appian(2785).interfaces(4).ifTable(1) group. The configuration table will be automatically created by the module driver, regardless of if a transceiver exists on the port or not.')
acPfotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1), ).setIndexNames((0, "APPIAN-PFOT-MIB", "acPfotNodeId"), (0, "APPIAN-PFOT-MIB", "acPfotSlot"), (0, "APPIAN-PFOT-MIB", "acPfotPort"))
if mibBuilder.loadTexts: acPfotEntry.setStatus('current')
if mibBuilder.loadTexts: acPfotEntry.setDescription('A row which contains the configuration parameters for an physical port equipped with pluggable fiber optic transceiver technology. These rows are automatically instantiated by default.')
acPfotNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acPfotNodeId.setStatus('current')
if mibBuilder.loadTexts: acPfotNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acPfotSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acPfotSlot.setStatus('current')
if mibBuilder.loadTexts: acPfotSlot.setDescription('The slot number within the chassis where this module entry resides.')
acPfotPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acPfotPort.setStatus('current')
if mibBuilder.loadTexts: acPfotPort.setDescription('The port number on the module which is equipped with a pluggable fiber optic transceiver.')
acPfotCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 4), AcPfotType().clone('not-present')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acPfotCfgType.setStatus('current')
if mibBuilder.loadTexts: acPfotCfgType.setDescription('The desired configured type of transceiver to be used on this port. By default, set to not-present.')
acPfotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 5), AcPfotType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPfotType.setStatus('current')
if mibBuilder.loadTexts: acPfotType.setDescription('The current transceiver type detected on this port.')
acPfotConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("sc", 1), ("lc", 2), ("mtrj", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPfotConnectorType.setStatus('current')
if mibBuilder.loadTexts: acPfotConnectorType.setDescription('The current type of connector detected on the tranceiver installed in this port.')
acPfotVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPfotVendorName.setStatus('current')
if mibBuilder.loadTexts: acPfotVendorName.setDescription('A string represetning the name of the Vendor that manufactured the transceiver installed in this port.')
acPfotVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPfotVendorPartNumber.setStatus('current')
if mibBuilder.loadTexts: acPfotVendorPartNumber.setDescription('A string representing the vendor part number used to identify the transceiver installed in this port.')
acPfotTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 0))
acPfotCfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 7, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PFOT-MIB", "acPfotNodeId"), ("APPIAN-PFOT-MIB", "acPfotSlot"), ("APPIAN-PFOT-MIB", "acPfotPort"), ("APPIAN-PFOT-MIB", "acPfotCfgType"), ("APPIAN-PFOT-MIB", "acPfotType"))
if mibBuilder.loadTexts: acPfotCfgErrorTrap.setStatus('current')
if mibBuilder.loadTexts: acPfotCfgErrorTrap.setDescription('The transeiver type for a port is different than the type configured for use.')
mibBuilder.exportSymbols("APPIAN-PFOT-MIB", AcPfotType=AcPfotType, acPfotSlot=acPfotSlot, PYSNMP_MODULE_ID=acPfot, acPfotVendorName=acPfotVendorName, acPfotPort=acPfotPort, acPfotVendorPartNumber=acPfotVendorPartNumber, acPfotTable=acPfotTable, acPfotCfgErrorTrap=acPfotCfgErrorTrap, acPfot=acPfot, acPfotCfgType=acPfotCfgType, acPfotTraps=acPfotTraps, acPfotConnectorType=acPfotConnectorType, acPfotType=acPfotType, acPfotEntry=acPfotEntry, acPfotNodeId=acPfotNodeId)
