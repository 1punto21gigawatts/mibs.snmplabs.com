#
# PySNMP MIB module UTM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UTM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter64, TimeTicks, ObjectIdentity, Unsigned32, ModuleIdentity, NotificationType, Bits, MibIdentifier, Gauge32, Integer32, NotificationType, IpAddress, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter64", "TimeTicks", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "NotificationType", "Bits", "MibIdentifier", "Gauge32", "Integer32", "NotificationType", "IpAddress", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniUTM = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19))
utmApplTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplTabNum.setDescription('The number of entries in the table utmApplTable')
utmApplTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 2), )
if mibBuilder.loadTexts: utmApplTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplTable.setDescription('Table of UTM applications')
utmApplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmApplIndex"))
if mibBuilder.loadTexts: utmApplEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplEntry.setDescription('An entry in the table')
utmApplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmApplTabNum')
utmApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplName.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplName.setDescription('Name of the UTM application')
utmApplStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplStatus.setDescription('Status of the UTM application is either up or down')
utmApplSharedMemKey = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplSharedMemKey.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplSharedMemKey.setDescription('Shared memory key of the UTM application')
utmApplSharedMemSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplSharedMemSegSize.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplSharedMemSegSize.setDescription('Size of the shared memory segement of the UTM application')
utmApplSemId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplSemId.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplSemId.setDescription('Semaphore ID number of the UTM application')
utmApplHomeDir = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmApplHomeDir.setStatus('mandatory')
if mibBuilder.loadTexts: utmApplHomeDir.setDescription('Home directory of the UTM application')
utmApplicationData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3))
utmMainData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 1))
utmStatData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2))
utmSyspData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3))
utmPtermData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4))
utmLtermData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5))
utmTacData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6))
utmTacclassData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7))
utmUserData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8))
utmConData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9))
utmLpapData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10))
utmPoolData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11))
utmLsesData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12))
utmLtacData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13))
utmOsiAssData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14))
utmOsiConData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15))
utmOsiLpapData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16))
utmMiscData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 17))
utmMainApplName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmMainApplName.setStatus('mandatory')
if mibBuilder.loadTexts: utmMainApplName.setDescription('Name of the selected UTM application')
utmMainBCAMAppl = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmMainBCAMAppl.setStatus('mandatory')
if mibBuilder.loadTexts: utmMainBCAMAppl.setDescription('BCAM application name of the selected UTM application')
utmMainUTMversion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmMainUTMversion.setStatus('mandatory')
if mibBuilder.loadTexts: utmMainUTMversion.setDescription('UTM version')
utmMainApplStartStop = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmMainApplStartStop.setStatus('mandatory')
if mibBuilder.loadTexts: utmMainApplStartStop.setDescription('Reading: status of selected UTM application; writing: start (START) or terminate (STOP) selected UTM application')
utmMainApplHomeDir = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmMainApplHomeDir.setStatus('mandatory')
if mibBuilder.loadTexts: utmMainApplHomeDir.setDescription('Home directory of the selected application')
utmMainSubagentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmMainSubagentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: utmMainSubagentVersion.setDescription('Version number of the SNMP subagent and the type of operating system')
utmStatStartDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatStartDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatStartDateAndTime.setDescription('Date and time of the last cold start of the application')
utmStatStartDateAndTimeString = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatStartDateAndTimeString.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatStartDateAndTimeString.setDescription('Date and time of the last cold start of the application')
utmStatTermInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatTermInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatTermInMsgs.setDescription('Number of messages entered on all terminals since the completion of the last hour')
utmStatTermOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatTermOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatTermOutMsgs.setDescription('Number of messages issued on all terminals since the completion of the last hour')
utmStatCurrTasks = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatCurrTasks.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatCurrTasks.setDescription('Number of current tasks in this application')
utmStatConnUsers = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatConnUsers.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatConnUsers.setDescription('Number of connected users')
utmStatOpenDialConv = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatOpenDialConv.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatOpenDialConv.setDescription('Number of active dialog conversations ')
utmStatOpenAsynConv = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatOpenAsynConv.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatOpenAsynConv.setDescription('Number of active asynchronous conversations ')
utmStatDialTAperSec = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatDialTAperSec.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatDialTAperSec.setDescription('Number of dialog transactions per second')
utmStatAsynTAperSec = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatAsynTAperSec.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatAsynTAperSec.setDescription('Number of asynchronous transactions per second')
utmStatDialStepSec = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatDialStepSec.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatDialStepSec.setDescription('Number of dialog steps per second')
utmStatMaxPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatMaxPoolSize.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatMaxPoolSize.setDescription('Maximum occupancy of the pagepool in percent')
utmStatActPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatActPoolSize.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatActPoolSize.setDescription('Current occupancy of the pagepool in percent')
utmStatAvgPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatAvgPoolSize.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatAvgPoolSize.setDescription('Average occupancy of the pagepool in percent')
utmStatCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatCacheHitRate.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatCacheHitRate.setDescription('Hit rate in percent when searching a cache page ')
utmStatCacheWaits = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatCacheWaits.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatCacheWaits.setDescription('Percentage of cache buffer requests leading to a waiting time')
utmStatUnprocAtacs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatUnprocAtacs.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatUnprocAtacs.setDescription('Number of asynchronous transaction jobs, which are not yet processed')
utmStatUnprocPrints = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatUnprocPrints.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatUnprocPrints.setDescription('Number of waiting print jobs')
utmStatWaitDPUTs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatWaitDPUTs.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatWaitDPUTs.setDescription('Number of pending time driven jobs')
utmStatAbTermConv = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatAbTermConv.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatAbTermConv.setDescription('Number of abnormally terminated conversations')
utmStatResourcWaits = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatResourcWaits.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatResourcWaits.setDescription('Relation (per mille) between the number of resources requests with waiting and the total number of resources requests')
utmStatDeadlocks = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatDeadlocks.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatDeadlocks.setDescription('Number of recognized and removed deadlocks')
utmStatPeriodWrites = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatPeriodWrites.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatPeriodWrites.setDescription('Number of periodic writes')
utmStatPagesPWrite = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatPagesPWrite.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatPagesPWrite.setDescription('Number of 2 KB pages being averagely saved by a periodic write')
utmStatLogWrites = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatLogWrites.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatLogWrites.setDescription('Number of write jobs to the user log file since the completion of the last hour')
utmStatActJR = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatActJR.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatActJR.setDescription('Current number of job receiving conversations, which are addressed at the same time')
utmStatMaxJR = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmStatMaxJR.setStatus('mandatory')
if mibBuilder.loadTexts: utmStatMaxJR.setDescription('Maximum number of job receiving conversations, which have been addressed at the same time since KDCDEF generation')
utmSyspAccount = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspAccount.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspAccount.setDescription('UTM accounting is either activated (ON) or not activated (OFF)')
utmSyspCalcAccount = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspCalcAccount.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspCalcAccount.setDescription('The calculation phase of UTM accounting is either activated (ON) or not activated (OFF)')
utmSyspSM2 = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspSM2.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspSM2.setDescription('The delivery of data to SM2 is either activated (ON) or not activated (OFF)')
utmSyspKDCMON = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspKDCMON.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspKDCMON.setDescription('KDCMON is either activated (ON) or not activated (OFF)')
utmSyspTestmode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspTestmode.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspTestmode.setDescription('Test mode is either activated (ON) or not activated (OFF)')
utmSyspMaxPagRate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspMaxPagRate.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspMaxPagRate.setDescription('Percentage of cache pages which are to be written to KDCFILE in case of a bottleneck')
utmSyspProgFGG = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspProgFGG.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspProgFGG.setDescription('read: Number of the current file generation of the program write: -1 => old (load lower program generation) +1 => new (load higher program generation)')
utmSyspTermWait = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspTermWait.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspTermWait.setDescription('Maximum elapse time (seconds) between terminal output and the following input of the terminal user during a multi step conversation')
utmSyspUsLogFGG = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspUsLogFGG.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspUsLogFGG.setDescription('Number of the current file generation of the user log file')
utmSyspResWaitTA = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspResWaitTA.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspResWaitTA.setDescription('Maximum waiting time in seconds for a resource locked by another transaction')
utmSyspMaxTasks = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspMaxTasks.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspMaxTasks.setDescription('Maximum number of tasks which are allowed in this application')
utmSyspResWaitPr = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspResWaitPr.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspResWaitPr.setDescription('Maximum waiting time in seconds for a resource locked by another process')
utmSyspCurrTasks = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmSyspCurrTasks.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspCurrTasks.setDescription('Number of current work processes of the application')
utmSyspConRTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspConRTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspConRTime.setDescription('Cycle in minutes, in which UTM retries to create a logical connection')
utmSyspMaxAsynTasks = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspMaxAsynTasks.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspMaxAsynTasks.setDescription('Maximum number of tasks for asynchronous programs')
utmSyspLogAckwait = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmSyspLogAckwait.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspLogAckwait.setDescription('Maximum waiting time in seconds for a print or transport acknowledgement')
utmSyspPTCTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspPTCTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspPTCTime.setDescription('Maximum waiting time in seconds of a job receiving conversation in PTC for acknowledgement')
utmSyspConcTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspConcTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspConcTime.setDescription('Time in seconds permitted for creation of a session or an association')
utmSyspPGWTTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspPGWTTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspPGWTTime.setDescription('Maximum time in seconds permitted for the KDCS call PGWT')
utmSyspTasksWaitPGWT = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmSyspTasksWaitPGWT.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspTasksWaitPGWT.setDescription('Current number of tasks being in a wait state by a PGWT call')
utmSyspTasksinPGWT = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 3, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmSyspTasksinPGWT.setStatus('mandatory')
if mibBuilder.loadTexts: utmSyspTasksinPGWT.setDescription('Maximum number of task for PGWT calls')
utmPtermTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermTabNum.setDescription('The number of entries in the table utmPtermTable')
utmPtermTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2), )
if mibBuilder.loadTexts: utmPtermTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermTable.setDescription('Table of all physical terminals')
utmPtermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmPtermIndex"))
if mibBuilder.loadTexts: utmPtermEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermEntry.setDescription('An entry in the table')
utmPtermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmPtermTabNum')
utmPtermName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermName.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermName.setDescription('Name of the chosen physical terminal')
utmPtermProname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmPtermProname.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermProname.setDescription('Processor name of the physical terminal (or blank for local devices)')
utmPtermLterm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmPtermLterm.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermLterm.setDescription('Name of the logical UTM terminal that belongs to the physical terminal')
utmPtermBCAMAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmPtermBCAMAppl.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermBCAMAppl.setDescription('BCAM name of the UTM application')
utmPtermPtyp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermPtyp.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermPtyp.setDescription('Partner type of the UTM terminal')
utmPtermStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmPtermStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermStatus.setDescription('The UTM terminal is either locked (off) or unlocked (on)')
utmPtermConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("waiting", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmPtermConnected.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermConnected.setDescription('The UTM terminal is either connected (yes) or not connected (no) or waiting for connection')
utmPtermConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automaticCon", 1), ("terminalPool", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmPtermConnectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermConnectStatus.setDescription("Status = 'A' means automatic connection at application start, status = 'P' means a terminalpool connection")
utmPtermConnectForced = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermConnectForced.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermConnectForced.setDescription('Like automatic connection but also forces a existing connection to the terminal to be cut')
utmPtermConnectMultiplexed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermConnectMultiplexed.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermConnectMultiplexed.setDescription('The terminal uses either a multiplex connection or not')
utmPtermConTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermConTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermConTime.setDescription('Duration of existing connection in minutes')
utmPtermLett = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermLett.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermLett.setDescription('Number of messages input and output at the terminal since the start of the application')
utmPtermConb = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPtermConb.setStatus('mandatory')
if mibBuilder.loadTexts: utmPtermConb.setDescription('Number of breakdowns of the physical or virtual connection between this terminal and the application since the start of the application')
utmLtermTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermTabNum.setDescription('The number of entries in the table utmLtermTable')
utmLtermTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2), )
if mibBuilder.loadTexts: utmLtermTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermTable.setDescription('Table of all logical UTM terminals')
utmLtermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmLtermIndex"))
if mibBuilder.loadTexts: utmLtermEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermEntry.setDescription('An entry in the table')
utmLtermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmLtermTabNum')
utmLtermName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermName.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermName.setDescription('Name of the chosen logical UTM terminal')
utmLtermPterm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLtermPterm.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermPterm.setDescription('Name of the physical terminal that belongs to the logical UTM terminal')
utmLtermUser = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermUser.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermUser.setDescription('Login name of the user currently connected to the logical UTM terminal')
utmLtermKset = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermKset.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermKset.setDescription('Key set of the UTM terminal')
utmLtermLock = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermLock.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermLock.setDescription('Lock of the UTM-terminal')
utmLtermUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dialog", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermUsageType.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermUsageType.setDescription("Type is 'D' (dialog terminal) or 'O' (output terminal)")
utmLtermUsageBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermUsageBundle.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermUsageBundle.setDescription("The UTM terminal is a pool ('bundle') if 'B' is set")
utmLtermUsageTermPool = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermUsageTermPool.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermUsageTermPool.setDescription("The UTM terminal is generated for a terminal pool if 'P' is set")
utmLtermStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLtermStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermStatus.setDescription("The status of the UTM terminal is either 'ON' or 'OFF'")
utmLtermOutq = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermOutq.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermOutq.setDescription('Number of messages that still have to be output to this terminal')
utmLtermInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermInCnt.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermInCnt.setDescription("Number of messages input at this terminal since the start of the application; for printers, it's the number of print acknowledgments")
utmLtermSecCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtermSecCnt.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtermSecCnt.setDescription('Number of security violations at this logical terminal since the start of the application')
utmTacTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacTabNum.setDescription('The number of entries in the table utmTacTable')
utmTacTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2), )
if mibBuilder.loadTexts: utmTacTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacTable.setDescription('Table including infos about all transaction codes')
utmTacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmTacIndex"))
if mibBuilder.loadTexts: utmTacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacEntry.setDescription('An entry in the table')
utmTacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmTacTabNum')
utmTacName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacName.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacName.setDescription('Name of the chosen transaction code')
utmTacLock = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacLock.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacLock.setDescription('Lock of the transaction code (0 through 255)')
utmTacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("halt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTacStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacStatus.setDescription("The status of the transaction code is either 'on', 'off' or locked ('halt')")
utmTacTcl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacTcl.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacTcl.setDescription('TAC class of this transaction code')
utmTacInq = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacInq.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacInq.setDescription('Number of messages still to be processed by the program unit run designated by transaction code')
utmTacUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacUsed.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacUsed.setDescription("Number of program unit runs with this transaction code processed since the initial start of the application (only for asynchronous TAC's)")
utmTacError = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacError.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacError.setDescription('Number of program unit runs with this transaction code terminated with errors since the initial start of the application')
utmTacDbcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacDbcnt.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacDbcnt.setDescription("Always '0' if XA-interface is used")
utmTacElap = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacElap.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacElap.setDescription('Average runtime in milliseconds of program units with this transaction code')
utmTacDbElap = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacDbElap.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacDbElap.setDescription('Average time in milliseconds spent processing the database calls in the program unit runs with this transaction code')
utmTacCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacCpu.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacCpu.setDescription('Average CPU time in milliseconds spent in the UTM program run for processing this transaction code')
utmTacclassTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7, 1), )
if mibBuilder.loadTexts: utmTacclassTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacclassTable.setDescription('Table including infos about all TAC-classes')
utmTacclassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7, 1, 1), ).setIndexNames((0, "UTM-MIB", "utmTacclassNumber"))
if mibBuilder.loadTexts: utmTacclassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacclassEntry.setDescription('An entry in the table')
utmTacclassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacclassNumber.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacclassNumber.setDescription('TAC class number')
utmTacclassTasks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTacclassTasks.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacclassTasks.setDescription('Maximum number of tasks that can currently work for a specific TAC class')
utmTacclassWtMesg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacclassWtMesg.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacclassWtMesg.setDescription('Number of messages for a specific TAC class currently buffered and not yet processed')
utmTacclassAvgWtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacclassAvgWtTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacclassAvgWtTime.setDescription('Average wait times in milliseconds for all dialog TAC classes (1 through 8)')
utmTacclassPGWT = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmTacclassPGWT.setStatus('mandatory')
if mibBuilder.loadTexts: utmTacclassPGWT.setDescription('Indicates whether program units containing a PGWT call can run in a specific TAC class')
utmUserTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserTabNum.setDescription('The number of entries in the table utmUserTable')
utmUserTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2), )
if mibBuilder.loadTexts: utmUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserTable.setDescription('Table including infos about all users')
utmUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmUserIndex"))
if mibBuilder.loadTexts: utmUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserEntry.setDescription('An entry in the table')
utmUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmUserTabNum')
utmUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserName.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserName.setDescription('Name of the user')
utmUserKset = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserKset.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserKset.setDescription('Key set assigned to users login name')
utmUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmUserStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserStatus.setDescription('Login name is either locked (off) or unlocked (on)')
utmUserInVg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserInVg.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserInVg.setDescription('Determines if the user is currently processing a conversation')
utmUserNrTacs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserNrTacs.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserNrTacs.setDescription('Number of transaction jobs entered by the user since the initial start of the application')
utmUserCpuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserCpuTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserCpuTime.setDescription('Number of seconds spent in processing transaction jobs for the user (excluding database calls)')
utmUserSecCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserSecCnt.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserSecCnt.setDescription('Number of security violations for the login name since the start of the application')
utmUserLterm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 8, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmUserLterm.setStatus('mandatory')
if mibBuilder.loadTexts: utmUserLterm.setDescription('Name of the logical terminal through witch the user of the UTM application logged on')
utmConTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmConTabNum.setDescription('The number of entries in the table utmConTable')
utmConTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2), )
if mibBuilder.loadTexts: utmConTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmConTable.setDescription('Table including infos about all connections')
utmConEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmConIndex"))
if mibBuilder.loadTexts: utmConEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmConEntry.setDescription('An entry in the table')
utmConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmConIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmConTabNum')
utmConName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConName.setStatus('mandatory')
if mibBuilder.loadTexts: utmConName.setDescription('Name of the connection')
utmConProname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConProname.setStatus('mandatory')
if mibBuilder.loadTexts: utmConProname.setDescription('Processor name')
utmConLpap = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConLpap.setStatus('mandatory')
if mibBuilder.loadTexts: utmConLpap.setDescription('Name of the remote application in the local application')
utmConBcamAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConBcamAppl.setStatus('mandatory')
if mibBuilder.loadTexts: utmConBcamAppl.setDescription('BCAM name of the UTM application')
utmConStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmConStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmConStatus.setDescription('A connection to the remote application exists or can be set up (on), or cannot be set up (off)')
utmConConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("waiting", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmConConnected.setStatus('mandatory')
if mibBuilder.loadTexts: utmConConnected.setDescription('A connection is either established (yes) or not (no) or UTM is just establishing a connection (waiting)')
utmConConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automaticCon", 1), ("noAutomaticCon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmConConnectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmConConnectStatus.setDescription("An 'A' means automatic connection setup at start of application")
utmConConTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConConTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmConConTime.setDescription('Duration of connection in minutes')
utmConLett = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConLett.setStatus('mandatory')
if mibBuilder.loadTexts: utmConLett.setDescription('Number of messages input and output through the connection')
utmConConb = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmConConb.setStatus('mandatory')
if mibBuilder.loadTexts: utmConConb.setDescription('Number of breakdowns of the connection since the start of the application')
utmLpapTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLpapTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapTabNum.setDescription('The number of entries in the table utmLpapTable')
utmLpapTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2), )
if mibBuilder.loadTexts: utmLpapTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapTable.setDescription('Table including infos about all remote applications communicating with LU6.1')
utmLpapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmLpapIndex"))
if mibBuilder.loadTexts: utmLpapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapEntry.setDescription('An entry in the table')
utmLpapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLpapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmLpapTabNum')
utmLpapName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLpapName.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapName.setDescription('Name of the LPAP')
utmLpapKset = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLpapKset.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapKset.setDescription('Key set of the remote application')
utmLpapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLpapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapStatus.setDescription('A connection to the remote application exists or can be set up (on), or cannot be set up (off)')
utmLpapQuiet = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLpapQuiet.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapQuiet.setDescription("A 'Q' means 'quiet', i.e. no more dialog jobs for the remote application are accepted")
utmLpapOutq = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLpapOutq.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapOutq.setDescription('Number of messages that still have to be sent to this remote application')
utmLpapIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLpapIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmLpapIdleTime.setDescription('Time for monitoring the idle state of a session in seconds')
utmPoolTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolTabNum.setDescription('The number of entries in the table utmPoolTable')
utmPoolTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2), )
if mibBuilder.loadTexts: utmPoolTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolTable.setDescription('Table including infos about terminal pools')
utmPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmPoolIndex"))
if mibBuilder.loadTexts: utmPoolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolEntry.setDescription('An entry in the table')
utmPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmPoolTabNum')
utmPoolProname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolProname.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolProname.setDescription('Processor name of the terminal pool')
utmPoolBcamAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolBcamAppl.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolBcamAppl.setDescription('Name of the access point to the transport system which was generated for this terminal pool')
utmPoolPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolPtype.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolPtype.setDescription('Physical terminal type of the terminals that can be connected to the application via this pool')
utmPoolStations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolStations.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolStations.setDescription('Generated maximum number of terminals that can be connected to the application via this pool')
utmPoolStatusOn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmPoolStatusOn.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolStatusOn.setDescription('Maximum number of terminals with STATUS=ON')
utmPoolActCon = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolActCon.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolActCon.setDescription('Number of terminals connected to the application via this pool')
utmPoolMaxCon = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolMaxCon.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolMaxCon.setDescription('Maximum number of terminals that have been simultaneously connected to the application via this terminal pool during this application run')
utmPoolKset = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolKset.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolKset.setDescription('Key set of the terminals of this terminal pool')
utmPoolLock = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmPoolLock.setStatus('mandatory')
if mibBuilder.loadTexts: utmPoolLock.setDescription('Lock of the terminals of this terminal pool')
utmLsesTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesTabNum.setDescription('The number of entries in the table utmLsesTable')
utmLsesTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2), )
if mibBuilder.loadTexts: utmLsesTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesTable.setDescription('Table including infos about the sessions via LU6.1')
utmLsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmLsesIndex"))
if mibBuilder.loadTexts: utmLsesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesEntry.setDescription('An entry in the table')
utmLsesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmLsesTabNum')
utmLsesName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesName.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesName.setDescription('Name of the session in the local application')
utmLsesRses = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesRses.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesRses.setDescription('Name of the session in the remote application')
utmLsesLpap = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesLpap.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesLpap.setDescription('Name of the remote application for which the session is generated')
utmLsesCon = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesCon.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesCon.setDescription('Denotes the transport connection that is set up for the session')
utmLsesProname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesProname.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesProname.setDescription('Processor name')
utmLsesBcamAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesBcamAppl.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesBcamAppl.setDescription('Denotes the transport connection that is set up for the session')
utmLsesAgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 12, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLsesAgUser.setStatus('mandatory')
if mibBuilder.loadTexts: utmLsesAgUser.setDescription('Name of the job-submitting partner for which the session has been reserved')
utmLtacTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtacTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacTabNum.setDescription('The number of entries in the table utmLtacTable')
utmLtacTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2), )
if mibBuilder.loadTexts: utmLtacTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacTable.setDescription('Table including infos about LTACs')
utmLtacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmLtacIndex"))
if mibBuilder.loadTexts: utmLtacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacEntry.setDescription('An entry in the table')
utmLtacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtacIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmLtacTabNum')
utmLtacName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtacName.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacName.setDescription('Name of the LTAC')
utmLtacLock = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtacLock.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacLock.setDescription('Lock of the remote converstation')
utmLtacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLtacStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacStatus.setDescription('The LTAC transaction code is either locked (OFF) or unlocked (ON)')
utmLtacRtac = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtacRtac.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacRtac.setDescription('Name of the transaction code in a remote application')
utmLtacLpap = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtacLpap.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacLpap.setDescription('Name of the remote application in the local application')
utmLtacAccessWait = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLtacAccessWait.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacAccessWait.setDescription('Time in seconds spent waiting for a session or association to be reserved')
utmLtacReplyWait = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmLtacReplyWait.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacReplyWait.setDescription('Time in seconds spent waiting for response from receiving partner')
utmLtacUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 13, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmLtacUsed.setStatus('mandatory')
if mibBuilder.loadTexts: utmLtacUsed.setDescription('Number of jobs issued to this LTAC since the start of the application')
utmOsiAssTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssTabNum.setDescription('The number of entries in the table utmOsiAssTable')
utmOsiAssTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2), )
if mibBuilder.loadTexts: utmOsiAssTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssTable.setDescription('Table including infos about OSI-TP associations')
utmOsiAssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmOsiAssIndex"))
if mibBuilder.loadTexts: utmOsiAssEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssEntry.setDescription('An entry in the table')
utmOsiAssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmOsiAssTabNum')
utmOsiAssName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssName.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssName.setDescription('Name of the OSI association')
utmOsiAssOsiLpap = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssOsiLpap.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssOsiLpap.setDescription('Name of the remote application in the local application for which the association is generated')
utmOsiAssOsiCon = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssOsiCon.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssOsiCon.setDescription('Name of the connection set up to the remote application for the association')
utmOsiAssAgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssAgUser.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssAgUser.setDescription('Name of the job submitter for which the association is reserved')
utmOsiAssConTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssConTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssConTime.setDescription('Duration of the connection in minutes')
utmOsiAssLetters = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 14, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiAssLetters.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiAssLetters.setDescription('Number of messages input and output since the start of the application')
utmOsiConTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiConTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConTabNum.setDescription('The number of entries in the table utmOsiConTable')
utmOsiConTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2), )
if mibBuilder.loadTexts: utmOsiConTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConTable.setDescription('Table including infos about virtual connections for distributed processing via the OSI-TP protocol')
utmOsiConEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmOsiConIndex"))
if mibBuilder.loadTexts: utmOsiConEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConEntry.setDescription('An entry in the table')
utmOsiConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiConIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmOsiConTabNum')
utmOsiConName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiConName.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConName.setDescription('Name of the OSI connection')
utmOsiConOsiLpap = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiConOsiLpap.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConOsiLpap.setDescription('Name of the remote application in the local application')
utmOsiConTsel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiConTsel.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConTsel.setDescription('BCAM application name of the remote OSI-TP partner (transport selector)')
utmOsiConNsel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiConNsel.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConNsel.setDescription('Name of the processor on which the OSI-TP partner is located (network selector)')
utmOsiConAccPnt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiConAccPnt.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConAccPnt.setDescription('Local name of an access point through which communication with OSI-TP partners takes place')
utmOsiConActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmOsiConActive.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiConActive.setDescription('The transport connection can either be used (YES) or is reserved as a substitute connection (NO)')
utmOsiLpapTabNum = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapTabNum.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapTabNum.setDescription('The number of entries in the table utmOsiLpapTable')
utmOsiLpapTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2), )
if mibBuilder.loadTexts: utmOsiLpapTable.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapTable.setDescription('Table including infos about remote partner applications that communicate via the OSI-TP protocol')
utmOsiLpapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1), ).setIndexNames((0, "UTM-MIB", "utmOsiLpapIndex"))
if mibBuilder.loadTexts: utmOsiLpapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapEntry.setDescription('An entry in the table')
utmOsiLpapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapIndex.setDescription('A unique value for each entry, its value ranges between 1 and the value of utmOsiLpapTabNum')
utmOsiLpapName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapName.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapName.setDescription('Name of the OSI LPAP')
utmOsiLpapKset = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapKset.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapKset.setDescription('Key set of the remote application')
utmOsiLpapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmOsiLpapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapStatus.setDescription('A connection to the remote application exists or can be set up (ON), or cannot be set up (OFF)')
utmOsiLpapQuiet = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmOsiLpapQuiet.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapQuiet.setDescription("A 'Q' means 'quiet', i.e. no more dialog jobs for the remote application are accepted")
utmOsiLpapOutq = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapOutq.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapOutq.setDescription('Number of messages that still have to be sent to this remote application')
utmOsiLpapIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmOsiLpapIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapIdleTime.setDescription('Time for monitoring the idle state of a session')
utmOsiLpapOsiCon = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapOsiCon.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapOsiCon.setDescription('Name of the transport connection used to communicate with the OSI-TP partner')
utmOsiLpapAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapAssoc.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapAssoc.setDescription('Number of parallel connections generated for the OSI-TP partner')
utmOsiLpapConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapConnect.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapConnect.setDescription('Number of connections set up')
utmOsiLpapAutoCon = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 19, 3, 16, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utmOsiLpapAutoCon.setStatus('mandatory')
if mibBuilder.loadTexts: utmOsiLpapAutoCon.setDescription('Number of connections to be set up to the partner when the application is started')
utmTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 19, 4))
utmTrapCtrlCheckCaseNOW = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlCheckCaseNOW.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlCheckCaseNOW.setDescription('Any set request for this object will start an immediate trap case detection for all traps (independent from any timer)')
utmTrapCtrlAbortedPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlAbortedPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlAbortedPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlPENDERPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlPENDERPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlPENDERPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlDeadlockPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlDeadlockPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlDeadlockPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlSecurViolPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlSecurViolPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlSecurViolPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlSecurViolLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlSecurViolLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlSecurViolLimit.setDescription('Necessary number of user security violations (since application start or since last security trap) before sending a new trap')
utmTrapCtrlConnLossPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlConnLossPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlConnLossPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlConnLossLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlConnLossLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlConnLossLimit.setDescription('Necessary number of unconnected partner applications before sending a trap; -1 means maximum (no connected partners)')
utmTrapCtrlConnUsersPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlConnUsersPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlConnUsersPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlConnUsersLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlConnUsersLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlConnUsersLimit.setDescription('Necessary number of connected users before sending a trap; -1 means the generated maximum of allowed user connections')
utmTrapCtrlActiveTasksPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlActiveTasksPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlActiveTasksPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlActiveTasksLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlActiveTasksLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlActiveTasksLimit.setDescription('Necessary number of active tasks before sending a trap; -1 means the actual maximum of allowed tasks')
utmTrapCtrlCacheHitPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlCacheHitPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlCacheHitPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlCacheHitLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlCacheHitLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlCacheHitLimit.setDescription('Minimum rate (in percent) of cache hits before sending a trap')
utmTrapCtrlPoolSizePeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlPoolSizePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlPoolSizePeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlPoolSizeLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlPoolSizeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlPoolSizeLimit.setDescription('Maximum pool size (in percent) before sending a trap')
utmTrapCtrlTclWaitMsgsPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlTclWaitMsgsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlTclWaitMsgsPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlTclWaitMsgsLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlTclWaitMsgsLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlTclWaitMsgsLimit.setDescription('Necessary number of waiting messages for a TAC class before sending a trap')
utmTrapCtrlLtermWaitOutMsgsPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlLtermWaitOutMsgsPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlLtermWaitOutMsgsPeriod.setDescription("Break time in seconds between two trap checks; '-1' means no trap case detection")
utmTrapCtrlLtermWaitOutMsgsLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 19, 4, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: utmTrapCtrlLtermWaitOutMsgsLimit.setStatus('mandatory')
if mibBuilder.loadTexts: utmTrapCtrlLtermWaitOutMsgsLimit.setDescription('Necessary number of messages waiting to be output on a logical terminal before sending a trap')
utmApplAborted = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,1))
if mibBuilder.loadTexts: utmApplAborted.setDescription('Application terminated')
utmApplPENDER = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,2))
if mibBuilder.loadTexts: utmApplPENDER.setDescription('Termination with PEND ER')
utmApplDeadlock = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,3))
if mibBuilder.loadTexts: utmApplDeadlock.setDescription('Detected and resolved deadlock')
utmApplUserSecurityViolations = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,4))
if mibBuilder.loadTexts: utmApplUserSecurityViolations.setDescription('User security violations')
utmApplConnectionLosses = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,5))
if mibBuilder.loadTexts: utmApplConnectionLosses.setDescription('Connection losses to partner applications')
utmApplConnectedUsers = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,6))
if mibBuilder.loadTexts: utmApplConnectedUsers.setDescription('Connected users')
utmApplActiveTasks = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,7))
if mibBuilder.loadTexts: utmApplActiveTasks.setDescription('Active tasks')
utmApplCacheHits = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,8))
if mibBuilder.loadTexts: utmApplCacheHits.setDescription('Cache hit rate')
utmApplPoolSize = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,9))
if mibBuilder.loadTexts: utmApplPoolSize.setDescription('Page pool size')
utmApplTacclassWaitMsgs = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,10))
if mibBuilder.loadTexts: utmApplTacclassWaitMsgs.setDescription('Unprocessed messages for TAC classes')
utmApplLtermWaitOutpMsgs = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 19, 3) + (0,11))
if mibBuilder.loadTexts: utmApplLtermWaitOutpMsgs.setDescription('Messages waiting to be output on logical terminals')
mibBuilder.exportSymbols("UTM-MIB", utmPoolBcamAppl=utmPoolBcamAppl, utmSyspConRTime=utmSyspConRTime, utmConIndex=utmConIndex, utmLtermUsageBundle=utmLtermUsageBundle, sniProductMibs=sniProductMibs, utmConBcamAppl=utmConBcamAppl, utmStatWaitDPUTs=utmStatWaitDPUTs, utmLpapName=utmLpapName, utmLtacReplyWait=utmLtacReplyWait, utmLsesProname=utmLsesProname, utmApplPoolSize=utmApplPoolSize, utmApplicationData=utmApplicationData, utmLtermInCnt=utmLtermInCnt, utmTacName=utmTacName, utmSyspCalcAccount=utmSyspCalcAccount, utmOsiConAccPnt=utmOsiConAccPnt, utmOsiLpapStatus=utmOsiLpapStatus, utmApplStatus=utmApplStatus, utmSyspConcTime=utmSyspConcTime, utmUserLterm=utmUserLterm, utmStatResourcWaits=utmStatResourcWaits, utmTrapCtrlActiveTasksLimit=utmTrapCtrlActiveTasksLimit, utmTacLock=utmTacLock, utmConConnected=utmConConnected, utmOsiLpapOutq=utmOsiLpapOutq, utmPtermStatus=utmPtermStatus, utmLsesTabNum=utmLsesTabNum, utmSyspUsLogFGG=utmSyspUsLogFGG, utmUserKset=utmUserKset, utmConTable=utmConTable, utmConConnectStatus=utmConConnectStatus, utmLpapData=utmLpapData, utmSyspTasksinPGWT=utmSyspTasksinPGWT, utmOsiConName=utmOsiConName, utmTacInq=utmTacInq, utmPoolKset=utmPoolKset, utmApplDeadlock=utmApplDeadlock, utmLtacLock=utmLtacLock, utmTrapCtrlCacheHitPeriod=utmTrapCtrlCacheHitPeriod, utmTacclassPGWT=utmTacclassPGWT, utmApplLtermWaitOutpMsgs=utmApplLtermWaitOutpMsgs, utmMainUTMversion=utmMainUTMversion, utmTrapCtrlCheckCaseNOW=utmTrapCtrlCheckCaseNOW, utmLsesName=utmLsesName, utmLtacTable=utmLtacTable, utmLtermData=utmLtermData, utmStatOpenDialConv=utmStatOpenDialConv, utmStatUnprocAtacs=utmStatUnprocAtacs, utmStatAbTermConv=utmStatAbTermConv, utmApplActiveTasks=utmApplActiveTasks, utmTacDbElap=utmTacDbElap, utmOsiConTsel=utmOsiConTsel, utmSyspKDCMON=utmSyspKDCMON, utmConConTime=utmConConTime, utmLtacData=utmLtacData, utmConTabNum=utmConTabNum, utmStatDialTAperSec=utmStatDialTAperSec, utmOsiAssOsiCon=utmOsiAssOsiCon, utmTacData=utmTacData, utmApplName=utmApplName, utmOsiLpapName=utmOsiLpapName, utmStatOpenAsynConv=utmStatOpenAsynConv, utmUserCpuTime=utmUserCpuTime, utmOsiLpapOsiCon=utmOsiLpapOsiCon, utmStatActJR=utmStatActJR, utmLpapEntry=utmLpapEntry, utmConLett=utmConLett, utmTacclassWtMesg=utmTacclassWtMesg, utmPoolStatusOn=utmPoolStatusOn, utmLsesBcamAppl=utmLsesBcamAppl, utmLtermTabNum=utmLtermTabNum, utmLtermPterm=utmLtermPterm, utmStatPagesPWrite=utmStatPagesPWrite, utmLtacTabNum=utmLtacTabNum, utmLtermKset=utmLtermKset, utmPtermEntry=utmPtermEntry, utmLtermTable=utmLtermTable, utmStatAsynTAperSec=utmStatAsynTAperSec, utmTacError=utmTacError, utmTacclassNumber=utmTacclassNumber, utmLpapKset=utmLpapKset, utmApplUserSecurityViolations=utmApplUserSecurityViolations, utmLtermLock=utmLtermLock, utmTrapCtrlLtermWaitOutMsgsLimit=utmTrapCtrlLtermWaitOutMsgsLimit, utmPtermLterm=utmPtermLterm, utmApplSemId=utmApplSemId, utmStatActPoolSize=utmStatActPoolSize, utmTrapCtrlPoolSizeLimit=utmTrapCtrlPoolSizeLimit, utmTacUsed=utmTacUsed, utmTrapCtrlPoolSizePeriod=utmTrapCtrlPoolSizePeriod, utmStatTermOutMsgs=utmStatTermOutMsgs, utmStatCacheWaits=utmStatCacheWaits, utmLpapTabNum=utmLpapTabNum, utmOsiConData=utmOsiConData, utmSyspSM2=utmSyspSM2, utmTrapCtrlTclWaitMsgsPeriod=utmTrapCtrlTclWaitMsgsPeriod, utmSyspMaxTasks=utmSyspMaxTasks, utmPoolTable=utmPoolTable, utmStatCurrTasks=utmStatCurrTasks, utmLtermSecCnt=utmLtermSecCnt, utmMainSubagentVersion=utmMainSubagentVersion, utmLsesLpap=utmLsesLpap, utmTrapCtrlCacheHitLimit=utmTrapCtrlCacheHitLimit, utmPoolIndex=utmPoolIndex, utmTrapCtrlConnLossPeriod=utmTrapCtrlConnLossPeriod, utmPtermName=utmPtermName, utmLsesIndex=utmLsesIndex, utmTrapCtrlLtermWaitOutMsgsPeriod=utmTrapCtrlLtermWaitOutMsgsPeriod, utmMainBCAMAppl=utmMainBCAMAppl, utmOsiAssOsiLpap=utmOsiAssOsiLpap, utmLsesAgUser=utmLsesAgUser, utmTacclassAvgWtTime=utmTacclassAvgWtTime, utmStatData=utmStatData, utmOsiLpapKset=utmOsiLpapKset, utmOsiLpapTable=utmOsiLpapTable, utmPoolPtype=utmPoolPtype, utmTacStatus=utmTacStatus, utmLtermUsageType=utmLtermUsageType, utmOsiLpapTabNum=utmOsiLpapTabNum, utmConData=utmConData, utmSyspPGWTTime=utmSyspPGWTTime, utmPoolStations=utmPoolStations, utmOsiConIndex=utmOsiConIndex, utmPtermProname=utmPtermProname, utmPtermData=utmPtermData, utmStatDeadlocks=utmStatDeadlocks, utmLtermUsageTermPool=utmLtermUsageTermPool, utmTacElap=utmTacElap, utmLsesCon=utmLsesCon, utmLtermOutq=utmLtermOutq, utmOsiConEntry=utmOsiConEntry, utmUserIndex=utmUserIndex, utmPtermTabNum=utmPtermTabNum, utmTacEntry=utmTacEntry, utmStatTermInMsgs=utmStatTermInMsgs, utmUserName=utmUserName, utmOsiAssIndex=utmOsiAssIndex, utmPoolEntry=utmPoolEntry, utmTrapCtrlConnUsersPeriod=utmTrapCtrlConnUsersPeriod, utmTacTcl=utmTacTcl, utmOsiConNsel=utmOsiConNsel, utmTacDbcnt=utmTacDbcnt, utmSyspResWaitTA=utmSyspResWaitTA, utmTrapCtrlConnUsersLimit=utmTrapCtrlConnUsersLimit, utmPoolMaxCon=utmPoolMaxCon, utmConLpap=utmConLpap, utmApplConnectedUsers=utmApplConnectedUsers, utmApplCacheHits=utmApplCacheHits, utmLsesEntry=utmLsesEntry, utmOsiLpapEntry=utmOsiLpapEntry, utmMainData=utmMainData, utmSyspPTCTime=utmSyspPTCTime, utmUserTabNum=utmUserTabNum, utmTacTabNum=utmTacTabNum, utmLtacLpap=utmLtacLpap, utmApplHomeDir=utmApplHomeDir, utmOsiLpapQuiet=utmOsiLpapQuiet, utmOsiAssTable=utmOsiAssTable, utmApplTable=utmApplTable, utmApplSharedMemSegSize=utmApplSharedMemSegSize, utmOsiLpapConnect=utmOsiLpapConnect, utmStatMaxPoolSize=utmStatMaxPoolSize, utmLpapIdleTime=utmLpapIdleTime, utmPoolActCon=utmPoolActCon, utmPtermConnected=utmPtermConnected, utmOsiLpapAssoc=utmOsiLpapAssoc, utmTacclassData=utmTacclassData, utmSyspProgFGG=utmSyspProgFGG, utmOsiConTable=utmOsiConTable, utmStatMaxJR=utmStatMaxJR, utmApplSharedMemKey=utmApplSharedMemKey, utmStatAvgPoolSize=utmStatAvgPoolSize, utmTrapCtrlPENDERPeriod=utmTrapCtrlPENDERPeriod, utmTrapCtrlActiveTasksPeriod=utmTrapCtrlActiveTasksPeriod, utmPtermPtyp=utmPtermPtyp, utmApplConnectionLosses=utmApplConnectionLosses, utmTrapControl=utmTrapControl, utmLtermUser=utmLtermUser, utmMiscData=utmMiscData, utmConEntry=utmConEntry, utmLpapQuiet=utmLpapQuiet, utmStatDialStepSec=utmStatDialStepSec, utmTrapCtrlTclWaitMsgsLimit=utmTrapCtrlTclWaitMsgsLimit, utmLsesTable=utmLsesTable, utmTacTable=utmTacTable, utmLtacIndex=utmLtacIndex, utmPoolLock=utmPoolLock, utmLtermName=utmLtermName, utmPtermTable=utmPtermTable, utmTacIndex=utmTacIndex, utmTrapCtrlSecurViolPeriod=utmTrapCtrlSecurViolPeriod, utmTacCpu=utmTacCpu, sniUTM=sniUTM, utmLtermStatus=utmLtermStatus, utmSyspTestmode=utmSyspTestmode, utmMainApplName=utmMainApplName, utmLtermEntry=utmLtermEntry, utmStatPeriodWrites=utmStatPeriodWrites, utmTacclassTable=utmTacclassTable, utmConProname=utmConProname, utmLtacStatus=utmLtacStatus, utmTrapCtrlDeadlockPeriod=utmTrapCtrlDeadlockPeriod, utmSyspCurrTasks=utmSyspCurrTasks, utmStatCacheHitRate=utmStatCacheHitRate, utmApplAborted=utmApplAborted, utmOsiAssData=utmOsiAssData, utmLtermIndex=utmLtermIndex, utmSyspMaxAsynTasks=utmSyspMaxAsynTasks, utmLtacAccessWait=utmLtacAccessWait, utmUserInVg=utmUserInVg, utmUserNrTacs=utmUserNrTacs, utmPoolData=utmPoolData, utmPoolTabNum=utmPoolTabNum, utmConConb=utmConConb, utmOsiLpapIndex=utmOsiLpapIndex, utmTacclassTasks=utmTacclassTasks, utmOsiConOsiLpap=utmOsiConOsiLpap, utmOsiAssAgUser=utmOsiAssAgUser, utmSyspAccount=utmSyspAccount, utmSyspMaxPagRate=utmSyspMaxPagRate, utmStatStartDateAndTime=utmStatStartDateAndTime, utmApplPENDER=utmApplPENDER, utmLtacRtac=utmLtacRtac, utmTrapCtrlAbortedPeriod=utmTrapCtrlAbortedPeriod, utmLsesData=utmLsesData, utmPtermConnectForced=utmPtermConnectForced, utmPtermLett=utmPtermLett, utmUserData=utmUserData, utmOsiLpapData=utmOsiLpapData, utmOsiAssTabNum=utmOsiAssTabNum, utmOsiConTabNum=utmOsiConTabNum, utmOsiLpapAutoCon=utmOsiLpapAutoCon, utmTrapCtrlConnLossLimit=utmTrapCtrlConnLossLimit, utmOsiLpapIdleTime=utmOsiLpapIdleTime, utmTrapCtrlSecurViolLimit=utmTrapCtrlSecurViolLimit, utmApplTabNum=utmApplTabNum, utmPtermIndex=utmPtermIndex, utmStatUnprocPrints=utmStatUnprocPrints, utmStatStartDateAndTimeString=utmStatStartDateAndTimeString, utmLtacName=utmLtacName, sni=sni, utmSyspLogAckwait=utmSyspLogAckwait, utmMainApplStartStop=utmMainApplStartStop, utmStatLogWrites=utmStatLogWrites, utmSyspTasksWaitPGWT=utmSyspTasksWaitPGWT, utmUserEntry=utmUserEntry, utmConStatus=utmConStatus, utmPtermBCAMAppl=utmPtermBCAMAppl, utmUserStatus=utmUserStatus, utmLpapStatus=utmLpapStatus, utmLtacUsed=utmLtacUsed, utmApplEntry=utmApplEntry, utmPtermConTime=utmPtermConTime, utmOsiAssLetters=utmOsiAssLetters)
mibBuilder.exportSymbols("UTM-MIB", utmSyspTermWait=utmSyspTermWait, utmApplIndex=utmApplIndex, utmStatConnUsers=utmStatConnUsers, utmPtermConb=utmPtermConb, utmLsesRses=utmLsesRses, utmLtacEntry=utmLtacEntry, utmPtermConnectMultiplexed=utmPtermConnectMultiplexed, utmOsiAssConTime=utmOsiAssConTime, utmLpapIndex=utmLpapIndex, utmOsiAssName=utmOsiAssName, utmPoolProname=utmPoolProname, utmUserSecCnt=utmUserSecCnt, utmSyspResWaitPr=utmSyspResWaitPr, utmConName=utmConName, utmPtermConnectStatus=utmPtermConnectStatus, utmMainApplHomeDir=utmMainApplHomeDir, utmUserTable=utmUserTable, utmTacclassEntry=utmTacclassEntry, utmOsiConActive=utmOsiConActive, utmSyspData=utmSyspData, utmLpapOutq=utmLpapOutq, utmApplTacclassWaitMsgs=utmApplTacclassWaitMsgs, utmLpapTable=utmLpapTable, utmOsiAssEntry=utmOsiAssEntry)
