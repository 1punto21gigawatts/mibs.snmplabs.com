#
# PySNMP MIB module FRAME-RELAY-DTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRAME-RELAY-DTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, MibIdentifier, IpAddress, Counter64, transmission, TimeTicks, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, Integer32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter64", "transmission", "TimeTicks", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "Integer32", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "RowStatus")
frameRelayDTE = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 32))
frameRelayDTE.setRevisions(('1997-05-01 02:29', '1992-04-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: frameRelayDTE.setRevisionsDescriptions(('Converted from SMIv1 to SMIv2. (Thus, indices are read-only rather than being not-accessible.) Added objects and made clarifications based on implementation experience.', 'Published as RFC 1315, the initial version of this MIB module.',))
if mibBuilder.loadTexts: frameRelayDTE.setLastUpdated('9705010229Z')
if mibBuilder.loadTexts: frameRelayDTE.setOrganization('IETF IPLPDN Working Group')
if mibBuilder.loadTexts: frameRelayDTE.setContactInfo(' Caralyn Brown Postal: Cadia Networks, Inc. 1 Corporate Drive Andover, Massachusetts 01810 Tel: +1 508 689 2400 x133 E-Mail: cbrown@cadia.com Fred Baker Postal: Cisco Systems 519 Lado Drive Santa Barbara, California 93111 Tel: +1 408 526 425 E-Mail: fred@cisco.com')
if mibBuilder.loadTexts: frameRelayDTE.setDescription('The MIB module to describe the use of a Frame Relay interface by a DTE.')
class DLCI(TextualConvention, Integer32):
    description = 'The range of DLCI values. Note that this varies by interface configuration; normally, interfaces may use 0..1023, but may be configured to use ranges as large as 0..2^23.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8388607)

frDlcmiTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 1), )
if mibBuilder.loadTexts: frDlcmiTable.setReference('American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: frDlcmiTable.setStatus('current')
if mibBuilder.loadTexts: frDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface for the frame relay service on this interface.')
frDlcmiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 1, 1), ).setIndexNames((0, "FRAME-RELAY-DTE-MIB", "frDlcmiIfIndex"))
if mibBuilder.loadTexts: frDlcmiEntry.setStatus('current')
if mibBuilder.loadTexts: frDlcmiEntry.setDescription('The Parameters for a particular Data Link Connection Management Interface.')
frDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDlcmiIfIndex.setStatus('current')
if mibBuilder.loadTexts: frDlcmiIfIndex.setDescription('The ifIndex value of the corresponding ifEntry.')
frDlcmiState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("itut933A", 5), ("ansiT1617D1994", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiState.setReference('American National Standard T1.617-1991, American National Standard T1.617a-1994, ITU-T Recommendation Q.933 (03/93).')
if mibBuilder.loadTexts: frDlcmiState.setStatus('current')
if mibBuilder.loadTexts: frDlcmiState.setDescription('This variable states which Data Link Connection Management scheme is active (and by implication, what DLCI it uses) on the Frame Relay interface.')
frDlcmiAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiAddress.setStatus('current')
if mibBuilder.loadTexts: frDlcmiAddress.setDescription('This variable states which address format is in use on the Frame Relay interface.')
frDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("twoOctets", 2), ("threeOctets", 3), ("fourOctets", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiAddressLen.setStatus('current')
if mibBuilder.loadTexts: frDlcmiAddressLen.setDescription('This variable states the address length in octets. In the case of Q922 format, the length indicates the entire length of the address including the control portion.')
frDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiPollingInterval.setReference('American National Standard T1.617-1991, Section D.7 Timer T391.')
if mibBuilder.loadTexts: frDlcmiPollingInterval.setStatus('current')
if mibBuilder.loadTexts: frDlcmiPollingInterval.setDescription('This is the number of seconds between successive status enquiry messages.')
frDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setReference('American National Standard T1.617-1991, Section D.7 Counter N391.')
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setStatus('current')
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setDescription('Number of status enquiry intervals that pass before issuance of a full status enquiry message.')
frDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setReference('American National Standard T1.617-1991, Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setDescription('This is the maximum number of unanswered Status Enquiries the equipment shall accept before declaring the interface down.')
frDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setReference('American National Standard T1.617-1991, Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setStatus('current')
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setDescription("This is the number of status polling intervals over which the error threshold is counted. For example, if within 'MonitoredEvents' number of events the station receives 'ErrorThreshold' number of errors, the interface is marked as down.")
frDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 9), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setStatus('current')
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setDescription("The maximum number of Virtual Circuits allowed for this interface. Usually dictated by the Frame Relay network. In response to a SET, if a value less than zero or higher than the agent's maximal capability is configured, the agent should respond badValue")
frDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiMulticast.setStatus('current')
if mibBuilder.loadTexts: frDlcmiMulticast.setDescription('This indicates whether the Frame Relay interface is using a multicast service.')
frDlcmiStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("initializing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDlcmiStatus.setStatus('current')
if mibBuilder.loadTexts: frDlcmiStatus.setDescription('This indicates the status of the Frame Relay interface as determined by the performance of the dlcmi. If no dlcmi is running, the Frame Relay interface will stay in the running state indefinitely.')
frDlcmiRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frDlcmiRowStatus.setStatus('current')
if mibBuilder.loadTexts: frDlcmiRowStatus.setDescription('SNMP Version 2 Row Status Variable. Writable objects in the table may be written in any RowStatus state.')
frCircuitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 2), )
if mibBuilder.loadTexts: frCircuitTable.setStatus('current')
if mibBuilder.loadTexts: frCircuitTable.setDescription('A table containing information about specific Data Link Connections (DLC) or virtual circuits.')
frCircuitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 2, 1), ).setIndexNames((0, "FRAME-RELAY-DTE-MIB", "frCircuitIfIndex"), (0, "FRAME-RELAY-DTE-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: frCircuitEntry.setDescription('The information regarding a single Data Link Connection. Discontinuities in the counters contained in this table are indicated by the value in frCircuitCreationTime.')
frCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitIfIndex.setStatus('current')
if mibBuilder.loadTexts: frCircuitIfIndex.setDescription('The ifIndex Value of the ifEntry this virtual circuit is layered onto.')
frCircuitDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitDlci.setReference('American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: frCircuitDlci.setStatus('current')
if mibBuilder.loadTexts: frCircuitDlci.setDescription('The Data Link Connection Identifier for this virtual circuit.')
frCircuitState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitState.setStatus('current')
if mibBuilder.loadTexts: frCircuitState.setDescription("Indicates whether the particular virtual circuit is operational. In the absence of a Data Link Connection Management Interface, virtual circuit entries (rows) may be created by setting virtual circuit state to 'active', or deleted by changing Circuit state to 'invalid'. Whether or not the row actually disappears is left to the implementation, so this object may actually read as 'invalid' for some arbitrary length of time. It is also legal to set the state of a virtual circuit to 'inactive' to temporarily disable a given circuit. The use of 'invalid' is deprecated in this SNMP Version 2 MIB, in favor of frCircuitRowStatus.")
frCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setReference('American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setStatus('current')
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setDescription('Number of frames received from the network indicating forward congestion since the virtual circuit was created. This occurs when the remote DTE sets the FECN flag, or when a switch in the network enqueues the frame to a trunk whose transmission queue is congested.')
frCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setStatus('current')
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setDescription('Number of frames received from the network indicating backward congestion since the virtual circuit was created. This occurs when the remote DTE sets the BECN flag, or when a switch in the network receives the frame from a trunk whose transmission queue is congested.')
frCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentFrames.setStatus('current')
if mibBuilder.loadTexts: frCircuitSentFrames.setDescription('The number of frames sent from this virtual circuit since it was created.')
frCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentOctets.setStatus('current')
if mibBuilder.loadTexts: frCircuitSentOctets.setDescription('The number of octets sent from this virtual circuit since it was created. Octets counted are the full frame relay header and the payload, but do not include the flag characters or CRC.')
frCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: frCircuitReceivedFrames.setDescription('Number of frames received over this virtual circuit since it was created.')
frCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: frCircuitReceivedOctets.setDescription('Number of octets received over this virtual circuit since it was created. Octets counted include the full frame relay header, but do not include the flag characters or the CRC.')
frCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitCreationTime.setStatus('current')
if mibBuilder.loadTexts: frCircuitCreationTime.setDescription('The value of sysUpTime when the virtual circuit was created, whether by the Data Link Connection Management Interface or by a SetRequest.')
frCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitLastTimeChange.setStatus('current')
if mibBuilder.loadTexts: frCircuitLastTimeChange.setDescription('The value of sysUpTime when last there was a change in the virtual circuit state')
frCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitCommittedBurst.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frCircuitCommittedBurst.setStatus('current')
if mibBuilder.loadTexts: frCircuitCommittedBurst.setDescription('This variable indicates the maximum amount of data, in bits, that the network agrees to transfer under normal conditions, during the measurement interval.')
frCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitExcessBurst.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frCircuitExcessBurst.setStatus('current')
if mibBuilder.loadTexts: frCircuitExcessBurst.setDescription('This variable indicates the maximum amount of uncommitted data bits that the network will attempt to deliver over the measurement interval. By default, if not configured when creating the entry, the Excess Information Burst Size is set to the value of ifSpeed.')
frCircuitThroughput = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitThroughput.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frCircuitThroughput.setStatus('current')
if mibBuilder.loadTexts: frCircuitThroughput.setDescription("Throughput is the average number of 'Frame Relay Information Field' bits transferred per second across a user network interface in one direction, measured over the measurement interval. If the configured committed burst rate and throughput are both non-zero, the measurement interval, T, is T=frCircuitCommittedBurst/frCircuitThroughput. If the configured committed burst rate and throughput are both zero, the measurement interval, T, is T=frCircuitExcessBurst/ifSpeed.")
frCircuitMulticast = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("oneWay", 2), ("twoWay", 3), ("nWay", 4))).clone('unicast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitMulticast.setReference('Frame Relay PVC Multicast Service and Protocol Description Implementation: FRF.7 Frame Relay Forum Technical Committe October 21, 1994')
if mibBuilder.loadTexts: frCircuitMulticast.setStatus('current')
if mibBuilder.loadTexts: frCircuitMulticast.setDescription('This indicates whether this VC is used as a unicast VC (i.e. not multicast) or the type of multicast service subscribed to')
frCircuitType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitType.setStatus('current')
if mibBuilder.loadTexts: frCircuitType.setDescription('Indication of whether the VC was manually created (static), or dynamically created (dynamic) via the data link control management interface.')
frCircuitDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitDiscards.setStatus('current')
if mibBuilder.loadTexts: frCircuitDiscards.setDescription('The number of inbound frames dropped because of format errors, or because the VC is inactive.')
frCircuitReceivedDEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedDEs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: frCircuitReceivedDEs.setStatus('current')
if mibBuilder.loadTexts: frCircuitReceivedDEs.setDescription("Number of frames received from the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the remote DTE sets the DE flag, or when in remote DTE's switch detects that the frame was received as Excess Burst data.")
frCircuitSentDEs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentDEs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: frCircuitSentDEs.setStatus('current')
if mibBuilder.loadTexts: frCircuitSentDEs.setDescription('Number of frames sent to the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the local DTE sets the DE flag, indicating that during Network congestion situations those frames should be discarded in preference of other frames sent without the DE bit set.')
frCircuitLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 20), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitLogicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: frCircuitLogicalIfIndex.setDescription('Normally the same value as frDlcmiIfIndex, but different when an implementation associates a virtual ifEntry with a DLC or set of DLCs in order to associate higher layer objects such as the ipAddrEntry with a subset of the virtual circuits on a Frame Relay interface. The type of such ifEntries is defined by the higher layer object; for example, if PPP/Frame Relay is implemented, the ifType of this ifEntry would be PPP. If it is not so defined, as would be the case with an ipAddrEntry, it should be of type Other.')
frCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frCircuitRowStatus.setStatus('current')
if mibBuilder.loadTexts: frCircuitRowStatus.setDescription('This object is used to create a new row or modify or destroy an existing row in the manner described in the definition of the RowStatus textual convention. Writable objects in the table may be written in any RowStatus state.')
frErrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 3), )
if mibBuilder.loadTexts: frErrTable.setStatus('current')
if mibBuilder.loadTexts: frErrTable.setDescription('A table containing information about Errors on the Frame Relay interface. Discontinuities in the counters contained in this table are the same as apply to the ifEntry associated with the Interface.')
frErrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 3, 1), ).setIndexNames((0, "FRAME-RELAY-DTE-MIB", "frErrIfIndex"))
if mibBuilder.loadTexts: frErrEntry.setStatus('current')
if mibBuilder.loadTexts: frErrEntry.setDescription('The error information for a single frame relay interface.')
frErrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrIfIndex.setStatus('current')
if mibBuilder.loadTexts: frErrIfIndex.setDescription('The ifIndex Value of the corresponding ifEntry.')
frErrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalAddress", 4), ("unknownAddress", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrType.setStatus('current')
if mibBuilder.loadTexts: frErrType.setDescription('The type of error that was last seen on this interface: receiveShort: frame was not long enough to allow demultiplexing - the address field was incomplete, or for virtual circuits using Multiprotocol over Frame Relay, the protocol identifier was missing or incomplete. receiveLong: frame exceeded maximum length configured for this interface. illegalAddress: address field did not match configured format. unknownAddress: frame received on a virtual circuit which was not active or administratively disabled. dlcmiProtoErr: unspecified error occurred when attempting to interpret link maintenance frame. dlcmiUnknownIE: link maintenance frame contained an Information Element type which is not valid for the configured link maintenance protocol. dlcmiSequenceErr: link maintenance frame contained a sequence number other than the expected value. dlcmiUnknownRpt: link maintenance frame contained a Report Type Information Element whose value was not valid for the configured link maintenance protocol. noErrorSinceReset: no errors have been detected since the last cold start or warm start.')
frErrData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrData.setStatus('current')
if mibBuilder.loadTexts: frErrData.setDescription('An octet string containing as much of the error packet as possible. As a minimum, it must contain the Q.922 Address or as much as was delivered. It is desirable to include all header and demultiplexing information.')
frErrTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrTime.setStatus('current')
if mibBuilder.loadTexts: frErrTime.setDescription('The value of sysUpTime at which the error was detected.')
frErrFaults = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrFaults.setStatus('current')
if mibBuilder.loadTexts: frErrFaults.setDescription('The number of times the interface has gone down since it was initialized.')
frErrFaultTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrFaultTime.setStatus('current')
if mibBuilder.loadTexts: frErrFaultTime.setDescription('The value of sysUpTime at the time when the interface was taken down due to excessive errors. Excessive errors is defined as the time when a DLCMI exceeds the frDlcmiErrorThreshold number of errors within frDlcmiMonitoredEvents. See FrDlcmiEntry for further details.')
frameRelayTrapControl = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 4))
frameRelayTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 0))
frTrapState = MibScalar((1, 3, 6, 1, 2, 1, 10, 32, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapState.setStatus('current')
if mibBuilder.loadTexts: frTrapState.setDescription('This variable indicates whether the system produces the frDLCIStatusChange trap.')
frTrapMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 10, 32, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapMaxRate.setStatus('current')
if mibBuilder.loadTexts: frTrapMaxRate.setDescription('This variable indicates the number of milliseconds that must elapse between trap emissions. If events occur more rapidly, the impementation may simply fail to trap, or may queue traps until an appropriate time.')
frDLCIStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 32, 0, 1)).setObjects(("FRAME-RELAY-DTE-MIB", "frCircuitState"))
if mibBuilder.loadTexts: frDLCIStatusChange.setStatus('current')
if mibBuilder.loadTexts: frDLCIStatusChange.setDescription('This trap indicates that the indicated Virtual Circuit has changed state. It has either been created or invalidated, or has toggled between the active and inactive states. If, however, the reason for the state change is due to the DLCMI going down, per-DLCI traps should not be generated.')
frConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 6))
frGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 6, 1))
frCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 6, 2))
frCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 32, 6, 2, 1)).setObjects(("FRAME-RELAY-DTE-MIB", "frPortGroup"), ("FRAME-RELAY-DTE-MIB", "frCircuitGroup"), ("FRAME-RELAY-DTE-MIB", "frErrGroup"), ("FRAME-RELAY-DTE-MIB", "frTrapGroup"), ("FRAME-RELAY-DTE-MIB", "frNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frCompliance = frCompliance.setStatus('current')
if mibBuilder.loadTexts: frCompliance.setDescription('The compliance statement ')
frCompliance0 = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 32, 6, 2, 2)).setObjects(("FRAME-RELAY-DTE-MIB", "frPortGroup0"), ("FRAME-RELAY-DTE-MIB", "frCircuitGroup0"), ("FRAME-RELAY-DTE-MIB", "frErrGroup0"), ("FRAME-RELAY-DTE-MIB", "frTrapGroup0"), ("FRAME-RELAY-DTE-MIB", "frNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frCompliance0 = frCompliance0.setStatus('current')
if mibBuilder.loadTexts: frCompliance0.setDescription('The compliance statement for objects and the trap defined in RFC 1315.')
frPortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 1)).setObjects(("FRAME-RELAY-DTE-MIB", "frDlcmiIfIndex"), ("FRAME-RELAY-DTE-MIB", "frDlcmiState"), ("FRAME-RELAY-DTE-MIB", "frDlcmiAddress"), ("FRAME-RELAY-DTE-MIB", "frDlcmiAddressLen"), ("FRAME-RELAY-DTE-MIB", "frDlcmiPollingInterval"), ("FRAME-RELAY-DTE-MIB", "frDlcmiFullEnquiryInterval"), ("FRAME-RELAY-DTE-MIB", "frDlcmiErrorThreshold"), ("FRAME-RELAY-DTE-MIB", "frDlcmiMonitoredEvents"), ("FRAME-RELAY-DTE-MIB", "frDlcmiMaxSupportedVCs"), ("FRAME-RELAY-DTE-MIB", "frDlcmiMulticast"), ("FRAME-RELAY-DTE-MIB", "frDlcmiStatus"), ("FRAME-RELAY-DTE-MIB", "frDlcmiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frPortGroup = frPortGroup.setStatus('current')
if mibBuilder.loadTexts: frPortGroup.setDescription('The objects necessary to control the Link Management Interface for a Frame Relay Interface as well as maintain the error statistics on this interface.')
frCircuitGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 2)).setObjects(("FRAME-RELAY-DTE-MIB", "frCircuitIfIndex"), ("FRAME-RELAY-DTE-MIB", "frCircuitDlci"), ("FRAME-RELAY-DTE-MIB", "frCircuitState"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedFECNs"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedBECNs"), ("FRAME-RELAY-DTE-MIB", "frCircuitSentFrames"), ("FRAME-RELAY-DTE-MIB", "frCircuitSentOctets"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedFrames"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedOctets"), ("FRAME-RELAY-DTE-MIB", "frCircuitCreationTime"), ("FRAME-RELAY-DTE-MIB", "frCircuitLastTimeChange"), ("FRAME-RELAY-DTE-MIB", "frCircuitCommittedBurst"), ("FRAME-RELAY-DTE-MIB", "frCircuitExcessBurst"), ("FRAME-RELAY-DTE-MIB", "frCircuitThroughput"), ("FRAME-RELAY-DTE-MIB", "frCircuitMulticast"), ("FRAME-RELAY-DTE-MIB", "frCircuitType"), ("FRAME-RELAY-DTE-MIB", "frCircuitDiscards"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedDEs"), ("FRAME-RELAY-DTE-MIB", "frCircuitSentDEs"), ("FRAME-RELAY-DTE-MIB", "frCircuitLogicalIfIndex"), ("FRAME-RELAY-DTE-MIB", "frCircuitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frCircuitGroup = frCircuitGroup.setStatus('current')
if mibBuilder.loadTexts: frCircuitGroup.setDescription('The objects necessary to control the Virtual Circuits layered onto a Frame Relay Interface.')
frTrapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 3)).setObjects(("FRAME-RELAY-DTE-MIB", "frTrapState"), ("FRAME-RELAY-DTE-MIB", "frTrapMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frTrapGroup = frTrapGroup.setStatus('current')
if mibBuilder.loadTexts: frTrapGroup.setDescription("The objects necessary to control a Frame Relay Interface's notification messages.")
frErrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 4)).setObjects(("FRAME-RELAY-DTE-MIB", "frErrIfIndex"), ("FRAME-RELAY-DTE-MIB", "frErrType"), ("FRAME-RELAY-DTE-MIB", "frErrData"), ("FRAME-RELAY-DTE-MIB", "frErrTime"), ("FRAME-RELAY-DTE-MIB", "frErrFaults"), ("FRAME-RELAY-DTE-MIB", "frErrFaultTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frErrGroup = frErrGroup.setStatus('current')
if mibBuilder.loadTexts: frErrGroup.setDescription('Objects designed to assist in debugging Frame Relay Interfaces.')
frNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 5)).setObjects(("FRAME-RELAY-DTE-MIB", "frDLCIStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frNotificationGroup = frNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: frNotificationGroup.setDescription('Traps which may be used to enhance event driven management of the interface.')
frPortGroup0 = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 6)).setObjects(("FRAME-RELAY-DTE-MIB", "frDlcmiIfIndex"), ("FRAME-RELAY-DTE-MIB", "frDlcmiState"), ("FRAME-RELAY-DTE-MIB", "frDlcmiAddress"), ("FRAME-RELAY-DTE-MIB", "frDlcmiAddressLen"), ("FRAME-RELAY-DTE-MIB", "frDlcmiPollingInterval"), ("FRAME-RELAY-DTE-MIB", "frDlcmiFullEnquiryInterval"), ("FRAME-RELAY-DTE-MIB", "frDlcmiErrorThreshold"), ("FRAME-RELAY-DTE-MIB", "frDlcmiMonitoredEvents"), ("FRAME-RELAY-DTE-MIB", "frDlcmiMaxSupportedVCs"), ("FRAME-RELAY-DTE-MIB", "frDlcmiMulticast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frPortGroup0 = frPortGroup0.setStatus('current')
if mibBuilder.loadTexts: frPortGroup0.setDescription('The objects necessary to control the Link Management Interface for a Frame Relay Interface as well as maintain the error statistics on this interface from RFC 1315.')
frCircuitGroup0 = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 7)).setObjects(("FRAME-RELAY-DTE-MIB", "frCircuitIfIndex"), ("FRAME-RELAY-DTE-MIB", "frCircuitDlci"), ("FRAME-RELAY-DTE-MIB", "frCircuitState"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedFECNs"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedBECNs"), ("FRAME-RELAY-DTE-MIB", "frCircuitSentFrames"), ("FRAME-RELAY-DTE-MIB", "frCircuitSentOctets"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedFrames"), ("FRAME-RELAY-DTE-MIB", "frCircuitReceivedOctets"), ("FRAME-RELAY-DTE-MIB", "frCircuitCreationTime"), ("FRAME-RELAY-DTE-MIB", "frCircuitLastTimeChange"), ("FRAME-RELAY-DTE-MIB", "frCircuitCommittedBurst"), ("FRAME-RELAY-DTE-MIB", "frCircuitExcessBurst"), ("FRAME-RELAY-DTE-MIB", "frCircuitThroughput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frCircuitGroup0 = frCircuitGroup0.setStatus('current')
if mibBuilder.loadTexts: frCircuitGroup0.setDescription('The objects necessary to control the Virtual Circuits layered onto a Frame Relay Interface from RFC 1315.')
frErrGroup0 = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 8)).setObjects(("FRAME-RELAY-DTE-MIB", "frErrIfIndex"), ("FRAME-RELAY-DTE-MIB", "frErrType"), ("FRAME-RELAY-DTE-MIB", "frErrData"), ("FRAME-RELAY-DTE-MIB", "frErrTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frErrGroup0 = frErrGroup0.setStatus('current')
if mibBuilder.loadTexts: frErrGroup0.setDescription('Objects designed to assist in debugging Frame Relay Interfaces from RFC 1315.')
frTrapGroup0 = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 32, 6, 1, 9)).setObjects(("FRAME-RELAY-DTE-MIB", "frTrapState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frTrapGroup0 = frTrapGroup0.setStatus('current')
if mibBuilder.loadTexts: frTrapGroup0.setDescription("The objects necessary to control a Frame Relay Interface's notification messages from RFC 1315.")
mibBuilder.exportSymbols("FRAME-RELAY-DTE-MIB", frCircuitCreationTime=frCircuitCreationTime, frDlcmiMaxSupportedVCs=frDlcmiMaxSupportedVCs, frDlcmiRowStatus=frDlcmiRowStatus, frCircuitType=frCircuitType, frCompliances=frCompliances, frPortGroup0=frPortGroup0, frTrapGroup0=frTrapGroup0, frCircuitIfIndex=frCircuitIfIndex, frCompliance0=frCompliance0, frCircuitDiscards=frCircuitDiscards, frPortGroup=frPortGroup, frCircuitReceivedDEs=frCircuitReceivedDEs, frCircuitGroup0=frCircuitGroup0, frDlcmiMonitoredEvents=frDlcmiMonitoredEvents, frCircuitReceivedFECNs=frCircuitReceivedFECNs, frCircuitReceivedBECNs=frCircuitReceivedBECNs, frCircuitSentOctets=frCircuitSentOctets, frCircuitLastTimeChange=frCircuitLastTimeChange, frErrType=frErrType, frDlcmiEntry=frDlcmiEntry, frErrTime=frErrTime, frCompliance=frCompliance, frDLCIStatusChange=frDLCIStatusChange, frDlcmiErrorThreshold=frDlcmiErrorThreshold, frCircuitGroup=frCircuitGroup, frCircuitExcessBurst=frCircuitExcessBurst, frDlcmiFullEnquiryInterval=frDlcmiFullEnquiryInterval, frErrData=frErrData, frTrapMaxRate=frTrapMaxRate, frNotificationGroup=frNotificationGroup, frErrFaults=frErrFaults, frCircuitSentFrames=frCircuitSentFrames, frTrapGroup=frTrapGroup, frConformance=frConformance, frCircuitRowStatus=frCircuitRowStatus, frErrEntry=frErrEntry, PYSNMP_MODULE_ID=frameRelayDTE, frGroups=frGroups, frDlcmiTable=frDlcmiTable, frCircuitTable=frCircuitTable, frCircuitThroughput=frCircuitThroughput, frErrFaultTime=frErrFaultTime, frDlcmiState=frDlcmiState, frErrGroup0=frErrGroup0, frCircuitCommittedBurst=frCircuitCommittedBurst, frCircuitLogicalIfIndex=frCircuitLogicalIfIndex, frameRelayDTE=frameRelayDTE, frDlcmiStatus=frDlcmiStatus, frErrGroup=frErrGroup, frCircuitDlci=frCircuitDlci, frCircuitState=frCircuitState, frCircuitReceivedFrames=frCircuitReceivedFrames, frCircuitMulticast=frCircuitMulticast, frDlcmiPollingInterval=frDlcmiPollingInterval, frameRelayTrapControl=frameRelayTrapControl, frErrTable=frErrTable, frDlcmiMulticast=frDlcmiMulticast, DLCI=DLCI, frDlcmiAddress=frDlcmiAddress, frCircuitReceivedOctets=frCircuitReceivedOctets, frameRelayTraps=frameRelayTraps, frDlcmiAddressLen=frDlcmiAddressLen, frTrapState=frTrapState, frCircuitSentDEs=frCircuitSentDEs, frCircuitEntry=frCircuitEntry, frErrIfIndex=frErrIfIndex, frDlcmiIfIndex=frDlcmiIfIndex)
