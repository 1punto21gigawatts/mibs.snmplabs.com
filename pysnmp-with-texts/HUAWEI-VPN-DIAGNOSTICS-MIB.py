#
# PySNMP MIB module HUAWEI-VPN-DIAGNOSTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-VPN-DIAGNOSTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
HWL2VpnVcEncapsType, = mibBuilder.importSymbols("HUAWEI-VPLS-EXT-MIB", "HWL2VpnVcEncapsType")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Bits, TimeTicks, Counter32, NotificationType, IpAddress, Unsigned32, ObjectIdentity, iso, mib_2, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Bits", "TimeTicks", "Counter32", "NotificationType", "IpAddress", "Unsigned32", "ObjectIdentity", "iso", "mib-2", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
vpndiagnostics = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172))
vpndiagnostics.setRevisions(('2014-01-18 17:22', '2013-12-16 09:58', '2013-07-16 16:00', '2008-06-06 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vpndiagnostics.setRevisionsDescriptions(('Modify type of hwVpnCfgPingPwId and hwVpnCfgPingResultPwId at 2014-01-18.', 'Modify type of hwVpnCfgPingPwId and hwVpnCfgPingResultPwId at 2013-12-16.', 'Modify description of hwOamMacCountReset at 2013-7-16.', 'Inition at 2008-6-6.',))
if mibBuilder.loadTexts: vpndiagnostics.setLastUpdated('201401181722Z')
if mibBuilder.loadTexts: vpndiagnostics.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: vpndiagnostics.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: vpndiagnostics.setDescription('HUAWEI service quality detect funcion.')
class MacOpType(TextualConvention, Integer32):
    description = 'Select test type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("populate", 1), ("purge", 2))

macoper = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1))
populateBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 1))
hwOamMacPopulateCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacPopulateCount.setStatus('current')
if mibBuilder.loadTexts: hwOamMacPopulateCount.setDescription('Received populate packets in current device.')
hwOamMacPurgeCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacPurgeCount.setStatus('current')
if mibBuilder.loadTexts: hwOamMacPurgeCount.setDescription('Received purge packets in current device.')
hwOamMacPurgeRegCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacPurgeRegCount.setStatus('current')
if mibBuilder.loadTexts: hwOamMacPurgeRegCount.setDescription('Received purge(register) packets in current device.')
hwOamMacCountReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("populatereset", 1), ("purgereset", 2), ("purgeregreset", 3), ("allreset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOamMacCountReset.setStatus('current')
if mibBuilder.loadTexts: hwOamMacCountReset.setDescription('Reset the count of hwOamMacPopulateCount and hwOamMacPurgeCount, the value 1 means reset hwOamMacPopulateCount,the value is 2 means reset hwOamMacPurgeCount, the value is 3 means reset hwOamMacPurgeRegCount ,the value is 4 means reset hwOamMacPopulateCount and hwOamMacPurgeCount,hwOamMacPurgeRegCount , When read, it always returns value 4.')
hwOamMacSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOamMacSwitch.setStatus('current')
if mibBuilder.loadTexts: hwOamMacSwitch.setDescription('Indicates the switch of enabling MAC populate,if the value is 1, enable; if the value is 2, disable.')
hwOamMacEntryNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacEntryNum.setStatus('current')
if mibBuilder.loadTexts: hwOamMacEntryNum.setDescription('The entry number of hwOamMacDisplayTable.')
hwOamMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2), )
if mibBuilder.loadTexts: hwOamMacOperTable.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperTable.setDescription('A table which to be populate or purge operation.')
hwOamMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1), ).setIndexNames((0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperIndex"))
if mibBuilder.loadTexts: hwOamMacOperEntry.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperEntry.setDescription('Entries of hwOamMacOperTable.')
hwOamMacOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hwOamMacOperIndex.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperIndex.setDescription('The index of hwOamMacOperIndex,it is always 1.')
hwOamMacOperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOamMacOperAddress.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperAddress.setDescription('The MAC that to be populated or purged.')
hwOamMacOperVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOamMacOperVsiName.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperVsiName.setDescription('The name or other identifier referring to the VSI which is correlative to the hwOamMac.')
hwOamMacOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 4), MacOpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOamMacOperType.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperType.setDescription('The operate type,1 means populate,2 means purge.')
hwOamMacOperRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 5), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOamMacOperRegister.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperRegister.setDescription('while purge a OAM MAC,register it to be a reserved MAC . 1 means register, 2 means not register. Defaut is 2.')
hwOamMacOperFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 6), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOamMacOperFlood.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperFlood.setDescription('Broadcast the packet or not. 1 means broadcast, 2 means don`t broadcast.Defaut is 2.')
hwOamMacOperNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOamMacOperNum.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperNum.setDescription('The number of packets which want to be sent.')
hwOamMacOperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOamMacOperRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperRowStatus.setDescription('The operating state of the row.')
hwOamMacListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 3), )
if mibBuilder.loadTexts: hwOamMacListTable.setStatus('current')
if mibBuilder.loadTexts: hwOamMacListTable.setDescription('A table which displays the OAM MAC applied at huawei.')
hwOamMacListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 3, 1), ).setIndexNames((0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacListIndex"))
if mibBuilder.loadTexts: hwOamMacListEntry.setStatus('current')
if mibBuilder.loadTexts: hwOamMacListEntry.setDescription('Display the OAM MAC applied at huawei.')
hwOamMacListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hwOamMacListIndex.setStatus('current')
if mibBuilder.loadTexts: hwOamMacListIndex.setDescription('The index of hwOamMacListIndex.')
hwOamMacListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacListAddress.setStatus('current')
if mibBuilder.loadTexts: hwOamMacListAddress.setDescription('The OAM MAC applied at huawei.')
hwOamMacDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4), )
if mibBuilder.loadTexts: hwOamMacDisplayTable.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayTable.setDescription('A table which displays the result of populate or purge operation.')
hwOamMacDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4, 1), ).setIndexNames((0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacDisplayIndex"))
if mibBuilder.loadTexts: hwOamMacDisplayEntry.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayEntry.setDescription('Entries of hwOamMacDisplayTable.')
hwOamMacDisplayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: hwOamMacDisplayIndex.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayIndex.setDescription('The index of hwOamMacDisplayEntry, the value range is from 1 to 100.')
hwOamMacDisplayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacDisplayAddress.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayAddress.setDescription('The OAM MAC that had been populated or purged.')
hwOamMacDisplayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4, 1, 3), MacOpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacDisplayType.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayType.setDescription('The OAM MAC type, 1 means populate, 2 means purge.')
hwOamMacDisplayVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacDisplayVsiName.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayVsiName.setDescription('The name or other identifier referring to the VSI which is correlative to the hwOamMac.')
hwOamMacDisplayAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacDisplayAgeTime.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayAgeTime.setDescription('The age time of the entry.')
hwOamMacDisplayLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOamMacDisplayLsrId.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayLsrId.setDescription('The LSR-ID of the sender.')
macoperConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5))
hwOamMacGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5, 1))
macoperCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5, 2))
macoperCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5, 2, 1)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwPopuBaseGroup"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperGroup"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacListGroup"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacDisplayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    macoperCompliance = macoperCompliance.setStatus('current')
if mibBuilder.loadTexts: macoperCompliance.setDescription('Description.')
hwPopuBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5, 1, 1)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacPopulateCount"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacPurgeCount"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacPurgeRegCount"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacCountReset"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacSwitch"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacEntryNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPopuBaseGroup = hwPopuBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hwPopuBaseGroup.setDescription('hwPopuBaseGroup.')
hwOamMacOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5, 1, 2)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperAddress"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperVsiName"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperRegister"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperFlood"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperNum"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacOperRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOamMacOperGroup = hwOamMacOperGroup.setStatus('current')
if mibBuilder.loadTexts: hwOamMacOperGroup.setDescription('A collection of objects indicating information of IP address of interface, contain Ip address, Ip address mask and Ip address acquiring method.')
hwOamMacListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5, 1, 3)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacListAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOamMacListGroup = hwOamMacListGroup.setStatus('current')
if mibBuilder.loadTexts: hwOamMacListGroup.setDescription('A collection of objects indicating information of IP address of interface, contain Ip address, Ip address mask and Ip address acquiring method.')
hwOamMacDisplayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 1, 5, 1, 4)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacDisplayAddress"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacDisplayType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacDisplayVsiName"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacDisplayAgeTime"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwOamMacDisplayLsrId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOamMacDisplayGroup = hwOamMacDisplayGroup.setStatus('current')
if mibBuilder.loadTexts: hwOamMacDisplayGroup.setDescription('A collection of objects indicating information of IP address of interface, contain Ip address, Ip address mask and Ip address acquiring method.')
hwVpnCfgPing = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2))
hwVpnCfgPingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1), )
if mibBuilder.loadTexts: hwVpnCfgPingTable.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingTable.setDescription('hwVpnCfgPingTable.')
hwVpnCfgPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1), ).setIndexNames((0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingIndex"))
if mibBuilder.loadTexts: hwVpnCfgPingEntry.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingEntry.setDescription('This object indicates that the index of this table is hwVpnCfgPingIndex.')
hwVpnCfgPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwVpnCfgPingIndex.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingIndex.setDescription('This object indicates the index of an operation instance.')
hwVpnCfgPingPeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingPeerIpType.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingPeerIpType.setDescription('This object indicates the type of the peer IP address. It is used to identify the value type of hwVpnCfgPingPeerIp, which can be IPv4 or IPv6.')
hwVpnCfgPingPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingPeerIp.setDescription('This object indicates the peer IP address.')
hwVpnCfgPingVpnIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("martiniVPLS", 1), ("kompellaVPLS", 2), ("l3vpn", 3), ("pwe3", 4), ("martiniVLL", 5), ("bgpadVPLS", 6), ("unknown", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingVpnIdType.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingVpnIdType.setDescription('This object indicates the VPN ID type, that is, the type of hwVPNCFGPingVPNID. The VPN ID type can be VPLS, L3VPN, PWE3, or Martini VLL.')
hwVpnCfgPingVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingVpnId.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingVpnId.setDescription('This object indicates the VPN ID, expressed in a character string. The VPN ID is VSI-Name for VPLS, VPN-Instance for L3VPN, and invalid for PWE3 and Martini VLL.')
hwVpnCfgPingPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingPwId.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingPwId.setDescription('This object indicates PW-ID. This value is set for the parameter only when the VPLS is in Martini mode. Otherwise, the value is 0.')
hwVpnCfgPingTunnelUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("localOnly", 2), ("remoteOnly", 3), ("localAndRemote", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingTunnelUsed.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingTunnelUsed.setDescription('This object indicates the mode of forwarding request packets or response packets (such as tunnel forwarding).')
hwVpnCfgPingOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 8), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingOperation.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingOperation.setDescription('This object indicates two values: enable(1) and disable(2). enable(1) indicates that the operation instance is started; disable(2) indicates that the operation instance is stopped.')
hwVpnCfgPingResultDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("requestSentReplyRecieved", 1), ("requestSentReplyTimeout", 2), ("requestFailedReplyFailed", 3), ("noResult", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultDetail.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultDetail.setDescription('This object indicates the result detail of ping operation.')
hwVpnCfgPingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingRowStatus.setDescription('This object indicates the row status.')
hwVpnCfgPingSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("unknown", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingSecondary.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingSecondary.setDescription('This object indicates the local secondary PW.')
hwVpnCfgPingIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingIfName.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingIfName.setDescription('This object indicates the name of the AC interface.')
hwVpnCfgPingPwIdNew = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVpnCfgPingPwIdNew.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingPwIdNew.setDescription('This object indicates PW-ID. This value is set for the parameter only when the VPLS is in Martini mode. Otherwise, the value is 0. Because hwVpnCfgPingPwId ranges from -2147483647 to +2147483647, failing to cover the range from 2147483648 to 4294967295, this object ranging from 0 to 4294967295 is therefore added.')
hwVpnCfgPingResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2), )
if mibBuilder.loadTexts: hwVpnCfgPingResultTable.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultTable.setDescription('hwVpnCfgPingResultTable.')
hwVpnCfgPingResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1), ).setIndexNames((0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingIndex"), (0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultLocation"))
if mibBuilder.loadTexts: hwVpnCfgPingResultEntry.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultEntry.setDescription('This object indicates that indexes of this table are hwVpnCfgPingIndex and hwVpnCfgPingResultLocation.')
hwVpnCfgPingResultLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))))
if mibBuilder.loadTexts: hwVpnCfgPingResultLocation.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultLocation.setDescription('This object indicates two values: local(1) and remote(2). local(1) indicates configurations of the local end displayed in the probe result. remote(2) indicates configurations of the peer end displayed in the probe result.')
hwVpnCfgPingResultVpnIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("martiniVPLS", 1), ("kompellaVPLS", 2), ("l3vpn", 3), ("pwe3", 4), ("martiniVLL", 5), ("bgpadVPLS", 6), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultVpnIdType.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultVpnIdType.setDescription('This object indicates the VPN ID type, that is, the type of hwVPNCFGPingVPNID. The VPN ID type can be VPLS, L3VPN, PWE3, or Martini VLL.')
hwVpnCfgPingResultVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultVpnId.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultVpnId.setDescription('This object indicates the VPN ID, expressed in a character string. The VPN ID is VSI-Name for VPLS, VPN-Instance for L3VPN, and invalid for PWE3 and Martini VLL.')
hwVpnCfgPingResultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultDesc.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultDesc.setDescription('This object indicates the description of the VPN.')
hwVpnCfgPingResultVpnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultVpnAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultVpnAdminStatus.setDescription('This object indicates the management status of the VPN: up(1), down(2), and unknown(255).')
hwVpnCfgPingResultOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultOperStatus.setDescription('This object indicates the operation status of the VPN: up(1), down(2), and unknown(255).')
hwVpnCfgPingResultMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultMtu.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultMtu.setDescription('This object indicates the MTU value. The object represents the MTU value of the AC interface when the VPN type is PWE3 or Martini VLL, represents the MTU value of the VSI when the VPN type is VPLS. If the value of the object cannot be obtained, the object value is considered as 0.')
hwVpnCfgPingResultCeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultCeCount.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultCeCount.setDescription('This object indicates the number of CEs.')
hwVpnCfgPingResultActualIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultActualIpType.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultActualIpType.setDescription('This object indicates the type of the IP address of the PW on the local PE. It is used to identify the value type of hwVpnCfgPingResultActualIp.')
hwVpnCfgPingResultActualIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultActualIp.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultActualIp.setDescription('This object indicates the IP address of the PW on the local PE.')
hwVpnCfgPingResultPeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultPeerIpType.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultPeerIpType.setDescription('This object indicates the type of the IP address of the PW on the peer PE. It is used to identify the value type of hwVpnCfgPingResultPeerIP.')
hwVpnCfgPingResultPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultPeerIp.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultPeerIp.setDescription('This object indicates the IP address of the PW on the peer PE.')
hwVpnCfgPingResultPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultPwId.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultPwId.setDescription('This object indicates PW-ID.')
hwVpnCfgPingResultPeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("upe", 1), ("spe", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultPeType.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultPeType.setDescription('This object indicates the type of the PE (Whether the PE is an SPE.)')
hwVpnCfgPingResultVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 15), HWL2VpnVcEncapsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultVcType.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultVcType.setDescription('This object indicates the VC type.')
hwVpnCfgPingResultLabelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultLabelIn.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultLabelIn.setDescription('This object indicates the incoming label of the interface at the PW side.')
hwVpnCfgPingResultLableOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultLableOut.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultLableOut.setDescription('This object indicates the outgoing label of the interface at the PW side.')
hwVpnCfgPingResultControlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultControlWord.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultControlWord.setDescription('This object indicates whether the keyword control-word is configured.')
hwVpnCfgPingResultPriOrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultPriOrSec.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultPriOrSec.setDescription('This object indicates whether the local PW is a primary PW or a secondary PW.')
hwVpnCfgPingResultVplsID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultVplsID.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultVplsID.setDescription('This object indicates the virtual private LAN service id.')
hwVpnCfgPingResultRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultRD.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultRD.setDescription('This object indicates the route distinguisher.')
hwVpnCfgPingResultPwIdNew = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultPwIdNew.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultPwIdNew.setDescription('This object indicates PW-ID. Because hwVpnCfgPingResultPwId ranges from -2147483647 to +2147483647, failing to cover the range from 2147483648 to 4294967295, this object ranging from 0 to 4294967295 is therefore added.')
hwVpnCfgPingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3))
hwVpnCfgPingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3, 1))
hwVpnCfgPingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3, 2))
hwVpnCfgPingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3, 2, 1)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingGroup"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultGroup"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultIRtGroup"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultERtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVpnCfgPingCompliance = hwVpnCfgPingCompliance.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingCompliance.setDescription('Description.')
hwVpnCfgPingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3, 1, 1)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingPeerIpType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingPeerIp"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingVpnIdType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingVpnId"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingPwId"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingTunnelUsed"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingOperation"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultDetail"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingRowStatus"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingIfName"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingSecondary"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingPwIdNew"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVpnCfgPingGroup = hwVpnCfgPingGroup.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingGroup.setDescription('hwVpnCfgPingGroup.')
hwVpnCfgPingResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3, 1, 2)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultVpnIdType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultVpnId"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultDesc"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultVpnAdminStatus"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultOperStatus"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultMtu"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultCeCount"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultActualIpType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultActualIp"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultPeerIpType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultPeerIp"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultPwId"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultPeType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultVcType"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultLabelIn"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultLableOut"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultControlWord"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultPriOrSec"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultVplsID"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultRD"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultPwIdNew"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVpnCfgPingResultGroup = hwVpnCfgPingResultGroup.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultGroup.setDescription('hwVpnCfgPingResultGroup.')
hwVpnCfgPingResultIRtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3, 1, 3)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultIRtIndex"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultIRt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVpnCfgPingResultIRtGroup = hwVpnCfgPingResultIRtGroup.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultIRtGroup.setDescription('hwVpnCfgPingResultIRtGroup.')
hwVpnCfgPingResultERtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 3, 1, 4)).setObjects(("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultERtIndex"), ("HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultERt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVpnCfgPingResultERtGroup = hwVpnCfgPingResultERtGroup.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultERtGroup.setDescription('hwVpnCfgPingResultERtGroup.')
hwVpnCfgPingResultIRtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 4), )
if mibBuilder.loadTexts: hwVpnCfgPingResultIRtTable.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultIRtTable.setDescription('hwVpnCfgPingResultIRtTable.')
hwVpnCfgPingResultIRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 4, 1), ).setIndexNames((0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingIndex"), (0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultLocation"), (0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultIRtIndex"))
if mibBuilder.loadTexts: hwVpnCfgPingResultIRtEntry.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultIRtEntry.setDescription('This object indicates that indexes of this table are hwVpnCfgPingIndex and hwVpnCfgPingResultLocation.')
hwVpnCfgPingResultIRtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hwVpnCfgPingResultIRtIndex.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultIRtIndex.setDescription('This object indicates the index of an import vpn target.')
hwVpnCfgPingResultIRt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultIRt.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultIRt.setDescription('This object indicates the import vpn target.')
hwVpnCfgPingResultERtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 5), )
if mibBuilder.loadTexts: hwVpnCfgPingResultERtTable.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultERtTable.setDescription('hwVpnCfgPingResultERtTable.')
hwVpnCfgPingResultERtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 5, 1), ).setIndexNames((0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingIndex"), (0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultLocation"), (0, "HUAWEI-VPN-DIAGNOSTICS-MIB", "hwVpnCfgPingResultERtIndex"))
if mibBuilder.loadTexts: hwVpnCfgPingResultERtEntry.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultERtEntry.setDescription('This object indicates that indexes of this table are hwVpnCfgPingIndex and hwVpnCfgPingResultLocation.')
hwVpnCfgPingResultERtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hwVpnCfgPingResultERtIndex.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultERtIndex.setDescription('This object indicates the index of an export vpn target..')
hwVpnCfgPingResultERt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 172, 2, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVpnCfgPingResultERt.setStatus('current')
if mibBuilder.loadTexts: hwVpnCfgPingResultERt.setDescription('This object indicates the export vpn target.')
mibBuilder.exportSymbols("HUAWEI-VPN-DIAGNOSTICS-MIB", hwVpnCfgPingIndex=hwVpnCfgPingIndex, hwVpnCfgPingOperation=hwVpnCfgPingOperation, macoperCompliances=macoperCompliances, hwOamMacDisplayLsrId=hwOamMacDisplayLsrId, hwVpnCfgPingResultIRtGroup=hwVpnCfgPingResultIRtGroup, hwVpnCfgPingResultLabelIn=hwVpnCfgPingResultLabelIn, hwVpnCfgPingResultDetail=hwVpnCfgPingResultDetail, hwOamMacGroup=hwOamMacGroup, hwVpnCfgPingPeerIpType=hwVpnCfgPingPeerIpType, hwOamMacOperEntry=hwOamMacOperEntry, hwVpnCfgPingPwIdNew=hwVpnCfgPingPwIdNew, hwOamMacOperVsiName=hwOamMacOperVsiName, hwOamMacCountReset=hwOamMacCountReset, hwOamMacPopulateCount=hwOamMacPopulateCount, hwVpnCfgPingCompliances=hwVpnCfgPingCompliances, hwOamMacListEntry=hwOamMacListEntry, hwVpnCfgPingResultEntry=hwVpnCfgPingResultEntry, hwOamMacOperRowStatus=hwOamMacOperRowStatus, hwVpnCfgPingConformance=hwVpnCfgPingConformance, hwOamMacOperIndex=hwOamMacOperIndex, hwOamMacDisplayAddress=hwOamMacDisplayAddress, hwVpnCfgPingResultVplsID=hwVpnCfgPingResultVplsID, hwVpnCfgPing=hwVpnCfgPing, hwVpnCfgPingVpnIdType=hwVpnCfgPingVpnIdType, PYSNMP_MODULE_ID=vpndiagnostics, macoper=macoper, vpndiagnostics=vpndiagnostics, hwVpnCfgPingGroup=hwVpnCfgPingGroup, hwVpnCfgPingResultIRtEntry=hwVpnCfgPingResultIRtEntry, hwVpnCfgPingTunnelUsed=hwVpnCfgPingTunnelUsed, hwVpnCfgPingGroups=hwVpnCfgPingGroups, hwVpnCfgPingResultPwIdNew=hwVpnCfgPingResultPwIdNew, hwOamMacOperTable=hwOamMacOperTable, hwVpnCfgPingResultControlWord=hwVpnCfgPingResultControlWord, hwVpnCfgPingIfName=hwVpnCfgPingIfName, hwVpnCfgPingResultIRtTable=hwVpnCfgPingResultIRtTable, hwVpnCfgPingPeerIp=hwVpnCfgPingPeerIp, hwVpnCfgPingResultERtTable=hwVpnCfgPingResultERtTable, hwVpnCfgPingResultActualIp=hwVpnCfgPingResultActualIp, hwVpnCfgPingResultPeType=hwVpnCfgPingResultPeType, hwOamMacOperRegister=hwOamMacOperRegister, hwVpnCfgPingResultCeCount=hwVpnCfgPingResultCeCount, hwVpnCfgPingResultERtIndex=hwVpnCfgPingResultERtIndex, hwOamMacSwitch=hwOamMacSwitch, hwOamMacEntryNum=hwOamMacEntryNum, hwOamMacDisplayVsiName=hwOamMacDisplayVsiName, hwOamMacDisplayAgeTime=hwOamMacDisplayAgeTime, hwOamMacDisplayGroup=hwOamMacDisplayGroup, hwOamMacDisplayTable=hwOamMacDisplayTable, hwVpnCfgPingResultPwId=hwVpnCfgPingResultPwId, hwVpnCfgPingCompliance=hwVpnCfgPingCompliance, hwOamMacOperNum=hwOamMacOperNum, hwVpnCfgPingResultLocation=hwVpnCfgPingResultLocation, hwVpnCfgPingResultPeerIp=hwVpnCfgPingResultPeerIp, hwVpnCfgPingResultMtu=hwVpnCfgPingResultMtu, hwVpnCfgPingResultActualIpType=hwVpnCfgPingResultActualIpType, hwOamMacPurgeRegCount=hwOamMacPurgeRegCount, macoperCompliance=macoperCompliance, hwVpnCfgPingTable=hwVpnCfgPingTable, hwVpnCfgPingResultPeerIpType=hwVpnCfgPingResultPeerIpType, hwVpnCfgPingEntry=hwVpnCfgPingEntry, hwVpnCfgPingResultIRt=hwVpnCfgPingResultIRt, hwOamMacListIndex=hwOamMacListIndex, hwOamMacOperGroup=hwOamMacOperGroup, hwOamMacDisplayType=hwOamMacDisplayType, hwVpnCfgPingResultGroup=hwVpnCfgPingResultGroup, hwVpnCfgPingResultVpnIdType=hwVpnCfgPingResultVpnIdType, hwOamMacListAddress=hwOamMacListAddress, hwOamMacListGroup=hwOamMacListGroup, hwVpnCfgPingResultIRtIndex=hwVpnCfgPingResultIRtIndex, hwOamMacListTable=hwOamMacListTable, hwVpnCfgPingResultRD=hwVpnCfgPingResultRD, hwVpnCfgPingResultERt=hwVpnCfgPingResultERt, hwVpnCfgPingRowStatus=hwVpnCfgPingRowStatus, hwVpnCfgPingResultOperStatus=hwVpnCfgPingResultOperStatus, hwVpnCfgPingResultVcType=hwVpnCfgPingResultVcType, hwPopuBaseGroup=hwPopuBaseGroup, hwOamMacOperType=hwOamMacOperType, hwVpnCfgPingResultDesc=hwVpnCfgPingResultDesc, hwVpnCfgPingResultLableOut=hwVpnCfgPingResultLableOut, hwVpnCfgPingResultVpnId=hwVpnCfgPingResultVpnId, hwVpnCfgPingResultPriOrSec=hwVpnCfgPingResultPriOrSec, macoperConformance=macoperConformance, hwOamMacOperAddress=hwOamMacOperAddress, hwVpnCfgPingPwId=hwVpnCfgPingPwId, hwOamMacDisplayIndex=hwOamMacDisplayIndex, hwVpnCfgPingResultVpnAdminStatus=hwVpnCfgPingResultVpnAdminStatus, hwVpnCfgPingResultERtEntry=hwVpnCfgPingResultERtEntry, hwOamMacDisplayEntry=hwOamMacDisplayEntry, MacOpType=MacOpType, hwVpnCfgPingSecondary=hwVpnCfgPingSecondary, hwVpnCfgPingResultERtGroup=hwVpnCfgPingResultERtGroup, hwOamMacOperFlood=hwOamMacOperFlood, hwVpnCfgPingResultTable=hwVpnCfgPingResultTable, hwOamMacPurgeCount=hwOamMacPurgeCount, hwVpnCfgPingVpnId=hwVpnCfgPingVpnId, populateBase=populateBase)
