#
# PySNMP MIB module CISCO-LWAPP-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DHCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, ObjectIdentity, Integer32, Bits, NotificationType, Counter64, Gauge32, TimeTicks, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "ObjectIdentity", "Integer32", "Bits", "NotificationType", "Counter64", "Gauge32", "TimeTicks", "MibIdentifier", "Counter32")
TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
ciscoLwappDhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 792))
ciscoLwappDhcpMIB.setRevisions(('2012-01-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappDhcpMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappDhcpMIB.setLastUpdated('201204050000Z')
if mibBuilder.loadTexts: ciscoLwappDhcpMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappDhcpMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappDhcpMIB.setDescription("This MIB is used to manage Dynamic Host Configuration Protocol (DHCP) related information on the devices operating as Central controllers, that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node, Mobile Station(Ms) and client are used interchangeably. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol")
ciscoLwappDhcpMIBNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 0))
ciscoLwappDhcpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1))
ciscoLwappDhcpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 2))
ciscoLwappDhcpGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1))
ciscoLwappDhcpStatsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2))
ciscoLwappDhcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3))
ciscoLwappDhcpScopeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4))
ciscoLwappDhcpMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 5))
cLDhcpClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpClearAllStats.setStatus('current')
if mibBuilder.loadTexts: cLDhcpClearAllStats.setDescription("This attribute when set to 'true', clears all the statistics of all the DHCP servers. This attribute resets to 'false' after the action is performed.")
cLDhcpOpt82RemoteIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("apMac", 1), ("apMacSsid", 2), ("apEthMac", 3), ("apNameSsid", 4), ("apGroupName", 5), ("flexGroupName", 6), ("apLocation", 7), ("apMacVlanId", 8), ("apNameVlanId", 9), ("apEthMacSsid", 10))).clone('apMac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpOpt82RemoteIdFormat.setStatus('current')
if mibBuilder.loadTexts: cLDhcpOpt82RemoteIdFormat.setDescription('This object specifies the format for RemoteId field in DHCP option 82 of the controller. when set to apMac (1), the DHCP Option 82 RemoteID format is set to ap-mac. when set to apMacSsid(2), the DHCP Option 82 RemoteID format is set to apmac::SSID.')
cLDhcpClearAllDiscontinuityTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpClearAllDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cLDhcpClearAllDiscontinuityTime.setDescription('The value of sysUpTime on the most recent occasion at which any one or more of this DHCP server counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
cLDhcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpTimeout.setStatus('current')
if mibBuilder.loadTexts: cLDhcpTimeout.setDescription('This attribute represents the time to wait for DHCP address assignment after the user associates.')
cLDhcpOpt37RemoteIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("apMac", 1), ("apMacSsid", 2), ("apEthMac", 3), ("apNameSsid", 4), ("apGroupName", 5), ("flexGroupName", 6), ("apLocation", 7), ("apMacVlanId", 8), ("apNameVlanId", 9), ("apEthMacSsid", 10))).clone('apMac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpOpt37RemoteIdFormat.setStatus('current')
if mibBuilder.loadTexts: cLDhcpOpt37RemoteIdFormat.setDescription('This object is specific to DHCP IPV6 and it specifies the format for RemoteId field in DHCP option 37 of the controller. when set to apMac (1), the DHCP Option 37 RemoteID format is set to ap-mac. when set to apMacSsid(2), the DHCP Option 37 RemoteID format is set to apmac::SSID. When set to apEthMac(3), the DHCP option37 RemoteId format is set to AP Ethernet MacAddress. when set to apNameSsid (4), the DHCP Option 37 RemoteID format is set to AP name - SSID. ')
cLDhcpStatsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1), )
if mibBuilder.loadTexts: cLDhcpStatsConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLDhcpStatsConfigTable.setDescription('This contains configurable attributes for statistics of the dhcp servers, uniquely identified by IP Address.')
cLDhcpStatsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddressType"), (0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddress"))
if mibBuilder.loadTexts: cLDhcpStatsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLDhcpStatsConfigEntry.setDescription('Each entry represents a DHCP server uniquely Identified by the IP Address.An entry gets added to the table on configuring a DHCP server ip address and deleted from the table when the address is deleted.')
cLDhcpServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLDhcpServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cLDhcpServerInetAddressType.setDescription('This object represents the type of Ip address of the DHCP server.')
cLDhcpServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLDhcpServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: cLDhcpServerInetAddress.setDescription('This object represents the Ip address of the DHCP server.')
cLDhcpClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpClearStats.setStatus('current')
if mibBuilder.loadTexts: cLDhcpClearStats.setDescription("This object when set to 'true', will clear the Statistics of the dhcp server represented by the unique IP address.")
cLDhcpClearDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpClearDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cLDhcpClearDiscontinuityTime.setDescription('The value of sysUpTime on the most recent occasion at which this particular DHCP server counter suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
cLDhcpStatsShowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1), )
if mibBuilder.loadTexts: cLDhcpStatsShowTable.setStatus('current')
if mibBuilder.loadTexts: cLDhcpStatsShowTable.setDescription('This contains various statistics of the dhcp Servers, uniquely identified by IP Address.')
cLDhcpStatsShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddressType"), (0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpServerInetAddress"))
if mibBuilder.loadTexts: cLDhcpStatsShowEntry.setStatus('current')
if mibBuilder.loadTexts: cLDhcpStatsShowEntry.setDescription('Each entry represents a DHCP server uniquely Identified by the IP Address.')
cLDhcpProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLDhcpProxy.setStatus('current')
if mibBuilder.loadTexts: cLDhcpProxy.setDescription("This object represents whether the proxy option is Enabled or disabled. A 'true' value indicates that the option is enabled. A 'false' value indicates that the option is disabled.")
cLDhcpDiscoverPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpDiscoverPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpDiscoverPackets.setDescription('This object represents the number of DHCP discover Packets sent by the controller.')
cLDhcpRequestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpRequestPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpRequestPackets.setDescription('This object represents the number of DHCP request packets sent by the controller.')
cLDhcpDeclinePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpDeclinePackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpDeclinePackets.setDescription('This object represents the number of DHCP decline Packets received by the controller.')
cLDhcpInformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpInformPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpInformPackets.setDescription('This object represents the number of DHCP inform packets sent by the controller.')
cLDhcpReleasePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpReleasePackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpReleasePackets.setDescription('This object represents the number of DHCP release packets sent by the controller.')
cLDhcpReplyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpReplyPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpReplyPackets.setDescription('This object represents the number of DHCP reply Packets received by the controller.')
cLDhcpOfferPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpOfferPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpOfferPackets.setDescription('This object represents the number of DHCP offer packets received by the controller.')
cLDhcpAckPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpAckPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpAckPackets.setDescription('This object represents the number of acknowledge packets sent by the controller.')
cLDhcpNakPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpNakPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpNakPackets.setDescription('This object represents the number of Nak packets sent by the controller.')
cLDhcpTxFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpTxFailures.setStatus('current')
if mibBuilder.loadTexts: cLDhcpTxFailures.setDescription('This object represents the number of transmission failures received by the controller.')
cLDhcpLastResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 12), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpLastResponseTime.setStatus('current')
if mibBuilder.loadTexts: cLDhcpLastResponseTime.setDescription('This object represents the time at which the last DHCP response was received by the controller.')
cLDhcpLastRequestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 13), TimeStamp()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpLastRequestTime.setStatus('current')
if mibBuilder.loadTexts: cLDhcpLastRequestTime.setDescription('This object represents the time at which the last DHCP request was sent by the controller.')
cLDhcpRxDiscoverPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 3, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpRxDiscoverPackets.setStatus('current')
if mibBuilder.loadTexts: cLDhcpRxDiscoverPackets.setDescription('This object represents the number of DHCP discover packets received by the controller.')
cLDhcpScopeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1), )
if mibBuilder.loadTexts: cLDhcpScopeStatsTable.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeStatsTable.setDescription('This object contains various statistics of each scope for the DHCP Server.')
cLDhcpScopeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DHCP-MIB", "cLDhcpScopeIndex"))
if mibBuilder.loadTexts: cLDhcpScopeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeStatsEntry.setDescription('Each entry represents a statistics of scope.')
cLDhcpScopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cLDhcpScopeIndex.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeIndex.setDescription('This object represents the DHCP Scope Identifier Index.')
cLDhcpScopeAddressPoolUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 2), Unsigned32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAddressPoolUsage.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeAddressPoolUsage.setDescription("This object represents the DHCP Scope's address pool usage percentage.")
cLDhcpScopeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeName.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeName.setDescription("This object represents the DHCP Scope's name.")
cLDhcpScopeAllocatedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAllocatedIP.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeAllocatedIP.setDescription('This object represents the number of IP address allocated per DHCP pool.')
cLDhcpScopeAvailableIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAvailableIP.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeAvailableIP.setDescription('This object represents the number of IP address available per DHCP pool.')
cLDhcpScopeDiscoverPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeDiscoverPkts.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeDiscoverPkts.setDescription('This object represents the number of DHCP discover Packets received per DHCP pool.')
cLDhcpScopeAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeAckPkts.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeAckPkts.setDescription('This object represents the number of Ack packet received excluding renewing and rebinding per DHCP pool.')
cLDhcpScopeOfferPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeOfferPkts.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeOfferPkts.setDescription('This object represents the number of DHCP offer packets received per DHCP pool.')
cLDhcpScopeTotalAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeTotalAckPkts.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeTotalAckPkts.setDescription('This object represents the number of total Ack packets received per DHCP pool.')
cLDhcpScopeRequestPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeRequestPkts.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeRequestPkts.setDescription('This object represents the number of DHCP request packets received per DHCP pool.')
cLDhcpScopeRequestGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 4, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpScopeRequestGoodPkts.setStatus('current')
if mibBuilder.loadTexts: cLDhcpScopeRequestGoodPkts.setDescription('This object represents the number of DHCP request packets which have been handled successfully per DHCP pool.')
cLDhcpTrapSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 792, 1, 5, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLDhcpTrapSet.setStatus('current')
if mibBuilder.loadTexts: cLDhcpTrapSet.setDescription("This object represents whether this trap is raise or clear. A value of 'true' indicates this event is set. a value of 'false' indicates this event is cleared.")
ciscoLwappDhcpScopeAddressExhaust = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 792, 0, 1)).setObjects(("CISCO-LWAPP-DHCP-MIB", "cLDhcpScopeName"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpTrapSet"))
if mibBuilder.loadTexts: ciscoLwappDhcpScopeAddressExhaust.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDhcpScopeAddressExhaust.setDescription('This notification will be sent whenever the DHCP Scope has no IP address available, with cLDhcpTrapSet set to true. When the clients released an IP address lately, this notification is sent with cLDhcpTrapSet set to false.')
ciscoLwappDhcpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 1))
ciscoLwappDhcpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 2))
ciscoLwappDhcpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 1, 1)).setObjects(("CISCO-LWAPP-DHCP-MIB", "ciscoLwappDhcpMIBConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDhcpMIBCompliance = ciscoLwappDhcpMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDhcpMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappDhcpMIB module.')
ciscoLwappDhcpMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 792, 2, 2, 1)).setObjects(("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearAllStats"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpOpt82RemoteIdFormat"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearAllDiscontinuityTime"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpTimeout"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpOpt37RemoteIdFormat"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearStats"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpClearDiscontinuityTime"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpProxy"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpDiscoverPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpRequestPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpDeclinePackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpInformPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpReleasePackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpReplyPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpOfferPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpAckPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpNakPackets"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpTxFailures"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpLastResponseTime"), ("CISCO-LWAPP-DHCP-MIB", "cLDhcpLastRequestTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDhcpMIBConfigGroup = ciscoLwappDhcpMIBConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDhcpMIBConfigGroup.setDescription('This collection of objects specifies the parameters for DHCP.')
mibBuilder.exportSymbols("CISCO-LWAPP-DHCP-MIB", PYSNMP_MODULE_ID=ciscoLwappDhcpMIB, cLDhcpStatsConfigEntry=cLDhcpStatsConfigEntry, cLDhcpRequestPackets=cLDhcpRequestPackets, ciscoLwappDhcpMIBConfigGroup=ciscoLwappDhcpMIBConfigGroup, cLDhcpProxy=cLDhcpProxy, cLDhcpInformPackets=cLDhcpInformPackets, ciscoLwappDhcpStatsConfig=ciscoLwappDhcpStatsConfig, ciscoLwappDhcpMIBGroups=ciscoLwappDhcpMIBGroups, cLDhcpStatsShowTable=cLDhcpStatsShowTable, ciscoLwappDhcpScopeStats=ciscoLwappDhcpScopeStats, cLDhcpScopeName=cLDhcpScopeName, cLDhcpServerInetAddress=cLDhcpServerInetAddress, cLDhcpClearDiscontinuityTime=cLDhcpClearDiscontinuityTime, cLDhcpDiscoverPackets=cLDhcpDiscoverPackets, cLDhcpReplyPackets=cLDhcpReplyPackets, cLDhcpScopeStatsEntry=cLDhcpScopeStatsEntry, cLDhcpScopeAckPkts=cLDhcpScopeAckPkts, ciscoLwappDhcpMIBConform=ciscoLwappDhcpMIBConform, cLDhcpStatsConfigTable=cLDhcpStatsConfigTable, cLDhcpLastRequestTime=cLDhcpLastRequestTime, cLDhcpTimeout=cLDhcpTimeout, cLDhcpScopeAllocatedIP=cLDhcpScopeAllocatedIP, cLDhcpScopeAvailableIP=cLDhcpScopeAvailableIP, ciscoLwappDhcpScopeAddressExhaust=ciscoLwappDhcpScopeAddressExhaust, ciscoLwappDhcpMIB=ciscoLwappDhcpMIB, cLDhcpScopeRequestPkts=cLDhcpScopeRequestPkts, cLDhcpScopeStatsTable=cLDhcpScopeStatsTable, ciscoLwappDhcpMIBObjects=ciscoLwappDhcpMIBObjects, cLDhcpReleasePackets=cLDhcpReleasePackets, cLDhcpTxFailures=cLDhcpTxFailures, cLDhcpScopeOfferPkts=cLDhcpScopeOfferPkts, ciscoLwappDhcpMIBCompliance=ciscoLwappDhcpMIBCompliance, cLDhcpRxDiscoverPackets=cLDhcpRxDiscoverPackets, cLDhcpScopeDiscoverPkts=cLDhcpScopeDiscoverPkts, cLDhcpScopeRequestGoodPkts=cLDhcpScopeRequestGoodPkts, cLDhcpScopeAddressPoolUsage=cLDhcpScopeAddressPoolUsage, ciscoLwappDhcpMIBCompliances=ciscoLwappDhcpMIBCompliances, cLDhcpServerInetAddressType=cLDhcpServerInetAddressType, cLDhcpScopeTotalAckPkts=cLDhcpScopeTotalAckPkts, cLDhcpOpt82RemoteIdFormat=cLDhcpOpt82RemoteIdFormat, ciscoLwappDhcpStats=ciscoLwappDhcpStats, cLDhcpNakPackets=cLDhcpNakPackets, cLDhcpTrapSet=cLDhcpTrapSet, cLDhcpClearAllDiscontinuityTime=cLDhcpClearAllDiscontinuityTime, ciscoLwappDhcpGlobalConfig=ciscoLwappDhcpGlobalConfig, cLDhcpLastResponseTime=cLDhcpLastResponseTime, cLDhcpScopeIndex=cLDhcpScopeIndex, cLDhcpDeclinePackets=cLDhcpDeclinePackets, cLDhcpOfferPackets=cLDhcpOfferPackets, ciscoLwappDhcpMIBNotifObjects=ciscoLwappDhcpMIBNotifObjects, cLDhcpOpt37RemoteIdFormat=cLDhcpOpt37RemoteIdFormat, ciscoLwappDhcpMIBNotif=ciscoLwappDhcpMIBNotif, cLDhcpClearAllStats=cLDhcpClearAllStats, cLDhcpClearStats=cLDhcpClearStats, cLDhcpAckPackets=cLDhcpAckPackets, cLDhcpStatsShowEntry=cLDhcpStatsShowEntry)
