#
# PySNMP MIB module XEDIA-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-DHCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, ObjectIdentity, Counter32, Bits, ModuleIdentity, TimeTicks, IpAddress, iso, Gauge32, Unsigned32, MibIdentifier, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "Counter32", "Bits", "ModuleIdentity", "TimeTicks", "IpAddress", "iso", "Gauge32", "Unsigned32", "MibIdentifier", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaDhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 28))
if mibBuilder.loadTexts: xediaDhcpMIB.setLastUpdated('9802232155Z')
if mibBuilder.loadTexts: xediaDhcpMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaDhcpMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaDhcpMIB.setDescription('This module defines additional objects for management of DHCP support in Xedia devices.')
xdhcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 28, 1))
xdhcpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 28, 2))
xdhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1))
xdhcpRelayMode = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdhcpRelayMode.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayMode.setDescription('The Administrative mode to control DHCP relay functions.')
xdhcpRelayMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdhcpRelayMaxHops.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayMaxHops.setDescription('This value identifies the maximum number of hops allowed for requests passing through this relay agent. Packets received with a hop count greater than this value will be discarded.')
xdhcpRelayIncludeCircuitID = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdhcpRelayIncludeCircuitID.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayIncludeCircuitID.setDescription('Whether the relay agent should add the circuit ID of the ATM or frame relay circuit that a DHCP relay request was received to the DHCP relay request. The circuit ID will be added as a agent circuit ID sub-option of a DHCP relay agent information option (option 82) and will be used by the relay agent to forward the reply to the correct circuit.')
xdhcpRelayDestTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10), )
if mibBuilder.loadTexts: xdhcpRelayDestTable.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestTable.setDescription('A table of DHCP server destinations that the DHCP relay agent will will relay requests to and responses from.')
xdhcpRelayDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1), ).setIndexNames((0, "XEDIA-DHCP-MIB", "xdhcpRelayDestIndex"))
if mibBuilder.loadTexts: xdhcpRelayDestEntry.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestEntry.setDescription('Information about a single DHCP server.')
xdhcpRelayDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: xdhcpRelayDestIndex.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestIndex.setDescription('A number uniquely identifying each DHCP server that the DHCP relay agent will relay requests to and responses from.')
xdhcpRelayDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdhcpRelayDestination.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestination.setDescription('The destination to which DHCP requests will be sent. It may be a specific server IP address, a local IP subnet on which requests will be broadcast, or an IP server name to be resolved through a DNS lookup.')
xdhcpRelayDestOperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdhcpRelayDestOperAddress.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestOperAddress.setDescription('The operational IP address for this server destination. It will either be the configured IP address or the resolved address if a server name was specified in xdhcpRelayDestination.')
xdhcpRelayDestRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdhcpRelayDestRequests.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestRequests.setDescription('The number of DHCP requests that were received on this interface.')
xdhcpRelayDestReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdhcpRelayDestReplies.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestReplies.setDescription('The number of DHCP replies that were received on this interface.')
xdhcpRelayDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcp", 1), ("bootp", 2), ("dhcpAndBootp", 3))).clone('dhcpAndBootp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdhcpRelayDestProtocol.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestProtocol.setDescription('The protocol(s) to be relayed to this destination.')
xdhcpRelayDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdhcpRelayDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestRowStatus.setDescription("This variable displays the status of the entry. Setting it to 'destroy' marks the entry as removed. Eventually, when no other applications depend on that particular resource, it will be completely removed from the table. Setting it to either 'create', or 'active' will add a row to the table.")
xdhcpRelayDestInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 28, 1, 1, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7)).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xdhcpRelayDestInterface.setStatus('current')
if mibBuilder.loadTexts: xdhcpRelayDestInterface.setDescription("The name of the IP interface over which the DHCP relay destination will be attempted. A value of 'all' represents all IP interfaces.")
xdhcpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 28, 2, 1))
xdhcpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 28, 2, 2))
xdhcpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 28, 2, 1, 1)).setObjects(("XEDIA-DHCP-MIB", "xdhcpAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdhcpCompliance = xdhcpCompliance.setStatus('current')
if mibBuilder.loadTexts: xdhcpCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xdhcpAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 28, 2, 2, 1)).setObjects(("XEDIA-DHCP-MIB", "xdhcpRelayMode"), ("XEDIA-DHCP-MIB", "xdhcpRelayMaxHops"), ("XEDIA-DHCP-MIB", "xdhcpRelayIncludeCircuitID"), ("XEDIA-DHCP-MIB", "xdhcpRelayDestination"), ("XEDIA-DHCP-MIB", "xdhcpRelayDestOperAddress"), ("XEDIA-DHCP-MIB", "xdhcpRelayDestRequests"), ("XEDIA-DHCP-MIB", "xdhcpRelayDestReplies"), ("XEDIA-DHCP-MIB", "xdhcpRelayDestProtocol"), ("XEDIA-DHCP-MIB", "xdhcpRelayDestRowStatus"), ("XEDIA-DHCP-MIB", "xdhcpRelayDestInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xdhcpAllGroup = xdhcpAllGroup.setStatus('current')
if mibBuilder.loadTexts: xdhcpAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-DHCP-MIB", xdhcpRelayDestRequests=xdhcpRelayDestRequests, xdhcpRelayDestEntry=xdhcpRelayDestEntry, xdhcpObjects=xdhcpObjects, xediaDhcpMIB=xediaDhcpMIB, xdhcpCompliances=xdhcpCompliances, xdhcpCompliance=xdhcpCompliance, xdhcpRelayDestRowStatus=xdhcpRelayDestRowStatus, xdhcpConformance=xdhcpConformance, xdhcpRelayDestTable=xdhcpRelayDestTable, xdhcpRelayDestOperAddress=xdhcpRelayDestOperAddress, xdhcpRelayDestReplies=xdhcpRelayDestReplies, xdhcpRelayMode=xdhcpRelayMode, xdhcpRelayIncludeCircuitID=xdhcpRelayIncludeCircuitID, PYSNMP_MODULE_ID=xediaDhcpMIB, xdhcpRelayDestIndex=xdhcpRelayDestIndex, xdhcpRelayDestination=xdhcpRelayDestination, xdhcpRelay=xdhcpRelay, xdhcpRelayMaxHops=xdhcpRelayMaxHops, xdhcpRelayDestInterface=xdhcpRelayDestInterface, xdhcpGroups=xdhcpGroups, xdhcpRelayDestProtocol=xdhcpRelayDestProtocol, xdhcpAllGroup=xdhcpAllGroup)
