#
# PySNMP MIB module CISCO-NHRP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-NHRP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
nhrpCacheType, nhrpClientNbmaAddr, nhrpServerIndex, nhrpCacheNextHopInternetworkAddr, nhrpClientNhsInUse, nhrpServerInternetworkAddrType, nhrpClientNhsNbmaSubaddr, nhrpServerNbmaAddr, nhrpClientStatEntry, nhrpServerCacheUniqueness, nhrpServerStatEntry, nhrpClientHoldTime, nhrpClientRegUniqueness, nhrpServerNbmaSubaddr, nhrpCacheNbmaAddrType, nhrpClientNhsNbmaAddr, nhrpServerInternetworkAddr, nhrpServerNhcInternetworkAddrType, nhrpClientIndex, nhrpServerNhcPrefixLength, nhrpServerNhcNbmaAddr, nhrpClientNhsInternetworkAddr, nhrpClientNbmaAddrType, nhrpServerNhcNbmaSubaddr, nhrpClientInternetworkAddr, nhrpServerNbmaAddrType, nhrpClientInternetworkAddrType, nhrpClientNhsInternetworkAddrType, nhrpServerNhcNbmaAddrType, nhrpClientNbmaSubaddr, nhrpServerNhcInUse, nhrpCacheNbmaAddr, nhrpCacheNbmaSubaddr, nhrpClientNhsNbmaAddrType, nhrpServerNhcInternetworkAddr = mibBuilder.importSymbols("NHRP-MIB", "nhrpCacheType", "nhrpClientNbmaAddr", "nhrpServerIndex", "nhrpCacheNextHopInternetworkAddr", "nhrpClientNhsInUse", "nhrpServerInternetworkAddrType", "nhrpClientNhsNbmaSubaddr", "nhrpServerNbmaAddr", "nhrpClientStatEntry", "nhrpServerCacheUniqueness", "nhrpServerStatEntry", "nhrpClientHoldTime", "nhrpClientRegUniqueness", "nhrpServerNbmaSubaddr", "nhrpCacheNbmaAddrType", "nhrpClientNhsNbmaAddr", "nhrpServerInternetworkAddr", "nhrpServerNhcInternetworkAddrType", "nhrpClientIndex", "nhrpServerNhcPrefixLength", "nhrpServerNhcNbmaAddr", "nhrpClientNhsInternetworkAddr", "nhrpClientNbmaAddrType", "nhrpServerNhcNbmaSubaddr", "nhrpClientInternetworkAddr", "nhrpServerNbmaAddrType", "nhrpClientInternetworkAddrType", "nhrpClientNhsInternetworkAddrType", "nhrpServerNhcNbmaAddrType", "nhrpClientNbmaSubaddr", "nhrpServerNhcInUse", "nhrpCacheNbmaAddr", "nhrpCacheNbmaSubaddr", "nhrpClientNhsNbmaAddrType", "nhrpServerNhcInternetworkAddr")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, Integer32, Counter32, TimeTicks, ModuleIdentity, IpAddress, ObjectIdentity, Bits, Gauge32, Counter64, NotificationType, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "Counter32", "TimeTicks", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Bits", "Gauge32", "Counter64", "NotificationType", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoNhrpExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 680))
ciscoNhrpExtMIB.setRevisions(('2008-11-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoNhrpExtMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoNhrpExtMIB.setLastUpdated('200811210000Z')
if mibBuilder.loadTexts: ciscoNhrpExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoNhrpExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dmvpn@cisco.com')
if mibBuilder.loadTexts: ciscoNhrpExtMIB.setDescription('This MIB module is an extension of the NHRP MIB module as defined in RFC 2677. It defines notifications associated with critical events in the Next Hop Resolution Protocol, NHRP, as defined in RFC 2332. This module also contains information about Cisco proprietary enhancements to the protocol. Glossary of terms used in this MIB: NBMA Non-Broadcast Multi-Access NHRP Next Hop Resolution Protocol Internetwork layer The media-independent layer(IP in case of TCP/IP networks) Subnetwork layer The media-dependent layer underlying the internetwork layer, including the NBMA technology NHC Next Hop Client - An entity which initiates NHRP requests of various types to obtain access to NHRP service. NHS Next Hop Server - An entity providing the NHRP service within the NBMA cloud. NHRC Next Hop Registration Client - An entity which initiates NHRP registration requests. NHRS Next Hop Registration Server - An entity for which an NHRP registration request is destined. NHP Next Hop Peer - Any two NHRP entities in an NBMA network which are not related by an NHRS-NHRC relationship(either of them has not registered with the other) are NHPs to each other. Client Unless explicitly stated or obvious from context, a client refers to an NHC Server Unless explicitly stated or obvious from context, a server refers to an NHS Station A station refers to a host or router which contains an NHRP entity(NHC/NHS) NHRC and NHRS are relevant to a client server model based on registrations alone, in which NHRC is a client and NHRS is a server. In case the use of any term is not clear from context or not explicitly stated, they mean the same as in RFC 2332 and RFC 2677. REFERENCE: [1] RFC 2332 - NBMA Next Hop Resolution Protocol (NHRP) [2] RFC 2677 - Definitions of Managed Objects for the NBMA Next Hop Resolution Protocol (NHRP)')
class CiscoNhrpErrorCode(TextualConvention, Integer32):
    reference = 'Sec.5.2.2, 5.2.4 and 5.2.7 of NHRP specification(RFC 2332) (April 1998)'
    description = "This textual convention is used to indicate the error code associated with failures as part of NHRP protocol messages exchanged in an NBMA network. The values of the enumeration have been chosen to match the values returned as error codes in an NHRP packet. The enumeration can take the following values. -- This indicates that the responder couldn't process an -- extension in the NHRP packet. unrecogExtension(1) Unrecognized extension -- This indicates that an NHRP packet is being forwarded -- in a loop. loopDetected(3) NHRP loop detected -- This indicates that the NHS has refused the NHRP -- Registration/Resolution Request attempt for -- administrative reasons. adminProhibited(4) Administrative reasons -- This indicates that the NHS can't serve a station due to -- lack of resources. insufficientResources(5) Insufficient resources -- This indicates that the protocol address of interest is -- not reachable. addressUnreachable(6) Protocol address unreachable -- This indicates that a generic packet processing error has -- occurred(e.g.failed checksum, invalid protocol type, etc). protocolError(7) Protocol Error -- This indicates that the SDU size of the NHRP packet -- exceeds the MTU size of the NBMA network. sduSizeExceeded(8) NHRP SDU size exceeded -- This indicates that an extension in a packet is -- inappropriate for that packet type. invalidExtension(9) Inappropriate packet type -- This indicates that a client received an NHRP resolution -- reply for a request which it didn't make. invalidResReply(10) Invalid NHRP resolution reply received -- This indicates that a received packet failed an -- authentication test. authFailure(11) Authentication failure -- This indicates that there were absolutely no -- internetworking layer address to NBMA address bindings -- found in the responding NHS's cache. noAddressBinding(12) No address binding present -- This indicates that there were one or more -- internetworking layer address to NBMA address bindings -- found in the responding NHS's cache but none of them had -- the uniqueness bit set. bindingNotUnique(13) Address binding not unique -- This indicates that the client tried to register a -- protocol address to NBMA address binding with the -- uniqueness bit on and the protocol address already exists -- in the NHS's cache(with the uniqueness bit set). uniqueInternetworkAddrRegd(14) Protocol address(with uniqueness bit set) already in cache -- This indicates that the hop count of an NHRP packet has -- been exceeded. hopCountExceeded(15) Hop count exceeded -- This indicates an error that doesn't fall into one of the -- above categories. other(256) Other errors"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 256))
    namedValues = NamedValues(("unrecogExtension", 1), ("loopDetected", 3), ("adminProhibited", 4), ("insufficientResources", 5), ("addressUnreachable", 6), ("protocolError", 7), ("sduSizeExceeded", 8), ("invalidExtension", 9), ("invalidResReply", 10), ("authFailure", 11), ("noAddressBinding", 12), ("bindingNotUnique", 13), ("uniqueInternetworkAddrRegd", 14), ("hopCountExceeded", 15), ("other", 256))

class CiscoNextHopDownReasonCode(TextualConvention, Integer32):
    description = "This textual convention is used to indicate the reason code for a next hop(NHRS or NHRC or NHP) going down, as perceived by another NHRP entity. It can take the following values. -- This indicates administrative reasons such as manual -- deletion of address binding information. administrative(1) Administrative reasons -- This indicates that an NHRC's attempt to register with -- an NHRS has failed. The reason for this failure can be -- retrieved from cneNHRPException object. registrationFailure(2) NHRC's attempt to register failed -- This indicates that an attempt to resolve(or to get -- resolved) a destination address failed. The reason for -- this failure can be retrieved from cneNHRPException -- object. resolutionFailure(3) Address resolution failed -- This indicates that the address binding information was -- deleted as a consequence of a receipt of a purge request. purgeReceived(4) Received a purge request from the peer -- This indicates that the address binding information -- expired normally. normalExpiry(5) Address binding information expired normally -- This indicates that the status of the next hop being down -- was learnt from an external entity. external(6) Learnt from an external entity -- This indicates that the reason for declaring the next hop -- down is not one of the above. other(7) Other reasons"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("administrative", 1), ("registrationFailure", 2), ("resolutionFailure", 3), ("purgeReceived", 4), ("normalExpiry", 5), ("external", 6), ("other", 7))

cneNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 0))
cneObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 1))
cneConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 2))
cneGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 1))
cneClientObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 2))
cneServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 3))
cneNotificationControlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 4))
cneNextHopDownReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 1, 1), CiscoNextHopDownReasonCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cneNextHopDownReason.setStatus('current')
if mibBuilder.loadTexts: cneNextHopDownReason.setDescription('This object represents the reason for the NHRP entity to declare a next hop(NHRS or NHRC or NHP) as down.')
cneNHRPException = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 1, 2), CiscoNhrpErrorCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cneNHRPException.setStatus('current')
if mibBuilder.loadTexts: cneNHRPException.setDescription('This object represents the error code associated with the protocol message exchange for the error notification generated.')
cneClientStatExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 2, 1), )
if mibBuilder.loadTexts: cneClientStatExtTable.setStatus('current')
if mibBuilder.loadTexts: cneClientStatExtTable.setDescription('This table extends nhrpClientStatTable to provide additional statistics related to NHRP clients.')
cneClientStatExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 2, 1, 1), )
nhrpClientStatEntry.registerAugmentions(("CISCO-NHRP-EXT-MIB", "cneClientStatExtEntry"))
cneClientStatExtEntry.setIndexNames(*nhrpClientStatEntry.getIndexNames())
if mibBuilder.loadTexts: cneClientStatExtEntry.setStatus('current')
if mibBuilder.loadTexts: cneClientStatExtEntry.setDescription('Each entry represents a conceptual row in cneClientStatExtTable table and provides additional statistics related to an NHRP client.')
cneClientStatRedirectRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cneClientStatRedirectRx.setStatus('current')
if mibBuilder.loadTexts: cneClientStatRedirectRx.setDescription('This object represents the number of NHRP Redirects received by the client. Discontinuities in the value of this counter can occur at re-initialization of the management system, at NHRP Client re-initialization and at other times as indicated by the value of nhrpClientStatDiscontinuityTime.')
cneServerStatExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 3, 1), )
if mibBuilder.loadTexts: cneServerStatExtTable.setStatus('current')
if mibBuilder.loadTexts: cneServerStatExtTable.setDescription('This table extends nhrpServerStatTable to provide additional statistics related to NHRP servers.')
cneServerStatExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 3, 1, 1), )
nhrpServerStatEntry.registerAugmentions(("CISCO-NHRP-EXT-MIB", "cneServerStatExtEntry"))
cneServerStatExtEntry.setIndexNames(*nhrpServerStatEntry.getIndexNames())
if mibBuilder.loadTexts: cneServerStatExtEntry.setStatus('current')
if mibBuilder.loadTexts: cneServerStatExtEntry.setDescription('Each entry represents a conceptual row in cneServerStatExtTable table and provides additional statistics related to an NHRP server.')
cneServerStatRedirectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cneServerStatRedirectTx.setStatus('current')
if mibBuilder.loadTexts: cneServerStatRedirectTx.setDescription('This object represents the number of NHRP Redirects sent by the server. Discontinuities in the value of this counter can occur at re-initialization of the management system, at NHRP Client re-initialization and at other times as indicated by the value of nhrpServerStatDiscontinuityTime.')
cneNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 680, 1, 4, 1), Bits().clone(namedValues=NamedValues(("nextHopRegServerUp", 0), ("nextHopRegServerDown", 1), ("nextHopRegClientUp", 2), ("nextHopRegClientDown", 3), ("nextHopPeerUp", 4), ("nextHopPeerDown", 5), ("rateLimitExceeded", 6))).clone(namedValues=NamedValues(("nextHopRegServerUp", 0), ("nextHopRegServerDown", 1), ("nextHopRegClientUp", 2), ("nextHopRegClientDown", 3), ("rateLimitExceeded", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cneNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cneNotifEnable.setDescription('This object is used to control the generation of notifications defined in this MIB. The bits when set to 1 or 0 respectively enable or disable the corresponding notification. The mapping between the bits and the notifications are as follows. nextHopRegServerUp(0): This bit enables/disables the cneNotifNextHopRegServerUp notification. nextHopRegServerDown(1): This bit enables/disables the cneNotifNextHopRegServerDown notification. nextHopRegClientUp(2): This bit enables/disables the cneNotifNextHopRegClientUp notification. nextHopRegClientDown(3): This bit enables/disables the cneNotifNextHopRegClientDown notification. nextHopPeerUp(4): This bit enables/disables the cneNotifNextHopPeerUp notification. nextHopPeerDown(5): This bit enables/disables the cneNotifNextHopPeerDown notification. rateLimitExceeded(6): This bit enables/disables the cneNotifRateLimitExceeded notification.')
cneNotifNextHopRegServerUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 680, 0, 1)).setObjects(("NHRP-MIB", "nhrpClientInternetworkAddrType"), ("NHRP-MIB", "nhrpClientInternetworkAddr"), ("NHRP-MIB", "nhrpClientNbmaAddrType"), ("NHRP-MIB", "nhrpClientNbmaAddr"), ("NHRP-MIB", "nhrpClientNbmaSubaddr"), ("NHRP-MIB", "nhrpClientNhsInternetworkAddrType"), ("NHRP-MIB", "nhrpClientNhsInternetworkAddr"), ("NHRP-MIB", "nhrpClientNhsNbmaAddrType"), ("NHRP-MIB", "nhrpClientNhsNbmaAddr"), ("NHRP-MIB", "nhrpClientNhsNbmaSubaddr"), ("NHRP-MIB", "nhrpClientHoldTime"), ("NHRP-MIB", "nhrpClientRegUniqueness"), ("NHRP-MIB", "nhrpClientNhsInUse"))
if mibBuilder.loadTexts: cneNotifNextHopRegServerUp.setStatus('current')
if mibBuilder.loadTexts: cneNotifNextHopRegServerUp.setDescription('This notification signifies that the SNMP entity, acting as an agent, has detected that one of its NHRP entities, acting as an NHRC, has successfully registered with an NHRS to which it was not already registered.')
cneNotifNextHopRegServerDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 680, 0, 2)).setObjects(("NHRP-MIB", "nhrpClientInternetworkAddrType"), ("NHRP-MIB", "nhrpClientInternetworkAddr"), ("NHRP-MIB", "nhrpClientNbmaAddrType"), ("NHRP-MIB", "nhrpClientNbmaAddr"), ("NHRP-MIB", "nhrpClientNbmaSubaddr"), ("NHRP-MIB", "nhrpClientNhsInternetworkAddrType"), ("NHRP-MIB", "nhrpClientNhsInternetworkAddr"), ("NHRP-MIB", "nhrpClientNhsNbmaAddrType"), ("NHRP-MIB", "nhrpClientNhsNbmaAddr"), ("NHRP-MIB", "nhrpClientNhsNbmaSubaddr"), ("CISCO-NHRP-EXT-MIB", "cneNextHopDownReason"), ("CISCO-NHRP-EXT-MIB", "cneNHRPException"))
if mibBuilder.loadTexts: cneNotifNextHopRegServerDown.setStatus('current')
if mibBuilder.loadTexts: cneNotifNextHopRegServerDown.setDescription("This notification signifies that the SNMP entity, acting as an agent, has detected that that one of its NHRP entities, acting as a NHRC, has detected(by repeated registration retries or learnt from some other source(e.g. from a lower layer protocol)) that the NHRS it was registered to, or was trying to register to, is operationally down(from the NHRC's perspective). This notification doesn't indicate that the concerned NHRP server is down or unreachable or not even that it is unable to provide (other)NHRP services. It just indicates that the NHRC couldn't register successfully with the NHRS. This notification will be be sent only once for a down event i.e. two consecutive cneNotifNextHopRegServerDown notifications (for the same NHRS) must always be interspersed by a cneNotifNextHopRegServerUp notification(for the same NHRS).")
cneNotifNextHopRegClientUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 680, 0, 3)).setObjects(("NHRP-MIB", "nhrpServerInternetworkAddrType"), ("NHRP-MIB", "nhrpServerInternetworkAddr"), ("NHRP-MIB", "nhrpServerNbmaAddrType"), ("NHRP-MIB", "nhrpServerNbmaAddr"), ("NHRP-MIB", "nhrpServerNbmaSubaddr"), ("NHRP-MIB", "nhrpServerNhcInternetworkAddrType"), ("NHRP-MIB", "nhrpServerNhcInternetworkAddr"), ("NHRP-MIB", "nhrpServerNhcNbmaAddrType"), ("NHRP-MIB", "nhrpServerNhcNbmaAddr"), ("NHRP-MIB", "nhrpServerNhcNbmaSubaddr"), ("NHRP-MIB", "nhrpServerNhcPrefixLength"), ("NHRP-MIB", "nhrpServerNhcInUse"), ("NHRP-MIB", "nhrpServerCacheUniqueness"))
if mibBuilder.loadTexts: cneNotifNextHopRegClientUp.setStatus('current')
if mibBuilder.loadTexts: cneNotifNextHopRegClientUp.setDescription('This notification signifies that the SNMP entity, acting as an agent, has detected that one of its NHRP entities, acting as an NHRS perceives that an NHRP entity(an NHRC), which was not already registered, has just now successfully registered.')
cneNotifNextHopRegClientDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 680, 0, 4)).setObjects(("NHRP-MIB", "nhrpServerInternetworkAddrType"), ("NHRP-MIB", "nhrpServerInternetworkAddr"), ("NHRP-MIB", "nhrpServerNbmaAddrType"), ("NHRP-MIB", "nhrpServerNbmaAddr"), ("NHRP-MIB", "nhrpServerNbmaSubaddr"), ("NHRP-MIB", "nhrpServerNhcInternetworkAddrType"), ("NHRP-MIB", "nhrpServerNhcInternetworkAddr"), ("NHRP-MIB", "nhrpServerNhcNbmaAddrType"), ("NHRP-MIB", "nhrpServerNhcNbmaAddr"), ("NHRP-MIB", "nhrpServerNhcNbmaSubaddr"), ("NHRP-MIB", "nhrpServerNhcPrefixLength"), ("NHRP-MIB", "nhrpServerCacheUniqueness"), ("CISCO-NHRP-EXT-MIB", "cneNextHopDownReason"), ("CISCO-NHRP-EXT-MIB", "cneNHRPException"))
if mibBuilder.loadTexts: cneNotifNextHopRegClientDown.setStatus('current')
if mibBuilder.loadTexts: cneNotifNextHopRegClientDown.setDescription('This notification signifies that the SNMP entity, acting as an agent, has detected that one of its NHRP entities, acting as an NHRS perceives that an NHRP entity, acting as an NHRC, is no more registered or failed to register. This notification will be be sent only once for a down event i.e. two consecutive cneNotifNextHopRegClientDown notifications (for the same NHRC) must always be interspersed by a cneNotifNextHopRegclientUp notification(for the same NHRC).')
cneNotifNextHopPeerUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 680, 0, 5)).setObjects(("NHRP-MIB", "nhrpClientInternetworkAddrType"), ("NHRP-MIB", "nhrpClientInternetworkAddr"), ("NHRP-MIB", "nhrpClientNbmaAddrType"), ("NHRP-MIB", "nhrpClientNbmaAddr"), ("NHRP-MIB", "nhrpClientNbmaSubaddr"), ("NHRP-MIB", "nhrpCacheNextHopInternetworkAddr"), ("NHRP-MIB", "nhrpCacheNbmaAddrType"), ("NHRP-MIB", "nhrpCacheNbmaAddr"), ("NHRP-MIB", "nhrpCacheNbmaSubaddr"), ("NHRP-MIB", "nhrpCacheType"))
if mibBuilder.loadTexts: cneNotifNextHopPeerUp.setStatus('current')
if mibBuilder.loadTexts: cneNotifNextHopPeerUp.setDescription("This notification signifies that the SNMP entity, acting as an agent, has detected that one of its NHRP entities perceives that it has learnt the protocol-to-NBMA address binding information for an NBMA next hop(which it didn't have). An NHRP entity might learn the same address binding information for a next hop peer as part of multiple address resolutions; this notification should be sent only when it first learns this address binding information.")
cneNotifNextHopPeerDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 680, 0, 6)).setObjects(("NHRP-MIB", "nhrpClientInternetworkAddrType"), ("NHRP-MIB", "nhrpClientInternetworkAddr"), ("NHRP-MIB", "nhrpClientNbmaAddrType"), ("NHRP-MIB", "nhrpClientNbmaAddr"), ("NHRP-MIB", "nhrpClientNbmaSubaddr"), ("NHRP-MIB", "nhrpCacheNextHopInternetworkAddr"), ("NHRP-MIB", "nhrpCacheNbmaAddrType"), ("NHRP-MIB", "nhrpCacheNbmaAddr"), ("NHRP-MIB", "nhrpCacheNbmaSubaddr"), ("CISCO-NHRP-EXT-MIB", "cneNextHopDownReason"), ("CISCO-NHRP-EXT-MIB", "cneNHRPException"))
if mibBuilder.loadTexts: cneNotifNextHopPeerDown.setStatus('current')
if mibBuilder.loadTexts: cneNotifNextHopPeerDown.setDescription("This notification signifies that the SNMP entity, acting as an agent, has detected that one of its NHRP entities perceives that it has lost the protocol-to-NBMA address binding information for an NBMA next hop(which it earlier had). An NHRP entity might maintain multiple cache entries, with the same address binding information, for the same next hop peer (corresponding to different destinations reachable via this next hop peer); This notification will be be sent only when the address binding information is lost meaning only when all such entries are deleted. This notification will be be sent only once for a 'down' event i.e. two consecutive cneNotifNextHopPeerDown notifications (for the same NHP) must always be interspersed by a cneNotifNextHopUp notification(for the same NHP).")
cneNotifRateLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 680, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: cneNotifRateLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: cneNotifRateLimitExceeded.setDescription('This notification signifies that the SNMP entity, acting in an agent role, has detected that one of its NHRP entities(identified by the ifIndex) has been very frequently reaching the threshold on the rate of NHRP protocol messages exchanged in an NBMA network. It is left to each individual implementation to determine the threshold frequency of this event(threshold being reached on the rate of NHRP protocol messages exchanged) which should result in a notification. The ifIndex object in this notification represents the use of a generic ifIndex which reflects a specific NBMA subnetwork related interface as determined by an implementation.')
if mibBuilder.loadTexts: cneNotifRateLimitExceeded.setReference('Sec.3.1.1(for ifIndex only) of RFC 2677 (August 1999)')
cneCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 1))
cneGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2))
cneCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 1, 1)).setObjects(("CISCO-NHRP-EXT-MIB", "cneNotificationControlGroup"), ("CISCO-NHRP-EXT-MIB", "cneGeneralNotificationGroup"), ("CISCO-NHRP-EXT-MIB", "cneGeneralGroup"), ("CISCO-NHRP-EXT-MIB", "cneClientNotificationGroup"), ("CISCO-NHRP-EXT-MIB", "cneServerNotificationGroup"), ("CISCO-NHRP-EXT-MIB", "cneClientGroup"), ("CISCO-NHRP-EXT-MIB", "cneServerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneCompliance = cneCompliance.setStatus('current')
if mibBuilder.loadTexts: cneCompliance.setDescription('The compliance statement for the entities that implement the ciscoNhrpExtMIB module.')
cneGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2, 1)).setObjects(("CISCO-NHRP-EXT-MIB", "cneNHRPException"), ("CISCO-NHRP-EXT-MIB", "cneNextHopDownReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneGeneralGroup = cneGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cneGeneralGroup.setDescription('This group of objects provides information that is applicable to both NHRP clients and servers.')
cneClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2, 2)).setObjects(("CISCO-NHRP-EXT-MIB", "cneClientStatRedirectRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneClientGroup = cneClientGroup.setStatus('current')
if mibBuilder.loadTexts: cneClientGroup.setDescription('This group of objects provides information specific to NHRP clients.')
cneServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2, 3)).setObjects(("CISCO-NHRP-EXT-MIB", "cneServerStatRedirectTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneServerGroup = cneServerGroup.setStatus('current')
if mibBuilder.loadTexts: cneServerGroup.setDescription('This group of objects provides information specific to NHRP servers.')
cneNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2, 4)).setObjects(("CISCO-NHRP-EXT-MIB", "cneNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneNotificationControlGroup = cneNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: cneNotificationControlGroup.setDescription('This group of objects is required to control the generation of notifications by NHRP agents.')
cneGeneralNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2, 5)).setObjects(("CISCO-NHRP-EXT-MIB", "cneNotifRateLimitExceeded"), ("CISCO-NHRP-EXT-MIB", "cneNotifNextHopPeerUp"), ("CISCO-NHRP-EXT-MIB", "cneNotifNextHopPeerDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneGeneralNotificationGroup = cneGeneralNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cneGeneralNotificationGroup.setDescription('This group of objects defines notifications generated by both NHRP clients and servers.')
cneClientNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2, 6)).setObjects(("CISCO-NHRP-EXT-MIB", "cneNotifNextHopRegServerUp"), ("CISCO-NHRP-EXT-MIB", "cneNotifNextHopRegServerDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneClientNotificationGroup = cneClientNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cneClientNotificationGroup.setDescription('This group of objects defines notifications generated by NHRP clients.')
cneServerNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 680, 2, 2, 7)).setObjects(("CISCO-NHRP-EXT-MIB", "cneNotifNextHopRegClientUp"), ("CISCO-NHRP-EXT-MIB", "cneNotifNextHopRegClientDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cneServerNotificationGroup = cneServerNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cneServerNotificationGroup.setDescription('This group of objects defines notifications generated by NHRP servers.')
mibBuilder.exportSymbols("CISCO-NHRP-EXT-MIB", cneServerStatExtTable=cneServerStatExtTable, cneGroups=cneGroups, cneGeneralGroup=cneGeneralGroup, cneClientStatExtEntry=cneClientStatExtEntry, cneClientNotificationGroup=cneClientNotificationGroup, cneNotifRateLimitExceeded=cneNotifRateLimitExceeded, cneNotifEnable=cneNotifEnable, cneNotifNextHopPeerUp=cneNotifNextHopPeerUp, cneServerGroup=cneServerGroup, cneCompliances=cneCompliances, cneServerStatRedirectTx=cneServerStatRedirectTx, cneClientObjects=cneClientObjects, cneClientStatExtTable=cneClientStatExtTable, cneNotifNextHopRegClientDown=cneNotifNextHopRegClientDown, cneNextHopDownReason=cneNextHopDownReason, cneObjects=cneObjects, cneServerStatExtEntry=cneServerStatExtEntry, cneConform=cneConform, cneNotifs=cneNotifs, cneServerObjects=cneServerObjects, cneClientGroup=cneClientGroup, cneNotificationControlObjects=cneNotificationControlObjects, cneGeneralNotificationGroup=cneGeneralNotificationGroup, CiscoNhrpErrorCode=CiscoNhrpErrorCode, ciscoNhrpExtMIB=ciscoNhrpExtMIB, cneNotificationControlGroup=cneNotificationControlGroup, cneNHRPException=cneNHRPException, cneServerNotificationGroup=cneServerNotificationGroup, cneCompliance=cneCompliance, cneGeneralObjects=cneGeneralObjects, cneNotifNextHopRegServerDown=cneNotifNextHopRegServerDown, CiscoNextHopDownReasonCode=CiscoNextHopDownReasonCode, PYSNMP_MODULE_ID=ciscoNhrpExtMIB, cneClientStatRedirectRx=cneClientStatRedirectRx, cneNotifNextHopPeerDown=cneNotifNextHopPeerDown, cneNotifNextHopRegServerUp=cneNotifNextHopRegServerUp, cneNotifNextHopRegClientUp=cneNotifNextHopRegClientUp)
