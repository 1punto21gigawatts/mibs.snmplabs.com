#
# PySNMP MIB module OMNI-gx2CM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2CM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
gx2Cm, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Cm")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapNetworkElemOperState, trapNetworkElemAvailStatus, trapNETrapLastTrapTimeStamp, trapChangedValueInteger, trapNetworkElemSerialNum, trapNetworkElemAdminState, trapNetworkElemModelNumber, trapPerceivedSeverity, trapText, trapChangedObjectId, trapChangedValueDisplayString, trapIdentifier, trapNetworkElemAlarmStatus = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState", "trapNetworkElemAvailStatus", "trapNETrapLastTrapTimeStamp", "trapChangedValueInteger", "trapNetworkElemSerialNum", "trapNetworkElemAdminState", "trapNetworkElemModelNumber", "trapPerceivedSeverity", "trapText", "trapChangedObjectId", "trapChangedValueDisplayString", "trapIdentifier", "trapNetworkElemAlarmStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
IpAddress, Bits, Counter32, Integer32, Counter64, Gauge32, ObjectIdentity, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, iso, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "Counter32", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "iso", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2cmDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 1))
gx2cmFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2), )
if mibBuilder.loadTexts: gx2cmFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmFactoryTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmFactoryTableIndex"))
if mibBuilder.loadTexts: gx2cmFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmFactoryEntry.setDescription('This list contains Factory data and the associated parameter descriptions.')
gx2cmNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3), )
if mibBuilder.loadTexts: gx2cmNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmNetworkTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmNetworkTableIndex"))
if mibBuilder.loadTexts: gx2cmNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmNetworkEntry.setDescription('This list contains Network parameters and the associated parameter descriptions.')
gx2cmAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4), )
if mibBuilder.loadTexts: gx2cmAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmAnalogTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmTableIndex"))
if mibBuilder.loadTexts: gx2cmAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmAnalogEntry.setDescription('This list contains analog parameters and the associated parameter descriptions.')
gx2cmDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5), )
if mibBuilder.loadTexts: gx2cmDigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDigitalTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmDigitalTableIndex"))
if mibBuilder.loadTexts: gx2cmDigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDigitalEntry.setDescription('This list contains digital parameters and the associated parameter descriptions.')
gx2cmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6), )
if mibBuilder.loadTexts: gx2cmStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmStatusTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmStatusTableIndex"))
if mibBuilder.loadTexts: gx2cmStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmStatusEntry.setDescription('This list contains status parameters and the associated parameter descriptions.')
gx2cmAMCTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7), )
if mibBuilder.loadTexts: gx2cmAMCTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmAMCTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmAMCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmAMCTableIndex"))
if mibBuilder.loadTexts: gx2cmAMCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmAMCEntry.setDescription('This list contains the AMC parameters and the associated parameter descriptions.')
gx2cmSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8), )
if mibBuilder.loadTexts: gx2cmSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmSecurityTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmSecurityTableIndex"))
if mibBuilder.loadTexts: gx2cmSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmSecurityEntry.setDescription('This list contains Security parameters and the associated parameter descriptions.')
gx2cmDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9), )
if mibBuilder.loadTexts: gx2cmDiagnosticTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDiagnosticTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmDiagnosticTableIndex"))
if mibBuilder.loadTexts: gx2cmDiagnosticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDiagnosticEntry.setDescription('This list contains Diagnostic parameters and the associated parameter descriptions.')
gx2cmDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10), )
if mibBuilder.loadTexts: gx2cmDownloadTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDownloadTable.setDescription('This table contains gx2Cm specific parameters with nominal and current values.')
gx2cmDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9), ).setIndexNames((0, "OMNI-gx2CM-MIB", "gx2cmDownloadTableIndex"))
if mibBuilder.loadTexts: gx2cmDownloadEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDownloadEntry.setDescription('This list contains Download parameters and the associated parameter descriptions.')
cmTrapHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11), )
if mibBuilder.loadTexts: cmTrapHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapHistoryTable.setDescription('This table contains the trap specific parameters.')
cmTrapHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10), ).setIndexNames((0, "OMNI-gx2CM-MIB", "cmTrapHistoryTableIndex"))
if mibBuilder.loadTexts: cmTrapHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapHistoryEntry.setDescription('This list contains Trap History parameters and the associated parameter descriptions.')
gx2cmTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelModTemp.setStatus('optional')
if mibBuilder.loadTexts: labelModTemp.setDescription('The value of this object provides the label of the Module Temp parameter.')
uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uomModTemp.setStatus('optional')
if mibBuilder.loadTexts: uomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temp parameter.')
majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: majorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temp parameter.')
majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: majorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temp parameter.')
minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: minorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temp parameter.')
minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: minorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temp parameter.')
currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: currentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temp parameter.')
stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: stateFlagModTemp.setDescription('The value of this object provides the state of the Module Temp parameter. (0-Hidden 1-Read-Only, 2-Updateable)')
minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minValueModTemp.setStatus('optional')
if mibBuilder.loadTexts: minValueModTemp.setDescription('The value of this object provides the minimum value the Module Temp parameter can achive.')
maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxValueModTemp.setStatus('optional')
if mibBuilder.loadTexts: maxValueModTemp.setDescription('The value of this object provides the maximum value the Module Temp parameter can achive.')
alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: alarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temp Analog parameter.')
gx2cmDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmDigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
labelRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelRemoteLocal.setStatus('obsolete')
if mibBuilder.loadTexts: labelRemoteLocal.setDescription('The value of this object provides the label of the Remote Local Control Digital parameter.')
enumRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumRemoteLocal.setStatus('obsolete')
if mibBuilder.loadTexts: enumRemoteLocal.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated value is separated by a common. The first value has a enumerated value of 1.')
valueRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueRemoteLocal.setStatus('obsolete')
if mibBuilder.loadTexts: valueRemoteLocal.setDescription('The value of this object is the current value of the parameter.')
stateFlagRemoteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagRemoteLocal.setStatus('obsolete')
if mibBuilder.loadTexts: stateFlagRemoteLocal.setDescription('The value of this object provides the state of the Remote Local Control Digital parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
labelResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelResetSlot.setStatus('optional')
if mibBuilder.loadTexts: labelResetSlot.setDescription('The value of this object provides the label of the Reset Slot Digital parameter.')
enumResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumResetSlot.setStatus('optional')
if mibBuilder.loadTexts: enumResetSlot.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated value is separated by a common. The first value has a enumerated value of 1.')
valueResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueResetSlot.setStatus('mandatory')
if mibBuilder.loadTexts: valueResetSlot.setDescription('The value of this object is the current value of the parameter. A write to this object will casue a hardware reset. 0-control module 1-18 selected slot. ')
stateResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateResetSlot.setStatus('mandatory')
if mibBuilder.loadTexts: stateResetSlot.setDescription('The value of this object provides the state of the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
labelIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelIdShelf.setStatus('optional')
if mibBuilder.loadTexts: labelIdShelf.setDescription('The value of this object provides the label of the identify shelf Digital parameter.')
enumIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumIdShelf.setStatus('optional')
if mibBuilder.loadTexts: enumIdShelf.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated value is separated by a common. The first value has a enumerated value of 1..')
valueIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueIdShelf.setStatus('mandatory')
if mibBuilder.loadTexts: valueIdShelf.setDescription('The value of this object is the current value of the parameter. Writing any non zero value to this parameter will casue the CM to blink its front panel LED.')
stateFlagIdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagIdShelf.setStatus('mandatory')
if mibBuilder.loadTexts: stateFlagIdShelf.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
labelResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelResetAlarm.setStatus('optional')
if mibBuilder.loadTexts: labelResetAlarm.setDescription('The value of this object provides the label of the Reset Alarms Digital parameter.')
enumResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumResetAlarm.setStatus('optional')
if mibBuilder.loadTexts: enumResetAlarm.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated value is separated by a common. The first value has a enumerated value of 1.')
valueResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueResetAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: valueResetAlarm.setDescription('The value of this object is the current value of the parameter. Writing any non-zero value to this object will case the CM to reset shelf alarm processing.')
stateFlagResetAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 5, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlagResetAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: stateFlagResetAlarm.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2cmStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
labelShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelShelfAlarm.setStatus('optional')
if mibBuilder.loadTexts: labelShelfAlarm.setDescription('The value of this object provides the label of the Shelf Alarm Status parameter.')
valueShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueShelfAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: valueShelfAlarm.setDescription('The value of this object provides the current status of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
stateShelfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateShelfAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: stateShelfAlarm.setDescription('The value of this object provides the current state of the parameter.')
labelDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelDataCrc.setStatus('optional')
if mibBuilder.loadTexts: labelDataCrc.setDescription('The value of this object provides the label of the Data CRC parameter.')
valueDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: valueDataCrc.setDescription('The value of this object provides the current status of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
stateDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: stateDataCrc.setDescription('The value of this object provides the current state of the parameter.')
labelFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFlashStatus.setStatus('optional')
if mibBuilder.loadTexts: labelFlashStatus.setDescription('The value of this object provides the label of the Flash Status parameter.')
valueFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: valueFlashStatus.setDescription('The value of this object provides the current status of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
stateFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: stateFlashStatus.setDescription('The value of this object provides the current state of the parameter.')
labelBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelBootStatus.setStatus('optional')
if mibBuilder.loadTexts: labelBootStatus.setDescription('The value of this object provides the label of the Boot Status parameter.')
valueBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueBootStatus.setStatus('mandatory')
if mibBuilder.loadTexts: valueBootStatus.setDescription('The value of this object provides the current status of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
stateBootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateBootStatus.setStatus('mandatory')
if mibBuilder.loadTexts: stateBootStatus.setDescription('The value of this object provides the current state of the parameter.')
labelAlmLimCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelAlmLimCrc.setStatus('optional')
if mibBuilder.loadTexts: labelAlmLimCrc.setDescription('The value of this object provides the label of the Alarm limit CRC parameter.')
valueAlmLimCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueAlmLimCrc.setStatus('mandatory')
if mibBuilder.loadTexts: valueAlmLimCrc.setDescription('The value of this object provides the current status of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
stateAlmLimCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 6, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateAlmLimCrc.setStatus('mandatory')
if mibBuilder.loadTexts: stateAlmLimCrc.setDescription('The value of this object provides the current state of the parameter.')
gx2cmFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: bootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: bootStatusByte.setDescription('This object indicates the status of the last boot')
bank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bank0CRC.setStatus('mandatory')
if mibBuilder.loadTexts: bank0CRC.setDescription('This object provides the CRC code of bank 1.')
bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: bank1CRC.setDescription('This object provides the CRC code of bank 2.')
prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: prgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: factoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: factoryCRC.setDescription('This object provides the CRC code for the Factory data.')
calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calculateCRC.setStatus('mandatory')
if mibBuilder.loadTexts: calculateCRC.setDescription('This object provides the CRC value of the fimware.')
hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: hourMeter.setDescription('This object provides the hour meter reading of the module.')
flashPrgCnt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPrgCnt0.setStatus('mandatory')
if mibBuilder.loadTexts: flashPrgCnt0.setDescription('This object provides the number of times the flash has been programmed on side A.')
flashPrgCnt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashPrgCnt1.setStatus('mandatory')
if mibBuilder.loadTexts: flashPrgCnt1.setDescription('This object provides the number of times the flash has been programmed on side B.')
flashBank0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashBank0.setStatus('mandatory')
if mibBuilder.loadTexts: flashBank0.setDescription('This object provides the firmware revision of the firmware in bank 0.')
flashBank1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashBank1.setStatus('mandatory')
if mibBuilder.loadTexts: flashBank1.setDescription('This object provides the firmware revision of the firmware in bank 1.')
localMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localMacAdd.setStatus('mandatory')
if mibBuilder.loadTexts: localMacAdd.setDescription('This object provides the local mac address number')
netWorkMacAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netWorkMacAdd.setStatus('mandatory')
if mibBuilder.loadTexts: netWorkMacAdd.setDescription('This object provides the network mac address number.')
gx2cmNetworkTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmNetworkTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmNetworkTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
labelLocalEthIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLocalEthIPAdd.setStatus('optional')
if mibBuilder.loadTexts: labelLocalEthIPAdd.setDescription('This object provides the label for the Ethernet IP Address field.')
valueLocalEthIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueLocalEthIPAdd.setStatus('mandatory')
if mibBuilder.loadTexts: valueLocalEthIPAdd.setDescription('This object provides the Local Ethernet IP Address for the Control Module.')
labelLocalEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLocalEthMask.setStatus('optional')
if mibBuilder.loadTexts: labelLocalEthMask.setDescription('This object provides the label for the Local Ethernet Mask field.')
valueLocalEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueLocalEthMask.setStatus('mandatory')
if mibBuilder.loadTexts: valueLocalEthMask.setDescription('This object provides the Local Ethernet Mask value.')
labelNetworkEthAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelNetworkEthAdd.setStatus('optional')
if mibBuilder.loadTexts: labelNetworkEthAdd.setDescription('This object provides the label for the Network Ethernet Address .')
valueNetworkEthAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueNetworkEthAdd.setStatus('mandatory')
if mibBuilder.loadTexts: valueNetworkEthAdd.setDescription('This object provides the value of the Network Ethernet Address.')
labelNetworkEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelNetworkEthMask.setStatus('optional')
if mibBuilder.loadTexts: labelNetworkEthMask.setDescription('This object provides the label for the Network Mask Address.')
valueNetworkEthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueNetworkEthMask.setStatus('mandatory')
if mibBuilder.loadTexts: valueNetworkEthMask.setDescription('This object provides the value of the Network Mask Address.')
labelShelfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelShelfSerialNum.setStatus('optional')
if mibBuilder.loadTexts: labelShelfSerialNum.setDescription('This object provides the label for the Shelf Serial Number.')
valueShelfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueShelfSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: valueShelfSerialNum.setDescription('This object provides the value for the Shelf Serial Number.')
labelGateWayIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelGateWayIPAdd.setStatus('optional')
if mibBuilder.loadTexts: labelGateWayIPAdd.setDescription('This object provides the label for the Gateway IP address.')
valueGateWayIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueGateWayIPAdd.setStatus('mandatory')
if mibBuilder.loadTexts: valueGateWayIPAdd.setDescription('This object provides the value for the IP address for the Gateway.')
labelTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrapDestination.setStatus('optional')
if mibBuilder.loadTexts: labelTrapDestination.setDescription('This object provides the label the trap destination field.')
valueTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: valueTrapDestination.setDescription('This object provides the address for the trap destination.')
labelTFTPserver = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTFTPserver.setStatus('optional')
if mibBuilder.loadTexts: labelTFTPserver.setDescription('This object provides the label the TFTP Server address field.')
valueTFTPserver = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTFTPserver.setStatus('mandatory')
if mibBuilder.loadTexts: valueTFTPserver.setDescription('This object provides the address for the TFTP Server.')
labelTrap2Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap2Destination.setStatus('optional')
if mibBuilder.loadTexts: labelTrap2Destination.setDescription('This object provides the label the second trap destination field.')
valueTrap2Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap2Destination.setStatus('mandatory')
if mibBuilder.loadTexts: valueTrap2Destination.setDescription('This object provides the address for the second trap destination.')
labelTrap3Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap3Destination.setStatus('optional')
if mibBuilder.loadTexts: labelTrap3Destination.setDescription('This object provides the label the third trap destination field.')
valueTrap3Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap3Destination.setStatus('mandatory')
if mibBuilder.loadTexts: valueTrap3Destination.setDescription('This object provides the address for the third trap destination.')
labelTrap4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap4Destination.setStatus('optional')
if mibBuilder.loadTexts: labelTrap4Destination.setDescription('This object provides the label the fourth trap destination field.')
valueTrap4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap4Destination.setStatus('mandatory')
if mibBuilder.loadTexts: valueTrap4Destination.setDescription('This object provides the address for the fourth trap destination.')
labelTrap5Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelTrap5Destination.setStatus('optional')
if mibBuilder.loadTexts: labelTrap5Destination.setDescription('This object provides the label the fifth trap destination field.')
valueTrap5Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueTrap5Destination.setStatus('mandatory')
if mibBuilder.loadTexts: valueTrap5Destination.setDescription('This object provides the address for the fifth trap destination.')
labelISDNMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNMode.setStatus('optional')
if mibBuilder.loadTexts: labelISDNMode.setDescription('This object provides the label for the ISDN mode setting.')
valueISDNMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNMode.setStatus('mandatory')
if mibBuilder.loadTexts: valueISDNMode.setDescription('This object provides the value for the ISDN mode setting. In order to activate the ISDN feature, the user must set the ISDN mode to ON and provide a valid IP address. This address needs to be the IP address of the remote ISDN Modem.')
labelISDNModemIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNModemIPAddress.setStatus('optional')
if mibBuilder.loadTexts: labelISDNModemIPAddress.setDescription('This object provides the label for the ISDN modem IP Address.')
valueISDNModemIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNModemIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: valueISDNModemIPAddress.setDescription('This object provides the value for the ISDN modem IP Address. This Address is used by the control Module to ping the remote ISDN modem to determine if an ISDN connection is made. Only after a successful ping response to this address and the ISDN Modem Mode object is set to ON will the Control Module send traps. Factory default value is 0.0.0.0.')
labelISDNTrapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNTrapTimeout.setStatus('optional')
if mibBuilder.loadTexts: labelISDNTrapTimeout.setDescription('This object provides the label for the ISDN modem Timeout object.')
valueISDNTrapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNTrapTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: valueISDNTrapTimeout.setDescription('This object provides the value for the ISDN modem Timeout. The value of this object sets the time period that the communication link is open for sending traps. This timer is started when the first trap is issued. The factory default for this value is 2 minutes. Unit of measure is in seconds.')
labelISDNPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNPingTimeout.setStatus('optional')
if mibBuilder.loadTexts: labelISDNPingTimeout.setDescription('This object provides the label for the ISDN ping timeout object.')
valueISDNPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNPingTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: valueISDNPingTimeout.setDescription('This object provides the value for the ISDN ping timeout. Factory default value is 500 ms. User should set this value in milli-second')
labelISDNBackoffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelISDNBackoffTimer.setStatus('optional')
if mibBuilder.loadTexts: labelISDNBackoffTimer.setDescription('This object provides the label for the ISDN backoff timer object.')
valueISDNBackoffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 3, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueISDNBackoffTimer.setStatus('mandatory')
if mibBuilder.loadTexts: valueISDNBackoffTimer.setDescription("This object provides the value for the ISDN backoff timer. The value in this object is a hold period used to prevent traps from being sent. It is used to allow other chassis to have time to connect and communicate over the ISDN modems. This hold period starts after the valueISDNTrapTimeout period has expired. NOTE: The value of this object should be set to a value greater than the ISDN Modem's idle connection timeout period. This will allow the Modem to break the ISDN Connection. Factory default value is 2 min (120 sec). User should set this value in seconds")
gx2cmSecurityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmSecurityTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmSecurityTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
labelSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelSecurityMode.setStatus('optional')
if mibBuilder.loadTexts: labelSecurityMode.setDescription('This object provides the label for the Current Security Mode.')
enumSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enumSecurityMode.setStatus('optional')
if mibBuilder.loadTexts: enumSecurityMode.setDescription('The value of this object represents the Enumeration values possible for the security mode parameter. Each Enumerated value is separated by a common. The first value has a enumerated value of 1.')
valueSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("read-only", 1), ("operator-access", 2), ("factory-access", 3), ("remote-write-only", 4), ("local-write-only", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: valueSecurityMode.setStatus('mandatory')
if mibBuilder.loadTexts: valueSecurityMode.setDescription('This object indicates the current Security Mode.')
stateSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateSecurityMode.setStatus('mandatory')
if mibBuilder.loadTexts: stateSecurityMode.setDescription('This object indicates the state of the Security Mode parameter .')
labelPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelPassword.setStatus('optional')
if mibBuilder.loadTexts: labelPassword.setDescription('This object provides the label for the Password field.')
valuePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valuePassword.setStatus('mandatory')
if mibBuilder.loadTexts: valuePassword.setDescription('This object provides the value for the Password.')
statePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statePassword.setStatus('mandatory')
if mibBuilder.loadTexts: statePassword.setDescription('This object provides the state of the password field.')
labelFactoryChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelFactoryChgString.setStatus('optional')
if mibBuilder.loadTexts: labelFactoryChgString.setDescription('This object provides the lable for the Factory Change String field.')
valueFactoryChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueFactoryChgString.setStatus('mandatory')
if mibBuilder.loadTexts: valueFactoryChgString.setDescription('This object provides the value for the Factory Change String.')
stateFactoryChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateFactoryChgString.setStatus('mandatory')
if mibBuilder.loadTexts: stateFactoryChgString.setDescription('This object provides the state of the Factory Change String field.')
labelOperatorChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelOperatorChgString.setStatus('optional')
if mibBuilder.loadTexts: labelOperatorChgString.setDescription('This object provides the lable for the Operator Change String field.')
valueOperatorChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueOperatorChgString.setStatus('mandatory')
if mibBuilder.loadTexts: valueOperatorChgString.setDescription('This object provides the value for the Operator Change String.')
stateOperatorChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateOperatorChgString.setStatus('mandatory')
if mibBuilder.loadTexts: stateOperatorChgString.setDescription('This object provides the state of the Operator Change String field.')
labelReadOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelReadOnlyChgString.setStatus('optional')
if mibBuilder.loadTexts: labelReadOnlyChgString.setDescription('This object provides the lable for the Read Only Change String field.')
valueReadOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueReadOnlyChgString.setStatus('mandatory')
if mibBuilder.loadTexts: valueReadOnlyChgString.setDescription('This object provides the value for the Read Only Change String.')
stateReadOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateReadOnlyChgString.setStatus('mandatory')
if mibBuilder.loadTexts: stateReadOnlyChgString.setDescription('This object provides the state of the Read Only Change String field.')
labelRemoteOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelRemoteOnlyChgString.setStatus('optional')
if mibBuilder.loadTexts: labelRemoteOnlyChgString.setDescription('This object provides the lable for the Remote Only Change String field.')
valueRemoteOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueRemoteOnlyChgString.setStatus('mandatory')
if mibBuilder.loadTexts: valueRemoteOnlyChgString.setDescription('This object provides the value for the Remote Only Change String.')
stateRemoteOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateRemoteOnlyChgString.setStatus('mandatory')
if mibBuilder.loadTexts: stateRemoteOnlyChgString.setDescription('This object provides the state of the Remote Only Change String field.')
labelLocalOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: labelLocalOnlyChgString.setStatus('optional')
if mibBuilder.loadTexts: labelLocalOnlyChgString.setDescription('This object provides the lable for the Local Only Change String field.')
valueLocalOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: valueLocalOnlyChgString.setStatus('mandatory')
if mibBuilder.loadTexts: valueLocalOnlyChgString.setDescription('This object provides the value for the Local Only Change String.')
stateLocalOnlyChgString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 8, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stateLocalOnlyChgString.setStatus('mandatory')
if mibBuilder.loadTexts: stateLocalOnlyChgString.setDescription('This object provides the state of the Local Only Change String field.')
gx2cmAMCTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmAMCTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmAMCTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
valueAMCslot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot1.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot1.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot1.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot1.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot1.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot1.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot2.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot2.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot2.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot2.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot2.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot2.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot3.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot3.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot3.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot3.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot3.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot3.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot4.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot4.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot4.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot4.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot4.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot4.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot5.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot5.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot5.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot5.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot5.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot5.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot6.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot6.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot6.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot6.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot6.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot6.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot7.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot7.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot7.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot7.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot7.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot7.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot8.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot8.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot8.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot8.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot8.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot8.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot9.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot9.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot9.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot9.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot9.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot9.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot10.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot10.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot10.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot10.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot10.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot10.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot11.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot11.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot11.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot11.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot11.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot11.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot12.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot12.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot12.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot12.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot12.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot12.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot13.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot13.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot13.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot13.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot13.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot13.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot14.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot14.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot14.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot14.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot14.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot14.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot15.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot15.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot15.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot15.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot15.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot15.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot16.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot16.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot16.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot16.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot16.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot16.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot17.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot17.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot17.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot17.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot17.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot17.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
valueAMCslot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("force", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: valueAMCslot18.setStatus('mandatory')
if mibBuilder.loadTexts: valueAMCslot18.setDescription('This object provides control to enable or disable AMC for the current device in the slot.')
serialAMCslot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialAMCslot18.setStatus('mandatory')
if mibBuilder.loadTexts: serialAMCslot18.setDescription('This object provides the serial number for the AMC slot selected.')
agentIDAMCslot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIDAMCslot18.setStatus('mandatory')
if mibBuilder.loadTexts: agentIDAMCslot18.setDescription('This object provides the agentID of the AMC parameter for the selected slot.')
autoQuickSwapCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 7, 6, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("timeroff", 1), ("onehour", 2), ("oneday", 3), ("oneweek", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoQuickSwapCnt.setStatus('mandatory')
if mibBuilder.loadTexts: autoQuickSwapCnt.setDescription('This object sets the time interval as to when the Control Module will update its memory with quick swap data. The Control Module will enable the quick swap feature for each module in the system. It will then retrieve the quick swap data from each module. The timer settings are as follows: 1=timeroff, 2=onehour, 3=oneday, 4=oneweek.')
gx2cmDiagnosticTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmDiagnosticTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDiagnosticTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
ledTestValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledTestValue.setStatus('mandatory')
if mibBuilder.loadTexts: ledTestValue.setDescription('This object provides the LED test pattern on/off control.')
bpTestCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpTestCnt.setStatus('mandatory')
if mibBuilder.loadTexts: bpTestCnt.setDescription('The value of this object control which slot the alarm poll command will be repeatedly sent to. During this operation normal polling is disabled. 0-off, 1-18 selects the slot.')
successTransSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot1.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot1.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot2.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot2.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot3.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot3.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot4.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot4.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot5.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot5.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot6.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot6.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot7.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot7.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot8.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot8.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot9.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot9.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot10.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot10.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot11.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot11.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot12.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot12.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot13.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot13.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot14.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot14.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot15.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot15.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot16.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot16.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot17.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot17.setDescription('This object provides data on the number of time writing to the selected slot passes.')
successTransSlot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: successTransSlot18.setStatus('mandatory')
if mibBuilder.loadTexts: successTransSlot18.setDescription('This object provides data on the number of time writing to the selected slot passes.')
failureTransSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot1.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot1.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot2.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot2.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot3.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot3.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot4.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot4.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot5.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot5.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot6.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot6.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot7.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot7.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot8.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot8.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot9 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot9.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot9.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot10.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot10.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot11.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot11.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot12.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot12.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot13 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot13.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot13.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot14 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot14.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot14.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot15.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot15.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot16.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot16.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot17 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot17.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot17.setDescription('This object provides data on the number of time writing to the selected slot fails.')
failureTransSlot18 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: failureTransSlot18.setStatus('mandatory')
if mibBuilder.loadTexts: failureTransSlot18.setDescription('This object provides data on the number of time writing to the selected slot fails.')
fanTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: fanTestMode.setDescription('This object provides control for putting the fan in manual test mode. Writing any non-zero value will set to on')
fanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fanControl.setStatus('mandatory')
if mibBuilder.loadTexts: fanControl.setDescription('This object provides control over the fan mode.')
relayTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: relayTestMode.setDescription('This object provides control for putting the relay in manual test mode. Writing any non-zero value will set to on')
relayControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayControl.setStatus('mandatory')
if mibBuilder.loadTexts: relayControl.setDescription('This object provides control for putting the relay in manual test mode.')
slotPollMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotPollMode.setStatus('mandatory')
if mibBuilder.loadTexts: slotPollMode.setDescription('This object provides control of the slotpoll test mode. When on the slotpoll operation is disabled.')
bootCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootCount.setStatus('mandatory')
if mibBuilder.loadTexts: bootCount.setDescription('This object provides the value of how many times the CM went though a boot/rest process.')
objectTableData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: objectTableData.setStatus('mandatory')
if mibBuilder.loadTexts: objectTableData.setDescription('This object provides the OID for the start loations for the status, digital and analog tables. This data is used by the web server application.')
setSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 9, 8, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setSysTime.setStatus('mandatory')
if mibBuilder.loadTexts: setSysTime.setDescription('Writing any value to this object will reset sysUpTime to zero.')
gx2cmDownloadTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2cmDownloadTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2cmDownloadTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
downloadValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadValue.setStatus('mandatory')
if mibBuilder.loadTexts: downloadValue.setDescription('This object provides the slot(s) to be downloaded. The slots to be downloaded corresponds to the following bit map. bit 0 - control module, bits 1-18 to the corresponding slot. Any combination of bit may be set. If all bits are reset this will halt the download.')
autoDownloadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivate", 1), ("activate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDownloadReset.setStatus('mandatory')
if mibBuilder.loadTexts: autoDownloadReset.setDescription('This object determines if the module will be reset directly after a successfull download. 0 - Deactivated, 1+ Activated')
downloadFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadFilename.setStatus('mandatory')
if mibBuilder.loadTexts: downloadFilename.setDescription('This object provides the name of the file for download')
downloadState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadState.setStatus('mandatory')
if mibBuilder.loadTexts: downloadState.setDescription('This object provides the current state of the download process.')
switchFwBank = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 10, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFwBank.setStatus('mandatory')
if mibBuilder.loadTexts: switchFwBank.setDescription('Writting to this object causes the firmware bank to switch and execute from that bank. The range of values that can be entered for this object is from 0 to 18. Where 0 is slot 0, and 18 is slot 18.')
cmTrapHistoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrapHistoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmTrapHistoryTableIndex.setDescription('This object identifies the trap issued by the network element.')
netrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapId.setStatus('mandatory')
if mibBuilder.loadTexts: netrapId.setDescription('The value of this objest is the trap ID number provided by network element.')
netrapNetworkElemModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: netrapNetworkElemModelNumber.setDescription('The value of this object is the model number of the network element. Combination of Model # and Serial # is used as the unique identifier of the NE.')
netrapNetworkElemSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: netrapNetworkElemSerialNum.setDescription('The value of this object is the serial number of the network element.')
netrapPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapPerceivedSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: netrapPerceivedSeverity.setDescription('This parameter defines five severity levels, which provide an indication of the perceived status of the managed object.')
netrapNetworkElemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemOperState.setStatus('mandatory')
if mibBuilder.loadTexts: netrapNetworkElemOperState.setDescription('The current Operational State of the Network Element which generated the trap..')
netrapNetworkElemAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netrapNetworkElemAlarmStatus.setDescription('The current Alarm Status of the Network Element. Alarm Status is always equal to the highest severity level of all outstanding alarms in this NE..')
netrapNetworkElemAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: netrapNetworkElemAdminState.setDescription('The current Adminsitrative state of the network element.')
netrapNetworkElemAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapNetworkElemAvailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netrapNetworkElemAvailStatus.setDescription('The current Operational state of the network elment')
netrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapText.setStatus('mandatory')
if mibBuilder.loadTexts: netrapText.setDescription('This variable contains trap text.')
netrapLastTrapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapLastTrapTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: netrapLastTrapTimeStamp.setDescription('This OBJECT IDENTIFIER is used to hold time when trap was generated.')
netrapChangedObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedObjectId.setStatus('mandatory')
if mibBuilder.loadTexts: netrapChangedObjectId.setDescription('This variable identifies the object that has generated the trap.')
netrapAdditionalInfoInteger1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapAdditionalInfoInteger1.setStatus('mandatory')
if mibBuilder.loadTexts: netrapAdditionalInfoInteger1.setDescription('This 32 bit integer is used to hold specific information about the trap.')
netrapAdditionalInfoInteger2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapAdditionalInfoInteger2.setStatus('mandatory')
if mibBuilder.loadTexts: netrapAdditionalInfoInteger2.setDescription('this 32 bit integer is used to hold specific information about the trap.')
netrapAdditionalInfoInteger3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapAdditionalInfoInteger3.setStatus('mandatory')
if mibBuilder.loadTexts: netrapAdditionalInfoInteger3.setDescription('This 32 bit integer is used to hold specific information about the trap.')
netrapChangedValueDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueDisplayString.setStatus('mandatory')
if mibBuilder.loadTexts: netrapChangedValueDisplayString.setDescription('This DisplayString is used to hold specific information about the trap')
netrapChangedValueOID = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueOID.setStatus('mandatory')
if mibBuilder.loadTexts: netrapChangedValueOID.setDescription('This OBJECT IDENTIFIER is used to hold specific information about the trap')
netrapChangedValueIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: netrapChangedValueIpAddress.setDescription('This OBJECT IDENTIFIER is used to hold specific information about the trap.')
netrapChangedValueInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3, 11, 10, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netrapChangedValueInteger.setStatus('mandatory')
if mibBuilder.loadTexts: netrapChangedValueInteger.setDescription('this 32 bit integer is used to hold the data value that this object has been changed too.')
trapCMConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapCMConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapCMModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMModuleTempAlarm.setDescription('This trap is issued when the Module Temperature parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapCMEEPROMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMEEPROMAlarm.setDescription('This trap is issued when the EEPROM detectes an error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapCMFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMFlashAlarm.setDescription('This trap is issued when the Flash device detects an error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapCMHardwareAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMHardwareAlarm.setDescription('This trap is issued when the system hardware detectes an error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapCMInitEEPROMAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMInitEEPROMAlarm.setDescription('This trap is issued when the there is an EEPROM initializing error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapCMBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 3) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapCMBootAlarm.setDescription('This trap is issued when the there is a boot error. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
mibBuilder.exportSymbols("OMNI-gx2CM-MIB", failureTransSlot6=failureTransSlot6, labelResetSlot=labelResetSlot, valueTrap3Destination=valueTrap3Destination, labelPassword=labelPassword, successTransSlot9=successTransSlot9, bank1CRC=bank1CRC, netrapPerceivedSeverity=netrapPerceivedSeverity, failureTransSlot3=failureTransSlot3, netrapNetworkElemOperState=netrapNetworkElemOperState, enumResetAlarm=enumResetAlarm, agentIDAMCslot10=agentIDAMCslot10, successTransSlot1=successTransSlot1, successTransSlot6=successTransSlot6, successTransSlot16=successTransSlot16, bootCount=bootCount, gx2cmDiagnosticTableIndex=gx2cmDiagnosticTableIndex, fanControl=fanControl, valueAMCslot13=valueAMCslot13, gx2cmStatusTable=gx2cmStatusTable, agentIDAMCslot4=agentIDAMCslot4, successTransSlot4=successTransSlot4, failureTransSlot10=failureTransSlot10, successTransSlot18=successTransSlot18, valueAMCslot2=valueAMCslot2, gx2cmNetworkTableIndex=gx2cmNetworkTableIndex, valueAMCslot3=valueAMCslot3, netWorkMacAdd=netWorkMacAdd, successTransSlot8=successTransSlot8, valueAMCslot15=valueAMCslot15, successTransSlot11=successTransSlot11, flashPrgCnt0=flashPrgCnt0, stateFlagResetAlarm=stateFlagResetAlarm, failureTransSlot8=failureTransSlot8, factoryCRC=factoryCRC, enumRemoteLocal=enumRemoteLocal, valueAMCslot7=valueAMCslot7, flashBank1=flashBank1, netrapNetworkElemModelNumber=netrapNetworkElemModelNumber, valueTrapDestination=valueTrapDestination, valueAMCslot6=valueAMCslot6, successTransSlot15=successTransSlot15, bootControlByte=bootControlByte, downloadFilename=downloadFilename, stateDataCrc=stateDataCrc, stateBootStatus=stateBootStatus, failureTransSlot5=failureTransSlot5, enumSecurityMode=enumSecurityMode, bank0CRC=bank0CRC, stateFlagModTemp=stateFlagModTemp, gx2cmDownloadTableIndex=gx2cmDownloadTableIndex, valueISDNMode=valueISDNMode, valueShelfSerialNum=valueShelfSerialNum, valueAMCslot14=valueAMCslot14, agentIDAMCslot9=agentIDAMCslot9, labelShelfSerialNum=labelShelfSerialNum, gx2cmDownloadEntry=gx2cmDownloadEntry, stateLocalOnlyChgString=stateLocalOnlyChgString, agentIDAMCslot17=agentIDAMCslot17, stateOperatorChgString=stateOperatorChgString, valueAMCslot12=valueAMCslot12, serialAMCslot18=serialAMCslot18, netrapId=netrapId, agentIDAMCslot5=agentIDAMCslot5, majorHighModTemp=majorHighModTemp, serialAMCslot13=serialAMCslot13, failureTransSlot18=failureTransSlot18, valueOperatorChgString=valueOperatorChgString, agentIDAMCslot18=agentIDAMCslot18, labelModTemp=labelModTemp, minorHighModTemp=minorHighModTemp, gx2cmAMCEntry=gx2cmAMCEntry, gx2cmDownloadTable=gx2cmDownloadTable, stateFlashStatus=stateFlashStatus, stateReadOnlyChgString=stateReadOnlyChgString, labelGateWayIPAdd=labelGateWayIPAdd, valueISDNBackoffTimer=valueISDNBackoffTimer, objectTableData=objectTableData, netrapNetworkElemAvailStatus=netrapNetworkElemAvailStatus, bootStatusByte=bootStatusByte, labelSecurityMode=labelSecurityMode, gx2cmSecurityTableIndex=gx2cmSecurityTableIndex, valueShelfAlarm=valueShelfAlarm, valueGateWayIPAdd=valueGateWayIPAdd, valuePassword=valuePassword, serialAMCslot6=serialAMCslot6, netrapNetworkElemAdminState=netrapNetworkElemAdminState, agentIDAMCslot16=agentIDAMCslot16, labelTrapDestination=labelTrapDestination, downloadValue=downloadValue, labelIdShelf=labelIdShelf, netrapNetworkElemAlarmStatus=netrapNetworkElemAlarmStatus, valueFactoryChgString=valueFactoryChgString, failureTransSlot15=failureTransSlot15, gx2cmAnalogEntry=gx2cmAnalogEntry, valueResetAlarm=valueResetAlarm, valueRemoteLocal=valueRemoteLocal, netrapChangedValueDisplayString=netrapChangedValueDisplayString, gx2cmSecurityEntry=gx2cmSecurityEntry, valueIdShelf=valueIdShelf, successTransSlot17=successTransSlot17, successTransSlot14=successTransSlot14, autoDownloadReset=autoDownloadReset, valueAMCslot9=valueAMCslot9, netrapText=netrapText, failureTransSlot9=failureTransSlot9, serialAMCslot3=serialAMCslot3, fanTestMode=fanTestMode, stateFlagRemoteLocal=stateFlagRemoteLocal, localMacAdd=localMacAdd, labelISDNPingTimeout=labelISDNPingTimeout, minorLowModTemp=minorLowModTemp, labelBootStatus=labelBootStatus, statePassword=statePassword, valueAMCslot11=valueAMCslot11, gx2cmAnalogTable=gx2cmAnalogTable, valueTrap4Destination=valueTrap4Destination, failureTransSlot16=failureTransSlot16, gx2cmFactoryTable=gx2cmFactoryTable, gx2cmDescriptor=gx2cmDescriptor, labelResetAlarm=labelResetAlarm, netrapAdditionalInfoInteger1=netrapAdditionalInfoInteger1, valueResetSlot=valueResetSlot, serialAMCslot15=serialAMCslot15, failureTransSlot4=failureTransSlot4, trapCMEEPROMAlarm=trapCMEEPROMAlarm, labelOperatorChgString=labelOperatorChgString, serialAMCslot10=serialAMCslot10, relayTestMode=relayTestMode, failureTransSlot12=failureTransSlot12, gx2cmDiagnosticEntry=gx2cmDiagnosticEntry, stateFactoryChgString=stateFactoryChgString, cmTrapHistoryTable=cmTrapHistoryTable, agentIDAMCslot14=agentIDAMCslot14, netrapChangedValueInteger=netrapChangedValueInteger, successTransSlot5=successTransSlot5, hourMeter=hourMeter, valueDataCrc=valueDataCrc, successTransSlot3=successTransSlot3, valueReadOnlyChgString=valueReadOnlyChgString, agentIDAMCslot7=agentIDAMCslot7, serialAMCslot11=serialAMCslot11, gx2cmNetworkEntry=gx2cmNetworkEntry, gx2cmDiagnosticTable=gx2cmDiagnosticTable, slotPollMode=slotPollMode, failureTransSlot17=failureTransSlot17, stateShelfAlarm=stateShelfAlarm, failureTransSlot11=failureTransSlot11, valueLocalEthIPAdd=valueLocalEthIPAdd, valueSecurityMode=valueSecurityMode, stateRemoteOnlyChgString=stateRemoteOnlyChgString, valueAMCslot4=valueAMCslot4, valueTrap2Destination=valueTrap2Destination, serialAMCslot12=serialAMCslot12, valueAMCslot8=valueAMCslot8, valueAMCslot18=valueAMCslot18, trapCMConfigChangeInteger=trapCMConfigChangeInteger, agentIDAMCslot3=agentIDAMCslot3, labelLocalEthIPAdd=labelLocalEthIPAdd, trapCMHardwareAlarm=trapCMHardwareAlarm, netrapAdditionalInfoInteger3=netrapAdditionalInfoInteger3, valueISDNTrapTimeout=valueISDNTrapTimeout, agentIDAMCslot1=agentIDAMCslot1, gx2cmDigitalEntry=gx2cmDigitalEntry, gx2cmFactoryEntry=gx2cmFactoryEntry, serialAMCslot5=serialAMCslot5, trapCMFlashAlarm=trapCMFlashAlarm, labelISDNBackoffTimer=labelISDNBackoffTimer, failureTransSlot7=failureTransSlot7, valueRemoteOnlyChgString=valueRemoteOnlyChgString, serialAMCslot16=serialAMCslot16, labelFactoryChgString=labelFactoryChgString, valueAMCslot10=valueAMCslot10, trapCMConfigChangeDisplayString=trapCMConfigChangeDisplayString, labelNetworkEthAdd=labelNetworkEthAdd, autoQuickSwapCnt=autoQuickSwapCnt, labelTrap3Destination=labelTrap3Destination, serialAMCslot7=serialAMCslot7, valueAMCslot16=valueAMCslot16, maxValueModTemp=maxValueModTemp, alarmStateModTemp=alarmStateModTemp, valueFlashStatus=valueFlashStatus, agentIDAMCslot11=agentIDAMCslot11, netrapNetworkElemSerialNum=netrapNetworkElemSerialNum, successTransSlot13=successTransSlot13, flashPrgCnt1=flashPrgCnt1, serialAMCslot8=serialAMCslot8, stateSecurityMode=stateSecurityMode, valueAMCslot1=valueAMCslot1, valueAMCslot17=valueAMCslot17, successTransSlot12=successTransSlot12, failureTransSlot13=failureTransSlot13, trapCMModuleTempAlarm=trapCMModuleTempAlarm, labelTrap4Destination=labelTrap4Destination, switchFwBank=switchFwBank, valueNetworkEthMask=valueNetworkEthMask, labelLocalEthMask=labelLocalEthMask, successTransSlot7=successTransSlot7, labelTFTPserver=labelTFTPserver, agentIDAMCslot15=agentIDAMCslot15, netrapChangedValueIpAddress=netrapChangedValueIpAddress, labelRemoteOnlyChgString=labelRemoteOnlyChgString, enumIdShelf=enumIdShelf, netrapChangedObjectId=netrapChangedObjectId, valueAlmLimCrc=valueAlmLimCrc, failureTransSlot2=failureTransSlot2, failureTransSlot1=failureTransSlot1, netrapAdditionalInfoInteger2=netrapAdditionalInfoInteger2, agentIDAMCslot13=agentIDAMCslot13, gx2cmAMCTable=gx2cmAMCTable, valueTrap5Destination=valueTrap5Destination, stateFlagIdShelf=stateFlagIdShelf, labelTrap2Destination=labelTrap2Destination, agentIDAMCslot12=agentIDAMCslot12, gx2cmStatusTableIndex=gx2cmStatusTableIndex, gx2cmStatusEntry=gx2cmStatusEntry, trapCMInitEEPROMAlarm=trapCMInitEEPROMAlarm, currentValueModTemp=currentValueModTemp, labelDataCrc=labelDataCrc, setSysTime=setSysTime, trapCMBootAlarm=trapCMBootAlarm, relayControl=relayControl, valueISDNPingTimeout=valueISDNPingTimeout, cmTrapHistoryEntry=cmTrapHistoryEntry, enumResetSlot=enumResetSlot, serialAMCslot1=serialAMCslot1, downloadState=downloadState, bpTestCnt=bpTestCnt, valueISDNModemIPAddress=valueISDNModemIPAddress, gx2cmFactoryTableIndex=gx2cmFactoryTableIndex, labelISDNMode=labelISDNMode, majorLowModTemp=majorLowModTemp, labelISDNModemIPAddress=labelISDNModemIPAddress, stateResetSlot=stateResetSlot, stateAlmLimCrc=stateAlmLimCrc, valueTFTPserver=valueTFTPserver, gx2cmTableIndex=gx2cmTableIndex, gx2cmNetworkTable=gx2cmNetworkTable, labelReadOnlyChgString=labelReadOnlyChgString, labelLocalOnlyChgString=labelLocalOnlyChgString, valueLocalOnlyChgString=valueLocalOnlyChgString, successTransSlot10=successTransSlot10, labelTrap5Destination=labelTrap5Destination, gx2cmSecurityTable=gx2cmSecurityTable, uomModTemp=uomModTemp, labelFlashStatus=labelFlashStatus, netrapChangedValueOID=netrapChangedValueOID, valueNetworkEthAdd=valueNetworkEthAdd, serialAMCslot17=serialAMCslot17, agentIDAMCslot6=agentIDAMCslot6, failureTransSlot14=failureTransSlot14, serialAMCslot4=serialAMCslot4, labelAlmLimCrc=labelAlmLimCrc, labelRemoteLocal=labelRemoteLocal, gx2cmAMCTableIndex=gx2cmAMCTableIndex)
mibBuilder.exportSymbols("OMNI-gx2CM-MIB", agentIDAMCslot8=agentIDAMCslot8, successTransSlot2=successTransSlot2, serialAMCslot2=serialAMCslot2, serialAMCslot14=serialAMCslot14, minValueModTemp=minValueModTemp, prgEEPROMByte=prgEEPROMByte, Float=Float, labelNetworkEthMask=labelNetworkEthMask, flashBank0=flashBank0, netrapLastTrapTimeStamp=netrapLastTrapTimeStamp, gx2cmDigitalTableIndex=gx2cmDigitalTableIndex, calculateCRC=calculateCRC, labelISDNTrapTimeout=labelISDNTrapTimeout, ledTestValue=ledTestValue, gx2cmDigitalTable=gx2cmDigitalTable, valueBootStatus=valueBootStatus, valueLocalEthMask=valueLocalEthMask, agentIDAMCslot2=agentIDAMCslot2, valueAMCslot5=valueAMCslot5, labelShelfAlarm=labelShelfAlarm, serialAMCslot9=serialAMCslot9, cmTrapHistoryTableIndex=cmTrapHistoryTableIndex)
