#
# PySNMP MIB module REDSTONE-ACCOUNTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-ACCOUNTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acctngSelectionEntry, acctngFileEntry = mibBuilder.importSymbols("ACCOUNTING-CONTROL-MIB", "acctngSelectionEntry", "acctngFileEntry")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
rsIfType, = mibBuilder.importSymbols("REDSTONE-IF-MIB", "rsIfType")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsAcctngAdminType, RsAcctngOperType = mibBuilder.importSymbols("REDSTONE-TC", "RsAcctngAdminType", "RsAcctngOperType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, ObjectIdentity, Integer32, iso, TimeTicks, Gauge32, Counter64, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Integer32", "iso", "TimeTicks", "Gauge32", "Counter64", "Unsigned32", "Bits")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
rsAcctngMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 24))
rsAcctngMIB.setRevisions(('1999-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsAcctngMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: rsAcctngMIB.setLastUpdated('9903120000Z')
if mibBuilder.loadTexts: rsAcctngMIB.setOrganization('Redstone Communications, Inc.')
if mibBuilder.loadTexts: rsAcctngMIB.setContactInfo(' Redstone Communications, Inc. 5 Carlisle Road Westford MA 01886 USA Tel: +1-978-692-1999 Email: mib@redstonecom.com ')
if mibBuilder.loadTexts: rsAcctngMIB.setDescription('The accounting MIB for the Redstone Communications Inc. enterprise.')
rsAcctngMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1))
rsAcctngSelectionControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 1))
rsAcctngFileControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 2))
rsAcctngInterfaceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 3))
rsAcctngSelectionTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 1, 1), )
if mibBuilder.loadTexts: rsAcctngSelectionTable.setStatus('current')
if mibBuilder.loadTexts: rsAcctngSelectionTable.setDescription("A list of accounting information selection entries. Note that additions, modifications and deletions of entries in this table can occur at any time, but such changes only take effect on the next occasion when collection begins into a new file. Thus, between modification and the next 'swap', the content of this table does not reflect the current selection.")
rsAcctngSelectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 1, 1, 1), )
acctngSelectionEntry.registerAugmentions(("REDSTONE-ACCOUNTING-MIB", "rsAcctngSelectionEntry"))
rsAcctngSelectionEntry.setIndexNames(*acctngSelectionEntry.getIndexNames())
if mibBuilder.loadTexts: rsAcctngSelectionEntry.setStatus('current')
if mibBuilder.loadTexts: rsAcctngSelectionEntry.setDescription('An entry used to extend the the selection entry in acctngSelectionEntry. This conceptual row extension is used for Redstone accounting extensions for connectionless data collection.')
rsAcctngSelectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("ietfAccountControl", 0), ("connectionLessLayer2", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAcctngSelectionType.setStatus('current')
if mibBuilder.loadTexts: rsAcctngSelectionType.setDescription('Indicates the types of connections for which the information selected by this entry are to be collected. The ietfAccountControl(0) bit position indicates that the acctngSelectionType in the base conceptual row determines the selection type. All other bit positions for this object over-ride the acctngSelectionType in the base conceptual row.')
rsAcctngSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteCounterValues", 1), ("deltaCounterValues", 2))).clone('deltaCounterValues')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAcctngSelectionMode.setStatus('current')
if mibBuilder.loadTexts: rsAcctngSelectionMode.setDescription('Indicates the data collection mode.')
rsAcctngFileTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 2, 1), )
if mibBuilder.loadTexts: rsAcctngFileTable.setStatus('current')
if mibBuilder.loadTexts: rsAcctngFileTable.setDescription('A unique value identifying the file transfer behavior and the the file to where accounting data is to be stored.')
rsAcctngFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 2, 1, 1), )
acctngFileEntry.registerAugmentions(("REDSTONE-ACCOUNTING-MIB", "rsAcctngFileEntry"))
rsAcctngFileEntry.setIndexNames(*acctngFileEntry.getIndexNames())
if mibBuilder.loadTexts: rsAcctngFileEntry.setStatus('current')
if mibBuilder.loadTexts: rsAcctngFileEntry.setDescription('An entry used to extend the file management of acctngFileEntry. This conceptual row extension is used for Redstone accounting extensions to automate the transfer of accounting data to remote hosts.')
rsAcctngFileXferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rsAcctngManualTransfer", 1), ("rsAcctngAutomatedTransfer", 2), ("rsAcctngTransferOnFileFull", 3), ("rsAcctngRedundantTransfer", 4))).clone('rsAcctngManualTransfer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAcctngFileXferMode.setStatus('current')
if mibBuilder.loadTexts: rsAcctngFileXferMode.setDescription('Indicates the mode to use for transfering accounting data to remote client. rsAcctngManualTransfer Administrator is responsible for manually transfering collected accounting data off of the system. rsAcctngAutomatedTransfer The agent will automatically transfer the collected accounting data based at a rsAcctngFileXferIntervals using an entry in the rsFileXferTable pointed to by rsAcctngFileXferIndex. If a manager sets this object to this value, a corresponding row in the rsFileXferTable must exist, otherwise the set command will fail. rsActngTransferOnFileFull The agent will automatically transfer the collected accounting data when the file reaches the maximum size defined by acctngFileMaximumSize. If a manager sets this object to this value, a corresponding row in the rsFileXferTable must exist, otherwise the set command will fail. rsAcctngRedundantTransfer The agent will automatically transfer two copies of the accounting data based on the rsAcctngFileXferInterval. One copy will go to the rsFileXferTable entry identified by rsAcctngFileXferIndex and one copy will go the the rsFileXferTable entry identified by rsAcctngFileXferSecondaryIndex')
rsAcctngFileXferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAcctngFileXferIndex.setStatus('current')
if mibBuilder.loadTexts: rsAcctngFileXferIndex.setDescription('Identifies an entry in the rsFileXferTable, which defines the file transfer parameters to use when the agent is configured to automatically transfer collected accounting data files. A set to this object will fail if a corresponding entry in the rsFileXferTable does not exist or it is not set to rsFileXferAcctngStatistics. ')
rsAcctngFileXferSecondaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAcctngFileXferSecondaryIndex.setStatus('current')
if mibBuilder.loadTexts: rsAcctngFileXferSecondaryIndex.setDescription('Identifies a backup or secondary entry in the rsFileXferTable, which defines the file transfer parameters to use when the agent is configured to automatically transfer collected accounting data files. A set to this object will fail if a corresponding entry in the rsFileXferTable does not exist or it is not set to rsFileXferAcctngStatistics. ')
rsAcctngInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 3, 1), )
if mibBuilder.loadTexts: rsAcctngInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: rsAcctngInterfaceTable.setDescription('A table controlling the collection of accounting data on specific interfaces types. This table provides an efficient mechanism to enable and/or disable data collection on all interfaces of a specified type.')
rsAcctngInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 3, 1, 1), ).setIndexNames((0, "REDSTONE-IF-MIB", "rsIfType"))
if mibBuilder.loadTexts: rsAcctngInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: rsAcctngInterfaceEntry.setDescription('An entry which controls whether accounting data is to be collected on interfaces of a specific type.')
rsAcctngInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 3, 1, 1, 1), RsAcctngAdminType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAcctngInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rsAcctngInterfaceAdminStatus.setDescription('The desired administrative state for accounting data collection for interfaces defined by the type of this entry. The administrative scope is for all interfaces of the type defined by the corresponding rsIfType for this entry.')
rsAcctngInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 3, 1, 1, 2), RsAcctngOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAcctngInterfaceOperStatus.setStatus('current')
if mibBuilder.loadTexts: rsAcctngInterfaceOperStatus.setDescription('The operational state for accounting data collection on for all interfaces corresponding to this entries type.')
rsAcctngInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 24, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAcctngInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsAcctngInterfaceRowStatus.setDescription('Controls creation/deletion of entries in this table.')
rsAcctngConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 24, 3))
rsAcctngGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 24, 3, 1))
rsAcctngCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 24, 3, 2))
rsAcctngCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 24, 3, 2, 1)).setObjects(("REDSTONE-ACCOUNTING-MIB", "rsAcctngBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAcctngCompliance = rsAcctngCompliance.setStatus('current')
if mibBuilder.loadTexts: rsAcctngCompliance.setDescription('The compliance statement for switches which implement the RedStone Accounting Control MIB.')
rsAcctngBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 24, 3, 1, 1)).setObjects(("REDSTONE-ACCOUNTING-MIB", "rsAcctngSelectionType"), ("REDSTONE-ACCOUNTING-MIB", "rsAcctngSelectionMode"), ("REDSTONE-ACCOUNTING-MIB", "rsAcctngFileXferMode"), ("REDSTONE-ACCOUNTING-MIB", "rsAcctngFileXferIndex"), ("REDSTONE-ACCOUNTING-MIB", "rsAcctngInterfaceAdminStatus"), ("REDSTONE-ACCOUNTING-MIB", "rsAcctngInterfaceOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAcctngBasicGroup = rsAcctngBasicGroup.setStatus('current')
if mibBuilder.loadTexts: rsAcctngBasicGroup.setDescription('A collection of objects providing control of the basic collection of accounting data for connection-less networks.')
mibBuilder.exportSymbols("REDSTONE-ACCOUNTING-MIB", rsAcctngSelectionMode=rsAcctngSelectionMode, rsAcctngSelectionControl=rsAcctngSelectionControl, rsAcctngBasicGroup=rsAcctngBasicGroup, rsAcctngSelectionTable=rsAcctngSelectionTable, rsAcctngGroups=rsAcctngGroups, rsAcctngFileEntry=rsAcctngFileEntry, rsAcctngInterfaceTable=rsAcctngInterfaceTable, rsAcctngInterfaceControl=rsAcctngInterfaceControl, PYSNMP_MODULE_ID=rsAcctngMIB, rsAcctngInterfaceAdminStatus=rsAcctngInterfaceAdminStatus, rsAcctngFileXferMode=rsAcctngFileXferMode, rsAcctngConformance=rsAcctngConformance, rsAcctngMIBObjects=rsAcctngMIBObjects, rsAcctngMIB=rsAcctngMIB, rsAcctngCompliances=rsAcctngCompliances, rsAcctngSelectionType=rsAcctngSelectionType, rsAcctngInterfaceRowStatus=rsAcctngInterfaceRowStatus, rsAcctngInterfaceEntry=rsAcctngInterfaceEntry, rsAcctngInterfaceOperStatus=rsAcctngInterfaceOperStatus, rsAcctngFileXferIndex=rsAcctngFileXferIndex, rsAcctngCompliance=rsAcctngCompliance, rsAcctngFileXferSecondaryIndex=rsAcctngFileXferSecondaryIndex, rsAcctngSelectionEntry=rsAcctngSelectionEntry, rsAcctngFileControl=rsAcctngFileControl, rsAcctngFileTable=rsAcctngFileTable)
