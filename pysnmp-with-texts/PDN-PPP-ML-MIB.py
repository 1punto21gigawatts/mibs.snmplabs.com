#
# PySNMP MIB module PDN-PPP-ML-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-PPP-ML-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
pdn_interfaces, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-interfaces")
SwitchState, PdnPPPState = mibBuilder.importSymbols("PDN-TC", "SwitchState", "PdnPPPState")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, IpAddress, TimeTicks, NotificationType, Counter64, iso, ObjectIdentity, Counter32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "IpAddress", "TimeTicks", "NotificationType", "Counter64", "iso", "ObjectIdentity", "Counter32", "MibIdentifier", "Integer32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
pdnPppMlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30))
pdnPppMlMIB.setRevisions(('2004-09-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnPppMlMIB.setRevisionsDescriptions(('Initial release.',))
if mibBuilder.loadTexts: pdnPppMlMIB.setLastUpdated('200409140000Z')
if mibBuilder.loadTexts: pdnPppMlMIB.setOrganization('Paradyne Networks MIB Working Group Other information about group editing the MIB')
if mibBuilder.loadTexts: pdnPppMlMIB.setContactInfo('Paradyne Networks, Inc. 8545 126th Avenue North Largo, FL 33733 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editor Clay Sikes')
if mibBuilder.loadTexts: pdnPppMlMIB.setDescription("The MIB module for configuring and managing multilink PPP. The following documents should be referenced with respect to this MIB: [PPP] Carlson, J, `PPP Design and Debugging', Addison-Wesley, December 1997. [RFC 1661] Simpson, W., `The Point-to-Point Protocol', July 1994. [RFC 1990] Sklower, K. et al., `The PPP Multilink Protocol (MP)', August 1996.")
pdnPppMlNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 0))
pdnPppMlObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1))
pdnPppMlAFNs = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 2))
pdnPppMlConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3))
class MRRU(TextualConvention, Unsigned32):
    reference = "RFC 1990, Section 5.1.1, `Multilink MRRU LCP Option'."
    description = 'Multilink Maximum Received Reconstructed Units (MMRU). The maximum number of octets in the Information Fields of reassembled packets.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 65535)

class SSNHF(TextualConvention, Integer32):
    reference = "RFC 1990, Section 5.1.2, `Short Sequence Number Header Option'."
    description = 'The Short Sequence Number Header Format value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ssnhfUnknown", 1), ("ssnhf12BitSeqNbrs", 2), ("ssnhf24BitSeqNbrs", 3))

class EDClass(TextualConvention, Integer32):
    reference = "RFC 1990, Section 5.1.3, `Endpoint Discriminator Option'."
    description = 'Endpoint Discriminator Option Class.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("nullClass", 0), ("locallyAssigned", 1), ("ipAddr", 2), ("ieee802", 3), ("pppMagicNbrBlk", 4), ("publicSwNetDirNbr", 5))

pdnPppMlBundleNumber = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleNumber.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleNumber.setDescription('The number of multilink PPP bundles configured on this system.')
pdnPppMlBundleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 2), )
if mibBuilder.loadTexts: pdnPppMlBundleConfigTable.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleConfigTable.setDescription('The Multilink PPP Bundle Configuration Table.')
pdnPppMlBundleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 2, 1), ).setIndexNames((0, "PDN-PPP-ML-MIB", "pdnPppMlBundleIfIndex"))
if mibBuilder.loadTexts: pdnPppMlBundleConfigEntry.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleConfigEntry.setDescription('An entry in the Multilink PPP Configuration Table.')
pdnPppMlBundleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pdnPppMlBundleIfIndex.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleIfIndex.setDescription('Identifies the interface number assigned to this bundle and is used to identify corresponding rows in the Interfaces MIB.')
pdnPppMlBundleConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnPppMlBundleConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleConfigRowStatus.setDescription('Used to create, modify, or delete rows in the table.')
pdnPppMlBundleConfigMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 2, 1, 3), MRRU()).setUnits('Number of octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnPppMlBundleConfigMRRU.setReference("RFC 1990, Section 5.1.1, `Multilink MRRU LCP Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleConfigMRRU.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleConfigMRRU.setDescription('The Multilink Maximum Received Reconstructed Units LCP option. This option specifies the maximum number of octets in the Information fields of reassembled packets.')
pdnPppMlBundleConfigSSNHF = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 2, 1, 4), SwitchState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnPppMlBundleConfigSSNHF.setReference("RFC 1990, Section 5.1.2, `Short Sequence Number Header Format Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleConfigSSNHF.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleConfigSSNHF.setDescription('The Short Sequence Number Header Format option. When set to enabled(1), the local PPP entity will indicate to the remote PPP entity that fragments with 12-bit sequence numbers are desired. When set to disabled(2), the local PPP entity will indicate to the remote PPP entity that fragments with 24-bit sequence numbers are desired.')
pdnPppMlBundleConfigFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967296))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnPppMlBundleConfigFragmentSize.setReference("RFC 1990, Section 3, `Packet Formats'. `PPP Design and Debugging', page 121, `Fragmentation and Reassembly'.")
if mibBuilder.loadTexts: pdnPppMlBundleConfigFragmentSize.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleConfigFragmentSize.setDescription("Configures the maximum number of octets of data in the packet's fragment data field. The value `0' has a special meaning which is to say `fragmentation is disabled'.")
pdnPppMlBundleMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 3), )
if mibBuilder.loadTexts: pdnPppMlBundleMappingTable.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleMappingTable.setDescription('The Multilink PPP Bundle Mapping Table. A table mapping the ifIndex of interfaces to a particular multilink PPP bundle identified by the pdnPppMlBundleIfIndex.')
pdnPppMlBundleMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnPppMlBundleMappingEntry.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleMappingEntry.setDescription('Each row describes one ifIndex to pdnPppMlBundleIfIndex mapping.')
pdnPppMlBundleMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnPppMlBundleMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleMappingRowStatus.setDescription('Used to create, modify, or delete rows in the table.')
pdnPppMlBundleMappingBundleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 3, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnPppMlBundleMappingBundleIfIndex.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleMappingBundleIfIndex.setDescription('The pdnPppMlBundleIndex of the PPP bundle which implements the specified interface.')
pdnPppMlBundleStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4), )
if mibBuilder.loadTexts: pdnPppMlBundleStatusTable.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusTable.setDescription('The Multilink PPP Bundle Status Table.')
pdnPppMlBundleStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1), ).setIndexNames((0, "PDN-PPP-ML-MIB", "pdnPppMlBundleIfIndex"))
if mibBuilder.loadTexts: pdnPppMlBundleStatusEntry.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusEntry.setDescription('An entry in the Multilink PPP Status Table.')
pdnPppMlBundleStatusCurrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 1), PdnPPPState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusCurrState.setReference("RFC 1661, Section 4.2, `State Transition Table'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusCurrState.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusCurrState.setDescription('The current state of the ML PPP State Machine.')
pdnPppMlBundleStatusLocalToRemoteMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 2), MRRU()).setUnits('Number of octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteMRRU.setReference("RFC 1990, Section 5.1.1, `Multilink MRRU LCP Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteMRRU.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteMRRU.setDescription('Identifies the result of the negotiation for the Multilink Maximum Received Reconstructed Units LCP option for the local to remote direction.')
pdnPppMlBundleStatusRemoteToLocalMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 3), MRRU()).setUnits('Number of octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalMRRU.setReference("RFC 1990, Section 5.1.1, `Multilink MRRU LCP Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalMRRU.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalMRRU.setDescription('Identifies the result of the negotiation for the Multilink Maximum Received Reconstructed Units LCP option for the remote to local direction.')
pdnPppMlBundleStatusLocalToRemoteSSNHF = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 4), SSNHF()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteSSNHF.setReference("RFC 1990, Section 5.1.2, `Short Sequence Number Header Format Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteSSNHF.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteSSNHF.setDescription('Identifies the result of the negotiation for the Short Sequence Number Header Format option for the local to remote direction. If negotiation has not completed, ssnhfUnknown(1) will be returned.')
pdnPppMlBundleStatusRemoteToLocalSSNHF = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 5), SSNHF()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalSSNHF.setReference("RFC 1990, Section 5.1.2, `Short Sequence Number Header Format Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalSSNHF.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalSSNHF.setDescription('Identifies the result of the negotiation for the Short Sequence Number Header Format option for the remote to local direction. If negotiation has not completed, ssnhfUnknown(1) will be returned.')
pdnPppMlBundleStatusLocalToRemoteEDClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 6), EDClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteEDClass.setReference("RFC 1990, Section 5.1.3, `Endpoint Discriminator Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteEDClass.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteEDClass.setDescription("Identifies the result of the negotiation for the Endpoint Discriminator Option's class for the local PPP entity.")
pdnPppMlBundleStatusLocalToRemoteEDAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteEDAddr.setReference("RFC 1990, Section 5.1.3, `Endpoint Discriminator Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteEDAddr.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusLocalToRemoteEDAddr.setDescription("Identifies the result of the negotiation for the Endpoint Discriminator Option's address for the local PPP entity.")
pdnPppMlBundleStatusRemoteToLocalEDClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 8), EDClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalEDClass.setReference("RFC 1990, Section 5.1.3, `Endpoint Discriminator Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalEDClass.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalEDClass.setDescription("Identifies the result of the negotiation for the Endpoint Discriminator Option's class for the remote PPP entity.")
pdnPppMlBundleStatusRemoteToLocalEDAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 1, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalEDAddr.setReference("RFC 1990, Section 5.1.3, `Endpoint Discriminator Option'.")
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalEDAddr.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStatusRemoteToLocalEDAddr.setDescription("Identifies the result of the negotiation for the Endpoint Discriminator Option's address for the remote PPP entity.")
pdnPppMlCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 1))
pdnPppMlGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2))
pdnPppMlCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 1, 1)).setObjects(("PDN-PPP-ML-MIB", "pdnPppMlBundleDefinitionGroup"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStateMachineGroup"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleMRRUGroup"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleSSNHFGroup"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleEDGroup"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleFragmentSizeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppMlCompliance = pdnPppMlCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlCompliance.setDescription('The compliance statement for network elements implementing multilink PPP.')
pdnPppMlObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 1))
pdnPppMlAfnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 2))
pdnPppmlNtfyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 3))
pdnPppMlBundleDefinitionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 1, 1)).setObjects(("PDN-PPP-ML-MIB", "pdnPppMlBundleNumber"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleConfigRowStatus"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleMappingBundleIfIndex"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleMappingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppMlBundleDefinitionGroup = pdnPppMlBundleDefinitionGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleDefinitionGroup.setDescription('Define a bundle and map ifIndices to it.')
pdnPppMlBundleStateMachineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 1, 2)).setObjects(("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusCurrState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppMlBundleStateMachineGroup = pdnPppMlBundleStateMachineGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleStateMachineGroup.setDescription("Displays the ML PPP State Machine's state.")
pdnPppMlBundleMRRUGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 1, 3)).setObjects(("PDN-PPP-ML-MIB", "pdnPppMlBundleConfigRowStatus"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleConfigMRRU"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusLocalToRemoteMRRU"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusRemoteToLocalMRRU"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppMlBundleMRRUGroup = pdnPppMlBundleMRRUGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleMRRUGroup.setDescription('Configures and displays the results of the negotiation of the Multilink Maximum Received Reconstructed Units LCP Option.')
pdnPppMlBundleSSNHFGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 1, 4)).setObjects(("PDN-PPP-ML-MIB", "pdnPppMlBundleConfigRowStatus"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleConfigSSNHF"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusLocalToRemoteSSNHF"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusRemoteToLocalSSNHF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppMlBundleSSNHFGroup = pdnPppMlBundleSSNHFGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleSSNHFGroup.setDescription('Configures and displays the results of the negotiation of the Short Sequence Number Header Format Option.')
pdnPppMlBundleEDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 1, 5)).setObjects(("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusLocalToRemoteEDClass"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusLocalToRemoteEDAddr"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusRemoteToLocalEDClass"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleStatusRemoteToLocalEDAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppMlBundleEDGroup = pdnPppMlBundleEDGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleEDGroup.setDescription('Displays the results of the negotiation of the Endpoint Discriminator Option.')
pdnPppMlBundleFragmentSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 30, 3, 2, 1, 6)).setObjects(("PDN-PPP-ML-MIB", "pdnPppMlBundleConfigRowStatus"), ("PDN-PPP-ML-MIB", "pdnPppMlBundleConfigFragmentSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppMlBundleFragmentSizeGroup = pdnPppMlBundleFragmentSizeGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppMlBundleFragmentSizeGroup.setDescription('Configures the fragment size.')
mibBuilder.exportSymbols("PDN-PPP-ML-MIB", pdnPppMlNotifications=pdnPppMlNotifications, pdnPppMlBundleMappingRowStatus=pdnPppMlBundleMappingRowStatus, pdnPppMlGroups=pdnPppMlGroups, pdnPppMlBundleConfigEntry=pdnPppMlBundleConfigEntry, pdnPppMlBundleConfigMRRU=pdnPppMlBundleConfigMRRU, pdnPppMlBundleStatusCurrState=pdnPppMlBundleStatusCurrState, pdnPppMlBundleStatusLocalToRemoteSSNHF=pdnPppMlBundleStatusLocalToRemoteSSNHF, pdnPppMlCompliances=pdnPppMlCompliances, pdnPppMlObjGroups=pdnPppMlObjGroups, pdnPppMlBundleConfigTable=pdnPppMlBundleConfigTable, pdnPppMlBundleFragmentSizeGroup=pdnPppMlBundleFragmentSizeGroup, pdnPppMlObjects=pdnPppMlObjects, pdnPppMlBundleMappingEntry=pdnPppMlBundleMappingEntry, pdnPppMlBundleStateMachineGroup=pdnPppMlBundleStateMachineGroup, pdnPppMlBundleStatusTable=pdnPppMlBundleStatusTable, pdnPppMlBundleStatusLocalToRemoteMRRU=pdnPppMlBundleStatusLocalToRemoteMRRU, pdnPppMlCompliance=pdnPppMlCompliance, pdnPppMlBundleDefinitionGroup=pdnPppMlBundleDefinitionGroup, pdnPppMlBundleStatusLocalToRemoteEDClass=pdnPppMlBundleStatusLocalToRemoteEDClass, pdnPppMlAfnGroups=pdnPppMlAfnGroups, pdnPppMlAFNs=pdnPppMlAFNs, pdnPppMlBundleConfigSSNHF=pdnPppMlBundleConfigSSNHF, pdnPppMlBundleMappingBundleIfIndex=pdnPppMlBundleMappingBundleIfIndex, pdnPppMlBundleMappingTable=pdnPppMlBundleMappingTable, pdnPppMlBundleIfIndex=pdnPppMlBundleIfIndex, PYSNMP_MODULE_ID=pdnPppMlMIB, EDClass=EDClass, pdnPppMlMIB=pdnPppMlMIB, pdnPppMlBundleConfigRowStatus=pdnPppMlBundleConfigRowStatus, pdnPppMlBundleStatusLocalToRemoteEDAddr=pdnPppMlBundleStatusLocalToRemoteEDAddr, pdnPppMlBundleStatusRemoteToLocalMRRU=pdnPppMlBundleStatusRemoteToLocalMRRU, pdnPppMlBundleStatusEntry=pdnPppMlBundleStatusEntry, pdnPppMlConformance=pdnPppMlConformance, pdnPppMlBundleEDGroup=pdnPppMlBundleEDGroup, SSNHF=SSNHF, pdnPppMlBundleStatusRemoteToLocalEDAddr=pdnPppMlBundleStatusRemoteToLocalEDAddr, pdnPppMlBundleNumber=pdnPppMlBundleNumber, pdnPppMlBundleMRRUGroup=pdnPppMlBundleMRRUGroup, MRRU=MRRU, pdnPppMlBundleStatusRemoteToLocalSSNHF=pdnPppMlBundleStatusRemoteToLocalSSNHF, pdnPppmlNtfyGroups=pdnPppmlNtfyGroups, pdnPppMlBundleConfigFragmentSize=pdnPppMlBundleConfigFragmentSize, pdnPppMlBundleSSNHFGroup=pdnPppMlBundleSSNHFGroup, pdnPppMlBundleStatusRemoteToLocalEDClass=pdnPppMlBundleStatusRemoteToLocalEDClass)
