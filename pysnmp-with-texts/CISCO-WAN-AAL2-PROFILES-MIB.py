#
# PySNMP MIB module CISCO-WAN-AAL2-PROFILES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-AAL2-PROFILES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Bits, TimeTicks, NotificationType, Integer32, Gauge32, iso, Unsigned32, ObjectIdentity, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Bits", "TimeTicks", "NotificationType", "Integer32", "Gauge32", "iso", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoWanAal2ProfilesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 17))
ciscoWanAal2ProfilesMIB.setRevisions(('2005-09-01 00:00', '2004-04-09 00:00', '2003-10-10 00:00', '2003-08-14 00:00', '2003-05-23 00:00', '2001-09-10 00:00', '2001-08-24 15:00', '2001-01-19 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanAal2ProfilesMIB.setRevisionsDescriptions((" Updated aal2ProfileNumber description with correction for enumeration value 'seven'. ", ' Updated aal2ProfileNumber description. ', ' Update descriptions in the MIB. ', ' Add new custom 210 profile. ', ' Changes for Lossless codec. ', ' Added changes for G723. ', ' Added new enum for g726-16k, g726-24k, and g276-40k in aal2ProfileVBDCodec. ', ' Added ITU profile 3. Take out hyphen in the definitions and change voiceCodec name to make it more clear. ',))
if mibBuilder.loadTexts: ciscoWanAal2ProfilesMIB.setLastUpdated('200509010000Z')
if mibBuilder.loadTexts: ciscoWanAal2ProfilesMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanAal2ProfilesMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vism@cisco.com')
if mibBuilder.loadTexts: ciscoWanAal2ProfilesMIB.setDescription('The MIB module for configuring AAL2 profile elements. This table will be used in AAL2 switching and trunking applications.')
ciscoWanAal2ProfilesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 17, 1))
aal2ProfilesGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1))
aal2ProfilesGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1), )
if mibBuilder.loadTexts: aal2ProfilesGrpTable.setStatus('current')
if mibBuilder.loadTexts: aal2ProfilesGrpTable.setDescription('This table contains configuration information about various profiles elements (packetization period, voice activity detection, voice codec, preference and voice band data codec) used in switched AAL2 PVC(Permanent Virtual Circuit) voice calls. ')
aal2ProfilesGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileType"), (0, "CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileNumber"))
if mibBuilder.loadTexts: aal2ProfilesGrpEntry.setStatus('current')
if mibBuilder.loadTexts: aal2ProfilesGrpEntry.setDescription('An entry in the vismAal2ProfilesGrpTable. All the entries in this table are implicitly created when the card comes up. ')
aal2ProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("itu", 1), ("custom", 3))))
if mibBuilder.loadTexts: aal2ProfileType.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileType.setDescription(' This object serves as the first index into this table. Only the following combination of aal2ProfileType and aal2ProfileNumber will be found in the table. first entry containing itu 1 second containing itu 2 third containing itu 3 fourth containing itu 7 fifth containing itu 8 sixth containing itu 12 seventh containing custom 100 eighth containing custom 101 ninth containing custom 110. tenth containing custom 200 eleventh containing custom 201 twelveth containing custom 210 ')
aal2ProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7, 8, 12, 100, 101, 110, 200, 201, 210))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("seven", 7), ("eight", 8), ("twelve", 12), ("oneHundred", 100), ("oneHundredOne", 101), ("oneHundredTen", 110), ("twoHundred", 200), ("twoHundredOne", 201), ("twoHundredTen", 210))))
if mibBuilder.loadTexts: aal2ProfileNumber.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileNumber.setDescription("This object serves as the second index into this table. The pre-defined ITU aal2ProfileNumber are specify in ITU-T I.366.2 standard. 'one' - G.711u/G.711a(No SID - Silence insertion descriptor) based on T1/E1 card type. 'two' - G.711u/G.711a(SID Generic) based on T1/E1 card type. 'three' - G.726-40 kbps(SID Generic), G.726-32 kbps(SID Generic), G.726-24 kbps(SID Generic), G.726-16 kbps(SID Generic), G.711u/G.711a(SID Generic). 'seven' - G.729ab(SID G729)/G.729a(No SID), G.711u/G.711a(No SID). 'eight' - G.729ab(SID G729)/G.729a(No SID), G.711u/G.711a(No SID), G.726-32 kbps(No SID). 'twelve'- G.723AH(SID G723), G.723H(No SID), G.723AL (SID G723), G.723L(No SID). 'oneHundred'(custom 100) - G.726-32 kbps(SID Generic), G.711u/G.711a(SID Generic). 'oneHundredOne'(custom 101) - G.729ab(SID G729)/G.729a (No SID), G.726-32 kbps(No SID), G.711u/G.711a(No SID) 'oneHundredTen'(custom 110) - G.729ab(SID G729)/G.729a (No SID), G.726-32 kbps(SID Generic), G.711u/G.711a(SID Generic). 'twoHundred'(custom 200) - clearChannel. 'twoHundredOne'(custom 201) - Lossless. 'twoHundredTen'(custom 210) - G.729ab(SID G729)/G.729a (No SID), G.726-32 kbps(No SID), G.711u/G.711a(No SID), clearChannel. ")
aal2ProfilePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ProfilePreference.setStatus('current')
if mibBuilder.loadTexts: aal2ProfilePreference.setDescription(' This object is used to configure the preference of one profile over another. A profile with a preference of zero (0) means that this profile element will not be used. A non-zero value with a lower number has a higher preference. The range of writable values is limited to the number of profiles, which means the number of rows in this table. If two or more entries has the same preference number then the first entry in the table will be used. The default preference for each profile will be as follows : itu 3 = 1 itu 7 = 2 itu 2 = 3 itu 1 = 4 itu 8 = 5 custom 100 = 6 custom 101 = 7 custom 110 = 8 custom 200 = 9 itu 12 = 10 custom 201 = 11 custom 210 = 12 ')
aal2ProfileVoiceCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g726r32000", 3), ("g729a", 4), ("g729ab", 5), ("clearChannel", 6), ("g726r16000", 7), ("g726r24000", 8), ("g726r40000", 9), ("g723h", 11), ("g723ah", 12), ("g723l", 13), ("g723al", 14), ("lossless", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ProfileVoiceCodec.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileVoiceCodec.setDescription(" This object determines the codecs to be used in this profile. Validation will be done before setting this object based on the current template used in the card. The default value of this object depends upon the profile for itu 1 = G.711u/G.711a based on T1/E1 card type itu 2 = G.711u/G.711a based on T1/E1 card type itu 3 = G.726 at rate 32 kbps itu 7 = G.729ab itu 8 = G.729ab custom 100 = G.726 at rate 32 kbps custom 101 = G.729ab custom 110 = G.729ab custom 200 = clearChannel itu 12 = G.723 family custom 201 = Lossless custom 210 = G.729a 'g711u' stands for G.711u 'g711a' stands for G.711a 'g726r32000' stands for G.726 at rate 32 kbps 'g729a' stands for G.729a 'g729ab' stands for G.729ab 'g726r16000' stands for G.726 at rate 16 kbps 'g726r24000' stands for G.726 at rate 24 kbps 'g726r40000' stands for G.726 at rate 40 kbps 'g723h' stands for G.723.1-H 'g723l' stands for G.723.1-L 'g723ah' stands for G.723.1a-H 'g723al' stands for G.723.1a-L 'lossless' stands for Lossless ")
aal2ProfileVoicePktPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 20, 30, 40))).clone(namedValues=NamedValues(("five", 5), ("ten", 10), ("twenty", 20), ("thirty", 30), ("fourty", 40)))).setUnits('milli seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ProfileVoicePktPeriod.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileVoicePktPeriod.setDescription(' This object is used to configure the packetization period in millisecs for a given codec. The default value of this object depends upon the profile for itu 1 = 5 (Applicable value is only 5) itu 2 = 5 (Applicable value is only 5) itu 3 = 5 (Applicable value is only 5) itu 7 = 10 (Applicable values are 5 & 10) itu 8 = 10 (Applicable values are 5 & 10) itu 12 = 30 (Applicable value is only 30) custom 100 = 10 (Applicable values are 5 & 10) custom 101 = 10 (Applicable values are 5 & 10) custom 110 = 30 (Applicable values are 5,10 & 30) custom 200 = 5 (Applicable value is only 5) custom 201 = 5 (Applicable value is only 5) custom 210 = 20 (Applicable value are only 5, 10 & 20) ')
aal2ProfileVoiceVAD = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("sidGenric", 3), ("sid729", 4), ("sid723", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ProfileVoiceVAD.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileVoiceVAD.setDescription('This object defines whether or not the VAD (Voice Activity Detection) has to be applied or not when the current profile is chosen. Upon detection of silence based on the configuration in this object either generic SID packet as specified in I.366.2 standards or SID 729 packet will be sent to the other end. The default value of this object depends on the profile: itu 1 = on - silence suppression enabled with no SID itu 2 = sidGeneric itu 3 = sidGeneric itu 7 = sid729 itu 8 = sid729 itu 12 = sid723 custom 100 = sidGeneric custom 101 = sid729 custom 110 = sid729 custom 200 = off - silence suppression disabled with no SID. custom 201 = off - silence suppression disabled with no SID. custom 210 = off - silence suppression disabled with no SID. ')
aal2ProfileVBDCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 9, 11, 13, 15))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g726r32000", 3), ("clearChannel", 6), ("g726r16000", 7), ("g726r24000", 8), ("g726r40000", 9), ("g723h", 11), ("g723l", 13), ("lossless", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ProfileVBDCodec.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileVBDCodec.setDescription(' This object determines the voice band data (VBD) codecs to be used when upspeed happens. The default value of this object depends upon the profile for itu 1 G.711u/G.711a based on T1/E1 card type itu 2 G.711u/G.711a based on T1/E1 card type itu 3 G.711u/G.711a based on T1/E1 card type itu 7 G.711u/G.711a based on T1/E1 card type itu 8 G.711u/G.711a based on T1/E1 card type itu 12 G.723.1-H custom 100 G.711u/G.711a based on T1/E1 card type custom 101 G.711u/G.711a based on T1/E1 card type custom 110 G.711u/G.711a based on T1/E1 card type custom 200 clearChannel custom 201 Lossless custom 210 G.711u/G.711a based on T1/E1 card type ')
aal2ProfileVBDPktPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 17, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 10, 30))).clone(namedValues=NamedValues(("five", 5), ("ten", 10), ("thirty", 30)))).setUnits('milli seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal2ProfileVBDPktPeriod.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileVBDPktPeriod.setDescription(' This object is used to configure the packetization period in millisecs for a given VBD codec. The default value of this object depends on the profile for itu 1 = 5 itu 2 = 5 itu 3 = 5 itu 7 = 5 itu 8 = 5 itu 12 = 30 custom 100 = 5 custom 101 = 5 custom 110 = 5 custom 200 = 5 custom 201 = 5 custom 210 = 5 ')
aal2ProfileMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 17, 2))
aal2ProfileMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 17, 2, 1))
aal2ProfileMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 17, 2, 2))
aal2ProfileMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 17, 2, 1, 1)).setObjects(("CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aal2ProfileMIBCompliance = aal2ProfileMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileMIBCompliance.setDescription(' The compliance statement for AAL2 profile group which implement this MIB.')
aal2ProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 17, 2, 2, 1)).setObjects(("CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfilePreference"), ("CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileVoiceCodec"), ("CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileVoicePktPeriod"), ("CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileVoiceVAD"), ("CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileVBDCodec"), ("CISCO-WAN-AAL2-PROFILES-MIB", "aal2ProfileVBDPktPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aal2ProfileGroup = aal2ProfileGroup.setStatus('current')
if mibBuilder.loadTexts: aal2ProfileGroup.setDescription('This group contains objects related to configuration of AAL2 profiles. ')
mibBuilder.exportSymbols("CISCO-WAN-AAL2-PROFILES-MIB", aal2ProfileGroup=aal2ProfileGroup, PYSNMP_MODULE_ID=ciscoWanAal2ProfilesMIB, aal2ProfileVBDPktPeriod=aal2ProfileVBDPktPeriod, aal2ProfileMIBCompliance=aal2ProfileMIBCompliance, aal2ProfilesGrpEntry=aal2ProfilesGrpEntry, ciscoWanAal2ProfilesMIB=ciscoWanAal2ProfilesMIB, aal2ProfilesGrp=aal2ProfilesGrp, ciscoWanAal2ProfilesMIBObjects=ciscoWanAal2ProfilesMIBObjects, aal2ProfileVoicePktPeriod=aal2ProfileVoicePktPeriod, aal2ProfilePreference=aal2ProfilePreference, aal2ProfileVoiceVAD=aal2ProfileVoiceVAD, aal2ProfileVBDCodec=aal2ProfileVBDCodec, aal2ProfileMIBConformance=aal2ProfileMIBConformance, aal2ProfilesGrpTable=aal2ProfilesGrpTable, aal2ProfileNumber=aal2ProfileNumber, aal2ProfileMIBGroups=aal2ProfileMIBGroups, aal2ProfileVoiceCodec=aal2ProfileVoiceCodec, aal2ProfileType=aal2ProfileType, aal2ProfileMIBCompliances=aal2ProfileMIBCompliances)
