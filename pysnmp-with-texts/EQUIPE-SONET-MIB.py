#
# PySNMP MIB module EQUIPE-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQUIPE-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, Counter32, IpAddress, ObjectIdentity, enterprises, Gauge32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "Counter32", "IpAddress", "ObjectIdentity", "enterprises", "Gauge32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
equipe = MibIdentifier((1, 3, 6, 1, 4, 1, 5022))
eqSonetMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5022, 3))
if mibBuilder.loadTexts: eqSonetMib.setLastUpdated('0105060000Z')
if mibBuilder.loadTexts: eqSonetMib.setOrganization('')
if mibBuilder.loadTexts: eqSonetMib.setContactInfo('Jas Parmar Equipe Communications 100 Nagog Park Acton MA 01720')
if mibBuilder.loadTexts: eqSonetMib.setDescription('This is the Equipe SONET MIB module.')
class EqSonetApsCfgStatus(TextualConvention, Integer32):
    description = 'Equipe sonet aps config status values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("working", 2), ("protecting", 3), ("lockoutProtecting", 4), ("forcedSwitchWorkingToProtecting", 5), ("forcedSwitchProtectingToWorking", 6), ("manualSwitchWorkingToProtecting", 7), ("manualSwitchProtectingToWorking", 8))

class EqSonetApsCfgAction(TextualConvention, Integer32):
    description = 'Equipe sonet aps config action values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("clear", 2), ("lockoutProtecting", 3), ("forcedSwitchWorkingToProtecting", 4), ("forcedSwitchProtectingToWorking", 5), ("manualSwitchWorkingToProtecting", 6), ("manualSwitchProtectingToWorking", 7))

eqSonetApsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 3, 1), )
if mibBuilder.loadTexts: eqSonetApsCfgTable.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsCfgTable.setDescription('This table contains aps config info for a sonet port.')
eqSonetApsCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eqSonetApsCfgEntry.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsCfgEntry.setDescription('A sonet port aps config entry.')
eqSonetApsCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 1, 1, 1), EqSonetApsCfgStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetApsCfgStatus.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsCfgStatus.setDescription('The current aps status for this sonet port.')
eqSonetApsCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 1, 1, 2), EqSonetApsCfgAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqSonetApsCfgAction.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsCfgAction.setDescription('This object is used to perform an aps action on a sonet port. A read on this object always returns the value other(1). Setting this object to clear(2) causes the port to revert back to default aps configuration. Setting this object to lockoutProtecting(3) prevents any of the working channels from switching to the protecting line. Setting this object to forcedSwitchWorkingToProtecting(4) switches the working port to the protecting port. Setting this object to forcedSwitchProtectingToWorking(5) switches the protecting port to the working port. Setting this object to manualSwitchWorkingToProtecting(6) switches the working port to the protecting port. Setting this object to manualSwitchProtectingToWorking(7) switches the protecting port to the working port.')
eqSonetApsCfgLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 1, 1, 3), EqSonetApsCfgAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetApsCfgLastAction.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsCfgLastAction.setDescription('This object indicates the last aps action requested on this port.')
eqSonetApsCfgPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetApsCfgPortActive.setStatus('current')
if mibBuilder.loadTexts: eqSonetApsCfgPortActive.setDescription('This object is used to determine if the sts paths configured on this port are currrently actually terminated on this port. This is used to determine if the port is in active or standby mode. A value of false(1) indicates that the sts paths are not terminated (standby). A value of true(2) indicates that the sts paths are terminated (active).')
eqSonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 3, 2), )
if mibBuilder.loadTexts: eqSonetPathTable.setStatus('current')
if mibBuilder.loadTexts: eqSonetPathTable.setDescription('This table contains config info for a sonet port.')
eqSonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eqSonetPathEntry.setStatus('current')
if mibBuilder.loadTexts: eqSonetPathEntry.setDescription('A sonet path config entry.')
eqSonetPathActualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetPathActualPort.setStatus('current')
if mibBuilder.loadTexts: eqSonetPathActualPort.setDescription('The ifIndex of the sonet port over which this path is actually running. Note that this value could be different from the sonet port that the sts path was originally configured.')
eqSonetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 3, 3), )
if mibBuilder.loadTexts: eqSonetStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsTable.setDescription('This table contains stats for a sonet port.')
eqSonetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1), ).setIndexNames((0, "EQUIPE-SONET-MIB", "eqSonetStatsIfIndex"))
if mibBuilder.loadTexts: eqSonetStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsEntry.setDescription('A sonet port stats entry.')
eqSonetStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsIfIndex.setDescription('The ifIndex for the corresponding sonet port.')
eqSonetStatsLineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetStatsLineFailures.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsLineFailures.setDescription('The number of line failure events. A line failure is an AIS-L signal received from another NE, or received from the same NE when internally generating an AIS-L signal in the LTE.')
eqSonetStatsLineApsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetStatsLineApsCount.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsLineApsCount.setDescription('The number of times the service has switched from the working to the protect line.')
eqSonetStatsLineApsSwitchDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetStatsLineApsSwitchDuration.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsLineApsSwitchDuration.setDescription('The number of seconds the service has been carried on the protection line.')
eqSonetStatsLineStsPtrAdjustments = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetStatsLineStsPtrAdjustments.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsLineStsPtrAdjustments.setDescription('The count of STS pointer adjustments created or absorbed by an NE due to differences in the frame rates of the incoming and outgoing sonet signal.')
eqSonetStatsPathFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetStatsPathFailures.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsPathFailures.setDescription('The number of path failure events. A path failure is an AIS-P signal received from another NE, or received from the same NE when internally generating an AIS-P signal in the PTE. A path with support for ERDI-P will increment this counter when an UNEQ-P failure is declared.')
eqSonetStatsTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqSonetStatsTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: eqSonetStatsTimeElapsed.setDescription("The number of seconds, including partial seconds, that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
mibBuilder.exportSymbols("EQUIPE-SONET-MIB", eqSonetApsCfgStatus=eqSonetApsCfgStatus, eqSonetApsCfgTable=eqSonetApsCfgTable, eqSonetStatsLineFailures=eqSonetStatsLineFailures, eqSonetApsCfgLastAction=eqSonetApsCfgLastAction, PYSNMP_MODULE_ID=eqSonetMib, eqSonetStatsEntry=eqSonetStatsEntry, eqSonetMib=eqSonetMib, EqSonetApsCfgAction=EqSonetApsCfgAction, eqSonetStatsTimeElapsed=eqSonetStatsTimeElapsed, eqSonetStatsLineApsSwitchDuration=eqSonetStatsLineApsSwitchDuration, eqSonetApsCfgPortActive=eqSonetApsCfgPortActive, eqSonetPathEntry=eqSonetPathEntry, eqSonetApsCfgEntry=eqSonetApsCfgEntry, EqSonetApsCfgStatus=EqSonetApsCfgStatus, equipe=equipe, eqSonetStatsTable=eqSonetStatsTable, eqSonetStatsIfIndex=eqSonetStatsIfIndex, eqSonetApsCfgAction=eqSonetApsCfgAction, eqSonetPathActualPort=eqSonetPathActualPort, eqSonetStatsLineStsPtrAdjustments=eqSonetStatsLineStsPtrAdjustments, eqSonetStatsPathFailures=eqSonetStatsPathFailures, eqSonetPathTable=eqSonetPathTable, eqSonetStatsLineApsCount=eqSonetStatsLineApsCount)
