#
# PySNMP MIB module CISCO-VIRTUAL-NIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VIRTUAL-NIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Unsigned32, ObjectIdentity, MibIdentifier, Counter32, Counter64, ModuleIdentity, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Counter32", "Counter64", "ModuleIdentity", "IpAddress", "NotificationType")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
ciscoVirtualNicMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 710))
ciscoVirtualNicMIB.setRevisions(('2009-10-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVirtualNicMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVirtualNicMIB.setLastUpdated('200910260000Z')
if mibBuilder.loadTexts: ciscoVirtualNicMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVirtualNicMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoVirtualNicMIB.setDescription("This MIB module defines MIB objects which provide mechanisms to manage the parameters used by or related to Virtual NIC. Virtual switch extends across one or more virtualization servers which host the VM instances. Each virtualization server is represented as a line card module and is assigned to a unique slot in the virtual chassis. All the ports on the virtual switch which can be hooked up to VM VNICs or to special hypervisor ports (e.g. vmk or vswif ports) are represented as virtual ethernet interfaces. Virtual ethernet interfaces(veths) represent the switching ports on the virtual switch which provide networking connectivity to virtual packet based interfaces such as the Virtual NIC (VNIC) interfaces defined on a Virtual Machine (VM). These interfaces are configurable and provide operational information to the network administrator. The assignment of virtual ethernet interface ports to a VM does not change when the VM is migrated. Glossary: APC - Asymmetric Port Channel DVS - Distributed Virtual switch NIC - Network Interface Card NIV - Network interface virtualization PCI - Peripheral Component Interconnect VEM - Virtual Ethernet Module VNIC - Virtual Network Interface Card VSM - Virtual Supervisor Module VM - Virtual Machine VMK - Virtual Machine Kernel VMKNIC - Virtual Machine Kernel Network Interface Card VSWIF - a virtual management port on hosts running VMware ESX. UUID - Universally Unique identifier connectee - Entity connected to a system using veth. eg: Virtual machine System Diagram : ************** * VSM * ************** ' ' ' ' ' ' ' ' ******** ******** * VEM * * VEM * ******** ******** ' ' ' ' ' ' ****** ****** ****** * VM * * VM * * VM * ****** ****** ******")
ciscoVirtualNicMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 710, 0))
ciscoVirtualNicMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 710, 1))
ciscoVirtualNicMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 710, 2))
cvnInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1))
cvnConnecteeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2))
cvnVethIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1), )
if mibBuilder.loadTexts: cvnVethIfTable.setStatus('current')
if mibBuilder.loadTexts: cvnVethIfTable.setDescription('A list of virtual ethernet interfaces managed by VSM.')
cvnVethIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-VIRTUAL-NIC-MIB", "cvnVethInterface"))
if mibBuilder.loadTexts: cvnVethIfEntry.setStatus('current')
if mibBuilder.loadTexts: cvnVethIfEntry.setDescription('An entry containing management information for a particular virtual ethernet interface. Entries are created by the system when virtual Ethernet interfaces are registered to VSM. Entries are removed when virtual Ethernet interfaces are removed from VSM.')
cvnVethInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cvnVethInterface.setStatus('current')
if mibBuilder.loadTexts: cvnVethInterface.setDescription('The value of ifIndex for the virtual ethernet interface.')
cvnVethAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethAdapter.setStatus('current')
if mibBuilder.loadTexts: cvnVethAdapter.setDescription("This object indicates the network adapter used by virtual ethernet interface port. This object contains the Network Adapter ID if Virtual Machine is attached to VNIC. This object contains VMK ID if the Virtual Machine is attached to VMKNIC. This object contains value of 'vswif' if the Virtual Machine is attached to VSWIF.")
cvnVethOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethOwner.setStatus('current')
if mibBuilder.loadTexts: cvnVethOwner.setDescription('The name of the Virtual Machine that owns this virtual ethernet interface. When a Virtual Machine attaches to one of the port in physical server via this virtual ethernet interface, this VM will be considered as the owner of this virtual ethernet interface. When Virtual Machine moves from one host to another, its virtual ethernet interface remains unchanged.')
cvnVethHostID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethHostID.setStatus('current')
if mibBuilder.loadTexts: cvnVethHostID.setDescription('A unique identifier, assigned by the system, of the registered VEM. A VEM is registered and host a virtual ethernet interface when a Virtual Machine attaches to such VEM by using virtual ethernet interface. A unique identifier, logical module number, is assigned for every VEM. This object contains value of zero if VEM is directly attached to the switch.')
cvnVethHostAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethHostAddrType.setStatus('current')
if mibBuilder.loadTexts: cvnVethHostAddrType.setDescription('The type of Internet address of the VEM which hosts the VM.')
cvnVethHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethHostAddr.setStatus('current')
if mibBuilder.loadTexts: cvnVethHostAddr.setDescription('The Internet address of the VEM which hosts the VM. The type of this address is determined by the value of the cvnVethHostAddrType object. This object also indicates the management address of the VEM. Value of this object may be changed when virtual ethernet interface moves from one VEM to another VEM.')
cvnVethPortProfileUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethPortProfileUsed.setStatus('current')
if mibBuilder.loadTexts: cvnVethPortProfileUsed.setDescription('The name of port profile which has been applied to the current virtual ethernet interface. Port Profile contains a set of configuration parameters. For example, switchport mode, channel group no., channel group mode, security policy. Port profile is assigned during the registration of virtual ethernet interface.')
cvnVethIfProfileAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethIfProfileAlias.setStatus('current')
if mibBuilder.loadTexts: cvnVethIfProfileAlias.setDescription('The profile alias as seen in external virtualization server for the profile used by this virtual ethernet interface.')
cvnVethIfAdditionalState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("participating", 2), ("suspended", 3), ("errDisabled", 4), ("nonParticipating", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethIfAdditionalState.setStatus('current')
if mibBuilder.loadTexts: cvnVethIfAdditionalState.setDescription('This object indicates the additional state of the virtual ethernet interface. none - no additional state. participating - interface is up and participating. Virtual machine is currently connected to system using this interface. suspended - interface is down and has been suspended. errDisabled - interface is down due to error disabled. nonParticipating - interface is up but not participating.')
cvnVethStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnVethStateReason.setStatus('current')
if mibBuilder.loadTexts: cvnVethStateReason.setDescription('This object indicates the reason for the additional state specified in cvnVethIfAdditionalState.')
cvnPinningTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 2), )
if mibBuilder.loadTexts: cvnPinningTable.setStatus('current')
if mibBuilder.loadTexts: cvnPinningTable.setDescription('A list of virtual ethernet interfaces which supports pinning functionality in VSM. Pinning is a mechanism of directing traffic to or from a interface through a particular interface in a switch. By default, system use load balancing algorithm to pick the best possible physical interface automatically. However, user may use pinning functionality to instrument the finite control on the traffic flow between virtual ethernet interfaces and actual physical interfaces in VSM. For example, user may want to configure that packets from a particular virtual ethernet interface always go out through first interface in the port channel irrespective of load balancing policy on the switch. In order to achieve this, user can pin the virtual ethernet interface to first interface of the switch.')
cvnPinningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-VIRTUAL-NIC-MIB", "cvnVethInterface"))
if mibBuilder.loadTexts: cvnPinningEntry.setStatus('current')
if mibBuilder.loadTexts: cvnPinningEntry.setDescription('An entry containing pinning management information for a particular virtual ethernet interface. Entry is created by the system when a virtual Ethernet interface with pinning functionality is registered to VSM. Entry is removed when a virtual Ethernet interface with pinning functionality is removed from VSM.')
cvnPinnedSubGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvnPinnedSubGrpId.setStatus('current')
if mibBuilder.loadTexts: cvnPinnedSubGrpId.setDescription('This object indicates the sub-group ID to which virtual ethernet interface is pinned. This object returns negative vlaue (-1) if subgroup id is not assigned.')
cvnConnecteeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1), )
if mibBuilder.loadTexts: cvnConnecteeTable.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeTable.setDescription('A list of connectees which are currently attached to virtual ethernet interfaces. Virtual machine connects to a physical entity using a virtual ethernet interface. In this scenario the Virtual Machine is called connectee, physical entity is called host. Whenever a Virtual Machine is connected using virtual ethernet interface we have mapping between physical and virtual interfaces. This object gives the mapping of all virtual ehternet interfaces to their corresponding physical entities.')
cvnConnecteeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VIRTUAL-NIC-MIB", "cvnVethInterface"))
if mibBuilder.loadTexts: cvnConnecteeEntry.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeEntry.setDescription('An entry containing management information for a particular connectee. Entry is created when a connectee connects to VSM. Entry is deleted when a connectee has been disconnected.')
cvnConnecteeAttachType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("vem", 2), ("niv", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnConnecteeAttachType.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeAttachType.setDescription('This object indicates how virtual ethernet interface is attached to this system. none - virtual ethernet interface is not participating. vem - Always a dynamic attachment. For this type of attachment switching is done by host at software layer. niv - A fixed or dynamic attachment. For this type of attachment switching is done in asics')
cvnDVSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnDVSPort.setStatus('current')
if mibBuilder.loadTexts: cvnDVSPort.setDescription('This object indicates the port of DVS to which virtual ethernet interface is attached.')
cvnConnecteeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnConnecteeName.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeName.setDescription('This object indicates the name of the connectee attached to virtual ethernet interface. For example it will return name of virtual machine or host connected to the system')
cvnConnecteeUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnConnecteeUuid.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeUuid.setDescription('This object indicates the UUID of the connectee attached to this virtual ethernet interface.')
cvnConnecteeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("vmwareVm", 2), ("vmwareHost", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnConnecteeType.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeType.setDescription('This object indicates the type of connectee attached to this virtual ethernet interface. Connectee type can be host, Virtual Machine from different vendors etc. unknown - The type of connectee is unknown. vmwareVm - Connectee is a Virtual Machine vmwareHost - Connectee is a host')
cvnConnecteeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnConnecteeMac.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeMac.setDescription('This object indicates the MAC address of the connectee.')
cvnConnecteeDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnConnecteeDeviceName.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeDeviceName.setDescription('This object indicates the device ID or port ID of the connectee to which virtual ethernet interface is attached to.')
cvnConnecteeDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 710, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("pnic", 2), ("vnic", 3), ("vswif", 4), ("vmknic", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvnConnecteeDeviceType.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeDeviceType.setDescription('This object indicates the type of connectee device attached to this virtual ethernet interface. Connectee Device type can be VMKNIC, VSWIF,VNIC etc. unknown - The device type is none of followings. pnic - Physical NIC vnic - Virtual NIC vswif - Virtual Switch Interface vmknic - Virtual machine kernel NIC')
ciscoVirtualNicMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 710, 2, 1))
ciscoVirtualNicMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 710, 2, 2))
virtualNicMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 710, 2, 1, 1)).setObjects(("CISCO-VIRTUAL-NIC-MIB", "cvnVethGroup"), ("CISCO-VIRTUAL-NIC-MIB", "cvnPinningGroup"), ("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    virtualNicMIBCompliance = virtualNicMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: virtualNicMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-VIRTUAL-NIC-MIB.')
cvnVethGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 710, 2, 2, 1)).setObjects(("CISCO-VIRTUAL-NIC-MIB", "cvnVethAdapter"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethOwner"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethHostID"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethHostAddrType"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethHostAddr"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethPortProfileUsed"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethIfProfileAlias"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethIfAdditionalState"), ("CISCO-VIRTUAL-NIC-MIB", "cvnVethStateReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvnVethGroup = cvnVethGroup.setStatus('current')
if mibBuilder.loadTexts: cvnVethGroup.setDescription('A collection of objects providing the virtual ethernet interface management information on the device.')
cvnPinningGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 710, 2, 2, 2)).setObjects(("CISCO-VIRTUAL-NIC-MIB", "cvnPinnedSubGrpId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvnPinningGroup = cvnPinningGroup.setStatus('current')
if mibBuilder.loadTexts: cvnPinningGroup.setDescription('A collection of objects providing management information of pinning functionality.')
cvnConnecteeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 710, 2, 2, 3)).setObjects(("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeAttachType"), ("CISCO-VIRTUAL-NIC-MIB", "cvnDVSPort"), ("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeName"), ("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeUuid"), ("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeType"), ("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeMac"), ("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeDeviceName"), ("CISCO-VIRTUAL-NIC-MIB", "cvnConnecteeDeviceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvnConnecteeGroup = cvnConnecteeGroup.setStatus('current')
if mibBuilder.loadTexts: cvnConnecteeGroup.setDescription('A collection of objects providing management information of connectee.')
mibBuilder.exportSymbols("CISCO-VIRTUAL-NIC-MIB", cvnVethInterface=cvnVethInterface, cvnVethAdapter=cvnVethAdapter, cvnVethIfProfileAlias=cvnVethIfProfileAlias, cvnPinnedSubGrpId=cvnPinnedSubGrpId, cvnConnecteeUuid=cvnConnecteeUuid, virtualNicMIBCompliance=virtualNicMIBCompliance, cvnVethGroup=cvnVethGroup, cvnVethOwner=cvnVethOwner, cvnVethIfEntry=cvnVethIfEntry, cvnConnecteeGroup=cvnConnecteeGroup, cvnConnecteeAttachType=cvnConnecteeAttachType, cvnPinningTable=cvnPinningTable, cvnVethHostAddr=cvnVethHostAddr, cvnVethIfAdditionalState=cvnVethIfAdditionalState, cvnVethStateReason=cvnVethStateReason, cvnVethIfTable=cvnVethIfTable, ciscoVirtualNicMIBCompliances=ciscoVirtualNicMIBCompliances, cvnVethHostID=cvnVethHostID, cvnVethPortProfileUsed=cvnVethPortProfileUsed, cvnPinningEntry=cvnPinningEntry, cvnConnecteeEntry=cvnConnecteeEntry, cvnConnecteeDeviceType=cvnConnecteeDeviceType, ciscoVirtualNicMIBGroups=ciscoVirtualNicMIBGroups, cvnConnecteeObjects=cvnConnecteeObjects, ciscoVirtualNicMIBObjects=ciscoVirtualNicMIBObjects, cvnVethHostAddrType=cvnVethHostAddrType, cvnInterfaceObjects=cvnInterfaceObjects, ciscoVirtualNicMIBConformance=ciscoVirtualNicMIBConformance, cvnConnecteeType=cvnConnecteeType, cvnConnecteeName=cvnConnecteeName, cvnConnecteeMac=cvnConnecteeMac, cvnConnecteeDeviceName=cvnConnecteeDeviceName, cvnPinningGroup=cvnPinningGroup, PYSNMP_MODULE_ID=ciscoVirtualNicMIB, ciscoVirtualNicMIBNotifs=ciscoVirtualNicMIBNotifs, cvnConnecteeTable=cvnConnecteeTable, ciscoVirtualNicMIB=ciscoVirtualNicMIB, cvnDVSPort=cvnDVSPort)
