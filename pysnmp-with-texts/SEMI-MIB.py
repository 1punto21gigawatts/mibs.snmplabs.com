#
# PySNMP MIB module SEMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SEMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, IpAddress, TimeTicks, NotificationType, Bits, Counter64, ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, MibIdentifier, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "TimeTicks", "NotificationType", "Bits", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "MibIdentifier", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpHttpMgMod = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 36, 1))
hpHttpMgMod.setRevisions(('2000-10-16 00:00', '2000-10-12 00:00', '2000-10-04 00:00', '2000-01-12 00:00', '1999-03-17 00:00', '1998-12-01 00:00', '1997-06-26 00:00', '1996-06-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpHttpMgMod.setRevisionsDescriptions(('Minor syntactic changes in notifications.', 'Fixed semantic error, modified traps and included changes from the review team.', 'Moved Device asset information into a container model. Modified traps and compliance definitions. Depricated previous device asset objects.', 'Added cluster support', 'Corrected definition of hpHttpMgMod', 'Incorporated entity-relationship table', 'Incorporated NetCitizen definitions', 'Initial Version',))
if mibBuilder.loadTexts: hpHttpMgMod.setLastUpdated('200010160000Z')
if mibBuilder.loadTexts: hpHttpMgMod.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpHttpMgMod.setContactInfo('Hewlett Packard Company, 8000 Foothills Blvd. Roseville, CA 95747.')
if mibBuilder.loadTexts: hpHttpMgMod.setDescription('Management information for HP devices. This MIB provides SNMP systems asset and HTTP management information, as well as entity relationship information for host based implementations. This version contains additions for SEMI')
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpWebMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36))
class Utf8String(TextualConvention, OctetString):
    description = 'To facilitate internationalization, this TC represents information taken from the ISO/IEC IS 10646-1 character set, encoded as an octet string using the UTF-8 character encoding scheme described in RFC 2044 [10]. For strings in 7-bit US-ASCII, there is no impact since the UTF-8 representation is identical to the US-ASCII encoding.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

hpHttpMgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0))
hpHttpMgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1))
hpHttpMgGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2))
hpHttpMgCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 3))
hpHttpMgDefaults = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 1))
hpHttpMgDefaultURL = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 1, 1), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDefaultURL.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDefaultURL.setDescription('A Uniform Resource Locator (URL), as defined in RFC1738, for the default management information for this device. This URL is typically used by a HTTP browser to display management information for this device. This default page should contain links to any other management pages for this device.')
hpHttpMgNetCitizen = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2))
hpHttpMgMgmtSrvrURL = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 1), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgMgmtSrvrURL.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgMgmtSrvrURL.setDescription('URL of management server for this device. ')
hpHttpMgID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 2), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgID.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgID.setDescription('Unique identifier for this entity. This ID must not change even if network address or removable cards are changed. For devices with fixed MAC addresses this may be the same as ifPhysAddress; for devices with fixed serial numbers this may be the same as hpHttpMgSerialNumber.')
hpHttpMgHealth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("information", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgHealth.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgHealth.setDescription('Operating status of this entity.')
hpHttpMgManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 4), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgManufacturer.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgManufacturer.setDescription("Manufacturer of the hardware for this entity e.g. 'Hewlett-Packard'.")
hpHttpMgProduct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 5), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgProduct.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgProduct.setDescription("Manufacturer's product number for this entity, e.g. 'D1234A'.")
hpHttpMgVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 6), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgVersion.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgVersion.setDescription("Version number of this entity, e.g. 'A.00.01'. Where several version numbers are available, this represents the software version.")
hpHttpMgHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 7), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgHWVersion.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgHWVersion.setDescription("Version number of the hardware for this entity, e.g. 'A.00.01'.")
hpHttpMgROMVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 8), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgROMVersion.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgROMVersion.setDescription("Version number of ROM for this entity, e.g. 'A.00.01'.")
hpHttpMgSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 9), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgSerialNumber.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgSerialNumber.setDescription('Serial number of entity. It is recommended that this be factory set and read only; if not factory set, should initially be blank.')
hpHttpMgAssetNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 10), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgAssetNumber.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgAssetNumber.setDescription('Asset number of entity. This is not normally modified once set.')
hpHttpMgPhone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 2, 11), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgPhone.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgPhone.setDescription('Phone number of contact person for this entity.')
hpHttpMgEntityNetInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3))
hpHttpMgEntityNetInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1), )
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoTable.setDescription('A table of EntityRelationships, connection type, URLs, IPAddress etc. This table typcially contains relationships between devices that each have their own management agent. ')
hpHttpMgEntityNetInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1), ).setIndexNames((0, "SEMI-MIB", "hpHttpMgEntityNetInfoIndex"))
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoEntry.setDescription('Information describing EntityRelationships, URLs, IPAddresses etc.')
hpHttpMgEntityNetInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoIndex.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoIndex.setDescription('The EntityRelationship Entity Index.')
hpHttpMgEntityNetInfoSysObjID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1, 2), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoSysObjID.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoSysObjID.setDescription('Sys Object ID of this entity.')
hpHttpMgEntityNetInfoRelationshipType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("self", 0), ("containedEntity", 1), ("containingEntity", 2), ("externallyAttachedEntity", 3), ("indirectlyAttachedEntity", 4), ("clusterNode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoRelationshipType.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoRelationshipType.setDescription('Specifies the type of relationship this entry has to this entity.')
hpHttpMgEntityNetInfoUniqueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1, 4), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoUniqueID.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoUniqueID.setDescription('This represents a globally unique ID for the device. This MUST be the ordered combination of the Manufacturer, product name, AND any other text that is necessary to guarantee global uniqueness. This ID must not change even if the referenced entity is moved. e.g. HPD1234A9482882')
hpHttpMgEntityNetInfoURL = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1, 5), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoURL.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoURL.setDescription('Home Page URL of entity corresponding to this entry. This field may only contain the DNS name of a managed system, in which case the actual URL must be determined from this managed system.')
hpHttpMgEntityNetInfoURLLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1, 6), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoURLLabel.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoURLLabel.setDescription("Label that a managaement application should use for the hyperlink to the entity's URL.")
hpHttpMgEntityNetInfoIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 3, 1, 1, 7), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityNetInfoIPAddress.setDescription('Addressing information for one of the IP Addresses of the entity corresponding to this entry.')
hpHttpMgCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 4))
hpHttpMgClusterName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 4, 1), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgClusterName.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgClusterName.setDescription('The name of the cluster that this system is a member of, or blank if this system is not a member of a cluster.')
hpHttpMgDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5))
hpHttpMgDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1), )
if mibBuilder.loadTexts: hpHttpMgDeviceTable.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceTable.setDescription('A list of HP devices under a single SNMP agent.')
hpHttpMgDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1), ).setIndexNames((0, "SEMI-MIB", "hpHttpMgDeviceIndex"))
if mibBuilder.loadTexts: hpHttpMgDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceEntry.setDescription('A device entry containing objects for a particular device.')
hpHttpMgDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceIndex.setDescription('The unique device identification within the instance of this Mib.')
hpHttpMgDeviceGlobalUniqueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 2), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceGlobalUniqueID.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceGlobalUniqueID.setDescription('This represents a globally unique ID for the device. This MUST be the ordered combination of the Manufacturer, product name, AND any other text that is necessary to guarantee global uniqueness. This value may not be null. e.g. HPD1234A9482882')
hpHttpMgDeviceHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("unused", 2), ("ok", 3), ("warning", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceHealth.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceHealth.setDescription('Overall health of the device. The goal of this object is to be the single poll point to check the status of the device.')
hpHttpMgDeviceSysObjID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 4), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceSysObjID.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceSysObjID.setDescription('System Object ID for this Device entity. This should be an ASCII integer format. (i.e. 1.3.6.1.4.1.11.2.36.1.1) The value may not be null.')
hpHttpMgDeviceManagementURL = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 5), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceManagementURL.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceManagementURL.setDescription("This object contains the URL for the device's management software. If it does not exist the value is empty string. If write is not supported, then return invalid. This value is retained across boots.")
hpHttpMgDeviceManagementURLLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 6), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceManagementURLLabel.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceManagementURLLabel.setDescription("The label that a management application should use for the hyperlink to the entity's URL.")
hpHttpMgDeviceManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 7), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceManufacturer.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceManufacturer.setDescription("The device's manufacturer name. For Hewlett Packard branded equipment this value MUST be 'HP'")
hpHttpMgDeviceProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 8), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceProductName.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceProductName.setDescription("The device's product name. Null is NOT a valid value. (i.e. D1234A)")
hpHttpMgDeviceProductCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 9), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceProductCaption.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceProductCaption.setDescription("The device's product caption name. (i.e. HP Multi-stack Disk Array)")
hpHttpMgDeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 10), Utf8String()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceSerialNumber.setDescription('The serial number for the device. This can return a NULL string.')
hpHttpMgDeviceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 11), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceVersion.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceVersion.setDescription('Version number for this device.')
hpHttpMgDeviceHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 12), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceHWVersion.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceHWVersion.setDescription("Version number for this device's hardware.")
hpHttpMgDeviceROMVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 13), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceROMVersion.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceROMVersion.setDescription("Version number for this device's ROM.")
hpHttpMgDeviceAssetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 14), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceAssetNumber.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceAssetNumber.setDescription('Asset number for the device.')
hpHttpMgDeviceContactPerson = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 15), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceContactPerson.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceContactPerson.setDescription('Identifies the name of the person responsible for the operation of this device. If write is not supported then return invalid.')
hpHttpMgDeviceContactPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 16), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceContactPhone.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceContactPhone.setDescription('Phone number of the contact person for this device.')
hpHttpMgDeviceContactEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 17), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceContactEmail.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceContactEmail.setDescription('e-mail address of the contact person for this device.')
hpHttpMgDeviceContactPagerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 18), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceContactPagerNumber.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceContactPagerNumber.setDescription('Pager number of the contact person for this device.')
hpHttpMgDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 19), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceLocation.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceLocation.setDescription('Identifies the location for the this device. If write is not supported then return invalid.')
hpHttpMgDeviceRackId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 20), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceRackId.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceRackId.setDescription('Identifies the name given by the administrator to identify a particular rack such a rack 4a or SAP 2 for example.')
hpHttpMgDeviceRackPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 21), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceRackPosition.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceRackPosition.setDescription('Identifies the location such as top, middle or bottom or a number such a 1st from top etc. to identify the placement of a device in a rack.')
hpHttpMgDeviceRelationshipType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("host", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpHttpMgDeviceRelationshipType.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceRelationshipType.setDescription('Indicates the relationship of this device to the SNMP agent. Host indicates that this device owns the SNMP agent.')
hpHttpMgHealthTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 1)).setObjects(("SEMI-MIB", "hpHttpMgHealth"))
if mibBuilder.loadTexts: hpHttpMgHealthTrap.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgHealthTrap.setDescription('Sent whenever hpHttpMgHealth changes state.')
hpHttpMgShutdown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 2))
if mibBuilder.loadTexts: hpHttpMgShutdown.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgShutdown.setDescription('Sent when the agent is about to shut down.')
hpHttpMgUnknownHealthTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 3)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"), ("SEMI-MIB", "hpHttpMgDeviceManagementURL"), ("SEMI-MIB", "hpHttpMgDeviceManagementURLLabel"), ("SEMI-MIB", "hpHttpMgDeviceSpecificEventCode"), ("SEMI-MIB", "hpHttpMgDeviceSpecificFRU"))
if mibBuilder.loadTexts: hpHttpMgUnknownHealthTrap.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgUnknownHealthTrap.setDescription("The device's health has changed to unknown.")
hpHttpMgOKHealthTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 4)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"), ("SEMI-MIB", "hpHttpMgDeviceManagementURL"), ("SEMI-MIB", "hpHttpMgDeviceManagementURLLabel"), ("SEMI-MIB", "hpHttpMgDeviceSpecificEventCode"), ("SEMI-MIB", "hpHttpMgDeviceSpecificFRU"))
if mibBuilder.loadTexts: hpHttpMgOKHealthTrap.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgOKHealthTrap.setDescription("The device's health has changed to OK.")
hpHttpMgWarningHealthTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 5)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"), ("SEMI-MIB", "hpHttpMgDeviceManagementURL"), ("SEMI-MIB", "hpHttpMgDeviceManagementURLLabel"), ("SEMI-MIB", "hpHttpMgDeviceSpecificEventCode"), ("SEMI-MIB", "hpHttpMgDeviceSpecificFRU"))
if mibBuilder.loadTexts: hpHttpMgWarningHealthTrap.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgWarningHealthTrap.setDescription("The device's health has changed to warning.")
hpHttpMgCriticalHealthTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 6)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"), ("SEMI-MIB", "hpHttpMgDeviceManagementURL"), ("SEMI-MIB", "hpHttpMgDeviceManagementURLLabel"), ("SEMI-MIB", "hpHttpMgDeviceSpecificEventCode"), ("SEMI-MIB", "hpHttpMgDeviceSpecificFRU"))
if mibBuilder.loadTexts: hpHttpMgCriticalHealthTrap.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgCriticalHealthTrap.setDescription("The device's health has changed to critical.")
hpHttpMgNonRecoverableHealthTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 7)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"), ("SEMI-MIB", "hpHttpMgDeviceManagementURL"), ("SEMI-MIB", "hpHttpMgDeviceManagementURLLabel"), ("SEMI-MIB", "hpHttpMgDeviceSpecificEventCode"), ("SEMI-MIB", "hpHttpMgDeviceSpecificFRU"))
if mibBuilder.loadTexts: hpHttpMgNonRecoverableHealthTrap.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgNonRecoverableHealthTrap.setDescription("The device's health has changed to Non-Recoverable.")
hpHttpMgDeviceAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 8)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"), ("SEMI-MIB", "hpHttpMgDeviceManagementURL"), ("SEMI-MIB", "hpHttpMgDeviceManagementURLLabel"))
if mibBuilder.loadTexts: hpHttpMgDeviceAddedTrap.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceAddedTrap.setDescription('Sent whenever a device is added to the mib.')
hpHttpMgDeviceRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 9)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"))
if mibBuilder.loadTexts: hpHttpMgDeviceRemovedTrap.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceRemovedTrap.setDescription('Sent whenever a device is removed from the mib.')
hpHttpMgDeviceSpecificEventCode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 10), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceSpecificEventCode.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceSpecificEventCode.setDescription('Device specific event error code.')
hpHttpMgDeviceSpecificFRU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 0, 11), Utf8String()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpHttpMgDeviceSpecificFRU.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceSpecificFRU.setDescription('Device specific FRU identifier')
hpHttpMgMinCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 3, 1)).setObjects(("SEMI-MIB", "hpHttpMgDefaultGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgMinCompliance = hpHttpMgMinCompliance.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgMinCompliance.setDescription('The compliance statement for SNMP entities which are http manageable.')
hpHttpMgBasicNetCitizenCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 3, 2)).setObjects(("SEMI-MIB", "hpHttpMgDefaultGroup"), ("SEMI-MIB", "hpHttpMgBasicNetCitizenGroup"), ("SEMI-MIB", "hpHttpMgBasicNetCitizenTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgBasicNetCitizenCompliance = hpHttpMgBasicNetCitizenCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgBasicNetCitizenCompliance.setDescription(' The compliance statement for SNMP entities which meet basic NetCitizen crieria')
hpHttpMgEnhancedNetCitizenCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 3, 3)).setObjects(("SEMI-MIB", "hpHttpMgDefaultGroup"), ("SEMI-MIB", "hpHttpMgEnhancedNetCitizenGroup"), ("SEMI-MIB", "hpHttpMgEnhancedNetCitizenTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgEnhancedNetCitizenCompliance = hpHttpMgEnhancedNetCitizenCompliance.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEnhancedNetCitizenCompliance.setDescription(' The compliance statement for SNMP entities which meet basic NetCitizen crieria')
hpHttpMgExtentedNetCitizenCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 3, 4)).setObjects(("SEMI-MIB", "hpHttpMgClusterGroup"), ("SEMI-MIB", "hpHttpMgEntityRelationshipGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgExtentedNetCitizenCompliance = hpHttpMgExtentedNetCitizenCompliance.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgExtentedNetCitizenCompliance.setDescription(' The compliance statement for SNMP entities which meet basic NetCitizen crieria')
hpHttpMgExtentedNetCitizenCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 3, 5)).setObjects(("SEMI-MIB", "hpHttpMgExtendedNetCitizenGroup"), ("SEMI-MIB", "hpHttpMgExtendedNetCitizenTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgExtentedNetCitizenCompliance1 = hpHttpMgExtentedNetCitizenCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgExtentedNetCitizenCompliance1.setDescription(' The compliance statement for SNMP entities which meet basic NetCitizen crieria')
hpHttpMgExtentedNetCitizenCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 3, 6)).setObjects(("SEMI-MIB", "hpHttpMgDeviceSpecificGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgExtentedNetCitizenCompliance2 = hpHttpMgExtentedNetCitizenCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgExtentedNetCitizenCompliance2.setDescription(' The compliance statement for SNMP entities which meet basic NetCitizen crieria')
hpHttpMgDefaultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 1)).setObjects(("SEMI-MIB", "hpHttpMgDefaultURL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgDefaultGroup = hpHttpMgDefaultGroup.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDefaultGroup.setDescription('The objects providing information applicable to all http manageable systems')
hpHttpMgBasicNetCitizenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 2)).setObjects(("SEMI-MIB", "hpHttpMgMgmtSrvrURL"), ("SEMI-MIB", "hpHttpMgID"), ("SEMI-MIB", "hpHttpMgHealth"), ("SEMI-MIB", "hpHttpMgManufacturer"), ("SEMI-MIB", "hpHttpMgProduct"), ("SEMI-MIB", "hpHttpMgVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgBasicNetCitizenGroup = hpHttpMgBasicNetCitizenGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgBasicNetCitizenGroup.setDescription('Additional HP NetCitizen objects')
hpHttpMgBasicNetCitizenTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 3)).setObjects(("SEMI-MIB", "hpHttpMgHealthTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgBasicNetCitizenTrapGroup = hpHttpMgBasicNetCitizenTrapGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgBasicNetCitizenTrapGroup.setDescription('HP NetCitizen notifications')
hpHttpMgExtendedNetCitizenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 4)).setObjects(("SEMI-MIB", "hpHttpMgHWVersion"), ("SEMI-MIB", "hpHttpMgROMVersion"), ("SEMI-MIB", "hpHttpMgSerialNumber"), ("SEMI-MIB", "hpHttpMgAssetNumber"), ("SEMI-MIB", "hpHttpMgPhone"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgExtendedNetCitizenGroup = hpHttpMgExtendedNetCitizenGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpHttpMgExtendedNetCitizenGroup.setDescription('Additional HP NetCitizen objects')
hpHttpMgExtendedNetCitizenTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 5)).setObjects(("SEMI-MIB", "hpHttpMgShutdown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgExtendedNetCitizenTrapGroup = hpHttpMgExtendedNetCitizenTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgExtendedNetCitizenTrapGroup.setDescription('HP NetCitizen notifications')
hpHttpMgEntityRelationshipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 6)).setObjects(("SEMI-MIB", "hpHttpMgEntityNetInfoIndex"), ("SEMI-MIB", "hpHttpMgEntityNetInfoSysObjID"), ("SEMI-MIB", "hpHttpMgEntityNetInfoRelationshipType"), ("SEMI-MIB", "hpHttpMgEntityNetInfoUniqueID"), ("SEMI-MIB", "hpHttpMgEntityNetInfoURL"), ("SEMI-MIB", "hpHttpMgEntityNetInfoURLLabel"), ("SEMI-MIB", "hpHttpMgEntityNetInfoIPAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgEntityRelationshipGroup = hpHttpMgEntityRelationshipGroup.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEntityRelationshipGroup.setDescription('NetCitizen entitly-relationship table')
hpHttpMgClusterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 7)).setObjects(("SEMI-MIB", "hpHttpMgClusterName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgClusterGroup = hpHttpMgClusterGroup.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgClusterGroup.setDescription('Cluster objects')
hpHttpMgEnhancedNetCitizenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 8)).setObjects(("SEMI-MIB", "hpHttpMgDeviceIndex"), ("SEMI-MIB", "hpHttpMgDeviceGlobalUniqueID"), ("SEMI-MIB", "hpHttpMgDeviceHealth"), ("SEMI-MIB", "hpHttpMgDeviceSysObjID"), ("SEMI-MIB", "hpHttpMgDeviceManagementURL"), ("SEMI-MIB", "hpHttpMgDeviceManagementURLLabel"), ("SEMI-MIB", "hpHttpMgDeviceManufacturer"), ("SEMI-MIB", "hpHttpMgDeviceProductName"), ("SEMI-MIB", "hpHttpMgDeviceProductCaption"), ("SEMI-MIB", "hpHttpMgDeviceSerialNumber"), ("SEMI-MIB", "hpHttpMgDeviceVersion"), ("SEMI-MIB", "hpHttpMgDeviceHWVersion"), ("SEMI-MIB", "hpHttpMgDeviceROMVersion"), ("SEMI-MIB", "hpHttpMgDeviceAssetNumber"), ("SEMI-MIB", "hpHttpMgDeviceContactPerson"), ("SEMI-MIB", "hpHttpMgDeviceContactPhone"), ("SEMI-MIB", "hpHttpMgDeviceContactEmail"), ("SEMI-MIB", "hpHttpMgDeviceContactPagerNumber"), ("SEMI-MIB", "hpHttpMgDeviceLocation"), ("SEMI-MIB", "hpHttpMgDeviceRackId"), ("SEMI-MIB", "hpHttpMgDeviceRackPosition"), ("SEMI-MIB", "hpHttpMgDeviceRelationshipType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgEnhancedNetCitizenGroup = hpHttpMgEnhancedNetCitizenGroup.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEnhancedNetCitizenGroup.setDescription('Additional HP NetCitizen objects')
hpHttpMgEnhancedNetCitizenTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 9)).setObjects(("SEMI-MIB", "hpHttpMgUnknownHealthTrap"), ("SEMI-MIB", "hpHttpMgOKHealthTrap"), ("SEMI-MIB", "hpHttpMgWarningHealthTrap"), ("SEMI-MIB", "hpHttpMgCriticalHealthTrap"), ("SEMI-MIB", "hpHttpMgNonRecoverableHealthTrap"), ("SEMI-MIB", "hpHttpMgDeviceAddedTrap"), ("SEMI-MIB", "hpHttpMgDeviceRemovedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgEnhancedNetCitizenTrapGroup = hpHttpMgEnhancedNetCitizenTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgEnhancedNetCitizenTrapGroup.setDescription('HP NetCitizen notifications')
hpHttpMgDeviceSpecificGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 36, 1, 2, 10)).setObjects(("SEMI-MIB", "hpHttpMgDeviceSpecificEventCode"), ("SEMI-MIB", "hpHttpMgDeviceSpecificFRU"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpHttpMgDeviceSpecificGroup = hpHttpMgDeviceSpecificGroup.setStatus('current')
if mibBuilder.loadTexts: hpHttpMgDeviceSpecificGroup.setDescription('Additional HP NetCitizen objects')
mibBuilder.exportSymbols("SEMI-MIB", hpHttpMgDefaultURL=hpHttpMgDefaultURL, hpHttpMgBasicNetCitizenTrapGroup=hpHttpMgBasicNetCitizenTrapGroup, hpHttpMgEntityNetInfoRelationshipType=hpHttpMgEntityNetInfoRelationshipType, hpHttpMgEntityNetInfoURLLabel=hpHttpMgEntityNetInfoURLLabel, hpHttpMgPhone=hpHttpMgPhone, PYSNMP_MODULE_ID=hpHttpMgMod, hpHttpMgExtendedNetCitizenGroup=hpHttpMgExtendedNetCitizenGroup, hpHttpMgEntityNetInfoSysObjID=hpHttpMgEntityNetInfoSysObjID, hpHttpMgDeviceTable=hpHttpMgDeviceTable, hpHttpMgDeviceRackId=hpHttpMgDeviceRackId, hpHttpMgMod=hpHttpMgMod, hpHttpMgObjects=hpHttpMgObjects, hpHttpMgSerialNumber=hpHttpMgSerialNumber, hpHttpMgDeviceProductCaption=hpHttpMgDeviceProductCaption, hpHttpMgExtentedNetCitizenCompliance=hpHttpMgExtentedNetCitizenCompliance, hpHttpMgAssetNumber=hpHttpMgAssetNumber, hpHttpMgWarningHealthTrap=hpHttpMgWarningHealthTrap, Utf8String=Utf8String, hpHttpMgEntityRelationshipGroup=hpHttpMgEntityRelationshipGroup, hpHttpMgDefaultGroup=hpHttpMgDefaultGroup, nm=nm, hpHttpMgEnhancedNetCitizenCompliance=hpHttpMgEnhancedNetCitizenCompliance, hpHttpMgOKHealthTrap=hpHttpMgOKHealthTrap, hpHttpMgEntityNetInfoIPAddress=hpHttpMgEntityNetInfoIPAddress, hpHttpMgDeviceSysObjID=hpHttpMgDeviceSysObjID, hpHttpMgDeviceInfo=hpHttpMgDeviceInfo, hpHttpMgManufacturer=hpHttpMgManufacturer, hpHttpMgEnhancedNetCitizenTrapGroup=hpHttpMgEnhancedNetCitizenTrapGroup, hp=hp, hpHttpMgDeviceSpecificEventCode=hpHttpMgDeviceSpecificEventCode, hpHttpMgCompliances=hpHttpMgCompliances, hpHttpMgDeviceROMVersion=hpHttpMgDeviceROMVersion, hpHttpMgDeviceSpecificFRU=hpHttpMgDeviceSpecificFRU, hpHttpMgDeviceRelationshipType=hpHttpMgDeviceRelationshipType, hpHttpMgEnhancedNetCitizenGroup=hpHttpMgEnhancedNetCitizenGroup, hpHttpMgDeviceEntry=hpHttpMgDeviceEntry, hpHttpMgExtendedNetCitizenTrapGroup=hpHttpMgExtendedNetCitizenTrapGroup, hpHttpMgNetCitizen=hpHttpMgNetCitizen, hpHttpMgTraps=hpHttpMgTraps, hpHttpMgMgmtSrvrURL=hpHttpMgMgmtSrvrURL, hpHttpMgDeviceAssetNumber=hpHttpMgDeviceAssetNumber, hpHttpMgCluster=hpHttpMgCluster, hpHttpMgClusterGroup=hpHttpMgClusterGroup, hpHttpMgNonRecoverableHealthTrap=hpHttpMgNonRecoverableHealthTrap, hpHttpMgDeviceContactPhone=hpHttpMgDeviceContactPhone, hpHttpMgID=hpHttpMgID, hpHttpMgMinCompliance=hpHttpMgMinCompliance, hpHttpMgGroups=hpHttpMgGroups, hpHttpMgShutdown=hpHttpMgShutdown, hpHttpMgDeviceManufacturer=hpHttpMgDeviceManufacturer, hpHttpMgDeviceSpecificGroup=hpHttpMgDeviceSpecificGroup, hpHttpMgDeviceContactPerson=hpHttpMgDeviceContactPerson, hpHttpMgDeviceAddedTrap=hpHttpMgDeviceAddedTrap, hpHttpMgVersion=hpHttpMgVersion, hpHttpMgDeviceGlobalUniqueID=hpHttpMgDeviceGlobalUniqueID, hpHttpMgDeviceHWVersion=hpHttpMgDeviceHWVersion, hpHttpMgEntityNetInfo=hpHttpMgEntityNetInfo, hpHttpMgHealth=hpHttpMgHealth, hpHttpMgCriticalHealthTrap=hpHttpMgCriticalHealthTrap, hpHttpMgProduct=hpHttpMgProduct, hpHttpMgEntityNetInfoIndex=hpHttpMgEntityNetInfoIndex, hpHttpMgDeviceHealth=hpHttpMgDeviceHealth, hpHttpMgExtentedNetCitizenCompliance2=hpHttpMgExtentedNetCitizenCompliance2, hpHttpMgDeviceContactPagerNumber=hpHttpMgDeviceContactPagerNumber, hpHttpMgHWVersion=hpHttpMgHWVersion, hpHttpMgExtentedNetCitizenCompliance1=hpHttpMgExtentedNetCitizenCompliance1, hpHttpMgDeviceSerialNumber=hpHttpMgDeviceSerialNumber, hpHttpMgHealthTrap=hpHttpMgHealthTrap, hpHttpMgDeviceLocation=hpHttpMgDeviceLocation, hpHttpMgDeviceContactEmail=hpHttpMgDeviceContactEmail, hpHttpMgBasicNetCitizenGroup=hpHttpMgBasicNetCitizenGroup, hpHttpMgBasicNetCitizenCompliance=hpHttpMgBasicNetCitizenCompliance, hpHttpMgDeviceRemovedTrap=hpHttpMgDeviceRemovedTrap, hpHttpMgEntityNetInfoUniqueID=hpHttpMgEntityNetInfoUniqueID, hpHttpMgDeviceIndex=hpHttpMgDeviceIndex, hpHttpMgDeviceManagementURLLabel=hpHttpMgDeviceManagementURLLabel, hpHttpMgDeviceVersion=hpHttpMgDeviceVersion, hpHttpMgClusterName=hpHttpMgClusterName, hpHttpMgDeviceRackPosition=hpHttpMgDeviceRackPosition, hpHttpMgROMVersion=hpHttpMgROMVersion, hpHttpMgEntityNetInfoURL=hpHttpMgEntityNetInfoURL, hpHttpMgDeviceManagementURL=hpHttpMgDeviceManagementURL, hpHttpMgEntityNetInfoTable=hpHttpMgEntityNetInfoTable, hpHttpMgUnknownHealthTrap=hpHttpMgUnknownHealthTrap, hpWebMgmt=hpWebMgmt, hpHttpMgDefaults=hpHttpMgDefaults, hpHttpMgEntityNetInfoEntry=hpHttpMgEntityNetInfoEntry, hpHttpMgDeviceProductName=hpHttpMgDeviceProductName)
