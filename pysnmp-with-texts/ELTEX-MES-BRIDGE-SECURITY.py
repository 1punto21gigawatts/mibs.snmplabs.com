#
# PySNMP MIB module ELTEX-MES-BRIDGE-SECURITY (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-BRIDGE-SECURITY
# Produced by pysmi-0.3.4 at Wed May  1 13:00:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
eltMesBridgeSecurity, eltMes = mibBuilder.importSymbols("ELTEX-MES", "eltMesBridgeSecurity", "eltMes")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
PortList, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanId")
rlIpArpInspectEnableVlanEntry, = mibBuilder.importSymbols("RADLAN-BRIDGE-SECURITY", "rlIpArpInspectEnableVlanEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, ObjectIdentity, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, MibIdentifier, Counter32, Integer32, NotificationType, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "ObjectIdentity", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "MibIdentifier", "Counter32", "Integer32", "NotificationType", "Counter64", "Unsigned32")
TruthValue, MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
eltMesIpDhcpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1))
eltMesPppoeIa = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6))
eltMesIpv6DhcpGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2))
eltMesIpv6RaGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3))
eltMesIpDhcpSnoopNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 0))
eltMesIpArpInspect = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7))
class EltCircuitIdType(DisplayString):
    description = 'PPPoE Intermediate Agent curcuit ID type.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 63)

class EltRemoteIdType(DisplayString):
    description = 'PPPoE Intermediate Agent remote ID type.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 63)

class EltOpt82CombinationType(TextualConvention, Integer32):
    description = 'Specifies circuit id suboptions that will be inserted to a option 82.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("sp", 1), ("sv", 2), ("pv", 3), ("spv", 4), ("bin", 5))

class EltOpt82DelimiterType(TextualConvention, Integer32):
    description = 'Specifies circuit id suboptions that will be inserted to a option 82.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("tr101", 1), ("dot", 2), ("comma", 3), ("semicolon", 4), ("hash", 5), ("slash", 6), ("space", 7))

class EltOpt82SuboptionType(TextualConvention, Integer32):
    description = 'Specifies global format of option 82 suboptions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tr101", 1), ("custom", 2))

class EltDHCPSnoopRateLimitType(TextualConvention, Integer32):
    description = 'DHCP Snooping limit rate type. 0 means rate limit is disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2048)

eltIpDhcpOpt82AccessNodeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82AccessNodeIdentifier.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82AccessNodeIdentifier.setDescription('Specifies an access node identifier used by PPPoE IA.')
eltIpDhcpOpt82CircuitIdSuboptionsCombination = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 15), EltOpt82CombinationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82CircuitIdSuboptionsCombination.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82CircuitIdSuboptionsCombination.setDescription('Specifies circuit id suboptions that will be inserted to a PPPoED client packet.')
eltIpDhcpOpt82CircuitIdSuboptionsDelimeter = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 16), EltOpt82DelimiterType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82CircuitIdSuboptionsDelimeter.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82CircuitIdSuboptionsDelimeter.setDescription('Specifies a char symbol that will delimit circuit id suboptions.')
eltIpDhcpOpt82PortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17), )
if mibBuilder.loadTexts: eltIpDhcpOpt82PortTable.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82PortTable.setDescription('A DHCP interface configuration table.')
eltIpDhcpOpt82SuboptionType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 18), EltOpt82SuboptionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82SuboptionType.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82SuboptionType.setDescription('Specifies global format of option 82 suboptions.')
eltIpDhcpOpt82PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltIpDhcpOpt82PortEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82PortEntry.setDescription('A DHCP interface configuration entry.')
eltIpDhcpOpt82PortCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1, 2), EltCircuitIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82PortCircuitId.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82PortCircuitId.setDescription('A DHCP interface entry curcuit id')
eltIpDhcpOpt82PortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1, 3), EltRemoteIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82PortRemoteId.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82PortRemoteId.setDescription('A DHCP interface entry remote id')
eltIpDhcpOpt82PortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 17, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpDhcpOpt82PortRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82PortRowStatus.setDescription('Session row status.')
eltIpDhcpOpt82RemoteIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpOpt82RemoteIdentifier.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpOpt82RemoteIdentifier.setDescription('Specifies global Remote Identifier suboption for Option 82.')
eltIpDhcpSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20), )
if mibBuilder.loadTexts: eltIpDhcpSnoopPortTable.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpSnoopPortTable.setDescription('A DHCP Snooping Rate Limiting configuration table on L2 interfaces.')
eltIpDhcpSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltIpDhcpSnoopPortEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpSnoopPortEntry.setDescription('A DHCP interface configuration entry.')
eltIpDhcpSnoopPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20, 1, 2), EltDHCPSnoopRateLimitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpDhcpSnoopPortRateLimit.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpSnoopPortRateLimit.setDescription('A DHCP Snooping Limit Rate.')
eltIpDhcpSnoopPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 20, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpDhcpSnoopPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpSnoopPortRowStatus.setDescription('Session row status.')
eltIpDhcpSnoopRateLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 1, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("ELTEX-MES-BRIDGE-SECURITY", "eltIpDhcpSnoopPortRateLimit"))
if mibBuilder.loadTexts: eltIpDhcpSnoopRateLimitTrap.setStatus('current')
if mibBuilder.loadTexts: eltIpDhcpSnoopRateLimitTrap.setDescription('A eltIpDhcpSnoopRateLimitTrap is generated when interface reached the rate limit.')
eltPppoeIaEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaEnable.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaEnable.setDescription('Specifies a system PPPoE Intermediate Agent enable state.')
eltPppoeIaAccessNodeIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaAccessNodeIdentifier.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaAccessNodeIdentifier.setDescription('Specifies an access node identifier used by PPPoE IA.')
eltPppoeIaCircuitIdSuboptionsCombination = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 3), EltOpt82CombinationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaCircuitIdSuboptionsCombination.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaCircuitIdSuboptionsCombination.setDescription('Specifies circuit id suboptions that will be inserted to a PPPoED client packet.')
eltPppoeIaCircuitIdSuboptionsDelimeter = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 4), EltOpt82DelimiterType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaCircuitIdSuboptionsDelimeter.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaCircuitIdSuboptionsDelimeter.setDescription('Specifies a char symbol that will delimit circuit id suboptions.')
eltPppoeIaGenericErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaGenericErrorMessage.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaGenericErrorMessage.setDescription('Specifies a generic error message sent to client if packet is too large.')
eltPppoeIaPortTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6), )
if mibBuilder.loadTexts: eltPppoeIaPortTable.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortTable.setDescription('A PPPoE Intermediate Agent interface table.')
eltPppoeIaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltPppoeIaPortEntry.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortEntry.setDescription('A PPPoE Intermediate Agent interface entry.')
eltPppoeIaPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortEnabled.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortEnabled.setDescription('A PPPoE Intermediate Agent interface entry enabled state.')
eltPppoeIaPortTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortTrusted.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortTrusted.setDescription('A PPPoE Intermediate Agent interface entry trusted state.')
eltPppoeIaPortCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 4), EltCircuitIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortCircuitId.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortCircuitId.setDescription('A PPPoE Intermediate Agent interface entry curcuit id.')
eltPppoeIaPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 5), EltRemoteIdType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortRemoteId.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortRemoteId.setDescription('A PPPoE Intermediate Agent interface entry remote id.')
eltPppoeIaPortStripVendorTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortStripVendorTag.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStripVendorTag.setDescription('A PPPoE Intermediate Agent interface entry enable stripping vendor tag.')
eltPppoeIaPortStatsRxPADI = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADI.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADI.setDescription('Total number of received PADI packets.')
eltPppoeIaPortStatsRxPADO = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADO.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADO.setDescription('Total number of received PADO packets.')
eltPppoeIaPortStatsRxPADR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADR.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADR.setDescription('Total number of received PADR packets.')
eltPppoeIaPortStatsRxPADS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADS.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADS.setDescription('Total number of received PADS packets.')
eltPppoeIaPortStatsRxPADT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADT.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsRxPADT.setDescription('Total number of received PADT packets.')
eltPppoeIaPortStatsTxGenError = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsTxGenError.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsTxGenError.setDescription('Total number of transmitted PPPoED generic error messages.')
eltPppoeIaPortStatsDroppedResponseFromUntrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedResponseFromUntrusted.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedResponseFromUntrusted.setDescription('Total number of dropped server PPPoED packets from untrusted ports.')
eltPppoeIaPortStatsDroppedRequestToUntrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedRequestToUntrusted.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedRequestToUntrusted.setDescription('Total number of dropped client PPPoED packets from trusted ports.')
eltPppoeIaPortStatsDroppedMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedMalformed.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsDroppedMalformed.setDescription('Total number of dropped malformed PPPoED packets.')
eltPppoeIaPortStatsClearCountersAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortStatsClearCountersAction.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortStatsClearCountersAction.setDescription('If true, clear (set to zero) all PPPoE Intermediate Agent interface counters.')
eltPppoeIaPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 6, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaPortRowStatus.setDescription('A PPPoE Intermediate Agent interface entry row status.')
eltPppoeIaClearCountersAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPppoeIaClearCountersAction.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaClearCountersAction.setDescription('If true, clear (set to zero) counters on all ports.')
class EltPppoeIaSessionIDType(TextualConvention, Integer32):
    description = 'PPPoE Intermediate Agent session ID type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

eltPppoeIaSessionTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8), )
if mibBuilder.loadTexts: eltPppoeIaSessionTable.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionTable.setDescription('A PPPoE Intermediate Agent sessions table.')
eltPppoeIaSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltPppoeIaSessionVLANTag"), (0, "ELTEX-MES-BRIDGE-SECURITY", "eltPppoeIaSessionMACAddress"))
if mibBuilder.loadTexts: eltPppoeIaSessionEntry.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionEntry.setDescription('A PPPoE Intermediate Agent session entry.')
eltPppoeIaSessionVLANTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionVLANTag.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionVLANTag.setDescription('Session VLAN ID.')
eltPppoeIaSessionMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionMACAddress.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionMACAddress.setDescription('Session MAC address.')
eltPppoeIaSessionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionPort.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionPort.setDescription('Session interface index.')
eltPppoeIaSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 4), EltPppoeIaSessionIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionID.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionID.setDescription('Session ID.')
eltPppoeIaSessionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionTimer.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionTimer.setDescription('Session timer.')
eltPppoeIaSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 6, 8, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPppoeIaSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltPppoeIaSessionRowStatus.setDescription('Session row status.')
eltIpv6DhcpGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnable.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnable.setDescription('Specifies a system DHCPv6 Guard enable state.')
eltIpv6DhcpGuardEnableTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2), )
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableTable.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableTable.setDescription('An Ip DHCPv6 Guard enabled VLAN table.')
eltIpv6DhcpGuardEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6DhcpGuardEnableVlanTag"))
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableEntry.setDescription('An Ip Dhcp Snooping enabled VLAN entry.')
eltIpv6DhcpGuardEnableVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableVlanTag.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableVlanTag.setDescription('A DHCP Snoop entry vlan tag.')
eltIpv6DhcpGuardEnableVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardEnableVlanRowStatus.setDescription('Entry status. A valid status is CreateandGo and Delete.')
class EltIpv6DhcpGuardRoleType(TextualConvention, Integer32):
    description = 'Specifies circuit id suboptions that will be inserted to a option 82.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("client", 1), ("server", 2))

eltIpv6DhcpGuardTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3), )
if mibBuilder.loadTexts: eltIpv6DhcpGuardTable.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardTable.setDescription('An Ip DHCPv6 Guard enabled VLAN table.')
eltIpv6DhcpGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6DhcpGuardIfIndex"))
if mibBuilder.loadTexts: eltIpv6DhcpGuardEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardEntry.setDescription('An Ip Dhcp Snooping enabled VLAN entry.')
eltIpv6DhcpGuardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardIfIndex.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardIfIndex.setDescription('Interface index.')
eltIpv6DhcpGuardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 2), EltIpv6DhcpGuardRoleType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardRole.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardRole.setDescription('Set port role of client/server.')
eltIpv6DhcpGuardAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardAcl.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardAcl.setDescription('Set ipv6 ACL index.')
eltIpv6DhcpGuardPrefList = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardPrefList.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardPrefList.setDescription('Set ipv6 prefix list name.')
eltIpv6DhcpGuardTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardTrusted.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardTrusted.setDescription('Port is trusted.')
eltIpv6DhcpGuardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 2, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6DhcpGuardRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltIpv6DhcpGuardRowStatus.setDescription('Entry status. A valid status is CreateandGo and Delete.')
eltIpv6RaGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardEnable.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardEnable.setDescription('Specifies a system IPv RA Guard enable state.')
eltIpv6RaGuardEnableTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2), )
if mibBuilder.loadTexts: eltIpv6RaGuardEnableTable.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardEnableTable.setDescription('An Ip DHCPv6 Guard enabled VLAN table.')
eltIpv6RaGuardEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6RaGuardEnableVlanTag"))
if mibBuilder.loadTexts: eltIpv6RaGuardEnableEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardEnableEntry.setDescription('An Ip Dhcp Snooping enabled VLAN entry.')
eltIpv6RaGuardEnableVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: eltIpv6RaGuardEnableVlanTag.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardEnableVlanTag.setDescription('A DHCP Snoop entry vlan tag.')
eltIpv6RaGuardEnableVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardEnableVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardEnableVlanRowStatus.setDescription('Entry status. A valid status is CreateandGo and Delete.')
class EltIpv6RaGuardRoleType(TextualConvention, Integer32):
    description = 'Type router/host'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("router", 1), ("host", 2))

eltIpv6RaGuardTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3), )
if mibBuilder.loadTexts: eltIpv6RaGuardTable.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardTable.setDescription('An Ip ND RA Guard table.')
eltIpv6RaGuardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpv6RaGuardIfIndex"))
if mibBuilder.loadTexts: eltIpv6RaGuardEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardEntry.setDescription('An Ip ND RA Guard table entry.')
eltIpv6RaGuardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardIfIndex.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardIfIndex.setDescription('Interface index.')
eltIpv6RaGuardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 2), EltIpv6RaGuardRoleType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardRole.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardRole.setDescription('Set port role of router/host.')
eltIpv6RaGuardAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardAcl.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardAcl.setDescription('Set ipv6 ACL index.')
eltIpv6RaGuardPrefList = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardPrefList.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardPrefList.setDescription('Set ipv6 prefix list name.')
eltIpv6RaGuardTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardTrusted.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardTrusted.setDescription('Port is trusted.')
eltIpv6RaGuardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 3, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RaGuardRowStatus.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RaGuardRowStatus.setDescription('Entry status. A valid status is CreateandGo and Delete.')
eltIpv6RelayAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpv6RelayAgentEnable.setStatus('current')
if mibBuilder.loadTexts: eltIpv6RelayAgentEnable.setDescription('Lightweight DHCPv6 Relay Agent (rfc 6221)')
eltIpArpInspectPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1), )
if mibBuilder.loadTexts: eltIpArpInspectPortStatTable.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectPortStatTable.setDescription('An Ip Arp Inspection port table.')
eltIpArpInspectPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1), ).setIndexNames((0, "ELTEX-MES-BRIDGE-SECURITY", "eltIpArpInspectPortIndex"))
if mibBuilder.loadTexts: eltIpArpInspectPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectPortStatEntry.setDescription('An Ip Arp Inspection port entry.')
eltIpArpInspectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: eltIpArpInspectPortIndex.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectPortIndex.setDescription('An Ip ARP Inspection entry interface index.')
eltIpArpInspectPortNumOfArpForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpForwarded.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpForwarded.setDescription('Total number of forwarded ARP packets that were validated by ARP inspection')
eltIpArpInspectPortNumOfArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpDropped.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpDropped.setDescription('Number of dropped ARP packets that were not validated by ARP inspection (mismatch , not-found and dropped for any reason)')
eltIpArpInspectPortNumOfArpMismatched = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpMismatched.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectPortNumOfArpMismatched.setDescription('Number of dropped ARP packets that were not validated by ARP inspection and inconsistency was found for IP and MAC (mismatch)')
eltIpArpInspectLastDropIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectLastDropIP.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectLastDropIP.setDescription('Sender IP Address of last dropped ARP packet.')
eltIpArpInspectLastDropMac = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectLastDropMac.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectLastDropMac.setDescription('Sender MAC Address of last dropped ARP packet.')
eltIpArpInspectLastDropTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectLastDropTime.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectLastDropTime.setDescription('Time of last dropped ARP packet (system uptime in seconds).')
eltIpArpInspectEnableVlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2), )
if mibBuilder.loadTexts: eltIpArpInspectEnableVlanTable.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectEnableVlanTable.setDescription(' Augment for Ip ARP Inspection enabled VLAN table.')
eltIpArpInspectEnableVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1), )
rlIpArpInspectEnableVlanEntry.registerAugmentions(("ELTEX-MES-BRIDGE-SECURITY", "eltIpArpInspectEnableVlanEntry"))
eltIpArpInspectEnableVlanEntry.setIndexNames(*rlIpArpInspectEnableVlanEntry.getIndexNames())
if mibBuilder.loadTexts: eltIpArpInspectEnableVlanEntry.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectEnableVlanEntry.setDescription(' Augment for Ip ARP Inspection enabled VLAN entry.')
eltIpArpInspectVlanLastDropIP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropIP.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropIP.setDescription('Sender IP Address of last dropped ARP packet.')
eltIpArpInspectVlanLastDropMac = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropMac.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropMac.setDescription('Sender MAC Address of last dropped ARP packet.')
eltIpArpInspectVlanLastDropTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropTime.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectVlanLastDropTime.setDescription('Time of last dropped ARP packet (system uptime in seconds).')
eltIpArpInspectPortClearCountersAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 112, 7, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltIpArpInspectPortClearCountersAction.setStatus('current')
if mibBuilder.loadTexts: eltIpArpInspectPortClearCountersAction.setDescription('Clear for ports in PortSet (set to zero) Arp Inspection counters: eltIpArpInspectPortNumOfArpForwarded , eltIpArpInspectPortNumOfArpDropped and eltIpArpInspectPortNumOfArpMismatched')
mibBuilder.exportSymbols("ELTEX-MES-BRIDGE-SECURITY", eltIpArpInspectPortNumOfArpForwarded=eltIpArpInspectPortNumOfArpForwarded, eltPppoeIaSessionID=eltPppoeIaSessionID, EltOpt82DelimiterType=EltOpt82DelimiterType, eltIpv6DhcpGuardRole=eltIpv6DhcpGuardRole, eltPppoeIaPortStatsClearCountersAction=eltPppoeIaPortStatsClearCountersAction, eltIpArpInspectEnableVlanTable=eltIpArpInspectEnableVlanTable, eltMesPppoeIa=eltMesPppoeIa, eltPppoeIaPortStatsRxPADT=eltPppoeIaPortStatsRxPADT, eltPppoeIaCircuitIdSuboptionsCombination=eltPppoeIaCircuitIdSuboptionsCombination, eltIpArpInspectVlanLastDropIP=eltIpArpInspectVlanLastDropIP, eltIpv6DhcpGuardEnableTable=eltIpv6DhcpGuardEnableTable, eltIpArpInspectVlanLastDropTime=eltIpArpInspectVlanLastDropTime, eltPppoeIaPortEntry=eltPppoeIaPortEntry, eltPppoeIaGenericErrorMessage=eltPppoeIaGenericErrorMessage, eltIpDhcpOpt82SuboptionType=eltIpDhcpOpt82SuboptionType, eltIpDhcpSnoopPortRateLimit=eltIpDhcpSnoopPortRateLimit, eltPppoeIaPortStatsDroppedResponseFromUntrusted=eltPppoeIaPortStatsDroppedResponseFromUntrusted, EltOpt82SuboptionType=EltOpt82SuboptionType, eltPppoeIaPortStripVendorTag=eltPppoeIaPortStripVendorTag, eltPppoeIaCircuitIdSuboptionsDelimeter=eltPppoeIaCircuitIdSuboptionsDelimeter, eltIpArpInspectEnableVlanEntry=eltIpArpInspectEnableVlanEntry, eltPppoeIaAccessNodeIdentifier=eltPppoeIaAccessNodeIdentifier, eltIpArpInspectPortStatTable=eltIpArpInspectPortStatTable, eltIpv6RaGuardRowStatus=eltIpv6RaGuardRowStatus, eltIpDhcpOpt82PortCircuitId=eltIpDhcpOpt82PortCircuitId, eltPppoeIaEnable=eltPppoeIaEnable, eltIpDhcpOpt82PortEntry=eltIpDhcpOpt82PortEntry, eltPppoeIaSessionEntry=eltPppoeIaSessionEntry, eltPppoeIaPortEnabled=eltPppoeIaPortEnabled, eltPppoeIaSessionPort=eltPppoeIaSessionPort, eltIpDhcpOpt82PortRowStatus=eltIpDhcpOpt82PortRowStatus, eltPppoeIaSessionRowStatus=eltPppoeIaSessionRowStatus, eltPppoeIaSessionTable=eltPppoeIaSessionTable, eltIpv6RaGuardIfIndex=eltIpv6RaGuardIfIndex, EltDHCPSnoopRateLimitType=EltDHCPSnoopRateLimitType, eltIpv6DhcpGuardEnableVlanTag=eltIpv6DhcpGuardEnableVlanTag, eltIpv6RaGuardPrefList=eltIpv6RaGuardPrefList, EltRemoteIdType=EltRemoteIdType, eltPppoeIaPortStatsRxPADR=eltPppoeIaPortStatsRxPADR, eltPppoeIaPortRowStatus=eltPppoeIaPortRowStatus, eltIpArpInspectPortStatEntry=eltIpArpInspectPortStatEntry, eltIpv6RelayAgentEnable=eltIpv6RelayAgentEnable, eltIpv6RaGuardEntry=eltIpv6RaGuardEntry, eltPppoeIaSessionTimer=eltPppoeIaSessionTimer, eltIpArpInspectVlanLastDropMac=eltIpArpInspectVlanLastDropMac, eltIpv6RaGuardTrusted=eltIpv6RaGuardTrusted, eltIpv6RaGuardEnableEntry=eltIpv6RaGuardEnableEntry, eltIpDhcpSnoopRateLimitTrap=eltIpDhcpSnoopRateLimitTrap, eltMesIpArpInspect=eltMesIpArpInspect, eltPppoeIaPortStatsTxGenError=eltPppoeIaPortStatsTxGenError, EltCircuitIdType=EltCircuitIdType, eltIpv6DhcpGuardEntry=eltIpv6DhcpGuardEntry, eltIpArpInspectLastDropMac=eltIpArpInspectLastDropMac, eltIpArpInspectPortIndex=eltIpArpInspectPortIndex, eltIpDhcpOpt82PortRemoteId=eltIpDhcpOpt82PortRemoteId, eltPppoeIaPortTable=eltPppoeIaPortTable, eltIpv6DhcpGuardRowStatus=eltIpv6DhcpGuardRowStatus, eltIpv6DhcpGuardIfIndex=eltIpv6DhcpGuardIfIndex, eltIpv6DhcpGuardPrefList=eltIpv6DhcpGuardPrefList, eltIpv6RaGuardEnableTable=eltIpv6RaGuardEnableTable, eltMesIpv6RaGuard=eltMesIpv6RaGuard, EltPppoeIaSessionIDType=EltPppoeIaSessionIDType, EltIpv6RaGuardRoleType=EltIpv6RaGuardRoleType, eltIpArpInspectPortNumOfArpDropped=eltIpArpInspectPortNumOfArpDropped, eltIpDhcpSnoopPortEntry=eltIpDhcpSnoopPortEntry, eltPppoeIaPortStatsRxPADS=eltPppoeIaPortStatsRxPADS, eltPppoeIaPortStatsDroppedMalformed=eltPppoeIaPortStatsDroppedMalformed, eltIpv6DhcpGuardTable=eltIpv6DhcpGuardTable, eltPppoeIaPortCircuitId=eltPppoeIaPortCircuitId, eltIpv6RaGuardEnableVlanTag=eltIpv6RaGuardEnableVlanTag, eltMesIpDhcpSnoop=eltMesIpDhcpSnoop, eltIpDhcpSnoopPortRowStatus=eltIpDhcpSnoopPortRowStatus, eltIpDhcpOpt82RemoteIdentifier=eltIpDhcpOpt82RemoteIdentifier, eltMesIpDhcpSnoopNotif=eltMesIpDhcpSnoopNotif, eltIpv6DhcpGuardTrusted=eltIpv6DhcpGuardTrusted, eltIpv6DhcpGuardEnable=eltIpv6DhcpGuardEnable, eltIpv6RaGuardRole=eltIpv6RaGuardRole, eltIpArpInspectPortNumOfArpMismatched=eltIpArpInspectPortNumOfArpMismatched, EltOpt82CombinationType=EltOpt82CombinationType, eltIpDhcpSnoopPortTable=eltIpDhcpSnoopPortTable, eltMesIpv6DhcpGuard=eltMesIpv6DhcpGuard, eltPppoeIaPortStatsRxPADO=eltPppoeIaPortStatsRxPADO, eltPppoeIaSessionVLANTag=eltPppoeIaSessionVLANTag, eltIpv6RaGuardTable=eltIpv6RaGuardTable, eltIpDhcpOpt82AccessNodeIdentifier=eltIpDhcpOpt82AccessNodeIdentifier, eltIpv6DhcpGuardEnableVlanRowStatus=eltIpv6DhcpGuardEnableVlanRowStatus, eltPppoeIaSessionMACAddress=eltPppoeIaSessionMACAddress, eltIpv6RaGuardEnableVlanRowStatus=eltIpv6RaGuardEnableVlanRowStatus, eltIpDhcpOpt82CircuitIdSuboptionsDelimeter=eltIpDhcpOpt82CircuitIdSuboptionsDelimeter, eltIpArpInspectPortClearCountersAction=eltIpArpInspectPortClearCountersAction, eltIpv6RaGuardAcl=eltIpv6RaGuardAcl, eltIpv6DhcpGuardEnableEntry=eltIpv6DhcpGuardEnableEntry, eltPppoeIaClearCountersAction=eltPppoeIaClearCountersAction, eltPppoeIaPortRemoteId=eltPppoeIaPortRemoteId, eltIpArpInspectLastDropIP=eltIpArpInspectLastDropIP, eltPppoeIaPortStatsDroppedRequestToUntrusted=eltPppoeIaPortStatsDroppedRequestToUntrusted, eltIpv6DhcpGuardAcl=eltIpv6DhcpGuardAcl, eltIpv6RaGuardEnable=eltIpv6RaGuardEnable, eltIpDhcpOpt82PortTable=eltIpDhcpOpt82PortTable, eltPppoeIaPortStatsRxPADI=eltPppoeIaPortStatsRxPADI, eltPppoeIaPortTrusted=eltPppoeIaPortTrusted, eltIpArpInspectLastDropTime=eltIpArpInspectLastDropTime, eltIpDhcpOpt82CircuitIdSuboptionsCombination=eltIpDhcpOpt82CircuitIdSuboptionsCombination, EltIpv6DhcpGuardRoleType=EltIpv6DhcpGuardRoleType)
