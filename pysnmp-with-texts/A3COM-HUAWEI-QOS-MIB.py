#
# PySNMP MIB module A3COM-HUAWEI-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
hwInternetProtocol, vrpProtocol, huawei, hwLocal = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "hwInternetProtocol", "vrpProtocol", "huawei", "hwLocal")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Unsigned32, Gauge32, IpAddress, Counter64, Counter32, MibIdentifier, ModuleIdentity, Integer32, TimeTicks, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Unsigned32", "Gauge32", "IpAddress", "Counter64", "Counter32", "MibIdentifier", "ModuleIdentity", "Integer32", "TimeTicks", "iso", "Bits")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hwIfQoSMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2))
if mibBuilder.loadTexts: hwIfQoSMib.setLastUpdated('200410110000Z')
if mibBuilder.loadTexts: hwIfQoSMib.setOrganization('Huawei Technologies Co. Ltd.')
if mibBuilder.loadTexts: hwIfQoSMib.setContactInfo(' R&D Beijing, Huawei Technologies Co. Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwIfQoSMib.setDescription(' ')
qosFIFOTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: qosFIFOTable.setStatus('current')
if mibBuilder.loadTexts: qosFIFOTable.setDescription('FIFO(First In First Out) queuing table')
qosFIFOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosFIFOIfIndex"))
if mibBuilder.loadTexts: qosFIFOEntry.setStatus('current')
if mibBuilder.loadTexts: qosFIFOEntry.setDescription('FIFO configuration and running information Command:qos fifo queue-length')
qosFIFOIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qosFIFOIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosFIFOIfIndex.setDescription('The index of interface.')
qosFIFOIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFIFOIfName.setStatus('current')
if mibBuilder.loadTexts: qosFIFOIfName.setDescription('The description of interface.')
qosFIFOMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosFIFOMaxQueueLen.setStatus('current')
if mibBuilder.loadTexts: qosFIFOMaxQueueLen.setDescription('The maximum length of fifo queue.')
qosFIFOCurQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFIFOCurQueueLen.setStatus('current')
if mibBuilder.loadTexts: qosFIFOCurQueueLen.setDescription('The current length of queue.')
qosFIFODiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFIFODiscardPkt.setStatus('current')
if mibBuilder.loadTexts: qosFIFODiscardPkt.setDescription('The discarded packet number of queue.')
qosUndoFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosFIFO", 0), ("qosNoFIFO", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoFIFO.setStatus('current')
if mibBuilder.loadTexts: qosUndoFIFO.setDescription(' 0: Only for get. 1: Set default value of the maximum length of fifo queue. ')
qosPqlDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: qosPqlDefaultTable.setStatus('current')
if mibBuilder.loadTexts: qosPqlDefaultTable.setDescription('PQL(Priority Queue List) default-queue table')
qosPqlDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosPqlDefaultListNum"))
if mibBuilder.loadTexts: qosPqlDefaultEntry.setStatus('current')
if mibBuilder.loadTexts: qosPqlDefaultEntry.setDescription('PQL default-queue configuration information.')
qosPqlDefaultListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: qosPqlDefaultListNum.setStatus('current')
if mibBuilder.loadTexts: qosPqlDefaultListNum.setDescription('The index of table, which is the PQL number.')
qosPqlDefaultQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlDefaultQueueType.setStatus('current')
if mibBuilder.loadTexts: qosPqlDefaultQueueType.setDescription('The type of default priority queue, the default value is normal.')
qosUndoPqlDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlDefault", 0), ("qosNoPqlDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlDefault.setStatus('current')
if mibBuilder.loadTexts: qosUndoPqlDefault.setDescription(' 0: Only for get. 1: Set default value of the defualt priority queue. ')
qosPqlQueueLenTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 3), )
if mibBuilder.loadTexts: qosPqlQueueLenTable.setStatus('current')
if mibBuilder.loadTexts: qosPqlQueueLenTable.setDescription('PQL(Priority Queue List) queue-length table')
qosPqlQueueLenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosPqlQueLenListNum"), (0, "A3COM-HUAWEI-QOS-MIB", "qosPqlQueLenQueueType"))
if mibBuilder.loadTexts: qosPqlQueueLenEntry.setStatus('current')
if mibBuilder.loadTexts: qosPqlQueueLenEntry.setDescription('PQL queue-length configuration information.')
qosPqlQueLenListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: qosPqlQueLenListNum.setStatus('current')
if mibBuilder.loadTexts: qosPqlQueLenListNum.setDescription('The index of table, which is the PQL number.')
qosPqlQueLenQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3))))
if mibBuilder.loadTexts: qosPqlQueLenQueueType.setStatus('current')
if mibBuilder.loadTexts: qosPqlQueLenQueueType.setDescription('The index of table, which is the type of priority queue.')
qosPqlQueLenValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlQueLenValue.setStatus('current')
if mibBuilder.loadTexts: qosPqlQueLenValue.setDescription('The maximum length of specified queue.')
qosUndoPqlQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlQueLen", 0), ("qosNoPqlQueLen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlQueLen.setStatus('current')
if mibBuilder.loadTexts: qosUndoPqlQueLen.setDescription(' 0: Only for get. 1: Set default value of the maximum length of specified queue. ')
qosPqlIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 4), )
if mibBuilder.loadTexts: qosPqlIfTable.setStatus('current')
if mibBuilder.loadTexts: qosPqlIfTable.setDescription('PQL(Priority Queue List) inbound-interface table')
qosPqlIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosPqlIfListNum"), (0, "A3COM-HUAWEI-QOS-MIB", "qosPqlIfIndex"))
if mibBuilder.loadTexts: qosPqlIfEntry.setStatus('current')
if mibBuilder.loadTexts: qosPqlIfEntry.setDescription('PQL inbound-interface configuration information.')
qosPqlIfListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPqlIfListNum.setStatus('current')
if mibBuilder.loadTexts: qosPqlIfListNum.setDescription('The index of table, which is the PQL number.')
qosPqlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: qosPqlIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosPqlIfIndex.setDescription('The index of table, which is the index of interface.')
qosPqlIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlIfName.setStatus('current')
if mibBuilder.loadTexts: qosPqlIfName.setDescription('The description of interface.')
qosPqlIfQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlIfQueueType.setStatus('current')
if mibBuilder.loadTexts: qosPqlIfQueueType.setDescription('The type of priority queue.')
qosUndoPqlIf = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlIF", 0), ("qosNoPqlIF", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlIf.setStatus('current')
if mibBuilder.loadTexts: qosUndoPqlIf.setDescription(' 0: Only for get. 1: delete the corresponding inbound-interface rule of the specified PQL number ')
qosPqlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5), )
if mibBuilder.loadTexts: qosPqlProtocolTable.setStatus('current')
if mibBuilder.loadTexts: qosPqlProtocolTable.setDescription('PQL(Priority Queue List) protocol table')
qosPqlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosPqlProListNum"), (0, "A3COM-HUAWEI-QOS-MIB", "qosPqlProName"), (0, "A3COM-HUAWEI-QOS-MIB", "qosPqlProQueKey"), (0, "A3COM-HUAWEI-QOS-MIB", "qosPqlProQueKeyValue"))
if mibBuilder.loadTexts: qosPqlProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: qosPqlProtocolEntry.setDescription('PQL protocol configuration information.')
qosPqlProListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPqlProListNum.setStatus('current')
if mibBuilder.loadTexts: qosPqlProListNum.setDescription('The index of table, which is the PQL number.')
qosPqlProName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mpls", 2))))
if mibBuilder.loadTexts: qosPqlProName.setStatus('current')
if mibBuilder.loadTexts: qosPqlProName.setDescription('The index of table, which is the protocol name. Only IP supported currently.')
qosPqlProQueKey = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("null", 1), ("fragment", 2), ("acl", 3), ("less-than", 4), ("greater-than", 5), ("tcp", 6), ("udp", 7), ("exp-mask", 8))))
if mibBuilder.loadTexts: qosPqlProQueKey.setStatus('current')
if mibBuilder.loadTexts: qosPqlProQueKey.setDescription('The index of table, which is the key words of traffic-classify rule.')
qosPqlProQueKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: qosPqlProQueKeyValue.setStatus('current')
if mibBuilder.loadTexts: qosPqlProQueKeyValue.setDescription(' The index of table, which is the value of key words. for greater-than,less-than,tcp,udp:0~65535 for acl:2000~3999 for NULL and fragment: null for exp-mask: 1~255')
qosPqlProQueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlProQueType.setStatus('current')
if mibBuilder.loadTexts: qosPqlProQueType.setDescription('The type of priority queue. ')
qosUndoPqlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlProtocol", 0), ("qosNoPqlProtocol", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlProtocol.setStatus('current')
if mibBuilder.loadTexts: qosUndoPqlProtocol.setDescription(' 0: Only for get. 1: delete the corresponding protocol rule of the specified PQL number ')
qosPQTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6), )
if mibBuilder.loadTexts: qosPQTable.setStatus('current')
if mibBuilder.loadTexts: qosPQTable.setDescription('PQ(Priority Queuing) table')
qosPQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosPQIfIndex"))
if mibBuilder.loadTexts: qosPQEntry.setStatus('current')
if mibBuilder.loadTexts: qosPQEntry.setDescription('PQ configuration and running infomation')
qosPQIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: qosPQIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosPQIfIndex.setDescription('The index of table, which is the index of interface.')
qosPQListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPQListNum.setStatus('current')
if mibBuilder.loadTexts: qosPQListNum.setDescription('The PQL number.')
qosPQIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQIfName.setStatus('current')
if mibBuilder.loadTexts: qosPQIfName.setDescription('The description of the interface.')
qosPQTopPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQTopPkt.setStatus('current')
if mibBuilder.loadTexts: qosPQTopPkt.setDescription('The number of packets in the top priority queue.')
qosPQTopDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQTopDiscard.setStatus('current')
if mibBuilder.loadTexts: qosPQTopDiscard.setDescription('The number of discarded packets in top priority queue.')
qosPQTopMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQTopMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosPQTopMaxQueLen.setDescription('The max length of top priority queue.')
qosPQMiddlePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQMiddlePkt.setStatus('current')
if mibBuilder.loadTexts: qosPQMiddlePkt.setDescription('The number of packets in the middle priority queue.')
qosPQMiddleDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQMiddleDiscard.setStatus('current')
if mibBuilder.loadTexts: qosPQMiddleDiscard.setDescription('The number of discarded packets in middle priority queue.')
qosPQMiddleMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQMiddleMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosPQMiddleMaxQueLen.setDescription('The max length of middle priority queue.')
qosPQNormalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQNormalPkt.setStatus('current')
if mibBuilder.loadTexts: qosPQNormalPkt.setDescription('The number of packets in the normal priority queue.')
qosPQNormalDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQNormalDiscard.setStatus('current')
if mibBuilder.loadTexts: qosPQNormalDiscard.setDescription('The number of discarded packets in normal priority queue.')
qosPQNormalMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQNormalMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosPQNormalMaxQueLen.setDescription('The max length of normal priority queue.')
qosPQBottomPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQBottomPkt.setStatus('current')
if mibBuilder.loadTexts: qosPQBottomPkt.setDescription('The number of packets in the bottom priority queue.')
qosPQBottomDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQBottomDiscard.setStatus('current')
if mibBuilder.loadTexts: qosPQBottomDiscard.setDescription('The number of discarded packets in bottom priority queue.')
qosPQBottomMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQBottomMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosPQBottomMaxQueLen.setDescription('The max length of bottom priority queue.')
qosUndoPQ = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPQ", 0), ("qosNoPQ", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPQ.setStatus('current')
if mibBuilder.loadTexts: qosUndoPQ.setDescription(' 0:Only for get. 1:Set the default queuing on interface: FIFO. ')
qosCqlDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 7), )
if mibBuilder.loadTexts: qosCqlDefaultTable.setStatus('current')
if mibBuilder.loadTexts: qosCqlDefaultTable.setDescription('CQL(Custom Queue List) default-queue table')
qosCqlDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCqlListNum"))
if mibBuilder.loadTexts: qosCqlDefaultEntry.setStatus('current')
if mibBuilder.loadTexts: qosCqlDefaultEntry.setDescription('CQL default-queue configuration information.')
qosCqlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: qosCqlListNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlListNum.setDescription('The index of table, which is the CQL number.')
qosCqlQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlQueueNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlQueueNum.setDescription('The queue number(0~16)')
qosUndoCqlDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlDefault", 0), ("qosNoCqlDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlDefault.setStatus('current')
if mibBuilder.loadTexts: qosUndoCqlDefault.setDescription(' 0: Only for get. 1: Set default value of the defualt custom queue. ')
qosCqlIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 8), )
if mibBuilder.loadTexts: qosCqlIfTable.setStatus('current')
if mibBuilder.loadTexts: qosCqlIfTable.setDescription('CQL(Custom Queue List) inbound-interface table')
qosCqlIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 8, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCqlIfListNum"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCqlIfIndex"))
if mibBuilder.loadTexts: qosCqlIfEntry.setStatus('current')
if mibBuilder.loadTexts: qosCqlIfEntry.setDescription('CQL inbound-interface configuration information.')
qosCqlIfListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: qosCqlIfListNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlIfListNum.setDescription('The index of table, which is the CQL number.')
qosCqlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 8, 1, 2), Integer32())
if mibBuilder.loadTexts: qosCqlIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosCqlIfIndex.setDescription('The index of interface.')
qosCqlIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlIfName.setStatus('current')
if mibBuilder.loadTexts: qosCqlIfName.setDescription('The description of interface.')
qosCqlIfQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlIfQueueNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlIfQueueNum.setDescription('The queue number(0~16)')
qosUndoCqlIf = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlIf", 0), ("qosNoCqlIf", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlIf.setStatus('current')
if mibBuilder.loadTexts: qosUndoCqlIf.setDescription(' 0: Only for get. 1: delete the corresponding inbound-interface rule of the specified CQL number ')
qosCqlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9), )
if mibBuilder.loadTexts: qosCqlProtocolTable.setStatus('current')
if mibBuilder.loadTexts: qosCqlProtocolTable.setDescription('CQL(Custom Queue List) protocol table')
qosCqlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCqlProListNum"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCqlProName"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCqlProQueKey"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCqlProQueKeyValue"))
if mibBuilder.loadTexts: qosCqlProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: qosCqlProtocolEntry.setDescription('CQL protocol configuration information.')
qosCqlProListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: qosCqlProListNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlProListNum.setDescription('The index of table, which is the CQL number.')
qosCqlProName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mpls", 2))))
if mibBuilder.loadTexts: qosCqlProName.setStatus('current')
if mibBuilder.loadTexts: qosCqlProName.setDescription('The index of table, which is the protocol name. Only IP supported currently.')
qosCqlProQueKey = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("null", 1), ("fragment", 2), ("acl", 3), ("less-than", 4), ("greater-than", 5), ("tcp", 6), ("udp", 7), ("exp-mask", 8))))
if mibBuilder.loadTexts: qosCqlProQueKey.setStatus('current')
if mibBuilder.loadTexts: qosCqlProQueKey.setDescription('The index of table, which is the key words of traffic-classify rule.')
qosCqlProQueKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: qosCqlProQueKeyValue.setStatus('current')
if mibBuilder.loadTexts: qosCqlProQueKeyValue.setDescription(' The index of table, which is the value of key words. for greater-than,less-than,tcp,udp:0~65535 for acl:2000~3999 for NULL and fragment: null for exp-mask: 0~255 ')
qosCqlProQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlProQueNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlProQueNum.setDescription('The queue number.')
qosUndoCqlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlProtocol", 0), ("qosNoCqlProtocol", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlProtocol.setStatus('current')
if mibBuilder.loadTexts: qosUndoCqlProtocol.setDescription(' 0: Only for get. 1: delete the corresponding protocol rule of the specified CQL number ')
qosCqlQueParaTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10), )
if mibBuilder.loadTexts: qosCqlQueParaTable.setStatus('current')
if mibBuilder.loadTexts: qosCqlQueParaTable.setDescription('CQL(Custom Queue List) serving/queue-length table')
qosCqlQueParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCqlQueParaListNum"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCqlQueParaQueNum"))
if mibBuilder.loadTexts: qosCqlQueParaEntry.setStatus('current')
if mibBuilder.loadTexts: qosCqlQueParaEntry.setDescription('CQL serving/queue-length configuration information.')
qosCqlQueParaListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: qosCqlQueParaListNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlQueParaListNum.setDescription('The index of table, which is the CQL number.')
qosCqlQueParaQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: qosCqlQueParaQueNum.setStatus('current')
if mibBuilder.loadTexts: qosCqlQueParaQueNum.setDescription('The index of table, which is the queue number.')
qosCqlQueParaServing = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlQueParaServing.setStatus('current')
if mibBuilder.loadTexts: qosCqlQueParaServing.setDescription('The maximum bytes that the specified queue can transmit in each turn')
qosCqlQueParaMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlQueParaMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosCqlQueParaMaxQueLen.setDescription('The maximum length of the specified queue.')
qosUndoCqlQueParaServing = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlQueParaServing", 0), ("qosNoCqlQueParaServing", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlQueParaServing.setStatus('current')
if mibBuilder.loadTexts: qosUndoCqlQueParaServing.setDescription(' 0: Only for get. 1: Set the defualt value of the maximum bytes that the specified queue can transmit in each turn. ')
qosUndoCqlQueParaMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlQueParaMaxQueLen", 0), ("qosNoCqlQueParaMaxQueLen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlQueParaMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosUndoCqlQueParaMaxQueLen.setDescription(' 0: Only for get. 1: Set the defualt value of the maximum length of the specified queue. ')
qosCQTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 11), )
if mibBuilder.loadTexts: qosCQTable.setStatus('current')
if mibBuilder.loadTexts: qosCQTable.setDescription('CQ(Custom Queuing) table')
qosCQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 11, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCQIfIndex"))
if mibBuilder.loadTexts: qosCQEntry.setStatus('current')
if mibBuilder.loadTexts: qosCQEntry.setDescription('CQ configuration infomation')
qosCQIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: qosCQIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosCQIfIndex.setDescription('The index of table, which is the index of interface.')
qosCQListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCQListNum.setStatus('current')
if mibBuilder.loadTexts: qosCQListNum.setDescription('the CQL number.')
qosCQIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQIfName.setStatus('current')
if mibBuilder.loadTexts: qosCQIfName.setDescription('The description of interface.')
qosUndoCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCQ", 0), ("qosNoCQ", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCQ.setStatus('current')
if mibBuilder.loadTexts: qosUndoCQ.setDescription(' 0:Only for get. 1:Set the default queuing on interface: FIFO ')
qosCQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12), )
if mibBuilder.loadTexts: qosCQRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoTable.setDescription('CQ(Custom Queuing) statistics table')
qosCQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCQRunInfoIfIndex"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCQRunInfoQueNum"))
if mibBuilder.loadTexts: qosCQRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoEntry.setDescription('CQ running infomation')
qosCQRunInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: qosCQRunInfoIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoIfIndex.setDescription('The index of the table, which is the index of interface.')
qosCQRunInfoQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: qosCQRunInfoQueNum.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoQueNum.setDescription('The index of the table, which is the queue number')
qosCQRunInfoIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoIfName.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoIfName.setDescription('The description of interface.')
qosCQRunInfoQuePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoQuePkt.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoQuePkt.setDescription('The number of packets in the specified queue.')
qosCQRunInfoQueDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoQueDiscard.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoQueDiscard.setDescription('The number of discarded packets of the specified queue.')
qosCQRunInfoMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosCQRunInfoMaxQueLen.setDescription('The maximum length of the specified queue.')
qosWFQTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13), )
if mibBuilder.loadTexts: qosWFQTable.setStatus('current')
if mibBuilder.loadTexts: qosWFQTable.setDescription('WFQ(Weighted Fair Queueing) table')
qosWFQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosWFQIfIndex"))
if mibBuilder.loadTexts: qosWFQEntry.setStatus('current')
if mibBuilder.loadTexts: qosWFQEntry.setDescription('WFQ configuration and running infomation')
qosWFQIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: qosWFQIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosWFQIfIndex.setDescription('The index of the table, which is the index of interface.')
qosWFQIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQIfName.setStatus('current')
if mibBuilder.loadTexts: qosWFQIfName.setDescription('The description of interface.')
qosWFQMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWFQMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosWFQMaxQueLen.setDescription('The maximum length of the queue.')
qosWFQTotalQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWFQTotalQueNum.setStatus('current')
if mibBuilder.loadTexts: qosWFQTotalQueNum.setDescription('The total number of queues.')
qosWFQCurQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQCurQueLen.setStatus('current')
if mibBuilder.loadTexts: qosWFQCurQueLen.setDescription('The number of packets in all the queues.')
qosWFQTotalDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQTotalDiscard.setStatus('current')
if mibBuilder.loadTexts: qosWFQTotalDiscard.setDescription('The number of discarded packets in all the queues.')
qosWFQActiveQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQActiveQueNum.setStatus('current')
if mibBuilder.loadTexts: qosWFQActiveQueNum.setDescription('The number of active queues.')
qosWFQMaxActiveQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQMaxActiveQueNum.setStatus('current')
if mibBuilder.loadTexts: qosWFQMaxActiveQueNum.setDescription('The maximum number of active queues.')
qosUndoWFQ = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosWFQ", 0), ("qosNoWFQ", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoWFQ.setStatus('current')
if mibBuilder.loadTexts: qosUndoWFQ.setDescription(' 0:Only for get. 1:Set the default queuing on interface: FIFO ')
qosWFQQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-precedence", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWFQQueueType.setStatus('current')
if mibBuilder.loadTexts: qosWFQQueueType.setDescription(' 1: hashed by ip precedence 2: hashed by dscp ')
qosWREDTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 14), )
if mibBuilder.loadTexts: qosWREDTable.setStatus('current')
if mibBuilder.loadTexts: qosWREDTable.setDescription('WRED(Weighted Random Early Detect) table')
qosWREDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 14, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosWREDIfIndex"))
if mibBuilder.loadTexts: qosWREDEntry.setStatus('current')
if mibBuilder.loadTexts: qosWREDEntry.setDescription('WRED configuration infomation')
qosWREDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: qosWREDIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosWREDIfIndex.setDescription('The index of the table, which is the index of interface.')
qosWREDIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 14, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDIfName.setStatus('current')
if mibBuilder.loadTexts: qosWREDIfName.setDescription('The description of interface.')
qosWREDWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDWeightConstant.setStatus('current')
if mibBuilder.loadTexts: qosWREDWeightConstant.setDescription(' Weighted factor in formula for calculating the mean length of queue. From 1 to 16, the default value is 9 ')
qosWREDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDEnable.setStatus('current')
if mibBuilder.loadTexts: qosWREDEnable.setDescription(' 0:disable wred. Recover the default configuration: tail-drop 1:enable wred ')
qosUndoWREDWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosWREDExponent", 0), ("qosNoWREDExponent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoWREDWeightConstant.setStatus('current')
if mibBuilder.loadTexts: qosUndoWREDWeightConstant.setDescription(' 0:Only for get. 1:Recover the default value of weighted factor: 9 ')
qosWREDPreTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15), )
if mibBuilder.loadTexts: qosWREDPreTable.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreTable.setDescription('WRED(Weighted Random Early Detect) precedence table')
qosWREDPreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosWREDPreIfIndex"), (0, "A3COM-HUAWEI-QOS-MIB", "qosWREDPrecedence"))
if mibBuilder.loadTexts: qosWREDPreEntry.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreEntry.setDescription('WRED precedence configuration infomation')
qosWREDPreIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: qosWREDPreIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreIfIndex.setDescription('The index of the table, which is the index of interface.')
qosWREDPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: qosWREDPrecedence.setStatus('current')
if mibBuilder.loadTexts: qosWREDPrecedence.setDescription('IP precedence, from 0 to 7')
qosWREDPreIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPreIfName.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreIfName.setDescription('The description of interface.')
qosWREDPreLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDPreLowLimit.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreLowLimit.setDescription('Low Limit(number of packets)')
qosWREDPreHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDPreHighLimit.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreHighLimit.setDescription('High limit(number of packets)')
qosWREDPreDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDPreDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreDiscardProbability.setDescription('Discard probability denominator')
qosWREDPreRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPreRandomDropNum.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreRandomDropNum.setDescription('Number of packets random-dropped for WRED')
qosWREDPreTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPreTailDropNum.setStatus('current')
if mibBuilder.loadTexts: qosWREDPreTailDropNum.setDescription('Number of packets tail-dropped for WRED')
qosUndoWREDPre = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosWREDPre", 0), ("qosNoWREDPre", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoWREDPre.setStatus('current')
if mibBuilder.loadTexts: qosUndoWREDPre.setDescription(' 0:Only for get. 1:Recover the default value of low-limit, high-limit and discard-probability on relevant precedence. ')
qosCarlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 16), )
if mibBuilder.loadTexts: qosCarlTable.setStatus('current')
if mibBuilder.loadTexts: qosCarlTable.setDescription('CARL(Committed Access Rate List) table')
qosCarlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 16, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCarlListNum"))
if mibBuilder.loadTexts: qosCarlEntry.setStatus('current')
if mibBuilder.loadTexts: qosCarlEntry.setDescription('CARL configuration infomation')
qosCarlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: qosCarlListNum.setStatus('current')
if mibBuilder.loadTexts: qosCarlListNum.setDescription('The index of the table, which is the CARL number')
qosCarlParaType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-address", 1), ("prec-mask", 2), ("dscp-mask", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCarlParaType.setStatus('current')
if mibBuilder.loadTexts: qosCarlParaType.setDescription('Parameter type of the CARL number')
qosCarlParaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 16, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCarlParaValue.setStatus('current')
if mibBuilder.loadTexts: qosCarlParaValue.setDescription('Parameter value of the CARL table')
qosUndoCarl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCARL", 0), ("qosNoCARL", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCarl.setStatus('current')
if mibBuilder.loadTexts: qosUndoCarl.setDescription('0:Only for get. 1:Delete the specified CARL')
qosCARTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17), )
if mibBuilder.loadTexts: qosCARTable.setStatus('current')
if mibBuilder.loadTexts: qosCARTable.setDescription('CAR(Committed Access Rate) table')
qosCAREntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosCARIfIndex"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCARPktDirection"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCARType"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCARListNum"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCARCIR"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCARBurstSize"), (0, "A3COM-HUAWEI-QOS-MIB", "qosCARExcessBurstSize"))
if mibBuilder.loadTexts: qosCAREntry.setStatus('current')
if mibBuilder.loadTexts: qosCAREntry.setDescription('CAR configuration and running infomation.')
qosCARIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: qosCARIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosCARIfIndex.setDescription('The index of the table, which is the index of interface.')
qosCARIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARIfName.setStatus('current')
if mibBuilder.loadTexts: qosCARIfName.setDescription('The description of interface.')
qosCARPktDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: qosCARPktDirection.setStatus('current')
if mibBuilder.loadTexts: qosCARPktDirection.setDescription('The index of the table, which is direction of the processed packet.')
qosCARType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acl", 1), ("carl", 2), ("all", 3))))
if mibBuilder.loadTexts: qosCARType.setStatus('current')
if mibBuilder.loadTexts: qosCARType.setDescription(' The index of the table, which is the matching type for the packets on interface:ACL,CARL,ANY. ')
qosCARListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 199), ValueRangeConstraint(2000, 3999), )))
if mibBuilder.loadTexts: qosCARListNum.setStatus('current')
if mibBuilder.loadTexts: qosCARListNum.setDescription(' The index of the table, which is CARType=1,the number is ACL number; CARType=2,the number is CARL number; CARType=3,the parameter is 0. ')
qosCARCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 6), Integer32())
if mibBuilder.loadTexts: qosCARCIR.setStatus('current')
if mibBuilder.loadTexts: qosCARCIR.setDescription('The index of the table, which is Committed Information Rate.')
qosCARBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 7), Integer32())
if mibBuilder.loadTexts: qosCARBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosCARBurstSize.setDescription('The index of the table, which is Burst Size.')
qosCARExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 8), Integer32())
if mibBuilder.loadTexts: qosCARExcessBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosCARExcessBurstSize.setDescription('The index of the table, which is Excess Burst Size.')
qosCARConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("continue", 1), ("discard", 2), ("remark-prec-continue", 3), ("remark-prec-pass", 4), ("pass", 5), ("remark-mplsexp-continue", 6), ("remark-mplsexp-pass", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARConformAction.setStatus('current')
if mibBuilder.loadTexts: qosCARConformAction.setDescription('Action on packets when traffic is within the CIR')
qosCARExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("continue", 1), ("discard", 2), ("remark-prec-continue", 3), ("remark-prec-pass", 4), ("pass", 5), ("remark-mplsexp-continue", 6), ("remark-mplsexp-pass", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARExceedAction.setStatus('current')
if mibBuilder.loadTexts: qosCARExceedAction.setDescription('Action on packets when traffic is out of CIR')
qosCARConformNewPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARConformNewPrec.setStatus('current')
if mibBuilder.loadTexts: qosCARConformNewPrec.setDescription('Rewrite the precedence value on packets when traffic is within the CIR')
qosCARExceedNewPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARExceedNewPrec.setStatus('current')
if mibBuilder.loadTexts: qosCARExceedNewPrec.setDescription('Rewrite the precedence value on packets when traffic is out of CIR')
qosCARConformPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARConformPkt.setStatus('current')
if mibBuilder.loadTexts: qosCARConformPkt.setDescription('Number of Conformed packets.')
qosCARConformByte = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARConformByte.setStatus('current')
if mibBuilder.loadTexts: qosCARConformByte.setDescription('Bytes of Conformed packets.')
qosCARExceedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARExceedPkt.setStatus('current')
if mibBuilder.loadTexts: qosCARExceedPkt.setDescription('Number of Exceeded packets.')
qosCARExceedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARExceedByte.setStatus('current')
if mibBuilder.loadTexts: qosCARExceedByte.setDescription('Bytes of Exceeded packets.')
qosUndoCAR = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCAR", 0), ("qosNoCAR", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCAR.setStatus('current')
if mibBuilder.loadTexts: qosUndoCAR.setDescription(' 0:Only for get. 1:Delete the relevant CAR policy ')
qosGTSTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18), )
if mibBuilder.loadTexts: qosGTSTable.setStatus('current')
if mibBuilder.loadTexts: qosGTSTable.setDescription('GTS(Generic Traffic Shaping) table')
qosGTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosGTSIfIndex"), (0, "A3COM-HUAWEI-QOS-MIB", "qosGTSType"), (0, "A3COM-HUAWEI-QOS-MIB", "qosGTSACLNum"))
if mibBuilder.loadTexts: qosGTSEntry.setStatus('current')
if mibBuilder.loadTexts: qosGTSEntry.setDescription('GTS configuration information')
qosGTSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: qosGTSIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosGTSIfIndex.setDescription('The index of the table, which is the index of interface.')
qosGTSIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSIfName.setStatus('current')
if mibBuilder.loadTexts: qosGTSIfName.setDescription('The description of interface.')
qosGTSType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acl", 1), ("all", 2))))
if mibBuilder.loadTexts: qosGTSType.setStatus('current')
if mibBuilder.loadTexts: qosGTSType.setDescription(' The index of the table, which is the matching type for the packets on interface:ACL, ANY ')
qosGTSACLNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSACLNum.setStatus('current')
if mibBuilder.loadTexts: qosGTSACLNum.setDescription(' qosGTSType = 1:The index of the table, which is ACL number qosGTSType = 2:The index of the table is 0 ')
qosGTSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSCIR.setStatus('current')
if mibBuilder.loadTexts: qosGTSCIR.setDescription('The Committed Information Rate for shaping')
qosGTSBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosGTSBurstSize.setDescription('The Burst Size for shaping')
qosGTSExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSExcessBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosGTSExcessBurstSize.setDescription('The Excess Burst Size for shaping')
qosGTSMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSMaxQueLen.setStatus('current')
if mibBuilder.loadTexts: qosGTSMaxQueLen.setDescription('The maximum queue length for shaping')
qosGTSCurQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSCurQueLen.setStatus('current')
if mibBuilder.loadTexts: qosGTSCurQueLen.setDescription('The current queue length for shaping')
qosGTSPassPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSPassPkt.setStatus('current')
if mibBuilder.loadTexts: qosGTSPassPkt.setDescription('Number of transmitted packets for shaping')
qosGTSPassByte = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSPassByte.setStatus('current')
if mibBuilder.loadTexts: qosGTSPassByte.setDescription('Bytes of transmitted packets for shaping')
qosGTSDelayPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDelayPkt.setStatus('current')
if mibBuilder.loadTexts: qosGTSDelayPkt.setDescription('Number of delayed packets for shaping')
qosGTSDelayByte = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDelayByte.setStatus('current')
if mibBuilder.loadTexts: qosGTSDelayByte.setDescription('Bytes of delayed packets for shaping')
qosGTSDiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDiscardPkt.setStatus('current')
if mibBuilder.loadTexts: qosGTSDiscardPkt.setDescription('Number of discarded packets for shaping')
qosGTSDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDiscardByte.setStatus('current')
if mibBuilder.loadTexts: qosGTSDiscardByte.setDescription('Bytes of discarded packets for shaping')
qosUndoGTS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosGTS", 0), ("qosNoGTS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoGTS.setStatus('current')
if mibBuilder.loadTexts: qosUndoGTS.setDescription(' 0:Only for get. 1:Delete the relevant GTS policy ')
qosLRTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19), )
if mibBuilder.loadTexts: qosLRTable.setStatus('current')
if mibBuilder.loadTexts: qosLRTable.setDescription('LR(Line Rate) table.')
qosLREntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosLRIfIndex"))
if mibBuilder.loadTexts: qosLREntry.setStatus('current')
if mibBuilder.loadTexts: qosLREntry.setDescription('LR configuration and running information.')
qosLRIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: qosLRIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosLRIfIndex.setDescription('The index of the table, which is the index of interface.')
qosLRIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRIfName.setStatus('current')
if mibBuilder.loadTexts: qosLRIfName.setDescription('The description of interface.')
qosLRCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLRCIR.setStatus('current')
if mibBuilder.loadTexts: qosLRCIR.setDescription('The Committed Information Rate on the physical port.')
qosLRBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLRBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosLRBurstSize.setDescription('Burst Size.')
qosLRExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLRExcessBurstSize.setStatus('current')
if mibBuilder.loadTexts: qosLRExcessBurstSize.setDescription('Excess Burst Size.')
qosLRPassPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRPassPkt.setStatus('current')
if mibBuilder.loadTexts: qosLRPassPkt.setDescription('Number of transmitted packets.')
qosLRPassByte = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRPassByte.setStatus('current')
if mibBuilder.loadTexts: qosLRPassByte.setDescription('Bytes of transmitted packets.')
qosLRDelayPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRDelayPkt.setStatus('current')
if mibBuilder.loadTexts: qosLRDelayPkt.setDescription('Number of delayed packets')
qosLRDelayByte = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRDelayByte.setStatus('current')
if mibBuilder.loadTexts: qosLRDelayByte.setDescription('Bytes of delayed packets')
qosUndoLR = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosLR", 0), ("qosNoLR", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoLR.setStatus('current')
if mibBuilder.loadTexts: qosUndoLR.setDescription(' 0:Only for get. 1:Delete the relevant LR policy ')
qosIfBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20), )
if mibBuilder.loadTexts: qosIfBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: qosIfBandwidthTable.setDescription('A table of bandwidth parameter on interface.')
qosIfBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosIfBandwidthIfIndex"))
if mibBuilder.loadTexts: qosIfBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfBandwidthEntry.setDescription('Bandwidth parameter applied on Interface.')
qosIfBandwidthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: qosIfBandwidthIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosIfBandwidthIfIndex.setDescription('Interface Index, equal to ifIndex.')
qosIFBandwidthMaxBW = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIFBandwidthMaxBW.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthMaxBW.setDescription('Max bandwidth Value (Unit: Kbps) applied on the interface.')
qosIFBandwidthMaxReservedBWPct = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBWPct.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBWPct.setDescription('Max reserved bandwidth as percent of the interface bandwidth (Unit: percent).')
qosIFBandwidthMaxReservedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBW.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBW.setDescription('Max reserved bandwidth. Unit : Kbps')
qosIFBandwidthAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIFBandwidthAvailable.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthAvailable.setDescription('Available bandwidth. Unit : Kbps')
qosIFBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 20, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIFBandwidthRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthRowStatus.setDescription('RowStatus for qosIfBandwidthTable Table. Three actions are used: active, createAndGo, destroy')
qosRTPIfApplyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21), )
if mibBuilder.loadTexts: qosRTPIfApplyTable.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyTable.setDescription('A table of QoS RTP(Realtime Transport Protocol) Queue instance.')
qosRTPIfApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosRTPIfApplyIfIndex"))
if mibBuilder.loadTexts: qosRTPIfApplyEntry.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyEntry.setDescription('Apply RTP(Realtime Transport Protocol) queuing on interface.')
qosRTPIfApplyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21, 1, 1), Integer32())
if mibBuilder.loadTexts: qosRTPIfApplyIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyIfIndex.setDescription('Interface Index, equal to ifIndex.')
qosRTPIfApplyStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyStartPort.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyStartPort.setDescription(' RTP-PORT(3): start-port: 2000~65535 ')
qosRTPIfApplyEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyEndPort.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyEndPort.setDescription(' RTP-PORT(3): end-port: 2000~65535 ')
qosRTPIfApplyBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyBandWidth.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyBandWidth.setDescription('Max bandwidth Value: Absolute value: 8..1000000. Unit: Kbps ')
qosRTPIfApplyCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyCbs.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyCbs.setDescription(' Committed Burst Size: 1500..2000000. Unit: bytes ')
qosRTPIfApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 21, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyRowStatus.setDescription('RowStatus for RTPQoSIfApply Table. Three actions are used: active, createAndGo, destroy')
qosRTPIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 22), )
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoTable.setDescription('A table of Running statistics for RTP(Realtime Transport Protocol) Queue applied on the interface.')
qosRTPIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 22, 1), ).setIndexNames((0, "A3COM-HUAWEI-QOS-MIB", "qosRTPIfApplyIfIndex"))
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoEntry.setDescription('RTP(Realtime Transport Protocol) Queue statistics entry.')
qosRTPIfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueSize.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueSize.setDescription('Size of Rtpq Queue.')
qosRTPIfQueueMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 22, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueMaxSize.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueMaxSize.setDescription(' Max packet number of RTP(Realtime Transport Protocol) Queue.')
qosRTPIfQueueOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueOutputs.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueOutputs.setDescription('Output packet number of RTP(Realtime Transport Protocol) Queue.')
qosRTPIfQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 1, 3, 3, 2, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueDiscards.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueDiscards.setDescription('Discarded packet number of RTP(Realtime Transport Protocol) Queue.')
mibBuilder.exportSymbols("A3COM-HUAWEI-QOS-MIB", qosPqlIfListNum=qosPqlIfListNum, qosCarlParaValue=qosCarlParaValue, qosCqlQueueNum=qosCqlQueueNum, qosCqlListNum=qosCqlListNum, qosRTPIfQueueRunInfoTable=qosRTPIfQueueRunInfoTable, qosPqlIfQueueType=qosPqlIfQueueType, hwIfQoSMib=hwIfQoSMib, PYSNMP_MODULE_ID=hwIfQoSMib, qosIFBandwidthMaxReservedBWPct=qosIFBandwidthMaxReservedBWPct, qosRTPIfApplyEndPort=qosRTPIfApplyEndPort, qosWREDPreRandomDropNum=qosWREDPreRandomDropNum, qosUndoWREDPre=qosUndoWREDPre, qosUndoCQ=qosUndoCQ, qosCqlIfTable=qosCqlIfTable, qosCARExceedAction=qosCARExceedAction, qosGTSDelayByte=qosGTSDelayByte, qosRTPIfApplyIfIndex=qosRTPIfApplyIfIndex, qosWREDEntry=qosWREDEntry, qosWFQIfIndex=qosWFQIfIndex, qosPQMiddleMaxQueLen=qosPQMiddleMaxQueLen, qosPqlProtocolEntry=qosPqlProtocolEntry, qosGTSType=qosGTSType, qosGTSDiscardPkt=qosGTSDiscardPkt, qosIfBandwidthIfIndex=qosIfBandwidthIfIndex, qosPQListNum=qosPQListNum, qosPQBottomMaxQueLen=qosPQBottomMaxQueLen, qosWREDPreDiscardProbability=qosWREDPreDiscardProbability, qosCqlIfEntry=qosCqlIfEntry, qosUndoCqlIf=qosUndoCqlIf, qosPqlIfIndex=qosPqlIfIndex, qosLRCIR=qosLRCIR, qosCarlEntry=qosCarlEntry, qosPqlQueueLenEntry=qosPqlQueueLenEntry, qosFIFODiscardPkt=qosFIFODiscardPkt, qosUndoPqlIf=qosUndoPqlIf, qosPQNormalDiscard=qosPQNormalDiscard, qosGTSPassPkt=qosGTSPassPkt, qosRTPIfApplyTable=qosRTPIfApplyTable, qosCqlProQueNum=qosCqlProQueNum, qosGTSTable=qosGTSTable, qosIFBandwidthMaxReservedBW=qosIFBandwidthMaxReservedBW, qosGTSIfIndex=qosGTSIfIndex, qosPqlIfTable=qosPqlIfTable, qosUndoCqlDefault=qosUndoCqlDefault, qosPqlQueLenValue=qosPqlQueLenValue, qosCqlProName=qosCqlProName, qosCqlProQueKey=qosCqlProQueKey, qosRTPIfApplyBandWidth=qosRTPIfApplyBandWidth, qosLRIfName=qosLRIfName, qosPQTopMaxQueLen=qosPQTopMaxQueLen, qosWFQTotalDiscard=qosWFQTotalDiscard, qosRTPIfApplyStartPort=qosRTPIfApplyStartPort, qosCqlQueParaServing=qosCqlQueParaServing, qosPqlQueLenQueueType=qosPqlQueLenQueueType, qosWREDIfIndex=qosWREDIfIndex, qosLRTable=qosLRTable, qosRTPIfApplyRowStatus=qosRTPIfApplyRowStatus, qosCQRunInfoTable=qosCQRunInfoTable, qosFIFOTable=qosFIFOTable, qosPQNormalMaxQueLen=qosPQNormalMaxQueLen, qosGTSIfName=qosGTSIfName, qosUndoCqlProtocol=qosUndoCqlProtocol, qosWFQTable=qosWFQTable, qosCqlQueParaQueNum=qosCqlQueParaQueNum, qosUndoWREDWeightConstant=qosUndoWREDWeightConstant, qosCARExceedPkt=qosCARExceedPkt, qosRTPIfQueueMaxSize=qosRTPIfQueueMaxSize, qosPqlQueueLenTable=qosPqlQueueLenTable, qosUndoGTS=qosUndoGTS, qosPqlProListNum=qosPqlProListNum, qosPQBottomPkt=qosPQBottomPkt, qosCqlProtocolTable=qosCqlProtocolTable, qosRTPIfQueueDiscards=qosRTPIfQueueDiscards, qosUndoPqlDefault=qosUndoPqlDefault, qosCARTable=qosCARTable, qosWFQMaxActiveQueNum=qosWFQMaxActiveQueNum, qosFIFOIfName=qosFIFOIfName, qosCARExceedByte=qosCARExceedByte, qosWFQCurQueLen=qosWFQCurQueLen, qosCQListNum=qosCQListNum, qosCqlProListNum=qosCqlProListNum, qosWREDIfName=qosWREDIfName, qosFIFOMaxQueueLen=qosFIFOMaxQueueLen, qosLRBurstSize=qosLRBurstSize, qosCARListNum=qosCARListNum, qosGTSPassByte=qosGTSPassByte, qosGTSBurstSize=qosGTSBurstSize, qosCqlIfName=qosCqlIfName, qosWFQQueueType=qosWFQQueueType, qosCARConformByte=qosCARConformByte, qosRTPIfApplyCbs=qosRTPIfApplyCbs, qosLRPassByte=qosLRPassByte, qosGTSCIR=qosGTSCIR, qosCARConformNewPrec=qosCARConformNewPrec, qosIFBandwidthRowStatus=qosIFBandwidthRowStatus, qosPqlQueLenListNum=qosPqlQueLenListNum, qosWREDEnable=qosWREDEnable, qosWREDPreEntry=qosWREDPreEntry, qosCqlDefaultEntry=qosCqlDefaultEntry, qosCqlIfListNum=qosCqlIfListNum, qosPqlProQueType=qosPqlProQueType, qosCqlQueParaMaxQueLen=qosCqlQueParaMaxQueLen, qosWFQActiveQueNum=qosWFQActiveQueNum, qosCarlTable=qosCarlTable, qosWREDPreTailDropNum=qosWREDPreTailDropNum, qosLRPassPkt=qosLRPassPkt, qosRTPIfApplyEntry=qosRTPIfApplyEntry, qosCqlIfQueueNum=qosCqlIfQueueNum, qosCARCIR=qosCARCIR, qosGTSDiscardByte=qosGTSDiscardByte, qosCQTable=qosCQTable, qosIFBandwidthAvailable=qosIFBandwidthAvailable, qosPQIfIndex=qosPQIfIndex, qosUndoLR=qosUndoLR, qosLRIfIndex=qosLRIfIndex, qosLRDelayPkt=qosLRDelayPkt, qosWFQEntry=qosWFQEntry, qosPqlDefaultQueueType=qosPqlDefaultQueueType, qosUndoCAR=qosUndoCAR, qosWREDPreIfName=qosWREDPreIfName, qosUndoCqlQueParaServing=qosUndoCqlQueParaServing, qosGTSCurQueLen=qosGTSCurQueLen, qosCqlDefaultTable=qosCqlDefaultTable, qosCQRunInfoQuePkt=qosCQRunInfoQuePkt, qosLREntry=qosLREntry, qosCQIfName=qosCQIfName, qosLRDelayByte=qosLRDelayByte, qosPqlProQueKey=qosPqlProQueKey, qosWREDPrecedence=qosWREDPrecedence, qosCQRunInfoIfName=qosCQRunInfoIfName, qosPQIfName=qosPQIfName, qosPQBottomDiscard=qosPQBottomDiscard, qosCqlProtocolEntry=qosCqlProtocolEntry, qosCarlListNum=qosCarlListNum, qosCARIfIndex=qosCARIfIndex, qosCARExceedNewPrec=qosCARExceedNewPrec, qosIfBandwidthTable=qosIfBandwidthTable, qosPqlProName=qosPqlProName, qosWFQTotalQueNum=qosWFQTotalQueNum, qosCQRunInfoIfIndex=qosCQRunInfoIfIndex, qosCQRunInfoQueNum=qosCQRunInfoQueNum, qosWREDPreTable=qosWREDPreTable, qosGTSACLNum=qosGTSACLNum, qosCQRunInfoMaxQueLen=qosCQRunInfoMaxQueLen, qosCARIfName=qosCARIfName, qosCQIfIndex=qosCQIfIndex, qosIFBandwidthMaxBW=qosIFBandwidthMaxBW, qosWREDPreHighLimit=qosWREDPreHighLimit, qosPQNormalPkt=qosPQNormalPkt, qosWFQIfName=qosWFQIfName, qosPqlProtocolTable=qosPqlProtocolTable, qosCARBurstSize=qosCARBurstSize, qosPQMiddleDiscard=qosPQMiddleDiscard, qosPQTable=qosPQTable, qosCqlQueParaEntry=qosCqlQueParaEntry, qosPqlDefaultEntry=qosPqlDefaultEntry, qosRTPIfQueueRunInfoEntry=qosRTPIfQueueRunInfoEntry, qosCqlQueParaListNum=qosCqlQueParaListNum, qosWREDPreLowLimit=qosWREDPreLowLimit, qosUndoPqlQueLen=qosUndoPqlQueLen, qosWFQMaxQueLen=qosWFQMaxQueLen, qosCARExcessBurstSize=qosCARExcessBurstSize, qosGTSExcessBurstSize=qosGTSExcessBurstSize, qosCARPktDirection=qosCARPktDirection, qosCARConformPkt=qosCARConformPkt, qosPqlIfName=qosPqlIfName, qosPQEntry=qosPQEntry, qosWREDWeightConstant=qosWREDWeightConstant, qosUndoCqlQueParaMaxQueLen=qosUndoCqlQueParaMaxQueLen, qosLRExcessBurstSize=qosLRExcessBurstSize, qosFIFOIfIndex=qosFIFOIfIndex, qosFIFOEntry=qosFIFOEntry, qosUndoPqlProtocol=qosUndoPqlProtocol, qosUndoPQ=qosUndoPQ, qosWREDTable=qosWREDTable, qosPQTopDiscard=qosPQTopDiscard, qosPQMiddlePkt=qosPQMiddlePkt, qosCqlQueParaTable=qosCqlQueParaTable, qosPQTopPkt=qosPQTopPkt, qosUndoFIFO=qosUndoFIFO, qosCQRunInfoEntry=qosCQRunInfoEntry, qosRTPIfQueueSize=qosRTPIfQueueSize, qosRTPIfQueueOutputs=qosRTPIfQueueOutputs, qosPqlDefaultTable=qosPqlDefaultTable, qosWREDPreIfIndex=qosWREDPreIfIndex, qosCARConformAction=qosCARConformAction, qosUndoWFQ=qosUndoWFQ, qosCAREntry=qosCAREntry, qosIfBandwidthEntry=qosIfBandwidthEntry, qosPqlProQueKeyValue=qosPqlProQueKeyValue, qosCQEntry=qosCQEntry, qosCqlProQueKeyValue=qosCqlProQueKeyValue, qosFIFOCurQueueLen=qosFIFOCurQueueLen, qosCQRunInfoQueDiscard=qosCQRunInfoQueDiscard, qosCarlParaType=qosCarlParaType, qosPqlIfEntry=qosPqlIfEntry, qosGTSEntry=qosGTSEntry, qosCqlIfIndex=qosCqlIfIndex, qosGTSDelayPkt=qosGTSDelayPkt, qosPqlDefaultListNum=qosPqlDefaultListNum, qosGTSMaxQueLen=qosGTSMaxQueLen, qosUndoCarl=qosUndoCarl, qosCARType=qosCARType)
