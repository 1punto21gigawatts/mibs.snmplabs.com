#
# PySNMP MIB module Wellfleet-Modem-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-Modem-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, ObjectIdentity, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, NotificationType, Unsigned32, iso, IpAddress, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "ObjectIdentity", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "NotificationType", "Unsigned32", "iso", "IpAddress", "TimeTicks", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfModemGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfModemGroup")
wfModemTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1), )
if mibBuilder.loadTexts: wfModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemTable.setDescription('Modem line record.')
wfModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1), ).setIndexNames((0, "Wellfleet-Modem-MIB", "wfModemSlot"), (0, "Wellfleet-Modem-MIB", "wfModemConnector"))
if mibBuilder.loadTexts: wfModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemEntry.setDescription(' An entry in the MODEM table')
wfModemDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemDelete.setDescription('Create/Delete parameter')
wfModemSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemSlot.setDescription('Instance ID Slot, filled in by driver')
wfModemConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemConnector.setDescription('Instance ID Connector, filled in by the driver.')
wfModemIdSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIdSwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIdSwRev.setDescription("A textual description of the modem's firmware version number.")
wfModemIdHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemIdHwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemIdHwRev.setDescription('A textual description of the revision number of the modem daughter card.')
wfModemLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("onHook", 2), ("offHook", 3), ("connected", 4), ("busiedOut", 5), ("reset", 6))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemLineState.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemLineState.setDescription('Indicates the state of the modem.')
wfModemConnectionFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("lossOfCarrier", 2), ("v42NegotiationFailed", 3), ("noCommonProtocol", 4), ("remoteDisconnect", 5), ("noResponseFromRemote", 6), ("protocolViolation", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemConnectionFailReason.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemConnectionFailReason.setDescription('indicates the reason for the last failed connection')
wfModemCfgFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgFactoryDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCfgFactoryDefaults.setDescription('This object indicates if factory defaults are to be loaded. If set to enabled(1), factory defaults are loaded. If set to disabled(2), the initialization string in wfModemCfgInitString is sent to the modem.')
wfModemCfgInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgInitString.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCfgInitString.setDescription('An initialization string that will be sent to the modem each time the modem is rebooted.')
wfModemCfgDefaultString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemCfgDefaultString.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCfgDefaultString.setDescription('The string contains AT comands for initializing the modem every time the modem comes up, regardless of configuration.')
wfModemCfgResultCodeString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemCfgResultCodeString.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCfgResultCodeString.setDescription('The ASCII response string returned by the modem. Response strings will be returned in response to last command to the modem and in response to activity on the line.')
wfModemCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cfgIdle", 1), ("cfgInProgress", 2), ("cfgResponseReturned", 3))).clone('cfgIdle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCfgState.setDescription('Indicates the state of AT command processing. When a new initialization string is to be sent to the modem, the sender sets the state to cfgInProgress(2). After the command has been sent to the modem, and a result code has been returned, the state is set to cfgResponseReturned(3). Once the sender has received the return code, the sender sets the state to cfgIdle(1).')
wfModemCfgCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("northAmerica", 1), ("japan", 2), ("uk", 3), ("germany", 4))).clone('northAmerica')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemCfgCountry.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemCfgCountry.setDescription('Identifies the country the modem is designed to operate in. This object is not read from the modem directly. It must be entered manually when configuring the modem.')
wfModemV54Lpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLpbk", 1), ("localAnlgLpbk", 2), ("localDigLpbk", 3), ("remDigLpbk", 4), ("remDigLpbkWPattern", 5), ("localAnlgLpbkWPattern", 6))).clone('noLpbk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemV54Lpbk.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemV54Lpbk.setDescription('Enables the operator to control, and examine the state of, V.54 loopbacks within the modem. This object equates to the AT&Tn command.')
wfModemV54Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemV54Timer.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemV54Timer.setDescription('Duration in seconds that a test specified in wfModemV.54Lpbk is to execute.')
wfModemV54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemV54Errors.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemV54Errors.setDescription('Indicates the number of errors reported during the last loopback test. This count will only be updated for loopbacks with test pattern.')
wfModemV54RemLpbkDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemV54RemLpbkDetect.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemV54RemLpbkDetect.setDescription('This object controls whether or not this modem will acknowledge V.54 Remote Loop 2 requests from a remote Site. When ENABLED, this modem can be put into a digital loopback from a remote site. When DISABLED, the modem will reject requests from the remote site.')
wfModemPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemPhoneNumber.setDescription('Contains the phone number for the modem to dial.')
wfModemInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("startup", 1), ("sccInit", 2), ("getInfo", 3), ("setDefaults", 4), ("initialization", 5), ("phoneNumber", 6), ("loopback", 7), ("initComplete", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModemInitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemInitState.setDescription('Indictes the state of the modem initialization sequence. The state will freeze in the state that fails when a failure is detected. Otherwise, the state will be set to initComplete when initialization completes successfully.')
wfModemUnitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetUnit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemUnitReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemUnitReset.setDescription('Enables the operator to remotely reset the unit. Using this command will cause the unit to terminate all its connections and drop data.')
wfModemType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 29, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemType.setStatus('mandatory')
if mibBuilder.loadTexts: wfModemType.setDescription('Enables a user to specify a modem type attached to the port thus enabling Site Manager to put a preconfigured modem init string in the wfModemInitString entry. The list of modems and init strings are stored in Site Manager for flexibility. This type can be set to Custom and a user defined string can be entered in wfModemInitString field.')
mibBuilder.exportSymbols("Wellfleet-Modem-MIB", wfModemCfgState=wfModemCfgState, wfModemType=wfModemType, wfModemIdSwRev=wfModemIdSwRev, wfModemLineState=wfModemLineState, wfModemCfgInitString=wfModemCfgInitString, wfModemV54Errors=wfModemV54Errors, wfModemEntry=wfModemEntry, wfModemTable=wfModemTable, wfModemConnector=wfModemConnector, wfModemCfgCountry=wfModemCfgCountry, wfModemCfgFactoryDefaults=wfModemCfgFactoryDefaults, wfModemConnectionFailReason=wfModemConnectionFailReason, wfModemPhoneNumber=wfModemPhoneNumber, wfModemCfgResultCodeString=wfModemCfgResultCodeString, wfModemDelete=wfModemDelete, wfModemInitState=wfModemInitState, wfModemIdHwRev=wfModemIdHwRev, wfModemUnitReset=wfModemUnitReset, wfModemV54RemLpbkDetect=wfModemV54RemLpbkDetect, wfModemSlot=wfModemSlot, wfModemV54Lpbk=wfModemV54Lpbk, wfModemV54Timer=wfModemV54Timer, wfModemCfgDefaultString=wfModemCfgDefaultString)
