#
# PySNMP MIB module HUAWEI-SIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
huaweiDatacomm, voice, huaweiMgmt, huawei = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "huaweiDatacomm", "voice", "huaweiMgmt", "huawei")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Counter32, ObjectIdentity, Counter64, ModuleIdentity, enterprises, IpAddress, Unsigned32, Integer32, mib_2, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Counter32", "ObjectIdentity", "Counter64", "ModuleIdentity", "enterprises", "IpAddress", "Unsigned32", "Integer32", "mib-2", "NotificationType")
DisplayString, TextualConvention, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "RowStatus")
hwSIPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12))
hwSIPMIB.setRevisions(('2003-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwSIPMIB.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwSIPMIB.setLastUpdated('200309010000Z')
if mibBuilder.loadTexts: hwSIPMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwSIPMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwSIPMIB.setDescription('The HUAWEI-SIP-MIB contains objects to Manage the SIP client configuration.')
hwSIPServerMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 1))
hwSIPClientMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2))
hwSIPClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1))
hwSIPID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('VRP-GATEWAY')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPID.setStatus('current')
if mibBuilder.loadTexts: hwSIPID.setDescription("The unique identification of a SIP gateway. By default, this object should have the value 'VRP-GATEWAY'.")
hwSIPPasswordType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("simple", 1), ("cipher", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPPasswordType.setStatus('current')
if mibBuilder.loadTexts: hwSIPPasswordType.setDescription('The display type of a SIP gateway password. By default, this object should have the value simple(1).')
hwSIPPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('VRP-SIP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPPassword.setStatus('current')
if mibBuilder.loadTexts: hwSIPPassword.setDescription("a SIP gateway password. By default, this object should have the value 'VRP-SIP'.")
hwSIPTransport = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPTransport.setStatus('current')
if mibBuilder.loadTexts: hwSIPTransport.setDescription('the transport type of SIP packets. By default, this object should have the value udp(1).')
hwSIPSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPSourceIP.setStatus('current')
if mibBuilder.loadTexts: hwSIPSourceIP.setDescription('The source IP address of the local peer acted as UA.')
hwSIPCallDebugSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPCallDebugSwitch.setStatus('current')
if mibBuilder.loadTexts: hwSIPCallDebugSwitch.setDescription('Indicate whether the SIP calls debug information should be generated. By default, this object should have the value disabled(2).')
hwSIPRegisterDebugSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPRegisterDebugSwitch.setStatus('current')
if mibBuilder.loadTexts: hwSIPRegisterDebugSwitch.setDescription('Indicate whether the SIP calls debug information should be generated. By default, this object should have the value disabled(2).')
hwSIPRegPrimitiveDebugSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPRegPrimitiveDebugSwitch.setStatus('current')
if mibBuilder.loadTexts: hwSIPRegPrimitiveDebugSwitch.setDescription('Indicate whether the SIP register primitives debug information should be generated. By default, this object should have the value disabled(2).')
hwSIPCallPrimitiveDebugSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPCallPrimitiveDebugSwitch.setStatus('current')
if mibBuilder.loadTexts: hwSIPCallPrimitiveDebugSwitch.setDescription('Indicate whether the SIP call primitives debug information should be generated. By default, this object should have the value disabled(2).')
hwSIPWarningDebugSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPWarningDebugSwitch.setStatus('current')
if mibBuilder.loadTexts: hwSIPWarningDebugSwitch.setDescription('Indicate whether the SIP warnings debug information should be generated. By default, this object should have the value disabled(2).')
hwSIPErrorDebugSwitch = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPErrorDebugSwitch.setStatus('current')
if mibBuilder.loadTexts: hwSIPErrorDebugSwitch.setDescription('Indicate whether the SIP errors debug information should be generated. By default, this object should have the value disabled(2).')
hwSIPTrapsControl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPTrapsControl.setStatus('current')
if mibBuilder.loadTexts: hwSIPTrapsControl.setDescription('Indicates wether the SIP module is permitted to generate traps. By default, this object should have the value disabled(2).')
hwSIPStatisticClear = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSIPStatisticClear.setStatus('current')
if mibBuilder.loadTexts: hwSIPStatisticClear.setDescription("The object is used to clear the statistic information of a SIP gateway. Note that it is significative only when this object is executed 'set' operation.")
hwSIPRegisterFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSIPRegisterFailReason.setStatus('current')
if mibBuilder.loadTexts: hwSIPRegisterFailReason.setDescription('The object describes the reason that a SIP gateway fails to register.')
hwSIPAuthenticatedRequestMethord = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknow", 1), ("register", 2), ("invite", 3), ("ack", 4), ("prack", 5), ("cancel", 6), ("bye", 7), ("info", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSIPAuthenticatedRequestMethord.setStatus('current')
if mibBuilder.loadTexts: hwSIPAuthenticatedRequestMethord.setDescription('The object denotes the methord of a request that fails to authenticate.')
hwSIPStatisticObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16))
hwSIPRegisters = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPRegisters.setStatus('current')
if mibBuilder.loadTexts: hwSIPRegisters.setDescription('The number of REGISTERs which a SIP gateway has received and sent.')
hwSIPInvites = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPInvites.setStatus('current')
if mibBuilder.loadTexts: hwSIPInvites.setDescription('The number of INVITEs which a SIP gateway has received and sent.')
hwSIPAcks = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPAcks.setStatus('current')
if mibBuilder.loadTexts: hwSIPAcks.setDescription('The number of ACKs which a SIP gateway has received and sent.')
hwSIPPracks = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPPracks.setStatus('current')
if mibBuilder.loadTexts: hwSIPPracks.setDescription('The number of PRACKs which a SIP gateway has received and sent.')
hwSIPByes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPByes.setStatus('current')
if mibBuilder.loadTexts: hwSIPByes.setDescription('The number of BYEs which a SIP gateway has received and sent.')
hwSIPCancels = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPCancels.setStatus('current')
if mibBuilder.loadTexts: hwSIPCancels.setDescription('The number of CANCELs which a SIP gateway has received and sent.')
hwSIPInfos = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPInfos.setStatus('current')
if mibBuilder.loadTexts: hwSIPInfos.setDescription('The number of INFOs which a SIP gateway has received and sent.')
hwSIPOKRegisters = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPOKRegisters.setStatus('current')
if mibBuilder.loadTexts: hwSIPOKRegisters.setDescription('The number of successful REGISTERs which a SIP gateway has received and sent.')
hwSIPOKInvites = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPOKInvites.setStatus('current')
if mibBuilder.loadTexts: hwSIPOKInvites.setDescription('The number of successful INVITEs which a SIP gateway has received and sent.')
hwSIPOKAcks = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPOKAcks.setStatus('current')
if mibBuilder.loadTexts: hwSIPOKAcks.setDescription('The number of successful ACKs which a SIP gateway has received and sent.')
hwSIPOKPracks = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPOKPracks.setStatus('current')
if mibBuilder.loadTexts: hwSIPOKPracks.setDescription('The number of successful PRACKs which a SIP gateway has received and sent.')
hwSIPOKByes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPOKByes.setStatus('current')
if mibBuilder.loadTexts: hwSIPOKByes.setDescription('The number of successful BYEs which a SIP gateway has received and sent.')
hwSIPOKCancels = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPOKCancels.setStatus('current')
if mibBuilder.loadTexts: hwSIPOKCancels.setDescription('The number of successful CANCELs which a SIP gateway has received and sent.')
hwSIPOKInfos = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPOKInfos.setStatus('current')
if mibBuilder.loadTexts: hwSIPOKInfos.setDescription('The number of successful INFOs which a SIP gateway has received and sent.')
hwSIPResp3MultipleChoice = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp3MultipleChoice.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp3MultipleChoice.setDescription('The number of 300(Mutiple Choices) responses which a SIP gateway has received.')
hwSIPResp3MovedPermanently = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp3MovedPermanently.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp3MovedPermanently.setDescription('The number of 301(Moved Permanently) responses which a SIP gateway has received.')
hwSIPResp3MovedTemporarily = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp3MovedTemporarily.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp3MovedTemporarily.setDescription('The number of 302(Moved Temporarily) responses which a SIP gateway has received.')
hwSIPResp3UseProxy = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp3UseProxy.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp3UseProxy.setDescription('The number of 305(Use Proxy) responses which a SIP gateway has received.')
hwSIPResp3Other = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp3Other.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp3Other.setDescription('The number of other 3xx responses which a SIP gateway has received.')
hwSIPResp4BadRequest = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4BadRequest.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4BadRequest.setDescription('The number of 400(Use Proxy) responses which a SIP gateway has received.')
hwSIPResp4Unauthorized = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4Unauthorized.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4Unauthorized.setDescription('The number of 401(Unauthorized) responses which a SIP gateway has received.')
hwSIPResp4Forbidden = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4Forbidden.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4Forbidden.setDescription('The number of 403(Forbidden) responses which a SIP gateway has received.')
hwSIPResp4NotFound = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4NotFound.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4NotFound.setDescription('The number of 404(Not Found) responses which a SIP gateway has received.')
hwSIPResp4MethodNotAllowed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4MethodNotAllowed.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4MethodNotAllowed.setDescription('The number of 405(Methord Not Allowed) responses which a SIP gateway has received.')
hwSIPResp4NotAcceptable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4NotAcceptable.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4NotAcceptable.setDescription('The number of 406(Not Acceptable) responses which a SIP gateway has received.')
hwSIPResp4ProxyAuthRequired = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4ProxyAuthRequired.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4ProxyAuthRequired.setDescription('The number of 407(Proxy Authentication Required) responses which a SIP gateway has received.')
hwSIPResp4ReqTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4ReqTimeout.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4ReqTimeout.setDescription('The number of 408(Request Timeout) responses which a SIP gateway has received.')
hwSIPResp4ReqEntityTooLarge = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4ReqEntityTooLarge.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4ReqEntityTooLarge.setDescription('The number of 413(Request Entity Too Large) responses which a SIP gateway has received.')
hwSIPResp4ReqURITooLarge = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4ReqURITooLarge.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4ReqURITooLarge.setDescription('The number of 414(Request-URI Too Long) responses which a SIP gateway has received.')
hwSIPResp4UnsupportedMediaType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4UnsupportedMediaType.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4UnsupportedMediaType.setDescription('The number of 415(Unsupported Media Type) responses which a SIP gateway has received.')
hwSIPResp4UnsupportedURIScheme = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4UnsupportedURIScheme.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4UnsupportedURIScheme.setDescription('The number of 416(Unsupported URI Scheme) responses which a SIP gateway has received.')
hwSIPResp4BadExtension = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4BadExtension.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4BadExtension.setDescription('The number of 420(Bad Extension) responses which a SIP gateway has received.')
hwSIPResp4ExtensionRequired = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4ExtensionRequired.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4ExtensionRequired.setDescription('The number of 421(Extension Required) responses which a SIP gateway has received.')
hwSIPResp4AddrIncomplete = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4AddrIncomplete.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4AddrIncomplete.setDescription('The number of 484(Address Incomplete) responses which a SIP gateway has received.')
hwSIPResp4BusyHere = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4BusyHere.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4BusyHere.setDescription('The number of 486(Busy Here) responses which a SIP gateway has received.')
hwSIPResp4RequestTerminated = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4RequestTerminated.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4RequestTerminated.setDescription('The number of 487(Request Terminated) responses which a SIP gateway has received.')
hwSIPResp4Other = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp4Other.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp4Other.setDescription('The number of other 4xx responses which a SIP gateway has received.')
hwSIPResp5InternalError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5InternalError.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5InternalError.setDescription('The number of 500(Server Internal Error) responses which a SIP gateway has received.')
hwSIPResp5NotImplemented = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5NotImplemented.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5NotImplemented.setDescription('The number of 501(Not Implemented) responses which a SIP gateway has received.')
hwSIPResp5BadGateway = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5BadGateway.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5BadGateway.setDescription('The number of 502(Bad Gateway) responses which a SIP gateway has received.')
hwSIPResp5ServiceUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5ServiceUnavailable.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5ServiceUnavailable.setDescription('The number of 503(ServiceUnavailabe) responses which a SIP gateway has received.')
hwSIPResp5GatewayTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5GatewayTimeout.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5GatewayTimeout.setDescription('The number of 504(Server Time-Out) responses which a SIP gateway has received.')
hwSIPResp5BadSipVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5BadSipVersion.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5BadSipVersion.setDescription('The number of 505(Version Not Supported) responses which a SIP gateway has received.')
hwSIPResp5MessageTooLarge = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5MessageTooLarge.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5MessageTooLarge.setDescription('The number of 513(Message Too Large) responses which a SIP gateway has received.')
hwSIPResp5Other = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp5Other.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp5Other.setDescription('The number of other 5xx responses which a SIP gateway has received.')
hwSIPResp6xx = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 16, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSIPResp6xx.setStatus('current')
if mibBuilder.loadTexts: hwSIPResp6xx.setDescription('The number of 6xx responses which a SIP gateway has received.')
hwSIPServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 21), )
if mibBuilder.loadTexts: hwSIPServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwSIPServerConfigTable.setDescription('A list of the SIP server configuration entries.')
hwSIPServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 21, 1), ).setIndexNames((0, "HUAWEI-SIP-MIB", "hwSIPServerIPAddress"), (0, "HUAWEI-SIP-MIB", "hwSIPServerPort"))
if mibBuilder.loadTexts: hwSIPServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwSIPServerConfigEntry.setDescription('A SIP server configuration entry contains some associated information, e.g. IP address, port, etc..')
hwSIPServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 21, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSIPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwSIPServerIPAddress.setDescription('The IP address of a SIP server.')
hwSIPServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 21, 1, 2), Integer32().clone(5060)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSIPServerPort.setStatus('current')
if mibBuilder.loadTexts: hwSIPServerPort.setDescription('The port of a SIP server. By default, the object value is 5060.')
hwSIPServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slaver", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSIPServerType.setStatus('current')
if mibBuilder.loadTexts: hwSIPServerType.setDescription('The type of SIP Server. By default, the object value is master(1).')
hwSIPAcceptType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("all", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSIPAcceptType.setStatus('current')
if mibBuilder.loadTexts: hwSIPAcceptType.setDescription('The accept type of SIP calls. By default, the object value is all(2).')
hwSIPServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 1, 21, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSIPServerStatus.setStatus('current')
if mibBuilder.loadTexts: hwSIPServerStatus.setDescription('The status of this SIP Server entry.')
hwSIPClientNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 2))
hwSIPRegisterFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 2, 1)).setObjects(("HUAWEI-SIP-MIB", "hwSIPServerIPAddress"), ("HUAWEI-SIP-MIB", "hwSIPServerPort"), ("HUAWEI-SIP-MIB", "hwSIPRegisterFailReason"), ("HUAWEI-SIP-MIB", "hwSIPID"))
if mibBuilder.loadTexts: hwSIPRegisterFailure.setStatus('current')
if mibBuilder.loadTexts: hwSIPRegisterFailure.setDescription('The trap is generated when a SIP gateway fails to register.')
hwSIPAuthenticateFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 2, 2)).setObjects(("HUAWEI-SIP-MIB", "hwSIPID"), ("HUAWEI-SIP-MIB", "hwSIPAuthenticatedRequestMethord"))
if mibBuilder.loadTexts: hwSIPAuthenticateFailure.setStatus('current')
if mibBuilder.loadTexts: hwSIPAuthenticateFailure.setDescription('The trap is generated when a requests with its credential fail to authenticate.')
hwSIPServerSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 1, 12, 2, 2, 3))
if mibBuilder.loadTexts: hwSIPServerSwitch.setStatus('current')
if mibBuilder.loadTexts: hwSIPServerSwitch.setDescription('The trap is generated when a switch happens between master and slaver SIP server.')
mibBuilder.exportSymbols("HUAWEI-SIP-MIB", hwSIPResp5InternalError=hwSIPResp5InternalError, hwSIPResp5BadSipVersion=hwSIPResp5BadSipVersion, hwSIPResp5ServiceUnavailable=hwSIPResp5ServiceUnavailable, hwSIPResp4BadRequest=hwSIPResp4BadRequest, hwSIPResp4Other=hwSIPResp4Other, hwSIPResp4BadExtension=hwSIPResp4BadExtension, hwSIPResp4ReqTimeout=hwSIPResp4ReqTimeout, hwSIPRegisters=hwSIPRegisters, hwSIPResp4RequestTerminated=hwSIPResp4RequestTerminated, hwSIPServerType=hwSIPServerType, hwSIPAuthenticateFailure=hwSIPAuthenticateFailure, hwSIPResp3MovedPermanently=hwSIPResp3MovedPermanently, hwSIPByes=hwSIPByes, hwSIPSourceIP=hwSIPSourceIP, hwSIPResp5NotImplemented=hwSIPResp5NotImplemented, hwSIPResp4ExtensionRequired=hwSIPResp4ExtensionRequired, hwSIPOKPracks=hwSIPOKPracks, hwSIPResp4AddrIncomplete=hwSIPResp4AddrIncomplete, hwSIPPasswordType=hwSIPPasswordType, hwSIPMIB=hwSIPMIB, hwSIPServerMIB=hwSIPServerMIB, hwSIPClientMIB=hwSIPClientMIB, hwSIPOKInvites=hwSIPOKInvites, hwSIPOKAcks=hwSIPOKAcks, hwSIPResp4UnsupportedMediaType=hwSIPResp4UnsupportedMediaType, hwSIPResp5MessageTooLarge=hwSIPResp5MessageTooLarge, hwSIPOKByes=hwSIPOKByes, hwSIPResp4BusyHere=hwSIPResp4BusyHere, hwSIPServerIPAddress=hwSIPServerIPAddress, hwSIPResp4ReqEntityTooLarge=hwSIPResp4ReqEntityTooLarge, hwSIPResp3Other=hwSIPResp3Other, hwSIPTrapsControl=hwSIPTrapsControl, hwSIPRegisterFailReason=hwSIPRegisterFailReason, hwSIPOKInfos=hwSIPOKInfos, hwSIPClientMIBObjects=hwSIPClientMIBObjects, hwSIPTransport=hwSIPTransport, hwSIPInvites=hwSIPInvites, hwSIPServerConfigEntry=hwSIPServerConfigEntry, hwSIPCallDebugSwitch=hwSIPCallDebugSwitch, hwSIPResp4NotFound=hwSIPResp4NotFound, PYSNMP_MODULE_ID=hwSIPMIB, hwSIPResp4ProxyAuthRequired=hwSIPResp4ProxyAuthRequired, hwSIPResp5Other=hwSIPResp5Other, hwSIPAcks=hwSIPAcks, hwSIPServerSwitch=hwSIPServerSwitch, hwSIPErrorDebugSwitch=hwSIPErrorDebugSwitch, hwSIPResp5BadGateway=hwSIPResp5BadGateway, hwSIPResp4UnsupportedURIScheme=hwSIPResp4UnsupportedURIScheme, hwSIPCallPrimitiveDebugSwitch=hwSIPCallPrimitiveDebugSwitch, hwSIPAcceptType=hwSIPAcceptType, hwSIPResp4MethodNotAllowed=hwSIPResp4MethodNotAllowed, hwSIPResp4Unauthorized=hwSIPResp4Unauthorized, hwSIPRegPrimitiveDebugSwitch=hwSIPRegPrimitiveDebugSwitch, hwSIPResp3UseProxy=hwSIPResp3UseProxy, hwSIPResp3MultipleChoice=hwSIPResp3MultipleChoice, hwSIPResp5GatewayTimeout=hwSIPResp5GatewayTimeout, hwSIPAuthenticatedRequestMethord=hwSIPAuthenticatedRequestMethord, hwSIPCancels=hwSIPCancels, hwSIPOKCancels=hwSIPOKCancels, hwSIPInfos=hwSIPInfos, hwSIPPracks=hwSIPPracks, hwSIPPassword=hwSIPPassword, hwSIPOKRegisters=hwSIPOKRegisters, hwSIPWarningDebugSwitch=hwSIPWarningDebugSwitch, hwSIPResp4Forbidden=hwSIPResp4Forbidden, hwSIPServerPort=hwSIPServerPort, hwSIPClientNotifications=hwSIPClientNotifications, hwSIPServerStatus=hwSIPServerStatus, hwSIPRegisterDebugSwitch=hwSIPRegisterDebugSwitch, hwSIPRegisterFailure=hwSIPRegisterFailure, hwSIPResp4NotAcceptable=hwSIPResp4NotAcceptable, hwSIPStatisticClear=hwSIPStatisticClear, hwSIPStatisticObjects=hwSIPStatisticObjects, hwSIPResp3MovedTemporarily=hwSIPResp3MovedTemporarily, hwSIPResp4ReqURITooLarge=hwSIPResp4ReqURITooLarge, hwSIPResp6xx=hwSIPResp6xx, hwSIPID=hwSIPID, hwSIPServerConfigTable=hwSIPServerConfigTable)
