#
# PySNMP MIB module CIG-CLIENTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIG-CLIENTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, MibIdentifier, Gauge32, enterprises, Bits, NotificationType, ObjectIdentity, iso, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "MibIdentifier", "Gauge32", "enterprises", "Bits", "NotificationType", "ObjectIdentity", "iso", "Counter64", "ModuleIdentity")
DisplayString, TextualConvention, TimeInterval, DateAndTime, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeInterval", "DateAndTime", "RowStatus", "TruthValue")
cigClients = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17))
if mibBuilder.loadTexts: cigClients.setLastUpdated('200910251352Z')
if mibBuilder.loadTexts: cigClients.setOrganization('Avaya')
if mibBuilder.loadTexts: cigClients.setContactInfo(' Avaya Customer Services Postal: Avaya, Inc. 211 Mt Airy Rd. Basking Ridge, NJ 07920 USA Tel: +1 908 953 6000 WWW: http://www.avaya.com ')
if mibBuilder.loadTexts: cigClients.setDescription(" This module defines the cig Clients. The first client in the DHCP client used for getting dynamic IP address and configuration parameters from DHCP server.The DHCP client will be a function of interfaces. The second client is DNS resolver client. Copyright notice: This AVAYA SNMP Management Information Base Specification (Specification) embodies AVAYA confidential and Proprietary intellectual property. AVAYA retains all Title and ownership in the Specification, including any revisionsIt is AVAYA's intent to encourage the widespread use of this Specification in connection with the management of AVAYA products. AVAYA grants vendors, end-users, and other interested parties a non-exclusive license to use this Specification in connection with the management of AVAYA products.This Specification is supplied 'as is', and AVAYA makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification. ")
avaya = MibIdentifier((1, 3, 6, 1, 4, 1, 6889))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2))
lsg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1))
cigDhcpClients = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1))
cigDnsResolver = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2))
cigDhcpClientsNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 0))
cigDhcpClientsConflictDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 0, 1)).setObjects(("CIG-CLIENTS-MIB", "cigDhcpClientsIfAlias"), ("CIG-CLIENTS-MIB", "cigDhcpClientsIPAddress"), ("CIG-CLIENTS-MIB", "cigDhcpClientsHostName"), ("CIG-CLIENTS-MIB", "cigDhcpClientsClientId"), ("CIG-CLIENTS-MIB", "cigDhcpClientsServerIpAddr"))
if mibBuilder.loadTexts: cigDhcpClientsConflictDetectionTrap.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsConflictDetectionTrap.setDescription('DHCP IP address conflict detection. This trap is based on: The Client Decline Packets after the client sent gratuitous Arp and get response which implies that another station use this IP address.')
cigDhcpClientsTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1), )
if mibBuilder.loadTexts: cigDhcpClientsTable.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsTable.setDescription('cigDhcpClientsTable parameters. Used for DHCP clients which gathered dynamic IP addresses and configuration from DHCP servers.')
cigDhcpClientsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDhcpClientsIfIndex"))
if mibBuilder.loadTexts: cigDhcpClientsEntry.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsEntry.setDescription('cigDhcpClients Entry Parameters.')
cigDhcpClientsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsIfIndex.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsIfIndex.setDescription('A unique value for each interface. This value is same as ifIndex from ifTable. The DHCP client can be enabled on Vlan and on WAN Fast Ethernet interfaces. ')
cigDhcpClientsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsRowStatus.setDescription(' This is a row status mib item For adding and deleting DHCP clients interfaces. For configuring only DHCP client parameters use create and wait for specific interface. When activating the DHCP client, activate the row. Activating the row will create a new row in the ipDynamic Table in CROUTE-MIB that presents dynamic ipInterface. Deactivating the DHCP client will cause to erasing the row in the ipDynamic Mib table and deactivating the DHCP client row in order to keep the specific DHCP parameters which already were configured. ')
cigDhcpClientsIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsIfAlias.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsIfAlias.setDescription("This object is an 'alias' name for the lower-layer interface on top of which this IP interface is defined. It is the same as the ifAlias from the standard interface table.")
cigDhcpClientsIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsIPAddress.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsIPAddress.setDescription('The IP address received from remote peer during the DHCP session. This is the same MIB item as ipInterface table in CROUTE-MIB.')
cigDhcpClientsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsSubnetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0. In case of DHCP client this is DHCP option 1 == Subnet Mask. This is the same MIB item as ipInterface table in CROUTE-MIB.')
cigDhcpClientsClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsClientId.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsClientId.setDescription("Client identifier used for manual leased. The structure of the client identifier is as follows: combination of TYPE and Data. Where Type = 01 if for Ethernet MACs and Data for this case if Ethernet MAC address. The user can use also other client identifiers as strings. Default: '' - 01:Interface MAC address.")
cigDhcpClientsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsHostName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsHostName.setDescription("Host name is sent by the DHCP client as Dhcp option 12. It is specifically used by part of DHCP servers (MS2000) to identify the client in the binding file (more user intuitive). This option is used as well by part of the DHCP server with the support of DHCP client (sending option 81) to update the DNS server with the new IP for specific host. The format of the string can be: 'usernameA'. The hostname shall comply to RFC 1035 naming convention with the following exceptions: a. allow digits at the start of the name. b. Do not check length constraints of 63 bytes. The default of the host name used by the DHCP client is the device host name.")
cigDhcpClientsRequestLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsRequestLeaseTime.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsRequestLeaseTime.setDescription('The Requested leased time in seconds. Infinite is defined as 0xffffffff. 0 - used to present that no lease time requested from the DHCP server. I.e. option 51 will not be sent by the client. Default 0 seconds.')
cigDhcpClientsReceiveLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsReceiveLeaseTime.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsReceiveLeaseTime.setDescription('The received leased time from the DHCP server in seconds. Infinite is defined as 0xffffffff. Default 0 seconds.')
cigDhcpClientsRemainLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsRemainLeaseTime.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsRemainLeaseTime.setDescription('The remains leased time in seconds . Infinite is defined as 0xffffffff. Default 0 seconds.')
cigDhcpClientsRenewLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsRenewLeaseTime.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsRenewLeaseTime.setDescription('The time defined for renewing phase in seconds . Infinite is defined as 0xffffffff. It is defined as 0.5 of the receive lease. Default 0 seconds.')
cigDhcpClientsRebindLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsRebindLeaseTime.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsRebindLeaseTime.setDescription('The time defined for rebinding phase in seconds . Infinite is defined as 0xffffffff. It is defined as 0.875 of the receive lease. Default 0 seconds.')
cigDhcpClientsDefaultGatewayList = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsDefaultGatewayList.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsDefaultGatewayList.setDescription("Default Gateway is Dhcp option 3. Default = '' = Null String. The format of the string can be up to 8 IP addresses in the list, for example: '121.23.1.12 135.64.13.190 192.123.242.230'")
cigDhcpClientsDnsServerList = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsDnsServerList.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsDnsServerList.setDescription("DNS Server is Dhcp option 6. Default = '' = Null String. The format of the string can be up to 8 IP addresses in the list, for exapmle: '121.23.1.12 135.64.13.190 192.123.242.230'")
cigDhcpClientsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsDomainName.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsDomainName.setDescription("DNS Server is Dhcp option 15. Default = Null String The format of the string can be: 'avaya' There is no ability to configure this option in the general option table. ")
cigDhcpClientsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsServerIpAddr.setDescription('The DHCP server IP address that the client gets from it the IP address allocation and keep requesting for lease extension from it. In case no IP address is gathered from DHCP server then value is 0.0.0.0. Default 0.0.0.0.')
cigDhcpClientsOperations = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("release", 2), ("renew", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsOperations.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsOperations.setDescription('Used for instruct the DHCP client to perfrom release or renew operations.')
cigDhcpClientsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("select", 1), ("request", 2), ("bound", 3), ("rebind", 4), ("renew", 5), ("release", 6), ("decline", 7), ("reboot", 8), ("idle", 9), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDhcpClientsStatus.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsStatus.setDescription('The status of the DHCP client. Select - Sending DISCOVER packets Request - Requesting IP address after selecting from all the offer packets. Bound - Receiving ACK packet and there is no conflict detection by sending ARP packets. Rebind - After 0.875 out of the lease time the renewal phase enter to rebind. Renew - After 0.5 out of the lease time the device try to renew the lease until 0.875 of the lease time. Release - The client release the lease. Decline - The client detect IP conflict by sending ARP packet. Idle - The client did not get IP address and keep trying after an Idle time (~40 seconds) to reach new IP address. ')
cigDhcpClientsRequestBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsRequestBitmap.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsRequestBitmap.setDescription(" Each bit of this value set to '1' indicates a specific requested DHCP option (Bitmap of 255 options represented by 32Bytes). When the bit is set to '1' then specific DHCP option is requested by the client. Subnet mask bit 1 - is always requested. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Numbering continues across octets, so that octet 1 bit 0 is called bit 8. Default: '0x5201' which equals to: bit 1 - Subnet mask (Always requested!) Bit 3 - Default routers Bit 6 - DNS servers Bit 15 - Domain Name")
cigDhcpClientsDefaultRouterTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDhcpClientsDefaultRouterTrackId.setStatus('current')
if mibBuilder.loadTexts: cigDhcpClientsDefaultRouterTrackId.setDescription('Bind the status of the DHCP default router to an object-tracker by specifying the ID of the object-tracker (avstrTrackerId in AVAYA-SAA-TRACK-MIB). A value of 0 means that the default router is not bound to any object-tracker. A value of 0xffffffff is notSupported feature for the relevant default router. ')
cigDnsResolverGenConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1))
cigDnsResolverMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverMode.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverMode.setDescription('Enable the DNS resolver in the device. Default = True (Enable).')
cigDnsResolverRetry = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 2), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverRetry.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverRetry.setDescription('The number of retries for each query for specific DNS server when there is timeout. The range is 0-100.')
cigDnsResolverTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 3), Unsigned32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverTimeout.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverTimeout.setDescription('The timeout in seconds for each query for specific DNS server. The range is 1-3600 seconds.')
cigDnsResolverOperations = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("clearDynamicServers", 2), ("clearDNSCache", 3))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverOperations.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverOperations.setDescription('Used for specific operations for DNS server. clearDynamicServers(2) will clear all the dynamic servers (learnt from PPP interfaces and DHCP clients) from DNS server list. clearDNSCache(3) - Clear the DNS Resolver cache. ')
cigDnsResolverDnsServersListTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2), )
if mibBuilder.loadTexts: cigDnsResolverDnsServersListTable.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServersListTable.setDescription('Lists of DNS servers. The default list(1) includes all the static DNS server and the dynamic DNS servers from the DHCP clients/PPP interfaces as PPPoE and Dial out modem. ')
cigDnsResolverDnsServersListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDnsResolverDnsServersListIndex"))
if mibBuilder.loadTexts: cigDnsResolverDnsServersListEntry.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServersListEntry.setDescription('The DNS servers list. Lists of DNS servers.')
cigDnsResolverDnsServersListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServersListIndex.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServersListIndex.setDescription('The index of the list of DNS servers. Default list index is 1. The user will not be able to create lists other then default list at the first release.')
cigDnsResolverDnsServersListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServersListDescription.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServersListDescription.setDescription("This is the list description. Default for DNS list #1: 'DNS list #1'")
cigDnsResolverDnsServersListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServersListRowStatus.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServersListRowStatus.setDescription('This is a row status mib item For adding and deleting DNS server lists. The user will not be able to create lists other then list 1 at the first release.')
cigDnsResolverDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3), )
if mibBuilder.loadTexts: cigDnsResolverDnsServerTable.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerTable.setDescription('DNS servers. The user can configure up to 6 static servers located in places 1-6. The other indexes are of dynamic servers which can not be created (learnt automatically by the device) but can be erased. The indexes 1-99 are for static servers (only the first 6 are configurable). The indexes 100-199 are for dynamic servers. ')
cigDnsResolverDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDnsResolverDnsServerListIndex"), (0, "CIG-CLIENTS-MIB", "cigDnsResolverDnsServerIndex"))
if mibBuilder.loadTexts: cigDnsResolverDnsServerEntry.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerEntry.setDescription('The DNS server entry. The user can configure up to 6 static servers located in places 1-6. The other indexes are of dynamic servers which can not be created (learnt automatically by the device) but can be erased. The indexes 1-99 are for static servers (only the first 6 are configurable). The indexes 100-199 are for dynamic servers.')
cigDnsResolverDnsServerListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerListIndex.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerListIndex.setDescription('The index of the list of DNS servers. Default list index is 1. The user will not be able to create lists other then default list at the first release.')
cigDnsResolverDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerIndex.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerIndex.setDescription('The index of DNS server in the list of DNS servers. The index presents the preference of the server. The lower the index the higher priority to use it.')
cigDnsResolverDnsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerIpAddress.setDescription('The DNS server IP address.')
cigDnsResolverDnsServerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerIfIndex.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerIfIndex.setDescription('A unique value for each interface. This value is same as ifIndex from ifTable. This field is used when the DNS server is learnt from interface running DHCP client or PPP negotiated (PPPoE/Dial Out modem). This field has no valid value when the type of the DNS server is static.')
cigDnsResolverDnsServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic-dhcp", 2), ("dynamic-ppp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDnsServerType.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerType.setDescription('This is the server type. The user can create new row only when the server type is static. dynamic-dhcp represents DNS server learnt from DHCP client. dynamic-ppp represents DNS server learnt from ppp interface (PPPoE/Dial out modem).')
cigDnsResolverDnsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerRowStatus.setDescription(' This is a row status mib item For adding and deleting DNS servers. The user can add only static servers in locations 1-6. For static servers the operation suppported is CreateAndWait and dynamic servers are automatically created by the device.')
cigDnsResolverDnsServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerInetAddressType.setDescription('The address type of cigDnsResolverDnsServerInetAddress. ')
cigDnsResolverDnsServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 3, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDnsServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDnsServerInetAddress.setDescription('The Inet Address of the dns server. 1. The address type of this object is specified in cigDnsResolverDnsServerInetAddressType. 2. Management applications can use cigDnsResolverDnsServerIpAddress or cigDnsResolverDnsServerInetAddressType/cigDnsResolverDnsServerInetAddress to set IPv4 server address and only cigDnsResolverDnsServerInetAddressType/cigDnsResolverDnsServerInetAddress to set IPv6 server address. 3. The cigDnsResolverDnsServerInetAddressType must always been set before the cigDnsResolverDnsServerInetAddress is set (the avGenOpServerInetAddress must conform to the cigDnsResolverDnsServerInetAddressType). 4. Setting cigDnsResolverDnsServerIpAddress address mib item will change cigDnsResolverDnsServerInetAddressType to IPv4(1) and cigDnsResolverDnsServerInetAddress to IPv4 address configured. 5. Setting cigDnsResolverDnsServerInetAddress as IPv4 address will also set cigDnsResolverDnsServerIpAddress. 6. Setting cigDnsResolverDnsServerInetAddress as IPv6 address will also set cigDnsResolverDnsServerIpAddress to 0.0.0.0. 7. Default of cigDnsResolverDnsServerInetAddressType is unknown(0) and cigDnsResolverDnsServerInetAddress is zero length. 8. Setting cigDnsResolverDnsServerInetAddressType to IPv4 will return cigDnsResolverDnsServerIpAddress and cigDnsResolverDnsServerInetAddressType to default value of 0.0.0.0. Setting genOpServerInetAddressType to value other than IPv4 return cigDnsResolverDnsServerIpAddress to default value of 0.0.0.0 and cigDnsResolverDnsServerInetAddressType to default value of null string. Row status can not be active if cigDnsResolverDnsServerIpAddress or cigDnsResolverDnsServerInetAddressType/cigDnsResolverDnsServerInetAddress are not configured. ')
cigDnsResolverDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4), )
if mibBuilder.loadTexts: cigDnsResolverDomainTable.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDomainTable.setDescription('The domains used by the DNS resolver to add to non full qualified names. I.e. when the host name is not a full host name then these domains are added in order to resolve the non full qulified name. an example for domain is : avaya.com. an example for non qualified name is lantis. Therefore when trying to resolve lantis the suffix avaya.com will be added to create the name lantis.avaya.com')
cigDnsResolverDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1), ).setIndexNames((0, "CIG-CLIENTS-MIB", "cigDnsResolverDomainIndex"))
if mibBuilder.loadTexts: cigDnsResolverDomainEntry.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDomainEntry.setDescription('The Domain entry. The domains used by the DNS resolver to add to non full qualified names. I.e. when the host name is not a full host name then these domains are added in order to resolve the non full qulified name. an example for domain is : avaya.com. an example for non qualified name is lantis. Therefore when trying to resolve lantis the suffix avaya.com will be added to create the name lantis.avaya.com')
cigDnsResolverDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cigDnsResolverDomainIndex.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDomainIndex.setDescription('The index of the domain. The index presents the precedence of the domain. I.e. the lower the index the higher priority this domain is used.')
cigDnsResolverDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDomain.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDomain.setDescription('The Domain shall follow RFC 1035 Host name convention. The following syntax will result in fewer problems with many applications that use domain names (e.g., mail, TELNET). Note that while upper and lower case letters are allowed in domain names, no significance is attached to the case. That is, two names with the same spelling but different case are to be treated as if identical. The labels must follow the rules for ARPANET host names. They must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen. There are also some restrictions on the length. Labels must be 63 characters or less. For example, the following strings identify hosts in the Internet: A.ISI.EDU XX.LCS.MIT.EDU SRI-NIC.ARPA ')
cigDnsResolverDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 17, 2, 4, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cigDnsResolverDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: cigDnsResolverDomainRowStatus.setDescription('This is a row status mib item For adding and deleting domains. The row is created by CreateAndWait. ')
mibBuilder.exportSymbols("CIG-CLIENTS-MIB", cigDnsResolverDnsServerRowStatus=cigDnsResolverDnsServerRowStatus, cigDhcpClients=cigDhcpClients, cigDnsResolverDnsServerIfIndex=cigDnsResolverDnsServerIfIndex, cigDhcpClientsDefaultRouterTrackId=cigDhcpClientsDefaultRouterTrackId, cigDnsResolver=cigDnsResolver, cigDhcpClientsClientId=cigDhcpClientsClientId, cigDhcpClientsDnsServerList=cigDhcpClientsDnsServerList, cigDhcpClientsRequestLeaseTime=cigDhcpClientsRequestLeaseTime, cigDnsResolverDomainTable=cigDnsResolverDomainTable, cigDhcpClientsIPAddress=cigDhcpClientsIPAddress, cigDhcpClientsNotification=cigDhcpClientsNotification, cigDnsResolverMode=cigDnsResolverMode, cigDnsResolverDomainIndex=cigDnsResolverDomainIndex, cigDhcpClientsDefaultGatewayList=cigDhcpClientsDefaultGatewayList, cigDnsResolverDnsServerEntry=cigDnsResolverDnsServerEntry, cigDhcpClientsRenewLeaseTime=cigDhcpClientsRenewLeaseTime, lsg=lsg, cigDhcpClientsServerIpAddr=cigDhcpClientsServerIpAddr, mibs=mibs, cigDnsResolverDomainEntry=cigDnsResolverDomainEntry, cigDnsResolverDnsServersListTable=cigDnsResolverDnsServersListTable, cigDnsResolverDnsServersListIndex=cigDnsResolverDnsServersListIndex, cigDhcpClientsIfAlias=cigDhcpClientsIfAlias, cigDhcpClientsDomainName=cigDhcpClientsDomainName, cigDhcpClientsRowStatus=cigDhcpClientsRowStatus, cigDnsResolverOperations=cigDnsResolverOperations, cigDhcpClientsTable=cigDhcpClientsTable, cigDhcpClientsSubnetMask=cigDhcpClientsSubnetMask, avaya=avaya, cigDhcpClientsStatus=cigDhcpClientsStatus, cigDhcpClientsEntry=cigDhcpClientsEntry, cigDhcpClientsRemainLeaseTime=cigDhcpClientsRemainLeaseTime, cigDhcpClientsRebindLeaseTime=cigDhcpClientsRebindLeaseTime, cigDnsResolverDomain=cigDnsResolverDomain, cigDnsResolverDnsServersListDescription=cigDnsResolverDnsServersListDescription, cigDnsResolverRetry=cigDnsResolverRetry, cigDnsResolverDnsServerListIndex=cigDnsResolverDnsServerListIndex, cigDnsResolverGenConfig=cigDnsResolverGenConfig, cigDnsResolverDomainRowStatus=cigDnsResolverDomainRowStatus, cigDnsResolverDnsServerTable=cigDnsResolverDnsServerTable, cigDhcpClientsOperations=cigDhcpClientsOperations, cigDnsResolverDnsServerIpAddress=cigDnsResolverDnsServerIpAddress, cigDhcpClientsReceiveLeaseTime=cigDhcpClientsReceiveLeaseTime, cigDnsResolverTimeout=cigDnsResolverTimeout, PYSNMP_MODULE_ID=cigClients, cigDhcpClientsIfIndex=cigDhcpClientsIfIndex, cigDnsResolverDnsServersListRowStatus=cigDnsResolverDnsServersListRowStatus, cigDhcpClientsRequestBitmap=cigDhcpClientsRequestBitmap, cigDnsResolverDnsServerIndex=cigDnsResolverDnsServerIndex, cigDhcpClientsHostName=cigDhcpClientsHostName, cigDnsResolverDnsServerType=cigDnsResolverDnsServerType, cigDnsResolverDnsServersListEntry=cigDnsResolverDnsServersListEntry, cigDnsResolverDnsServerInetAddressType=cigDnsResolverDnsServerInetAddressType, cigDnsResolverDnsServerInetAddress=cigDnsResolverDnsServerInetAddress, cigDhcpClientsConflictDetectionTrap=cigDhcpClientsConflictDetectionTrap, cigClients=cigClients)
