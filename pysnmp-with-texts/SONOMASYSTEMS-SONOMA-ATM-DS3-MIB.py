#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-ATM-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-ATM-DS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, Integer32, ObjectIdentity, Counter32, NotificationType, Gauge32, Bits, MibIdentifier, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Integer32", "ObjectIdentity", "Counter32", "NotificationType", "Gauge32", "Bits", "MibIdentifier", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonomaATM, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaATM")
sonomaDS3ATMAdapterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2))
atmDs3ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1))
atmDs3StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2))
atmDs3ConfPhyTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1), )
if mibBuilder.loadTexts: atmDs3ConfPhyTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfPhyTable.setDescription('A table of physical layer configuration for the DS3 interface')
atmDs3ConfPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-DS3-MIB", "atmDs3ConfPhysIndex"))
if mibBuilder.loadTexts: atmDs3ConfPhyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfPhyEntry.setDescription('A entry in the table, containing information about the physical layer of a DS3 interface')
atmDs3ConfPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3ConfPhysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfPhysIndex.setDescription('The physical interface index.')
atmDs3ConfFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("framingDS3", 1), ("framingE3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3ConfFraming.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfFraming.setDescription('DS3 or E3 framing selection.')
atmDs3ConfInsGFCBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfInsGFCBits.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfInsGFCBits.setDescription('Enable/disable the insertion of GFC bits.')
atmDs3ConfSerBipolarIO = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfSerBipolarIO.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfSerBipolarIO.setDescription('Enable/disable bipolar serial I/O.')
atmDs3ConfScramblePld = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfScramblePld.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfScramblePld.setDescription('Enable/disable payload scrambling.')
atmDs3ConfOverheadPLCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfOverheadPLCP.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfOverheadPLCP.setDescription('Enable/disable PLCP processing.')
atmDs3ConfGenerateFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfGenerateFEBE.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfGenerateFEBE.setDescription('Enable/disable FEBE generation when F, M, or CP bit errors received.')
atmDs3ConfGenerateFEAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfGenerateFEAC.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfGenerateFEAC.setDescription('Enable/disable FEAC generation and detection.')
atmDs3ConfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("internal", 2), ("external", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfLoopback.setDescription('Enable/disable internal loopback.')
atmDs3ConfCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notGreaterThan225Feet", 1), ("greaterThan225Feet", 2))).clone('notGreaterThan225Feet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfCableLength.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfCableLength.setDescription('Configure for the length of the cable.')
atmDs3ConfInternalEqualizer = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("bypass", 2))).clone('use')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfInternalEqualizer.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfInternalEqualizer.setDescription('Configure to use or bypass the internal equalizer.')
atmDs3ConfFillerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfFillerCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfFillerCells.setDescription('This parameter indicates the type of filler cells to send when there are no data cells.')
atmDs3ConfGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3ConfGenerateClock.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3ConfGenerateClock.setDescription('Enable/disable clock generation.')
atmDs3PhyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1), )
if mibBuilder.loadTexts: atmDs3PhyStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3PhyStatsTable.setDescription('A table of physical layer statistics information for the DS3 interface')
atmDs3PhyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-ATM-DS3-MIB", "atmDs3PhyStatsPhysIndex"))
if mibBuilder.loadTexts: atmDs3PhyStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3PhyStatsEntry.setDescription('A entry in the table, containing information about the physical layer of a DS3 interface')
atmDs3PhyStatsPhysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3PhyStatsPhysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3PhyStatsPhysIndex.setDescription('The physical interface index.')
atmDs3StatsAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsAlarms.setDescription('Test the PLCP alarm counter')
atmDs3StatsNoSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsNoSignals.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsNoSignals.setDescription('No signal error counter.')
atmDs3StatsNoDs3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsNoDs3Frames.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsNoDs3Frames.setDescription('No DS-3 frame error counter.')
atmDs3StatsAisDetects = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsAisDetects.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsAisDetects.setDescription('AIS detect counter.')
atmDs3StatsFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsFrameErrs.setDescription('Frame error counter.')
atmDs3StatsParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsParityErrs.setDescription('Parity error counter.')
atmDs3StatsCpErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsCpErrs.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsCpErrs.setDescription('CP error counter.')
atmDs3StatsFeBlockErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsFeBlockErrs.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsFeBlockErrs.setDescription('Far End Block error counter.')
atmDs3StatsBpvErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsBpvErrs.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsBpvErrs.setDescription('Bipolar Violation error counter.')
atmDs3StatsRemoteAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsRemoteAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsRemoteAlarms.setDescription('Bipolar Violation error counter.')
atmDs3StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsSignalLoss.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsSignalLoss.setDescription('Signal loss indication.')
atmDs3StatsOutOfCell = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsOutOfCell.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsOutOfCell.setDescription('ATM out-of-cell delineation.')
atmDs3StatsFifoOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsFifoOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsFifoOverflow.setDescription('ATM FIFO overflow.')
atmDs3StatsRemoteAlarmInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsRemoteAlarmInd.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsRemoteAlarmInd.setDescription('Remote alarm indication.')
atmDs3StatsFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsFrameLoss.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsFrameLoss.setDescription('Frame loss indication.')
atmDs3StatsSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsSyncLoss.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsSyncLoss.setDescription('Synchronization loss counter.')
atmDs3StatsPlcpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsPlcpAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsPlcpAlarmState.setDescription('Test the PLCP alarm state.')
atmDs3StatsAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDs3StatsAisState.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsAisState.setDescription('AIS detect LED state.')
atmDs3StatsClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 7, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDs3StatsClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: atmDs3StatsClearCounters.setDescription('Clear all counters in this group ONLY.')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-ATM-DS3-MIB", sonomaDS3ATMAdapterGroup=sonomaDS3ATMAdapterGroup, atmDs3ConfFillerCells=atmDs3ConfFillerCells, atmDs3ConfInsGFCBits=atmDs3ConfInsGFCBits, atmDs3PhyStatsEntry=atmDs3PhyStatsEntry, atmDs3ConfPhysIndex=atmDs3ConfPhysIndex, atmDs3StatsFrameErrs=atmDs3StatsFrameErrs, atmDs3StatsPlcpAlarmState=atmDs3StatsPlcpAlarmState, atmDs3ConfScramblePld=atmDs3ConfScramblePld, atmDs3ConfGenerateFEAC=atmDs3ConfGenerateFEAC, atmDs3ConfOverheadPLCP=atmDs3ConfOverheadPLCP, atmDs3StatsFeBlockErrs=atmDs3StatsFeBlockErrs, atmDs3ConfCableLength=atmDs3ConfCableLength, atmDs3ConfPhyTable=atmDs3ConfPhyTable, atmDs3StatsAisDetects=atmDs3StatsAisDetects, atmDs3StatsParityErrs=atmDs3StatsParityErrs, atmDs3StatsSyncLoss=atmDs3StatsSyncLoss, atmDs3StatsNoSignals=atmDs3StatsNoSignals, atmDs3ConfInternalEqualizer=atmDs3ConfInternalEqualizer, atmDs3ConfSerBipolarIO=atmDs3ConfSerBipolarIO, atmDs3StatsFrameLoss=atmDs3StatsFrameLoss, atmDs3ConfFraming=atmDs3ConfFraming, atmDs3StatsAisState=atmDs3StatsAisState, atmDs3StatsFifoOverflow=atmDs3StatsFifoOverflow, atmDs3StatsSignalLoss=atmDs3StatsSignalLoss, atmDs3PhyStatsTable=atmDs3PhyStatsTable, atmDs3PhyStatsPhysIndex=atmDs3PhyStatsPhysIndex, atmDs3StatsOutOfCell=atmDs3StatsOutOfCell, atmDs3StatsAlarms=atmDs3StatsAlarms, atmDs3ConfGenerateFEBE=atmDs3ConfGenerateFEBE, atmDs3StatsRemoteAlarms=atmDs3StatsRemoteAlarms, atmDs3StatsClearCounters=atmDs3StatsClearCounters, atmDs3StatsCpErrs=atmDs3StatsCpErrs, atmDs3StatsRemoteAlarmInd=atmDs3StatsRemoteAlarmInd, atmDs3StatsGroup=atmDs3StatsGroup, atmDs3StatsNoDs3Frames=atmDs3StatsNoDs3Frames, atmDs3ConfGenerateClock=atmDs3ConfGenerateClock, atmDs3StatsBpvErrs=atmDs3StatsBpvErrs, atmDs3ConfPhyEntry=atmDs3ConfPhyEntry, atmDs3ConfGroup=atmDs3ConfGroup, atmDs3ConfLoopback=atmDs3ConfLoopback)
