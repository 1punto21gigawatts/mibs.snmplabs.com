#
# PySNMP MIB module Wellfleet-SDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, MibIdentifier, Gauge32, NotificationType, IpAddress, ObjectIdentity, iso, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "MibIdentifier", "Gauge32", "NotificationType", "IpAddress", "ObjectIdentity", "iso", "Integer32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfSdlcGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSdlcGroup")
wfSdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 1))
wfSdlcDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete SDLC.')
wfSdlcDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable SDLC.')
wfSdlcState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcState.setDescription('The current state of SDLC.')
wfSdlcPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2), )
if mibBuilder.loadTexts: wfSdlcPortAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminTable.setDescription("-- THE SDLC PORT ADMINISTRATIVE TABLE 'This table contains objects that can be changed to manage an SDLC port. Changing one of these parameters take effect in the operating port immediately or may wait until the interface is restarted depending on the object. Most of the objects in this read-write table have corresponding read-only objects in the wfSdlcPortOperTable that return the current opeating value. The operating values may be different from these configured values if a configured parameter was changed after the interface was started.")
wfSdlcPortAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1), ).setIndexNames((0, "Wellfleet-SDLC-MIB", "wfSdlcPortAdminIndex"))
if mibBuilder.loadTexts: wfSdlcPortAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminEntry.setDescription('A list of configured values for an SDLC port')
wfSdlcPortAdminDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminDelete.setDescription('Create/Delete Port')
wfSdlcPortAdminDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminDisable.setDescription('Enable/Disable Port')
wfSdlcPortAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortAdminIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminIndex.setDescription('The ifIndex value for the SDLC port.This is equivalent to the circuit number for this interface.')
wfSdlcPortAdminAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminAddress4.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminAddress4.setDescription('A string of 4 bytes that defines the physical port to which this interface is assigned. Its value shall be unique within the administered system. It must contain only ASCII printable characters. A write operation shall not take effect until the port is cycled inactive.')
wfSdlcPortAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2))).clone('leased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminType.setDescription('This parameter defines whether the SDLC port is to connect to a leased or switched line. A write operation to this administrative value shall not take effect until the SDLC port has been cycled inactive.')
wfSdlcPortAdminTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptop", 1), ("multipoint", 2))).clone('ptop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminTopology.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminTopology.setDescription('This parameter defines whether the SDLC port is to operate in a point-to-point or multidropped topology. A write operation to this administrative value shall not take effect until the SDLC port has been cycled inactive.')
wfSdlcPortAdminACTIVTO = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminACTIVTO.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminACTIVTO.setDescription('This parameter defines the period of time, in seconds,(0....120) the port will allow a switched line to remain inactive ( no I-Frames) before disconnecting. A value of zero indicates no timeout. A write operation to this administered value will not take effect until the port is cycled inactive.')
wfSdlcPortAdminPAUSE = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminPAUSE.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminPAUSE.setDescription('This object defines the minimum elapsed time, (1.......600) in tenths of seconds, between any two traversals of the poll list for a primary SDLC port. This object has meaning for primary SDLC ports only. A write operation to this administered value will not take effect until the port is cycled inactive.')
wfSdlcPortAdminCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminCredit.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminCredit.setDescription('This field is used to regulate the flow of data from the DLC Interface to the DLC client.')
wfSdlcPortAdminIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(6000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminIdleTimer.setDescription("This timer is used as a 'watch-dog' for a completely inactive line. The timer is specified in milliseconds.")
wfSdlcPortAdminIdleRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminIdleRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminIdleRetry.setDescription('The number of times to rerun the idle timer before failure.')
wfSdlcPortAdminNPRcvTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminNPRcvTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminNPRcvTimer.setDescription('The Non-Productive receive timeout corresponds to the time allowed for receipt of a valid frame from the secondary. The timer is specified in milliseconds.')
wfSdlcPortAdminNPRcvRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminNPRcvRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminNPRcvRetry.setDescription('The Non-Productive receive retry limit is used in conjunction with the timeout value to provide the overall time before an outage message is issued.')
wfSdlcPortAdminWriteTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminWriteTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminWriteTimer.setDescription('The maximum amount of time allowed to transmit a complete frame. The timer is specified in milliseconds.')
wfSdlcPortAdminWriteRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminWriteRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminWriteRetry.setDescription('The write timer retry limit is used in conjunction with the timeout value to provide the overall time before an outage message is issued.')
wfSdlcPortAdminLinkConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminLinkConnTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminLinkConnTimer.setDescription('The Link connection timeout together with the retry limit corresponds to the time interval spent waiting. The timer is specified in milliseconds.')
wfSdlcPortAdminLinkConnRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminLinkConnRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminLinkConnRetry.setDescription("The Link connection retry limit specifies the number of times the link has been tested for a connection before it fails the pending activate port request.'")
wfSdlcPortAdminPriFdplx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminPriFdplx.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminPriFdplx.setDescription('Primary SDLC station is full-duplex or not')
wfSdlcPortAdminSecFdplx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminSecFdplx.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminSecFdplx.setDescription('Secondary SDLC station is full-duplex or not')
wfSdlcPortAdminUseRej = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminUseRej.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminUseRej.setDescription('Whether REJ are in use for out of sequence I-frames')
wfSdlcPortAdminPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("leased", 1), ("dialout", 2), ("autoanswer", 3), ("autoanswerdialout", 4), ("mandialout", 5), ("mananswer", 6), ("mananswerdialout", 7))).clone('leased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminPortType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminPortType.setDescription('Type of port 1 - Leased Line 2 - Switched Line with dial out capabilities 3 - Switched Line with auto answer capabilities 4 - Switched Line with auto answer and dial out capabilities 5 - Switched Line with manual dial out capabilities 6 - Switched Line with manual answer capabilities 7 - Switched Line with manual answer and dial out capabilities ')
wfSdlcPortAdminMaxXidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminMaxXidSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminMaxXidSize.setDescription('Maximum XID size')
wfSdlcPortAdminMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminMaxRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminMaxRetryCount.setDescription('Maximum number of times that a frame can be retransmitted.')
wfSdlcPortAdminMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(265, 521, 1033, 2057, 4105))).clone(namedValues=NamedValues(("pdu0265", 265), ("pdu0521", 521), ("pdu1033", 1033), ("pdu2057", 2057), ("pdu4105", 4105))).clone('pdu1033')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminMaxFrameSize.setDescription('Maximum frame size supported by this DLC.')
wfSdlcPortAdminDlcName8 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminDlcName8.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminDlcName8.setDescription('A string of 8 bytes that names this DLC. Its value shall be unique within the administered system. It must contain only ASCII printable characters. A write operation shall not take effect until the port is cycled inactive.')
wfSdlcPortAdminCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("learn", 1), ("len", 2), ("network", 3), ("end", 4), ("vrn", 5))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminCpType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminCpType.setDescription('type of CP 1 - LEARN NODE 2 - LEN NODE 3 - NETWORK NODE 2 - END NODE 5 - VRN NODE ')
wfSdlcPortAdminLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("neg", 1), ("pri", 2), ("sec", 3))).clone('pri')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminLsRole.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminLsRole.setDescription('Link Station Role 1 - Negotiable 2 - Primary 3 - Secondary ')
wfSdlcPortAdminPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminPortNumber.setDescription('Port Number, unique within this system.')
wfSdlcPortAdminLsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminLsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminLsAddress.setDescription('Link Station Address. This object has meaning if this link station is a secondary link station.')
wfSdlcPortAdminTotLsActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminTotLsActLim.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminTotLsActLim.setDescription('Total link station activation limit.')
wfSdlcPortAdminInLsActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminInLsActLim.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminInLsActLim.setDescription('Inbound link station activation limit.')
wfSdlcPortAdminOutLsActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminOutLsActLim.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminOutLsActLim.setDescription('Outbound link station activation limit.')
wfSdlcPortAdminNegLsSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminNegLsSupp.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminNegLsSupp.setDescription('Whether the DLC supports Negoatible connections')
wfSdlcPortAdminRcvPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminRcvPoolSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminRcvPoolSize.setDescription('Receive Buffer pool size.')
wfSdlcPortAdminStatsColl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminStatsColl.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminStatsColl.setDescription('Whether Stats collection is turned on for this port.')
wfSdlcPortAdminDebugFlg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcPortAdminDebugFlg.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortAdminDebugFlg.setDescription('Debug Flag, Enables/Disables debug log messages.')
wfSdlcPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3), )
if mibBuilder.loadTexts: wfSdlcPortOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperTable.setDescription('This table contains current SDLC port parameters. Many of these objects have corresponding objects inthe wfSdlcPortAdmnTable.')
wfSdlcPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1), ).setIndexNames((0, "Wellfleet-SDLC-MIB", "wfSdlcPortOperIndex"))
if mibBuilder.loadTexts: wfSdlcPortOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperEntry.setDescription('Currently set parameters for a specific SDLC port')
wfSdlcPortOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperIndex.setDescription('The ifIndex value for the SDLC port. This value reflects the circuit number for this interface.')
wfSdlcPortOperAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperAddress4.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperAddress4.setDescription('An octet string that describes the physical port to which this interface is currently attached.')
wfSdlcPortOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("sec", 1), ("pri", 2), ("neg", 4))).clone('pri')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperRole.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperRole.setDescription('Link Station Role 1 - Secondary 2 - Primary 4 - Negotiable')
wfSdlcPortOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2))).clone('leased')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperType.setDescription('This parameter defines whether the SDLC port is currently operating as though connected to a leased or switched line.')
wfSdlcPortOperTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ptop", 1), ("multipoint", 2))).clone('multipoint')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperTopology.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperTopology.setDescription('This parameter defines whether the SDLC port is currently operating in a point-to-point or multi dropped topology.')
wfSdlcPortOperACTIVTO = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperACTIVTO.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperACTIVTO.setDescription('This parameter describes the period of time, in seconds, the port will allow a switched line to remain inactive ( no I-Frames) before disconnecting. A value of zero indicates no timeout.')
wfSdlcPortOperPAUSE = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperPAUSE.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperPAUSE.setDescription('This object describes the current minimum elapsed time, in tenths of seconds, between any two traversals of the poll list for a primary SDLC port. This object has meaning for primary SDLC ports only.')
wfSdlcPortOperSlowPollMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("servlim", 1), ("pause", 2), ("other", 3))).clone('pause')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperSlowPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperSlowPollMethod.setDescription('This object defines the exact method that is in effect for periodically polling failed secondary link station addresses.')
wfSdlcPortOperSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperSlowPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperSlowPollTimer.setDescription('This object describes the elapsed time, in 1/100ths of seconds, between polls for failed secondary link station addresses.')
wfSdlcPortOperAbmSuppInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notsupported", 2))).clone('notsupported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperAbmSuppInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperAbmSuppInd.setDescription('Specifies whether Asynchronous Balanced Mode is supported.')
wfSdlcPortOperSimRimSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notsupported", 2))).clone('supported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperSimRimSupp.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperSimRimSupp.setDescription('Specifies whether SDLC RIM or SIM initialization options are supported.')
wfSdlcPortOperSecInitNonactSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notsupported", 2))).clone('notsupported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortOperSecInitNonactSupp.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortOperSecInitNonactSupp.setDescription('Specifies whether secondary-initiated nonactivation XID support is provided.')
wfSdlcPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 4), )
if mibBuilder.loadTexts: wfSdlcPortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortStatsTable.setDescription("-- This table shall keep only physical statistics about a port. 'Each entry in this table contains statistics for a specific SDLC port.")
wfSdlcPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 4, 1), ).setIndexNames((0, "Wellfleet-SDLC-MIB", "wfSdlcPortStatsIndex"))
if mibBuilder.loadTexts: wfSdlcPortStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortStatsEntry.setDescription('A list of statistics for an SDLC port')
wfSdlcPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortStatsIndex.setDescription('The ifIndex value for the SDLC port.')
wfSdlcPortStatsDwarfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcPortStatsDwarfFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcPortStatsDwarfFrames.setDescription('This object reflects the total number of frames received by this port which were delivered intact by the physical layer but were too short to be legal.')
wfSdlcLSAdminTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5), )
if mibBuilder.loadTexts: wfSdlcLSAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminTable.setDescription("The following classes of information is modelled for each SDLC link station: -- -- 1. ADMINISTRATIVE ( read/write) -- 2. OPERATIONAL ( read-only) -- 3. STATISTICS ( read-only) -- -- THE SDLC LINK STATION ADMINISTRATIVE TABLE 'This table contains objects that can be changed to manage an SDLC link station. These parameters are per Link Station. Changing one of these parameters may take effect in the operating link immediately or may wait until the link is restarted depending on the object. Most of the objects in this read-write table have corresponding read-only objects in the wfSdlcLSOperTable that return the current operating value. The operating values may be different from these configured values if changed by XID negotiation or if a configured parameter was changed after the link was started.")
wfSdlcLSAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1), ).setIndexNames((0, "Wellfleet-SDLC-MIB", "wfSdlcLSAdminIfIndex"), (0, "Wellfleet-SDLC-MIB", "wfSdlcLSAdminAddress"))
if mibBuilder.loadTexts: wfSdlcLSAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminEntry.setDescription('A list of configured values for an SDLC link')
wfSdlcLSAdminDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminDelete.setDescription('Create/Delete Link Station')
wfSdlcLSAdminDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminDisable.setDescription('This object controls the desired state of the SDLC station.')
wfSdlcLSAdminIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSAdminIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminIfIndex.setDescription('The ifIndex value for the SDLC port which owns this link station. This is equivalent to the circuit number for this interface.')
wfSdlcLSAdminAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSAdminAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminAddress.setDescription('This value is the poll address of the secondary link station for this SDLC link. It uniquely identifies the SDLC link station within a single SDLC port.')
wfSdlcLSAdminGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminGroupAddress.setDescription('This value is the group poll address of the secondary link station for this SDLC link. If this link station is not part of a group, this address will be NULL.')
wfSdlcLSAdminRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("negot", 1), ("primary", 2), ("sec", 3), ("msec", 4))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminRole.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminRole.setDescription('This object describes the role that the link station shall assume the next time a connection is established.')
wfSdlcLSAdminMAXDATA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(265, 521, 1033, 2057, 4105))).clone(namedValues=NamedValues(("pdu0265", 265), ("pdu0521", 521), ("pdu1033", 1033), ("pdu2057", 2057), ("pdu4105", 4105))).clone('pdu1033')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminMAXDATA.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminMAXDATA.setDescription('This object controls the maximum PDU size allowed for the logical link. This value includes the Transmission Header (TH) and Request Header (RH). A write operation to this administrative value will not change the operational value, wfSdlcLSOperMAXDATA, until the link station hasbeen cycled inactive.')
wfSdlcLSAdminREPLYTO = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminREPLYTO.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminREPLYTO.setDescription('This object controls the reply timeout, in tenths of seconds, (1....600) for an SDLC link station. If the link station does not receive a repsonse to a poll or message before the specified time expires then the appropriate error recovery shall be initiated. A write operation to this administered value will not change the operational value, wfSdlcLSOperREPLYTO, until the link station is cycled inactive. This object has no meaning for secondary SDLC link stations.')
wfSdlcLSAdminMAXIN = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminMAXIN.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminMAXIN.setDescription('This object controls the maximum number, (1.....127) of unacknowledged frames which an SDLC link station may receive. This will range from one to modulus minus one. The modulus is controlled by the object: wfSdlcLSAdminModulus. A write operation to this administered value will not change the operational value, wfSdlcLSOperMAXIN, until the link station is cycled inactive.')
wfSdlcLSAdminMAXOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminMAXOUT.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminMAXOUT.setDescription('This object controls the maximum consequetive unacknowledged frames, (1.....127) which an SDLC link station shall send without an acknowledgement. This shall range from one to modulus minus one. The modulus is controlled by the object: wfSdlcLSAdminMODULO. A write operation to this administered value will not change the operational value, wfSdlcLSOperMAXOUT, until the link station is cycled inactive.')
wfSdlcLSAdminMODULO = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("default", 8), ("extended", 128))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminMODULO.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminMODULO.setDescription('This object controls the modulus, (8,128) for an SDLC link station. This modulus determines the size of the rotating acknowledgement window used the SDLC link station pair A write operation to this administered value will not change the operational value, wfSdlcLSOperMAXOUT, until the link station is cycled inactive.')
wfSdlcLSAdminRETRIESm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminRETRIESm.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminRETRIESm.setDescription('This object controls number of retries, ( 1.....128) in a retry sequence for an SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The number of times that the retry sequence is to be repeated is controlled by the object: wfSdlcLSOperRETRIESn. The interval between retry sequences is controlled by the object: wfSdlcLSOperRETRIESt. A write operation to this administered value will not change the operational value, wfSdlcLSOperRETRIESm, until the link station is cycled inactive.')
wfSdlcLSAdminRETRIESt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminRETRIESt.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminRETRIESt.setDescription('This object controls the interval, in seconds, (0....255) between retry sequences for an SDLC link station if multiple retry sequences are specified . A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The number of repeated retries sequences is controlled by the object: wfSdlcLSAdminRETRIESn. The retries per sequence is controlled by the object: wfSdlcLSAdminRETRIESm. A write operation to this administered value will not change the operational value, wfSdlcLSOperRETRIESt, until the link station is cycled inactive.')
wfSdlcLSAdminRETRIESn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminRETRIESn.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminRETRIESn.setDescription('This object controls the number of times, (1....127) that a retry sequence is repeated for an SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The interval between retry sequences is controlled by the object: wfSdlcLSAdminRETRIESn. The retries per sequence is controlled by the object: wfSdlcLSAdminRETRIESm. A write operation to this administered value will not change the operational value, wfSdlcLSOperRETRIESn, until the link station is cycled inactive.')
wfSdlcLSAdminRNRLIMIT = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminRNRLIMIT.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminRNRLIMIT.setDescription('This object controls the length of time, in minutes, (1.....90) that an SDLC link station will allow its adjacent link station to remain in a busy (RNR) state before declaring it inoperative. A write operation to this administered value will not change the operational value, wfSdlcLSOperRNRLIMIT, until the link station is cycled inactive.')
wfSdlcLSAdminContTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminContTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminContTimer.setDescription('This object controls the timeout required before a SNRM or XID is retransmitted in the event of non-acknowledgement. Used for Primary SDLC only. The value must be greater then the no response (T1) timeout value (no_resp_timer) The timer is specified in milliseconds.')
wfSdlcLSAdminContTimerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminContTimerRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminContTimerRetry.setDescription('This object controls the number of times transmission and retransmission of a contact frame (e.g. SNRM) is allowed before switching to the slow poll timer.')
wfSdlcLSAdminContTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminContTimer2.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminContTimer2.setDescription('This object controls the slow poll contact timer in milliseconds. When the contact timer retry count expires, polling will continue using this timer.')
wfSdlcLSAdminContTimer2Retry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminContTimer2Retry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminContTimer2Retry.setDescription('This object controls the number of times transmission and retransmission of a contact frame (e.g. SNRM) is allowed before an outage message is sent to the DLC user.')
wfSdlcLSAdminDiscTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminDiscTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminDiscTimer.setDescription('This object controls the time in milliseconds before a DISC is retransmitted in the event of non-acknowledgement (for primary SDLC only).')
wfSdlcLSAdminDiscTimerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminDiscTimerRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminDiscTimerRetry.setDescription('This object controls the number of times transmission and retransmission of a DISC is allowed.')
wfSdlcLSAdminNvePollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimer.setDescription('This object controls the timeout required before an adjacent secondary station is re-inserted into the polling list after being removed for non-response. The time is specified in milliseconds.')
wfSdlcLSAdminNvePollTimerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimerRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimerRetry.setDescription('This object controls the number of times a station is removed from the polling list on the normal poll timer before switching to the slow poll timer.')
wfSdlcLSAdminNvePollTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimer2.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimer2.setDescription('The slow negative poll timer in milliseconds. When the negative poll timer count expires, the poll will continue by using this timer.')
wfSdlcLSAdminNvePollTimer2Retry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimer2Retry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminNvePollTimer2Retry.setDescription('This object controls the number of times a station is removed from the polling list before an outage message is sent to a client.')
wfSdlcLSAdminNoRespTimerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminNoRespTimerRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminNoRespTimerRetry.setDescription('This object controls the number of times an adjacent secondary station is seen to fail to respond before an outage message is sent to a client.')
wfSdlcLSAdminRemBusyTimerRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminRemBusyTimerRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminRemBusyTimerRetry.setDescription('The Remote busy retry limit value is user with the timeout value to provide the overall timeout before an outage message is sent to a client.')
wfSdlcLSAdminRRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminRRTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminRRTimer.setDescription('The RR Turn-around timer is in milliseconds. It is the time that DLC waits before turning the poll bit around when it has no work to do.')
wfSdlcLSAdminGpAddName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminGpAddName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminGpAddName.setDescription('The address of the group to which this link station belongs. This object is only used in association with group polling. It is 4 bytes of ASCII.')
wfSdlcLSAdminPollFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(83, 147, 191, 223, 243))).clone(namedValues=NamedValues(("disc", 83), ("snrm", 147), ("xid", 191), ("snrme", 223), ("test", 243))).clone('xid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminPollFrame.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminPollFrame.setDescription('The frame to use for pre-activation polling. This is normally set to XID to show that polling is in the control of the DLC user.')
wfSdlcLSAdminPollOnIframe = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminPollOnIframe.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminPollOnIframe.setDescription('Flag whether this link station is permitted to send the poll bit on an I-frame. Certain SDLC implementations do not handle receipt of I-frames carrying the poll bit.')
wfSdlcLSAdminLinkStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminLinkStationName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminLinkStationName.setDescription('The name of the adjacent link station in ASCII. Used for stats and Alert messages to uniquely identify the station. 8 BYTES in length.')
wfSdlcLSAdminAdjNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("learn", 1), ("len", 2), ("network", 3), ("end", 4), ("vrn", 5))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminAdjNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminAdjNodeType.setDescription('Adjacent Node type')
wfSdlcLSAdminSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSdlcLSAdminSimRim.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSAdminSimRim.setDescription('This object controls the support for transmission and receipt of SIM and RIM control frames for this link station.')
wfSdlcLSOperTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6), )
if mibBuilder.loadTexts: wfSdlcLSOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperTable.setDescription('This table contains current SDLC link parameters. Many of these objects have corresponding objects in the wfSdlcLSAdmnTable.')
wfSdlcLSOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1), ).setIndexNames((0, "Wellfleet-SDLC-MIB", "wfSdlcLSOperIfIndex"), (0, "Wellfleet-SDLC-MIB", "wfSdlcLSOperAddress"))
if mibBuilder.loadTexts: wfSdlcLSOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperEntry.setDescription('A list of current SDLC link parameters')
wfSdlcLSOperIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperIfIndex.setDescription('The ifIndex value for the SDLC port which owns this link station.')
wfSdlcLSOperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperAddress.setDescription('This value is the poll address of the secondary link station in this SDLC link. It uniquely identifies the SDLC link station within a single SDLC port.')
wfSdlcLSOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("negot", 1), ("primary", 2), ("sec", 3), ("msec", 4))).clone('sec')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperRole.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperRole.setDescription('This object reflects the current role that the link station is assuming.')
wfSdlcLSOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discont", 1), ("conpend", 2), ("contact", 3), ("dispend", 4))).clone('discont')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperState.setDescription('This object describes the operational state of the SDLC link station. The managed system shall attempt to keep this value consistent with the administered state.')
wfSdlcLSOperMAXDATA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(265, 521, 1033, 2057, 4105))).clone(namedValues=NamedValues(("pdu0265", 265), ("pdu0521", 521), ("pdu1033", 1033), ("pdu2057", 2057), ("pdu4105", 4105))).clone('pdu1033')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperMAXDATA.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperMAXDATA.setDescription('This object reflects the current maximum PDU size allowed for the logical link. This value includes the Transmission Header (TH) and Request Header (RH). This value will controlled by the administered MAXDATA, wfSdlcLSAdminMAXDATA, or by the value negotiated in the XID exchange for link stations on a switched SDLC line.')
wfSdlcLSOperREPLYTO = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperREPLYTO.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperREPLYTO.setDescription('This object reflects the current reply timeout, in tenths of seconds, for an SDLC link station. If the link station does not receive a repsonse to a poll or message before the specified time expires then the appropriate error recovery shall be initiated. This object has no meaning for secondary SDLC link stations.')
wfSdlcLSOperMAXIN = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperMAXIN.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperMAXIN.setDescription('This object reflects the current maximum number of unacknowledged frames which an SDLC link station may receive. This shall range from one to modulus minus one.')
wfSdlcLSOperMAXOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperMAXOUT.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperMAXOUT.setDescription('This object controls the maximum consequetive unacknowledged frames which an SDLC link station shall send without an acknowledgement. This shall range from one to modulus minus one. The modulus is controlled by the object: wfSdlcLSAdminMODULO. This value will controlled by the administered MAXOUT, wfSdlcLSAdminMAXOUT, or by the value negotiated in the XID exchange for link stations on a switched SDLC line.')
wfSdlcLSOperMODULO = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperMODULO.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperMODULO.setDescription('This object reflects the current modulus for an SDLC link station. This modulus determines the size of rotating acknowledgement window used by the SDLC link station pair.')
wfSdlcLSOperRETRIESm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperRETRIESm.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperRETRIESm.setDescription('This object controls number of retries in a retry sequence for an SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The current number of times that the retry sequence is to be repeated is reflected by the object: wfSdlcLSOperRETRIESn. The current interval between retry sequences is reflected by the object: wfSdlcLSOperRETRIESt.')
wfSdlcLSOperRETRIESt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperRETRIESt.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperRETRIESt.setDescription('This object reflects the current interval, in seconds, between retry sequences for an SDLC link station if multiple retry sequences are specified. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The current number of repeated retries sequences is reflected by the object: wfSdlcLSOperRETRIESn. The current retries per sequence is reflected by the object: wfSdlcLSOperRETRIESm.')
wfSdlcLSOperRETRIESn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperRETRIESn.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperRETRIESn.setDescription('This object reflects the current number of times that a retry sequence is repeated for an SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The current interval between retry sequences is reflected by the object: wfSdlcLSOperRETRIESn. The current retries per sequence is reflected by the object: wfSdlcLSOperRETRIESm.')
wfSdlcLSOperRNRLIMIT = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperRNRLIMIT.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperRNRLIMIT.setDescription('This object reflects the current length of time, in minutes, that an SDLC link station will allow its adjacent link station to remain in a busy (RNR) state before declaring it inoperative.')
wfSdlcLSOperDATMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2))).clone('half')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperDATMODE.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperDATMODE.setDescription('This object reflects whether the current communications mode with the adjacent link station is two-way-alternate (half) or two-way-simultaneous (full).')
wfSdlcLSOperCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperCreateTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperCreateTime.setDescription('This object describes the time, in 1/100ths of seconds, of the creation of this SDLC link station.')
wfSdlcLSOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("rxfrmr", 2), ("txfrmr", 3), ("noresp", 4), ("protoerr", 5), ("noactiv", 6), ("rnrlimit", 7), ("retriesexp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperLastFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperLastFailCause.setDescription('This enumerated object reflects the cause of the last failure of this SDLC link station. If the link station has not failed, then this value has no meaning.')
wfSdlcLSOperLastFailCtrlIn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperLastFailCtrlIn2.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperLastFailCtrlIn2.setDescription('This object reflects the last control octet or octets (depending on modulus) received by this SDLC link station at the time of the last failure. If the link station has not failed, then this value has no meaning.')
wfSdlcLSOperLastFailCtrlOut2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperLastFailCtrlOut2.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperLastFailCtrlOut2.setDescription('This object reflects the last control octet or octets (depending on modulus) sent by this SDLC link station at the time of the last failure. If the link station has not failed, then this value has no meaning.')
wfSdlcLSOperLastFailFRMRInfo5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperLastFailFRMRInfo5.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperLastFailFRMRInfo5.setDescription('This object reflects the information field of the FRMR frame if the last failure for this SDLC link station was as a result of an invalid frame. Otherwise, this field has no meaning.')
wfSdlcLSOperLastFailREPLYTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperLastFailREPLYTOs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperLastFailREPLYTOs.setDescription('This object reflects the number of times that the REPLYTO timer had expired for an SDLC link station at the time of the last failure. If the link station has not failed, then this value has no meaning.')
wfSdlcLSOperGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSOperGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSOperGroupAddress.setDescription('This value is the group poll address of the secondary link station for this SDLC link. If this link station is not part of a group, this address will be NULL.')
wfSdlcLSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7), )
if mibBuilder.loadTexts: wfSdlcLSStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsTable.setDescription('Each entry in this table contains statistics for a specific SDLC link station.')
wfSdlcLSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1), ).setIndexNames((0, "Wellfleet-SDLC-MIB", "wfSdlcLSStatsIfIndex"), (0, "Wellfleet-SDLC-MIB", "wfSdlcLSStatsAddress"))
if mibBuilder.loadTexts: wfSdlcLSStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsEntry.setDescription('A list of statistics for a specific SDLC link station')
wfSdlcLSStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsIfIndex.setDescription('A list of statistics for an SDLC link station.')
wfSdlcLSStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsAddress.setDescription('This value is the poll address of the secondary link station in this SDLC link. It uniquely identifies the SDLC link station within a single SDLC port.')
wfSdlcLSStatsBLUsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsBLUsIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsBLUsIns.setDescription('This object reflects the total basic link units (BLUs; frames) received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsBLUsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsBLUsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsBLUsOuts.setDescription('This object reflects the total basic link units (BLUs; frames), transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsOctetsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsOctetsIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsOctetsIns.setDescription('This object reflects the total octets received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsOctetsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsOctetsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsOctetsOuts.setDescription('This object reflects the total octets transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsPollsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsPollsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsPollsOuts.setDescription('This object reflects the total polls sent to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsPollRspOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsPollRspOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsPollRspOuts.setDescription('This object reflects the total polls responded to by the local SDLC link station since last reset or system startup.')
wfSdlcLSStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsLocalBusies.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsLocalBusies.setDescription('This object reflects the total number of times that the local SDLC link station has entered a busy state (RNR) since last reset or system startup.')
wfSdlcLSStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsRemoteBusies.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsRemoteBusies.setDescription('This object reflects the total number of times that an adjacent ( remote) SDLC link station has entered a busy state (RNR) since last reset or system startup.')
wfSdlcLSStatsIFramesIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsIFramesIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsIFramesIns.setDescription('This object reflects the total I-frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsIFramesOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsIFramesOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsIFramesOuts.setDescription('This object reflects the total I-frames transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsRetransmits.setDescription('This object reflects the total frames retransmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsIOctetsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsIOctetsIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsIOctetsIns.setDescription('This object reflects the total octets contained in I-frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsIOctetsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsIOctetsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsIOctetsOuts.setDescription('This object reflects the total octets contained in I-frames transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsUIFramesIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsUIFramesIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsUIFramesIns.setDescription('This object reflects the total UI-frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsUIFramesOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsUIFramesOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsUIFramesOuts.setDescription('This object reflects the total UI-frames transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsXIDsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsXIDsIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsXIDsIns.setDescription('This object reflects the total XID frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsXIDsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsXIDsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsXIDsOuts.setDescription('This object reflects the total XID frames transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsTESTsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsTESTsIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsTESTsIns.setDescription('This object reflects the total TEST frames, commands or responses, received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsTESTsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsTESTsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsTESTsOuts.setDescription('This object reflects the total TEST frames, commands or responses, transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsREJsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsREJsIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsREJsIns.setDescription('This object reflects the total REJ frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsREJsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsREJsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsREJsOuts.setDescription('This object reflects the total REJ frames transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsFRMRsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsFRMRsIns.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsFRMRsIns.setDescription('This object reflects the total frame reject (FRMR) frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsFRMRsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsFRMRsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsFRMRsOuts.setDescription('This object reflects the total frame reject (FRMR) frames transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsSimsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsSimsIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsSimsIn.setDescription('This object reflects the total set initialization mode (SIM) frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsSimsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsSimsOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsSimsOut.setDescription('This object reflects the total set initialization mode (SIM) frames transmitted to an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsRimsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsRimsIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsRimsIn.setDescription('This object reflects the total request initialization mode (RIM) frames received from an adjacent SDLC link station since last reset or system startup.')
wfSdlcLSStatsRimsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 7, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSdlcLSStatsRimsOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfSdlcLSStatsRimsOut.setDescription('This object reflects the total request initialization mode (RIM) frames transmitted to an adjacent SDLC link station since last reset or system startup.')
mibBuilder.exportSymbols("Wellfleet-SDLC-MIB", wfSdlcPortAdminNPRcvRetry=wfSdlcPortAdminNPRcvRetry, wfSdlcLSAdminDisable=wfSdlcLSAdminDisable, wfSdlcLSStatsOctetsOuts=wfSdlcLSStatsOctetsOuts, wfSdlcPortOperAddress4=wfSdlcPortOperAddress4, wfSdlcLSAdminEntry=wfSdlcLSAdminEntry, wfSdlcLSAdminREPLYTO=wfSdlcLSAdminREPLYTO, wfSdlcLSStatsRimsOut=wfSdlcLSStatsRimsOut, wfSdlcLSAdminNvePollTimer2Retry=wfSdlcLSAdminNvePollTimer2Retry, wfSdlcLSAdminRole=wfSdlcLSAdminRole, wfSdlcPortAdminNPRcvTimer=wfSdlcPortAdminNPRcvTimer, wfSdlcPortOperEntry=wfSdlcPortOperEntry, wfSdlcPortOperPAUSE=wfSdlcPortOperPAUSE, wfSdlcLSAdminNvePollTimerRetry=wfSdlcLSAdminNvePollTimerRetry, wfSdlcLSStatsIFramesOuts=wfSdlcLSStatsIFramesOuts, wfSdlcPortAdminAddress4=wfSdlcPortAdminAddress4, wfSdlcPortAdminRcvPoolSize=wfSdlcPortAdminRcvPoolSize, wfSdlcLSOperLastFailCause=wfSdlcLSOperLastFailCause, wfSdlcLSOperRETRIESm=wfSdlcLSOperRETRIESm, wfSdlcPortAdminMaxXidSize=wfSdlcPortAdminMaxXidSize, wfSdlcPortAdminInLsActLim=wfSdlcPortAdminInLsActLim, wfSdlcLSAdminDiscTimerRetry=wfSdlcLSAdminDiscTimerRetry, wfSdlcPortAdminMaxFrameSize=wfSdlcPortAdminMaxFrameSize, wfSdlcPortAdminDisable=wfSdlcPortAdminDisable, wfSdlcPortAdminSecFdplx=wfSdlcPortAdminSecFdplx, wfSdlcPortAdminTopology=wfSdlcPortAdminTopology, wfSdlcPortOperAbmSuppInd=wfSdlcPortOperAbmSuppInd, wfSdlcLSAdminIfIndex=wfSdlcLSAdminIfIndex, wfSdlcPortOperSecInitNonactSupp=wfSdlcPortOperSecInitNonactSupp, wfSdlcPortAdminPortNumber=wfSdlcPortAdminPortNumber, wfSdlcPortOperTable=wfSdlcPortOperTable, wfSdlcPortAdminACTIVTO=wfSdlcPortAdminACTIVTO, wfSdlcLSOperLastFailFRMRInfo5=wfSdlcLSOperLastFailFRMRInfo5, wfSdlcPortAdminTable=wfSdlcPortAdminTable, wfSdlcPortOperRole=wfSdlcPortOperRole, wfSdlcPortAdminLinkConnTimer=wfSdlcPortAdminLinkConnTimer, wfSdlcLSStatsIfIndex=wfSdlcLSStatsIfIndex, wfSdlc=wfSdlc, wfSdlcPortOperTopology=wfSdlcPortOperTopology, wfSdlcPortAdminDelete=wfSdlcPortAdminDelete, wfSdlcPortStatsDwarfFrames=wfSdlcPortStatsDwarfFrames, wfSdlcLSAdminDelete=wfSdlcLSAdminDelete, wfSdlcLSAdminAdjNodeType=wfSdlcLSAdminAdjNodeType, wfSdlcPortAdminEntry=wfSdlcPortAdminEntry, wfSdlcLSOperCreateTime=wfSdlcLSOperCreateTime, wfSdlcLSStatsAddress=wfSdlcLSStatsAddress, wfSdlcPortAdminType=wfSdlcPortAdminType, wfSdlcPortOperSlowPollMethod=wfSdlcPortOperSlowPollMethod, wfSdlcLSOperRole=wfSdlcLSOperRole, wfSdlcPortOperACTIVTO=wfSdlcPortOperACTIVTO, wfSdlcLSAdminRETRIESt=wfSdlcLSAdminRETRIESt, wfSdlcLSStatsUIFramesIns=wfSdlcLSStatsUIFramesIns, wfSdlcDelete=wfSdlcDelete, wfSdlcPortAdminIdleRetry=wfSdlcPortAdminIdleRetry, wfSdlcLSOperMAXIN=wfSdlcLSOperMAXIN, wfSdlcLSStatsREJsOuts=wfSdlcLSStatsREJsOuts, wfSdlcLSAdminMAXIN=wfSdlcLSAdminMAXIN, wfSdlcLSAdminGroupAddress=wfSdlcLSAdminGroupAddress, wfSdlcLSAdminAddress=wfSdlcLSAdminAddress, wfSdlcLSStatsSimsIn=wfSdlcLSStatsSimsIn, wfSdlcLSAdminRRTimer=wfSdlcLSAdminRRTimer, wfSdlcLSStatsUIFramesOuts=wfSdlcLSStatsUIFramesOuts, wfSdlcLSStatsFRMRsOuts=wfSdlcLSStatsFRMRsOuts, wfSdlcLSStatsXIDsOuts=wfSdlcLSStatsXIDsOuts, wfSdlcPortAdminWriteTimer=wfSdlcPortAdminWriteTimer, wfSdlcLSAdminMAXOUT=wfSdlcLSAdminMAXOUT, wfSdlcLSAdminContTimerRetry=wfSdlcLSAdminContTimerRetry, wfSdlcLSAdminNoRespTimerRetry=wfSdlcLSAdminNoRespTimerRetry, wfSdlcPortAdminLsRole=wfSdlcPortAdminLsRole, wfSdlcLSOperEntry=wfSdlcLSOperEntry, wfSdlcPortAdminMaxRetryCount=wfSdlcPortAdminMaxRetryCount, wfSdlcPortAdminCredit=wfSdlcPortAdminCredit, wfSdlcLSAdminRETRIESm=wfSdlcLSAdminRETRIESm, wfSdlcPortOperIndex=wfSdlcPortOperIndex, wfSdlcLSAdminContTimer2=wfSdlcLSAdminContTimer2, wfSdlcLSStatsIFramesIns=wfSdlcLSStatsIFramesIns, wfSdlcLSOperRETRIESt=wfSdlcLSOperRETRIESt, wfSdlcLSOperAddress=wfSdlcLSOperAddress, wfSdlcLSStatsSimsOut=wfSdlcLSStatsSimsOut, wfSdlcLSOperIfIndex=wfSdlcLSOperIfIndex, wfSdlcPortAdminPortType=wfSdlcPortAdminPortType, wfSdlcPortStatsIndex=wfSdlcPortStatsIndex, wfSdlcLSStatsBLUsIns=wfSdlcLSStatsBLUsIns, wfSdlcLSOperGroupAddress=wfSdlcLSOperGroupAddress, wfSdlcPortAdminIdleTimer=wfSdlcPortAdminIdleTimer, wfSdlcPortAdminLinkConnRetry=wfSdlcPortAdminLinkConnRetry, wfSdlcLSAdminSimRim=wfSdlcLSAdminSimRim, wfSdlcLSStatsIOctetsIns=wfSdlcLSStatsIOctetsIns, wfSdlcLSAdminContTimer=wfSdlcLSAdminContTimer, wfSdlcPortOperType=wfSdlcPortOperType, wfSdlcLSStatsBLUsOuts=wfSdlcLSStatsBLUsOuts, wfSdlcLSStatsREJsIns=wfSdlcLSStatsREJsIns, wfSdlcLSAdminRETRIESn=wfSdlcLSAdminRETRIESn, wfSdlcLSAdminTable=wfSdlcLSAdminTable, wfSdlcLSOperMAXDATA=wfSdlcLSOperMAXDATA, wfSdlcPortAdminLsAddress=wfSdlcPortAdminLsAddress, wfSdlcLSStatsRemoteBusies=wfSdlcLSStatsRemoteBusies, wfSdlcLSStatsRetransmits=wfSdlcLSStatsRetransmits, wfSdlcLSAdminMODULO=wfSdlcLSAdminMODULO, wfSdlcPortAdminNegLsSupp=wfSdlcPortAdminNegLsSupp, wfSdlcLSStatsFRMRsIns=wfSdlcLSStatsFRMRsIns, wfSdlcLSOperMAXOUT=wfSdlcLSOperMAXOUT, wfSdlcLSStatsTESTsOuts=wfSdlcLSStatsTESTsOuts, wfSdlcLSAdminNvePollTimer2=wfSdlcLSAdminNvePollTimer2, wfSdlcLSAdminLinkStationName=wfSdlcLSAdminLinkStationName, wfSdlcLSOperREPLYTO=wfSdlcLSOperREPLYTO, wfSdlcLSStatsPollsOuts=wfSdlcLSStatsPollsOuts, wfSdlcLSAdminContTimer2Retry=wfSdlcLSAdminContTimer2Retry, wfSdlcPortAdminWriteRetry=wfSdlcPortAdminWriteRetry, wfSdlcPortAdminStatsColl=wfSdlcPortAdminStatsColl, wfSdlcLSOperDATMODE=wfSdlcLSOperDATMODE, wfSdlcPortAdminIndex=wfSdlcPortAdminIndex, wfSdlcLSStatsEntry=wfSdlcLSStatsEntry, wfSdlcLSAdminPollOnIframe=wfSdlcLSAdminPollOnIframe, wfSdlcPortOperSlowPollTimer=wfSdlcPortOperSlowPollTimer, wfSdlcLSOperLastFailCtrlOut2=wfSdlcLSOperLastFailCtrlOut2, wfSdlcLSAdminRNRLIMIT=wfSdlcLSAdminRNRLIMIT, wfSdlcPortAdminPAUSE=wfSdlcPortAdminPAUSE, wfSdlcDisable=wfSdlcDisable, wfSdlcState=wfSdlcState, wfSdlcLSStatsPollRspOuts=wfSdlcLSStatsPollRspOuts, wfSdlcLSOperTable=wfSdlcLSOperTable, wfSdlcLSOperRETRIESn=wfSdlcLSOperRETRIESn, wfSdlcPortAdminCpType=wfSdlcPortAdminCpType, wfSdlcLSAdminMAXDATA=wfSdlcLSAdminMAXDATA, wfSdlcLSAdminDiscTimer=wfSdlcLSAdminDiscTimer, wfSdlcPortAdminDlcName8=wfSdlcPortAdminDlcName8, wfSdlcPortStatsTable=wfSdlcPortStatsTable, wfSdlcPortAdminTotLsActLim=wfSdlcPortAdminTotLsActLim, wfSdlcPortOperSimRimSupp=wfSdlcPortOperSimRimSupp, wfSdlcLSStatsXIDsIns=wfSdlcLSStatsXIDsIns, wfSdlcLSStatsLocalBusies=wfSdlcLSStatsLocalBusies, wfSdlcLSAdminNvePollTimer=wfSdlcLSAdminNvePollTimer, wfSdlcLSOperState=wfSdlcLSOperState, wfSdlcLSAdminGpAddName=wfSdlcLSAdminGpAddName, wfSdlcLSOperLastFailREPLYTOs=wfSdlcLSOperLastFailREPLYTOs, wfSdlcLSAdminRemBusyTimerRetry=wfSdlcLSAdminRemBusyTimerRetry, wfSdlcLSOperMODULO=wfSdlcLSOperMODULO, wfSdlcLSStatsTable=wfSdlcLSStatsTable, wfSdlcPortAdminDebugFlg=wfSdlcPortAdminDebugFlg, wfSdlcPortStatsEntry=wfSdlcPortStatsEntry, wfSdlcLSStatsRimsIn=wfSdlcLSStatsRimsIn, wfSdlcPortAdminPriFdplx=wfSdlcPortAdminPriFdplx, wfSdlcPortAdminOutLsActLim=wfSdlcPortAdminOutLsActLim, wfSdlcLSStatsTESTsIns=wfSdlcLSStatsTESTsIns, wfSdlcLSAdminPollFrame=wfSdlcLSAdminPollFrame, wfSdlcLSStatsOctetsIns=wfSdlcLSStatsOctetsIns, wfSdlcLSStatsIOctetsOuts=wfSdlcLSStatsIOctetsOuts, wfSdlcLSOperRNRLIMIT=wfSdlcLSOperRNRLIMIT, wfSdlcPortAdminUseRej=wfSdlcPortAdminUseRej, wfSdlcLSOperLastFailCtrlIn2=wfSdlcLSOperLastFailCtrlIn2)
