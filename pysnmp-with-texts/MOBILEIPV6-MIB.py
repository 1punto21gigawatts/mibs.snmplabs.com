#
# PySNMP MIB module MOBILEIPV6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MOBILEIPV6-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ipv6InterfaceIfIndex, = mibBuilder.importSymbols("IP-MIB", "ipv6InterfaceIfIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, NotificationType, ObjectIdentity, Bits, IpAddress, MibIdentifier, TimeTicks, iso, Counter32, Integer32, Gauge32, Counter64, Unsigned32, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Bits", "IpAddress", "MibIdentifier", "TimeTicks", "iso", "Counter32", "Integer32", "Gauge32", "Counter64", "Unsigned32", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TimeStamp, DateAndTime, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DateAndTime", "TruthValue", "DisplayString")
mip6MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 133))
mip6MIB.setRevisions(('2006-02-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mip6MIB.setRevisionsDescriptions(('Initial version, published as RFC 4295.',))
if mibBuilder.loadTexts: mip6MIB.setLastUpdated('200602010000Z')
if mibBuilder.loadTexts: mip6MIB.setOrganization('IETF mip6 Working Group')
if mibBuilder.loadTexts: mip6MIB.setContactInfo(' Glenn Mansfield Keeni Postal: Cyber Solutions Inc. 6-6-3, Minami Yoshinari Aoba-ku, Sendai, Japan 989-3204. Tel: +81-22-303-4012 Fax: +81-22-303-4015 E-mail: glenn@cysols.com Kenichi Nagami Postal: INTEC NetCore Inc. 1-3-3, Shin-suna Koto-ku, Tokyo, 135-0075 Japan Tel: +81-3-5665-5069 E-mail: nagami@inetcore.com Kazuhide Koide Postal: Tohoku University 2-1-1, Katahira Aoba-ku, Sendai, 980-8577 Japan Tel: +81-22-217-5454 E-mail: koide@shiratori.riec.tohoku.ac.jp Sri Gundavelli Postal: Cisco Systems 170 W.Tasman Drive, San Jose, CA 95134 USA Tel: +1-408-527-6109 E-mail: sgundave@cisco.com Support Group E-mail: mip6@ietf.org')
if mibBuilder.loadTexts: mip6MIB.setDescription('The MIB module for monitoring Mobile-IPv6 entities. Copyright (C) The Internet Society 2006. This version of this MIB module is part of RFC 4295; see the RFC itself for full legal notices. ')
mip6Notifications = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 0))
mip6Objects = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1))
mip6Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 2))
mip6Core = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1))
mip6Mn = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2))
mip6Cn = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3))
mip6Ha = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4))
mip6System = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 1))
mip6Bindings = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 2))
mip6Stats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 3))
mip6MnSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 1))
mip6MnConf = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 2))
mip6MnRegistration = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 3))
mip6CnSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3, 1))
mip6CnStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3, 2))
mip6HaAdvertisement = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4, 1))
mip6HaStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4, 2))
class Mip6BURequestRejectionCode(TextualConvention, Integer32):
    reference = 'RFC 3775 : Section 6.1.8'
    description = 'The value of the status field in the Binding Acknowledgment message when the Binding Update was rejected. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("reasonUnspecified", 1), ("admProhibited", 2), ("insufficientResource", 3), ("homeRegistrationNotSupported", 4), ("notHomeSubnet", 5), ("notHomeAgentForThisMobileNode", 6), ("duplicateAddressDetectionFailed", 7), ("sequenceNumberOutOfWindow", 8), ("expiredHomeNonceIndex", 9), ("expiredCareofNonceIndex", 10), ("expiredNonces", 11), ("registrationTypeChangeDisallowed", 12))

mip6Capabilities = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("mobileNode", 0), ("homeAgent", 1), ("correspondentNode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6Capabilities.setReference('RFC 3775 : Section 3.2, 4.1')
if mibBuilder.loadTexts: mip6Capabilities.setStatus('current')
if mibBuilder.loadTexts: mip6Capabilities.setDescription('This object indicates the Mobile IPv6 functions that are supported by this managed entity. Multiple Mobile IPv6 functions may be supported by a single entity. ')
mip6Status = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6Status.setStatus('current')
if mibBuilder.loadTexts: mip6Status.setDescription('This object indicates whether the Mobile IPv6 function is enabled for the managed entity. If it is enabled, the agent discovery and registration functions will be operational. Changing the status from enabled(1) to disabled(2) will terminate the agent discovery and registration functions. On the other hand, changing the status from disabled(2) to enabled(1) will start the agent discovery and registration functions. The value of this object SHOULD remain unchanged across reboots of the managed entity. ')
mip6BindingCacheTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1), )
if mibBuilder.loadTexts: mip6BindingCacheTable.setReference('RFC 3775 : Section 4.5, 9.1, 10.1')
if mibBuilder.loadTexts: mip6BindingCacheTable.setStatus('current')
if mibBuilder.loadTexts: mip6BindingCacheTable.setDescription('This table models the Binding Cache on the managed entity. The cache is maintained by home agents and correspondent nodes. It contains both correspondent registration entries and home registration entries. Entries in this table are not required to survive a reboot of the managed entity. ')
mip6BindingCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6BindingCacheEntry.setStatus('current')
if mibBuilder.loadTexts: mip6BindingCacheEntry.setDescription('This entry represents a conceptual row in the binding cache table. It represents a single Binding Update. Implementors need to be aware that if the total number of octets in mip6BindingHomeAddress exceeds 113, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6BindingHomeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6BindingHomeAddressType.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHomeAddressType.setDescription('The InetAddressType of the mip6BindingHomeAddress that follows. ')
mip6BindingHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6BindingHomeAddress.setReference('RFC 3775 : Section 9.1')
if mibBuilder.loadTexts: mip6BindingHomeAddress.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHomeAddress.setDescription("The home address of the mobile node corresponding to the Binding Cache entry. This field is used as the key for searching the mobile node's current care-of address in the Binding Cache. The type of the address represented by this object is specified by the corresponding mip6BindingHomeAddressType object. ")
mip6BindingCOAType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingCOAType.setStatus('current')
if mibBuilder.loadTexts: mip6BindingCOAType.setDescription('The InetAddressType of the mip6BindingCOA that follows. ')
mip6BindingCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingCOA.setReference('RFC 3775 : Section 9.1')
if mibBuilder.loadTexts: mip6BindingCOA.setStatus('current')
if mibBuilder.loadTexts: mip6BindingCOA.setDescription('The care-of address of the mobile node indicated by the home address field (mip6BindingHomeAddress) in this Binding Cache entry. The type of the address represented by this object is specified by the corresponding mip6BindingCOAType object. ')
mip6BindingTimeRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingTimeRegistered.setStatus('current')
if mibBuilder.loadTexts: mip6BindingTimeRegistered.setDescription('The timestamp when this Binding Cache entry was created. ')
mip6BindingTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 6), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingTimeGranted.setStatus('current')
if mibBuilder.loadTexts: mip6BindingTimeGranted.setDescription('The lifetime in seconds granted to the mobile node for this registration. ')
mip6BindingTimeRemaining = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 7), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingTimeRemaining.setReference('RFC 3775 : Section 9.1')
if mibBuilder.loadTexts: mip6BindingTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: mip6BindingTimeRemaining.setDescription('The lifetime in seconds remaining for this registration. ')
mip6BindingHomeRegn = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHomeRegn.setReference('RFC 3775 : Section 9.1')
if mibBuilder.loadTexts: mip6BindingHomeRegn.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHomeRegn.setDescription('This object indicates whether or not this Binding Cache entry is a home registration entry (applicable only on nodes that support home agent functionality). ')
mip6BindingMaxSeq = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingMaxSeq.setReference('RFC 3775 : Section 9.1, 9.5.1')
if mibBuilder.loadTexts: mip6BindingMaxSeq.setStatus('current')
if mibBuilder.loadTexts: mip6BindingMaxSeq.setDescription('The maximum value of the Sequence Number field received in previous Binding Updates for this home address (mip6BindingHomeAddress). ')
mip6BindingUsageTS = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingUsageTS.setReference('RFC 3775 : Section 9.1')
if mibBuilder.loadTexts: mip6BindingUsageTS.setStatus('current')
if mibBuilder.loadTexts: mip6BindingUsageTS.setDescription('The timestamp when this entry was last looked up. ')
mip6BindingUsageCount = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingUsageCount.setReference('RFC 3775 : Section 9.1')
if mibBuilder.loadTexts: mip6BindingUsageCount.setStatus('current')
if mibBuilder.loadTexts: mip6BindingUsageCount.setDescription('The number of times this entry was looked up. ')
mip6BindingAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6BindingAdminStatus.setReference('RFC 3775 : Section 9.1')
if mibBuilder.loadTexts: mip6BindingAdminStatus.setStatus('current')
if mibBuilder.loadTexts: mip6BindingAdminStatus.setDescription("This is an administrative object used to control the status of a binding cache entry. By default the value will be 'active'(1). A value of 'inactive'(2) will indicate that the validity of the entry is suspended. It does not exist in the binding cache for all practical purposes. The state can be changed from 'active' to 'inactive' by operator intervention. Causing the state to change to 'inactive' results in the entry being deleted from the cache. Attempts to change the status from 'inactive' to 'active' will be rejected. ")
mip6BindingHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2), )
if mibBuilder.loadTexts: mip6BindingHistoryTable.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHistoryTable.setDescription('A table containing a record of the bindings. ')
mip6BindingHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHstHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHstHomeAddress"), (0, "MOBILEIPV6-MIB", "mip6BindingHstIndex"))
if mibBuilder.loadTexts: mip6BindingHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHistoryEntry.setDescription('The record of a binding. Implementors need to be aware that if the total number of octets in mip6BindingHstHomeAddress exceeds 112, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6BindingHstHomeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6BindingHstHomeAddressType.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstHomeAddressType.setDescription('The InetAddressType of the mip6BindingHstHomeAddress that follows. ')
mip6BindingHstHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6BindingHstHomeAddress.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstHomeAddress.setDescription("Mobile node's home address. The type of the address represented by this object is specified by the corresponding mip6BindingHstHomeAddressType object. ")
mip6BindingHstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mip6BindingHstIndex.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstIndex.setDescription("The index to uniquely identify this record along with the mobile node's HomeAddress type and HomeAddress. It should be monotonically increasing. It may wrap after reaching its max value.")
mip6BindingHstCOAType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstCOAType.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstCOAType.setDescription('The InetAddressType of the mip6BindingHstCOA that follows. ')
mip6BindingHstCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstCOA.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstCOA.setDescription("Mobile node's care-of address. One mobile node can have multiple bindings with different care-of addresses. The type of the address represented by this object is specified by the corresponding mip6BindingHstCOAType object. ")
mip6BindingHstTimeRegistered = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstTimeRegistered.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstTimeRegistered.setDescription('The timestamp when this Binding Cache entry was created. ')
mip6BindingHstTimeExpired = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstTimeExpired.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstTimeExpired.setDescription('The timestamp when this Binding Cache entry expired. ')
mip6BindingHstHomeRegn = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstHomeRegn.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstHomeRegn.setDescription('This object indicates whether or not this Binding Cache entry is a home registration entry (applicable only on nodes that support home agent functionality). ')
mip6BindingHstUsageTS = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstUsageTS.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstUsageTS.setDescription('The timestamp when this entry was last looked up. ')
mip6BindingHstUsageCount = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6BindingHstUsageCount.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstUsageCount.setDescription('The number of times this entry was looked up. ')
mip6TotalTraffic = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1))
mip6InOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6InOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6InOctets.setStatus('current')
if mibBuilder.loadTexts: mip6InOctets.setDescription("The total number of octets in the MIPv6 datagrams received by the MIPv6 entity. This will include datagrams with the Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HCInOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCInOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCInOctets.setStatus('current')
if mibBuilder.loadTexts: mip6HCInOctets.setDescription("The total number of octets in the MIPv6 datagrams received by the MIPv6 entity. This will include datagrams with the Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. This object is a 64-bit version of mip6InOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6InPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6InPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6InPkts.setStatus('current')
if mibBuilder.loadTexts: mip6InPkts.setDescription("The number of MIPv6 datagrams received by the MIPv6 entity. This will include datagrams with the Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HCInPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCInPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCInPkts.setStatus('current')
if mibBuilder.loadTexts: mip6HCInPkts.setDescription("The number of MIPv6 datagrams received by the MIPv6 entity. This will include datagrams with the Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. This object is a 64-bit version of mip6InPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6OutOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6OutOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6OutOctets.setStatus('current')
if mibBuilder.loadTexts: mip6OutOctets.setDescription("The total number of octets in the MIPv6 datagrams sent by the MIPv6 entity. This will include datagrams with the Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HCOutOctets = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCOutOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCOutOctets.setStatus('current')
if mibBuilder.loadTexts: mip6HCOutOctets.setDescription("The total number of octets in the MIPv6 datagrams sent by the MIPv6 entity. This will include datagrams with the Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. This object is a 64-bit version of mip6OutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6OutPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6OutPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6OutPkts.setStatus('current')
if mibBuilder.loadTexts: mip6OutPkts.setDescription("The number of MIPv6 datagrams sent by the MIPv6 entity. This will include the datagrams with Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HCOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCOutPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCOutPkts.setStatus('current')
if mibBuilder.loadTexts: mip6HCOutPkts.setDescription("The number of MIPv6 datagrams sent by the MIPv6 entity. This will include datagrams with the Mobility Header, the Home Address option in the Destination Option extension header (Next Header value = 60), or the type 2 Routing Header. It will also include the IPv6 datagrams that are reverse tunneled to a home agent from a mobile node's home address. This object is a 64-bit version of mip6OutPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CounterDiscontinuityTime = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: mip6CounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this MIPv6 entities global counters, viz., counters with OID prefix 'mip6TotalTraffic' or 'mip6CnGlobalStats' or 'mip6HaGlobalStats' suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object will have a zero value. ")
mip6NodeTrafficTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2), )
if mibBuilder.loadTexts: mip6NodeTrafficTable.setStatus('current')
if mibBuilder.loadTexts: mip6NodeTrafficTable.setDescription('A table containing MIPv6 traffic counters per mobile node. ')
mip6NodeTrafficEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6NodeTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: mip6NodeTrafficEntry.setDescription('The MIPv6 traffic statistics for a mobile node. Implementors need to be aware that if the total number of octets in mip6BindingHomeAddress exceeds 113, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6NodeInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeInOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6NodeInOctets.setStatus('current')
if mibBuilder.loadTexts: mip6NodeInOctets.setDescription("The total number of octets in the MIPv6 datagrams received from the mobile node by the MIPv6 entity. This will include datagrams with the Mobility Header or the Home Address option in the Destination Option extension header (Next Header value = 60). It will also include the IPv6 datagrams that are reverse tunneled to a home agent from the mobile node's home address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ")
mip6HCNodeInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeInOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCNodeInOctets.setStatus('current')
if mibBuilder.loadTexts: mip6HCNodeInOctets.setDescription("The total number of octets in the MIPv6 datagrams received from the mobile node by the MIPv6 entity. This will include datagrams with the Mobility Header or the Home Address option in the Destination Option extension header (Next Header value = 60). It will also include the IPv6 datagrams that are reverse tunneled to a home agent from the mobile node's home address. This object is a 64-bit version of mip6NodeInOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ")
mip6NodeInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeInPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6NodeInPkts.setStatus('current')
if mibBuilder.loadTexts: mip6NodeInPkts.setDescription("The number of MIPv6 datagrams received from the mobile node by the MIPv6 entity. This will include the datagrams with the Mobility Header or the Home Address option in the Destination Option extension header (Next Header value = 60). It will also include the IPv6 datagrams that are reverse tunneled to a home agent from the mobile node's home address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ")
mip6HCNodeInPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeInPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCNodeInPkts.setStatus('current')
if mibBuilder.loadTexts: mip6HCNodeInPkts.setDescription("The number of MIPv6 datagrams received from the mobile node by the MIPv6 entity. This will include datagrams with the Mobility Header or the Home Address option in the Destination Option extension header (Next Header value = 60). It will also include the IPv6 datagrams that are reverse tunneled to a home agent from the mobile node's home address. This object is a 64-bit version of mip6NodeInPkts. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ")
mip6NodeOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeOutOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6NodeOutOctets.setStatus('current')
if mibBuilder.loadTexts: mip6NodeOutOctets.setDescription('The total number of octets in the MIPv6 datagrams sent to the mobile node by the MIPv6 entity. This will include datagrams with the Mobility Header or the type 2 Routing Header. It will also include the IPv6 datagrams that are tunneled by a home agent to the mobile node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ')
mip6HCNodeOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeOutOctets.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCNodeOutOctets.setStatus('current')
if mibBuilder.loadTexts: mip6HCNodeOutOctets.setDescription('The total number of octets in the MIPv6 datagrams sent to the mobile node by the MIPv6 entity. This will include datagrams with the Mobility Header or the type 2 Routing Header. It will also include the IPv6 datagrams that are tunneled by a home agent to the mobile node. This object is a 64-bit version of mip6NodeOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ')
mip6NodeOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeOutPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6NodeOutPkts.setStatus('current')
if mibBuilder.loadTexts: mip6NodeOutPkts.setDescription('The number of MIPv6 datagrams sent to the mobile node by the MIPv6 entity. This will include datagrams with the Mobility Header or the type 2 Routing Header. It will also include the IPv6 datagrams that are tunneled by a home agent to the mobile node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ')
mip6HCNodeOutPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HCNodeOutPkts.setReference('RFC 3775 : Section 6.1, 6.3, 6.4, 10.4.5')
if mibBuilder.loadTexts: mip6HCNodeOutPkts.setStatus('current')
if mibBuilder.loadTexts: mip6HCNodeOutPkts.setDescription('The number of MIPv6 datagrams sent to the mobile node by the MIPv6 entity. This will include datagrams with the Mobility Header or the type 2 Routing Header. It will also include the IPv6 datagrams that are tunneled by a home agent to the mobile node. This object is a 64-bit version of mip6NodeOutOctets. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6NodeCtrDiscontinuityTime. ')
mip6NodeCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 1, 3, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6NodeCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: mip6NodeCtrDiscontinuityTime.setDescription('The value of sysUpTime on the most recent occasion at which any one or more of the counters in this row suffered a discontinuity. The relevant counters are the specific instances of any Counter32 or Counter64 objects in this row. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value. ')
mip6MnHomeAddressTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1), )
if mibBuilder.loadTexts: mip6MnHomeAddressTable.setStatus('current')
if mibBuilder.loadTexts: mip6MnHomeAddressTable.setDescription('A table containing registration status for all the home addresses pertaining to the mobile node. ')
mip6MnHomeAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6MnHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6MnHomeAddress"))
if mibBuilder.loadTexts: mip6MnHomeAddressEntry.setStatus('current')
if mibBuilder.loadTexts: mip6MnHomeAddressEntry.setDescription('The registration status for a home address. Implementors need to be aware that if the total number of octets in mip6MnHomeAddress exceeds 113, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6MnHomeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6MnHomeAddressType.setStatus('current')
if mibBuilder.loadTexts: mip6MnHomeAddressType.setDescription('The InetAddressType of the mip6MnHomeAddress that follows. ')
mip6MnHomeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6MnHomeAddress.setReference('RFC 3775 : Section 3.2')
if mibBuilder.loadTexts: mip6MnHomeAddress.setStatus('current')
if mibBuilder.loadTexts: mip6MnHomeAddress.setDescription("A unicast routable address assigned to the mobile node. This is used as the 'permanent address' of the mobile node in the sense that it remains unchanged regardless of the mobile node's current point of attachment. If mobile node doesn't have a home address assigned yet, then this object will take the default 'unspecified' value ::0. The type of the address represented by this object is specified by the corresponding mip6MnHomeAddressType object. ")
mip6MnHomeAddressState = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("home", 2), ("registered", 3), ("pending", 4), ("isolated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnHomeAddressState.setStatus('current')
if mibBuilder.loadTexts: mip6MnHomeAddressState.setDescription('This object indicates the state of the mobile node: unknown -- The state of the mobile node cannot be determined. home -- mobile node is on the home network. registered -- mobile node is on a foreign network and is registered with the home agent. pending -- mobile node has sent registration request to the home agent and is waiting for the reply. isolated -- mobile node is isolated from network, i.e., it is not in its home network, it is not registered, and no registration ack is pending. ')
mip6MnDiscoveryRequests = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnDiscoveryRequests.setReference('RFC 3775 : Section 10.5, 11.4.1')
if mibBuilder.loadTexts: mip6MnDiscoveryRequests.setStatus('current')
if mibBuilder.loadTexts: mip6MnDiscoveryRequests.setDescription('Total number of ICMP Dynamic Home Agent Address Discovery Requests sent by the mobile node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnDiscoveryReplies = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnDiscoveryReplies.setReference('RFC 3775 : Section 10.5, 11.4.1')
if mibBuilder.loadTexts: mip6MnDiscoveryReplies.setStatus('current')
if mibBuilder.loadTexts: mip6MnDiscoveryReplies.setDescription('Total number of ICMP Dynamic Home Agent Address Discovery Replies received by the mobile node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnDiscoveryTimeouts = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnDiscoveryTimeouts.setReference('RFC 3775 : Section 10.5, 11.4.1, 12')
if mibBuilder.loadTexts: mip6MnDiscoveryTimeouts.setStatus('current')
if mibBuilder.loadTexts: mip6MnDiscoveryTimeouts.setDescription('Total number of ICMP Dynamic Home Agent Address Discovery Requests that timed out. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnPrefixSolicitationsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnPrefixSolicitationsSent.setReference('RFC 3775 : Section 10.5, 11.4.2')
if mibBuilder.loadTexts: mip6MnPrefixSolicitationsSent.setStatus('current')
if mibBuilder.loadTexts: mip6MnPrefixSolicitationsSent.setDescription('Total number of ICMP Mobile Prefix Solicitations sent by the mobile node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnPrefixAdvsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnPrefixAdvsRecd.setReference('RFC 3775 : Section 10.6, 11.4.3')
if mibBuilder.loadTexts: mip6MnPrefixAdvsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6MnPrefixAdvsRecd.setDescription('Total number of ICMP Mobile Prefix Advertisements received by the mobile node. This will include the ICMP Mobile Prefix Advertisements that failed the validity checks. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnPrefixAdvsIgnored = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnPrefixAdvsIgnored.setReference('RFC 3775 : Section 10.6, 11.4.3')
if mibBuilder.loadTexts: mip6MnPrefixAdvsIgnored.setStatus('current')
if mibBuilder.loadTexts: mip6MnPrefixAdvsIgnored.setDescription('Total number of Mobile Prefix Advertisements discarded by the validity check. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnMovedToFN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMovedToFN.setReference('RFC 3775 : Section 11.5.1')
if mibBuilder.loadTexts: mip6MnMovedToFN.setStatus('current')
if mibBuilder.loadTexts: mip6MnMovedToFN.setDescription('Number of times the mobile node has detected movement to a foreign network from another foreign network or from the home network, has reconstructed its care-of address and has initiated the care-of address registration process. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnMovedToHN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMovedToHN.setReference('RFC 3775 : Section 11.5.4')
if mibBuilder.loadTexts: mip6MnMovedToHN.setStatus('current')
if mibBuilder.loadTexts: mip6MnMovedToHN.setDescription('Number of times the mobile node has detected movement from a foreign network to its home network. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnBLTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1), )
if mibBuilder.loadTexts: mip6MnBLTable.setReference('RFC 3775 : Section 4.5, 11.1')
if mibBuilder.loadTexts: mip6MnBLTable.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLTable.setDescription('This table corresponds to the Binding Update List (BL) that is maintained by the mobile node. The list holds an item for every binding that the mobile node has established or is trying to establish. Both correspondent and home registrations are included in this table. Entries from the table are deleted as the lifetime of the binding expires. ')
mip6MnBLEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6MnHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6MnHomeAddress"), (0, "MOBILEIPV6-MIB", "mip6MnBLNodeAddressType"), (0, "MOBILEIPV6-MIB", "mip6MnBLNodeAddress"))
if mibBuilder.loadTexts: mip6MnBLEntry.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLEntry.setDescription('Information about a Binding Update sent by the mobile node either to its home agent or to one of its correspondent nodes. Implementors need to be aware that if the total number of octets in mip6MnHomeAddress and mip6MnBLNodeAddress exceeds 111, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6MnBLNodeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6MnBLNodeAddressType.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLNodeAddressType.setDescription('The InetAddressType of the mip6MnBLNodeAddress that follows. ')
mip6MnBLNodeAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6MnBLNodeAddress.setReference('RFC 3775 : Section 11.1')
if mibBuilder.loadTexts: mip6MnBLNodeAddress.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLNodeAddress.setDescription('The address of the agent as used in the destination address of the Binding Update. The agent may be a home agent or a correspondent node. The type of the address represented by this object is specified by the corresponding mip6MnBLNodeAddressType object. ')
mip6MnBLCOAType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLCOAType.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLCOAType.setDescription('The InetAddressType of the mip6MnBLCOA that follows. ')
mip6MnBLCOA = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLCOA.setReference('RFC 3775 : Section 11.1')
if mibBuilder.loadTexts: mip6MnBLCOA.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLCOA.setDescription('Care-of address that the mobile node intends to register in the Binding Update request. The type of the address represented by this object is specified by the corresponding mip6MnBLCOAType object. ')
mip6MnBLLifeTimeRequested = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLLifeTimeRequested.setReference('RFC 3775 : Section 11.1')
if mibBuilder.loadTexts: mip6MnBLLifeTimeRequested.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLLifeTimeRequested.setDescription('The lifetime requested by the mobile node (in seconds) in the Binding Update. ')
mip6MnBLLifeTimeGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLLifeTimeGranted.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLLifeTimeGranted.setDescription('The lifetime granted to the mobile node for this binding. This field will be inaccessible if the Binding Update request has not been accepted. The lifetime remaining (lR) can be calculated using the current time (cT), mip6MnBLAcceptedTime (aT) and mip6MnBLLifeTimeGranted (lG) as follows: lR = lG - (cT - aT). When lR is zero, this entry will be deleted from the Binding Update List and consequently from this table. ')
mip6MnBLMaxSeq = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLMaxSeq.setReference('RFC 3775 : Section 11.1')
if mibBuilder.loadTexts: mip6MnBLMaxSeq.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLMaxSeq.setDescription('The maximum value of the Sequence Number field sent in previous Binding Updates to this destination. ')
mip6MnBLTimeSent = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLTimeSent.setReference('RFC 3775 : Section 11.1')
if mibBuilder.loadTexts: mip6MnBLTimeSent.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLTimeSent.setDescription('The time when the last (re-)transmission occurred.')
mip6MnBLAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLAccepted.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLAccepted.setDescription('true(1) if the mobile node has received a binding acknowledgment indicating that service has been accepted (status code 0 or 1); false(2) otherwise. false(2) implies that the registration is still pending. ')
mip6MnBLAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLAcceptedTime.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLAcceptedTime.setDescription('The time at which the mobile node receives a binding acknowledgment indicating that Binding Update has been accepted (status code 0 or 1); This object will be inaccessible if the Binding Update request is still pending. ')
mip6MnBLRetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLRetransmissions.setReference('RFC 3775 : Section 11.1')
if mibBuilder.loadTexts: mip6MnBLRetransmissions.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLRetransmissions.setDescription('The number of Binding Update retransmissions. ')
mip6MnBLDontSendBUFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBLDontSendBUFlag.setReference('RFC 3775 : Section 11.1')
if mibBuilder.loadTexts: mip6MnBLDontSendBUFlag.setStatus('current')
if mibBuilder.loadTexts: mip6MnBLDontSendBUFlag.setDescription('true(1) indicates that future binding updates will not be sent to mip6MnBLNodeAddress. false(2) implies that binding updates will be sent to mip6MnBLNodeAddress. The mobile node sets this flag in the when it receives an ICMP Parameter Problem, Code 1, error message in response to a return routability message or Binding Update sent to mip6MnBLNodeAddress. ')
mip6MnRegnCounters = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2))
mip6MnMobilityMessagesSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMobilityMessagesSent.setReference('RFC 3775 : Section 4.2, 6.1')
if mibBuilder.loadTexts: mip6MnMobilityMessagesSent.setStatus('current')
if mibBuilder.loadTexts: mip6MnMobilityMessagesSent.setDescription('The total number of mobility messages, i.e., IPv6 datagrams with Mobility Header, sent by the mobile node. There are 3 types of mobility messages, viz., Home Test Init, Care-of Test Init, and Binding Updates, that are sent by mobile nodes. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnMobilityMessagesRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnMobilityMessagesRecd.setReference('RFC 3775 : Section 4.2, 6.1')
if mibBuilder.loadTexts: mip6MnMobilityMessagesRecd.setStatus('current')
if mibBuilder.loadTexts: mip6MnMobilityMessagesRecd.setDescription('The total number of mobility messages, i.e., IPv6 datagrams with Mobility Header, received by the mobile node. There are 5 types of mobility messages, viz., Home Test, Care-of Test, Binding Acknowledgment, Binding Refresh Request, and Binding Error, that are sent to mobile nodes. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnBUsToHA = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUsToHA.setReference('RFC 3775 : Section 11.7.1')
if mibBuilder.loadTexts: mip6MnBUsToHA.setStatus('current')
if mibBuilder.loadTexts: mip6MnBUsToHA.setDescription("Total number of Binding Updates sent to the mobile node's home agent(s). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6MnBUAcksFromHA = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUAcksFromHA.setReference('RFC 3775 : Section 11.7.3')
if mibBuilder.loadTexts: mip6MnBUAcksFromHA.setStatus('current')
if mibBuilder.loadTexts: mip6MnBUAcksFromHA.setDescription("Total number of valid binding acknowledgments received from the mobile node's home agent(s). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6MnBUsToCN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUsToCN.setReference('RFC 3775 : Section 11.7.2')
if mibBuilder.loadTexts: mip6MnBUsToCN.setStatus('current')
if mibBuilder.loadTexts: mip6MnBUsToCN.setDescription('Total number of Binding Updates sent to correspondent nodes by the mobile node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnBUAcksFromCN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBUAcksFromCN.setReference('RFC 3775 : Section 11.7.3')
if mibBuilder.loadTexts: mip6MnBUAcksFromCN.setStatus('current')
if mibBuilder.loadTexts: mip6MnBUAcksFromCN.setDescription('Total number of valid Binding Update acks received from all the correspondent nodes. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnBindingErrorsFromCN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBindingErrorsFromCN.setStatus('current')
if mibBuilder.loadTexts: mip6MnBindingErrorsFromCN.setDescription('Total number of Binding Error messages received by mobile node from CN. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnICMPErrorsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnICMPErrorsRecd.setReference('RFC 3775 : Section 11.3.5')
if mibBuilder.loadTexts: mip6MnICMPErrorsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6MnICMPErrorsRecd.setDescription('Total number of ICMP Error messages of type ICMP Parameter Problem, Code 1 or Code 2, received by the mobile node from a correspondent node in response to a return routability procedure, a Binding Update, or a packet with the Home Address option. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6MnBRRequestsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 2, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6MnBRRequestsRecd.setReference('RFC 3775 : Section 11.7.4')
if mibBuilder.loadTexts: mip6MnBRRequestsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6MnBRRequestsRecd.setDescription('The total number of Binding Refresh requests received by the mobile node from correspondent nodes. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnGlobalStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1))
mip6CnHomeTestInitsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnHomeTestInitsRecd.setReference('RFC 3775 : Section 9.4.1')
if mibBuilder.loadTexts: mip6CnHomeTestInitsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6CnHomeTestInitsRecd.setDescription('Total number of Home Test Init messages received. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnHomeTestsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnHomeTestsSent.setReference('RFC 3775 : Section 9.4.3')
if mibBuilder.loadTexts: mip6CnHomeTestsSent.setStatus('current')
if mibBuilder.loadTexts: mip6CnHomeTestsSent.setDescription('Total number of Home Test messages sent. If a Home Test Init message is found to be valid, a Home Test message will be generated and sent. Otherwise the Home Test message is silently discarded. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnCareOfTestInitsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnCareOfTestInitsRecd.setReference('RFC 3775 : Section 9.4.2')
if mibBuilder.loadTexts: mip6CnCareOfTestInitsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6CnCareOfTestInitsRecd.setDescription('Total number of Care-of Test Init messages received. ')
mip6CnCareOfTestsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnCareOfTestsSent.setReference('RFC 3775 : Section 9.4.4')
if mibBuilder.loadTexts: mip6CnCareOfTestsSent.setStatus('current')
if mibBuilder.loadTexts: mip6CnCareOfTestsSent.setDescription('Total number of Care-of Test messages sent. If a Care-of Test Init message is found to be valid, a Care-of Test message will be generated and sent. Otherwise the Care-of Test message is silently discarded. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnBUsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUsRecd.setReference('RFC 3775 : Section 9.5.1')
if mibBuilder.loadTexts: mip6CnBUsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6CnBUsRecd.setDescription('Total number of Binding Updates received by the correspondent node from mobile nodes. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnBUAcksSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUAcksSent.setReference('RFC 3775 : Section 9.5.4')
if mibBuilder.loadTexts: mip6CnBUAcksSent.setStatus('current')
if mibBuilder.loadTexts: mip6CnBUAcksSent.setDescription('Total number of acknowledgments sent by the correspondent node for the Binding Updates received. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnBRsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBRsSent.setReference('RFC 3775 : Section 9.5.5')
if mibBuilder.loadTexts: mip6CnBRsSent.setStatus('current')
if mibBuilder.loadTexts: mip6CnBRsSent.setDescription('Total number of Binding Refresh Request messages sent by the correspondent node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnBindingErrors = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBindingErrors.setReference('RFC 3775 : Section 9.3.3')
if mibBuilder.loadTexts: mip6CnBindingErrors.setStatus('current')
if mibBuilder.loadTexts: mip6CnBindingErrors.setDescription('Total number of Binding Error messages sent by the correspondent node to the mobile node. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnBUsAccepted = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUsAccepted.setReference('RFC 3775 : Section 9.5.1, 9.5.4')
if mibBuilder.loadTexts: mip6CnBUsAccepted.setStatus('current')
if mibBuilder.loadTexts: mip6CnBUsAccepted.setDescription('Total number of Binding Updates accepted by the correspondent node. If a Binding Acknowledgment message is sent for the Binding Update request, the Status code field in the message will have a value less than 128. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnBUsRejected = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUsRejected.setReference('RFC 3775 : Section 9.5.1, 9.5.4')
if mibBuilder.loadTexts: mip6CnBUsRejected.setStatus('current')
if mibBuilder.loadTexts: mip6CnBUsRejected.setDescription('Total number of Binding Update requests rejected by the correspondent node. If a Binding Acknowledgment message has been sent for the Binding Update request, the Status code field in the message will have a value greater than or equal to 128. Otherwise the Binding Update request will be silently discarded. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6CnReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnReasonUnspecified.setReference('RFC 3775 : Section 6.1.8')
if mibBuilder.loadTexts: mip6CnReasonUnspecified.setStatus('current')
if mibBuilder.loadTexts: mip6CnReasonUnspecified.setDescription("Total number of Binding Update requests rejected by the correspondent node with status code in the Binding Acknowledgment message indicating 'reason unspecified' (Code 128). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnInsufficientResource.setReference('RFC 3775 : Section 6.1.8')
if mibBuilder.loadTexts: mip6CnInsufficientResource.setStatus('current')
if mibBuilder.loadTexts: mip6CnInsufficientResource.setDescription("Total number of Binding Update requests rejected by the correspondent node with status code in the Binding Acknowledgment message indicating 'insufficient resources' (Code 130). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnHomeRegnNotSupported = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnHomeRegnNotSupported.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6CnHomeRegnNotSupported.setStatus('current')
if mibBuilder.loadTexts: mip6CnHomeRegnNotSupported.setDescription("Total number of Binding Update requests rejected by correspondent node with status code in the Binding Acknowledgment message indicating 'home registration not supported' (Code 131). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnSeqNumberOutOfWindow = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnSeqNumberOutOfWindow.setReference('RFC 3775 : Section 6.1.8, 9.5.1')
if mibBuilder.loadTexts: mip6CnSeqNumberOutOfWindow.setStatus('current')
if mibBuilder.loadTexts: mip6CnSeqNumberOutOfWindow.setDescription("Total number of Binding Updates rejected by correspondent node with status code in the Binding Acknowledgment message indicating 'sequence number out of window' (Code 135). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnExpiredHomeNonceIndex = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnExpiredHomeNonceIndex.setReference('RFC 3775 : Section 6.1.8, 9.5.1')
if mibBuilder.loadTexts: mip6CnExpiredHomeNonceIndex.setStatus('current')
if mibBuilder.loadTexts: mip6CnExpiredHomeNonceIndex.setDescription("The total number of Binding Updates rejected by correspondent node with status code in the Binding Acknowledgment message indicating 'expired home nonce index' (Code 136). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnExpiredCareOfNonceIndex = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnExpiredCareOfNonceIndex.setReference('RFC 3775 : Section 6.1.8, 9.5.1')
if mibBuilder.loadTexts: mip6CnExpiredCareOfNonceIndex.setStatus('current')
if mibBuilder.loadTexts: mip6CnExpiredCareOfNonceIndex.setDescription("The total number of Binding Updates rejected by correspondent node with status code in the Binding Acknowledgment message indicating 'expired care-of nonce index' (Code 137). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnExpiredNonce = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnExpiredNonce.setReference('RFC 3775 : Section 6.1.8, 9.5.1')
if mibBuilder.loadTexts: mip6CnExpiredNonce.setStatus('current')
if mibBuilder.loadTexts: mip6CnExpiredNonce.setDescription("The total number of Binding Updates rejected by correspondent node with status code in the Binding Acknowledgment message indicating 'expired nonces' (Code 138), i.e., the correspondent node no longer recognizes the Home Nonce Index value and the Care-of Nonce Index value. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnRegTypeChangeDisallowed = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnRegTypeChangeDisallowed.setReference('RFC 3775 : Section 6.1.8, 9.5.1')
if mibBuilder.loadTexts: mip6CnRegTypeChangeDisallowed.setStatus('current')
if mibBuilder.loadTexts: mip6CnRegTypeChangeDisallowed.setDescription("The total number of Binding Updates rejected by correspondent node with status code in the Binding Acknowledgment message indicating 'registration type change disallowed' (Code 139), i.e., a binding already exists for the given home address and the home registration flag has a different value than the Home Registration (H) bit in the Binding Update. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6CnCounterTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2), )
if mibBuilder.loadTexts: mip6CnCounterTable.setStatus('current')
if mibBuilder.loadTexts: mip6CnCounterTable.setDescription('A table containing each mobile .')
mip6CnCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6CnCounterEntry.setStatus('current')
if mibBuilder.loadTexts: mip6CnCounterEntry.setDescription('The set of correspondent node counters for a mobile node. Implementors need to be aware that if the total number of octets in mip6BindingHomeAddress exceeds 113, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6CnBURequestsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURequestsAccepted.setStatus('current')
if mibBuilder.loadTexts: mip6CnBURequestsAccepted.setDescription('Total number of Binding Update requests from the mobile node accepted by the correspondent node. If Binding Acknowledgment messages are sent, then the status code in the message will have a value less than 128. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CnCtrDiscontinuityTime. ')
mip6CnBURequestsRejected = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURequestsRejected.setStatus('current')
if mibBuilder.loadTexts: mip6CnBURequestsRejected.setDescription('Total number of Binding Update requests from the mobile node that have been rejected by the correspondent node. This includes the Binding Update requests for which a Binding Acknowledgment message has been sent with status code value greater than or equal to 128 and the Binding Acknowledgment requests that have been silently discarded. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CnCtrDiscontinuityTime. ')
mip6CnBCEntryCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBCEntryCreationTime.setStatus('current')
if mibBuilder.loadTexts: mip6CnBCEntryCreationTime.setDescription('The time when the current Binding Cache entry was created for the mobile node. ')
mip6CnBUAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBUAcceptedTime.setStatus('current')
if mibBuilder.loadTexts: mip6CnBUAcceptedTime.setDescription('The time at which the last Binding Update was accepted by the correspondent node and the corresponding Binding Cache entry was updated. ')
mip6CnBURejectionTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURejectionTime.setStatus('current')
if mibBuilder.loadTexts: mip6CnBURejectionTime.setDescription('The time at which the last Binding Update message was rejected by the correspondent node. If there have been no rejections, then this object will be inaccessible. ')
mip6CnBURejectionCode = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 6), Mip6BURequestRejectionCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnBURejectionCode.setReference('RFC 3775 : Section 6.1.8')
if mibBuilder.loadTexts: mip6CnBURejectionCode.setStatus('current')
if mibBuilder.loadTexts: mip6CnBURejectionCode.setDescription('If a Binding Acknowledgment is sent to the mobile node, this is the status code (> 128) that is returned in the Binding Acknowledgment. In case a Binding Acknowledgment is not sent to the mobile node, then this will be the value of the Status code that corresponds to the reason of the rejection. If there have been no rejections, then this object will be inaccessible. ')
mip6CnCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 3, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6CnCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: mip6CnCtrDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of counters in this row, viz., instances of 'mip6CnBURequestsAccepted' and 'mip6CnBURequestsRejected', suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object will have a zero value. ")
mip6HaAdvsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaAdvsRecd.setReference('RFC 3775 : Section 7')
if mibBuilder.loadTexts: mip6HaAdvsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6HaAdvsRecd.setDescription('Total number of valid Router Advertisements received with the Home Agent (H) bit set, on all the links on which it is serving as a Home Agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaAdvsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaAdvsSent.setReference('RFC 3775 : Section 7')
if mibBuilder.loadTexts: mip6HaAdvsSent.setStatus('current')
if mibBuilder.loadTexts: mip6HaAdvsSent.setDescription('Total number of unsolicited multicast Router Advertisements sent with the Home Agent (H) bit set, on all the links on which the router is serving as a Home Agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaConfTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3), )
if mibBuilder.loadTexts: mip6HaConfTable.setStatus('current')
if mibBuilder.loadTexts: mip6HaConfTable.setDescription('A table containing configurable advertisement parameters for all interfaces on which the home agent service is advertised. It is RECOMMENDED that the last written values of the objects in the conceptual rows of this table will remain unchanged across reboots of the managed entity provided that the interfaces have not been renumbered after the reboot. ')
mip6HaConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1), ).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"))
if mibBuilder.loadTexts: mip6HaConfEntry.setStatus('current')
if mibBuilder.loadTexts: mip6HaConfEntry.setDescription('Advertisement parameters for an interface. The instances of the columnar objects in this entry pertain to the interface that is uniquely identified by the ipv6InterfaceIfIndex of the interface. The same ipv6InterfaceIfIndex object is used to uniquely identify instances of the columnar objects of this conceptual row. ')
mip6HaAdvPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaAdvPreference.setReference('RFC 3775 : Section 7.4, 8.4')
if mibBuilder.loadTexts: mip6HaAdvPreference.setStatus('current')
if mibBuilder.loadTexts: mip6HaAdvPreference.setDescription('The preference value for the home agent to be used in the Router Advertisements. Higher value denotes greater preference. ')
mip6HaAdvLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaAdvLifetime.setReference('RFC 3775 : Section 7.4')
if mibBuilder.loadTexts: mip6HaAdvLifetime.setStatus('current')
if mibBuilder.loadTexts: mip6HaAdvLifetime.setDescription('The lifetime value for the home agent to be used in the Router Advertisements. ')
mip6HaPrefixAdv = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaPrefixAdv.setReference('RFC 3775 : Section 8.4')
if mibBuilder.loadTexts: mip6HaPrefixAdv.setStatus('current')
if mibBuilder.loadTexts: mip6HaPrefixAdv.setDescription('Indicates whether the home agent should support sending of the ICMP Mobile Prefix Advertisements. If it is disabled(2), the home agent will not send ICMP Mobile Prefix Advertisements to the mobile nodes. The state can be changed from enabled(1) to disabled(2) and vice versa by operator intervention. Causing the state to change from enabled(1) to disabled(2) will result in the home agent disabling the Prefix advertisement function. On the other hand, changing the status from disabled(2) to enabled(1) will start the prefix advertisement function. ')
mip6HaPrefixSolicitation = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaPrefixSolicitation.setReference('RFC 3775 : Section 8.4')
if mibBuilder.loadTexts: mip6HaPrefixSolicitation.setStatus('current')
if mibBuilder.loadTexts: mip6HaPrefixSolicitation.setDescription('Indicates whether the home agent should respond to ICMP Mobile Prefix Solicitation messages it receives from the mobile nodes. By default, the value will be set to enabled(1). If it is disabled(2), the home agent will not respond to any ICMP Mobile Prefix Solicitation messages. The state can be changed from enabled(1) to disabled(2), by operator intervention. Causing the state to change from enabled(1) to disabled(2) will result in the home agent not responding to any ICMP Mobile Prefix Solicitation messages it receives from the mobile nodes. ')
mip6HaMCastCtlMsgSupport = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mip6HaMCastCtlMsgSupport.setReference('RFC 3775 : Section 10.4.3')
if mibBuilder.loadTexts: mip6HaMCastCtlMsgSupport.setStatus('current')
if mibBuilder.loadTexts: mip6HaMCastCtlMsgSupport.setDescription('Indicates whether the home agent should enable support for the processing of the multicast group membership control messages it receives from the mobile nodes. By default, the value will be set to enabled(1). If it is disabled(2), the home agent will not process any multicast group control messages it receives from the mobile nodes. The state can be changed from enabled(1) to disabled(2), by operator intervention. Causing the state to change from enabled(1) to disabled(2) will result in the home agent disabling the processing of the multicast group control messages it received from the mobile nodes. ')
mip6HaGlobalStats = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1))
mip6HaHomeTestInitsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaHomeTestInitsRecd.setReference('RFC 3775 : Section 5.2.5')
if mibBuilder.loadTexts: mip6HaHomeTestInitsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6HaHomeTestInitsRecd.setDescription('Total number of Home Test Init messages received by the home agent. This will include Home Test Init messages that failed the validity checks. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaHomeTestsSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaHomeTestsSent.setReference('RFC 3775 : Section 5.2.5')
if mibBuilder.loadTexts: mip6HaHomeTestsSent.setStatus('current')
if mibBuilder.loadTexts: mip6HaHomeTestsSent.setDescription('Total number of Home Test messages sent by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaBUsRecd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUsRecd.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaBUsRecd.setStatus('current')
if mibBuilder.loadTexts: mip6HaBUsRecd.setDescription('Total number of Binding Updates received by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaBUAcksSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUAcksSent.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaBUAcksSent.setStatus('current')
if mibBuilder.loadTexts: mip6HaBUAcksSent.setDescription('Total number of Binding Acknowledgments sent by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaBRAdviceSent = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBRAdviceSent.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaBRAdviceSent.setStatus('current')
if mibBuilder.loadTexts: mip6HaBRAdviceSent.setDescription('Total number of Binding Acknowledgments sent by the home agent with Binding Refresh Advice mobility option included. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaBUsAccepted = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUsAccepted.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaBUsAccepted.setStatus('current')
if mibBuilder.loadTexts: mip6HaBUsAccepted.setDescription('Total number of Binding Updates accepted by this HA. Binding Acknowledgment with status code of 0 or 1. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ')
mip6HaPrefDiscoverReqd = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaPrefDiscoverReqd.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaPrefDiscoverReqd.setStatus('current')
if mibBuilder.loadTexts: mip6HaPrefDiscoverReqd.setDescription("The total number of Binding Acknowledgments sent by the home agent with status code indicating 'accepted but prefix discovery necessary' (Code 1). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaReasonUnspecified = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaReasonUnspecified.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaReasonUnspecified.setStatus('current')
if mibBuilder.loadTexts: mip6HaReasonUnspecified.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'reason unspecified' (Code 128). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaAdmProhibited = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaAdmProhibited.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaAdmProhibited.setStatus('current')
if mibBuilder.loadTexts: mip6HaAdmProhibited.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'administratively prohibited' (Code 129). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaInsufficientResource = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaInsufficientResource.setReference('RFC 3775 : Section 9.5.2')
if mibBuilder.loadTexts: mip6HaInsufficientResource.setStatus('current')
if mibBuilder.loadTexts: mip6HaInsufficientResource.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'insufficient resources' (Code 130). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaHomeRegnNotSupported = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaHomeRegnNotSupported.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaHomeRegnNotSupported.setStatus('current')
if mibBuilder.loadTexts: mip6HaHomeRegnNotSupported.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'home registration not supported' (Code 131). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaNotHomeSubnet = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaNotHomeSubnet.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaNotHomeSubnet.setStatus('current')
if mibBuilder.loadTexts: mip6HaNotHomeSubnet.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'not home subnet' (Code 132). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaNotHomeAgentForThisMN = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaNotHomeAgentForThisMN.setReference('RFC 3775 : Section 10.3.2')
if mibBuilder.loadTexts: mip6HaNotHomeAgentForThisMN.setStatus('current')
if mibBuilder.loadTexts: mip6HaNotHomeAgentForThisMN.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'not home agent for this mobile node' (Code 133). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaDupAddrDetectionFailed = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaDupAddrDetectionFailed.setReference('RFC 3775 : Section 10.3.1')
if mibBuilder.loadTexts: mip6HaDupAddrDetectionFailed.setStatus('current')
if mibBuilder.loadTexts: mip6HaDupAddrDetectionFailed.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'Duplicate Address Detection failed' (Code 134). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaSeqNumberOutOfWindow = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaSeqNumberOutOfWindow.setReference('RFC 3775 : Section 9.5.1')
if mibBuilder.loadTexts: mip6HaSeqNumberOutOfWindow.setStatus('current')
if mibBuilder.loadTexts: mip6HaSeqNumberOutOfWindow.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'sequence number out of window' (Code 135). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaExpiredHomeNonceIndex = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaExpiredHomeNonceIndex.setReference('RFC 3775 : Section 9.5.1')
if mibBuilder.loadTexts: mip6HaExpiredHomeNonceIndex.setStatus('current')
if mibBuilder.loadTexts: mip6HaExpiredHomeNonceIndex.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'expired home nonce index' (Code 136). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaRegTypeChangeDisallowed = MibScalar((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRegTypeChangeDisallowed.setReference('RFC 3775 : Section 9.5.1')
if mibBuilder.loadTexts: mip6HaRegTypeChangeDisallowed.setStatus('current')
if mibBuilder.loadTexts: mip6HaRegTypeChangeDisallowed.setDescription("Total number of Binding Update requests rejected by the home agent with status code in the Binding Acknowledgment message indicating 'registration type change disallowed' (Code 139), i.e., a binding already exists for the given home address and the home registration flag has a different value than the Home Registration (H) bit in the Binding Update. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6CounterDiscontinuityTime. ")
mip6HaCounterTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2), )
if mibBuilder.loadTexts: mip6HaCounterTable.setStatus('current')
if mibBuilder.loadTexts: mip6HaCounterTable.setDescription('A table containing registration statistics for all mobile nodes registered with the home agent. ')
mip6HaCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1), ).setIndexNames((0, "MOBILEIPV6-MIB", "mip6BindingHomeAddressType"), (0, "MOBILEIPV6-MIB", "mip6BindingHomeAddress"))
if mibBuilder.loadTexts: mip6HaCounterEntry.setStatus('current')
if mibBuilder.loadTexts: mip6HaCounterEntry.setDescription('Home agent registration statistics for a mobile node. Implementors need to be aware that if the total number of octets in mip6BindingHomeAddress exceeds 113, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6HaBURequestsAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBURequestsAccepted.setStatus('current')
if mibBuilder.loadTexts: mip6HaBURequestsAccepted.setDescription('Total number of service requests for the mobile node accepted by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6HaCtrDiscontinuityTime. ')
mip6HaBURequestsDenied = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBURequestsDenied.setStatus('current')
if mibBuilder.loadTexts: mip6HaBURequestsDenied.setDescription('Total number of service requests for the mobile node rejected by the home agent. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mip6HaCtrDiscontinuityTime. ')
mip6HaBCEntryCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 3), DateAndTime()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBCEntryCreationTime.setStatus('current')
if mibBuilder.loadTexts: mip6HaBCEntryCreationTime.setDescription('The time when the current Binding Cache entry was created for the mobile node. ')
mip6HaBUAcceptedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBUAcceptedTime.setStatus('current')
if mibBuilder.loadTexts: mip6HaBUAcceptedTime.setDescription('The time at which the last Binding Update was accepted by the home agent for this mobile node. ')
mip6HaBURejectionTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaBURejectionTime.setStatus('current')
if mibBuilder.loadTexts: mip6HaBURejectionTime.setDescription('The time at which the last Binding Update was rejected by the home agent for this mobile node. If there have been no rejections, then this object will be inaccessible. ')
mip6HaRecentBURejectionCode = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 6), Mip6BURequestRejectionCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRecentBURejectionCode.setStatus('current')
if mibBuilder.loadTexts: mip6HaRecentBURejectionCode.setDescription('If a Binding Acknowledgment is sent to the mobile node, this is the status code (> 128) that is returned in the Binding Acknowledgment. In case a Binding Acknowledgment is not sent to the mobile node, then this will be the value of the status code that corresponds to the reason of the rejection. If there have been no rejections, then this object will be inaccessible. ')
mip6HaCtrDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaCtrDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: mip6HaCtrDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of counters in this row, viz., instances of 'mip6HaBURequestsAccepted' and 'mip6HaBURequestsRejected', suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object will have a zero value. ")
mip6HaListTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4), )
if mibBuilder.loadTexts: mip6HaListTable.setReference('RFC 3775 : Section 10.1')
if mibBuilder.loadTexts: mip6HaListTable.setStatus('current')
if mibBuilder.loadTexts: mip6HaListTable.setDescription('This table models the Home Agents List that contains the list of all routers that are acting as home agents on each of the interfaces on which the home agent service is offered by this router. ')
mip6HaListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1), ).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddressType"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddress"))
if mibBuilder.loadTexts: mip6HaListEntry.setStatus('current')
if mibBuilder.loadTexts: mip6HaListEntry.setDescription('Information about a router that is offering home agent service. The instances of the columnar objects in this entry pertain to an interface for a particular value of mip6HaLinkLocalAddressType and mip6HaLinkLocalAddress. The interface is uniquely identified by its ipv6InterfaceIfIndex. The same ipv6InterfaceIfIndex object is used in conjunction with the mip6HaLinkLocalAddressType and mip6HaLinkLocalAddress to uniquely identify instances of the columnar objects of this row. Implementors need to be aware that if the total number of octets in mip6HaLinkLocalAddress exceeds 112, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6HaLinkLocalAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mip6HaLinkLocalAddressType.setReference('RFC 3775 : Section 10.1')
if mibBuilder.loadTexts: mip6HaLinkLocalAddressType.setStatus('current')
if mibBuilder.loadTexts: mip6HaLinkLocalAddressType.setDescription('The address type for the link-local address of the home agent that follows. ')
mip6HaLinkLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: mip6HaLinkLocalAddress.setReference('RFC 3775 : Section 10.1')
if mibBuilder.loadTexts: mip6HaLinkLocalAddress.setStatus('current')
if mibBuilder.loadTexts: mip6HaLinkLocalAddress.setDescription('The link local address of the home agent. The type of the address represented by this object is specified by the corresponding mip6HaLinkLocalAddressType object. ')
mip6HaPreference = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaPreference.setReference('RFC 3775 : Section 10.1')
if mibBuilder.loadTexts: mip6HaPreference.setStatus('current')
if mibBuilder.loadTexts: mip6HaPreference.setDescription('The preference value of this home agent. Higher values indicate a more preferable home agent. The preference value is obtained from the preference field of the received Router Advertisement. ')
mip6HaRecvLifeTime = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRecvLifeTime.setReference('RFC 3775 : Section 10.1')
if mibBuilder.loadTexts: mip6HaRecvLifeTime.setStatus('current')
if mibBuilder.loadTexts: mip6HaRecvLifeTime.setDescription('The lifetime for this home agent. ')
mip6HaRecvTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaRecvTimeStamp.setStatus('current')
if mibBuilder.loadTexts: mip6HaRecvTimeStamp.setDescription('The time when the home agent advertisement was received. ')
mip6HaGlAddrTable = MibTable((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5), )
if mibBuilder.loadTexts: mip6HaGlAddrTable.setReference('RFC 3775 : Section 10.1')
if mibBuilder.loadTexts: mip6HaGlAddrTable.setStatus('current')
if mibBuilder.loadTexts: mip6HaGlAddrTable.setDescription('This table contains the global addresses of the home agents in the Home Agents List. ')
mip6HaGlAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1), ).setIndexNames((0, "IP-MIB", "ipv6InterfaceIfIndex"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddressType"), (0, "MOBILEIPV6-MIB", "mip6HaLinkLocalAddress"), (0, "MOBILEIPV6-MIB", "mip6HaGaAddrSeqNo"))
if mibBuilder.loadTexts: mip6HaGlAddrEntry.setStatus('current')
if mibBuilder.loadTexts: mip6HaGlAddrEntry.setDescription('A global address for a home agent in the Home Agents List. The instances of the columnar objects in this entry pertain to an interface for a particular value of mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress and mip6HaGaAddrSeqNo. The mip6HaGaAddrSeqNo object is used to distinguish between multiple instances of the home agent global addresses on the same interface for the same set of mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress, values. There is no upper-bound on the maximum number of global addresses on an interface but, for practical purposes, the upper-bound of the value mip6HaGaAddrSeqNo is set to 1024. The interface is uniquely identified by its ipv6InterfaceIfIndex. The same ipv6InterfaceIfIndex object is used in conjunction with the mip6HaLinkLocalAddressType, mip6HaLinkLocalAddress, and mip6HaGaAddrSeqNo to uniquely identify instances of the columnar objects of this row. Implementors need to be aware that if the total number of octets in mip6HaLinkLocalAddress exceeds 111, then OIDs of column instances in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3. ')
mip6HaGaAddrSeqNo = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: mip6HaGaAddrSeqNo.setReference('RFC 3775 : Section 10.1')
if mibBuilder.loadTexts: mip6HaGaAddrSeqNo.setStatus('current')
if mibBuilder.loadTexts: mip6HaGaAddrSeqNo.setDescription('The index that along with ipv6InterfaceIfIndex, mip6HaLinkLocalAddressType, and mip6HaLinkLocalAddress uniquely identifies this row. ')
mip6HaGaGlobalAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaGaGlobalAddressType.setStatus('current')
if mibBuilder.loadTexts: mip6HaGaGlobalAddressType.setDescription('The address type for the global address of the home agent that follows. ')
mip6HaGaGlobalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 133, 1, 4, 1, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mip6HaGaGlobalAddress.setStatus('current')
if mibBuilder.loadTexts: mip6HaGaGlobalAddress.setDescription('A global address of the home agent. The type of the address represented by this object is specified by the corresponding mip6HaGaGlobalAddressType object. ')
mip6MnRegistered = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 1)).setObjects(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"))
if mibBuilder.loadTexts: mip6MnRegistered.setStatus('current')
if mibBuilder.loadTexts: mip6MnRegistered.setDescription('This notification is sent by a home agent when a mobile node registers with the home agent for the first time. Notifications will not be sent for subsequent updates and/or refreshes. The MO instances in the notifications will be identified by the mip6BindingHomeAddressType and mip6BindingHomeAddress for the mobile node in the mip6BindingCacheTable. ')
if mibBuilder.loadTexts: mip6MnRegistered.setReference('RFC 3775 : Section 10.3.1')
mip6MnDeRegistered = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 2)).setObjects(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"))
if mibBuilder.loadTexts: mip6MnDeRegistered.setStatus('current')
if mibBuilder.loadTexts: mip6MnDeRegistered.setDescription('This notification is sent by a home agent every time a mobile node de-registers with the home agent by sending a Binding Update that requests the home agent to delete a binding. The MO instances in the notifications will be identified by the mip6BindingHomeAddressType and mip6BindingHomeAddress for the mobile node in the mip6BindingCacheTable. ')
if mibBuilder.loadTexts: mip6MnDeRegistered.setReference('RFC 3775 : Section 10.3.2')
mip6MnCOAChanged = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 3)).setObjects(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"))
if mibBuilder.loadTexts: mip6MnCOAChanged.setStatus('current')
if mibBuilder.loadTexts: mip6MnCOAChanged.setDescription('This notification is sent by a home agent every time a mobile node sends a Binding Update with a new care-of address (for an existing Binding Cache entry). Notifications will not be sent for subsequent updates and/or refreshes for the same Care-of address. The registration of a new care-of address may indicate that the mobile node has moved or that the primary care-of address of the mobile node has become deprecated. The MO instances in the notifications will be identified by the mip6BindingHomeAddressType and mip6BindingHomeAddress for the mobile node in the mip6BindingCacheTable. ')
if mibBuilder.loadTexts: mip6MnCOAChanged.setReference('RFC 3775 : Section 11.5.2, 11.7.1')
mip6MnBindingExpiredAtHA = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 4)).setObjects(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"))
if mibBuilder.loadTexts: mip6MnBindingExpiredAtHA.setStatus('current')
if mibBuilder.loadTexts: mip6MnBindingExpiredAtHA.setDescription('This notification is sent by a home agent when a binding for the mobile node at the home agent expired (no timely Binding Updates were received). The MO instances in the notifications will be identified by the mip6BindingHomeAddressType and mip6BindingHomeAddress for the mobile node in the mip6BindingCacheTable. ')
if mibBuilder.loadTexts: mip6MnBindingExpiredAtHA.setReference('RFC 3775 : Section 10.3.2')
mip6MnBindingExpiredAtCN = NotificationType((1, 3, 6, 1, 2, 1, 133, 0, 5)).setObjects(("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"))
if mibBuilder.loadTexts: mip6MnBindingExpiredAtCN.setStatus('current')
if mibBuilder.loadTexts: mip6MnBindingExpiredAtCN.setDescription('This notification is sent by a correspondent node when a binding for the mobile node at the correspondent node expired (no timely Binding Updates were received). The MO instances in the notifications will be identified by the mip6BindingHomeAddressType and mip6BindingHomeAddress for the mobile node in the mip6BindingCacheTable. ')
mip6Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 2, 1))
mip6Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 133, 2, 2))
mip6SystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 1)).setObjects(("MOBILEIPV6-MIB", "mip6Capabilities"), ("MOBILEIPV6-MIB", "mip6Status"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6SystemGroup = mip6SystemGroup.setStatus('current')
if mibBuilder.loadTexts: mip6SystemGroup.setDescription(' A collection of objects for basic MIPv6 monitoring.')
mip6BindingCacheGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 2)).setObjects(("MOBILEIPV6-MIB", "mip6BindingCOAType"), ("MOBILEIPV6-MIB", "mip6BindingCOA"), ("MOBILEIPV6-MIB", "mip6BindingTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingTimeGranted"), ("MOBILEIPV6-MIB", "mip6BindingTimeRemaining"), ("MOBILEIPV6-MIB", "mip6BindingMaxSeq"), ("MOBILEIPV6-MIB", "mip6BindingHomeRegn"), ("MOBILEIPV6-MIB", "mip6BindingUsageTS"), ("MOBILEIPV6-MIB", "mip6BindingUsageCount"), ("MOBILEIPV6-MIB", "mip6BindingAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6BindingCacheGroup = mip6BindingCacheGroup.setStatus('current')
if mibBuilder.loadTexts: mip6BindingCacheGroup.setDescription(' A collection of objects for monitoring the Binding Cache. ')
mip6BindingHstGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 3)).setObjects(("MOBILEIPV6-MIB", "mip6BindingHstCOAType"), ("MOBILEIPV6-MIB", "mip6BindingHstCOA"), ("MOBILEIPV6-MIB", "mip6BindingHstTimeRegistered"), ("MOBILEIPV6-MIB", "mip6BindingHstTimeExpired"), ("MOBILEIPV6-MIB", "mip6BindingHstHomeRegn"), ("MOBILEIPV6-MIB", "mip6BindingHstUsageTS"), ("MOBILEIPV6-MIB", "mip6BindingHstUsageCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6BindingHstGroup = mip6BindingHstGroup.setStatus('current')
if mibBuilder.loadTexts: mip6BindingHstGroup.setDescription(' A collection of objects for monitoring the Binding History. This can be used to monitor the movement of the mobile node. ')
mip6TotalTrafficGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 4)).setObjects(("MOBILEIPV6-MIB", "mip6InOctets"), ("MOBILEIPV6-MIB", "mip6HCInOctets"), ("MOBILEIPV6-MIB", "mip6InPkts"), ("MOBILEIPV6-MIB", "mip6HCInPkts"), ("MOBILEIPV6-MIB", "mip6OutOctets"), ("MOBILEIPV6-MIB", "mip6HCOutOctets"), ("MOBILEIPV6-MIB", "mip6OutPkts"), ("MOBILEIPV6-MIB", "mip6HCOutPkts"), ("MOBILEIPV6-MIB", "mip6CounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6TotalTrafficGroup = mip6TotalTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: mip6TotalTrafficGroup.setDescription(' A collection of objects for monitoring the total MIPv6 traffic. ')
mip6NodeTrafficGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 5)).setObjects(("MOBILEIPV6-MIB", "mip6NodeInOctets"), ("MOBILEIPV6-MIB", "mip6HCNodeInOctets"), ("MOBILEIPV6-MIB", "mip6NodeInPkts"), ("MOBILEIPV6-MIB", "mip6HCNodeInPkts"), ("MOBILEIPV6-MIB", "mip6NodeOutOctets"), ("MOBILEIPV6-MIB", "mip6HCNodeOutOctets"), ("MOBILEIPV6-MIB", "mip6NodeOutPkts"), ("MOBILEIPV6-MIB", "mip6HCNodeOutPkts"), ("MOBILEIPV6-MIB", "mip6NodeCtrDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6NodeTrafficGroup = mip6NodeTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: mip6NodeTrafficGroup.setDescription(' A collection of objects for monitoring the MIPv6 traffic due to a mobile node. ')
mip6MnSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 6)).setObjects(("MOBILEIPV6-MIB", "mip6MnHomeAddressState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6MnSystemGroup = mip6MnSystemGroup.setStatus('current')
if mibBuilder.loadTexts: mip6MnSystemGroup.setDescription(' A collection of objects for basic monitoring of the mobile node. ')
mip6MnConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 7)).setObjects(("MOBILEIPV6-MIB", "mip6MnDiscoveryRequests"), ("MOBILEIPV6-MIB", "mip6MnDiscoveryReplies"), ("MOBILEIPV6-MIB", "mip6MnDiscoveryTimeouts"), ("MOBILEIPV6-MIB", "mip6MnPrefixSolicitationsSent"), ("MOBILEIPV6-MIB", "mip6MnPrefixAdvsRecd"), ("MOBILEIPV6-MIB", "mip6MnPrefixAdvsIgnored"), ("MOBILEIPV6-MIB", "mip6MnMovedToFN"), ("MOBILEIPV6-MIB", "mip6MnMovedToHN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6MnConfGroup = mip6MnConfGroup.setStatus('current')
if mibBuilder.loadTexts: mip6MnConfGroup.setDescription(' A collection of objects for monitoring the advertisement-related info on the mobile node. ')
mip6MnRegistrationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 8)).setObjects(("MOBILEIPV6-MIB", "mip6MnBLCOAType"), ("MOBILEIPV6-MIB", "mip6MnBLCOA"), ("MOBILEIPV6-MIB", "mip6MnBLLifeTimeRequested"), ("MOBILEIPV6-MIB", "mip6MnBLLifeTimeGranted"), ("MOBILEIPV6-MIB", "mip6MnBLMaxSeq"), ("MOBILEIPV6-MIB", "mip6MnBLTimeSent"), ("MOBILEIPV6-MIB", "mip6MnBLAccepted"), ("MOBILEIPV6-MIB", "mip6MnBLAcceptedTime"), ("MOBILEIPV6-MIB", "mip6MnBLRetransmissions"), ("MOBILEIPV6-MIB", "mip6MnBLDontSendBUFlag"), ("MOBILEIPV6-MIB", "mip6MnMobilityMessagesSent"), ("MOBILEIPV6-MIB", "mip6MnMobilityMessagesRecd"), ("MOBILEIPV6-MIB", "mip6MnBUsToHA"), ("MOBILEIPV6-MIB", "mip6MnBUAcksFromHA"), ("MOBILEIPV6-MIB", "mip6MnBUsToCN"), ("MOBILEIPV6-MIB", "mip6MnBUAcksFromCN"), ("MOBILEIPV6-MIB", "mip6MnBindingErrorsFromCN"), ("MOBILEIPV6-MIB", "mip6MnICMPErrorsRecd"), ("MOBILEIPV6-MIB", "mip6MnBRRequestsRecd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6MnRegistrationGroup = mip6MnRegistrationGroup.setStatus('current')
if mibBuilder.loadTexts: mip6MnRegistrationGroup.setDescription(' A collection of objects for monitoring the registration statistics for the mobile node. ')
mip6CnStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 9)).setObjects(("MOBILEIPV6-MIB", "mip6CnBURequestsAccepted"), ("MOBILEIPV6-MIB", "mip6CnBURequestsRejected"), ("MOBILEIPV6-MIB", "mip6CnBCEntryCreationTime"), ("MOBILEIPV6-MIB", "mip6CnBUAcceptedTime"), ("MOBILEIPV6-MIB", "mip6CnBURejectionTime"), ("MOBILEIPV6-MIB", "mip6CnBURejectionCode"), ("MOBILEIPV6-MIB", "mip6CnCtrDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6CnStatsGroup = mip6CnStatsGroup.setStatus('current')
if mibBuilder.loadTexts: mip6CnStatsGroup.setDescription(' A collection of objects for monitoring the control messages and corresponding statistics for each mobile node communicating with the correspondent node. ')
mip6HaSystemGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 10)).setObjects(("MOBILEIPV6-MIB", "mip6HaAdvsRecd"), ("MOBILEIPV6-MIB", "mip6HaAdvsSent"), ("MOBILEIPV6-MIB", "mip6HaAdvPreference"), ("MOBILEIPV6-MIB", "mip6HaAdvLifetime"), ("MOBILEIPV6-MIB", "mip6HaPrefixAdv"), ("MOBILEIPV6-MIB", "mip6HaPrefixSolicitation"), ("MOBILEIPV6-MIB", "mip6HaMCastCtlMsgSupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaSystemGroup = mip6HaSystemGroup.setStatus('current')
if mibBuilder.loadTexts: mip6HaSystemGroup.setDescription(' A collection of objects for monitoring the advertisement-related parameters and statistics for the home agent. ')
mip6HaListGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 11)).setObjects(("MOBILEIPV6-MIB", "mip6HaPreference"), ("MOBILEIPV6-MIB", "mip6HaRecvLifeTime"), ("MOBILEIPV6-MIB", "mip6HaRecvTimeStamp"), ("MOBILEIPV6-MIB", "mip6HaGaGlobalAddressType"), ("MOBILEIPV6-MIB", "mip6HaGaGlobalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaListGroup = mip6HaListGroup.setStatus('current')
if mibBuilder.loadTexts: mip6HaListGroup.setDescription(' A collection of objects for monitoring the Home Agent List on the home agent. ')
mip6HaStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 12)).setObjects(("MOBILEIPV6-MIB", "mip6HaBURequestsAccepted"), ("MOBILEIPV6-MIB", "mip6HaBURequestsDenied"), ("MOBILEIPV6-MIB", "mip6HaBCEntryCreationTime"), ("MOBILEIPV6-MIB", "mip6HaBUAcceptedTime"), ("MOBILEIPV6-MIB", "mip6HaBURejectionTime"), ("MOBILEIPV6-MIB", "mip6HaRecentBURejectionCode"), ("MOBILEIPV6-MIB", "mip6HaCtrDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaStatsGroup = mip6HaStatsGroup.setStatus('current')
if mibBuilder.loadTexts: mip6HaStatsGroup.setDescription(' A collection of objects for monitoring registration-related statistics on the home agent. ')
mip6CnGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 13)).setObjects(("MOBILEIPV6-MIB", "mip6CnHomeTestInitsRecd"), ("MOBILEIPV6-MIB", "mip6CnHomeTestsSent"), ("MOBILEIPV6-MIB", "mip6CnCareOfTestInitsRecd"), ("MOBILEIPV6-MIB", "mip6CnCareOfTestsSent"), ("MOBILEIPV6-MIB", "mip6CnBUsRecd"), ("MOBILEIPV6-MIB", "mip6CnBUAcksSent"), ("MOBILEIPV6-MIB", "mip6CnBRsSent"), ("MOBILEIPV6-MIB", "mip6CnBindingErrors"), ("MOBILEIPV6-MIB", "mip6CnBUsAccepted"), ("MOBILEIPV6-MIB", "mip6CnBUsRejected"), ("MOBILEIPV6-MIB", "mip6CnReasonUnspecified"), ("MOBILEIPV6-MIB", "mip6CnInsufficientResource"), ("MOBILEIPV6-MIB", "mip6CnHomeRegnNotSupported"), ("MOBILEIPV6-MIB", "mip6CnSeqNumberOutOfWindow"), ("MOBILEIPV6-MIB", "mip6CnExpiredHomeNonceIndex"), ("MOBILEIPV6-MIB", "mip6CnExpiredCareOfNonceIndex"), ("MOBILEIPV6-MIB", "mip6CnExpiredNonce"), ("MOBILEIPV6-MIB", "mip6CnRegTypeChangeDisallowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6CnGlobalStatsGroup = mip6CnGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: mip6CnGlobalStatsGroup.setDescription(' A collection of objects for monitoring advertisement and registration statistics on a correspondent node. ')
mip6HaGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 14)).setObjects(("MOBILEIPV6-MIB", "mip6HaHomeTestInitsRecd"), ("MOBILEIPV6-MIB", "mip6HaHomeTestsSent"), ("MOBILEIPV6-MIB", "mip6HaBUsRecd"), ("MOBILEIPV6-MIB", "mip6HaBUAcksSent"), ("MOBILEIPV6-MIB", "mip6HaBRAdviceSent"), ("MOBILEIPV6-MIB", "mip6HaBUsAccepted"), ("MOBILEIPV6-MIB", "mip6HaPrefDiscoverReqd"), ("MOBILEIPV6-MIB", "mip6HaReasonUnspecified"), ("MOBILEIPV6-MIB", "mip6HaAdmProhibited"), ("MOBILEIPV6-MIB", "mip6HaInsufficientResource"), ("MOBILEIPV6-MIB", "mip6HaHomeRegnNotSupported"), ("MOBILEIPV6-MIB", "mip6HaNotHomeSubnet"), ("MOBILEIPV6-MIB", "mip6HaNotHomeAgentForThisMN"), ("MOBILEIPV6-MIB", "mip6HaDupAddrDetectionFailed"), ("MOBILEIPV6-MIB", "mip6HaSeqNumberOutOfWindow"), ("MOBILEIPV6-MIB", "mip6HaExpiredHomeNonceIndex"), ("MOBILEIPV6-MIB", "mip6HaRegTypeChangeDisallowed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaGlobalStatsGroup = mip6HaGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: mip6HaGlobalStatsGroup.setDescription(' A collection of objects for monitoring advertisement and registration statistics on a home agent. ')
mip6BindingCacheCtlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 15)).setObjects(("MOBILEIPV6-MIB", "mip6BindingAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6BindingCacheCtlGroup = mip6BindingCacheCtlGroup.setStatus('current')
if mibBuilder.loadTexts: mip6BindingCacheCtlGroup.setDescription('A collection of objects for controlling the Binding Cache. ')
mip6NotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 133, 2, 1, 16)).setObjects(("MOBILEIPV6-MIB", "mip6MnRegistered"), ("MOBILEIPV6-MIB", "mip6MnDeRegistered"), ("MOBILEIPV6-MIB", "mip6MnCOAChanged"), ("MOBILEIPV6-MIB", "mip6MnBindingExpiredAtHA"), ("MOBILEIPV6-MIB", "mip6MnBindingExpiredAtCN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6NotificationGroup = mip6NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: mip6NotificationGroup.setDescription('A collection of notifications from a home agent or correspondent node to the Manager about the status of a mobile node. ')
mip6CoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 1)).setObjects(("MOBILEIPV6-MIB", "mip6SystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6CoreCompliance = mip6CoreCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6CoreCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB. ')
mip6Compliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 2)).setObjects(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6Compliance2 = mip6Compliance2.setStatus('current')
if mibBuilder.loadTexts: mip6Compliance2.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the Binding Cache and the Total Traffic. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- ')
mip6Compliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 3)).setObjects(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6BindingHstGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"), ("MOBILEIPV6-MIB", "mip6NodeTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6Compliance3 = mip6Compliance3.setStatus('current')
if mibBuilder.loadTexts: mip6Compliance3.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the Binding Cache, the Binding History, the total traffic, and the mobile node-wide traffic. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHstHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the -- mip6BindingHstHomeAddress object. -- -- OBJECT mip6BindingHstHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the -- mip6BindingHstHomeAddress object. -- ')
mip6CoreReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 4)).setObjects(("MOBILEIPV6-MIB", "mip6SystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6CoreReadOnlyCompliance = mip6CoreReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6CoreReadOnlyCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB without support for read-write (i.e., in read-only mode). ')
mip6ReadOnlyCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 5)).setObjects(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6ReadOnlyCompliance2 = mip6ReadOnlyCompliance2.setStatus('current')
if mibBuilder.loadTexts: mip6ReadOnlyCompliance2.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB without support for read-write (i.e., in read-only mode) and support monitoring of the Binding Cache and Total Traffic. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- ')
mip6ReadOnlyCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 6)).setObjects(("MOBILEIPV6-MIB", "mip6SystemGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheGroup"), ("MOBILEIPV6-MIB", "mip6BindingHstGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"), ("MOBILEIPV6-MIB", "mip6NodeTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6ReadOnlyCompliance3 = mip6ReadOnlyCompliance3.setStatus('current')
if mibBuilder.loadTexts: mip6ReadOnlyCompliance3.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB without support for read-write (i.e., in read-only mode) and support monitoring of the Binding Cache, the Binding History, the total traffic, and the mobile node-wide traffic. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHstHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the -- mip6BindingHstHomeAddress object. -- -- OBJECT mip6BindingHstHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the -- mip6BindingHstHomeAddress object. -- ')
mip6MnCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 7)).setObjects(("MOBILEIPV6-MIB", "mip6MnSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6MnCoreCompliance = mip6MnCoreCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6MnCoreCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the basic mobile node functionality. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6MnHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6MnHomeAddress -- object. -- -- OBJECT mip6MnHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6MnHomeAddress -- object. -- ')
mip6MnCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 8)).setObjects(("MOBILEIPV6-MIB", "mip6MnSystemGroup"), ("MOBILEIPV6-MIB", "mip6MnConfGroup"), ("MOBILEIPV6-MIB", "mip6MnRegistrationGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6MnCompliance2 = mip6MnCompliance2.setStatus('current')
if mibBuilder.loadTexts: mip6MnCompliance2.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the mobile node functionality specifically the Discovery- and Registration-related statistics, There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6MnHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6MnHomeAddress -- object. -- -- OBJECT mip6MnHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6MnHomeAddress -- object. -- -- OBJECT mip6MnBLNodeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6MnBLNodeAddress -- object. -- -- OBJECT mip6MnBLNodeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6MnBLNodeAddress -- object. -- ')
mip6CnCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 9)).setObjects(("MOBILEIPV6-MIB", "mip6CnGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6CnCoreCompliance = mip6CnCoreCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6CnCoreCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the basic correspondent node functionality. ')
mip6CnCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 10)).setObjects(("MOBILEIPV6-MIB", "mip6CnGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6CnStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6CnCompliance = mip6CnCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6CnCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the basic correspondent node functionality. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. ')
mip6HaCoreCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 11)).setObjects(("MOBILEIPV6-MIB", "mip6HaSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaCoreCompliance = mip6HaCoreCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6HaCoreCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the basic home agent functionality. ')
mip6HaCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 12)).setObjects(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaCompliance2 = mip6HaCompliance2.setStatus('current')
if mibBuilder.loadTexts: mip6HaCompliance2.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring of the home agent functionality specifically the Home Agent List and the home-agent-registration-related statistics, There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6HaLinkLocalAddressType -- SYNTAX InetAddressType { ipv6z(4) } -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- -- OBJECT mip6HaLinkLocalAddress -- SYNTAX InetAddress (SIZE(20)) -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- ')
mip6HaCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 13)).setObjects(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheCtlGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaCompliance3 = mip6HaCompliance3.setStatus('current')
if mibBuilder.loadTexts: mip6HaCompliance3.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support monitoring and control of the home agent functionality specifically the Home Agent List and the home-agent-registration-related statistics, There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6HaLinkLocalAddressType -- SYNTAX InetAddressType { ipv6z(4) } -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- -- OBJECT mip6HaLinkLocalAddress -- SYNTAX InetAddress (SIZE(20)) -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- ')
mip6HaCoreReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 14)).setObjects(("MOBILEIPV6-MIB", "mip6HaSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaCoreReadOnlyCompliance = mip6HaCoreReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6HaCoreReadOnlyCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB without support for read-write (i.e., in read-only mode) and support monitoring of the basic home agent functionality. ')
mip6HaReadOnlyCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 15)).setObjects(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaReadOnlyCompliance2 = mip6HaReadOnlyCompliance2.setStatus('current')
if mibBuilder.loadTexts: mip6HaReadOnlyCompliance2.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB without support for read-write (i.e., in read-only mode) and support monitoring of the home agent functionality specifically the Home Agent List and the home-agent-registration-related statistics. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6HaLinkLocalAddressType -- SYNTAX InetAddressType { ipv6z(4) } -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- -- OBJECT mip6HaLinkLocalAddress -- SYNTAX InetAddress (SIZE(20)) -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- ')
mip6HaReadOnlyCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 16)).setObjects(("MOBILEIPV6-MIB", "mip6HaSystemGroup"), ("MOBILEIPV6-MIB", "mip6HaListGroup"), ("MOBILEIPV6-MIB", "mip6HaStatsGroup"), ("MOBILEIPV6-MIB", "mip6HaGlobalStatsGroup"), ("MOBILEIPV6-MIB", "mip6BindingCacheCtlGroup"), ("MOBILEIPV6-MIB", "mip6TotalTrafficGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6HaReadOnlyCompliance3 = mip6HaReadOnlyCompliance3.setStatus('current')
if mibBuilder.loadTexts: mip6HaReadOnlyCompliance3.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB without support for read-write (i.e., in read-only mode) and support monitoring and control of the home agent functionality specifically the Home Agent List and the home-agent-registration-related statistics, There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6HaLinkLocalAddressType -- SYNTAX InetAddressType { ipv6z(4) } -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- -- OBJECT mip6HaLinkLocalAddress -- SYNTAX InetAddress (SIZE(20)) -- DESCRIPTION -- This MIB module requires support for local -- ipv6 addresses for the mip6HaLinkLocalAddress -- object. -- ')
mip6NotificationCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 133, 2, 2, 17)).setObjects(("MOBILEIPV6-MIB", "mip6NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mip6NotificationCompliance = mip6NotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: mip6NotificationCompliance.setDescription('The compliance statement for SNMP entities that implement the MOBILEIPV6-MIB and support Notification from home agent or correspondent node to management stations about the mobile node status. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there are compliance requirements, expressed in OBJECT clause form in this description: -- OBJECT mip6BindingHomeAddressType -- SYNTAX InetAddressType { ipv6(2) } -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. -- -- OBJECT mip6BindingHomeAddress -- SYNTAX InetAddress (SIZE(16)) -- DESCRIPTION -- This MIB module requires support for global -- ipv6 addresses for the mip6BindingHomeAddress -- object. ')
mibBuilder.exportSymbols("MOBILEIPV6-MIB", mip6BindingHstHomeAddress=mip6BindingHstHomeAddress, mip6HaPrefixAdv=mip6HaPrefixAdv, mip6HCOutPkts=mip6HCOutPkts, mip6HCNodeInPkts=mip6HCNodeInPkts, mip6HaBURejectionTime=mip6HaBURejectionTime, mip6MnBindingErrorsFromCN=mip6MnBindingErrorsFromCN, mip6BindingTimeGranted=mip6BindingTimeGranted, mip6MnPrefixSolicitationsSent=mip6MnPrefixSolicitationsSent, mip6CnStatsGroup=mip6CnStatsGroup, mip6MnBLAcceptedTime=mip6MnBLAcceptedTime, mip6MnMobilityMessagesRecd=mip6MnMobilityMessagesRecd, mip6MnBLTable=mip6MnBLTable, mip6Groups=mip6Groups, mip6HaAdvsRecd=mip6HaAdvsRecd, mip6MnRegistrationGroup=mip6MnRegistrationGroup, mip6Objects=mip6Objects, mip6BindingHstCOA=mip6BindingHstCOA, mip6InPkts=mip6InPkts, mip6MnMobilityMessagesSent=mip6MnMobilityMessagesSent, mip6HaConfEntry=mip6HaConfEntry, mip6HaRecvLifeTime=mip6HaRecvLifeTime, mip6MnBLTimeSent=mip6MnBLTimeSent, mip6HaHomeRegnNotSupported=mip6HaHomeRegnNotSupported, mip6HaLinkLocalAddressType=mip6HaLinkLocalAddressType, mip6CnHomeTestInitsRecd=mip6CnHomeTestInitsRecd, mip6HaCompliance2=mip6HaCompliance2, mip6MnCoreCompliance=mip6MnCoreCompliance, mip6HaCtrDiscontinuityTime=mip6HaCtrDiscontinuityTime, mip6CoreCompliance=mip6CoreCompliance, mip6MnDiscoveryRequests=mip6MnDiscoveryRequests, mip6SystemGroup=mip6SystemGroup, mip6CnCompliance=mip6CnCompliance, mip6CnBURequestsRejected=mip6CnBURequestsRejected, mip6HaListEntry=mip6HaListEntry, mip6MnPrefixAdvsIgnored=mip6MnPrefixAdvsIgnored, mip6BindingHstGroup=mip6BindingHstGroup, mip6HaExpiredHomeNonceIndex=mip6HaExpiredHomeNonceIndex, mip6CnHomeTestsSent=mip6CnHomeTestsSent, mip6BindingCacheCtlGroup=mip6BindingCacheCtlGroup, mip6HaBCEntryCreationTime=mip6HaBCEntryCreationTime, mip6BindingCOAType=mip6BindingCOAType, mip6HCInPkts=mip6HCInPkts, mip6CnBCEntryCreationTime=mip6CnBCEntryCreationTime, mip6HaBRAdviceSent=mip6HaBRAdviceSent, mip6ReadOnlyCompliance2=mip6ReadOnlyCompliance2, mip6Compliance2=mip6Compliance2, mip6HaGaGlobalAddressType=mip6HaGaGlobalAddressType, mip6MnDiscoveryReplies=mip6MnDiscoveryReplies, mip6BindingHstUsageCount=mip6BindingHstUsageCount, mip6HaInsufficientResource=mip6HaInsufficientResource, mip6HaCoreReadOnlyCompliance=mip6HaCoreReadOnlyCompliance, mip6MnBUsToCN=mip6MnBUsToCN, mip6HaCounterTable=mip6HaCounterTable, mip6HaNotHomeSubnet=mip6HaNotHomeSubnet, mip6HaAdvPreference=mip6HaAdvPreference, mip6CnCareOfTestInitsRecd=mip6CnCareOfTestInitsRecd, mip6HaLinkLocalAddress=mip6HaLinkLocalAddress, mip6Notifications=mip6Notifications, mip6HaRecentBURejectionCode=mip6HaRecentBURejectionCode, mip6BindingAdminStatus=mip6BindingAdminStatus, mip6HaHomeTestInitsRecd=mip6HaHomeTestInitsRecd, mip6HaSystemGroup=mip6HaSystemGroup, mip6MnConf=mip6MnConf, mip6NodeCtrDiscontinuityTime=mip6NodeCtrDiscontinuityTime, mip6NodeOutPkts=mip6NodeOutPkts, mip6HaStats=mip6HaStats, mip6CnCtrDiscontinuityTime=mip6CnCtrDiscontinuityTime, mip6HaBUAcceptedTime=mip6HaBUAcceptedTime, mip6ReadOnlyCompliance3=mip6ReadOnlyCompliance3, mip6HCNodeOutPkts=mip6HCNodeOutPkts, mip6CnHomeRegnNotSupported=mip6CnHomeRegnNotSupported, mip6MnBRRequestsRecd=mip6MnBRRequestsRecd, mip6BindingCacheEntry=mip6BindingCacheEntry, mip6BindingHstTimeExpired=mip6BindingHstTimeExpired, mip6CnGlobalStats=mip6CnGlobalStats, mip6CnBURequestsAccepted=mip6CnBURequestsAccepted, mip6Capabilities=mip6Capabilities, mip6CnCounterTable=mip6CnCounterTable, mip6MIB=mip6MIB, mip6HaGlAddrEntry=mip6HaGlAddrEntry, mip6Bindings=mip6Bindings, mip6NodeTrafficEntry=mip6NodeTrafficEntry, mip6CnBRsSent=mip6CnBRsSent, mip6HaReasonUnspecified=mip6HaReasonUnspecified, mip6MnDeRegistered=mip6MnDeRegistered, mip6NodeOutOctets=mip6NodeOutOctets, mip6CnCounterEntry=mip6CnCounterEntry, mip6BindingHstCOAType=mip6BindingHstCOAType, mip6Stats=mip6Stats, mip6BindingHomeAddressType=mip6BindingHomeAddressType, mip6HaRecvTimeStamp=mip6HaRecvTimeStamp, mip6MnBLAccepted=mip6MnBLAccepted, mip6BindingUsageCount=mip6BindingUsageCount, mip6MnRegistration=mip6MnRegistration, mip6OutOctets=mip6OutOctets, mip6HaListGroup=mip6HaListGroup, mip6HaBURequestsDenied=mip6HaBURequestsDenied, mip6CnGlobalStatsGroup=mip6CnGlobalStatsGroup, mip6MnBLDontSendBUFlag=mip6MnBLDontSendBUFlag, mip6MnBUsToHA=mip6MnBUsToHA, mip6MnRegistered=mip6MnRegistered, mip6CnBUAcksSent=mip6CnBUAcksSent, mip6CnStats=mip6CnStats, mip6HaRegTypeChangeDisallowed=mip6HaRegTypeChangeDisallowed, mip6HaGaAddrSeqNo=mip6HaGaAddrSeqNo, mip6MnCOAChanged=mip6MnCOAChanged, mip6TotalTraffic=mip6TotalTraffic, mip6BindingHomeAddress=mip6BindingHomeAddress, mip6BindingUsageTS=mip6BindingUsageTS, mip6HaBURequestsAccepted=mip6HaBURequestsAccepted, mip6MnHomeAddressEntry=mip6MnHomeAddressEntry, mip6NodeTrafficGroup=mip6NodeTrafficGroup, mip6MnPrefixAdvsRecd=mip6MnPrefixAdvsRecd, mip6HaAdvertisement=mip6HaAdvertisement, mip6MnCompliance2=mip6MnCompliance2, mip6HaHomeTestsSent=mip6HaHomeTestsSent, mip6Conformance=mip6Conformance, mip6Ha=mip6Ha, mip6HaBUsRecd=mip6HaBUsRecd, mip6MnHomeAddressState=mip6MnHomeAddressState, mip6NodeInPkts=mip6NodeInPkts, mip6Cn=mip6Cn, mip6TotalTrafficGroup=mip6TotalTrafficGroup, mip6MnBindingExpiredAtHA=mip6MnBindingExpiredAtHA, mip6MnSystem=mip6MnSystem, mip6MnBUAcksFromHA=mip6MnBUAcksFromHA, mip6CnExpiredCareOfNonceIndex=mip6CnExpiredCareOfNonceIndex, mip6Status=mip6Status, mip6BindingHomeRegn=mip6BindingHomeRegn, mip6HaDupAddrDetectionFailed=mip6HaDupAddrDetectionFailed, mip6NodeInOctets=mip6NodeInOctets, mip6HaGaGlobalAddress=mip6HaGaGlobalAddress, mip6HaPrefixSolicitation=mip6HaPrefixSolicitation, mip6MnSystemGroup=mip6MnSystemGroup, mip6OutPkts=mip6OutPkts, mip6HCNodeInOctets=mip6HCNodeInOctets, mip6CnBURejectionTime=mip6CnBURejectionTime, mip6MnBLCOA=mip6MnBLCOA, mip6MnBLCOAType=mip6MnBLCOAType, mip6HaCoreCompliance=mip6HaCoreCompliance, mip6System=mip6System, mip6CnSeqNumberOutOfWindow=mip6CnSeqNumberOutOfWindow, mip6CnCareOfTestsSent=mip6CnCareOfTestsSent, mip6HaPrefDiscoverReqd=mip6HaPrefDiscoverReqd, mip6HaPreference=mip6HaPreference, mip6HaSeqNumberOutOfWindow=mip6HaSeqNumberOutOfWindow, mip6CnBUsRejected=mip6CnBUsRejected, mip6Compliances=mip6Compliances, mip6MnBLNodeAddressType=mip6MnBLNodeAddressType, mip6BindingTimeRegistered=mip6BindingTimeRegistered, mip6MnDiscoveryTimeouts=mip6MnDiscoveryTimeouts, mip6CnExpiredNonce=mip6CnExpiredNonce, mip6CnBUsAccepted=mip6CnBUsAccepted, mip6CounterDiscontinuityTime=mip6CounterDiscontinuityTime, mip6MnICMPErrorsRecd=mip6MnICMPErrorsRecd, mip6HaGlAddrTable=mip6HaGlAddrTable, mip6MnBLLifeTimeRequested=mip6MnBLLifeTimeRequested, mip6MnBLRetransmissions=mip6MnBLRetransmissions, mip6NodeTrafficTable=mip6NodeTrafficTable, mip6HaGlobalStatsGroup=mip6HaGlobalStatsGroup, mip6MnBLNodeAddress=mip6MnBLNodeAddress, mip6MnConfGroup=mip6MnConfGroup, mip6HaCounterEntry=mip6HaCounterEntry, mip6MnBLEntry=mip6MnBLEntry, mip6CnSystem=mip6CnSystem, mip6MnBLMaxSeq=mip6MnBLMaxSeq, mip6CnReasonUnspecified=mip6CnReasonUnspecified, mip6BindingCOA=mip6BindingCOA, PYSNMP_MODULE_ID=mip6MIB, mip6BindingHstHomeAddressType=mip6BindingHstHomeAddressType, mip6CnBindingErrors=mip6CnBindingErrors, mip6MnHomeAddressTable=mip6MnHomeAddressTable, mip6MnBLLifeTimeGranted=mip6MnBLLifeTimeGranted, mip6HaAdvLifetime=mip6HaAdvLifetime, mip6BindingHstTimeRegistered=mip6BindingHstTimeRegistered, mip6NotificationCompliance=mip6NotificationCompliance, mip6MnBUAcksFromCN=mip6MnBUAcksFromCN, mip6BindingHstHomeRegn=mip6BindingHstHomeRegn, mip6MnMovedToFN=mip6MnMovedToFN, mip6HaAdvsSent=mip6HaAdvsSent, mip6CnBUAcceptedTime=mip6CnBUAcceptedTime, mip6BindingHistoryEntry=mip6BindingHistoryEntry, mip6HCNodeOutOctets=mip6HCNodeOutOctets, mip6Core=mip6Core, mip6BindingCacheGroup=mip6BindingCacheGroup, mip6CnRegTypeChangeDisallowed=mip6CnRegTypeChangeDisallowed, mip6HaReadOnlyCompliance2=mip6HaReadOnlyCompliance2, mip6HCOutOctets=mip6HCOutOctets, mip6HaGlobalStats=mip6HaGlobalStats, mip6HaStatsGroup=mip6HaStatsGroup, mip6HaReadOnlyCompliance3=mip6HaReadOnlyCompliance3, mip6Compliance3=mip6Compliance3, mip6HaBUAcksSent=mip6HaBUAcksSent, mip6BindingHstUsageTS=mip6BindingHstUsageTS, mip6Mn=mip6Mn, mip6CnExpiredHomeNonceIndex=mip6CnExpiredHomeNonceIndex, mip6CnBURejectionCode=mip6CnBURejectionCode, mip6MnRegnCounters=mip6MnRegnCounters, mip6HaCompliance3=mip6HaCompliance3, mip6HaAdmProhibited=mip6HaAdmProhibited, mip6MnHomeAddressType=mip6MnHomeAddressType, mip6HaListTable=mip6HaListTable, Mip6BURequestRejectionCode=Mip6BURequestRejectionCode, mip6MnMovedToHN=mip6MnMovedToHN, mip6CnInsufficientResource=mip6CnInsufficientResource, mip6BindingHstIndex=mip6BindingHstIndex, mip6HaBUsAccepted=mip6HaBUsAccepted, mip6BindingMaxSeq=mip6BindingMaxSeq, mip6BindingTimeRemaining=mip6BindingTimeRemaining, mip6InOctets=mip6InOctets, mip6MnHomeAddress=mip6MnHomeAddress, mip6HaMCastCtlMsgSupport=mip6HaMCastCtlMsgSupport, mip6HaNotHomeAgentForThisMN=mip6HaNotHomeAgentForThisMN, mip6HaConfTable=mip6HaConfTable, mip6NotificationGroup=mip6NotificationGroup, mip6CoreReadOnlyCompliance=mip6CoreReadOnlyCompliance, mip6MnBindingExpiredAtCN=mip6MnBindingExpiredAtCN, mip6BindingHistoryTable=mip6BindingHistoryTable, mip6CnCoreCompliance=mip6CnCoreCompliance, mip6BindingCacheTable=mip6BindingCacheTable, mip6HCInOctets=mip6HCInOctets, mip6CnBUsRecd=mip6CnBUsRecd)
