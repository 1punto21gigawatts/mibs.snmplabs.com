#
# PySNMP MIB module SCA-MPLINK2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCA-MPLINK2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, MibIdentifier, TimeTicks, Counter64, IpAddress, NotificationType, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Counter32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "MibIdentifier", "TimeTicks", "Counter64", "IpAddress", "NotificationType", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Counter32", "Bits", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class OnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class Attachment(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("none", 1), ("tenbase-t", 2), ("aui", 3), ("id0", 4), ("id1", 5), ("id2", 6), ("id3", 7), ("eia530-dce", 8), ("test-plug", 9), ("v11-dce", 10), ("v24-dce", 11), ("v35-dce", 12), ("v36-dce", 13), ("eia530-dte", 14), ("v11-dte", 15), ("v24-dte", 16), ("v35-dte", 17), ("v36-dte", 18), ("empty", 19), ("isdn", 20), ("pcmcia-async", 21), ("isdn-e1-rj45", 22), ("isdn-e1-bnc", 23), ("isdn-t1-rj45", 24))

class CompType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("proprietary", 1), ("stac", 2))

class Direction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3))

class DataState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("down", 1), ("timeCut", 2), ("up", 3))

class ConnectState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("create", 1), ("down", 2), ("outgoingCall", 3), ("incomingCall", 4), ("incomingDisconnect", 5), ("outgoingDisconnect", 6), ("waitDisconnectConfirm", 7), ("error", 8), ("destroy", 9), ("timeCut", 10), ("idle", 11), ("up", 12), ("empty", 13))

mplk2 = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44))
mpl2Service = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 1))
mpl2LanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 2))
mpl2WanSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 3))
mpl2IfSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 4))
mpl2General = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 44, 5))
mpl2ServiceTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 1, 1), )
if mibBuilder.loadTexts: mpl2ServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceTable.setDescription('This table contains information on MP Links. These entries applies to LAN entries as well as WAN entries.')
mpl2ServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2ServiceNumber"))
if mibBuilder.loadTexts: mpl2ServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceEntry.setDescription('Information on a particular MP Link.')
mpl2ServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceNumber.setDescription('The MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mpl2ServiceSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceSlotNumber.setDescription('The Slot position of the card. Set to 0 for stand-alone products.')
mpl2ServicePlugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServicePlugNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServicePlugNumber.setDescription('The plug number of the physical interface to which the MP Link is associated.')
mpl2ServicePlugName = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServicePlugName.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServicePlugName.setDescription('The name of the physical interface to which the MP Link is associated.')
mpl2ServiceAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 5), Attachment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceAttachment.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceAttachment.setDescription('The connector type used to connect the router to the LAN or WAN.')
mpl2ServiceProvider = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16))).clone(namedValues=NamedValues(("lan", 1), ("lapbHdlc", 2), ("pppHdlc", 3), ("frHdlc", 4), ("frAttachment", 5), ("lapbIsdn", 6), ("pppIsdn", 7), ("isdnAttachment", 8), ("x25Lapb", 9), ("x25Attachment", 10), ("slip", 11), ("pppMultiMaster", 12), ("pppPcmciaModem", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceProvider.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceProvider.setDescription('The type of provider for this MP Link. For WAN links this specifies the actual protocol stack.')
mpl2ServiceBytesSentUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesSentUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceBytesSentUpper.setDescription('The upper 32 bits of the 64 bits counter which is the number of octets (bytes) sent via the MP Link.')
mpl2ServiceBytesSentLower = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesSentLower.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceBytesSentLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of octets (bytes) sent via the MP Link.')
mpl2ServiceBytesReceivedUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesReceivedUpper.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceBytesReceivedUpper.setDescription('The lower 32 bits of the 64 bits counter which is the number of octets (bytes) sent via the MP Link.')
mpl2ServiceBytesReceivedLower = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2ServiceBytesReceivedLower.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceBytesReceivedLower.setDescription('The lower 32 bits of the 64 bits counter which is the number of octets (bytes) received via the MP Link.')
mpl2ServiceLock = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 1, 1, 1, 11), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpl2ServiceLock.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2ServiceLock.setDescription("Indicates whether an MP Link has been locked from local management. The link may be unlocked by setting the value to 'off' and locked by setting the value to 'on'.")
mpl2LanTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 2, 1), )
if mibBuilder.loadTexts: mpl2LanTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTable.setDescription('This table contains information on LAN MP Links.')
mpl2LanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2LanNumber"))
if mibBuilder.loadTexts: mpl2LanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanEntry.setDescription('Information on a particular LAN MP Link.')
mpl2LanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanNumber.setDescription('The LAN MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mpl2LanRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanRxCRCErrors.setDescription('The number of frames received which were discarded due to Cyclic Redundancy Check (CRC) errors.')
mpl2LanRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanRxOverrun.setDescription('The number of frames received which were lost due to RAM overloads within the router. This should not occur.')
mpl2LanRxLong = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxLong.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanRxLong.setDescription('The number of frames received which were discarded due to being larger than the maximum allowable length on the LAN.')
mpl2LanRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanRxOverflow.setDescription('The number of frames received which were discarded due to lack of buffer capacity.')
mpl2LanRxAlnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxAlnErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanRxAlnErrors.setDescription('The number of frames received which were discarded due to having the wrong frame length.')
mpl2LanRxOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxOuts.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanRxOuts.setDescription('The number of frames received which were processed by higher layer protocols.')
mpl2LanRxShort = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanRxShort.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanRxShort.setDescription('The number of frames received which were discarded due to being shorter than the smallest allowable length on the LAN.')
mpl2LanTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxDeferred.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxDeferred.setDescription('The number of outgoing frames which were discarded due to a busy link.')
mpl2LanTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxUnderrun.setDescription('The number of outgoing frames which were discarded due to overload.')
mpl2LanTxSQEFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxSQEFailure.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxSQEFailure.setDescription('The number of outbound frames which had Signal Quality Errors (SQE).')
mpl2LanTxExcDeferral = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxExcDeferral.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxExcDeferral.setDescription('The number of transmission attempts which were delayed for more than 3.2 ms.')
mpl2LanTxCollExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxCollExceed.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxCollExceed.setDescription('The number of outbound frames which were discarded due to exceeding 16 collisions on the Ethernet.')
mpl2LanTxLateColl = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxLateColl.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxLateColl.setDescription('The number of collisions occurring after the first 512 bytes of a frame had been transmitted.')
mpl2LanTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxCollisions.setDescription('The number of outgoing frames which were discarded due to collisions that occurred during transmissions.')
mpl2LanTxNoCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2LanTxNoCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2LanTxNoCarrier.setDescription('The number of No Carrier detections during transmissions.')
mpl2WanTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 3, 1), )
if mibBuilder.loadTexts: mpl2WanTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanTable.setDescription('This table contains information on WAN MP Links.')
mpl2WanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2WanNumber"))
if mibBuilder.loadTexts: mpl2WanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanEntry.setDescription('Information on a particular WAN MP Link.')
mpl2WanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanNumber.setDescription('The WAN MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mpl2WanDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 2), DataState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanDataState.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanDataState.setDescription('The state of the MP Link seen from the higher layer protocol.')
mpl2WanDataStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanDataStateTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanDataStateTimer.setDescription('The time in seconds since the MP Link entered the Data State.')
mpl2WanConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 4), ConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanConnectState.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanConnectState.setDescription('Indicates the connection state of the WAN MP Link.')
mpl2WanConnectStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanConnectStateTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanConnectStateTimer.setDescription('The time in seconds since the MP Link entered the Connect State.')
mpl2WanCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 6), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCompression.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanCompression.setDescription("Indicates if data compression is used over the WAN MP Link. For frame relay links compression is not negotiated. For all other WAN protocols the compression will remain 'off' if not configured in both routers over the link.")
mpl2WanCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 7), CompType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCompressionType.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanCompressionType.setDescription('Proprietary compression is used for LAPB and X.25 MP Links. For all other WAN protocols the Stac compression algorithm is used.')
mpl2WanCallsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanCallsSucceeded.setDescription('The number of outgoing call which succeeded in making the connection.')
mpl2WanCallsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanCallsFailed.setDescription('The number of outgoing call which failed to make the connection.')
mpl2WanCallsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanCallsAccepted.setDescription('The number of incoming calls which were accepted on this link.')
mpl2WanCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanCallsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanCallsRejected.setDescription('The number of incoming calls which were rejected on this link.')
mpl2WanRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpl2WanRetries.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanRetries.setDescription('The number of retries made for outgoing calls. May be set to zero which causes the call sequence to restarted.')
mpl2WanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 13), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanDirection.setDescription("Shows who initiated the call. 'incoming' if the call was initiated by the remote router and 'outgoing' if the call was inititated by this router. For PPP Multi Links the direction refers the the direction of the first slave link.")
mpl2WanHasBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 14), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanHasBackup.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanHasBackup.setDescription('Indicates whether this link has a backup link configured for it.')
mpl2WanBackupFor = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanBackupFor.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanBackupFor.setDescription('Shows the primary link for which this link is the backup. The value 0 indicates that this is not a backup link.')
mpl2WanBackupForAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 16), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanBackupForAttachment.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanBackupForAttachment.setDescription('Indicates whether this link is a backup for an attachment.')
mpl2WanIsSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 17), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanIsSlave.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanIsSlave.setDescription('Indicates whether this link is a slave link associated with a PPP Multi Link.')
mpl2WanPppMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanPppMaster.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanPppMaster.setDescription('Indicates the master link for a slave link. For master links and links not associated with a PPP Multi Link the value is 0.')
mpl2WanPppSlaveUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanPppSlaveUpCount.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanPppSlaveUpCount.setDescription("The number of slave links in Connect State 'up'. For slave links and links not associated with a PPP Multi Link the value is 1.")
mpl2WanActivityTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanActivityTimeLeft.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanActivityTimeLeft.setDescription("The time remaining in seconds until the Daily Activity Limit will close and lock the link. When the Daily Activity Limit has been reached, the link can be activated by setting mpl2WanActivity to 'on'.")
mpl2WanActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 21), OnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpl2WanActivity.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanActivity.setDescription("Indicates whether the Daily Activity Limit has been reached and locked the link. To unlock the link set the value to 'off'. It is not possible to set to the value to 'on'.")
mpl2WanTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 3, 1, 1, 22), OnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2WanTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2WanTimer.setDescription("Indicates whether an MP Link timer has locked the link. 'on' means the link is locked.")
mpl2IfStackTable = MibTable((1, 3, 6, 1, 4, 1, 208, 44, 4, 1), )
if mibBuilder.loadTexts: mpl2IfStackTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2IfStackTable.setDescription("This table contains information on the relationships between the multiple sub-layers of network interfaces. In particular, it contains information on which sub- layers run 'on top of' which other sub-layers. Each sub-layer corresponds to a conceptual row in the ifTable.")
mpl2IfStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 44, 4, 1, 1), ).setIndexNames((0, "SCA-MPLINK2-MIB", "mpl2IfStackNumber"))
if mibBuilder.loadTexts: mpl2IfStackEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2IfStackEntry.setDescription("Information on a particular relationship between two sub-layers, specifying that one sub-layer runs on 'top' of the other sub-layer. Each sub-layer corresponds to a conceptual row in the ifTable.")
mpl2IfStackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2IfStackNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2IfStackNumber.setDescription('The MP Link number. The MP Link number is the same as the ifIndex for the corresponding upper group in the MIB-2 ifGroup.')
mpl2IfStackLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 44, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2IfStackLowerLayer.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2IfStackLowerLayer.setDescription("The value of ifIndex corresponding to the lower sub- layer of the relationship, i.e., the sub-layer which runs 'below' the sub-layer identified by the corresponding instance of mpl2IfStackNumber. If there is no lower sub-layer, then this object has the value 0.")
mpl2GeneralOverviewChange = MibScalar((1, 3, 6, 1, 4, 1, 208, 44, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpl2GeneralOverviewChange.setStatus('mandatory')
if mibBuilder.loadTexts: mpl2GeneralOverviewChange.setDescription('The value of sysUpTime at the time any MP Link seen from the overview changed state or the like.')
mpl2LockEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,1)).setObjects(("SCA-MPLINK2-MIB", "mpl2ServiceNumber"), ("SCA-MPLINK2-MIB", "mpl2ServiceLock"))
if mibBuilder.loadTexts: mpl2LockEvent.setDescription('Lock state changed to <mpl2ServiceLock> for link <mpl2ServiceNumber>. This trap is sent when an MP Link is locked or unlocked from local management or via SNMP.')
mpl2WanRetriesEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,2)).setObjects(("SCA-MPLINK2-MIB", "mpl2WanNumber"), ("SCA-MPLINK2-MIB", "mpl2WanRetries"))
if mibBuilder.loadTexts: mpl2WanRetriesEvent.setDescription('Max. retries exceeded (<mpl2WanRetries>) for link <mpl2WanNumber>. This trap is sent when an MP Link has had more failed connect-attempts than allowed in the configuration.')
mpl2WanActivityEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,3)).setObjects(("SCA-MPLINK2-MIB", "mpl2WanNumber"), ("SCA-MPLINK2-MIB", "mpl2WanActivity"))
if mibBuilder.loadTexts: mpl2WanActivityEvent.setDescription('Daily Activity Limit has been reached. Link <mpl2WanNumber> locked. This trap is sent when the Daily Activity Limit has been reached and locked the link.')
mpl2WanTimerEvent = NotificationType((1, 3, 6, 1, 4, 1, 208, 44) + (0,4)).setObjects(("SCA-MPLINK2-MIB", "mpl2WanNumber"), ("SCA-MPLINK2-MIB", "mpl2WanTimer"))
if mibBuilder.loadTexts: mpl2WanTimerEvent.setDescription('Link timer has changed lock state to <WanTimer> for link <WanNumber>. This trap is sent when an MP Link timer has locked or unlocked the link.')
mibBuilder.exportSymbols("SCA-MPLINK2-MIB", mpl2WanDirection=mpl2WanDirection, mpl2LanRxCRCErrors=mpl2LanRxCRCErrors, mpl2ServicePlugName=mpl2ServicePlugName, Direction=Direction, mpl2LanRxAlnErrors=mpl2LanRxAlnErrors, mpl2WanCallsSucceeded=mpl2WanCallsSucceeded, mpl2WanRetries=mpl2WanRetries, mpl2WanActivityEvent=mpl2WanActivityEvent, mpl2LanNumber=mpl2LanNumber, mpl2WanCallsAccepted=mpl2WanCallsAccepted, mpl2WanPppSlaveUpCount=mpl2WanPppSlaveUpCount, mpl2IfStackTable=mpl2IfStackTable, mpl2LanTxSQEFailure=mpl2LanTxSQEFailure, mpl2LanTxLateColl=mpl2LanTxLateColl, mpl2LanSpecific=mpl2LanSpecific, mpl2ServiceBytesReceivedUpper=mpl2ServiceBytesReceivedUpper, mpl2WanActivityTimeLeft=mpl2WanActivityTimeLeft, mpl2WanEntry=mpl2WanEntry, mpl2ServiceBytesReceivedLower=mpl2ServiceBytesReceivedLower, mpl2ServiceNumber=mpl2ServiceNumber, mpl2General=mpl2General, mpl2LanRxLong=mpl2LanRxLong, mpl2LanTxCollisions=mpl2LanTxCollisions, mpl2WanTimer=mpl2WanTimer, mpl2WanTimerEvent=mpl2WanTimerEvent, mpl2GeneralOverviewChange=mpl2GeneralOverviewChange, mpl2WanConnectStateTimer=mpl2WanConnectStateTimer, mpl2WanActivity=mpl2WanActivity, DataState=DataState, mpl2IfSpecific=mpl2IfSpecific, mpl2ServiceLock=mpl2ServiceLock, mpl2LanTxExcDeferral=mpl2LanTxExcDeferral, OnOff=OnOff, mpl2LanRxShort=mpl2LanRxShort, mpl2WanDataStateTimer=mpl2WanDataStateTimer, mpl2WanHasBackup=mpl2WanHasBackup, mpl2IfStackLowerLayer=mpl2IfStackLowerLayer, mpl2LanTxNoCarrier=mpl2LanTxNoCarrier, mpl2ServiceBytesSentUpper=mpl2ServiceBytesSentUpper, Attachment=Attachment, mpl2LanRxOverflow=mpl2LanRxOverflow, mpl2LanTxDeferred=mpl2LanTxDeferred, mpl2ServiceProvider=mpl2ServiceProvider, mpl2ServiceEntry=mpl2ServiceEntry, mpl2LanRxOuts=mpl2LanRxOuts, mplk2=mplk2, mpl2WanBackupFor=mpl2WanBackupFor, mpl2WanPppMaster=mpl2WanPppMaster, mpl2WanDataState=mpl2WanDataState, mpl2LanTable=mpl2LanTable, mpl2WanCallsFailed=mpl2WanCallsFailed, mpl2ServicePlugNumber=mpl2ServicePlugNumber, mpl2ServiceTable=mpl2ServiceTable, mpl2WanNumber=mpl2WanNumber, mpl2Service=mpl2Service, mpl2WanSpecific=mpl2WanSpecific, mpl2WanCompression=mpl2WanCompression, mpl2WanBackupForAttachment=mpl2WanBackupForAttachment, mpl2IfStackEntry=mpl2IfStackEntry, mpl2WanConnectState=mpl2WanConnectState, mpl2LockEvent=mpl2LockEvent, ConnectState=ConnectState, mpl2LanEntry=mpl2LanEntry, mpl2ServiceAttachment=mpl2ServiceAttachment, mpl2WanTable=mpl2WanTable, mpl2WanCompressionType=mpl2WanCompressionType, mpl2WanRetriesEvent=mpl2WanRetriesEvent, mpl2WanIsSlave=mpl2WanIsSlave, mpl2ServiceSlotNumber=mpl2ServiceSlotNumber, mpl2LanRxOverrun=mpl2LanRxOverrun, mpl2LanTxCollExceed=mpl2LanTxCollExceed, mpl2ServiceBytesSentLower=mpl2ServiceBytesSentLower, mpl2IfStackNumber=mpl2IfStackNumber, mpl2WanCallsRejected=mpl2WanCallsRejected, CompType=CompType, mpl2LanTxUnderrun=mpl2LanTxUnderrun)
