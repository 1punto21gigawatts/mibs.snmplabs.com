#
# PySNMP MIB module APTIS-TRAPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APTIS-TRAPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
policyConfigSlotModemThresholdWarning, policyConfigChassisModemThresholdWarning = mibBuilder.importSymbols("APTIS-CONFIG-MIB", "policyConfigSlotModemThresholdWarning", "policyConfigChassisModemThresholdWarning")
aptis_traps, = mibBuilder.importSymbols("APTIS-MIB", "aptis-traps")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
snmp, = mibBuilder.importSymbols("SNMPv2-MIB", "snmp")
Bits, Integer32, IpAddress, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, NotificationType, MibIdentifier, ModuleIdentity, Gauge32, Counter64, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "NotificationType", "MibIdentifier", "ModuleIdentity", "Gauge32", "Counter64", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aptisProtraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1))
aptis_fandown = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,1)).setLabel("aptis-fandown").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_fandown.setDescription('The fans on the chassis have stopped functioning. This trap is only supported on systems with the smart fan tray. This trap carries a severity of 6 (emergency).')
aptis_dc1down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,2)).setLabel("aptis-dc1down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_dc1down.setDescription('The DC1 power supply has stopped functioning. This trap carries a severity of 6 (emergency).')
aptis_dc2down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,3)).setLabel("aptis-dc2down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_dc2down.setDescription('The DC2 power supply has stopped functioning. This trap carries a severity of 6 (emergency).')
aptis_ac1down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,4)).setLabel("aptis-ac1down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ac1down.setDescription('The AC1 power supply has stopped functioning. This trap carries a severity of 6 (emergency). NOTE: This trap is no longer supported.')
aptis_ac2down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,5)).setLabel("aptis-ac2down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ac2down.setDescription('The AC2 power supply has stopped functioning. This trap carries a severity of 6 (emergency). NOTE: This trap is no longer supported.')
aptis_acdc1down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,6)).setLabel("aptis-acdc1down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_acdc1down.setDescription('The ACDC1 power converter has stopped functioning. This trap carries a severity of 6 (emergency).')
aptis_acdc2down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,7)).setLabel("aptis-acdc2down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_acdc2down.setDescription('The ACDC2 power converter has stopped functioning. This trap carries a severity of 6 (emergency).')
aptis_acdc3down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,8)).setLabel("aptis-acdc3down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_acdc3down.setDescription('The ACDC3 power converter has stopped functioning. This trap carries a severity of 6 (emergency).')
aptis_flashmount = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,9)).setLabel("aptis-flashmount").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_flashmount.setDescription('The flash card has been mounted. See also trap aptis-flashdismount. This trap carries a severity of 2 (warning).')
aptis_flashdismount = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,10)).setLabel("aptis-flashdismount").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_flashdismount.setDescription('The flash card has been dismounted. See also trap aptis-flashmount. This trap carries a severity of 2 (warning).')
aptis_coldStart = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,11)).setLabel("aptis-coldStart").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_coldStart.setDescription("A coldStart trap signifies that the sending protocol entity is reinitializing itself such that the agent's configuration or the protocol entity implementation may be altered. This trap carries a severity of 2 (warning).")
warmStart = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,12)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: warmStart.setDescription('A warmStart trap signifies that the sending protocol entity is reinitializing itself such that neither the agent configuration nor the protocol entity implementation is altered. This trap carries a severity of 2 (warning).')
linkDown = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,13)).setObjects(("IF-MIB", "ifIndex"), ("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: linkDown.setDescription("A linkDown trap signifies that the sending protocol entity recognizes a failure in one of the communications links represented in the agent's configuration. This trap carries severity of 6 (emergency). NOTE: This trap has been obsoleted.")
linkUp = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,14)).setObjects(("IF-MIB", "ifIndex"), ("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: linkUp.setDescription("A linkUp trap signifies that the sending protocol entity recognizes that one of the communications links represented in the agent's configuration has come up. This trap carries a severity of 6 (emergency). NOTE: This trap has been obsoleted.")
authenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,15)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: authenticationFailure.setDescription('An authenticationFailure trap signifies that the sending protocol entity is the addressee of a protocol message that is not properly authenticated. While implementations of the SNMP must be capable of generating this trap, they must also be capable of suppressing the emission of such traps via an implementation-specific mechanism. NOTE: This trap has been obsoleted and replaced by specific trap #s 81 (cvxLocalAuthenticationFailure) and 82 (cvxSessionAuthenticationFailure) and generic trap # 4 (authenticationFailure). This trap carries a severity of 3 (error).')
aptis_radius_fail = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,16)).setLabel("aptis-radius-fail").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_radius_fail.setDescription('No Radius Server is available. This trap carries a severity of 5 (alert).')
aptis_slot_up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,17)).setLabel("aptis-slot-up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_slot_up.setDescription('Slot is up. See also trap aptis-slot-down. This trap carries a severity of 5 (alert).')
aptis_slot_down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,18)).setLabel("aptis-slot-down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_slot_down.setDescription('Slot is down. See also trap aptis-slot-up. This trap carries a severity of 5 (alert).')
aptis_slot_cfg_chng = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,19)).setLabel("aptis-slot-cfg-chng").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_slot_cfg_chng.setDescription('Slot configuration has changed. This trap carries a severity of 1 (notice).')
aptis_ds1_red_alarm = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,20)).setLabel("aptis-ds1-red-alarm").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ds1_red_alarm.setDescription('The specified DS1 is in red alarm. See also trap aptis-ds1-alarm-clear. This trap carries a severity of 5 (alert).')
aptis_ds1_yellow_alarm = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,21)).setLabel("aptis-ds1-yellow-alarm").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ds1_yellow_alarm.setDescription('The specified DS1 is in yellow alarm. See also trap aptis-ds1-alarm-clear. This trap carries a severity of 5 (alert).')
aptis_ds1_alarm_clear = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,22)).setLabel("aptis-ds1-alarm-clear").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ds1_alarm_clear.setDescription('The specified DS1 is no longer in alarm. See also traps aptis-ds1-red-alarm and aptis-ds1-yellow-alarm. This trap carries a severity of 5 (alert).')
aptis_ds3_red_alarm = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,23)).setLabel("aptis-ds3-red-alarm").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ds3_red_alarm.setDescription('The specified DS3 is in red alarm. See also trap aptis-ds3-alarm-clear. This trap carries a severity of 5 (alert).')
aptis_ds3_yellow_alarm = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,24)).setLabel("aptis-ds3-yellow-alarm").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ds3_yellow_alarm.setDescription('The specified DS3 is in yellow alarm. See also trap aptis-ds3-alarm-clear. This trap carries a severity of 5 (alert).')
aptis_ds3_alarm_clear = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,25)).setLabel("aptis-ds3-alarm-clear").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_ds3_alarm_clear.setDescription('The specified DS3 is no longer in alarm. See also traps aptis-ds3-red-alarm and aptis-ds3-yellow-alarm. This trap carries a severity of 5 (alert).')
aptis_isdn_link_up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,26)).setLabel("aptis-isdn-link-up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_isdn_link_up.setDescription('The specified ISDN data link is up. See also trap aptis-isdn-link-down. This trap carries a severity of 3 (error).')
aptis_isdn_link_down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,27)).setLabel("aptis-isdn-link-down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_isdn_link_down.setDescription('The specified ISDN data link is down. See also trap aptis-isdn-link-up. This trap carries a severity of 3 (error).')
aptis_isdn_link_reset = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,28)).setLabel("aptis-isdn-link-reset").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_isdn_link_reset.setDescription('The specified ISDN data link has been reset by the switch. This trap carries a severity of 3 (error).')
aptis_temp_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,29)).setLabel("aptis-temp-exceeded").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_temp_exceeded.setDescription('The card in the specified slot has exceeded its safe operational temperature and is being shut down. See also traps cvxSlotTempWarning and cvxSlotTempNormal. This trap carries a severity of 7 (fatal).')
aptis_cvx_ss7_gateway_failover = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,30)).setLabel("aptis-cvx-ss7-gateway-failover").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: aptis_cvx_ss7_gateway_failover.setDescription('The CVX has failed over to the next CVX-SS7 Gateway. This trap carries a severity of 2 (warning).')
aptis_l2f_tunnel_start = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,31)).setLabel("aptis-l2f-tunnel-start").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapString"))
if mibBuilder.loadTexts: aptis_l2f_tunnel_start.setDescription('The CVX has successfully opened an L2F tunnel. See also trap aptis-l2f-tunnel-stop. This trap carries a severity of 1 (notice). This trap has been superceded by cvx-tunnel-start (53).')
aptis_l2f_tunnel_stop = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,32)).setLabel("aptis-l2f-tunnel-stop").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapString"))
if mibBuilder.loadTexts: aptis_l2f_tunnel_stop.setDescription('The CVX has closed an L2F tunnel that had been opened successfully. See also trap aptis-l2f-tunnel-start. This trap carries a severity of 1 (notice). This trap has been superceded by cvx-tunnel-stop (54).')
aptis_l2f_tunnel_reject = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,33)).setLabel("aptis-l2f-tunnel-reject").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapString"))
if mibBuilder.loadTexts: aptis_l2f_tunnel_reject.setDescription('The CVX has failed to open an L2F tunnel. This trap carries a severity of 5 (alert). This trap has been superceded by cvx-tunnel-reject (55).')
cvx_MAC_modems_below_threshold = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,34)).setLabel("cvx-MAC-modems-below-threshold").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"), ("APTIS-CONFIG-MIB", "policyConfigSlotModemThresholdWarning"), ("APTIS-TRAPS-MIB", "trapModemCount"))
if mibBuilder.loadTexts: cvx_MAC_modems_below_threshold.setDescription('The percent of functioning modems on the specified MAC board has gone below the defined threshold. See also trap cvx-MAC-modems-above-threshold. This trap carries a severity of 4 (critical).')
cvx_MAC_modems_above_threshold = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,35)).setLabel("cvx-MAC-modems-above-threshold").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"), ("APTIS-CONFIG-MIB", "policyConfigSlotModemThresholdWarning"), ("APTIS-TRAPS-MIB", "trapModemCount"))
if mibBuilder.loadTexts: cvx_MAC_modems_above_threshold.setDescription('The percent of functioning modems on the specified MAC board has gone above or equal to the defined threshold. See also trap cvx-MAC-modems-below-threshold. This trap carries a severity of 4 (critical).')
cvx_total_modems_below_threshold = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,36)).setLabel("cvx-total-modems-below-threshold").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-CONFIG-MIB", "policyConfigChassisModemThresholdWarning"), ("APTIS-TRAPS-MIB", "trapModemCount"))
if mibBuilder.loadTexts: cvx_total_modems_below_threshold.setDescription('The percent of functioning modems on the CVX has fallen below the defined threshold. See also trap cvx-total-modems-above-threshold. This trap carries a severity of 4 (critical).')
cvx_total_modems_above_threshold = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,37)).setLabel("cvx-total-modems-above-threshold").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-CONFIG-MIB", "policyConfigChassisModemThresholdWarning"), ("APTIS-TRAPS-MIB", "trapModemCount"))
if mibBuilder.loadTexts: cvx_total_modems_above_threshold.setDescription('The percent of functioning modems on the CVX is now equal to or above the defined threshold. See also trap cvx-total-modems-below-threshold. This trap carries a severity of 4 (critical).')
cvx_local_pswd_change = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,38)).setLabel("cvx-local-pswd-change").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapUserName"))
if mibBuilder.loadTexts: cvx_local_pswd_change.setDescription('The local password on the CVX has been modified. This trap carries a severity of 1 (notice).')
cvx_auth_server_failover = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,39)).setLabel("cvx-auth-server-failover").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_auth_server_failover.setDescription('The most recently used authentication server cannot be contacted. The primary contact has been switched to the server indicated. See also trap cvxAuthServerRevived. This trap carries a severity of 2 (warning).')
cvx_acct_server_failure = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,40)).setLabel("cvx-acct-server-failure").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_acct_server_failure.setDescription('Communication has been lost with all configured accounting servers. The address indicated in the trap is the last address tried. This trap carries a severity of 5 (alert).')
cvx_acct_server_failover = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,41)).setLabel("cvx-acct-server-failover").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_acct_server_failover.setDescription('The most recently used accounting server cannot be contacted. The primary contact has been switched to the server indicated. This trap carries a severity of 2 (warning).')
cvx_ss7_gateway_down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,42)).setLabel("cvx-ss7-gateway-down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_ss7_gateway_down.setDescription('Communication has been lost with the ss7 gateway indicated. See also trap cvx-ss7-gateway-up. This trap carries a severity of 6 (emergency).')
cvx_ss7_gateway_up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,43)).setLabel("cvx-ss7-gateway-up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_ss7_gateway_up.setDescription('Communication has been established with the ss7 gateway indicated. See also trap cvx-ss7-gateway-down. This trap carries a severity of 6 (emergency).')
cvx_Ds3_failover = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,44)).setLabel("cvx-Ds3-failover").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"))
if mibBuilder.loadTexts: cvx_Ds3_failover.setDescription('The primary DS3 in the indicated slot has failed and the secondary has resumed responsibility. This trap carries a severity of 6 (emergency).')
cvx_Scc_failover = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,45)).setLabel("cvx-Scc-failover").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"))
if mibBuilder.loadTexts: cvx_Scc_failover.setDescription('The primary SCC in the indicated slot has failed and the secondary has resumed operation. This trap carries a severity of 6 (emergency).')
cvx_ethernet_port_up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,46)).setLabel("cvx-ethernet-port-up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapPortNum"))
if mibBuilder.loadTexts: cvx_ethernet_port_up.setDescription('The specified Ethernet Port is initialized. Thes trap will occur at boot time and when an ethernet port is reinitialized after a cvx-ethernet-port-down trap. This trap carries a severity of 5 (alert).')
cvx_ethernet_port_down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,47)).setLabel("cvx-ethernet-port-down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapPortNum"))
if mibBuilder.loadTexts: cvx_ethernet_port_down.setDescription('The specified Ethernet port has failed. This trap carries a severity of 5 (alert).')
cvx_Hssi_port_up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,48)).setLabel("cvx-Hssi-port-up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapPortNum"))
if mibBuilder.loadTexts: cvx_Hssi_port_up.setDescription('The specified HSSI Port is initialized. This trap will occur at boot time and when an HSSI port is reinitialized after a cvx-hssi-port-down trap. This trap carries a severity of 7 (fatal).')
cvx_Hssi_port_down = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,49)).setLabel("cvx-Hssi-port-down").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapPortNum"))
if mibBuilder.loadTexts: cvx_Hssi_port_down.setDescription('The specified HSSI port has failed. This trap carries a severity of 7 (fatal).')
cvx_local_auth_failure_threshold_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,50)).setLabel("cvx-local-auth-failure-threshold-exceeded").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapAuthThreshold"), ("APTIS-TRAPS-MIB", "trapString"))
if mibBuilder.loadTexts: cvx_local_auth_failure_threshold_exceeded.setDescription('A consecutive number of local authorization failures has exceeded the noted threshold. The trap contains the number of consecutive failed attempts and additional information on the client host (an IP Address for FTP, or session number for telnet connections). See also trap cvxLocalAuthenticationFailure. This trap carries a severity of 2 (warning).')
cvx_preAuth_fail = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,51)).setLabel("cvx-preAuth-fail").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_preAuth_fail.setDescription('No pre-authorization server is available. The IP address shows the last server tried. This trap carries a severity of 5 (alert).')
cvx_auth_fail = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,52)).setLabel("cvx-auth-fail").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_auth_fail.setDescription('No authorization server is available. The IP address shows the last server tried. This trap carries a severity of 5 (alert).')
cvx_tunnel_start = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,53)).setLabel("cvx-tunnel-start").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapTunnelType"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_tunnel_start.setDescription('The CVX has successfully opened a tunnel. This trap carries a severity of 1 (notice).')
cvx_tunnel_stop = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,54)).setLabel("cvx-tunnel-stop").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapTunnelType"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_tunnel_stop.setDescription('The CVX has closed a tunnel that had been opened successfully. This trap carries a severity of 1 (notice).')
cvx_tunnel_reject = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,55)).setLabel("cvx-tunnel-reject").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapTunnelType"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_tunnel_reject.setDescription('The CVX has failed to open a tunnel. This trap carries a severity of 5 (alert).')
cvx_radius_packet_discard = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,56)).setLabel("cvx-radius-packet-discard").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapString"))
if mibBuilder.loadTexts: cvx_radius_packet_discard.setDescription('A radius response packet was discarded. This trap carries a severity of 2 (warning).')
cvx_fanup = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,57)).setLabel("cvx-fanup").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvx_fanup.setDescription('The fans on the chassis have resumed functioning. This trap is only supported on systems with the smart fan tray. This trap carries a severity of 6 (emergency).')
cvx_dc1up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,58)).setLabel("cvx-dc1up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvx_dc1up.setDescription('The DC1 power supply has resumed functioning. This trap carries a severity of 6 (emergency).')
cvx_dc2up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,59)).setLabel("cvx-dc2up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvx_dc2up.setDescription('The DC2 power supply has resumed functioning. This trap carries a severity of 6 (emergency).')
cvx_acdc1up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,62)).setLabel("cvx-acdc1up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvx_acdc1up.setDescription('The ACDC1 power converter has resumed functioning. This trap carries a severity of 6 (emergency).')
cvx_acdc2up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,63)).setLabel("cvx-acdc2up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvx_acdc2up.setDescription('The ACDC2 power converter has resumed functioning. This trap carries a severity of 6 (emergency).')
cvx_acdc3up = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,64)).setLabel("cvx-acdc3up").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvx_acdc3up.setDescription('The ACDC3 power converter has resumed functioning. This trap carries a severity of 6 (emergency).')
cvx_filter_error = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,65)).setLabel("cvx-filter-error").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapFilterName"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvx_filter_error.setDescription('A Filter-Id attribute containing an unknown filter name was received from a radius server. This trap carries a severity of 5 (alert).')
cvx_slave_flash_missing = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,66)).setLabel("cvx-slave-flash-missing").setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvx_slave_flash_missing.setDescription('No flash card has been detected on the slave SCC (System Control Card) unit. See also trap cvxSlaveSccFlashDetected. This trap carries a severity of 3 (error).')
cvxSlaveSccFlashDetected = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,67)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvxSlaveSccFlashDetected.setDescription('The flash card has been detected on the slave SCC (System Control Card) unit. NOTE: This trap is only sent if the complementary trap cvx-slave-flash-missing was sent previously. This trap carries a severity of 3 (error).')
cvxAuthServerRevived = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,68)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvxAuthServerRevived.setDescription('The authentication server identified by trapIpAddr that had previously failed has been revived. The server is identified by trapIpAddr. See also trap cvx-auth-server-failover. This trap carries a severity of 1 (notice).')
cvxPrimaryDhcpServerContactFailed = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,69)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvxPrimaryDhcpServerContactFailed.setDescription('Failed to establish contact with the primary DHCP server identified by trapIpAddr. If a secondary DHCP server has been configured, it will be tried next. NOTE: Every time a new request is received to obtain an IP address via DHCP, the primary DHCP server is always tried first (even though previous attempts to contact it may have failed). See also trap cvxPrimaryDhcpServerContactRevived. This trap carries a severity of 5 (alert).')
cvxPrimaryDhcpServerContactRevived = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,70)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvxPrimaryDhcpServerContactRevived.setDescription('Contact has been reestablished with the primary DHCP server identified by trapIpAddr. NOTE: Every time a new request is received to obtain an IP address via DHCP, the primary DHCP server is always tried first (even though previous attempts to contact it may have failed). See also trap cvxPrimaryDhcpServerContactFailed. This trap carries a severity of 5 (alert).')
cvxSecondaryDhcpServerContactFailed = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,71)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvxSecondaryDhcpServerContactFailed.setDescription('Failed to establish contact with the secondary (backup) DHCP server identified by trapIpAddr. Note that no trap is issued when contact is reestablished with the secondary DHCP server. This trap carries a severity of 5 (alert).')
cvxSlotTempWarning = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,73)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"), ("APTIS-TRAPS-MIB", "trapTempCurrent"), ("APTIS-TRAPS-MIB", "trapTempConfigWarningLevel"))
if mibBuilder.loadTexts: cvxSlotTempWarning.setDescription('Slot temperature has exceeded the configured warning level. If the slot temperature exceeds the configured threshold limit, the card in the slot will be shut down. trapSlotNum identifies the affected slot. trapTempCurrent specifies the current temperature and trapTempConfigWarningLevel specifies the configured warning level (both in degrees Celsius). See also traps cvxSlotTempNormal and aptis-temp-exceeded. This trap carries a severity of 4 (critical).')
cvxSlotTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,74)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"), ("APTIS-TRAPS-MIB", "trapTempCurrent"), ("APTIS-TRAPS-MIB", "trapTempConfigWarningLevel"))
if mibBuilder.loadTexts: cvxSlotTempNormal.setDescription('Slot temperature is back to normal (below the configured warning level). trapSlotNum identifies the affected slot. trapTempCurrent specifies the current temperature and trapTempConfigWarningLevel specifies the configured warning level (both in degrees Celsius). See also traps cvxSlotTempWarning and aptis-temp-exceeded. This trap carries a severity of 4 (critical).')
cvxSlaveSccRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,75)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvxSlaveSccRemoved.setDescription('The master SCC (System Control Card) has detected that the slave SCC has been removed from the system. File synchronization will cease. See also traps cvxSlaveSccInserted and cvxFailedSlaveSccRemoved. This trap carries a severity of 3 (error).')
cvxSlaveSccInserted = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,76)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvxSlaveSccInserted.setDescription('The master SCC (System Control Card) has detected that the slave SCC has been inserted into the system. File synchronization will start or resume. See also traps cvxSlaveSccRemoved and cvxFailedSlaveSccRemoved. This trap carries a severity of 3 (error).')
cvxFailedSlaveSccRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,77)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvxFailedSlaveSccRemoved.setDescription('The master SCC (System Control Card) has detected that the slave SCC that had previously failed has been removed from the system. See also traps cvxSlaveSccRemoved and cvxSlaveSccInserted. This trap carries a severity of 3 (error).')
cvxCardCrashed = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,79)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"))
if mibBuilder.loadTexts: cvxCardCrashed.setDescription('The card in slot trapSlotNum has crashed. The crash block has been written to the flash card. A restart of the card will be attempted. This trap carries a severity of 6 (emergency).')
cvxCardNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,80)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSlotNum"))
if mibBuilder.loadTexts: cvxCardNotResponding.setDescription('The card in slot trapSlotNum is not responding to the system watchdog. A restart of the card will be attempted. This trap carries a severity of 6 (emergency).')
cvxLocalAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,81)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapUserName"))
if mibBuilder.loadTexts: cvxLocalAuthenticationFailure.setDescription('This trap is generated when a user fails the local authentication process while trying to log into the CVX shell service. Local authentication is performed via a unix-like username/password sequence. The username associated with the login is contained in the variable trapUserName. A sufficient number of local authentication failures can trigger the trap cvx-local-auth-failure-threshold-exceeded. For an authentication failure related to the authentication of received SNMP packets, the generic trap authenticationFailure (generic trap # 4) is used. NOTE: The previously defined enterprise-specific trap called authenticationFailure (specific trap # 15) that used to cover all kinds of authentication failures has been obsoleted and replaced by this trap, trap cvxSessionAuthenticationFailure, and generic trap authenticationFailure (generic trap # 4). This trap carries a severity of 1 (notice).')
cvxSessionAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,82)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapSessionId"), ("APTIS-TRAPS-MIB", "trapVpopId"))
if mibBuilder.loadTexts: cvxSessionAuthenticationFailure.setDescription('This trap is generated when an authentication failure occurs during session setup. The session id number associated with the session is contained in the variable trapSessionId. If there is an associated VPOP id, it is returned in the variable trapVpopId. The types of sessions for which this trap can be issued are: atmp, tcp, dvs, fax, ppp, rlogin, telnet, and voip. For an authentication failure related to the authentication of received SNMP packets, the generic trap authenticationFailure (generic trap # 4) is used. NOTE: The previously defined enterprise-specific trap called authenticationFailure (specific trap # 15) that used to cover all kinds of authentication failures has been obsoleted and replaced by this trap, trap cvxLocalAuthenticationFailure, and generic trap authenticationFailure (generic trap # 4). This trap carries a severity of 1 (notice).')
encryptionNotAllowed = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,83)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: encryptionNotAllowed.setDescription('Encryption operations cannot be performed if the SCC I board is present. Encryption is only supported on a SCC II board that has a VMS120 chip for encryption acceleration. Also, even if the VMS120 chip is present, it may not have encrypting functionality turned on in the hardware. The encryption may also have been disabled via configuration. This trap has a high severity because none of the packets protected by the IPSec encryption may now be received or sent by the CVX. This trap carries a severity of 6 (emergency).')
cvxRadiusdSessionDisc = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,84)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvxRadiusdSessionDisc.setDescription('A Disconnect-Request received from the RADIUS client with IP address trapIpAddr resulted in termination of one or more sessions. This trap carries a severity of 0 (info).')
cvxRadiusdUnknownClient = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,85)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvxRadiusdUnknownClient.setDescription('A Disconnect-Request was received from an unknown RADIUS client with IP address trapIpAddr. This trap carries a severity of 0 (info).')
cvxRadiusdClientAuthFailed = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,86)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"), ("APTIS-TRAPS-MIB", "trapIpAddr"))
if mibBuilder.loadTexts: cvxRadiusdClientAuthFailed.setDescription('A Disconnect-Request received from the RADIUS client with IP address trapIpAddr failed authentication. This trap carries a severity of 0 (info).')
cvxSlaveSccFileSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,87)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvxSlaveSccFileSyncFailed.setDescription('The master SCC (System Control Card) detected error(s) while performing file synchronization with the slave SCC. This trap carries a severity of 4 (critical).')
cvxSlaveSccFileSyncCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,88)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvxSlaveSccFileSyncCompleted.setDescription('The master SCC (System Control Card) successfully completed file synchronization with the slave SCC. This trap carries a severity of 1 (notice).')
cvxSlaveSccFailed = NotificationType((1, 3, 6, 1, 4, 1, 2637, 2, 5, 1) + (0,89)).setObjects(("APTIS-TRAPS-MIB", "trapGenNum"), ("APTIS-TRAPS-MIB", "trapPath"), ("APTIS-TRAPS-MIB", "trapSeverity"))
if mibBuilder.loadTexts: cvxSlaveSccFailed.setDescription('The master SCC (System Control Card) has detected that the slave SCC has failed. File synchronization will cease. See also related trap cvxFailedSlaveSccRemoved. This trap carries a severity of 7 (fatal).')
trapGenNum = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapGenNum.setStatus('mandatory')
if mibBuilder.loadTexts: trapGenNum.setDescription('A unigue incrementing integer assigned for each trap.')
trapPath = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPath.setStatus('mandatory')
if mibBuilder.loadTexts: trapPath.setDescription('A path string to the object associated with the trap.')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: trapSeverity.setDescription('The severity of this trap, 7 being most severe.')
trapString = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapString.setStatus('mandatory')
if mibBuilder.loadTexts: trapString.setDescription('Extra text associated with the trap.')
trapIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapIpAddr.setDescription('An IP address associated with the trap.')
trapSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: trapSlotNum.setDescription('A slot number associated with the trap.')
trapPortNum = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: trapPortNum.setDescription('A port number associated with the trap.')
trapTunnelType = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("none", 1), ("other", 2), ("l2f", 3), ("l2tp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTunnelType.setStatus('mandatory')
if mibBuilder.loadTexts: trapTunnelType.setDescription('A tunnel type associated with the trap.')
trapUserName = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapUserName.setStatus('mandatory')
if mibBuilder.loadTexts: trapUserName.setDescription('The user name assiciated with this trap.')
trapAuthThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAuthThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: trapAuthThreshold.setDescription('The number of consecutive authorization failures.')
trapFilterName = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: trapFilterName.setDescription('The filter name assiciated with this trap.')
trapTempCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTempCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: trapTempCurrent.setDescription('Current temperature in degrees Celsius.')
trapTempConfigWarningLevel = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTempConfigWarningLevel.setStatus('mandatory')
if mibBuilder.loadTexts: trapTempConfigWarningLevel.setDescription('Configured warning level temperature in degrees Celsius.')
trapSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSessionId.setStatus('mandatory')
if mibBuilder.loadTexts: trapSessionId.setDescription('A session id number associated with the trap.')
trapVpopId = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapVpopId.setStatus('mandatory')
if mibBuilder.loadTexts: trapVpopId.setDescription('A VPOP (Virtual Point of Presence) id associated with the trap.')
trapModemCount = MibScalar((1, 3, 6, 1, 4, 1, 2637, 2, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapModemCount.setStatus('mandatory')
if mibBuilder.loadTexts: trapModemCount.setDescription('The number of available modems.')
mibBuilder.exportSymbols("APTIS-TRAPS-MIB", linkUp=linkUp, cvxSlotTempNormal=cvxSlotTempNormal, trapPath=trapPath, cvx_auth_server_failover=cvx_auth_server_failover, cvx_Hssi_port_down=cvx_Hssi_port_down, aptis_ac2down=aptis_ac2down, aptis_radius_fail=aptis_radius_fail, cvx_radius_packet_discard=cvx_radius_packet_discard, trapVpopId=trapVpopId, cvx_MAC_modems_above_threshold=cvx_MAC_modems_above_threshold, cvx_acct_server_failure=cvx_acct_server_failure, aptis_flashmount=aptis_flashmount, aptis_l2f_tunnel_reject=aptis_l2f_tunnel_reject, trapTempConfigWarningLevel=trapTempConfigWarningLevel, trapFilterName=trapFilterName, cvx_MAC_modems_below_threshold=cvx_MAC_modems_below_threshold, cvxSlaveSccFileSyncFailed=cvxSlaveSccFileSyncFailed, cvxRadiusdUnknownClient=cvxRadiusdUnknownClient, aptis_temp_exceeded=aptis_temp_exceeded, aptis_isdn_link_down=aptis_isdn_link_down, trapPortNum=trapPortNum, aptis_ds1_alarm_clear=aptis_ds1_alarm_clear, aptis_ds3_yellow_alarm=aptis_ds3_yellow_alarm, aptis_isdn_link_reset=aptis_isdn_link_reset, cvxSlaveSccFileSyncCompleted=cvxSlaveSccFileSyncCompleted, aptis_coldStart=aptis_coldStart, cvx_total_modems_above_threshold=cvx_total_modems_above_threshold, cvxSessionAuthenticationFailure=cvxSessionAuthenticationFailure, aptis_slot_cfg_chng=aptis_slot_cfg_chng, aptis_ac1down=aptis_ac1down, aptis_ds3_red_alarm=aptis_ds3_red_alarm, trapIpAddr=trapIpAddr, cvx_Hssi_port_up=cvx_Hssi_port_up, cvx_tunnel_reject=cvx_tunnel_reject, cvx_acdc2up=cvx_acdc2up, cvxPrimaryDhcpServerContactFailed=cvxPrimaryDhcpServerContactFailed, cvx_acct_server_failover=cvx_acct_server_failover, cvxSlotTempWarning=cvxSlotTempWarning, cvxSlaveSccRemoved=cvxSlaveSccRemoved, aptis_fandown=aptis_fandown, aptis_ds1_red_alarm=aptis_ds1_red_alarm, cvxSlaveSccInserted=cvxSlaveSccInserted, cvx_fanup=cvx_fanup, aptis_dc2down=aptis_dc2down, authenticationFailure=authenticationFailure, aptisProtraps=aptisProtraps, cvxSecondaryDhcpServerContactFailed=cvxSecondaryDhcpServerContactFailed, aptis_cvx_ss7_gateway_failover=aptis_cvx_ss7_gateway_failover, cvxRadiusdClientAuthFailed=cvxRadiusdClientAuthFailed, aptis_flashdismount=aptis_flashdismount, cvx_tunnel_stop=cvx_tunnel_stop, cvxLocalAuthenticationFailure=cvxLocalAuthenticationFailure, warmStart=warmStart, aptis_ds1_yellow_alarm=aptis_ds1_yellow_alarm, trapTunnelType=trapTunnelType, trapSessionId=trapSessionId, cvx_ethernet_port_up=cvx_ethernet_port_up, cvx_slave_flash_missing=cvx_slave_flash_missing, cvxCardCrashed=cvxCardCrashed, aptis_acdc3down=aptis_acdc3down, trapSlotNum=trapSlotNum, trapUserName=trapUserName, aptis_ds3_alarm_clear=aptis_ds3_alarm_clear, trapAuthThreshold=trapAuthThreshold, cvx_auth_fail=cvx_auth_fail, cvxFailedSlaveSccRemoved=cvxFailedSlaveSccRemoved, cvxAuthServerRevived=cvxAuthServerRevived, aptis_acdc2down=aptis_acdc2down, aptis_slot_down=aptis_slot_down, aptis_slot_up=aptis_slot_up, trapModemCount=trapModemCount, trapTempCurrent=trapTempCurrent, cvx_total_modems_below_threshold=cvx_total_modems_below_threshold, cvx_dc1up=cvx_dc1up, aptis_isdn_link_up=aptis_isdn_link_up, aptis_l2f_tunnel_start=aptis_l2f_tunnel_start, cvxCardNotResponding=cvxCardNotResponding, aptis_l2f_tunnel_stop=aptis_l2f_tunnel_stop, cvx_ethernet_port_down=cvx_ethernet_port_down, cvx_Ds3_failover=cvx_Ds3_failover, cvx_ss7_gateway_down=cvx_ss7_gateway_down, cvxSlaveSccFailed=cvxSlaveSccFailed, aptis_acdc1down=aptis_acdc1down, linkDown=linkDown, cvx_Scc_failover=cvx_Scc_failover, cvx_local_auth_failure_threshold_exceeded=cvx_local_auth_failure_threshold_exceeded, cvxPrimaryDhcpServerContactRevived=cvxPrimaryDhcpServerContactRevived, cvxRadiusdSessionDisc=cvxRadiusdSessionDisc, trapSeverity=trapSeverity, cvx_acdc3up=cvx_acdc3up, cvx_local_pswd_change=cvx_local_pswd_change, aptis_dc1down=aptis_dc1down, cvx_ss7_gateway_up=cvx_ss7_gateway_up, cvx_dc2up=cvx_dc2up, encryptionNotAllowed=encryptionNotAllowed, trapString=trapString, cvx_tunnel_start=cvx_tunnel_start, cvx_filter_error=cvx_filter_error, cvx_acdc1up=cvx_acdc1up, cvxSlaveSccFlashDetected=cvxSlaveSccFlashDetected, cvx_preAuth_fail=cvx_preAuth_fail, trapGenNum=trapGenNum)
