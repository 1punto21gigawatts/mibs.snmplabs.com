#
# PySNMP MIB module FDRY-DAI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FDRY-DAI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
DisplayString, = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "DisplayString")
snSwitch, = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, Counter32, IpAddress, Integer32, Unsigned32, ModuleIdentity, MibIdentifier, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Counter32", "IpAddress", "Integer32", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "iso")
TextualConvention, DisplayString, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue", "RowStatus")
fdryDaiMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35))
fdryDaiMIB.setRevisions(('2010-07-26 00:00', '2010-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fdryDaiMIB.setRevisionsDescriptions(('Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', '',))
if mibBuilder.loadTexts: fdryDaiMIB.setLastUpdated('201007260000Z')
if mibBuilder.loadTexts: fdryDaiMIB.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: fdryDaiMIB.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: fdryDaiMIB.setDescription("Management Information for configuration of Dynamic ARP Inspection feature. Dynamic ARP Inspection is a security mechanism which validates all ARP packets in a subnet and discard those packets with invalid IP to MAC address bindings. Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class ArpType(TextualConvention, Integer32):
    description = 'Represents type of ARP entry to be used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("static", 2), ("dynamic", 3), ("inspect", 4), ("dhcp", 5), ("dynamicDhcp", 6), ("staticDhcp", 7), ("host", 8))

class ArpState(TextualConvention, Integer32):
    description = 'Represents state of ARP entry to be used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("valid", 2), ("pend", 3))

fdryDaiVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 1))
fdryDaiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 2))
fdryDaiArpInspect = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3))
fdryDaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 1, 1), )
if mibBuilder.loadTexts: fdryDaiVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: fdryDaiVlanConfigTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
fdryDaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 1, 1, 1), ).setIndexNames((0, "FDRY-DAI-MIB", "fdryDaiVlanVLanId"))
if mibBuilder.loadTexts: fdryDaiVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: fdryDaiVlanConfigEntry.setDescription('A row instance contains the configuration to enable or disable Dynamic ARP Inspection at the existing VLAN.')
fdryDaiVlanVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 1, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: fdryDaiVlanVLanId.setStatus('current')
if mibBuilder.loadTexts: fdryDaiVlanVLanId.setDescription('This object indicates the VLAN number on which Dynamic ARP Inspection feature is configured.')
fdryDaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdryDaiVlanDynArpInspEnable.setStatus('current')
if mibBuilder.loadTexts: fdryDaiVlanDynArpInspEnable.setDescription("This object indicates whether Dynamic ARP Inspection is enabled in this VLAN. If this object is set to 'true', Dynamic ARP Inspection is enabled. If this object is set to 'false', Dynamic ARP Inspection is disabled.")
fdryDaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 2, 1), )
if mibBuilder.loadTexts: fdryDaiIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: fdryDaiIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for Dynamic ARP Inspection purpose at each physical interface.')
fdryDaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fdryDaiIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: fdryDaiIfConfigEntry.setDescription('A row instance contains the configuration to enable or disable trust state for Dynamic ARP Inspection at each physical interface capable of this feature.')
fdryDaiIfTrustValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdryDaiIfTrustValue.setStatus('current')
if mibBuilder.loadTexts: fdryDaiIfTrustValue.setDescription("This object indicates whether the interface is trusted for Dynamic ARP Inspection. If this object is set to 'true', the interface is trusted. ARP packets coming to this interface will be forwarded without checking. If this object is set to 'false', the interface is not trusted. ARP packets received on this interface will be subjected to ARP inspection.")
fdryDaiArpInspectTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1), )
if mibBuilder.loadTexts: fdryDaiArpInspectTable.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection entries. When an IP-MAC mapping entry is created in a device supporting this table, a corresponding entry of this table will be added.')
fdryDaiArpInspectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1), ).setIndexNames((0, "FDRY-DAI-MIB", "fdryDaiArpInspectIpAddr"))
if mibBuilder.loadTexts: fdryDaiArpInspectEntry.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectEntry.setDescription('A row instance contains the configuration to map a device IP address with its MAC address.')
fdryDaiArpInspectIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: fdryDaiArpInspectIpAddr.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectIpAddr.setDescription('The device IP address.')
fdryDaiArpInspectMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryDaiArpInspectMacAddr.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectMacAddr.setDescription('The device MAC address.')
fdryDaiArpInspectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryDaiArpInspectRowStatus.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectRowStatus.setDescription('This variable is used to create, or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified except this object.')
fdryDaiArpInspectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1, 4), ArpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryDaiArpInspectType.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectType.setDescription('The type of the ARP entry')
fdryDaiArpInspectState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1, 5), ArpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryDaiArpInspectState.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectState.setDescription('The state of the ARP entry')
fdryDaiArpInspectAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryDaiArpInspectAge.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectAge.setDescription('The timer of the ARP entry')
fdryDaiArpInspectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 35, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryDaiArpInspectPort.setStatus('current')
if mibBuilder.loadTexts: fdryDaiArpInspectPort.setDescription('The port of the ARP entry')
mibBuilder.exportSymbols("FDRY-DAI-MIB", fdryDaiArpInspectType=fdryDaiArpInspectType, fdryDaiIfTrustValue=fdryDaiIfTrustValue, fdryDaiIfConfigEntry=fdryDaiIfConfigEntry, fdryDaiVlanConfigEntry=fdryDaiVlanConfigEntry, fdryDaiMIB=fdryDaiMIB, fdryDaiArpInspectState=fdryDaiArpInspectState, fdryDaiVlanDynArpInspEnable=fdryDaiVlanDynArpInspEnable, fdryDaiVlan=fdryDaiVlan, fdryDaiArpInspectTable=fdryDaiArpInspectTable, ArpState=ArpState, fdryDaiArpInspectIpAddr=fdryDaiArpInspectIpAddr, fdryDaiInterface=fdryDaiInterface, PYSNMP_MODULE_ID=fdryDaiMIB, fdryDaiArpInspect=fdryDaiArpInspect, fdryDaiIfConfigTable=fdryDaiIfConfigTable, ArpType=ArpType, fdryDaiVlanConfigTable=fdryDaiVlanConfigTable, fdryDaiArpInspectEntry=fdryDaiArpInspectEntry, fdryDaiArpInspectMacAddr=fdryDaiArpInspectMacAddr, fdryDaiVlanVLanId=fdryDaiVlanVLanId, fdryDaiArpInspectAge=fdryDaiArpInspectAge, fdryDaiArpInspectPort=fdryDaiArpInspectPort, fdryDaiArpInspectRowStatus=fdryDaiArpInspectRowStatus)
