#
# PySNMP MIB module OLSRv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLSRv2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
IANAolsrv2LinkMetricTypeTC, = mibBuilder.importSymbols("IANA-OLSRv2-LINK-METRIC-TYPE-MIB", "IANAolsrv2LinkMetricTypeTC")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
nhdpIibLinkSetEntry, nhdpNibNeighborSetEntry, nhdpInterfacePerfEntry, nhdpIib2HopSetEntry, nhdpInterfaceEntry = mibBuilder.importSymbols("NHDP-MIB", "nhdpIibLinkSetEntry", "nhdpNibNeighborSetEntry", "nhdpInterfacePerfEntry", "nhdpIib2HopSetEntry", "nhdpInterfaceEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
mib_2, IpAddress, ModuleIdentity, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Bits, Unsigned32, Gauge32, TimeTicks, iso, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "mib-2", "IpAddress", "ModuleIdentity", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Bits", "Unsigned32", "Gauge32", "TimeTicks", "iso", "Counter32", "Counter64")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
manetOlsrv2MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 219))
manetOlsrv2MIB.setRevisions(('2014-04-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: manetOlsrv2MIB.setRevisionsDescriptions(('Initial version of this MIB module, published as RFC 7184.',))
if mibBuilder.loadTexts: manetOlsrv2MIB.setLastUpdated('201404090000Z')
if mibBuilder.loadTexts: manetOlsrv2MIB.setOrganization('IETF MANET Working Group')
if mibBuilder.loadTexts: manetOlsrv2MIB.setContactInfo('WG E-Mail: manet@ietf.org WG Chairs: sratliff@cisco.com jmacker@nrl.navy.mil Editors: Ulrich Herberg Fujitsu Laboratories of America 1240 East Arques Avenue Sunnyvale, CA 94085 USA Email: ulrich@herberg.name URI: http://www.herberg.name/ Thomas Heide Clausen Ecole Polytechnique LIX 91128 Palaiseau Cedex France Email: T.Clausen@computer.org URI: http://www.thomasclausen.org/ Robert G. Cole US Army CERDEC Space and Terrestrial Communications 6010 Frankford Street Bldg 6010, Room 453H Aberdeen Proving Ground, MD 21005 USA Phone: +1 443 395-8744 Email: robert.g.cole@us.army.mil URI: http://www.cs.jhu.edu/~rgcole')
if mibBuilder.loadTexts: manetOlsrv2MIB.setDescription("This OLSRv2-MIB module is applicable to routers implementing the Optimized Link State Routing Protocol version 2 (OLSRv2) defined in RFC 7181. Copyright (c) 2014 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info). This version of this MIB module is part of RFC 7184; see the RFC itself for full legal notices.")
class Olsrv2MetricValueCompressedFormTC(TextualConvention, Unsigned32):
    description = "OLSRv2 Metrics are expressed in terms of a Link Metric Compressed Form within the OLSRv2 protocol. This textual convention defines the syntax of the metric objects consistent with the definitions of the OLSRv2 Link Metric Compressed Form in Section 6.2 of RFC 7181. The 12-bit compressed form of a link metric uses a modified form of a representation with an 8-bit mantissa (denoted a) and a 4-bit exponent (denoted b). Note that if represented as the 12-bit value 256b+a, then the ordering of those 12-bit values is identical to the ordering of the represented values. The value so represented is (257+a)2^b - 256, where ^ denotes exponentiation. This has a minimum value (when a = 0 and b = 0) of MINIMUM_METRIC = 1 and a maximum value (when a = 255 and b = 15) of MAXIMUM_METRIC = 2^24 - 256. Hence, the metric values so represented range from 1 to 16776960. The special value of 0 is reserved for the UNKNOWN_METRIC value. If a network manager sets the metric value 'm' through the MIB module, then the OLSRv2 code can both use this value and derive a compressed representation of 'm' (as used in messages) as specified in Section 6.2 of RFC7181. The value 'm' is persistently stored by the MIB module. If the MIB module is pulling this metric's value from some other source, e.g., the protocol instance, then this value is stored as is."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16776960)

class Olsrv2TimeValueCompressedForm32TC(TextualConvention, Unsigned32):
    description = "OLSRv2 time values may be expressed in terms of a compressed form within the OLSRv2 protocol. This textual convention defines the syntax of the time objects defined in terms of an integer number of milliseconds, consistent with the definitions of the 8-bit exponent-mantissa compressed form defined in Section 5 of RFC 5497. Time values with this representation are defined in terms of a constant C, which is represented in terms of seconds. The constant C (time granularity) is used as specified in RFC 5497. It MUST be the same as is used by NHDP (RFC 6130). The 8-bit compressed form of a time value uses a modified form of a representation with a 3-bit mantissa (denoted a) and a 5-bit exponent (denoted b). Note that if represented as the 8-bit value 8b+a, then the ordering of those 8-bit values is identical to the ordering of the represented values. The minimum time value that can be represented in this manner is C. The maximum time value that can be represented in this manner is 15 * 2^28 * C, 15*268,435,456 * C, 4,026,531,840 * C, or about 45 days if, for example, C = 1/1024 second. This TEXTUAL-CONVENTION limits the maximum value of the time granularity constant C to be no greater than 1/1024 seconds due to its use of the Unsigned32 syntax limiting the maximum number of milliseconds to no more than 3932160000. When OLSRv2 uses this 8-bit exponent-mantissa compressed form, this object value MUST be translated from the integer form represented in this MIB module into the exponent-mantissa form for the OLSRv2 protocol to use according to the algorithm defined in Section 5 of RFC 5497 for finding the next larger time value within the exponent-mantissa format. If a network manager sets the time value 't' through the MIB module, then the OLSRv2 code can derive 'compressed_t' = T(a,b) according to the algorithm in RFC 5497 and 'compressed_t' is the value represented in the OLSRv2 messages. But, the value 't' is persistently stored by the MIB module. If the MIB module is pulling this time parameter from some other source that is using the compressed form, i.e., the protocol instance, then this value is stored as is, after converting from number of time constants C into number of milliseconds."
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 3932160000)

class Olsrv2StatusTC(TextualConvention, Integer32):
    description = "Controls the operation of the OLSRv2 protocol on the device or a specific interface. For example, for an interface, 'enabled' indicates that OLSRv2 is permitted to operate, and 'disabled' indicates that it is not."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class WillingnessTC(TextualConvention, Unsigned32):
    description = "A willingness value that evaluates to the device's interest in participating in a particular function, process, or behavior. The willingness ranges from a low value of WILL_NEVER(0) to a high value of WILL_ALWAYS(15). For each parameter x, there is an associated willingness value W(x) such that WILL_NEVER < W(x) <= WILL_ALWAYS."
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

olsrv2MIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 0))
olsrv2MIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 1))
olsrv2MIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 2))
olsrv2ConfigurationGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 1, 1))
olsrv2AdminStatus = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 1), Olsrv2StatusTC().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2AdminStatus.setStatus('current')
if mibBuilder.loadTexts: olsrv2AdminStatus.setDescription("The configured status of the OLSRv2 process on this device. 'enabled(1)' means that OLSRv2 is configured to run on this device. 'disabled(2)' mean that the OLSRv2 process is configured off. Operation of the OLSRv2 protocol requires the operation of the Neighborhood Discovery Protocol (RFC 6130). Hence, this object cannot have a status of 'enabled' unless at least one interface on the device is a MANET interface with NHDP enabled on that interface. If a network manager attempts to set this object to 'enabled' when no interfaces on this device have NHDP enabled, the device MUST fail the set with inconsistentValue. If all device interfaces running NHDP become disabled or removed, then the olsrv2AdminStatus MUST be 'disabled'. If the network manager, or other means, sets this object to 'disabled', then the associated interface specific objects, i.e., the olsrv2InterfaceAdminStatus objects MUST all be 'disabled'. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.")
olsrv2InterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 1, 2), )
if mibBuilder.loadTexts: olsrv2InterfaceTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2InterfaceTable.setDescription("The olsrv2InterfaceTable describes the OLSRv2 status on the NHDP interfaces of this router. As such, this table augments the nhdpInterfaceTable defined in the NHDP-MIB (RFC 6779). NHDP interfaces are explicitly defined by network management, command line interface (CLI) or other means for interfaces on the device that are intended to run MANET protocols. The olsrv2InterfaceTable contains a single object: the olsrv2InterfaceAdminStatus object. This object is set by network management, or by other means, e.g., CLI. A conceptual row in this table exists if and only if a corresponding entry in the nhdpInterfaceTable exists. If the corresponding entry with nhdpIfIndex value is deleted from the nhdpInterfaceTable, then the entry in this table is automatically deleted and OLSRv2 is disabled on this interface, and all configuration and state information related to this interface is to be removed from memory. The olsrv2InterfaceAdminStatus can only be 'enabled' if the corresponding olsrv2AdminStatus object is also set to 'enabled'.")
olsrv2InterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 1, 2, 1), )
if mibBuilder.loadTexts: olsrv2InterfaceEntry.setReference('RFC 6779 - Definition of Managed Objects for the Neighborhood Discovery Protocol, Herberg, U., Cole, R.G., and I. Chakeres, October 2012')
nhdpInterfaceEntry.registerAugmentions(("OLSRv2-MIB", "olsrv2InterfaceEntry"))
olsrv2InterfaceEntry.setIndexNames(*nhdpInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: olsrv2InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2InterfaceEntry.setDescription('The olsrv2InterfaceEntry describes one OLSRv2 local interface configuration as indexed by its nhdpIfIndex, as defined in the NHDP-MIB (RFC 6779). The objects in this table are persistent, and when written, the device SHOULD save the change to non-volatile storage. For further information on the storage behavior for these objects, refer to the description for the nhdpIfRowStatus object in the NHDP-MIB (RFC6779).')
olsrv2InterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 1, 2, 1, 1), Olsrv2StatusTC().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olsrv2InterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: olsrv2InterfaceAdminStatus.setDescription("The OLSRv2 interface's administrative status. The value 'enabled(1)' denotes that the interface is permitted to participate in the OLSRv2 routing process. The value 'disabled(2)' denotes that the interface is not permitted to participate in the OLSRv2 routing process. The configuration objects for the OLSRv2 routing process, other than the administrative status objects, are common to all interfaces on this device. As such, the OLSRv2 configuration objects are globally defined for the device and are not contained within the olsrv2InterfaceTable.")
olsrv2OrigIpAddrType = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 3), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2OrigIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2OrigIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2OrigIpAddrType.setDescription("The type of the olsrv2OrigIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2OrigIpAddr = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2OrigIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2OrigIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2OrigIpAddr.setDescription("The router's originator address. An address that is unique (within the MANET) to this router. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.")
olsrv2OHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 5), Unsigned32().clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2OHoldTime.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2OHoldTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2OHoldTime.setDescription("olsrv2OHoldTime corresponds to O_HOLD_TIME of OLSRv2, and represents the time for which a recently used and replaced originator address is used to recognize the router's own messages. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o olsrv2OHoldTime > 0 This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.")
olsrv2TcInterval = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 6), Olsrv2TimeValueCompressedForm32TC().clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2TcInterval.setReference('Section 5 on Representing Time. RFC 5497 - Representing Multi-Value Time in Mobile Ad Hoc Networks (MANETs), Clausen, T. and C. Dearlove, March 2009. and Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TcInterval.setStatus('current')
if mibBuilder.loadTexts: olsrv2TcInterval.setDescription('olsrv2TcInterval corresponds to TC_INTERVAL of OLSRv2 and represents the maximum time between the transmission of two successive TC messages by this router. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o olsrv2TcInterval > 0 o olsrv2TcInterval >= olsrv2TcMinInterval This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2TcMinInterval = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 7), Olsrv2TimeValueCompressedForm32TC().clone(1250)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2TcMinInterval.setReference('Section 5 on Representing Time. RFC 5497 - Representing Multi-Value Time in Mobile Ad Hoc Networks (MANETs), Clausen, T. and C. Dearlove, March 2009. and Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TcMinInterval.setStatus('current')
if mibBuilder.loadTexts: olsrv2TcMinInterval.setDescription('olsrv2TcMinInterval corresponds to TC_MIN_INTERVAL of OLSRv2 and represents the minimum interval between transmission of two successive TC messages by this router. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o olsrv2TcInterval >= olsrv2TcMinInterval The OLSRv2 protocol may choose to represent this time interval in terms of the 8-bit exponent-mantissa form defined in Section 5 of RFC 5497. When this is the case, this object value MUST be translated from the integer form represented in this MIB module into the exponent-mantissa form for the OLSRv2 protocol to use according to the algorithm defined in Section 5 of RFC 5497 for finding the next larger time value within the exponent-mantissa format. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2THoldTime = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 8), Olsrv2TimeValueCompressedForm32TC().clone(15000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2THoldTime.setReference('Section 5 on Representing Time. RFC 5497 - Representing Multi-Value Time in Mobile Ad Hoc Networks (MANETs), Clausen, T. and C. Dearlove, March 2009. and Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2THoldTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2THoldTime.setDescription('olsrv2THoldTime corresponds to T_HOLD_TIME of OLSRv2 and is used as the minimum value in the TLV with Type = VALIDITY_TIME included in all TC messages sent by this router. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o olsrv2THoldTime >= olsrv2TcInterval o If TC messages can be lost, then olsrv2THoldTime SHOULD be significantly greater than olsrv2TcInterval; a value >= 3 x olsrv2TcInterval is RECOMMENDED. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2AHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 9), Olsrv2TimeValueCompressedForm32TC().clone(15000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2AHoldTime.setReference('Section 5 on Representing Time. RFC 5497 - Representing Multi-Value Time in Mobile Ad Hoc Networks (MANETs), Clausen, T. and C. Dearlove, March 2009. and Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2AHoldTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2AHoldTime.setDescription('olsrv2AHoldTime corresponds to A_HOLD_TIME of OLSRv2 and represents the period during which TC messages are sent after they no longer have any advertised information to report, but are sent in order to accelerate outdated information removal by other routers. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o If TC messages can be lost, then olsrv2AHoldTime SHOULD be significantly greater than olsrv2TcInterval; a value >= 3 x olsrv2TcInterval is RECOMMENDED. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2RxHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 10), Unsigned32().clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2RxHoldTime.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2RxHoldTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2RxHoldTime.setDescription('olsrv2RxHoldTime corresponds to RX_HOLD_TIME of OLSRv2 and represents the period after receipt of a message by the appropriate OLSRv2 interface of this router for which that information is recorded, in order that the message is recognized as having been previously received on this OLSRv2 interface. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o olsrv2RxHoldTime > 0 o This parameter SHOULD be greater than the maximum difference in time that a message may take to traverse the MANET, taking into account any message forwarding jitter as well as propagation, queuing, and processing delays. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2PHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 11), Unsigned32().clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2PHoldTime.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2PHoldTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2PHoldTime.setDescription('olsrv2PHoldTime corresponds to P_HOLD_TIME of OLSRv2 and represents the period after receipt of a message that is processed by this router for which that information is recorded, in order that the message is not processed again if received again. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o olsrv2PHoldTime > 0 o This parameter SHOULD be greater than the maximum difference in time that a message may take to traverse the MANET, taking into account any message forwarding jitter as well as propagation, queuing, and processing delays. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2FHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 12), Unsigned32().clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2FHoldTime.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2FHoldTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2FHoldTime.setDescription('olsrv2FHoldTime corresponds to F_HOLD_TIME of OLSRv2 and represents the period after receipt of a message that is forwarded by this router for which that information is recorded, in order that the message is not forwarded again if received again. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o olsrv2FHoldTime > 0 o This parameter SHOULD be greater than the maximum difference in time that a message may take to traverse the MANET, taking into account any message forwarding jitter as well as propagation, queuing, and processing delays. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2TpMaxJitter = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 13), Unsigned32().clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2TpMaxJitter.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TpMaxJitter.setStatus('current')
if mibBuilder.loadTexts: olsrv2TpMaxJitter.setDescription('olsrv2TpMaxJitter corresponds to TP_MAXJITTER of OLSRv2 and represents the value of MAXJITTER used in RFC 5148 for periodically generated TC messages sent by this router. For constraints on these parameters, see RFC 5148. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2TtMaxJitter = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 14), Unsigned32().clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2TtMaxJitter.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TtMaxJitter.setStatus('current')
if mibBuilder.loadTexts: olsrv2TtMaxJitter.setDescription('olsrv2TtMaxJitter corresponds to TT_MAXJITTER of OLSRv2 and represents the value of MAXJITTER used in RFC 5148 for externally triggered TC messages sent by this router. For constraints on these parameters, see RFC 5148. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2FMaxJitter = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 15), Unsigned32().clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2FMaxJitter.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2FMaxJitter.setStatus('current')
if mibBuilder.loadTexts: olsrv2FMaxJitter.setDescription('olsrv2FMaxJitter corresponds to F_MAXJITTER of OLSRv2 and represents the default value of MAXJITTER used in RFC 5148 for messages forwarded by this router. For constraints on these parameters, see RFC 5148. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2TcHopLimit = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setUnits('hops').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2TcHopLimit.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TcHopLimit.setStatus('current')
if mibBuilder.loadTexts: olsrv2TcHopLimit.setDescription('olsrv2TcHopLimit corresponds to TC_HOP_LIMIT of OLSRv2. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o The maximum value of olsrv2TcHopLimit >= the network diameter in hops, a value of 255 is RECOMMENDED. o olsrv2TcHopLimit >= 2. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2WillRouting = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 17), WillingnessTC().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2WillRouting.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2WillRouting.setStatus('current')
if mibBuilder.loadTexts: olsrv2WillRouting.setDescription('olsrv2WillRouting corresponds to WILL_ROUTING of OLSRv2. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o WILL_NEVER (0) <= olsrv2WillRouting <= WILL_ALWAYS (15) This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2WillFlooding = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 18), WillingnessTC().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2WillFlooding.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2WillFlooding.setStatus('current')
if mibBuilder.loadTexts: olsrv2WillFlooding.setDescription('olsrv2WillFlooding corresponds to WILL_FLOODING of OLSRv2. Guidance for setting this object may be found in Section 5 of the OLSRv2 specification (RFC 7181), which indicates that: o WILL_NEVER (0) <= olsrv2WillFlooding <= WILL_ALWAYS (15) This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2LinkMetricType = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 1, 19), IANAolsrv2LinkMetricTypeTC().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2LinkMetricType.setReference('Section 5 on Protocol Parameters. RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LinkMetricType.setStatus('current')
if mibBuilder.loadTexts: olsrv2LinkMetricType.setDescription("olsrv2LinkMetricType corresponds to LINK_METRIC_TYPE of OLSRv2. If olsrv2LinkMetricType changes, then all link metric information recorded by this router is invalid. The router MUST take the actions described in Section 5.5. 'Parameter Change Constraints' and Section 17 'Information Base Changes' in RFC 7181. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.")
olsrv2StateGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 1, 2))
olsrv2IibLinkSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 1), )
if mibBuilder.loadTexts: olsrv2IibLinkSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2IibLinkSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2IibLinkSetTable.setDescription('A Link Set of an interface records all links from other routers that are, or recently were, 1-hop neighbors.')
olsrv2IibLinkSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 1, 1), )
if mibBuilder.loadTexts: olsrv2IibLinkSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
nhdpIibLinkSetEntry.registerAugmentions(("OLSRv2-MIB", "olsrv2IibLinkSetEntry"))
olsrv2IibLinkSetEntry.setIndexNames(*nhdpIibLinkSetEntry.getIndexNames())
if mibBuilder.loadTexts: olsrv2IibLinkSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2IibLinkSetEntry.setDescription('A Link Set consists of Link Tuples, each representing a single link indexed by the local and remote interface pair. Each Link Set from NHDP is extended by OLSRv2 by the following fields: (L_in_metric (olsrv2IibLinkSetInMetricValue), L_out_metric (olsrv2IibLinkSetOutMetricValue), L_mpr_selector (olsrv2IibLinkSetMprSelector))')
olsrv2IibLinkSetInMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 1, 1, 1), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IibLinkSetInMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2IibLinkSetInMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2IibLinkSetInMetricValue.setDescription('olsrv2IibLinkSetInMetricValue is the metric of the link from the OLSRv2 interface with addresses L_neighbor_iface_addr_list to this OLSRv2 interface. The L_neighbor_iface_addr_list is identified by the nhdpDiscIfIndex, which is an index to the nhdpIibLinkSetTable, which this table augments.')
olsrv2IibLinkSetOutMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 1, 1, 2), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2IibLinkSetOutMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2IibLinkSetOutMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2IibLinkSetOutMetricValue.setDescription('olsrv2IibLinkSetOutMetricValue is the metric of the link to the OLSRv2 interface with addresses L_neighbor_iface_addr_list from this OLSRv2 interface. The L_neighbor_iface_addr_list is identified by the nhdpDiscIfIndex, which is an index to the nhdpIibLinkSetTable, which this table augments.')
olsrv2IibLinkSetMprSelector = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IibLinkSetMprSelector.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2IibLinkSetMprSelector.setStatus('current')
if mibBuilder.loadTexts: olsrv2IibLinkSetMprSelector.setDescription('olsrv2IibLinkSetMprSelector is a boolean flag, recording whether this neighbor has selected this router as a flooding MPR, i.e., is a flooding MPR selector of this router.')
olsrv2Iib2HopSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 2), )
if mibBuilder.loadTexts: olsrv2Iib2HopSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2Iib2HopSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2Iib2HopSetTable.setDescription('A 2-Hop Set of an interface records network addresses of symmetric 2-hop neighbors, and the symmetric links to symmetric 1-hop neighbors through which these symmetric 2-hop neighbors can be reached. It consists of 2-Hop Tuples.')
olsrv2Iib2HopSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 2, 1), )
if mibBuilder.loadTexts: olsrv2Iib2HopSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
nhdpIib2HopSetEntry.registerAugmentions(("OLSRv2-MIB", "olsrv2Iib2HopSetEntry"))
olsrv2Iib2HopSetEntry.setIndexNames(*nhdpIib2HopSetEntry.getIndexNames())
if mibBuilder.loadTexts: olsrv2Iib2HopSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2Iib2HopSetEntry.setDescription('olsrv2Iib2HopSetTable consists of 2-Hop Tuples, each representing a single network address of a symmetric 2-hop neighbor and a single MANET interface of a symmetric 1-hop neighbor. Each 2-Hop Set from NHDP is extended by OLSRv2 by the following fields: (N2_in_metric (olsrv2Iib2HopSetInMetricValue), N2_out_metric (olsrv2Iib2HopSetOutMetricValue))')
olsrv2Iib2HopSetInMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 2, 1, 1), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2Iib2HopSetInMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014. and RFC 6779 - Definition of Managed Objects for the Neighborhood Discovery Process, Herberg, U., Cole, R., and I. Chakeres, October 2012.')
if mibBuilder.loadTexts: olsrv2Iib2HopSetInMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2Iib2HopSetInMetricValue.setDescription('olsrv2Iib2HopSetInMetricValue is the neighbor metric from the router with address N2_2hop_iface_addr to the router with OLSRv2 interface addresses N2_neighbor_iface_addr_list. The N2_2hop_iface_addr is identified by the (nhdpIib2HopSetIpAddressType, nhdpIib2HopSetIpAddress) pair from the nhdpIibLinkSetTable, which this table augments. The N2_neighbor_iface_addr_list is defined by the nhdpDiscIfIndex, which is an index of the nhdpIibLinkSetTable, which this table augments.')
olsrv2Iib2HopSetOutMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 2, 1, 2), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2Iib2HopSetOutMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014. and RFC 6779 - Definition of Managed Objects for the Neighborhood Discovery Process, Herberg, U., Cole, R., and I. Chakeres, October 2012.')
if mibBuilder.loadTexts: olsrv2Iib2HopSetOutMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2Iib2HopSetOutMetricValue.setDescription('olsrv2Iib2HopSetOutMetricValue is the neighbor metric to the router with address N2_2hop_iface_addr from the router with OLSRv2 interface addresses N2_neighbor_iface_addr_list. The N2_2hop_iface_addr is identified by the (nhdpIib2HopSetIpAddressType, nhdpIib2HopSetIpAddress) pair from the nhdpIibLinkSetTable, which this table augments. The N2_neighbor_iface_addr_list is defined by the nhdpDiscIfIndex, which is an index of the nhdpIibLinkSetTable, which this table augments.')
olsrv2LibOrigSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 3), )
if mibBuilder.loadTexts: olsrv2LibOrigSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibOrigSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibOrigSetTable.setDescription("A router's Originator Set records addresses that were recently used as originator addresses by this router.")
olsrv2LibOrigSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 3, 1), ).setIndexNames((0, "OLSRv2-MIB", "olsrv2LibOrigSetIpAddrType"), (0, "OLSRv2-MIB", "olsrv2LibOrigSetIpAddr"))
if mibBuilder.loadTexts: olsrv2LibOrigSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibOrigSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibOrigSetEntry.setDescription("A router's Originator Set consists of Originator Tuples: (O_orig_addr (olsrv2LibOrigSetIpAddrType and olsrv2LibOrigSetIpAddr), O_time (olsrv2LibOrigSetExpireTime)).")
olsrv2LibOrigSetIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 3, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2LibOrigSetIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibOrigSetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibOrigSetIpAddrType.setDescription("The type of the olsrv2LibOrigSetIpAddr, as defined in the InetAddress MIB (RFC4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2LibOrigSetIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2LibOrigSetIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibOrigSetIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibOrigSetIpAddr.setDescription('An originator address recently employed by this router.')
olsrv2LibOrigSetExpireTime = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 3, 1, 3), TimeStamp()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2LibOrigSetExpireTime.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibOrigSetExpireTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibOrigSetExpireTime.setDescription('olsrv2LibOrigSetExpireTime specifies the value of sysUptime when this entry SHOULD expire and be removed from the olsrv2LibOrigSetTable. This time is determined at the time the entry is added, derived from the following expression: O_time := current time + O_HOLD_TIME where O_time is olsrv2LibOrigSetExpireTime, current_time is current sysUptime, and O_HOLD_TIME is a parameter of the OLSRv2 protocol. In the event that the O_HOLD_TIME is changed, the olsrv2LibOrigSetExpireTime needs to be recomputed for each of the entries in this table.')
olsrv2LibLocAttNetSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 4), )
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetTable.setDescription("A router's Local Attached Network Set records its local non-OLSRv2 interfaces via which it can act as a gateway to other networks.")
olsrv2LibLocAttNetSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 4, 1), ).setIndexNames((0, "OLSRv2-MIB", "olsrv2LibLocAttNetSetIpAddrType"), (0, "OLSRv2-MIB", "olsrv2LibLocAttNetSetIpAddr"), (0, "OLSRv2-MIB", "olsrv2LibLocAttNetSetIpAddrPrefixLen"))
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetEntry.setDescription('The entries include the Local Attached Network Tuples: (AL_net_addr (olsrv2LibLocAttNetSetIpAddr), AL_dist (olsrv2LibLocAttNetSetDistance), AL_metric (olsrv2LibLocAttNetSetMetricValue) ) where: AL_net_addr is the network address of an attached network that can be reached via this router. The AL_net_addr is defined in this MIB module by the tuple (olsrv2LibLocAttNetSetIpAddrType, olsrv2LibLocAttNetSetIpAddr, olsrv2LibLocAttNetSetIpAddrPrefixLen). AL_dist is the number of hops to the network with address AL_net_addr from this router. The AL_dist is defined in this MIB module by the olsrv2LibLocAttNetSetDistance object. AL_metric is the metric of the link to the attached network with address AL_net_addr from this router. The AL_metric is defined in this MIB module by the olsrv2LibLocAttNetSetMetricValue object. OLSRv2 (RFC 7181) defines the rules for managing entries within this table, e.g., populating and purging entries. Specific instructions for the olsrv2LibLocAttNetSetEntry(s) are found in Sections 7.2 and 17 of OLSRv2 (RFC 7181).')
olsrv2LibLocAttNetSetIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 4, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddrType.setDescription("The type of the olsrv2LibLocAttNetSetIpAddr, as defined in the InetAddress MIB (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2LibLocAttNetSetIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddr.setDescription('This is the network address of an attached network that can be reached via this router.')
olsrv2LibLocAttNetSetIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 4, 1, 3), InetAddressPrefixLength()).setUnits('bits')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddrPrefixLen.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetIpAddrPrefixLen.setDescription('Indicates the number of leading one bits that form the mask to be logically ANDed with the destination address before being compared to the value in the olsrv2LibLocAttNetSetIpAddr field.')
olsrv2LibLocAttNetSetDistance = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('hops').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetDistance.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetDistance.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetDistance.setDescription('This object specifies the number of hops to the network with address olsrv2LibLocAttNetSetIpAddr from this router.')
olsrv2LibLocAttNetSetMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 4, 1, 5), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2LibLocAttNetSetMetricValue.setDescription('This object specifies the metric of the link to the attached network with address AL_net_addr from this router. The AL_net_addr is defined by the tuple (olsrv2LibLocAttNetSetIpAddrType, olsrv2LibLocAttNetSetIpAddr, olsrv2LibLocAttNetSetIpAddrPrefixLen).')
olsrv2NibNeighborSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 5), )
if mibBuilder.loadTexts: olsrv2NibNeighborSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetTable.setDescription("A router's Neighbor Set records all network addresses of each 1-hop neighbor. It consists of Neighbor Tuples, each representing a single 1-hop neighbor.")
olsrv2NibNeighborSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1), )
if mibBuilder.loadTexts: olsrv2NibNeighborSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
nhdpNibNeighborSetEntry.registerAugmentions(("OLSRv2-MIB", "olsrv2NibNeighborSetEntry"))
olsrv2NibNeighborSetEntry.setIndexNames(*nhdpNibNeighborSetEntry.getIndexNames())
if mibBuilder.loadTexts: olsrv2NibNeighborSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetEntry.setDescription('Each Neighbor Tuple in the Neighbor Set, defined in RFC 6130, has these additional elements: N_orig_addr (olsrv2NibNeighborSetNOrigIpAddrType, olsrv2NibNeighborSetNOrigIpAddr) N_in_metric (olsrv2NibNeighborSetNInMetricValue) N_out_metric (olsrv2NibNeighborSetNOutMetricValue) N_will_flooding (olsrv2NibNeighborSetNWillFlooding) N_will_routing (olsrv2NibNeighborSetNWillRouting) N_flooding_mpr (olsrv2NibNeighborSetNFloodingMpr) N_routing_mpr (olsrv2NibNeighborSetNRoutingMpr) N_mpr_selector (olsrv2NibNeighborSetNMprSelector) N_advertised (olsrv2NibNeighborSetNAdvertised) defined here as extensions.')
olsrv2NibNeighborSetNOrigIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOrigIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOrigIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOrigIpAddrType.setDescription("The type of the olsrv2NibNeighborSetNOrigIpAddr, as defined in the InetAddress MIB module (RFC4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2NibNeighborSetNOrigIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOrigIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOrigIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOrigIpAddr.setDescription('This is the originator IP address of the neighbor represented by this table entry.')
olsrv2NibNeighborSetNInMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 3), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNInMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNInMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNInMetricValue.setDescription('This object is the neighbor metric of any link from this neighbor to an OLSRv2 interface of this router, i.e., the minimum of all corresponding L_in_metric (olsrv2IibLinkSetInMetricValue) with L_status = SYMMETRIC and L_in_metric (olsrv2IibLinkSetInMetricValue) != UNKNOWN_METRIC, UNKNOWN_METRIC if there are no such Link Tuples. UNKNOWN_METRIC has a value of 0.')
olsrv2NibNeighborSetNOutMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 4), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOutMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOutMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNOutMetricValue.setDescription('This object is the neighbor metric of any link from an OLSRv2 interface of this router to this neighbor, i.e., the minimum of all corresponding L_out_metric (olsrv2IibLinkSetOutMetricValue) with L_status = SYMMETRIC and L_out_metric (olsrv2IibLinkSetOutMetricValue) != UNKNOWN_METRIC, UNKNOWN_METRIC if there are no such Link Tuples. UNKNOWN_METRIC has a value of 0.')
olsrv2NibNeighborSetNWillFlooding = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 5), WillingnessTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNWillFlooding.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNWillFlooding.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNWillFlooding.setDescription("This object is the neighbor's willingness to be selected as a flooding MPR, in the range from WILL_NEVER to WILL_ALWAYS, both inclusive, taking the value WILL_NEVER if no OLSRv2 specific information is received from this neighbor.")
olsrv2NibNeighborSetNWillRouting = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 6), WillingnessTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNWillRouting.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNWillRouting.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNWillRouting.setDescription("This object is the neighbor's willingness to be selected as a routing MPR, in the range from WILL_NEVER to WILL_ALWAYS, both inclusive, taking the value WILL_NEVER if no OLSRv2 specific information is received from this neighbor.")
olsrv2NibNeighborSetNFloodingMpr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNFloodingMpr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNFloodingMpr.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNFloodingMpr.setDescription('This object is a boolean flag, recording whether this neighbor is selected as a flooding MPR by this router.')
olsrv2NibNeighborSetNRoutingMpr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNRoutingMpr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNRoutingMpr.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNRoutingMpr.setDescription('This object is a boolean flag, recording whether this neighbor is selected as a routing MPR by this router.')
olsrv2NibNeighborSetNMprSelector = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNMprSelector.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNMprSelector.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNMprSelector.setDescription("This object is a boolean flag, recording whether this neighbor has selected this router as a routing MPR, i.e., is a routing MPR selector of this router. When set to 'true', then this router is selected as a routing MPR by the neighbor router. When set to 'false', then this router is not selected by the neighbor as a routing MPR.")
olsrv2NibNeighborSetNAdvertised = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetNAdvertised.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNAdvertised.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetNAdvertised.setDescription('This object, N_mpr_selector (olsrv2NibNeighborSetNMprSelector), is a boolean flag, recording whether this router has elected to advertise a link to this neighbor in its TC messages.')
olsrv2NibNeighborSetTableAnsn = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2NibNeighborSetTableAnsn.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2NibNeighborSetTableAnsn.setStatus('current')
if mibBuilder.loadTexts: olsrv2NibNeighborSetTableAnsn.setDescription('Advertised Neighbor Sequence Number (ANSN), is a variable, whose value is included in TC messages to indicate the freshness of the information transmitted.')
olsrv2TibAdRemoteRouterSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 7), )
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetTable.setDescription("A router's Advertising Remote Router Set records information describing each remote router in the network that transmits TC messages.")
olsrv2TibAdRemoteRouterSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 7, 1), ).setIndexNames((0, "OLSRv2-MIB", "olsrv2TibAdRemoteRouterSetIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibAdRemoteRouterSetIpAddr"))
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetEntry.setDescription("A router's Advertised Neighbor Set Table entry consists of Advertising Remote Router Tuples: (AR_orig_addr (olsrv2TibAdRemoteRouterSetIpAddrType, olsrv2TibAdRemoteRouterSetIpAddr), AR_seq_number (olsrv2TibAdRemoteRouterSetMaxSeqNo), AR_time (olsrv2TibAdRemoteRouterSetExpireTime). Addresses associated with this router are found in the NHDP-MIB module's nhdpDiscIfSetTable. OLSRv2 (RFC 7181) defines the rules for managing entries within this table, e.g., populating and purging entries. Specific instructions for the olsrv2TibAdRemoteRouterSetEntry(s) are found in Section 10.1 and Section 17 of OLSRv2 (RFC 7181).")
olsrv2TibAdRemoteRouterSetIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 7, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetIpAddrType.setDescription("The type of the olsrv2TibAdRemoteRouterSetIpAddr, as defined in the InetAddress MIB module (RFC4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibAdRemoteRouterSetIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 7, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetIpAddr.setDescription('This is the originator address of a received TC message.')
olsrv2TibAdRemoteRouterSetMaxSeqNo = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetMaxSeqNo.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetMaxSeqNo.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetMaxSeqNo.setDescription("This is the greatest Advertised Neighbor Sequence Number (ANSN) in any TC message received that originated from the router with originator address olsrv2TibAdRemoteRouterSetIpAddr. Sequence numbers are used in the OLSRv2 protocol for the purpose of discarding 'old' information, i.e., messages received out of order. However, with a limited number of bits for representing sequence numbers, wraparound (that the sequence number is incremented from the maximum possible value to zero) will occur. To prevent this from interfering with the operation of this protocol, OLSRv2 implementations observe the following when determining the ordering of sequence numbers. In OLSRv2, MAXVALUE designates one more than the largest possible value for a sequence number. For a 16-bit sequence number, MAXVALUE is 65536. The sequence number S1 is said to be 'greater than' the sequence number S2 if: o S1 > S2 AND S1 - S2 < MAXVALUE/2 OR o S2 > S1 AND S2 - S1 > MAXVALUE/2 When sequence numbers S1 and S2 differ by MAXVALUE/2, their ordering cannot be determined. In this case, which should not occur, either ordering may be assumed. Thus, when comparing two messages, it is possible - even in the presence of wraparound - to determine which message contains the most recent information.")
olsrv2TibAdRemoteRouterSetExpireTime = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 7, 1, 4), TimeStamp()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetExpireTime.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetExpireTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAdRemoteRouterSetExpireTime.setDescription('olsrv2TibAdRemoteRouterSetExpireTime specifies the value of sysUptime when this entry SHOULD expire and be removed from the olsrv2TibAdRemoteRouterSetTable.')
olsrv2TibRouterTopologySetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 8), )
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetTable.setDescription("A router's Router Topology Set records topology information about the network.")
olsrv2TibRouterTopologySetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1), ).setIndexNames((0, "OLSRv2-MIB", "olsrv2TibRouterTopologySetFromOrigIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibRouterTopologySetFromOrigIpAddr"), (0, "OLSRv2-MIB", "olsrv2TibRouterTopologySetToOrigIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibRouterTopologySetToOrigIpAddr"))
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetEntry.setDescription('It consists of Router Topology Tuples: (TR_from_orig_addr (olsrv2TibRouterTopologySetFromOrigIpAddrType, olsrv2TibRouterTopologySetFromOrigIpAddr), TR_to_orig_addr (olsrv2TibRouterTopologySetToOrigIpAddrType, olsrv2TibRouterTopologySetToOrigIpAddr), TR_seq_number (olsrv2TibRouterTopologySetSeqNo), TR_metric (olsrv2TibRouterTopologySetMetricValue), TR_time (olsrv2TibRouterTopologySetExpireTime)). OLSRv2 (RFC 7181) defines the rules for managing entries within this table, e.g., populating and purging entries. Specific instructions for the olsrv2TibRouterTopologySetEntry(s) are found in Section 10.2 and Section 17 of OLSRv2 (RFC 7181).')
olsrv2TibRouterTopologySetFromOrigIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetFromOrigIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetFromOrigIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetFromOrigIpAddrType.setDescription("The type of the olsrv2TibRouterTopologySetFromOrigIpAddr, as defined in the InetAddress MIB module (RFC4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibRouterTopologySetFromOrigIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetFromOrigIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetFromOrigIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetFromOrigIpAddr.setDescription('This is the originator address of a router that can reach the router with originator address TR_to_orig_addr in one hop.')
olsrv2TibRouterTopologySetToOrigIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1, 3), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetToOrigIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetToOrigIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetToOrigIpAddrType.setDescription("The type of the olsrv2TibRouterTopologySetToOrigIpAddr, as defined in the InetAddress MIB module (RFC4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibRouterTopologySetToOrigIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetToOrigIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetToOrigIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetToOrigIpAddr.setDescription('This is the originator address of a router that can be reached by the router with originator address TR_to_orig_addr in one hop.')
olsrv2TibRouterTopologySetSeqNo = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetSeqNo.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetSeqNo.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetSeqNo.setDescription("This is the greatest Advertised Neighbor Sequence Number (ANSN) in any TC message received that originated from the router with originator address TR_from_orig_addr, i.e., that contributed to the information contained in this Tuple and that is defined by the objects: (olsrv2TibRouterTopologySetFromOrigIpAddrType, olsrv2TibRouterTopologySetFromOrigIpAddr). Sequence numbers are used in the OLSRv2 protocol for the purpose of discarding 'old' information, i.e., messages received out of order. However, with a limited number of bits for representing sequence numbers, wraparound (that the sequence number is incremented from the maximum possible value to zero) will occur. To prevent this from interfering with the operation of this protocol, OLSRv2 implementations observe the following when determining the ordering of sequence numbers. In OLSRv2, MAXVALUE designates one more than the largest possible value for a sequence number. For a 16-bit sequence number, MAXVALUE is 65536. The sequence number S1 is said to be 'greater than' the sequence number S2 if: o S1 > S2 AND S1 - S2 < MAXVALUE/2 OR o S2 > S1 AND S2 - S1 > MAXVALUE/2 When sequence numbers S1 and S2 differ by MAXVALUE/2, their ordering cannot be determined. In this case, which should not occur, either ordering may be assumed. Thus, when comparing two messages, it is possible - even in the presence of wraparound - to determine which message contains the most recent information.")
olsrv2TibRouterTopologySetMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1, 6), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetMetricValue.setDescription('This is the neighbor metric from the router with originator address TR_from_orig_addr (olsrv2TibRouterTopologySetFromOrigIpAddrType, olsrv2TibRouterTopologySetFromOrigIpAddr) to the router with originator address TR_to_orig_addr (olsrv2TibRouterTopologySetToOrigIpAddrType, olsrv2TibRouterTopologySetToOrigIpAddr).')
olsrv2TibRouterTopologySetExpireTime = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 8, 1, 7), TimeStamp()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetExpireTime.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetExpireTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRouterTopologySetExpireTime.setDescription('olsrv2TibRouterTopologySetExpireTime specifies the value of sysUptime when this entry SHOULD expire and be removed from the olsrv2TibRouterTopologySetTable.')
olsrv2TibRoutableAddressTopologySetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 9), )
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetTable.setDescription("A router's Routable Address Topology Set records topology information about the routable addresses within the MANET, including via which routers they may be reached.")
olsrv2TibRoutableAddressTopologySetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1), ).setIndexNames((0, "OLSRv2-MIB", "olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibRoutableAddressTopologySetFromOrigIpAddr"), (0, "OLSRv2-MIB", "olsrv2TibRoutableAddressTopologySetDestIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibRoutableAddressTopologySetDestIpAddr"))
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetEntry.setDescription('It consists of Router Topology Tuples: (TA_from_orig_addr (olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType olsrv2TibRoutableAddressTopologySetFromOrigIpAddr), TA_dest_addr (olsrv2TibRoutableAddressTopologySetFromDestIpAddrType olsrv2TibRoutableAddressTopologySetFromDestIpAddr), TA_seq_number (olsrv2TibRoutableAddressTopologySetSeqNo) TA_metric (olsrv2TibRoutableAddressTopologySetMetricValue) TA_time (olsrv2TibRoutableAddressTopologySetExpireTime) ) OLSRv2 (RFC 7181) defines the rules for managing entries within this table, e.g., populating and purging entries. Specific instructions for the olsrv2TibRoutableAddressTopologySetEntry(s) are found in Section 10.3 and Section 17 of OLSRv2 (RFC 7181).')
olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType.setDescription("The type of the olsrv2TibRoutableAddressTopologySetFromOrigIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibRoutableAddressTopologySetFromOrigIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetFromOrigIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetFromOrigIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetFromOrigIpAddr.setDescription('This is the originator address of a router that can reach the router with routable address TA_dest_addr in one hop.')
olsrv2TibRoutableAddressTopologySetDestIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1, 3), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetDestIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetDestIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetDestIpAddrType.setDescription("The type of the olsrv2TibRouterTopologySetToOrigIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibRoutableAddressTopologySetDestIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetDestIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetDestIpAddr.setDescription('This is a routable address of a router that can be reached by the router with originator address TA_from_orig_addr in one hop. The TA_from_orig_addr is defined by the tuple (olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType olsrv2TibRoutableAddressTopologySetFromOrigIpAddr).')
olsrv2TibRoutableAddressTopologySetSeqNo = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetSeqNo.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetSeqNo.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetSeqNo.setDescription('This is the greatest Advertised Neighbor Sequence Number (ANSN) in any TC message received that originated from the router with originator address TA_from_orig_addr, i.e., that contributed to the information contained in this Tuple. The TA_from_orig_addr is defined by the tuple (olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType olsrv2TibRoutableAddressTopologySetFromOrigIpAddr).')
olsrv2TibRoutableAddressTopologySetMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1, 6), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetMetricValue.setDescription('This is the neighbor metric from the router with originator address TA_from_orig_addr (defined by the tuple (olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType olsrv2TibRoutableAddressTopologySetFromOrigIpAddr)) to the router with OLSRv2 interface address TA_dest_addr (defined by the tuple (olsrv2TibRoutableAddressTopologySetFromDestIpAddrType olsrv2TibRoutableAddressTopologySetFromDestIpAddr)).')
olsrv2TibRoutableAddressTopologySetExpireTime = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 9, 1, 7), TimeStamp()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetExpireTime.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetExpireTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutableAddressTopologySetExpireTime.setDescription('olsrv2TibRoutableAddressTopologySetExpireTime specifies the value of sysUptime when this entry SHOULD expire and be removed from the olsrv2TibRoutableAddressTopologySetTable.')
olsrv2TibAttNetworksSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 10), )
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetTable.setDescription("A router's Attached Network Set records information about networks (which may be outside the MANET) attached to other routers and their routable addresses.")
olsrv2TibAttNetworksSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1), ).setIndexNames((0, "OLSRv2-MIB", "olsrv2TibAttNetworksSetOrigIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibAttNetworksSetOrigIpAddr"), (0, "OLSRv2-MIB", "olsrv2TibAttNetworksSetNetIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibAttNetworksSetNetIpAddr"), (0, "OLSRv2-MIB", "olsrv2TibAttNetworksSetNetIpAddrPrefixLen"))
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetEntry.setDescription('It consists of Attached Network Tuples: (AN_orig_addr (olsrv2TibAttNetworksSetOrigIpAddrType, olsrv2TibAttNetworksSetOrigIpAddr), AN_net_addr (olsrv2TibAttNetworksSetNetIpAddrType, olsrv2TibAttNetworksSetNetIpAddr, olsrv2TibAttNetworksSetNetIpAddrPrefixLen), AN_seq_number (olsrv2TibAttNetworksSetSeqNo), AN_dist (olsrv2TibAttNetworksSetDist), AN_metric (olsrv2TibAttNetworksSetMetricValue), AN_time (olsrv2TibAttNetworksSetExpireTime) ) OLSRv2 (RFC 7181) defines the rules for managing entries within this table, e.g., populating and purging entries. Specific instructions for the olsrv2TibRoutableAddressTopologySetEntry(s) are found in Section 10.4 and Section 17 of OLSRv2 (RFC 7181).')
olsrv2TibAttNetworksSetOrigIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetOrigIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetOrigIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetOrigIpAddrType.setDescription("The type of the olsrv2TibAttNetworksSetOrigIpAddr, as defined in the InetAddress MIB module (RFC4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibAttNetworksSetOrigIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetOrigIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetOrigIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetOrigIpAddr.setDescription('This is the originator address, of type olsrv2TibAttNetworksSetOrigIpAddrType, of a router that can act as gateway to the network with address AN_net_addr. The AN_net_addr is defined by the tuple (olsrv2TibAttNetworksSetNetIpAddrType, olsrv2TibAttNetworksSetNetIpAddr, olsrv2TibAttNetworksSetNetIpAddrPrefixLen).')
olsrv2TibAttNetworksSetNetIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 3), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddrType.setDescription("The type of the olsrv2TibAttNetworksSetNetIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibAttNetworksSetNetIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddr.setDescription('This is the network address, of type olsrv2TibAttNetworksSetNetIpAddrType, of an attached network, that may be reached via the router with originator address AN_orig_addr. The AN_orig_addr is defined by the tuple (olsrv2TibAttNetworksSetOrigIpAddrType, olsrv2TibAttNetworksSetOrigIpAddr).')
olsrv2TibAttNetworksSetNetIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 5), InetAddressPrefixLength()).setUnits('bits')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddrPrefixLen.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetNetIpAddrPrefixLen.setDescription('Indicates the number of leading one bits that form the mask to be logically ANDed with the destination address before being compared to the value in the olsrv2TibAttNetworksSetNetIpAddr field.')
olsrv2TibAttNetworksSetSeqNo = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetSeqNo.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetSeqNo.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetSeqNo.setDescription("This is the greatest Advertised Neighbor Sequence Number (ANSN) in any TC message received that originated from the router with originator address AN_orig_addr (i.e., that contributed to the information contained in this Tuple). The AN_orig_addr is defined by the tuple (olsrv2TibAttNetworksSetOrigIpAddrType, olsrv2TibAttNetworksSetOrigIpAddr). Sequence numbers are used in the OLSRv2 protocol for the purpose of discarding 'old' information, i.e., messages received out of order. However, with a limited number of bits for representing sequence numbers, wraparound (that the sequence number is incremented from the maximum possible value to zero) will occur. To prevent this from interfering with the operation of this protocol, the following MUST be observed when determining the ordering of sequence numbers. The term MAXVALUE designates in the following one more than the largest possible value for a sequence number. For a 16-bit sequence number (as are those defined in this specification), MAXVALUE is 65536. The sequence number S1 is said to be 'greater than' the sequence number S2 if: o S1 > S2 AND S1 - S2 < MAXVALUE/2 OR o S2 > S1 AND S2 - S1 > MAXVALUE/2 When sequence numbers S1 and S2 differ by MAXVALUE/2, their ordering cannot be determined. In this case, which should not occur, either ordering may be assumed. Thus, when comparing two messages, it is possible - even in the presence of wraparound - to determine which message contains the most recent information.")
olsrv2TibAttNetworksSetDist = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('hops').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetDist.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetDist.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetDist.setDescription('The number of hops to the network with address AN_net_addr from the router with originator address AN_orig_addr. The AN_orig_addr is defined by the tuple (olsrv2TibAttNetworksSetOrigIpAddrType, olsrv2TibAttNetworksSetOrigIpAddr).')
olsrv2TibAttNetworksSetMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 9), Olsrv2MetricValueCompressedFormTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetMetricValue.setDescription('The metric of the link from the router with originator address AN_orig_addr to the attached network with address AN_net_addr. The AN_net_addr is defined by the tuple (olsrv2TibAttNetworksSetNetIpAddrType, olsrv2TibAttNetworksSetNetIpAddr, olsrv2TibAttNetworksSetNetIpAddrPrefixLen).')
olsrv2TibAttNetworksSetExpireTime = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 10, 1, 10), TimeStamp()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetExpireTime.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetExpireTime.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibAttNetworksSetExpireTime.setDescription('olsrv2TibAttNetworksSetExpireTime specifies the value of sysUptime when this entry SHOULD expire and be removed from the olsrv2TibAttNetworksSetTable.')
olsrv2TibRoutingSetTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 2, 11), )
if mibBuilder.loadTexts: olsrv2TibRoutingSetTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetTable.setDescription("A router's Routing Set records the first hop along a selected path to each destination for which any such path is known.")
olsrv2TibRoutingSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1), ).setIndexNames((0, "OLSRv2-MIB", "olsrv2TibRoutingSetDestIpAddrType"), (0, "OLSRv2-MIB", "olsrv2TibRoutingSetDestIpAddr"), (0, "OLSRv2-MIB", "olsrv2TibRoutingSetDestIpAddrPrefixLen"))
if mibBuilder.loadTexts: olsrv2TibRoutingSetEntry.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetEntry.setDescription('It consists of Routing Tuples: (R_dest_addr, R_next_iface_addr, R_local_iface_addr, R_dist, R_metric)')
olsrv2TibRoutingSetDestIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddrType.setDescription("The type of the olsrv2TibRoutingSetDestIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibRoutingSetDestIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddr.setDescription('This is the address of the destination, either the address of an interface of a destination router or the network address of an attached network.')
olsrv2TibRoutingSetDestIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 3), InetAddressPrefixLength()).setUnits('bits')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddrPrefixLen.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDestIpAddrPrefixLen.setDescription('Indicates the number of leading one bits that form the mask to be logically ANDed with the destination address before being compared to the value in the olsrv2TibRoutingSetDestIpAddr field. Note: This definition needs to be consistent with the current forwarding table MIB module description. Specifically, it SHOULD allow for longest prefix matching of network addresses.')
olsrv2TibRoutingSetNextIfIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 4), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutingSetNextIfIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetNextIfIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetNextIfIpAddrType.setDescription("The type of the olsrv2TibRoutingSetNextIfIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibRoutingSetNextIfIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutingSetNextIfIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetNextIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetNextIfIpAddr.setDescription('This object is the OLSRv2 interface address of the next hop on the selected path to the destination.')
olsrv2TibRoutingSetLocalIfIpAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 6), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutingSetLocalIfIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetLocalIfIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetLocalIfIpAddrType.setDescription("The type of the olsrv2TibRoutingSetLocalIfIpAddr and olsrv2TibRoutingSetNextIfIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported.")
olsrv2TibRoutingSetLocalIfIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 7), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutingSetLocalIfIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetLocalIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetLocalIfIpAddr.setDescription('This object is the address of the local OLSRv2 interface over which a packet must be sent to reach the destination by the selected path.')
olsrv2TibRoutingSetDist = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('hops').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutingSetDist.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDist.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetDist.setDescription('This object is the number of hops on the selected path to the destination.')
olsrv2TibRoutingSetMetricValue = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 2, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294901760))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2TibRoutingSetMetricValue.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2TibRoutingSetMetricValue.setStatus('current')
if mibBuilder.loadTexts: olsrv2TibRoutingSetMetricValue.setDescription('This object is the metric of the route to the destination with address R_dest_addr. The maximum value of this object can be 256 times MAXIMUM_METRIC, as represented in Olsrv2MetricValueCompressedFormTC, i.e., 4294901760.')
olsrv2PerformanceObjGrp = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 1, 3))
olsrv2InterfacePerfTable = MibTable((1, 3, 6, 1, 2, 1, 219, 1, 3, 1), )
if mibBuilder.loadTexts: olsrv2InterfacePerfTable.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2InterfacePerfTable.setStatus('current')
if mibBuilder.loadTexts: olsrv2InterfacePerfTable.setDescription("This table summarizes performance objects that are measured per each active local OLSRv2 interface. If the olsrv2InterfaceAdminStatus of the interface changes to 'disabled', then the row associated with this interface SHOULD be removed from this table.")
olsrv2InterfacePerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1), )
nhdpInterfacePerfEntry.registerAugmentions(("OLSRv2-MIB", "olsrv2InterfacePerfEntry"))
olsrv2InterfacePerfEntry.setIndexNames(*nhdpInterfacePerfEntry.getIndexNames())
if mibBuilder.loadTexts: olsrv2InterfacePerfEntry.setStatus('current')
if mibBuilder.loadTexts: olsrv2InterfacePerfEntry.setDescription('A single entry contains performance counters for each active local OLSRv2 interface.')
olsrv2IfTcMessageXmits = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 1), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessageXmits.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessageXmits.setDescription('A counter is incremented each time a TC message has been transmitted on that interface.')
olsrv2IfTcMessageRecvd = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessageRecvd.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2IfTcMessageRecvd.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessageRecvd.setDescription('A counter is incremented each time a TC message has been received on that interface. This excludes all messages that are ignored due to OLSRv2 protocol procedures, such as messages considered invalid for processing by this router, as defined in Section 16.3.1 of OLSRv2 (RFC 7181).')
olsrv2IfTcMessageXmitAccumulatedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessageXmitAccumulatedSize.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessageXmitAccumulatedSize.setDescription('A counter is incremented by the number of octets in a TC message each time a TC message has been sent.')
olsrv2IfTcMessageRecvdAccumulatedSize = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 4), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessageRecvdAccumulatedSize.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2IfTcMessageRecvdAccumulatedSize.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessageRecvdAccumulatedSize.setDescription('A counter is incremented by the number of octets in a TC message each time a TC message has been received. This excludes all messages that are ignored due to OLSRv2 protocol procedures, such as messages considered invalid for processing by this router, as defined in Section 16.3.1 of OLSRv2 (RFC 7181).')
olsrv2IfTcMessageTriggeredXmits = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessageTriggeredXmits.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessageTriggeredXmits.setDescription('A counter is incremented each time a triggered TC message has been sent.')
olsrv2IfTcMessagePeriodicXmits = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessagePeriodicXmits.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessagePeriodicXmits.setDescription('A counter is incremented each time a periodic TC message has been sent.')
olsrv2IfTcMessageForwardedXmits = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessageForwardedXmits.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessageForwardedXmits.setDescription('A counter is incremented each time a TC message has been forwarded.')
olsrv2IfTcMessageXmitAccumulatedMPRSelectorCount = MibTableColumn((1, 3, 6, 1, 2, 1, 219, 1, 3, 1, 1, 8), Counter32()).setUnits('advertised MPR selectors').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2IfTcMessageXmitAccumulatedMPRSelectorCount.setStatus('current')
if mibBuilder.loadTexts: olsrv2IfTcMessageXmitAccumulatedMPRSelectorCount.setDescription('A counter is incremented by the number of advertised MPR selectors in a TC each time a TC message has been sent.')
olsrv2RoutingSetRecalculationCount = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 3, 2), Counter32()).setUnits('recalculations').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCount.setStatus('current')
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCount.setDescription('This counter increments each time the Routing Set has been recalculated.')
olsrv2MPRSetRecalculationCount = MibScalar((1, 3, 6, 1, 2, 1, 219, 1, 3, 3), Counter32()).setUnits('recalculations').setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCount.setStatus('current')
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCount.setDescription('This counter increments each time the MPRs of this router have been recalculated for any of its interfaces.')
olsrv2NotificationsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 0, 0))
olsrv2NotificationsControl = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 0, 1))
olsrv2NotificationsStates = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 0, 2))
olsrv2RouterStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 219, 0, 0, 1)).setObjects(("OLSRv2-MIB", "olsrv2OrigIpAddrType"), ("OLSRv2-MIB", "olsrv2OrigIpAddr"), ("OLSRv2-MIB", "olsrv2AdminStatus"))
if mibBuilder.loadTexts: olsrv2RouterStatusChange.setStatus('current')
if mibBuilder.loadTexts: olsrv2RouterStatusChange.setDescription('olsrv2RouterStatusChange is a notification generated when the OLSRv2 router changes it status. The router status is maintained in the olsrv2AdminStatus object.')
olsrv2OrigIpAddrChange = NotificationType((1, 3, 6, 1, 2, 1, 219, 0, 0, 2)).setObjects(("OLSRv2-MIB", "olsrv2OrigIpAddrType"), ("OLSRv2-MIB", "olsrv2OrigIpAddr"), ("OLSRv2-MIB", "olsrv2PreviousOrigIpAddrType"), ("OLSRv2-MIB", "olsrv2PreviousOrigIpAddr"))
if mibBuilder.loadTexts: olsrv2OrigIpAddrChange.setStatus('current')
if mibBuilder.loadTexts: olsrv2OrigIpAddrChange.setDescription('olsrv2OrigIpAddrChange is a notification generated when the OLSRv2 router changes it originator IP address. The notification includes the new and the previous originator IP address of the OLSRv2 router.')
olsrv2RoutingSetRecalculationCountChange = NotificationType((1, 3, 6, 1, 2, 1, 219, 0, 0, 3)).setObjects(("OLSRv2-MIB", "olsrv2OrigIpAddrType"), ("OLSRv2-MIB", "olsrv2OrigIpAddr"), ("OLSRv2-MIB", "olsrv2RoutingSetRecalculationCount"))
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCountChange.setStatus('current')
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCountChange.setDescription("The olsrv2RoutingSetRecalculationCountChange notification is generated when a significant number of Routing Set recalculations have occurred in a short time. This notification SHOULD be generated no more than once per olsrv2RoutingSetRecalculationCountWindow. The network administrator SHOULD select appropriate values for 'significant number of Routing Set recalculations' and 'short time' through the settings of the olsrv2RoutingSetRecalculationCountThreshold and olsrv2RoutingSetRecalculationCountWindow objects.")
olsrv2MPRSetRecalculationCountChange = NotificationType((1, 3, 6, 1, 2, 1, 219, 0, 0, 4)).setObjects(("OLSRv2-MIB", "olsrv2OrigIpAddrType"), ("OLSRv2-MIB", "olsrv2OrigIpAddr"), ("OLSRv2-MIB", "olsrv2MPRSetRecalculationCount"))
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCountChange.setStatus('current')
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCountChange.setDescription("The olsrv2MPRSetRecalculationCountChange notification is generated when a significant number of MPR set recalculations occur in a short period of time. This notification SHOULD be generated no more than once per olsrv2MPRSetRecalculationCountWindow. The network administrator SHOULD select appropriate values for 'significant number of MPR set recalculations' and 'short period of time' through the settings of the olsrv2MPRSetRecalculationCountThreshold and olsrv2MPRSetRecalculationCountWindow objects.")
olsrv2RoutingSetRecalculationCountThreshold = MibScalar((1, 3, 6, 1, 2, 1, 219, 0, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setUnits('recalculations').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCountThreshold.setStatus('current')
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCountThreshold.setDescription('A threshold value for the olsrv2RoutingSetRecalculationCount object. If the number of occurrences exceeds this threshold within the previous olsrv2RoutingSetRecalculationCountWindow, then the olsrv2RoutingSetRecalculationCountChange notification is to be generated. It is RECOMMENDED that the value of this threshold be set to at least 20 and higher in dense topologies with frequent expected topology changes.')
olsrv2RoutingSetRecalculationCountWindow = MibScalar((1, 3, 6, 1, 2, 1, 219, 0, 1, 2), TimeTicks().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCountWindow.setStatus('current')
if mibBuilder.loadTexts: olsrv2RoutingSetRecalculationCountWindow.setDescription('This object is used to determine whether to generate an olsrv2RoutingSetRecalculationCountChange notification. This object represents an interval from the present moment, extending into the past, expressed in hundredths of a second. If the change in the value of the olsrv2RoutingSetRecalculationCount object during this interval has exceeded the value of olsrv2RoutingSetRecalculationCountThreshold, then an olsrv2RoutingSetRecalculationCountChange notification is generated. It is RECOMMENDED that the value for this window be set to at least 5 times the nhdpHelloInterval (whose default value is 2 seconds.')
olsrv2MPRSetRecalculationCountThreshold = MibScalar((1, 3, 6, 1, 2, 1, 219, 0, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setUnits('recalculations').setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCountThreshold.setStatus('current')
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCountThreshold.setDescription('A threshold value for the olsrv2MPRSetRecalculationCount object. If the number of occurrences exceeds this threshold within the previous olsrv2MPRSetRecalculationCountWindow, then the olsrv2MPRSetRecalculationCountChange notification is to be generated. It is RECOMMENDED that the value of this threshold be set to at least 20 and higher in dense topologies with frequent expected topology changes.')
olsrv2MPRSetRecalculationCountWindow = MibScalar((1, 3, 6, 1, 2, 1, 219, 0, 1, 4), TimeTicks().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCountWindow.setStatus('current')
if mibBuilder.loadTexts: olsrv2MPRSetRecalculationCountWindow.setDescription('This object is used to determine whether to generate an olsrv2MPRSetRecalculationCountChange notification. This object represents an interval from the present moment, extending into the past, expressed in hundredths of a second. If the change in the value of the olsrv2MPRSetRecalculationCount object during that interval has exceeded the value of olsrv2MPRSetRecalculationCountThreshold, then the an olsrv2MPRSetRecalculationCountChange notification is generated. It is RECOMMENDED that the value for this window be set to at least 5 times the nhdpHelloInterval.')
olsrv2PreviousOrigIpAddrType = MibScalar((1, 3, 6, 1, 2, 1, 219, 0, 2, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2PreviousOrigIpAddrType.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2PreviousOrigIpAddrType.setStatus('current')
if mibBuilder.loadTexts: olsrv2PreviousOrigIpAddrType.setDescription("The type of the olsrv2PreviousOrigIpAddr, as defined in the InetAddress MIB module (RFC 4001). Only the values 'ipv4(1)' and 'ipv6(2)' are supported. This object MUST have the same persistence characteristics as olsrv2PreviousOrigIpAddr.")
olsrv2PreviousOrigIpAddr = MibScalar((1, 3, 6, 1, 2, 1, 219, 0, 2, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olsrv2PreviousOrigIpAddr.setReference('RFC 7181 - The Optimized Link State Routing Protocol Version 2, Clausen, T., Dearlove, C., Jacquet, P., and U. Herberg, April 2014.')
if mibBuilder.loadTexts: olsrv2PreviousOrigIpAddr.setStatus('current')
if mibBuilder.loadTexts: olsrv2PreviousOrigIpAddr.setDescription('The previous origination IP address of this OLSRv2 router. This object SHOULD be updated each time the olsrv2OrigIpAddr is modified. This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
olsrv2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 2, 1))
olsrv2MIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 219, 2, 2))
olsrv2BasicCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 219, 2, 1, 1)).setObjects(("OLSRv2-MIB", "olsrv2ConfigObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    olsrv2BasicCompliance = olsrv2BasicCompliance.setStatus('current')
if mibBuilder.loadTexts: olsrv2BasicCompliance.setDescription('The basic implementation requirements for managed network entities that implement the OLSRv2 routing process.')
olsrv2FullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 219, 2, 1, 2)).setObjects(("OLSRv2-MIB", "olsrv2ConfigObjectsGroup"), ("OLSRv2-MIB", "olsrv2StateObjectsGroup"), ("OLSRv2-MIB", "olsrv2PerfObjectsGroup"), ("OLSRv2-MIB", "olsrv2NotificationsObjectsGroup"), ("OLSRv2-MIB", "olsrv2NotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    olsrv2FullCompliance = olsrv2FullCompliance.setStatus('current')
if mibBuilder.loadTexts: olsrv2FullCompliance.setDescription('The full implementation requirements for managed network entities that implement the OLSRv2 routing process.')
olsrv2ConfigObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 219, 2, 2, 1)).setObjects(("OLSRv2-MIB", "olsrv2AdminStatus"), ("OLSRv2-MIB", "olsrv2InterfaceAdminStatus"), ("OLSRv2-MIB", "olsrv2OrigIpAddrType"), ("OLSRv2-MIB", "olsrv2OrigIpAddr"), ("OLSRv2-MIB", "olsrv2OHoldTime"), ("OLSRv2-MIB", "olsrv2TcInterval"), ("OLSRv2-MIB", "olsrv2TcMinInterval"), ("OLSRv2-MIB", "olsrv2THoldTime"), ("OLSRv2-MIB", "olsrv2AHoldTime"), ("OLSRv2-MIB", "olsrv2RxHoldTime"), ("OLSRv2-MIB", "olsrv2PHoldTime"), ("OLSRv2-MIB", "olsrv2FHoldTime"), ("OLSRv2-MIB", "olsrv2TpMaxJitter"), ("OLSRv2-MIB", "olsrv2TtMaxJitter"), ("OLSRv2-MIB", "olsrv2FMaxJitter"), ("OLSRv2-MIB", "olsrv2TcHopLimit"), ("OLSRv2-MIB", "olsrv2WillFlooding"), ("OLSRv2-MIB", "olsrv2WillRouting"), ("OLSRv2-MIB", "olsrv2LinkMetricType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    olsrv2ConfigObjectsGroup = olsrv2ConfigObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: olsrv2ConfigObjectsGroup.setDescription('Objects to permit configuration of OLSRv2. All of these SHOULD be backed by non-volatile storage.')
olsrv2StateObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 219, 2, 2, 2)).setObjects(("OLSRv2-MIB", "olsrv2LibOrigSetExpireTime"), ("OLSRv2-MIB", "olsrv2LibLocAttNetSetDistance"), ("OLSRv2-MIB", "olsrv2LibLocAttNetSetMetricValue"), ("OLSRv2-MIB", "olsrv2IibLinkSetInMetricValue"), ("OLSRv2-MIB", "olsrv2IibLinkSetOutMetricValue"), ("OLSRv2-MIB", "olsrv2IibLinkSetMprSelector"), ("OLSRv2-MIB", "olsrv2Iib2HopSetInMetricValue"), ("OLSRv2-MIB", "olsrv2Iib2HopSetOutMetricValue"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNOrigIpAddrType"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNOrigIpAddr"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNInMetricValue"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNOutMetricValue"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNWillFlooding"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNWillRouting"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNFloodingMpr"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNRoutingMpr"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNMprSelector"), ("OLSRv2-MIB", "olsrv2NibNeighborSetNAdvertised"), ("OLSRv2-MIB", "olsrv2NibNeighborSetTableAnsn"), ("OLSRv2-MIB", "olsrv2TibAdRemoteRouterSetMaxSeqNo"), ("OLSRv2-MIB", "olsrv2TibAdRemoteRouterSetExpireTime"), ("OLSRv2-MIB", "olsrv2TibRouterTopologySetSeqNo"), ("OLSRv2-MIB", "olsrv2TibRouterTopologySetMetricValue"), ("OLSRv2-MIB", "olsrv2TibRouterTopologySetExpireTime"), ("OLSRv2-MIB", "olsrv2TibRoutableAddressTopologySetExpireTime"), ("OLSRv2-MIB", "olsrv2TibRoutableAddressTopologySetSeqNo"), ("OLSRv2-MIB", "olsrv2TibRoutableAddressTopologySetMetricValue"), ("OLSRv2-MIB", "olsrv2TibAttNetworksSetSeqNo"), ("OLSRv2-MIB", "olsrv2TibAttNetworksSetDist"), ("OLSRv2-MIB", "olsrv2TibAttNetworksSetMetricValue"), ("OLSRv2-MIB", "olsrv2TibAttNetworksSetExpireTime"), ("OLSRv2-MIB", "olsrv2TibRoutingSetNextIfIpAddrType"), ("OLSRv2-MIB", "olsrv2TibRoutingSetNextIfIpAddr"), ("OLSRv2-MIB", "olsrv2TibRoutingSetLocalIfIpAddrType"), ("OLSRv2-MIB", "olsrv2TibRoutingSetLocalIfIpAddr"), ("OLSRv2-MIB", "olsrv2TibRoutingSetDist"), ("OLSRv2-MIB", "olsrv2TibRoutingSetMetricValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    olsrv2StateObjectsGroup = olsrv2StateObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: olsrv2StateObjectsGroup.setDescription('Objects to permit monitoring of OLSRv2 state.')
olsrv2PerfObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 219, 2, 2, 3)).setObjects(("OLSRv2-MIB", "olsrv2IfTcMessageXmits"), ("OLSRv2-MIB", "olsrv2IfTcMessageRecvd"), ("OLSRv2-MIB", "olsrv2IfTcMessageXmitAccumulatedSize"), ("OLSRv2-MIB", "olsrv2IfTcMessageRecvdAccumulatedSize"), ("OLSRv2-MIB", "olsrv2IfTcMessageTriggeredXmits"), ("OLSRv2-MIB", "olsrv2IfTcMessagePeriodicXmits"), ("OLSRv2-MIB", "olsrv2IfTcMessageForwardedXmits"), ("OLSRv2-MIB", "olsrv2IfTcMessageXmitAccumulatedMPRSelectorCount"), ("OLSRv2-MIB", "olsrv2RoutingSetRecalculationCount"), ("OLSRv2-MIB", "olsrv2MPRSetRecalculationCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    olsrv2PerfObjectsGroup = olsrv2PerfObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: olsrv2PerfObjectsGroup.setDescription('Objects to support monitoring of OLSRv2 performance.')
olsrv2NotificationsObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 219, 2, 2, 4)).setObjects(("OLSRv2-MIB", "olsrv2RoutingSetRecalculationCountThreshold"), ("OLSRv2-MIB", "olsrv2RoutingSetRecalculationCountWindow"), ("OLSRv2-MIB", "olsrv2MPRSetRecalculationCountThreshold"), ("OLSRv2-MIB", "olsrv2MPRSetRecalculationCountWindow"), ("OLSRv2-MIB", "olsrv2PreviousOrigIpAddrType"), ("OLSRv2-MIB", "olsrv2PreviousOrigIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    olsrv2NotificationsObjectsGroup = olsrv2NotificationsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: olsrv2NotificationsObjectsGroup.setDescription('Objects to support the notification types in the olsrv2NotificationsGroup. Some of these appear in notification payloads, others serve to control notification generation.')
olsrv2NotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 219, 2, 2, 5)).setObjects(("OLSRv2-MIB", "olsrv2RouterStatusChange"), ("OLSRv2-MIB", "olsrv2OrigIpAddrChange"), ("OLSRv2-MIB", "olsrv2RoutingSetRecalculationCountChange"), ("OLSRv2-MIB", "olsrv2MPRSetRecalculationCountChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    olsrv2NotificationsGroup = olsrv2NotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: olsrv2NotificationsGroup.setDescription('Notification types to support management of OLSRv2.')
mibBuilder.exportSymbols("OLSRv2-MIB", olsrv2IfTcMessageXmitAccumulatedSize=olsrv2IfTcMessageXmitAccumulatedSize, olsrv2TibRoutingSetLocalIfIpAddrType=olsrv2TibRoutingSetLocalIfIpAddrType, manetOlsrv2MIB=manetOlsrv2MIB, olsrv2FMaxJitter=olsrv2FMaxJitter, olsrv2RoutingSetRecalculationCountThreshold=olsrv2RoutingSetRecalculationCountThreshold, olsrv2NotificationsGroup=olsrv2NotificationsGroup, olsrv2LibLocAttNetSetTable=olsrv2LibLocAttNetSetTable, olsrv2TibAdRemoteRouterSetTable=olsrv2TibAdRemoteRouterSetTable, olsrv2InterfacePerfEntry=olsrv2InterfacePerfEntry, olsrv2RxHoldTime=olsrv2RxHoldTime, olsrv2TibRoutingSetDestIpAddrType=olsrv2TibRoutingSetDestIpAddrType, olsrv2IibLinkSetMprSelector=olsrv2IibLinkSetMprSelector, olsrv2TibRoutingSetLocalIfIpAddr=olsrv2TibRoutingSetLocalIfIpAddr, olsrv2OHoldTime=olsrv2OHoldTime, olsrv2LibLocAttNetSetIpAddrType=olsrv2LibLocAttNetSetIpAddrType, olsrv2LibLocAttNetSetIpAddrPrefixLen=olsrv2LibLocAttNetSetIpAddrPrefixLen, olsrv2NotificationsObjectsGroup=olsrv2NotificationsObjectsGroup, olsrv2LibLocAttNetSetIpAddr=olsrv2LibLocAttNetSetIpAddr, olsrv2InterfaceTable=olsrv2InterfaceTable, olsrv2BasicCompliance=olsrv2BasicCompliance, olsrv2IfTcMessageRecvdAccumulatedSize=olsrv2IfTcMessageRecvdAccumulatedSize, olsrv2PerfObjectsGroup=olsrv2PerfObjectsGroup, olsrv2NibNeighborSetNOrigIpAddr=olsrv2NibNeighborSetNOrigIpAddr, olsrv2TibRoutableAddressTopologySetEntry=olsrv2TibRoutableAddressTopologySetEntry, olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType=olsrv2TibRoutableAddressTopologySetFromOrigIpAddrType, olsrv2TcMinInterval=olsrv2TcMinInterval, olsrv2MIBObjects=olsrv2MIBObjects, olsrv2Compliances=olsrv2Compliances, olsrv2LinkMetricType=olsrv2LinkMetricType, olsrv2NibNeighborSetNAdvertised=olsrv2NibNeighborSetNAdvertised, olsrv2TibRoutingSetDestIpAddrPrefixLen=olsrv2TibRoutingSetDestIpAddrPrefixLen, olsrv2RoutingSetRecalculationCount=olsrv2RoutingSetRecalculationCount, olsrv2Iib2HopSetEntry=olsrv2Iib2HopSetEntry, olsrv2PerformanceObjGrp=olsrv2PerformanceObjGrp, olsrv2TibAdRemoteRouterSetExpireTime=olsrv2TibAdRemoteRouterSetExpireTime, PYSNMP_MODULE_ID=manetOlsrv2MIB, olsrv2TibAttNetworksSetMetricValue=olsrv2TibAttNetworksSetMetricValue, olsrv2TibRoutableAddressTopologySetMetricValue=olsrv2TibRoutableAddressTopologySetMetricValue, olsrv2NotificationsObjects=olsrv2NotificationsObjects, olsrv2RoutingSetRecalculationCountWindow=olsrv2RoutingSetRecalculationCountWindow, olsrv2TibRouterTopologySetMetricValue=olsrv2TibRouterTopologySetMetricValue, Olsrv2TimeValueCompressedForm32TC=Olsrv2TimeValueCompressedForm32TC, olsrv2TibAttNetworksSetNetIpAddr=olsrv2TibAttNetworksSetNetIpAddr, olsrv2OrigIpAddrType=olsrv2OrigIpAddrType, olsrv2MIBConformance=olsrv2MIBConformance, olsrv2MPRSetRecalculationCountThreshold=olsrv2MPRSetRecalculationCountThreshold, olsrv2TibAttNetworksSetEntry=olsrv2TibAttNetworksSetEntry, olsrv2IfTcMessageRecvd=olsrv2IfTcMessageRecvd, olsrv2TibRoutingSetMetricValue=olsrv2TibRoutingSetMetricValue, olsrv2NibNeighborSetNInMetricValue=olsrv2NibNeighborSetNInMetricValue, olsrv2TibRoutingSetTable=olsrv2TibRoutingSetTable, olsrv2Iib2HopSetInMetricValue=olsrv2Iib2HopSetInMetricValue, olsrv2InterfaceAdminStatus=olsrv2InterfaceAdminStatus, olsrv2Iib2HopSetOutMetricValue=olsrv2Iib2HopSetOutMetricValue, olsrv2LibLocAttNetSetEntry=olsrv2LibLocAttNetSetEntry, olsrv2TibAttNetworksSetNetIpAddrType=olsrv2TibAttNetworksSetNetIpAddrType, olsrv2TibAttNetworksSetExpireTime=olsrv2TibAttNetworksSetExpireTime, olsrv2MPRSetRecalculationCount=olsrv2MPRSetRecalculationCount, olsrv2TibAttNetworksSetOrigIpAddr=olsrv2TibAttNetworksSetOrigIpAddr, olsrv2AdminStatus=olsrv2AdminStatus, olsrv2TibAttNetworksSetOrigIpAddrType=olsrv2TibAttNetworksSetOrigIpAddrType, olsrv2TibAttNetworksSetNetIpAddrPrefixLen=olsrv2TibAttNetworksSetNetIpAddrPrefixLen, olsrv2NotificationsControl=olsrv2NotificationsControl, olsrv2TibRoutableAddressTopologySetFromOrigIpAddr=olsrv2TibRoutableAddressTopologySetFromOrigIpAddr, olsrv2TcInterval=olsrv2TcInterval, olsrv2THoldTime=olsrv2THoldTime, olsrv2TibRouterTopologySetToOrigIpAddrType=olsrv2TibRouterTopologySetToOrigIpAddrType, olsrv2TibRouterTopologySetSeqNo=olsrv2TibRouterTopologySetSeqNo, olsrv2FHoldTime=olsrv2FHoldTime, olsrv2TibAdRemoteRouterSetIpAddrType=olsrv2TibAdRemoteRouterSetIpAddrType, olsrv2TibRoutingSetDestIpAddr=olsrv2TibRoutingSetDestIpAddr, olsrv2NibNeighborSetNRoutingMpr=olsrv2NibNeighborSetNRoutingMpr, olsrv2OrigIpAddrChange=olsrv2OrigIpAddrChange, olsrv2IibLinkSetTable=olsrv2IibLinkSetTable, olsrv2NibNeighborSetNMprSelector=olsrv2NibNeighborSetNMprSelector, olsrv2TibRouterTopologySetFromOrigIpAddr=olsrv2TibRouterTopologySetFromOrigIpAddr, olsrv2IfTcMessageTriggeredXmits=olsrv2IfTcMessageTriggeredXmits, olsrv2NibNeighborSetNFloodingMpr=olsrv2NibNeighborSetNFloodingMpr, olsrv2TpMaxJitter=olsrv2TpMaxJitter, olsrv2AHoldTime=olsrv2AHoldTime, olsrv2TibRoutableAddressTopologySetTable=olsrv2TibRoutableAddressTopologySetTable, olsrv2TibAttNetworksSetTable=olsrv2TibAttNetworksSetTable, olsrv2TcHopLimit=olsrv2TcHopLimit, olsrv2LibOrigSetTable=olsrv2LibOrigSetTable, olsrv2LibLocAttNetSetDistance=olsrv2LibLocAttNetSetDistance, olsrv2TibRouterTopologySetToOrigIpAddr=olsrv2TibRouterTopologySetToOrigIpAddr, olsrv2IfTcMessagePeriodicXmits=olsrv2IfTcMessagePeriodicXmits, olsrv2LibOrigSetEntry=olsrv2LibOrigSetEntry, olsrv2MPRSetRecalculationCountChange=olsrv2MPRSetRecalculationCountChange, olsrv2MIBNotifications=olsrv2MIBNotifications, olsrv2RoutingSetRecalculationCountChange=olsrv2RoutingSetRecalculationCountChange, olsrv2TibRoutableAddressTopologySetDestIpAddrType=olsrv2TibRoutableAddressTopologySetDestIpAddrType, olsrv2NotificationsStates=olsrv2NotificationsStates, olsrv2TibAttNetworksSetSeqNo=olsrv2TibAttNetworksSetSeqNo, olsrv2TibRouterTopologySetFromOrigIpAddrType=olsrv2TibRouterTopologySetFromOrigIpAddrType, olsrv2RouterStatusChange=olsrv2RouterStatusChange, olsrv2LibLocAttNetSetMetricValue=olsrv2LibLocAttNetSetMetricValue, olsrv2TibRouterTopologySetTable=olsrv2TibRouterTopologySetTable, olsrv2NibNeighborSetNWillFlooding=olsrv2NibNeighborSetNWillFlooding, olsrv2NibNeighborSetEntry=olsrv2NibNeighborSetEntry, olsrv2IfTcMessageXmits=olsrv2IfTcMessageXmits, olsrv2TibRoutableAddressTopologySetSeqNo=olsrv2TibRoutableAddressTopologySetSeqNo, olsrv2NibNeighborSetNWillRouting=olsrv2NibNeighborSetNWillRouting, olsrv2ConfigObjectsGroup=olsrv2ConfigObjectsGroup, olsrv2IibLinkSetOutMetricValue=olsrv2IibLinkSetOutMetricValue, olsrv2StateGroup=olsrv2StateGroup, olsrv2TtMaxJitter=olsrv2TtMaxJitter, olsrv2WillRouting=olsrv2WillRouting, olsrv2InterfacePerfTable=olsrv2InterfacePerfTable, olsrv2LibOrigSetIpAddr=olsrv2LibOrigSetIpAddr, olsrv2PHoldTime=olsrv2PHoldTime, olsrv2TibRouterTopologySetEntry=olsrv2TibRouterTopologySetEntry, olsrv2StateObjectsGroup=olsrv2StateObjectsGroup, olsrv2PreviousOrigIpAddrType=olsrv2PreviousOrigIpAddrType, olsrv2MPRSetRecalculationCountWindow=olsrv2MPRSetRecalculationCountWindow, Olsrv2StatusTC=Olsrv2StatusTC, olsrv2NibNeighborSetNOrigIpAddrType=olsrv2NibNeighborSetNOrigIpAddrType, olsrv2InterfaceEntry=olsrv2InterfaceEntry, Olsrv2MetricValueCompressedFormTC=Olsrv2MetricValueCompressedFormTC, olsrv2TibRoutingSetNextIfIpAddr=olsrv2TibRoutingSetNextIfIpAddr, olsrv2TibAdRemoteRouterSetMaxSeqNo=olsrv2TibAdRemoteRouterSetMaxSeqNo, olsrv2LibOrigSetIpAddrType=olsrv2LibOrigSetIpAddrType, olsrv2IfTcMessageXmitAccumulatedMPRSelectorCount=olsrv2IfTcMessageXmitAccumulatedMPRSelectorCount, olsrv2PreviousOrigIpAddr=olsrv2PreviousOrigIpAddr, olsrv2NibNeighborSetNOutMetricValue=olsrv2NibNeighborSetNOutMetricValue, olsrv2TibRoutingSetNextIfIpAddrType=olsrv2TibRoutingSetNextIfIpAddrType, olsrv2IfTcMessageForwardedXmits=olsrv2IfTcMessageForwardedXmits, olsrv2IibLinkSetInMetricValue=olsrv2IibLinkSetInMetricValue, olsrv2MIBGroups=olsrv2MIBGroups, olsrv2LibOrigSetExpireTime=olsrv2LibOrigSetExpireTime, olsrv2TibRoutingSetDist=olsrv2TibRoutingSetDist, olsrv2Iib2HopSetTable=olsrv2Iib2HopSetTable, WillingnessTC=WillingnessTC, olsrv2ConfigurationGroup=olsrv2ConfigurationGroup, olsrv2OrigIpAddr=olsrv2OrigIpAddr, olsrv2NibNeighborSetTableAnsn=olsrv2NibNeighborSetTableAnsn, olsrv2TibAttNetworksSetDist=olsrv2TibAttNetworksSetDist, olsrv2FullCompliance=olsrv2FullCompliance, olsrv2NibNeighborSetTable=olsrv2NibNeighborSetTable, olsrv2TibAdRemoteRouterSetIpAddr=olsrv2TibAdRemoteRouterSetIpAddr, olsrv2TibRoutingSetEntry=olsrv2TibRoutingSetEntry, olsrv2WillFlooding=olsrv2WillFlooding, olsrv2TibRoutableAddressTopologySetDestIpAddr=olsrv2TibRoutableAddressTopologySetDestIpAddr, olsrv2TibAdRemoteRouterSetEntry=olsrv2TibAdRemoteRouterSetEntry, olsrv2TibRoutableAddressTopologySetExpireTime=olsrv2TibRoutableAddressTopologySetExpireTime, olsrv2IibLinkSetEntry=olsrv2IibLinkSetEntry, olsrv2TibRouterTopologySetExpireTime=olsrv2TibRouterTopologySetExpireTime)
