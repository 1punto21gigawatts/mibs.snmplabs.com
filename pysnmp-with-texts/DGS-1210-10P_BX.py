#
# PySNMP MIB module DGS-1210-10P_BX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1210-10P_BX
# Produced by pysmi-0.3.4 at Wed May  1 12:42:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
dot1dBasePortEntry, dot1dBridge, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePortEntry", "dot1dBridge", "dot1dBasePort")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpSecurityLevel, SnmpEngineID, SnmpAdminString = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpSecurityLevel", "SnmpEngineID", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, enterprises, Counter32, IpAddress, Counter64, MibIdentifier, Unsigned32, iso, ObjectIdentity, ModuleIdentity, Bits, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "enterprises", "Counter32", "IpAddress", "Counter64", "MibIdentifier", "Unsigned32", "iso", "ObjectIdentity", "ModuleIdentity", "Bits", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention", "MacAddress")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS12XXSeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76)).setLabel("dlink-DGS12XXSeriesProd")
dgs_1210_10pbx = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12)).setLabel("dgs-1210-10pbx")
class VlanIndex(TextualConvention, Unsigned32):
    description = 'A value used to index per-VLAN tables: values of 0 and 4095 are not permitted; if the value is between 1 and 4094 inclusive, it represents an IEEE 802.1Q VLAN-ID with global scope within a given bridged domain (see VlanId textual convention). If the value is greater than 4095 then it represents a VLAN with scope local to the particular agent, i.e. one without a global VLAN-ID assigned to it. Such VLANs are outside the scope of IEEE 802.1Q but it is convenient to be able to manage them in the same way using this MIB.'
    status = 'current'

class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    description = "The Bridge-Identifier as used in the Spanning Tree Protocol to uniquely identify a bridge. Its first two octets (in network byte order) contain a priority value and its last 6 octets contain the MAC address used to refer to a bridge in a unique fashion (typically, the numerically smallest MAC address of all ports on the bridge). Several objects in this MIB module represent values of timers used by the Spanning Tree Protocol. In this MIB, these timers have values in units of hundreths of a second (i.e. 1/100 secs). These timers, when stored in a Spanning Tree Protocol's BPDU, are in units of 1/256 seconds. Note, however, that 802.1D-1990 specifies a settable granularity of no more than 1 second for these timers. To avoid ambiguity, a data type is defined here as a textual convention and all representation of these timers in this MIB module are defined using this data type. An algorithm is also defined for converting between the different units, to ensure a timer's value is not distorted by multiple conversions."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    description = 'A STP timer in units of 1/100 seconds To convert a Timeout value into a value in units of 1/256 seconds, the following algorithm should be used: b = floor( (n * 256) / 100) where: floor = quotient [ignore remainder] n is the value in 1/100 second units b is the value in 1/256 second units To convert the value from 1/256 second units back to 1/100 seconds, the following algorithm should be used: n = ceiling( (b * 100) / 256) where: ceiling = quotient [if remainder is 0], or quotient + 1 [if remainder is non-zero] n is the value in 1/100 second units b is the value in 1/256 second units Note: it is important that the arithmetic operations are done in the order specified (i.e., multiply first, divide second).'
    status = 'current'
    displayHint = 'd4'

class RmonStatus(TextualConvention, Integer32):
    description = 'The status of a table entry. Setting this object to the value invalid(4) has the effect of invalidating the corresponding entry. That is, it effectively disassociates the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries currently not in use. Proper interpretation of such entries requires examination of the relevant RmonStatus object. An existing instance of this object cannot be set to createRequest(2). This object may only be set to createRequest(2) when this instance is created. When this object is created, the agent may wish to create supplemental object instances with default values to complete a conceptual row in this table. Because the creation of these default objects is entirely at the option of the agent, the manager must not assume that any will be created, but may make use of any that are created. Immediately after completing the create operation, the agent must set this object to underCreation(3). When in the underCreation(3) state, an entry is allowed to exist in a possibly incomplete, possibly inconsistent state, usually to allow it to be modified in multiple PDUs. When in this state, an entry is not fully active. Entries shall exist in the underCreation(3) state until the management station is finished configuring the entry and sets this object to valid(1) or aborts, setting this object to invalid(4). If the agent determines that an entry has been in the underCreation(3) state for an abnormally long time, it may decide that the management station has crashed. If the agent makes this decision, it may set this object to invalid(4) to reclaim the entry. A prudent agent will understand that the management station may need to wait for human input and will allow for that possibility in its determination of this abnormally long period. An entry in the valid(1) state is fully configured and consistent and fully represents the configuration or operation such a row is intended to represent. For example, it could be a statistical function that is configured and active, or a filter that is available in the list of filters processed by the packet capture process. A manager is restricted to changing the state of an entry in the following ways: To: valid createRequest underCreation invalid From: valid OK NO OK OK createRequest N/A N/A N/A N/A underCreation OK NO OK OK invalid NO NO NO OK nonExistent NO OK NO OK In the table above, it is not applicable to move the state from the createRequest state to any other state because the manager will never find the variable in that state. The nonExistent state is not a value of the enumeration, rather it means that the entryStatus variable does not exist at all. An agent may allow an entryStatus variable to change state in additional ways, so long as the semantics of the states are followed. This allowance is made to ease the implementation of the agent and is made despite the fact that managers should never exercise these additional state transitions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class LldpManAddress(TextualConvention, OctetString):
    description = 'The value of a management address associated with the LLDP agent that may be used to reach higher layer entities to assist discovery by network management. It should be noted that appropriate security credentials, such as SNMP engineId, may be required to access the LLDP agent using a management address. These necessary credentials should be known by the network management and the objects associated with the credentials are not included in the LLDP agent.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses. This is a binary string of 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 4))
companyRSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10))
companyDot1xGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18))
companyTrapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20))
companyVoiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21))
companyPoEGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25))
companyAutoSurveillanceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35))
companyCableDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47))
companyNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50))
companydot3azEEE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
if mibBuilder.loadTexts: sysSwitchName.setDescription('System name used for identification of the device. The following characters are allowed to input. 0 ~ 9 / a ~ z / A ~ Z Special character: ( ) V + _ = .')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: sysHardwareVersion.setDescription('Version number of the Hardware.')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sysFirmwareVersion.setDescription('Version number of the Firmware.')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setDescription('This time interval is used to count the time and logout web interface automatically.')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
if mibBuilder.loadTexts: sysLocationName.setDescription("The location name of this node (e.g., `telephone closet, 3rd floor'). If the location is unknown, the value is the zero-length string.")
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
if mibBuilder.loadTexts: sysGroupInterval.setDescription('Group Interval is used to send D-link Discover packet to D-link SmartConsole Utility frequency. The timer in units of seconds. Set value 0 to disable group Interval.')
sysSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemPassword.setStatus('current')
if mibBuilder.loadTexts: sysSystemPassword.setDescription('This object is used to set System Password, The following characters are allowed to input: semicolon, question mark, space, and double quotation mark.')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
if mibBuilder.loadTexts: sysSafeGuardEnable.setDescription('This object is used to set Safeguard Enable\\Disable.')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
if mibBuilder.loadTexts: sysRestart.setDescription("This object allows the user to restart the Switch (i.e)the entire switch will operationally go down and start again. Setting a value of 'true' causes the switch to be restarted. When the switch operationally goes down, configuration save operation is initiated based on the configuration save option chosen. When the switch operationally come up, the saved configurations are restored based on the restore option chosen. Once the switch is restarted, the value of this object reverts to 'false'.")
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
if mibBuilder.loadTexts: sysSave.setDescription('This object is used to save Configuration.')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
if mibBuilder.loadTexts: sysJumboFrameEnable.setDescription('Gigabit Web Smart Switches support jumbo frames (frames larger than the Ethernet frame size of 1522 bytes) of up to 10,000 bytes (tagged). Default jumbo frame is disabled.')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlTable.setDescription('A table to control the port specific parameters of the device like speed, duplex mode, etc.')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysPortCtrlIndex"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlEntry.setDescription('An entry appears in this table for each interface in the system. Index to the table is the interface index of the port.')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlIndex.setDescription('Interface index of the port for the configuration in this entry applies.')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlSpeed.setDescription('Configures interface speed.')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setDescription("The port's operating speed state.")
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlMDI.setDescription('Configures interface auto/mdi/mdix mode. The default setting is Auto.')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setDescription('Enables / disables flow control for the interface.')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setDescription("The link parner negotiate port's operating flow control state.")
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1000BaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
if mibBuilder.loadTexts: sysPortCtrlType.setDescription("The port's media type.")
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setDescription('This object indicates auto config is enabled or disabled.')
sysDdp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30))
sysDdpGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGlobalOnOff.setStatus('current')
if mibBuilder.loadTexts: sysDdpGlobalOnOff.setDescription('This object indicates D-Link discover protocol is enabled or disabled.')
sysDdpGeneralReportOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportOnOff.setStatus('current')
if mibBuilder.loadTexts: sysDdpGeneralReportOnOff.setDescription('This object indicates D-Link discover protocol report is enabled or disabled. This object only can be modified when D-Link discover protocol state is enabled.')
sysDdpGeneralReportTimer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("time-30seconds", 30), ("time-60seconds", 60), ("time-90seconds", 90), ("time-120seconds", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportTimer.setStatus('current')
if mibBuilder.loadTexts: sysDdpGeneralReportTimer.setDescription('This object indicates D-Link discover protocol report time period. This object only can be modified when both D-Link discover protocol state and D-Link discover protocol report state are enabled.')
sysDdpProtStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4), )
if mibBuilder.loadTexts: sysDdpProtStatusTable.setStatus('current')
if mibBuilder.loadTexts: sysDdpProtStatusTable.setDescription('A table to control the port status of D-Link discover protocol.')
sysDdpProtStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysDdpProtStatusIndex"))
if mibBuilder.loadTexts: sysDdpProtStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sysDdpProtStatusEntry.setDescription('An entry appears in this table for each port D-Link discover protocol status.')
sysDdpProtStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDdpProtStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sysDdpProtStatusIndex.setDescription('Interface index of the port for the configuration in this entry applies.')
sysDdpProtStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 1, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpProtStatusControl.setStatus('current')
if mibBuilder.loadTexts: sysDdpProtStatusControl.setDescription('Configures the port status of D-Link discover protocol.')
dot3azEEEset = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1))
dot3azTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1), )
if mibBuilder.loadTexts: dot3azTable.setStatus('current')
if mibBuilder.loadTexts: dot3azTable.setDescription('A table to control IEEE802.3az EEE settings features of the device.')
dot3azEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "portD3Index"))
if mibBuilder.loadTexts: dot3azEntry.setStatus('current')
if mibBuilder.loadTexts: dot3azEntry.setDescription('An entry appears in IEEE802.3az EEE table for each interface in the system.')
portD3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portD3Index.setStatus('current')
if mibBuilder.loadTexts: portD3Index.setDescription('The interface index for which the configuration in this entry applies.')
portD3State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portD3State.setStatus('current')
if mibBuilder.loadTexts: portD3State.setDescription("Enable / disable port IEEE802.3az EEE admin state for the interface. A given ports' dynamic MAC address learning will be stopped such that the current source MAC addresses entered into the MAC address forwarding table can not be changed once the port security admin state is enabled.")
ipv4sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddrCfgMode.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysIpAddrCfgMode.setDescription("Specifies the means by which the default interface in the device gets the IP address. If 'manual' mode is selected, the default interface takes the 'sysDefaultIpAddr' configured in the system. If 'dynamic' mode is selected, the default interface gets the IP address through dynamic IP address configuration protocols such as RARP client, BootP client, DHCP Client, etc. If the system fails to get the IP address dynamically through all the above protocols, the default interface uses the 'sysDefaultIpAddr' configured in the system.")
ipv4sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysIpAddr.setDescription('Default IP Address of the system. This IP address, if modified, will take effect only when the configuration is stored & restored.')
ipv4sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpSubnetMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysIpSubnetMask.setDescription('IP subnet mask for the default IP address. This subnet mask, if modified, will take effect only when the configuration is stored & restored.')
ipv4sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysGateway.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysGateway.setDescription('Gateway')
ipifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5))
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
if mibBuilder.loadTexts: sysIpAddrCfgMode.setDescription("Specifies the means by which the default interface in the device gets the IP address. If 'manual' mode is selected, the default interface takes the 'sysDefaultIpAddr' configured in the system. If 'dynamic' mode is selected, the default interface gets the IP address through dynamic IP address configuration protocols such as RARP client, BootP client, DHCP Client, etc. If the system fails to get the IP address dynamically through all the above protocols, the default interface uses the 'sysDefaultIpAddr' configured in the system.")
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
if mibBuilder.loadTexts: sysIpAddr.setDescription('Default IP Address of the system. This IP address, if modified, will take effect only when the configuration is stored & restored.')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: sysIpSubnetMask.setDescription('IP subnet mask for the default IP address. This subnet mask, if modified, will take effect only when the configuration is stored & restored.')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
if mibBuilder.loadTexts: sysGateway.setDescription('Gateway')
ipifName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifName.setStatus('current')
if mibBuilder.loadTexts: ipifName.setDescription('The Description for the interface.')
ipifv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6GlobalStatus.setStatus('current')
if mibBuilder.loadTexts: ipifv6GlobalStatus.setDescription('The ID of VLAN that you want this interface to be in. It must be a exist vlan id.')
ipifv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DHCPStatus.setStatus('current')
if mibBuilder.loadTexts: ipifv6DHCPStatus.setDescription('The state of DHCPv6 that you want this interface to be in. It must be a exist vlan id.')
ipifv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setStatus('current')
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setDescription('The global state of link local that you want this interface to be in. It must be a exist vlan id.')
ipifv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setStatus('current')
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setDescription("The NS's retransmit time that you want this interface to be in. It must be a exist vlan id.")
ipifv6DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 11), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DefaultGateway.setStatus('current')
if mibBuilder.loadTexts: ipifv6DefaultGateway.setDescription("The ipv6 default gateway that you want this interface to be in. To delete gateway, please insert address '0000:0000:0000:0000:0000:0000:0000:0000'.")
ipifV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12), )
if mibBuilder.loadTexts: ipifV6AddressTable.setStatus('current')
if mibBuilder.loadTexts: ipifV6AddressTable.setDescription('A list of interface entries.')
ipifV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipifV6AddressMainIndex"), (0, "DGS-1210-10P_BX", "ipifV6AddressIpAddr"), (0, "DGS-1210-10P_BX", "ipifV6AddressIpPrefix"))
if mibBuilder.loadTexts: ipifV6AddressEntry.setStatus('current')
if mibBuilder.loadTexts: ipifV6AddressEntry.setDescription('An entry containing management information applicable to a particular interface.')
ipifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setStatus('current')
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setDescription('The index of this IPv6 entry.')
ipifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setStatus('current')
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setDescription('The ip address of this IPv6 entry.')
ipifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setStatus('current')
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setDescription('The ip prefix of this IPv6 entry.')
ipifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpType.setStatus('current')
if mibBuilder.loadTexts: ipifV6AddressIpType.setDescription('The ip type of this IPv6 entry.')
ipifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 2, 5, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setDescription('The status of an entry in the Multi Interface Table. Only a subset of the rowstatus variables (active, createAndWait, destroy) are available.')
tftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwServerIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: tftpFwServerIpAddress.setDescription("The TFTP server's IP address is used to upload or download firmware.")
tftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwImageFileName.setStatus('obsolete')
if mibBuilder.loadTexts: tftpFwImageFileName.setDescription('Configure firmware filename to download.')
tftpFwTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTftpOperation.setStatus('obsolete')
if mibBuilder.loadTexts: tftpFwTftpOperation.setDescription('The tftp operates to perform downloading the firmware image to the unit. This object is used in conjunction with configBootTftpServerIp and configBootImageFileName.')
tftpFwTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setDescription('The tftp operation status represent firmware backup or upgrade status.')
tftpCfgServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setDescription("The TFTP server's IP address is used to upload or download configuration file.")
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('obsolete')
if mibBuilder.loadTexts: tftpConfigFileName.setDescription('The configuration filename is used to store or retrieve config from the tftp server.')
tftpConfigTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigTftpOperation.setStatus('obsolete')
if mibBuilder.loadTexts: tftpConfigTftpOperation.setDescription('The tftp operates to perform either downloading the configuration file to the unit or uploading the current configuration file to the tftp server. This object is used in conjunction with configTftpServerIpAddress and configTftpServerFileName.')
tftpConfigTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setDescription('The tftp operation status represent configuration file backup or restore status.')
tftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setDescription("The TFTP server's IP address is used to upload or download firmware.")
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setDescription('Type of IP interface.')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setDescription('Specifies the interface name when the tftpFwTargetServerIpAddress is linklocal address.')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setDescription('Configure firmware filename to download.')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setDescription('The tftp operates to perform downloading the firmware image to the unit. This object is used in conjunction with configBootTftpServerIp and configBootImageFileName.')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setDescription('The tftp operation status represent firmware backup or upgrade status.')
tftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setDescription("The TFTP server's IP address is used to upload or download configuration file.")
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setDescription('Type of IP interface.')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setDescription('Specifies the interface name when the tftpCfgTargetServerIpAddress is linklocal address.')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setDescription('The configuration filename is used to store or retrieve config from the tftp server.')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setDescription('The tftp operates to perform either downloading the configuration file to the unit or uploading the current configuration file to the tftp server. This object is used in conjunction with configTftpServerIpAddress and configTftpServerFileName.')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 3, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setDescription('The tftp operation status represent configuration file backup or restore status.')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
if mibBuilder.loadTexts: miscReset.setDescription('Physically resets the unit - use with care. A (1) resets the unit, a (2) does nothing.')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: miscStatisticsReset.setDescription('Resets the units statistics. A (1) resets the statistics count, a (2) does nothing.')
securityIpMacPortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10))
impbSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1), )
if mibBuilder.loadTexts: impbSettingTable.setStatus('current')
if mibBuilder.loadTexts: impbSettingTable.setDescription('A table to control IP-MAC-Port Binding Setting features of the device.')
impbSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbPortIndex"))
if mibBuilder.loadTexts: impbSettingEntry.setStatus('current')
if mibBuilder.loadTexts: impbSettingEntry.setDescription('An entry appears in IP-MAC-Port Binding Setting table for each interface in the system.')
impbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortIndex.setStatus('current')
if mibBuilder.loadTexts: impbPortIndex.setDescription("Specifies the port numbers through which the authorized manager can access the switch. By default the authorized manager is allowed to access the switch through all the ports. If a set of ports are configured in the 'PortList', the manager can access the switch only through the configured ports.")
impbPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortState.setStatus('current')
if mibBuilder.loadTexts: impbPortState.setDescription('Disable / enable IP-MAC-Port Binding admin state for the interface.')
impbInsIpPacPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbInsIpPacPortState.setStatus('current')
if mibBuilder.loadTexts: impbInsIpPacPortState.setDescription('Enable / disable IP-MAC-Port Binding also inspect IP packets state for the interface.')
impbDHCPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDHCPPortState.setStatus('current')
if mibBuilder.loadTexts: impbDHCPPortState.setDescription('Disable / enable IP-MAC-Port Binding DHCP snooping state for the interface.')
impbSmartTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2), )
if mibBuilder.loadTexts: impbSmartTable.setStatus('current')
if mibBuilder.loadTexts: impbSmartTable.setDescription('A table to control Smart IP-MAC-Port Binding features of the device.')
impbSmartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbSmartMacAddress"), (0, "DGS-1210-10P_BX", "impbSmartPort"), (0, "DGS-1210-10P_BX", "impbSmartIpAddress"))
if mibBuilder.loadTexts: impbSmartEntry.setStatus('current')
if mibBuilder.loadTexts: impbSmartEntry.setDescription('An entry appears in Smart IP-MAC-Port Binding table for each interface in the system.')
impbSmartMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartMacAddress.setStatus('current')
if mibBuilder.loadTexts: impbSmartMacAddress.setDescription('The MAC address associated of the smart IP-MAC-PORT Binding entry.')
impbSmartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartPort.setStatus('current')
if mibBuilder.loadTexts: impbSmartPort.setDescription('The port number of the smart IP-MAC-PORT Binding entry.')
impbSmartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartIpAddress.setStatus('current')
if mibBuilder.loadTexts: impbSmartIpAddress.setDescription('The IP address associated of the smart IP-MAC-PORT Binding entry.')
impbSmartVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartVlanId.setStatus('current')
if mibBuilder.loadTexts: impbSmartVlanId.setDescription('The VLAN ID of the smart IP-MAC-PORT Binding entry.')
impbSmartBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbSmartBinding.setStatus('current')
if mibBuilder.loadTexts: impbSmartBinding.setDescription('Disable / enable IP-MAC-Port Binding for the interface.')
impbWhiteListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3), )
if mibBuilder.loadTexts: impbWhiteListTable.setStatus('current')
if mibBuilder.loadTexts: impbWhiteListTable.setDescription('A table to control Manual IP-MAC-Port Binding white list features of the device.')
impbWhiteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbWhiteListIpAddress"), (0, "DGS-1210-10P_BX", "impbWhiteListMacAddress"))
if mibBuilder.loadTexts: impbWhiteListEntry.setStatus('current')
if mibBuilder.loadTexts: impbWhiteListEntry.setDescription('An entry appears in Manual IP-MAC-Port Binding white list table for each interface in the system.')
impbWhiteListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListIpAddress.setStatus('current')
if mibBuilder.loadTexts: impbWhiteListIpAddress.setDescription('The IP address associated of the Manual IP-MAC-PORT Binding white list entry.')
impbWhiteListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListMacAddress.setStatus('current')
if mibBuilder.loadTexts: impbWhiteListMacAddress.setDescription('The MAC address associated of the Manual IP-MAC-PORT Binding white list entry.')
impbWhiteListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbWhiteListPort.setStatus('current')
if mibBuilder.loadTexts: impbWhiteListPort.setDescription('The port number of the Manual IP-MAC-PORT Binding white list entry.')
impbWhiteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: impbWhiteListRowStatus.setStatus('current')
if mibBuilder.loadTexts: impbWhiteListRowStatus.setDescription('The status of a row in impbWhiteListTable. By setting this object, new entries can be created in impbWhiteListTable and existing entries can be removed from impbWhiteListTable. It can be used as specified in the SNMP v2 standard.')
impbBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4), )
if mibBuilder.loadTexts: impbBlackListTable.setStatus('current')
if mibBuilder.loadTexts: impbBlackListTable.setDescription('A table to control IP-MAC-Port Binding black list of the device.')
impbBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "impbBlackListMacAddress"), (0, "DGS-1210-10P_BX", "impbBlackListVlanId"), (0, "DGS-1210-10P_BX", "impbBlackListPort"))
if mibBuilder.loadTexts: impbBlackListEntry.setStatus('current')
if mibBuilder.loadTexts: impbBlackListEntry.setDescription('An entry appears in Manual IP-MAC-Port Binding black list table for each interface in the system.')
impbBlackListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListMacAddress.setStatus('current')
if mibBuilder.loadTexts: impbBlackListMacAddress.setDescription('The MAC address associated of the IP-MAC-PORT Binding black list entry.')
impbBlackListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListVlanId.setStatus('current')
if mibBuilder.loadTexts: impbBlackListVlanId.setDescription('The VLAN ID of the IP-MAC-PORT Binding black list entry.')
impbBlackListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListPort.setStatus('current')
if mibBuilder.loadTexts: impbBlackListPort.setDescription('The port number of the IP-MAC-PORT Binding black list entry.')
impbBlackListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListIpAddress.setStatus('current')
if mibBuilder.loadTexts: impbBlackListIpAddress.setDescription('The IP address associated of the IP-MAC-PORT Binding black list entry.')
impbBlackListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("deleted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBlackListStatus.setStatus('current')
if mibBuilder.loadTexts: impbBlackListStatus.setDescription('nothing/delete IP-MAC-Port Binding for the interface.')
impbAutoScanIpAddressFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressFrom.setStatus('current')
if mibBuilder.loadTexts: impbAutoScanIpAddressFrom.setDescription('The begin for IP address associated of the IP-MAC-PORT Binding auto scan entry.')
impbAutoScanIpAddressTo = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressTo.setStatus('current')
if mibBuilder.loadTexts: impbAutoScanIpAddressTo.setDescription('The end for IP address associated of the IP-MAC-PORT Binding auto scan entry.')
impbAutoScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("scan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanStatus.setStatus('current')
if mibBuilder.loadTexts: impbAutoScanStatus.setDescription('Nothing / scan IP-MAC-Port Binding auto scan for the interface.')
stpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1))
rstpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpStatus.setStatus('current')
if mibBuilder.loadTexts: rstpStatus.setDescription("The administrative module status requested by management for the RSTP Module. This enables or disables RSTP in the system. A value of 'enabled' (1) indicates that RSTP must be enabled in the device on all the ports. A value of 'disabled'(2) indicates that RSTP must be disabled in the device on all the ports.")
stpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpVersion.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpVersion.setStatus('current')
if mibBuilder.loadTexts: stpVersion.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stpCompatible(0)' indicates the Spanning Tree Protocol specified in IEEE 802.1D and 'rstp(2)' indicates the Rapid Spanning Tree Protocol specified in IEEE 802.1w. New value may be defined as future versions of the protocol become available.")
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPriority.setStatus('current')
if mibBuilder.loadTexts: stpPriority.setDescription('The bridge priority vector, as defined in 17.6. The first (RootBridgeID) and third (DesignatedBridgeID)components are both equal to the value of the Bridge Identifier (17.18.2). The other components are zero.')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: stpTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
stpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpProtocolSpecification.setStatus('current')
if mibBuilder.loadTexts: stpProtocolSpecification.setDescription("An indication of what version of the Spanning Tree Protocol is being run. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol. IEEE 802.1d implementations will return 'ieee8021d(3)'. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined.")
stpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
stpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopChanges.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpTopChanges.setStatus('current')
if mibBuilder.loadTexts: stpTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
if mibBuilder.loadTexts: stpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
if mibBuilder.loadTexts: stpRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. The rootTimes variable comprises the Bridges operational timer parameter values (Message Age, Max Age, Forward Delay, and Hello Time), derived from the values stored in portTimes (17.19.22) for the Root Port or from BridgeTimes (17.18.4).')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHelloTime.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. The interval between periodic transmissions of Configuration Messages by Designated Ports (Table 17-1).')
stpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHoldTime.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpHoldTime.setStatus('current')
if mibBuilder.loadTexts: stpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. The delay used by STP Bridges (17.4) to transition Root and Designated Ports to Forwarding (Table 17-1).')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpBridgeMaxAge.setDescription('The Max Age component of designatedTimes (17.19.5). This time value, measured in units of hundredths of a second. BridgeTimes comprises four componentsXthe current values of Bridge Forward Delay, Bridge Hello Time, and Bridge Max Age (17.13, Table 17-1), and a Message Age of zero.')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpBridgeHelloTime.setDescription('The Hello Time component of designatedTimes (17.19.5). This time value, measured in units of hundredths of a second. BridgeTimes comprises four componentsXthe current values of Bridge Forward Delay, Bridge Hello Time, and Bridge Max Age (17.13, Table 17-1), and a Message Age of zero.')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpBridgeForwardDelay.setDescription('The Forward Delay component of designatedTimes (17.19.5). This time value, measured in units of hundredths of a second. BridgeTimes comprises four componentsXthe current values of Bridge Forward Delay, Bridge Hello Time, and Bridge Max Age (17.13, Table 17-1), and a Message Age of zero.')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
if mibBuilder.loadTexts: stpPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
if mibBuilder.loadTexts: stpPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPort.setStatus('current')
if mibBuilder.loadTexts: stpPort.setDescription('The port number of the port for which this entry contains Spanning Tree Protocol management information.')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
if mibBuilder.loadTexts: stpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of stpPort.')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortState.setStatus('current')
if mibBuilder.loadTexts: stpPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled (see stpPortEnable), this object will have a value of disabled(1).")
stpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEnable.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortEnable.setStatus('current')
if mibBuilder.loadTexts: stpPortEnable.setDescription('The enabled/disabled status of the port.')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stpAdminPortPathCost.setDescription("The contribution of this port to the path cost of paths towards the spanning tree root which include this port. Writing a value of '0' assigns the automatically calculated default Path Cost value to the ohter object stpPortPathCost. If the default Path Cost is being used,this object returns '0' when read.")
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stpPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port.')
stpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRoot.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: stpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: stpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: stpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
stpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: stpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: stpPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing TRUE(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns FALSE(2) when read.')
stpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperEdgePort.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: stpPortOperEdgePort.setDescription('The operational value of the Edge Port parameter. The object is initialized to the value of stpPortAdminEdgePort and is set FALSE on reception of a BPDU.')
stpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
stpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperPointToPoint.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: stpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: stpPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. It indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the stpPortAdminPointToPoint object.')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
if mibBuilder.loadTexts: stpPortEdge.setDescription(' This parameter when TRUE(1) indicates that detection of a port as Edge Port happens automatically and FALSE(2) indicates that this feature is disabled.')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
if mibBuilder.loadTexts: stpPortRestrictedRole.setDescription("A Boolean value set by management. If TRUE causes the Port not to be selected as Root Port for the CIST or any MSTI, even it has the best spanning tree priority vector. Such a Port will be selected as an Alternate Port after the Root Port has been selected. This parameter should be FALSE by default. If set it can cause lack of spanning tree connectivity. It is set by a network administrator to prevent bridges external to a core region of the network influencing the spanning tree active topology, possibly because those bridges are not under the full control of the administrator. This administrator configuration is also known as 'Root Guard'.")
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 6, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
if mibBuilder.loadTexts: stpPortRestrictedTCN.setDescription('A Boolean value set by management. If TRUE causes the Port not to propagate received topology change notifications and topology changes to other Ports. This parameter should be FALSE by default. If set it can cause temporary loss of connectivity after changes in a spanning trees active topology as a result of persistent incorrectly learnt station location information. It is set by a network administrator to prevent bridges external to a core region of the network causing address flushing in that region, possibly because those bridges are not under the full control of the administrator or MAC_Operational for the attached LANs transitions frequently.')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
if mibBuilder.loadTexts: staticMcastTable.setDescription('A list of the Static MACs')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "staticMcastVlanID"), (0, "DGS-1210-10P_BX", "staticMcastMac"), (0, "DGS-1210-10P_BX", "staticMcastEgressPorts"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
if mibBuilder.loadTexts: staticMcastEntry.setDescription('A Static MAC entry containing the mac and forwarding port.')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
if mibBuilder.loadTexts: staticMcastVlanID.setDescription('The VLAN ID of the static MAC entry.')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
if mibBuilder.loadTexts: staticMcastMac.setDescription('The MAC address associated of the static MAC entry.')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setReference('IEEE 802.1Q/D11 Section 12.7.7.3, 11.2.3.2.3')
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
if mibBuilder.loadTexts: staticMcastEgressPorts.setDescription('The set of ports to which frames received from a specific port and destined for a specific Multicast or Broadcast MAC address must be forwarded, regardless of any dynamic information e.g. from GMRP. A port may not be added in this set if it is already a member of the set of ports in dot1qStaticMulticastForbiddenEgressPorts. The default value of this object is a string of ones of appropriate length.')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 35, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
if mibBuilder.loadTexts: staticMcastStatus.setDescription('The status of an entry in the Static Mcast Table. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available.')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setDescription('Enable/Disable management VLAN mechanism.')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanManagementid.setDescription('The management VLAN ID, which will allow to forward packets of that VLAN to CPU.')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setDescription('Enable/Disable IEEE 802.1Q Asymmetric VLAN')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanTable.setDescription('A table containing static configuration information for each VLAN configured into the device by (local or network) management. All entries are permanent and will be restored after the device is reset.')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanEntry.setDescription('Information for a VLAN configured into the device by (local or network) management.')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanName.setDescription('An administratively assigned string, which may be used to identify the VLAN.')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setReference('IEEE 802.1Q/D11 Section 12.7.7.3, 11.2.3.2.3')
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setDescription('The set of ports which are permanently assigned to the egress list for this VLAN by management. Changes to a bit in this object affect the per-port per-VLAN Registrar control for Registration Fixed on each port. A port may not be added in this set if it is already a member of the set of ports in dot1qVlanForbiddenEgressPorts. The default value of this object is a string of zeros of appropriate length, indicating not fixed.')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setDescription('The set of ports which should transmit egress packets for this VLAN as untagged. The default value of this object for the default VLAN (dot1qVlanIndex = 1) is a string of appropriate length including all ports. There is no specified default for other VLANs. If a device agent cannot support the set of ports being set then it will reject the set operation with an error. An example might be if a manager attempts to set more than one VLAN to be untagged on egress where the device does not support this IEEE 802.1Q option.')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanRowStatus.setDescription('The status of a row in dot1qVlanTable. By setting this object, new entries can be created in dot1qVlanTable and existing entries can be removed from dot1qVlanTable. It can be used as specified in the SNMP v2 standard.')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 7), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanPortTable.setDescription('A table containing per port control and status information for VLAN configuration in the device.')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 7, 1), )
dot1dBasePortEntry.registerAugmentions(("DGS-1210-10P_BX", "dot1qVlanPortEntry"))
dot1qVlanPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanPortEntry.setDescription('Information controlling VLAN configuration for a port on the device.')
dot1qVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 7, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPvid.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: dot1qVlanPvid.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanPvid.setDescription('The PVID, the VLAN ID assigned to untagged frames or Priority-Tagged frames received on this port.')
dot1qVlanUngisterMCFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8), )
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setDescription('This table contains the list of ports through which a router, in a particular VLAN is reachable.')
dot1qVlanUngisterMCFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1qVlanUngisterMCFilterVlanId"))
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setDescription('A list of multicast filter mode information for each VLAN ID.')
dot1qVlanUngisterMCFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setDescription('Per Vlan to configure multicast filtering function.')
dot1qVlanUngisterMCFiltermode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("filter", 1), ("forward", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setStatus('current')
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setDescription('Filter unknown multicast frames or normal operation(i.e. forwarding)')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    description = 'Defines how a Port Channel does channeling. lacp(1) - place the port into passive negotiation state, in which the port waits for its peer to initiate negotiation. static(2) - force the port to enable channeling. disable(3) - channeling is disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    description = 'The Actor or Partner Key value (0..65535).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
if mibBuilder.loadTexts: laStatus.setDescription('Sets the Link Aggregation Module administrative status as enabled or disabled.')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
if mibBuilder.loadTexts: laPortChannelTable.setDescription('A Port-channel is created through ifMain table. After the creation of the port-channel, corresponding logical interface will be created in the ifMain table. This Port-channel table is indexed through Key values and allows to configure link selection policy and the Mac address for the port-channel. All other objects in this table displays the details of the port-channel.')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
if mibBuilder.loadTexts: laPortChannelEntry.setDescription('There is one entry in this table for each created port-channel port.')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: laPortChannelIfIndex.setDescription("The index of the port-channel(Aggregator's interface index). ")
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
if mibBuilder.loadTexts: laPortChannelMemberList.setDescription('Member Port list of the port channel. Add the ports as a aggregation member associated of a port-channel.')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
if mibBuilder.loadTexts: laPortChannelMode.setDescription('Current Operating Channel Mode of the port channel Lacp(1) - forcing the port to negotiate with the partner. manual(2) - force the port to enable channeling (Manual). disable(3) - channeling is disabled.')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
if mibBuilder.loadTexts: laPortControlTable.setDescription('A table that contains Link Aggregation Control configuration information about every Aggregation Port associated with this device. A row appears in this table for each physical port.')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
if mibBuilder.loadTexts: laPortControlEntry.setDescription('A list of Link Aggregation Control configuration parameters for each Aggregation Port on this device.')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
if mibBuilder.loadTexts: laPortControlIndex.setDescription('The index of the port.')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
if mibBuilder.loadTexts: laPortActorActivity.setDescription('This object indicates LACP_Activity to this Aggregation Port. LACP can be configured in one of two modes: active or passive. In active mode it will always send frames along the configured links. If the actor and partner are both in passive mode, they do not exchange LACP packets.')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
if mibBuilder.loadTexts: laPortActorTimeout.setDescription('This object indicates LACP_Timeout to this Aggregation Port. short(1) - LACP Timeout 3 seconds. long (2) - LACP Timeout 90 seconds.')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
if mibBuilder.loadTexts: staticDisableAutoLearn.setDescription('Set on to disable Auto Learning Excluding Uplink Port and set off to enable Auto Learning.')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
if mibBuilder.loadTexts: staticAutoLearningList.setDescription("The set of the device's member ports that belong to the Static MAC auto learning enable/disable. For example, when Disable Auto Learning is enable, the octet value set up as '# 0x0F 0xFF 0xFF 0xFF' means from port 1 to port 4 are not in auto learning state, the other ports are in auto learning state. It can be set up when Disable Auto Learning is enable.")
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
if mibBuilder.loadTexts: staticTable.setDescription('A list of the Static MACs')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "staticVlanID"), (0, "DGS-1210-10P_BX", "staticMac"), (0, "DGS-1210-10P_BX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
if mibBuilder.loadTexts: staticEntry.setDescription('A Static MAC entry containing the mac and forwarding port.')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
if mibBuilder.loadTexts: staticVlanID.setDescription('The VLAN ID of the static MAC entry.')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
if mibBuilder.loadTexts: staticMac.setDescription('The MAC address associated of the static MAC entry.')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
if mibBuilder.loadTexts: staticPort.setDescription('The forwarding port of the static MAC entry.')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
if mibBuilder.loadTexts: staticStatus.setDescription('The status of an entry in the Static MAC Table. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available. The trunk member port can not set up static MAC.')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
if mibBuilder.loadTexts: igsStatus.setDescription("Enables or disables IGMP snooping in the system. When set to 'enabled', the IGS module starts protocol operations. When set to 'disabled', the IGS module stops performing protocol operations.")
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setDescription("This is the interval (in seconds) after which a learnt router port entry will be purged. For each router port learnt, this timer runs for 'RouterPortPurgeInterval' seconds.When the timer expires, the learnt router port entry is purged. However if control messages are received from the router before the timer expiry, then the timer is restarted.")
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setDescription("This is the interval (in seconds) after which a learnt port entry will be purged. For each port on which report has been received this timer runs for 'PortPurgeInterval' seconds. This timer will be restarted whenever a report message is received from a host on the specific port. If the timer expires, then , the learnt port entry will be purged from the multicast group.")
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
if mibBuilder.loadTexts: igsRobustnessValue.setDescription("When the switch receives leave message on a port, it sends group specific query to check if there are any other interested receivers for the group. This attribute defines the maximum number of queries sent by the switch before deleting the port from the group membership information in the forwarding database. If the maximum retry count exceeds 'igsRobustnessValue', then the port will be deleted from the multicast group membership information in the forwarding database and received leave message will be forwarded onto the router ports if there are no interested receivers for the group.")
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
if mibBuilder.loadTexts: igsGrpQueryInterval.setDescription("The value of this attribute defines the time period with which the switch will send group specific queries on a port to check if there is any intersted receivers. The switch will send 'igsRobustnessValue' queries before removing the port from the group membership information in the forwarding database.")
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
if mibBuilder.loadTexts: igsQueryInterval.setDescription('This is the interval (in seconds) for which the switch sends general queries when it is configured as a querier for VLANs.')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setDescription('The maximum query response time advertised in IGMPv2 general queries on this interface.')
igsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportToAllPort.setStatus('current')
if mibBuilder.loadTexts: igsReportToAllPort.setDescription("Enables or disables IGMP snooping in the system. When set to 'enabled', the IGS module forwards packets to report to all port. When set to 'disabled', the IGS module forwards packets to router port only.")
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
if mibBuilder.loadTexts: igsVlanRouterTable.setDescription('This table contains the list of ports through which a router, in a particular VLAN is reachable.')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
if mibBuilder.loadTexts: igsVlanRouterEntry.setDescription('An igs vlan router entry contain the igs vlan router port list.')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
if mibBuilder.loadTexts: igsVlanRouterVlanId.setDescription('It is the VLAN ID of the igs vlan router entry.')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
if mibBuilder.loadTexts: igsVlanRouterPortList.setDescription('List of ports on which routers are present. These router ports are learnt through control messages received from routers, and can also be configured statically.')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
if mibBuilder.loadTexts: igsVlanFilterTable.setDescription('This table contains configuration of snooping on specific Vlans. This Table is valid only when VLAN is enabled in the system.')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
if mibBuilder.loadTexts: igsVlanFilterEntry.setDescription('Contains snooping status , version and fast leave configuration for a specific VLAN.')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
if mibBuilder.loadTexts: igsVlanFilterVlanId.setDescription('Index of IgsVlanFilterEntry. This object indicates the VLAN ID for which the snooping configurations in IgsVlanFilterEntry is to be done.')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: igsVlanSnoopStatus.setDescription('This object allows you to enable/disable IGS function on a specific VLAN.')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
if mibBuilder.loadTexts: igsVlanQuerier.setDescription('Indicates whether the switch is configured as a querier in the VLAN')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
if mibBuilder.loadTexts: igsVlanCfgQuerier.setDescription("The snooping switch can be configured as a querier via this object to send out IGMP general queries when IGMP routers are not present in the VLAN. When set to 'enabled', the switch will generate general queries.")
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
if mibBuilder.loadTexts: igsVlanQueryInterval.setDescription('This is the interval (in seconds) for which the switch sends general queries when it is configured as a querier for the VLAN. A switch should be configured as a querier for a VLAN only when there is no queriers in the network.')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
if mibBuilder.loadTexts: igsVlanRtrPortList.setDescription('List of ports which are configured statically as router ports')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
if mibBuilder.loadTexts: igsVlanFastLeave.setDescription("Enables or disables fast leave for the VLAN. When it is 'disabled',on reception of a leave message, the switch checks if they are any interested receivers for the group by sending a group specific query before removing the port from the forwarding table. If set to 'enabled', the switch does not send a group specific query and immediately removes the port from the forwarding table.")
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setDescription('This table contains MAC based multicast forwarding information.')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "igsVlanMulticastGroupVlanId"), (0, "DGS-1210-10P_BX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setDescription('This table contains VLAN ID, multicast group MAC address and the list of ports onto which the multicast data packets for group should be forwarded.')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setDescription('VLAN ID pertaining to the Multicast forwarding entry')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setDescription('Multicast group IP address. This object indicates that a multicast group address was learned in the switch and be represented as IP address format.')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setDescription('Multicast group MAC address. This object indicates that a multicast group address was learned in the switch and be represented as MAC address format.')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setDescription('List of ports onto which the multicast data packets destined for this group will be forwarded.')
dot1xAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2))
dot1xAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthStatus.setDescription('Enable/Disable Static 802.1x.')
dot1xAuthQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setReference('9.4.1, quietPeriod.')
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
dot1xAuthTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setReference('9.4.1, txPeriod.')
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthTxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine.')
dot1xAuthSuppTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setReference('9.4.1, suppTimeout.')
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine.')
dot1xAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setReference('9.4.1, serverTimeout.')
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthServerTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine.')
dot1xAuthMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthMaxReq.setReference('9.4.1, maxReq.')
if mibBuilder.loadTexts: dot1xAuthMaxReq.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthMaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine.')
dot1xAuthReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setReference('9.4.1, reAuthPerio.')
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
dot1xAuthReAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setReference('9.4.1, reAuthEnable.')
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthReAuthEnabled.setDescription('The enable/disable control used by the Reauthentication Timer state machine (8.5.5.1).')
dot1xAuthConfigPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9), )
if mibBuilder.loadTexts: dot1xAuthConfigPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigPortTable.setDescription('A table that contains the configuration objects for the Authenticator PAE associated with each port. An entry appears in this table for each port that may authenticate access to itself.')
dot1xAuthConfigPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1xAuthConfigPortNumber"))
if mibBuilder.loadTexts: dot1xAuthConfigPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigPortEntry.setDescription('The configuration information for an Authenticator Port.')
dot1xAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortNumber.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigPortNumber.setDescription('A unique value for each port that correlates to port index. Its value ranges between 1 and the value of port number.')
dot1xAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigPortControl.setReference('9.4.1, AuthControlledPortControl.')
if mibBuilder.loadTexts: dot1xAuthConfigPortControl.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigPortControl.setDescription('The current value of the controlled Port control parameter for the Port.')
dot1xAuthConfigPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortStatus.setReference('9.4.1, AuthControlledPortStatu.')
if mibBuilder.loadTexts: dot1xAuthConfigPortStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigPortStatus.setDescription('The current value of the controlled Port status parameter for the Port.')
dot1xAuthConfigPortSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionTime.setReference('9.4.4, Session Tim.')
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionTime.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionTime.setDescription('The duration of the session in seconds.')
dot1xAuthConfigPortSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 9, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionUserName.setReference('9.4.4, Session User Name.')
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionUserName.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigPortSessionUserName.setDescription('The User-Name representing the identity of the Supplicant PAE.')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setDescription('Enable/Disable 802.1x packet forward while 802.1x module is disabled.')
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1))
ipv4radiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4radiusServerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4radiusServerAddress.setDescription('The IP address of the RADIUS server referred to in this table entry.')
ipv4radiusServerSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4radiusServerSharedSecret.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4radiusServerSharedSecret.setDescription('The secret string which is shared between Server and Client')
radiusServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3))
swRadiusServerIPType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusServerIPType.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerIPType.setDescription('The IP address of the RADIUS server IP type referred to in this table entry.')
swRadiusServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerAddress.setDescription('The IP address of the RADIUS server referred to in this table entry.')
swRadiusServerInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swRadiusServerInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerInterfaceName.setDescription('Specifies the interface name when the swAuthRadiusServerAddress is linklocal address.')
swRadiusServerSharedSecret = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 11, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusServerSharedSecret.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerSharedSecret.setDescription('The secret string which is shared between Server and Client, the maximum length are 32 chars')
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2), ("tos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
if mibBuilder.loadTexts: qosMode.setDescription('Settings of Qos mode: IEEE 802.1p QoS or DSCP QoS or TOS Qos. IEEE 802.1p : It specifies a priority(0~7) value to four queues in WS3 : Low(1,2), Medium(0,3), High(4,5) and Highest(6,7), inclusive that can be used by Quality of Service (QoS) disciplines to differentiate traffic. DSCP : Differentiated services enhancements to the Internet protocol are intended to enable scalable service discrimination in the Internet without the need for per-flow state and signaling at every hop. ')
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
if mibBuilder.loadTexts: queuingMechanism.setDescription('Queuing mechanism. strictPriority(1) : Strict Priority wrr(2) : Weighted Round Robin Strict-priority scheduling is implemented with a special strict-priority scheduler node that is stacked directly above the port. Queues stacked on top of the strict-priority scheduler node always get bandwidth before other queues. Weighted round-robin scheduling is designed to better handle queues with different processing capacities. Each queue has a weight : Low is 1, Medium is 2, High is 4 and Highest is 8 for WS4 spec. Queues with higher weights get bandwidth before than other queues with less weights. ')
qosQ1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3))
dot1pPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1), )
if mibBuilder.loadTexts: dot1pPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1pPortTable.setDescription('A list of 802.1p port default priority Entries.')
dot1pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dot1pPortIndex"))
if mibBuilder.loadTexts: dot1pPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1pPortEntry.setDescription('A list of 802.1p port default priority priorities.')
dot1pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1pPortIndex.setDescription('A port identifier that is in the range of 1 to ifNumber.')
dot1pPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("highest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1pPortPriority.setStatus('current')
if mibBuilder.loadTexts: dot1pPortPriority.setDescription("For ingress untagged packets, the per port 'Default Priority' setting will be applied to packets of each port to provide port-based traffic prioritization. For ingress tagged packets, D-Link Smart Switches will refer to their 802.1p information and prioritize them with 4 different priority queues. ")
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4))
qosDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDiffServEnable.setStatus('current')
if mibBuilder.loadTexts: qosDiffServEnable.setDescription('Display the DSCP(Differentiated services) function Enabled or Disabled. Notice : DiffServ Type is 2~7 bits in the TOS field. ex: If the DiffServ Type = 000011(3), the value in TOS field is 00001100(12) ')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType00.setDescription('DiffServ Type 0 : IP ToS value = 0')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType01.setDescription('DiffServ Type 01 : IP ToS value = 4')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType02.setDescription('DiffServ Type 02 : IP ToS value = 8')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType03.setDescription('DiffServ Type 03 : IP ToS value = 12')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType04.setDescription('DiffServ Type 04 : IP ToS value = 16')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType05.setDescription('DiffServ Type 05 : IP ToS value = 20')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType06.setDescription('DiffServ Type 06 : IP ToS value = 24')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType07.setDescription('DiffServ Type 07 : IP ToS value = 28')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType08.setDescription('DiffServ Type 08 : IP ToS value = 32')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType09.setDescription('DiffServ Type 09 : IP ToS value = 36')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType10.setDescription('DiffServ Type 10 : IP ToS value = 40')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType11.setDescription('DiffServ Type 11 : IP ToS value = 44')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType12.setDescription('DiffServ Type 12 : IP ToS value = 48')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType13.setDescription('DiffServ Type 13 : IP ToS value = 52')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType14.setDescription('DiffServ Type 14 : IP ToS value = 56')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType15.setDescription('DiffServ Type 15 : IP ToS value = 60')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType16.setDescription('DiffServ Type 16 : IP ToS value = 64')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType17.setDescription('DiffServ Type 17 : IP ToS value = 68')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType18.setDescription('DiffServ Type 18 : IP ToS value = 72')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType19.setDescription('DiffServ Type 19 : IP ToS value = 76')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType20.setDescription('DiffServ Type 20 : IP ToS value = 80')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType21.setDescription('DiffServ Type 21 : IP ToS value = 84')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType22.setDescription('DiffServ Type 22 : IP ToS value = 88')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType23.setDescription('DiffServ Type 23 : IP ToS value = 92')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType24.setDescription('DiffServ Type 24 : IP ToS value = 96')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType25.setDescription('DiffServ Type 25 : IP ToS value = 100')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType26.setDescription('DiffServ Type 26 : IP ToS value = 104')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType27.setDescription('DiffServ Type 27 : IP ToS value = 108')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType28.setDescription('DiffServ Type 28 : IP ToS value = 112')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType29.setDescription('DiffServ Type 29 : IP ToS value = 116')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType30.setDescription('DiffServ Type 30 : IP ToS value = 120')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType31.setDescription('DiffServ Type 31 : IP ToS value = 124')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType32.setDescription('DiffServ Type 32 : IP ToS value = 128')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType33.setDescription('DiffServ Type 33 : IP ToS value = 132')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType34.setDescription('DiffServ Type 34 : IP ToS value = 136')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType35.setDescription('DiffServ Type 35 : IP ToS value = 140')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType36.setDescription('DiffServ Type 36 : IP ToS value = 144')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType37.setDescription('DiffServ Type 37 : IP ToS value = 148')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType38.setDescription('DiffServ Type 38 : IP ToS value = 152')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType39.setDescription('DiffServ Type 39 : IP ToS value = 156')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType40.setDescription('DiffServ Type 40 : IP ToS value = 160')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType41.setDescription('DiffServ Type 41 : IP ToS value = 164')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType42.setDescription('DiffServ Type 42 : IP ToS value = 168')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType43.setDescription('DiffServ Type 43 : IP ToS value = 172')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType44.setDescription('DiffServ Type 44 : IP ToS value = 176')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType45.setDescription('DiffServ Type 45 : IP ToS value = 180')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType46.setDescription('DiffServ Type 46 : IP ToS value = 184')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType47.setDescription('DiffServ Type 47 : IP ToS value = 188')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType48.setDescription('DiffServ Type 48 : IP ToS value = 192')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType49.setDescription('DiffServ Type 49 : IP ToS value = 196')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType50.setDescription('DiffServ Type 50 : IP ToS value = 200')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType51.setDescription('DiffServ Type 51 : IP ToS value = 204')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType52.setDescription('DiffServ Type 52 : IP ToS value = 208')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType53.setDescription('DiffServ Type 53 : IP ToS value = 212')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType54.setDescription('DiffServ Type 54 : IP ToS value = 216')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType55.setDescription('DiffServ Type 55 : IP ToS value = 220')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType56.setDescription('DiffServ Type 56 : IP ToS value = 224')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType57.setDescription('DiffServ Type 57 : IP ToS value = 228')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType58.setDescription('DiffServ Type 58 : IP ToS value = 232')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType59.setDescription('DiffServ Type 59 : IP ToS value = 236')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType60.setDescription('DiffServ Type 60 : IP ToS value = 240')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType61.setDescription('DiffServ Type 61 : IP ToS value = 244')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType62.setDescription('DiffServ Type 62 : IP ToS value = 248')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 4, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
if mibBuilder.loadTexts: qosDiffServType63.setDescription('DiffServ Type 63 : IP ToS value = 252')
qosTOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5))
qosTOSEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosTOSEnable.setStatus('current')
if mibBuilder.loadTexts: qosTOSEnable.setDescription('Display the TOS(Type of services) function Enabled or Disabled.')
qosTOSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2))
qosTOSType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType00.setStatus('current')
if mibBuilder.loadTexts: qosTOSType00.setDescription('TOS 0')
qosTOSType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType01.setStatus('current')
if mibBuilder.loadTexts: qosTOSType01.setDescription('TOS 01')
qosTOSType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType02.setStatus('current')
if mibBuilder.loadTexts: qosTOSType02.setDescription('TOS 02')
qosTOSType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType03.setStatus('current')
if mibBuilder.loadTexts: qosTOSType03.setDescription('TOS 03')
qosTOSType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType04.setStatus('current')
if mibBuilder.loadTexts: qosTOSType04.setDescription('TOS 04')
qosTOSType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType05.setStatus('current')
if mibBuilder.loadTexts: qosTOSType05.setDescription('TOS 05')
qosTOSType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType06.setStatus('current')
if mibBuilder.loadTexts: qosTOSType06.setDescription('TOS 06')
qosTOSType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 12, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType07.setStatus('current')
if mibBuilder.loadTexts: qosTOSType07.setDescription('TOS 07')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
if mibBuilder.loadTexts: bandwidthCtrlTable.setDescription('A table to control the rate limiting parameters either for the entire switch or for each interface in the switch.')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: bandwidthCtrlEntry.setDescription('An entry appears in this table for each physical interface in the switch.')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
if mibBuilder.loadTexts: bandwidthCtrlIndex.setDescription('The interface index for which the configuration in this entry applies.')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setDescription("Configures interface Rate Limit (Packet that can be transferred on a port at a particular second). This object's value will take effect on the interface speed. Based on the operating speed of the port, the rate limit will be applied. This value can also be affected by the metering. A value of zero(0) disable rate limiting i.e. sets the port to full speed. The value can be set between 64~102400(Kbits per second) in FE port, 64~1024000 (Kbits per second) in GE port.")
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setDescription('Allows to configure the limiting value for the maximum number of receive packets that can be transmitted per second over this interface. Setting this object to the value zero disables rate limiting for receive packets on this interface. The value that can be set for this object is limited by the underlying hardware. The value can be set between 64~102400(Kbits per second) in FE port, 64~1024000(Kbits per second) in GE port.')
broadcastStormCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3))
broadcastStormCtrlGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setStatus('current')
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setDescription('This object indicates storm control function is enabled or disabled for device. When you enable broadcast storm control function, D-Link Smart Switches will allowed you to limit the number of broadcast packets per second going through device.')
broadcastStormCtrlLimitType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastonly", 1), ("multicastAndbroadcast", 2), ("dlfMulticastAndbroadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setStatus('current')
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setDescription('This object indicates storm control function is control broadcast packet or multicast packet or dlf packet.')
broadcastStormCtrlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 13, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setStatus('current')
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setDescription('Allows to configure the limiting value for the maximum number of Kbits/sec that can be transmitted per second over this interface. Setting this object to the value zero disables rate limiting on this interface. The value that can be set for this object is limited by the underlying hardware. The limit value must be between 64~102400(Kbits per second) in FE port, 64~1024000(Kbits per second) in GE port. (Notice : if the limit value is 0, it means unlimited.)')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
if mibBuilder.loadTexts: trustedHostStatus.setDescription('This object indicates trusted host function is enabled or disabled. When trusted host function is enabled, D-Link Smart Switches will only allow hosts which you trust to access and control the switch. Your local host IP Addresses must be one of the IP Addresses to avoid disconnection.')
ipv4trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2), )
if mibBuilder.loadTexts: ipv4trustedHostTable.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4trustedHostTable.setDescription('A table to configure trusted host in the system.')
ipv4trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4trustedHostIpAddr"), (0, "DGS-1210-10P_BX", "ipv4trustedHostIpMask"))
if mibBuilder.loadTexts: ipv4trustedHostEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4trustedHostEntry.setDescription('Each entry in this table represents rules for particular trusted host.')
ipv4trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4trustedHostIpAddr.setDescription('The IP address of host you allow to access to D-Link Smart Switch. Your local host IP Addresses must be one of the IP Addresses to avoid disconnection.')
ipv4trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4trustedHostIpMask.setDescription('Used to mask with IP address, it allow you set a subnet as a trusted host entry.')
ipv4trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4trustedHostRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4trustedHostRowStatus.setDescription('The status of an entry in the Trusted Host Table. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available.')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
if mibBuilder.loadTexts: trustedHostTable.setDescription('A table to configure trusted host for in the system.')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "trustedHostIPType"), (0, "DGS-1210-10P_BX", "trustedHostIpAddr"), (0, "DGS-1210-10P_BX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
if mibBuilder.loadTexts: trustedHostEntry.setDescription('Each entry in this table represents rules for particular trusted host.')
trustedHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIPType.setStatus('current')
if mibBuilder.loadTexts: trustedHostIPType.setDescription('Type of IP interface.')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: trustedHostIpAddr.setDescription('The IP address of host you allow to access to D-Link Smart Switch. Your local host IPv4/6 Addresses must be one of the IP Addresses to avoid disconnection.')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
if mibBuilder.loadTexts: trustedHostIpMask.setDescription('Used to mask with IPv4/6 address, it allow you set a subnet as a trusted host entry.')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: trustedHostRowStatus.setDescription('The status of an entry in the Trusted Host Table. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available. IPv4 Trust Host created example: 1.4.IPv4 address.4.mask IPv6 Trust Host created example: 2.16.IPv6 address.1.prefix')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
if mibBuilder.loadTexts: aRPSpoofPreventTable.setDescription('A table to control ARP Spoofing prevention for the entire switch or for each interface in the switch.')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setDescription('An entry appears in this table for each interface in the system.')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setDescription("Specifies either the Network or Host address from which the switch can be managed. An address 0.0.0.0 indicates 'Any Manager'.")
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setDescription('Ethernet Mac Address.')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setDescription("Specifies the port numbers through which the authorized manager can access the switch. By default the authorized manager is allowed to access the switch through all the ports. If a set of ports are configured in the 'PortList', the manager can access the switch only through the configured ports.")
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setDescription('This object indicates the status of this entry.')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
if mibBuilder.loadTexts: sslSecurityHttpStatus.setDescription('This object is for enabling or disabling secure HTTP in the system.')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
if mibBuilder.loadTexts: sslCipherSuiteList.setDescription('This object is to configure the cipher-suites list.')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
if mibBuilder.loadTexts: portSecTable.setDescription('A table to control port security features of the device.')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
if mibBuilder.loadTexts: portSecEntry.setDescription('An entry appears in port security table for each interface in the system.')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
if mibBuilder.loadTexts: portSecIndex.setDescription('The interface index for which the configuration in this entry applies.')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
if mibBuilder.loadTexts: portSecState.setDescription("Enable / disable port security admin state for the interface. A given ports' dynamic MAC address learning will be stopped such that the current source MAC addresses entered into the MAC address forwarding table can not be changed once the port security admin state is enabled.")
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
if mibBuilder.loadTexts: portSecMLA.setDescription("Configures interface port security maximum learning address numbers. When given ports' admin state is enabled, allows forwarding table learning address number. The number can be set 0 to 64. Note: Set value 0 means cannot learn MAC address.")
cableDiagTriggerIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagTriggerIndex.setStatus('current')
if mibBuilder.loadTexts: cableDiagTriggerIndex.setDescription('Trigger an interface index to do cable diagnostic.')
cableDiagPair1TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1TestResult.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair1TestResult.setDescription('Cable diagnostics pair 1 test result.')
cableDiagPair1FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1FaultDistance.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair1FaultDistance.setDescription('Cable Diagnostics pair 1 fault distance.')
cableDiagPair2TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2TestResult.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair2TestResult.setDescription('Cable diagnostics pair 2 test result.')
cableDiagPair2FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2FaultDistance.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair2FaultDistance.setDescription('Cable diagnostics pair 2 fault distance.')
cableDiagPair3TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3TestResult.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair3TestResult.setDescription('Cable diagnostics pair 3 test result.')
cableDiagPair3FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3FaultDistance.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair3FaultDistance.setDescription('Cable diagnostics pair 3 fault distance.')
cableDiagPair4TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4TestResult.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair4TestResult.setDescription('Cable diagnostics pair 4 test result.')
cableDiagPair4FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4FaultDistance.setStatus('current')
if mibBuilder.loadTexts: cableDiagPair4FaultDistance.setDescription('Cable diagnostics pair 4 fault distance.')
cableDiagLengthinRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 37, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("less50", 1), ("from50to80", 2), ("from80to100", 3), ("from100to140", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagLengthinRange.setStatus('current')
if mibBuilder.loadTexts: cableDiagLengthinRange.setDescription('Cable diagnostics length when link up in speed 1G. (Display in range)')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1))
ipv4aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1), )
if mibBuilder.loadTexts: ipv4aclProfileTable.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileTable.setDescription(' A table to ACL profile . ')
ipv4aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4aclProfileNo"))
if mibBuilder.loadTexts: ipv4aclProfileEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileEntry.setDescription(' Each entry in this table is a ACL profile. Index to the table is ACL profile ID. ')
ipv4aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileNo.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileNo.setDescription('The ACL Profile ID. The ID 1 to 50 is user-defined ACL, and the ID more than 50 is reserved for system-defined ACL. The user only allow to create user-defined ACL ID. And system-defined ACL is read only.')
ipv4aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 12))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("impb", 3), ("arpSP_permit", 4), ("arpSP_deny", 5), ("voiceVlan", 6), ("surveillanceVlan", 7), ("aclQoS", 8), ("dhcpServerScreen", 10), ("zone_defense", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileType.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileType.setDescription('The ACL Profile type, possible value are l2 (1) - for MAC-based rule. l3v4 (2) - for IPv4-based rule. impb (3) - for IMPB entry. arpSP_permit(4) - for ARP Spoofing prevention entry. arpSP_deny(5) - for ARP Spoofing prevention entry. voiceVlan(6) - for Voice VLAN OUI entry. surveillanceVlan(7) - for Surveillance VLAN OUI entry. aclQoS(8) - for ACL QoS entry. dhcpServerScreen(10) - for DHCP server screening entry. Note that only l2, l3v4 and l3v6 could be set by user, other is reserved for system to show information. ')
ipv4aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileRuleCount.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileRuleCount.setDescription('The number of rules in this profile.')
ipv4aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileMask.setDescription('Indicate which field want to care in the packet. Turn on the following bits to select the following items Type Item BIT ------------------------------------------ L2 DST_MAC 0 (LSB) L2 SRC_MAC 1 L2 VID 2 L2 8021P_PRIORITY 3 L2 ETHER_TYPE 4 L3 DSCP 5 L3 ICMP_TYPE 6 L3 ICMP_CODE 7 L3 IGMP_TYPE 8 L3 DST_IP 9 L3 SRC_IP 10 L3 DST_PORT 11 L3 SRC_PORT 12 L3 TCPFLAG 13 ARP-SP ARP_SENDER_MAC 14 ARP-SP ARP_SENDER_IP 15 (MSB) ------------------------------------------- The value is in Hex format. ')
ipv4aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstMacAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileDstMacAddrMask.setDescription('The ACL Profile destination MAC address mask. If DST_MAC is turn on in aclProfileMask, it will work with its member rule field,aclL2RuleDstMacAddr, to caculate a range of MAC address which is really care. ')
ipv4aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcMacAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileSrcMacAddrMask.setDescription('The ACL Profile source MAC address mask. If SRC_MAC is turn on in aclProfileMask, it will work with its member rule field,aclL2RuleSrcMacAddr, to caculate a range of MAC address which is really care. ')
ipv4aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileIPProtocol.setDescription('Indicate which IP Protocol will be care in this profile. Only profile type is l3 can set the IP protocol. For others, this field will be none. ')
ipv4aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstIpAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileDstIpAddrMask.setDescription("The ACL Profile destination IP address mask. If DST_IP is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleDstIpAddr, to caculate a range of IP address which is really care. The value is in HEX format, for example: '255.255.255.0' is presented to 'FFFFFF00' ")
ipv4aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcIpAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileSrcIpAddrMask.setDescription("The ACL Profile source IP address mask. If SRC_IP is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleSrcIpAddr, to caculate a range of IP address which is really care. The value is in HEX format, for example: '255.255.255.0' is presented to 'FFFFFF00' ")
ipv4aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 10), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstPortMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileDstPortMask.setDescription('The ACL Profile UDP/TCP destination port mask. If DST_PORT is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleTcpUdpDstPort, to caculate a range of destination port which is really care. The value is in HEX format. ')
ipv4aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcPortMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileSrcPortMask.setDescription('The ACL Profile UDP/TCP source port mask. If SRC_PORT is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleTcpUdpSrcPort, to caculate a range of source port which is really care. The value is in HEX format. ')
ipv4aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 12), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderMacAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileArpSenderMacAddrMask.setDescription("The ACL Profile Sender MAC mask. This is only for ARP Spoofing Prevention which is System-defined ACL, and it's not allow to modify. The value is in HEX format. ")
ipv4aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 13), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderIpAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileArpSenderIpAddrMask.setDescription("The ACL Profile Sender IP mask. This is only for ARP Spoofing Prevention which is System-defined ACL, and it's not allow to modify. The value is in HEX format. ")
ipv4aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4aclProfileStatus.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4aclProfileStatus.setDescription(" This object indicates the status of this entry, can only be set to 'createAndWait','active' and 'destroy'. When the value of the entry status is 'createAndWait', it could be set to 'active' only if the three values of aclProfileType, aclProfileMask and ProtocolType are not conflicted. ")
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
if mibBuilder.loadTexts: aclProfileTable.setDescription(' A table to ACL profile . ')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
if mibBuilder.loadTexts: aclProfileEntry.setDescription(' Each entry in this table is a ACL profile. Index to the table is ACL profile ID. ')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
if mibBuilder.loadTexts: aclProfileNo.setDescription('The ACL Profile ID. The ID 1 to 50 is user-defined ACL, and the ID more than 50 is reserved for system-defined ACL. The user only allow to create user-defined ACL ID. And system-defined ACL is read only.')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("impb", 3), ("arpSP_permit", 4), ("arpSP_deny", 5), ("voiceVlan", 6), ("surveillanceVlan", 7), ("aclQoS", 8), ("dhcpServerScreen", 10), ("l3v6", 11), ("zone_defense", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
if mibBuilder.loadTexts: aclProfileType.setDescription('The ACL Profile type, possible value are l2 (1) - for MAC-based rule. l3v4 (2) - for IPv4-based rule. impb (3) - for IMPB entry. l3v6 (11) - for IPv6-based rule. zone defense (12) - for zone defense entry. arpSP_permit(4) - for ARP Spoofing prevention entry. arpSP_deny(5) - for ARP Spoofing prevention entry. voiceVlan(6) - for Voice VLAN OUI entry. surveillanceVlan(7) - for Surveillance VLAN OUI entry. aclQoS(8) - for ACL QoS entry. dhcpServerScreen(10) - for DHCP server screening entry. Note that only l2, l3v4 and l3v6 could be set by user, other is reserved for system to show information. ')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleCount.setDescription('The number of rules in this profile.')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileMask.setDescription('Indicate which field want to care in the packet. Turn on the following bits to select the following items Type Item BIT ------------------------------------------ L2 DST_MAC 0 (LSB) L2 SRC_MAC 1 L2 VID 2 L2 8021P_PRIORITY 3 L2 ETHER_TYPE 4 L3 DSCP 5 L3 ICMP_TYPE 6 L3 ICMP_CODE 7 L3 IGMP_TYPE 8 L3 DST_IP 9 L3 SRC_IP 10 L3 DST_PORT 11 L3 SRC_PORT 12 L3 TCPFLAG 13 ARP-SP ARP_SENDER_MAC 14 ARP-SP ARP_SENDER_IP 15 (MSB) L3 TRAFFIC_CLASS 21 ------------------------------------------- The value is in Hex format. ')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setDescription('The ACL Profile destination MAC address mask. If DST_MAC is turn on in aclProfileMask, it will work with its member rule field,aclL2RuleDstMacAddr, to caculate a range of MAC address which is really care. ')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setDescription('The ACL Profile source MAC address mask. If SRC_MAC is turn on in aclProfileMask, it will work with its member rule field,aclL2RuleSrcMacAddr, to caculate a range of MAC address which is really care. ')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 58, 17))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("icmpv6", 58), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
if mibBuilder.loadTexts: aclProfileIPProtocol.setDescription('Indicate which IP Protocol will be care in this profile. Only profile type is l3 can set the IP protocol. For others, this field will be none. ')
aclProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMaskType.setStatus('current')
if mibBuilder.loadTexts: aclProfileDstIpAddrMaskType.setDescription('IPv6 Address type.')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setDescription("The ACL Profile destination IP address mask. If DST_IP is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleDstIpAddr, to caculate a range of IP address which is really care. The value is in HEX format, for example: '255.255.255.0' is presented to 'FFFFFF00' ")
aclProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMaskType.setStatus('current')
if mibBuilder.loadTexts: aclProfileSrcIpAddrMaskType.setDescription('IPv6 Address type.')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 11), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setDescription("The ACL Profile source IP address mask. If SRC_IP is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleSrcIpAddr, to caculate a range of IP address which is really care. The value is in HEX format, for example: '255.255.255.0' is presented to 'FFFFFF00' ")
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileDstPortMask.setDescription('The ACL Profile UDP/TCP destination port mask. If DST_PORT is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleTcpUdpDstPort, to caculate a range of destination port which is really care. The value is in HEX format. ')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileSrcPortMask.setDescription('The ACL Profile UDP/TCP source port mask. If SRC_PORT is turn on in aclProfileMask, it will work with its member rule field,aclL3RuleTcpUdpSrcPort, to caculate a range of source port which is really care. The value is in HEX format. ')
aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 14), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setDescription("The ACL Profile Sender MAC mask. This is only for ARP Spoofing Prevention which is System-defined ACL, and it's not allow to modify. The value is in HEX format. ")
aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 15), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setDescription("The ACL Profile Sender IP mask. This is only for ARP Spoofing Prevention which is System-defined ACL, and it's not allow to modify. The value is in HEX format. ")
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 1, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
if mibBuilder.loadTexts: aclProfileStatus.setDescription(" This object indicates the status of this entry, can only be set to 'createAndWait','active' and 'destroy'. When the value of the entry status is 'createAndWait', it could be set to 'active' only if the three values of aclProfileType, aclProfileMask and ProtocolType are not conflicted. ")
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleTable.setDescription('A table to configure L2 filter rules in the system.')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclL2AccessID"), (0, "DGS-1210-10P_BX", "aclL2ProfileID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleEntry.setDescription('Each entry in this table is a L2 filter rule. Index to the table is the L2 filter number and Profile ID.')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
if mibBuilder.loadTexts: aclL2AccessID.setDescription('L2 Filter rule ID.')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
if mibBuilder.loadTexts: aclL2ProfileID.setDescription('ACL Profile ID which this rule join.')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleEtherType.setDescription("The value in the Type/Len field of a frame that will be matched to trigger this filter. The default value of this object is '-1', which means the rule don't care this condition.")
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setDescription("Destination MAC address to be matched with the packet. By Default, the Destination Mac Address will be zero,which means the rule don't care this condition.")
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setDescription("Source MAC address to be matched with the packet. By Default, the Source Mac Address will be zero, which means the rule don't care this condition.. address")
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleVlanId.setDescription("Vlan Id to be filtered. In case of Provider bridges, This Vlan Id will be treated as customer Vlan Id. By Default, the value will be '-1', which means the rule don't care this condition.")
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
if mibBuilder.loadTexts: aclL2Rule1pPriority.setDescription("802.1p priority to be matched with the packet. By Default, the value will be '-1', which means the rule don't care this condition.")
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setDescription("The MAC address Mask work for Destination MAC address. This field is read-only and copy from it's Profile setting.")
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setDescription("The MAC address Mask work for Source MAC address. This field is read-only and copy from it's Profile setting.")
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleInPortList.setDescription('Specifies the complete set of ports over which this filter is applied for packets ingress at ports in this list.')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleAction.setDescription("Specifies the action to be taken on the packet if the filter rule matches. If the action is 'allow', the packet will be forwarded according to the forwarding rules. If the action is 'drop', the packet will be discarded.")
aclL2RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RulePriority.setStatus('current')
if mibBuilder.loadTexts: aclL2RulePriority.setDescription("Enter a priority value if you want to re-write the 802.1p user priority of a packet to the value entered in the Priority field, which meets the criteria specified previously in this command, before forwarding it on to the specified CoS queue.By Default, the value will be '-1', which means the rule don't care this condition.")
aclL2RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleReplacePriority.setDescription('Enable this option and manually enter the replacement value used to re-write the 802.1p user priority value entered in the Priority field, which meets the criteria specified previously in this command, before forwarding it on to the specified CoS queue. Otherwise, a packet will have its incoming 802.1p user priority re-written to its original value before being forwarded by the Switch.')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
if mibBuilder.loadTexts: aclL2RuleStatus.setDescription("This object indicates the status of this entry. An entry is created in this table when this object is SET to 'createAndWait'. The entry in this table is used when the status of this object is SET 'active'. The entry in this table is not used when this object is SET 'notInService'. An entry created in this table is be deleted when this object is SET 'destroy'.")
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTable.setDescription(' A table to configure L3 filter rules in the system. ')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclL3RuleAccessID"), (0, "DGS-1210-10P_BX", "aclL3RuleProfileNo"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleEntry.setDescription(' Each entry in this table is a L3 filter rule. Index to the table is L3 filter number. ')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleAccessID.setDescription('L3 Filter rule ID.')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleProfileNo.setDescription('The Profile ID which this rule join.')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleProtocol.setDescription(' The type of protocol to be checked against the packet.')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setDescription(" The message type to be checked against the packet. If the message type matches with the packet, then the packet will be dropped / allowed based on the action set in aclL3RuleAction. The default value is '-1',which means the rule don't care this condition. Some ICMP message types are: echoReply(0), destinationUnreachable(3), sourceQuench(4), redirect(5), echoRequest(8), timeExceeded(11), parameterProblem(12), timestampRequest(13), timestampReply(14), informationRequest(15), informationReply(16), addressMaskRequest(17), addressMaskReply (18), ")
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setDescription(" The message code to be checked against the packet. If the packet matches with the message code, then the packet will be dropped / allowed based on the action set in aclL3RuleAction. The default value is '-1', which means the rule don't care this condition. Some ICMP message codes are : networkUnreachable(0), hostUnreachable(1), protocolUnreachable(2), portUnreachable(3), fragmentNeed(4), sourceRouteFail(5), destNetworkUnknown(6), destHostUnknown(7), srcHostIsolated(8), destNetworkAdminProhibited(9), destHostAdminProhibited(10), networkUnreachableTOS(11), hostUnreachableTOS(12), ")
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setDescription("Destination IP address to be matched with the packet. The default value will be zero, which means the rule don't care this condition.")
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setDescription("Source IP address to be matched with the packet. The default value will be zero, which means the rule don't care this condition.")
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setDescription("The IP subnet mask for Destination IP address. This field is read-only and copy from it's Profile setting. ")
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setDescription("The IP subnet mask for Source IP address. This field is read-only and copy from it's Profile setting. ")
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setDescription("The TCP / UDP destination port. The default value is -1, which means the rule don't care this condition.")
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setDescription("The TCP / UDP source port. The default value is -1, which means the rule don't care this condition.")
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setDescription("The TCP / UDP Destination port Mask. This field is read-only and copy from it's Profile setting. ")
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setDescription("The TCP / UDP Source port Mask. This field is read-only and copy from it's Profile setting. ")
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setDescription(" The TCP ACK bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setDescription(" The TCP RST bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setDescription(" The TCP Urg bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setDescription(" The TCP Psh bit to be checked against the packet. The default value is 'dont_care'(-1). which means the rule don't care this condition.")
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setDescription(" The TCP Syn bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setDescription(" The TCP Fin bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleDscp.setDescription(" The IP Dscp value to be checked against the packet. A default value is '-1', which means the rule don't care this condition.")
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleIgmpType.setDescription(" The IGMP Type to be checked against the packet.A default value is '-1', which means the rule don't care this condition.")
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
if mibBuilder.loadTexts: aclL3RulePortList.setDescription('Specifies the complete set of ports over which if the packet arrives this filter rule will be applicable.')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleAction.setDescription('Specifies the action to be taken on the packet if the filter rule matches.')
aclL3RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePriority.setStatus('current')
if mibBuilder.loadTexts: aclL3RulePriority.setDescription("Enter a priority value if you want to re-write the 802.1p user priority of a packet to the value entered in the Priority field, which meets the criteria specified previously in this command, before forwarding it on to the specified CoS queue.By Default, the value will be '-1', which means the rule don't care this condition.")
aclL3RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleReplacePriority.setDescription('Enable this option and manually enter the replacement value used to re-write the 802.1p user priority value entered in the Priority field, which meets the criteria specified previously in this command, before forwarding it on to the specified CoS queue. Otherwise, a packet will have its incoming 802.1p user priority re-written to its original value before being forwarded by the Switch.')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
if mibBuilder.loadTexts: aclL3RuleStatus.setDescription("This object indicates the status of this entry. An entry is created in this table when this object is SET to 'createAndWait'. The entry in this table is used when the status of this object is SET 'active'. The entry in this table is not used when this object is SET 'notInService'. An entry created in this table is be deleted when this object is SET 'destroy'.")
aclv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2), )
if mibBuilder.loadTexts: aclv6L3RuleTable.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTable.setDescription(' A table to configure L3 filter rules in the system. ')
aclv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "aclv6L3RuleAccessID"), (0, "DGS-1210-10P_BX", "aclv6L3RuleProfileNo"))
if mibBuilder.loadTexts: aclv6L3RuleEntry.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleEntry.setDescription(' Each entry in this table is a L3 filter rule. Index to the table is L3 filter number. ')
aclv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleAccessID.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleAccessID.setDescription('L3 Filter rule ID.')
aclv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProfileNo.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleProfileNo.setDescription('The Profile ID which this rule join.')
aclv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 58, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("icmpv6", 58), ("udp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProtocol.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleProtocol.setDescription(' The type of protocol to be checked against the packet.')
aclv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageType.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageType.setDescription(" The message type to be checked against the packet. If the message type matches with the packet, then the packet will be dropped / allowed based on the action set in aclL3RuleAction. The default value is '-1',which means the rule don't care this condition. Some ICMP message types are: echoReply(0), destinationUnreachable(3), sourceQuench(4), redirect(5), echoRequest(8), timeExceeded(11), parameterProblem(12), timestampRequest(13), timestampReply(14), informationRequest(15), informationReply(16), addressMaskRequest(17), addressMaskReply (18), ")
aclv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageCode.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageCode.setDescription(" The message code to be checked against the packet. If the packet matches with the message code, then the packet will be dropped / allowed based on the action set in aclL3RuleAction. The default value is '-1', which means the rule don't care this condition. Some ICMP message codes are : networkUnreachable(0), hostUnreachable(1), protocolUnreachable(2), portUnreachable(3), fragmentNeed(4), sourceRouteFail(5), destNetworkUnknown(6), destHostUnknown(7), srcHostIsolated(8), destNetworkAdminProhibited(9), destHostAdminProhibited(10), networkUnreachableTOS(11), hostUnreachableTOS(12), ")
aclv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 6), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddr.setDescription("Destination IP address to be matched with the packet. The default value will be zero, which means the rule don't care this condition.")
aclv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddr.setDescription("Source IP address to be matched with the packet. The default value will be zero, which means the rule don't care this condition.")
aclv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 8), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddrMask.setDescription("The IP subnet mask for Destination IP address. This field is read-only and copy from it's Profile setting. ")
aclv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddrMask.setDescription("The IP subnet mask for Source IP address. This field is read-only and copy from it's Profile setting. ")
aclv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPort.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPort.setDescription("The TCP / UDP destination port. The default value is -1, which means the rule don't care this condition.")
aclv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPort.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPort.setDescription("The TCP / UDP source port. The default value is -1, which means the rule don't care this condition.")
aclv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPortMask.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPortMask.setDescription("The TCP / UDP Destination port Mask. This field is read-only and copy from it's Profile setting. ")
aclv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPortMask.setDescription("The TCP / UDP Source port Mask. This field is read-only and copy from it's Profile setting. ")
aclv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpAckBit.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpAckBit.setDescription(" The TCP ACK bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpRstBit.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpRstBit.setDescription(" The TCP RST bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpUrgBit.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpUrgBit.setDescription(" The TCP Urg bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpPshBit.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpPshBit.setDescription(" The TCP Psh bit to be checked against the packet. The default value is 'dont_care'(-1). which means the rule don't care this condition.")
aclv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpSynBit.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpSynBit.setDescription(" The TCP Syn bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont_care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont_care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpFinBit.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTcpFinBit.setDescription(" The TCP Fin bit to be checked against the packet. The default value is 'dont_care'(-1), which means the rule don't care this condition.")
aclv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTrafficClass.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleTrafficClass.setDescription(" The IP Dscp value to be checked against the packet. A default value is '-1', which means the rule don't care this condition.")
aclv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 21), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RulePortList.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RulePortList.setDescription('Specifies the complete set of ports over which if the packet arrives this filter rule will be applicable.')
aclv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleAction.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleAction.setDescription('Specifies the action to be taken on the packet if the filter rule matches.')
aclv6L3RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RulePriority.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RulePriority.setDescription("Enter a priority value if you want to re-write the 802.1p user priority of a packet to the value entered in the Priority field, which meets the criteria specified previously in this command, before forwarding it on to the specified CoS queue.By Default, the value will be '-1', which means the rule don't care this condition.")
aclv6L3RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleReplacePriority.setDescription('Enable this option and manually enter the replacement value used to re-write the 802.1p user priority value entered in the Priority field, which meets the criteria specified previously in this command, before forwarding it on to the specified CoS queue. Otherwise, a packet will have its incoming 802.1p user priority re-written to its original value before being forwarded by the Switch.')
aclv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 15, 3, 2, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleStatus.setStatus('current')
if mibBuilder.loadTexts: aclv6L3RuleStatus.setDescription("This object indicates the status of this entry. An entry is created in this table when this object is SET to 'createAndWait'. The entry in this table is used when the status of this object is SET 'active'. The entry in this table is not used when this object is SET 'notInService'. An entry created in this table is be deleted when this object is SET 'destroy'.")
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
if mibBuilder.loadTexts: snmpGlobalState.setDescription('This object is for enabling or disabling SNMP Community function.')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
if mibBuilder.loadTexts: snmpV3EngineID.setDescription("An SNMP engine's administratively-unique identifier. In a simple agent, this value is always that agent's own snmpEngineID value. The value can also take the value of the snmpEngineID of a remote SNMP engine with which this user can communicate.")
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserTable.setDescription('')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3UserName"), (0, "DGS-1210-10P_BX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserEntry.setDescription('')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserName.setDescription('A human readable string representing the name of the user. This is the (User-based Security) Model dependent security ID. ')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserVersion.setDescription('A human readable string representing the name of the user. This is the (User-based Security) Model dependent security ID. ')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserGroupName.setDescription('The name of the group to which this entry (e.g., the combination of securityModel and securityName) belongs. This groupName is used as index into the vacmAccessTable to select an access control policy. However, a value in this table does not imply that an instance with the value exists in table vacmAccesTable. ')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setDescription("An indication of whether messages sent on behalf of this user to/from the SNMP engine identified by usmUserEngineID, can be authenticated, and if so, the type of authentication protocol which is used. An instance of this object is created concurrently with the creation of any other object instance for the same user (i.e., as part of the processing of the set operation which creates the first object instance in the same conceptual row). If an initial set operation (i.e. at row creation time) tries to set a value for an unknown or unsupported protocol, then a 'wrongValue' error must be returned. The value will be overwritten/set when a set operation is performed on the corresponding instance of UserCloneFrom. Once instantiated, the value of such an instance of this object can only be changed via a set operation to the value of the NoAuthProtocol. If a set operation tries to change the value of an existing instance of this object to any value other than NoAuthProtocol, then an 'inconsistentValue' error must be returned. If a set operation tries to set the value to the NoAuthProtocol while the UserPrivProtocol value in the same row is not equal to NoPrivProtocol, then an 'inconsistentValue' error must be returned. That means that an SNMP command generator application must first ensure that the UserPrivProtocol is set to the NoPrivProtocol value before it can set the UserAuthProtocol value to NoAuthProtocol. ")
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setDescription('')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setDescription("An indication of whether messages sent on behalf of this user to/from the SNMP engine identified by usmUserEngineID, can be protected from disclosure, and if so, the type of privacy protocol which is used. An instance of this object is created concurrently with the creation of any other object instance for the same user (i.e., as part of the processing of the set operation which creates the first object instance in the same conceptual row). If an initial set operation (i.e. at row creation time) tries to set a value for an unknown or unsupported protocol, then a 'wrongValue' error must be returned. The value will be overwritten/set when a set operation is performed on the corresponding instance of usmUserCloneFrom. Once instantiated, the value of such an instance of this object can only be changed via a set operation to the value of the NoPrivProtocol. If a set operation tries to change the value of an existing instance of this object to any value other than NoPrivProtocol, then an 'inconsistentValue' error must be returned. Note that if any privacy protocol is used, then you must also use an authentication protocol. In other words, if usmUserPrivProtocol is set to anything else than NoPrivProtocol, then the corresponding instance of usmUserAuthProtocol cannot have a value of usmNoAuthProtocol. If it does, then an 'inconsistentValue' error must be returned. ")
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setDescription('')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3UserStatus.setDescription("The status of this conceptual row. Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the usmUserStatus column is 'notReady'. In particular, a newly created row for a user who employs authentication, cannot be made active until the corresponding usmUserCloneFrom and usmUserAuthKeyChange have been set. Further, a newly created row for a user who also employs privacy, cannot be made active until the usmUserPrivKeyChange has been set. The RowStatus TC [RFC2579] requires that this DESCRIPTION clause states under which circumstances other objects in this row can be modified: The value of this object has no effect on whether other objects in this conceptual row can be modified, except for usmUserOwnAuthKeyChange and usmUserOwnPrivKeyChange. For these 2 objects, the value of usmUserStatus MUST be active. ")
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupTable.setDescription('')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3GroupName"), (0, "DGS-1210-10P_BX", "snmpV3GroupSecurityModel"), (0, "DGS-1210-10P_BX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupEntry.setDescription('')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupName.setDescription('The name of the group to which this entry (e.g., the combination of securityModel and securityName) belongs. This groupName is used as index into the vacmAccessTable to select an access control policy. However, a value in this table does not imply that an instance with the value exists in table vacmAccesTable. ')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setDescription('In order to gain the access rights allowed by this conceptual row, this securityModel must be in use. ')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setDescription('The minimum level of security required in order to gain the access rights allowed by this conceptual row. A securityLevel of noAuthNoPriv is less than authNoPriv which in turn is less than authPriv. If multiple entries are equally indexed except for this vacmAccessSecurityLevel index, then the entry which has the highest value for vacmAccessSecurityLevel is selected. ')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setDescription('The value of an instance of this object identifies the MIB view of the SNMP context to which this conceptual row authorizes read access. The identified MIB view is that one for which the vacmViewTreeFamilyViewName has the same value as the instance of this object; if the value is the empty string or if there is no active MIB view having this value of vacmViewTreeFamilyViewName, then no access is granted. ')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setDescription('The value of an instance of this object identifies the MIB view of the SNMP context to which this conceptual row authorizes write access. The identified MIB view is that one for which the vacmViewTreeFamilyViewName has the same value as the instance of this object; if the value is the empty string or if there is no active MIB view having this value of vacmViewTreeFamilyViewName, then no access is granted. ')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setDescription('The value of an instance of this object identifies the MIB view of the SNMP context to which this conceptual row authorizes access for notifications. The identified MIB view is that one for which the vacmViewTreeFamilyViewName has the same value as the instance of this object; if the value is the empty string or if there is no active MIB view having this value of vacmViewTreeFamilyViewName, then no access is granted. ')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3GroupStatus.setDescription('The status of this conceptual row. The RowStatus TC [RFC2579] requires that this DESCRIPTION clause states under which circumstances other objects in this row can be modified: The value of this object has no effect on whether other objects in this conceptual row can be modified. ')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setDescription('')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3viewTreeName"), (0, "DGS-1210-10P_BX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setDescription('')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
if mibBuilder.loadTexts: snmpV3viewTreeName.setDescription('The human readable name for a family of view subtrees. ')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setDescription('The MIB subtree which when combined with the corresponding instance of vacmViewTreeFamilyMask defines a family of view subtrees. ')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
if mibBuilder.loadTexts: snmpV3viewTreeMask.setDescription("The bit mask which, in combination with the corresponding instance of vacmViewTreeFamilySubtree, defines a family of view subtrees. Each bit of this bit mask corresponds to a sub-identifier of vacmViewTreeFamilySubtree, with the most significant bit of the i-th octet of this octet string value (extended if necessary, see below) corresponding to the (8*i - 7)-th sub-identifier, and the least significant bit of the i-th octet of this octet string corresponding to the (8*i)-th sub-identifier, where i is in the range 1 through 16. Each bit of this bit mask specifies whether or not the corresponding sub-identifiers must match when determining if an OBJECT IDENTIFIER is in this family of view subtrees; a '1' indicates that an exact match must occur; a '0' indicates 'wild card', i.e., any sub-identifier value matches. Thus, the OBJECT IDENTIFIER X of an object instance is contained in a family of view subtrees if, for each sub-identifier of the value of vacmViewTreeFamilySubtree, either: the i-th bit of vacmViewTreeFamilyMask is 0, or the i-th sub-identifier of X is equal to the i-th sub-identifier of the value of vacmViewTreeFamilySubtree. If the value of this bit mask is M bits long and there are more than M sub-identifiers in the corresponding instance of vacmViewTreeFamilySubtree, then the bit mask is extended with 1's to be the required length. Note that when the value of this object is the zero-length string, this extension rule results in a mask of all-1's being used (i.e., no 'wild card'), and the family of view subtrees is the one view subtree uniquely identified by the corresponding instance of vacmViewTreeFamilySubtree. Note that masks of length greater than zero length do not need to be supported. In this case this object is made read-only. ")
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
if mibBuilder.loadTexts: snmpV3viewTreeType.setDescription('Indicates whether the corresponding instances of vacmViewTreeFamilySubtree and vacmViewTreeFamilyMask define a family of view subtrees which is included in or excluded from the MIB view. ')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setDescription('The status of this conceptual row. The RowStatus TC [RFC2579] requires that this DESCRIPTION clause states under which circumstances other objects in this row can be modified: The value of this object has no effect on whether other objects in this conceptual row can be modified. ')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
if mibBuilder.loadTexts: snmpV3CommunityTable.setDescription('')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
if mibBuilder.loadTexts: snmpV3CommunityEntry.setDescription('')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
if mibBuilder.loadTexts: snmpV3CommunityName.setDescription('The unique index value of a row in this table.')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setDescription('A human readable string representing the corresponding value of snmpCommunityName in a Security Model independent format.')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3CommunityStatus.setDescription('The status of this conceptual row in the snmpCommunityTable. An entry in this table is not qualified for activation until instances of all corresponding columns have been initialized, either through default values, or through Set operations. The snmpCommunityName and snmpCommunitySecurityName objects must be explicitly set. There is no restriction on setting columns in this table when the value of snmpCommunityStatus is active(1).')
ipv4snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1), )
if mibBuilder.loadTexts: ipv4snmpV3HostTable.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4snmpV3HostTable.setDescription('')
ipv4snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4snmpV3HostAddress"))
if mibBuilder.loadTexts: ipv4snmpV3HostEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4snmpV3HostEntry.setDescription('')
ipv4snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4snmpV3HostAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4snmpV3HostAddress.setDescription('This object contains a transport address. The format of this address depends on the value of the snmpTargetAddrTDomain object. And this object is unique identifier associated with this snmpNotifyEntry.')
ipv4snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostCommunityName.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4snmpV3HostCommunityName.setDescription('The locally arbitrary.')
ipv4snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostVersion.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4snmpV3HostVersion.setDescription('The Level of Security to be used when generating SNMP messages using this entry.')
ipv4snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostStatus.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4snmpV3HostStatus.setDescription('')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
if mibBuilder.loadTexts: snmpV3HostTable.setDescription('')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "snmpV3HostAddress"), (0, "DGS-1210-10P_BX", "snmpV3IPType"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
if mibBuilder.loadTexts: snmpV3HostEntry.setDescription('')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
if mibBuilder.loadTexts: snmpV3HostAddress.setDescription('This object contains a transport address. The format of this address depends on the value of the snmpTargetAddrTDomain object. And this object is unique identifier associated with this snmpNotifyEntry.')
snmpV3IPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3IPType.setStatus('current')
if mibBuilder.loadTexts: snmpV3IPType.setDescription('Type of IP interface.')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
if mibBuilder.loadTexts: snmpV3HostCommunityName.setDescription('The locally arbitrary.')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
if mibBuilder.loadTexts: snmpV3HostVersion.setDescription('The Level of Security to be used when generating SNMP messages using this entry.')
snmpV3HostInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setStatus('current')
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setDescription('Specifies the interface name when the syslogSrvIP is linklocal address.')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3HostStatus.setDescription('')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setDescription('This object is for enabling or disabling SNMP login fail event trap in the system.')
snmpV3TrapBootup = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBootup.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapBootup.setDescription('This object is for enabling or disabling devie Bootup event trap in the system.')
snmpV3TrapPortLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortLinkUpDown.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapPortLinkUpDown.setDescription('This object is for enabling or disabling Port link up / link down event trap in the system.')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setDescription('This object is for enabling or disabling RSTP topology change event trap in the system.')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setDescription('This object is for enabling or disabling Firmware upgrade suess or fail event trap in the system.')
snmpV3TrapPoePowerOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPoePowerOnOff.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapPoePowerOnOff.setDescription('This object is for enabling or disabling PoE power on /off event in the system.')
snmpV3TrapPoePowerError = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPoePowerError.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapPoePowerError.setDescription('This object is for enabling or disabling PoE power error event in the system. There are four(short circuit, over load, power denied, and thermal shutdown) error types in this event.')
snmpV3TrapOverMaxPowerBudget = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 25, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapOverMaxPowerBudget.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapOverMaxPowerBudget.setDescription('This object is for enabling or disabling PoE over max power budget event in the system.')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
if mibBuilder.loadTexts: topologyChange.setDescription('AST_TOPOLOGY_CHG_TRAP_VAL.')
firmwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 8))
if mibBuilder.loadTexts: firmwareUpgradeSuccess.setStatus('current')
if mibBuilder.loadTexts: firmwareUpgradeSuccess.setDescription('SNMP_FIRMUPGRADE_SUCC.')
firmwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 9))
if mibBuilder.loadTexts: firmwareUpgradeFailure.setStatus('current')
if mibBuilder.loadTexts: firmwareUpgradeFailure.setDescription('SNMP_FIRMUPGRADE_FAIL.')
firmwareIllegalFile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 10))
if mibBuilder.loadTexts: firmwareIllegalFile.setStatus('current')
if mibBuilder.loadTexts: firmwareIllegalFile.setDescription('SNMP_FIRMUPGRADE_FAIL2.')
firmwareTransferError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 11))
if mibBuilder.loadTexts: firmwareTransferError.setStatus('current')
if mibBuilder.loadTexts: firmwareTransferError.setDescription('SNMP_FIRMUPGRADE_FAIL1.')
firmwareChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 12))
if mibBuilder.loadTexts: firmwareChecksumError.setStatus('current')
if mibBuilder.loadTexts: firmwareChecksumError.setDescription('SNMP_FIRMUPGRADE_FAIL3.')
poePowerOn = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 13))
if mibBuilder.loadTexts: poePowerOn.setStatus('current')
if mibBuilder.loadTexts: poePowerOn.setDescription('PoE Power On.')
poePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 14))
if mibBuilder.loadTexts: poePowerOff.setStatus('current')
if mibBuilder.loadTexts: poePowerOff.setDescription('PoE Power Off.')
poeShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 15))
if mibBuilder.loadTexts: poeShortCircuit.setStatus('current')
if mibBuilder.loadTexts: poeShortCircuit.setDescription('PoE Power Short Circuit.')
poeOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 16))
if mibBuilder.loadTexts: poeOverLoad.setStatus('current')
if mibBuilder.loadTexts: poeOverLoad.setDescription('PoE Power Over Load.')
poePowerDenied = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 17))
if mibBuilder.loadTexts: poePowerDenied.setStatus('current')
if mibBuilder.loadTexts: poePowerDenied.setDescription('PoE Power Denied.')
poeThermalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 18))
if mibBuilder.loadTexts: poeThermalShutdown.setStatus('current')
if mibBuilder.loadTexts: poeThermalShutdown.setDescription('PoE Thermal Shutdown.')
poeOverMaxPowerBudget = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 27, 0, 19))
if mibBuilder.loadTexts: poeOverMaxPowerBudget.setStatus('current')
if mibBuilder.loadTexts: poeOverMaxPowerBudget.setDescription('PoE Over Max Power Budget.')
ipv4syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1))
syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2))
ipv4syslogLogSrvAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogLogSrvAddr.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4syslogLogSrvAddr.setDescription('Specifies the syslog server IP to be used for remote logging. When configured, a new socket will be opened for this address. When the address is changed, the socket opened for the previous address will be closed and a new socket will be opened for this address.')
ipv4syslogUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogUDPPort.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4syslogUDPPort.setDescription('The value is for setting UDP Port.')
ipv4syslogTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4syslogTimeStamp.setDescription('This object is for enabling or disabling timestamp option. When enabled, the messages (log and email alert messages) will hold the time stamp information. When disabled, the time stamp information will not be carried with the messages sent to the log and mail servers.')
ipv4syslogSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogSeverity.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4syslogSeverity.setDescription('Specifies the log level option to be set for a specific module.')
ipv4syslogFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogFacility.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4syslogFacility.setDescription('The Syslog standard facilities. The facility to be used when sending Syslog messages to this server.')
ipv4syslogLogging = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogLogging.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4syslogLogging.setDescription('This object is for enabling or disabling syslog alert features in the system. System Logs record and manage events, as well as report errors and informational messages.')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogState.setStatus('current')
if mibBuilder.loadTexts: syslogState.setDescription('This object is for enabling or disabling syslog alert features in the system. System Logs record and manage events, as well as report errors and informational messages.')
syslogTimeStampOption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeStampOption.setStatus('current')
if mibBuilder.loadTexts: syslogTimeStampOption.setDescription('This object is for enabling or disabling timestamp option. When enabled, the messages (log and email alert messages) will hold the time stamp information. When disabled, the time stamp information will not be carried with the messages sent to the log and mail servers.')
syslogSrvSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvSeverity.setStatus('current')
if mibBuilder.loadTexts: syslogSrvSeverity.setDescription('Specifies the log level option to be set for a specific module.')
syslogSrvFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvFacility.setStatus('current')
if mibBuilder.loadTexts: syslogSrvFacility.setDescription('The Syslog standard facilities. The facility to be used when sending Syslog messages to this server.')
syslogSrvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5), )
if mibBuilder.loadTexts: syslogSrvTable.setStatus('current')
if mibBuilder.loadTexts: syslogSrvTable.setDescription('A table containing entries of priority,server address type, server address, port through which it can send and tranport type.')
syslogSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "syslogSrvIPType"), (0, "DGS-1210-10P_BX", "syslogSrvIP"))
if mibBuilder.loadTexts: syslogSrvEntry.setStatus('current')
if mibBuilder.loadTexts: syslogSrvEntry.setDescription('A table containing index as priority , server address type and server address.')
syslogSrvIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIPType.setStatus('current')
if mibBuilder.loadTexts: syslogSrvIPType.setDescription('Specifies the Address type of server.Address type shall be ipv4 or ipv6.')
syslogSrvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIP.setStatus('current')
if mibBuilder.loadTexts: syslogSrvIP.setDescription('Specifies the ServerIP to which the syslog shall be forwarded.')
syslogSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvPort.setStatus('current')
if mibBuilder.loadTexts: syslogSrvPort.setDescription('Specifies the Port through which it can send the syslog message. By default the the port is 514')
syslogInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogInterfaceName.setStatus('current')
if mibBuilder.loadTexts: syslogInterfaceName.setDescription('Specifies the interface name when the syslogSrvIP is linklocal address.')
syslogSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 16, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvRowStatus.setStatus('current')
if mibBuilder.loadTexts: syslogSrvRowStatus.setDescription('The Status of the Server Entry.')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
if mibBuilder.loadTexts: sysLBDStateEnable.setDescription('Enable/Disable Loopback detection function. The Loopback Detection function is used to detect the loop created by a specific port while Spanning Tree Protocol (STP) is not enabled in the network, especially when the down links are hubs or unmanaged switchs.The Switch will automatically shutdown the port and sends a log to the administrator.')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
if mibBuilder.loadTexts: sysLBDMode.setDescription('Loopback detection function mode.')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
if mibBuilder.loadTexts: sysLBDInterval.setDescription('Set a Loop detection Interval between 1 and 32767 seconds. The default is 2 seconds. This time interval to be used at counting time seconds to resend the CTP packet automatically.')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
if mibBuilder.loadTexts: sysLBDRecoverTime.setDescription('This time interval to be used at counting time seconds to recover the disabled port automatically. The Loop Detection Recover Time can be set at 0 seconds, or 60 to 1000000 seconds. Entering 0 will disable the Loop Detection Recover Time. The default is 60 seconds.')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
if mibBuilder.loadTexts: sysLBDCtrlTable.setDescription('A table to control Loopback detection features either for the entire switch or for each interface in the switch.')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: sysLBDCtrlEntry.setDescription('An entry appears in this table for each interface in the system.')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
if mibBuilder.loadTexts: sysLBDCtrlIndex.setDescription('The interface index of the port for which the configuration in this entry applies.')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
if mibBuilder.loadTexts: sysLBDPortStatus.setDescription('Provides control to per port enable or disable the loopback detection function. Default is disabled.')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setDescription('The loop status for this port.')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setDescription('A table to display Loopback detection features by vlan mode .')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setDescription('An entry appears in this table for each interface in the system.')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setDescription('Display port lists loop status by vlan.')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setDescription('Display port lists loop status by vlan.')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
if mibBuilder.loadTexts: sysMirrorStatus.setDescription('Enable/Disable Port Mirroring function. Default is disabled. Port Mirroring is a method of monitoring network traffic that forwards a copy of each incoming and/or outgoing packet from one port of the Switch to another port where the packet can be studied.')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
if mibBuilder.loadTexts: sysMirrorTargetPort.setDescription('Specifies the port to which the mirrored traffic in the system is to be copied.')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setDescription('Provides control to enable or disable mirroring of ingress traffic over this interface to the mirrored-to port.')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setDescription('Provides control to enable or disable mirroring of egress traffic over this interface to the mirrored-to port.')
sysTrapIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIP.setStatus('current')
if mibBuilder.loadTexts: sysTrapIP.setDescription("The smart console utility's IP address is used to recive trap events.")
sysTrapSystemEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("deviceBootUp", 1), ("illegalLogin", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapSystemEvent.setStatus('current')
if mibBuilder.loadTexts: sysTrapSystemEvent.setDescription('Enable/Disable system trap events in the switch system.')
sysTrapPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPortEvent.setStatus('current')
if mibBuilder.loadTexts: sysTrapPortEvent.setDescription('Enable/Disable port trap event in the system.')
sysTrapStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStateChangeEvent.setStatus('current')
if mibBuilder.loadTexts: sysTrapStateChangeEvent.setDescription('Enable/Disable RSTP state change trap event in the system.')
sysTrapFirmUpgradeEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFirmUpgradeEvent.setStatus('current')
if mibBuilder.loadTexts: sysTrapFirmUpgradeEvent.setDescription('Enable/Disable firmware upgrading trap event in the system.')
sysTrapPoePowerOnOffEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPoePowerOnOffEvent.setStatus('current')
if mibBuilder.loadTexts: sysTrapPoePowerOnOffEvent.setDescription('Enable/Disable PoE power on /off trap event in the system.')
sysTrapPoePowerErrorEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPoePowerErrorEvent.setStatus('current')
if mibBuilder.loadTexts: sysTrapPoePowerErrorEvent.setDescription('Enable/Disable PoE power error trap events in the system. PoE power error trap events include short circuit, over load, power denied, and thermal shutdown.')
sysTrapOverMaxPowerBudgetEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapOverMaxPowerBudgetEvent.setStatus('current')
if mibBuilder.loadTexts: sysTrapOverMaxPowerBudgetEvent.setDescription('Enable/Disable PoE over max power budget trap event in the system.')
sysTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 19, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStatus.setStatus('current')
if mibBuilder.loadTexts: sysTrapStatus.setDescription('Enable/Disable trap event in the system.')
ipv4sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPTimeSeconds.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPTimeSeconds.setDescription('This object is for setting the system time in seconds from Epoch (00:00:00 UTC, January 1, 2009). Notice : input value must larger than 1230768000 (00:00:00 UTC, January 1, 2009) and smaller than 2145916799 (23:59:59 UTC, December 31, 2037).')
ipv4sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPFirstServer.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPFirstServer.setDescription("SNTP First Server's IP Address")
ipv4sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPSecondServer.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPSecondServer.setDescription("SNTP Second Server's IP Address")
ipv4sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPPollInterval.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPPollInterval.setDescription('SNTP Poll Interval In Seconds (30-99999) ')
ipv4sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPState.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPState.setDescription('Enable/Disable SNTP function in the system.')
ipv4sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTOffset.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTOffset.setDescription('This object is for Daylight Saving Time Offset In (30/60/90/120) Minutes.')
ipv4sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPGMTMinutes.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPGMTMinutes.setDescription('Specifies the Time Zone Offset from GMT in +/- Minutes. (+780 ~ -720)')
ipv4sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMon.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMon.setDescription('The start month of Daylight Saving Time.')
ipv4sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartDay.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartDay.setDescription('The start day of Daylight Saving Time.')
ipv4sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartHour.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartHour.setDescription('The start hour of Daylight Saving Time.')
ipv4sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMin.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMin.setDescription('The start minute of Daylight Saving Time.')
ipv4sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMon.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMon.setDescription('The end month of Daylight Saving Time.')
ipv4sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndDay.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndDay.setDescription('The end day of Daylight Saving Time.')
ipv4sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndHour.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndHour.setDescription('The end hour of Daylight Saving Time.')
ipv4sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMin.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMin.setDescription('The end minute of Daylight Saving Time.')
ipv4sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTState.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4sysSNTPDSTState.setDescription('This object is for Annual(1) or Disabled(2) DST state in the system.')
sysSNTPServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17))
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setDescription('This object is for setting the system time in seconds from Epoch (00:00:00 UTC, January 1, 2009). Notice : input value must larger than 1230768000 (00:00:00 UTC, January 1, 2009) and smaller than 2145916799 (23:59:59 UTC, December 31, 2037).')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
if mibBuilder.loadTexts: sysSNTPFirstServer.setDescription("SNTP First Server's IPv6 Address")
sysSNTPFirstType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstType.setStatus('current')
if mibBuilder.loadTexts: sysSNTPFirstType.setDescription("SNTP First Server's IPv6 Address type.")
sysSNTPFirstInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setStatus('current')
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setDescription('Specifies the interface name when the sysSNTPFirstServer is linklocal address.')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
if mibBuilder.loadTexts: sysSNTPSecondServer.setDescription("SNTP Second Server's IPv6 Address")
sysSNTPSecondType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondType.setStatus('current')
if mibBuilder.loadTexts: sysSNTPSecondType.setDescription("SNTP First Server's IPv6 Address type.")
sysSNTPSecondInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setStatus('current')
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setDescription('Specifies the interface name when the sysSNTPSecondServer is linklocal address.')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
if mibBuilder.loadTexts: sysSNTPPollInterval.setDescription('SNTP Poll Interval In Seconds (30-99999) ')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
if mibBuilder.loadTexts: sysSNTPState.setDescription('Enable/Disable SNTP function in the system.')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTOffset.setDescription('This object is for Daylight Saving Time Offset In (30/60/90/120) Minutes.')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setDescription('Specifies the Time Zone Offset from GMT in +/- Minutes. (+780 ~ -720)')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setDescription('The start month of Daylight Saving Time.')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setDescription('The start day of Daylight Saving Time.')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setDescription('The start hour of Daylight Saving Time.')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setDescription('The start minute of Daylight Saving Time.')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setDescription('The end month of Daylight Saving Time.')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setDescription('The end day of Daylight Saving Time.')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setDescription('The end hour of Daylight Saving Time.')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setDescription('The end minute of Daylight Saving Time.')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
if mibBuilder.loadTexts: sysSNTPDSTState.setDescription('This object is for Annual(1) or Disabled(2) DST state in the system.')
voicevlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1))
voicevlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2))
voicevlanDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3))
voiceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanMode.setStatus('current')
if mibBuilder.loadTexts: voiceVlanMode.setDescription('Voice VLAN is a feature that allows you to automatically place the voice traffic from IP phone to an assigned VLAN to enhance the VoIP service. This object is for enabling or disabling Voice Vlan function in the system. If the Vlan mode is in Asymmetric VLAN mode, Voice VLAN can not be enabled.')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
if mibBuilder.loadTexts: voiceVlanId.setDescription('The ID of VLAN that you want the voice traffic to be in. It must be a exist vlan id.')
voiceVlanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanTimeout.setStatus('current')
if mibBuilder.loadTexts: voiceVlanTimeout.setDescription('A period of time in hour to remove a port from voice VLAN if the port is an automatic VLAN member. The Timeout range is 1~120 hours. Default aging time is 1 hour.')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPriority.setDescription('The 802.1p priority levels of the traffic in the Voice VLAN.')
voicevlanPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6), )
if mibBuilder.loadTexts: voicevlanPortControlTable.setStatus('current')
if mibBuilder.loadTexts: voicevlanPortControlTable.setDescription('A table that contains Voice Vlan Port Control configuration information.')
voicevlanPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "voicevlanPortControlIndex"))
if mibBuilder.loadTexts: voicevlanPortControlEntry.setStatus('current')
if mibBuilder.loadTexts: voicevlanPortControlEntry.setDescription('A list of Voice Vlan Control configuration parameters for each Port on this device.')
voicevlanPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortControlIndex.setStatus('current')
if mibBuilder.loadTexts: voicevlanPortControlIndex.setDescription('The voice vlan port index.')
voicevlanPortAutoDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setStatus('current')
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setDescription('This object is for enabling or disabling Voice Vlan Auto Detection in the port. If the auto detection is enable, switch will add this port to the voice VLAN automatically if it detects the device OUI matches the Telephony OUI. If the port is a static member of voice vlan or a LA member, it can not enable voice vlan auto detection.')
voicevlanPortManuTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortManuTagMode.setStatus('current')
if mibBuilder.loadTexts: voicevlanPortManuTagMode.setDescription('User assign per port tag/untag mode.')
voicevlanPortCurrentTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortCurrentTagMode.setStatus('current')
if mibBuilder.loadTexts: voicevlanPortCurrentTagMode.setDescription('Per port current tag/untag mode.')
voicevlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortState.setStatus('current')
if mibBuilder.loadTexts: voicevlanPortState.setDescription('This object indicates Voice vlan state to this Port. manual - this port is a static member of voice vlan. dynamic - this port is a dynamic member of voice vlan. none - this port is not a member of voice vlan.')
voicevlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1), )
if mibBuilder.loadTexts: voicevlanOUITable.setStatus('current')
if mibBuilder.loadTexts: voicevlanOUITable.setDescription('A voice vlan OUI entry containing the description and mac.')
voicevlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "voicevlanOUITelephonyOUI"))
if mibBuilder.loadTexts: voicevlanOUIEntry.setStatus('current')
if mibBuilder.loadTexts: voicevlanOUIEntry.setDescription('A voice vlan OUI entry containing the description and mac.')
voicevlanOUITelephonyOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setStatus('current')
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setDescription("An Organizationally Unique Identifier (OUI) is a 24-bit number that is purchased from the IEEE Registration Authority. This identifier uniquely identifies a vendor, manufacturer, or other organization. This object indicates the voice traffic's OUI that user created.")
voicevlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIDescription.setStatus('current')
if mibBuilder.loadTexts: voicevlanOUIDescription.setDescription('The Description for the OUI.')
voicevlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUIMask.setStatus('current')
if mibBuilder.loadTexts: voicevlanOUIMask.setDescription('Voice vlan OUI Mask. Always be FF:FF:FF:00:00:00.')
voicevlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIStatus.setStatus('current')
if mibBuilder.loadTexts: voicevlanOUIStatus.setDescription('This object indicates the status of this entry. To create a new entry, you must set the voicevlanOUIStatus to be CreateAndGo, then this entry will turn to be Active.')
voicevlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1), )
if mibBuilder.loadTexts: voicevlanDeviceTable.setStatus('current')
if mibBuilder.loadTexts: voicevlanDeviceTable.setDescription('A voice vlan Device entry containing the description and mac.')
voicevlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "voicevlanDeviceIndexMac"))
if mibBuilder.loadTexts: voicevlanDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: voicevlanDeviceEntry.setDescription('A voice vlan Device entry containing the description and mac.')
voicevlanDeviceIndexMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceIndexMac.setStatus('current')
if mibBuilder.loadTexts: voicevlanDeviceIndexMac.setDescription("An Mac Address is a 24-bit number that is purchased from the IEEE Registration Authority. This identifier uniquely identifies a vendor, manufacturer, or other organization. This object indicates the voice traffic's Mac that voice device created.")
voicevlanDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePort.setStatus('current')
if mibBuilder.loadTexts: voicevlanDevicePort.setDescription('The port is learning by voice device.')
voicevlanDevicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePriority.setStatus('current')
if mibBuilder.loadTexts: voicevlanDevicePriority.setDescription('The priority value for voice device.')
voicevlanDeviceTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceTagType.setStatus('current')
if mibBuilder.loadTexts: voicevlanDeviceTagType.setDescription('The tag type for voice device.')
voicevlanDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: voicevlanDeviceStatus.setDescription('This object indicates the status of this entry. You can delete this object.')
autoSurveillanceVlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1))
autoSurveillanceVlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2))
autoSurveillanceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setDescription('This object is for enabling or disabling Auto Surveillance Vlan function in the system. If the Vlan mode is in Asymmetric VLAN mode, Auto Surveillance VLAN can not be enabled.')
autoSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanId.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanId.setDescription('The ID of VLAN that you want the surveillance traffic to be in. It must be a exist vlan id.')
autoSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("highest", 0), ("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setDescription('The 802.1p priority levels of the traffic in the Auto Surveillance VLAN.')
autoSurveillanceVlanTaggedUplinkDownlinkPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanTaggedUplinkDownlinkPort.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanTaggedUplinkDownlinkPort.setDescription("Auto Surveillance vlan uplink ports can't auto learning OUI.")
autoSurveillanceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1), )
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setDescription('A Auto Surveillance vlan OUI entry containing the description and mac.')
autoSurveillanceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "autoSurveillanceVlanOUISurveillanceOUI"))
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setDescription('A Auto Surveillance vlan OUI entry containing the description and mac.')
autoSurveillanceVlanOUISurveillanceOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setDescription("An Organizationally Unique Identifier (OUI) is a 24-bit number that is purchased from the IEEE Registration Authority. This identifier uniquely identifies a vendor, manufacturer, or other organization. This object indicates the surveillance traffic's OUI that user created.")
autoSurveillanceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setDescription('The Description for the OUI.')
autoSurveillanceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setDescription("Auto Surveillance vlan OUI Mask. The default OUI Mask is FF:FF:FF:F0:00:00. And default OUI Mask is read-only. In user define OUI's Mask is FF:FF:FF:00:00:00, in user define MAC's Mask is FF:FF:FF:FF:FF:FF.")
autoSurveillanceVlanOUIComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("video_Management_Server", 0), ("vMS_Client", 1), ("video_Encoder", 2), ("network_Storage", 3), ("other_IP_Surveillance_Devices", 4), ("d-Link_Surveillance_Device", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setDescription('This object indicates the Component Type of this entry. To create a new entry, you must set the autoSurveillanceVlanOUIComponentType to be CreateAndGo, then this entry will turn to be Active.')
autoSurveillanceVlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 26, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setStatus('current')
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setDescription('This object indicates the status of this entry. To create a new entry, you must set the autoSurveillanceVlanOUIStatus to be CreateAndGo, then this entry will turn to be Active.')
sysPoEPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1), )
if mibBuilder.loadTexts: sysPoEPortSettingTable.setStatus('current')
if mibBuilder.loadTexts: sysPoEPortSettingTable.setDescription('A table of objects that display and control the power characteristics of power Ethernet ports on a Power Source Entity (PSE) device.')
sysPoEPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "poeportgroup"), (0, "DGS-1210-10P_BX", "poeportid"))
if mibBuilder.loadTexts: sysPoEPortSettingEntry.setStatus('current')
if mibBuilder.loadTexts: sysPoEPortSettingEntry.setDescription('A set of objects that display and control the power characteristics of a power Ethernet PSE port.')
poeportgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeportgroup.setStatus('current')
if mibBuilder.loadTexts: poeportgroup.setDescription('This object is the PoE port group index.')
poeportid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeportid.setStatus('current')
if mibBuilder.loadTexts: poeportid.setDescription('This object is the PoE Port ID Index.')
poePortSettingState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingState.setStatus('current')
if mibBuilder.loadTexts: poePortSettingState.setDescription('Enable/Disable PoE function on this port.')
poePortTimeBaseSchduleID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortTimeBaseSchduleID.setStatus('current')
if mibBuilder.loadTexts: poePortTimeBaseSchduleID.setDescription('Enable timebase schedule function and join with this schedule ID on this port. Setting 0 means disable timebase schedule function on this port.')
poePortSettingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingPriority.setStatus('current')
if mibBuilder.loadTexts: poePortSettingPriority.setDescription('Configures PoE port priority.')
poePortSettingPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingPowerLimit.setStatus('current')
if mibBuilder.loadTexts: poePortSettingPowerLimit.setDescription('Configures PoE port power limit.')
poePortSettingUserDefineState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingUserDefineState.setStatus('current')
if mibBuilder.loadTexts: poePortSettingUserDefineState.setDescription('Enable/Disable manual configuring max power on this port.')
poePortSettingUserDefine = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingUserDefine.setStatus('current')
if mibBuilder.loadTexts: poePortSettingUserDefine.setDescription("This object manually configures max power value(e.g., `1, 2.2, 21.8') on this port. The per-port power limit must be a multiple of 0.2. If the user define state is not enabled, the value is the zero-length string.")
poePortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPower.setStatus('current')
if mibBuilder.loadTexts: poePortPower.setDescription("This object displays PoE port power(W)(e.g., `0.0, 2.3, 21.8'). If the PoE port tatus is POWER OFF, the value is 0.0.")
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
if mibBuilder.loadTexts: poePortVoltage.setDescription("This object displays PoE port voltage(V)(e.g., `0.0, 2.3, 21.8'). If the PoE port tatus is POWER OFF, the value is 0.0.")
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
if mibBuilder.loadTexts: poePortCurrent.setDescription("This object displays PoE port current(mA)(e.g., `0.0, 22.3, 120.8'). If the PoE port tatus is POWER OFF, the value is 0.0.")
poePortClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortClassification.setStatus('current')
if mibBuilder.loadTexts: poePortClassification.setDescription("This object displays PoE port power classification(e.g., `NA, Class 2, 20.2(User Defined)'). If the PoE port tatus is POWER OFF, the value is NA.")
poePortDelayPowerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortDelayPowerDetect.setStatus('current')
if mibBuilder.loadTexts: poePortDelayPowerDetect.setDescription('Enable/Disable Delay Power Detect function on this port.')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 1, 1, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
if mibBuilder.loadTexts: poePortStatus.setDescription("This object displays PoE port powering status(e.g., `POWER OFF, POWER ON').")
poeSystemSettingPowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemSettingPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: poeSystemSettingPowerThreshold.setDescription("This object configures available system power budget (e.g., `50.2').")
poeSystemSettingDisconnectMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyNextPort", 1), ("denyLowPriorityPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemSettingDisconnectMethod.setStatus('current')
if mibBuilder.loadTexts: poeSystemSettingDisconnectMethod.setDescription('This object configures PoE power denied rule while system entering in guard band mode.')
pethPsePortPowerBudget = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerBudget.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerBudget.setDescription("This object displays PoE system power budget (e.g., `50.2').")
pethPsePortPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerConsumption.setDescription("This object displays PoE total power consumption (e.g., `3.3, 15.4').")
pethPsePortPowerRemainder = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerRemainder.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerRemainder.setDescription("This object displays PoE power remainder (e.g., `60.2').")
pethPsePortPowerRatioOfSystemPower = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerRatioOfSystemPower.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerRatioOfSystemPower.setDescription("This object displays power ratio of system power in unit of percentage(e.g., `4.2').")
poeLedMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 22, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeLedMode.setStatus('current')
if mibBuilder.loadTexts: poeLedMode.setDescription('Port led mode indicator. 1: Link/Act/Speed mode; 2: PoE mode.')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeSettingTable.setDescription('A table to configure time Range in the system.')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setDescription('A schedule entry to configure time Range in the system.')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeIndex.setDescription('The Time Range identifier. The maximum number of Schedule entry is the number of ports supported PoE function. The value must be between 1 and 52.')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeName.setDescription("The Schedule name associated with the Schedule entry (e.g., `abc, bbb').")
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeDate.setDescription('Enable/Disable date range checking while executing time base PoE.')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeStartYear.setDescription('Start year of the Schedule entry.')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeStartMonth.setDescription('Start month of the Schedule entry.')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeStartDay.setDescription('Start day of the Schedule entry. The value must be from 1 to 31.')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeStartHour.setDescription('Start hour of the Schedule entry. The value must be from 0 to 23.')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeStartMinute.setDescription('Start minute of the Schedule entry. The value must be from 0 to 59.')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeEndYear.setDescription('End year of the Schedule entry.')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeEndMonth.setDescription('End month of the Schedule entry.')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeEndDay.setDescription('End day of the Schedule entry. The value must be from 1 to 31.')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeEndHour.setDescription('End hour of the Schedule entry. The value must be from 0 to 23.')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeEndMinute.setDescription('End minute of the Schedule entry. The value must be from 0 to 59.')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeMonday.setDescription('Enable/Disble scheduling Monday.')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeTuesday.setDescription('Enable/Disble scheduling Tuesday.')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeWednesday.setDescription('Enable/Disble scheduling Wednesday.')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeThursday.setDescription('Enable/Disble scheduling Thursday.')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeFriday.setDescription('Enable/Disble scheduling Friday.')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeSaturday.setDescription('Enable/Disble scheduling Saturday.')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeSunday.setDescription('Enable/Disble scheduling Sunday.')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 32, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: swTimeRangeRowStatus.setDescription('The status of an entry in the Time Range Information Table. Only a subset of the rowstatus variables (active, notinservice, createAndWait, destroy) are available.')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
if mibBuilder.loadTexts: dlinklldpState.setDescription('This object is used for enabling or disabling LLDP in the system.')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setDescription('The time-to-live value expressed as a multiple of the lldpMessageTxInterval object.The actual time-to-live value used in LLDP frames, transmitted on behalf of this LLDP agent, can be expressed by the following formula: TTL = min(65535, (lldpMessageTxInterval * lldpMessageTxHoldMultiplier))')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setDescription('This object is used for LLDP packet update frequency. The timer in units of seconds.')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
if mibBuilder.loadTexts: dlinklldpReinitDelay.setDescription('This object is used for LLDP Reinitialization Delay. The timer in units of seconds.')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
if mibBuilder.loadTexts: dlinklldpTxDelay.setDescription('The lldpTxDelay indicates the delay (in units of seconds) between successive LLDP frame transmissions initiated by value/status changes in the LLDP local systems MIB. The recommended value for the lldpTxDelay is set by the following formula: 1 <= lldpTxDelay <= (0.25 * lldpMessageTxInterval).')
dlinklldpConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7), )
if mibBuilder.loadTexts: dlinklldpConfigManAddrTable.setStatus('current')
if mibBuilder.loadTexts: dlinklldpConfigManAddrTable.setDescription('The table that controls selection of LLDP management address TLV instances to be transmitted on individual ports.')
dlinklldpConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dlinklldpLocManAddrSubtype"), (0, "DGS-1210-10P_BX", "dlinklldpLocManAddr"))
if mibBuilder.loadTexts: dlinklldpConfigManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: dlinklldpConfigManAddrEntry.setDescription('LLDP configuration information that specifies the set of ports (represented as a PortList) on which the local system management address instance will be transmitted. This configuration object augments the lldpLocManAddrEntry, therefore it is only present along with the management address instance contained in the associated lldpLocManAddrEntry entry. Each active lldpConfigManAddrEntry must be restored from non-volatile and re-created (along with the corresponding lldpLocManAddrEntry) after a re-initialization of the management system.')
dlinklldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddrSubtype.setReference('IEEE 802.1AB-2005 9.5.9.3')
if mibBuilder.loadTexts: dlinklldpLocManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: dlinklldpLocManAddrSubtype.setDescription("The type of management address identifier encoding used in the associated 'lldpLocManagmentAddr' object.")
dlinklldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1, 2), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddr.setReference('IEEE 802.1AB-2005 9.5.9.4')
if mibBuilder.loadTexts: dlinklldpLocManAddr.setStatus('current')
if mibBuilder.loadTexts: dlinklldpLocManAddr.setDescription('The string value used to identify the management address component associated with the local system. The purpose of this address is to contact the management entity.')
dlinklldpConfigManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 7, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setReference('IEEE 802.1AB-2005 10.2.1.1')
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setDescription('A set of ports that are identified by a PortList, in which each port is represented as a bit. The corresponding local system management address instance will be transmitted on the member ports of the lldpManAddrPortsTxEnable. The default value for lldpConfigManAddrPortsTxEnable object is empty binary string, which means no ports are specified for advertising indicated management address instance.')
lldpMEDPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8), )
if mibBuilder.loadTexts: lldpMEDPortControlTable.setStatus('current')
if mibBuilder.loadTexts: lldpMEDPortControlTable.setDescription('A table that contains LLDP-MED control, A row appears in this table for each physical port.')
lldpMEDPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "lldpMEDPortControlIndex"))
if mibBuilder.loadTexts: lldpMEDPortControlEntry.setStatus('current')
if mibBuilder.loadTexts: lldpMEDPortControlEntry.setDescription('A list of LLDP-MED for PoE Port Settings parameters for each Port on this device.')
lldpMEDPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMEDPortControlIndex.setStatus('current')
if mibBuilder.loadTexts: lldpMEDPortControlIndex.setDescription('The Control Index of the LLDP-MED Power PSE TLV port.')
lldpMEDPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMEDPortState.setStatus('current')
if mibBuilder.loadTexts: lldpMEDPortState.setDescription('This object is for enabling or disabling LLDP-MED Power PSE TLV Setting in the system.')
dlinklldpAntiRoguePortControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 9), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortControl.setStatus('current')
if mibBuilder.loadTexts: dlinklldpAntiRoguePortControl.setDescription('When LLDP anti-rogue port control is enabled , this identifies the port control status of each port. The default setting is disable.')
dlinklldpRemOrgDefInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10), )
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoTable.setStatus('current')
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoTable.setDescription('This table contains one or more rows per physical network connection which advertises the organizationally defined information. Note that this table contains one or more rows of organizationally defined information that is not recognized by the local agent. If the local system is capable of recognizing any organizationally defined information, appropriate extension MIBs from the organization should be used for information retrieval.')
dlinklldpRemOrgDefInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dlinklldpAntiRoguePortIndex"))
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoEntry.setStatus('current')
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoEntry.setDescription('Information about the unrecognized organizationally defined information advertised by the remote system. The lldpAntiRoguePortIndex is index to this table.')
dlinklldpAntiRoguePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortIndex.setStatus('current')
if mibBuilder.loadTexts: dlinklldpAntiRoguePortIndex.setDescription('The Control Index of the LLDP Anti-Rogue port.')
dlinklldpAntiRoguePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("authenticationDisabled", 0), ("authenticationEnabled", 1), ("authenticationSuccessful", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortStatus.setStatus('current')
if mibBuilder.loadTexts: dlinklldpAntiRoguePortStatus.setDescription("The value represents each port's authentication status. 0: Authentication disabled. 1: Authentication enabled but not passed. 2: Authentication successful.")
dlinklldpRemOrgDefInfoOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoOUI.setReference('IEEE 802.1AB-2005 9.5.1.3')
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoOUI.setStatus('current')
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoOUI.setDescription('The Organizationally Unique Identifier (OUI), as defined in IEEE std 802-2001, is a 24 bit (three octets) globally unique assigned number referenced by various standards, of the information received from the remote system.')
dlinklldpAntiRoguePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 24, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpAntiRoguePassword.setStatus('current')
if mibBuilder.loadTexts: dlinklldpAntiRoguePassword.setDescription("This object is used for Anti-Rogue Password setting. The default LLDP Anti-Rogue password is 'admin'.")
dlinkGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1))
dlinkGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2))
dlinkGreenPortStandby = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3))
dlinkGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4))
dlinkGreenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setDescription('Provides control to disable LED port.')
dlinkGreenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setDescription('Enable/Disable Green disable LED function. Default is disabled.')
dlinkGreenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkGreenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkGreenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setDescription('Provides control to disable LED port.')
dlinkGreenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setDescription('Enable/Disable Green disable LED function. Default is disabled.')
dlinkGreenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkGreenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkGreenPortStandbyPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyPortList.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortStandbyPortList.setDescription('Provides control to disable LED port.')
dlinkGreenPortStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyState.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortStandbyState.setDescription('Enable/Disable Green disable LED function. Default is disabled.')
dlinkGreenPortStandbyTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile1.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile1.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkGreenPortStandbyTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile2.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenPortStandbyTimeProfile2.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkGreenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setDescription('Enable/Disable Green disable LED function. Default is disabled.')
dlinkGreenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkGreenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setStatus('current')
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setDescription("The time profile name associated with the Schedule entry (e.g., `abc, bbb').")
dlinkPowerSavCableLenDetectionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavCableLenDetectionState.setStatus('current')
if mibBuilder.loadTexts: dlinkPowerSavCableLenDetectionState.setDescription('Enable/Disable Power Saving Cable Length Detection. Default is disabled.')
dlinkPowerSavLinkStatusDetectState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavLinkStatusDetectState.setStatus('current')
if mibBuilder.loadTexts: dlinkPowerSavLinkStatusDetectState.setDescription('Enable/Disable Power Saving Link Status Detection. Default is disabled.')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setDescription('To enable or disable DHCP Server Screening port list.')
ipv4dhcpServerScreenServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2), )
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerTable.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerTable.setDescription('A table that contains the configuration objects for the DHCP server screen server list. An entry appears in this table for each port that may authenticate access to itself.')
ipv4dhcpServerScreenServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "ipv4dhcpServerScreenServerIndex"))
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerEntry.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerEntry.setDescription('The configuration information for an DHCP server screen server.')
ipv4dhcpServerScreenServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerIndex.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerIndex.setDescription('A unique value for DHCP server screen server index. Its value ranges between 1 and 5.')
ipv4dhcpServerScreenServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerAddress.setDescription('The IP address of the DHCP server screen server referred to in this table entry.')
ipv4dhcpServerScreenServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerStatus.setStatus('obsolete')
if mibBuilder.loadTexts: ipv4dhcpServerScreenServerStatus.setDescription('The status of this conceptual row in the swAuthRadiusServerTable. An entry in this table is not qualified for activation until instances of all corresponding columns have been initialized, either through default values, or through Set operations. The dhcpServerScreenServerIndex objects must be explicitly set.')
dhcpServerScreenTrustedServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3), )
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerTable.setDescription('A table that contains the configuration objects for the DHCP server screen server list. An entry appears in this table for each port that may authenticate access to itself.')
dhcpServerScreenTrustedServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpServerScreenTrustedServerIndex"))
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerEntry.setDescription('The configuration information for an DHCP server screen server.')
dhcpServerScreenTrustedServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerIndex.setDescription('A unique value for DHCP server screen server index. Its value ranges between 1 and 5.')
dhcpServerScreenTrustedServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerAddress.setDescription('The IP address of the DHCP server screen server referred to in this table entry.')
dhcpServerScreenIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenIPType.setStatus('current')
if mibBuilder.loadTexts: dhcpServerScreenIPType.setDescription('Type of IP interface.')
dhcpServerScreenTrustedServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 7, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerStatus.setDescription('The status of this conceptual row in the swAuthRadiusServerTable. An entry in this table is not qualified for activation until instances of all corresponding columns have been initialized, either through default values, or through Set operations. The dhcpServerScreenServerIndex objects must be explicitly set.')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9))
trafficSegStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegStatus.setStatus('current')
if mibBuilder.loadTexts: trafficSegStatus.setDescription('Enable/Disable Status of Traffic Segmention.')
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
if mibBuilder.loadTexts: trafficSegTable.setDescription('A Port-channel is created through ifMain table. After the creation of the port-channel, corresponding logical interface will be created in the ifMain table. This Port-channel table is indexed through Key values and allows to configure link selection policy and the Mac address for the port-channel. All other objects in this table displays the details of the port-channel')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: trafficSegEntry.setDescription('There is one entry in this table for each created port-channel port')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
if mibBuilder.loadTexts: trafficSegIfIndex.setDescription("The ifIndex of the port-channel(Aggregator's interface index). ")
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 14, 9, 2, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
if mibBuilder.loadTexts: trafficSegMemberList.setDescription('Port list of port channel.')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
if mibBuilder.loadTexts: rmonGlobalState.setDescription('This object is for enabling or disabling RMON function.')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
if mibBuilder.loadTexts: rmonStatsTable.setDescription('A list of Ethernet statistics entries.')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rmonStatsEntry.setDescription('A collection of statistics kept for a particular Ethernet interface. As an example, an instance of the etherStatsPkts object might be named etherStatsPkts.1')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
if mibBuilder.loadTexts: rmonStatsIndex.setDescription('The value of this object uniquely identifies this etherStats entry.')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
if mibBuilder.loadTexts: rmonStatsDataSource.setDescription('This object identifies the source of the data that this etherStats entry is configured to analyze. This source can be any ethernet interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 2233 [17], for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. The statistics in this group reflect all packets on the local network segment attached to the identified interface. An agent may or may not be able to tell if fundamental changes to the media of the interface have occurred and necessitate an invalidation of this entry. For example, a hot-pluggable ethernet card could be pulled out and replaced by a token-ring card. In such a case, if the agent has such knowledge of the change, it is recommended that it invalidate this entry. This object may not be modified if the associated etherStatsStatus object is equal to valid(1).')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
if mibBuilder.loadTexts: rmonStatsOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
if mibBuilder.loadTexts: rmonStatsStatus.setDescription('The status of this etherStats entry.')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryTable.setDescription('A list of history control entries.')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryEntry.setDescription('A list of parameters that set up a periodic sampling of statistics. As an example, an instance of the historyControlInterval object might be named historyControlInterval.2')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryIndex.setDescription('An index that uniquely identifies an entry in the historyControl table. Each such entry defines a set of samples at a particular interval for an interface on the device.')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryDataSource.setDescription('This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this historyControlEntry. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 2233 [17], for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. The statistics in this group reflect all packets on the local network segment attached to the identified interface. An agent may or may not be able to tell if fundamental changes to the media of the interface have occurred and necessitate an invalidation of this entry. For example, a hot-pluggable ethernet card could be pulled out and replaced by a token-ring card. In such a case, if the agent has such knowledge of the change, it is recommended that it invalidate this entry. This object may not be modified if the associated historyControlStatus object is equal to valid(1).')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setDescription('The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this historyControlEntry. When this object is created or modified, the probe should set historyControlBucketsGranted as closely to this object as is possible for the particular probe implementation and available resources.')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryInterval.setDescription("The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this historyControlEntry. This interval can be set to any number of seconds between 1 and 3600 (1 hour). Because the counters in a bucket may overflow at their maximum value with no indication, a prudent manager will take into account the possibility of overflow in any of the associated counters. It is important to consider the minimum time in which any counter could overflow on a particular media type and set the historyControlInterval object to a value less than this interval. This is typically most important for the 'octets' counter in any media-specific table. For example, on an Ethernet network, the etherHistoryOctets counter could overflow in about one hour at the Ethernet's maximum utilization. This object may not be modified if the associated historyControlStatus object is equal to valid(1).")
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
if mibBuilder.loadTexts: rmonHistoryStatus.setDescription('The status of this historyControl entry. Each instance of the media-specific table associated with this historyControlEntry will be deleted by the agent if this historyControlEntry is not equal to valid(1).')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmTable.setDescription('A list of alarm entries.')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmEntry.setDescription('A list of parameters that set up a periodic checking for alarm conditions. For example, an instance of the alarmValue object might be named alarmValue.8')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmIndex.setDescription('An index that uniquely identifies an entry in the alarm table. Each such entry defines a diagnostic sample at a particular interval for an object on the device.')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmInterval.setDescription('The interval in seconds over which the data is sampled and compared with the rising and falling thresholds. When setting this variable, care should be taken in the case of deltaValue sampling - the interval should be set short enough that the sampled variable is very unlikely to increase or decrease by more than 2^31 - 1 during a single sampling interval. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmVariable.setDescription('The object identifier of the particular variable to be sampled. Only variables that resolve to an ASN.1 primitive type of INTEGER (INTEGER, Integer32, Counter32, Counter64, Gauge, or TimeTicks) may be sampled. Because SNMP access control is articulated entirely in terms of the contents of MIB views, no access control mechanism exists that can restrict the value of this object to identify only those objects that exist in a particular MIB view. Because there is thus no acceptable means of restricting the read access that could be obtained through the alarm mechanism, the probe must only grant write access to this object in those views that have read access to all objects on the probe. During a set operation, if the supplied variable name is not available in the selected MIB view, a badValue error must be returned. If at any time the variable name of an established alarmEntry is no longer available in the selected MIB view, the probe must change the status of this alarmEntry to invalid(4). This object may not be modified if the associated alarmStatus object is equal to valid(1).')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmSampleType.setDescription('The method of sampling the selected variable and calculating the value to be compared against the thresholds. If the value of this object is absoluteValue(1), the value of the selected variable will be compared directly with the thresholds at the end of the sampling interval. If the value of this object is deltaValue(2), the value of the selected variable at the last sample will be subtracted from the current value, and the difference compared with the thresholds. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setDescription('A threshold for the sampled statistic. When the current sampled value is greater than or equal to this threshold, and the value at the last sampling interval was less than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is greater than or equal to this threshold and the associated alarmStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3). After a rising event is generated, another such event will not be generated until the sampled value falls below this threshold and reaches the alarmFallingThreshold. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setDescription('A threshold for the sampled statistic. When the current sampled value is less than or equal to this threshold, and the value at the last sampling interval was greater than this threshold, a single event will be generated. A single event will also be generated if the first sample after this entry becomes valid is less than or equal to this threshold and the associated alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3). After a falling event is generated, another such event will not be generated until the sampled value rises above this threshold and reaches the alarmRisingThreshold. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setDescription('The index of the eventEntry that is used when a rising threshold is crossed. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setDescription('The index of the eventEntry that is used when a falling threshold is crossed. The eventEntry identified by a particular value of this index is the same as identified by the same value of the eventIndex object. If there is no corresponding entry in the eventTable, then no association exists. In particular, if this value is zero, no associated event will be generated, as zero is not a valid event index. This object may not be modified if the associated alarmStatus object is equal to valid(1).')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmOwner.setDescription('The entity that configured this entry and is therefore using the resources assigned to it.')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: rmonAlarmStatus.setDescription('The status of this alarm entry.')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
if mibBuilder.loadTexts: rmonEventTable.setDescription('A list of events to be generated.')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
if mibBuilder.loadTexts: rmonEventEntry.setDescription('A set of parameters that describe an event to be generated when certain conditions are met. As an example, an instance of the eventLastTimeSent object might be named eventLastTimeSent.6')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
if mibBuilder.loadTexts: rmonEventIndex.setDescription('An index that uniquely identifies an entry in the event table. Each such entry defines one event that is to be generated when the appropriate conditions occur.')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
if mibBuilder.loadTexts: rmonEventDescription.setDescription('A comment describing this event entry.')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
if mibBuilder.loadTexts: rmonEventType.setDescription('The type of notification that the probe will make about this event. In the case of log, an entry is made in the log table for each event. In the case of snmp-trap, an SNMP trap is sent to one or more management stations.')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
if mibBuilder.loadTexts: rmonEventCommunity.setDescription('If an SNMP trap is to be sent, it will be sent to the SNMP community specified by this octet string.')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
if mibBuilder.loadTexts: rmonEventOwner.setDescription("The entity that configured this entry and is therefore using the resources assigned to it. If this object contains a string starting with 'monitor' and has associated entries in the log table, all connected management stations should retrieve those log entries, as they may have significance to all management stations connected to this device")
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 47, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
if mibBuilder.loadTexts: rmonEventStatus.setDescription('The status of this event entry. If this object is not equal to valid(1), all associated log entries shall be deleted by the agent.')
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
if mibBuilder.loadTexts: neighborTable.setDescription('A list of the Neighbor Cache Table.')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "neighborIfindex"), (0, "DGS-1210-10P_BX", "neighborIPv6Addr"), (0, "DGS-1210-10P_BX", "neighborMACAddr"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
if mibBuilder.loadTexts: neighborEntry.setDescription('A Neighbor cache entry containing the ifindex and ipv6 addr.')
neighborIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIfindex.setStatus('current')
if mibBuilder.loadTexts: neighborIfindex.setDescription('The interface index of the Neighbor entry.')
neighborIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: neighborIPv6Addr.setDescription('Allows the entry of an IP address that will be a Neighbor entry into the Neighbor Cache Table.')
neighborMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddr.setStatus('current')
if mibBuilder.loadTexts: neighborMACAddr.setDescription('The MAC address associated of the Neighbor entry.')
neighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborType.setStatus('current')
if mibBuilder.loadTexts: neighborType.setDescription('The type associated of the Neighbor entry.')
neighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborCacheState.setStatus('current')
if mibBuilder.loadTexts: neighborCacheState.setDescription('The type associated of the Neighbor entry.')
neighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: neighborRowStatus.setDescription('The status of an entry in the Neighbor Cache Table. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available.')
dhcpBOOTPRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1))
dhcpBOOTPRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2))
dhcpBOOTPRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2))
dhcpBOOTPRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayState.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayState.setDescription('This object indicates DHCP relay function is enabled or disabled.')
dhcpBOOTPRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayHopCount.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayHopCount.setDescription('This object indicates the maximum number of router hops that the BOOTP packets can cross.')
dhcpBOOTPRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayTimeThreshold.setDescription('This object indicates the minimum time in seconds within which the switch must relay the DHCP request. If this time is exceeded, the switch will drop the DHCP packet.')
dhcpBOOTPRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1), )
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsTable.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsTable.setDescription('This table indicates the IP address as a destination to forward (relay) DHCP packets to.')
dhcpBOOTPRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpBOOTPRelayInterface"), (0, "DGS-1210-10P_BX", "dhcpBOOTPRelayServerIP"))
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsEntry.setDescription('A list of information indicates the IP address as a destination to forward (relay) DHCP packets to.')
dhcpBOOTPRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterface.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayInterface.setDescription('This object indicates the name of the IP interface.')
dhcpBOOTPRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayServerIP.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayServerIP.setDescription('This object indicates the DHCP server IP address.')
dhcpBOOTPRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsRowStatus.setDescription('This object indicates the status of this entry. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available.')
dhcpBOOTPRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82State.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82State.setDescription('This object indicates DHCP relay option 82 function always enabled.')
dhcpBOOTPRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CheckState.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CheckState.setDescription('This object indicates DHCP relay option 82 Check function is enabled or disabled.')
dhcpBOOTPRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82Policy.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82Policy.setDescription('This object indicates DHCP relay option 82 policy.')
dhcpBOOTPRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteIDType.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteIDType.setDescription('This object indicates the type of remote ID. If the type is default, the remote ID will be the MAC address of the device, otherwise, the remote ID can be defined by writing to the swDHCPRelayOption82RemoteID object.')
dhcpBOOTPRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 61, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteID.setDescription('This object displays the current remote ID of the device. If swDHCPRelayOption82RemoteIDType is set to default, the value will be the MAC address of the device, and this object cannot be modified. If swDHCPRelayOption82RemoteIDType is set to user-defined, a new value can be written to this object.')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setDescription('This object indicates DHCP local relay function of VLAN is enabled or disabled.')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
if mibBuilder.loadTexts: dhcpLocalRelayTable.setDescription('This table indicates the IP address as a destination to forward (local relay) DHCP packets to.')
dhcpLocalRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpLocalRelayEntry.setDescription('A list of information indicates the IP address as a destination to forward (local relay) DHCP packets to.')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setDescription('This object displays the current VLAN ID of the device.')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 62, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setDescription('This object indicates DHCP local relay function of VLAN is enabled or disabled.')
dhcpv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 1))
dhcpv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2))
dhcpv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayState.setDescription('This object indicates DHCPv6 relay function is enabled or disabled.')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setDescription('This object indicates the maximum number of router hops that the DHCPv6 packets can cross.')
dhcpv6RelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setDescription('This table indicates the IP address as a destination to forward (relay) DHCP packets to.')
dhcpv6RelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_BX", "dhcpv6RelayInterface"), (0, "DGS-1210-10P_BX", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setDescription('A list of information indicates the IP address as a destination to forward (relay) DHCP packets to.')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayInterface.setDescription('This object indicates the maximum number of router hops that the DHCPv6 packets can cross.')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setDescription('This object indicates the DHCP server IP address.')
dhcpv6RelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setDescription('This object indicates the status of this entry. Only a subset of the rowstatus variables (active, createAndGo, destroy) are available.')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setDescription('This object indicates DHCPv6 relay option 37 function is enabled or disabled.')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setDescription('This object indicates DHCPv6 relay option 37 Check function is enabled or disabled.')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid_with_user_define", 1), ("user_define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setDescription('This object indicates the type of remote ID.')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 12, 63, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setDescription('This object displays the current remote ID of the device. If RemoteIDType is set to default, the value will be the MAC address of the device, and this object cannot be modified. If RemoteIDType is set to user-defined, a new value can be written to this object.')
mibBuilder.exportSymbols("DGS-1210-10P_BX", dot1xAuthConfigPortControl=dot1xAuthConfigPortControl, trustedHostIpMask=trustedHostIpMask, ipv4sysSNTPDSTEndMin=ipv4sysSNTPDSTEndMin, ipifV6AddressIpAddr=ipifV6AddressIpAddr, ipv4snmpV3HostCommunityName=ipv4snmpV3HostCommunityName, qosDiffServType26=qosDiffServType26, tftpFwServerIpAddress=tftpFwServerIpAddress, qosTOSType03=qosTOSType03, qosMode=qosMode, companyDHCPv6Relay=companyDHCPv6Relay, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, ipv4aclProfileSrcPortMask=ipv4aclProfileSrcPortMask, aclv6L3RuleTcpRstBit=aclv6L3RuleTcpRstBit, rmonAlarmSampleType=rmonAlarmSampleType, dot1xAuthReAuthPeriod=dot1xAuthReAuthPeriod, companySecurity=companySecurity, portD3Index=portD3Index, aclv6L3RuleTcpUdpDstPortMask=aclv6L3RuleTcpUdpDstPortMask, portD3State=portD3State, syslogGeneralGroup=syslogGeneralGroup, aclProfileType=aclProfileType, rmonHistory=rmonHistory, trafficSegMemberList=trafficSegMemberList, ipv4sysIpAddr=ipv4sysIpAddr, swTimeRangeStartDay=swTimeRangeStartDay, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, pethPsePortPowerRatioOfSystemPower=pethPsePortPowerRatioOfSystemPower, queuingMechanism=queuingMechanism, ipv4aclProfileRuleCount=ipv4aclProfileRuleCount, qosDiffServType35=qosDiffServType35, sysLBDCtrlTable=sysLBDCtrlTable, qosTOSGroup=qosTOSGroup, ipv4sysSNTPGMTMinutes=ipv4sysSNTPGMTMinutes, sysPoEPortSettingEntry=sysPoEPortSettingEntry, dot1xAuthConfigPortEntry=dot1xAuthConfigPortEntry, dot1qVlanManagementid=dot1qVlanManagementid, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, sysTrapStateChangeEvent=sysTrapStateChangeEvent, sysSNTPDSTOffset=sysSNTPDSTOffset, voicevlanOUI=voicevlanOUI, autoSurveillanceVlanOUIEntry=autoSurveillanceVlanOUIEntry, poePortPower=poePortPower, impbBlackListIpAddress=impbBlackListIpAddress, rmonAlarmStatus=rmonAlarmStatus, igsHostPortPurgeInterval=igsHostPortPurgeInterval, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, snmpV3GroupEntry=snmpV3GroupEntry, snmpV3TrapOverMaxPowerBudget=snmpV3TrapOverMaxPowerBudget, syslogSrvPort=syslogSrvPort, sysPoEPortSettingTable=sysPoEPortSettingTable, dhcpv6RelayControl=dhcpv6RelayControl, ipifV6AddressIpType=ipifV6AddressIpType, igsVlanFilterVlanId=igsVlanFilterVlanId, igsQueryMaxResponseTime=igsQueryMaxResponseTime, swRadiusServerSharedSecret=swRadiusServerSharedSecret, sysLBDVlanLoopTable=sysLBDVlanLoopTable, voicevlanDeviceEntry=voicevlanDeviceEntry, dlinkGreenLEDShutoffTimeProfile2=dlinkGreenLEDShutoffTimeProfile2, cableDiagPair2TestResult=cableDiagPair2TestResult, dhcpv6RelayHopCount=dhcpv6RelayHopCount, neighborEntry=neighborEntry, VlanIndex=VlanIndex, qosTOSType00=qosTOSType00, cableDiagPair1FaultDistance=cableDiagPair1FaultDistance, sysSNTPTimeSeconds=sysSNTPTimeSeconds, staticDisableAutoLearn=staticDisableAutoLearn, dhcpBOOTPRelayInterfaceSettingsEntry=dhcpBOOTPRelayInterfaceSettingsEntry, stpPortOperEdgePort=stpPortOperEdgePort, swTimeRangeEndDay=swTimeRangeEndDay, snmpV3TrapPoePowerError=snmpV3TrapPoePowerError, dlinkPowerSavCableLenDetectionState=dlinkPowerSavCableLenDetectionState, poeOverMaxPowerBudget=poeOverMaxPowerBudget, ipv4syslogFacility=ipv4syslogFacility, ipv4sysSNTPFirstServer=ipv4sysSNTPFirstServer, neighborIPv6Addr=neighborIPv6Addr, snmpV3GroupTable=snmpV3GroupTable, ipifName=ipifName, trustedHostIpAddr=trustedHostIpAddr, firmwareIllegalFile=firmwareIllegalFile, snmpV3CommunityStatus=snmpV3CommunityStatus, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, poePortSettingUserDefine=poePortSettingUserDefine, sysLBDPortLoopStatus=sysLBDPortLoopStatus, stpPortRestrictedTCN=stpPortRestrictedTCN, voicevlanDeviceTagType=voicevlanDeviceTagType, qosDiffServType06=qosDiffServType06, impbAutoScanStatus=impbAutoScanStatus, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, poePortSettingState=poePortSettingState, swTimeRangeSettingEntry=swTimeRangeSettingEntry, voicevlanPortManuTagMode=voicevlanPortManuTagMode, ipv4aclProfileDstMacAddrMask=ipv4aclProfileDstMacAddrMask, stpPortState=stpPortState, syslogSrvTable=syslogSrvTable, swTimeRangeMonday=swTimeRangeMonday, tftpCfgServerIpAddress=tftpCfgServerIpAddress, qosQ1p=qosQ1p, dlinklldpTxDelay=dlinklldpTxDelay, rmonStatsTable=rmonStatsTable, snmpGlobalState=snmpGlobalState, dlinklldpRemOrgDefInfoTable=dlinklldpRemOrgDefInfoTable, rmonEvent=rmonEvent, qosDiffServEnable=qosDiffServEnable, sysPortCtrlSpeed=sysPortCtrlSpeed, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, companyDHCPRelay=companyDHCPRelay, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, sysSwitchName=sysSwitchName, aclv6L3RuleAction=aclv6L3RuleAction, ipv4aclProfileDstPortMask=ipv4aclProfileDstPortMask, sysSNTPDSTEndMon=sysSNTPDSTEndMon, companyLBD=companyLBD, miscReset=miscReset, igsVlanSnoopStatus=igsVlanSnoopStatus, swRadiusServerIPType=swRadiusServerIPType, stpPortDesignatedPort=stpPortDesignatedPort, dot3azTable=dot3azTable, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, qosDiffServType29=qosDiffServType29, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, sysLBDInterval=sysLBDInterval, aclv6L3RuleDstIpAddrMask=aclv6L3RuleDstIpAddrMask, dhcpBOOTPRelayInterfaceSettingsTable=dhcpBOOTPRelayInterfaceSettingsTable, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, dhcpv6RelayInterface=dhcpv6RelayInterface, PortList=PortList, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, qosDiffServType36=qosDiffServType36, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, ipv4syslogSeverity=ipv4syslogSeverity, igsGrpQueryInterval=igsGrpQueryInterval, dot1xAuthStatus=dot1xAuthStatus, aclv6L3RuleReplacePriority=aclv6L3RuleReplacePriority, sysLBDPortStatus=sysLBDPortStatus, stpPortPathCost=stpPortPathCost, dot1xAuthSuppTimeout=dot1xAuthSuppTimeout, aRPSpoofPreventPortList=aRPSpoofPreventPortList, aclProfileSrcIpAddrMaskType=aclProfileSrcIpAddrMaskType, swTimeRangeStartYear=swTimeRangeStartYear, dlinkGreenPortStandbyTimeProfile1=dlinkGreenPortStandbyTimeProfile1, dot1xAuthConfigPortStatus=dot1xAuthConfigPortStatus, impbAutoScanIpAddressFrom=impbAutoScanIpAddressFrom, companyTrapSetting=companyTrapSetting, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, radiusServerTable=radiusServerTable, rmonHistoryOwner=rmonHistoryOwner, sysRestart=sysRestart, ipv4aclProfileDstIpAddrMask=ipv4aclProfileDstIpAddrMask, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, laPortActorActivity=laPortActorActivity, sysSNTPServerTable=sysSNTPServerTable, stpRootCost=stpRootCost, aclL3RuleIgmpType=aclL3RuleIgmpType, laPortControlTable=laPortControlTable, dot1pPortEntry=dot1pPortEntry, qosDiffServType43=qosDiffServType43, dot1xAuthQuietPeriod=dot1xAuthQuietPeriod, dlink_products=dlink_products, dhcpBOOTPRelayInterfaceSettingsRowStatus=dhcpBOOTPRelayInterfaceSettingsRowStatus, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit, voicevlanDevicePort=voicevlanDevicePort, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, qosDiffServType13=qosDiffServType13, aclL3RuleStatus=aclL3RuleStatus, igsVlanQuerier=igsVlanQuerier, snmpV3Host=snmpV3Host, aclL2Rule1pPriority=aclL2Rule1pPriority, laStatus=laStatus, rmonEventStatus=rmonEventStatus, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, bandwidthCtrlTable=bandwidthCtrlTable, qosDiffServType47=qosDiffServType47, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, dot1xAuthConfigPortSessionUserName=dot1xAuthConfigPortSessionUserName, sysMirrorTargetPort=sysMirrorTargetPort, dlinklldpRemOrgDefInfoEntry=dlinklldpRemOrgDefInfoEntry, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, dot1qVlanEntry=dot1qVlanEntry, miscStatisticsReset=miscStatisticsReset, voicevlanDeviceIndexMac=voicevlanDeviceIndexMac, igsVlanFilterTable=igsVlanFilterTable, trustedHostIPType=trustedHostIPType, igsRobustnessValue=igsRobustnessValue, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, poeThermalShutdown=poeThermalShutdown, stpHelloTime=stpHelloTime, impbWhiteListIpAddress=impbWhiteListIpAddress, dot1qVlanEgressPorts=dot1qVlanEgressPorts, stpRootPort=stpRootPort, qosDiffServType04=qosDiffServType04, aclL3RulePortList=aclL3RulePortList, dot1xAuthReAuthEnabled=dot1xAuthReAuthEnabled, sysTrapStatus=sysTrapStatus, snmpV3HostInterfaceName=snmpV3HostInterfaceName, ipv4sysSNTPDSTEndDay=ipv4sysSNTPDSTEndDay, ipv4trustedHostEntry=ipv4trustedHostEntry, aclL3RuleEntry=aclL3RuleEntry, sslCipherSuiteList=sslCipherSuiteList, broadcastStormCtrlSettings=broadcastStormCtrlSettings, autoSurveillanceVlanPriority=autoSurveillanceVlanPriority, sysSNTPDSTEndMin=sysSNTPDSTEndMin, voiceVlanPriority=voiceVlanPriority, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, aclv6L3RuleTcpUrgBit=aclv6L3RuleTcpUrgBit, sysPortCtrlOperStatus=sysPortCtrlOperStatus, snmpV3UserName=snmpV3UserName, snmpV3HostAddress=snmpV3HostAddress, swTimeRangeEndMonth=swTimeRangeEndMonth, tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, companySyslog=companySyslog, companyTimeRangeMgmt=companyTimeRangeMgmt, qosDiffServType57=qosDiffServType57, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, ipv4aclProfileSrcIpAddrMask=ipv4aclProfileSrcIpAddrMask, qosDiffServType19=qosDiffServType19, swTimeRangeIndex=swTimeRangeIndex, sslCiphers=sslCiphers, ipv4syslogLogging=ipv4syslogLogging, swTimeRangeTuesday=swTimeRangeTuesday, dhcpv6RelayInterfaceSettingsTable=dhcpv6RelayInterfaceSettingsTable, rmonHistoryIndex=rmonHistoryIndex, swTimeRangeSunday=swTimeRangeSunday, dlinkGreenPortShutoffTimeProfile1=dlinkGreenPortShutoffTimeProfile1, staticMcastStatus=staticMcastStatus, snmpV3ViewTree=snmpV3ViewTree, dhcpBOOTPRelayOption82RemoteIDType=dhcpBOOTPRelayOption82RemoteIDType, dot1qVlanUngisterMCFilterEntry=dot1qVlanUngisterMCFilterEntry, impbBlackListTable=impbBlackListTable, tftpFwImageFileName=tftpFwImageFileName, ipv4dhcpServerScreenServerEntry=ipv4dhcpServerScreenServerEntry, qosDiffServType16=qosDiffServType16, stpHoldTime=stpHoldTime, snmpV3GroupName=snmpV3GroupName, snmpV3HostVersion=snmpV3HostVersion, snmpV3Community=snmpV3Community, voicevlanOUITelephonyOUI=voicevlanOUITelephonyOUI, qosDiffServType07=qosDiffServType07, aclv6L3RuleProtocol=aclv6L3RuleProtocol, poePortSettingPowerLimit=poePortSettingPowerLimit, sysDdpGlobalOnOff=sysDdpGlobalOnOff, ipv4sysIpAddrCfgMode=ipv4sysIpAddrCfgMode, companyTrafficMgmt=companyTrafficMgmt, aclv6L3RulePortList=aclv6L3RulePortList, impbWhiteListEntry=impbWhiteListEntry, staticEntry=staticEntry, syslogState=syslogState, swTimeRangeThursday=swTimeRangeThursday, neighborType=neighborType, sysSNTPSecondType=sysSNTPSecondType, rmonAlarmInterval=rmonAlarmInterval, companyTraps=companyTraps, ipv4aclProfileNo=ipv4aclProfileNo, aclProfileDstIpAddrMaskType=aclProfileDstIpAddrMaskType)
mibBuilder.exportSymbols("DGS-1210-10P_BX", qosDiffServType28=qosDiffServType28, rmonHistoryDataSource=rmonHistoryDataSource, sysLBDRecoverTime=sysLBDRecoverTime, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, dlinklldpReinitDelay=dlinklldpReinitDelay, dlinklldpState=dlinklldpState, sysPortCtrlFlowControl=sysPortCtrlFlowControl, stpGlobal=stpGlobal, stpPriority=stpPriority, swTimeRangeEndHour=swTimeRangeEndHour, aclProfileArpSenderIpAddrMask=aclProfileArpSenderIpAddrMask, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, dlinkGreenPortShutoffPortList=dlinkGreenPortShutoffPortList, swTimeRangeRowStatus=swTimeRangeRowStatus, trafficSegEntry=trafficSegEntry, traps=traps, voicevlanPortAutoDetection=voicevlanPortAutoDetection, companyStaticMAC=companyStaticMAC, aclv6L3RuleTcpFinBit=aclv6L3RuleTcpFinBit, snmpV3Trap=snmpV3Trap, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, trustedHostEntry=trustedHostEntry, sysGateway=sysGateway, RmonStatus=RmonStatus, rmonHistoryEntry=rmonHistoryEntry, tftpConfigTftpOperation=tftpConfigTftpOperation, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, rmonEventType=rmonEventType, sysSafeGuardEnable=sysSafeGuardEnable, sysLBDMode=sysLBDMode, rmonAlarmTable=rmonAlarmTable, rstpStatus=rstpStatus, securityTrafficSeg=securityTrafficSeg, ipv4sysGateway=ipv4sysGateway, aclv6L3RuleDstIpAddr=aclv6L3RuleDstIpAddr, poePowerDenied=poePowerDenied, sysSNTPSecondServer=sysSNTPSecondServer, snmpV3viewTreeName=snmpV3viewTreeName, sysLBDCtrlEntry=sysLBDCtrlEntry, sysTrapPortEvent=sysTrapPortEvent, ipv4snmpV3HostTable=ipv4snmpV3HostTable, ipv4aclProfileStatus=ipv4aclProfileStatus, voicevlanSystem=voicevlanSystem, snmpV3HostTable=snmpV3HostTable, aclv6L3RuleSrcIpAddr=aclv6L3RuleSrcIpAddr, securityIpMacPortBinding=securityIpMacPortBinding, cableDiagPair4TestResult=cableDiagPair4TestResult, ipv4aclProfileArpSenderIpAddrMask=ipv4aclProfileArpSenderIpAddrMask, sysSNTPFirstServer=sysSNTPFirstServer, dhcpServerScreenIPType=dhcpServerScreenIPType, igsQueryInterval=igsQueryInterval, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, impbInsIpPacPortState=impbInsIpPacPortState, stpBridgeHelloTime=stpBridgeHelloTime, companyVoiceVlan=companyVoiceVlan, aclProfileStatus=aclProfileStatus, portSecEntry=portSecEntry, ipv4sysSNTPDSTEndHour=ipv4sysSNTPDSTEndHour, sysSNTPFirstType=sysSNTPFirstType, snmpV3HostCommunityName=snmpV3HostCommunityName, swTimeRangeFriday=swTimeRangeFriday, dhcpServerScreenTrustedServerAddress=dhcpServerScreenTrustedServerAddress, staticAutoLearningList=staticAutoLearningList, qosDiffServType18=qosDiffServType18, lldpMEDPortControlTable=lldpMEDPortControlTable, aclProfileEntry=aclProfileEntry, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, staticMcastMac=staticMcastMac, stpAdminPortPathCost=stpAdminPortPathCost, stpPortPriority=stpPortPriority, qosDiffServType23=qosDiffServType23, cableDiagPair2FaultDistance=cableDiagPair2FaultDistance, cableDiagPair3FaultDistance=cableDiagPair3FaultDistance, qosDiffServType22=qosDiffServType22, stpPortTable=stpPortTable, autoSurveillanceVlanSystem=autoSurveillanceVlanSystem, aclv6L3RulePriority=aclv6L3RulePriority, ipv4sysSNTPDSTOffset=ipv4sysSNTPDSTOffset, rmonEventEntry=rmonEventEntry, aclL3RulePriority=aclL3RulePriority, ipifv6DHCPStatus=ipifv6DHCPStatus, companyCableDiagnostic=companyCableDiagnostic, ipv4dhcpServerScreenServerIndex=ipv4dhcpServerScreenServerIndex, autoSurveillanceVlanOUIStatus=autoSurveillanceVlanOUIStatus, cableDiagPair3TestResult=cableDiagPair3TestResult, sysDdpGeneralReportTimer=sysDdpGeneralReportTimer, qosDiffServType31=qosDiffServType31, staticMcastEgressPorts=staticMcastEgressPorts, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, aclL3Rule=aclL3Rule, snmpV3UserGroupName=snmpV3UserGroupName, snmpV3CommunityPolicy=snmpV3CommunityPolicy, voiceVlanId=voiceVlanId, companyGreenSetting=companyGreenSetting, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, firmwareUpgradeFailure=firmwareUpgradeFailure, stpTimeSinceTopologyChange=stpTimeSinceTopologyChange, qosDiffServType56=qosDiffServType56, dot1xAuth=dot1xAuth, sysSNTPPollInterval=sysSNTPPollInterval, dhcpLocalRelayEntry=dhcpLocalRelayEntry, dot1qVlanUngisterMCFilterTable=dot1qVlanUngisterMCFilterTable, poePortStatus=poePortStatus, qosDiffServType15=qosDiffServType15, voicevlanDeviceStatus=voicevlanDeviceStatus, aRPSpoofPreventEntry=aRPSpoofPreventEntry, poePowerOn=poePowerOn, qosDiffServType38=qosDiffServType38, sysPortCtrlIndex=sysPortCtrlIndex, aclL2ProfileID=aclL2ProfileID, qosDiffServType27=qosDiffServType27, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, companyACLGroup=companyACLGroup, qosDiffServType51=qosDiffServType51, stpTxHoldCount=stpTxHoldCount, ipv4aclProfileIPProtocol=ipv4aclProfileIPProtocol, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, dot1xAuthTxPeriod=dot1xAuthTxPeriod, cableDiagLengthinRange=cableDiagLengthinRange, snmpV3TrapPoePowerOnOff=snmpV3TrapPoePowerOnOff, neighborCacheState=neighborCacheState, dot1xAuthConfigPortTable=dot1xAuthConfigPortTable, neighborMACAddr=neighborMACAddr, rmonAlarm=rmonAlarm, voicevlanPortControlIndex=voicevlanPortControlIndex, igsVlanRouterEntry=igsVlanRouterEntry, snmpV3UserTable=snmpV3UserTable, qosDiffServType32=qosDiffServType32, ipv4sysSNTPTimeSeconds=ipv4sysSNTPTimeSeconds, autoSurveillanceVlanOUITable=autoSurveillanceVlanOUITable, cableDiagTriggerIndex=cableDiagTriggerIndex, poePortSettingPriority=poePortSettingPriority, dot1qVlanRowStatus=dot1qVlanRowStatus, staticPort=staticPort, ipv4dhcpServerScreenServerAddress=ipv4dhcpServerScreenServerAddress, igsVlanRtrPortList=igsVlanRtrPortList, poePortCurrent=poePortCurrent, poePortVoltage=poePortVoltage, qosTOSType05=qosTOSType05, rmonEventCommunity=rmonEventCommunity, ipifV6AddressTable=ipifV6AddressTable, staticMcastVlanID=staticMcastVlanID, sysGroupInterval=sysGroupInterval, qosDiffServType48=qosDiffServType48, qosTOSType04=qosTOSType04, bandwidthCtrlEntry=bandwidthCtrlEntry, ipv4sysSNTPPollInterval=ipv4sysSNTPPollInterval, qosDiffServType30=qosDiffServType30, stpTopChanges=stpTopChanges, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, swTimeRangeDate=swTimeRangeDate, stpForwardDelay=stpForwardDelay, companyQoSGroup=companyQoSGroup, voicevlanOUIEntry=voicevlanOUIEntry, staticMcastEntry=staticMcastEntry, dhcpBOOTPRelayOption82RemoteID=dhcpBOOTPRelayOption82RemoteID, aclv6L3RuleTcpAckBit=aclv6L3RuleTcpAckBit, swTimeRangeStartMonth=swTimeRangeStartMonth, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, sysIpSubnetMask=sysIpSubnetMask, dot1xAuthServerTimeout=dot1xAuthServerTimeout, qosDiffServType00=qosDiffServType00, swRadiusServerAddress=swRadiusServerAddress, impbSettingTable=impbSettingTable, qosDiffServType59=qosDiffServType59, sslSecurityHttpStatus=sslSecurityHttpStatus, companySNTPSetting=companySNTPSetting, ipv4aclProfileTable=ipv4aclProfileTable, aclv6L3RuleTcpPshBit=aclv6L3RuleTcpPshBit, aclL2RuleStatus=aclL2RuleStatus, dhcpBOOTPRelayInterface=dhcpBOOTPRelayInterface, ipv4sysSNTPState=ipv4sysSNTPState, sysPortCtrlMDI=sysPortCtrlMDI, sysSNTPSecondInterfaceName=sysSNTPSecondInterfaceName, poeLedMode=poeLedMode, staticMcastTable=staticMcastTable, aclProfileIPProtocol=aclProfileIPProtocol, aclL2RuleEntry=aclL2RuleEntry, autoSurveillanceVlanOUIMask=autoSurveillanceVlanOUIMask, dot1qVlanTable=dot1qVlanTable, rmonAlarmOwner=rmonAlarmOwner, qosDiffServType42=qosDiffServType42, ipv4snmpV3HostVersion=ipv4snmpV3HostVersion, sysSave=sysSave, ipv4snmpV3HostAddress=ipv4snmpV3HostAddress, aclProfile=aclProfile, impbBlackListVlanId=impbBlackListVlanId, qosDiffServTypeGroup=qosDiffServTypeGroup, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, qosDiffServType39=qosDiffServType39, portSecIndex=portSecIndex, ipifv6NSRetransmitTime=ipifv6NSRetransmitTime, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, ipifV6AddressRowStatus=ipifV6AddressRowStatus, topologyChange=topologyChange, dot3azEEEset=dot3azEEEset, impbWhiteListPort=impbWhiteListPort, dlinkGreenSystemHibernationState=dlinkGreenSystemHibernationState, pethPsePortPowerBudget=pethPsePortPowerBudget, dlinkGreenLEDShutoffState=dlinkGreenLEDShutoffState, rmonAlarmIndex=rmonAlarmIndex, impbWhiteListTable=impbWhiteListTable, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, securityTrustedHost=securityTrustedHost, poeportid=poeportid, tftpFwTftpOperation=tftpFwTftpOperation, igsVlan=igsVlan, portSecMLA=portSecMLA, qosDiffServType33=qosDiffServType33, aclL2RuleEtherType=aclL2RuleEtherType, companyMirror=companyMirror, impbDHCPPortState=impbDHCPPortState, laSystem=laSystem, ipv4trustedHostIpAddr=ipv4trustedHostIpAddr, aclv6L3RuleProfileNo=aclv6L3RuleProfileNo, dhcpBOOTPRelayHopCount=dhcpBOOTPRelayHopCount, qosDiffServType34=qosDiffServType34, aclv6L3RuleTcpUdpSrcPortMask=aclv6L3RuleTcpUdpSrcPortMask, aclv6L3RuleEntry=aclv6L3RuleEntry, lldpMEDPortControlIndex=lldpMEDPortControlIndex, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, qosDiffServType49=qosDiffServType49, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, companyDHCPLocalRelay=companyDHCPLocalRelay, sysHardwareVersion=sysHardwareVersion, dlinklldpConfigManAddrTable=dlinklldpConfigManAddrTable, sysPortCtrlType=sysPortCtrlType, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, impbBlackListMacAddress=impbBlackListMacAddress, companyIpifGroup=companyIpifGroup, rmonStatsEntry=rmonStatsEntry, rmonStatsOwner=rmonStatsOwner, dhcpv6RelayOption37State=dhcpv6RelayOption37State, tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, qosDiffServType11=qosDiffServType11, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, poeSystemSettingPowerThreshold=poeSystemSettingPowerThreshold, ipifv6GlobalStatus=ipifv6GlobalStatus, swTimeRangeName=swTimeRangeName, aclv6L3RuleTcpUdpDstPort=aclv6L3RuleTcpUdpDstPort, securitySSL=securitySSL, companyStaticMcast=companyStaticMcast, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit, aclProfileNo=aclProfileNo, stpPortAdminPointToPoint=stpPortAdminPointToPoint, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, companyTftpGroup=companyTftpGroup, portSecTable=portSecTable, rmonHistoryInterval=rmonHistoryInterval, qosDiffServType44=qosDiffServType44, aclL2RuleVlanId=aclL2RuleVlanId, qosDiffServType55=qosDiffServType55, impbSmartVlanId=impbSmartVlanId)
mibBuilder.exportSymbols("DGS-1210-10P_BX", sysSNTPDSTStartHour=sysSNTPDSTStartHour, dhcpServerScreenTrustedServerStatus=dhcpServerScreenTrustedServerStatus, syslogInterfaceName=syslogInterfaceName, dot1qVlanPortTable=dot1qVlanPortTable, laPortActorTimeout=laPortActorTimeout, ipv4aclProfileEntry=ipv4aclProfileEntry, ipv4syslogGeneralGroup=ipv4syslogGeneralGroup, voicevlanOUITable=voicevlanOUITable, snmpV3HostEntry=snmpV3HostEntry, dhcpServerScreenTrustedServerEntry=dhcpServerScreenTrustedServerEntry, impbSmartTable=impbSmartTable, ipv4syslogTimeStamp=ipv4syslogTimeStamp, igsVlanRouterVlanId=igsVlanRouterVlanId, ipv4trustedHostIpMask=ipv4trustedHostIpMask, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, ipv4trustedHostRowStatus=ipv4trustedHostRowStatus, trafficSegStatus=trafficSegStatus, staticStatus=staticStatus, dlinkGreenLEDShutoffPortList=dlinkGreenLEDShutoffPortList, impbSmartIpAddress=impbSmartIpAddress, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, dlinkGreenPortStandbyPortList=dlinkGreenPortStandbyPortList, impbBlackListPort=impbBlackListPort, swTimeRangeSettingTable=swTimeRangeSettingTable, snmpV3EngineID=snmpV3EngineID, swTimeRangeSaturday=swTimeRangeSaturday, dlinklldpLocManAddr=dlinklldpLocManAddr, ipv4sysSNTPDSTStartHour=ipv4sysSNTPDSTStartHour, dot1qVlanName=dot1qVlanName, aclL2AccessID=aclL2AccessID, aclL3RuleAction=aclL3RuleAction, impbSmartPort=impbSmartPort, impbSettingEntry=impbSettingEntry, voicevlanOUIMask=voicevlanOUIMask, autoSurveillanceVlanId=autoSurveillanceVlanId, autoSurveillanceVlanOUISurveillanceOUI=autoSurveillanceVlanOUISurveillanceOUI, impbWhiteListMacAddress=impbWhiteListMacAddress, qosDiffServType37=qosDiffServType37, sysSNTPDSTStartMon=sysSNTPDSTStartMon, ipv4aclProfileSrcMacAddrMask=ipv4aclProfileSrcMacAddrMask, dot1xAuthConfigPortSessionTime=dot1xAuthConfigPortSessionTime, swRadiusServerInterfaceName=swRadiusServerInterfaceName, snmpV3HostStatus=snmpV3HostStatus, companyLLDPSetting=companyLLDPSetting, qosDiffServType61=qosDiffServType61, snmpV3TrapBootup=snmpV3TrapBootup, dot1pPortIndex=dot1pPortIndex, aclL3RuleReplacePriority=aclL3RuleReplacePriority, aclv6L3RuleStatus=aclv6L3RuleStatus, laPortChannelEntry=laPortChannelEntry, dhcpBOOTPRelayOption82CheckState=dhcpBOOTPRelayOption82CheckState, laPortControlIndex=laPortControlIndex, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, companyRSTP=companyRSTP, dlinkGreenSystemHibernationTimeProfile1=dlinkGreenSystemHibernationTimeProfile1, rmonEventDescription=rmonEventDescription, bandwidthCtrlIndex=bandwidthCtrlIndex, stpMaxAge=stpMaxAge, ipv4trustedHostTable=ipv4trustedHostTable, ipv4sysIpSubnetMask=ipv4sysIpSubnetMask, dgs_1210_10pbx=dgs_1210_10pbx, laPortChannelMemberList=laPortChannelMemberList, firmwareChecksumError=firmwareChecksumError, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, qosDiffServType21=qosDiffServType21, dlinklldpConfigManAddrEntry=dlinklldpConfigManAddrEntry, companydot3azEEE=companydot3azEEE, tftpFwTftpOperationStatus=tftpFwTftpOperationStatus, rmonHistoryStatus=rmonHistoryStatus, poeportgroup=poeportgroup, staticMac=staticMac, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, snmpV3UserVersion=snmpV3UserVersion, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, voicevlanPortControlEntry=voicevlanPortControlEntry, ipifSupportV4V6Info=ipifSupportV4V6Info, stpBridgeForwardDelay=stpBridgeForwardDelay, dot1xAuthConfigPortNumber=dot1xAuthConfigPortNumber, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, poePortSettingUserDefineState=poePortSettingUserDefineState, broadcastStormCtrlThreshold=broadcastStormCtrlThreshold, poeShortCircuit=poeShortCircuit, sysSNTPDSTEndHour=sysSNTPDSTEndHour, autoSurveillanceVlanOUI=autoSurveillanceVlanOUI, snmpV3CommunityTable=snmpV3CommunityTable, aclProfileArpSenderMacAddrMask=aclProfileArpSenderMacAddrMask, igsVlanRouterTable=igsVlanRouterTable, qosDiffServType52=qosDiffServType52, aclL2RuleReplacePriority=aclL2RuleReplacePriority, snmpV3TrapPortLinkUpDown=snmpV3TrapPortLinkUpDown, firmwareUpgradeSuccess=firmwareUpgradeSuccess, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, aclL3RuleProtocol=aclL3RuleProtocol, ipifv6AutolinkloStatus=ipifv6AutolinkloStatus, snmpV3viewTreeType=snmpV3viewTreeType, igsVlanFilterEntry=igsVlanFilterEntry, ipv4snmpV3HostStatus=ipv4snmpV3HostStatus, impbSmartEntry=impbSmartEntry, sysSNTPDSTEndDay=sysSNTPDSTEndDay, rmonAlarmVariable=rmonAlarmVariable, qosDiffServType25=qosDiffServType25, sysSNTPFirstInterfaceName=sysSNTPFirstInterfaceName, sysSNTPState=sysSNTPState, qosDiffServType60=qosDiffServType60, dhcpv6RelayInterfaceSettingsRowStatus=dhcpv6RelayInterfaceSettingsRowStatus, ipv4sysSNTPSecondServer=ipv4sysSNTPSecondServer, laPortChannelTable=laPortChannelTable, companySNMPV3=companySNMPV3, dot1pPortTable=dot1pPortTable, trustedHostStatus=trustedHostStatus, dlinklldpAntiRoguePortIndex=dlinklldpAntiRoguePortIndex, trustedHostTable=trustedHostTable, companyMiscGroup=companyMiscGroup, snmpV3UserEntry=snmpV3UserEntry, firmwareTransferError=firmwareTransferError, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, dlinkGreenPortStandbyState=dlinkGreenPortStandbyState, sysDdp=sysDdp, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, syslogSrvSeverity=syslogSrvSeverity, dhcpBOOTPRelayOption82State=dhcpBOOTPRelayOption82State, voicevlanPortState=voicevlanPortState, companyAutoSurveillanceVlan=companyAutoSurveillanceVlan, ipifv6DefaultGateway=ipifv6DefaultGateway, qosDiffServType14=qosDiffServType14, sysTrapOverMaxPowerBudgetEvent=sysTrapOverMaxPowerBudgetEvent, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, stpPortDesignatedRoot=stpPortDesignatedRoot, dhcpServerScreenTrustedServerTable=dhcpServerScreenTrustedServerTable, syslogSrvIPType=syslogSrvIPType, rmonEventOwner=rmonEventOwner, poePowerOff=poePowerOff, qosTOSEnable=qosTOSEnable, aclv6L3RuleTrafficClass=aclv6L3RuleTrafficClass, snmpV3IPType=snmpV3IPType, aclL3RuleProfileNo=aclL3RuleProfileNo, tftpFwTargetGroup=tftpFwTargetGroup, qosDiffServType63=qosDiffServType63, tftpConfigTftpOperationStatus=tftpConfigTftpOperationStatus, dhcpLocalRelayTable=dhcpLocalRelayTable, staticVlanID=staticVlanID, impbBlackListStatus=impbBlackListStatus, sysSNTPGMTMinutes=sysSNTPGMTMinutes, aclL3RuleDscp=aclL3RuleDscp, sysLoginTimeoutInterval=sysLoginTimeoutInterval, qosDiffServType58=qosDiffServType58, syslogSrvRowStatus=syslogSrvRowStatus, voicevlanOUIDescription=voicevlanOUIDescription, autoSurveillanceVlanOUIComponentType=autoSurveillanceVlanOUIComponentType, dhcpBOOTPRelayManagement=dhcpBOOTPRelayManagement, snmpV3CommunityEntry=snmpV3CommunityEntry, sysTrapPoePowerErrorEvent=sysTrapPoePowerErrorEvent, rmonHistoryTable=rmonHistoryTable, dlinkPowerSavLinkStatusDetectState=dlinkPowerSavLinkStatusDetectState, stpPortEnable=stpPortEnable, tftpCfgTargetGroup=tftpCfgTargetGroup, stpBridgeMaxAge=stpBridgeMaxAge, dot1qVlanUngisterMCFiltermode=dot1qVlanUngisterMCFiltermode, stpPortDesignatedBridge=stpPortDesignatedBridge, dhcpv6RelayOption37=dhcpv6RelayOption37, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, bandwidthCtrlSettings=bandwidthCtrlSettings, dlinkGreenSystemHibernationTimeProfile2=dlinkGreenSystemHibernationTimeProfile2, dlinkGreenPortShutoffTimeProfile2=dlinkGreenPortShutoffTimeProfile2, rmonStatsStatus=rmonStatsStatus, qosTOSType06=qosTOSType06, ipv4syslogLogSrvAddr=ipv4syslogLogSrvAddr, dhcpBOOTPRelayOption82Policy=dhcpBOOTPRelayOption82Policy, dhcpBOOTPRelayState=dhcpBOOTPRelayState, voicevlanPortControlTable=voicevlanPortControlTable, sysIpAddr=sysIpAddr, sysIpAddrCfgMode=sysIpAddrCfgMode, sysSNTPDSTState=sysSNTPDSTState, impbSmartMacAddress=impbSmartMacAddress, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, poePortTimeBaseSchduleID=poePortTimeBaseSchduleID, snmpV3GroupReadViewName=snmpV3GroupReadViewName, ipv4sysSNTPDSTStartMon=ipv4sysSNTPDSTStartMon, igsVlanFastLeave=igsVlanFastLeave, aclProfileSrcPortMask=aclProfileSrcPortMask, trafficSegIfIndex=trafficSegIfIndex, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, rmonEventIndex=rmonEventIndex, laPortControlEntry=laPortControlEntry, BridgeId=BridgeId, dhcpv6RelayState=dhcpv6RelayState, poeOverLoad=poeOverLoad, qosTOSType02=qosTOSType02, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, sysFirmwareVersion=sysFirmwareVersion, snmpV3viewTreeStatus=snmpV3viewTreeStatus, qosDiffServType12=qosDiffServType12, aclL2RuleTable=aclL2RuleTable, qosDiffServType02=qosDiffServType02, sysDdpProtStatusEntry=sysDdpProtStatusEntry, aclProfileDstPortMask=aclProfileDstPortMask, LldpManAddress=LldpManAddress, snmpV3GroupStatus=snmpV3GroupStatus, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, ipv4sysSNTPDSTEndMon=ipv4sysSNTPDSTEndMon, stpPortDesignatedCost=stpPortDesignatedCost, dlinklldpAntiRoguePortStatus=dlinklldpAntiRoguePortStatus, aclv6L3RuleTcpUdpSrcPort=aclv6L3RuleTcpUdpSrcPort, Ipv6Address=Ipv6Address, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, broadcastStormCtrlGlobalOnOff=broadcastStormCtrlGlobalOnOff, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, sysTrapFirmUpgradeEvent=sysTrapFirmUpgradeEvent, companyIgsGroup=companyIgsGroup, rmonStatistics=rmonStatistics, securityDhcpServerScreen=securityDhcpServerScreen, qosDiffServType08=qosDiffServType08, sysSNTPDSTStartMin=sysSNTPDSTStartMin, voicevlanPortCurrentTagMode=voicevlanPortCurrentTagMode, impbSmartBinding=impbSmartBinding, voicevlanOUIStatus=voicevlanOUIStatus, syslogSrvEntry=syslogSrvEntry, ipifV6AddressEntry=ipifV6AddressEntry, qosDiffServType41=qosDiffServType41, swTimeRangeWednesday=swTimeRangeWednesday, dot1pPortPriority=dot1pPortPriority, sysDdpProtStatusIndex=sysDdpProtStatusIndex, aclv6L3RuleAccessID=aclv6L3RuleAccessID, autoSurveillanceVlanTaggedUplinkDownlinkPort=autoSurveillanceVlanTaggedUplinkDownlinkPort, ipifV6AddressMainIndex=ipifV6AddressMainIndex, lldpMEDPortControlEntry=lldpMEDPortControlEntry, autoSurveillanceVlanMode=autoSurveillanceVlanMode, neighborRowStatus=neighborRowStatus, sysPortCtrlEntry=sysPortCtrlEntry, dhcpBOOTPRelayServerIP=dhcpBOOTPRelayServerIP, sysDdpProtStatusTable=sysDdpProtStatusTable, dhcpv6RelayManagement=dhcpv6RelayManagement, poeSystemSettingDisconnectMethod=poeSystemSettingDisconnectMethod, qosDiffServType24=qosDiffServType24, lldpMEDPortState=lldpMEDPortState, qosDiffServType46=qosDiffServType46, sysTrapSystemEvent=sysTrapSystemEvent, aclv6L3RuleICMPMessageType=aclv6L3RuleICMPMessageType, qosTOSType07=qosTOSType07, aclProfileTable=aclProfileTable, impbPortState=impbPortState, voicevlanDevicePriority=voicevlanDevicePriority, laPortChannelMode=laPortChannelMode, Timeout=Timeout, ipv4radiusServerSharedSecret=ipv4radiusServerSharedSecret, qosDiffServType05=qosDiffServType05, rmonStatsIndex=rmonStatsIndex, neighborTable=neighborTable, dot1qVlanPortEntry=dot1qVlanPortEntry)
mibBuilder.exportSymbols("DGS-1210-10P_BX", PortLaMode=PortLaMode, qosDiffServType53=qosDiffServType53, qosDiffServType20=qosDiffServType20, snmpV3User=snmpV3User, sysTrapPoePowerOnOffEvent=sysTrapPoePowerOnOffEvent, dlinkGreenLEDShutoff=dlinkGreenLEDShutoff, stpPortProtocolMigration=stpPortProtocolMigration, ipv4aclProfileType=ipv4aclProfileType, dhcpv6RelayServerIP=dhcpv6RelayServerIP, ipv4sysSNTPDSTStartMin=ipv4sysSNTPDSTStartMin, snmpV3viewTreeMask=snmpV3viewTreeMask, aclv6L3RuleSrcIpAddrMask=aclv6L3RuleSrcIpAddrMask, dlinklldpLocManAddrSubtype=dlinklldpLocManAddrSubtype, radius=radius, qosDiffServType09=qosDiffServType09, qosTOS=qosTOS, aclv6L3RuleTcpSynBit=aclv6L3RuleTcpSynBit, dot3azEntry=dot3azEntry, aRPSpoofPreventTable=aRPSpoofPreventTable, aclL2RuleAction=aclL2RuleAction, qosDiffServType17=qosDiffServType17, snmpV3CommunityName=snmpV3CommunityName, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, companyRMON=companyRMON, qosDiffServType10=qosDiffServType10, dhcpBOOTPRelayManagementOption82=dhcpBOOTPRelayManagementOption82, voicevlanDeviceTable=voicevlanDeviceTable, aclL2RulePriority=aclL2RulePriority, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, sysTrapIP=sysTrapIP, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, dlinkGreenSystemHibernation=dlinkGreenSystemHibernation, tftpFwTargetImageFileName=tftpFwTargetImageFileName, sysDdpProtStatusControl=sysDdpProtStatusControl, dot1qVlanPvid=dot1qVlanPvid, qosDiffServType54=qosDiffServType54, qosDiffServ=qosDiffServ, swTimeRangeStartHour=swTimeRangeStartHour, stpPortForwardTransitions=stpPortForwardTransitions, qosDiffServType40=qosDiffServType40, stpPortOperPointToPoint=stpPortOperPointToPoint, qosDiffServType50=qosDiffServType50, dhcpServerScreenTrustedServerIndex=dhcpServerScreenTrustedServerIndex, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, swTimeRangeEndYear=swTimeRangeEndYear, dhcpBOOTPRelayTimeThreshold=dhcpBOOTPRelayTimeThreshold, aclProfileMask=aclProfileMask, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, tftpConfigFileName=tftpConfigFileName, impbAutoScanIpAddressTo=impbAutoScanIpAddressTo, dlinkGreenLEDShutoffTimeProfile1=dlinkGreenLEDShutoffTimeProfile1, dlinkGreenPortStandbyTimeProfile2=dlinkGreenPortStandbyTimeProfile2, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask, ipv4radiusServerAddress=ipv4radiusServerAddress, broadcastStormCtrlLimitType=broadcastStormCtrlLimitType, ipv4syslogUDPPort=ipv4syslogUDPPort, voiceVlanMode=voiceVlanMode, voiceVlanTimeout=voiceVlanTimeout, sysPortCtrlTable=sysPortCtrlTable, rmonGlobalState=rmonGlobalState, rmonEventTable=rmonEventTable, qosTOSType01=qosTOSType01, ipv4dhcpServerScreenServerStatus=ipv4dhcpServerScreenServerStatus, companyNeighbor=companyNeighbor, poePortClassification=poePortClassification, ipv4aclProfileArpSenderMacAddrMask=ipv4aclProfileArpSenderMacAddrMask, staticTable=staticTable, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, autoSurveillanceVlanOUIDescription=autoSurveillanceVlanOUIDescription, voicevlanDevice=voicevlanDevice, stpDesignatedRoot=stpDesignatedRoot, portSecState=portSecState, tftpFwTargetServerIpType=tftpFwTargetServerIpType, stpVersion=stpVersion, sysJumboFrameEnable=sysJumboFrameEnable, dlink_DGS12XXSeriesProd=dlink_DGS12XXSeriesProd, impbBlackListEntry=impbBlackListEntry, stpProtocolSpecification=stpProtocolSpecification, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, pethPsePortPowerConsumption=pethPsePortPowerConsumption, qosDiffServType01=qosDiffServType01, sysDdpGeneralReportOnOff=sysDdpGeneralReportOnOff, companyDot1xGroup=companyDot1xGroup, ipifV6AddressIpPrefix=ipifV6AddressIpPrefix, impbPortIndex=impbPortIndex, syslogTimeStampOption=syslogTimeStampOption, rmonAlarmEntry=rmonAlarmEntry, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, qosDiffServType62=qosDiffServType62, dlinklldpAntiRoguePassword=dlinklldpAntiRoguePassword, dlinkGreenPortShutoff=dlinkGreenPortShutoff, syslogSrvIP=syslogSrvIP, stpPort=stpPort, sysSNTPDSTStartDay=sysSNTPDSTStartDay, snmpV3ViewTreeTable=snmpV3ViewTreeTable, companyLA=companyLA, d_link=d_link, ipv4aclProfileMask=ipv4aclProfileMask, pethPsePortPowerRemainder=pethPsePortPowerRemainder, companyPoEGroup=companyPoEGroup, stpPortEdge=stpPortEdge, trafficSegTable=trafficSegTable, snmpV3Group=snmpV3Group, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, dhcpv6RelayInterfaceSettingsEntry=dhcpv6RelayInterfaceSettingsEntry, aclL3RuleAccessID=aclL3RuleAccessID, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, aclv6L3RuleTable=aclv6L3RuleTable, aclL3RuleTable=aclL3RuleTable, impbWhiteListRowStatus=impbWhiteListRowStatus, igsSystem=igsSystem, snmpV3UserStatus=snmpV3UserStatus, companySystem=companySystem, laPortChannelIfIndex=laPortChannelIfIndex, securityPortSecurity=securityPortSecurity, neighborIfindex=neighborIfindex, ipv4dhcpServerScreenServerTable=ipv4dhcpServerScreenServerTable, qosDiffServType03=qosDiffServType03, cableDiagPair1TestResult=cableDiagPair1TestResult, dlinklldpRemOrgDefInfoOUI=dlinklldpRemOrgDefInfoOUI, laPortControl=laPortControl, ipv4sysSNTPDSTState=ipv4sysSNTPDSTState, companyDot1qVlanGroup=companyDot1qVlanGroup, qosDiffServType45=qosDiffServType45, aclL2Rule=aclL2Rule, syslogSrvFacility=syslogSrvFacility, cableDiagPair4FaultDistance=cableDiagPair4FaultDistance, sysLBDStateEnable=sysLBDStateEnable, igsReportToAllPort=igsReportToAllPort, rmonStatsDataSource=rmonStatsDataSource, poePortDelayPowerDetect=poePortDelayPowerDetect, ipv4snmpV3HostEntry=ipv4snmpV3HostEntry, igsStatus=igsStatus, aclL2RuleInPortList=aclL2RuleInPortList, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, dlinkGreenPortShutoffState=dlinkGreenPortShutoffState, dhcpBOOTPRelayControl=dhcpBOOTPRelayControl, dot1xAuthMaxReq=dot1xAuthMaxReq, trustedHostRowStatus=trustedHostRowStatus, aclv6L3RuleICMPMessageCode=aclv6L3RuleICMPMessageCode, sysSystemPassword=sysSystemPassword, sysMirrorStatus=sysMirrorStatus, ipv4sysSNTPDSTStartDay=ipv4sysSNTPDSTStartDay, swTimeRangeEndMinute=swTimeRangeEndMinute, dlinkGreenPortStandby=dlinkGreenPortStandby, dlinklldpAntiRoguePortControl=dlinklldpAntiRoguePortControl, igsVlanRouterPortList=igsVlanRouterPortList, aclProfileRuleCount=aclProfileRuleCount, swTimeRangeStartMinute=swTimeRangeStartMinute, sysLocationName=sysLocationName, igsVlanCfgQuerier=igsVlanCfgQuerier, igsVlanQueryInterval=igsVlanQueryInterval, LacpKey=LacpKey, dot1qVlanUngisterMCFilterVlanId=dot1qVlanUngisterMCFilterVlanId, stpPortRestrictedRole=stpPortRestrictedRole, securityARPSpoofPrevent=securityARPSpoofPrevent, sysLBDCtrlIndex=sysLBDCtrlIndex, stpPortEntry=stpPortEntry)
