#
# PySNMP MIB module PACKET-VX-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKET-VX-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
pvxESrvcBWPrflEvtNotifications, pvxERPSSrvcNNIEvtNotifications, pvxSUniEvtNotifications, evtCodeType, pvxSlaMsmtEvtNotifications, eventNotifications, pvxBridge, tcaMontype, pvxL2IntfPortTypeIdx, mstpNotificationObjects, performance, trapSeqNum, pvxL2IntfShelfIdx, condServiceAffecting, condDateAndTime, evtObjectType, lagCondNotifications, pvxL2IntfSubPortNumber, pvxERPSSrvcEvtNotifications, erpsCondNotifications, pvxESrvcEvtNotifications, pvxL2IntfSwitchIdx, mstpCondNotifications, tcaDateAndTime, pvxL2IntfSlotIdx, condSeverity, tcaValue, evtDescription, pvxL2IntfPortIdx, mstpEvtNotifications, swMemberCondNotifications, condReportType, tcaThreshold, condDescription, pvxObjects, condObjectType, condCodeType, evtDateAndTime = mibBuilder.importSymbols("BTI-7000-MIB", "pvxESrvcBWPrflEvtNotifications", "pvxERPSSrvcNNIEvtNotifications", "pvxSUniEvtNotifications", "evtCodeType", "pvxSlaMsmtEvtNotifications", "eventNotifications", "pvxBridge", "tcaMontype", "pvxL2IntfPortTypeIdx", "mstpNotificationObjects", "performance", "trapSeqNum", "pvxL2IntfShelfIdx", "condServiceAffecting", "condDateAndTime", "evtObjectType", "lagCondNotifications", "pvxL2IntfSubPortNumber", "pvxERPSSrvcEvtNotifications", "erpsCondNotifications", "pvxESrvcEvtNotifications", "pvxL2IntfSwitchIdx", "mstpCondNotifications", "tcaDateAndTime", "pvxL2IntfSlotIdx", "condSeverity", "tcaValue", "evtDescription", "pvxL2IntfPortIdx", "mstpEvtNotifications", "swMemberCondNotifications", "condReportType", "tcaThreshold", "condDescription", "pvxObjects", "condObjectType", "condCodeType", "evtDateAndTime")
btiModules, = mibBuilder.importSymbols("BTI-MIB", "btiModules")
InetAddressType, ProfileNameType, PvxPortType, SwitchIdxType, CondReportType, InitializeCmd, FixedX1000, CondServiceAffecting, InetAddress, AdminStatus, ProtocolActionType, OperStatus, FixedX100, MonitorPeriodType, CondSeverity, PMIntervalType, CirTestResult, Unsigned64, MirrorConfigType, PmTestCmdState, PMValidity, CommandStateType, SlaTestRole = mibBuilder.importSymbols("BTI-TC-MIB", "InetAddressType", "ProfileNameType", "PvxPortType", "SwitchIdxType", "CondReportType", "InitializeCmd", "FixedX1000", "CondServiceAffecting", "InetAddress", "AdminStatus", "ProtocolActionType", "OperStatus", "FixedX100", "MonitorPeriodType", "CondSeverity", "PMIntervalType", "CirTestResult", "Unsigned64", "MirrorConfigType", "PmTestCmdState", "PMValidity", "CommandStateType", "SlaTestRole")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, IpAddress, Counter32, iso, Gauge32, MibIdentifier, ObjectIdentity, TimeTicks, Bits, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "IpAddress", "Counter32", "iso", "Gauge32", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Bits", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
RowStatus, TruthValue, MacAddress, TimeInterval, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "MacAddress", "TimeInterval", "DisplayString", "TextualConvention", "DateAndTime")
packetVxBridgeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 18070, 1, 5))
packetVxBridgeMib.setRevisions(('2013-04-03 12:00', '2012-12-20 12:00', '2012-12-06 12:00', '2012-06-20 12:00', '2012-02-10 12:00', '2011-06-23 12:00', '2010-08-06 12:00', '2010-06-18 12:00', '2010-02-12 12:00', '2008-12-19 12:00', '2008-03-10 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: packetVxBridgeMib.setRevisionsDescriptions(('MIB Updates for BTI 7000 Rel 11.1.0: - added CcmLinkDetection attribute to the PvxERPSServiceNNIEntry entry to allow CCM messages to be disabled or enabled as the link status detection method', 'MIB Updates for BTI 7000 Rel 10.2.3: - added cfmDestinationAddress attribute to the pvxSwitchTable entry to allow CCM messages to have a unicast/multicast addressing', 'MIB Updates for BTI 7000 Rel 10.2.3: - added trap cfmRMepStateChangeEvt to provide a remote MEP state change alert.', 'MIB Updates for BTI 7000 Rel 10.2.0: - added pvxSwitchErpsVlanPropagate to provide an option to user on how the user traffic is converged during ERPS ring failures. - added pvxLGMinLinks to support minimum number of links to be active in a link aggregation group for it to be active. - added pvxClassMapCVlanEndFilter to support C-VLAN range in a class of service.', 'MIB Updates for BTI 7000 Rel 9.2.0: - Deprecated pvxVlanPortIngressFiltering in pvxVlanPortTable - removed pvxSwitchMemberAdminState object from the SwitchMemberTable - added new object pvxMSTPPortLoopGuardState - expanded range of pvxUNICPVid value to 0..4094 and set the default value to 0 - changed the status of pvxL2IntfIngressFiltering object to deprecated - expanded size range of pvxERPSSrvcNNIMEName object to 1..6', 'MIB Updates for BTI 7000 Rel 8.2.1: - Added eptree and evptree to pvxEthSrvcType to support ETREE services - Added pvxSrvsUNIForwarding to PvxServiceUNIEntry to support ETREE services - Added attributes to the PVXSwitchModule and PVXSwitchMember tables to support stacking - Port numbering changes on multiple tables: Static Multicast, Static Unicast, Multicast Group, MSTPXstTable - Added pvxLGMaxLinks to support Active/Standby LAG - Added service-Map to pvxClassMapType to support per-flow services - Added pvxSrvcUNIServiceMap and pvxSrvcUNIFilterSequence to support per-flow services - Added pvxSrvcUNIEFPSDEnabled to support EFPSD - Added new tables pvSLAMeasurementProfileTable, pvxEServiceSlaCrntPMTable, pvxEServiceSlaHistPMTable, pvxEServieSlaPMThresholdTable, pvxSLAThroughputTestTable, pvxSLAMsmtInitiatorDBTable, and pvxSLAMsmtResponderDBTable to support the Y.1731 SLA Measurement feature - Added trap pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent', 'MIB Updates for BTI 7000 Rel 8.1.0: - changed range of objects representing a slot number to support new 7200 shelf which has 20 slots', 'MIB Updates for BTI 7000 Rel 7.3.2. - changed the following tables to use ESrvcVlanId rather than ESrvcName as index value: - pvxMepListTable - pvxEcfmMepDbTable - pvxEcfmLtrTable - removed unused pvxEcfmConfigErrorListTable', 'MIB Updates for BTI 7000 Rel 7.3.0. Existing tables modified to support PVX ECFM, management VLAN and GVRP functions: - pvxSwitchTable - pvxEthServiceTable - pvxServiceUNITable - Deprecated pvxVlanEgressPortTable and pvxVlanDeleteCounterTable New tables added to support PVX ECFM, management VLAN, ERPS and GVRP services: - pvxMepListTable - pvxEcfmMepTable - pvxEcfmMepDbTable - pvxEcfmMipTable - pvxEcfmConfigErrorListTable - pvxY1731LbStatsTable - pvxEcfmLtrTable - pvxMgmtVLANTable - pvxServiceNNITable - pvxERPSServiceNNITable - pvxERPSServiceTable - pvxDynamicVlanPortTable New tables to support the statistic monitoring of the Ethernet servcies: - pvxESrvcCrntPMTable - pvxESrvcHistPMTable - pvxESrvcBWPrflCrntPMTable - pvxESrvcBWPrflHistPMTable - pvxESrvcBWPrflPMThresholdTable - pvxERPSPortCrntPMTable - pvxERPSPortHistPMTable New events defined: - pvxESrvcBWPrflBDWUtlzTcaEvt - pvxESrvcOperStateChangeEvt - pvxERPSSrvcNNIProtectionSwitchChangeEvent', 'MIB Updates for BTI 7000 Rel 7.1.2: Completion of SNMP coverage for Packet VX. - Remove pvxServiceMapTable - Add pvxPbCVidRegistrationTable - Modify pvxCtrlFrmProfileTable - Add pvxTunnmacAddrProfileTable - Add AdminStatus, operStatus, and MTU attributes to pvxLagGroupTable - Add MSTP notification objects. - Add condition notifications and event notifications for ethernet interface, L2 interface, MSTP and LAG. - Add PM tables for ethernet interface, L2 interface, MSTP protocol and LAG. - Other modified tables include: pvxSwitchTable, pvxL2IntfTable, pvxLagTable, pvxVlanTable, pvxMSTPGenTable, and pvxMSTPMapTable.', 'MIB Updates for BTI 7000 Rel 7.1.2: Completion of SNMP coverage for Packet VX. New and expanded tables and other objects include: - pvxSwitchTable - pvxSwitchMemberTable',))
if mibBuilder.loadTexts: packetVxBridgeMib.setLastUpdated('201304031200Z')
if mibBuilder.loadTexts: packetVxBridgeMib.setOrganization('BTI Systems Inc.')
if mibBuilder.loadTexts: packetVxBridgeMib.setContactInfo('Technical Support BTI Systems Inc. 200-1000 Innovation Drive Ottawa, Ontario, Canada K2K 3E7 (613) 287-1700 support@btisystems.com')
if mibBuilder.loadTexts: packetVxBridgeMib.setDescription('The external MIB definitions for the PacketVX Module on the BTI 7000 series products.')
class PvxPhyPort(DisplayString):
    description = 'Port list in the format of shelf/slot/porttype/portNum. shelf: 1, 11, 21, or 31 shot: 1 - 20 porttype: 1 - GE, 2 - 10GE portnum: 1-24 '
    status = 'current'

class PvxPhyPortList(DisplayString):
    description = 'Port list in the format of shelf/slot/porttype/portNum. shelf: 1, 11, 21, or 31 shot: 1 - 20 porttype: 1 - GE, 2 - 10GE portnum: 1-24 '
    status = 'current'

class PvxL2PortList(DisplayString):
    description = 'Port list in the format of switch/shelf/slot/porttype/portNum. switch: 1 - 11 shelf: 1, 11, 21, or 31 shot: 1 - 20 porttype: 1 - GE, 2 - 10GE portnum: 1-24 '
    status = 'current'

class PvxVLANPortList(DisplayString):
    description = 'Port list in the format of shelf/slot{ports}. for example: L{1,4};1/1{g2,g6,x1} or: 11/3{g1,g2,g3,x2} The sub-list indicated by L indicates the LAG ports. The sub-list indicated by the shelf/slot pair contains entries for the non-lag ports. They are qualified by g for gigabit ports and x for ten-gigabit ports.'
    status = 'current'

class PvxL2Port(DisplayString):
    description = 'Port list in the format of switch/shelf/slot/porttype/portNum. switch: 1 - 11 shelf: 1, 11, 21, or 31 shot: 1 - 20 porttype: 1 - GE, 2 - 10GE portnum: 1-24 '
    status = 'current'

class PvxVlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PvxMSTPVlanList(TextualConvention, OctetString):
    description = 'a binary string representation'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

class PvxPCPDecodingList(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("priority7", 1), ("prioirty7-DE", 2), ("priority6", 3), ("priority6-DE", 4), ("priority5", 5), ("priority5-DE", 6), ("priority4", 7), ("priority4-DE", 8), ("priority3", 9), ("priority3-DE", 10), ("priority2", 11), ("priority2-DE", 12), ("priority1", 13), ("priority1-DE", 14), ("priority0", 15), ("priority0-DE", 16))

class PvxPolicyDropAction(TextualConvention, Integer32):
    description = 'Policy drop action definiiton.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("drop", 1), ("doNotDrop", 2), ("notDefined", 3))

class PvxQoSColorMode(TextualConvention, Integer32):
    description = 'Color aware action definiiton.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("color-aware", 1), ("color-blind", 2))

class PvxQoSPmCounterMode(TextualConvention, Integer32):
    description = 'Counter mode for policy action definiiton.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("count-violate", 1), ("count-cnfrm", 2), ("count-cnfrmAndExceed", 3), ("count-violateAndExceec", 4), ("notUsed", 5))

class PvxCVidMapOperStatus(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("programmed", 1), ("notProgrammed", 2))

class PvxEcfmTransmitStatus(TextualConvention, Integer32):
    description = 'An enumerated value indicates whether LBM or LTM trasmission can be initiated. ready(1) Indicates LTM or LBM transmission can be initiated. notReady(2) Indicates LTM or LBM transmission can not be initiated. transmit(3) To initiate the transmission of LBM or LTM. NOTE: A 2 value is used to initiate LBM or LTM transmission.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ready", 1), ("notReady", 2), ("transmit", 3))

class PvxEcfmMepDefects(TextualConvention, Bits):
    description = 'A MEP can detect and report a number of defects, and multiple defects can be present at the same time. These defects are: remoteMepDefect(1) A remote MEP is reported the RDI bit in its last CCM. macStatusDefect(2) Either some remote MEP is reporting its Interface Status TLV as not isUp, or all remote MEPs are reporting a Port Status TLV that contains some value other than psUp. remoteCCMDefect(3) The MEP is not receiving valid CCMs from at least one of the remote MEPs. errorCCMDefect(4) The MEP has received at least one invalid CCM whose CCM Interval has not yet timed out. xConnCCMDefect(5) The MEP has received at least one CCM from either another MAID or a lower MD Level whose CCM Interval has not yet timed out.'
    status = 'current'
    namedValues = NamedValues(("remoteMepDefect", 0), ("macStatusDefect", 1), ("remoteCCMDefect", 2), ("errorCCMDefect", 3), ("xConnCCMDefect", 4))

class PvxY1731MepDefects(TextualConvention, Bits):
    description = 'A MEP can detect and report a number of defects, and multiple defects can be present at the same time. These defects conditions are: remoteMepDefectCondition (1) The MEP has encountered remote MEP defect condition. lossOfContinuity (2) The MEP has encountered loss of continuity defect condition. bDefUnexpectedPeriod (3) The MEP has encountered unexpected period defect condition. unexpectedPeriod (4) The MEP has encountered unexpected MEP defect condition. misMerge (5) The MEP has encountered mismerge defect condition. unexpectedMegLevel (6) The MEP has encountered unexpected MEG level defect condition. localLinkFailure (7) The MEP has encountered local link failure defect condition. internalHWFailure (8) The MEP has encountered internal hardware failure defect condition. internalSWFailure (9) The MEP has encountered internal software failure defect condition. aisCondition(10) The MEP has encountered alarm indication defect condition. lckCondition(11) The MEP has encountered locked defect condition. '
    status = 'current'
    namedValues = NamedValues(("remoteMepDefectCondition", 0), ("lossOfContinuity", 1), ("unexpectedPeriod", 2), ("unexpectedMep", 3), ("misMerge", 4), ("unexpectedMegLevel", 5), ("localLinkFailure", 6), ("internalHWFailure", 7), ("internalSWFailure", 8), ("aisCondition", 9), ("lckCondition", 10))

class PvxEcfmRemoteMepState(TextualConvention, Integer32):
    description = 'Operational state of the remote MEP state machine. This state machine monitors the reception of valid CCMs from a remote MEP with a specific MEPID. It uses a timer that expires in 3.5 times the length of time indicated by the dot1agCfmMaCcmInterval object. rMepIdle(1) Momentary state during reset. rMepStart(2) The timer has not expired since the state machine was reset, and no valid CCM has yet been received. rMepFailed(3) The timer has expired, both since the state machine was reset, and since a valid CCM was received. rMepOk(4) The timer has not expired since a valid CCM was received.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("rMepIdle", 1), ("rMepStart", 2), ("rMepFailed", 3), ("rMepOk", 4))

class PvxEcfmConfigErrors(TextualConvention, Bits):
    description = "While making the MIP creation evaluation described in 802.1ag clause 22.2.3, the management entity can encounter errors in the configuration. These are possible errors that can be encountered: CFMleak(0) MA x is associated with a specific VID list, one or more of the VIDs in MA x can pass through the Bridge Port, no Down MEP is configured on any Bridge Port for MA x, and some other MA y, at a higher MD Level than MA x, and associated with at least one of the VID(s) also in MA x, does have a MEP configured on the Bridge Port. conflictingVids(1) MA x is associated with a specific VID list, an Up MEP is configured on MA x on the Bridge Port, and some other MA y, associated with at least one of the VID(s) also in MA x, also has an Up MEP configured on some Bridge Port. ExcessiveLevels(2) The number of different MD Levels at which MIPs are to be created on this port exceeds the Bridge's capabilities (see subclause 22.3). OverlappedLevels(3) A MEP is created for one VID at one MD Level, but a MEP is configured on another VID at that MD Level or higher, exceeding the Bridge's capabilities."
    status = 'current'
    namedValues = NamedValues(("cfmLeak", 0), ("conflictingVids", 1), ("excessiveLevels", 2), ("overlappedLevels", 3))

class PvxEcfmRelayActionFieldValue(TextualConvention, Integer32):
    description = 'Possible values the Relay action field can take.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rlyHit", 1), ("rlyFdb", 2), ("rlyMpdb", 3))

class PvxEcfmIngressActionFieldValue(TextualConvention, Integer32):
    description = 'Possible values returned in the ingress action field.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ingOk", 1), ("ingDown", 2), ("ingBlocked", 3), ("ingVid", 4))

class PvxEcfmEgressActionFieldValue(TextualConvention, Integer32):
    description = 'Possible values returned in the egress action field.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("egrOK", 1), ("egrDown", 2), ("egrBlocked", 3), ("egrVid", 4))

class PvxErpsVirtualLinkList(DisplayString):
    description = 'VIRTUAL-LINK list in the format of vlan-ids delimited by comas. for example: 100,200,300'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 64)

class PvxESrvcBWPrflPMThresholdLevelType(TextualConvention, Integer32):
    description = 'The type of threshold level used to generate threshold crossing alerts against perEVC and perCoS instances.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("min15CIR", 1), ("min15EIR", 2), ("day1CIR", 3), ("day1EIR", 4))

class PvxStackingPortCommState(TextualConvention, Integer32):
    description = 'Virtual switch stacking port communication state values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noConnection", 1), ("connectionOk", 2))

pvxBridgeServices = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2))
pvxBridgeProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3))
pvxBridgeGVRP = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 5))
pvxEcfmService = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21))
cfmRMepStateChangeEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 36))
pvxVlanPortLastBpduOriginChangeEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 37))
pvxVlanPortAddDynamicVlanEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 38))
pvxVlanPortRemoveDynamicVlanEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 39))
pvxSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1), )
if mibBuilder.loadTexts: pvxSwitchTable.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchTable.setDescription('This table is used to configure the switching related properties of a virtual switch.')
pvxSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchIdx"))
if mibBuilder.loadTexts: pvxSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchEntry.setDescription('')
pvxSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchIdx.setDescription('An index represents the switch ID. It can be from 1 to 11.')
pvxSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("q-bridge", 1), ("provider-bridge", 2))).clone('provider-bridge')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMode.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMode.setDescription('Sets the top-level operational mode for the packetVX Switch, which is based on the VLAN tagging scheme (802.1Q or 802.1ad) employed by the customer. ')
pvxSwitchInnerEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchInnerEthType.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchInnerEthType.setDescription('The inner ethertype (802.1Q) is configurable (switch-level only); enhancement for customers who want/need to support a C-Tag ethertype other than the standard 0x8100 value. Note: this should not be confused with the OuterEtherTypeDot1ad port attribute, which is used to define the ethertype for the S-Tag. This object only applies when the switch is operating in 802.1q mode.')
pvxSwitchLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchLearning.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchLearning.setDescription('This attribute used to enable/disable the MAC learning of the bridge. MAC Learning can be enabled to populate the Forwarding Database (FDB) and achieve unicast behavior based on a MAC lookup operation.')
pvxSwitchAgingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchAgingTimer.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchAgingTimer.setDescription('When learning and aging are enabled, FDB entries will age out according to the timer value. The aging timer for a particular FDB entry (source MAC address) is reset when it is learned or re-learned.')
pvxSwitchTimeToAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchTimeToAge.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchTimeToAge.setDescription('')
pvxSwitchMasterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMasterNode.setStatus('deprecated')
if mibBuilder.loadTexts: pvxSwitchMasterNode.setDescription('This is a read-only attribute used to inform the user as to the amount of time remaining before the next aging cycle - the time at which FDB entries may be deleted as a result of aging.')
pvxSwitchForceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchForceSwitch.setStatus('deprecated')
if mibBuilder.loadTexts: pvxSwitchForceSwitch.setDescription('')
pvxSwitchClearDynamicFDBEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchClearDynamicFDBEntries.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchClearDynamicFDBEntries.setDescription("An action trigger object. Setting the value of this object to 'true' will cause the switch to clear out all of the dynamic MAC address table entries in its forwarding databse table, forcing the switch to relearn all its dynamic entries. When reading this object, the value 'false' will always be returned.")
pvxSwitchProtocolAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchProtocolAdminState.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchProtocolAdminState.setDescription('Bit map indicating protocols enabled on the switch. A value of one in the bit map means the corresponding protocol is enabled. Zero means the protocol is disabled. The bit definition is as follow: mstp(0) lacp(1) ieee802dot1x(2) gvrp(3) igmp(4) 802.1ag(5) Y.1731(6) ccmOffload(7) erps(8) slaMeasurement(9)')
pvxSwitchTunnMacAddrProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 12), ProfileNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchTunnMacAddrProfile.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchTunnMacAddrProfile.setDescription(' The name of the Tunnel MAC Address profile used by the switch. ')
pvxSwitchEvcMEGName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchEvcMEGName.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchEvcMEGName.setDescription('Name of the EVC Maintanence Entity Group. Maximum length is 6 characters. Default value is set to BTI by the system.')
pvxSwitchEvcMEGLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchEvcMEGLevel.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchEvcMEGLevel.setDescription('The EVC Maintanence Entity Group Level.')
pvxSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchName.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchName.setDescription('The switch name string.')
pvxSwitchMIPAutoCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMIPAutoCreate.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMIPAutoCreate.setDescription('This field controls MIP auto-creation funcion. When set true, MIPs are created automatically.')
pvxSwitchMIPAutoCreateMEL = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMIPAutoCreateMEL.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMIPAutoCreateMEL.setDescription('The maintanence entity Level at which MIPs are auto created.')
pvxSwitchStackingPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchStackingPrimary.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchStackingPrimary.setDescription('The instance number of the primary PacketVX.')
pvxSwitchStackingTimeAsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchStackingTimeAsPrimary.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchStackingTimeAsPrimary.setDescription('The number of seconds that the stacking primary has remained as primary.')
pvxSwitchErpsVlanPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("slow", 2))).clone('fast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchErpsVlanPropagate.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchErpsVlanPropagate.setDescription('This provides option the user to control how the user traffic needs to be converged in case of ERPS ring failures. With fast option, user traffic converges in the order of ERPS times. The side effect is there is redundant traffic all over rings. With slow option, user traffic flows on the shortest possible path. There is no extra traffic all over the ring. But, when ERPS ring failures occur, the convergence times will not be in the order of ERPS convergence times.')
pvxSwitchCfmDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchCfmDestinationAddress.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCfmDestinationAddress.setDescription('This provides an option to the user to control CCM message destination address which will scale down time necessary to process CCM messages.')
pvxSwitchIntfBouncingTimerPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchIntfBouncingTimerPeriod.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchIntfBouncingTimerPeriod.setDescription('A timer interval in seconds used to detect port bouncing state.')
pvxSwitchCpuRLCos0PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0PPS.setDescription('packets per sec for queue 0 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos1PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1PPS.setDescription('packets per sec for queue 1 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos2PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2PPS.setDescription('packets per sec for queue 2 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos3PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3PPS.setDescription('packets per sec for queue 3 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos4PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4PPS.setDescription('packets per sec for queue 4 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos5PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5PPS.setDescription('packets per sec for queue 5 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos6PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6PPS.setDescription('packets per sec for queue 6 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos7PPS = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7PPS.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7PPS.setDescription('packets per sec for queue 7 used to set pps for cpu-rate-limit.')
pvxSwitchCpuRLCos0DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0DEPTH.setDescription('number of packets for queue 0 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos1DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1DEPTH.setDescription('number of packets for queue 1 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos2DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2DEPTH.setDescription('number of packets for queue 2 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos3DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3DEPTH.setDescription('number of packets for queue 3 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos4DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4DEPTH.setDescription('number of packets for queue 4 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos5DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5DEPTH.setDescription('number of packets for queue 5 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos6DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6DEPTH.setDescription('number of packets for queue 6 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos7DEPTH = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7DEPTH.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7DEPTH.setDescription('number of packets for queue 7 used to set DEPTH for cpu-rate-limit.')
pvxSwitchCpuRLCos0BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos0BURST.setDescription('burst size for queue 0 used to set BURST for cpu-rate-limit.')
pvxSwitchCpuRLCos1BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos1BURST.setDescription('burst size for queue 1 used to set BURST for cpu-rate-limit.')
pvxSwitchCpuRLCos2BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos2BURST.setDescription('burst size for queue 2 used to set BURST for cpu-rate-limit.')
pvxSwitchCpuRLCos3BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos3BURST.setDescription('burst size for queue 3 used to set BURST for cpu-rate-limit.')
pvxSwitchCpuRLCos4BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos4BURST.setDescription('burst size for queue 4 used to set BURST for cpu-rate-limit.')
pvxSwitchCpuRLCos5BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos5BURST.setDescription('burst size for queue 5 used to set BURST for cpu-rate-limit.')
pvxSwitchCpuRLCos6BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos6BURST.setDescription('burst size for queue 6 used to set BURST for cpu-rate-limit.')
pvxSwitchCpuRLCos7BURST = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7BURST.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLCos7BURST.setDescription('burst size for queue 7 used to set BURST for cpu-rate-limit.')
pvxSwitchMirrorFromCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 47), MirrorConfigType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMirrorFromCpu.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMirrorFromCpu.setDescription('Mirror from CPU. CPU can not be configured as a MTP port.')
pvxSwitchLldpTrapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchLldpTrapInterval.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchLldpTrapInterval.setDescription('LLDP time intervalbetween RemoteChange traps.')
pvxSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchRowStatus.setDescription('Used to control the addition and deletion of entries in the switch table, which in turn controls provisioning and deprovisioning of the switches.')
pvxSwitchMemberTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2), )
if mibBuilder.loadTexts: pvxSwitchMemberTable.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberTable.setDescription('This table is used to configure the members of a virtual switch. Each member corresponds to the physical pack in the system.')
pvxSwitchMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberInstIdx"))
if mibBuilder.loadTexts: pvxSwitchMemberEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberEntry.setDescription('')
pvxSwitchMemberIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxSwitchMemberIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberIdx.setDescription('An index represents the switch ID. It can be from 1 to 11.')
pvxSwitchMemberInstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxSwitchMemberInstIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberInstIdx.setDescription('An index represents the member ID. It can be from 1 to 2.')
pvxSwitchMemberShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMemberShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberShelfId.setDescription('The number of the shelf on which the member is provisioned.')
pvxSwitchMemberSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMemberSlotId.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberSlotId.setDescription('The number of the slot on which the member is provisioned.')
pvxSwitchMemberStackingState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("unstacked", 2), ("primary", 3), ("secondary", 4), ("notPresent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMemberStackingState.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberStackingState.setDescription('If the AdminState is disabled, the stacking state will be disabled. If there is only one PacketVX enabled in the switch, the value of this variable will be unstacked. If there is more than one PacketVX, then the card running the control plane will be primary, any other cards will be secondary. If there is no PacketVX in the slot, the StackingState is notPresent')
pvxSwitchMemberStackingPortCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 9), PvxStackingPortCommState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMemberStackingPortCommState.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberStackingPortCommState.setDescription('If the redundancy manager believes it can communicate with its peer across the stacking port, the value of this variable will be connectionOk. Otherwise, it will be noConnection.')
pvxSwitchMemberBackplaneCommState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 10), PvxStackingPortCommState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchMemberBackplaneCommState.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberBackplaneCommState.setDescription('If the redundancy manager believes it can communicate with its peer across the backplane, the value of this variable will be connectionOk. Otherwise, it will be noConnection.')
pvxSwitchMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSwitchMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchMemberRowStatus.setDescription('')
pvxVLANTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4), )
if mibBuilder.loadTexts: pvxVLANTable.setStatus('current')
if mibBuilder.loadTexts: pvxVLANTable.setDescription('This table is used to configure the Vlan related entries on a particular port of a virtual switch member.')
pvxVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxVLANSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVLANIdx"))
if mibBuilder.loadTexts: pvxVLANEntry.setStatus('current')
if mibBuilder.loadTexts: pvxVLANEntry.setDescription('The conceptual row object of the Vlan Config table.')
pvxVLANSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxVLANSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVLANSwitchIdx.setDescription('This object represents the particular switch id on which Vlan is configured.')
pvxVLANIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxVLANIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVLANIdx.setDescription('This object is the index of the Vlan id of the CP.')
pvxVLANMemberPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 4), PvxL2PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANMemberPortList.setStatus('current')
if mibBuilder.loadTexts: pvxVLANMemberPortList.setDescription('This object represents a single ingress port or set of ports which can be configured for a particular vlan. The format of the set request for this object will depend on the value of the vlanPortListOpType object being sent in the set request. Note: The set request will fail if the syntax of the value is not exactly the same as defined by vlanPortListOpType description.')
pvxVLANUnTaggedPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 5), PvxL2PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANUnTaggedPortList.setStatus('current')
if mibBuilder.loadTexts: pvxVLANUnTaggedPortList.setDescription('The set of ports which are transmitting traffic for this VLAN as untagged frames. Note: The set request will fail if the syntax of the value is not exactly the same as defined by vlanPortListOpType description.')
pvxVLANMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANMacLearning.setStatus('current')
if mibBuilder.loadTexts: pvxVLANMacLearning.setDescription('This object is used to configure the Vlan Mac learnining')
pvxVLANAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANAdminState.setStatus('current')
if mibBuilder.loadTexts: pvxVLANAdminState.setDescription('The administrative status of the Vlan.')
pvxVLANMSTPId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANMSTPId.setStatus('current')
if mibBuilder.loadTexts: pvxVLANMSTPId.setDescription('An alpha-numeric book keeping attribute for the VLAN.')
pvxVLANService = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVLANService.setStatus('current')
if mibBuilder.loadTexts: pvxVLANService.setDescription('Name of the service associated with this VLAN. If no service is associated with the value is a zero length string.')
pvxVLANForbiddenPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 10), PvxL2PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANForbiddenPortList.setStatus('current')
if mibBuilder.loadTexts: pvxVLANForbiddenPortList.setDescription('The set of ports which GVRP is forbidden to learn.')
pvxVLANOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("reserved", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVLANOperStatus.setStatus('current')
if mibBuilder.loadTexts: pvxVLANOperStatus.setDescription('The current operational state of the VLAN.')
pvxVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVLANRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxVLANRowStatus.setDescription('This object is used to create a new row in the vlan table.')
pvxFDBTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5), )
if mibBuilder.loadTexts: pvxFDBTable.setStatus('current')
if mibBuilder.loadTexts: pvxFDBTable.setDescription('This table is used to configure the MAC (FDB) related entries.')
pvxFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFDBSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFDBVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFDBMACAddrIdx"))
if mibBuilder.loadTexts: pvxFDBEntry.setStatus('current')
if mibBuilder.loadTexts: pvxFDBEntry.setDescription('The conceptual row object of the forwardinngDB table.')
pvxFDBSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFDBSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFDBSwitchIdx.setDescription('This object represents the particular switch ID.')
pvxFDBVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFDBVlanIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFDBVlanIdx.setDescription('This object is the fdb vlan id.')
pvxFDBMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxFDBMACAddrIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFDBMACAddrIdx.setDescription('This object represents the particular MAC address.')
pvxFDBPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 4), PvxL2Port()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxFDBPort.setStatus('current')
if mibBuilder.loadTexts: pvxFDBPort.setDescription('This object represents the port of the forwarding Database.')
pvxFDBAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxFDBAddressType.setStatus('current')
if mibBuilder.loadTexts: pvxFDBAddressType.setDescription("The status of this entry. The meanings of the values are: other(1) - none of the following. This may include the case where some other MIB object (not the corresponding instance of pvxFDBIntfId, nor an entry in the dot1qStaticUnicastTable) is being used to determine if and how frames addressed to the value of the corresponding instance of dot1qTpFdbAddress are being forwarded. invalid(2) - this entry is no longer valid (e.g., it was learned but has since aged out), but has not yet been flushed from the table. learned(3) - the value of the corresponding instance of dot1qTpFdbPort was learned and is being used. self(4) - the value of the corresponding instance of dot1qTpFdbAddress represents one of the device's addresses. The corresponding instance of dot1qTpFdbPort indicates which of the device's ports has this address. mgmt(5) - the value of the corresponding instance of dot1qTpFdbAddress is also the value of an existing instance of dot1qStaticAddress.")
pvxFDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFDBRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFDBRowStatus.setDescription('This object is used to create a new row in the FDB table.')
pvxStaticUnicastTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6), )
if mibBuilder.loadTexts: pvxStaticUnicastTable.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastTable.setDescription('A table containing filtering information for Unicast MAC addresses for each Filtering Database, configured into the device by (local or network) management specifying the set of ports to which frames received from specific ports and containing specific unicast destination addresses are allowed to be forwarded.')
pvxStaticUnicastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastMACAddrIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticUnicastReceivePort"))
if mibBuilder.loadTexts: pvxStaticUnicastEntry.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastEntry.setDescription('Filtering information configured into the device by (local or network) management specifying the set of ports to which frames received from a specific port and containing a specific unicast destination address are allowed to be forwarded.')
pvxStaticUnicastSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxStaticUnicastSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastSwitchIdx.setDescription('This object represents the particular switch ID.')
pvxStaticUnicastVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: pvxStaticUnicastVlanIdx.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastVlanIdx.setDescription('This object is the fdb vlan id.')
pvxStaticUnicastMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxStaticUnicastMACAddrIdx.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastMACAddrIdx.setDescription('This object represents the particular MAC address.')
pvxStaticUnicastReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 4), PvxL2Port())
if mibBuilder.loadTexts: pvxStaticUnicastReceivePort.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastReceivePort.setDescription("Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply. A value of zero indicates that this entry applies on all ports of the device for which there is no other applicable entry.")
pvxStaticUnicastIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 5), PvxVLANPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticUnicastIntfIdList.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastIntfIdList.setDescription('The set of ports for which a frame with a specific unicast address will be flooded in the event that it has not been learned.')
pvxStaticUnicastAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('permanent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticUnicastAddressType.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastAddressType.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so differ from the following values. invalid(2) - writing this value to the object removes the corresponding entry. permanent(3) - this entry is currently in use and will remain so after the next reset of the bridge. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the bridge. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
pvxStaticUnicastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 6, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticUnicastRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxStaticUnicastRowStatus.setDescription('This object is used to create a new row in the static unicast table.')
pvxMultiCastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7), )
if mibBuilder.loadTexts: pvxMultiCastGroupTable.setStatus('current')
if mibBuilder.loadTexts: pvxMultiCastGroupTable.setDescription('This table is used to configure the multicast table related entries.')
pvxMultiCastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMCSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMCVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMCMACAddrIdx"))
if mibBuilder.loadTexts: pvxMultiCastEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMultiCastEntry.setDescription('The conceptual row object of the forwardinngDB table.')
pvxMCSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMCSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMCSwitchIdx.setDescription('This object represents the particular switch ID.')
pvxMCVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxMCVlanIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMCVlanIdx.setDescription('This object is the fdb vlan id.')
pvxMCMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxMCMACAddrIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMCMACAddrIdx.setDescription('This object represents the particular MAC address.')
pvxMCIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 4), PvxVLANPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMCIntfIdList.setStatus('current')
if mibBuilder.loadTexts: pvxMCIntfIdList.setDescription('The set of ports to which frames received from a specific port and destined for a specific Multicast or Broadcast MAC address must be forwarded, regardless of any dynamic information')
pvxMCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMCRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxMCRowStatus.setDescription('This object is used to create a new row in the MCG table.')
pvxStaticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8), )
if mibBuilder.loadTexts: pvxStaticMulticastTable.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMulticastTable.setDescription('A table containing filtering information for Unicast MAC addresses for each Filtering Database, configured into the device by (local or network) management specifying the set of ports to which frames received from specific ports and containing specific unicast destination addresses are allowed to be forwarded.')
pvxStaticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCVlanIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCMACAddrIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxStaticMCReceivePort"))
if mibBuilder.loadTexts: pvxStaticMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMulticastEntry.setDescription('Filtering information configured into the device by (local or network) management specifying the set of ports to which frames received from a specific port and containing a specific unicast destination address are allowed to be forwarded.')
pvxStaticMCSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxStaticMCSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCSwitchIdx.setDescription('This object represents the particular switch ID.')
pvxStaticMCVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: pvxStaticMCVlanIdx.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCVlanIdx.setDescription('This object is the fdb vlan id.')
pvxStaticMCMACAddrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 3), MacAddress())
if mibBuilder.loadTexts: pvxStaticMCMACAddrIdx.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCMACAddrIdx.setDescription('This object represents the particular MAC address.')
pvxStaticMCReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 4), PvxL2Port())
if mibBuilder.loadTexts: pvxStaticMCReceivePort.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCReceivePort.setDescription("Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply. A value of zero indicates that this entry applies on all ports of the device for which there is no other applicable entry.")
pvxStaticMCStaticIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 5), PvxVLANPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCStaticIntfIdList.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCStaticIntfIdList.setDescription('The set of ports to which frames received from a specific port and destined for a specific Multicast or Broadcast MAC address must be forwarded.')
pvxStaticMCForbiddenIntfIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 6), PvxVLANPortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCForbiddenIntfIdList.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCForbiddenIntfIdList.setDescription('The set of ports to which frames received from a specific port and destined for a specific Multicast or Broadcast MAC address must not be forwarded.')
pvxStaticMCAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('permanent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCAddressType.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCAddressType.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so differ from the following values. invalid(2) - writing this value to the object removes the corresponding entry. permanent(3) - this entry is currently in use and will remain so after the next reset of the bridge. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the bridge. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
pvxStaticMCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 8, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStaticMCRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxStaticMCRowStatus.setDescription('This object is used to create a new row in the static multicast table.')
pvxLagTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9), )
if mibBuilder.loadTexts: pvxLagTable.setStatus('current')
if mibBuilder.loadTexts: pvxLagTable.setDescription('This table is used to configure the link aggregation at system level.')
pvxLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLagSwitchIdx"))
if mibBuilder.loadTexts: pvxLagEntry.setStatus('current')
if mibBuilder.loadTexts: pvxLagEntry.setDescription('The conceptual row object of the lag Config table.')
pvxLagSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLagSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLagSwitchIdx.setDescription('This object represents the particular switch id .')
pvxLagState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagState.setStatus('current')
if mibBuilder.loadTexts: pvxLagState.setDescription('The administrative status.')
pvxLagSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagSystemPriority.setStatus('current')
if mibBuilder.loadTexts: pvxLagSystemPriority.setDescription('This object represents the lag system priority.')
pvxLagSystemIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagSystemIdentifier.setStatus('current')
if mibBuilder.loadTexts: pvxLagSystemIdentifier.setDescription('This object is used to identify the particular lag ID.')
pvxLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxLagRowStatus.setDescription('This object is used to create a new row in the lag table.')
pvxLagGroupTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10), )
if mibBuilder.loadTexts: pvxLagGroupTable.setStatus('current')
if mibBuilder.loadTexts: pvxLagGroupTable.setDescription('This table is used to configure the link aggregation protocol related entries.')
pvxLagGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLGSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLGIdx"))
if mibBuilder.loadTexts: pvxLagGroupEntry.setStatus('current')
if mibBuilder.loadTexts: pvxLagGroupEntry.setDescription('The conceptual row object of the lag Config table.')
pvxLGSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLGSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLGSwitchIdx.setDescription('This object represents the particular switch id of lag group.')
pvxLGIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxLGIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLGIdx.setDescription('This is the id index of the lagGroup.')
pvxLGPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 3), PvxPhyPortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGPortList.setStatus('current')
if mibBuilder.loadTexts: pvxLGPortList.setDescription('Each entry in this list is for each physical port that participates in Link Aggregation which can be either aggregatable or individual.')
pvxLGDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("srcmac", 1), ("dstmac", 2), ("srcdstmac", 3), ("srcip", 4), ("dstip", 5), ("srcdstip", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGDistribution.setStatus('current')
if mibBuilder.loadTexts: pvxLGDistribution.setDescription('This object represents the distribution method for LAG traffic.')
pvxLGMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGMacAddress.setStatus('current')
if mibBuilder.loadTexts: pvxLGMacAddress.setDescription('This object represents the MAC address of the LAG group')
pvxLGPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGPortCount.setStatus('current')
if mibBuilder.loadTexts: pvxLGPortCount.setDescription('The number of ports actually configured to the LAG group')
pvxLGActivePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGActivePortCount.setStatus('current')
if mibBuilder.loadTexts: pvxLGActivePortCount.setDescription('This object will give the number of ports that are attached to the LAG group and actively carrying data traffic on the link.')
pvxLGMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGMtuSize.setStatus('current')
if mibBuilder.loadTexts: pvxLGMtuSize.setDescription('This object will give the MTU size of the LAG group')
pvxLGAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pvxLGAdminStatus.setDescription('Sets the Link Aggregation Module administrative status as enabled or disabled.')
pvxLGOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 11), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGOperStatus.setStatus('current')
if mibBuilder.loadTexts: pvxLGOperStatus.setDescription('This read only objects gives actual status of the Link Aggregation Module (Operational status of module). When Module is enabled Link Aggregation protocol starts functioning. When the module is disabled all the dynamically allocated memory will be freed and Link Aggregation protocol stops functioning.')
pvxLGDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLGDataRate.setStatus('current')
if mibBuilder.loadTexts: pvxLGDataRate.setDescription('The current data rate, in megabits per second, of the aggregate link. The value is calculated as N times the data rate of a single link in the aggregation, where N is the number of active links.')
pvxLGMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGMaxLinks.setStatus('current')
if mibBuilder.loadTexts: pvxLGMaxLinks.setDescription('Sets the number of maximum links in the Link Aggregation Group. If the number of links in an aggregation exceeds the maximum value set, then the links with the lower lacp priority will become active links. Note: the switch with the lowest lacp priority value decides the standby and active links in the aggregation.')
pvxLGMinLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGMinLinks.setStatus('current')
if mibBuilder.loadTexts: pvxLGMinLinks.setDescription('Sets the minimum number of links in the Link Aggregation Group to be active to advertise upper layers that the aggregate link operationally up.')
pvxLGRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLGRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxLGRowStatus.setDescription('This object is used to create a new row in the lagConfig table.')
pvxLagPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11), )
if mibBuilder.loadTexts: pvxLagPortTable.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortTable.setDescription('This table is used to configure the link aggregation protocol related entries. TODO: Need to re-check the index here, and what is pvxLagPortId')
pvxLagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLagPortIdx"))
if mibBuilder.loadTexts: pvxLagPortEntry.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortEntry.setDescription('The conceptual row object of the lag Config table.')
pvxLagPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLagPortSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortSwitchIdx.setDescription('This object represents the particular switch id of lag group.')
pvxLagPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxLagPortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortShelfIdx.setDescription('This is the id index of the lagGroup.')
pvxLagPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxLagPortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortSlotIdx.setDescription('The is the slot number for the lag port.')
pvxLagPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxLagPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortTypeIdx.setDescription('This object is port type of the lag port.')
pvxLagPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxLagPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortIdx.setDescription('This object is the port number of the lag port.')
pvxLagPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortPriority.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortPriority.setDescription('This object represents the lag port priority')
pvxLagPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("on", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortMode.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortMode.setDescription('This object is used to enable LACP , disable LACP or manually aggregate a port')
pvxLagPortAggState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inbndl", 1), ("stdby", 2), ("down", 3), ("alone", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagPortAggState.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortAggState.setDescription('This read-only object is used to display the port state in aggregation inBndl(1) - The port is operationally up and actively takes part in aggregation. standby(2) - The port is capable of joining in aggregation group, when any of the ports in aggregation group goes down. down(3) - The port is operationally down in lower layers. or the port is operational in lower layers but temporarily not able to participate in aggregation because of different partner information in the same group. alone(4) - The port is operating individually and is not taking part in aggregation.')
pvxLagPortLcapId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortLcapId.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortLcapId.setDescription('This object sets the global LCAP System ID.')
pvxLagPortTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortTimeout.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortTimeout.setDescription('This object sets the LACP timeout period. long(1) - LACP PDU will be sent every 30 seconds and LACP timeout value (no packet is received from peer) is 90 seconds short(2) - LACP PDU will be sent every 1 second and timeout value is 3 seconds.')
pvxLagPortWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortWaitTime.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortWaitTime.setDescription('Duration of time for the port to attach to the LAG group.')
pvxLagPortActAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagPortActAdminState.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortActAdminState.setDescription('This object is the actors administrative state.')
pvxLagPortPrtnrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLagPortPrtnrAdminState.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortPrtnrAdminState.setDescription('This object is the partners administrative state.')
pvxLagPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortGroupId.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortGroupId.setDescription('This object is the LAG group id associated with the lag port.')
pvxLagPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 11, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxLagPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxLagPortRowStatus.setDescription('This object is used to create a new row in the lagConfig table.')
pvxMSTPGenTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12), )
if mibBuilder.loadTexts: pvxMSTPGenTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenTable.setDescription('This table is used to configure the Spanning Tree protocol on a virtual switch.')
pvxMSTPGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"))
if mibBuilder.loadTexts: pvxMSTPGenEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenEntry.setDescription('The conceptual row object of the packet Spanning Tree protocol config table.')
pvxMSTPGenSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPGenSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenSwitchIdx.setDescription('This object represents the switch id of the MSTP Gen.')
pvxMSTPGenMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenMaxHops.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenMaxHops.setDescription('This object represents the maximum hops that can be configured.')
pvxMSTPGenVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("nonStp", 2), ("dot1d", 3), ("dot1w", 4), ("dot1s", 5), ("dot1q", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenVersionSupported.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenVersionSupported.setDescription('This object is used to read the supported version ')
pvxMSTPGenIdFmtSel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenIdFmtSel.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenIdFmtSel.setDescription('This object is used to configure the Frame Selection on particular virtual switch.')
pvxMSTPGenIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenIdName.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenIdName.setDescription('This object is used to configure MSTP ID name on a particular virtual switch.')
pvxMSTPGenIdRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenIdRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenIdRevisionLevel.setDescription('This object represents MSTP Revision Level in seconds.')
pvxMSTPGenIdDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenIdDigest.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenIdDigest.setDescription('This object represents MSTP ID digest value.')
pvxMSTPGenRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenRegionalRoot.setDescription('This object represents the mstp Regional Root .')
pvxMSTPGenExternalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenExternalRootCost.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenExternalRootCost.setDescription('This represents the mstp External Root Cost .')
pvxMSTPGenCistPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPGenCistPriority.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenCistPriority.setDescription('This CIST priority of this bridge.')
pvxMSTPGenBrdgId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenBrdgId.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenBrdgId.setDescription('The bridge ID.')
pvxMSTPGenCistRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenCistRoot.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenCistRoot.setDescription('The root of the CIST.')
pvxMSTPGenCistRootPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenCistRootPriority.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenCistRootPriority.setDescription('The priority of the CIST root.')
pvxMSTPGenCistRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPGenCistRootCost.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPGenCistRootCost.setDescription('The cost of the CIST root bridge.')
pvxMSTPMapTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13), )
if mibBuilder.loadTexts: pvxMSTPMapTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapTable.setDescription('This table is used to configure the Spanning Tree Map on a virtual switch.')
pvxMSTPMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPMapSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPMapIdx"))
if mibBuilder.loadTexts: pvxMSTPMapEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapEntry.setDescription('The conceptual row object of the MSTP Map table.')
pvxMSTPMapSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPMapSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapSwitchIdx.setDescription('This object represents the switch id of the mstp map.')
pvxMSTPMapIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxMSTPMapIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapIdx.setDescription('This object represents the mstp map index.')
pvxMSTPMapVlanS1k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 3), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS1k.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapVlanS1k.setDescription('This object is used to configure 1k Vlans')
pvxMSTPMapVlanS2k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 4), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS2k.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapVlanS2k.setDescription('This object is used to configure 2k Vlans.')
pvxMSTPMapVlanS3k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 5), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS3k.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapVlanS3k.setDescription('This object is used to configure configure 3k Vlans.')
pvxMSTPMapVlanS4k = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 6), PvxMSTPVlanList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapVlanS4k.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapVlanS4k.setDescription('This object is used to configure configure 4k Vlans.')
pvxMSTPMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 13, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPMapRowStatus.setDescription('Used to control the addition and deletion of entries in the mstp table.')
pvxMSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14), )
if mibBuilder.loadTexts: pvxMSTPPortTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortTable.setDescription('This table is used to configure the Spanning tree port related entries. TODO: This table needs to change to be able to deal with indexing based on shelf and slot. If the index has switch associated with it , that will mean that we are dealing with layer 2 ports.')
pvxMSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortIdx"))
if mibBuilder.loadTexts: pvxMSTPPortEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortEntry.setDescription('The conceptual row object of the mstp port.')
pvxMSTPPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPPortSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortSwitchIdx.setDescription('This object represents the particular switch id .')
pvxMSTPPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPPortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortShelfIdx.setDescription('The instace Id of the mstp port.')
pvxMSTPPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPPortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortSlotIdx.setDescription('This is the port index of the mstp port.')
pvxMSTPPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortTypeIdx.setDescription('This is the port index of the mstp port.')
pvxMSTPPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxMSTPPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortIdx.setDescription('This is the port index of the mstp port.')
pvxMSTPPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortDesignatedRoot.setDescription('This is the designated root.')
pvxMSTPPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortDesignatedBridge.setDescription('This is the designated bridge ID.')
pvxMSTPPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortDesignatedPort.setDescription('This is the designated port.')
pvxMSTPPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortPathCost.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortPathCost.setDescription('This is the path cost.')
pvxMSTPPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortPriority.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortPriority.setDescription('This is the port priority.')
pvxMSTPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("discarding", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortState.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortState.setDescription('This is the port state.')
pvxMSTPPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("nonSTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortRole.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortRole.setDescription('This is the port role.')
pvxMSTPPortRegRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortRegRoot.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortRegRoot.setDescription("This is the port's reg root.")
pvxMSTPPortRegRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortRegRootCost.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortRegRootCost.setDescription("This is the port's reg root cost.")
pvxMSTPPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortRestrictedRole.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortRestrictedRole.setDescription("This is the port's restricted role.")
pvxMSTPPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortRestrictedTCN.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortRestrictedTCN.setDescription("This is the port's restricted TCN.")
pvxMSTPPortForcedPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortForcedPortState.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortForcedPortState.setDescription("This is the port's forced port state.")
pvxMSTPPortLoopGuardState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortLoopGuardState.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortLoopGuardState.setDescription("This is the port's Loop Guard state.")
pvxMSTPPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shared", 1), ("point-to-point", 2))).clone('point-to-point')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPPortLinkType.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortLinkType.setDescription('The link type of this port.')
pvxMSTPXstTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15), )
if mibBuilder.loadTexts: pvxMSTPXstTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstTable.setDescription('This table is used to configure the Mstp Xst related entries.')
pvxMSTPXstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstIdx"))
if mibBuilder.loadTexts: pvxMSTPXstEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstEntry.setDescription('The conceptual row object of the mstpXst table.')
pvxMSTPXstSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPXstSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstSwitchIdx.setDescription('This object represents the particular switch id.')
pvxMSTPXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pvxMSTPXstIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstIdx.setDescription('The instance of the mstpXst Id.')
pvxMSTPXstBrdgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstBrdgPriority.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstBrdgPriority.setDescription('This Bridge priority.')
pvxMSTPXstBrdgId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstBrdgId.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstBrdgId.setDescription('The bridge ID.')
pvxMSTPXstBrdgRegRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstBrdgRegRoot.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstBrdgRegRoot.setDescription('The bridge Reg Root.')
pvxMSTPXstBrdgRegRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstBrdgRegRootCost.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstBrdgRegRootCost.setDescription('The root cost of destination bridge.')
pvxMSTPXstRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 7), PvxL2Port()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPort.setStatus('deprecated')
if mibBuilder.loadTexts: pvxMSTPXstRootPort.setDescription('The root port number.')
pvxMSTPXstRootPortSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortSwitch.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstRootPortSwitch.setDescription('The Switch ID of the port on this bridge through which the spanning tree root node is reached.')
pvxMSTPXstRootPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortShelf.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstRootPortShelf.setDescription('The shelf ID of the port on this bridge through which the spanning tree root node is reached.')
pvxMSTPXstRootPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortSlot.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstRootPortSlot.setDescription('The slot ID of the port on this bridge through which the spanning tree root node is reached.')
pvxMSTPXstRootPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 11), PvxPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortType.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstRootPortType.setDescription('The port type of the port on this bridge through which the spanning tree root node is reached.')
pvxMSTPXstRootPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstRootPortNum.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstRootPortNum.setDescription('The port ID of the port on this bridge through which the spanning tree root node is reached.')
pvxMSTPXstPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16), )
if mibBuilder.loadTexts: pvxMSTPXstPortTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortTable.setDescription('This table is used to configure the mstp Xst Port related entries.')
pvxMSTPXstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortInstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPXstPortIdx"))
if mibBuilder.loadTexts: pvxMSTPXstPortEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortEntry.setDescription('The conceptual row object of the mstp Xst Port.')
pvxMSTPXstPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPXstPortSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortSwitchIdx.setDescription('This object represents the particular switch id of mstpXstPort.')
pvxMSTPXstPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPXstPortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortShelfIdx.setDescription('The instace index of the mstp Xst Port table .')
pvxMSTPXstPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPXstPortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortSlotIdx.setDescription('The instace index of the mstp Xst Port table .')
pvxMSTPXstPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPXstPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortTypeIdx.setDescription('The instace index of the mstp Xst Port table .')
pvxMSTPXstPortInstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pvxMSTPXstPortInstIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortInstIdx.setDescription('This Xst instance index of the mstpXstPort table.')
pvxMSTPXstPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: pvxMSTPXstPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortIdx.setDescription('This port instance of the mstpXstPort table.')
pvxMSTPXstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("discarding", 3), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortState.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortState.setDescription('The port state of the mstp Xst.')
pvxMSTPXstPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("nonSTP", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortRole.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortRole.setDescription('The role of the participating port.')
pvxMSTPXstPortDesigRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigRoot.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortDesigRoot.setDescription('The designated root attribute of the mstp Xst Port.')
pvxMSTPXstPortDesigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigCost.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortDesigCost.setDescription('The root cost of the mstpXstPort.')
pvxMSTPXstPortDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigBridge.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortDesigBridge.setDescription('The designated bridge ID of the mstpXstPort.')
pvxMSTPXstPortDesigPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPXstPortDesigPortId.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortDesigPortId.setDescription('The designated port id of the mstpXstPort.')
pvxMSTPXstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstPortPriority.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortPriority.setDescription('The port priority of the mstp Xst Port')
pvxMSTPXstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortPathCost.setDescription('This path cost of the mstpXst port.')
pvxMSTPXstPortForcedPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMSTPXstPortForcedPortState.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPXstPortForcedPortState.setDescription("This is the port's forced port state.")
pvxNextFreeIndexTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17), )
if mibBuilder.loadTexts: pvxNextFreeIndexTable.setStatus('current')
if mibBuilder.loadTexts: pvxNextFreeIndexTable.setDescription('This table is used to find the next free index in some tables that use integer indices.')
pvxNextFreeIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxNextFreeIndexTableIndex"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNextFreeIndexSwitchIdx"))
if mibBuilder.loadTexts: pvxNextFreeIndexEntry.setStatus('current')
if mibBuilder.loadTexts: pvxNextFreeIndexEntry.setDescription('The conceptual row object of the Next Free Index Table.')
pvxNextFreeIndexTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 70, 84, 87, 93))).clone(namedValues=NamedValues(("none", 1), ("lagGroup", 70), ("switches", 84), ("flowclass", 87), ("vlan", 93))))
if mibBuilder.loadTexts: pvxNextFreeIndexTableIndex.setStatus('current')
if mibBuilder.loadTexts: pvxNextFreeIndexTableIndex.setDescription('This object indicates from which table to fetch the next free index.')
pvxNextFreeIndexSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxNextFreeIndexSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxNextFreeIndexSwitchIdx.setDescription('This object represents the particular switch id to fetch.')
pvxNextFreeIndexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxNextFreeIndexValue.setStatus('current')
if mibBuilder.loadTexts: pvxNextFreeIndexValue.setDescription('The value of the next free index in the specified table on the specified switch.')
pvxUNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18), )
if mibBuilder.loadTexts: pvxUNITable.setStatus('current')
if mibBuilder.loadTexts: pvxUNITable.setDescription('This table defines all User Network Interfaces on all swotches.')
pvxUNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxUNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxUNIPortId"))
if mibBuilder.loadTexts: pvxUNIEntry.setStatus('current')
if mibBuilder.loadTexts: pvxUNIEntry.setDescription('The conceptual row object of the UNI Table')
pvxUNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxUNISwitchId.setStatus('current')
if mibBuilder.loadTexts: pvxUNISwitchId.setDescription('This object represents the particular switch id.')
pvxUNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxUNIShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxUNIShelfId.setDescription('')
pvxUNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxUNISlotId.setStatus('current')
if mibBuilder.loadTexts: pvxUNISlotId.setDescription('')
pvxUNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxUNIPortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxUNIPortTypeId.setDescription('')
pvxUNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxUNIPortId.setStatus('current')
if mibBuilder.loadTexts: pvxUNIPortId.setDescription('')
pvxUNISpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNISpeed.setStatus('current')
if mibBuilder.loadTexts: pvxUNISpeed.setDescription('Speed of the UNI in mb/sec')
pvxUNIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNIMode.setStatus('current')
if mibBuilder.loadTexts: pvxUNIMode.setDescription('Full/half duplex mode of the UNI')
pvxUNIMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1522, 9600)).clone(1522)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNIMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: pvxUNIMaxFrameSize.setDescription('Maximum Frame size for the UNI')
pvxUNICurrentFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1522, 9600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNICurrentFrameSize.setStatus('current')
if mibBuilder.loadTexts: pvxUNICurrentFrameSize.setDescription('The maximum of the Max Frame Size of all the services associated with the UNI.')
pvxUNIServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unspecified", 1), ("private", 2), ("virtualSingle", 3), ("virtualMultiple", 4), ("virtualUntagged", 5))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNIServiceType.setStatus('current')
if mibBuilder.loadTexts: pvxUNIServiceType.setDescription('A combination of the MEF variables for multiplexing, bundling and all-in-bundling.')
pvxUNINumServices = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxUNINumServices.setStatus('current')
if mibBuilder.loadTexts: pvxUNINumServices.setDescription('The number of services that attach to this UNI.')
pvxUNICPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNICPVid.setStatus('current')
if mibBuilder.loadTexts: pvxUNICPVid.setDescription('The Port VLAN Id at the customer level for this UNI. This field is valid only if UNIServiceType is virtualSingle, virtualMultiple, or virtualUntagged.')
pvxUNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 18, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxUNIRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxUNIRowStatus.setDescription('')
pvxNNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19), )
if mibBuilder.loadTexts: pvxNNITable.setStatus('current')
if mibBuilder.loadTexts: pvxNNITable.setDescription('This table defines all User Network Interfaces on all swotches.')
pvxNNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxNNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxNNIPortId"))
if mibBuilder.loadTexts: pvxNNIEntry.setStatus('current')
if mibBuilder.loadTexts: pvxNNIEntry.setDescription('The conceptual row object of the NNI Table')
pvxNNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxNNISwitchId.setStatus('current')
if mibBuilder.loadTexts: pvxNNISwitchId.setDescription('This object represents the particular switch id.')
pvxNNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxNNIShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxNNIShelfId.setDescription('')
pvxNNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxNNISlotId.setStatus('current')
if mibBuilder.loadTexts: pvxNNISlotId.setDescription('')
pvxNNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxNNIPortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxNNIPortTypeId.setDescription('')
pvxNNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxNNIPortId.setStatus('current')
if mibBuilder.loadTexts: pvxNNIPortId.setDescription('')
pvxNNISpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxNNISpeed.setStatus('current')
if mibBuilder.loadTexts: pvxNNISpeed.setDescription('Speed of the NNI in mb/sec')
pvxNNIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxNNIMode.setStatus('current')
if mibBuilder.loadTexts: pvxNNIMode.setDescription('Full/half duplex mode of the NNI')
pvxNNIMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1526, 9600)).clone(9600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxNNIMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: pvxNNIMaxFrameSize.setDescription('Maximum Frame size for the NNI')
pvxNNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 19, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxNNIRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxNNIRowStatus.setDescription('')
pvxVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20), )
if mibBuilder.loadTexts: pvxVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortTable.setDescription('This table is used to configure Vlan port related entries.')
pvxVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"))
if mibBuilder.loadTexts: pvxVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortEntry.setDescription('The conceptual row object of the vlan port.')
pvxVlanPortSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxVlanPortSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortSwitchIdx.setDescription('This object represents the particular switch id .')
pvxVlanPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxVlanPortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortShelfIdx.setDescription('This represents the shelf this port belongs to.')
pvxVlanPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxVlanPortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortSlotIdx.setDescription('This represents the slot this port belogs to.')
pvxVlanPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxVlanPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortTypeIdx.setDescription('This represents the port type.')
pvxVlanPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxVlanPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortIdx.setDescription('This is the port index of the vlan port.')
pvxVlanPortGvrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVlanPortGvrpAdminState.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortGvrpAdminState.setDescription('The state of GVRP operation on this port. The value enabled(1) indicates that GVRP is enabled on this port, as long as the global GVRP status is enabled on the switch. When disabled(2) but global GVRP is still enabled for the device, GVRP is disabled on this port: any GVRP packets received will be silently discarded and no GVRP registrations will be propagated from other ports.')
pvxVlanPortRestrictedVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxVlanPortRestrictedVlanState.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortRestrictedVlanState.setDescription('The state of Restricted VLAN Registration on this port. If the value of this control is enabled(1), then creation of a new dynamic VLAN entry is permitted only if there is a Static VLAN Registration Entry for the VLAN concerned. If the value is set to disabled(2), dynamic vlan participation is allowed.')
pvxVlanPortEthPortAllowedFrametType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("admitAll", 1), ("admitOnlyVlanTagged", 2), ("admitOnlyUntaggedAndPriorityTagged", 3), ("admitDefault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortEthPortAllowedFrametType.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortEthPortAllowedFrametType.setDescription('When the value is admitOnlyVlanTagged(2) port will discard untagged frames or Priority-Tagged frames. When admitAll(1), untagged frames or Priority-Tagged frames received on this port will be accepted and assigned to the PVID for this port. When this is admitOnlyUntaggedAndPriorityTagged the device will recieve only untagged and priority tagged frames on this port.')
pvxVlanPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortIngressFiltering.setStatus('deprecated')
if mibBuilder.loadTexts: pvxVlanPortIngressFiltering.setDescription('When this is true(1) the device will discard incoming frames for VLANs which do not include this Port in its Member set. When false(2), the port will accept all incoming frames')
pvxVlanPortGvrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortGvrpFailedRegistrations.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortGvrpFailedRegistrations.setDescription('The total number of failed GVRP registrations, for any reason, on this port.')
pvxVlanPortLastBpduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 20, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanPortLastBpduOrigin.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortLastBpduOrigin.setDescription('The Source MAC Address of the last GVRP message received on this port.')
pvxVlanPortLastBpduOriginChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 37, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"))
if mibBuilder.loadTexts: pvxVlanPortLastBpduOriginChangeEvt.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortLastBpduOriginChangeEvt.setDescription('A pvxVlanPortLastBpduOriginChangeEvt notification is sent when the Source MAC Address of the last GVRP message received on this port changes.')
pvxVlanPortAddDynamicVlanEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 38, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVLANIdx"))
if mibBuilder.loadTexts: pvxVlanPortAddDynamicVlanEvt.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortAddDynamicVlanEvt.setDescription('A pvxVlanPortAddDynamicVlanEvt notification is sent when a port is added to a VLAN in a dynamic VLAN table.')
pvxVlanPortRemoveDynamicVlanEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 39, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVlanPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxVLANIdx"))
if mibBuilder.loadTexts: pvxVlanPortRemoveDynamicVlanEvt.setStatus('current')
if mibBuilder.loadTexts: pvxVlanPortRemoveDynamicVlanEvt.setDescription('A pvxVlanPortRemoveDynamicVlanEvt notification is sent when a port is removed from a VLAN in a dynamic VLAN table.')
pvxVlanCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21), )
if mibBuilder.loadTexts: pvxVlanCurrentTable.setStatus('current')
if mibBuilder.loadTexts: pvxVlanCurrentTable.setDescription('This table is used to retrieve Vlan related entries.')
pvxVlanCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxVlanCurrentSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanCurrentTimeMark"), (0, "PACKET-VX-BRIDGE-MIB", "pvxVlanCurrentVlanIdx"))
if mibBuilder.loadTexts: pvxVlanCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: pvxVlanCurrentEntry.setDescription('The conceptual row object of the vlan entity.')
pvxVlanCurrentSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxVlanCurrentSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVlanCurrentSwitchIdx.setDescription('This object represents the particular switch id.')
pvxVlanCurrentTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 2), Unsigned32())
if mibBuilder.loadTexts: pvxVlanCurrentTimeMark.setStatus('current')
if mibBuilder.loadTexts: pvxVlanCurrentTimeMark.setDescription('A TimeFilter for this entry.')
pvxVlanCurrentVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxVlanCurrentVlanIdx.setStatus('current')
if mibBuilder.loadTexts: pvxVlanCurrentVlanIdx.setDescription('Represents the VLAN IDs in the system')
pvxVlanCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("dynamicGVRP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: pvxVlanCurrentStatus.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so differ from the following values. permanent(2) - this entry, corresponding to an entry in the static vlan table that is currently in use and will remain so after the next reset of the device. The port lists for this entry include ports from static entry and ports learnt dynamically. dynamicGVRP(3) - this entry is currently in use and will remain so until removed by GVRP. There is no static entry for this VLAN and it will be removed when the last port leaves the VLAN.')
pvxVlanCurrentCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxVlanCurrentCreationTime.setStatus('current')
if mibBuilder.loadTexts: pvxVlanCurrentCreationTime.setDescription('The value of sysUpTime when this VLAN was created.')
pvxDynamicVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24), )
if mibBuilder.loadTexts: pvxDynamicVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: pvxDynamicVlanPortTable.setDescription('This table is used to configure Vlan Egress port related entries.')
pvxDynamicVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxDynamicVlanPortTimeMark"), (0, "PACKET-VX-BRIDGE-MIB", "pvxDynamicVlanPortVlanIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSubPortNumber"))
if mibBuilder.loadTexts: pvxDynamicVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: pvxDynamicVlanPortEntry.setDescription('The conceptual row object of the vlan egress port.')
pvxDynamicVlanPortTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pvxDynamicVlanPortTimeMark.setStatus('current')
if mibBuilder.loadTexts: pvxDynamicVlanPortTimeMark.setDescription('A TimeFilter for this entry.')
pvxDynamicVlanPortVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxDynamicVlanPortVlanIdx.setStatus('current')
if mibBuilder.loadTexts: pvxDynamicVlanPortVlanIdx.setDescription('Represents the VLAN IDs in the system')
pvxDynamicVlanPortTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxDynamicVlanPortTagged.setStatus('current')
if mibBuilder.loadTexts: pvxDynamicVlanPortTagged.setDescription('Indicates whether the port is a tagged or a untagged member in the VLAN. tagged - to add the port in the tagged portlist. untagged - to add the port in the untagged portlist.')
pvxStackingPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25), )
if mibBuilder.loadTexts: pvxStackingPortTable.setStatus('current')
if mibBuilder.loadTexts: pvxStackingPortTable.setDescription('This table allows the administrator to configure which port or ports will be used as teh stacking port or ports between the PacketVXes in the switch.')
pvxStackingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"))
if mibBuilder.loadTexts: pvxStackingPortEntry.setStatus('current')
if mibBuilder.loadTexts: pvxStackingPortEntry.setDescription('The conceptual row object of the stacking port.')
pvxStackingPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxStackingPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: pvxStackingPortOperStatus.setDescription('Indicates the current operational state of te stacking port.')
pvxStackingPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 25, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxStackingPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxStackingPortRowStatus.setDescription('')
pvxFlowTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12), )
if mibBuilder.loadTexts: pvxFlowTable.setStatus('current')
if mibBuilder.loadTexts: pvxFlowTable.setDescription('')
pvxFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFIdx"))
if mibBuilder.loadTexts: pvxFlowEntry.setStatus('current')
if mibBuilder.loadTexts: pvxFlowEntry.setDescription('The conceptual row object of the Flow Class Config table.')
pvxFSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFSwitchIdx.setDescription('This object represents the particular switch Id.')
pvxFIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFIdx.setDescription('')
pvxFClassificationIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFClassificationIdList.setStatus('current')
if mibBuilder.loadTexts: pvxFClassificationIdList.setDescription('')
pvxFMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMeterId.setStatus('current')
if mibBuilder.loadTexts: pvxFMeterId.setDescription('')
pvxFCoSName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFCoSName.setStatus('current')
if mibBuilder.loadTexts: pvxFCoSName.setDescription('')
pvxFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 12, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFRowStatus.setDescription('This object is used to create a new row in the flowClassTable.')
pvxFlowClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13), )
if mibBuilder.loadTexts: pvxFlowClassificationTable.setStatus('current')
if mibBuilder.loadTexts: pvxFlowClassificationTable.setDescription('This table is used to configure the Flow classification on virtual switch. A single value or a range of values can be specified in the set request for the filter objects as following # for single or #to# for range of values.')
pvxFlowClassificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFloClSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFloClIdx"))
if mibBuilder.loadTexts: pvxFlowClassificationEntry.setStatus('current')
if mibBuilder.loadTexts: pvxFlowClassificationEntry.setDescription('The conceptual row object of the Flow Class Config table.')
pvxFloClSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFloClSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFloClSwitchIdx.setDescription('This object represents the particular switch Id.')
pvxFloClIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: pvxFloClIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFloClIdx.setDescription('Index of this flow classification on this switch')
pvxFloClActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClActionId.setStatus('current')
if mibBuilder.loadTexts: pvxFloClActionId.setDescription('The action taken by the switch when this classification is matched; 0 = no action.')
pvxFloClMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClMeterId.setStatus('current')
if mibBuilder.loadTexts: pvxFloClMeterId.setDescription('Meter associated with this flow classification, 0 = no meter')
pvxFloClStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFloClStatus.setDescription('The administrative status of this entry')
pvxFloClEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untyped", 1), ("ipAcl", 2), ("macAcl", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClEntryType.setStatus('current')
if mibBuilder.loadTexts: pvxFloClEntryType.setDescription('The administrative status of this entry')
pvxFloClL2InterfaceRange = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClL2InterfaceRange.setStatus('current')
if mibBuilder.loadTexts: pvxFloClL2InterfaceRange.setDescription('Range of interfaces on which this flow classification applies, blank=all interfaces of the form: L2Interface#[-L2Interface#]')
pvxFloClCVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClCVlanFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClCVlanFilter.setDescription("C-VLAN to match, blank=don't care")
pvxFloClSVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSVlanFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClSVlanFilter.setDescription("S-VLAN to match, blank=don't care")
pvxFloClSourceIPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSourceIPFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClSourceIPFilter.setDescription("Source IP Address (range or subnet) to match, blank=don't care Of the form: a.b.c.d[-e.f.g.h|/n]")
pvxFloClDestIPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClDestIPFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClDestIPFilter.setDescription("Destination IP Address (range or subnet) to match, blank=don't care Of the form: a.b.c.d[-e.f.g.h|/n]")
pvxFloClIPProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClIPProtocolFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClIPProtocolFilter.setDescription("IP protocol range to match, blank=don't care of the form: #[-#]")
pvxFloClEtherTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClEtherTypeFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClEtherTypeFilter.setDescription("Ethernet Protoocl Type range to match, blank=don't care of the form: #[-#]")
pvxFloClSourceMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 14), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSourceMacFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClSourceMacFilter.setDescription("Source MAC Address (range) to match, blank=don't care Of the form: a.b.c.d.e.f[-g.h.i.j.k.l]")
pvxFloClDestMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClDestMacFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClDestMacFilter.setDescription("Destination MAC Address (range) to match, blank=don't care Of the form: a.b.c.d.e.f[-g.h.i.j.k.l]")
pvxFloClSourceUDPorTCPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClSourceUDPorTCPFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClSourceUDPorTCPFilter.setDescription("Source TCP or UDP port to match, blank=don't care Of the form: #[-#]")
pvxFloClDestUDPorTCPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 17), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClDestUDPorTCPFilter.setStatus('current')
if mibBuilder.loadTexts: pvxFloClDestUDPorTCPFilter.setDescription("Destination TCP or UDP port to match, blank=don't care Of the form: #[-#]")
pvxFloClRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 13, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloClRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFloClRowStatus.setDescription('This object is used to create a new row in the flowClassTable.')
pvxFlowActionsTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14), )
if mibBuilder.loadTexts: pvxFlowActionsTable.setStatus('current')
if mibBuilder.loadTexts: pvxFlowActionsTable.setDescription('')
pvxFlowActionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFloActSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFloActIdx"))
if mibBuilder.loadTexts: pvxFlowActionsEntry.setStatus('current')
if mibBuilder.loadTexts: pvxFlowActionsEntry.setDescription('The conceptual row object of the Flow Class Config table.')
pvxFloActSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFloActSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFloActSwitchIdx.setDescription('This object represents the particular switch Id.')
pvxFloActIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: pvxFloActIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFloActIdx.setDescription('Index of this flow action on this switch')
pvxFloActChangePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActChangePriority.setStatus('current')
if mibBuilder.loadTexts: pvxFloActChangePriority.setDescription('Should the priority of this flow be re-assigned? If true, the value of the pvxFloActNewPriority will be applied as the new priority for the packets in the stream. If false, the priority is left unchanged.')
pvxFloActNewPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActNewPriority.setStatus('current')
if mibBuilder.loadTexts: pvxFloActNewPriority.setDescription('If the pvxFloActChangePriority field is true, the value of this field will be used as the priority of packets in the flow.')
pvxFloActPacketAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("drop", 2), ("redirect", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActPacketAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActPacketAction.setDescription('Should we drop, redirect the packets or let them on their way?')
pvxFloActRedirectToInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRedirectToInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: pvxFloActRedirectToInterfaceIndex.setDescription('When redirecting, Index of L2 Port to which the system should redirect the flow')
pvxFloActMirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ingress", 2), ("egress", 3), ("both", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActMirrorType.setStatus('current')
if mibBuilder.loadTexts: pvxFloActMirrorType.setDescription('What Mirroring action to perform on the flow?')
pvxFloActMirrorToInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActMirrorToInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: pvxFloActMirrorToInterfaceIndex.setDescription('Index of L2 interface to which the switch will mirror the flow.')
pvxFloActSVlanValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActSVlanValue.setStatus('current')
if mibBuilder.loadTexts: pvxFloActSVlanValue.setDescription('S-VLAN to assign. 0=none')
pvxFloActCVlanValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActCVlanValue.setStatus('current')
if mibBuilder.loadTexts: pvxFloActCVlanValue.setDescription('C-VLAN to assign. 0=none')
pvxFloActSVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("replace", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActSVlanAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActSVlanAction.setDescription('What action should be performed on the S-VLAN?')
pvxFloActCVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("add", 2), ("replace", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActCVlanAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActCVlanAction.setDescription('What action should be performed on the C-VLAN')
pvxFloActGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotDrop", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActGreenAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActGreenAction.setDescription('What action should the switch take on Green Packets?')
pvxFloActGreenCNGAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotChange", 1), ("green", 2), ("yellow", 3), ("red", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActGreenCNGAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActGreenCNGAction.setDescription('If a green packet of this flow is found, what color should it be changed to?')
pvxFloActRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotDrop", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRedAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActRedAction.setDescription('What action should the switch take on Red Packets?')
pvxFloActRedCNGAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotChange", 1), ("green", 2), ("yellow", 3), ("red", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRedCNGAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActRedCNGAction.setDescription('If a red packet of this flow is found, what color should it be changed to?')
pvxFloActYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotDrop", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActYellowAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActYellowAction.setDescription('What action should the switch take on Yellow Packets?')
pvxFloActYellowCNGAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotChange", 1), ("green", 2), ("yellow", 3), ("red", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActYellowCNGAction.setStatus('current')
if mibBuilder.loadTexts: pvxFloActYellowCNGAction.setDescription('If a yellow packet of this flow is found, what color should it be changed to?')
pvxFloActRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 14, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFloActRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFloActRowStatus.setDescription('')
pvxFlowMeterTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15), )
if mibBuilder.loadTexts: pvxFlowMeterTable.setStatus('current')
if mibBuilder.loadTexts: pvxFlowMeterTable.setDescription('')
pvxFlowMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFMMeterIdx"))
if mibBuilder.loadTexts: pvxFlowMeterEntry.setStatus('current')
if mibBuilder.loadTexts: pvxFlowMeterEntry.setDescription('The conceptual row object of the Flow Class Config table.')
pvxFMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFMSwitchIdx.setDescription('This object represents the particular switch Id.')
pvxFMMeterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFMMeterIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFMMeterIdx.setDescription('')
pvxFMBWProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMBWProfileId.setStatus('current')
if mibBuilder.loadTexts: pvxFMBWProfileId.setDescription('')
pvxFMMeterProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMMeterProfileId.setStatus('current')
if mibBuilder.loadTexts: pvxFMMeterProfileId.setDescription('')
pvxFMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 15, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFMRowStatus.setDescription('This object is used to create a new row in the serviceMapTable.')
pvxFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16), )
if mibBuilder.loadTexts: pvxFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: pvxFlowStatsTable.setDescription('')
pvxFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFSSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxFSStatsIdx"))
if mibBuilder.loadTexts: pvxFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pvxFlowStatsEntry.setDescription('')
pvxFSSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxFSSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFSSwitchIdx.setDescription('This object represents the particular switch Id.')
pvxFSStatsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 2), Integer32())
if mibBuilder.loadTexts: pvxFSStatsIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFSStatsIdx.setDescription('')
pvxFSFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSFlowId.setStatus('current')
if mibBuilder.loadTexts: pvxFSFlowId.setDescription('')
pvxFSInProfilePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSInProfilePackets.setStatus('current')
if mibBuilder.loadTexts: pvxFSInProfilePackets.setDescription('')
pvxFSOutOfProfilePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSOutOfProfilePackets.setStatus('current')
if mibBuilder.loadTexts: pvxFSOutOfProfilePackets.setDescription('')
pvxFSCountOfClassifiedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSCountOfClassifiedPackets.setStatus('current')
if mibBuilder.loadTexts: pvxFSCountOfClassifiedPackets.setDescription('')
pvxFSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 16, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFSRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFSRowStatus.setDescription('')
pvxPbCVidRegistrationTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17), )
if mibBuilder.loadTexts: pvxPbCVidRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: pvxPbCVidRegistrationTable.setDescription('')
pvxPbCVidRegistrationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxPCVRTCVlanIdFrom"))
if mibBuilder.loadTexts: pvxPbCVidRegistrationTableEntry.setStatus('current')
if mibBuilder.loadTexts: pvxPbCVidRegistrationTableEntry.setDescription('')
pvxPCVRTCVlanIdFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxPCVRTCVlanIdFrom.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTCVlanIdFrom.setDescription('The beginning of the range of customer VLAN IDs that the system will map to the service VLAN specified in pvxPCVRTSVlanId.')
pvxPCVRTCVlanIdTo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTCVlanIdTo.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTCVlanIdTo.setDescription('The end of the range of customer VLAN IDs. To specify a single C-VLAN ID, this value should be equal to pvxPCVRTCVlanFrom. This value may never be smaller than pvxPCVRTCVlanFrom.')
pvxPCVRTSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTSVlanId.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTSVlanId.setDescription('The S-VLAN that the system will assign to any packets that it forwards from this port that had any of the C-VLAN ids in the range pvxPCVRTCVlanIdFrom..pvxPCVRTCVlanIdTo')
pvxPCVRTUntaggedPEP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTUntaggedPEP.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTUntaggedPEP.setDescription("A boolean indicating frames for this specified Customer VLAN identifier ingress at this specified Customer Edge Port (CEP) should be forwarded untagged through the Provider Edge Port (PEP). When it is set to 'True' the C-VLAN tag will be stripped. Otherwise the packet will be sent out with a C-tag and with valid C-VID.")
pvxPCVRTUntaggedCEP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTUntaggedCEP.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTUntaggedCEP.setDescription("A boolean indicating frames for this specified Customer VLAN identifier should be forwarded untagged through this specified Customer Edge Port (CEP). When it is set to 'True' the C-VLAN tag will be stripped. Otherwise the tag will be added if the packet is C-VLAN untagged.")
pvxPCVRTSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manualCreate", 1), ("autoCreate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxPCVRTSource.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTSource.setDescription('')
pvxPCVRTMapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 7), PvxCVidMapOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxPCVRTMapOperStatus.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTMapOperStatus.setDescription('')
pvxPCVRTXlateOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 8), PvxCVidMapOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxPCVRTXlateOperStatus.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTXlateOperStatus.setDescription('')
pvxPCVRTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 17, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCVRTRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxPCVRTRowStatus.setDescription('This object is used to create or delete a new row in the pvxPbCVidRegistrationTable.')
pvxEthServiceTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18), )
if mibBuilder.loadTexts: pvxEthServiceTable.setStatus('current')
if mibBuilder.loadTexts: pvxEthServiceTable.setDescription('This table is used to configure services on all the switches in the chassis.')
pvxEthServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEthSrvcSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEthSrvcName"))
if mibBuilder.loadTexts: pvxEthServiceEntry.setStatus('current')
if mibBuilder.loadTexts: pvxEthServiceEntry.setDescription("The conceptual row object of the Ethernet Service table. Note the pvxEthSrvcName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a service named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7. ")
pvxEthSrvcSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEthSrvcSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcSwitchIdx.setDescription('This object represents the particular switch id.')
pvxEthSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxEthSrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcName.setDescription('The name of the service.')
pvxEthSrvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("epline", 1), ("evpline", 2), ("eplan", 3), ("evplan", 4), ("erps", 5), ("igmp", 6), ("managementVLAN", 7), ("eptree", 8), ("evptree", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcType.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcType.setDescription('This object represents the particular service type. This object must be specifyed during row creation and cannot be changed.')
pvxEthSrvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("testing", 3))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcState.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcState.setDescription('Is this service administratively enabled or disabled?')
pvxEthSrvcOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcOperState.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcOperState.setDescription('The current operational state of the service.')
pvxEthSrvcTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("providerBridge", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcTransportType.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcTransportType.setDescription('For future compatibily; describes the transport mechanism for this service. For the current release we only support providerBridge IEEE802.1ad transport.')
pvxEthSrvcSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 7), PvxVlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcSVLAN.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcSVLAN.setDescription('If no value is specified in the row create request, the value defaults to the current reserved SVLAN value.')
pvxEthSrvcSpanTreeInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcSpanTreeInstance.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcSpanTreeInstance.setDescription('The spanning tree instance for this service. Default is 0')
pvxEthSrvcMaxUNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcMaxUNIs.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcMaxUNIs.setDescription('The maximum number of UNIs that can be associated with this Service. This value is derived from the ServiceType')
pvxEthSrvcNumUNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcNumUNIs.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcNumUNIs.setDescription('The number of UNIs currently associated with the Service.')
pvxEthSrvcPointedness = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multiPoint", 2), ("internal", 3), ("ring", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcPointedness.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcPointedness.setDescription('Is this a point-to-point or multipoint service')
pvxEthSrvcFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600)).clone(1522)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcFrameSize.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcFrameSize.setDescription('The maximum size of a frame transported on this service.')
pvxEthSrvcCVidXlate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcCVidXlate.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcCVidXlate.setDescription('Do we translate the C-VID on this service? Can only be true if all UNIs have a single C-VID mapped to this service.')
pvxEthSrvcMECciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("intervalInvalid", 1), ("interval300Hz", 2), ("interval10ms", 3), ("interval100ms", 4), ("interval1s", 5), ("interval10s", 6), ("interval1min", 7), ("interval10min", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcMECciInterval.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcMECciInterval.setDescription('Indicates the interval at which CCMs are sent by a MEP. The possible values are: intervalInvalid(0) No CCMs are sent (disabled). interval300Hz(1) CCMs are sent every 3 1/3 milliseconds (300Hz). interval10ms(2) CCMs are sent every 10 milliseconds. interval100ms(3) CCMs are sent every 100 milliseconds. interval1s(4) CCMs are sent every 1 second. interval10s(5) CCMs are sent every 10 seconds. interval1min(6) CCMs are sent every minute. interval10min(7) CCMs are sent every 10 minutes. Default value is set to interval1s by the system. ')
pvxEthSrvcMECciEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcMECciEnable.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcMECciEnable.setDescription('If set to true, the MEP will generate CCM messages. Default is set to false by the system.')
pvxEthSrvcMEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcMEName.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcMEName.setDescription('Name of the EVC Maintanence Entity. Maximum length is 6 characters.')
pvxEthSrvcMaxNNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcMaxNNIs.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcMaxNNIs.setDescription('The maximum number of NNIs that can be associated with this Service. This value is derived from the ServiceType')
pvxEthSrvcNumNNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcNumNNIs.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcNumNNIs.setDescription('The number of NNIs currently associated with the Service.')
pvxEthSrvcLockNNIs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcLockNNIs.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcLockNNIs.setDescription('If true, the switch will not let any dynamic VLAN protocols, such as GVRP, add NNIs to the Service.')
pvxEthSrvcExceedMaxUNI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEthSrvcExceedMaxUNI.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcExceedMaxUNI.setDescription('This attribute is used to indicate the error condition that the maximum number of NUIs has exceeded for EPLINE or EVPLINE.')
pvxEthSrvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 18, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEthSrvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxEthSrvcRowStatus.setDescription('')
pvxServiceUNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19), )
if mibBuilder.loadTexts: pvxServiceUNITable.setStatus('current')
if mibBuilder.loadTexts: pvxServiceUNITable.setDescription('This table binds a UNI to a service and describes the configuration of the UNI-service combination.')
pvxServiceUNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISrvcName"))
if mibBuilder.loadTexts: pvxServiceUNIEntry.setStatus('current')
if mibBuilder.loadTexts: pvxServiceUNIEntry.setDescription("The conceptual row object of the Service UNI table. Note the pvxSrvcUNISrvcName index is a variable length OCTET STRING object. When encoded as part of the Service UNI index, it includes the string length as part of the instance. For example, a service named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7. ")
pvxSrvcUNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSrvcUNISwitchId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNISwitchId.setDescription('This object represents the particular switch id.')
pvxSrvcUNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSrvcUNIShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIShelfId.setDescription('')
pvxSrvcUNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSrvcUNISlotId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNISlotId.setDescription('')
pvxSrvcUNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSrvcUNIPortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIPortTypeId.setDescription('')
pvxSrvcUNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxSrvcUNIPortId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIPortId.setDescription('')
pvxSrvcUNISrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxSrvcUNISrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNISrvcName.setDescription('The name of the service.')
pvxSrvcUNINumCVids = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSrvcUNINumCVids.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNINumCVids.setDescription('The number of C-VIDs associated with this service on this UNI.')
pvxSrvcUNIIngressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIIngressBW.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIIngressBW.setDescription('The name of the profile thay specifies the ingress bandwidth for this service in this UNI.')
pvxSrvcUNIIngressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIIngressBWperCos.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIIngressBWperCos.setDescription('The name of the profile thay specifies the ingress bandwidth per COS Id for this service in this UNI.')
pvxSrvcUNIEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIEgressBW.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIEgressBW.setDescription('The name of the profile thay specifies the egress bandwidth for this service in this UNI.')
pvxSrvcUNIEgressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIEgressBWperCos.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIEgressBWperCos.setDescription('The name of the profile thay specifies the egress bandwidth per COS Id for this service in this UNI.')
pvxSrvcUNIUserDefinedMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIUserDefinedMepId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIUserDefinedMepId.setDescription('If the value is zero, then the user has not set a MEP ID for the Service UNI and one will be autogenerated by the system. If the user wishes to manually configure a MEP ID it must be in the range of 1 - 8191, inclusive.')
pvxSrvcUNIForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("etree-leaf", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIForwarding.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIForwarding.setDescription("Forwarding specification applies only to E-Tree services. It is an indication of whether a UNI is a Leaf port(etree-leaf) or a Root port(normal). The default value for all UNIs is etree-leaf. For other eservices except E-tree, it's only shown as normal and not configurable.")
pvxSrvcUNIServiceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIServiceMap.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIServiceMap.setDescription('The name of the profile that specifies the service map filters for this service in this UNI.')
pvxSrvcUNIFilterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIFilterSequence.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIFilterSequence.setDescription('A numerical value used to order service map filter evaluation on a UNI. Lower values are evaluated before higher values')
pvxSrvcUNIEFPSDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDEnabled.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDEnabled.setDescription('Indicates if Ethernet Fault Propagation Shut Down (EFPSD) feature is enabled on this service UNI.')
pvxSrvcUNIEFPSDLocalEFPSDState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDLocalEFPSDState.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDLocalEFPSDState.setDescription('For service UNIs with EFPSD enabled, indicates if EFPSD is currently engaged on the local UNI. If EFPSD is engaged, the transmitter on the UNI is off.')
pvxSrvcUNISlaMeasurementProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNISlaMeasurementProfile.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNISlaMeasurementProfile.setDescription('The name of the profile that specifies the SLA mesaurement thresholds for this service in this UNI.')
pvxSrvcUNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 19, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcUNIRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIRowStatus.setDescription('')
pvxSvidXlateTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20), )
if mibBuilder.loadTexts: pvxSvidXlateTable.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlateTable.setDescription('This table defines all User Network Interfaces on all switches.')
pvxSvidXlateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateSwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateSlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlatePortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlatePortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSvidXlateInternalSVid"))
if mibBuilder.loadTexts: pvxSvidXlateEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlateEntry.setDescription('The conceptual row object of the SvidXlate Table')
pvxSvidXlateSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSvidXlateSwitchId.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlateSwitchId.setDescription('This object represents the particular switch id.')
pvxSvidXlateShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSvidXlateShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlateShelfId.setDescription('')
pvxSvidXlateSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSvidXlateSlotId.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlateSlotId.setDescription('')
pvxSvidXlatePortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSvidXlatePortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlatePortTypeId.setDescription('')
pvxSvidXlatePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxSvidXlatePortId.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlatePortId.setDescription('')
pvxSvidXlateInternalSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 6), PvxVlanId())
if mibBuilder.loadTexts: pvxSvidXlateInternalSVid.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlateInternalSVid.setDescription('')
pvxSvidXlateExternalSVid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 20, 1, 7), PvxVlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxSvidXlateExternalSVid.setStatus('current')
if mibBuilder.loadTexts: pvxSvidXlateExternalSVid.setDescription('')
pvxMgmtVLANTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22), )
if mibBuilder.loadTexts: pvxMgmtVLANTable.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANTable.setDescription('This table describes the Management VLAN service for the switch.')
pvxMgmtVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMgmtVLANSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMgmtVLANSrvcName"))
if mibBuilder.loadTexts: pvxMgmtVLANEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANEntry.setDescription('A row in the Management VLAN Table. Note that in Provider Bridge mode, a row in this table is auto-created by adding an entry in the pvxEthServiceTable. You cannot create the row directly. ')
pvxMgmtVLANSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMgmtVLANSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANSwitchIdx.setDescription('This object represents the switch on which this Mgmt VLAN runs.')
pvxMgmtVLANSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 2), DisplayString())
if mibBuilder.loadTexts: pvxMgmtVLANSrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANSrvcName.setDescription('This is the name of the Mgmt VLAN service. A corresponding entry with this name is in the pvxEthServicesTable')
pvxMgmtVLANBWProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANBWProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANBWProfileName.setDescription('The name of the bandwidth profile that applies to the management VLAN. Does not apply in provider bridge mode.')
pvxMgmtVLANCVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANCVLANId.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANCVLANId.setDescription('The Customer VLAN ID with which packets will be tagged when sent on the Mgmt VLAN. If 0, no CVLAN tagging will occur.')
pvxMgmtVLANAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANAddressType.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANAddressType.setDescription('The type of addresses (v4/v6) used in this row of this MIB. Currently only ipv4 is allowed in this table.')
pvxMgmtVLANIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANIpAddress.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANIpAddress.setDescription('The IP Address associated with this interface.')
pvxMgmtVLANNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANNetMask.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANNetMask.setDescription('The sub-net mask associated with this interface.')
pvxMgmtVLANDebugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANDebugMode.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANDebugMode.setDescription('Debug Mode for Management VLAN, defaulted to off')
pvxMgmtVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 22, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMgmtVLANRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxMgmtVLANRowStatus.setDescription('This object is used to create a new row in the MgmtVLAN table.')
pvxServiceNNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23), )
if mibBuilder.loadTexts: pvxServiceNNITable.setStatus('current')
if mibBuilder.loadTexts: pvxServiceNNITable.setDescription('This table binds a NNI to a service and describes the configuration of the NNI-service combination.')
pvxServiceNNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNIPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSrvcNNISrvcName"))
if mibBuilder.loadTexts: pvxServiceNNIEntry.setStatus('current')
if mibBuilder.loadTexts: pvxServiceNNIEntry.setDescription("The conceptual row object of the Service NNI table. Note the pvxSrvcNNISrvcName index is a variable length OCTET STRING object. When encoded as part of the Service NNI index, it includes the string length as part of the instance. For example, a service named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7. ")
pvxSrvcNNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSrvcNNISwitchId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNISwitchId.setDescription('This object represents the particular switch id.')
pvxSrvcNNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSrvcNNIShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIShelfId.setDescription('')
pvxSrvcNNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSrvcNNISlotId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNISlotId.setDescription('')
pvxSrvcNNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSrvcNNIPortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIPortTypeId.setDescription('')
pvxSrvcNNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxSrvcNNIPortId.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIPortId.setDescription('')
pvxSrvcNNISrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxSrvcNNISrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNISrvcName.setDescription('The name of the service.')
pvxSrvcNNIIngressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIIngressBW.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIIngressBW.setDescription('The name of the profile thay specifies the ingress bandwidth for this service in this NNI.')
pvxSrvcNNIIngressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIIngressBWperCos.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIIngressBWperCos.setDescription('The name of the profile thay specifies the ingress bandwidth per COS Id for this service in this NNI.')
pvxSrvcNNIEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIEgressBW.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIEgressBW.setDescription('The name of the profile thay specifies the egress bandwidth for this service in this NNI.')
pvxSrvcNNIEgressBWperCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIEgressBWperCos.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIEgressBWperCos.setDescription('The name of the profile thay specifies the egress bandwidth per COS Id for this service in this NNI.')
pvxSrvcNNIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 23, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSrvcNNIRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcNNIRowStatus.setDescription('')
pvxERPSServiceNNITable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24), )
if mibBuilder.loadTexts: pvxERPSServiceNNITable.setStatus('current')
if mibBuilder.loadTexts: pvxERPSServiceNNITable.setDescription('This table provides configuration for an ERPS NNI.')
pvxERPSServiceNNIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISwitchId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortId"))
if mibBuilder.loadTexts: pvxERPSServiceNNIEntry.setStatus('current')
if mibBuilder.loadTexts: pvxERPSServiceNNIEntry.setDescription('The conceptual row object of the ERPS Service NNI table.')
pvxERPSSrvcNNISwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSSrvcNNISwitchId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNISwitchId.setDescription('This object represents the particular switch id.')
pvxERPSSrvcNNIShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxERPSSrvcNNIShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIShelfId.setDescription('This object represents the particular shelf id.')
pvxERPSSrvcNNISlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxERPSSrvcNNISlotId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNISlotId.setDescription('This object represents the particular slot id.')
pvxERPSSrvcNNIPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxERPSSrvcNNIPortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIPortTypeId.setDescription('This object represents the particular port type.')
pvxERPSSrvcNNIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxERPSSrvcNNIPortId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIPortId.setDescription('This object represents the particular port id.')
pvxERPSSrvcNNIRingProtectLink = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingProtectLink.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingProtectLink.setDescription('This variable indicates whether this NNI is the protection link for the ring. When a port is configured as a RPL port, this node becomes RPL Owner for the ring. The administrator has to ensure that only one node in a ring is configured as RPL Owner.')
pvxERPSSrvcNNIProtectionSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIProtectionSwitch.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIProtectionSwitch.setDescription("This object identifies the port that will be blocked by enforcing forced or manual switching. Enabling this port configures pvxERSPSrvcProtectionSwitchMode to operate on this port. The pvxERPSSrvcProtectionSwitchMode must be set to 'normal' in order to enable or disable pvxERPSSrvcNNIProtectionSwitch on this port.")
pvxERPSSrvcNNIRingPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("unblocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingPortStatus.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingPortStatus.setDescription("This object indicates the port's current status updated by the ERPS control process of this ring.")
pvxERPSSrvcNNISrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNISrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNISrvcName.setDescription('The name of the ERPS service this port is part of.')
pvxERPSSrvcNNIRingPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringPort1", 1), ("ringPort2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingPortId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIRingPortId.setDescription('The designation of this port w.r.t. the ERPS ring.')
pvxERPSSrvcNNIMEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIMEName.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIMEName.setDescription('The Maintanence Entity Name for the CCMs for this ERPS NNI. Maximum length is 6 characters.')
pvxERPSSrvcNNIRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIRemoteMepId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIRemoteMepId.setDescription('The MEP Id of the remote end-point of the NNI. 0 indicates that the value should be auto-discovered.')
pvxERPSSrvcNNIECFMInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNNIECFMInfo.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIECFMInfo.setDescription('The provisioned information about the ECMF entities in the ring.')
pvxERPSSrvcNNILocalMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNILocalMepId.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNILocalMepId.setDescription('The MEP Id of the local end-point of the NNI. 0 indicates that the value should be auto-discovered.')
pvxERPSSrvcNNINeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNINeighborPort.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNINeighborPort.setDescription("This object identifies the RPL Neighbor port of the ring. When a\\ port is configured as a RPL Neighbor port, that node becomes RPL Neighbor for that ring. [Reference : Section 10.1 of ITU-T G.8032 Y.1344 (03/2010)] Value '2' indicates that this ring port is not a RPL Neighbor port. Both the RPL owner and RPL Neighbor node cannot be enabled at the same Ethernet Ring Node. Administrator has to ensure that, only one node in a ring is configured as RPL Neighbor, and the node is adjacent to the RPL .")
pvxERPSSrvcNNINextNeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNINextNeighborPort.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNINextNeighborPort.setDescription("This object identifies the RPL Next Neighbor port of the ring. When a port is configured as a RPL Next Neighbor port, that node becomes RPL Next Neighbor for that ring. [Reference : Section VIII.4 of ITU-T G.8032 Y.1344 (03/2010)] Value '2' indicates that this ring port is not a RPL Next Neighbor port. Both the RPL owner and RPL Next Neighbor node cannot be enabled at the same Ethernet Ring Node. Administrator has to ensure that, only nodes in a ring which are adjacent to the RPL owner or RPL Neighbor node are configured as RPL Next Neighbor Nodess.")
pvxERPSSrvcNNIFlushRemoteMEP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNIFlushRemoteMEP.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIFlushRemoteMEP.setDescription('A Boolean indicating whether the remote MEP needs to flush its MEP list or not True indicates that the remote MEP needs to flush and rebuild its MEP lists.')
pvxERPSSrvcNNICcmLinkDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 24, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcNNICcmLinkDetection.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNICcmLinkDetection.setDescription("This object identifies the Link-state detection method for ERPS NNIs. If this is set to 'Enable', CCMs are transmitted to the peer NNI, and the peer is expected to send back CCMs if it is enabled. Upon receipt of a CCM from the peer, the ERPS link will go 'up'. If there is a physical link failure or CCMs stop being received, the link will go 'down'. If this is set to 'Disable', link status will be based on physical link up or down.")
pvxERPSServiceTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25), )
if mibBuilder.loadTexts: pvxERPSServiceTable.setStatus('current')
if mibBuilder.loadTexts: pvxERPSServiceTable.setDescription('This table is used to configure ERPS service on a particular switch in the chassis.')
pvxERPSServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"))
if mibBuilder.loadTexts: pvxERPSServiceEntry.setStatus('current')
if mibBuilder.loadTexts: pvxERPSServiceEntry.setDescription('The conceptual row object of the ERPS Service.')
pvxERPSSrvcSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSSrvcSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcSwitchIdx.setDescription('This object represents the particular switch id.')
pvxERPSSrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxERPSSrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcName.setDescription('The name of the ERPS service.')
pvxERPSSrvcRevertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("non-revertive", 2))).clone('revertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcRevertMode.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcRevertMode.setDescription('This object identifies whether the ring is operating in revertive or nonRevertive manner. In revertive mode of operation, once the failed link recovers, the data path will be switched back from protection path to working path. In nonRevertive mode of operation, once the failed link recovers, the recovered link port will remain blocked state and the data still remains with the protection path.')
pvxERPSSrvcProtectionSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normalSwitch", 1), ("forceSwitch", 2), ("manualSwitch", 3), ("clear", 4))).clone('normalSwitch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcProtectionSwitchMode.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcProtectionSwitchMode.setDescription("Before configuring this object with 'forceSwitch' or 'manualSwitch', pvxERPSSrvcNNIProtectionSwitch MUST be enabled on one of the NNI ports. When forcedSwitch is enabled on a ring, irrespective of the status (Failed or not failed) of the NNI port, the port will be blocked. If a link failure is present in the ring, then setting the value as 'manualSwitch' will not be allowed. Failure of the link in the ring will clear the manual switch condition. Force Switch is higher priority than the manual switch, as such forceSwitch will overwrite the manual switch configuration. Similarly manualSwitch will not be allowed, when forceSwitch is enabled. 'normalSwitch' command will clear the Manual/Force switch")
pvxERPSSrvcHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('deciseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcHoldTimer.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcHoldTimer.setDescription('This object is used to configure the period for the hold timer of this ring. Hold-Off timer will be started when a new defect (SF) is received on this ring. This defect will not be give as local SF to ERP control process until hold timer expires. When the hold-off timer expires, and if a local defect still exists it will be given as local SF to the ERP control process of this ring.')
pvxERPSSrvcWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(300, 300), ValueRangeConstraint(360, 360), ValueRangeConstraint(420, 420), ValueRangeConstraint(480, 480), ValueRangeConstraint(540, 540), ValueRangeConstraint(600, 600), ValueRangeConstraint(660, 660), ValueRangeConstraint(720, 720), ValueRangeConstraint(780, 780), ValueRangeConstraint(840, 840), ValueRangeConstraint(900, 900), )).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcWaitToRestoreTimer.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcWaitToRestoreTimer.setDescription("This object is used to configure the period for the Wait to restore timer. This object is applicable only if this ring is operating in the revertive mode of operation. In the revertive mode of operation, if this object is configured with a value of '0', then the traffic is switched back to the working entity from the protection entity immediately upon recovery from failure of the working entity. Value can be set to 10 seconds or any value between 5 minutes (300) and 15 minutes (900) that is an even one minute interval.")
pvxERPSSrvcGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(50)).setUnits('centiseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcGuardTimer.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcGuardTimer.setDescription('This object is used to configure the period for the guard timer of this ring. This timer is required to prevent reception of outdated R-APS messages. Guard timer will be started on reception of local clear SF event. R-APS messages (except R-APS event messages) received on a ring when guard timer is running, will be discarded.')
pvxERPSSrvcPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 10)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcPeriodicTimer.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcPeriodicTimer.setDescription('This object is used to configure the periodic timer. Periodic timer is used to configure the transmission interval of R-APS PDUs. Periodic timer is not valid for the first 3 R-APS PDU transmission, that will be send on any change of R-APS information.')
pvxERPSSrvcPropagateTC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcPropagateTC.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcPropagateTC.setDescription('This object is used to Enable/Disable the Propagation of TC in the associated rings, whenever the flush FDB is triggered for this sub-ring. This configuration is applicable only in the interconnecting nodes of the sub-ring')
pvxERPSSrvcNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rplOwner", 1), ("nonRplOwner", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNodeType.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNodeType.setDescription("This object identifies the node state of this ring node. If one of the NNI is configured as the RPL, then this ring node becomes 'rplOwner', otherwise the node remains as 'nonRplOwner'.")
pvxERPSSrvcRingMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cfm", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcRingMonitoring.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcRingMonitoring.setDescription('This attribute is the configurations related to the link monitoring entities. The fault monitoring could be using the Y.1731 mechanism or local detection mechanisms.')
pvxERPSSrvcRingProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inter-connect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcRingProperty.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcRingProperty.setDescription("This attributes indicates the ring property of the service. The 'normal' ring propery indicates that this node supports the regular ring properties for the service. The 'inter-connect' ring property indicates that this nodes supports the 'sub-ring' connectivity for this service")
pvxERPSSrvcRingSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("idle", 2), ("protection", 3), ("manualswitch", 4), ("forcedswitch", 5), ("pending", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcRingSemState.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcRingSemState.setDescription("This object gives the node state as per the G.8032 state event machine. During fault-free operation the state would be in 'idle' state. Any fault condition on the ring network would move this attribute into the protection state. If a manual switch is issued on any node in the ring the operation state of the ring would be manualswitch state. If a force switch is issued on any node in the ring the operation state of the ring would be forcedswitch. Pending state occurs when a ring transition has occurred and the node is waiting for a timer to expire. ")
pvxERPSSrvcRingNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcRingNodeStatus.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcRingNodeStatus.setDescription('A 32 bit mask giving the current status of the ring by specifying the events/status currently present: Bit 1 - Signal-failure on Ring Port 1 Bit 2 - Signal-failure on Ring Port 2 Bit 3 - Remote-signal-failure received on Ring Port 1 Bit 4 - Remote-signal-failure received on Ring Port 2 Bit 5 - Rpl-Blocked Bit 6 - Wait-to-restore-timer-running Bit 7 - Hold-timer-running Bit 8 - Guard-timer-running Value 1 of the bit signifies the presence of the event associated with that bit and values zero signifies absence of that event')
pvxERPSSrvcNumRingPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcNumRingPorts.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNumRingPorts.setDescription('This attribute indicates the number of ring ports attached to this ERPS service')
pvxERPSSrvcSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 16), PvxVlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcSVLAN.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcSVLAN.setDescription('VlanID associated with the Eservice')
pvxERPSSrvcVirtualLink = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 17), PvxErpsVirtualLinkList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcVirtualLink.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcVirtualLink.setDescription('The set of VIRTUAL-LINKs (vlan-ids) associated with the ERPS Service')
pvxERPSSrvcWaitToBlockTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 864000000)).clone(5500)).setUnits('miliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcWaitToBlockTimer.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcWaitToBlockTimer.setDescription(' This object is used to configure the period for Wait to Block timer. This object is effective, only when force switch or manual switch is configured in the ring and when clear command is issued to recover the ring from force switch or manual switch. The WTB timer is defined to be 5 seconds longer than the guard timer. The WTB timer has a period from 0 to 24 hour, configurable in units of 1 millisecond. For example, to configure WTB timer as 1 second configure the value as 1000. ')
pvxERPSSrvcCompatibleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2))).clone('v2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcCompatibleVersion.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcCompatibleVersion.setDescription('This is used to configure the compatible version number of the node in the ring. The ITU-T G.8032/Y.1344 (03//2010) standard states that the default compatible version is version2. The default value is version2 (2). The version number can be modified only when the row status of the ring entry is in not in service.')
pvxERPSSrvcMultipleFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("primary", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcMultipleFailure.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcMultipleFailure.setDescription("This object is configured in interconnection node of the sub-ring to support the feature 'Minimizing segmentation in interconnected rings' as per Appendix X of ITU-T G.8032/Y.1344 (03/2010) standard. Configured value of vxERPSSrvcMultipleFailure is used in Block Indication Logic Procedure as per Section X.3.2 in Appendix X of ITU-T G.8032/Y.1344 (03/2010) standard. Interconnected rings as described below : a) If Loss of connectivity between the interconnection nodes is detected and if the object pvxERPSSrvcMultipleFailure is configured as primary then Local MS command is applied on the subring port else loss of connectivity between the interconnection nodes is ignored. b) Similarly when loss of connectivity between the interconnection nodes is recovered and if the object pvxERPSSrvcInterconnectedNode is primary then Local MS command on the subring port is cleared else recovery of connectivity between the interconnection nodes is ignored. This object is effective only when ring node is interconnection node. The default value is disabled (1). This object is applicable only when the compatible version is 2.")
pvxERPSSrvcSubRingWithoutVC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcSubRingWithoutVC.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcSubRingWithoutVC.setDescription("This configuration helps to configure the sub-ring to run with or without an RAPS Virtual Channel. When this object is set to 'false', the sub-ring is configured to run with a R-APS Virtual Channel and both the traffic channel and the R-APS channel are blocked, when the ring port is set to blocked state. When this object is set to 'true',the sub-ring is configured to run without a R-APS Virtual Channel and the traffic channel is blocked but the R-APS channel is not blocked, when the ring port is set to blocked state [Reference : Section 10.1.14 of ITU-T G.8032 Y.1344 (03/2010)]. Administrator has to ensure that, this object is configured to true only in the nodes of a sub-ring. This object should be set to the same value (true/false) on all the nodes of the sub-ring. This object is applicable only when the compatible version is 2. This object can be changed, only when the rowstatus for this ring is not active.")
pvxERPSSrvcDownMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcDownMegLevel.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcDownMegLevel.setDescription('This object identifies the MEG level that will be used on CCM messages sent for DOWN MEPs for this ERPS eservice. This object can only be modified if ERPS service is disabled ')
pvxERPSSrvcUpMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSSrvcUpMegLevel.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcUpMegLevel.setDescription('This object identifies the MEG level that will be used on CCM messages sent for UP MEPs for this ERPS eservice. This object can only be modified if ERPS service is disabled ')
pvxERPSSrvcWTRRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 25, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSSrvcWTRRemaining.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcWTRRemaining.setDescription("The value of remain time of WTR timer if it's fired.")
pvxBWProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1), )
if mibBuilder.loadTexts: pvxBWProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxBWProfileTable.setDescription('')
pvxBWProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxBWPIdx"))
if mibBuilder.loadTexts: pvxBWProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxBWProfileEntry.setDescription('')
pvxBWPIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxBWPIdx.setStatus('current')
if mibBuilder.loadTexts: pvxBWPIdx.setDescription('')
pvxBWPCir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPCir.setStatus('current')
if mibBuilder.loadTexts: pvxBWPCir.setDescription('')
pvxBWPCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPCbs.setStatus('current')
if mibBuilder.loadTexts: pvxBWPCbs.setDescription('')
pvxBWPEir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPEir.setStatus('current')
if mibBuilder.loadTexts: pvxBWPEir.setDescription('')
pvxBWPEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPEbs.setStatus('current')
if mibBuilder.loadTexts: pvxBWPEbs.setDescription('')
pvxBWPCoSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPCoSQueue.setStatus('current')
if mibBuilder.loadTexts: pvxBWPCoSQueue.setDescription('')
pvxBWPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWPRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxBWPRowStatus.setDescription('')
pvxCoSProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2), )
if mibBuilder.loadTexts: pvxCoSProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxCoSProfileTable.setDescription('This table is used to configure the Class of service on a port of a particular member of a virtual switch.')
pvxCoSProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxCPIdx"))
if mibBuilder.loadTexts: pvxCoSProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxCoSProfileEntry.setDescription('The conceptual row object of the Cos table.')
pvxCPIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxCPIdx.setStatus('current')
if mibBuilder.loadTexts: pvxCPIdx.setDescription('')
pvxCPMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: pvxCPMaxBandwidth.setDescription('')
pvxCPMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPMinBandwidth.setStatus('current')
if mibBuilder.loadTexts: pvxCPMinBandwidth.setDescription('')
pvxCPWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPWeight.setStatus('current')
if mibBuilder.loadTexts: pvxCPWeight.setDescription('The weight of the queue associated with a CoS for WRR(+SP) and DRR(+SP) queuing algorithms')
pvxCPQueueAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sp", 1), ("rr", 2), ("wrr", 3), ("drr", 4), ("wrrsp", 5), ("drrsp", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPQueueAlgo.setStatus('current')
if mibBuilder.loadTexts: pvxCPQueueAlgo.setDescription('This object represents the queuing algorithm configured for a particular cos on a virtual switch.')
pvxCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxCPRowStatus.setDescription('')
pvxCtrlFrmProfileTable = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 3))
pvxFlowMeterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4), )
if mibBuilder.loadTexts: pvxFlowMeterProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxFlowMeterProfileTable.setDescription('')
pvxFlowMeterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxFMPIdx"))
if mibBuilder.loadTexts: pvxFlowMeterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxFlowMeterProfileEntry.setDescription('')
pvxFMPIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxFMPIdx.setStatus('current')
if mibBuilder.loadTexts: pvxFMPIdx.setDescription('')
pvxFMPBWProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPBWProfileId.setStatus('current')
if mibBuilder.loadTexts: pvxFMPBWProfileId.setDescription('')
pvxFMPColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPColorAware.setStatus('current')
if mibBuilder.loadTexts: pvxFMPColorAware.setDescription('')
pvxFMPMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flow", 1), ("srTCM", 2), ("drTCM", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPMeterType.setStatus('current')
if mibBuilder.loadTexts: pvxFMPMeterType.setDescription('')
pvxFMPStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 5), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPStatsEnabled.setStatus('current')
if mibBuilder.loadTexts: pvxFMPStatsEnabled.setDescription('')
pvxFMPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxFMPRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxFMPRowStatus.setDescription('')
pvxTunnMacAddrProfileTable = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 5))
pvxSchedulerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6), )
if mibBuilder.loadTexts: pvxSchedulerProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxSchedulerProfileTable.setDescription('This is the scheduler profile table.')
pvxSchedulerProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSchedProfName"))
if mibBuilder.loadTexts: pvxSchedulerProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSchedulerProfileEntry.setDescription("The conceptual row object of the Scheduler Profile Table Note the pvxSchedProfName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7. ")
pvxSchedProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxSchedProfName.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfName.setDescription('The scheduler profile name string.')
pvxSchedProfAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sp", 1), ("rr", 2), ("wrr", 3), ("drr", 4), ("sp-wrr", 5), ("sp-drr", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfAlgorithm.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfAlgorithm.setDescription('The scheduler algorithm. The default value is sp. Once the algorithm is set, changes to this value is not allowed. ')
pvxSchedProfWeightQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ0.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ0.setDescription('The weight value for queue 0. The default value is 1. However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfWeightQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ1.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ1.setDescription('The weight value for queue 1. The default value is 1.However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfWeightQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ2.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ2.setDescription('The weight value for queue 2. The default value is 1.However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfWeightQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ3.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ3.setDescription('The weight value for queue 3. The default value is 1.However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfWeightQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ4.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ4.setDescription('The weight value for queue 4. The default value is 1.However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfWeightQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ5.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ5.setDescription('The weight value for queue 5. The default value is 1.However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfWeightQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ6.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ6.setDescription('The weight value for queue 6. The default value is 1.However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfWeightQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfWeightQ7.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfWeightQ7.setDescription('The weight value for queue 7. The default value is 1.However, in wrr and drr mode, the lowerest value can only be 1.')
pvxSchedProfMinBwQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ0.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ0.setDescription('The minmum bandwidth for Queue 0. The default value is 0.')
pvxSchedProfMaxBwQ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ0.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ0.setDescription('The maximum bandwidth for Queue 0. The default value is 0.')
pvxSchedProfMinBwQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ1.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ1.setDescription('The minmum bandwidth for Queue 1. The default value is 0.')
pvxSchedProfMaxBwQ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ1.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ1.setDescription('The maximum bandwidth for Queue 1. The default value is 0.')
pvxSchedProfMinBwQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ2.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ2.setDescription('The minmum bandwidth for Queue 2. The default value is 0.')
pvxSchedProfMaxBwQ2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ2.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ2.setDescription('The maximum bandwidth for Queue 2. The default value is 0.')
pvxSchedProfMinBwQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ3.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ3.setDescription('The minmum bandwidth for Queue 3. The default value is 0.')
pvxSchedProfMaxBwQ3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ3.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ3.setDescription('The maximum bandwidth for Queue 3. The default value is 0.')
pvxSchedProfMinBwQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ4.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ4.setDescription('The minmum bandwidth for Queue 4. The default value is 0.')
pvxSchedProfMaxBwQ4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ4.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ4.setDescription('The maximum bandwidth for Queue 4. The default value is 0.')
pvxSchedProfMinBwQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ5.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ5.setDescription('The minmum bandwidth for Queue 5. The default value is 0.')
pvxSchedProfMaxBwQ5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ5.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ5.setDescription('The maximum bandwidth for Queue 5. The default value is 0.')
pvxSchedProfMinBwQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ6.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ6.setDescription('The minmum bandwidth for Queue 6. The default value is 0.')
pvxSchedProfMaxBwQ6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ6.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ6.setDescription('The maximum bandwidth for Queue 6. The default value is 0.')
pvxSchedProfMinBwQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMinBwQ7.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMinBwQ7.setDescription('The minmum bandwidth for Queue 7. The default value is 0.')
pvxSchedProfMaxBwQ7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ7.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMaxBwQ7.setDescription('The maximum bandwidth for Queue 7. The default value is 0.')
pvxSchedProfMTUQuanta = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("byte2k", 1), ("byte16k", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfMTUQuanta.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfMTUQuanta.setDescription('The attribute is only used by drr, or sp_drr scheduler mode. Default is 2Kbyte.')
pvxSchedProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 6, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSchedProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSchedProfRowStatus.setDescription('')
pvxPriorityTCMapTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7), )
if mibBuilder.loadTexts: pvxPriorityTCMapTable.setStatus('current')
if mibBuilder.loadTexts: pvxPriorityTCMapTable.setDescription('A table mapping evaluated User Priority to Traffic Class, for forwarding by the bridge.')
pvxPriorityTCMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxPriorityTCMapName"))
if mibBuilder.loadTexts: pvxPriorityTCMapEntry.setStatus('current')
if mibBuilder.loadTexts: pvxPriorityTCMapEntry.setDescription("The conceptual row object of the Priority Traffic Class Map Profile Table. Note the pvxPriorityTCMapName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7.")
pvxPriorityTCMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPriorityTCMapName.setStatus('current')
if mibBuilder.loadTexts: pvxPriorityTCMapName.setDescription('The scheduler profile name string.')
pvxPriority7TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority7TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority7TrafficClass.setDescription('The traffic class for priority 7. Default is 7.')
pvxPriority6TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority6TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority6TrafficClass.setDescription('The traffic class for priority 6. Default is 6.')
pvxPriority5TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority5TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority5TrafficClass.setDescription('The traffic class for priority 5. Default is 5.')
pvxPriority4TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority4TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority4TrafficClass.setDescription('The traffic class for priority 4. Default is 4.')
pvxPriority3TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority3TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority3TrafficClass.setDescription('The traffic class for priority 3. Default is 3.')
pvxPriority2TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority2TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority2TrafficClass.setDescription('The traffic class for priority 2. Default is 2.')
pvxPriority1TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority1TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority1TrafficClass.setDescription('The traffic class for priority 1. Default is 0.')
pvxPriority0TrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriority0TrafficClass.setStatus('current')
if mibBuilder.loadTexts: pvxPriority0TrafficClass.setDescription('The traffic class for priority 0. Default is 1.')
pvxPriorityTCMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 7, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPriorityTCMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxPriorityTCMapRowStatus.setDescription('')
pvxPCPEncDecProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8), )
if mibBuilder.loadTexts: pvxPCPEncDecProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncDecProfileTable.setDescription('This table contains information about Priority Code Point Enable and Decoding for a Port of a provider bridge.')
pvxPCPEncDecProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxPCPEncDecProfileName"))
if mibBuilder.loadTexts: pvxPCPEncDecProfEntry.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncDecProfEntry.setDescription("The conceptual row object of the PCP Encoding Decoding Profile Table Note the pvxPCPEncDecProfileName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7.")
pvxPCPEncDecProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPCPEncDecProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncDecProfileName.setDescription('The scheduler profile name string.')
pvxPCPEncDecSelectRow = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("row-8P0D", 1), ("row-7P1D", 2), ("row-6P2D", 3), ("row-5P3D", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncDecSelectRow.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncDecSelectRow.setDescription('The attribute is used to select one of the four default profiles: 8P0D, 7P1D, 6P2D, or 5P3D. Default value is 8P0D. ')
pvxPCPEncPriority7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority7.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority7.setDescription('The encoding value for this priority. Default is 7.')
pvxPCPEncPriority7DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority7DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority7DE.setDescription('The encoding value for this priority. Default is 7.')
pvxPCPEncPriority6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority6.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority6.setDescription('The encoding value for this priority. Default is 6.')
pvxPCPEncPriority6DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority6DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority6DE.setDescription('The encoding value for this priority. Default is 6.')
pvxPCPEncPriority5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority5.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority5.setDescription('The encoding value for this priority. Default is 5.')
pvxPCPEncPriority5DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority5DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority5DE.setDescription('The encoding value for this priority. Default is 5.')
pvxPCPEncPriority4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority4.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority4.setDescription('The encoding value for this priority. Default is 4.')
pvxPCPEncPriority4DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority4DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority4DE.setDescription('The encoding value for this priority. Default is 4.')
pvxPCPEncPriority3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority3.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority3.setDescription('The encoding value for this priority. Default is 3.')
pvxPCPEncPriority3DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority3DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority3DE.setDescription('The encoding value for this priority. Default is 3.')
pvxPCPEncPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority2.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority2.setDescription('The encoding value for this priority. Default is 2.')
pvxPCPEncPriority2DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority2DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority2DE.setDescription('The encoding value for this priority. Default is 2.')
pvxPCPEncPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority1.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority1.setDescription('The encoding value for this priority. Default is 1.')
pvxPCPEncPriority1DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority1DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority1DE.setDescription('The encoding value for this priority. Default is 1.')
pvxPCPEncPriority0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority0.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority0.setDescription('The encoding value for this priority. Default is prioirty 0.')
pvxPCPEncPriority0DE = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncPriority0DE.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncPriority0DE.setDescription('The encoding value for this priority. Default is prioirty 0.')
pvxPCPDecPriority7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 19), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority7.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority7.setDescription('The decoding value for this priority. Default is prioirty7.')
pvxPCPDecPriority6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 20), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority6.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority6.setDescription('The decoding value for this priority. Default is prioirty6.')
pvxPCPDecPriority5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 21), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority5.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority5.setDescription('The decoding value for this priority. Default is prioirty5.')
pvxPCPDecPriority4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 22), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority4.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority4.setDescription('The decoding value for this priority. Default is prioirty4.')
pvxPCPDecPriority3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 23), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority3.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority3.setDescription('The decoding value for this priority. Default is prioirty3.')
pvxPCPDecPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 24), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority2.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority2.setDescription('The decoding value for this priority. Default is prioirty2.')
pvxPCPDecPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 25), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority1.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority1.setDescription('The decoding value for this priority. Default is prioirty1.')
pvxPCPDecPriority0 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 26), PvxPCPDecodingList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPDecPriority0.setStatus('current')
if mibBuilder.loadTexts: pvxPCPDecPriority0.setDescription('The decoding value for this priority. Default is prioirty0.')
pvxPCPEncDecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 8, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPCPEncDecRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxPCPEncDecRowStatus.setDescription('')
pvxDscpPHBProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9), )
if mibBuilder.loadTexts: pvxDscpPHBProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxDscpPHBProfileTable.setDescription('This table defines internal priority settings for the DSCP definitions in the TOS byte in IPV4 header.')
pvxDscpPHBProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxDscpPHBProfileName"))
if mibBuilder.loadTexts: pvxDscpPHBProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxDscpPHBProfileEntry.setDescription("The conceptual row object of the DSCP PHB Profile Table Note the pvxDscpPHBProfileName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7.")
pvxDscpPHBProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxDscpPHBProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxDscpPHBProfileName.setDescription('A string for profile name.')
pvxDscpClassSelector7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector7.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassSelector7.setDescription('This attribute assigns the internal priority value for DSCP class selector 7. Default priority is set to 7.')
pvxDscpClassSelector6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector6.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassSelector6.setDescription('This attribute assigns the internal priority value for DSCP class selector 6. Default priority is set to 6.')
pvxDscpClassSelector5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector5.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassSelector5.setDescription('This attribute assigns the internal priority value for DSCP class selector 5. Default priority is set to 5.')
pvxDscpClassSelector4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector4.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassSelector4.setDescription('This attribute assigns the internal priority value for DSCP class selector 4. Default priority is set to 4.')
pvxDscpClassSelector3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector3.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassSelector3.setDescription('This attribute assigns the internal priority value for DSCP class selector 3. Default priority is set to 3.')
pvxDscpClassSelector2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector2.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassSelector2.setDescription('This attribute assigns the internal priority value for DSCP class selector 2. Default priority is set to 2.')
pvxDscpClassSelector1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassSelector1.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassSelector1.setDescription('This attribute assigns the internal priority value for DSCP class selector 1. Default priority is set to 0.')
pvxDscpClassBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpClassBestEffort.setStatus('current')
if mibBuilder.loadTexts: pvxDscpClassBestEffort.setDescription('This attribute assigns the internal priority value for DSCP best effort. Default priority is set to 1.')
pvxDscpAssuredFwd1y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd1y.setStatus('current')
if mibBuilder.loadTexts: pvxDscpAssuredFwd1y.setDescription('This attribute assigns the internal priority value for DSCP assured forwarding with IP precedence value of 1, drop preference value of 1,2, or 3. Default priority is set to 2.')
pvxDscpAssuredFwd2y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd2y.setStatus('current')
if mibBuilder.loadTexts: pvxDscpAssuredFwd2y.setDescription('This attribute assigns the internal priority value for DSCP assured forwarding with IP precedence value of 2, drop preference value of 1,2, or 3. Default priority is set to 3.')
pvxDscpAssuredFwd3y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd3y.setStatus('current')
if mibBuilder.loadTexts: pvxDscpAssuredFwd3y.setDescription('This attribute assigns the internal priority value for DSCP assured forwarding with IP precedence value of 3, drop preference value of 1,2, or 3. Default priority is set to 4.')
pvxDscpAssuredFwd4y = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpAssuredFwd4y.setStatus('current')
if mibBuilder.loadTexts: pvxDscpAssuredFwd4y.setDescription('This attribute assigns the internal priority value for DSCP assured forwarding with IP precedence value of 4, drop preference value of 1,2, or 3. Default priority is set to 5.')
pvxDscpExpeditedFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpExpeditedFwd.setStatus('current')
if mibBuilder.loadTexts: pvxDscpExpeditedFwd.setDescription('This attribute assigns the internal priority value for DSCP expedited forwarding. Default priority is set to 7.')
pvxDscpPHBProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxDscpPHBProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxDscpPHBProfileRowStatus.setDescription('')
pvxBandwidthProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10), )
if mibBuilder.loadTexts: pvxBandwidthProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxBandwidthProfileTable.setDescription('This table is used to configure the Class of service bandwidth paramaters.')
pvxBandwidthProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxBandwidthProfileName"))
if mibBuilder.loadTexts: pvxBandwidthProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxBandwidthProfileEntry.setDescription("The conceptual row object of the Bandwidth Profile Table Note the pvxBandwidthProfileName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7.")
pvxBandwidthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxBandwidthProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxBandwidthProfileName.setDescription('A string for profile name.')
pvxBWCnfrmActionChangeDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWCnfrmActionChangeDscp.setStatus('current')
if mibBuilder.loadTexts: pvxBWCnfrmActionChangeDscp.setDescription('This field configures the DSCP value for profile conformance action. Default is -1, means do not use this field.')
pvxBWCnfrmActionChangeTOSFrmPri = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("change", 1), ("doNotChange", 2), ("notUsed", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWCnfrmActionChangeTOSFrmPri.setStatus('current')
if mibBuilder.loadTexts: pvxBWCnfrmActionChangeTOSFrmPri.setDescription('This field configures the TOS frame priority for profile conformance action. 1: change, 2: do not change, 3: not defined. Default is 3, means do not use this field.')
pvxBWExceedActionChangeDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWExceedActionChangeDscp.setStatus('current')
if mibBuilder.loadTexts: pvxBWExceedActionChangeDscp.setDescription('This field configures the DSCP value for profile exceed action. Default is -1, means ignore this action.')
pvxBWMeterColorAware = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 13), PvxQoSColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterColorAware.setStatus('current')
if mibBuilder.loadTexts: pvxBWMeterColorAware.setDescription('This field indicates whether color-aware or color-blind proprety is employed. Default is color-blind.')
pvxBWMeterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("srTCM", 1), ("trTCM", 2), ("notUsed", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterMode.setStatus('current')
if mibBuilder.loadTexts: pvxBWMeterMode.setDescription('This field configures meter enging schemes. The value can be single-rate Three-Color Marker, or two-rate Three-Color Marker, or not used. Default is not used.')
pvxBWMeterCir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterCir.setStatus('current')
if mibBuilder.loadTexts: pvxBWMeterCir.setDescription('This field defines Committed Information Rate, in kbps.')
pvxBWMeterCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterCbs.setStatus('current')
if mibBuilder.loadTexts: pvxBWMeterCbs.setDescription('This field defines Committed Burst Size, in kilobytes.')
pvxBWMeterEir = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterEir.setStatus('current')
if mibBuilder.loadTexts: pvxBWMeterEir.setDescription('This field defines Excess Information Rate, in kbps.')
pvxBWMeterEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWMeterEbs.setStatus('current')
if mibBuilder.loadTexts: pvxBWMeterEbs.setDescription('This field defines Excess Burst Size, in kilobytes.')
pvxBWSetInternalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWSetInternalPriority.setStatus('current')
if mibBuilder.loadTexts: pvxBWSetInternalPriority.setDescription('This field defines internal priority for policy actions. Default is set to -1 by the switch, which indicates that this fields is ignored.')
pvxBWExceedActionSetDEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("set", 1), ("doNotSet", 2), ("notUsed", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBWExceedActionSetDEI.setStatus('current')
if mibBuilder.loadTexts: pvxBWExceedActionSetDEI.setDescription("This field configures frame's DEI bit for profile exceed action. 1: set, 2: do not set, 3: not defined. Default is 1, means set DEI bit for frames exceed rate.")
pvxBandwidthProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxBandwidthProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxBandwidthProfileRowStatus.setDescription('')
pvxClassMapProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11), )
if mibBuilder.loadTexts: pvxClassMapProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapProfileTable.setDescription('The table configures filter actions for each Class of Service.')
pvxClassMapProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxClassMapProfileName"))
if mibBuilder.loadTexts: pvxClassMapProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapProfileEntry.setDescription("The conceptual row object of the Class MAP Profile Table. Note the pvxClassMapProfileName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7.")
pvxClassMapProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxClassMapProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapProfileName.setDescription('A string for profile name.')
pvxClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingress-Per-Cos", 1), ("egress-Per-Cos", 2), ("service-Map", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapType.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapType.setDescription('This field indicates whether this profile is for ingress Class of Service or egress Class of Service.')
pvxClassMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match-all", 1), ("match-any", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapMatchType.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapMatchType.setDescription('This field defines filter action. It can be match-all, or match any. Default is matchAll. ')
pvxClassMapCVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapCVlanFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapCVlanFilter.setDescription('This field defines the Customer vlan filter for this class of servcie. Default is -1, means ignore this field. If pvxClassMapCVlanEndFilter is unused, this value represents a single vlan to match. If pvxClassMapCVlanEndFilter contains a filter value, then this value is the beginning of a range of vlans to match. When a range of vlans is specified, the beginning vlan value MUST be greater than end value.')
pvxClassMapSVlanFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxClassMapSVlanFilter.setStatus('deprecated')
if mibBuilder.loadTexts: pvxClassMapSVlanFilter.setDescription('This field defines the Service VLAN filter for this class of servcie. Default is -1, means ignore this field.')
pvxClassMapCVlanPriFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapCVlanPriFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapCVlanPriFilter.setDescription('This field defines the Customer vlan priority filter for this class of servcie. Default is -1, means ignore this field.')
pvxClassMapSVlanPriFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSVlanPriFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapSVlanPriFilter.setDescription('This field defines the Servicre vlan priority filter for this class of servcie. Default is -1, means ignore this field.')
pvxClassMapSrcIpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcIpFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapSrcIpFilter.setDescription('This field defines the Source IP filter for this class of servcie. Defult is an empty string.')
pvxClassMapSrcIpNetMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcIpNetMaskFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapSrcIpNetMaskFilter.setDescription('This field defines the Network Mask filter of source IP for this class of servcie. Defult is an empty string.')
pvxClassMapDstIpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstIpFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapDstIpFilter.setDescription('This field defines the Destination IP filter for this class of servcie. Defult is an empty string.')
pvxClassMapDstIpNetMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstIpNetMaskFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapDstIpNetMaskFilter.setDescription('This field defines the Network Mask filter of destination IP for this class of servcie. Defult is an empty string.')
pvxClassMapIpProtocolFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapIpProtocolFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapIpProtocolFilter.setDescription('This field defines the IP protocol filter for this class of servcie. Default is -1, means ignore this field.')
pvxClassMapDscpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDscpFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapDscpFilter.setDescription('This field defines the DSCP filter for this class of servcie. Default is -1, means the field is not used.')
pvxClassMapL4SrcPortFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4SrcPortFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapL4SrcPortFilter.setDescription('This field defines the Layer 4 source port filter for this class of servcie. Default is -1, means the field is not used. If pvxClassMapL4SrcPortEndFilter is unused, this value represents a single port to match. If pvxClassMapL4SrcPortEndFilter contains a filter value, then this value is the beginning of a range of ports to match. When a range of ports is specified, the beginning port value MUST be a power of 2.')
pvxClassMapL4DstPortFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4DstPortFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapL4DstPortFilter.setDescription('This field defines the Layer 4 destinatin port filter for this class of servcie. Default is -1, means the field is not used. If pvxClassMapL4DstPortEndFilter is unused, this value represents a single port to match. If pvxClassMapL4SrcPortEndFilter contains a filter value, then this value is the beginning of a range of ports to match. When a range of ports is specified, the beginning port value MUST be a power of 2.')
pvxClassMapTcpControlFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapTcpControlFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapTcpControlFilter.setDescription('This field defines the Tcp control filter for this class of servcie. Default is -1, means the field is not used.')
pvxClassMapSrcMACAddrFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 17), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcMACAddrFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapSrcMACAddrFilter.setDescription('This field defines the Source MAC address filter for this class of servcie. Default is an empty string.')
pvxClassMapDstMACAddrFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstMACAddrFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapDstMACAddrFilter.setDescription('This field defines the Destination MAC address filter for this class of servcie. Default is an empty string.')
pvxClassMapEtherTypeFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapEtherTypeFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapEtherTypeFilter.setDescription('This field defines the ethernet address type filter for this class of servcie. Default is -1, means the filter is not used.')
pvxClassMapSrcMACMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapSrcMACMaskFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapSrcMACMaskFilter.setDescription('This field defines the source MAC address mask. Default is set to 0, which indicates the source MAC address filter is not used.')
pvxClassMapDstMACMaskFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapDstMACMaskFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapDstMACMaskFilter.setDescription('This field defines the destination MAC address mask. Default is set to 0, which indicates the destination MAC address filter is not used.')
pvxClassMapL4SrcPortEndFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ValueRangeConstraint(8191, 8191), ValueRangeConstraint(16383, 16383), ValueRangeConstraint(32767, 32767), ValueRangeConstraint(65535, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4SrcPortEndFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapL4SrcPortEndFilter.setDescription('This field defines the Layer 4 source port filter for this class of service. Default is -1, means the field is not used. When specified this value MUST be greater than the value of pvxClassMapL4SrcPortFilter')
pvxClassMapL4DstPortEndFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(3, 3), ValueRangeConstraint(7, 7), ValueRangeConstraint(15, 15), ValueRangeConstraint(31, 31), ValueRangeConstraint(63, 63), ValueRangeConstraint(127, 127), ValueRangeConstraint(255, 255), ValueRangeConstraint(511, 511), ValueRangeConstraint(1023, 1023), ValueRangeConstraint(2047, 2047), ValueRangeConstraint(4095, 4095), ValueRangeConstraint(8191, 8191), ValueRangeConstraint(16383, 16383), ValueRangeConstraint(32767, 32767), ValueRangeConstraint(65535, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapL4DstPortEndFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapL4DstPortEndFilter.setDescription('This field defines the Layer 4 destination port filter for this class of service. Default is -1, means the field is not used. When specified this value MUST be greater than the value of pvxClassMapL4DstPortFilter')
pvxClassMapCVlanEndFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapCVlanEndFilter.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapCVlanEndFilter.setDescription('This field s used to define end point of range of C-VLANs which will be part of this class of service. Default is -1, means ignore this field.')
pvxClassMapProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 11, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxClassMapProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxClassMapProfileRowStatus.setDescription('')
pvxPolicyMapProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12), )
if mibBuilder.loadTexts: pvxPolicyMapProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxPolicyMapProfileTable.setDescription('Policy Map Profile Table.')
pvxPolicyMapProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxPolicyMapPolicyName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxPolicyMapClassMapName"))
if mibBuilder.loadTexts: pvxPolicyMapProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxPolicyMapProfileEntry.setDescription("This table contains Class profile identifier to policy identifier mapping. One policy identifier can be associated with multiple Class profiles. Note that both pvxPolicyMapPolicyName and pvxPolicyMapClassMapName indices are variable length OCTET STRING objects. When encoded as part of the index, it includes the string length as part of the instance. For example, a policy named 'aaa' is encoded as '3.97.97.97' (decimal). For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7. ")
pvxPolicyMapPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPolicyMapPolicyName.setStatus('current')
if mibBuilder.loadTexts: pvxPolicyMapPolicyName.setDescription('The policy map profile name string.')
pvxPolicyMapClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxPolicyMapClassMapName.setStatus('current')
if mibBuilder.loadTexts: pvxPolicyMapClassMapName.setDescription('The class map profile applied to this policy.')
pvxPolicyMapBWProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPolicyMapBWProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxPolicyMapBWProfileName.setDescription('The bandwidth profile used for this policy. For ClassMap profiles of type service-Map, this parameter MUST be an empty string. For all other ClassMap profile types, the object MUST contain the name of a valid Bandwidth Profile name.')
pvxPolicyMapProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 12, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxPolicyMapProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxPolicyMapProfileRowStatus.setDescription('')
pvxControlFrameProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13), )
if mibBuilder.loadTexts: pvxControlFrameProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileTable.setDescription('This table is used to configure the Layer 2 control profile on a particular virtual switch.')
pvxControlFrameProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxControlFrameProfileName"))
if mibBuilder.loadTexts: pvxControlFrameProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileEntry.setDescription("The conceptual row object of the Control Frame profile Table. Note the pvxControlFrameProfileTable index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7.")
pvxControlFrameProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 1), ProfileNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileName.setDescription('Control frame profile name string.')
pvxControlFrameProfileLacp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 2), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileLacp.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileLacp.setDescription('This attributes defined the control action to LACP protocol.')
pvxControlFrameProfileStp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 3), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileStp.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileStp.setDescription('This attributes defined the control action to STP protocol.')
pvxControlFrameProfileDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 4), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileDot1x.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileDot1x.setDescription('This attributes defined the control action to Dot1x protocol.')
pvxControlFrameProfileGvrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 5), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileGvrp.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileGvrp.setDescription('This attributes defined the control action to GVRP protocol.')
pvxControlFrameProfileGmrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 6), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileGmrp.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileGmrp.setDescription('This attributes defined the control action to GMRP protocol.')
pvxControlFrameProfileLldp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 7), ProtocolActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileLldp.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileLldp.setDescription('This attributes defined the control action to LLDP protocol.')
pvxControlFrameProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 13, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxControlFrameProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxControlFrameProfileRowStatus.setDescription('')
pvxTunnelMacAddrProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14), )
if mibBuilder.loadTexts: pvxTunnelMacAddrProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxTunnelMacAddrProfileTable.setDescription('This table is used to control L2 tunneling Mac addresses.')
pvxTunnelMacAddrProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxTMAPName"))
if mibBuilder.loadTexts: pvxTunnelMacAddrProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxTunnelMacAddrProfileEntry.setDescription("The conceptual row object of the Tunnel MAC Address Profile Table Note the pvxTMAPName index is a variable length OCTET STRING object. When encoded as part of the index, it includes the string length as part of the instance. For example, a profile named 'aaa' is encoded as '3.61.61.61'. For more info on encoding OCTET STRING instances in OID's, see RFC-2578, section 7.7.")
pvxTMAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 1), ProfileNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPName.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPName.setDescription('Tunnel MAC address profile name string.')
pvxTMAPDot1xTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPDot1xTunnMacAddr.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPDot1xTunnMacAddr.setDescription('')
pvxTMAPLacpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPLacpTunnMacAddr.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPLacpTunnMacAddr.setDescription('')
pvxTMAPStpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPStpTunnMacAddr.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPStpTunnMacAddr.setDescription('')
pvxTMAPGvrpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPGvrpTunnMacAddr.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPGvrpTunnMacAddr.setDescription('')
pvxTMAPGmrpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPGmrpTunnMacAddr.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPGmrpTunnMacAddr.setDescription('')
pvxTMAPLldpTunnMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPLldpTunnMacAddr.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPLldpTunnMacAddr.setDescription('')
pvxTMAPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 14, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxTMAPRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxTMAPRowStatus.setDescription('')
pvxSLAMeasurementProfileTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15), )
if mibBuilder.loadTexts: pvxSLAMeasurementProfileTable.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMeasurementProfileTable.setDescription('This table is used to control Ethernet service SLA measurement.')
pvxSLAMeasurementProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtProfileName"))
if mibBuilder.loadTexts: pvxSLAMeasurementProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMeasurementProfileEntry.setDescription('The conceptual row object for the SLA measurement profile.')
pvxSLAMsmtProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 1), ProfileNameType())
if mibBuilder.loadTexts: pvxSLAMsmtProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtProfileName.setDescription('SLA measurement profile name string.')
pvxSLAMsmtThresholdFarEndLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 2), FixedX1000()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdFarEndLossRatio.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtThresholdFarEndLossRatio.setDescription('Threshold for the far end farme loss ratio. It is a percentage value multiply with one thousand.')
pvxSLAMsmtThresholdNearEndLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 3), FixedX1000()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdNearEndLossRatio.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtThresholdNearEndLossRatio.setDescription('Threshold for the near end farme loss ratio. It is a percentage value multiply with one thousand.')
pvxSLAMsmtThresholdDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayMaximum.setDescription('Two-way delay maximum in microseconds.')
pvxSLAMsmtThresholdDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayAverage.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayAverage.setDescription('Two-way delay average in microseconds.')
pvxSLAMsmtThresholdDelayVarMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayVarMaximum.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayVarMaximum.setDescription('Two-way delay variation maximum in microseconds.')
pvxSLAMsmtThresholdDelayVarAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayVarAverage.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtThresholdDelayVarAverage.setDescription('Two-way delay variation average in microseconds.')
pvxSLAMsmtMonitorPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 8), MonitorPeriodType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtMonitorPeriod.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtMonitorPeriod.setDescription('Monitor period, 15-min or 24-hour.')
pvxSLAMsmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 3, 15, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtRowStatus.setDescription('')
pvxMSTPCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32), )
if mibBuilder.loadTexts: pvxMSTPCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the PacketVX switch-level MSTP and MSTP instance objects.')
pvxMSTPCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPCrntPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxMSTPCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMEntry.setDescription('The row entry object of the PacketVX MSTP current performance monitoring table. Each row of this table contains a full set of MSTP PM statistics and related data for a current measurement interval for a given PVX switch or MSTP instance.')
pvxMSTPCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMSwitchIdx.setDescription('This object represents the particular switch id.')
pvxMSTPCrntPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPCrntPMXstIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMXstIdx.setDescription('The instance number of the MSTP instance. For the global MSTP object on the switch, this index object is set to 0.')
pvxMSTPCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxMSTPCrntPMRCCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 4), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCValue.setDescription('The CIST region configuration change count. This object applies only to the global MSTP object on the switch.')
pvxMSTPCrntPMRCCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCTimeStamp.setDescription('The date and time stamp of the CIST region configuration change count value.')
pvxMSTPCrntPMRCCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 6), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCValidity.setDescription('Indicates the validity of the provided CIST region configuration change count value.')
pvxMSTPCrntPMRCCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 7), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMRCCCInitialize.setDescription('Used to initialize the value of the pvxMSTPCrntPMRCCCValue object to 0.')
pvxMSTPCrntPMTCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCValue.setDescription('The CIST/MSTI region configuration change count.')
pvxMSTPCrntPMTCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCTimeStamp.setDescription('The date and time stamp of the CIST/MSTI region configuration change count value.')
pvxMSTPCrntPMTCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCValidity.setDescription('Indicates the validity of the provided CIST/MSTI region configuration change count value.')
pvxMSTPCrntPMTCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMTCCInitialize.setDescription('Used to initialize the value of the pvxMSTPCrntPMTCCValue object to 0.')
pvxMSTPCrntPMNRBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCValue.setDescription('The CIST/MSTI new root bridge count.')
pvxMSTPCrntPMNRBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCTimeStamp.setDescription('The date and time stamp of the CIST/MSTI new root bridge count value.')
pvxMSTPCrntPMNRBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCValidity.setDescription('Indicates the validity of the provided CIST/MSTI new root bridge count value.')
pvxMSTPCrntPMNRBCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 32, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPCrntPMNRBCInitialize.setDescription('Used to initialize the value of the pvxMSTPCrntPMNRBCValue object to 0.')
pvxMSTPHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33), )
if mibBuilder.loadTexts: pvxMSTPHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the PacketVX switch-level MSTP and MSTP instance objects.')
pvxMSTPHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxMSTPHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMEntry.setDescription('The row entry object of the PacketVX MSTP current performance monitoring table. Each row of this table contains a full set of MSTP PM statistics and related data for a historical measurement interval for a given PVX switch or MSTP instance.')
pvxMSTPHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMSwitchIdx.setDescription('This object represents the particular switch id.')
pvxMSTPHistPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPHistPMXstIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMXstIdx.setDescription('The instance number of the MSTP instance. For the global MSTP object on the switch, this index object is set to 0.')
pvxMSTPHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxMSTPHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxMSTPHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxMSTPHistPMRCCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 5), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCValue.setDescription('The CIST region configuration change count. This object applies only to the global MSTP object on the switch.')
pvxMSTPHistPMRCCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCTimeStamp.setDescription('The date and time stamp of the CIST region configuration change count value.')
pvxMSTPHistPMRCCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCValidity.setDescription('Indicates the validity of the provided CIST region configuration change count value.')
pvxMSTPHistPMRCCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 8), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMRCCCInitialize.setDescription('Used to initialize the value of the pvxMSTPHistPMRCCCValue object to 0.')
pvxMSTPHistPMTCCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 9), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMTCCValue.setDescription('The CIST/MSTI region configuration change count.')
pvxMSTPHistPMTCCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMTCCTimeStamp.setDescription('The date and time stamp of the CIST/MSTI region configuration change count value.')
pvxMSTPHistPMTCCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMTCCValidity.setDescription('Indicates the validity of the provided CIST/MSTI region configuration change count value.')
pvxMSTPHistPMTCCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 12), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPHistPMTCCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMTCCInitialize.setDescription('Used to initialize the value of the pvxMSTPHistPMTCCValue object to 0.')
pvxMSTPHistPMNRBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCValue.setDescription('The CIST/MSTI new root bridge count.')
pvxMSTPHistPMNRBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCTimeStamp.setDescription('The date and time stamp of the CIST/MSTI new root bridge count value.')
pvxMSTPHistPMNRBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCValidity.setDescription('Indicates the validity of the provided CIST/MSTI new root bridge count value.')
pvxMSTPHistPMNRBCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 33, 1, 16), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPHistPMNRBCInitialize.setDescription('Used to initialize the value of the pvxMSTPHistPMNRBCValue object to 0.')
pvxMSTPPortCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34), )
if mibBuilder.loadTexts: pvxMSTPPortCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMTable.setDescription('A table of current performance monitoring statistics collected for PacketVX MSTP Port and MSTP Instance Port objects.')
pvxMSTPPortCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMEntry.setDescription('The row entry object of the PacketVX MSTP Port current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given PVX MSTP Port or MSTP Instance Port.')
pvxMSTPPortCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the MSTP Port is provisioned.')
pvxMSTPPortCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMShelfIdx.setDescription('The number of the shelf on which the MSTP Port targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxMSTPPortCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMSlotIdx.setDescription('The number of the slot within which the MSTP Port targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxMSTPPortCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPPortCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMTypeIdx.setDescription('The type of PacketVX port on which the MSTP Port facility is provisioned.')
pvxMSTPPortCrntPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMXstIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMXstIdx.setDescription('The instance number of the MSTP instance. For the global MSTP object on the switch, this index object is set to 0.')
pvxMSTPPortCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxMSTPPortCrntPMIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMIdx.setDescription('The number of the port of the identified type on which the PVX MSTP Port facility targeted for PMs is provisioned.')
pvxMSTPPortCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 7), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPPortCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxMSTPPortCrntPMFWDTRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRValue.setDescription('The CIST/MSTI number of forward transitions.')
pvxMSTPPortCrntPMFWDTRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRTimeStamp.setDescription('The date and time stamp of the CIST/MSTI number of forward transitions value.')
pvxMSTPPortCrntPMFWDTRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRValidity.setDescription('Indicates the validity of the provided CIST/MSTI number of forward transitions value.')
pvxMSTPPortCrntPMFWDTRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMFWDTRInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMFWDTRValue object to 0.')
pvxMSTPPortCrntPMPMCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCValue.setDescription('The CIST protocol migration count. This object applies only to the global MSTP Port objects on the switch.')
pvxMSTPPortCrntPMPMCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCTimeStamp.setDescription('The date and time stamp of the CIST protocol migration count value.')
pvxMSTPPortCrntPMPMCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCValidity.setDescription('Indicates the validity of the provided CIST protocol migration count value.')
pvxMSTPPortCrntPMPMCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMPMCInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMPMCValue object to 0.')
pvxMSTPPortCrntPMBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXValue.setDescription('The number of bridging protocol data units received.')
pvxMSTPPortCrntPMBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXTimeStamp.setDescription('The date and time stamp of the number of bridging protocol data units received value.')
pvxMSTPPortCrntPMBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXValidity.setDescription('Indicates the validity of the provided number of bridging protocol data units received value.')
pvxMSTPPortCrntPMBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDURXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMBPDURXValue object to 0.')
pvxMSTPPortCrntPMBPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXValue.setDescription('The number of bridging protocol data units transmitted.')
pvxMSTPPortCrntPMBPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXTimeStamp.setDescription('The date and time stamp of the number of bridging protocol data units transmitted value.')
pvxMSTPPortCrntPMBPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXValidity.setDescription('Indicates the validity of the provided number of bridging protocol data units transmitted value.')
pvxMSTPPortCrntPMBPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMBPDUTXValue object to 0.')
pvxMSTPPortCrntPMBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXValue.setDescription('The number of configuration bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortCrntPMBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXTimeStamp.setDescription('The date and time stamp of the number of configuration bridging protocol data units received value.')
pvxMSTPPortCrntPMBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXValidity.setDescription('Indicates the validity of the provided number of configuration bridging protocol data units received value.')
pvxMSTPPortCrntPMBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMBPDUCFGRXValue object to 0.')
pvxMSTPPortCrntPMBPDUCFGTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXValue.setDescription('The number of configuration bridging protocol data units transmitted. This object applies only to the global MSTP Port objects.')
pvxMSTPPortCrntPMBPDUCFGTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXTimeStamp.setDescription('The date and time stamp of the number of configuration bridging protocol data units transmitted value.')
pvxMSTPPortCrntPMBPDUCFGTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXValidity.setDescription('Indicates the validity of the provided number of configuration bridging protocol data units transmitted value.')
pvxMSTPPortCrntPMBPDUCFGTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUCFGTXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMBPDUCFGTXValue object to 0.')
pvxMSTPPortCrntPMBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXValue.setDescription('The number of topology change notifications bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortCrntPMBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXTimeStamp.setDescription('The date and time stamp of the number of topology change notifications bridging protocol data units received value.')
pvxMSTPPortCrntPMBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXValidity.setDescription('Indicates the validity of the provided number of topology change notifications bridging protocol data units received value.')
pvxMSTPPortCrntPMBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMBPDUTCNRXValue object to 0.')
pvxMSTPPortCrntPMBPDUTCNTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 36), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXValue.setDescription('The number of topology change notifications bridging protocol data units transmitted. This object applies only to the global MSTP Port objects.')
pvxMSTPPortCrntPMBPDUTCNTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXTimeStamp.setDescription('The date and time stamp of the number of topology change notifications bridging protocol data units transmitted value.')
pvxMSTPPortCrntPMBPDUTCNTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXValidity.setDescription('Indicates the validity of the provided number of topology change notifications bridging protocol data units transmitted value.')
pvxMSTPPortCrntPMBPDUTCNTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMBPDUTCNTXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMBPDUTCNTXValue object to 0.')
pvxMSTPPortCrntPMINVBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 40), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXValue.setDescription('The number of invalid bridging protocol data units received.')
pvxMSTPPortCrntPMINVBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXTimeStamp.setDescription('The date and time stamp of the number of invalid bridging protocol data units received value.')
pvxMSTPPortCrntPMINVBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXValidity.setDescription('Indicates the validity of the provided number of invalid bridging protocol data units received value.')
pvxMSTPPortCrntPMINVBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDURXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMBPDURXValue object to 0.')
pvxMSTPPortCrntPMINVBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXValue.setDescription('The number of invalid configuration bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp.setDescription('The date and time stamp of the number of invalid configuration bridging protocol data units received value.')
pvxMSTPPortCrntPMINVBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXValidity.setDescription('Indicates the validity of the provided number of invalid configuration bridging protocol data units received value.')
pvxMSTPPortCrntPMINVBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUCFGRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMINVBPDUCFGRXValue object to 0.')
pvxMSTPPortCrntPMINVBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXValue.setDescription('The number of invalid topology change notifications bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp.setDescription('The date and time stamp of the number of invalid topology change notifications bridging protocol data units received value.')
pvxMSTPPortCrntPMINVBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXValidity.setDescription('Indicates the validity of the provided number of invalid topology change notifications bridging protocol data units received value.')
pvxMSTPPortCrntPMINVBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 34, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortCrntPMINVBPDUTCNRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortCrntPMINVBPDUTCNRXValue object to 0.')
pvxMSTPPortHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35), )
if mibBuilder.loadTexts: pvxMSTPPortHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMTable.setDescription('A table of historical performance monitoring statistics collected for PacketVX MSTP Port and MSTP Instance Port objects.')
pvxMSTPPortHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMXstIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMSTPPortHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxMSTPPortHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMEntry.setDescription('The row entry object of the PacketVX MSTP Port historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for an historical measurement interval for a given PVX MSTP Port or MSTP Instance Port.')
pvxMSTPPortHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the MSTP Port is provisioned.')
pvxMSTPPortHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxMSTPPortHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMShelfIdx.setDescription('The number of the shelf on which the MSTP Port targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxMSTPPortHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxMSTPPortHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMSlotIdx.setDescription('The number of the slot within which the MSTP Port targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxMSTPPortHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxMSTPPortHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMTypeIdx.setDescription('The type of PacketVX port on which the MSTP Port facility is provisioned.')
pvxMSTPPortHistPMXstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMXstIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMXstIdx.setDescription('The instance number of the MSTP instance. For the global MSTP object on the switch, this index object is set to 0.')
pvxMSTPPortHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMIdx.setDescription('The number of the port of the identified type on which the PVX MSTP Port facility targeted for PMs is provisioned.')
pvxMSTPPortHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 7), PMIntervalType())
if mibBuilder.loadTexts: pvxMSTPPortHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxMSTPPortHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxMSTPPortHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxMSTPPortHistPMFWDTRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 9), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRValue.setDescription('The CIST/MSTI number of forward transitions.')
pvxMSTPPortHistPMFWDTRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRTimeStamp.setDescription('The date and time stamp of the CIST/MSTI number of forward transitions value.')
pvxMSTPPortHistPMFWDTRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRValidity.setDescription('Indicates the validity of the provided CIST/MSTI number of forward transitions value.')
pvxMSTPPortHistPMFWDTRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 12), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMFWDTRInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMFWDTRValue object to 0.')
pvxMSTPPortHistPMPMCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCValue.setDescription('The CIST protocol migration count. This object applies only to the global MSTP Port objects on the switch.')
pvxMSTPPortHistPMPMCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCTimeStamp.setDescription('The date and time stamp of the CIST protocol migration count value.')
pvxMSTPPortHistPMPMCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCValidity.setDescription('Indicates the validity of the provided CIST protocol migration count value.')
pvxMSTPPortHistPMPMCInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 16), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMPMCInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMPMCValue object to 0.')
pvxMSTPPortHistPMBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 17), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXValue.setDescription('The number of bridging protocol data units received.')
pvxMSTPPortHistPMBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXTimeStamp.setDescription('The date and time stamp of the number of bridging protocol data units received value.')
pvxMSTPPortHistPMBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXValidity.setDescription('Indicates the validity of the provided number of bridging protocol data units received value.')
pvxMSTPPortHistPMBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 20), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDURXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMBPDURXValue object to 0.')
pvxMSTPPortHistPMBPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 21), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXValue.setDescription('The number of bridging protocol data units transmitted.')
pvxMSTPPortHistPMBPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXTimeStamp.setDescription('The date and time stamp of the number of bridging protocol data units transmitted value.')
pvxMSTPPortHistPMBPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXValidity.setDescription('Indicates the validity of the provided number of bridging protocol data units transmitted value.')
pvxMSTPPortHistPMBPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMBPDUTXValue object to 0.')
pvxMSTPPortHistPMBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 25), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXValue.setDescription('The number of configuration bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortHistPMBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXTimeStamp.setDescription('The date and time stamp of the number of configuration bridging protocol data units received value.')
pvxMSTPPortHistPMBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXValidity.setDescription('Indicates the validity of the provided number of configuration bridging protocol data units received value.')
pvxMSTPPortHistPMBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 28), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMBPDUCFGRXValue object to 0.')
pvxMSTPPortHistPMBPDUCFGTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 29), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXValue.setDescription('The number of configuration bridging protocol data units transmitted. This object applies only to the global MSTP Port objects.')
pvxMSTPPortHistPMBPDUCFGTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXTimeStamp.setDescription('The date and time stamp of the number of configuration bridging protocol data units transmitted value.')
pvxMSTPPortHistPMBPDUCFGTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXValidity.setDescription('Indicates the validity of the provided number of configuration bridging protocol data units transmitted value.')
pvxMSTPPortHistPMBPDUCFGTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUCFGTXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMBPDUCFGTXValue object to 0.')
pvxMSTPPortHistPMBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 33), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXValue.setDescription('The number of topology change notifications bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortHistPMBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXTimeStamp.setDescription('The date and time stamp of the number of topology change notifications bridging protocol data units received value.')
pvxMSTPPortHistPMBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXValidity.setDescription('Indicates the validity of the provided number of topology change notifications bridging protocol data units received value.')
pvxMSTPPortHistPMBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMBPDUTCNRXValue object to 0.')
pvxMSTPPortHistPMBPDUTCNTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 37), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXValue.setDescription('The number of topology change notifications bridging protocol data units transmitted. This object applies only to the global MSTP Port objects.')
pvxMSTPPortHistPMBPDUTCNTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXTimeStamp.setDescription('The date and time stamp of the number of topology change notifications bridging protocol data units transmitted value.')
pvxMSTPPortHistPMBPDUTCNTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXValidity.setDescription('Indicates the validity of the provided number of topology change notifications bridging protocol data units transmitted value.')
pvxMSTPPortHistPMBPDUTCNTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMBPDUTCNTXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMBPDUTCNTXValue object to 0.')
pvxMSTPPortHistPMINVBPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 41), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXValue.setDescription('The number of invalid bridging protocol data units received.')
pvxMSTPPortHistPMINVBPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXTimeStamp.setDescription('The date and time stamp of the number of invalid bridging protocol data units received value.')
pvxMSTPPortHistPMINVBPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXValidity.setDescription('Indicates the validity of the provided number of invalid bridging protocol data units received value.')
pvxMSTPPortHistPMINVBPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDURXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMBPDURXValue object to 0.')
pvxMSTPPortHistPMINVBPDUCFGRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 45), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXValue.setDescription('The number of invalid configuration bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp.setDescription('The date and time stamp of the number of invalid configuration bridging protocol data units received value.')
pvxMSTPPortHistPMINVBPDUCFGRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXValidity.setDescription('Indicates the validity of the provided number of invalid configuration bridging protocol data units received value.')
pvxMSTPPortHistPMINVBPDUCFGRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 48), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUCFGRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMINVBPDUCFGRXValue object to 0.')
pvxMSTPPortHistPMINVBPDUTCNRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 49), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXValue.setDescription('The number of invalid topology change notifications bridging protocol data units received. This object applies only to the global MSTP Port objects.')
pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp.setDescription('The date and time stamp of the number of invalid topology change notifications bridging protocol data units received value.')
pvxMSTPPortHistPMINVBPDUTCNRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXValidity.setDescription('Indicates the validity of the provided number of invalid topology change notifications bridging protocol data units received value.')
pvxMSTPPortHistPMINVBPDUTCNRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 35, 1, 52), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxMSTPPortHistPMINVBPDUTCNRXInitialize.setDescription('Used to initialize the value of the pvxMSTPPortHistPMINVBPDUTCNRXValue object to 0.')
pvxLAGPortCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36), )
if mibBuilder.loadTexts: pvxLAGPortCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the PacketVX LAG port interfaces on the NE.')
pvxLAGPortCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxLAGPortCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMEntry.setDescription('The row entry object of the PacketVX LAG port current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given PVX LAG Port.')
pvxLAGPortCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLAGPortCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the PVX LAG port is provisioned.')
pvxLAGPortCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxLAGPortCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMShelfIdx.setDescription('The number of the shelf on which the PVX LAG port targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxLAGPortCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxLAGPortCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMSlotIdx.setDescription('The number of the slot within which the PVX LAG port targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxLAGPortCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxLAGPortCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMTypeIdx.setDescription('The type of PacketVX port on which the LAG port is provisioned.')
pvxLAGPortCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxLAGPortCrntPMIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMIdx.setDescription('The number of the port of the identified type on which the PVX LAG port targeted for PMs is provisioned.')
pvxLAGPortCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxLAGPortCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxLAGPortCrntPMLACPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 7), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXValue.setDescription('The total Link Access Control PDUs received on the LAG port.')
pvxLAGPortCrntPMLACPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXTimeStamp.setDescription('The date and time stamp of the total Link Access Control PDUs received value.')
pvxLAGPortCrntPMLACPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXValidity.setDescription('Indicates the validity of the provided total Link Access Control PDUs received value.')
pvxLAGPortCrntPMLACPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 10), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDURXInitialize.setDescription('Used to initialize the value of the pvxLAGPortCrntPMLACPDURXValue object to 0.')
pvxLAGPortCrntPMMRKPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXValue.setDescription('The count of Marker PDUs received on the LAG port.')
pvxLAGPortCrntPMMRKPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXTimeStamp.setDescription('The date and time stamp of the Marker PDUs received value.')
pvxLAGPortCrntPMMRKPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXValidity.setDescription('Indicates the validity of the provided Marker PDUs received value.')
pvxLAGPortCrntPMMRKPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDURXInitialize.setDescription('Used to initialize the value of the pvxLAGPortCrntPMMRKPDURXValue object to 0.')
pvxLAGPortCrntPMMRKRSPPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXValue.setDescription('The count of Marker Response PDUs received on the LAG port.')
pvxLAGPortCrntPMMRKRSPPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXTimeStamp.setDescription('The date and time stamp of the Marker Response PDUs received value.')
pvxLAGPortCrntPMMRKRSPPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXValidity.setDescription('Indicates the validity of the provided Marker Response PDUs received value.')
pvxLAGPortCrntPMMRKRSPPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDURXInitialize.setDescription('Used to initialize the value of the pvxLAGPortCrntPMMRKPDURSPRXValue object to 0.')
pvxLAGPortCrntPMINVLACFRRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 19), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXValue.setDescription('The count of invalid Link Access Control frames received on the LAG port.')
pvxLAGPortCrntPMINVLACFRRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXTimeStamp.setDescription('The date and time stamp of the count of invalid Link Access Control frames value.')
pvxLAGPortCrntPMINVLACFRRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXValidity.setDescription('Indicates the validity of the provided count of invalid Link Access Control frames value.')
pvxLAGPortCrntPMINVLACFRRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMINVLACFRRXInitialize.setDescription('Used to initialize the value of the pvxLAGPortCrntPMINVLACFRRXValue object to 0.')
pvxLAGPortCrntPMLACPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 23), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXValue.setDescription('The total Link Access Control PDUs transmitted on the LAG port.')
pvxLAGPortCrntPMLACPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXTimeStamp.setDescription('The date and time stamp of the total Link Access Control PDUs transmitted value.')
pvxLAGPortCrntPMLACPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXValidity.setDescription('Indicates the validity of the provided total Link Access Control PDUs transmitted value.')
pvxLAGPortCrntPMLACPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMLACPDUTXInitialize.setDescription('Used to initialize the value of the pvxLAGPortCrntPMLACPDUTXValue object to 0.')
pvxLAGPortCrntPMMRKPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 27), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXValue.setDescription('The count of Marker PDUs transmitted on the LAG port.')
pvxLAGPortCrntPMMRKPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXTimeStamp.setDescription('The date and time stamp of the Marker PDUs transmitted value.')
pvxLAGPortCrntPMMRKPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXValidity.setDescription('Indicates the validity of the provided Marker PDUs transmitted value.')
pvxLAGPortCrntPMMRKPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKPDUTXInitialize.setDescription('Used to initialize the value of the pvxLAGPortCrntPMMRKPDUTXValue object to 0.')
pvxLAGPortCrntPMMRKRSPPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 31), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXValue.setDescription('The count of Marker Response PDUs transmitted on the LAG port.')
pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp.setDescription('The date and time stamp of the Marker Response PDUs transmitted value.')
pvxLAGPortCrntPMMRKRSPPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXValidity.setDescription('Indicates the validity of the provided Marker Response PDUs transmitted value.')
pvxLAGPortCrntPMMRKRSPPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 36, 1, 34), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortCrntPMMRKRSPPDUTXInitialize.setDescription('Used to initialize the value of the pvxLAGPortCrntPMMRKPDURSPTXValue object to 0.')
pvxLAGPortHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37), )
if mibBuilder.loadTexts: pvxLAGPortHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the PacketVX LAG port interfaces on the NE.')
pvxLAGPortHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxLAGPortHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxLAGPortHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMEntry.setDescription('The row entry object of the PacketVX LAG port historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given PVX LAG Port.')
pvxLAGPortHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxLAGPortHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the PVX LAG port is provisioned.')
pvxLAGPortHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxLAGPortHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMShelfIdx.setDescription('The number of the shelf on which the PVX LAG port targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxLAGPortHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxLAGPortHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMSlotIdx.setDescription('The number of the slot within which the PVX LAG port targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxLAGPortHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxLAGPortHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMTypeIdx.setDescription('The type of PacketVX port on which the LAG port is provisioned.')
pvxLAGPortHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxLAGPortHistPMIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMIdx.setDescription('The number of the port of the identified type on which the PVX LAG port targeted for PMs is provisioned.')
pvxLAGPortHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxLAGPortHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxLAGPortHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxLAGPortHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxLAGPortHistPMLACPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXValue.setDescription('The total Link Access Control PDUs received on the LAG port.')
pvxLAGPortHistPMLACPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXTimeStamp.setDescription('The date and time stamp of the total Link Access Control PDUs received value.')
pvxLAGPortHistPMLACPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXValidity.setDescription('Indicates the validity of the provided total Link Access Control PDUs received value.')
pvxLAGPortHistPMLACPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDURXInitialize.setDescription('Used to initialize the value of the pvxLAGPortHistPMLACPDURXValue object to 0.')
pvxLAGPortHistPMMRKPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXValue.setDescription('The count of Marker PDUs received on the LAG port.')
pvxLAGPortHistPMMRKPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXTimeStamp.setDescription('The date and time stamp of the Marker PDUs received value.')
pvxLAGPortHistPMMRKPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXValidity.setDescription('Indicates the validity of the provided Marker PDUs received value.')
pvxLAGPortHistPMMRKPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDURXInitialize.setDescription('Used to initialize the value of the pvxLAGPortHistPMMRKPDURXValue object to 0.')
pvxLAGPortHistPMMRKRSPPDURXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXValue.setDescription('The count of Marker Response PDUs received on the LAG port.')
pvxLAGPortHistPMMRKRSPPDURXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXTimeStamp.setDescription('The date and time stamp of the Marker Response PDUs received value.')
pvxLAGPortHistPMMRKRSPPDURXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXValidity.setDescription('Indicates the validity of the provided Marker Response PDUs received value.')
pvxLAGPortHistPMMRKRSPPDURXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDURXInitialize.setDescription('Used to initialize the value of the pvxLAGPortHistPMMRKPDURSPRXValue object to 0.')
pvxLAGPortHistPMINVLACFRRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXValue.setDescription('The count of invalid Link Access Control frames received on the LAG port.')
pvxLAGPortHistPMINVLACFRRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXTimeStamp.setDescription('The date and time stamp of the count of invalid Link Access Control frames value.')
pvxLAGPortHistPMINVLACFRRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXValidity.setDescription('Indicates the validity of the provided count of invalid Link Access Control frames value.')
pvxLAGPortHistPMINVLACFRRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMINVLACFRRXInitialize.setDescription('Used to initialize the value of the pvxLAGPortHistPMINVLACFRRXValue object to 0.')
pvxLAGPortHistPMLACPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXValue.setDescription('The total Link Access Control PDUs transmitted on the LAG port.')
pvxLAGPortHistPMLACPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXTimeStamp.setDescription('The date and time stamp of the total Link Access Control PDUs transmitted value.')
pvxLAGPortHistPMLACPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXValidity.setDescription('Indicates the validity of the provided total Link Access Control PDUs transmitted value.')
pvxLAGPortHistPMLACPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMLACPDUTXInitialize.setDescription('Used to initialize the value of the pvxLAGPortHistPMLACPDUTXValue object to 0.')
pvxLAGPortHistPMMRKPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXValue.setDescription('The count of Marker PDUs transmitted on the LAG port.')
pvxLAGPortHistPMMRKPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXTimeStamp.setDescription('The date and time stamp of the Marker PDUs transmitted value.')
pvxLAGPortHistPMMRKPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXValidity.setDescription('Indicates the validity of the provided Marker PDUs transmitted value.')
pvxLAGPortHistPMMRKPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKPDUTXInitialize.setDescription('Used to initialize the value of the pvxLAGPortHistPMMRKPDUTXValue object to 0.')
pvxLAGPortHistPMMRKRSPPDUTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXValue.setDescription('The count of Marker Response PDUs transmitted on the LAG port.')
pvxLAGPortHistPMMRKRSPPDUTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXTimeStamp.setDescription('The date and time stamp of the Marker Response PDUs transmitted value.')
pvxLAGPortHistPMMRKRSPPDUTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXValidity.setDescription('Indicates the validity of the provided Marker Response PDUs transmitted value.')
pvxLAGPortHistPMMRKRSPPDUTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 37, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxLAGPortHistPMMRKRSPPDUTXInitialize.setDescription('Used to initialize the value of the pvxLAGPortHistPMMRKPDURSPTXValue object to 0.')
pvxESrvcCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40), )
if mibBuilder.loadTexts: pvxESrvcCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the PacketVX ethernet services objects.')
pvxESrvcCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcCrntPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxESrvcCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMEntry.setDescription('The row entry object of the PacketVX ethernet services current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given ethernet service instance.')
pvxESrvcCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the ethernet service is provisioned.')
pvxESrvcCrntPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcCrntPMESrvcNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMESrvcNameIdx.setDescription('The name of the ethernet service.')
pvxESrvcCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxESrvcCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMUASValue.setDescription('The count of unavailable seconds for the ethernet service.')
pvxESrvcCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMUASTimeStamp.setDescription('The date and time stamp of the ethernet service unavailable seconds count value.')
pvxESrvcCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 6), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMUASValidity.setDescription('Indicates the validity of the provided ethernet service unavailable seconds count value.')
pvxESrvcCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 40, 1, 7), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcCrntPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcCrntPMUASInitialize.setDescription('Used to initialize the value of the pvxESrvcCrntPMUASValue object to 0.')
pvxESrvcHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41), )
if mibBuilder.loadTexts: pvxESrvcHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the PacketVX ethernet services objects.')
pvxESrvcHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxESrvcHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMEntry.setDescription('The row entry object of the PacketVX ethernet services historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given ethernet service instance.')
pvxESrvcHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the ethernet service is provisioned.')
pvxESrvcHistPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcHistPMESrvcNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMESrvcNameIdx.setDescription('The name of the ethernet service.')
pvxESrvcHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 3), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxESrvcHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxESrvcHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxESrvcHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcHistPMUASValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMUASValue.setDescription('The count of unavailable seconds for the ethernet service.')
pvxESrvcHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcHistPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMUASTimeStamp.setDescription('The date and time stamp of the ethernet service unavailable seconds count value.')
pvxESrvcHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcHistPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMUASValidity.setDescription('Indicates the validity of the provided ethernet service unavailable seconds count value.')
pvxESrvcHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 41, 1, 8), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcHistPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcHistPMUASInitialize.setDescription('Used to initialize the value of the pvxESrvcHistPMUASValue object to 0.')
pvxESrvcBWPrflCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42), )
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the PacketVX perEVC and perCoS objects.')
pvxESrvcBWPrflCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPlcyNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMClsMapNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMDirectionIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMEntry.setDescription('The row entry object of the PacketVX ethernet services bandwidth profile current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given perEVC or perCoS instance.')
pvxESrvcBWPrflCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the monitored object is provisioned.')
pvxESrvcBWPrflCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMShelfIdx.setDescription('The number of the shelf on which the monitored object is provisioned.')
pvxESrvcBWPrflCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMSlotIdx.setDescription('The number of the slot on which the monitored object is provisioned.')
pvxESrvcBWPrflCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPortTypeIdx.setDescription('The type of PacketVX port on which the monitored object is provisioned.')
pvxESrvcBWPrflCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPortIdx.setDescription('The number of the port of the identified type on which the monitored object is provisioned.')
pvxESrvcBWPrflCrntPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMESrvcNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMESrvcNameIdx.setDescription('The name of the ethernet service.')
pvxESrvcBWPrflCrntPMPlcyNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPlcyNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMPlcyNameIdx.setDescription('The name of the policy.')
pvxESrvcBWPrflCrntPMClsMapNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMClsMapNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMClsMapNameIdx.setDescription('The name of the class map.')
pvxESrvcBWPrflCrntPMDirectionIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMDirectionIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMDirectionIdx.setDescription('The direction of traffic of the monitored object.')
pvxESrvcBWPrflCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 10), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxESrvcBWPrflCrntPMOctetsTotalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalValue.setDescription('The total count of octets received or transmitted for the monitored service.')
pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp.setDescription('The date and time stamp of the total octets count value.')
pvxESrvcBWPrflCrntPMOctetsTotalValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalValidity.setDescription('Indicates the validity of the provided total octets count value.')
pvxESrvcBWPrflCrntPMOctetsTotalInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsTotalInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflCrntPMOctetsTotalValue object to 0.')
pvxESrvcBWPrflCrntPMOctetsVltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltValue.setDescription('The count of octets violate for the monitored service.')
pvxESrvcBWPrflCrntPMOctetsVltTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltTimeStamp.setDescription('The date and time stamp of the octets violate count value.')
pvxESrvcBWPrflCrntPMOctetsVltValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltValidity.setDescription('Indicates the validity of the provided octets violate count value.')
pvxESrvcBWPrflCrntPMOctetsVltInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsVltInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflCrntPMOctetsVltValue object to 0.')
pvxESrvcBWPrflCrntPMOctetsCnfExcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 19), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcValue.setDescription('The count of octets conform and exceeded for the monitored service.')
pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp.setDescription('The date and time stamp of the octets conform and exceeded count value.')
pvxESrvcBWPrflCrntPMOctetsCnfExcValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcValidity.setDescription('Indicates the validity of the provided octets conform and exceeded count value.')
pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflCrntPMOctetsCnfExcValue object to 0.')
pvxESrvcBWPrflCrntPMBDWUtlzValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 23), FixedX100()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzValue.setDescription('The bandwidth utilization of the monitored service.')
pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp.setDescription('The date and time stamp of the bandwidth utilization value.')
pvxESrvcBWPrflCrntPMBDWUtlzValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzValidity.setDescription('Indicates the validity of the provided bandwidth utilization value.')
pvxESrvcBWPrflCrntPMBDWUtlzInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 42, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflCrntPMBDWUtlzInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflCrntPMBDWUtlzValue object to 0.')
pvxESrvcBWPrflHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43), )
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the PacketVX perEVC and perCoS objects.')
pvxESrvcBWPrflHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMPlcyNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMClsMapNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMDirectionIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMEntry.setDescription('The row entry object of the PacketVX ethernet services bandwidth profile historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for an historical measurement interval for a given perEVC or perCoS instance.')
pvxESrvcBWPrflHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the monitored object is provisioned.')
pvxESrvcBWPrflHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMShelfIdx.setDescription('The number of the shelf on which the monitored object is provisioned.')
pvxESrvcBWPrflHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMSlotIdx.setDescription('The number of the slot on which the monitored object is provisioned.')
pvxESrvcBWPrflHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPortTypeIdx.setDescription('The type of PacketVX port on which the monitored object is provisioned.')
pvxESrvcBWPrflHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPortIdx.setDescription('The number of the port of the identified type on which the monitored object is provisioned.')
pvxESrvcBWPrflHistPMESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMESrvcNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMESrvcNameIdx.setDescription('The name of the ethernet service.')
pvxESrvcBWPrflHistPMPlcyNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPlcyNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMPlcyNameIdx.setDescription('The name of the policy.')
pvxESrvcBWPrflHistPMClsMapNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMClsMapNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMClsMapNameIdx.setDescription('The name of the class map.')
pvxESrvcBWPrflHistPMDirectionIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMDirectionIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMDirectionIdx.setDescription('The direction of traffic of the monitored object.')
pvxESrvcBWPrflHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 10), PMIntervalType())
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxESrvcBWPrflHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxESrvcBWPrflHistPMOctetsTotalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalValue.setDescription('The total count of octets received or transmitted for the monitored service.')
pvxESrvcBWPrflHistPMOctetsTotalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalTimeStamp.setDescription('The date and time stamp of the total octets count value.')
pvxESrvcBWPrflHistPMOctetsTotalValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalValidity.setDescription('Indicates the validity of the provided total octets count value.')
pvxESrvcBWPrflHistPMOctetsTotalInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsTotalInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflHistPMOctetsTotalValue object to 0.')
pvxESrvcBWPrflHistPMOctetsVltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltValue.setDescription('The count of octets violate for the monitored service.')
pvxESrvcBWPrflHistPMOctetsVltTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltTimeStamp.setDescription('The date and time stamp of the octets violate count value.')
pvxESrvcBWPrflHistPMOctetsVltValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltValidity.setDescription('Indicates the validity of the provided octets violate count value.')
pvxESrvcBWPrflHistPMOctetsVltInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsVltInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflHistPMOctetsVltValue object to 0.')
pvxESrvcBWPrflHistPMOctetsCnfExcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcValue.setDescription('The count of octets conform and exceeded for the monitored service.')
pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp.setDescription('The date and time stamp of the octets conform and exceeded count value.')
pvxESrvcBWPrflHistPMOctetsCnfExcValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcValidity.setDescription('Indicates the validity of the provided octets conform and exceeded count value.')
pvxESrvcBWPrflHistPMOctetsCnfExcInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMOctetsCnfExcInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflHistPMOctetsCnfExcValue object to 0.')
pvxESrvcBWPrflHistPMBDWUtlzValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 24), FixedX100()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzValue.setDescription('The bandwidth utilization of the monitored service.')
pvxESrvcBWPrflHistPMBDWUtlzTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzTimeStamp.setDescription('The date and time stamp of the bandwidth utilization value.')
pvxESrvcBWPrflHistPMBDWUtlzValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzValidity.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzValidity.setDescription('Indicates the validity of the provided bandwidth utilization value.')
pvxESrvcBWPrflHistPMBDWUtlzInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 43, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflHistPMBDWUtlzInitialize.setDescription('Used to initialize the value of the pvxESrvcBWPrflHistPMBDWUtlzValue object to 0.')
pvxESrvcBWPrflPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44), )
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdTable.setDescription('A table of threshold levels for monitored parameters which support threshold crossing alerts on PacketVX perEVC and perCoS objects.')
pvxESrvcBWPrflPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdESrvcNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdPlcyNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdClsMapNameIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdDirectionIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdLevelTypeIdx"))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdEntry.setDescription('The row entry object of the PVX Ethernet Service Bandwidth Profile performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval level that applies to an individual perEVC or perCoS instance.')
pvxESrvcBWPrflPMThresholdSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the monitored object is provisioned.')
pvxESrvcBWPrflPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdShelfIdx.setDescription('The number of the shelf on which the monitored object is provisioned.')
pvxESrvcBWPrflPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdSlotIdx.setDescription('The number of the slot on which the monitored object is provisioned.')
pvxESrvcBWPrflPMThresholdPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPortTypeIdx.setDescription('The type of PacketVX port on which the monitored object is provisioned.')
pvxESrvcBWPrflPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPortIdx.setDescription('The number of the port of the identified type on which the monitored object is provisioned.')
pvxESrvcBWPrflPMThresholdESrvcNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdESrvcNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdESrvcNameIdx.setDescription('The name of the ethernet service.')
pvxESrvcBWPrflPMThresholdPlcyNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPlcyNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdPlcyNameIdx.setDescription('The name of the policy.')
pvxESrvcBWPrflPMThresholdClsMapNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdClsMapNameIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdClsMapNameIdx.setDescription('The name of the class map.')
pvxESrvcBWPrflPMThresholdDirectionIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdDirectionIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdDirectionIdx.setDescription('The direction of traffic of the monitored object.')
pvxESrvcBWPrflPMThresholdLevelTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 10), PvxESrvcBWPrflPMThresholdLevelType())
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdLevelTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdLevelTypeIdx.setDescription('Identifies the specific PM threshold according to interval length and level criticality.')
pvxESrvcBWPrflPMThresholdBDWUtlzValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 44, 1, 11), FixedX100()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdBDWUtlzValue.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflPMThresholdBDWUtlzValue.setDescription('The threshold for the bandwidth utilization.')
pvxERPSPortCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45), )
if mibBuilder.loadTexts: pvxERPSPortCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMTable.setDescription('A table of current performance monitoring statistics collected for PacketVX ERPS Port')
pvxERPSPortCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxERPSPortCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEntry.setDescription('The row entry object of the PacketVX ERPS Port current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given PVX ERPS Port.')
pvxERPSPortCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSPortCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the ERPS Port is provisioned.')
pvxERPSPortCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxERPSPortCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMShelfIdx.setDescription('The number of the shelf on which the ERPS Port targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxERPSPortCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxERPSPortCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSlotIdx.setDescription('The number of the slot within which the ERPS Port targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxERPSPortCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxERPSPortCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMTypeIdx.setDescription('The type of PacketVX port on which the ERPS Port facility is provisioned.')
pvxERPSPortCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxERPSPortCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPortIdx.setDescription('The port number for the ERPS Port')
pvxERPSPortCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxERPSPortCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxERPSPortCrntPMPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 7), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxValue.setDescription('The Number of PDUs transmitted on this port')
pvxERPSPortCrntPMPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 10), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxValue.setDescription('The number of PDUs received on this port')
pvxERPSPortCrntPMPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMPduDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardValue.setDescription('The number of PDUs discarded on this port')
pvxERPSPortCrntPMPduDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMPduDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMPduDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMPduDiscardInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMBlockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 19), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedValue.setDescription('The number of times this port has transitioned to blocked state')
pvxERPSPortCrntPMBlockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMBlockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMBlockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMBlockedInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMUnblockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 23), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedValue.setDescription('The number of times this port has transitioned to unblocked state')
pvxERPSPortCrntPMUnblockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMUnblockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMUnblockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMUnblockedInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMFailuresValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 27), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresValue.setDescription('The number of times this port has transitioned to failed state')
pvxERPSPortCrntPMFailuresTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMFailuresValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMFailuresInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFailuresInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMRecoveriesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 31), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesValue.setDescription('The number of times this port has recovered from failed state')
pvxERPSPortCrntPMRecoveriesTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMRecoveriesValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMRecoveriesInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 34), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMRecoveriesInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMNrPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 35), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxValue.setDescription('The Number of NR PDUs transmitted on this port')
pvxERPSPortCrntPMNrPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMNrPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 37), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMNrPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 38), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMNrPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 39), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxValue.setDescription('The number of NR PDUs received on this port')
pvxERPSPortCrntPMNrPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMNrPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMNrPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 42), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMNrrbPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 43), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxValue.setDescription('The Number of NRRB PDUs transmitted on this port')
pvxERPSPortCrntPMNrrbPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMNrrbPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMNrrbPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 46), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMNrrbPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 47), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxValue.setDescription('The number of NRRB PDUs received on this port')
pvxERPSPortCrntPMNrrbPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 48), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMNrrbPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 49), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMNrrbPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 50), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMNrrbPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMSfPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 51), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxValue.setDescription('The Number of SF PDUs transmitted on this port')
pvxERPSPortCrntPMSfPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMSfPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMSfPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 54), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMSfPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 55), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxValue.setDescription('The number of SF PDUs received on this port')
pvxERPSPortCrntPMSfPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMSfPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMSfPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 58), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMSfPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMFsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 59), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxValue.setDescription('The Number of FS PDUs transmitted on this port')
pvxERPSPortCrntPMFsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 60), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMFsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 61), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMFsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 62), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMFsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 63), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxValue.setDescription('The number of FS PDUs received on this port')
pvxERPSPortCrntPMFsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMFsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMFsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 66), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMFsPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMMsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 67), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxValue.setDescription('The Number of MS PDUs transmitted on this port')
pvxERPSPortCrntPMMsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMMsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMMsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 70), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMMsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 71), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxValue.setDescription('The number of MS PDUs received on this port')
pvxERPSPortCrntPMMsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 72), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMMsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 73), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMMsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMMsPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMEventPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 75), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxValue.setDescription('The Number of Event PDUs transmitted on this port')
pvxERPSPortCrntPMEventPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMEventPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMEventPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMEventPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 79), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxValue.setDescription('The number of Event PDUs received on this port')
pvxERPSPortCrntPMEventPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 80), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMEventPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 81), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMEventPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMEventPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortCrntPMVersionDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 83), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardValue.setDescription('The number of PDUs version discards on this port')
pvxERPSPortCrntPMVersionDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 84), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortCrntPMVersionDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 85), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortCrntPMVersionDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 45, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortCrntPMVersionDiscardInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46), )
if mibBuilder.loadTexts: pvxERPSPortHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMTable.setDescription('A table of historical performance monitoring statistics collected for PacketVX ERPS Port and ERPS Instance Port objects.')
pvxERPSPortHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxERPSPortHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxERPSPortHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEntry.setDescription('The row entry object of the PacketVX ERPS Port historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for an historical measurement interval for a given PVX ERPS Port or ERPS Instance Port.')
pvxERPSPortHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxERPSPortHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the ERPS Port is provisioned.')
pvxERPSPortHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxERPSPortHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMShelfIdx.setDescription('The number of the shelf on which the ERPS Port targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxERPSPortHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxERPSPortHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSlotIdx.setDescription('The number of the slot within which the ERPS Port targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxERPSPortHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxERPSPortHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMTypeIdx.setDescription('The type of PacketVX port on which the ERPS Port facility is provisioned.')
pvxERPSPortHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxERPSPortHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPortIdx.setDescription('The port number of the ERPS Port.')
pvxERPSPortHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxERPSPortHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxERPSPortHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxERPSPortHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxERPSPortHistPMPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxValue.setDescription('The Number of PDUs transmitted on this port')
pvxERPSPortHistPMPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxValue.setDescription('The number of PDUs received on this port')
pvxERPSPortHistPMPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMPduDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardValue.setDescription('The number of PDUs discarded on this port')
pvxERPSPortHistPMPduDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMPduDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMPduDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMPduDiscardInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMBlockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedValue.setDescription('The number of times this port has transitioned to blocked state')
pvxERPSPortHistPMBlockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMBlockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMBlockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMBlockedInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMUnblockedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedValue.setDescription('The number of times this port has transitioned to unblocked state')
pvxERPSPortHistPMUnblockedTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMUnblockedValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMUnblockedInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMUnblockedInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMFailuresValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresValue.setDescription('The number of times this port has transitioned to failed state')
pvxERPSPortHistPMFailuresTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMFailuresValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMFailuresInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFailuresInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMRecoveriesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesValue.setDescription('The number of times this port has recovered from failed state')
pvxERPSPortHistPMRecoveriesTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMRecoveriesValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMRecoveriesInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMRecoveriesInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMNrPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 36), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxValue.setDescription('The Number of NR PDUs transmitted on this port')
pvxERPSPortHistPMNrPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMNrPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMNrPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMNrPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 40), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxValue.setDescription('The number of NR PDUs received on this port')
pvxERPSPortHistPMNrPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMNrPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMNrPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMNrrbPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxValue.setDescription('The Number of NRRB PDUs transmitted on this port')
pvxERPSPortHistPMNrrbPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMNrrbPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMNrrbPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMNrrbPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxValue.setDescription('The number of NRRB PDUs received on this port')
pvxERPSPortHistPMNrrbPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMNrrbPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMNrrbPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMNrrbPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMSfPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 52), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxValue.setDescription('The Number of SF PDUs transmitted on this port')
pvxERPSPortHistPMSfPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMSfPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMSfPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMSfPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 56), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxValue.setDescription('The number of SF PDUs received on this port')
pvxERPSPortHistPMSfPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMSfPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMSfPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMSfPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMFsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 60), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxValue.setDescription('The Number of FS PDUs transmitted on this port')
pvxERPSPortHistPMFsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMFsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMFsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMFsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 64), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxValue.setDescription('The number of FS PDUs received on this port')
pvxERPSPortHistPMFsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMFsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMFsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMFsPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMMsPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 68), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxValue.setDescription('The Number of MS PDUs transmitted on this port')
pvxERPSPortHistPMMsPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMMsPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMMsPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMMsPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 72), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxValue.setDescription('The number of MS PDUs received on this port')
pvxERPSPortHistPMMsPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMMsPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMMsPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMMsPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMEventPduTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 76), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxValue.setDescription('The Number of Event PDUs transmitted on this port')
pvxERPSPortHistPMEventPduTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMEventPduTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMEventPduTxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduTxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMEventPduRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 80), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxValue.setDescription('The number of Event PDUs received on this port')
pvxERPSPortHistPMEventPduRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMEventPduRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMEventPduRxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMEventPduRxInitialize.setDescription('Used to initialize the value to 0.')
pvxERPSPortHistPMVersionDiscardValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 84), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardValue.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardValue.setDescription('The number of PDUs version discards on this port')
pvxERPSPortHistPMVersionDiscardTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardTimeStamp.setDescription('The date and time stamp of the value.')
pvxERPSPortHistPMVersionDiscardValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardValidity.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardValidity.setDescription('Indicates the validity of the value.')
pvxERPSPortHistPMVersionDiscardInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 46, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxERPSPortHistPMVersionDiscardInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47), )
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMTable.setDescription('A table of performance monitoring statistics collected for PacketVX Ethernet Service SLA objects.')
pvxEServiceSlaCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMRMepId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMEntry.setDescription("The row entry object of the PacketVX Ethernet Service SLA historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for an historical measurement interval for a given PVX Ethernet Service's SLA.")
pvxEServiceSlaCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Ethernet Service SLA is provisioned.')
pvxEServiceSlaCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMShelfIdx.setDescription('The number of the shelf on which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxEServiceSlaCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMSlotIdx.setDescription('The number of the slot within which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxEServiceSlaCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMPortTypeIdx.setDescription('The type of PacketVX port on which the Ethernet Service SLA facility is provisioned.')
pvxEServiceSlaCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMPortIdx.setDescription('The port number of the Ethernet Service SLA.')
pvxEServiceSlaCrntPMESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMESName.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMESName.setDescription('The Ethernet service name.')
pvxEServiceSlaCrntPMRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMRMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMRMepId.setDescription('Remote MEP ID.')
pvxEServiceSlaCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 8), PMIntervalType())
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxEServiceSlaCrntPMNearEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 9), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLoss.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLoss.setDescription('Indicates near end frame loss ratio value.')
pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPMNearEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPMNearEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 12), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMNearEndFrameLossInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPMFarEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 13), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLoss.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLoss.setDescription('Indicates far end frame loss ratio value.')
pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPMFarEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPMFarEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 16), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPMFarEndFrameLossInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPM2WayDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimum.setDescription('Indicates two way delay minimum value.')
pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPM2WayDelayMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPM2WayDelayMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 21), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMinimumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPM2WayDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximum.setDescription('Indicates two way delay maximum value.')
pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPM2WayDelayMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPM2WayDelayMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayMaximumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPM2WayDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverage.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverage.setDescription('Indicates two way delay average value.')
pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPM2WayDelayAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPM2WayDelayAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 29), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayAverageInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPM2WayDelayVariationMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimum.setDescription('Indicates two way delay Variation Minimum value.')
pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 33), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPM2WayDelayVariationMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximum.setDescription('Indicates two way delay Variation Maximum value.')
pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 37), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaCrntPM2WayDelayVariationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverage.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverage.setDescription('Indicates two way delay Variation Minimum value.')
pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 40), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 47, 1, 41), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48), )
if mibBuilder.loadTexts: pvxEServiceSlaHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMTable.setDescription('A table of historical performance monitoring statistics collected for PacketVX ERPS Port and ERPS Instance Port objects.')
pvxEServiceSlaHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMRMepId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMIntervalTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMEntry.setDescription("The row entry object of the PacketVX Ethernet Service SLA historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for an historical measurement interval for a given PVX Ethernet Service's SLA.")
pvxEServiceSlaHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Ethernet Service SLA is provisioned.')
pvxEServiceSlaHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMShelfIdx.setDescription('The number of the shelf on which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxEServiceSlaHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMSlotIdx.setDescription('The number of the slot within which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxEServiceSlaHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEServiceSlaHistPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMPortTypeIdx.setDescription('The type of PacketVX port on which the Ethernet Service SLA facility is provisioned.')
pvxEServiceSlaHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMPortIdx.setDescription('The port number of the Ethernet Service SLA.')
pvxEServiceSlaHistPMESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxEServiceSlaHistPMESName.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMESName.setDescription('The Ethernet service name.')
pvxEServiceSlaHistPMRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMRMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMRMepId.setDescription('Remote MEP ID.')
pvxEServiceSlaHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 8), PMIntervalType())
if mibBuilder.loadTexts: pvxEServiceSlaHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxEServiceSlaHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxEServiceSlaHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxEServiceSlaHistPMNearEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 10), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLoss.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLoss.setDescription('Indicates near end frame loss ratio value.')
pvxEServiceSlaHistPMNearEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPMNearEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPMNearEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 13), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMNearEndFrameLossInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPMFarEndFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 14), FixedX1000()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLoss.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLoss.setDescription('Indicates far end frame loss ratio value.')
pvxEServiceSlaHistPMFarEndFrameLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPMFarEndFrameLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPMFarEndFrameLossInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 17), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPMFarEndFrameLossInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPM2WayDelayMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimum.setDescription('Indicates two way delay minimum value.')
pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPM2WayDelayMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPM2WayDelayMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 21), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMinimumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPM2WayDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximum.setDescription('Indicates two way delay maximum value.')
pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPM2WayDelayMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPM2WayDelayMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayMaximumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPM2WayDelayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverage.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverage.setDescription('Indicates two way delay average value.')
pvxEServiceSlaHistPM2WayDelayAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPM2WayDelayAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPM2WayDelayAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 29), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayAverageInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPM2WayDelayVariationMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimum.setDescription('Indicates two way delay Variation Minimum value.')
pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 33), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPM2WayDelayVariationMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximum.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximum.setDescription('Indicates two way delay Variation Maximum value.')
pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 37), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize.setDescription('Used to initialize the value to 0.')
pvxEServiceSlaHistPM2WayDelayVariationAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverage.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverage.setDescription('Indicates two way delay Variation Minimum value.')
pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp.setDescription('The date and time stamp of the value.')
pvxEServiceSlaHistPM2WayDelayVariationAverageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 40), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageValidity.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageValidity.setDescription('Indicates the validity of the value.')
pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 48, 1, 41), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize.setDescription('Used to initialize the value to 0.')
mstpGlobalErrType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memfail", 1), ("bufffail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpGlobalErrType.setStatus('current')
if mibBuilder.loadTexts: mstpGlobalErrType.setDescription('Used within the Trap Notification PDU. It returns the following values memfail - memory allocation failure bufffail - buffer allocation failure')
mstpGeneralEvtType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpGeneralEvtType.setStatus('current')
if mibBuilder.loadTexts: mstpGeneralEvtType.setDescription('Used within the Trap Notification PDU. It returns the following values up - protocol up down - protocol down')
mstpProtocolMigrationType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sendstp", 1), ("sendrstp", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpProtocolMigrationType.setStatus('current')
if mibBuilder.loadTexts: mstpProtocolMigrationType.setDescription('Used within the Trap Notification PDU. Port protocol migration type occured in the port.')
mstpPacketErrType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("protocolIdErr", 1), ("invalidBpdu", 2), ("configLengthErr", 3), ("tcnLengthErr", 4), ("rstpLengthErr", 5), ("maxAgeErr", 6), ("fwdDelayErr", 7), ("helloTimeErr", 8), ("mstpLengthErr", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpPacketErrType.setStatus('current')
if mibBuilder.loadTexts: mstpPacketErrType.setDescription('Used within the Trap Notification PDU. Type of invalid packet received in each of the port')
mstpPacketErrValue = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mstpPacketErrValue.setStatus('current')
if mibBuilder.loadTexts: mstpPacketErrValue.setDescription('Used within the Trap Notification PDU. Packet error value corresponding to the above type.')
resourceUnavailableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 22, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpGlobalErrType"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: resourceUnavailableCond.setStatus('current')
if mibBuilder.loadTexts: resourceUnavailableCond.setDescription('Generated when any of the error events like memory failure or buffer failure occurs.')
resourceUnavailableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 22, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpGlobalErrType"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: resourceUnavailableClear.setStatus('current')
if mibBuilder.loadTexts: resourceUnavailableClear.setDescription('Generated when any of the error events like memory failure or buffer failure clears.')
switchMemberStkPortDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 30, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: switchMemberStkPortDownCond.setStatus('current')
if mibBuilder.loadTexts: switchMemberStkPortDownCond.setDescription('Generated when a switch member stacking port is down.')
switchMemberStkPortDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 30, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxSwitchMemberIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: switchMemberStkPortDownClear.setStatus('current')
if mibBuilder.loadTexts: switchMemberStkPortDownClear.setDescription('Generated when a switch member stacking port comes in service.')
mstpProtocolGeneralEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpGeneralEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpProtocolGeneralEvt.setStatus('current')
if mibBuilder.loadTexts: mstpProtocolGeneralEvt.setDescription('Generated when any of the general events like protocol up or protocol down occurs.')
mstpNewRootEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgRegRoot"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpNewRootEvt.setStatus('current')
if mibBuilder.loadTexts: mstpNewRootEvt.setDescription('Generated whenever a new root bridge is selected in the topology.')
mstpTopologyChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 3)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpTopologyChangeEvt.setStatus('current')
if mibBuilder.loadTexts: mstpTopologyChangeEvt.setDescription('Generated when topology change is detected')
mstpProtocolMigrationEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 4)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenVersionSupported"), ("PACKET-VX-BRIDGE-MIB", "mstpProtocolMigrationType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpProtocolMigrationEvt.setStatus('current')
if mibBuilder.loadTexts: mstpProtocolMigrationEvt.setDescription('Generated when port protocol migration happens in the port.')
mstpInvalidPacketRcvdEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 5)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "mstpPacketErrType"), ("PACKET-VX-BRIDGE-MIB", "mstpPacketErrValue"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpInvalidPacketRcvdEvt.setStatus('current')
if mibBuilder.loadTexts: mstpInvalidPacketRcvdEvt.setDescription('Generated when port protocol migration happens in the port.')
mstpRegionConfigChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 6)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdFmtSel"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdName"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdRevisionLevel"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenIdDigest"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpRegionConfigChangeEvt.setStatus('current')
if mibBuilder.loadTexts: mstpRegionConfigChangeEvt.setDescription(' Generated when the MST region�s configuration identifier changes.')
mstpRoleChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23, 0, 7)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxMSTPGenSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPXstBrdgId"), ("PACKET-VX-BRIDGE-MIB", "pvxMSTPPortRole"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: mstpRoleChangeEvt.setStatus('current')
if mibBuilder.loadTexts: mstpRoleChangeEvt.setDescription(' Generated whenever a new role is selected for the port.')
lagLinkDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 23, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxLGSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxLGIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: lagLinkDownCond.setStatus('current')
if mibBuilder.loadTexts: lagLinkDownCond.setDescription('PVX LAG link down.')
lagLinkDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 23, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxLGSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxLGIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: lagLinkDownClear.setStatus('current')
if mibBuilder.loadTexts: lagLinkDownClear.setDescription('PVX LAG link down has cleared.')
pvxESrvcBWPrflBDWUtlzTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 26, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMESrvcNameIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMPlcyNameIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMClsMapNameIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMDirectionIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMIntervalTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflCrntPMBDWUtlzValue"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdLevelTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxESrvcBWPrflPMThresholdBDWUtlzValue"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxESrvcBWPrflBDWUtlzTcaEvt.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcBWPrflBDWUtlzTcaEvt.setDescription('This trap provides a threshold crossing alert when the bandwidth utilization rate of a perEVC or perCoS instance exceeds a configured threshold.')
pvxSlaMeasurementTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 30, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMShelfIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMSlotIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortTypeIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMPortIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMESName"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMRMepId"), ("PACKET-VX-BRIDGE-MIB", "pvxEServiceSlaCrntPMIntervalTypeIdx"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxSlaMeasurementTcaEvt.setStatus('current')
if mibBuilder.loadTexts: pvxSlaMeasurementTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic for the PVX SLA measurement.')
pvxESrvcOperStateChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 27, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcOperState"), ("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDefects"), ("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepY1731DefectConditions"), ("PACKET-VX-BRIDGE-MIB", "pvxEthSrvcExceedMaxUNI"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxESrvcOperStateChangeEvt.setStatus('current')
if mibBuilder.loadTexts: pvxESrvcOperStateChangeEvt.setDescription('This trap provides an ethernet service operational state change alert.')
pvxERPSSrvcNNIProtectionSwitchChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 28, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISwitchId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIShelfId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISlotId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortTypeId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIPortId"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNISrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcProtectionSwitchMode"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIProtectionSwitch"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcNNIRingPortStatus"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcNNIProtectionSwitchChangeEvent.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcNNIProtectionSwitchChangeEvent.setDescription('This trap provides an ERPS service ring port state change alert.')
pvxERPSSrvcRingSemStateChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcRingSemStateChangeEvent.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcRingSemStateChangeEvent.setDescription('This trap provides an ERPS service sem state change alert.')
pvxERPSSrvcConfigFailEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcConfigFailEvent.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcConfigFailEvent.setDescription('This trap indicates a failure occurred while programming the hardware to capture R-APS messages. The ERPS ring will not function if this trap occurs.')
pvxERPSSrvcTimerStartEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29, 0, 3)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcTimerStartEvent.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcTimerStartEvent.setDescription('This trap indicates a failure starting one of the ERPS timers. The ERPS ring will not function correctly after this trap occurs.')
pvxERPSSrvcVersionMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcCompatibleVersion"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcVersionMismatchCond.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcVersionMismatchCond.setDescription('This trap indicates a misconfiguration in the ERPS ring. This node is configured for one version of ERPS and is receiving packets from a node configured to run at a different version')
pvxERPSSrvcVersionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcCompatibleVersion"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcVersionMismatchClear.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcVersionMismatchClear.setDescription('This trap indicates a misconfiguration in the ERPS ring is cleared')
pvxERPSSrvcFOPProvisionMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 3)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcFOPProvisionMismatchCond.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcFOPProvisionMismatchCond.setDescription('This trap indicates a misconfiguration in the ERPS ring. The RPL Owner has received a R-APS (NR,RB) packet from another node that believes it is the RPL Owner.')
pvxERPSSrvcFOPProvisionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29, 0, 4)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcSwitchIdx"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxERPSSrvcRingSemState"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pvxERPSSrvcFOPProvisionMismatchClear.setStatus('current')
if mibBuilder.loadTexts: pvxERPSSrvcFOPProvisionMismatchClear.setDescription('This trap indicates a misconfiguration in the ERPS ring is cleared.')
pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 32, 0, 1)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISwitchId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIShelfId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISlotId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortTypeId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIPortId"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNISrvcName"), ("PACKET-VX-BRIDGE-MIB", "pvxSrvcUNIEFPSDLocalEFPSDState"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent.setStatus('current')
if mibBuilder.loadTexts: pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent.setDescription('This trap provides an Local EFPSD state change alert.')
pvxMepListTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1), )
if mibBuilder.loadTexts: pvxMepListTable.setStatus('current')
if mibBuilder.loadTexts: pvxMepListTable.setDescription('List of MEPIDs (in any bridge) that belong to the same ME.')
pvxMepListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxMepListSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMepListESrvcVlanId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxMepListIdentifier"))
if mibBuilder.loadTexts: pvxMepListEntry.setStatus('current')
if mibBuilder.loadTexts: pvxMepListEntry.setDescription('The known MEPs table entry.')
pvxMepListSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxMepListSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxMepListSwitchIdx.setDescription('This object represents the particular switch id.')
pvxMepListESrvcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxMepListESrvcVlanId.setStatus('current')
if mibBuilder.loadTexts: pvxMepListESrvcVlanId.setDescription('The name of the service.')
pvxMepListIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxMepListIdentifier.setStatus('current')
if mibBuilder.loadTexts: pvxMepListIdentifier.setDescription('A 13 bits value of MEP id.')
pvxMepLocalRemoteFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localMEP", 1), ("remoteMEP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMepLocalRemoteFlag.setStatus('current')
if mibBuilder.loadTexts: pvxMepLocalRemoteFlag.setDescription('A flag indicating whether the MEP is local or remote. Default is set to remoteMEP by the system.')
pvxMepSequenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxMepSequenceId.setStatus('current')
if mibBuilder.loadTexts: pvxMepSequenceId.setDescription('')
pvxMepListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxMepListRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxMepListRowStatus.setDescription('The status of the row.')
pvxEcfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2), )
if mibBuilder.loadTexts: pvxEcfmMepTable.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTable.setDescription('The Maintenance Association End Point (MEP) table. Each row in the table represents a different MEP. A MEP is an actively managed CFM entity, associated with a specific DSAP of a Service Instance, which can generate and receive CFM PDUs and track any responses. ')
pvxEcfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepSlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepESrvcName"))
if mibBuilder.loadTexts: pvxEcfmMepEntry.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepEntry.setDescription('The MEP table entry')
pvxEcfmMepSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmMepSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepSwitchIdx.setDescription('This object represents the particular switch id.')
pvxEcfmMepShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEcfmMepShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepShelfId.setDescription('')
pvxEcfmMepSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEcfmMepSlotId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepSlotId.setDescription('')
pvxEcfmMepPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEcfmMepPortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepPortTypeId.setDescription('')
pvxEcfmMepPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: pvxEcfmMepPortId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepPortId.setDescription('')
pvxEcfmMepESrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxEcfmMepESrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepESrvcName.setDescription('The name of the service.')
pvxEcfmMepIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepIdentifier.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepIdentifier.setDescription('A 13 bits value of MEP id.')
pvxEcfmMepDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepDirection.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDirection.setDescription('MEP direction. Default is set to up by the system.')
pvxEcfmMepActive = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepActive.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepActive.setDescription('A Boolean indicating the administrative state of the MEP. True indicates that the MEP is to function normally, and false that it is to cease functioning.')
pvxEcfmMepAutoGenerateFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepAutoGenerateFlag.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepAutoGenerateFlag.setDescription('A Boolean indicating whether the MEP ID is auto-generated by the system. FALSE indicates the user configured the MEP ID.')
pvxEcfmMepMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepMacAddress.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepMacAddress.setDescription('MAC address of the MEP.')
pvxEcfmMepFlushRMepDb = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepFlushRMepDb.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepFlushRMepDb.setDescription('A Boolean indicating whether the remote MEP needs to flush its MEP list or not True indicates that the remote MEP needs to flush and rebuild its MEP lists.')
pvxEcfmMepOutOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepOutOfService.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepOutOfService.setDescription('Adminstrative service that is being or to be performed. True indicates that the operation needs to be performed out-of-service. Otherwise, the operation needs to be performed in-service..')
pvxEcfmMepY1731DefectConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 14), PvxY1731MepDefects()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepY1731DefectConditions.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepY1731DefectConditions.setDescription('A vector of Boolean indicates the defect conditions.')
pvxEcfmMepDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 15), PvxEcfmMepDefects()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDefects.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDefects.setDescription('A vector of Boolean indicates the defect conditions.')
pvxEcfmMepCcmSequenceErr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepCcmSequenceErr.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepCcmSequenceErr.setDescription('The total number of out-of-sequence CCMs received from all remote MEPs. ')
pvxEcfmMepSentCcms = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepSentCcms.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepSentCcms.setDescription('Total number of Continuity Check messages transmitted.')
pvxEcfmMepTransmitLtmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 18), PvxEcfmTransmitStatus().clone('transmit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmStatus.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmStatus.setDescription("A Enumerated value set to 'transmit' to initiate LTM transmission. Set to 'ready' or 'notReady' by the MEP Linktrace Initiator State Machine.")
pvxEcfmMepTransmitLtmTargetMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmTargetMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmTargetMepId.setDescription('Target MEP ID.')
pvxEcfmMepTransmitLtmTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmTtl.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmTtl.setDescription('The LTM TTL field. Default value, if not specified, is 64. The TTL field indicates the number of hops remaining to the LTM. Decremented by 1 by each Linktrace Responder that handles the LTM. The value received in the LTM is returned in the LTR. If 0 on input, the LTM is not transmitted to the next hop.')
pvxEcfmMepTransmitLtmResultOK = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmResultOK.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmResultOK.setDescription('Indicates the result of the operation: - true The Linktrace Message will be (or has been) sent. - false The Linktrace Message will not be sent')
pvxEcfmMepTransmitLtmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmSeqNumber.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLtmSeqNumber.setDescription('The LTM Transaction Identifier of the LTM sent. The value returned is undefined if pvxEcfmMepTransmitLtmResultOK is false.')
pvxEcfmMepTransmitLbmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 23), PvxEcfmTransmitStatus().clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmStatus.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmStatus.setDescription("A Enumerated value set to 'transmit'to initiate LBM transmission. Set to 'ready' or 'notReady' by the MEP Loopback Initiator State Machine.")
pvxEcfmMepTransmitLbmDestMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmDestMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmDestMepId.setDescription('Target MEP ID.')
pvxEcfmMepTransmitLbmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmCount.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmCount.setDescription('Identifies the number of LBMs transmitted')
pvxEcfmMepTransmitLbmResultOK = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmResultOK.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepTransmitLbmResultOK.setDescription('Indicates the result of the operation: - true The Loopback Message(s) will be (or has been) sent. - false The Loopback Message(s) will not be sent.')
pvxEcfmMepY1731LbmCurrentTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepY1731LbmCurrentTransId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepY1731LbmCurrentTransId.setDescription('Identifies the current LBM Transaction.')
pvxEcfmMepLbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrIn.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepLbrIn.setDescription('Total number of valid, in-order Loopback Replies received.')
pvxEcfmMepLbrInOutOfOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrInOutOfOrder.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepLbrInOutOfOrder.setDescription('The total number of valid, out-of-order Loopback Replies received.')
pvxEcfmMepLbrBadMsdu = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrBadMsdu.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepLbrBadMsdu.setDescription('The total number of LBRs received whose mac_service_data_unit did not match (except for the OpCode) that of the corresponding LBM.')
pvxEcfmMepLbrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepLbrOut.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepLbrOut.setDescription('Total number of Loopback Replies transmitted.')
pvxEcfmMepUnexpLtrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepUnexpLtrIn.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepUnexpLtrIn.setDescription('The total number of unexpected LTRs received.')
pvxEcfmMepErrCcmRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepErrCcmRMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepErrCcmRMepId.setDescription('Mep Id of the CCM which caused the Error CCM Defect.')
pvxEcfmMepXconnRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepXconnRMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepXconnRMepId.setDescription('Mep Id of the CCM which caused the Xconn CCM Defect')
cfmRMepStateChangeV2Evt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 36, 0, 2)).setObjects(("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbRMepState"), ("PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDefects"))
if mibBuilder.loadTexts: cfmRMepStateChangeV2Evt.setStatus('current')
if mibBuilder.loadTexts: cfmRMepStateChangeV2Evt.setDescription('A cfmRMepStateChangeEvt notification is sent when a remote MEP changes its state.')
pvxEcfmMepDbTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3), )
if mibBuilder.loadTexts: pvxEcfmMepDbTable.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbTable.setDescription('The MEP Database. A database, maintained by every MEP, that maintains received information about other MEPs in the Maintenance Domain.')
pvxEcfmMepDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbVlanId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbLocalMepId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMepDbRemoteMepId"))
if mibBuilder.loadTexts: pvxEcfmMepDbEntry.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbEntry.setDescription('The MEP Database table entry.')
pvxEcfmMepDbSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmMepDbSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbSwitchIdx.setDescription('This object represents the particular switch id.')
pvxEcfmMepDbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxEcfmMepDbVlanId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbVlanId.setDescription('The vlan ID of the ethernet service.')
pvxEcfmMepDbLocalMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEcfmMepDbLocalMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbLocalMepId.setDescription('A 13 bits value of MEP id.')
pvxEcfmMepDbRemoteMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEcfmMepDbRemoteMepId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRemoteMepId.setDescription('A 13 bits value of remote MEP id.')
pvxEcfmMepDbRMepState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 5), PvxEcfmRemoteMepState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepState.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRMepState.setDescription('The operational state of the remote MEP IFF State machines.')
pvxEcfmMepDbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbMacAddress.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbMacAddress.setDescription('The MAC address of the remote MEP.')
pvxEcfmMepDbRMepSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepSwitchName.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRMepSwitchName.setDescription("The name of the remote switch. It is set by the system as PVX-x where 'x' is the switch nubmer.")
pvxEcfmMepDbRMepPortInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepPortInfo.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRMepPortInfo.setDescription('The port information of the remote port. It is set by the system as a string of shelfNumber/slotNumber/portType/portNumber.')
pvxEcfmMepDbRMepRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepRDI.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRMepRDI.setDescription('State of the RDI bit in the last received CCM (true for RDI=1), or false if none has been received.')
pvxEcfmMepDbRMepCcmDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepCcmDefect.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRMepCcmDefect.setDescription('A Boolean indicating that no CCM has been received from the remote MEP for at least (3.25*CCM time (CCMInterval)) seconds')
pvxEcfmMepDbRMepPortStatusDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepPortStatusDefect.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRMepPortStatusDefect.setDescription('True if a Port Status Defect is reported by a remote MEP')
pvxEcfmMepDbRMepIntfStatusDefect = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMepDbRMepIntfStatusDefect.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMepDbRMepIntfStatusDefect.setDescription('True if an Interface Status Defect is reported by a remote MEP')
pvxEcfmMipTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4), )
if mibBuilder.loadTexts: pvxEcfmMipTable.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipTable.setDescription('The Maintenance Intermediate Point (MIP) table. Each row in the table represents a different MIP. A MIP consists two MIP Half Functions (MHFs) on a single Bridge Port, an Up MHF and a Down MHF.')
pvxEcfmMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipShelfId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipSlotId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipPortTypeId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipPortId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipMegLevel"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmMipESrvcVlanId"))
if mibBuilder.loadTexts: pvxEcfmMipEntry.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipEntry.setDescription('The MIP table entry.')
pvxEcfmMipSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmMipSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipSwitchIdx.setDescription('This object represents the particular switch id.')
pvxEcfmMipShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxEcfmMipShelfId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipShelfId.setDescription('The shelf number.')
pvxEcfmMipSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxEcfmMipSlotId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipSlotId.setDescription('The slot number.')
pvxEcfmMipPortTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxEcfmMipPortTypeId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipPortTypeId.setDescription('The port type.')
pvxEcfmMipPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxEcfmMipPortId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipPortId.setDescription('The port number')
pvxEcfmMipMegLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)))
if mibBuilder.loadTexts: pvxEcfmMipMegLevel.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipMegLevel.setDescription('The MEG level.')
pvxEcfmMipESrvcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxEcfmMipESrvcVlanId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipESrvcVlanId.setDescription('The vlan ID of the service.')
pvxEcfmMipESrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmMipESrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipESrvcName.setDescription('The name of the service.')
pvxEcfmMipActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEcfmMipActiveState.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipActiveState.setDescription('A Boolean indicating the administrative state of the MIP. True indicates that the MIP is to function normally, and false that it is to cease functioning.')
pvxEcfmMipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxEcfmMipRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmMipRowStatus.setDescription('The status of the row.')
pvxY1731LbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6), )
if mibBuilder.loadTexts: pvxY1731LbStatsTable.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsTable.setDescription('This table extends the MEP table and contains output of loopback or ping transaction. Output includes number of replies recieved, time taken for a reply to come.')
pvxY1731LbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbStatsSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbStatsESrvcName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbStatsIdentifier"), (0, "PACKET-VX-BRIDGE-MIB", "pvxY1731LbmTransId"))
if mibBuilder.loadTexts: pvxY1731LbStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsEntry.setDescription('The Loopback Statistics table entry.')
pvxY1731LbStatsSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxY1731LbStatsSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsSwitchIdx.setDescription('This object represents the particular switch id.')
pvxY1731LbStatsESrvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: pvxY1731LbStatsESrvcName.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsESrvcName.setDescription('The name of the service.')
pvxY1731LbStatsIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxY1731LbStatsIdentifier.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsIdentifier.setDescription('A 13 bits value of MEP id.')
pvxY1731LbmTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pvxY1731LbmTransId.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbmTransId.setDescription('Transaction Identifier identifies a loopback or ping (LBM)transaction.')
pvxY1731LbStatsLbmOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbmOut.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsLbmOut.setDescription('Number of LBMs sent in a loopback or ping transaction.')
pvxY1731LbStatsLbrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrIn.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsLbrIn.setDescription('Number of replies (LBR) received in a loopback or ping transaction.')
pvxY1731LbStatsLbrTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeAverage.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeAverage.setDescription('Average time taken to receive the replies (LBR) for the current loopback or ping transaction.')
pvxY1731LbStatsLbrTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeMin.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeMin.setDescription('Minimum time taken to receive the replies (LBR) for the current loopback or ping transaction.')
pvxY1731LbStatsLbrTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeMax.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsLbrTimeMax.setDescription('Maximum time taken to receive the replies (LBR) for the current loopback or ping transaction.')
pvxY1731LbStatsTotalResponders = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsTotalResponders.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsTotalResponders.setDescription('Total Number of Responders which have sent the reply (LBR) for the initiated LBM.')
pvxY1731LbStatsAvgLbrsPerResponder = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxY1731LbStatsAvgLbrsPerResponder.setStatus('current')
if mibBuilder.loadTexts: pvxY1731LbStatsAvgLbrsPerResponder.setDescription('Average Number of LBR(s) received per Responder.')
pvxEcfmLtrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7), )
if mibBuilder.loadTexts: pvxEcfmLtrTable.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrTable.setDescription('This table extends the MEP table and contains a list of Linktrace replies received by a specific MEP in response to a linktrace message.')
pvxEcfmLtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrVlanId"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrMepIdentifier"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrSeqNumber"), (0, "PACKET-VX-BRIDGE-MIB", "pvxEcfmLtrReceiveOrder"))
if mibBuilder.loadTexts: pvxEcfmLtrEntry.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrEntry.setDescription('The Linktrace Reply table entry.')
pvxEcfmLtrSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxEcfmLtrSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrSwitchIdx.setDescription('This object represents the particular switch id.')
pvxEcfmLtrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: pvxEcfmLtrVlanId.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrVlanId.setDescription('The s-vlan of the service.')
pvxEcfmLtrMepIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxEcfmLtrMepIdentifier.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrMepIdentifier.setDescription('A 13 bits value of MEP id.')
pvxEcfmLtrSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: pvxEcfmLtrSeqNumber.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrSeqNumber.setDescription("Transaction identifier/Sequence number returned by a previous transmit linktrace message command, indicating which LTM's response is going to be returned.")
pvxEcfmLtrReceiveOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pvxEcfmLtrReceiveOrder.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrReceiveOrder.setDescription('An index to distinguish among multiple LTRs with the same LTR Transaction Identifier field value. pvxEcfmLtrReceiveOrder are assigned sequentially from 1, in the order that the Linktrace Initiator received the LTRs.')
pvxEcfmLtrTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrTtl.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrTtl.setDescription('TTL field value for a returned LTR.')
pvxEcfmLtrForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrForwarded.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrForwarded.setDescription('Indicates if a LTM was forwarded by the responding MP.')
pvxEcfmLtrTerminalMep = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrTerminalMep.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrTerminalMep.setDescription('A boolean value stating whether the forwarded LTM reached a MEP enclosing its ME. ')
pvxEcfmLtrRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 9), PvxEcfmRelayActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrRelayAction.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrRelayAction.setDescription('Value returned in the Relay Action field.')
pvxEcfmLtrSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrSwitchName.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrSwitchName.setDescription("The switch name of the MEP. It is set by the system as PVX-x where 'x' is the switch nubmer.")
pvxEcfmLtrIngressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 11), PvxEcfmIngressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrIngressAction.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrIngressAction.setDescription('The value returned in the Ingress Action Field of the LTM.')
pvxEcfmLtrIngressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrIngressMac.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrIngressMac.setDescription('MAC address returned in the ingress MAC address field.')
pvxEcfmLtrIngressPortInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrIngressPortInfo.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrIngressPortInfo.setDescription('The port information of the ingress port. It is set by the system as a string of shelfNumber/slotNumber/portType/portNumber.')
pvxEcfmLtrEgressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 14), PvxEcfmEgressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrEgressAction.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrEgressAction.setDescription('The value returned in the Egress Action Field of the LTM.')
pvxEcfmLtrEgressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrEgressMac.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrEgressMac.setDescription('MAC address returned in the egress MAC address field.')
pvxEcfmLtrEgressPortInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxEcfmLtrEgressPortInfo.setStatus('current')
if mibBuilder.loadTexts: pvxEcfmLtrEgressPortInfo.setDescription('The port information of the egress port. It is set by the system as a string of shelfNumber/slotNumber/portType/portNumber.')
pvxSLAThroughputTestTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8), )
if mibBuilder.loadTexts: pvxSLAThroughputTestTable.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestTable.setDescription('This table sets the parameters to setup SLA throughput test and captures the results.')
pvxSLAThroughputTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAThroughputTestRMepId"))
if mibBuilder.loadTexts: pvxSLAThroughputTestEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestEntry.setDescription('The throughput test table entry.')
pvxSLAThroughputTestSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSLAThroughputTestSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Ethernet Service SLA is provisioned.')
pvxSLAThroughputTestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSLAThroughputTestShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestShelfIdx.setDescription('The number of the shelf on which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxSLAThroughputTestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSLAThroughputTestSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestSlotIdx.setDescription('The number of the slot within which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxSLAThroughputTestPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSLAThroughputTestPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestPortTypeIdx.setDescription('The type of PacketVX port on which the Ethernet Service SLA facility is provisioned.')
pvxSLAThroughputTestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxSLAThroughputTestPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestPortIdx.setDescription('The port number of the Ethernet Service SLA.')
pvxSLAThroughputTestESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxSLAThroughputTestESName.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestESName.setDescription('The Ethernet service name.')
pvxSLAThroughputTestRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxSLAThroughputTestRMepId.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestRMepId.setDescription('Remote MEP ID.')
pvxSLAThroughputTestRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 8), SlaTestRole()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestRole.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestRole.setDescription('Set the test role, initiator or responder.')
pvxSLAThroughputTestInitiatorCmdState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 9), CommandStateType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestInitiatorCmdState.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestInitiatorCmdState.setDescription('Set the initiator command state.')
pvxSLAThroughputTestResponderOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("testInProgress", 2), ("rmepNotReady", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestResponderOpState.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestResponderOpState.setDescription('Test responder operational state.')
pvxSLAThroughputTestFrameSize1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1.setDescription('Frame size number 1.')
pvxSLAThroughputTestFrameSize2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2.setDescription('Frame size number 2.')
pvxSLAThroughputTestFrameSize3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3.setDescription('Frame size number 3.')
pvxSLAThroughputTestFrameSize4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4.setDescription('Frame size number 4.')
pvxSLAThroughputTestFrameSize5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5.setDescription('Frame size number 5.')
pvxSLAThroughputTestFrameSize6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6.setDescription('Frame size number 6.')
pvxSLAThroughputTestSrvcPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 17), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestSrvcPolicyName.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestSrvcPolicyName.setDescription('Service policy profile name.')
pvxSLAThroughputTestClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 18), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestClassMapName.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestClassMapName.setDescription('Class map profile name.')
pvxSLAThroughputTestBwProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestBwProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestBwProfileName.setDescription('Bandwidth profile name.')
pvxSLAThroughputTestSVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestSVlanPriority.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestSVlanPriority.setDescription('SLA Throughput test S-Vlan priority.')
pvxSLAThroughputTestCirRateTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 21), CirTestResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestCirRateTestResult.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestCirRateTestResult.setDescription('Test result, pass or fail. Pass means 100% CIR has been met.')
pvxSLAThroughputTestFrameSize1FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1FarEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1FarEndThroughput.setDescription('Frame Size 1 far end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize1NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1NearEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize1NearEndThroughput.setDescription('Frame Size 1 near end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize2FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2FarEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2FarEndThroughput.setDescription('Frame Size 2 far end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize2NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2NearEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize2NearEndThroughput.setDescription('Frame Size 2 near end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize3FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3FarEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3FarEndThroughput.setDescription('Frame Size 3 far end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize3NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3NearEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize3NearEndThroughput.setDescription('Frame Size 3 near end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize4FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4FarEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4FarEndThroughput.setDescription('Frame Size 4 far end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize4NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4NearEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize4NearEndThroughput.setDescription('Frame Size 4 near end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize5FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5FarEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5FarEndThroughput.setDescription('Frame Size 5 far end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize5NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5NearEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize5NearEndThroughput.setDescription('Frame Size 5 near end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize6FarEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6FarEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6FarEndThroughput.setDescription('Frame Size 6 far end throughput result in Mbps.')
pvxSLAThroughputTestFrameSize6NearEndThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6NearEndThroughput.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestFrameSize6NearEndThroughput.setDescription('Frame Size 6 near end throughput result in Mbps.')
pvxSLAThroughputTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 8, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAThroughputTestRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSLAThroughputTestRowStatus.setDescription('The status of the row.')
pvxSLAMsmtInitiatorDBTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9), )
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBTable.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBTable.setDescription('This table sets the SLA measurement Initiator test command state.')
pvxSLAMsmtInitiatorDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtInitiatorDBRMepId"))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBEntry.setDescription('The SLA measurement initiator table entry.')
pvxSLAMsmtInitiatorDBSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Ethernet Service SLA is provisioned.')
pvxSLAMsmtInitiatorDBShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBShelfIdx.setDescription('The number of the shelf on which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxSLAMsmtInitiatorDBSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBSlotIdx.setDescription('The number of the slot within which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxSLAMsmtInitiatorDBPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBPortTypeIdx.setDescription('The type of PacketVX port on which the Ethernet Service SLA facility is provisioned.')
pvxSLAMsmtInitiatorDBPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBPortIdx.setDescription('The port number of the Ethernet Service SLA.')
pvxSLAMsmtInitiatorDBESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBESName.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBESName.setDescription('The Ethernet service name.')
pvxSLAMsmtInitiatorDBRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBRMepId.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBRMepId.setDescription('Remote MEP ID.')
pvxSLAMsmtInitiatorDBCmdState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 8), PmTestCmdState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBCmdState.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBCmdState.setDescription('Set the PM frame loss test command state.')
pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority.setDescription('Set the PM frame delay test s-vlan priority.')
pvxSLAMsmtInitiatorDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtInitiatorDBRowStatus.setDescription('The status of the row.')
pvxSLAMsmtResponderDBTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10), )
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBTable.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBTable.setDescription('This table keeps a record of responder MEP IDs.')
pvxSLAMsmtResponderDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBPortTypeIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBPortIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBESName"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSLAMsmtResponderDBRMepId"))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBEntry.setDescription('The SLA measurement responder table entry.')
pvxSLAMsmtResponderDBSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Ethernet Service SLA is provisioned.')
pvxSLAMsmtResponderDBShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBShelfIdx.setDescription('The number of the shelf on which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxSLAMsmtResponderDBSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBSlotIdx.setDescription('The number of the slot within which the Ethernet Service SLA targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxSLAMsmtResponderDBPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBPortTypeIdx.setDescription('The type of PacketVX port on which the Ethernet Service SLA facility is provisioned.')
pvxSLAMsmtResponderDBPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBPortIdx.setDescription('The port number of the Ethernet Service SLA.')
pvxSLAMsmtResponderDBESName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 6), DisplayString())
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBESName.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBESName.setDescription('The Ethernet service name.')
pvxSLAMsmtResponderDBRMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBRMepId.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBRMepId.setDescription('Remote MEP ID.')
pvxSLAMsmtResponderDBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 2, 21, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxSLAMsmtResponderDBRowStatus.setDescription('The status of the row.')
pvxSwitchCpuRLMonTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26), )
if mibBuilder.loadTexts: pvxSwitchCpuRLMonTable.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonTable.setDescription('This table is used to get cpu-rate-limit statistic of virtual-switch.')
pvxSwitchCpuRLMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1), ).setIndexNames((0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonSwitchIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonShelfIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonSlotIdx"), (0, "PACKET-VX-BRIDGE-MIB", "pvxSwitchCpuRLMonCosIdx"))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonEntry.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonEntry.setDescription('The cpu-rate-limit statistic entry.')
pvxSwitchCpuRLMonSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonSwitchIdx.setDescription('This object represents the particular switch id.')
pvxSwitchCpuRLMonShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonShelfIdx.setDescription('The shelf number.')
pvxSwitchCpuRLMonSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonSlotIdx.setDescription('The slot number.')
pvxSwitchCpuRLMonCosIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosIdx.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosIdx.setDescription('The cos-queue number. Cos 8 represents CFA queue')
pvxSwitchCpuRLMonCosCurrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosCurrDepth.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosCurrDepth.setDescription('Cos current depth.')
pvxSwitchCpuRLMonCosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceived.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceived.setDescription('Cos current received.')
pvxSwitchCpuRLMonCosDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscards.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscards.setDescription('Cos current discards.')
pvxSwitchCpuRLMonCosMinDepth60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMinDepth60Sec.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMinDepth60Sec.setDescription('Cos minimum depth in the past 60 seconds.')
pvxSwitchCpuRLMonCosMaxDepth60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMaxDepth60Sec.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMaxDepth60Sec.setDescription('Cos maximum depth in the past 60 seconds.')
pvxSwitchCpuRLMonCosReceived60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceived60Sec.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceived60Sec.setDescription('Cos received in the past 60 seconds.')
pvxSwitchCpuRLMonCosDiscards60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscards60Sec.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscards60Sec.setDescription('Cos discards in the past 60 seconds.')
pvxSwitchCpuRLMonCosDiscardsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscardsTotal.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosDiscardsTotal.setDescription('Cos total number of discards since last reboot.')
pvxSwitchCpuRLMonCosReceivedRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceivedRateLimit.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosReceivedRateLimit.setDescription('Cos rate limit.')
pvxSwitchCpuRLMonCosMaxAllowedDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMaxAllowedDepth.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosMaxAllowedDepth.setDescription('Cos max allowed depth.')
pvxSwitchCpuRLMonCosHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighWatermark.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighWatermark.setDescription('Cos highwater mark.')
pvxSwitchCpuRLMonCosHighWatermark60Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighWatermark60Sec.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighWatermark60Sec.setDescription('Cos highwater mark in the past 60 seconds.')
pvxSwitchCpuRLMonCosHighestWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 26, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighestWatermark.setStatus('current')
if mibBuilder.loadTexts: pvxSwitchCpuRLMonCosHighestWatermark.setDescription('Cos highest water mark.')
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxVlanPortTable=pvxVlanPortTable, pvxStackingPortOperStatus=pvxStackingPortOperStatus, pvxSwitchCpuRLMonCosDiscards60Sec=pvxSwitchCpuRLMonCosDiscards60Sec, pvxMSTPPortHistPMPMCTimeStamp=pvxMSTPPortHistPMPMCTimeStamp, pvxMSTPPortHistPMBPDUCFGTXValidity=pvxMSTPPortHistPMBPDUCFGTXValidity, pvxSchedProfName=pvxSchedProfName, pvxUNIPortId=pvxUNIPortId, pvxMSTPXstPortTypeIdx=pvxMSTPXstPortTypeIdx, pvxLagGroupTable=pvxLagGroupTable, pvxFMMeterIdx=pvxFMMeterIdx, pvxSchedProfMinBwQ6=pvxSchedProfMinBwQ6, pvxLAGPortCrntPMLACPDUTXValue=pvxLAGPortCrntPMLACPDUTXValue, pvxPolicyMapProfileTable=pvxPolicyMapProfileTable, pvxEServiceSlaHistPMIntervalIdx=pvxEServiceSlaHistPMIntervalIdx, pvxSLAMeasurementProfileTable=pvxSLAMeasurementProfileTable, PvxL2PortList=PvxL2PortList, pvxMSTPPortCrntPMBPDUCFGRXInitialize=pvxMSTPPortCrntPMBPDUCFGRXInitialize, pvxMSTPHistPMNRBCTimeStamp=pvxMSTPHistPMNRBCTimeStamp, pvxEcfmMipRowStatus=pvxEcfmMipRowStatus, pvxLAGPortHistPMINVLACFRRXTimeStamp=pvxLAGPortHistPMINVLACFRRXTimeStamp, pvxNNITable=pvxNNITable, pvxERPSPortHistPMPduTxValue=pvxERPSPortHistPMPduTxValue, pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp=pvxESrvcBWPrflHistPMOctetsCnfExcTimeStamp, pvxERPSPortHistPMMsPduTxTimeStamp=pvxERPSPortHistPMMsPduTxTimeStamp, pvxERPSPortCrntPMEventPduRxValidity=pvxERPSPortCrntPMEventPduRxValidity, pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize=pvxEServiceSlaCrntPM2WayDelayVariationMaximumInitialize, pvxSchedProfMaxBwQ4=pvxSchedProfMaxBwQ4, mstpProtocolMigrationType=mstpProtocolMigrationType, pvxLAGPortCrntPMLACPDURXInitialize=pvxLAGPortCrntPMLACPDURXInitialize, pvxStaticUnicastTable=pvxStaticUnicastTable, pvxSchedProfMinBwQ7=pvxSchedProfMinBwQ7, pvxLagPortTimeout=pvxLagPortTimeout, pvxPriority2TrafficClass=pvxPriority2TrafficClass, pvxERPSPortHistPMSfPduRxValidity=pvxERPSPortHistPMSfPduRxValidity, pvxERPSSrvcNNINeighborPort=pvxERPSSrvcNNINeighborPort, pvxNNIPortTypeId=pvxNNIPortTypeId, pvxBandwidthProfileEntry=pvxBandwidthProfileEntry, pvxSLAThroughputTestFrameSize4=pvxSLAThroughputTestFrameSize4, pvxLagPortMode=pvxLagPortMode, pvxMepListESrvcVlanId=pvxMepListESrvcVlanId, pvxERPSPortCrntPMEventPduRxInitialize=pvxERPSPortCrntPMEventPduRxInitialize, pvxSLAThroughputTestRMepId=pvxSLAThroughputTestRMepId, mstpProtocolMigrationEvt=mstpProtocolMigrationEvt, pvxSLAThroughputTestFrameSize6=pvxSLAThroughputTestFrameSize6, pvxEcfmLtrSwitchIdx=pvxEcfmLtrSwitchIdx, pvxERPSPortHistPMPduTxTimeStamp=pvxERPSPortHistPMPduTxTimeStamp, pvxERPSPortCrntPMNrPduRxTimeStamp=pvxERPSPortCrntPMNrPduRxTimeStamp, pvxUNIMaxFrameSize=pvxUNIMaxFrameSize, pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp=pvxEServiceSlaCrntPM2WayDelayAverageTimeStamp, pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize=pvxEServiceSlaHistPM2WayDelayVariationAverageInitialize, pvxESrvcBWPrflHistPMBDWUtlzValue=pvxESrvcBWPrflHistPMBDWUtlzValue, pvxERPSPortCrntPMMsPduTxValidity=pvxERPSPortCrntPMMsPduTxValidity, pvxPriorityTCMapRowStatus=pvxPriorityTCMapRowStatus, pvxMSTPPortHistPMBPDUTCNRXValidity=pvxMSTPPortHistPMBPDUTCNRXValidity, pvxERPSPortCrntPMPduTxValidity=pvxERPSPortCrntPMPduTxValidity, pvxERPSPortCrntPMFsPduRxInitialize=pvxERPSPortCrntPMFsPduRxInitialize, pvxERPSPortCrntPMEventPduTxValue=pvxERPSPortCrntPMEventPduTxValue, pvxSLAMsmtRowStatus=pvxSLAMsmtRowStatus, pvxESrvcBWPrflHistPMIntervalIdx=pvxESrvcBWPrflHistPMIntervalIdx, pvxERPSPortHistPMPduTxValidity=pvxERPSPortHistPMPduTxValidity, pvxControlFrameProfileTable=pvxControlFrameProfileTable, pvxESrvcBWPrflHistPMOctetsVltValidity=pvxESrvcBWPrflHistPMOctetsVltValidity, pvxMepListRowStatus=pvxMepListRowStatus, pvxClassMapDscpFilter=pvxClassMapDscpFilter, pvxNNIMode=pvxNNIMode, pvxSwitchCpuRLCos5DEPTH=pvxSwitchCpuRLCos5DEPTH, pvxEServiceSlaHistPM2WayDelayMaximumInitialize=pvxEServiceSlaHistPM2WayDelayMaximumInitialize, pvxFDBEntry=pvxFDBEntry, pvxMSTPPortSwitchIdx=pvxMSTPPortSwitchIdx, pvxMSTPMapEntry=pvxMSTPMapEntry, pvxERPSPortCrntPMFailuresInitialize=pvxERPSPortCrntPMFailuresInitialize, pvxERPSPortHistPMTypeIdx=pvxERPSPortHistPMTypeIdx, mstpRegionConfigChangeEvt=mstpRegionConfigChangeEvt, pvxSwitchCpuRLCos2DEPTH=pvxSwitchCpuRLCos2DEPTH, pvxERPSPortHistPMVersionDiscardInitialize=pvxERPSPortHistPMVersionDiscardInitialize, pvxLGMaxLinks=pvxLGMaxLinks, pvxClassMapL4SrcPortFilter=pvxClassMapL4SrcPortFilter, pvxSwitchMemberSlotId=pvxSwitchMemberSlotId, pvxERPSSrvcNNIFlushRemoteMEP=pvxERPSSrvcNNIFlushRemoteMEP, pvxMSTPCrntPMTCCValue=pvxMSTPCrntPMTCCValue, pvxMSTPPortCrntPMINVBPDUTCNRXValidity=pvxMSTPPortCrntPMINVBPDUTCNRXValidity, pvxERPSSrvcRevertMode=pvxERPSSrvcRevertMode, pvxESrvcCrntPMUASInitialize=pvxESrvcCrntPMUASInitialize, PvxPolicyDropAction=PvxPolicyDropAction, pvxVlanPortGvrpFailedRegistrations=pvxVlanPortGvrpFailedRegistrations, pvxMSTPGenIdRevisionLevel=pvxMSTPGenIdRevisionLevel, pvxClassMapSrcIpFilter=pvxClassMapSrcIpFilter, pvxMSTPPortHistPMBPDUTCNTXInitialize=pvxMSTPPortHistPMBPDUTCNTXInitialize, pvxSLAMsmtInitiatorDBRMepId=pvxSLAMsmtInitiatorDBRMepId, pvxBWMeterCir=pvxBWMeterCir, pvxPCPEncPriority1DE=pvxPCPEncPriority1DE, pvxVLANUnTaggedPortList=pvxVLANUnTaggedPortList, pvxFlowClassificationEntry=pvxFlowClassificationEntry, PvxY1731MepDefects=PvxY1731MepDefects, pvxY1731LbStatsAvgLbrsPerResponder=pvxY1731LbStatsAvgLbrsPerResponder, mstpProtocolGeneralEvt=mstpProtocolGeneralEvt, pvxERPSPortCrntPMNrrbPduRxInitialize=pvxERPSPortCrntPMNrrbPduRxInitialize, pvxY1731LbmTransId=pvxY1731LbmTransId, pvxSrvcUNISlotId=pvxSrvcUNISlotId, pvxPCPDecPriority3=pvxPCPDecPriority3, pvxMSTPPortHistPMBPDURXInitialize=pvxMSTPPortHistPMBPDURXInitialize, pvxNNIEntry=pvxNNIEntry, pvxERPSSrvcWaitToBlockTimer=pvxERPSSrvcWaitToBlockTimer, pvxSLAThroughputTestCirRateTestResult=pvxSLAThroughputTestCirRateTestResult, pvxSLAThroughputTestFrameSize5FarEndThroughput=pvxSLAThroughputTestFrameSize5FarEndThroughput, pvxLAGPortHistPMTypeIdx=pvxLAGPortHistPMTypeIdx, pvxVlanPortEthPortAllowedFrametType=pvxVlanPortEthPortAllowedFrametType, pvxERPSPortCrntPMEventPduRxValue=pvxERPSPortCrntPMEventPduRxValue, pvxMSTPPortDesignatedBridge=pvxMSTPPortDesignatedBridge, pvxSvidXlateInternalSVid=pvxSvidXlateInternalSVid, pvxSchedProfMinBwQ5=pvxSchedProfMinBwQ5, pvxEcfmMepErrCcmRMepId=pvxEcfmMepErrCcmRMepId, pvxMSTPPortHistPMINVBPDURXInitialize=pvxMSTPPortHistPMINVBPDURXInitialize, pvxERPSSrvcSVLAN=pvxERPSSrvcSVLAN, pvxY1731LbStatsLbrTimeMax=pvxY1731LbStatsLbrTimeMax, pvxERPSPortHistPMMsPduRxValidity=pvxERPSPortHistPMMsPduRxValidity, pvxSwitchCpuRLCos4DEPTH=pvxSwitchCpuRLCos4DEPTH, pvxFlowClassificationTable=pvxFlowClassificationTable, pvxESrvcCrntPMESrvcNameIdx=pvxESrvcCrntPMESrvcNameIdx, resourceUnavailableClear=resourceUnavailableClear, pvxSLAMsmtResponderDBSwitchIdx=pvxSLAMsmtResponderDBSwitchIdx, pvxERPSPortHistPMPduDiscardInitialize=pvxERPSPortHistPMPduDiscardInitialize, pvxERPSPortHistPMNrPduTxInitialize=pvxERPSPortHistPMNrPduTxInitialize, pvxFMPRowStatus=pvxFMPRowStatus, pvxVLANTable=pvxVLANTable, pvxERPSPortCrntPMSfPduTxValidity=pvxERPSPortCrntPMSfPduTxValidity, pvxMSTPPortCrntPMBPDUTXValidity=pvxMSTPPortCrntPMBPDUTXValidity, pvxMSTPXstBrdgPriority=pvxMSTPXstBrdgPriority, pvxFlowMeterProfileEntry=pvxFlowMeterProfileEntry, pvxERPSPortCrntPMUnblockedValidity=pvxERPSPortCrntPMUnblockedValidity, pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp=pvxEServiceSlaHistPM2WayDelayVariationMinimumTimeStamp, pvxLagPortTypeIdx=pvxLagPortTypeIdx, pvxERPSPortCrntPMSfPduRxInitialize=pvxERPSPortCrntPMSfPduRxInitialize, pvxFloActMirrorType=pvxFloActMirrorType, pvxBWPCir=pvxBWPCir, pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp=pvxEServiceSlaHistPM2WayDelayVariationAverageTimeStamp, pvxEServiceSlaCrntPMFarEndFrameLossInitialize=pvxEServiceSlaCrntPMFarEndFrameLossInitialize, pvxPCPEncPriority0DE=pvxPCPEncPriority0DE, pvxSwitchIdx=pvxSwitchIdx, pvxERPSSrvcVersionMismatchCond=pvxERPSSrvcVersionMismatchCond, pvxEServiceSlaCrntPMTable=pvxEServiceSlaCrntPMTable, pvxFloClSourceUDPorTCPFilter=pvxFloClSourceUDPorTCPFilter, pvxSrvcUNIEgressBWperCos=pvxSrvcUNIEgressBWperCos, pvxMgmtVLANSwitchIdx=pvxMgmtVLANSwitchIdx, pvxMSTPXstPortIdx=pvxMSTPXstPortIdx, pvxPCVRTSVlanId=pvxPCVRTSVlanId, pvxNextFreeIndexTableIndex=pvxNextFreeIndexTableIndex, pvxERPSPortCrntPMBlockedValue=pvxERPSPortCrntPMBlockedValue, pvxClassMapSrcIpNetMaskFilter=pvxClassMapSrcIpNetMaskFilter, pvxBridgeGVRP=pvxBridgeGVRP, pvxEServiceSlaHistPMEntry=pvxEServiceSlaHistPMEntry, pvxEcfmMipPortTypeId=pvxEcfmMipPortTypeId, pvxNNISlotId=pvxNNISlotId, pvxEcfmMepTransmitLtmTargetMepId=pvxEcfmMepTransmitLtmTargetMepId, pvxMSTPXstIdx=pvxMSTPXstIdx, pvxLAGPortCrntPMLACPDUTXInitialize=pvxLAGPortCrntPMLACPDUTXInitialize, pvxMSTPGenCistRootPriority=pvxMSTPGenCistRootPriority, pvxSchedProfMinBwQ3=pvxSchedProfMinBwQ3, pvxEcfmMipSwitchIdx=pvxEcfmMipSwitchIdx, pvxSLAMsmtInitiatorDBSlotIdx=pvxSLAMsmtInitiatorDBSlotIdx, pvxMSTPXstPortEntry=pvxMSTPXstPortEntry, pvxERPSPortHistPMBlockedValue=pvxERPSPortHistPMBlockedValue, pvxSvidXlateTable=pvxSvidXlateTable, pvxMSTPPortRegRoot=pvxMSTPPortRegRoot, pvxESrvcBWPrflPMThresholdPlcyNameIdx=pvxESrvcBWPrflPMThresholdPlcyNameIdx, pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp=pvxESrvcBWPrflCrntPMOctetsTotalTimeStamp, pvxMgmtVLANRowStatus=pvxMgmtVLANRowStatus, pvxERPSSrvcName=pvxERPSSrvcName, pvxSchedProfAlgorithm=pvxSchedProfAlgorithm, pvxMSTPPortHistPMINVBPDUCFGRXValidity=pvxMSTPPortHistPMINVBPDUCFGRXValidity, pvxERPSPortCrntPMUnblockedValue=pvxERPSPortCrntPMUnblockedValue, pvxEServiceSlaCrntPM2WayDelayMinimumValidity=pvxEServiceSlaCrntPM2WayDelayMinimumValidity, pvxLAGPortCrntPMMRKPDUTXTimeStamp=pvxLAGPortCrntPMMRKPDUTXTimeStamp, pvxUNICPVid=pvxUNICPVid, pvxESrvcBWPrflCrntPMOctetsVltValidity=pvxESrvcBWPrflCrntPMOctetsVltValidity, pvxNextFreeIndexValue=pvxNextFreeIndexValue, pvxSLAMsmtResponderDBRowStatus=pvxSLAMsmtResponderDBRowStatus, pvxERPSPortCrntPMEventPduTxTimeStamp=pvxERPSPortCrntPMEventPduTxTimeStamp, pvxLAGPortHistPMMRKRSPPDUTXInitialize=pvxLAGPortHistPMMRKRSPPDUTXInitialize, pvxVlanPortRestrictedVlanState=pvxVlanPortRestrictedVlanState, pvxEcfmMepDbRMepState=pvxEcfmMepDbRMepState, pvxERPSSrvcRingProperty=pvxERPSSrvcRingProperty, pvxSLAThroughputTestResponderOpState=pvxSLAThroughputTestResponderOpState, pvxMSTPCrntPMTCCValidity=pvxMSTPCrntPMTCCValidity, pvxERPSPortCrntPMMsPduRxValidity=pvxERPSPortCrntPMMsPduRxValidity, pvxERPSPortCrntPMSfPduRxValue=pvxERPSPortCrntPMSfPduRxValue, pvxMSTPPortCrntPMBPDUCFGTXValidity=pvxMSTPPortCrntPMBPDUCFGTXValidity, pvxERPSPortCrntPMFsPduTxValidity=pvxERPSPortCrntPMFsPduTxValidity, pvxSrvcNNISwitchId=pvxSrvcNNISwitchId, pvxESrvcBWPrflHistPMOctetsCnfExcValidity=pvxESrvcBWPrflHistPMOctetsCnfExcValidity, pvxESrvcBWPrflCrntPMBDWUtlzValue=pvxESrvcBWPrflCrntPMBDWUtlzValue, pvxSrvcUNIEFPSDEnabled=pvxSrvcUNIEFPSDEnabled, pvxServiceNNIEntry=pvxServiceNNIEntry, pvxMSTPXstRootPortShelf=pvxMSTPXstRootPortShelf, pvxERPSPortCrntPMNrrbPduTxInitialize=pvxERPSPortCrntPMNrrbPduTxInitialize, pvxMSTPCrntPMEntry=pvxMSTPCrntPMEntry, pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity=pvxEServiceSlaCrntPM2WayDelayVariationMaximumValidity, pvxEcfmLtrTerminalMep=pvxEcfmLtrTerminalMep, pvxDscpClassSelector6=pvxDscpClassSelector6, pvxMSTPGenIdFmtSel=pvxMSTPGenIdFmtSel, pvxSwitchCpuRLCos6DEPTH=pvxSwitchCpuRLCos6DEPTH, pvxERPSPortCrntPMMsPduRxInitialize=pvxERPSPortCrntPMMsPduRxInitialize, pvxERPSPortHistPMSfPduTxValidity=pvxERPSPortHistPMSfPduTxValidity, pvxMSTPCrntPMXstIdx=pvxMSTPCrntPMXstIdx, pvxESrvcBWPrflHistPMESrvcNameIdx=pvxESrvcBWPrflHistPMESrvcNameIdx, pvxERPSPortHistPMNrrbPduTxValue=pvxERPSPortHistPMNrrbPduTxValue, pvxLagSwitchIdx=pvxLagSwitchIdx, pvxEcfmMepLbrOut=pvxEcfmMepLbrOut, pvxTMAPGvrpTunnMacAddr=pvxTMAPGvrpTunnMacAddr, pvxESrvcBWPrflCrntPMIntervalTypeIdx=pvxESrvcBWPrflCrntPMIntervalTypeIdx, pvxPriority7TrafficClass=pvxPriority7TrafficClass, pvxFDBMACAddrIdx=pvxFDBMACAddrIdx, pvxFlowActionsTable=pvxFlowActionsTable, PvxEcfmTransmitStatus=PvxEcfmTransmitStatus, pvxBWPEir=pvxBWPEir, pvxNextFreeIndexEntry=pvxNextFreeIndexEntry, pvxEcfmMipSlotId=pvxEcfmMipSlotId, pvxPCPEncDecProfEntry=pvxPCPEncDecProfEntry, pvxMSTPPortCrntPMEntry=pvxMSTPPortCrntPMEntry, pvxEcfmMepDbLocalMepId=pvxEcfmMepDbLocalMepId, pvxSwitchMemberBackplaneCommState=pvxSwitchMemberBackplaneCommState, pvxFSInProfilePackets=pvxFSInProfilePackets, pvxEcfmMepDirection=pvxEcfmMepDirection, pvxLAGPortHistPMMRKRSPPDUTXValue=pvxLAGPortHistPMMRKRSPPDUTXValue, pvxMSTPGenEntry=pvxMSTPGenEntry, pvxESrvcBWPrflHistPMOctetsTotalValidity=pvxESrvcBWPrflHistPMOctetsTotalValidity, pvxLAGPortCrntPMMRKPDURXValidity=pvxLAGPortCrntPMMRKPDURXValidity, pvxMSTPPortCrntPMBPDUCFGRXTimeStamp=pvxMSTPPortCrntPMBPDUCFGRXTimeStamp, pvxPriorityTCMapEntry=pvxPriorityTCMapEntry, pvxLagPortSlotIdx=pvxLagPortSlotIdx, pvxMSTPXstPortDesigPortId=pvxMSTPXstPortDesigPortId, pvxSchedProfWeightQ4=pvxSchedProfWeightQ4, pvxVlanPortLastBpduOriginChangeEvtNotifications=pvxVlanPortLastBpduOriginChangeEvtNotifications, pvxEServiceSlaCrntPMNearEndFrameLoss=pvxEServiceSlaCrntPMNearEndFrameLoss, pvxSLAThroughputTestFrameSize5NearEndThroughput=pvxSLAThroughputTestFrameSize5NearEndThroughput, pvxFMeterId=pvxFMeterId, pvxPolicyMapPolicyName=pvxPolicyMapPolicyName, pvxERPSPortCrntPMVersionDiscardValue=pvxERPSPortCrntPMVersionDiscardValue, pvxDscpClassSelector1=pvxDscpClassSelector1, pvxUNISwitchId=pvxUNISwitchId, pvxPbCVidRegistrationTableEntry=pvxPbCVidRegistrationTableEntry, pvxMSTPXstPortTable=pvxMSTPXstPortTable, pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp=pvxEServiceSlaCrntPM2WayDelayMinimumTimeStamp, pvxEServiceSlaCrntPM2WayDelayVariationAverage=pvxEServiceSlaCrntPM2WayDelayVariationAverage, pvxMSTPPortCrntPMPMCTimeStamp=pvxMSTPPortCrntPMPMCTimeStamp, pvxERPSPortHistPMNrPduTxValue=pvxERPSPortHistPMNrPduTxValue, pvxERPSPortCrntPMVersionDiscardTimeStamp=pvxERPSPortCrntPMVersionDiscardTimeStamp, pvxEcfmLtrSwitchName=pvxEcfmLtrSwitchName, pvxFloActRedirectToInterfaceIndex=pvxFloActRedirectToInterfaceIndex, pvxEcfmMepDbVlanId=pvxEcfmMepDbVlanId, pvxERPSSrvcNumRingPorts=pvxERPSSrvcNumRingPorts, pvxEServiceSlaHistPM2WayDelayVariationMinimum=pvxEServiceSlaHistPM2WayDelayVariationMinimum, pvxSwitchCpuRLMonCosHighestWatermark=pvxSwitchCpuRLMonCosHighestWatermark, pvxERPSPortHistPMPduTxInitialize=pvxERPSPortHistPMPduTxInitialize)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxMSTPPortCrntPMFWDTRInitialize=pvxMSTPPortCrntPMFWDTRInitialize, pvxMSTPGenMaxHops=pvxMSTPGenMaxHops, pvxEcfmLtrForwarded=pvxEcfmLtrForwarded, pvxFSSwitchIdx=pvxFSSwitchIdx, pvxMSTPPortHistPMBPDUTXValue=pvxMSTPPortHistPMBPDUTXValue, pvxESrvcHistPMESrvcNameIdx=pvxESrvcHistPMESrvcNameIdx, pvxLAGPortHistPMLACPDUTXTimeStamp=pvxLAGPortHistPMLACPDUTXTimeStamp, pvxEcfmLtrTtl=pvxEcfmLtrTtl, pvxESrvcHistPMIntervalIdx=pvxESrvcHistPMIntervalIdx, pvxERPSSrvcNNIProtectionSwitchChangeEvent=pvxERPSSrvcNNIProtectionSwitchChangeEvent, pvxMSTPPortCrntPMSwitchIdx=pvxMSTPPortCrntPMSwitchIdx, pvxEthServiceEntry=pvxEthServiceEntry, pvxStaticMCRowStatus=pvxStaticMCRowStatus, pvxPCPDecPriority0=pvxPCPDecPriority0, pvxEthSrvcSwitchIdx=pvxEthSrvcSwitchIdx, pvxEcfmMepY1731LbmCurrentTransId=pvxEcfmMepY1731LbmCurrentTransId, pvxMSTPGenCistRoot=pvxMSTPGenCistRoot, pvxMSTPHistPMRCCCInitialize=pvxMSTPHistPMRCCCInitialize, pvxEServiceSlaCrntPMNearEndFrameLossInitialize=pvxEServiceSlaCrntPMNearEndFrameLossInitialize, pvxY1731LbStatsLbrIn=pvxY1731LbStatsLbrIn, pvxMSTPPortHistPMPMCValue=pvxMSTPPortHistPMPMCValue, pvxFSFlowId=pvxFSFlowId, pvxSLAMsmtInitiatorDBShelfIdx=pvxSLAMsmtInitiatorDBShelfIdx, pvxEServiceSlaHistPMShelfIdx=pvxEServiceSlaHistPMShelfIdx, PvxL2Port=PvxL2Port, pvxSwitchCpuRLMonCosMaxDepth60Sec=pvxSwitchCpuRLMonCosMaxDepth60Sec, pvxERPSPortCrntPMMsPduRxTimeStamp=pvxERPSPortCrntPMMsPduRxTimeStamp, pvxEServiceSlaHistPMNearEndFrameLossTimeStamp=pvxEServiceSlaHistPMNearEndFrameLossTimeStamp, pvxSLAThroughputTestFrameSize6NearEndThroughput=pvxSLAThroughputTestFrameSize6NearEndThroughput, pvxSwitchMemberIdx=pvxSwitchMemberIdx, pvxERPSPortHistPMEventPduRxValue=pvxERPSPortHistPMEventPduRxValue, PYSNMP_MODULE_ID=packetVxBridgeMib, pvxEServiceSlaCrntPMPortTypeIdx=pvxEServiceSlaCrntPMPortTypeIdx, pvxERPSPortCrntPMSfPduTxTimeStamp=pvxERPSPortCrntPMSfPduTxTimeStamp, pvxFloActGreenAction=pvxFloActGreenAction, pvxERPSServiceTable=pvxERPSServiceTable, pvxEthSrvcMECciInterval=pvxEthSrvcMECciInterval, pvxMepListSwitchIdx=pvxMepListSwitchIdx, pvxESrvcBWPrflHistPMOctetsTotalInitialize=pvxESrvcBWPrflHistPMOctetsTotalInitialize, pvxEcfmMepDbSwitchIdx=pvxEcfmMepDbSwitchIdx, pvxERPSPortCrntPMSfPduTxInitialize=pvxERPSPortCrntPMSfPduTxInitialize, pvxERPSPortHistPMBlockedInitialize=pvxERPSPortHistPMBlockedInitialize, pvxVLANIdx=pvxVLANIdx, pvxSrvcUNIRowStatus=pvxSrvcUNIRowStatus, pvxMepListTable=pvxMepListTable, pvxFlowStatsEntry=pvxFlowStatsEntry, pvxERPSPortHistPMBlockedValidity=pvxERPSPortHistPMBlockedValidity, pvxPriority4TrafficClass=pvxPriority4TrafficClass, pvxERPSSrvcWTRRemaining=pvxERPSSrvcWTRRemaining, pvxMSTPPortLoopGuardState=pvxMSTPPortLoopGuardState, pvxFMPMeterType=pvxFMPMeterType, pvxEServiceSlaCrntPMESName=pvxEServiceSlaCrntPMESName, pvxERPSSrvcRingSemStateChangeEvent=pvxERPSSrvcRingSemStateChangeEvent, pvxSwitchCpuRLCos7BURST=pvxSwitchCpuRLCos7BURST, pvxPCPDecPriority7=pvxPCPDecPriority7, pvxLGActivePortCount=pvxLGActivePortCount, pvxERPSSrvcMultipleFailure=pvxERPSSrvcMultipleFailure, pvxEcfmMepTransmitLtmResultOK=pvxEcfmMepTransmitLtmResultOK, pvxSLAMsmtResponderDBSlotIdx=pvxSLAMsmtResponderDBSlotIdx, pvxEServiceSlaCrntPM2WayDelayMaximum=pvxEServiceSlaCrntPM2WayDelayMaximum, pvxSLAThroughputTestClassMapName=pvxSLAThroughputTestClassMapName, pvxERPSPortHistPMSwitchIdx=pvxERPSPortHistPMSwitchIdx, pvxMSTPHistPMTable=pvxMSTPHistPMTable, pvxSLAMsmtInitiatorDBRowStatus=pvxSLAMsmtInitiatorDBRowStatus, pvxSwitchMemberStackingState=pvxSwitchMemberStackingState, pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity=pvxEServiceSlaCrntPM2WayDelayVariationAverageValidity, pvxClassMapProfileTable=pvxClassMapProfileTable, pvxERPSPortCrntPMPduTxInitialize=pvxERPSPortCrntPMPduTxInitialize, pvxSchedProfWeightQ2=pvxSchedProfWeightQ2, pvxVlanCurrentVlanIdx=pvxVlanCurrentVlanIdx, pvxMgmtVLANEntry=pvxMgmtVLANEntry, pvxLAGPortHistPMINVLACFRRXValidity=pvxLAGPortHistPMINVLACFRRXValidity, pvxMSTPPortHistPMBPDUCFGRXValue=pvxMSTPPortHistPMBPDUCFGRXValue, pvxMSTPMapRowStatus=pvxMSTPMapRowStatus, pvxCPIdx=pvxCPIdx, pvxStaticUnicastIntfIdList=pvxStaticUnicastIntfIdList, pvxSwitchCpuRLMonCosMaxAllowedDepth=pvxSwitchCpuRLMonCosMaxAllowedDepth, pvxSLAThroughputTestFrameSize3=pvxSLAThroughputTestFrameSize3, pvxPCPEncPriority3=pvxPCPEncPriority3, pvxSLAThroughputTestEntry=pvxSLAThroughputTestEntry, pvxSchedulerProfileTable=pvxSchedulerProfileTable, pvxMSTPCrntPMRCCCTimeStamp=pvxMSTPCrntPMRCCCTimeStamp, pvxERPSPortHistPMNrrbPduRxInitialize=pvxERPSPortHistPMNrrbPduRxInitialize, pvxERPSPortCrntPMBlockedInitialize=pvxERPSPortCrntPMBlockedInitialize, pvxMSTPPortCrntPMIdx=pvxMSTPPortCrntPMIdx, pvxERPSPortCrntPMPduTxValue=pvxERPSPortCrntPMPduTxValue, pvxSLAThroughputTestFrameSize1=pvxSLAThroughputTestFrameSize1, pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp=pvxLAGPortCrntPMMRKRSPPDUTXTimeStamp, pvxSLAThroughputTestInitiatorCmdState=pvxSLAThroughputTestInitiatorCmdState, pvxMSTPHistPMEntry=pvxMSTPHistPMEntry, mstpPacketErrValue=mstpPacketErrValue, pvxPCVRTCVlanIdFrom=pvxPCVRTCVlanIdFrom, pvxSrvcUNIEgressBW=pvxSrvcUNIEgressBW, pvxESrvcCrntPMUASValidity=pvxESrvcCrntPMUASValidity, pvxMSTPPortHistPMBPDUTXTimeStamp=pvxMSTPPortHistPMBPDUTXTimeStamp, pvxDscpClassSelector4=pvxDscpClassSelector4, pvxMSTPPortCrntPMBPDURXTimeStamp=pvxMSTPPortCrntPMBPDURXTimeStamp, pvxEServiceSlaCrntPMEntry=pvxEServiceSlaCrntPMEntry, pvxERPSSrvcUpMegLevel=pvxERPSSrvcUpMegLevel, pvxERPSPortHistPMNrPduRxTimeStamp=pvxERPSPortHistPMNrPduRxTimeStamp, pvxEthServiceTable=pvxEthServiceTable, pvxLGDataRate=pvxLGDataRate, pvxFloActIdx=pvxFloActIdx, pvxERPSPortCrntPMFsPduRxValue=pvxERPSPortCrntPMFsPduRxValue, pvxEServiceSlaCrntPM2WayDelayMaximumInitialize=pvxEServiceSlaCrntPM2WayDelayMaximumInitialize, pvxMSTPPortDesignatedRoot=pvxMSTPPortDesignatedRoot, pvxMSTPPortPathCost=pvxMSTPPortPathCost, pvxClassMapEtherTypeFilter=pvxClassMapEtherTypeFilter, pvxLGIdx=pvxLGIdx, pvxESrvcCrntPMUASValue=pvxESrvcCrntPMUASValue, pvxLagSystemPriority=pvxLagSystemPriority, pvxLAGPortHistPMINVLACFRRXValue=pvxLAGPortHistPMINVLACFRRXValue, pvxSLAMsmtInitiatorDBPortTypeIdx=pvxSLAMsmtInitiatorDBPortTypeIdx, pvxNNIPortId=pvxNNIPortId, pvxESrvcBWPrflCrntPMPortIdx=pvxESrvcBWPrflCrntPMPortIdx, pvxSrvcUNIPortTypeId=pvxSrvcUNIPortTypeId, pvxSrvcUNIIngressBW=pvxSrvcUNIIngressBW, pvxVLANSwitchIdx=pvxVLANSwitchIdx, pvxLAGPortCrntPMINVLACFRRXTimeStamp=pvxLAGPortCrntPMINVLACFRRXTimeStamp, pvxSwitchCpuRLCos0BURST=pvxSwitchCpuRLCos0BURST, pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp=pvxEServiceSlaCrntPM2WayDelayVariationMinimumTimeStamp, pvxFIdx=pvxFIdx, pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity=pvxEServiceSlaHistPM2WayDelayVariationMaximumValidity, pvxTMAPRowStatus=pvxTMAPRowStatus, pvxERPSSrvcPeriodicTimer=pvxERPSSrvcPeriodicTimer, pvxMSTPPortHistPMINVBPDUCFGRXValue=pvxMSTPPortHistPMINVBPDUCFGRXValue, pvxSvidXlateEntry=pvxSvidXlateEntry, mstpTopologyChangeEvt=mstpTopologyChangeEvt, pvxSLAThroughputTestFrameSize4NearEndThroughput=pvxSLAThroughputTestFrameSize4NearEndThroughput, pvxMSTPPortCrntPMShelfIdx=pvxMSTPPortCrntPMShelfIdx, pvxESrvcBWPrflHistPMSlotIdx=pvxESrvcBWPrflHistPMSlotIdx, pvxSwitchCpuRLCos3DEPTH=pvxSwitchCpuRLCos3DEPTH, pvxSLAThroughputTestFrameSize1FarEndThroughput=pvxSLAThroughputTestFrameSize1FarEndThroughput, pvxSwitchCpuRLCos4BURST=pvxSwitchCpuRLCos4BURST, pvxMSTPCrntPMIntervalTypeIdx=pvxMSTPCrntPMIntervalTypeIdx, pvxPCPDecPriority2=pvxPCPDecPriority2, pvxSrvcUNIForwarding=pvxSrvcUNIForwarding, pvxEcfmMepDbTable=pvxEcfmMepDbTable, pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp=pvxEServiceSlaCrntPM2WayDelayMaximumTimeStamp, pvxSwitchCpuRLCos0DEPTH=pvxSwitchCpuRLCos0DEPTH, pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize=pvxEServiceSlaCrntPM2WayDelayVariationAverageInitialize, pvxMSTPPortHistPMBPDUCFGRXTimeStamp=pvxMSTPPortHistPMBPDUCFGRXTimeStamp, pvxSchedProfMinBwQ0=pvxSchedProfMinBwQ0, pvxBWExceedActionChangeDscp=pvxBWExceedActionChangeDscp, pvxDscpExpeditedFwd=pvxDscpExpeditedFwd, pvxMSTPHistPMRCCCValue=pvxMSTPHistPMRCCCValue, pvxDynamicVlanPortTimeMark=pvxDynamicVlanPortTimeMark, pvxLAGPortCrntPMMRKRSPPDUTXValue=pvxLAGPortCrntPMMRKRSPPDUTXValue, pvxUNITable=pvxUNITable, pvxERPSPortCrntPMFsPduRxValidity=pvxERPSPortCrntPMFsPduRxValidity, pvxEcfmMepDbMacAddress=pvxEcfmMepDbMacAddress, pvxLAGPortCrntPMEntry=pvxLAGPortCrntPMEntry, pvxLAGPortHistPMTable=pvxLAGPortHistPMTable, pvxSwitchCpuRLCos3BURST=pvxSwitchCpuRLCos3BURST, pvxCtrlFrmProfileTable=pvxCtrlFrmProfileTable, pvxERPSPortCrntPMPduDiscardValue=pvxERPSPortCrntPMPduDiscardValue, pvxERPSPortCrntPMEntry=pvxERPSPortCrntPMEntry, pvxLAGPortCrntPMMRKRSPPDURXValue=pvxLAGPortCrntPMMRKRSPPDURXValue, pvxEcfmLtrIngressAction=pvxEcfmLtrIngressAction, pvxMSTPCrntPMSwitchIdx=pvxMSTPCrntPMSwitchIdx, pvxPCPEncPriority4DE=pvxPCPEncPriority4DE, pvxMSTPXstPortInstIdx=pvxMSTPXstPortInstIdx, pvxVlanPortIdx=pvxVlanPortIdx, pvxMSTPPortCrntPMFWDTRValidity=pvxMSTPPortCrntPMFWDTRValidity, pvxSwitchClearDynamicFDBEntries=pvxSwitchClearDynamicFDBEntries, pvxMSTPPortRegRootCost=pvxMSTPPortRegRootCost, pvxEServiceSlaCrntPMNearEndFrameLossValidity=pvxEServiceSlaCrntPMNearEndFrameLossValidity, pvxControlFrameProfileLacp=pvxControlFrameProfileLacp, pvxVLANMemberPortList=pvxVLANMemberPortList, pvxMCSwitchIdx=pvxMCSwitchIdx, pvxVLANEntry=pvxVLANEntry, pvxPolicyMapProfileRowStatus=pvxPolicyMapProfileRowStatus, pvxMSTPPortHistPMShelfIdx=pvxMSTPPortHistPMShelfIdx, pvxEcfmMipShelfId=pvxEcfmMipShelfId, cfmRMepStateChangeEvtNotifications=cfmRMepStateChangeEvtNotifications, pvxESrvcBWPrflPMThresholdDirectionIdx=pvxESrvcBWPrflPMThresholdDirectionIdx, pvxMSTPPortHistPMINVBPDUCFGRXInitialize=pvxMSTPPortHistPMINVBPDUCFGRXInitialize, pvxFlowActionsEntry=pvxFlowActionsEntry, pvxMSTPPortCrntPMXstIdx=pvxMSTPPortCrntPMXstIdx, pvxMSTPPortCrntPMBPDUTCNTXInitialize=pvxMSTPPortCrntPMBPDUTCNTXInitialize, pvxBWMeterEbs=pvxBWMeterEbs, pvxEServiceSlaHistPMRMepId=pvxEServiceSlaHistPMRMepId, pvxERPSPortHistPMPduRxValue=pvxERPSPortHistPMPduRxValue, pvxERPSSrvcNNISwitchId=pvxERPSSrvcNNISwitchId, pvxSwitchEvcMEGName=pvxSwitchEvcMEGName, pvxFloClDestUDPorTCPFilter=pvxFloClDestUDPorTCPFilter, pvxERPSPortCrntPMRecoveriesValue=pvxERPSPortCrntPMRecoveriesValue, pvxDynamicVlanPortTable=pvxDynamicVlanPortTable, pvxEthSrvcMaxUNIs=pvxEthSrvcMaxUNIs, pvxERPSPortHistPMFailuresValue=pvxERPSPortHistPMFailuresValue, pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp=pvxEServiceSlaCrntPM2WayDelayVariationAverageTimeStamp, pvxESrvcBWPrflHistPMBDWUtlzTimeStamp=pvxESrvcBWPrflHistPMBDWUtlzTimeStamp, pvxERPSPortHistPMFsPduRxValue=pvxERPSPortHistPMFsPduRxValue, pvxESrvcBWPrflCrntPMOctetsTotalInitialize=pvxESrvcBWPrflCrntPMOctetsTotalInitialize, pvxFSOutOfProfilePackets=pvxFSOutOfProfilePackets, pvxERPSPortCrntPMBlockedValidity=pvxERPSPortCrntPMBlockedValidity, pvxEServiceSlaCrntPMRMepId=pvxEServiceSlaCrntPMRMepId, pvxSwitchCpuRLMonCosMinDepth60Sec=pvxSwitchCpuRLMonCosMinDepth60Sec, pvxERPSPortCrntPMRecoveriesTimeStamp=pvxERPSPortCrntPMRecoveriesTimeStamp, pvxEcfmMepTransmitLtmSeqNumber=pvxEcfmMepTransmitLtmSeqNumber, pvxSLAThroughputTestSwitchIdx=pvxSLAThroughputTestSwitchIdx, pvxLagPortPrtnrAdminState=pvxLagPortPrtnrAdminState, pvxSwitchCpuRLMonSlotIdx=pvxSwitchCpuRLMonSlotIdx, pvxESrvcOperStateChangeEvt=pvxESrvcOperStateChangeEvt, pvxEthSrvcName=pvxEthSrvcName, pvxBridgeServices=pvxBridgeServices, pvxMgmtVLANSrvcName=pvxMgmtVLANSrvcName, pvxMSTPPortHistPMSlotIdx=pvxMSTPPortHistPMSlotIdx, pvxERPSPortCrntPMNrPduTxValue=pvxERPSPortCrntPMNrPduTxValue, pvxERPSPortHistPMSfPduTxTimeStamp=pvxERPSPortHistPMSfPduTxTimeStamp, pvxControlFrameProfileDot1x=pvxControlFrameProfileDot1x, pvxMSTPPortHistPMINVBPDURXValue=pvxMSTPPortHistPMINVBPDURXValue, pvxMSTPPortHistPMTable=pvxMSTPPortHistPMTable, pvxESrvcBWPrflHistPMOctetsCnfExcInitialize=pvxESrvcBWPrflHistPMOctetsCnfExcInitialize, pvxPCVRTUntaggedPEP=pvxPCVRTUntaggedPEP, pvxMSTPPortCrntPMBPDUCFGTXTimeStamp=pvxMSTPPortCrntPMBPDUCFGTXTimeStamp, pvxEcfmMepTransmitLtmStatus=pvxEcfmMepTransmitLtmStatus, pvxSwitchIntfBouncingTimerPeriod=pvxSwitchIntfBouncingTimerPeriod, pvxSwitchMode=pvxSwitchMode, PvxESrvcBWPrflPMThresholdLevelType=PvxESrvcBWPrflPMThresholdLevelType, pvxSwitchStackingTimeAsPrimary=pvxSwitchStackingTimeAsPrimary, pvxClassMapCVlanEndFilter=pvxClassMapCVlanEndFilter, pvxLAGPortCrntPMIdx=pvxLAGPortCrntPMIdx, pvxMSTPPortShelfIdx=pvxMSTPPortShelfIdx, pvxLAGPortCrntPMINVLACFRRXValidity=pvxLAGPortCrntPMINVLACFRRXValidity, PvxCVidMapOperStatus=PvxCVidMapOperStatus, PvxPCPDecodingList=PvxPCPDecodingList, pvxESrvcCrntPMIntervalTypeIdx=pvxESrvcCrntPMIntervalTypeIdx, pvxERPSPortCrntPMFailuresValue=pvxERPSPortCrntPMFailuresValue, pvxERPSPortCrntPMPduRxValidity=pvxERPSPortCrntPMPduRxValidity, pvxLAGPortCrntPMINVLACFRRXInitialize=pvxLAGPortCrntPMINVLACFRRXInitialize, pvxMSTPPortCrntPMINVBPDURXInitialize=pvxMSTPPortCrntPMINVBPDURXInitialize, pvxERPSPortHistPMSfPduTxValue=pvxERPSPortHistPMSfPduTxValue, pvxMSTPXstPortDesigRoot=pvxMSTPXstPortDesigRoot, pvxMSTPPortCrntPMINVBPDUTCNRXValue=pvxMSTPPortCrntPMINVBPDUTCNRXValue, pvxControlFrameProfileLldp=pvxControlFrameProfileLldp, pvxMSTPPortHistPMBPDUTCNTXTimeStamp=pvxMSTPPortHistPMBPDUTCNTXTimeStamp, pvxEServiceSlaHistPMNearEndFrameLossInitialize=pvxEServiceSlaHistPMNearEndFrameLossInitialize, pvxFloClDestMacFilter=pvxFloClDestMacFilter, pvxFMPIdx=pvxFMPIdx, pvxPCPDecPriority6=pvxPCPDecPriority6, pvxMSTPPortCrntPMPMCValidity=pvxMSTPPortCrntPMPMCValidity, pvxMSTPCrntPMRCCCValue=pvxMSTPCrntPMRCCCValue, pvxERPSPortCrntPMFailuresTimeStamp=pvxERPSPortCrntPMFailuresTimeStamp, pvxMgmtVLANTable=pvxMgmtVLANTable, pvxSLAThroughputTestShelfIdx=pvxSLAThroughputTestShelfIdx, pvxSrvcNNIIngressBW=pvxSrvcNNIIngressBW, pvxY1731LbStatsESrvcName=pvxY1731LbStatsESrvcName, pvxFloActCVlanValue=pvxFloActCVlanValue, pvxERPSPortHistPMFsPduTxInitialize=pvxERPSPortHistPMFsPduTxInitialize, pvxMultiCastEntry=pvxMultiCastEntry, pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize=pvxESrvcBWPrflCrntPMOctetsCnfExcInitialize, pvxVlanPortAddDynamicVlanEvt=pvxVlanPortAddDynamicVlanEvt, pvxERPSPortCrntPMNrrbPduRxValue=pvxERPSPortCrntPMNrrbPduRxValue)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize=pvxEServiceSlaHistPM2WayDelayVariationMaximumInitialize, pvxStackingPortEntry=pvxStackingPortEntry, pvxSrvcUNIFilterSequence=pvxSrvcUNIFilterSequence, pvxMSTPCrntPMTCCTimeStamp=pvxMSTPCrntPMTCCTimeStamp, pvxSLAThroughputTestSVlanPriority=pvxSLAThroughputTestSVlanPriority, pvxMSTPPortCrntPMPMCInitialize=pvxMSTPPortCrntPMPMCInitialize, pvxMSTPPortHistPMFWDTRTimeStamp=pvxMSTPPortHistPMFWDTRTimeStamp, pvxSwitchLldpTrapInterval=pvxSwitchLldpTrapInterval, pvxSwitchMemberRowStatus=pvxSwitchMemberRowStatus, pvxEthSrvcFrameSize=pvxEthSrvcFrameSize, pvxFloActSwitchIdx=pvxFloActSwitchIdx, pvxERPSPortHistPMVersionDiscardValidity=pvxERPSPortHistPMVersionDiscardValidity, pvxSchedProfWeightQ6=pvxSchedProfWeightQ6, pvxSwitchCpuRLCos1BURST=pvxSwitchCpuRLCos1BURST, pvxERPSPortHistPMFailuresTimeStamp=pvxERPSPortHistPMFailuresTimeStamp, pvxEthSrvcLockNNIs=pvxEthSrvcLockNNIs, mstpInvalidPacketRcvdEvt=mstpInvalidPacketRcvdEvt, pvxMSTPMapSwitchIdx=pvxMSTPMapSwitchIdx, pvxFloActNewPriority=pvxFloActNewPriority, pvxSLAMsmtResponderDBRMepId=pvxSLAMsmtResponderDBRMepId, pvxESrvcBWPrflCrntPMOctetsVltInitialize=pvxESrvcBWPrflCrntPMOctetsVltInitialize, pvxMSTPGenIdName=pvxMSTPGenIdName, pvxSchedProfMTUQuanta=pvxSchedProfMTUQuanta, pvxMSTPXstPortSlotIdx=pvxMSTPXstPortSlotIdx, pvxSwitchCpuRLCos3PPS=pvxSwitchCpuRLCos3PPS, pvxMSTPPortHistPMPMCValidity=pvxMSTPPortHistPMPMCValidity, pvxEcfmMepTransmitLtmTtl=pvxEcfmMepTransmitLtmTtl, pvxERPSPortHistPMMsPduTxValidity=pvxERPSPortHistPMMsPduTxValidity, pvxPolicyMapBWProfileName=pvxPolicyMapBWProfileName, pvxSwitchCpuRLMonCosDiscards=pvxSwitchCpuRLMonCosDiscards, pvxESrvcCrntPMEntry=pvxESrvcCrntPMEntry, pvxSchedProfRowStatus=pvxSchedProfRowStatus, pvxVlanCurrentTimeMark=pvxVlanCurrentTimeMark, pvxESrvcBWPrflPMThresholdBDWUtlzValue=pvxESrvcBWPrflPMThresholdBDWUtlzValue, pvxERPSPortHistPMEventPduTxValidity=pvxERPSPortHistPMEventPduTxValidity, pvxEServiceSlaCrntPMIntervalTypeIdx=pvxEServiceSlaCrntPMIntervalTypeIdx, pvxERPSSrvcHoldTimer=pvxERPSSrvcHoldTimer, pvxMSTPPortCrntPMBPDURXInitialize=pvxMSTPPortCrntPMBPDURXInitialize, pvxControlFrameProfileRowStatus=pvxControlFrameProfileRowStatus, pvxESrvcBWPrflHistPMPortIdx=pvxESrvcBWPrflHistPMPortIdx, pvxESrvcHistPMEntry=pvxESrvcHistPMEntry, pvxBWPIdx=pvxBWPIdx, pvxERPSPortCrntPMSfPduRxValidity=pvxERPSPortCrntPMSfPduRxValidity, pvxERPSSrvcConfigFailEvent=pvxERPSSrvcConfigFailEvent, pvxSwitchCpuRLCos1PPS=pvxSwitchCpuRLCos1PPS, pvxSwitchEvcMEGLevel=pvxSwitchEvcMEGLevel, pvxNextFreeIndexTable=pvxNextFreeIndexTable, pvxEServiceSlaHistPM2WayDelayMinimumValidity=pvxEServiceSlaHistPM2WayDelayMinimumValidity, pvxNextFreeIndexSwitchIdx=pvxNextFreeIndexSwitchIdx, pvxESrvcBWPrflCrntPMBDWUtlzValidity=pvxESrvcBWPrflCrntPMBDWUtlzValidity, pvxBWProfileTable=pvxBWProfileTable, PvxPhyPort=PvxPhyPort, pvxMSTPPortHistPMFWDTRInitialize=pvxMSTPPortHistPMFWDTRInitialize, pvxSwitchMemberShelfId=pvxSwitchMemberShelfId, pvxERPSPortCrntPMVersionDiscardValidity=pvxERPSPortCrntPMVersionDiscardValidity, pvxFMBWProfileId=pvxFMBWProfileId, pvxNNIShelfId=pvxNNIShelfId, pvxStaticUnicastAddressType=pvxStaticUnicastAddressType, pvxEcfmLtrSeqNumber=pvxEcfmLtrSeqNumber, pvxStaticMCForbiddenIntfIdList=pvxStaticMCForbiddenIntfIdList, pvxClassMapDstIpNetMaskFilter=pvxClassMapDstIpNetMaskFilter, pvxERPSPortCrntPMNrPduTxTimeStamp=pvxERPSPortCrntPMNrPduTxTimeStamp, pvxCPQueueAlgo=pvxCPQueueAlgo, pvxSwitchName=pvxSwitchName, pvxEthSrvcCVidXlate=pvxEthSrvcCVidXlate, pvxLAGPortHistPMMRKPDURXValue=pvxLAGPortHistPMMRKPDURXValue, pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp=pvxMSTPPortCrntPMINVBPDUTCNRXTimeStamp, pvxSlaMeasurementTcaEvt=pvxSlaMeasurementTcaEvt, pvxEcfmLtrIngressMac=pvxEcfmLtrIngressMac, pvxSvidXlateSlotId=pvxSvidXlateSlotId, pvxFloActMirrorToInterfaceIndex=pvxFloActMirrorToInterfaceIndex, pvxNNIRowStatus=pvxNNIRowStatus, pvxControlFrameProfileStp=pvxControlFrameProfileStp, pvxEServiceSlaHistPMPortIdx=pvxEServiceSlaHistPMPortIdx, pvxMSTPPortHistPMBPDURXValue=pvxMSTPPortHistPMBPDURXValue, pvxVLANMSTPId=pvxVLANMSTPId, pvxEthSrvcMECciEnable=pvxEthSrvcMECciEnable, pvxLAGPortCrntPMTable=pvxLAGPortCrntPMTable, pvxLAGPortCrntPMTypeIdx=pvxLAGPortCrntPMTypeIdx, pvxLAGPortCrntPMLACPDUTXValidity=pvxLAGPortCrntPMLACPDUTXValidity, pvxLAGPortHistPMMRKPDURXTimeStamp=pvxLAGPortHistPMMRKPDURXTimeStamp, pvxSLAMeasurementProfileEntry=pvxSLAMeasurementProfileEntry, pvxStaticUnicastReceivePort=pvxStaticUnicastReceivePort, pvxSwitchCpuRLCos6PPS=pvxSwitchCpuRLCos6PPS, pvxERPSSrvcGuardTimer=pvxERPSSrvcGuardTimer, pvxEServiceSlaCrntPM2WayDelayAverage=pvxEServiceSlaCrntPM2WayDelayAverage, pvxEServiceSlaHistPM2WayDelayAverageTimeStamp=pvxEServiceSlaHistPM2WayDelayAverageTimeStamp, pvxERPSPortHistPMSfPduRxInitialize=pvxERPSPortHistPMSfPduRxInitialize, pvxMSTPHistPMIntervalIdx=pvxMSTPHistPMIntervalIdx, pvxERPSPortCrntPMUnblockedTimeStamp=pvxERPSPortCrntPMUnblockedTimeStamp, pvxERPSPortHistPMIntervalIdx=pvxERPSPortHistPMIntervalIdx, pvxSwitchCpuRLMonCosIdx=pvxSwitchCpuRLMonCosIdx, pvxESrvcBWPrflHistPMShelfIdx=pvxESrvcBWPrflHistPMShelfIdx, pvxMSTPPortIdx=pvxMSTPPortIdx, pvxEcfmMepTable=pvxEcfmMepTable, pvxLAGPortHistPMLACPDURXInitialize=pvxLAGPortHistPMLACPDURXInitialize, pvxMSTPPortHistPMXstIdx=pvxMSTPPortHistPMXstIdx, pvxDscpPHBProfileEntry=pvxDscpPHBProfileEntry, pvxLagPortWaitTime=pvxLagPortWaitTime, pvxERPSPortCrntPMUnblockedInitialize=pvxERPSPortCrntPMUnblockedInitialize, pvxEcfmMepPortTypeId=pvxEcfmMepPortTypeId, pvxEcfmMepCcmSequenceErr=pvxEcfmMepCcmSequenceErr, pvxLAGPortHistPMLACPDUTXValidity=pvxLAGPortHistPMLACPDUTXValidity, pvxClassMapProfileName=pvxClassMapProfileName, pvxStaticUnicastRowStatus=pvxStaticUnicastRowStatus, pvxERPSSrvcVirtualLink=pvxERPSSrvcVirtualLink, pvxSLAMsmtResponderDBEntry=pvxSLAMsmtResponderDBEntry, pvxEthSrvcMaxNNIs=pvxEthSrvcMaxNNIs, pvxMSTPXstPortState=pvxMSTPXstPortState, pvxTMAPLldpTunnMacAddr=pvxTMAPLldpTunnMacAddr, pvxFSRowStatus=pvxFSRowStatus, pvxStaticMCAddressType=pvxStaticMCAddressType, pvxEthSrvcType=pvxEthSrvcType, pvxSLAThroughputTestFrameSize2=pvxSLAThroughputTestFrameSize2, pvxMSTPPortHistPMBPDURXTimeStamp=pvxMSTPPortHistPMBPDURXTimeStamp, pvxBWMeterEir=pvxBWMeterEir, pvxFlowMeterTable=pvxFlowMeterTable, pvxEcfmMepY1731DefectConditions=pvxEcfmMepY1731DefectConditions, pvxMSTPGenIdDigest=pvxMSTPGenIdDigest, pvxPCPEncDecSelectRow=pvxPCPEncDecSelectRow, pvxSchedProfWeightQ1=pvxSchedProfWeightQ1, pvxMSTPPortCrntPMBPDUTXTimeStamp=pvxMSTPPortCrntPMBPDUTXTimeStamp, pvxMSTPXstRootPortNum=pvxMSTPXstRootPortNum, pvxSchedProfMaxBwQ6=pvxSchedProfMaxBwQ6, pvxFDBPort=pvxFDBPort, pvxERPSPortCrntPMPduDiscardInitialize=pvxERPSPortCrntPMPduDiscardInitialize, pvxLAGPortCrntPMShelfIdx=pvxLAGPortCrntPMShelfIdx, pvxVlanCurrentStatus=pvxVlanCurrentStatus, pvxERPSPortHistPMSfPduRxTimeStamp=pvxERPSPortHistPMSfPduRxTimeStamp, pvxLAGPortCrntPMINVLACFRRXValue=pvxLAGPortCrntPMINVLACFRRXValue, pvxPriority5TrafficClass=pvxPriority5TrafficClass, pvxLAGPortHistPMMRKPDURXValidity=pvxLAGPortHistPMMRKPDURXValidity, pvxESrvcBWPrflPMThresholdTable=pvxESrvcBWPrflPMThresholdTable, pvxVlanPortEntry=pvxVlanPortEntry, pvxTunnelMacAddrProfileTable=pvxTunnelMacAddrProfileTable, pvxMgmtVLANCVLANId=pvxMgmtVLANCVLANId, pvxEthSrvcRowStatus=pvxEthSrvcRowStatus, pvxClassMapIpProtocolFilter=pvxClassMapIpProtocolFilter, pvxTMAPLacpTunnMacAddr=pvxTMAPLacpTunnMacAddr, pvxLAGPortCrntPMMRKPDUTXValue=pvxLAGPortCrntPMMRKPDUTXValue, pvxDscpClassBestEffort=pvxDscpClassBestEffort, pvxMgmtVLANBWProfileName=pvxMgmtVLANBWProfileName, pvxSchedProfMaxBwQ0=pvxSchedProfMaxBwQ0, pvxERPSPortHistPMPduRxInitialize=pvxERPSPortHistPMPduRxInitialize, pvxEcfmMepTransmitLbmResultOK=pvxEcfmMepTransmitLbmResultOK, PvxVLANPortList=PvxVLANPortList, pvxEcfmService=pvxEcfmService, pvxLagPortRowStatus=pvxLagPortRowStatus, pvxERPSServiceEntry=pvxERPSServiceEntry, pvxMgmtVLANIpAddress=pvxMgmtVLANIpAddress, pvxMSTPPortSlotIdx=pvxMSTPPortSlotIdx, pvxLagPortGroupId=pvxLagPortGroupId, pvxLagPortShelfIdx=pvxLagPortShelfIdx, pvxControlFrameProfileEntry=pvxControlFrameProfileEntry, mstpNewRootEvt=mstpNewRootEvt, pvxEcfmMepSlotId=pvxEcfmMepSlotId, pvxMSTPXstBrdgRegRoot=pvxMSTPXstBrdgRegRoot, pvxERPSPortHistPMNrPduTxValidity=pvxERPSPortHistPMNrPduTxValidity, pvxMSTPPortHistPMFWDTRValidity=pvxMSTPPortHistPMFWDTRValidity, pvxFDBTable=pvxFDBTable, pvxERPSPortCrntPMPduRxInitialize=pvxERPSPortCrntPMPduRxInitialize, pvxFlowTable=pvxFlowTable, pvxLagPortActAdminState=pvxLagPortActAdminState, pvxMSTPXstPortPathCost=pvxMSTPXstPortPathCost, pvxEServiceSlaHistPM2WayDelayAverageValidity=pvxEServiceSlaHistPM2WayDelayAverageValidity, pvxEServiceSlaHistPM2WayDelayAverage=pvxEServiceSlaHistPM2WayDelayAverage, pvxStackingPortTable=pvxStackingPortTable, pvxEcfmMepDbRMepIntfStatusDefect=pvxEcfmMepDbRMepIntfStatusDefect, pvxLAGPortCrntPMLACPDURXTimeStamp=pvxLAGPortCrntPMLACPDURXTimeStamp, pvxLAGPortCrntPMMRKRSPPDURXInitialize=pvxLAGPortCrntPMMRKRSPPDURXInitialize, pvxLGSwitchIdx=pvxLGSwitchIdx, switchMemberStkPortDownCond=switchMemberStkPortDownCond, pvxLAGPortHistPMINVLACFRRXInitialize=pvxLAGPortHistPMINVLACFRRXInitialize, pvxESrvcBWPrflHistPMClsMapNameIdx=pvxESrvcBWPrflHistPMClsMapNameIdx, pvxERPSPortCrntPMNrrbPduTxValidity=pvxERPSPortCrntPMNrrbPduTxValidity, pvxLAGPortHistPMMRKPDUTXValue=pvxLAGPortHistPMMRKPDUTXValue, pvxSLAThroughputTestSlotIdx=pvxSLAThroughputTestSlotIdx, pvxStaticMulticastTable=pvxStaticMulticastTable, pvxERPSPortCrntPMVersionDiscardInitialize=pvxERPSPortCrntPMVersionDiscardInitialize, pvxERPSPortHistPMRecoveriesValidity=pvxERPSPortHistPMRecoveriesValidity, pvxMSTPPortRestrictedRole=pvxMSTPPortRestrictedRole, pvxERPSPortCrntPMRecoveriesValidity=pvxERPSPortCrntPMRecoveriesValidity, pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize=pvxEServiceSlaHistPM2WayDelayVariationMinimumInitialize, pvxSwitchCpuRLMonCosReceived60Sec=pvxSwitchCpuRLMonCosReceived60Sec, pvxPbCVidRegistrationTable=pvxPbCVidRegistrationTable, pvxEServiceSlaHistPMPortTypeIdx=pvxEServiceSlaHistPMPortTypeIdx, pvxSwitchCfmDestinationAddress=pvxSwitchCfmDestinationAddress, pvxSwitchCpuRLCos0PPS=pvxSwitchCpuRLCos0PPS, pvxLAGPortHistPMMRKRSPPDUTXValidity=pvxLAGPortHistPMMRKRSPPDUTXValidity, pvxLAGPortHistPMLACPDUTXValue=pvxLAGPortHistPMLACPDUTXValue, pvxSLAMsmtThresholdDelayVarAverage=pvxSLAMsmtThresholdDelayVarAverage, PvxEcfmIngressActionFieldValue=PvxEcfmIngressActionFieldValue, pvxERPSPortCrntPMNrrbPduRxValidity=pvxERPSPortCrntPMNrrbPduRxValidity, pvxFCoSName=pvxFCoSName, pvxERPSPortHistPMShelfIdx=pvxERPSPortHistPMShelfIdx, pvxVlanPortTypeIdx=pvxVlanPortTypeIdx, pvxESrvcBWPrflCrntPMOctetsTotalValue=pvxESrvcBWPrflCrntPMOctetsTotalValue, pvxSLAThroughputTestFrameSize4FarEndThroughput=pvxSLAThroughputTestFrameSize4FarEndThroughput, pvxMSTPPortLinkType=pvxMSTPPortLinkType, pvxERPSSrvcNNIRingProtectLink=pvxERPSSrvcNNIRingProtectLink, pvxEcfmMepUnexpLtrIn=pvxEcfmMepUnexpLtrIn, pvxMgmtVLANAddressType=pvxMgmtVLANAddressType, pvxESrvcHistPMUASValidity=pvxESrvcHistPMUASValidity, pvxMSTPPortCrntPMBPDUCFGRXValidity=pvxMSTPPortCrntPMBPDUCFGRXValidity, pvxY1731LbStatsLbrTimeMin=pvxY1731LbStatsLbrTimeMin, pvxEcfmMepLbrIn=pvxEcfmMepLbrIn, pvxBWMeterColorAware=pvxBWMeterColorAware, pvxSwitchMemberInstIdx=pvxSwitchMemberInstIdx, pvxUNIRowStatus=pvxUNIRowStatus, pvxPCVRTUntaggedCEP=pvxPCVRTUntaggedCEP, pvxMSTPHistPMIntervalTypeIdx=pvxMSTPHistPMIntervalTypeIdx, pvxESrvcBWPrflHistPMPortTypeIdx=pvxESrvcBWPrflHistPMPortTypeIdx, pvxFDBAddressType=pvxFDBAddressType, pvxPriority3TrafficClass=pvxPriority3TrafficClass, pvxEcfmMepShelfId=pvxEcfmMepShelfId, pvxESrvcBWPrflHistPMOctetsTotalTimeStamp=pvxESrvcBWPrflHistPMOctetsTotalTimeStamp, pvxERPSSrvcNNISlotId=pvxERPSSrvcNNISlotId, pvxESrvcHistPMIntervalTypeIdx=pvxESrvcHistPMIntervalTypeIdx, pvxMSTPXstPortRole=pvxMSTPXstPortRole, pvxBWMeterMode=pvxBWMeterMode, pvxEServiceSlaCrntPM2WayDelayMaximumValidity=pvxEServiceSlaCrntPM2WayDelayMaximumValidity, pvxLAGPortCrntPMMRKPDURXTimeStamp=pvxLAGPortCrntPMMRKPDURXTimeStamp, pvxEServiceSlaHistPM2WayDelayVariationAverage=pvxEServiceSlaHistPM2WayDelayVariationAverage, pvxLAGPortHistPMMRKRSPPDURXValue=pvxLAGPortHistPMMRKRSPPDURXValue, pvxERPSSrvcNNIPortId=pvxERPSSrvcNNIPortId, pvxEServiceSlaHistPMESName=pvxEServiceSlaHistPMESName, pvxLAGPortHistPMMRKRSPPDURXInitialize=pvxLAGPortHistPMMRKRSPPDURXInitialize, pvxLAGPortHistPMMRKRSPPDUTXTimeStamp=pvxLAGPortHistPMMRKRSPPDUTXTimeStamp, pvxPriority6TrafficClass=pvxPriority6TrafficClass, pvxMSTPGenExternalRootCost=pvxMSTPGenExternalRootCost, pvxLAGPortHistPMMRKPDUTXValidity=pvxLAGPortHistPMMRKPDUTXValidity, pvxEcfmMepXconnRMepId=pvxEcfmMepXconnRMepId, pvxSrvcUNIUserDefinedMepId=pvxSrvcUNIUserDefinedMepId, pvxSLAThroughputTestFrameSize2NearEndThroughput=pvxSLAThroughputTestFrameSize2NearEndThroughput, pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp=pvxMSTPPortHistPMINVBPDUCFGRXTimeStamp, pvxVlanPortLastBpduOrigin=pvxVlanPortLastBpduOrigin, pvxFloClSwitchIdx=pvxFloClSwitchIdx, pvxEcfmMepDbRMepSwitchName=pvxEcfmMepDbRMepSwitchName, pvxMSTPXstPortDesigCost=pvxMSTPXstPortDesigCost, pvxUNIPortTypeId=pvxUNIPortTypeId, pvxSLAMsmtInitiatorDBSwitchIdx=pvxSLAMsmtInitiatorDBSwitchIdx, pvxClassMapSrcMACMaskFilter=pvxClassMapSrcMACMaskFilter, pvxMSTPPortCrntPMBPDUTXInitialize=pvxMSTPPortCrntPMBPDUTXInitialize, packetVxBridgeMib=packetVxBridgeMib, pvxMSTPPortForcedPortState=pvxMSTPPortForcedPortState, pvxCPMaxBandwidth=pvxCPMaxBandwidth, pvxVlanPortSlotIdx=pvxVlanPortSlotIdx, pvxControlFrameProfileGmrp=pvxControlFrameProfileGmrp, pvxEcfmMipPortId=pvxEcfmMipPortId, pvxMSTPPortCrntPMBPDURXValidity=pvxMSTPPortCrntPMBPDURXValidity, pvxSwitchCpuRLMonCosHighWatermark=pvxSwitchCpuRLMonCosHighWatermark, pvxMSTPHistPMTCCInitialize=pvxMSTPHistPMTCCInitialize, pvxERPSPortHistPMEntry=pvxERPSPortHistPMEntry, pvxSrvcUNIServiceMap=pvxSrvcUNIServiceMap)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxUNICurrentFrameSize=pvxUNICurrentFrameSize, pvxSvidXlatePortTypeId=pvxSvidXlatePortTypeId, pvxMSTPPortHistPMBPDUCFGTXTimeStamp=pvxMSTPPortHistPMBPDUCFGTXTimeStamp, pvxMSTPHistPMTCCValidity=pvxMSTPHistPMTCCValidity, pvxEServiceSlaCrntPM2WayDelayMinimum=pvxEServiceSlaCrntPM2WayDelayMinimum, pvxEServiceSlaCrntPM2WayDelayVariationMaximum=pvxEServiceSlaCrntPM2WayDelayVariationMaximum, pvxClassMapSrcMACAddrFilter=pvxClassMapSrcMACAddrFilter, pvxMSTPXstPortSwitchIdx=pvxMSTPXstPortSwitchIdx, pvxSLAThroughputTestFrameSize6FarEndThroughput=pvxSLAThroughputTestFrameSize6FarEndThroughput, pvxERPSPortHistPMPduRxTimeStamp=pvxERPSPortHistPMPduRxTimeStamp, pvxMSTPPortHistPMBPDUTCNTXValue=pvxMSTPPortHistPMBPDUTCNTXValue, pvxERPSPortCrntPMPortIdx=pvxERPSPortCrntPMPortIdx, pvxERPSPortCrntPMMsPduTxTimeStamp=pvxERPSPortCrntPMMsPduTxTimeStamp, pvxERPSSrvcNNIRingPortStatus=pvxERPSSrvcNNIRingPortStatus, pvxSwitchTunnMacAddrProfile=pvxSwitchTunnMacAddrProfile, pvxEServiceSlaCrntPMFarEndFrameLoss=pvxEServiceSlaCrntPMFarEndFrameLoss, pvxERPSPortCrntPMPduRxValue=pvxERPSPortCrntPMPduRxValue, pvxERPSSrvcVersionMismatchClear=pvxERPSSrvcVersionMismatchClear, pvxSwitchCpuRLCos4PPS=pvxSwitchCpuRLCos4PPS, pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority=pvxSLAMsmtInitiatorDBDelayMsmtSVlanPriority, pvxUNIEntry=pvxUNIEntry, pvxPCPEncPriority4=pvxPCPEncPriority4, pvxSwitchCpuRLCos7DEPTH=pvxSwitchCpuRLCos7DEPTH, mstpGeneralEvtType=mstpGeneralEvtType, pvxEcfmLtrEgressMac=pvxEcfmLtrEgressMac, pvxEServiceSlaCrntPMSlotIdx=pvxEServiceSlaCrntPMSlotIdx, mstpRoleChangeEvt=mstpRoleChangeEvt, pvxEcfmMepOutOfService=pvxEcfmMepOutOfService, PvxEcfmMepDefects=PvxEcfmMepDefects, pvxMSTPGenSwitchIdx=pvxMSTPGenSwitchIdx, pvxMSTPHistPMXstIdx=pvxMSTPHistPMXstIdx, pvxMSTPMapVlanS1k=pvxMSTPMapVlanS1k, pvxFMPColorAware=pvxFMPColorAware, pvxEcfmLtrReceiveOrder=pvxEcfmLtrReceiveOrder, pvxERPSPortHistPMNrPduRxInitialize=pvxERPSPortHistPMNrPduRxInitialize, pvxFMPBWProfileId=pvxFMPBWProfileId, pvxMSTPGenRegionalRoot=pvxMSTPGenRegionalRoot, pvxClassMapDstMACMaskFilter=pvxClassMapDstMACMaskFilter, pvxESrvcBWPrflCrntPMPortTypeIdx=pvxESrvcBWPrflCrntPMPortTypeIdx, PvxQoSPmCounterMode=PvxQoSPmCounterMode, pvxESrvcBWPrflHistPMOctetsCnfExcValue=pvxESrvcBWPrflHistPMOctetsCnfExcValue, pvxSLAMsmtThresholdDelayMaximum=pvxSLAMsmtThresholdDelayMaximum, pvxEcfmMepFlushRMepDb=pvxEcfmMepFlushRMepDb, pvxSvidXlateShelfId=pvxSvidXlateShelfId, pvxSwitchCpuRLCos6BURST=pvxSwitchCpuRLCos6BURST, pvxMgmtVLANNetMask=pvxMgmtVLANNetMask, pvxERPSPortCrntPMNrPduTxValidity=pvxERPSPortCrntPMNrPduTxValidity, pvxSrvcNNIRowStatus=pvxSrvcNNIRowStatus, pvxLAGPortCrntPMMRKPDURXValue=pvxLAGPortCrntPMMRKPDURXValue, pvxStaticMCMACAddrIdx=pvxStaticMCMACAddrIdx, pvxPCPEncDecRowStatus=pvxPCPEncDecRowStatus, pvxERPSPortHistPMPduDiscardValue=pvxERPSPortHistPMPduDiscardValue, pvxERPSPortCrntPMFailuresValidity=pvxERPSPortCrntPMFailuresValidity, mstpPacketErrType=mstpPacketErrType, pvxMSTPPortHistPMPMCInitialize=pvxMSTPPortHistPMPMCInitialize, pvxTMAPName=pvxTMAPName, pvxESrvcBWPrflPMThresholdLevelTypeIdx=pvxESrvcBWPrflPMThresholdLevelTypeIdx, pvxERPSPortHistPMMsPduRxInitialize=pvxERPSPortHistPMMsPduRxInitialize, pvxERPSPortHistPMPortIdx=pvxERPSPortHistPMPortIdx, pvxSLAMsmtInitiatorDBCmdState=pvxSLAMsmtInitiatorDBCmdState, pvxPolicyMapProfileEntry=pvxPolicyMapProfileEntry, pvxVlanPortIngressFiltering=pvxVlanPortIngressFiltering, pvxERPSPortHistPMFsPduTxTimeStamp=pvxERPSPortHistPMFsPduTxTimeStamp, pvxLAGPortCrntPMMRKRSPPDUTXValidity=pvxLAGPortCrntPMMRKRSPPDUTXValidity, pvxBWPCoSQueue=pvxBWPCoSQueue, pvxLagPortEntry=pvxLagPortEntry, pvxSchedProfWeightQ0=pvxSchedProfWeightQ0, pvxControlFrameProfileName=pvxControlFrameProfileName, pvxESrvcHistPMUASInitialize=pvxESrvcHistPMUASInitialize, pvxERPSPortHistPMVersionDiscardTimeStamp=pvxERPSPortHistPMVersionDiscardTimeStamp, pvxEcfmMepLbrInOutOfOrder=pvxEcfmMepLbrInOutOfOrder, pvxSrvcNNIPortId=pvxSrvcNNIPortId, pvxSwitchMIPAutoCreateMEL=pvxSwitchMIPAutoCreateMEL, pvxMSTPCrntPMRCCCValidity=pvxMSTPCrntPMRCCCValidity, pvxPCPEncPriority7DE=pvxPCPEncPriority7DE, pvxEServiceSlaHistPM2WayDelayMaximum=pvxEServiceSlaHistPM2WayDelayMaximum, pvxSwitchCpuRLMonEntry=pvxSwitchCpuRLMonEntry, pvxERPSPortHistPMUnblockedInitialize=pvxERPSPortHistPMUnblockedInitialize, pvxMSTPPortCrntPMINVBPDUCFGRXValidity=pvxMSTPPortCrntPMINVBPDUCFGRXValidity, pvxEServiceSlaCrntPMShelfIdx=pvxEServiceSlaCrntPMShelfIdx, pvxPCVRTRowStatus=pvxPCVRTRowStatus, pvxLAGPortHistPMMRKRSPPDURXTimeStamp=pvxLAGPortHistPMMRKRSPPDURXTimeStamp, pvxESrvcBWPrflCrntPMEntry=pvxESrvcBWPrflCrntPMEntry, pvxSLAMsmtResponderDBPortTypeIdx=pvxSLAMsmtResponderDBPortTypeIdx, pvxMSTPPortCrntPMTypeIdx=pvxMSTPPortCrntPMTypeIdx, pvxEServiceSlaHistPMNearEndFrameLossValidity=pvxEServiceSlaHistPMNearEndFrameLossValidity, pvxEthSrvcTransportType=pvxEthSrvcTransportType, pvxMSTPHistPMNRBCValidity=pvxMSTPHistPMNRBCValidity, pvxFMPStatsEnabled=pvxFMPStatsEnabled, pvxERPSPortHistPMNrrbPduTxTimeStamp=pvxERPSPortHistPMNrrbPduTxTimeStamp, pvxFloClActionId=pvxFloClActionId, pvxSrvcNNISlotId=pvxSrvcNNISlotId, pvxLAGPortHistPMLACPDUTXInitialize=pvxLAGPortHistPMLACPDUTXInitialize, pvxEthSrvcSpanTreeInstance=pvxEthSrvcSpanTreeInstance, pvxLAGPortHistPMMRKRSPPDURXValidity=pvxLAGPortHistPMMRKRSPPDURXValidity, pvxBWSetInternalPriority=pvxBWSetInternalPriority, pvxERPSPortHistPMFsPduTxValue=pvxERPSPortHistPMFsPduTxValue, pvxClassMapProfileRowStatus=pvxClassMapProfileRowStatus, pvxEServiceSlaHistPM2WayDelayVariationMaximum=pvxEServiceSlaHistPM2WayDelayVariationMaximum, pvxESrvcBWPrflHistPMSwitchIdx=pvxESrvcBWPrflHistPMSwitchIdx, pvxERPSPortHistPMNrPduRxValue=pvxERPSPortHistPMNrPduRxValue, pvxVLANService=pvxVLANService, pvxSwitchAgingTimer=pvxSwitchAgingTimer, pvxLAGPortCrntPMLACPDUTXTimeStamp=pvxLAGPortCrntPMLACPDUTXTimeStamp, pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp=pvxMSTPPortCrntPMINVBPDUCFGRXTimeStamp, pvxESrvcHistPMTable=pvxESrvcHistPMTable, pvxMSTPPortHistPMEntry=pvxMSTPPortHistPMEntry, pvxSchedProfMinBwQ1=pvxSchedProfMinBwQ1, pvxMSTPPortRestrictedTCN=pvxMSTPPortRestrictedTCN, pvxEthSrvcSVLAN=pvxEthSrvcSVLAN, pvxLAGPortHistPMSlotIdx=pvxLAGPortHistPMSlotIdx, pvxStaticMCSwitchIdx=pvxStaticMCSwitchIdx, pvxSchedulerProfileEntry=pvxSchedulerProfileEntry, pvxMSTPPortCrntPMBPDUTCNRXValue=pvxMSTPPortCrntPMBPDUTCNRXValue, pvxLAGPortHistPMMRKPDURXInitialize=pvxLAGPortHistPMMRKPDURXInitialize, pvxMSTPXstRootPort=pvxMSTPXstRootPort, pvxERPSPortHistPMFailuresInitialize=pvxERPSPortHistPMFailuresInitialize, pvxESrvcBWPrflPMThresholdSwitchIdx=pvxESrvcBWPrflPMThresholdSwitchIdx, PvxEcfmRelayActionFieldValue=PvxEcfmRelayActionFieldValue, pvxDscpAssuredFwd4y=pvxDscpAssuredFwd4y, pvxERPSPortHistPMNrrbPduRxTimeStamp=pvxERPSPortHistPMNrrbPduRxTimeStamp, pvxMCMACAddrIdx=pvxMCMACAddrIdx, pvxEcfmMepDbEntry=pvxEcfmMepDbEntry, pvxClassMapSVlanPriFilter=pvxClassMapSVlanPriFilter, pvxERPSPortHistPMSfPduTxInitialize=pvxERPSPortHistPMSfPduTxInitialize, pvxERPSSrvcNNIMEName=pvxERPSSrvcNNIMEName, pvxERPSPortHistPMNrrbPduTxInitialize=pvxERPSPortHistPMNrrbPduTxInitialize, pvxEcfmMipTable=pvxEcfmMipTable, pvxMSTPPortCrntPMBPDUTCNTXValue=pvxMSTPPortCrntPMBPDUTCNTXValue, pvxESrvcBWPrflCrntPMClsMapNameIdx=pvxESrvcBWPrflCrntPMClsMapNameIdx, pvxPCPEncPriority2=pvxPCPEncPriority2, pvxVlanCurrentTable=pvxVlanCurrentTable, pvxLGMinLinks=pvxLGMinLinks, pvxERPSPortHistPMFsPduRxInitialize=pvxERPSPortHistPMFsPduRxInitialize, pvxFSCountOfClassifiedPackets=pvxFSCountOfClassifiedPackets, pvxERPSPortHistPMFsPduRxTimeStamp=pvxERPSPortHistPMFsPduRxTimeStamp, pvxY1731LbStatsTotalResponders=pvxY1731LbStatsTotalResponders, pvxEcfmMipActiveState=pvxEcfmMipActiveState, pvxMSTPPortCrntPMFWDTRValue=pvxMSTPPortCrntPMFWDTRValue, pvxSrvcUNIEFPSDLocalEFPSDState=pvxSrvcUNIEFPSDLocalEFPSDState, pvxSwitchInnerEthType=pvxSwitchInnerEthType, pvxERPSPortCrntPMShelfIdx=pvxERPSPortCrntPMShelfIdx, pvxERPSPortCrntPMNrPduTxInitialize=pvxERPSPortCrntPMNrPduTxInitialize, pvxERPSPortHistPMMsPduRxTimeStamp=pvxERPSPortHistPMMsPduRxTimeStamp, pvxMCIntfIdList=pvxMCIntfIdList, pvxSwitchCpuRLMonCosReceived=pvxSwitchCpuRLMonCosReceived, pvxMSTPPortHistPMIdx=pvxMSTPPortHistPMIdx, pvxESrvcBWPrflHistPMOctetsVltValue=pvxESrvcBWPrflHistPMOctetsVltValue, pvxPCPEncPriority7=pvxPCPEncPriority7, pvxBWPRowStatus=pvxBWPRowStatus, pvxY1731LbStatsLbrTimeAverage=pvxY1731LbStatsLbrTimeAverage, pvxSchedProfWeightQ3=pvxSchedProfWeightQ3, pvxESrvcBWPrflCrntPMPlcyNameIdx=pvxESrvcBWPrflCrntPMPlcyNameIdx, pvxLAGPortCrntPMMRKPDUTXValidity=pvxLAGPortCrntPMMRKPDUTXValidity, pvxSchedProfMaxBwQ2=pvxSchedProfMaxBwQ2, pvxMSTPPortHistPMBPDUTCNRXTimeStamp=pvxMSTPPortHistPMBPDUTCNRXTimeStamp, pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp=pvxESrvcBWPrflCrntPMOctetsCnfExcTimeStamp, pvxBandwidthProfileName=pvxBandwidthProfileName, pvxBandwidthProfileTable=pvxBandwidthProfileTable, PvxEcfmConfigErrors=PvxEcfmConfigErrors, pvxMSTPHistPMTCCValue=pvxMSTPHistPMTCCValue, pvxBWCnfrmActionChangeTOSFrmPri=pvxBWCnfrmActionChangeTOSFrmPri, pvxERPSSrvcRingSemState=pvxERPSSrvcRingSemState, pvxSLAMsmtResponderDBPortIdx=pvxSLAMsmtResponderDBPortIdx, pvxNNISpeed=pvxNNISpeed, pvxVlanCurrentSwitchIdx=pvxVlanCurrentSwitchIdx, pvxMSTPPortHistPMBPDUCFGTXValue=pvxMSTPPortHistPMBPDUCFGTXValue, pvxFloActSVlanValue=pvxFloActSVlanValue, pvxStaticMCReceivePort=pvxStaticMCReceivePort, pvxESrvcBWPrflHistPMOctetsVltTimeStamp=pvxESrvcBWPrflHistPMOctetsVltTimeStamp, PvxEcfmRemoteMepState=PvxEcfmRemoteMepState, pvxMSTPPortCrntPMINVBPDURXTimeStamp=pvxMSTPPortCrntPMINVBPDURXTimeStamp, pvxUNIShelfId=pvxUNIShelfId, pvxSLAThroughputTestFrameSize2FarEndThroughput=pvxSLAThroughputTestFrameSize2FarEndThroughput, pvxMepListEntry=pvxMepListEntry, pvxFDBVlanIdx=pvxFDBVlanIdx, pvxEthSrvcNumUNIs=pvxEthSrvcNumUNIs, pvxERPSPortCrntPMNrPduRxValidity=pvxERPSPortCrntPMNrPduRxValidity, pvxSvidXlateSwitchId=pvxSvidXlateSwitchId, pvxUNIMode=pvxUNIMode, pvxVLANAdminState=pvxVLANAdminState, pvxMSTPPortCrntPMINVBPDURXValue=pvxMSTPPortCrntPMINVBPDURXValue, pvxMultiCastGroupTable=pvxMultiCastGroupTable, pvxPCPEncPriority6DE=pvxPCPEncPriority6DE, pvxERPSPortHistPMMsPduTxInitialize=pvxERPSPortHistPMMsPduTxInitialize, pvxPCVRTCVlanIdTo=pvxPCVRTCVlanIdTo, pvxLGAdminStatus=pvxLGAdminStatus, pvxEcfmMepSwitchIdx=pvxEcfmMepSwitchIdx, pvxSLAMsmtInitiatorDBEntry=pvxSLAMsmtInitiatorDBEntry, pvxERPSPortHistPMEventPduRxTimeStamp=pvxERPSPortHistPMEventPduRxTimeStamp, pvxMSTPPortHistPMIntervalTypeIdx=pvxMSTPPortHistPMIntervalTypeIdx, pvxUNIServiceType=pvxUNIServiceType, pvxMSTPPortHistPMBPDUTXValidity=pvxMSTPPortHistPMBPDUTXValidity, pvxFlowStatsTable=pvxFlowStatsTable, pvxERPSSrvcNodeType=pvxERPSSrvcNodeType, pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp=pvxEServiceSlaHistPM2WayDelayMinimumTimeStamp, pvxSwitchCpuRLMonTable=pvxSwitchCpuRLMonTable, pvxSwitchTable=pvxSwitchTable, pvxERPSPortHistPMFsPduTxValidity=pvxERPSPortHistPMFsPduTxValidity, pvxMSTPPortCrntPMBPDUCFGRXValue=pvxMSTPPortCrntPMBPDUCFGRXValue, pvxDscpPHBProfileName=pvxDscpPHBProfileName, pvxLGOperStatus=pvxLGOperStatus, pvxMSTPPortHistPMINVBPDUTCNRXValidity=pvxMSTPPortHistPMINVBPDUTCNRXValidity, pvxMSTPPortCrntPMINVBPDUTCNRXInitialize=pvxMSTPPortCrntPMINVBPDUTCNRXInitialize, pvxVlanCurrentCreationTime=pvxVlanCurrentCreationTime, pvxPCPEncPriority1=pvxPCPEncPriority1, pvxFloClL2InterfaceRange=pvxFloClL2InterfaceRange, pvxERPSPortCrntPMPduRxTimeStamp=pvxERPSPortCrntPMPduRxTimeStamp, pvxMSTPMapVlanS2k=pvxMSTPMapVlanS2k, pvxSLAMsmtProfileName=pvxSLAMsmtProfileName, pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp=pvxESrvcBWPrflCrntPMBDWUtlzTimeStamp, pvxESrvcBWPrflHistPMIntervalTypeIdx=pvxESrvcBWPrflHistPMIntervalTypeIdx, pvxSwitchCpuRLCos1DEPTH=pvxSwitchCpuRLCos1DEPTH, mstpGlobalErrType=mstpGlobalErrType, pvxDscpPHBProfileRowStatus=pvxDscpPHBProfileRowStatus, pvxVLANMacLearning=pvxVLANMacLearning, pvxESrvcBWPrflHistPMTable=pvxESrvcBWPrflHistPMTable, pvxPriorityTCMapName=pvxPriorityTCMapName, pvxSLAMsmtThresholdNearEndLossRatio=pvxSLAMsmtThresholdNearEndLossRatio, pvxClassMapSVlanFilter=pvxClassMapSVlanFilter, pvxLagPortPriority=pvxLagPortPriority, pvxEcfmMipEntry=pvxEcfmMipEntry, pvxESrvcBWPrflCrntPMSwitchIdx=pvxESrvcBWPrflCrntPMSwitchIdx, pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp=pvxEServiceSlaCrntPMFarEndFrameLossTimeStamp, pvxEServiceSlaCrntPM2WayDelayAverageValidity=pvxEServiceSlaCrntPM2WayDelayAverageValidity, pvxMSTPHistPMSwitchIdx=pvxMSTPHistPMSwitchIdx, pvxMSTPPortCrntPMBPDUTCNRXTimeStamp=pvxMSTPPortCrntPMBPDUTCNRXTimeStamp, pvxLGMtuSize=pvxLGMtuSize, pvxESrvcBWPrflHistPMPlcyNameIdx=pvxESrvcBWPrflHistPMPlcyNameIdx, pvxSLAMsmtMonitorPeriod=pvxSLAMsmtMonitorPeriod, pvxSLAThroughputTestPortIdx=pvxSLAThroughputTestPortIdx, pvxEcfmMepDbRMepPortInfo=pvxEcfmMepDbRMepPortInfo, pvxFloClStatus=pvxFloClStatus, pvxEcfmMipMegLevel=pvxEcfmMipMegLevel, pvxFloClRowStatus=pvxFloClRowStatus, pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp=pvxEServiceSlaHistPM2WayDelayVariationMaximumTimeStamp, pvxERPSPortHistPMIntervalTypeIdx=pvxERPSPortHistPMIntervalTypeIdx, pvxStaticMCStaticIntfIdList=pvxStaticMCStaticIntfIdList, pvxERPSPortHistPMSfPduRxValue=pvxERPSPortHistPMSfPduRxValue, pvxFMRowStatus=pvxFMRowStatus, pvxERPSPortCrntPMSwitchIdx=pvxERPSPortCrntPMSwitchIdx, pvxSLAThroughputTestRowStatus=pvxSLAThroughputTestRowStatus, pvxEServiceSlaHistPMFarEndFrameLossValidity=pvxEServiceSlaHistPMFarEndFrameLossValidity, pvxBWPEbs=pvxBWPEbs, pvxBWCnfrmActionChangeDscp=pvxBWCnfrmActionChangeDscp, pvxMSTPPortCrntPMBPDUTXValue=pvxMSTPPortCrntPMBPDUTXValue, pvxLAGPortCrntPMMRKRSPPDUTXInitialize=pvxLAGPortCrntPMMRKRSPPDUTXInitialize, pvxESrvcBWPrflHistPMOctetsTotalValue=pvxESrvcBWPrflHistPMOctetsTotalValue, pvxClassMapMatchType=pvxClassMapMatchType, pvxSchedProfMaxBwQ7=pvxSchedProfMaxBwQ7, pvxERPSPortHistPMNrPduRxValidity=pvxERPSPortHistPMNrPduRxValidity, pvxERPSPortHistPMEventPduTxValue=pvxERPSPortHistPMEventPduTxValue, pvxSwitchCpuRLMonCosDiscardsTotal=pvxSwitchCpuRLMonCosDiscardsTotal, pvxMSTPXstRootPortSlot=pvxMSTPXstRootPortSlot)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxMSTPPortHistPMBPDUCFGRXInitialize=pvxMSTPPortHistPMBPDUCFGRXInitialize, pvxSchedProfWeightQ5=pvxSchedProfWeightQ5, pvxLAGPortHistPMMRKPDUTXInitialize=pvxLAGPortHistPMMRKPDUTXInitialize, pvxERPSPortHistPMMsPduTxValue=pvxERPSPortHistPMMsPduTxValue, pvxMSTPPortCrntPMBPDUTCNRXInitialize=pvxMSTPPortCrntPMBPDUTCNRXInitialize, pvxMSTPPortHistPMIntervalIdx=pvxMSTPPortHistPMIntervalIdx, pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity=pvxEServiceSlaCrntPM2WayDelayVariationMinimumValidity, pvxMSTPHistPMNRBCInitialize=pvxMSTPHistPMNRBCInitialize, pvxEServiceSlaHistPMTable=pvxEServiceSlaHistPMTable, pvxMSTPGenCistRootCost=pvxMSTPGenCistRootCost, pvxERPSPortCrntPMNrrbPduTxTimeStamp=pvxERPSPortCrntPMNrrbPduTxTimeStamp, pvxESrvcBWPrflCrntPMShelfIdx=pvxESrvcBWPrflCrntPMShelfIdx, pvxPCPEncPriority5DE=pvxPCPEncPriority5DE, pvxUNISpeed=pvxUNISpeed, pvxEcfmLtrRelayAction=pvxEcfmLtrRelayAction, pvxLAGPortCrntPMLACPDURXValue=pvxLAGPortCrntPMLACPDURXValue, pvxERPSSrvcPropagateTC=pvxERPSSrvcPropagateTC, pvxLAGPortHistPMIdx=pvxLAGPortHistPMIdx, pvxESrvcHistPMSwitchIdx=pvxESrvcHistPMSwitchIdx, pvxBWExceedActionSetDEI=pvxBWExceedActionSetDEI, pvxEServiceSlaCrntPM2WayDelayAverageInitialize=pvxEServiceSlaCrntPM2WayDelayAverageInitialize, pvxBWMeterCbs=pvxBWMeterCbs, pvxMSTPGenVersionSupported=pvxMSTPGenVersionSupported, pvxEcfmMepDbRMepRDI=pvxEcfmMepDbRMepRDI, pvxSLAMsmtResponderDBTable=pvxSLAMsmtResponderDBTable, pvxSwitchMemberStackingPortCommState=pvxSwitchMemberStackingPortCommState, pvxLAGPortCrntPMSwitchIdx=pvxLAGPortCrntPMSwitchIdx, pvxLAGPortCrntPMMRKRSPPDURXValidity=pvxLAGPortCrntPMMRKRSPPDURXValidity, pvxMSTPPortHistPMBPDUCFGRXValidity=pvxMSTPPortHistPMBPDUCFGRXValidity, pvxERPSSrvcNNILocalMepId=pvxERPSSrvcNNILocalMepId, pvxControlFrameProfileGvrp=pvxControlFrameProfileGvrp, pvxSLAThroughputTestFrameSize3NearEndThroughput=pvxSLAThroughputTestFrameSize3NearEndThroughput, pvxMSTPPortHistPMINVBPDURXTimeStamp=pvxMSTPPortHistPMINVBPDURXTimeStamp, pvxERPSSrvcSubRingWithoutVC=pvxERPSSrvcSubRingWithoutVC, pvxCoSProfileEntry=pvxCoSProfileEntry, pvxFDBRowStatus=pvxFDBRowStatus, pvxSwitchProtocolAdminState=pvxSwitchProtocolAdminState, pvxLAGPortHistPMLACPDURXTimeStamp=pvxLAGPortHistPMLACPDURXTimeStamp, pvxSrvcUNINumCVids=pvxSrvcUNINumCVids, PvxVlanId=PvxVlanId, pvxEcfmMepSentCcms=pvxEcfmMepSentCcms, pvxEcfmMepDbRMepCcmDefect=pvxEcfmMepDbRMepCcmDefect, pvxDscpClassSelector3=pvxDscpClassSelector3, PvxPhyPortList=PvxPhyPortList, pvxVlanPortLastBpduOriginChangeEvt=pvxVlanPortLastBpduOriginChangeEvt, pvxCPWeight=pvxCPWeight, pvxMSTPHistPMRCCCValidity=pvxMSTPHistPMRCCCValidity, pvxServiceUNIEntry=pvxServiceUNIEntry, pvxMSTPXstSwitchIdx=pvxMSTPXstSwitchIdx, pvxClassMapCVlanPriFilter=pvxClassMapCVlanPriFilter, pvxFloActSVlanAction=pvxFloActSVlanAction, pvxESrvcBWPrflHistPMOctetsVltInitialize=pvxESrvcBWPrflHistPMOctetsVltInitialize, pvxEthSrvcState=pvxEthSrvcState, pvxMCVlanIdx=pvxMCVlanIdx, PvxEcfmEgressActionFieldValue=PvxEcfmEgressActionFieldValue, pvxSwitchEntry=pvxSwitchEntry, pvxY1731LbStatsSwitchIdx=pvxY1731LbStatsSwitchIdx, pvxSrvcUNIIngressBWperCos=pvxSrvcUNIIngressBWperCos, pvxFloClSVlanFilter=pvxFloClSVlanFilter, pvxPCPEncPriority3DE=pvxPCPEncPriority3DE, pvxEServiceSlaHistPMFarEndFrameLoss=pvxEServiceSlaHistPMFarEndFrameLoss, pvxMSTPXstTable=pvxMSTPXstTable, pvxMSTPCrntPMNRBCInitialize=pvxMSTPCrntPMNRBCInitialize, pvxSwitchRowStatus=pvxSwitchRowStatus, pvxCPRowStatus=pvxCPRowStatus, pvxLAGPortCrntPMMRKRSPPDURXTimeStamp=pvxLAGPortCrntPMMRKRSPPDURXTimeStamp, pvxERPSPortCrntPMSlotIdx=pvxERPSPortCrntPMSlotIdx, pvxCoSProfileTable=pvxCoSProfileTable, pvxDscpClassSelector5=pvxDscpClassSelector5, pvxERPSPortHistPMUnblockedValue=pvxERPSPortHistPMUnblockedValue, pvxSLAMsmtInitiatorDBESName=pvxSLAMsmtInitiatorDBESName, pvxSwitchMasterNode=pvxSwitchMasterNode, pvxMSTPPortHistPMINVBPDUTCNRXValue=pvxMSTPPortHistPMINVBPDUTCNRXValue, pvxStaticUnicastEntry=pvxStaticUnicastEntry, pvxEcfmMepActive=pvxEcfmMepActive, pvxDscpClassSelector2=pvxDscpClassSelector2, pvxSLAMsmtResponderDBShelfIdx=pvxSLAMsmtResponderDBShelfIdx, pvxEServiceSlaCrntPMPortIdx=pvxEServiceSlaCrntPMPortIdx, pvxERPSSrvcWaitToRestoreTimer=pvxERPSSrvcWaitToRestoreTimer, pvxSrvcNNIPortTypeId=pvxSrvcNNIPortTypeId, pvxBWPCbs=pvxBWPCbs, pvxMSTPCrntPMTCCInitialize=pvxMSTPCrntPMTCCInitialize, pvxFRowStatus=pvxFRowStatus, pvxServiceNNITable=pvxServiceNNITable, pvxSchedProfMaxBwQ1=pvxSchedProfMaxBwQ1, pvxERPSSrvcNNIECFMInfo=pvxERPSSrvcNNIECFMInfo, PvxQoSColorMode=PvxQoSColorMode, pvxMSTPHistPMRCCCTimeStamp=pvxMSTPHistPMRCCCTimeStamp, pvxSLAThroughputTestBwProfileName=pvxSLAThroughputTestBwProfileName, pvxERPSPortHistPMEventPduRxValidity=pvxERPSPortHistPMEventPduRxValidity, pvxSwitchCpuRLMonCosReceivedRateLimit=pvxSwitchCpuRLMonCosReceivedRateLimit, pvxERPSSrvcNNICcmLinkDetection=pvxERPSSrvcNNICcmLinkDetection, pvxERPSPortCrntPMMsPduTxValue=pvxERPSPortCrntPMMsPduTxValue, pvxEcfmLtrEgressAction=pvxEcfmLtrEgressAction, pvxERPSPortHistPMNrrbPduRxValidity=pvxERPSPortHistPMNrrbPduRxValidity, PvxStackingPortCommState=PvxStackingPortCommState, pvxERPSPortHistPMUnblockedValidity=pvxERPSPortHistPMUnblockedValidity, pvxSLAThroughputTestESName=pvxSLAThroughputTestESName, pvxMSTPPortCrntPMINVBPDUCFGRXInitialize=pvxMSTPPortCrntPMINVBPDUCFGRXInitialize, pvxERPSSrvcNNIRingPortId=pvxERPSSrvcNNIRingPortId, pvxPolicyMapClassMapName=pvxPolicyMapClassMapName, pvxEcfmMepDbRMepPortStatusDefect=pvxEcfmMepDbRMepPortStatusDefect, pvxESrvcBWPrflCrntPMOctetsTotalValidity=pvxESrvcBWPrflCrntPMOctetsTotalValidity, pvxERPSSrvcNNIPortTypeId=pvxERPSSrvcNNIPortTypeId, pvxEcfmMepIdentifier=pvxEcfmMepIdentifier, pvxERPSSrvcNNIRemoteMepId=pvxERPSSrvcNNIRemoteMepId, pvxLAGPortHistPMMRKPDUTXTimeStamp=pvxLAGPortHistPMMRKPDUTXTimeStamp, pvxFloActCVlanAction=pvxFloActCVlanAction, pvxBandwidthProfileRowStatus=pvxBandwidthProfileRowStatus, pvxFloClMeterId=pvxFloClMeterId, pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent=pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent, pvxLagRowStatus=pvxLagRowStatus, pvxVlanPortGvrpAdminState=pvxVlanPortGvrpAdminState, pvxSwitchCpuRLCos2PPS=pvxSwitchCpuRLCos2PPS, pvxMSTPGenBrdgId=pvxMSTPGenBrdgId, pvxPCVRTMapOperStatus=pvxPCVRTMapOperStatus, pvxESrvcHistPMUASValue=pvxESrvcHistPMUASValue, pvxSrvcNNIShelfId=pvxSrvcNNIShelfId, pvxEthSrvcExceedMaxUNI=pvxEthSrvcExceedMaxUNI, pvxDscpClassSelector7=pvxDscpClassSelector7, pvxEServiceSlaHistPMNearEndFrameLoss=pvxEServiceSlaHistPMNearEndFrameLoss, pvxDynamicVlanPortVlanIdx=pvxDynamicVlanPortVlanIdx, pvxEcfmMepTransmitLbmCount=pvxEcfmMepTransmitLbmCount, pvxSvidXlatePortId=pvxSvidXlatePortId, pvxFDBSwitchIdx=pvxFDBSwitchIdx, pvxLagPortTable=pvxLagPortTable, pvxDynamicVlanPortTagged=pvxDynamicVlanPortTagged, pvxEcfmMepPortId=pvxEcfmMepPortId, pvxFSStatsIdx=pvxFSStatsIdx, pvxERPSPortHistPMNrrbPduTxValidity=pvxERPSPortHistPMNrrbPduTxValidity, pvxLGDistribution=pvxLGDistribution, pvxLagTable=pvxLagTable, pvxDscpAssuredFwd3y=pvxDscpAssuredFwd3y, pvxMSTPGenCistPriority=pvxMSTPGenCistPriority, pvxSLAThroughputTestFrameSize5=pvxSLAThroughputTestFrameSize5, pvxLGRowStatus=pvxLGRowStatus, pvxPCPDecPriority1=pvxPCPDecPriority1, pvxPCPEncPriority0=pvxPCPEncPriority0, pvxVLANRowStatus=pvxVLANRowStatus, pvxMSTPMapIdx=pvxMSTPMapIdx, pvxSwitchStackingPrimary=pvxSwitchStackingPrimary, switchMemberStkPortDownClear=switchMemberStkPortDownClear, pvxMSTPHistPMTCCTimeStamp=pvxMSTPHistPMTCCTimeStamp, pvxEcfmLtrVlanId=pvxEcfmLtrVlanId, pvxERPSSrvcTimerStartEvent=pvxERPSSrvcTimerStartEvent, pvxERPSPortHistPMSlotIdx=pvxERPSPortHistPMSlotIdx, pvxTunnMacAddrProfileTable=pvxTunnMacAddrProfileTable, pvxMSTPPortCrntPMBPDURXValue=pvxMSTPPortCrntPMBPDURXValue, pvxFloClIdx=pvxFloClIdx, pvxLAGPortHistPMShelfIdx=pvxLAGPortHistPMShelfIdx, pvxMSTPPortCrntPMTable=pvxMSTPPortCrntPMTable, pvxESrvcCrntPMUASTimeStamp=pvxESrvcCrntPMUASTimeStamp, pvxEthSrvcOperState=pvxEthSrvcOperState, pvxEcfmLtrMepIdentifier=pvxEcfmLtrMepIdentifier, pvxFloClEtherTypeFilter=pvxFloClEtherTypeFilter, pvxMSTPPortCrntPMFWDTRTimeStamp=pvxMSTPPortCrntPMFWDTRTimeStamp, cfmRMepStateChangeV2Evt=cfmRMepStateChangeV2Evt, pvxSwitchCpuRLMonShelfIdx=pvxSwitchCpuRLMonShelfIdx, pvxERPSPortCrntPMBlockedTimeStamp=pvxERPSPortCrntPMBlockedTimeStamp, pvxMSTPPortCrntPMINVBPDURXValidity=pvxMSTPPortCrntPMINVBPDURXValidity, pvxEServiceSlaHistPMFarEndFrameLossTimeStamp=pvxEServiceSlaHistPMFarEndFrameLossTimeStamp, pvxVlanPortShelfIdx=pvxVlanPortShelfIdx, pvxMSTPPortPriority=pvxMSTPPortPriority, pvxERPSPortHistPMNrrbPduRxValue=pvxERPSPortHistPMNrrbPduRxValue, pvxMCRowStatus=pvxMCRowStatus, pvxMSTPPortHistPMFWDTRValue=pvxMSTPPortHistPMFWDTRValue, pvxNNIMaxFrameSize=pvxNNIMaxFrameSize, pvxSLAMsmtResponderDBESName=pvxSLAMsmtResponderDBESName, pvxStaticUnicastVlanIdx=pvxStaticUnicastVlanIdx, pvxERPSPortCrntPMEventPduTxValidity=pvxERPSPortCrntPMEventPduTxValidity, pvxFloActChangePriority=pvxFloActChangePriority, pvxMSTPGenTable=pvxMSTPGenTable, pvxBridgeProfiles=pvxBridgeProfiles, pvxEServiceSlaHistPM2WayDelayMinimum=pvxEServiceSlaHistPM2WayDelayMinimum, pvxERPSSrvcRingMonitoring=pvxERPSSrvcRingMonitoring, pvxLAGPortHistPMIntervalTypeIdx=pvxLAGPortHistPMIntervalTypeIdx, pvxFlowMeterProfileTable=pvxFlowMeterProfileTable, pvxDscpPHBProfileTable=pvxDscpPHBProfileTable, pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp=pvxEServiceSlaHistPM2WayDelayMaximumTimeStamp, pvxMSTPPortHistPMBPDUTCNRXValue=pvxMSTPPortHistPMBPDUTCNRXValue, pvxY1731LbStatsEntry=pvxY1731LbStatsEntry, pvxEthSrvcPointedness=pvxEthSrvcPointedness, pvxMSTPXstRootPortType=pvxMSTPXstRootPortType, pvxSwitchLearning=pvxSwitchLearning, pvxESrvcBWPrflHistPMEntry=pvxESrvcBWPrflHistPMEntry, pvxEServiceSlaCrntPMSwitchIdx=pvxEServiceSlaCrntPMSwitchIdx, pvxLAGPortHistPMSwitchIdx=pvxLAGPortHistPMSwitchIdx, pvxLGMacAddress=pvxLGMacAddress, pvxVlanPortRemoveDynamicVlanEvt=pvxVlanPortRemoveDynamicVlanEvt, pvxSwitchMemberEntry=pvxSwitchMemberEntry, pvxMSTPCrntPMRCCCInitialize=pvxMSTPCrntPMRCCCInitialize, pvxERPSSrvcDownMegLevel=pvxERPSSrvcDownMegLevel, pvxEServiceSlaHistPM2WayDelayAverageInitialize=pvxEServiceSlaHistPM2WayDelayAverageInitialize, pvxStaticUnicastMACAddrIdx=pvxStaticUnicastMACAddrIdx, pvxSrvcNNISrvcName=pvxSrvcNNISrvcName, pvxEcfmLtrEntry=pvxEcfmLtrEntry, pvxSLAThroughputTestSrvcPolicyName=pvxSLAThroughputTestSrvcPolicyName, pvxPCPEncPriority5=pvxPCPEncPriority5, pvxMSTPPortTable=pvxMSTPPortTable, pvxERPSPortCrntPMPduDiscardTimeStamp=pvxERPSPortCrntPMPduDiscardTimeStamp, pvxFlowMeterEntry=pvxFlowMeterEntry, pvxERPSSrvcCompatibleVersion=pvxERPSSrvcCompatibleVersion, pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity=pvxEServiceSlaHistPM2WayDelayVariationMinimumValidity, pvxMSTPXstPortShelfIdx=pvxMSTPXstPortShelfIdx, pvxMSTPPortCrntPMINVBPDUCFGRXValue=pvxMSTPPortCrntPMINVBPDUCFGRXValue, pvxSrvcNNIEgressBW=pvxSrvcNNIEgressBW, pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp=pvxEServiceSlaCrntPM2WayDelayVariationMaximumTimeStamp, pvxMSTPXstBrdgRegRootCost=pvxMSTPXstBrdgRegRootCost, pvxSwitchTimeToAge=pvxSwitchTimeToAge, pvxEServiceSlaHistPM2WayDelayMaximumValidity=pvxEServiceSlaHistPM2WayDelayMaximumValidity, pvxFloActGreenCNGAction=pvxFloActGreenCNGAction, pvxESrvcBWPrflCrntPMOctetsVltTimeStamp=pvxESrvcBWPrflCrntPMOctetsVltTimeStamp, pvxERPSPortHistPMPduDiscardValidity=pvxERPSPortHistPMPduDiscardValidity, pvxMSTPPortHistPMBPDUTCNTXValidity=pvxMSTPPortHistPMBPDUTCNTXValidity, pvxSchedProfWeightQ7=pvxSchedProfWeightQ7, pvxESrvcBWPrflPMThresholdESrvcNameIdx=pvxESrvcBWPrflPMThresholdESrvcNameIdx, pvxSwitchCpuRLCos7PPS=pvxSwitchCpuRLCos7PPS, pvxMgmtVLANDebugMode=pvxMgmtVLANDebugMode, pvxESrvcBWPrflCrntPMBDWUtlzInitialize=pvxESrvcBWPrflCrntPMBDWUtlzInitialize, pvxLAGPortHistPMIntervalIdx=pvxLAGPortHistPMIntervalIdx, pvxFloActRedCNGAction=pvxFloActRedCNGAction, pvxEcfmLtrTable=pvxEcfmLtrTable, pvxEcfmMepDefects=pvxEcfmMepDefects, pvxLAGPortCrntPMLACPDURXValidity=pvxLAGPortCrntPMLACPDURXValidity, pvxDynamicVlanPortEntry=pvxDynamicVlanPortEntry, pvxFClassificationIdList=pvxFClassificationIdList, pvxEcfmMepDbRemoteMepId=pvxEcfmMepDbRemoteMepId, pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp=pvxEServiceSlaCrntPMNearEndFrameLossTimeStamp, pvxPCVRTSource=pvxPCVRTSource, resourceUnavailableCond=resourceUnavailableCond, pvxLAGPortHistPMLACPDURXValue=pvxLAGPortHistPMLACPDURXValue, pvxLagPortIdx=pvxLagPortIdx, pvxClassMapDstMACAddrFilter=pvxClassMapDstMACAddrFilter, pvxMSTPPortCrntPMBPDUTCNRXValidity=pvxMSTPPortCrntPMBPDUTCNRXValidity, pvxSwitchMIPAutoCreate=pvxSwitchMIPAutoCreate, pvxPCPEncPriority6=pvxPCPEncPriority6, pvxVlanPortAddDynamicVlanEvtNotifications=pvxVlanPortAddDynamicVlanEvtNotifications, pvxDscpAssuredFwd1y=pvxDscpAssuredFwd1y, pvxESrvcBWPrflPMThresholdEntry=pvxESrvcBWPrflPMThresholdEntry, pvxSrvcUNISrvcName=pvxSrvcUNISrvcName, pvxSchedProfMinBwQ2=pvxSchedProfMinBwQ2, pvxFMSwitchIdx=pvxFMSwitchIdx, pvxEcfmMepEntry=pvxEcfmMepEntry, pvxUNISlotId=pvxUNISlotId, pvxERPSPortCrntPMFsPduTxInitialize=pvxERPSPortCrntPMFsPduTxInitialize, pvxFloActRowStatus=pvxFloActRowStatus, pvxEServiceSlaHistPM2WayDelayMinimumInitialize=pvxEServiceSlaHistPM2WayDelayMinimumInitialize, pvxStaticUnicastSwitchIdx=pvxStaticUnicastSwitchIdx, pvxESrvcHistPMUASTimeStamp=pvxESrvcHistPMUASTimeStamp, pvxFloClEntryType=pvxFloClEntryType, pvxESrvcBWPrflCrntPMSlotIdx=pvxESrvcBWPrflCrntPMSlotIdx, pvxSwitchMirrorFromCpu=pvxSwitchMirrorFromCpu, pvxSrvcUNISwitchId=pvxSrvcUNISwitchId, pvxERPSPortHistPMPduDiscardTimeStamp=pvxERPSPortHistPMPduDiscardTimeStamp)
mibBuilder.exportSymbols("PACKET-VX-BRIDGE-MIB", pvxEcfmMipESrvcVlanId=pvxEcfmMipESrvcVlanId, pvxERPSPortHistPMRecoveriesTimeStamp=pvxERPSPortHistPMRecoveriesTimeStamp, pvxEcfmLtrIngressPortInfo=pvxEcfmLtrIngressPortInfo, pvxFloActYellowAction=pvxFloActYellowAction, pvxERPSPortHistPMVersionDiscardValue=pvxERPSPortHistPMVersionDiscardValue, pvxERPSPortHistPMPduRxValidity=pvxERPSPortHistPMPduRxValidity, pvxFMMeterProfileId=pvxFMMeterProfileId, pvxESrvcCrntPMSwitchIdx=pvxESrvcCrntPMSwitchIdx, pvxERPSPortHistPMTable=pvxERPSPortHistPMTable, pvxLGPortCount=pvxLGPortCount, pvxClassMapL4DstPortFilter=pvxClassMapL4DstPortFilter, pvxMepLocalRemoteFlag=pvxMepLocalRemoteFlag, pvxEServiceSlaCrntPMFarEndFrameLossValidity=pvxEServiceSlaCrntPMFarEndFrameLossValidity, pvxMSTPXstPortForcedPortState=pvxMSTPXstPortForcedPortState, pvxMSTPCrntPMNRBCValue=pvxMSTPCrntPMNRBCValue, pvxERPSPortCrntPMSfPduTxValue=pvxERPSPortCrntPMSfPduTxValue, pvxMSTPMapVlanS4k=pvxMSTPMapVlanS4k, pvxESrvcBWPrflHistPMDirectionIdx=pvxESrvcBWPrflHistPMDirectionIdx, pvxERPSSrvcFOPProvisionMismatchClear=pvxERPSSrvcFOPProvisionMismatchClear, pvxFloClIPProtocolFilter=pvxFloClIPProtocolFilter, pvxSLAMsmtThresholdFarEndLossRatio=pvxSLAMsmtThresholdFarEndLossRatio, pvxMSTPXstPortDesigBridge=pvxMSTPXstPortDesigBridge, pvxSLAMsmtThresholdDelayAverage=pvxSLAMsmtThresholdDelayAverage, pvxBWProfileEntry=pvxBWProfileEntry, pvxERPSSrvcNNIProtectionSwitch=pvxERPSSrvcNNIProtectionSwitch, pvxERPSPortHistPMEventPduTxInitialize=pvxERPSPortHistPMEventPduTxInitialize, pvxERPSPortCrntPMEventPduTxInitialize=pvxERPSPortCrntPMEventPduTxInitialize, pvxEcfmMipESrvcName=pvxEcfmMipESrvcName, pvxSwitchCpuRLCos2BURST=pvxSwitchCpuRLCos2BURST, pvxMSTPPortRole=pvxMSTPPortRole, pvxMSTPPortState=pvxMSTPPortState, pvxSrvcNNIEgressBWperCos=pvxSrvcNNIEgressBWperCos, pvxERPSPortHistPMEventPduRxInitialize=pvxERPSPortHistPMEventPduRxInitialize, pvxMSTPXstRootPortSwitch=pvxMSTPXstRootPortSwitch, pvxERPSSrvcNNINextNeighborPort=pvxERPSSrvcNNINextNeighborPort, lagLinkDownClear=lagLinkDownClear, pvxERPSPortCrntPMFsPduTxTimeStamp=pvxERPSPortCrntPMFsPduTxTimeStamp, pvxERPSPortCrntPMMsPduTxInitialize=pvxERPSPortCrntPMMsPduTxInitialize, pvxERPSPortCrntPMNrPduRxInitialize=pvxERPSPortCrntPMNrPduRxInitialize, pvxMSTPCrntPMNRBCTimeStamp=pvxMSTPCrntPMNRBCTimeStamp, pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp=pvxMSTPPortHistPMINVBPDUTCNRXTimeStamp, pvxSwitchCpuRLMonCosHighWatermark60Sec=pvxSwitchCpuRLMonCosHighWatermark60Sec, pvxLagPortLcapId=pvxLagPortLcapId, pvxMSTPCrntPMTable=pvxMSTPCrntPMTable, pvxClassMapType=pvxClassMapType, pvxLagPortSwitchIdx=pvxLagPortSwitchIdx, pvxSLAThroughputTestPortTypeIdx=pvxSLAThroughputTestPortTypeIdx, pvxTMAPDot1xTunnMacAddr=pvxTMAPDot1xTunnMacAddr, pvxERPSPortCrntPMNrPduRxValue=pvxERPSPortCrntPMNrPduRxValue, pvxVLANForbiddenPortList=pvxVLANForbiddenPortList, pvxMSTPMapTable=pvxMSTPMapTable, pvxERPSPortHistPMBlockedTimeStamp=pvxERPSPortHistPMBlockedTimeStamp, pvxVlanCurrentEntry=pvxVlanCurrentEntry, pvxESrvcCrntPMTable=pvxESrvcCrntPMTable, pvxMSTPXstEntry=pvxMSTPXstEntry, pvxTunnelMacAddrProfileEntry=pvxTunnelMacAddrProfileEntry, pvxESrvcBWPrflHistPMBDWUtlzInitialize=pvxESrvcBWPrflHistPMBDWUtlzInitialize, pvxFloClCVlanFilter=pvxFloClCVlanFilter, pvxStaticMCVlanIdx=pvxStaticMCVlanIdx, pvxEcfmMepAutoGenerateFlag=pvxEcfmMepAutoGenerateFlag, pvxSchedProfMaxBwQ3=pvxSchedProfMaxBwQ3, pvxEcfmMepTransmitLbmDestMepId=pvxEcfmMepTransmitLbmDestMepId, pvxFSwitchIdx=pvxFSwitchIdx, pvxESrvcBWPrflPMThresholdPortIdx=pvxESrvcBWPrflPMThresholdPortIdx, pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize=pvxEServiceSlaCrntPM2WayDelayVariationMinimumInitialize, pvxESrvcBWPrflCrntPMOctetsCnfExcValue=pvxESrvcBWPrflCrntPMOctetsCnfExcValue, pvxMSTPPortHistPMBPDUTCNRXInitialize=pvxMSTPPortHistPMBPDUTCNRXInitialize, pvxSwitchCpuRLCos5PPS=pvxSwitchCpuRLCos5PPS, pvxSLAMsmtInitiatorDBPortIdx=pvxSLAMsmtInitiatorDBPortIdx, pvxSwitchCpuRLMonCosCurrDepth=pvxSwitchCpuRLMonCosCurrDepth, pvxMSTPPortCrntPMPMCValue=pvxMSTPPortCrntPMPMCValue, pvxLGPortList=pvxLGPortList, pvxERPSSrvcNNIShelfId=pvxERPSSrvcNNIShelfId, pvxEServiceSlaHistPMSlotIdx=pvxEServiceSlaHistPMSlotIdx, pvxSLAThroughputTestFrameSize1NearEndThroughput=pvxSLAThroughputTestFrameSize1NearEndThroughput, pvxERPSPortHistPMMsPduRxValue=pvxERPSPortHistPMMsPduRxValue, pvxEcfmMepTransmitLbmStatus=pvxEcfmMepTransmitLbmStatus, pvxERPSServiceNNIEntry=pvxERPSServiceNNIEntry, pvxPCPEncDecProfileName=pvxPCPEncDecProfileName, pvxESrvcBWPrflBDWUtlzTcaEvt=pvxESrvcBWPrflBDWUtlzTcaEvt, pvxVLANOperStatus=pvxVLANOperStatus, PvxErpsVirtualLinkList=PvxErpsVirtualLinkList, pvxVlanPortSwitchIdx=pvxVlanPortSwitchIdx, pvxERPSPortCrntPMPduTxTimeStamp=pvxERPSPortCrntPMPduTxTimeStamp, pvxFloClDestIPFilter=pvxFloClDestIPFilter, pvxERPSPortCrntPMEventPduRxTimeStamp=pvxERPSPortCrntPMEventPduRxTimeStamp, pvxSchedProfMaxBwQ5=pvxSchedProfMaxBwQ5, pvxERPSPortCrntPMNrrbPduRxTimeStamp=pvxERPSPortCrntPMNrrbPduRxTimeStamp, pvxClassMapL4SrcPortEndFilter=pvxClassMapL4SrcPortEndFilter, pvxMSTPPortTypeIdx=pvxMSTPPortTypeIdx, pvxSrvcUNIShelfId=pvxSrvcUNIShelfId, pvxERPSPortCrntPMIntervalTypeIdx=pvxERPSPortCrntPMIntervalTypeIdx, pvxERPSPortCrntPMPduDiscardValidity=pvxERPSPortCrntPMPduDiscardValidity, pvxEServiceSlaCrntPM2WayDelayMinimumInitialize=pvxEServiceSlaCrntPM2WayDelayMinimumInitialize, pvxSwitchErpsVlanPropagate=pvxSwitchErpsVlanPropagate, pvxMSTPPortCrntPMSlotIdx=pvxMSTPPortCrntPMSlotIdx, pvxPCPDecPriority4=pvxPCPDecPriority4, pvxSvidXlateExternalSVid=pvxSvidXlateExternalSVid, pvxMSTPPortHistPMBPDURXValidity=pvxMSTPPortHistPMBPDURXValidity, pvxLAGPortHistPMEntry=pvxLAGPortHistPMEntry, pvxEServiceSlaHistPMFarEndFrameLossInitialize=pvxEServiceSlaHistPMFarEndFrameLossInitialize, pvxPCPEncDecProfileTable=pvxPCPEncDecProfileTable, pvxESrvcBWPrflPMThresholdShelfIdx=pvxESrvcBWPrflPMThresholdShelfIdx, pvxNNISwitchId=pvxNNISwitchId, pvxERPSPortHistPMEventPduTxTimeStamp=pvxERPSPortHistPMEventPduTxTimeStamp, pvxSwitchCpuRLMonSwitchIdx=pvxSwitchCpuRLMonSwitchIdx, pvxESrvcBWPrflCrntPMESrvcNameIdx=pvxESrvcBWPrflCrntPMESrvcNameIdx, pvxEServiceSlaHistPMSwitchIdx=pvxEServiceSlaHistPMSwitchIdx, pvxLAGPortCrntPMMRKPDURXInitialize=pvxLAGPortCrntPMMRKPDURXInitialize, pvxESrvcBWPrflCrntPMDirectionIdx=pvxESrvcBWPrflCrntPMDirectionIdx, pvxMSTPPortHistPMSwitchIdx=pvxMSTPPortHistPMSwitchIdx, pvxESrvcBWPrflCrntPMOctetsCnfExcValidity=pvxESrvcBWPrflCrntPMOctetsCnfExcValidity, pvxESrvcBWPrflPMThresholdPortTypeIdx=pvxESrvcBWPrflPMThresholdPortTypeIdx, pvxLAGPortCrntPMSlotIdx=pvxLAGPortCrntPMSlotIdx, pvxPriorityTCMapTable=pvxPriorityTCMapTable, pvxMSTPPortCrntPMIntervalTypeIdx=pvxMSTPPortCrntPMIntervalTypeIdx, pvxERPSPortHistPMNrPduTxTimeStamp=pvxERPSPortHistPMNrPduTxTimeStamp, pvxERPSPortCrntPMSfPduRxTimeStamp=pvxERPSPortCrntPMSfPduRxTimeStamp, pvxSwitchMemberTable=pvxSwitchMemberTable, pvxClassMapProfileEntry=pvxClassMapProfileEntry, pvxPriority1TrafficClass=pvxPriority1TrafficClass, pvxMSTPPortHistPMINVBPDURXValidity=pvxMSTPPortHistPMINVBPDURXValidity, pvxERPSPortCrntPMFsPduTxValue=pvxERPSPortCrntPMFsPduTxValue, pvxERPSPortCrntPMFsPduRxTimeStamp=pvxERPSPortCrntPMFsPduRxTimeStamp, pvxStaticMulticastEntry=pvxStaticMulticastEntry, pvxSrvcUNISlaMeasurementProfile=pvxSrvcUNISlaMeasurementProfile, pvxMSTPPortHistPMTypeIdx=pvxMSTPPortHistPMTypeIdx, pvxEServiceSlaHistPM2WayDelayVariationAverageValidity=pvxEServiceSlaHistPM2WayDelayVariationAverageValidity, pvxMepSequenceId=pvxMepSequenceId, pvxESrvcBWPrflCrntPMTable=pvxESrvcBWPrflCrntPMTable, pvxY1731LbStatsIdentifier=pvxY1731LbStatsIdentifier, pvxERPSSrvcFOPProvisionMismatchCond=pvxERPSSrvcFOPProvisionMismatchCond, pvxERPSServiceNNITable=pvxERPSServiceNNITable, pvxLAGPortHistPMLACPDURXValidity=pvxLAGPortHistPMLACPDURXValidity, pvxERPSPortHistPMFailuresValidity=pvxERPSPortHistPMFailuresValidity, pvxERPSPortHistPMRecoveriesValue=pvxERPSPortHistPMRecoveriesValue, pvxSLAThroughputTestTable=pvxSLAThroughputTestTable, pvxERPSPortHistPMUnblockedTimeStamp=pvxERPSPortHistPMUnblockedTimeStamp, pvxSrvcUNIPortId=pvxSrvcUNIPortId, pvxMSTPPortCrntPMBPDUTCNTXValidity=pvxMSTPPortCrntPMBPDUTCNTXValidity, pvxSLAMsmtInitiatorDBTable=pvxSLAMsmtInitiatorDBTable, pvxPCVRTXlateOperStatus=pvxPCVRTXlateOperStatus, pvxY1731LbStatsTable=pvxY1731LbStatsTable, pvxDscpAssuredFwd2y=pvxDscpAssuredFwd2y, pvxMSTPCrntPMNRBCValidity=pvxMSTPCrntPMNRBCValidity, pvxSwitchCpuRLCos5BURST=pvxSwitchCpuRLCos5BURST, pvxMSTPPortHistPMBPDUCFGTXInitialize=pvxMSTPPortHistPMBPDUCFGTXInitialize, pvxERPSPortCrntPMNrrbPduTxValue=pvxERPSPortCrntPMNrrbPduTxValue, pvxERPSPortHistPMRecoveriesInitialize=pvxERPSPortHistPMRecoveriesInitialize, pvxEthSrvcNumNNIs=pvxEthSrvcNumNNIs, lagLinkDownCond=lagLinkDownCond, pvxY1731LbStatsLbmOut=pvxY1731LbStatsLbmOut, pvxLAGPortCrntPMIntervalTypeIdx=pvxLAGPortCrntPMIntervalTypeIdx, pvxMSTPPortEntry=pvxMSTPPortEntry, pvxClassMapCVlanFilter=pvxClassMapCVlanFilter, pvxEthSrvcMEName=pvxEthSrvcMEName, pvxERPSPortCrntPMRecoveriesInitialize=pvxERPSPortCrntPMRecoveriesInitialize, pvxLagPortAggState=pvxLagPortAggState, pvxUNINumServices=pvxUNINumServices, pvxERPSPortCrntPMTable=pvxERPSPortCrntPMTable, pvxLagState=pvxLagState, pvxSwitchForceSwitch=pvxSwitchForceSwitch, pvxTMAPStpTunnMacAddr=pvxTMAPStpTunnMacAddr, pvxLAGPortCrntPMMRKPDUTXInitialize=pvxLAGPortCrntPMMRKPDUTXInitialize, pvxESrvcBWPrflHistPMBDWUtlzValidity=pvxESrvcBWPrflHistPMBDWUtlzValidity, pvxSrvcNNIIngressBWperCos=pvxSrvcNNIIngressBWperCos, pvxServiceUNITable=pvxServiceUNITable, pvxEcfmMepESrvcName=pvxEcfmMepESrvcName, pvxMSTPPortHistPMINVBPDUTCNRXInitialize=pvxMSTPPortHistPMINVBPDUTCNRXInitialize, pvxClassMapDstIpFilter=pvxClassMapDstIpFilter, pvxMSTPMapVlanS3k=pvxMSTPMapVlanS3k, pvxSLAThroughputTestFrameSize3FarEndThroughput=pvxSLAThroughputTestFrameSize3FarEndThroughput, pvxClassMapL4DstPortEndFilter=pvxClassMapL4DstPortEndFilter, pvxERPSPortCrntPMMsPduRxValue=pvxERPSPortCrntPMMsPduRxValue, pvxPCPDecPriority5=pvxPCPDecPriority5, pvxERPSPortCrntPMTypeIdx=pvxERPSPortCrntPMTypeIdx, pvxFloClSourceIPFilter=pvxFloClSourceIPFilter, pvxStackingPortRowStatus=pvxStackingPortRowStatus, pvxFloActYellowCNGAction=pvxFloActYellowCNGAction, pvxESrvcBWPrflCrntPMOctetsVltValue=pvxESrvcBWPrflCrntPMOctetsVltValue, pvxCPMinBandwidth=pvxCPMinBandwidth, pvxPCPEncPriority2DE=pvxPCPEncPriority2DE, pvxEServiceSlaHistPMIntervalTypeIdx=pvxEServiceSlaHistPMIntervalTypeIdx, pvxMSTPPortCrntPMBPDUCFGTXInitialize=pvxMSTPPortCrntPMBPDUCFGTXInitialize, pvxESrvcBWPrflPMThresholdSlotIdx=pvxESrvcBWPrflPMThresholdSlotIdx, pvxMSTPPortCrntPMBPDUTCNTXTimeStamp=pvxMSTPPortCrntPMBPDUTCNTXTimeStamp, pvxERPSSrvcRingNodeStatus=pvxERPSSrvcRingNodeStatus, pvxLagGroupEntry=pvxLagGroupEntry, pvxFloClSourceMacFilter=pvxFloClSourceMacFilter, pvxESrvcBWPrflPMThresholdClsMapNameIdx=pvxESrvcBWPrflPMThresholdClsMapNameIdx, pvxEcfmLtrEgressPortInfo=pvxEcfmLtrEgressPortInfo, pvxLagSystemIdentifier=pvxLagSystemIdentifier, pvxTMAPGmrpTunnMacAddr=pvxTMAPGmrpTunnMacAddr, pvxFloActRedAction=pvxFloActRedAction, pvxSLAThroughputTestRole=pvxSLAThroughputTestRole, pvxSLAMsmtThresholdDelayVarMaximum=pvxSLAMsmtThresholdDelayVarMaximum, pvxEcfmMepMacAddress=pvxEcfmMepMacAddress, pvxEServiceSlaCrntPM2WayDelayVariationMinimum=pvxEServiceSlaCrntPM2WayDelayVariationMinimum, pvxClassMapTcpControlFilter=pvxClassMapTcpControlFilter, pvxERPSSrvcNNISrvcName=pvxERPSSrvcNNISrvcName, pvxERPSPortHistPMFsPduRxValidity=pvxERPSPortHistPMFsPduRxValidity, pvxMSTPXstBrdgId=pvxMSTPXstBrdgId, pvxSchedProfMinBwQ4=pvxSchedProfMinBwQ4, pvxFlowEntry=pvxFlowEntry, pvxEcfmMepLbrBadMsdu=pvxEcfmMepLbrBadMsdu, pvxMSTPHistPMNRBCValue=pvxMSTPHistPMNRBCValue, PvxMSTPVlanList=PvxMSTPVlanList, pvxLagEntry=pvxLagEntry, pvxPriority0TrafficClass=pvxPriority0TrafficClass, pvxMSTPXstPortPriority=pvxMSTPXstPortPriority, pvxERPSSrvcProtectionSwitchMode=pvxERPSSrvcProtectionSwitchMode, pvxMSTPPortHistPMBPDUTXInitialize=pvxMSTPPortHistPMBPDUTXInitialize, pvxFloActPacketAction=pvxFloActPacketAction, pvxMepListIdentifier=pvxMepListIdentifier, pvxVlanPortRemoveDynamicVlanEvtNotifications=pvxVlanPortRemoveDynamicVlanEvtNotifications, pvxMSTPPortCrntPMBPDUCFGTXValue=pvxMSTPPortCrntPMBPDUCFGTXValue, pvxMSTPPortDesignatedPort=pvxMSTPPortDesignatedPort, pvxERPSSrvcSwitchIdx=pvxERPSSrvcSwitchIdx)
