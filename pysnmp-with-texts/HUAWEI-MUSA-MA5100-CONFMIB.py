#
# PySNMP MIB module HUAWEI-MUSA-MA5100-CONFMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MUSA-MA5100-CONFMIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
musa, = mibBuilder.importSymbols("HUAWEI-MIB", "musa")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, Bits, Counter64, Integer32, Unsigned32, IpAddress, ModuleIdentity, MibIdentifier, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Bits", "Counter64", "Integer32", "Unsigned32", "IpAddress", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

hwMa5100Mib = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5))
hwMusaSysMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1))
hwMusaEndOfMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 100))
hwMusaSlotGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6))
hwMusaFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 2))
hwMusaSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 3))
hwMusaFrameNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaFrameNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrameNumber.setDescription('Musa frame numbers.')
hwMusaFrameConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 2, 2), )
if mibBuilder.loadTexts: hwMusaFrameConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrameConfTable.setDescription('This table contains Musa Frame configuration parameters.')
hwMusaFrameConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 2, 2, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaShelfIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"))
if mibBuilder.loadTexts: hwMusaFrameConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrameConfEntry.setDescription('This list contains Musa Frame configuration parameters and status variables. MUSA豸.')
hwMusaFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hwMusaFrameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFrameIndex.setDescription('the Musa Frame number. ')
hwMusaSlotConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 3, 2), )
if mibBuilder.loadTexts: hwMusaSlotConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSlotConfTable.setDescription('This table contains Musa slot configuration parameters, one entry per Musa slot.')
hwMusaSlotConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 3, 2, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"))
if mibBuilder.loadTexts: hwMusaSlotConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSlotConfEntry.setDescription('This list contains Musa slot configuration parameters and status variables. MUSA豸λ.')
hwMusaSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hwMusaSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSlotIndex.setDescription('the Musa slot number. λ')
hwMusaRegionPvcConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15), )
if mibBuilder.loadTexts: hwMusaRegionPvcConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaRegionPvcConfTable.setDescription('Musa region pvc configuration table.')
hwMusaRegionPvcConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaVlanId"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaVlanIciIndex"))
if mibBuilder.loadTexts: hwMusaRegionPvcConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaRegionPvcConfEntry.setDescription('This list contains Musa region pvc Configuration parameters and variables.')
hwMusaVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaVlanId.setDescription('Musa region VLan Id. СVLAN ID')
hwMusaVlanIciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaVlanIciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaVlanIciIndex.setDescription('Musa region VLanIciIndex. СVLAN ڲ')
hwMusaAdlFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaAdlFrameId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlFrameId.setDescription('Musa region ADL frame ID. СPVCADL')
hwMusaAdlSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaAdlSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlSlotId.setDescription('Musa region ADL slot ID. СPVCADLۺ')
hwMusaAdlPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaAdlPortId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlPortId.setDescription('Musa region ADL port ID. СPVCADL˿ں')
hwMusaAdlVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaAdlVpi.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlVpi.setDescription('Musa region VPI. СPVCVPI')
hwMusaAdlVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaAdlVci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlVci.setDescription('Musa region VCI. СPVCVCI')
hwMusaToLanTrafficId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaToLanTrafficId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaToLanTrafficId.setDescription('Musa region to lan board traffic index. LAN')
hwMusaFromLanTrafficId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaFromLanTrafficId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaFromLanTrafficId.setDescription('Musa region from lan board traffic index. LAN')
hwMusaAdlPortOperat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("add", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaAdlPortOperat.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlPortOperat.setDescription('Musa region ADL Operat. СģʽADL˿ڵĲ')
hwMusaAllPvcConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22), )
if mibBuilder.loadTexts: hwMusaAllPvcConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAllPvcConfTable.setDescription('The config talbe of all kinds of PVC.')
hwMusaAllPvcConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaTypeOfPvcPvpindex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaCidIndex"))
if mibBuilder.loadTexts: hwMusaAllPvcConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAllPvcConfEntry.setDescription('This lists config variables of all kinds of PVC.')
hwMusaCidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaCidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaCidIndex.setDescription('The CID index.')
hwMusaSrcFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaSrcFrameId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSrcFrameId.setDescription('The Frame id of source board.')
hwMuasSrcSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMuasSrcSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMuasSrcSlotId.setDescription('The slot id of source board.')
hwMusaSrcPortVlanVccId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaSrcPortVlanVccId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSrcPortVlanVccId.setDescription('The Port/VlanID/VCC Index of source board.')
hwMusaSrcBoardVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaSrcBoardVpi.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSrcBoardVpi.setDescription('Src board Port vpi Index.')
hwMusaSrcBoardVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaSrcBoardVci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSrcBoardVci.setDescription('Src board VCI Index.')
hwMusaSrcUpcEpdPpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaSrcUpcEpdPpd.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSrcUpcEpdPpd.setDescription('The flow control parameter of connection.')
hwMusaDestFrameId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaDestFrameId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaDestFrameId.setDescription('Destination frame Index.')
hwMusaDestSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaDestSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaDestSlotId.setDescription('Destination slot Index.')
hwMusaDestPortVlanVccId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaDestPortVlanVccId.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaDestPortVlanVccId.setDescription('Destination port Index.')
hwMusaDestBoardVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaDestBoardVpi.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaDestBoardVpi.setDescription('Destination Port vpi Index.')
hwMusaDestBoardVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaDestBoardVci.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaDestBoardVci.setDescription('Destination VCI Index.')
hwMusaDestUpcEpdPpd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaDestUpcEpdPpd.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaDestUpcEpdPpd.setDescription('The flow control parameter of connection.')
hwMusaSrcToDestTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaSrcToDestTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaSrcToDestTraffic.setDescription('The source board to destination traffic.')
hwMusaDestToSrcTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaDestToSrcTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaDestToSrcTraffic.setDescription('The destination to source board traffic.')
hwMusaAllPvcOperater = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("add", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaAllPvcOperater.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAllPvcOperater.setDescription('Add or delete PVC.')
hwMusaTypeOfPvcPvpindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pvc", 0), ("pvp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMusaTypeOfPvcPvpindex.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaTypeOfPvcPvpindex.setDescription('Identified type of Pvc or Pvp')
hwMusaPvcPvpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 1, 22, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("invalid", 2), ("delete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMusaPvcPvpState.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaPvcPvpState.setDescription('Pvc or Pvp state ')
hwMusaAdlb = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6))
hwMusaAdlbBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1))
hwMusaAdlbChipset = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 2))
hwMusaAdlbConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3))
hwMusaAdlbPfm = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4))
hwMusaAdlbTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 5))
hwMusaAdlbBoardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1), )
if mibBuilder.loadTexts: hwMusaAdlbBoardInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbBoardInfoTable.setDescription('Musa adlb board description table.')
hwMusaAdlbBoardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"))
if mibBuilder.loadTexts: hwMusaAdlbBoardInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbBoardInfoEntry.setDescription('This list contains Musa adlb board description variables.')
adlbProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbProductId.setStatus('mandatory')
if mibBuilder.loadTexts: adlbProductId.setDescription(' ƷID ')
adlbCustomId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("isdn", 1), ("pots", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbCustomId.setStatus('mandatory')
if mibBuilder.loadTexts: adlbCustomId.setDescription(' û(0:δ֪ 1:ISDN 2:POTS) ')
adlbAtucRomSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucRomSwVer.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucRomSwVer.setDescription(' MODEM̻İ汾 ')
adlbAtucRomSwBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucRomSwBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucRomSwBuildDate.setDescription(' MODEM̻ ')
adlbAtucOamSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucOamSwVer.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucOamSwVer.setDescription(' OAMģİ汾 ')
adlbAtucOamSwBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucOamSwBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucOamSwBuildDate.setDescription(' OAMģ ')
adlbByDiagCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbByDiagCodeVer.setStatus('mandatory')
if mibBuilder.loadTexts: adlbByDiagCodeVer.setDescription(' DIAG CODEģİ汾 ')
adlbByModemCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbByModemCodeVer.setStatus('mandatory')
if mibBuilder.loadTexts: adlbByModemCodeVer.setDescription(' MODEM CODEģİ汾 ')
adlbAtucVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucVendorId.setDescription(' ӦID ,ֻT1.413ʽ² ')
adlbAtucVersionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucVersionNo.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucVersionNo.setDescription(' Ӧ̵İ汾ţT.1413G.HSʽ ')
adlbItuCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbItuCountryCode.setStatus('mandatory')
if mibBuilder.loadTexts: adlbItuCountryCode.setDescription(' ITU-T\u05fcĹҴţG.HSʽ ')
adlbItuProviderCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbItuProviderCode.setStatus('mandatory')
if mibBuilder.loadTexts: adlbItuProviderCode.setDescription(' ITU-T\u05fcĹӦ̴ţG.HSʽ ')
hwMusaAdlbChipsetMtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 2, 1), )
if mibBuilder.loadTexts: hwMusaAdlbChipsetMtTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbChipsetMtTable.setDescription('Musa adlb board description table.')
hwMusaAdlbChipsetMtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 2, 1, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbChipsetIndex"))
if mibBuilder.loadTexts: hwMusaAdlbChipsetMtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbChipsetMtEntry.setDescription('This list contains Musa chipset maintenance variables.')
adlbChipsetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: adlbChipsetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adlbChipsetIndex.setDescription(' AdlbƬ ')
adlbChipsetOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adlbChipsetOper.setStatus('mandatory')
if mibBuilder.loadTexts: adlbChipsetOper.setDescription(' reset chipset λƬ. ')
hwMusaAdlbPortDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1), )
if mibBuilder.loadTexts: hwMusaAdlbPortDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortDeviceTable.setDescription('Musa adlb port remote device table.')
hwMusaAdlbPortDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbPortDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortDeviceEntry.setDescription('This list contains Musa adlb port remote device variables.')
adlbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: adlbPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortIndex.setDescription(' Adlb˿ں ')
adlbAturVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturVendorId.setDescription(' ATURĹӦID ')
adlbAturVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturVersion.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturVersion.setDescription(' ATURİ汾 ')
adlbAturCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCountryCode.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCountryCode.setDescription(' ATURӦ̵ĹҴ ')
adlbAturProviderCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturProviderCode.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturProviderCode.setDescription(' ATURĹӦ̴ ')
adlbAturAdslCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturAdslCapability.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturAdslCapability.setDescription(' ATURADSL 0:not support1:support; bit0--T1.413 issue2 bit2--g992.1 POTS non-overlapped spectrum bit3--g992.1 POTS overlapped specturm bit4--g992.1 ISDN non-overlapped spectrum bit5--g992.1 ISDN overlapped spectrum bit6--g992.1 operation in conjunction with TCM-ISDN non-overlapped spectrum bit7--g992.1 operation in conjunction with TCM-ISDN overlapped spectrum bit8--g992.2 POTS non-overlapped spectrum bit9--g992.2 POTS overlapped specturm bit10--g992.2 operation in conjunction with TCM-ISDN non-overlapped spectrum bit11--g992.2 operation in conjunction with TCM-ISDN overlapped spectrum ')
hwMusaAdlbPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2), )
if mibBuilder.loadTexts: hwMusaAdlbPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortTable.setDescription('Musa adlb port table.')
hwMusaAdlbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortEntry.setDescription('This list contains Musa adlb port query and operation variables.')
adlbPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("active", 0), ("deactive", 1), ("bad", 2), ("activating", 3), ("deactivating", 4), ("block", 5), ("unblock", 6), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbPortState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortState.setDescription(' ˿״̬ (0:active 1:deactive 2:bad 3:activating 4:deactivating 5:block 255:other) ')
adlbPortTrainStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("dmt", 1), ("glite", 2), ("t1413", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbPortTrainStandard.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortTrainStandard.setDescription(' ˿ѵѭı\u05fc ( 0:none 1:G.DMT 2:G.LITE 3:T1.413 ) ')
adlbPortOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("deact", 0), ("block", 1), ("unblock", 2), ("clearCellStat", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adlbPortOper.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortOper.setDescription(' ˿ڲ0:ر/ȥ 1: 2: ')
adlbPortTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortTemplateId.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortTemplateId.setDescription(' activate ADL port by one template. ˿ ')
adlbPortTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbPortTxCell.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortTxCell.setDescription(' ADL port Transfer cells. ')
adlbPortRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbPortRxCell.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortRxCell.setDescription(' ADL port Receive cells. ')
hwMusaAdlbPortActTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3), )
if mibBuilder.loadTexts: hwMusaAdlbPortActTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortActTable.setDescription('Musa adlb activate port table.')
hwMusaAdlbPortActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortTemplateId"))
if mibBuilder.loadTexts: hwMusaAdlbPortActEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortActEntry.setDescription('This list contains activate adlb port variables.')
adlbIfConfigSetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbIfConfigSetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: adlbIfConfigSetToDefault.setDescription(' ·òǷȱʡֵ (1: 0:) ')
adlbServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 0), ("fullrate", 1), ("glite", 2), ("t1413", 3), ("g9922", 4), ("ghs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: adlbServiceType.setDescription(' ADSL ( 0:All (G992.1, G992.2, T1.413)(Default) 1:Full rate(G992.1 or T1.413) 2:G992.2(g.lite) only 3:T1.413 only 4:G992.2(g.dmt) only 5:g.hs (G992.1 and G992.2 with priority to G992.1) ) ')
adlbConfigOrAutoDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbConfigOrAutoDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adlbConfigOrAutoDelay.setDescription(' ӳ (0:ֹ(Default) 1:ƬԶ) ')
adlbDelayOrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("depth", 0), ("ms", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbDelayOrDepth.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDelayOrDepth.setDescription(' ӳٵλ (0:DMTż(Default) 1:) ')
adlbFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("mode0", 0), ("mode1", 1), ("mode2", 2), ("mode3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbFrameMode.setStatus('mandatory')
if mibBuilder.loadTexts: adlbFrameMode.setDescription(' ֡ģʽ ( 0-Framing mode 0, Full overhead asynchronous mode 1-Framing mode 1, Full overhead synchronous mode 2-Framing mode 2, Dual latency with reduced overhead 3-Framing mode 3(Default), Single latency with reduced overhead ) ')
adlbNTROptionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbNTROptionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: adlbNTROptionEnable.setDescription(' NTRʱӲο (0:disabled(Default) 1:enabled) ')
adlbTrellisModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbTrellisModeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: adlbTrellisModeEnable.setDescription(' դ (0:disable 1:enable(Default)) ')
adlbEocClearChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("hdlcframing", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbEocClearChannelMode.setStatus('mandatory')
if mibBuilder.loadTexts: adlbEocClearChannelMode.setDescription(' ǶͨEOCģʽ (0:transparent mode(Default) 1:HDLC framing mode) ')
adlbDsSingleOrDual = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("single", 1), ("dual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbDsSingleOrDual.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDsSingleOrDual.setDescription(' ͨSingleDualѡ ( 1-single DS channel(AS0) (Default) 3-dual DS channel(AS0 and AS1/LS0ds) ) ')
adlbUsSingleOrDual = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("single", 1), ("dual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbUsSingleOrDual.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUsSingleOrDual.setDescription(' ͨSingleDualѡ ( 1-single US channel(LS0us) (Default) 3-dual US channel(LS0us and LS1) ) ')
adlbFastOrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("interleaved", 2), ("fast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbFastOrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbFastOrInterleave.setDescription(' ͨʽg.liteʱǿΪinterleave ( 2-Interleaved(default), 3-Fast) ')
adlbDsTargetMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbDsTargetMargin.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDsTargetMargin.setDescription(' Ŀ (0-15dB) Default=6dB ')
adlbDsMinMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbDsMinMargin.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDsMinMargin.setDescription(' С Default=0dB ѵʱڸֵMODEMԶѵ ')
adlbUsTargetMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbUsTargetMargin.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUsTargetMargin.setDescription(' Ŀ (0-15dB) Default=6dB ')
adlbUsMinMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbUsMinMargin.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUsMinMargin.setDescription(' С Default=0dB ѵʱڸֵMODEMԶѵ ')
adlbMaxDsRateC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMaxDsRateC0.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMaxDsRateC0.setDescription(' channel0 ( λ:32kbits/sec single channel,full rate, Default=255 -> 8.160Mbps single channel,lite rate, Default=48 -> 1.536Mbps dual channel,full rate,Default=235 -> 7.520Mbps ) ')
adlbMinDsRateC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMinDsRateC0.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMinDsRateC0.setDescription(' channel0С ( λ:32kbits/sec single channel,full rate, Default=1 -> 32Kbps single channel,lite rate, Default=2 -> 64Kbps dual channel,full rate,Default=1 -> 32Kbps ) ')
adlbMaxUsRateC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMaxUsRateC0.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMaxUsRateC0.setDescription(' channel0 ( λ:32kbits/sec Full rate, Default=28 -> 896Kbps Lite , Default=16 -> 512Kbps single channel,full rate, Default=28 -> 896Kbps single channel,lite rate, Default=16 -> 512Kbps dual channel, Default=24 -> 768Kbps ) ')
adlbMinUsRateC0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMinUsRateC0.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMinUsRateC0.setDescription(' channel0С ( λ:32kbits/sec single channel,full rate, Default=1 -> 32Kbps single channel,lite rate, Default=1 -> 32Kbps dual channel, Default=1 -> 32Kbps ) ')
adlbUsMsOrDmtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbUsMsOrDmtNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUsMsOrDmtNumber.setDescription(' ·ӳ (ӳٵλԺʾ(5-255ms) Default=16ms, ӳٵλDMTŸȱʾ,(2,4,8,16,32,64,128) Default=64) ')
adlbDsMsOrDmtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbDsMsOrDmtNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDsMsOrDmtNumber.setDescription(' ·ӳ٣RW(ӳٵλԺʾ(5-255ms) Default=16ms, ӳٵλDMTŸȱʾ,(2,4,8,16,32,64,128) Default=64) ')
adlbUsExcessRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbUsExcessRatio.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUsExcessRatio.setDescription(' гʷ ( Single channel default=100 Dual channel default=50) ')
adlbDsExcessRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbDsExcessRatio.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDsExcessRatio.setDescription(' гʷ ( Single channel default=100 Dual channel default=50) ')
adlbMaxDsRateC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMaxDsRateC1.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMaxDsRateC1.setDescription(' Channel0ʣdual channel operationʽʹ λ:32kbits/sec dual channel default=20 -> 640Kbps ')
adlbMinDsRateC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMinDsRateC1.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMinDsRateC1.setDescription(' Channel0Сʣdual channel operationʽʹ λ:32kbits/sec dual channel default=20 -> 640Kbps ')
adlbMaxUsRateC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMaxUsRateC1.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMaxUsRateC1.setDescription(' Channel0ʣdual channel operationʽʹ λ:32kbits/sec dual channel default=4 -> 128Kbps ')
adlbMinUsRateC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbMinUsRateC1.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMinUsRateC1.setDescription(' Channel0Сʣdual channel operationʽʹ λ:32kbits/sec dual channel default=4 -> 128Kbps ')
adlbTemplateOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("add", 0), ("del", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbTemplateOperate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbTemplateOperate.setDescription(' template add/del operate. ')
hwMusaAdlbPortPfmThresTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4), )
if mibBuilder.loadTexts: hwMusaAdlbPortPfmThresTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortPfmThresTable.setDescription('Musa adlb port performance statistic threshold table.')
hwMusaAdlbPortPfmThresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbPortPfmThresEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortPfmThresEntry.setDescription('This list contains adlb port performance statistic threshold variables.')
adlbPortPfmThresId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId1.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId1.setDescription(' ͳID1 (default=Զֵ) ')
adlbPortPfmThresValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue1.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue1.setDescription(' ͳֵ1 (default=0) ')
adlbPortPfmThresId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId2.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId2.setDescription(' ͳID2(default=ֵ)')
adlbPortPfmThresValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue2.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue2.setDescription(' ͳֵ2 (default=0) ')
adlbPortPfmThresId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId3.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId3.setDescription(' ͳID3 (default=Զֵ) ')
adlbPortPfmThresValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue3.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue3.setDescription(' ͳֵ3 (default=0) ')
adlbPortPfmThresId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId4.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId4.setDescription(' ͳID4 (default=ֵ) ')
adlbPortPfmThresValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue4.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue4.setDescription(' ͳֵ4 (default=0) ')
adlbPortPfmThresId5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId5.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId5.setDescription(' ͳID5 (default=Զ˲ʱֵ) ')
adlbPortPfmThresValue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue5.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue5.setDescription(' ͳֵ5 (default=0) ')
adlbPortPfmThresId6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId6.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId6.setDescription(' ͳID6 (default=˲ʱֵ) ')
adlbPortPfmThresValue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue6.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue6.setDescription(' ͳֵ6 (default=0) ')
adlbPortPfmThresId7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId7.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId7.setDescription(' ͳID7 (default=Զ˶ʧֵ) ')
adlbPortPfmThresValue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue7.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue7.setDescription(' ͳֵ7 (default=0) ')
adlbPortPfmThresId8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresId8.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresId8.setDescription(' ͳID8 (default=˶ʧֵ) ')
adlbPortPfmThresValue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 3, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adlbPortPfmThresValue8.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortPfmThresValue8.setDescription(' ͳֵ8 (default=0) ')
hwMusaAdlbPortLineDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1), )
if mibBuilder.loadTexts: hwMusaAdlbPortLineDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortLineDataTable.setDescription('Musa adlb port line operation data table.')
hwMusaAdlbPortLineDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbPortLineDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortLineDataEntry.setDescription('This list contains adlb port line operation data variables.')
adlbAs0DnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAs0DnRate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAs0DnRate.setDescription(' AS0ͨ λ:32KbPS ')
adlbLs0DnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbLs0DnRate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbLs0DnRate.setDescription(' LS0ͨ λ:32KbPS ')
adlbAs1DnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAs1DnRate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAs1DnRate.setDescription(' AS1ͨ λ:32KbPS ')
adlbLs0UpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbLs0UpRate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbLs0UpRate.setDescription(' LS0ͨ λ:32KbPS ')
adlbLs1UpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbLs1UpRate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbLs1UpRate.setDescription(' LS1ͨ λ:32KbPS ')
adlbUpInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpInterleaveDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpInterleaveDelay.setDescription(' н֯ͨӳ λ:ms (һСڵõֵ) ')
adlbDnInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnInterleaveDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnInterleaveDelay.setDescription(' н֯ͨӳ λ:ms (һСڵõֵ) ')
adlbDnNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnNoiseMargin.setDescription(' λ:dB ')
adlbUpNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpNoiseMargin.setDescription(' λ:dB ')
adlbDnAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnAttenuation.setDescription(' ˥ λ:0.5dB ')
adlbUpAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpAttenuation.setDescription(' ˥ λ:0.5dB ')
adlbDnParityInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnParityInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnParityInterleave.setDescription(' н֯ͨÿRSְFECУֽ ')
adlbDnParityFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnParityFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnParityFast.setDescription(' пͨÿRSְFECУֽ ')
adlbUpParityInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpParityInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpParityInterleave.setDescription(' н֯ͨÿRSְFECУֽ ')
adlbUpParityFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpParityFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpParityFast.setDescription(' пͨÿRSְFECУֽ ')
adlbDnSymbolPerCodeInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnSymbolPerCodeInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnSymbolPerCodeInterleave.setDescription(' н֯ͨÿRSְDMT=1,0.5 ')
adlbDnSymbolPerCodeFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnSymbolPerCodeFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnSymbolPerCodeFast.setDescription(' пͨÿRSְDMT=1 ')
adlbUpSymbolPerCodeInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpSymbolPerCodeInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpSymbolPerCodeInterleave.setDescription(' н֯ͨÿRSְDMT=1,0.5 ')
adlbUpSymbolPerCodeFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpSymbolPerCodeFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpSymbolPerCodeFast.setDescription(' пͨÿRSְDMT=1 ')
adlbDnInterleaveDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnInterleaveDepth.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnInterleaveDepth.setDescription(' н֯ͨĽ֯ ')
adlbUpInterleaveDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpInterleaveDepth.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpInterleaveDepth.setDescription(' н֯ͨĽ֯ ')
adlbMaxDnAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbMaxDnAttainableRate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMaxDnAttainableRate.setDescription(' ɴﵽ λ:32Kbps ')
adlbMaxUpAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbMaxUpAttainableRate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbMaxUpAttainableRate.setDescription(' ɴﵽ λ:32Kbps ')
adlbTotalOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbTotalOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: adlbTotalOutputPower.setDescription(' (λ:dBm) (-31~31) ')
hwMusaAdlbAtucAlarmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2), )
if mibBuilder.loadTexts: hwMusaAdlbAtucAlarmDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucAlarmDataTable.setDescription('Musa adlb port ATUC alarm statistic data table.')
hwMusaAdlbAtucAlarmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAtucAlarmDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucAlarmDataEntry.setDescription('This list contains adlb port ATUC alarm statistic data variables.')
adlbAtucLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLos.setDescription(' źŶʧܼ ')
adlbAtucHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucHighBitErr.setDescription(' ˸bitܼ ')
adlbAtucRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucRetrain.setDescription(' ·Զѵܼ ')
adlbAtucLof = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLof.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLof.setDescription(' LOFܼ ')
adlbAtucAlarmValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucAlarmValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucAlarmValidIntervals.setDescription(' ܼЧʱ (λ:15) ')
adlbAtucPrev15MinLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinLos.setDescription(' ǰ15ӽźŶʧ ')
adlbAtucPrev15MinHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinHighBitErr.setDescription(' ǰ15ӽ˸bit ')
adlbAtucPrev15MinRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinRetrain.setDescription(' ǰ15·Զѵ ')
adlbAtucPrev15MinLof = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinLof.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinLof.setDescription(' ǰ15ӽLOF ')
adlbAtucCurr1DayLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayLos.setDescription(' ǰ24СʱźŶʧ ')
adlbAtucCurr1DayHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayHighBitErr.setDescription(' ǰ24Сʱ˸bit ')
adlbAtucCurr1DayRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayRetrain.setDescription(' ǰ24Сʱ·Զѵ ')
adlbAtucCurr1DayLof = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayLof.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayLof.setDescription(' ǰ24СʱLOF ')
adlbAtucPrev1DayLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayLos.setDescription(' ǰ24СʱźŶʧ ')
adlbAtucPrev1DayHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayHighBitErr.setDescription(' ǰ24Сʱ˸bit ')
adlbAtucPrev1DayRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayRetrain.setDescription(' ǰ24Сʱ·Զѵ ')
adlbAtucPrev1DayLof = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayLof.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayLof.setDescription(' ǰ24СʱLOF ')
adlbClearAlarmstatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 2, 1, 18), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adlbClearAlarmstatistics.setStatus('mandatory')
if mibBuilder.loadTexts: adlbClearAlarmstatistics.setDescription(' ˿ڸ澯ͳϢ ')
hwMusaAdlbAturAlarmDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3), )
if mibBuilder.loadTexts: hwMusaAdlbAturAlarmDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturAlarmDataTable.setDescription('Musa adlb port ATUR alarm statistic data table.')
hwMusaAdlbAturAlarmDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAturAlarmDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturAlarmDataEntry.setDescription('This list contains adlb port ATUR alarm statistic data variables.')
adlbAturLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturLos.setDescription(' ԶźŶʧܼ ')
adlbAturHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturHighBitErr.setDescription(' Զ˸bitܼ ')
adlbAturRfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturRfi.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturRfi.setDescription(' ԶRFIܼ ')
adlbAturLpr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturLpr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturLpr.setDescription(' ԶATU-RԴʧܼ ')
adlbAturAlarmValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturAlarmValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturAlarmValidIntervals.setDescription(' ܼЧʱ (λ:15) ')
adlbAturPrev15MinLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinLos.setDescription(' ǰ15ԶźŶʧ ')
adlbAturPrev15MinHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinHighBitErr.setDescription(' ǰ15Զ˸bit ')
adlbAturPrev15MinRfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinRfi.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinRfi.setDescription(' ǰ15ԶRFI ')
adlbAturPrev15MinLpr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinLpr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinLpr.setDescription(' ǰ15ԶATU-RԴʧ ')
adlbAturCurr1DayLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayLos.setDescription(' ǰ24СʱԶźŶʧ ')
adlbAturCurr1DayHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayHighBitErr.setDescription(' ǰ24СʱԶ˸bit ')
adlbAturCurr1DayRfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayRfi.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayRfi.setDescription(' ǰ24СʱԶRFI ')
adlbAturCurr1DayLpr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayLpr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayLpr.setDescription(' ǰ24СʱԶATU-RԴʧ ')
adlbAturPrev1DayLos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayLos.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayLos.setDescription(' ǰ24СʱԶźŶʧ ')
adlbAturPrev1DayHighBitErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayHighBitErr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayHighBitErr.setDescription(' ǰ24СʱԶ˸bit ')
adlbAturPrev1DayRfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayRfi.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayRfi.setDescription(' ǰ24СʱԶRFI ')
adlbAturPrev1DayLpr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayLpr.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayLpr.setDescription(' ǰ24СʱԶATU-RԴʧ ')
hwMusaAdlbAtucPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4), )
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfDataTable.setDescription('Musa adlb port ATUC performance statistic data table.')
hwMusaAdlbAtucPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfDataEntry.setDescription('This list contains adlb port ATUC performance statistic total data until now variables.')
adlbAtucCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCrcErrInterleave.setDescription(' ˽֯ͨCRCĳܼ֡ ')
adlbAtucCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCrcErrFast.setDescription(' ˿ͨCRCĳܼ֡ ')
adlbAtucFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFecErrInterleave.setDescription(' ˽֯ͨFECĳܼ֡ ')
adlbAtucFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFecErrFast.setDescription(' ˿ͨFECĳܼ֡ ')
adlbAtucSuperFrameSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucSuperFrameSent.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucSuperFrameSent.setDescription(' ͵ĳ֡ ')
adlbAtucSuperFrameReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucSuperFrameReceived.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucSuperFrameReceived.setDescription(' յĳ֡ ')
adlbAtucTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucTimeCount.setDescription(' ˼֡ʱ,4000frames=1 ')
adlbAtucErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucErrFrames.setDescription(' ˼дĳ֡ ')
adlbAtucBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucBgBENotSES.setDescription(' ˷ڷڼBACKGROUND ')
adlbAtucErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucErrSecond.setDescription(' ')
adlbAtucSevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucSevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucSevereErrSecond.setDescription(' ')
adlbAtucNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucNonSESFrames.setDescription(' ĳ֡ ')
adlbAtucUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucUnavailableSecond.setDescription(' ˲ʱܼ ')
adlbAtucBitswaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucBitswaps.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucBitswaps.setDescription(' ˷ıؽܼ ')
adlbAtucLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLossSecond.setDescription(' ˶ʧ ')
adlbAtucFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFecSecond.setDescription(' ˷һFEC ')
adlbAtucFastRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFastRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFastRetrain.setDescription(' ѵܴ ')
adlbAtucFastRetrainFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFastRetrainFail.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFastRetrainFail.setDescription(' ѵʧܴܵ ')
adlbAtucPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPerfValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPerfValidIntervals.setDescription(' ͳܼЧʱ (λ:15) ')
adlbClearPerfstatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 4, 1, 20), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adlbClearPerfstatistics.setStatus('mandatory')
if mibBuilder.loadTexts: adlbClearPerfstatistics.setDescription(' ˿ͳϢ ')
hwMusaAdlbAtucPerfPrev15mDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5), )
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev15mDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev15mDataTable.setDescription('Musa adlb port ATUC performance statistic in previous 15 minutes data table.')
hwMusaAdlbAtucPerfPrev15mDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev15mDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev15mDataEntry.setDescription('This list contains adlb port ATUC performance statistic in previous 15 minutes data variables.')
adlbAtucPrev15MinCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinCrcErrInterleave.setDescription(' ǰ15ӽ˽֯ͨCRCĳ֡ ')
adlbAtucPrev15MinCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinCrcErrFast.setDescription(' ǰ15ӽ˿ͨCRCĳ֡ ')
adlbAtucPrev15MinFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinFecErrInterleave.setDescription(' ǰ15ӽ˽֯ͨFECĳ֡ ')
adlbAtucPrev15MinFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinFecErrFast.setDescription(' ǰ15ӽ˿ͨFECĳ֡ ')
adlbAtucPrev15MinSuperFrameSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinSuperFrameSent.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinSuperFrameSent.setDescription(' ǰ15ӷ͵ĳ֡ ')
adlbAtucPrev15MinSuperFrameReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinSuperFrameReceived.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinSuperFrameReceived.setDescription(' ǰ15ӽյĳ֡ ')
adlbAtucPrev15MinTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinTimeCount.setDescription(' ǰ15ӽ˼֡ʱ,4000frames=1 ')
adlbAtucPrev15MinErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinErrFrames.setDescription(' ǰ15ӽ˼дĳ֡ ')
adlbAtucPrev15MinBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinBgBENotSES.setDescription(' ǰ15ӽ˷ڷڼBACKGROUND ')
adlbAtucPrev15MinErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinErrSecond.setDescription(' ǰ15ӽ ')
adlbAtucPrev15MinSevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinSevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinSevereErrSecond.setDescription(' ǰ15ӽ ')
adlbAtucPrev15MinNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinNonSESFrames.setDescription(' ǰ15ӽĳ֡ ')
adlbAtucPrev15MinUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinUnavailableSecond.setDescription(' ǰ15ӽ˲ʱ ')
adlbAtucPrev15MinBitswaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinBitswaps.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinBitswaps.setDescription(' ǰ15ӽ˷ıؽ ')
adlbAtucPrev15MinLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinLossSecond.setDescription(' ǰ15ӽ˶ʧ ')
adlbAtucPrev15MinFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinFecSecond.setDescription(' ǰ15ӽ˷һFEC ')
adlbAtucPrev15MinFastRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinFastRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinFastRetrain.setDescription(' ǰ15ӷѵĴ ')
adlbAtucPrev15MinFastRetrainFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev15MinFastRetrainFail.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev15MinFastRetrainFail.setDescription(' ǰ15ӿѵʧܵĴ ')
hwMusaAdlbAtucPerfCurr24hDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6), )
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfCurr24hDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfCurr24hDataTable.setDescription('Musa adlb port ATUC performance statistic data in current 24 hours table.')
hwMusaAdlbAtucPerfCurr24hDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfCurr24hDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfCurr24hDataEntry.setDescription('This list contains adlb port ATUC performance statistic data in current 24 hours variables.')
adlbAtucCurr1DayCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayCrcErrInterleave.setDescription(' ǰ24Сʱ˽֯ͨCRCĳ֡ ')
adlbAtucCurr1DayCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayCrcErrFast.setDescription(' ǰ24Сʱ˿ͨCRCĳ֡ ')
adlbAtucCurr1DayFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayFecErrInterleave.setDescription(' ǰ24Сʱ˽֯ͨFECĳ֡ ')
adlbAtucCurr1DayFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayFecErrFast.setDescription(' ǰ24Сʱ˿ͨFECĳ֡ ')
adlbAtucCurr1DaySuperFrameSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DaySuperFrameSent.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DaySuperFrameSent.setDescription(' ǰ24Сʱ͵ĳ֡ ')
adlbAtucCurr1DaySuperFrameReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DaySuperFrameReceived.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DaySuperFrameReceived.setDescription(' ǰ24Сʱյĳ֡ ')
adlbAtucCurr1DayTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayTimeCount.setDescription(' ǰ24Сʱ˼֡ʱ,4000frames=1 ')
adlbAtucCurr1DayErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayErrFrames.setDescription(' ǰ24Сʱ˼дĳ֡ ')
adlbAtucCurr1DayBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayBgBENotSES.setDescription(' ǰ24Сʱ˷ڷڼBACKGROUND ')
adlbAtucCurr1DayErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayErrSecond.setDescription(' ǰ24Сʱ ')
adlbAtucCurr1DaySevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DaySevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DaySevereErrSecond.setDescription(' ǰ24Сʱ ')
adlbAtucCurr1DayNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayNonSESFrames.setDescription(' ǰ24Сʱĳ֡ ')
adlbAtucCurr1DayUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayUnavailableSecond.setDescription(' ǰ24Сʱ˲ʱ ')
adlbAtucCurr1DayBitswaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayBitswaps.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayBitswaps.setDescription(' ǰ24Сʱ˷ıؽ ')
adlbAtucCurr1DayLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayLossSecond.setDescription(' ǰ24Сʱ˶ʧ ')
adlbAtucCurr1DayFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayFecSecond.setDescription(' ǰ24Сʱ˷һFEC ')
adlbAtucCurr1DayFastRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayFastRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayFastRetrain.setDescription(' ǰ24СʱѵĴ ')
adlbAtucCurr1DayFastRetrainFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucCurr1DayFastRetrainFail.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucCurr1DayFastRetrainFail.setDescription(' ǰ24СʱѵʧܵĴ ')
hwMusaAdlbAtucPerfPrev24hDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7), )
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev24hDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev24hDataTable.setDescription('Musa adlb port ATUC performance statistic data in previous 24 hours table.')
hwMusaAdlbAtucPerfPrev24hDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev24hDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucPerfPrev24hDataEntry.setDescription('This list contains adlb port ATUC performance statistic data in previous 24 hours variables.')
adlbAtucPrev1DayCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayCrcErrInterleave.setDescription(' ǰ24Сʱ˽֯ͨCRCĳ֡ ')
adlbAtucPrev1DayCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayCrcErrFast.setDescription(' ǰ24Сʱ˿ͨCRCĳ֡ ')
adlbAtucPrev1DayFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayFecErrInterleave.setDescription(' ǰ24Сʱ˽֯ͨFECĳ֡ ')
adlbAtucPrev1DayFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayFecErrFast.setDescription(' ǰ24Сʱ˿ͨFECĳ֡ ')
adlbAtucPrev1DaySuperFrameSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DaySuperFrameSent.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DaySuperFrameSent.setDescription(' ǰ24Сʱ͵ĳ֡ ')
adlbAtucPrev1DaySuperFrameReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DaySuperFrameReceived.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DaySuperFrameReceived.setDescription(' ǰ24Сʱյĳ֡ ')
adlbAtucPrev1DayTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayTimeCount.setDescription(' ǰ24Сʱ˼֡ʱ,4000frames=1 ')
adlbAtucPrev1DayErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayErrFrames.setDescription(' ǰ24Сʱ˼дĳ֡ ')
adlbAtucPrev1DayBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayBgBENotSES.setDescription(' ǰ24Сʱ˷ڷڼBACKGROUND ')
adlbAtucPrev1DayErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayErrSecond.setDescription(' ǰ24Сʱ ')
adlbAtucPrev1DaySevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DaySevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DaySevereErrSecond.setDescription(' ǰ24Сʱ ')
adlbAtucPrev1DayNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayNonSESFrames.setDescription(' ǰ24Сʱĳ֡ ')
adlbAtucPrev1DayUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayUnavailableSecond.setDescription(' ǰ24Сʱ˲ʱ ')
adlbAtucPrev1DayBitswaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayBitswaps.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayBitswaps.setDescription(' ǰ24Сʱ˷ıؽ ')
adlbAtucPrev1DayLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayLossSecond.setDescription(' ǰ24Сʱ˶ʧ ')
adlbAtucPrev1DayFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayFecSecond.setDescription(' ǰ24Сʱ˷һFEC ')
adlbAtucPrev1DayFastRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayFastRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayFastRetrain.setDescription(' ǰ24СʱѵĴ ')
adlbAtucPrev1DayFastRetrainFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucPrev1DayFastRetrainFail.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucPrev1DayFastRetrainFail.setDescription(' ǰ24СʱѵʧܵĴ ')
hwMusaAdlbAturPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8), )
if mibBuilder.loadTexts: hwMusaAdlbAturPerfDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfDataTable.setDescription('Musa adlb port ATUR performance statistic data until now table.')
hwMusaAdlbAturPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAturPerfDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfDataEntry.setDescription('This list contains adlb port ATUR performance statistic data until now variables.')
adlbAturCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCrcErrInterleave.setDescription(' Զ˽֯ͨCRCĳܼ֡ ')
adlbAturCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCrcErrFast.setDescription(' Զ˿ͨCRCĳܼ֡ ')
adlbAturFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFecErrInterleave.setDescription(' Զ˽֯ͨFECĳܼ֡ ')
adlbAturFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFecErrFast.setDescription(' Զ˿ͨFECĳܼ֡ ')
adlbAturTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturTimeCount.setDescription(' Զ˼֡ʱ,4000frames=1 ')
adlbAturErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturErrFrames.setDescription(' Զ˼дĳ֡ ')
adlbAturBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturBgBENotSES.setDescription(' Զ˷ڷڼBACKGROUND ')
adlbAturErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturErrSecond.setDescription(' Զ ')
adlbAturSevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturSevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturSevereErrSecond.setDescription(' Զ ')
adlbAturNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturNonSESFrames.setDescription(' Զĳ֡ ')
adlbAturUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturUnavailableSecond.setDescription(' Զ˲ʱܼ ')
adlbAturLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturLossSecond.setDescription(' Զ˶ʧ ')
adlbAturFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFecSecond.setDescription(' Զ˷һFEC ')
adlbAturPerfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPerfValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPerfValidIntervals.setDescription(' ͳܼЧʱ (λ:15) ')
hwMusaAdlbAturPerfPrev15mDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9), )
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev15mDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev15mDataTable.setDescription('Musa adlb port ATUR performance statistic data in previous 15 minutes table.')
hwMusaAdlbAturPerfPrev15mDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev15mDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev15mDataEntry.setDescription('This list contains adlb port ATUR performance statistic data in previous 15 minutes variables.')
adlbAturPrev15MinCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinCrcErrInterleave.setDescription(' ǰ15Զ˽֯ͨCRCĳ֡ ')
adlbAturPrev15MinCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinCrcErrFast.setDescription(' ǰ15Զ˿ͨCRCĳ֡ ')
adlbAturPrev15MinFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinFecErrInterleave.setDescription(' ǰ15Զ˽֯ͨFECĳ֡ ')
adlbAturPrev15MinFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinFecErrFast.setDescription(' ǰ15Զ˿ͨFECĳ֡ ')
adlbAturPrev15MinTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinTimeCount.setDescription(' ǰ15Զ˼֡ʱ,4000frames=1 ')
adlbAturPrev15MinErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinErrFrames.setDescription(' ǰ15Զ˼дĳ֡ ')
adlbAturPrev15MinBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinBgBENotSES.setDescription(' ǰ15Զ˷ڷڼBACKGROUND ')
adlbAturPrev15MinErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinErrSecond.setDescription(' ǰ15Զ ')
adlbAturPrev15MinSevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinSevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinSevereErrSecond.setDescription(' ǰ15Զ ')
adlbAturPrev15MinNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinNonSESFrames.setDescription(' ǰ15Զĳ֡ ')
adlbAturPrev15MinUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinUnavailableSecond.setDescription(' ǰ15Զ˲ʱ ')
adlbAturPrev15MinLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinLossSecond.setDescription(' ǰ15Զ˶ʧ ')
adlbAturPrev15MinFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev15MinFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev15MinFecSecond.setDescription(' ǰ15Զ˷һFEC ')
hwMusaAdlbAturPerfCurr24hDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10), )
if mibBuilder.loadTexts: hwMusaAdlbAturPerfCurr24hDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfCurr24hDataTable.setDescription('Musa adlb port ATUR performance statistic data in current 24 hours table.')
hwMusaAdlbAturPerfCurr24hDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAturPerfCurr24hDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfCurr24hDataEntry.setDescription('This list contains adlb port ATUR performance statistic data in current 24 hours variables.')
adlbAturCurr1DayCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayCrcErrInterleave.setDescription(' ǰ24СʱԶ˽֯ͨCRCĳ֡ ')
adlbAturCurr1DayCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayCrcErrFast.setDescription(' ǰ24СʱԶ˿ͨCRCĳ֡ ')
adlbAturCurr1DayFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayFecErrInterleave.setDescription(' ǰ24СʱԶ˽֯ͨFECĳ֡ ')
adlbAturCurr1DayFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayFecErrFast.setDescription(' ǰ24СʱԶ˿ͨFECĳ֡ ')
adlbAturCurr1DayTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayTimeCount.setDescription(' ǰ24СʱԶ˼֡ʱ,4000frames=1 ')
adlbAturCurr1DayErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayErrFrames.setDescription(' ǰ24СʱԶ˼дĳ֡ ')
adlbAturCurr1DayBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayBgBENotSES.setDescription(' ǰ24СʱԶ˷ڷڼBACKGROUND ')
adlbAturCurr1DayErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayErrSecond.setDescription(' ǰ24СʱԶ ')
adlbAturCurr1DaySevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DaySevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DaySevereErrSecond.setDescription(' ǰ24СʱԶ ')
adlbAturCurr1DayNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayNonSESFrames.setDescription(' ǰ24СʱԶĳ֡ ')
adlbAturCurr1DayUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayUnavailableSecond.setDescription(' ǰ24СʱԶ˲ʱ ')
adlbAturCurr1DayLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayLossSecond.setDescription(' ǰ24СʱԶ˶ʧ ')
adlbAturCurr1DayFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturCurr1DayFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturCurr1DayFecSecond.setDescription(' ǰ24СʱԶ˷һFEC ')
hwMusaAdlbAturPerfPrev24hDataTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11), )
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev24hDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev24hDataTable.setDescription('Musa adlb port ATUR performance statistic data in previous 24 hours table.')
hwMusaAdlbAturPerfPrev24hDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev24hDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturPerfPrev24hDataEntry.setDescription('This list contains adlb port ATUR performance statistic data in previous 24 hours variables.')
adlbAturPrev1DayCrcErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayCrcErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayCrcErrInterleave.setDescription(' ǰ24СʱԶ˽֯ͨCRCĳ֡ ')
adlbAturPrev1DayCrcErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayCrcErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayCrcErrFast.setDescription(' ǰ24СʱԶ˿ͨCRCĳ֡ ')
adlbAturPrev1DayFecErrInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayFecErrInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayFecErrInterleave.setDescription(' ǰ24СʱԶ˽֯ͨFECĳ֡ ')
adlbAturPrev1DayFecErrFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayFecErrFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayFecErrFast.setDescription(' ǰ24СʱԶ˿ͨFECĳ֡ ')
adlbAturPrev1DayTimeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayTimeCount.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayTimeCount.setDescription(' ǰ24СʱԶ˼֡ʱ,4000frames=1 ')
adlbAturPrev1DayErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayErrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayErrFrames.setDescription(' ǰ24СʱԶ˼дĳ֡ ')
adlbAturPrev1DayBgBENotSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayBgBENotSES.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayBgBENotSES.setDescription(' ǰ24СʱԶ˷ڷڼBACKGROUND ')
adlbAturPrev1DayErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayErrSecond.setDescription(' ǰ24СʱԶ ')
adlbAturPrev1DaySevereErrSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DaySevereErrSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DaySevereErrSecond.setDescription(' ǰ24СʱԶ ')
adlbAturPrev1DayNonSESFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayNonSESFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayNonSESFrames.setDescription(' ǰ24СʱԶĳ֡ ')
adlbAturPrev1DayUnavailableSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayUnavailableSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayUnavailableSecond.setDescription(' ǰ24СʱԶ˲ʱ ')
adlbAturPrev1DayLossSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayLossSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayLossSecond.setDescription(' ǰ24СʱԶ˶ʧ ')
adlbAturPrev1DayFecSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturPrev1DayFecSecond.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturPrev1DayFecSecond.setDescription(' ǰ24СʱԶ˷һFEC ')
hwMusaAdlbAtucLineDefectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12), )
if mibBuilder.loadTexts: hwMusaAdlbAtucLineDefectTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucLineDefectTable.setDescription('Musa adlb port ATUC line defect state table.')
hwMusaAdlbAtucLineDefectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAtucLineDefectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucLineDefectEntry.setDescription('This list contains adlb port ATUC line defect state variables.')
adlbAtucLpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLpsState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLpsState.setDescription(' ˶ʧƵź ')
adlbAtucSefState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucSefState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucSefState.setDescription(' ֡ ')
adlbAtucLosState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLosState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLosState.setDescription(' źʧ ')
adlbAtucLofState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLofState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLofState.setDescription(' ֡ʧ ')
adlbAtucFebeInterleaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFebeInterleaveState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFebeInterleaveState.setDescription(' ˽֯ͨCRCУ,ϱFEBE:Զ˿ ')
adlbAtucFebeFastState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFebeFastState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFebeFastState.setDescription(' ˷ǽ֯ͨCRCУ,ϱFEBE:Զ˿ ')
adlbAtucFecInterleaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFecInterleaveState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFecInterleaveState.setDescription(' ˽֯ͨǰУָʾ ')
adlbAtucFecFastState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucFecFastState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucFecFastState.setDescription(' ˷ǽ֯ͨǰУָʾ ')
hwMusaAdlbAturLineDefectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13), )
if mibBuilder.loadTexts: hwMusaAdlbAturLineDefectTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturLineDefectTable.setDescription('Musa adlb port ATUR line defect state table.')
hwMusaAdlbAturLineDefectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAturLineDefectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturLineDefectEntry.setDescription('This list contains adlb port ATUR line defect state variables.')
adlbAturLpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturLpsState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturLpsState.setDescription(' Զ豸ʧƵź ')
adlbAturRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturRdiState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturRdiState.setDescription(' Զ豸Զ˹(sef)ָʾ ')
adlbAturLosState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturLosState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturLosState.setDescription(' Զ豸źʧ ')
adlbAturFriState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFriState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFriState.setDescription(' Զ豸ԶʧЧָʾ ')
adlbAturFebeInterleaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFebeInterleaveState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFebeInterleaveState.setDescription(' Զ˽֯ͨCRCУ,ϱFEBE:Զ˿ ')
adlbAturFebeFastState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFebeFastState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFebeFastState.setDescription(' Զ˷ǽ֯ͨCRCУ,ϱFEBE:Զ˿ ')
adlbAturFecInterleaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFecInterleaveState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFecInterleaveState.setDescription(' Զ˽֯ͨǰУָʾ ')
adlbAturFecFastState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturFecFastState.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturFecFastState.setDescription(' Զ˷ǽ֯ͨǰУָʾ ')
hwMusaAdlbAtucAtmDefectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14), )
if mibBuilder.loadTexts: hwMusaAdlbAtucAtmDefectTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucAtmDefectTable.setDescription('Musa adlb port ATUC atm defect state table.')
hwMusaAdlbAtucAtmDefectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAtucAtmDefectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAtucAtmDefectEntry.setDescription('This list contains adlb port ATUC atm defect state variables.')
adlbAtucHecInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucHecInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucHecInterleave.setDescription(' ˽֯ͨԪͷУָʾ ')
adlbAtucHecFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucHecFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucHecFast.setDescription(' ˿ͨԪͷУָʾ ')
adlbAtucNcdInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucNcdInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucNcdInterleave.setDescription(' ˽֯ͨԪָʾ ')
adlbAtucNcdFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucNcdFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucNcdFast.setDescription(' ˿ͨԪָʾ ')
adlbAtucOcdInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucOcdInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucOcdInterleave.setDescription(' ˽֯ͨԪ綪ʧָʾ ')
adlbAtucOcdFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucOcdFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucOcdFast.setDescription(' ˷ǽ֯ͨԪ綪ʧָʾ ')
adlbAtucLcdInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLcdInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLcdInterleave.setDescription(' ˽֯ͨԪ綪ʧ ')
adlbAtucLcdFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAtucLcdFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAtucLcdFast.setDescription(' ˷ǽ֯ͨԪ綪ʧ ')
hwMusaAdlbAturAtmDefectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15), )
if mibBuilder.loadTexts: hwMusaAdlbAturAtmDefectTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturAtmDefectTable.setDescription('Musa adlb port ATUR atm defect state table.')
hwMusaAdlbAturAtmDefectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbAturAtmDefectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbAturAtmDefectEntry.setDescription('This list contains adlb port ATUR atm defect state variables.')
adlbAturHecInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturHecInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturHecInterleave.setDescription(' Զ˽֯ͨԪͷУָʾ ')
adlbAturHecFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturHecFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturHecFast.setDescription(' Զ˿ͨԪͷУָʾ ')
adlbAturNcdInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturNcdInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturNcdInterleave.setDescription(' Զ˽֯ͨԪָʾ ')
adlbAturNcdFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturNcdFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturNcdFast.setDescription(' Զ˿ͨԪָʾ ')
adlbAturOcdInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturOcdInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturOcdInterleave.setDescription(' Զ˽֯ͨԪ綪ʧָʾ ')
adlbAturOcdFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturOcdFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturOcdFast.setDescription(' Զ˷ǽ֯ͨԪ綪ʧָʾ ')
adlbAturLcdInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturLcdInterleave.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturLcdInterleave.setDescription(' Զ˽֯ͨԪ綪ʧ ')
adlbAturLcdFast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbAturLcdFast.setStatus('mandatory')
if mibBuilder.loadTexts: adlbAturLcdFast.setDescription(' Զ˷ǽ֯ͨԪ綪ʧ ')
hwMusaAdlbPortBitsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 16), )
if mibBuilder.loadTexts: hwMusaAdlbPortBitsTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortBitsTable.setDescription('Musa adlb port bits distribution table.')
hwMusaAdlbPortBitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 16, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbPortBitsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortBitsEntry.setDescription('This list contains adlb port bits distribution variables.')
adlbDnBitsPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnBitsPerFrame.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnBitsPerFrame.setDescription(' ÿ֡BIT ')
adlbUpBitsPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpBitsPerFrame.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpBitsPerFrame.setDescription(' ÿ֡BIT ')
adlbDnBitAllocate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnBitAllocate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnBitAllocate.setDescription(' زBITķ ')
adlbUpBitAllocate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpBitAllocate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpBitAllocate.setDescription(' زBITķ ')
hwMusaAdlbCarrierSnrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 17), )
if mibBuilder.loadTexts: hwMusaAdlbCarrierSnrTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbCarrierSnrTable.setDescription('Musa adlb port carrier snr distribution table.')
hwMusaAdlbCarrierSnrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 17, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbCarrierSnrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbCarrierSnrEntry.setDescription('This list contains adlb port carrier snr distribution variables.')
adlbDnSnrAllocate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbDnSnrAllocate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbDnSnrAllocate.setDescription(' زȵķ(λ:0.5db) ')
adlbUpSnrAllocate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 4, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adlbUpSnrAllocate.setStatus('mandatory')
if mibBuilder.loadTexts: adlbUpSnrAllocate.setDescription(' زȵķ(λ:0.5db) ')
hwMusaAdlbPortTestTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 5, 1), )
if mibBuilder.loadTexts: hwMusaAdlbPortTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortTestTable.setDescription('Musa adlb port test table.')
hwMusaAdlbPortTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 5, 1, 1), ).setIndexNames((0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaFrameIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "hwMusaSlotIndex"), (0, "HUAWEI-MUSA-MA5100-CONFMIB", "adlbPortIndex"))
if mibBuilder.loadTexts: hwMusaAdlbPortTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwMusaAdlbPortTestEntry.setDescription('This list contains Musa adlb port test variables.')
adlbPortTestOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 6, 5, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("atmLoop", 1), ("aturErrCrc", 2), ("stopAturErrCrc", 3), ("sendErrCrc", 4), ("stopSendErrCrc", 5), ("aturAutoLoop", 6), ("aturChgLoopParam", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: adlbPortTestOper.setStatus('mandatory')
if mibBuilder.loadTexts: adlbPortTestOper.setDescription(' ˿ڻأW( 1:MODEM˿ڵATM(AS0LS0ͨ) 2:ADLBATU-RϱƻCRC 3:ADLBֹͣATU-RϱƻCRC 4:ADLBƻCRC 5:ADLBƻCRCֹͣ 6:ADLBATU-RԲ 7:ADLBATU-R\u07b8ĲԲ(˥) ) ')
mibBuilder.exportSymbols("HUAWEI-MUSA-MA5100-CONFMIB", adlbAturVendorId=adlbAturVendorId, adlbMaxUpAttainableRate=adlbMaxUpAttainableRate, hwMusaPvcPvpState=hwMusaPvcPvpState, adlbAtucPrev15MinErrSecond=adlbAtucPrev15MinErrSecond, adlbMaxUsRateC0=adlbMaxUsRateC0, adlbDnParityInterleave=adlbDnParityInterleave, adlbAtucPrev15MinSuperFrameSent=adlbAtucPrev15MinSuperFrameSent, hwMusaRegionPvcConfTable=hwMusaRegionPvcConfTable, adlbUpBitAllocate=adlbUpBitAllocate, adlbPortPfmThresValue5=adlbPortPfmThresValue5, hwMuasSrcSlotId=hwMuasSrcSlotId, adlbAturLossSecond=adlbAturLossSecond, adlbAtucTimeCount=adlbAtucTimeCount, adlbNTROptionEnable=adlbNTROptionEnable, adlbUpInterleaveDepth=adlbUpInterleaveDepth, adlbAtucCurr1DayFecSecond=adlbAtucCurr1DayFecSecond, adlbAtucBitswaps=adlbAtucBitswaps, hwMusaAdlbAturAtmDefectEntry=hwMusaAdlbAturAtmDefectEntry, adlbConfigOrAutoDelay=adlbConfigOrAutoDelay, adlbAtucCurr1DayBgBENotSES=adlbAtucCurr1DayBgBENotSES, adlbAtucPrev15MinHighBitErr=adlbAtucPrev15MinHighBitErr, adlbAturPrev15MinErrSecond=adlbAturPrev15MinErrSecond, hwMusaAdlbAtucPerfCurr24hDataTable=hwMusaAdlbAtucPerfCurr24hDataTable, hwMusaDestToSrcTraffic=hwMusaDestToSrcTraffic, adlbDsSingleOrDual=adlbDsSingleOrDual, hwMusaAdlbAturAlarmDataTable=hwMusaAdlbAturAlarmDataTable, adlbAturPrev15MinFecErrFast=adlbAturPrev15MinFecErrFast, adlbUsMsOrDmtNumber=adlbUsMsOrDmtNumber, adlbAtucPrev15MinUnavailableSecond=adlbAtucPrev15MinUnavailableSecond, hwMusaAdlbPortPfmThresEntry=hwMusaAdlbPortPfmThresEntry, adlbAtucHecFast=adlbAtucHecFast, adlbAtucCurr1DayFastRetrainFail=adlbAtucCurr1DayFastRetrainFail, adlbAturFriState=adlbAturFriState, adlbChipsetOper=adlbChipsetOper, adlbUpSymbolPerCodeInterleave=adlbUpSymbolPerCodeInterleave, adlbAtucPrev15MinTimeCount=adlbAtucPrev15MinTimeCount, adlbAturCurr1DaySevereErrSecond=adlbAturCurr1DaySevereErrSecond, adlbAtucPrev1DayBgBENotSES=adlbAtucPrev1DayBgBENotSES, adlbAtucPrev15MinFastRetrain=adlbAtucPrev15MinFastRetrain, hwMusaFrameNumber=hwMusaFrameNumber, adlbAtucCurr1DayLossSecond=adlbAtucCurr1DayLossSecond, adlbAtucCurr1DaySevereErrSecond=adlbAtucCurr1DaySevereErrSecond, adlbAtucPrev1DaySuperFrameSent=adlbAtucPrev1DaySuperFrameSent, hwMusaAdlbPortTable=hwMusaAdlbPortTable, hwMusaAdlbPortActTable=hwMusaAdlbPortActTable, adlbPortPfmThresId7=adlbPortPfmThresId7, adlbClearAlarmstatistics=adlbClearAlarmstatistics, hwMusaAdlbBoardInfoEntry=hwMusaAdlbBoardInfoEntry, adlbAturCurr1DayLpr=adlbAturCurr1DayLpr, adlbAturFebeFastState=adlbAturFebeFastState, hwMusaAdlbPortActEntry=hwMusaAdlbPortActEntry, adlbAtucPrev15MinLof=adlbAtucPrev15MinLof, adlbAtucFastRetrainFail=adlbAtucFastRetrainFail, hwMusaFromLanTrafficId=hwMusaFromLanTrafficId, adlbAs0DnRate=adlbAs0DnRate, hwMusaSlotConfTable=hwMusaSlotConfTable, adlbAtucSefState=adlbAtucSefState, adlbAtucPrev1DayRetrain=adlbAtucPrev1DayRetrain, adlbAtucPrev15MinFecErrInterleave=adlbAtucPrev15MinFecErrInterleave, adlbMaxDnAttainableRate=adlbMaxDnAttainableRate, hwMusaAdlbAturPerfDataEntry=hwMusaAdlbAturPerfDataEntry, adlbAtucFecSecond=adlbAtucFecSecond, adlbPortPfmThresValue4=adlbPortPfmThresValue4, adlbAtucCurr1DayFecErrInterleave=adlbAtucCurr1DayFecErrInterleave, hwMusaRegionPvcConfEntry=hwMusaRegionPvcConfEntry, adlbAturCountryCode=adlbAturCountryCode, adlbAturCrcErrFast=adlbAturCrcErrFast, adlbAtucSuperFrameSent=adlbAtucSuperFrameSent, hwMusaAllPvcConfEntry=hwMusaAllPvcConfEntry, adlbAtucLpsState=adlbAtucLpsState, adlbAturLpr=adlbAturLpr, adlbAturRfi=adlbAturRfi, adlbAturCurr1DayErrFrames=adlbAturCurr1DayErrFrames, adlbAturPrev1DayLossSecond=adlbAturPrev1DayLossSecond, hwMusaAdlbPortPfmThresTable=hwMusaAdlbPortPfmThresTable, adlbPortPfmThresValue7=adlbPortPfmThresValue7, adlbDelayOrDepth=adlbDelayOrDepth, hwMusaCidIndex=hwMusaCidIndex, adlbAtucVersionNo=adlbAtucVersionNo, adlbAtucPrev15MinBitswaps=adlbAtucPrev15MinBitswaps, adlbAtucFecInterleaveState=adlbAtucFecInterleaveState, adlbPortPfmThresId4=adlbPortPfmThresId4, adlbAturAlarmValidIntervals=adlbAturAlarmValidIntervals, adlbAtucPrev1DayErrFrames=adlbAtucPrev1DayErrFrames, hwMusaAdlbAtucLineDefectTable=hwMusaAdlbAtucLineDefectTable, adlbMinUsRateC0=adlbMinUsRateC0, adlbPortPfmThresId5=adlbPortPfmThresId5, adlbServiceType=adlbServiceType, hwMusaAdlbAturLineDefectEntry=hwMusaAdlbAturLineDefectEntry, adlbDsExcessRatio=adlbDsExcessRatio, adlbAtucFecErrInterleave=adlbAtucFecErrInterleave, hwMusaSysMib=hwMusaSysMib, adlbAtucPerfValidIntervals=adlbAtucPerfValidIntervals, adlbAtucLossSecond=adlbAtucLossSecond, adlbAtucFecFastState=adlbAtucFecFastState, adlbAturLcdFast=adlbAturLcdFast, adlbDsTargetMargin=adlbDsTargetMargin, adlbLs0DnRate=adlbLs0DnRate, adlbDnBitsPerFrame=adlbDnBitsPerFrame, hwMusaAdlbChipsetMtTable=hwMusaAdlbChipsetMtTable, hwMusaSrcBoardVpi=hwMusaSrcBoardVpi, hwMusaSlotConfEntry=hwMusaSlotConfEntry, adlbAturCrcErrInterleave=adlbAturCrcErrInterleave, adlbUsMinMargin=adlbUsMinMargin, hwMusaAdlbAturAtmDefectTable=hwMusaAdlbAturAtmDefectTable, adlbAtucPrev15MinSevereErrSecond=adlbAtucPrev15MinSevereErrSecond, adlbAtucCurr1DayErrFrames=adlbAtucCurr1DayErrFrames, adlbAturHecInterleave=adlbAturHecInterleave, hwMusaDestUpcEpdPpd=hwMusaDestUpcEpdPpd, hwMusaAdlbConf=hwMusaAdlbConf, adlbAturPrev15MinSevereErrSecond=adlbAturPrev15MinSevereErrSecond, adlbAtucAlarmValidIntervals=adlbAtucAlarmValidIntervals, adlbAturPrev1DayTimeCount=adlbAturPrev1DayTimeCount, adlbAtucPrev15MinErrFrames=adlbAtucPrev15MinErrFrames, hwMusaAdlbChipset=hwMusaAdlbChipset, adlbByModemCodeVer=adlbByModemCodeVer, adlbAturPrev1DayErrSecond=adlbAturPrev1DayErrSecond, adlbUpAttenuation=adlbUpAttenuation, hwMusaSlotGroup=hwMusaSlotGroup, hwMusaVlanId=hwMusaVlanId, adlbDnSymbolPerCodeInterleave=adlbDnSymbolPerCodeInterleave, adlbAtucOcdFast=adlbAtucOcdFast, adlbAtucNonSESFrames=adlbAtucNonSESFrames, adlbAturErrSecond=adlbAturErrSecond, adlbAtucCrcErrInterleave=adlbAtucCrcErrInterleave, adlbAturCurr1DayLos=adlbAturCurr1DayLos, adlbAturCurr1DayCrcErrInterleave=adlbAturCurr1DayCrcErrInterleave, adlbAtucPrev1DayBitswaps=adlbAtucPrev1DayBitswaps, adlbAturFebeInterleaveState=adlbAturFebeInterleaveState, adlbPortPfmThresId3=adlbPortPfmThresId3, adlbAtucPrev15MinFecSecond=adlbAtucPrev15MinFecSecond, adlbAturCurr1DayFecErrInterleave=adlbAturCurr1DayFecErrInterleave, adlbAturCurr1DayUnavailableSecond=adlbAturCurr1DayUnavailableSecond, adlbAturErrFrames=adlbAturErrFrames, hwMusaAdlbAtucPerfDataTable=hwMusaAdlbAtucPerfDataTable, adlbAturFecInterleaveState=adlbAturFecInterleaveState, hwMusaAllPvcOperater=hwMusaAllPvcOperater, adlbAturCurr1DayCrcErrFast=adlbAturCurr1DayCrcErrFast, hwMusaAdlbCarrierSnrEntry=hwMusaAdlbCarrierSnrEntry, adlbMinDsRateC0=adlbMinDsRateC0, adlbPortPfmThresValue3=adlbPortPfmThresValue3, adlbAtucPrev15MinCrcErrFast=adlbAtucPrev15MinCrcErrFast, hwMusaAdlbAturPerfPrev24hDataTable=hwMusaAdlbAturPerfPrev24hDataTable, adlbAs1DnRate=adlbAs1DnRate, adlbDnBitAllocate=adlbDnBitAllocate, adlbAtucPrev1DayFecSecond=adlbAtucPrev1DayFecSecond, hwMusaAdlbPortBitsTable=hwMusaAdlbPortBitsTable, adlbPortTrainStandard=adlbPortTrainStandard, adlbAtucCurr1DaySuperFrameSent=adlbAtucCurr1DaySuperFrameSent, hwMusaFrameConfTable=hwMusaFrameConfTable, adlbAturHighBitErr=adlbAturHighBitErr, adlbPortTxCell=adlbPortTxCell, adlbAturPrev15MinRfi=adlbAturPrev15MinRfi, adlbAtucLcdInterleave=adlbAtucLcdInterleave, adlbAturCurr1DayTimeCount=adlbAturCurr1DayTimeCount, adlbDnInterleaveDelay=adlbDnInterleaveDelay, adlbDsMsOrDmtNumber=adlbDsMsOrDmtNumber, adlbAtucLos=adlbAtucLos, adlbUpSnrAllocate=adlbUpSnrAllocate, hwMusaAdlbPortTestEntry=hwMusaAdlbPortTestEntry, adlbAtucCrcErrFast=adlbAtucCrcErrFast, adlbPortTemplateId=adlbPortTemplateId, hwMusaAdlbAturPerfCurr24hDataEntry=hwMusaAdlbAturPerfCurr24hDataEntry, hwMusaAdlbAturPerfPrev15mDataTable=hwMusaAdlbAturPerfPrev15mDataTable, adlbAturPrev1DayErrFrames=adlbAturPrev1DayErrFrames, adlbAtucCurr1DayCrcErrFast=adlbAtucCurr1DayCrcErrFast, adlbAtucPrev15MinBgBENotSES=adlbAtucPrev15MinBgBENotSES, adlbAtucLofState=adlbAtucLofState, adlbUpBitsPerFrame=adlbUpBitsPerFrame, adlbAtucErrFrames=adlbAtucErrFrames, hwMusaAdlbCarrierSnrTable=hwMusaAdlbCarrierSnrTable, adlbAtucPrev15MinRetrain=adlbAtucPrev15MinRetrain, hwMusaAdlbPortEntry=hwMusaAdlbPortEntry, adlbAturPrev1DayBgBENotSES=adlbAturPrev1DayBgBENotSES, adlbMaxDsRateC0=adlbMaxDsRateC0, adlbLs1UpRate=adlbLs1UpRate, hwMusaAdlbPortDeviceEntry=hwMusaAdlbPortDeviceEntry, adlbDnAttenuation=adlbDnAttenuation, adlbAtucPrev15MinFecErrFast=adlbAtucPrev15MinFecErrFast, adlbAturRdiState=adlbAturRdiState, adlbAturPrev15MinLpr=adlbAturPrev15MinLpr, adlbAturPrev1DaySevereErrSecond=adlbAturPrev1DaySevereErrSecond, hwMusaSrcPortVlanVccId=hwMusaSrcPortVlanVccId, adlbProductId=adlbProductId, adlbFrameMode=adlbFrameMode, adlbUpSymbolPerCodeFast=adlbUpSymbolPerCodeFast, adlbAtucCurr1DayTimeCount=adlbAtucCurr1DayTimeCount, hwMusaFrame=hwMusaFrame, adlbAtucCurr1DayFastRetrain=adlbAtucCurr1DayFastRetrain, adlbAturFecSecond=adlbAturFecSecond, adlbAturPrev15MinErrFrames=adlbAturPrev15MinErrFrames, adlbUsExcessRatio=adlbUsExcessRatio, hwMusaAdlbAtucPerfCurr24hDataEntry=hwMusaAdlbAtucPerfCurr24hDataEntry, hwMusaSrcBoardVci=hwMusaSrcBoardVci, adlbAturPrev15MinUnavailableSecond=adlbAturPrev15MinUnavailableSecond, adlbAtucPrev1DayFastRetrainFail=adlbAtucPrev1DayFastRetrainFail, hwMusaAdlb=hwMusaAdlb, adlbAturCurr1DayErrSecond=adlbAturCurr1DayErrSecond, adlbAtucPrev1DayCrcErrInterleave=adlbAtucPrev1DayCrcErrInterleave, adlbAtucHecInterleave=adlbAtucHecInterleave, adlbAtucOamSwVer=adlbAtucOamSwVer, adlbAtucSevereErrSecond=adlbAtucSevereErrSecond, adlbAturPrev1DayUnavailableSecond=adlbAturPrev1DayUnavailableSecond, hwMusaFrameConfEntry=hwMusaFrameConfEntry, hwMusaAdlbAtucLineDefectEntry=hwMusaAdlbAtucLineDefectEntry, adlbClearPerfstatistics=adlbClearPerfstatistics, adlbAtucPrev15MinSuperFrameReceived=adlbAtucPrev15MinSuperFrameReceived, adlbAturPrev1DayLos=adlbAturPrev1DayLos, adlbAtucRomSwVer=adlbAtucRomSwVer, adlbAturLos=adlbAturLos, hwMusaAdlbAturPerfCurr24hDataTable=hwMusaAdlbAturPerfCurr24hDataTable, adlbPortPfmThresValue8=adlbPortPfmThresValue8, adlbUpParityFast=adlbUpParityFast, adlbAturPrev15MinHighBitErr=adlbAturPrev15MinHighBitErr, adlbAtucFecErrFast=adlbAtucFecErrFast, adlbAtucPrev15MinFastRetrainFail=adlbAtucPrev15MinFastRetrainFail, hwMusaSlot=hwMusaSlot, hwMusaAdlbAturPerfPrev24hDataEntry=hwMusaAdlbAturPerfPrev24hDataEntry, adlbAturUnavailableSecond=adlbAturUnavailableSecond, adlbAtucFebeFastState=adlbAtucFebeFastState, adlbAturBgBENotSES=adlbAturBgBENotSES, adlbAturPrev15MinFecErrInterleave=adlbAturPrev15MinFecErrInterleave, adlbAturPrev1DayFecSecond=adlbAturPrev1DayFecSecond, adlbAturNcdFast=adlbAturNcdFast, adlbTotalOutputPower=adlbTotalOutputPower, hwMusaSlotIndex=hwMusaSlotIndex, adlbAtucPrev15MinLossSecond=adlbAtucPrev15MinLossSecond, adlbAturAdslCapability=adlbAturAdslCapability, adlbPortPfmThresValue2=adlbPortPfmThresValue2, hwMusaVlanIciIndex=hwMusaVlanIciIndex, adlbAtucPrev1DaySevereErrSecond=adlbAtucPrev1DaySevereErrSecond, hwMusaAdlbAtucPerfPrev15mDataTable=hwMusaAdlbAtucPerfPrev15mDataTable, adlbAtucCurr1DayLos=adlbAtucCurr1DayLos, adlbAturLcdInterleave=adlbAturLcdInterleave, hwMusaFrameIndex=hwMusaFrameIndex, adlbAtucCurr1DayLof=adlbAtucCurr1DayLof, adlbUsSingleOrDual=adlbUsSingleOrDual, adlbAtucPrev1DayLossSecond=adlbAtucPrev1DayLossSecond, hwMusaAdlbPortLineDataEntry=hwMusaAdlbPortLineDataEntry, adlbAtucCurr1DaySuperFrameReceived=adlbAtucCurr1DaySuperFrameReceived, adlbAtucPrev1DayNonSESFrames=adlbAtucPrev1DayNonSESFrames, hwMusaAdlbBoard=hwMusaAdlbBoard, adlbAturHecFast=adlbAturHecFast, adlbAtucPrev1DayLos=adlbAtucPrev1DayLos, hwMusaDestSlotId=hwMusaDestSlotId, adlbAtucCurr1DayRetrain=adlbAtucCurr1DayRetrain, adlbAturPrev1DayFecErrInterleave=adlbAturPrev1DayFecErrInterleave, adlbAtucNcdInterleave=adlbAtucNcdInterleave, hwMusaDestFrameId=hwMusaDestFrameId, adlbAtucFastRetrain=adlbAtucFastRetrain, adlbAtucRomSwBuildDate=adlbAtucRomSwBuildDate, hwMusaAdlbAturLineDefectTable=hwMusaAdlbAturLineDefectTable, adlbAturFecErrInterleave=adlbAturFecErrInterleave, adlbAturPrev1DayHighBitErr=adlbAturPrev1DayHighBitErr)
mibBuilder.exportSymbols("HUAWEI-MUSA-MA5100-CONFMIB", adlbTrellisModeEnable=adlbTrellisModeEnable, hwMusaAdlPortId=hwMusaAdlPortId, adlbAturFecErrFast=adlbAturFecErrFast, adlbAtucOamSwBuildDate=adlbAtucOamSwBuildDate, adlbAturPrev15MinBgBENotSES=adlbAturPrev15MinBgBENotSES, adlbAturFecFastState=adlbAturFecFastState, adlbMinUsRateC1=adlbMinUsRateC1, adlbAturSevereErrSecond=adlbAturSevereErrSecond, hwMa5100Mib=hwMa5100Mib, adlbAtucPrev1DayUnavailableSecond=adlbAtucPrev1DayUnavailableSecond, adlbAturPrev15MinCrcErrFast=adlbAturPrev15MinCrcErrFast, adlbUsTargetMargin=adlbUsTargetMargin, hwMusaAdlbTest=hwMusaAdlbTest, adlbAturPrev15MinCrcErrInterleave=adlbAturPrev15MinCrcErrInterleave, adlbAturCurr1DayBgBENotSES=adlbAturCurr1DayBgBENotSES, hwMusaAdlbAtucPerfPrev24hDataEntry=hwMusaAdlbAtucPerfPrev24hDataEntry, adlbFastOrInterleave=adlbFastOrInterleave, adlbPortPfmThresValue6=adlbPortPfmThresValue6, hwMusaAdlbPortDeviceTable=hwMusaAdlbPortDeviceTable, adlbDnNoiseMargin=adlbDnNoiseMargin, DisplayString=DisplayString, adlbAtucSuperFrameReceived=adlbAtucSuperFrameReceived, hwMusaAllPvcConfTable=hwMusaAllPvcConfTable, adlbAtucLof=adlbAtucLof, adlbAturTimeCount=adlbAturTimeCount, adlbPortPfmThresId1=adlbPortPfmThresId1, adlbAtucFebeInterleaveState=adlbAtucFebeInterleaveState, adlbAtucCurr1DayNonSESFrames=adlbAtucCurr1DayNonSESFrames, adlbMaxUsRateC1=adlbMaxUsRateC1, hwMusaAdlbAtucPerfPrev24hDataTable=hwMusaAdlbAtucPerfPrev24hDataTable, hwMusaAdlbAtucPerfPrev15mDataEntry=hwMusaAdlbAtucPerfPrev15mDataEntry, hwMusaToLanTrafficId=hwMusaToLanTrafficId, adlbAturCurr1DayRfi=adlbAturCurr1DayRfi, adlbLs0UpRate=adlbLs0UpRate, adlbAturNonSESFrames=adlbAturNonSESFrames, adlbAtucCurr1DayBitswaps=adlbAtucCurr1DayBitswaps, adlbItuProviderCode=adlbItuProviderCode, adlbAturLpsState=adlbAturLpsState, adlbAtucLosState=adlbAtucLosState, adlbAturOcdFast=adlbAturOcdFast, adlbAtucPrev1DayFecErrFast=adlbAtucPrev1DayFecErrFast, adlbAtucUnavailableSecond=adlbAtucUnavailableSecond, hwMusaAdlbAtucAtmDefectEntry=hwMusaAdlbAtucAtmDefectEntry, adlbAtucHighBitErr=adlbAtucHighBitErr, hwMusaAdlbAturPerfDataTable=hwMusaAdlbAturPerfDataTable, adlbDsMinMargin=adlbDsMinMargin, hwMusaSrcUpcEpdPpd=hwMusaSrcUpcEpdPpd, adlbAturVersion=adlbAturVersion, adlbUpNoiseMargin=adlbUpNoiseMargin, hwMusaAdlbChipsetMtEntry=hwMusaAdlbChipsetMtEntry, adlbAturPrev15MinNonSESFrames=adlbAturPrev15MinNonSESFrames, hwMusaAdlbAturAlarmDataEntry=hwMusaAdlbAturAlarmDataEntry, adlbAtucPrev1DayLof=adlbAtucPrev1DayLof, adlbAtucVendorId=adlbAtucVendorId, adlbPortOper=adlbPortOper, hwMusaSrcFrameId=hwMusaSrcFrameId, adlbAtucPrev1DayFecErrInterleave=adlbAtucPrev1DayFecErrInterleave, adlbAtucCurr1DayCrcErrInterleave=adlbAtucCurr1DayCrcErrInterleave, hwMusaDestBoardVci=hwMusaDestBoardVci, hwMusaAdlbPfm=hwMusaAdlbPfm, hwMusaDestPortVlanVccId=hwMusaDestPortVlanVccId, adlbTemplateOperate=adlbTemplateOperate, adlbPortRxCell=adlbPortRxCell, adlbPortIndex=adlbPortIndex, adlbAtucPrev1DayErrSecond=adlbAtucPrev1DayErrSecond, adlbAturPrev1DayCrcErrFast=adlbAturPrev1DayCrcErrFast, adlbAturPrev15MinTimeCount=adlbAturPrev15MinTimeCount, hwMusaAdlVci=hwMusaAdlVci, hwMusaAdlbAturPerfPrev15mDataEntry=hwMusaAdlbAturPerfPrev15mDataEntry, adlbAtucPrev1DayFastRetrain=adlbAtucPrev1DayFastRetrain, hwMusaAdlPortOperat=hwMusaAdlPortOperat, adlbAturCurr1DayFecSecond=adlbAturCurr1DayFecSecond, adlbDnInterleaveDepth=adlbDnInterleaveDepth, hwMusaSrcToDestTraffic=hwMusaSrcToDestTraffic, hwMusaAdlSlotId=hwMusaAdlSlotId, adlbAtucPrev15MinLos=adlbAtucPrev15MinLos, adlbDnSymbolPerCodeFast=adlbDnSymbolPerCodeFast, adlbByDiagCodeVer=adlbByDiagCodeVer, adlbChipsetIndex=adlbChipsetIndex, adlbAturPrev1DayRfi=adlbAturPrev1DayRfi, adlbAtucCurr1DayUnavailableSecond=adlbAtucCurr1DayUnavailableSecond, adlbAtucPrev1DaySuperFrameReceived=adlbAtucPrev1DaySuperFrameReceived, adlbAturPrev1DayLpr=adlbAturPrev1DayLpr, hwMusaAdlbBoardInfoTable=hwMusaAdlbBoardInfoTable, adlbAtucErrSecond=adlbAtucErrSecond, adlbAturPrev15MinFecSecond=adlbAturPrev15MinFecSecond, adlbAtucPrev15MinCrcErrInterleave=adlbAtucPrev15MinCrcErrInterleave, adlbDnSnrAllocate=adlbDnSnrAllocate, adlbAtucCurr1DayHighBitErr=adlbAtucCurr1DayHighBitErr, adlbAtucOcdInterleave=adlbAtucOcdInterleave, adlbAtucPrev1DayCrcErrFast=adlbAtucPrev1DayCrcErrFast, adlbAtucRetrain=adlbAtucRetrain, hwMusaDestBoardVpi=hwMusaDestBoardVpi, adlbAturCurr1DayNonSESFrames=adlbAturCurr1DayNonSESFrames, adlbAturProviderCode=adlbAturProviderCode, adlbDnParityFast=adlbDnParityFast, adlbUpInterleaveDelay=adlbUpInterleaveDelay, adlbAturLosState=adlbAturLosState, adlbAturPrev1DayNonSESFrames=adlbAturPrev1DayNonSESFrames, adlbAturPrev1DayCrcErrInterleave=adlbAturPrev1DayCrcErrInterleave, adlbAtucCurr1DayFecErrFast=adlbAtucCurr1DayFecErrFast, adlbMaxDsRateC1=adlbMaxDsRateC1, adlbPortPfmThresId8=adlbPortPfmThresId8, adlbAturPrev15MinLos=adlbAturPrev15MinLos, adlbAturPerfValidIntervals=adlbAturPerfValidIntervals, adlbAtucBgBENotSES=adlbAtucBgBENotSES, adlbPortTestOper=adlbPortTestOper, hwMusaAdlFrameId=hwMusaAdlFrameId, hwMusaAdlbAtucAtmDefectTable=hwMusaAdlbAtucAtmDefectTable, adlbAturPrev1DayFecErrFast=adlbAturPrev1DayFecErrFast, adlbAtucLcdFast=adlbAtucLcdFast, hwMusaAdlbPortTestTable=hwMusaAdlbPortTestTable, hwMusaAdlbAtucPerfDataEntry=hwMusaAdlbAtucPerfDataEntry, hwMusaAdlbAtucAlarmDataTable=hwMusaAdlbAtucAlarmDataTable, hwMusaTypeOfPvcPvpindex=hwMusaTypeOfPvcPvpindex, hwMusaEndOfMib=hwMusaEndOfMib, adlbPortState=adlbPortState, adlbAturOcdInterleave=adlbAturOcdInterleave, adlbCustomId=adlbCustomId, adlbIfConfigSetToDefault=adlbIfConfigSetToDefault, adlbEocClearChannelMode=adlbEocClearChannelMode, hwMusaAdlbPortBitsEntry=hwMusaAdlbPortBitsEntry, adlbAtucCurr1DayErrSecond=adlbAtucCurr1DayErrSecond, adlbAtucNcdFast=adlbAtucNcdFast, adlbPortPfmThresValue1=adlbPortPfmThresValue1, adlbItuCountryCode=adlbItuCountryCode, adlbAturCurr1DayHighBitErr=adlbAturCurr1DayHighBitErr, adlbAturNcdInterleave=adlbAturNcdInterleave, adlbAtucPrev1DayHighBitErr=adlbAtucPrev1DayHighBitErr, adlbAtucPrev15MinNonSESFrames=adlbAtucPrev15MinNonSESFrames, hwMusaAdlVpi=hwMusaAdlVpi, hwMusaAdlbAtucAlarmDataEntry=hwMusaAdlbAtucAlarmDataEntry, adlbPortPfmThresId2=adlbPortPfmThresId2, hwMusaAdlbPortLineDataTable=hwMusaAdlbPortLineDataTable, adlbUpParityInterleave=adlbUpParityInterleave, adlbMinDsRateC1=adlbMinDsRateC1, adlbAturCurr1DayFecErrFast=adlbAturCurr1DayFecErrFast, adlbAturCurr1DayLossSecond=adlbAturCurr1DayLossSecond, adlbAtucPrev1DayTimeCount=adlbAtucPrev1DayTimeCount, adlbAturPrev15MinLossSecond=adlbAturPrev15MinLossSecond, adlbPortPfmThresId6=adlbPortPfmThresId6)
