#
# PySNMP MIB module NETWORK-ALCHEMY-VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETWORK-ALCHEMY-VPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
vpn, netalModules = mibBuilder.importSymbols("NETAL-SMI", "vpn", "netalModules")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, MibIdentifier, ObjectIdentity, Bits, Counter32, iso, NotificationType, Counter64, Integer32, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Bits", "Counter32", "iso", "NotificationType", "Counter64", "Integer32", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
networkAlchemyVPNMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2972, 5, 5))
networkAlchemyVPNMIB.setRevisions(('2000-10-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: networkAlchemyVPNMIB.setRevisionsDescriptions(('Cleanup.',))
if mibBuilder.loadTexts: networkAlchemyVPNMIB.setLastUpdated('200010250000Z')
if mibBuilder.loadTexts: networkAlchemyVPNMIB.setOrganization('Network Alchemy, Inc.')
if mibBuilder.loadTexts: networkAlchemyVPNMIB.setContactInfo(' Network Alchemy Customer Support Postal: 1538 Pacific Av. Santa Cruz, CA 95060 USA E-Mail: snmp-contact@network-alchemy.com')
if mibBuilder.loadTexts: networkAlchemyVPNMIB.setDescription('Virtual Private Network (L2TP and PPTP) MIB module.')
vpnL2TPTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnL2TPTunnels.setStatus('current')
if mibBuilder.loadTexts: vpnL2TPTunnels.setDescription('Number of L2TP tunnels')
vpnActiveL2TPTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnActiveL2TPTunnels.setStatus('current')
if mibBuilder.loadTexts: vpnActiveL2TPTunnels.setDescription('Number of Active L2TP Tunnels')
vpnL2TPSessions = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnL2TPSessions.setStatus('current')
if mibBuilder.loadTexts: vpnL2TPSessions.setDescription('Number of L2TP Sessions')
vpnActiveL2TPSessions = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnActiveL2TPSessions.setStatus('current')
if mibBuilder.loadTexts: vpnActiveL2TPSessions.setDescription('Number of Active L2TP Sessions')
vpnPPTPTS = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnPPTPTS.setStatus('current')
if mibBuilder.loadTexts: vpnPPTPTS.setDescription('Number of PPTP Tunnel&Sessions. Number of PPTP tunnels are equal to the number of PPTP Sessions')
vpnActivePPTPTS = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnActivePPTPTS.setStatus('current')
if mibBuilder.loadTexts: vpnActivePPTPTS.setDescription('# of Active PPTP Tunnels&Sessions')
vpnTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7), )
if mibBuilder.loadTexts: vpnTunnelTable.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelTable.setDescription('A list of tunnels.')
vpnTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-VPN-MIB", "vpnTunnelLocalID"), (0, "NETWORK-ALCHEMY-VPN-MIB", "vpnTunnelIPAddress"))
if mibBuilder.loadTexts: vpnTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelEntry.setDescription('A table entry containing information about a tunnel.')
vpnTunnelLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelLocalID.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelLocalID.setDescription('Tunnel local ID.')
vpnTunnelIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelIPAddress.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelIPAddress.setDescription('Tunnel IP Address.')
vpnTunnelRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelRemoteID.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelRemoteID.setDescription('Tunnel remote ID.')
vpnTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("l2tp", 1), ("pptp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelType.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelType.setDescription('Tunnel type: ANY=0, L2TP=1, PPTP=2.')
vpnTunnelActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelActive.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelActive.setDescription('INACTIVE=0, ACTIVE!=0')
vpnTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnTunnelState.setStatus('current')
if mibBuilder.loadTexts: vpnTunnelState.setDescription('Tunnel states For PPTP tunnel type: PPP_STATE_INACTIVE 0 PPP_STATE_SUSPENDED 1 PPP_STATE_ACTIVE 2 For L2TP tunnel type: L2TP_IDLE 0 L2TP_WAIT_REPLY 1 L2TP_WAIT_CONN 2 L2TP_ESTABLISHED 3 L2TP_WAIT_FINAL_ACK 4')
vpnSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8), )
if mibBuilder.loadTexts: vpnSessionTable.setStatus('current')
if mibBuilder.loadTexts: vpnSessionTable.setDescription('A list of sessions for the given tunnel.')
vpnSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1), ).setIndexNames((0, "NETWORK-ALCHEMY-VPN-MIB", "vpnTunnelLocalID"), (0, "NETWORK-ALCHEMY-VPN-MIB", "vpnTunnelIPAddress"), (0, "NETWORK-ALCHEMY-VPN-MIB", "vpnSessionLocalID"), (0, "NETWORK-ALCHEMY-VPN-MIB", "vpnSessionIPAddress"))
if mibBuilder.loadTexts: vpnSessionEntry.setStatus('current')
if mibBuilder.loadTexts: vpnSessionEntry.setDescription('A table entry containing information about a session on the given tunnel.')
vpnSessionLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionLocalID.setStatus('current')
if mibBuilder.loadTexts: vpnSessionLocalID.setDescription('Session local ID.')
vpnSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionIPAddress.setStatus('current')
if mibBuilder.loadTexts: vpnSessionIPAddress.setDescription('Session IP Address.')
vpnSessionRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionRemoteID.setStatus('current')
if mibBuilder.loadTexts: vpnSessionRemoteID.setDescription('Session remote ID.')
vpnSessionPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionPacketsIn.setStatus('current')
if mibBuilder.loadTexts: vpnSessionPacketsIn.setDescription('Number of input packets.')
vpnSessionPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionPacketsOut.setStatus('current')
if mibBuilder.loadTexts: vpnSessionPacketsOut.setDescription('Number of output packets.')
vpnSessionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionActive.setStatus('current')
if mibBuilder.loadTexts: vpnSessionActive.setDescription('INACTIVE=0, ACTIVE!=0')
vpnSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("suspended", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionState.setStatus('current')
if mibBuilder.loadTexts: vpnSessionState.setDescription('Session States: PPP_STATE_INACTIVE 0 PPP_STATE_SUSPENDED 1 PPP_STATE_ACTIVE 2')
vpnSessionAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("chap", 1), ("mschap", 2), ("pap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionAuthType.setStatus('current')
if mibBuilder.loadTexts: vpnSessionAuthType.setDescription('Authenication type VPN_AUTHENTICATION_NONE 0 VPN_AUTHENTICATION_CHAP 1 VPN_AUTHENTICATION_MSCHAP 2 VPN_AUTHENTICATION_PAP 3')
vpnSessionSendFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionSendFlags.setStatus('current')
if mibBuilder.loadTexts: vpnSessionSendFlags.setDescription('Send flags MS_MPPC 0x00000001 MS_MPPE_LM_40 0x00000020 MS_MPPE_128 0x00000040 MS_MPPX_STATELESS 0x01000000 MSCCP_ENCRYPTION (MS_MPPE_LM_40 | MS_MPPE_128) MSCCP_COMPRESSION (MS_MPPC) MSCCP_STATELESS (MS_MPPX_STATELESS) MSCCP_ALL (MSCCP_COMPRESSION | MSCCP_ENCRYPTION | MSCCP_STATELESS)')
vpnSessionRecvFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionRecvFlags.setStatus('current')
if mibBuilder.loadTexts: vpnSessionRecvFlags.setDescription('Received flags. MS_MPPC 0x00000001 MS_MPPE_LM_40 0x00000020 MS_MPPE_128 0x00000040 MS_MPPX_STATELESS 0x01000000 MSCCP_ENCRYPTION (MS_MPPE_LM_40 | MS_MPPE_128) MSCCP_COMPRESSION (MS_MPPC) MSCCP_STATELESS (MS_MPPX_STATELESS) MSCCP_ALL (MSCCP_COMPRESSION | MSCCP_ENCRYPTION | MSCCP_STATELESS)')
vpnSessionUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionUsername.setStatus('current')
if mibBuilder.loadTexts: vpnSessionUsername.setDescription('Session Username.')
vpnSessionLifetimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2972, 2, 4, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnSessionLifetimeSeconds.setStatus('current')
if mibBuilder.loadTexts: vpnSessionLifetimeSeconds.setDescription('Number of seconds the session has been active.')
mibBuilder.exportSymbols("NETWORK-ALCHEMY-VPN-MIB", vpnTunnelLocalID=vpnTunnelLocalID, vpnSessionRemoteID=vpnSessionRemoteID, vpnSessionRecvFlags=vpnSessionRecvFlags, vpnTunnelRemoteID=vpnTunnelRemoteID, vpnSessionLocalID=vpnSessionLocalID, vpnPPTPTS=vpnPPTPTS, vpnSessionEntry=vpnSessionEntry, vpnSessionAuthType=vpnSessionAuthType, vpnTunnelEntry=vpnTunnelEntry, vpnTunnelIPAddress=vpnTunnelIPAddress, vpnSessionPacketsIn=vpnSessionPacketsIn, vpnSessionActive=vpnSessionActive, vpnSessionPacketsOut=vpnSessionPacketsOut, vpnTunnelState=vpnTunnelState, vpnSessionState=vpnSessionState, vpnActiveL2TPSessions=vpnActiveL2TPSessions, vpnL2TPTunnels=vpnL2TPTunnels, vpnTunnelTable=vpnTunnelTable, vpnTunnelActive=vpnTunnelActive, vpnSessionTable=vpnSessionTable, PYSNMP_MODULE_ID=networkAlchemyVPNMIB, vpnSessionLifetimeSeconds=vpnSessionLifetimeSeconds, vpnSessionSendFlags=vpnSessionSendFlags, vpnTunnelType=vpnTunnelType, vpnActivePPTPTS=vpnActivePPTPTS, vpnSessionIPAddress=vpnSessionIPAddress, vpnL2TPSessions=vpnL2TPSessions, networkAlchemyVPNMIB=networkAlchemyVPNMIB, vpnSessionUsername=vpnSessionUsername, vpnActiveL2TPTunnels=vpnActiveL2TPTunnels)
