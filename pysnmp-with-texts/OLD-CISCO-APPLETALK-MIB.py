#
# PySNMP MIB module OLD-CISCO-APPLETALK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-APPLETALK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
temporary, = mibBuilder.importSymbols("CISCO-SMI", "temporary")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Unsigned32, ObjectIdentity, Integer32, NotificationType, TimeTicks, IpAddress, MibIdentifier, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Unsigned32", "ObjectIdentity", "Integer32", "NotificationType", "TimeTicks", "IpAddress", "MibIdentifier", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tmpappletalk = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 3))
atInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atInput.setStatus('mandatory')
if mibBuilder.loadTexts: atInput.setDescription('Total input count of number of AppleTalk packets.')
atLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atLocal.setStatus('mandatory')
if mibBuilder.loadTexts: atLocal.setDescription('Total count of AppleTalk input packets for this host.')
atBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBcastin.setStatus('mandatory')
if mibBuilder.loadTexts: atBcastin.setDescription('Total count of number of AppleTalk input broadcast packets.')
atForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atForward.setStatus('mandatory')
if mibBuilder.loadTexts: atForward.setDescription('Total count of number of AppleTalk packets forwarded.')
atBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBcastout.setStatus('mandatory')
if mibBuilder.loadTexts: atBcastout.setDescription('Total count of number of AppleTalk output broadcast packets.')
atChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atChksum.setStatus('mandatory')
if mibBuilder.loadTexts: atChksum.setDescription('Total count of number of AppleTalk input packets with checksum errors.')
atNotgate = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNotgate.setStatus('mandatory')
if mibBuilder.loadTexts: atNotgate.setDescription('Total count of AppleTalk input packets received while not routing.')
atHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atHopcnt.setStatus('mandatory')
if mibBuilder.loadTexts: atHopcnt.setDescription('Total count of number of AppleTalk input packets that have exceeded the maximum hop count.')
atNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoaccess.setStatus('mandatory')
if mibBuilder.loadTexts: atNoaccess.setDescription('Total number of AppleTalk packets dropped due to access control.')
atNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: atNoroute.setDescription('Total count of number of AppleTalk packets dropped due to no route.')
atNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoencap.setStatus('mandatory')
if mibBuilder.loadTexts: atNoencap.setDescription('Total count of number of AppleTalk packets dropped due to output encapsulation failure.')
atOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atOutput.setStatus('mandatory')
if mibBuilder.loadTexts: atOutput.setDescription('Total count of number of AppleTalk output packets.')
atInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atInmult.setStatus('mandatory')
if mibBuilder.loadTexts: atInmult.setDescription('Total count of number of AppleTalk input multicast packets.')
atRtmpin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtmpin.setStatus('mandatory')
if mibBuilder.loadTexts: atRtmpin.setDescription('Total count of number of AppleTalk RTMP packets received.')
atRtmpout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtmpout.setStatus('mandatory')
if mibBuilder.loadTexts: atRtmpout.setDescription('Total count of number of AppleTalk RTMP packets sent.')
atNbpin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNbpin.setStatus('mandatory')
if mibBuilder.loadTexts: atNbpin.setDescription('Total count of number of AppleTalk NBP packets received.')
atNbpout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNbpout.setStatus('mandatory')
if mibBuilder.loadTexts: atNbpout.setDescription('Total count of number of AppleTalk NBP packets sent.')
atAtp = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAtp.setStatus('mandatory')
if mibBuilder.loadTexts: atAtp.setDescription('Total count of number of AppleTalk ATP packets received.')
atZipin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZipin.setStatus('mandatory')
if mibBuilder.loadTexts: atZipin.setDescription('Total count of number of AppleTalk ZIP packets received.')
atZipout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZipout.setStatus('mandatory')
if mibBuilder.loadTexts: atZipout.setDescription('Total count of number of AppleTalk ZIP packets sent.')
atEcho = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEcho.setStatus('mandatory')
if mibBuilder.loadTexts: atEcho.setDescription('Total count of number of AppleTalk Echo packets received.')
atEchoill = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEchoill.setStatus('mandatory')
if mibBuilder.loadTexts: atEchoill.setDescription('Total count of number of illegal AppleTalk Echo packets received.')
atDdpshort = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdpshort.setStatus('mandatory')
if mibBuilder.loadTexts: atDdpshort.setDescription('Total count of number of short AppleTalk DDP packets received.')
atDdplong = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdplong.setStatus('mandatory')
if mibBuilder.loadTexts: atDdplong.setDescription('Total count of number of long AppleTalk DDP packets received.')
atDdpbad = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdpbad.setStatus('mandatory')
if mibBuilder.loadTexts: atDdpbad.setDescription('Total count of number of illegal sized AppleTalk DDP packets received.')
atNobuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNobuffer.setStatus('mandatory')
if mibBuilder.loadTexts: atNobuffer.setDescription('Total count of number of AppleTalk packets lost due to no memory.')
atArpreq = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpreq.setStatus('mandatory')
if mibBuilder.loadTexts: atArpreq.setDescription('Total count of number of input AppleTalk ARP request packets.')
atArpreply = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpreply.setStatus('mandatory')
if mibBuilder.loadTexts: atArpreply.setDescription('Total count of number of AppleTalk ARP reply packets output.')
atArpprobe = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpprobe.setStatus('mandatory')
if mibBuilder.loadTexts: atArpprobe.setDescription('Total count of number of input AppleTalk ARP probe packets.')
atUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: atUnknown.setDescription('Total count of number of unknown AppleTalk input packets.')
mibBuilder.exportSymbols("OLD-CISCO-APPLETALK-MIB", atDdpshort=atDdpshort, atEchoill=atEchoill, atNoencap=atNoencap, tmpappletalk=tmpappletalk, atChksum=atChksum, atArpreply=atArpreply, atAtp=atAtp, atBcastin=atBcastin, atNbpout=atNbpout, atInput=atInput, atHopcnt=atHopcnt, atNobuffer=atNobuffer, atInmult=atInmult, atArpprobe=atArpprobe, atDdpbad=atDdpbad, atNbpin=atNbpin, atBcastout=atBcastout, atRtmpout=atRtmpout, atArpreq=atArpreq, atNotgate=atNotgate, atZipout=atZipout, atUnknown=atUnknown, atRtmpin=atRtmpin, atOutput=atOutput, atNoaccess=atNoaccess, atNoroute=atNoroute, atDdplong=atDdplong, atZipin=atZipin, atForward=atForward, atLocal=atLocal, atEcho=atEcho)
